
g:/tmp/test2/Spudnik-SD-Photo/target/1.5.2/electron/Spudnik-SD-Photo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ea30  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  0808ea50  0808ea50  0001ea50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  0808ea58  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000140  20000000  0808ea5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f94  20000140  20000140  00040140  2**2
                  ALLOC
  7 .module_info_suffix 00000028  0808eb9c  0808eb9c  0003eb9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0808ebc4  0808ebc4  0003ebc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001fbeac  00000000  00000000  0003ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002b311  00000000  00000000  0023aa74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00031ab6  00000000  00000000  00265d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003cb0  00000000  00000000  0029783b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006790  00000000  00000000  0029b4eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c6cd  00000000  00000000  002a1c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006b536  00000000  00000000  002ee348  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d0fe6  00000000  00000000  0035987e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000116e4  00000000  00000000  0042a864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00a fa82 	bl	808a53a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00a fa87 	bl	808a550 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808ea5c 	.word	0x0808ea5c
 8080050:	20000140 	.word	0x20000140
 8080054:	20000140 	.word	0x20000140
 8080058:	200010d4 	.word	0x200010d4
 808005c:	200010d4 	.word	0x200010d4

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f007 fb49 	bl	80876f8 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808e9a4 	.word	0x0808e9a4
 8080088:	0808ea48 	.word	0x0808ea48

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 b97e 	b.w	808138c <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fcb9 	bl	8080a08 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f007 baef 	b.w	808767c <_post_loop>

0808009e <_Znwj>:
 808009e:	f005 bf67 	b.w	8085f70 <malloc>

080800a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80800a2:	f005 bf65 	b.w	8085f70 <malloc>

080800a6 <_ZdlPv>:
 80800a6:	f005 bf6b 	b.w	8085f80 <free>

080800aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800aa:	f005 bf69 	b.w	8085f80 <free>
	...

080800b0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80800b0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b2:	4a03      	ldr	r2, [pc, #12]	; (80800c0 <__cxa_pure_virtual+0x10>)
 80800b4:	2100      	movs	r1, #0
 80800b6:	200c      	movs	r0, #12
 80800b8:	f005 fe5e 	bl	8085d78 <panic_>
 80800bc:	e7fe      	b.n	80800bc <__cxa_pure_virtual+0xc>
 80800be:	bf00      	nop
 80800c0:	080859f9 	.word	0x080859f9

080800c4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c4:	7800      	ldrb	r0, [r0, #0]
 80800c6:	fab0 f080 	clz	r0, r0
 80800ca:	0940      	lsrs	r0, r0, #5
 80800cc:	4770      	bx	lr

080800ce <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ce:	2301      	movs	r3, #1
 80800d0:	7003      	strb	r3, [r0, #0]
 80800d2:	4770      	bx	lr

080800d4 <_ZN16ArduinoOutStream5putchEc>:
  /**
   * Internal do not use
   * \param[in] c
   */
  void putch(char c) {
    if (c == '\n') {
 80800d4:	290a      	cmp	r1, #10
  /// @cond SHOW_PROTECTED
  /**
   * Internal do not use
   * \param[in] c
   */
  void putch(char c) {
 80800d6:	b570      	push	{r4, r5, r6, lr}
 80800d8:	4605      	mov	r5, r0
 80800da:	460c      	mov	r4, r1
    if (c == '\n') {
 80800dc:	d104      	bne.n	80800e8 <_ZN16ArduinoOutStream5putchEc+0x14>
      m_pr->write('\r');
 80800de:	6840      	ldr	r0, [r0, #4]
 80800e0:	210d      	movs	r1, #13
 80800e2:	6803      	ldr	r3, [r0, #0]
 80800e4:	689b      	ldr	r3, [r3, #8]
 80800e6:	4798      	blx	r3
    }
    m_pr->write(c);
 80800e8:	6868      	ldr	r0, [r5, #4]
 80800ea:	4621      	mov	r1, r4
  }
 80800ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   */
  void putch(char c) {
    if (c == '\n') {
      m_pr->write('\r');
    }
    m_pr->write(c);
 80800f0:	6803      	ldr	r3, [r0, #0]
 80800f2:	689b      	ldr	r3, [r3, #8]
 80800f4:	4718      	bx	r3

080800f6 <_ZN16ArduinoOutStream7seekoffElN8ios_base7seekdirE>:
  }
  bool seekoff(off_type off, seekdir way) {
    (void)off;
    (void)way;
    return false;
  }
 80800f6:	2000      	movs	r0, #0
 80800f8:	4770      	bx	lr

080800fa <_ZN16ArduinoOutStream7seekposEm>:
  bool seekpos(pos_type pos) {
    (void)pos;
    return false;
  }
 80800fa:	2000      	movs	r0, #0
 80800fc:	4770      	bx	lr

080800fe <_ZN16ArduinoOutStream4syncEv>:
  bool sync() {
    return true;
  }
 80800fe:	2001      	movs	r0, #1
 8080100:	4770      	bx	lr

08080102 <_ZN16ArduinoOutStream7tellposEv>:
  pos_type tellpos() {
    return 0;
  }
 8080102:	2000      	movs	r0, #0
 8080104:	4770      	bx	lr

08080106 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8080106:	6803      	ldr	r3, [r0, #0]
 8080108:	4718      	bx	r3

0808010a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808010a:	2a01      	cmp	r2, #1
 808010c:	d002      	beq.n	8080114 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 808010e:	2a02      	cmp	r2, #2
 8080110:	d002      	beq.n	8080118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 8080112:	e004      	b.n	808011e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080114:	6001      	str	r1, [r0, #0]
	      break;
 8080116:	e002      	b.n	808011e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080118:	680b      	ldr	r3, [r1, #0]
 808011a:	b100      	cbz	r0, 808011e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 808011c:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808011e:	2000      	movs	r0, #0
 8080120:	4770      	bx	lr

08080122 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080122:	4770      	bx	lr

08080124 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8080124:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 8080126:	2301      	movs	r3, #1
 8080128:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 808012a:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808012c:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 808012e:	b10b      	cbz	r3, 8080134 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 8080130:	68c0      	ldr	r0, [r0, #12]
 8080132:	e006      	b.n	8080142 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 8080134:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8080136:	b128      	cbz	r0, 8080144 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080138:	6883      	ldr	r3, [r0, #8]
 808013a:	b90b      	cbnz	r3, 8080140 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 808013c:	f008 fd96 	bl	8088c6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080140:	68c3      	ldr	r3, [r0, #12]
 8080142:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 8080144:	2301      	movs	r3, #1
 8080146:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 8080148:	2000      	movs	r0, #0
    }
 808014a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 808014e:	f005 bcbb 	b.w	8085ac8 <os_thread_exit>

08080152 <_ZN6SdFileD0Ev>:
 8080152:	b510      	push	{r4, lr}
 8080154:	4604      	mov	r4, r0
 8080156:	212c      	movs	r1, #44	; 0x2c
 8080158:	f008 fcbc 	bl	8088ad4 <_ZdlPvj>
 808015c:	4620      	mov	r0, r4
 808015e:	bd10      	pop	{r4, pc}

08080160 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080160:	3008      	adds	r0, #8
 8080162:	f002 bb0b 	b.w	808277c <_ZN7FatFile5writeEPKvj>
	...

08080168 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808016a:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 808016c:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 808016e:	4608      	mov	r0, r1
 8080170:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 8080172:	b133      	cbz	r3, 8080182 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 8080174:	b93d      	cbnz	r5, 8080186 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 8080176:	490c      	ldr	r1, [pc, #48]	; (80801a8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080178:	b004      	add	sp, #16
 808017a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 808017e:	f006 bd63 	b.w	8086c48 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 8080182:	4b0a      	ldr	r3, [pc, #40]	; (80801ac <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 8080184:	e000      	b.n	8080188 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 8080186:	4b0a      	ldr	r3, [pc, #40]	; (80801b0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080188:	7b16      	ldrb	r6, [r2, #12]
 808018a:	4c0a      	ldr	r4, [pc, #40]	; (80801b4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 808018c:	490a      	ldr	r1, [pc, #40]	; (80801b8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808018e:	7b52      	ldrb	r2, [r2, #13]
 8080190:	2e01      	cmp	r6, #1
 8080192:	bf08      	it	eq
 8080194:	4621      	moveq	r1, r4
 8080196:	9202      	str	r2, [sp, #8]
 8080198:	9101      	str	r1, [sp, #4]
 808019a:	9500      	str	r5, [sp, #0]
 808019c:	4a07      	ldr	r2, [pc, #28]	; (80801bc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 808019e:	2100      	movs	r1, #0
 80801a0:	f006 fd92 	bl	8086cc8 <_ZN5Print11printf_implEbPKcz>
  }
 80801a4:	b004      	add	sp, #16
 80801a6:	bd70      	pop	{r4, r5, r6, pc}
 80801a8:	0808d35d 	.word	0x0808d35d
 80801ac:	0808df27 	.word	0x0808df27
 80801b0:	0808d34c 	.word	0x0808d34c
 80801b4:	0808d355 	.word	0x0808d355
 80801b8:	0808d359 	.word	0x0808d359
 80801bc:	0808d373 	.word	0x0808d373

080801c0 <_Z15watchdogHandlerv>:
  // Do not attempt to Particle.publish(), use Cellular.command()
  // or similar functions. You can save data to a retained variable
  // here safetly so you know the watchdog triggered when you 
  // restart.
  // In 2.0.0 and later, RESET_NO_WAIT prevents notifying the cloud of a pending reset
  System.reset();
 80801c0:	f006 b999 	b.w	80864f6 <_ZN11SystemClass5resetEv>

080801c4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80801c4:	b510      	push	{r4, lr}
 80801c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80801c8:	6880      	ldr	r0, [r0, #8]
 80801ca:	b108      	cbz	r0, 80801d0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80801cc:	f005 fc64 	bl	8085a98 <os_mutex_recursive_destroy>
 80801d0:	4620      	mov	r0, r4
 80801d2:	bd10      	pop	{r4, pc}

080801d4 <_ZN16ArduinoOutStream6putstrEPKc>:
    if (c == '\n') {
      m_pr->write('\r');
    }
    m_pr->write(c);
  }
  void putstr(const char* str) {
 80801d4:	b570      	push	{r4, r5, r6, lr}
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80801d6:	460c      	mov	r4, r1
 80801d8:	b159      	cbz	r1, 80801f2 <_ZN16ArduinoOutStream6putstrEPKc+0x1e>
    m_pr->write(str);
 80801da:	6845      	ldr	r5, [r0, #4]
      return write((const uint8_t *)str, strlen(str));
 80801dc:	4608      	mov	r0, r1
 80801de:	f00a ff37 	bl	808b050 <strlen>
 80801e2:	682b      	ldr	r3, [r5, #0]
 80801e4:	4602      	mov	r2, r0
 80801e6:	4621      	mov	r1, r4
 80801e8:	4628      	mov	r0, r5
  }
 80801ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80801ee:	68db      	ldr	r3, [r3, #12]
 80801f0:	4718      	bx	r3
 80801f2:	bd70      	pop	{r4, r5, r6, pc}

080801f4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80801f4:	b510      	push	{r4, lr}
 80801f6:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80801f8:	6800      	ldr	r0, [r0, #0]
 80801fa:	b108      	cbz	r0, 8080200 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80801fc:	f005 fec0 	bl	8085f80 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080200:	4620      	mov	r0, r4
 8080202:	bd10      	pop	{r4, pc}

08080204 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080204:	b507      	push	{r0, r1, r2, lr}
 8080206:	ab02      	add	r3, sp, #8
 8080208:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808020c:	2201      	movs	r2, #1
 808020e:	4619      	mov	r1, r3
 8080210:	3008      	adds	r0, #8
 8080212:	f002 fab3 	bl	808277c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080216:	b003      	add	sp, #12
 8080218:	f85d fb04 	ldr.w	pc, [sp], #4

0808021c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808021c:	2200      	movs	r2, #0
 808021e:	4611      	mov	r1, r2
 8080220:	6840      	ldr	r0, [r0, #4]
 8080222:	f005 be2d 	b.w	8085e80 <network_ready>

08080226 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080226:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080228:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808022a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808022c:	b113      	cbz	r3, 8080234 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808022e:	2203      	movs	r2, #3
 8080230:	4601      	mov	r1, r0
 8080232:	4798      	blx	r3
    }
 8080234:	4620      	mov	r0, r4
 8080236:	bd10      	pop	{r4, pc}

08080238 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 8080238:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808023a:	f005 fbed 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808023e:	4b01      	ldr	r3, [pc, #4]	; (8080244 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 8080240:	6018      	str	r0, [r3, #0]
 8080242:	bd08      	pop	{r3, pc}
 8080244:	20000ecc 	.word	0x20000ecc

08080248 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
	}
	ApplicationWatchdog(std::chrono::milliseconds ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 8080248:	b570      	push	{r4, r5, r6, lr}
 808024a:	461d      	mov	r5, r3
 808024c:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808024e:	2300      	movs	r3, #0
 8080250:	4604      	mov	r4, r0
 8080252:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8080254:	b122      	cbz	r2, 8080260 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080256:	4b27      	ldr	r3, [pc, #156]	; (80802f4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080258:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808025a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808025c:	4b26      	ldr	r3, [pc, #152]	; (80802f8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 808025e:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080260:	2300      	movs	r3, #0
 8080262:	60e3      	str	r3, [r4, #12]
 8080264:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 8080266:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080268:	b13b      	cbz	r3, 808027a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808026a:	2202      	movs	r2, #2
 808026c:	a902      	add	r1, sp, #8
 808026e:	1d20      	adds	r0, r4, #4
 8080270:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080272:	9b05      	ldr	r3, [sp, #20]
 8080274:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 8080276:	9b04      	ldr	r3, [sp, #16]
 8080278:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 808027a:	4920      	ldr	r1, [pc, #128]	; (80802fc <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb4>)
 808027c:	2014      	movs	r0, #20
 808027e:	f008 fc2d 	bl	8088adc <_ZnwjRKSt9nothrow_t>
 8080282:	b130      	cbz	r0, 8080292 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8080284:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 8080286:	7403      	strb	r3, [r0, #16]
 8080288:	6003      	str	r3, [r0, #0]
 808028a:	6043      	str	r3, [r0, #4]
 808028c:	6083      	str	r3, [r0, #8]
 808028e:	60c3      	str	r3, [r0, #12]
 8080290:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080292:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 8080294:	b1a0      	cbz	r0, 80802c0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 8080296:	4b1a      	ldr	r3, [pc, #104]	; (8080300 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb8>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080298:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 808029a:	6083      	str	r3, [r0, #8]
 808029c:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808029e:	4919      	ldr	r1, [pc, #100]	; (8080304 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xbc>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80802a0:	60dc      	str	r4, [r3, #12]
 80802a2:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80802a4:	4b18      	ldr	r3, [pc, #96]	; (8080308 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xc0>)
 80802a6:	e88d 0021 	stmia.w	sp, {r0, r5}
 80802aa:	3004      	adds	r0, #4
 80802ac:	f005 fbdc 	bl	8085a68 <os_thread_create>
 80802b0:	b930      	cbnz	r0, 80802c0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 80802b2:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 80802b4:	7c1b      	ldrb	r3, [r3, #16]
 80802b6:	b9a3      	cbnz	r3, 80802e2 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 80802b8:	2001      	movs	r0, #1
 80802ba:	f005 fb95 	bl	80859e8 <HAL_Delay_Milliseconds>
 80802be:	e7f8      	b.n	80802b2 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80802c0:	6965      	ldr	r5, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80802c2:	2300      	movs	r3, #0
 80802c4:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80802c6:	b165      	cbz	r5, 80802e2 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80802c8:	682e      	ldr	r6, [r5, #0]
 80802ca:	b136      	cbz	r6, 80802da <_ZN19ApplicationWatchdogC1EjPFvvEj+0x92>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80802cc:	4630      	mov	r0, r6
 80802ce:	f7ff ffaa 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80802d2:	2110      	movs	r1, #16
 80802d4:	4630      	mov	r0, r6
 80802d6:	f008 fbfd 	bl	8088ad4 <_ZdlPvj>
 80802da:	2114      	movs	r1, #20
 80802dc:	4628      	mov	r0, r5
 80802de:	f008 fbf9 	bl	8088ad4 <_ZdlPvj>
	{
		checkin();
 80802e2:	f7ff ffa9 	bl	8080238 <_ZN19ApplicationWatchdog7checkinEv>
 80802e6:	a802      	add	r0, sp, #8
 80802e8:	f7ff ff9d 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 80802ec:	4620      	mov	r0, r4
 80802ee:	b006      	add	sp, #24
 80802f0:	bd70      	pop	{r4, r5, r6, pc}
 80802f2:	bf00      	nop
 80802f4:	08080107 	.word	0x08080107
 80802f8:	0808010b 	.word	0x0808010b
 80802fc:	0808e370 	.word	0x0808e370
 8080300:	08088995 	.word	0x08088995
 8080304:	0808d391 	.word	0x0808d391
 8080308:	08080125 	.word	0x08080125

0808030c <_ZN7FatFile6existsEPKc>:
   * dirFile.exists("TOFIND.TXT") searches for "TOFIND.TXT" in  the directory
   * dirFile.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 808030c:	b500      	push	{lr}
 808030e:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080310:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 8080312:	460a      	mov	r2, r1
 8080314:	4601      	mov	r1, r0
 8080316:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080318:	f88d 3004 	strb.w	r3, [sp, #4]
 808031c:	f88d 3005 	strb.w	r3, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 8080320:	f002 f9c3 	bl	80826aa <_ZN7FatFile4openEPS_PKci>
  }
 8080324:	b00b      	add	sp, #44	; 0x2c
 8080326:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808032c <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 808032c:	4613      	mov	r3, r2
 808032e:	460a      	mov	r2, r1
 8080330:	4901      	ldr	r1, [pc, #4]	; (8080338 <_ZN7FatFile4openEPKci+0xc>)
 8080332:	6809      	ldr	r1, [r1, #0]
 8080334:	f002 b9b9 	b.w	80826aa <_ZN7FatFile4openEPS_PKci>
 8080338:	2000075c 	.word	0x2000075c

0808033c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 808033c:	b530      	push	{r4, r5, lr}
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 808033e:	4b1d      	ldr	r3, [pc, #116]	; (80803b4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 8080340:	b085      	sub	sp, #20
 8080342:	9300      	str	r3, [sp, #0]
 8080344:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080346:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 808034a:	f88d 3004 	strb.w	r3, [sp, #4]
 808034e:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080350:	4604      	mov	r4, r0
 8080352:	9302      	str	r3, [sp, #8]
 8080354:	7b13      	ldrb	r3, [r2, #12]
 8080356:	f88d 300c 	strb.w	r3, [sp, #12]
 808035a:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 808035c:	460a      	mov	r2, r1
 808035e:	f88d 300d 	strb.w	r3, [sp, #13]
 8080362:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 8080366:	466b      	mov	r3, sp
 8080368:	4628      	mov	r0, r5
 808036a:	f002 fe5f 	bl	808302c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 808036e:	b1f0      	cbz	r0, 80803ae <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 8080370:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080372:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 8080376:	4628      	mov	r0, r5
 8080378:	f002 f990 	bl	808269c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 808037c:	2101      	movs	r1, #1
 808037e:	4620      	mov	r0, r4
 8080380:	f002 fcfd 	bl	8082d7e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080384:	4601      	mov	r1, r0
 8080386:	b168      	cbz	r0, 80803a4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 8080388:	4621      	mov	r1, r4
 808038a:	4628      	mov	r0, r5
 808038c:	f001 ff71 	bl	8082272 <_ZN7FatFile8openRootEP9FatVolume>
 8080390:	b168      	cbz	r0, 80803ae <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080392:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 8080396:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 808039a:	bf16      	itet	ne
 808039c:	4b06      	ldrne	r3, [pc, #24]	; (80803b8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 808039e:	4618      	moveq	r0, r3
 80803a0:	601d      	strne	r5, [r3, #0]
 80803a2:	e005      	b.n	80803b0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 80803a4:	4620      	mov	r0, r4
 80803a6:	f002 fcea 	bl	8082d7e <_ZN9FatVolume4initEh>
 80803aa:	2800      	cmp	r0, #0
 80803ac:	d1ec      	bne.n	8080388 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 80803ae:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 80803b0:	b005      	add	sp, #20
 80803b2:	bd30      	pop	{r4, r5, pc}
 80803b4:	0808d2e0 	.word	0x0808d2e0
 80803b8:	2000075c 	.word	0x2000075c

080803bc <_Z5Blinkv>:

//*******************************************************************************************
//------------------------------ Functions --------------------------------------------------
//
void Blink()
     {
 80803bc:	b510      	push	{r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803be:	4c08      	ldr	r4, [pc, #32]	; (80803e0 <_Z5Blinkv+0x24>)
 80803c0:	2101      	movs	r1, #1
 80803c2:	8820      	ldrh	r0, [r4, #0]
 80803c4:	f008 fa79 	bl	80888ba <digitalWrite>
            delay(20);                   // Waits for a sec
 80803c8:	2014      	movs	r0, #20
 80803ca:	f006 fdd9 	bl	8086f80 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 80803ce:	8820      	ldrh	r0, [r4, #0]
 80803d0:	2100      	movs	r1, #0
 80803d2:	f008 fa72 	bl	80888ba <digitalWrite>
            delay(5);
          }
     }
 80803d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(20);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
 80803da:	2005      	movs	r0, #5
 80803dc:	f006 bdd0 	b.w	8086f80 <delay>
 80803e0:	20000008 	.word	0x20000008

080803e4 <_Z12LowBattBlinkv>:
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 80803e4:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803e6:	4d0a      	ldr	r5, [pc, #40]	; (8080410 <_Z12LowBattBlinkv+0x2c>)
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 80803e8:	2402      	movs	r4, #2
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803ea:	2101      	movs	r1, #1
 80803ec:	8828      	ldrh	r0, [r5, #0]
 80803ee:	f008 fa64 	bl	80888ba <digitalWrite>
            delay(2000);                   // Waits for a sec
 80803f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80803f6:	f006 fdc3 	bl	8086f80 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 80803fa:	2100      	movs	r1, #0
 80803fc:	8828      	ldrh	r0, [r5, #0]
 80803fe:	f008 fa5c 	bl	80888ba <digitalWrite>
            delay(2000);
 8080402:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080406:	f006 fdbb 	bl	8086f80 <delay>
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
          for (size_t i = 0; i < 2; i++)
 808040a:	3c01      	subs	r4, #1
 808040c:	d1ed      	bne.n	80803ea <_Z12LowBattBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(2000);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(2000);
          }
     }
 808040e:	bd38      	pop	{r3, r4, r5, pc}
 8080410:	20000008 	.word	0x20000008

08080414 <_Z15WeakSignalBlinkv>:

void WeakSignalBlink()
     {
 8080414:	b570      	push	{r4, r5, r6, lr}
          for (size_t i = 0; i < 10; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080416:	4e10      	ldr	r6, [pc, #64]	; (8080458 <_Z15WeakSignalBlinkv+0x44>)
            delay(2000);
          }
     }

void WeakSignalBlink()
     {
 8080418:	240a      	movs	r4, #10
          for (size_t i = 0; i < 10; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808041a:	2101      	movs	r1, #1
 808041c:	8830      	ldrh	r0, [r6, #0]
 808041e:	f008 fa4c 	bl	80888ba <digitalWrite>
            delay(150);                   // Waits for a sec
 8080422:	2096      	movs	r0, #150	; 0x96
 8080424:	f006 fdac 	bl	8086f80 <delay>
            digitalWrite(ledPin, LOW);    // Sets the LED off
 8080428:	2100      	movs	r1, #0
 808042a:	8830      	ldrh	r0, [r6, #0]
 808042c:	f008 fa45 	bl	80888ba <digitalWrite>
            delay(150);
 8080430:	2096      	movs	r0, #150	; 0x96
 8080432:	f006 fda5 	bl	8086f80 <delay>
          }
     }

void WeakSignalBlink()
     {
          for (size_t i = 0; i < 10; i++)
 8080436:	3c01      	subs	r4, #1
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080438:	4d07      	ldr	r5, [pc, #28]	; (8080458 <_Z15WeakSignalBlinkv+0x44>)
          }
     }

void WeakSignalBlink()
     {
          for (size_t i = 0; i < 10; i++)
 808043a:	d1ee      	bne.n	808041a <_Z15WeakSignalBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(150);                   // Waits for a sec
            digitalWrite(ledPin, LOW);    // Sets the LED off
            delay(150);
          }
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808043c:	2101      	movs	r1, #1
 808043e:	8828      	ldrh	r0, [r5, #0]
 8080440:	f008 fa3b 	bl	80888ba <digitalWrite>
            delay(550);                   // Waits for a sec
 8080444:	f240 2026 	movw	r0, #550	; 0x226
 8080448:	f006 fd9a 	bl	8086f80 <delay>
            digitalWrite(ledPin, LOW);    // Sets the LED off
 808044c:	4621      	mov	r1, r4
 808044e:	8828      	ldrh	r0, [r5, #0]
     }
 8080450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            digitalWrite(ledPin, LOW);    // Sets the LED off
            delay(150);
          }
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(550);                   // Waits for a sec
            digitalWrite(ledPin, LOW);    // Sets the LED off
 8080454:	f008 ba31 	b.w	80888ba <digitalWrite>
 8080458:	20000008 	.word	0x20000008

0808045c <_Z11UploadBlinkv>:
     }

void UploadBlink()
     {
 808045c:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808045e:	4c11      	ldr	r4, [pc, #68]	; (80804a4 <_Z11UploadBlinkv+0x48>)
 8080460:	2101      	movs	r1, #1
 8080462:	8820      	ldrh	r0, [r4, #0]
 8080464:	f008 fa29 	bl	80888ba <digitalWrite>
            delay(500);                   // Waits for a sec
 8080468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808046c:	f006 fd88 	bl	8086f80 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080470:	2100      	movs	r1, #0
 8080472:	8820      	ldrh	r0, [r4, #0]
 8080474:	f008 fa21 	bl	80888ba <digitalWrite>
            delay(1000);
 8080478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808047c:	f006 fd80 	bl	8086f80 <delay>
 8080480:	2504      	movs	r5, #4
          }
          for (size_t i = 0; i < 4; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080482:	2101      	movs	r1, #1
 8080484:	8820      	ldrh	r0, [r4, #0]
 8080486:	f008 fa18 	bl	80888ba <digitalWrite>
            delay(50);                   // Waits for a sec
 808048a:	2032      	movs	r0, #50	; 0x32
 808048c:	f006 fd78 	bl	8086f80 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080490:	2100      	movs	r1, #0
 8080492:	8820      	ldrh	r0, [r4, #0]
 8080494:	f008 fa11 	bl	80888ba <digitalWrite>
            delay(50);
 8080498:	2032      	movs	r0, #50	; 0x32
 808049a:	f006 fd71 	bl	8086f80 <delay>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(500);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(1000);
          }
          for (size_t i = 0; i < 4; i++)
 808049e:	3d01      	subs	r5, #1
 80804a0:	d1ef      	bne.n	8080482 <_Z11UploadBlinkv+0x26>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(50);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(50);
          }
     }
 80804a2:	bd38      	pop	{r3, r4, r5, pc}
 80804a4:	20000008 	.word	0x20000008

080804a8 <_Z12checkBatteryff>:

     int checkBattery(float charge,float V)
       {
 80804a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 80804aa:	491d      	ldr	r1, [pc, #116]	; (8080520 <_Z12checkBatteryff+0x78>)
            delay(50);
          }
     }

     int checkBattery(float charge,float V)
       {
 80804ac:	4605      	mov	r5, r0
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 80804ae:	f009 fcdd 	bl	8089e6c <__aeabi_fcmpgt>
 80804b2:	b330      	cbz	r0, 8080502 <_Z12checkBatteryff+0x5a>
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
 80804b4:	491b      	ldr	r1, [pc, #108]	; (8080524 <_Z12checkBatteryff+0x7c>)
 80804b6:	4628      	mov	r0, r5
 80804b8:	f009 fcd8 	bl	8089e6c <__aeabi_fcmpgt>
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 80804bc:	491a      	ldr	r1, [pc, #104]	; (8080528 <_Z12checkBatteryff+0x80>)
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 80804be:	2800      	cmp	r0, #0
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 80804c0:	4628      	mov	r0, r5
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 80804c2:	bf14      	ite	ne
 80804c4:	f44f 7496 	movne.w	r4, #300	; 0x12c
 80804c8:	f44f 7416 	moveq.w	r4, #600	; 0x258
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 80804cc:	f009 fcce 	bl	8089e6c <__aeabi_fcmpgt>
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 80804d0:	4916      	ldr	r1, [pc, #88]	; (808052c <_Z12checkBatteryff+0x84>)
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 80804d2:	2800      	cmp	r0, #0
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 80804d4:	4628      	mov	r0, r5
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 80804d6:	bf18      	it	ne
 80804d8:	2478      	movne	r4, #120	; 0x78
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 80804da:	f009 fcc7 	bl	8089e6c <__aeabi_fcmpgt>
                                 if (charge>75 )   min = 60;     // 30 minutes
 80804de:	4914      	ldr	r1, [pc, #80]	; (8080530 <_Z12checkBatteryff+0x88>)
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 80804e0:	2800      	cmp	r0, #0
                                 if (charge>75 )   min = 60;     // 30 minutes
 80804e2:	4628      	mov	r0, r5
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 80804e4:	bf18      	it	ne
 80804e6:	245a      	movne	r4, #90	; 0x5a
                                 if (charge>75 )   min = 60;     // 30 minutes
 80804e8:	f009 fcc0 	bl	8089e6c <__aeabi_fcmpgt>
                                     if (charge>80 )   min = 30;      // 15 minutes;
 80804ec:	4911      	ldr	r1, [pc, #68]	; (8080534 <_Z12checkBatteryff+0x8c>)
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
                                 if (charge>75 )   min = 60;     // 30 minutes
 80804ee:	2800      	cmp	r0, #0
                                     if (charge>80 )   min = 30;      // 15 minutes;
 80804f0:	4628      	mov	r0, r5
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
                                 if (charge>75 )   min = 60;     // 30 minutes
 80804f2:	bf18      	it	ne
 80804f4:	243c      	movne	r4, #60	; 0x3c
                                     if (charge>80 )   min = 30;      // 15 minutes;
 80804f6:	f009 fcb9 	bl	8089e6c <__aeabi_fcmpgt>
 80804fa:	2800      	cmp	r0, #0
 80804fc:	bf18      	it	ne
 80804fe:	241e      	movne	r4, #30
 8080500:	e00b      	b.n	808051a <_Z12checkBatteryff+0x72>
                else
                 { // if battery below 25%, don't even try to connect but go to sleep for 9 hours
                   min = 432000;   // sleep 5 days if battery very low
              //   sprintf(publishStr, "not connecting, sleeping for %2i min to charge battery ", min);
              //     Serial.println(publishStr);
                   LowBattBlink();
 8080502:	f7ff ff6f 	bl	80803e4 <_Z12LowBattBlinkv>
                   // could add code to collect data and write to SD card, or set flag to use later to skip connecting
                   //System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);
                  System.sleep(SLEEP_MODE_DEEP, sleepInterval * min);
 8080506:	4b0c      	ldr	r3, [pc, #48]	; (8080538 <_Z12checkBatteryff+0x90>)
 8080508:	4c0c      	ldr	r4, [pc, #48]	; (808053c <_Z12checkBatteryff+0x94>)
 808050a:	681a      	ldr	r2, [r3, #0]
 808050c:	4b0c      	ldr	r3, [pc, #48]	; (8080540 <_Z12checkBatteryff+0x98>)
 808050e:	4362      	muls	r2, r4
 8080510:	681b      	ldr	r3, [r3, #0]
 8080512:	2101      	movs	r1, #1
 8080514:	4668      	mov	r0, sp
 8080516:	f005 fff1 	bl	80864fc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
                 }
           return min;
       }  // end of checkBattery
 808051a:	4620      	mov	r0, r4
 808051c:	b003      	add	sp, #12
 808051e:	bd30      	pop	{r4, r5, pc}
 8080520:	41480000 	.word	0x41480000
 8080524:	41c80000 	.word	0x41c80000
 8080528:	42480000 	.word	0x42480000
 808052c:	42820000 	.word	0x42820000
 8080530:	42960000 	.word	0x42960000
 8080534:	42a00000 	.word	0x42a00000
 8080538:	2000002c 	.word	0x2000002c
 808053c:	00069780 	.word	0x00069780
 8080540:	200006ec 	.word	0x200006ec

08080544 <_Z12getMedianNumPii>:
   return averageVoltage;
  }  // end of getAvolts

// calculate a median for set of values in buffer
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
 8080544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080546:	008b      	lsls	r3, r1, #2
 8080548:	330a      	adds	r3, #10
 808054a:	f023 0307 	bic.w	r3, r3, #7
 808054e:	af00      	add	r7, sp, #0
 8080550:	ebad 0d03 	sub.w	sp, sp, r3
 8080554:	466b      	mov	r3, sp
 8080556:	1e4a      	subs	r2, r1, #1
 8080558:	2400      	movs	r4, #0
    for (byte i = 0; i<iFilterLen; i++)
 808055a:	b2e5      	uxtb	r5, r4
 808055c:	42a9      	cmp	r1, r5
 808055e:	f104 0401 	add.w	r4, r4, #1
 8080562:	dc01      	bgt.n	8080568 <_Z12getMedianNumPii+0x24>
 8080564:	2400      	movs	r4, #0
 8080566:	e010      	b.n	808058a <_Z12getMedianNumPii+0x46>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
 8080568:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 808056c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
  }  // end of getAvolts

// calculate a median for set of values in buffer
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
 8080570:	e7f3      	b.n	808055a <_Z12getMedianNumPii+0x16>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
           {  if (bTab[i] > bTab[i + 1])
 8080572:	6806      	ldr	r6, [r0, #0]
 8080574:	f850 ef04 	ldr.w	lr, [r0, #4]!
 8080578:	3501      	adds	r5, #1
 808057a:	4576      	cmp	r6, lr
 808057c:	dd02      	ble.n	8080584 <_Z12getMedianNumPii+0x40>
              {  bTemp = bTab[i];
                 bTab[i] = bTab[i + 1];
 808057e:	f840 ec04 	str.w	lr, [r0, #-4]
                 bTab[i + 1] = bTemp;
 8080582:	6006      	str	r6, [r0, #0]
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 8080584:	4565      	cmp	r5, ip
 8080586:	dbf4      	blt.n	8080572 <_Z12getMedianNumPii+0x2e>
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
 8080588:	3401      	adds	r4, #1
 808058a:	4294      	cmp	r4, r2
 808058c:	da04      	bge.n	8080598 <_Z12getMedianNumPii+0x54>
 808058e:	4618      	mov	r0, r3
 8080590:	2500      	movs	r5, #0
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 8080592:	ebc4 0c02 	rsb	ip, r4, r2
 8080596:	e7f5      	b.n	8080584 <_Z12getMedianNumPii+0x40>
                 bTab[i] = bTab[i + 1];
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
 8080598:	f011 0f01 	tst.w	r1, #1
 808059c:	f04f 0402 	mov.w	r4, #2
 80805a0:	bf01      	itttt	eq
 80805a2:	fb91 f1f4 	sdiveq	r1, r1, r4
 80805a6:	eb03 0281 	addeq.w	r2, r3, r1, lsl #2
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 80805aa:	f853 0021 	ldreq.w	r0, [r3, r1, lsl #2]
 80805ae:	f852 3c04 	ldreq.w	r3, [r2, #-4]
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 80805b2:	bf13      	iteet	ne
 80805b4:	fb92 f2f4 	sdivne	r2, r2, r4
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 80805b8:	18c0      	addeq	r0, r0, r3
 80805ba:	fb90 f0f4 	sdiveq	r0, r0, r4
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 80805be:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
  return bTemp;
} //end getmedianNum
 80805c2:	46bd      	mov	sp, r7
 80805c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080805c8 <_Z6getSpCv>:
  float getDepth ()
  ...
*/
// get SpC value from sensor
  float getSpC()
   {
 80805c8:	b5f0      	push	{r4, r5, r6, r7, lr}
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80805ca:	4d43      	ldr	r5, [pc, #268]	; (80806d8 <_Z6getSpCv+0x110>)
  float getDepth ()
  ...
*/
// get SpC value from sensor
  float getSpC()
   {
 80805cc:	b0d1      	sub	sp, #324	; 0x144
      #define VREF 3.3      // analog reference voltage(Volt) of the ADC
      #define SCOUNT  40           // number of sample points to collect for averaging
      #define resolution 4095.0  // analog resolution of 4095 with Particle electron
      int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
 80805ce:	2400      	movs	r4, #0
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80805d0:	8828      	ldrh	r0, [r5, #0]
 80805d2:	f008 f98b 	bl	80888ec <analogRead>
 80805d6:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
           analogBufferIndex++;
 80805da:	3401      	adds	r4, #1
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
 80805dc:	2032      	movs	r0, #50	; 0x32
 80805de:	f006 fccf 	bl	8086f80 <delay>
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 80805e2:	2c28      	cmp	r4, #40	; 0x28
 80805e4:	d1f4      	bne.n	80805d0 <_Z6getSpCv+0x8>
 80805e6:	2100      	movs	r1, #0
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
 80805e8:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 80805ec:	a828      	add	r0, sp, #160	; 0xa0
 80805ee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 80805f2:	3101      	adds	r1, #1
 80805f4:	2928      	cmp	r1, #40	; 0x28
 80805f6:	d1f7      	bne.n	80805e8 <_Z6getSpCv+0x20>
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 80805f8:	f7ff ffa4 	bl	8080544 <_Z12getMedianNumPii>
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 80805fc:	f009 fa26 	bl	8089a4c <__aeabi_i2f>
 8080600:	4936      	ldr	r1, [pc, #216]	; (80806dc <_Z6getSpCv+0x114>)
 8080602:	f009 fa77 	bl	8089af4 <__aeabi_fmul>
 8080606:	4936      	ldr	r1, [pc, #216]	; (80806e0 <_Z6getSpCv+0x118>)
 8080608:	f009 fb28 	bl	8089c5c <__aeabi_fdiv>
 808060c:	f008 fdde 	bl	80891cc <__aeabi_f2d>
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080610:	a329      	add	r3, pc, #164	; (adr r3, 80806b8 <_Z6getSpCv+0xf0>)
 8080612:	e9d3 2300 	ldrd	r2, r3, [r3]
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 8080616:	4604      	mov	r4, r0
 8080618:	460d      	mov	r5, r1
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 808061a:	f008 fe2b 	bl	8089274 <__aeabi_dmul>
 808061e:	4622      	mov	r2, r4
 8080620:	462b      	mov	r3, r5
 8080622:	f008 fe27 	bl	8089274 <__aeabi_dmul>
 8080626:	4622      	mov	r2, r4
 8080628:	462b      	mov	r3, r5
 808062a:	f008 fe23 	bl	8089274 <__aeabi_dmul>
 808062e:	a324      	add	r3, pc, #144	; (adr r3, 80806c0 <_Z6getSpCv+0xf8>)
 8080630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080634:	4606      	mov	r6, r0
 8080636:	460f      	mov	r7, r1
 8080638:	4620      	mov	r0, r4
 808063a:	4629      	mov	r1, r5
 808063c:	f008 fe1a 	bl	8089274 <__aeabi_dmul>
 8080640:	4622      	mov	r2, r4
 8080642:	462b      	mov	r3, r5
 8080644:	f008 fe16 	bl	8089274 <__aeabi_dmul>
 8080648:	4602      	mov	r2, r0
 808064a:	460b      	mov	r3, r1
 808064c:	4630      	mov	r0, r6
 808064e:	4639      	mov	r1, r7
 8080650:	f008 fc5e 	bl	8088f10 <__adddf3>
 8080654:	a31c      	add	r3, pc, #112	; (adr r3, 80806c8 <_Z6getSpCv+0x100>)
 8080656:	e9d3 2300 	ldrd	r2, r3, [r3]
 808065a:	4606      	mov	r6, r0
 808065c:	460f      	mov	r7, r1
 808065e:	4620      	mov	r0, r4
 8080660:	4629      	mov	r1, r5
 8080662:	f008 fe07 	bl	8089274 <__aeabi_dmul>
 8080666:	4602      	mov	r2, r0
 8080668:	460b      	mov	r3, r1
 808066a:	4630      	mov	r0, r6
 808066c:	4639      	mov	r1, r7
 808066e:	f008 fc4f 	bl	8088f10 <__adddf3>
                                            //made more stable by the median filtering algorithm, and convert to voltage value
///      Serial.print(t2);   // temperature comes from a different sensor, outside this function.
///      Serial.println(" deg.C at start");
///      Serial.print("median analog reading= "); Serial.println(getMedianNum(analogBufferTemp,SCOUNT));
///      Serial.print("averageVoltage= "); Serial.println(averageVoltage);
      float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 8080672:	4b1c      	ldr	r3, [pc, #112]	; (80806e4 <_Z6getSpCv+0x11c>)
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080674:	4604      	mov	r4, r0
 8080676:	6818      	ldr	r0, [r3, #0]
 8080678:	460d      	mov	r5, r1
 808067a:	f008 fda7 	bl	80891cc <__aeabi_f2d>
 808067e:	2200      	movs	r2, #0
 8080680:	4b19      	ldr	r3, [pc, #100]	; (80806e8 <_Z6getSpCv+0x120>)
 8080682:	f008 fc43 	bl	8088f0c <__aeabi_dsub>
 8080686:	a312      	add	r3, pc, #72	; (adr r3, 80806d0 <_Z6getSpCv+0x108>)
 8080688:	e9d3 2300 	ldrd	r2, r3, [r3]
 808068c:	f008 fdf2 	bl	8089274 <__aeabi_dmul>
 8080690:	2200      	movs	r2, #0
 8080692:	4b16      	ldr	r3, [pc, #88]	; (80806ec <_Z6getSpCv+0x124>)
 8080694:	f008 fc3c 	bl	8088f10 <__adddf3>
 8080698:	f009 f8ce 	bl	8089838 <__aeabi_d2f>
 808069c:	f008 fd96 	bl	80891cc <__aeabi_f2d>
 80806a0:	4602      	mov	r2, r0
 80806a2:	460b      	mov	r3, r1
 80806a4:	4620      	mov	r0, r4
 80806a6:	4629      	mov	r1, r5
 80806a8:	f008 ff0e 	bl	80894c8 <__aeabi_ddiv>
 80806ac:	f009 f8c4 	bl	8089838 <__aeabi_d2f>

    //  Serial.print("SpC Value: ");
    //  Serial.println(SpC,2);
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC
 80806b0:	b051      	add	sp, #324	; 0x144
 80806b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80806b4:	f3af 8000 	nop.w
 80806b8:	8f5c28f6 	.word	0x8f5c28f6
 80806bc:	4032d5c2 	.word	0x4032d5c2
 80806c0:	20c49ba6 	.word	0x20c49ba6
 80806c4:	4038d2b0 	.word	0x4038d2b0
 80806c8:	4fdf3b64 	.word	0x4fdf3b64
 80806cc:	4083818d 	.word	0x4083818d
 80806d0:	6a7ef9db 	.word	0x6a7ef9db
 80806d4:	3f9374bc 	.word	0x3f9374bc
 80806d8:	20000010 	.word	0x20000010
 80806dc:	40533333 	.word	0x40533333
 80806e0:	457ff000 	.word	0x457ff000
 80806e4:	20000024 	.word	0x20000024
 80806e8:	40390000 	.word	0x40390000
 80806ec:	3ff00000 	.word	0x3ff00000

080806f0 <_Z9getAvoltsv>:

// get averageVolts value from sensor.  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 80806f0:	b530      	push	{r4, r5, lr}
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80806f2:	4d11      	ldr	r5, [pc, #68]	; (8080738 <_Z9getAvoltsv+0x48>)
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC

// get averageVolts value from sensor.  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 80806f4:	b0d1      	sub	sp, #324	; 0x144
     #define VREF 3.3      // analog reference voltage(Volt) of the ADC
     #define SCOUNT  40           // number of sample points to collect for averaging
     #define resolution 4095.0  // analog resolution of 4095 with Particle electron
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
 80806f6:	2400      	movs	r4, #0
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80806f8:	8828      	ldrh	r0, [r5, #0]
 80806fa:	f008 f8f7 	bl	80888ec <analogRead>
 80806fe:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
          analogBufferIndex++;
 8080702:	3401      	adds	r4, #1
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
 8080704:	2032      	movs	r0, #50	; 0x32
 8080706:	f006 fc3b 	bl	8086f80 <delay>
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 808070a:	2c28      	cmp	r4, #40	; 0x28
 808070c:	d1f4      	bne.n	80806f8 <_Z9getAvoltsv+0x8>
 808070e:	2100      	movs	r1, #0
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
 8080710:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 8080714:	a828      	add	r0, sp, #160	; 0xa0
 8080716:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
          analogBufferIndex++;
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 808071a:	3101      	adds	r1, #1
 808071c:	2928      	cmp	r1, #40	; 0x28
 808071e:	d1f7      	bne.n	8080710 <_Z9getAvoltsv+0x20>
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
        }
     averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 8080720:	f7ff ff10 	bl	8080544 <_Z12getMedianNumPii>
             // remember particle board has analog resolution of 4095
             //made more stable by the median filtering algorithm, and convert to voltage value
   return averageVoltage;
 8080724:	f009 f992 	bl	8089a4c <__aeabi_i2f>
 8080728:	4904      	ldr	r1, [pc, #16]	; (808073c <_Z9getAvoltsv+0x4c>)
 808072a:	f009 f9e3 	bl	8089af4 <__aeabi_fmul>
 808072e:	4904      	ldr	r1, [pc, #16]	; (8080740 <_Z9getAvoltsv+0x50>)
 8080730:	f009 fa94 	bl	8089c5c <__aeabi_fdiv>
  }  // end of getAvolts
 8080734:	b051      	add	sp, #324	; 0x144
 8080736:	bd30      	pop	{r4, r5, pc}
 8080738:	20000010 	.word	0x20000010
 808073c:	40533333 	.word	0x40533333
 8080740:	457ff000 	.word	0x457ff000

08080744 <_Z7waitSecm>:
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
    Particle.process();
}
 //  create a Delay using timer, safer than delay()
inline void waitSec(uint32_t seconds) {
 8080744:	b570      	push	{r4, r5, r6, lr}
 8080746:	4606      	mov	r6, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080748:	f005 f966 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t sec = (millis()/1000); (millis()/1000) - sec < seconds; Particle.process());
 808074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080750:	fbb0 f5f3 	udiv	r5, r0, r3
 8080754:	461c      	mov	r4, r3
 8080756:	f005 f95f 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
 808075a:	fbb0 f0f4 	udiv	r0, r0, r4
 808075e:	1b40      	subs	r0, r0, r5
 8080760:	42b0      	cmp	r0, r6
 8080762:	d204      	bcs.n	808076e <_Z7waitSecm+0x2a>
		last_checkin = current_time();
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 8080764:	f7ff fd68 	bl	8080238 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080768:	f005 fbca 	bl	8085f00 <spark_process>
 808076c:	e7f3      	b.n	8080756 <_Z7waitSecm+0x12>
 808076e:	bd70      	pop	{r4, r5, r6, pc}

08080770 <_Z11writeHeaderv>:
            }
    }
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
    {
 8080770:	b510      	push	{r4, lr}
        file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
 8080772:	4c05      	ldr	r4, [pc, #20]	; (8080788 <_Z11writeHeaderv+0x18>)
 8080774:	4905      	ldr	r1, [pc, #20]	; (808078c <_Z11writeHeaderv+0x1c>)
 8080776:	4620      	mov	r0, r4
 8080778:	f006 fa6d 	bl	8086c56 <_ZN5Print5printEPK19__FlashStringHelper>
        file.println();
 808077c:	4620      	mov	r0, r4
    }
 808077e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
    {
        file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
        file.println();
 8080782:	f006 ba6c 	b.w	8086c5e <_ZN5Print7printlnEv>
 8080786:	bf00      	nop
 8080788:	200006f0 	.word	0x200006f0
 808078c:	0808d398 	.word	0x0808d398

08080790 <_Z8setup_SDv>:
//  Edit writeHeader() and logData() for your requirements.
//-------------------------------------------------------------------------------
//setup the sd card

void setup_SD()
    {
 8080790:	b5f0      	push	{r4, r5, r6, r7, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 8080792:	4a53      	ldr	r2, [pc, #332]	; (80808e0 <_Z8setup_SDv+0x150>)
 8080794:	b08d      	sub	sp, #52	; 0x34
 8080796:	4b53      	ldr	r3, [pc, #332]	; (80808e4 <_Z8setup_SDv+0x154>)
 8080798:	920a      	str	r2, [sp, #40]	; 0x28
 808079a:	2201      	movs	r2, #1
 808079c:	9308      	str	r3, [sp, #32]
 808079e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80807a2:	2300      	movs	r3, #0
      //char works[3];
       if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sprintf(works,"No ");   }
 80807a4:	aa08      	add	r2, sp, #32
 80807a6:	210c      	movs	r1, #12
 80807a8:	484f      	ldr	r0, [pc, #316]	; (80808e8 <_Z8setup_SDv+0x158>)
 80807aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80807ae:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80807b2:	f7ff fdc3 	bl	808033c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 80807b6:	b908      	cbnz	r0, 80807bc <_Z8setup_SDv+0x2c>
 80807b8:	494c      	ldr	r1, [pc, #304]	; (80808ec <_Z8setup_SDv+0x15c>)
 80807ba:	e000      	b.n	80807be <_Z8setup_SDv+0x2e>
          else { sprintf(works,"Yes "); }
 80807bc:	494c      	ldr	r1, [pc, #304]	; (80808f0 <_Z8setup_SDv+0x160>)
 80807be:	484d      	ldr	r0, [pc, #308]	; (80808f4 <_Z8setup_SDv+0x164>)
 80807c0:	f009 ff0e 	bl	808a5e0 <strcpy>
        Time.zone(-6);  // setup to CST time zone, which is part of the ISO8601 format        //**
 80807c4:	484c      	ldr	r0, [pc, #304]	; (80808f8 <_Z8setup_SDv+0x168>)
 80807c6:	f006 fad7 	bl	8086d78 <_ZN9TimeClass4zoneEf>
        //if(Time.year() < 2020)

        ///  fileName = String("lost-time000.jpg");   
  
        if( !Time.isValid())
 80807ca:	f006 fba7 	bl	8086f1c <_ZN9TimeClass7isValidEv>
 80807ce:	4e4b      	ldr	r6, [pc, #300]	; (80808fc <_Z8setup_SDv+0x16c>)
 80807d0:	4604      	mov	r4, r0
 80807d2:	bb78      	cbnz	r0, 8080834 <_Z8setup_SDv+0xa4>
        {
               fileName = String("lost-time000.csv");       
 80807d4:	494a      	ldr	r1, [pc, #296]	; (8080900 <_Z8setup_SDv+0x170>)
 80807d6:	a808      	add	r0, sp, #32
 80807d8:	f006 f979 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>
 80807dc:	a908      	add	r1, sp, #32
 80807de:	4630      	mov	r0, r6
 80807e0:	f006 f9bf 	bl	8086b62 <_ZN6StringaSEOS_>
 80807e4:	a808      	add	r0, sp, #32
 80807e6:	f006 f92b 	bl	8086a40 <_ZN6StringD1Ev>
        for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 80807ea:	270a      	movs	r7, #10
  
        if( !Time.isValid())
        {
               fileName = String("lost-time000.csv");       
        for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 80807ec:	2109      	movs	r1, #9
 80807ee:	4843      	ldr	r0, [pc, #268]	; (80808fc <_Z8setup_SDv+0x16c>)
 80807f0:	f006 fa06 	bl	8086c00 <_ZN6StringixEj>
 80807f4:	2364      	movs	r3, #100	; 0x64
 80807f6:	fb94 f3f3 	sdiv	r3, r4, r3
 80807fa:	3330      	adds	r3, #48	; 0x30
 80807fc:	7003      	strb	r3, [r0, #0]
 //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 80807fe:	210a      	movs	r1, #10
 8080800:	483e      	ldr	r0, [pc, #248]	; (80808fc <_Z8setup_SDv+0x16c>)
 8080802:	f006 f9fd 	bl	8086c00 <_ZN6StringixEj>
 8080806:	fb94 f5f7 	sdiv	r5, r4, r7
 808080a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 808080e:	7003      	strb	r3, [r0, #0]
            fileName.String::operator[](11) = '0' + i%10;
 8080810:	210b      	movs	r1, #11
 8080812:	483a      	ldr	r0, [pc, #232]	; (80808fc <_Z8setup_SDv+0x16c>)
 8080814:	f006 f9f4 	bl	8086c00 <_ZN6StringixEj>
 8080818:	fb07 4515 	mls	r5, r7, r5, r4
 808081c:	3530      	adds	r5, #48	; 0x30
 808081e:	7005      	strb	r5, [r0, #0]
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
 8080820:	6831      	ldr	r1, [r6, #0]
 8080822:	4838      	ldr	r0, [pc, #224]	; (8080904 <_Z8setup_SDv+0x174>)
 8080824:	f7ff fd72 	bl	808030c <_ZN7FatFile6existsEPKc>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 8080828:	b368      	cbz	r0, 8080886 <_Z8setup_SDv+0xf6>
        ///  fileName = String("lost-time000.jpg");   
  
        if( !Time.isValid())
        {
               fileName = String("lost-time000.csv");       
        for (int i = 0; i < 1000; i++) {
 808082a:	3401      	adds	r4, #1
 808082c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8080830:	d1dc      	bne.n	80807ec <_Z8setup_SDv+0x5c>
 8080832:	e028      	b.n	8080886 <_Z8setup_SDv+0xf6>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080834:	4934      	ldr	r1, [pc, #208]	; (8080908 <_Z8setup_SDv+0x178>)
 8080836:	4668      	mov	r0, sp
 8080838:	f006 f988 	bl	8086b4c <_ZN6StringC1ERKS_>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
          }
        }
          else
             fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%m-%d") + ".csv");    //**
 808083c:	4933      	ldr	r1, [pc, #204]	; (808090c <_Z8setup_SDv+0x17c>)
 808083e:	4668      	mov	r0, sp
 8080840:	f006 f9ba 	bl	8086bb8 <_ZplRK15StringSumHelperPKc>
 8080844:	4604      	mov	r4, r0
 8080846:	f006 fb8a 	bl	8086f5e <_ZN9TimeClass3nowEv>
 808084a:	4b31      	ldr	r3, [pc, #196]	; (8080910 <_Z8setup_SDv+0x180>)
 808084c:	4602      	mov	r2, r0
 808084e:	4931      	ldr	r1, [pc, #196]	; (8080914 <_Z8setup_SDv+0x184>)
 8080850:	a804      	add	r0, sp, #16
 8080852:	f006 fb31 	bl	8086eb8 <_ZN9TimeClass6formatElPKc>
 8080856:	a904      	add	r1, sp, #16
 8080858:	4620      	mov	r0, r4
 808085a:	f006 f9a1 	bl	8086ba0 <_ZplRK15StringSumHelperRK6String>
 808085e:	492e      	ldr	r1, [pc, #184]	; (8080918 <_Z8setup_SDv+0x188>)
 8080860:	f006 f9aa 	bl	8086bb8 <_ZplRK15StringSumHelperPKc>
 8080864:	4601      	mov	r1, r0
 8080866:	a808      	add	r0, sp, #32
 8080868:	f006 f970 	bl	8086b4c <_ZN6StringC1ERKS_>
 808086c:	a908      	add	r1, sp, #32
 808086e:	4630      	mov	r0, r6
 8080870:	f006 f977 	bl	8086b62 <_ZN6StringaSEOS_>
 8080874:	a808      	add	r0, sp, #32
 8080876:	f006 f8e3 	bl	8086a40 <_ZN6StringD1Ev>
 808087a:	a804      	add	r0, sp, #16
 808087c:	f006 f8e0 	bl	8086a40 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080880:	4668      	mov	r0, sp
 8080882:	f006 f8dd 	bl	8086a40 <_ZN6StringD1Ev>
        Serial.println(fileName + " filename");
 8080886:	f007 fb23 	bl	8087ed0 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808088a:	4c1c      	ldr	r4, [pc, #112]	; (80808fc <_Z8setup_SDv+0x16c>)
 808088c:	4605      	mov	r5, r0
 808088e:	4621      	mov	r1, r4
 8080890:	a808      	add	r0, sp, #32
 8080892:	f006 f95b 	bl	8086b4c <_ZN6StringC1ERKS_>
 8080896:	4921      	ldr	r1, [pc, #132]	; (808091c <_Z8setup_SDv+0x18c>)
 8080898:	a808      	add	r0, sp, #32
 808089a:	f006 f98d 	bl	8086bb8 <_ZplRK15StringSumHelperPKc>
 808089e:	6801      	ldr	r1, [r0, #0]
 80808a0:	4628      	mov	r0, r5
 80808a2:	f006 f9e8 	bl	8086c76 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80808a6:	a808      	add	r0, sp, #32
 80808a8:	f006 f8ca 	bl	8086a40 <_ZN6StringD1Ev>
        //if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sd.initErrorHalt();   }
        //sprintf(publishStr,
   ///     if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sprintf(works,"No ");   }
  ///      else { sprintf(works,"Yes "); }
        //sd.begin(chipSelect, SD_SCK_MHZ(20)); 
             Serial.println(works);
 80808ac:	f007 fb10 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80808b0:	4910      	ldr	r1, [pc, #64]	; (80808f4 <_Z8setup_SDv+0x164>)
 80808b2:	f006 f9e0 	bl	8086c76 <_ZN5Print7printlnEPKc>
 80808b6:	6831      	ldr	r1, [r6, #0]
 80808b8:	4812      	ldr	r0, [pc, #72]	; (8080904 <_Z8setup_SDv+0x174>)
 80808ba:	f7ff fd27 	bl	808030c <_ZN7FatFile6existsEPKc>
        if(sd.exists(fileName))
 80808be:	b128      	cbz	r0, 80808cc <_Z8setup_SDv+0x13c>
            {  file.open(fileName, O_WRONLY | O_APPEND);  }
 80808c0:	2209      	movs	r2, #9
 80808c2:	6821      	ldr	r1, [r4, #0]
 80808c4:	4816      	ldr	r0, [pc, #88]	; (8080920 <_Z8setup_SDv+0x190>)
 80808c6:	f7ff fd31 	bl	808032c <_ZN7FatFile4openEPKci>
 80808ca:	e007      	b.n	80808dc <_Z8setup_SDv+0x14c>
            else
            {
                file.open(fileName, O_WRONLY |O_CREAT | O_EXCL);
 80808cc:	f640 2201 	movw	r2, #2561	; 0xa01
 80808d0:	6821      	ldr	r1, [r4, #0]
 80808d2:	4813      	ldr	r0, [pc, #76]	; (8080920 <_Z8setup_SDv+0x190>)
 80808d4:	f7ff fd2a 	bl	808032c <_ZN7FatFile4openEPKci>
                writeHeader();
 80808d8:	f7ff ff4a 	bl	8080770 <_Z11writeHeaderv>
            }
    }
 80808dc:	b00d      	add	sp, #52	; 0x34
 80808de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80808e0:	01c9c380 	.word	0x01c9c380
 80808e4:	0808d2e0 	.word	0x0808d2e0
 80808e8:	20000160 	.word	0x20000160
 80808ec:	0808d3d0 	.word	0x0808d3d0
 80808f0:	0808d3d4 	.word	0x0808d3d4
 80808f4:	20000756 	.word	0x20000756
 80808f8:	c0c00000 	.word	0xc0c00000
 80808fc:	200005e4 	.word	0x200005e4
 8080900:	0808d3d9 	.word	0x0808d3d9
 8080904:	2000059c 	.word	0x2000059c
 8080908:	200006cc 	.word	0x200006cc
 808090c:	0808d3ea 	.word	0x0808d3ea
 8080910:	0808d3ec 	.word	0x0808d3ec
 8080914:	20000960 	.word	0x20000960
 8080918:	0808d3e5 	.word	0x0808d3e5
 808091c:	0808d3f5 	.word	0x0808d3f5
 8080920:	200006f8 	.word	0x200006f8

08080924 <_Z7logDataPc>:
        file.println();
    }
//------------------------------------------------------------------------------
// Log a data record.
    void logData(char data[256])
    {
 8080924:	b530      	push	{r4, r5, lr}
 8080926:	b085      	sub	sp, #20
 8080928:	4605      	mov	r5, r0
        // Write data to file.
        time_t time = Time.now();
 808092a:	f006 fb18 	bl	8086f5e <_ZN9TimeClass3nowEv>
        ///  Time.zone(-6);  // setup a time zone, which is part of the ISO8601 format
        file.print(Time.format(time, TIME_FORMAT_ISO8601_FULL)); // e.g. 2004-01-10T08:22:04-06:00
 808092e:	4b0e      	ldr	r3, [pc, #56]	; (8080968 <_Z7logDataPc+0x44>)
 8080930:	4c0e      	ldr	r4, [pc, #56]	; (808096c <_Z7logDataPc+0x48>)
 8080932:	4602      	mov	r2, r0
 8080934:	681b      	ldr	r3, [r3, #0]
 8080936:	4668      	mov	r0, sp
 8080938:	490d      	ldr	r1, [pc, #52]	; (8080970 <_Z7logDataPc+0x4c>)
 808093a:	f006 fabd 	bl	8086eb8 <_ZN9TimeClass6formatElPKc>
 808093e:	9900      	ldr	r1, [sp, #0]
 8080940:	4620      	mov	r0, r4
 8080942:	f006 f981 	bl	8086c48 <_ZN5Print5printEPKc>
 8080946:	4668      	mov	r0, sp
 8080948:	f006 f87a 	bl	8086a40 <_ZN6StringD1Ev>

    //    Particle.publish("battery1", data, 60, PRIVATE);
        delay(500);
 808094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080950:	f006 fb16 	bl	8086f80 <delay>
        file.print(data);
 8080954:	4629      	mov	r1, r5
 8080956:	4620      	mov	r0, r4
 8080958:	f006 f976 	bl	8086c48 <_ZN5Print5printEPKc>
        file.println();
 808095c:	4620      	mov	r0, r4
 808095e:	f006 f97e 	bl	8086c5e <_ZN5Print7printlnEv>
    }
 8080962:	b005      	add	sp, #20
 8080964:	bd30      	pop	{r4, r5, pc}
 8080966:	bf00      	nop
 8080968:	2000004c 	.word	0x2000004c
 808096c:	200006f0 	.word	0x200006f0
 8080970:	20000960 	.word	0x20000960

08080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080974:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080976:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080978:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808097a:	b17c      	cbz	r4, 808099c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808097c:	6863      	ldr	r3, [r4, #4]
 808097e:	3b01      	subs	r3, #1
 8080980:	6063      	str	r3, [r4, #4]
 8080982:	b95b      	cbnz	r3, 808099c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080984:	6823      	ldr	r3, [r4, #0]
 8080986:	4620      	mov	r0, r4
 8080988:	689b      	ldr	r3, [r3, #8]
 808098a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808098c:	68a3      	ldr	r3, [r4, #8]
 808098e:	3b01      	subs	r3, #1
 8080990:	60a3      	str	r3, [r4, #8]
 8080992:	b91b      	cbnz	r3, 808099c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080994:	6823      	ldr	r3, [r4, #0]
 8080996:	4620      	mov	r0, r4
 8080998:	68db      	ldr	r3, [r3, #12]
 808099a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808099c:	4628      	mov	r0, r5
 808099e:	bd38      	pop	{r3, r4, r5, pc}

080809a0 <_Z8close_SDv>:
//--------------------------------------------------------------------------------
//close down the SD card
void close_SD()
    {
 80809a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
         // Force data to SD and update the directory entry to avoid data loss.
     /// if (!file.sync() || file.getWriteError()) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 80809a2:	4812      	ldr	r0, [pc, #72]	; (80809ec <_Z8close_SDv+0x4c>)
 80809a4:	f001 fe44 	bl	8082630 <_ZN7FatFile4syncEv>
 80809a8:	b960      	cbnz	r0, 80809c4 <_Z8close_SDv+0x24>
 80809aa:	4b11      	ldr	r3, [pc, #68]	; (80809f0 <_Z8close_SDv+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80809ac:	a802      	add	r0, sp, #8
 80809ae:	781b      	ldrb	r3, [r3, #0]
 80809b0:	4a10      	ldr	r2, [pc, #64]	; (80809f4 <_Z8close_SDv+0x54>)
 80809b2:	f88d 3000 	strb.w	r3, [sp]
 80809b6:	4910      	ldr	r1, [pc, #64]	; (80809f8 <_Z8close_SDv+0x58>)
 80809b8:	233c      	movs	r3, #60	; 0x3c
 80809ba:	f007 f837 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80809be:	a803      	add	r0, sp, #12
 80809c0:	f7ff ffd8 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 80809c4:	4809      	ldr	r0, [pc, #36]	; (80809ec <_Z8close_SDv+0x4c>)
 80809c6:	f001 fe33 	bl	8082630 <_ZN7FatFile4syncEv>
        //  if (Serial.available()) {
        // Close file and stop.
        file.flush();
        file.close();
 80809ca:	4808      	ldr	r0, [pc, #32]	; (80809ec <_Z8close_SDv+0x4c>)
 80809cc:	f001 fe66 	bl	808269c <_ZN7FatFile5closeEv>
           sprintf(publishStr, "SD-write worked: %s", works);
 80809d0:	4a0a      	ldr	r2, [pc, #40]	; (80809fc <_Z8close_SDv+0x5c>)
 80809d2:	490b      	ldr	r1, [pc, #44]	; (8080a00 <_Z8close_SDv+0x60>)
 80809d4:	480b      	ldr	r0, [pc, #44]	; (8080a04 <_Z8close_SDv+0x64>)
 80809d6:	f005 fae3 	bl	8085fa0 <sprintf>
      Serial.println((publishStr));
 80809da:	f007 fa79 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80809de:	4909      	ldr	r1, [pc, #36]	; (8080a04 <_Z8close_SDv+0x64>)
 80809e0:	f006 f949 	bl	8086c76 <_ZN5Print7printlnEPKc>
    //    Particle.publish("Log", "SD_done", 60, PRIVATE);
        //    SysCall::halt();
    }
 80809e4:	b005      	add	sp, #20
 80809e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80809ea:	bf00      	nop
 80809ec:	200006f8 	.word	0x200006f8
 80809f0:	200006dc 	.word	0x200006dc
 80809f4:	0808d3ff 	.word	0x0808d3ff
 80809f8:	0808d40b 	.word	0x0808d40b
 80809fc:	20000756 	.word	0x20000756
 8080a00:	0808d40f 	.word	0x0808d40f
 8080a04:	20000738 	.word	0x20000738

08080a08 <loop>:

 Serial.println("ending setup");
} // end setup()

//-----------LOOP
void loop() {  
 8080a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080a0c:	b0f1      	sub	sp, #452	; 0x1c4
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 8080a0e:	2100      	movs	r1, #0
 8080a10:	a818      	add	r0, sp, #96	; 0x60
 8080a12:	f006 fd7b 	bl	808750c <_ZN9FuelGaugeC1Eb>
  //  set the deep sleep timer based on the battery charge
  //--- get battery info
  float volts = fuel.getVCell();
 8080a16:	a818      	add	r0, sp, #96	; 0x60
 8080a18:	f006 fdb8 	bl	808758c <_ZN9FuelGauge8getVCellEv>
 8080a1c:	4604      	mov	r4, r0
  float SoC = -99;
  //SoC = System.batteryCharge();
  SoC = fuel.getSoC();
 8080a1e:	a818      	add	r0, sp, #96	; 0x60
 8080a20:	f006 fdca 	bl	80875b8 <_ZN9FuelGauge6getSoCEv>
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 8080a24:	4621      	mov	r1, r4
  //  set the deep sleep timer based on the battery charge
  //--- get battery info
  float volts = fuel.getVCell();
  float SoC = -99;
  //SoC = System.batteryCharge();
  SoC = fuel.getSoC();
 8080a26:	9010      	str	r0, [sp, #64]	; 0x40
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 8080a28:	f7ff fd3e 	bl	80804a8 <_Z12checkBatteryff>
 8080a2c:	4bb4      	ldr	r3, [pc, #720]	; (8080d00 <loop+0x2f8>)
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 8080a2e:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8080d14 <loop+0x30c>
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 8080a32:	6018      	str	r0, [r3, #0]
 //minutes = 2;

  float rain = analogRead(RainPin);
 8080a34:	4bb3      	ldr	r3, [pc, #716]	; (8080d04 <loop+0x2fc>)
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080a36:	f04f 0902 	mov.w	r9, #2
                   }
    */
 minutes = checkBattery(SoC,volts);
 //minutes = 2;

  float rain = analogRead(RainPin);
 8080a3a:	8818      	ldrh	r0, [r3, #0]
 8080a3c:	f007 ff56 	bl	80888ec <analogRead>
 8080a40:	f009 f804 	bl	8089a4c <__aeabi_i2f>
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 8080a44:	2100      	movs	r1, #0
                   }
    */
 minutes = checkBattery(SoC,volts);
 //minutes = 2;

  float rain = analogRead(RainPin);
 8080a46:	4606      	mov	r6, r0
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 8080a48:	2018      	movs	r0, #24
 8080a4a:	f007 ff36 	bl	80888ba <digitalWrite>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080a4e:	20c8      	movs	r0, #200	; 0xc8
 8080a50:	f006 fa96 	bl	8086f80 <delay>
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 8080a54:	48ac      	ldr	r0, [pc, #688]	; (8080d08 <loop+0x300>)
 8080a56:	f004 fc4f 	bl	80852f8 <_ZN9CE_BME28015readTemperatureEv>
 8080a5a:	f8ca 0000 	str.w	r0, [sl]
               h1 = bme1.readHumidity();
 8080a5e:	48aa      	ldr	r0, [pc, #680]	; (8080d08 <loop+0x300>)
 8080a60:	f004 fd44 	bl	80854ec <_ZN9CE_BME28012readHumidityEv>
 8080a64:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8080d2c <loop+0x324>
               p1 = bme1.readPressure()/100.0;
 8080a68:	4fa8      	ldr	r7, [pc, #672]	; (8080d0c <loop+0x304>)
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
               h1 = bme1.readHumidity();
 8080a6a:	f8c8 0000 	str.w	r0, [r8]
               p1 = bme1.readPressure()/100.0;
 8080a6e:	48a6      	ldr	r0, [pc, #664]	; (8080d08 <loop+0x300>)
 8080a70:	f004 fc6c 	bl	808534c <_ZN9CE_BME28012readPressureEv>
 8080a74:	49a6      	ldr	r1, [pc, #664]	; (8080d10 <loop+0x308>)
 8080a76:	f009 f8f1 	bl	8089c5c <__aeabi_fdiv>
 8080a7a:	6038      	str	r0, [r7, #0]
               delay(200);
 8080a7c:	20c8      	movs	r0, #200	; 0xc8
 8080a7e:	f006 fa7f 	bl	8086f80 <delay>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080a82:	f1b9 0901 	subs.w	r9, r9, #1
 8080a86:	4da3      	ldr	r5, [pc, #652]	; (8080d14 <loop+0x30c>)
 8080a88:	d1e4      	bne.n	8080a54 <loop+0x4c>
               h1 = bme1.readHumidity();
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
 8080a8a:	f8d7 9000 	ldr.w	r9, [r7]
 8080a8e:	4649      	mov	r1, r9
 8080a90:	4648      	mov	r0, r9
 8080a92:	f009 f9f5 	bl	8089e80 <__aeabi_fcmpun>
 8080a96:	2800      	cmp	r0, #0
 8080a98:	f040 8277 	bne.w	8080f8a <loop+0x582>
 8080a9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080aa0:	4648      	mov	r0, r9
 8080aa2:	f009 f9c5 	bl	8089e30 <__aeabi_fcmplt>
 8080aa6:	2800      	cmp	r0, #0
 8080aa8:	f040 826f 	bne.w	8080f8a <loop+0x582>
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080aac:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8080d74 <loop+0x36c>
 //minutes = 2;

  float rain = analogRead(RainPin);
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080ab0:	f04f 0902 	mov.w	r9, #2
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080ab4:	4898      	ldr	r0, [pc, #608]	; (8080d18 <loop+0x310>)
 8080ab6:	f004 fc1f 	bl	80852f8 <_ZN9CE_BME28015readTemperatureEv>
 8080aba:	f8ca 0000 	str.w	r0, [sl]
              p2 = bme2.readPressure()/100.0;
 8080abe:	4896      	ldr	r0, [pc, #600]	; (8080d18 <loop+0x310>)
 8080ac0:	f004 fc44 	bl	808534c <_ZN9CE_BME28012readPressureEv>
 8080ac4:	4992      	ldr	r1, [pc, #584]	; (8080d10 <loop+0x308>)
 8080ac6:	f009 f8c9 	bl	8089c5c <__aeabi_fdiv>
 8080aca:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8080d20 <loop+0x318>
 8080ace:	f8c8 0000 	str.w	r0, [r8]
              delay(200);
 8080ad2:	20c8      	movs	r0, #200	; 0xc8
 8080ad4:	f006 fa54 	bl	8086f80 <delay>
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8080adc:	d1ea      	bne.n	8080ab4 <loop+0xac>
              p2 = bme2.readPressure()/100.0;
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
 8080ade:	6839      	ldr	r1, [r7, #0]
 8080ae0:	4608      	mov	r0, r1
 8080ae2:	f009 f9cd 	bl	8089e80 <__aeabi_fcmpun>
 8080ae6:	2800      	cmp	r0, #0
 8080ae8:	f040 8255 	bne.w	8080f96 <loop+0x58e>
 8080aec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080af0:	f8d8 0000 	ldr.w	r0, [r8]
 8080af4:	f009 f99c 	bl	8089e30 <__aeabi_fcmplt>
 8080af8:	2800      	cmp	r0, #0
 8080afa:	f040 824c 	bne.w	8080f96 <loop+0x58e>
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080afe:	6828      	ldr	r0, [r5, #0]
 8080b00:	f008 fb64 	bl	80891cc <__aeabi_f2d>
 8080b04:	a378      	add	r3, pc, #480	; (adr r3, 8080ce8 <loop+0x2e0>)
 8080b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b0a:	f008 f9ff 	bl	8088f0c <__aeabi_dsub>
 8080b0e:	f008 fe93 	bl	8089838 <__aeabi_d2f>
        t2 = t2+t2_offset;
 8080b12:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8080d74 <loop+0x36c>
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080b16:	6028      	str	r0, [r5, #0]
        t2 = t2+t2_offset;
 8080b18:	f8d8 0000 	ldr.w	r0, [r8]
 8080b1c:	f008 fb56 	bl	80891cc <__aeabi_f2d>
 8080b20:	a373      	add	r3, pc, #460	; (adr r3, 8080cf0 <loop+0x2e8>)
 8080b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b26:	f008 f9f1 	bl	8088f0c <__aeabi_dsub>
 8080b2a:	f008 fe85 	bl	8089838 <__aeabi_d2f>
 8080b2e:	f8c8 0000 	str.w	r0, [r8]

// ---- get WATER Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
 8080b32:	f7ff fd49 	bl	80805c8 <_Z6getSpCv>
 8080b36:	4979      	ldr	r1, [pc, #484]	; (8080d1c <loop+0x314>)
 8080b38:	f008 ffdc 	bl	8089af4 <__aeabi_fmul>
 8080b3c:	4681      	mov	r9, r0
    float Avolts = getAvolts();
 8080b3e:	f7ff fdd7 	bl	80806f0 <_Z9getAvoltsv>

 //  float depth = getDepth();  // read second depth sensor using function getDepth(). this is analog
        //don't need this without the vented analog depth sensor
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s
 8080b42:	2100      	movs	r1, #0
        t1 = t1+t1_offset;
        t2 = t2+t2_offset;

// ---- get WATER Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
    float Avolts = getAvolts();
 8080b44:	4682      	mov	sl, r0

 //  float depth = getDepth();  // read second depth sensor using function getDepth(). this is analog
        //don't need this without the vented analog depth sensor
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s
 8080b46:	2003      	movs	r0, #3
 8080b48:	f007 feb7 	bl	80888ba <digitalWrite>
                //  digitalWrite(D6, LOW);	// not needed because all digital sensors run off D3
 ///digitalWrite(B0, LOW);	// for the rain sensor
        digitalWrite(B1, LOW);     //for the TDS-Sp.C sensor
 8080b4c:	2100      	movs	r1, #0
 8080b4e:	2019      	movs	r0, #25
 8080b50:	f007 feb3 	bl	80888ba <digitalWrite>
///char context[90];
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);
  float depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8080b54:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8080d0c <loop+0x304>
 8080b58:	4b71      	ldr	r3, [pc, #452]	; (8080d20 <loop+0x318>)
 8080b5a:	f8db 1000 	ldr.w	r1, [fp]
 8080b5e:	6818      	ldr	r0, [r3, #0]
 8080b60:	f008 febe 	bl	80898e0 <__aeabi_fsub>
 8080b64:	f008 fb32 	bl	80891cc <__aeabi_f2d>
 8080b68:	a363      	add	r3, pc, #396	; (adr r3, 8080cf8 <loop+0x2f0>)
 8080b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b6e:	f008 fb81 	bl	8089274 <__aeabi_dmul>
 8080b72:	f008 fe61 	bl	8089838 <__aeabi_d2f>
 8080b76:	4607      	mov	r7, r0

  ubidots.add("Rain", rain);
 8080b78:	4632      	mov	r2, r6
 8080b7a:	496a      	ldr	r1, [pc, #424]	; (8080d24 <loop+0x31c>)
 8080b7c:	486a      	ldr	r0, [pc, #424]	; (8080d28 <loop+0x320>)
 8080b7e:	f003 fc39 	bl	80843f4 <_ZN7Ubidots3addEPcf>
	ubidots.add("Humidity_%", h1);
 8080b82:	4b6a      	ldr	r3, [pc, #424]	; (8080d2c <loop+0x324>)
 8080b84:	496a      	ldr	r1, [pc, #424]	; (8080d30 <loop+0x328>)
 8080b86:	681a      	ldr	r2, [r3, #0]
 8080b88:	4867      	ldr	r0, [pc, #412]	; (8080d28 <loop+0x320>)
 8080b8a:	f003 fc33 	bl	80843f4 <_ZN7Ubidots3addEPcf>
	ubidots.add("Air-Temp_C", t1);
 8080b8e:	682a      	ldr	r2, [r5, #0]
 8080b90:	4968      	ldr	r1, [pc, #416]	; (8080d34 <loop+0x32c>)
 8080b92:	4865      	ldr	r0, [pc, #404]	; (8080d28 <loop+0x320>)
 8080b94:	f003 fc2e 	bl	80843f4 <_ZN7Ubidots3addEPcf>
  ubidots.add("Pressure_hPA", p1);
 8080b98:	f8db 2000 	ldr.w	r2, [fp]
 8080b9c:	4966      	ldr	r1, [pc, #408]	; (8080d38 <loop+0x330>)
 8080b9e:	4862      	ldr	r0, [pc, #392]	; (8080d28 <loop+0x320>)
 8080ba0:	f003 fc28 	bl	80843f4 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O-Temp_C", t2);
 8080ba4:	f8d8 2000 	ldr.w	r2, [r8]
 8080ba8:	4964      	ldr	r1, [pc, #400]	; (8080d3c <loop+0x334>)
 8080baa:	485f      	ldr	r0, [pc, #380]	; (8080d28 <loop+0x320>)
 8080bac:	f003 fc22 	bl	80843f4 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O_hPA", p2);
 8080bb0:	4b5b      	ldr	r3, [pc, #364]	; (8080d20 <loop+0x318>)
 8080bb2:	4963      	ldr	r1, [pc, #396]	; (8080d40 <loop+0x338>)
 8080bb4:	681a      	ldr	r2, [r3, #0]
 8080bb6:	485c      	ldr	r0, [pc, #368]	; (8080d28 <loop+0x320>)
 8080bb8:	f003 fc1c 	bl	80843f4 <_ZN7Ubidots3addEPcf>
  ubidots.add("Depth_in", depth);
 8080bbc:	463a      	mov	r2, r7
 8080bbe:	4961      	ldr	r1, [pc, #388]	; (8080d44 <loop+0x33c>)
 8080bc0:	4859      	ldr	r0, [pc, #356]	; (8080d28 <loop+0x320>)
 8080bc2:	f003 fc17 	bl	80843f4 <_ZN7Ubidots3addEPcf>
    ubidots.add("Volts", volts);
 8080bc6:	4622      	mov	r2, r4
 8080bc8:	495f      	ldr	r1, [pc, #380]	; (8080d48 <loop+0x340>)
 8080bca:	4857      	ldr	r0, [pc, #348]	; (8080d28 <loop+0x320>)
 8080bcc:	f003 fc12 	bl	80843f4 <_ZN7Ubidots3addEPcf>
    ubidots.add("SOC", SoC);
 8080bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8080bd2:	495e      	ldr	r1, [pc, #376]	; (8080d4c <loop+0x344>)
 8080bd4:	4854      	ldr	r0, [pc, #336]	; (8080d28 <loop+0x320>)
 8080bd6:	f003 fc0d 	bl	80843f4 <_ZN7Ubidots3addEPcf>
      //if (t2 > -99.0)   // if reading water temperature was successful, send temp and Sp_Cond to Ubidots
    ubidots.add("Sp_Cond", Sp_C);
 8080bda:	464a      	mov	r2, r9
 8080bdc:	495c      	ldr	r1, [pc, #368]	; (8080d50 <loop+0x348>)
 8080bde:	4852      	ldr	r0, [pc, #328]	; (8080d28 <loop+0x320>)
 8080be0:	f003 fc08 	bl	80843f4 <_ZN7Ubidots3addEPcf>
    ubidots.add("A.volts", Avolts);
 8080be4:	4652      	mov	r2, sl
 8080be6:	495b      	ldr	r1, [pc, #364]	; (8080d54 <loop+0x34c>)
 8080be8:	484f      	ldr	r0, [pc, #316]	; (8080d28 <loop+0x320>)
 8080bea:	f003 fc03 	bl	80843f4 <_ZN7Ubidots3addEPcf>
  

//  could put some code here to write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %04.2f",
 8080bee:	4648      	mov	r0, r9
 8080bf0:	f008 faec 	bl	80891cc <__aeabi_f2d>
 8080bf4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8080bf8:	4650      	mov	r0, sl
 8080bfa:	f008 fae7 	bl	80891cc <__aeabi_f2d>
 8080bfe:	4682      	mov	sl, r0
 8080c00:	4630      	mov	r0, r6
 8080c02:	468b      	mov	fp, r1
 8080c04:	f008 fae2 	bl	80891cc <__aeabi_f2d>
 8080c08:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080c0c:	4638      	mov	r0, r7
 8080c0e:	f008 fadd 	bl	80891cc <__aeabi_f2d>
 8080c12:	4606      	mov	r6, r0
 8080c14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8080c16:	460f      	mov	r7, r1
 8080c18:	f008 fad8 	bl	80891cc <__aeabi_f2d>
 8080c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080c20:	4620      	mov	r0, r4
 8080c22:	f008 fad3 	bl	80891cc <__aeabi_f2d>
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8080c26:	4603      	mov	r3, r0
 8080c28:	460c      	mov	r4, r1
 8080c2a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8080c2e:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8080c32:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 8080c36:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8080c3a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8080c3e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8080c42:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8080c46:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
 8080c4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ubidots.add("A.volts", Avolts);
  

//  could put some code here to write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %04.2f",
 8080c4e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8080c52:	f8d8 0000 	ldr.w	r0, [r8]
 8080c56:	f008 fab9 	bl	80891cc <__aeabi_f2d>
 8080c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080c5e:	6828      	ldr	r0, [r5, #0]
 8080c60:	f008 fab4 	bl	80891cc <__aeabi_f2d>
 8080c64:	4a3c      	ldr	r2, [pc, #240]	; (8080d58 <loop+0x350>)
 8080c66:	e9cd 0100 	strd	r0, r1, [sp]
 8080c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080c6e:	a830      	add	r0, sp, #192	; 0xc0
 8080c70:	f005 f9ae 	bl	8085fd0 <snprintf>
   
      logData(_json);
 8080c74:	a830      	add	r0, sp, #192	; 0xc0
 8080c76:	f7ff fe55 	bl	8080924 <_Z7logDataPc>
      delay(200);
 8080c7a:	20c8      	movs	r0, #200	; 0xc8
 8080c7c:	f006 f980 	bl	8086f80 <delay>
      close_SD();
 8080c80:	f7ff fe8e 	bl	80809a0 <_Z8close_SDv>
      delay(200);
 8080c84:	20c8      	movs	r0, #200	; 0xc8
 8080c86:	f006 f97b 	bl	8086f80 <delay>
savePhoto();
*/
//cam.begin();
//--------------------------------------------------------------------------------
// Try to locate the camera
  if (cam.begin()) {
 8080c8a:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8080c8e:	4833      	ldr	r0, [pc, #204]	; (8080d5c <loop+0x354>)
 8080c90:	f000 fdae 	bl	80817f0 <_ZN13camera_VC07065beginEt>
 8080c94:	b118      	cbz	r0, 8080c9e <loop+0x296>
    Serial.println("Camera Found:");
 8080c96:	f007 f91b 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080c9a:	4931      	ldr	r1, [pc, #196]	; (8080d60 <loop+0x358>)
 8080c9c:	e002      	b.n	8080ca4 <loop+0x29c>
  } else {
    Serial.println("No camera found?");
 8080c9e:	f007 f917 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080ca2:	4930      	ldr	r1, [pc, #192]	; (8080d64 <loop+0x35c>)
 8080ca4:	f005 ffe7 	bl	8086c76 <_ZN5Print7printlnEPKc>
     }
// Print out the camera version information (optional)
  char *reply = cam.getVersion();
 8080ca8:	482c      	ldr	r0, [pc, #176]	; (8080d5c <loop+0x354>)
 8080caa:	f000 fd45 	bl	8081738 <_ZN13camera_VC070610getVersionEv>
  if (reply == 0) {
 8080cae:	4604      	mov	r4, r0
 8080cb0:	b918      	cbnz	r0, 8080cba <loop+0x2b2>
    Serial.print("Failed to get version");
 8080cb2:	f007 f90d 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080cb6:	492c      	ldr	r1, [pc, #176]	; (8080d68 <loop+0x360>)
 8080cb8:	e002      	b.n	8080cc0 <loop+0x2b8>
  } else {
  //  Serial.println("-----------------");
    Serial.print(reply);
 8080cba:	f007 f909 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080cbe:	4621      	mov	r1, r4
 8080cc0:	f005 ffc2 	bl	8086c48 <_ZN5Print5printEPKc>
  //  Serial.println("-----------------");
  }
  
  Serial.println("Snap in 1 secs...");
 8080cc4:	f007 f904 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080cc8:	4928      	ldr	r1, [pc, #160]	; (8080d6c <loop+0x364>)
 8080cca:	f005 ffd4 	bl	8086c76 <_ZN5Print7printlnEPKc>
 delay(1000);
 8080cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080cd2:	f006 f955 	bl	8086f80 <delay>
  if (! cam.takePicture()) 
 8080cd6:	4821      	ldr	r0, [pc, #132]	; (8080d5c <loop+0x354>)
 8080cd8:	f000 fdaa 	bl	8081830 <_ZN13camera_VC070611takePictureEv>
 8080cdc:	2800      	cmp	r0, #0
 8080cde:	d14b      	bne.n	8080d78 <loop+0x370>
    Serial.println("Failed to snap!");
 8080ce0:	f007 f8f6 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080ce4:	4922      	ldr	r1, [pc, #136]	; (8080d70 <loop+0x368>)
 8080ce6:	e04a      	b.n	8080d7e <loop+0x376>
 8080ce8:	9999999a 	.word	0x9999999a
 8080cec:	3fe99999 	.word	0x3fe99999
 8080cf0:	33333333 	.word	0x33333333
 8080cf4:	3fe33333 	.word	0x3fe33333
 8080cf8:	3a14cec4 	.word	0x3a14cec4
 8080cfc:	3fd9b1af 	.word	0x3fd9b1af
 8080d00:	2000001c 	.word	0x2000001c
 8080d04:	20000014 	.word	0x20000014
 8080d08:	200005f8 	.word	0x200005f8
 8080d0c:	20000000 	.word	0x20000000
 8080d10:	42c80000 	.word	0x42c80000
 8080d14:	20000020 	.word	0x20000020
 8080d18:	20000628 	.word	0x20000628
 8080d1c:	3fa00000 	.word	0x3fa00000
 8080d20:	20000004 	.word	0x20000004
 8080d24:	0808d423 	.word	0x0808d423
 8080d28:	200006e0 	.word	0x200006e0
 8080d2c:	2000000c 	.word	0x2000000c
 8080d30:	0808d428 	.word	0x0808d428
 8080d34:	0808d433 	.word	0x0808d433
 8080d38:	0808d43e 	.word	0x0808d43e
 8080d3c:	0808d44b 	.word	0x0808d44b
 8080d40:	0808d456 	.word	0x0808d456
 8080d44:	0808d45e 	.word	0x0808d45e
 8080d48:	0808d467 	.word	0x0808d467
 8080d4c:	0808d46d 	.word	0x0808d46d
 8080d50:	0808d471 	.word	0x0808d471
 8080d54:	0808d479 	.word	0x0808d479
 8080d58:	0808d481 	.word	0x0808d481
 8080d5c:	20000658 	.word	0x20000658
 8080d60:	0808d4c2 	.word	0x0808d4c2
 8080d64:	0808d4d0 	.word	0x0808d4d0
 8080d68:	0808d4e1 	.word	0x0808d4e1
 8080d6c:	0808d4f7 	.word	0x0808d4f7
 8080d70:	0808d509 	.word	0x0808d509
 8080d74:	20000024 	.word	0x20000024
  else 
    Serial.println("Picture taken!");   
 8080d78:	f007 f8aa 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080d7c:	49a7      	ldr	r1, [pc, #668]	; (808101c <loop+0x614>)
 8080d7e:	f005 ff7a 	bl	8086c76 <_ZN5Print7printlnEPKc>
 //using namespace particle;

 //using namespace StringSumHelper;
 //using String::operator[];

    if(! Time.isValid()) 
 8080d82:	f006 f8cb 	bl	8086f1c <_ZN9TimeClass7isValidEv>
 8080d86:	4604      	mov	r4, r0
 8080d88:	bba0      	cbnz	r0, 8080df4 <loop+0x3ec>
        {
          fileName = String("lost-time000.jpg");   
 8080d8a:	49a5      	ldr	r1, [pc, #660]	; (8081020 <loop+0x618>)
 8080d8c:	a826      	add	r0, sp, #152	; 0x98
 8080d8e:	f005 fe9e 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>
 8080d92:	a926      	add	r1, sp, #152	; 0x98
 8080d94:	48a3      	ldr	r0, [pc, #652]	; (8081024 <loop+0x61c>)
 8080d96:	f005 fee4 	bl	8086b62 <_ZN6StringaSEOS_>
 8080d9a:	a826      	add	r0, sp, #152	; 0x98
 8080d9c:	f005 fe50 	bl	8086a40 <_ZN6StringD1Ev>
//          fileName.String::operator[](fileName);
  ///       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 8080da0:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8081024 <loop+0x61c>
 //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 8080da4:	250a      	movs	r5, #10
        {
          fileName = String("lost-time000.jpg");   
//          fileName.String::operator[](fileName);
  ///       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 8080da6:	2109      	movs	r1, #9
 8080da8:	489e      	ldr	r0, [pc, #632]	; (8081024 <loop+0x61c>)
 8080daa:	f005 ff29 	bl	8086c00 <_ZN6StringixEj>
 8080dae:	2364      	movs	r3, #100	; 0x64
 8080db0:	fb94 f3f3 	sdiv	r3, r4, r3
 8080db4:	3330      	adds	r3, #48	; 0x30
 8080db6:	7003      	strb	r3, [r0, #0]
 //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 8080db8:	210a      	movs	r1, #10
 8080dba:	489a      	ldr	r0, [pc, #616]	; (8081024 <loop+0x61c>)
 8080dbc:	f005 ff20 	bl	8086c00 <_ZN6StringixEj>
 8080dc0:	fb94 f9f5 	sdiv	r9, r4, r5
 8080dc4:	f109 0330 	add.w	r3, r9, #48	; 0x30
 8080dc8:	7003      	strb	r3, [r0, #0]
            fileName.String::operator[](11) = '0' + i%10;
 8080dca:	210b      	movs	r1, #11
 8080dcc:	4895      	ldr	r0, [pc, #596]	; (8081024 <loop+0x61c>)
 8080dce:	f005 ff17 	bl	8086c00 <_ZN6StringixEj>
 8080dd2:	fb05 4919 	mls	r9, r5, r9, r4
 8080dd6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8080dda:	f880 9000 	strb.w	r9, [r0]
 8080dde:	f8d8 1000 	ldr.w	r1, [r8]
 8080de2:	4891      	ldr	r0, [pc, #580]	; (8081028 <loop+0x620>)
 8080de4:	f7ff fa92 	bl	808030c <_ZN7FatFile6existsEPKc>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 8080de8:	b368      	cbz	r0, 8080e46 <loop+0x43e>
    if(! Time.isValid()) 
        {
          fileName = String("lost-time000.jpg");   
//          fileName.String::operator[](fileName);
  ///       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
 8080dea:	3401      	adds	r4, #1
 8080dec:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8080df0:	d1d9      	bne.n	8080da6 <loop+0x39e>
 8080df2:	e028      	b.n	8080e46 <loop+0x43e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080df4:	498d      	ldr	r1, [pc, #564]	; (808102c <loop+0x624>)
 8080df6:	a81a      	add	r0, sp, #104	; 0x68
 8080df8:	f005 fea8 	bl	8086b4c <_ZN6StringC1ERKS_>
          if (!sd.exists(fileName)) {  break;  }
          }
        }
          else
          {
           fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%m-%d-%H-%M") + ".jpg");    
 8080dfc:	498c      	ldr	r1, [pc, #560]	; (8081030 <loop+0x628>)
 8080dfe:	a81a      	add	r0, sp, #104	; 0x68
 8080e00:	f005 feda 	bl	8086bb8 <_ZplRK15StringSumHelperPKc>
 8080e04:	4604      	mov	r4, r0
 8080e06:	f006 f8aa 	bl	8086f5e <_ZN9TimeClass3nowEv>
 8080e0a:	4b8a      	ldr	r3, [pc, #552]	; (8081034 <loop+0x62c>)
 8080e0c:	4602      	mov	r2, r0
 8080e0e:	498a      	ldr	r1, [pc, #552]	; (8081038 <loop+0x630>)
 8080e10:	a81e      	add	r0, sp, #120	; 0x78
 8080e12:	f006 f851 	bl	8086eb8 <_ZN9TimeClass6formatElPKc>
 8080e16:	a91e      	add	r1, sp, #120	; 0x78
 8080e18:	4620      	mov	r0, r4
 8080e1a:	f005 fec1 	bl	8086ba0 <_ZplRK15StringSumHelperRK6String>
 8080e1e:	4987      	ldr	r1, [pc, #540]	; (808103c <loop+0x634>)
 8080e20:	f005 feca 	bl	8086bb8 <_ZplRK15StringSumHelperPKc>
 8080e24:	4601      	mov	r1, r0
 8080e26:	a826      	add	r0, sp, #152	; 0x98
 8080e28:	f005 fe90 	bl	8086b4c <_ZN6StringC1ERKS_>
 8080e2c:	a926      	add	r1, sp, #152	; 0x98
 8080e2e:	487d      	ldr	r0, [pc, #500]	; (8081024 <loop+0x61c>)
 8080e30:	f005 fe97 	bl	8086b62 <_ZN6StringaSEOS_>
 8080e34:	a826      	add	r0, sp, #152	; 0x98
 8080e36:	f005 fe03 	bl	8086a40 <_ZN6StringD1Ev>
 8080e3a:	a81e      	add	r0, sp, #120	; 0x78
 8080e3c:	f005 fe00 	bl	8086a40 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080e40:	a81a      	add	r0, sp, #104	; 0x68
 8080e42:	f005 fdfd 	bl	8086a40 <_ZN6StringD1Ev>
 8080e46:	4c77      	ldr	r4, [pc, #476]	; (8081024 <loop+0x61c>)
          ///  strcpy(fileName, hold); 
          }

  // Open the file for writing
    file.open(fileName, FILE_WRITE);
 8080e48:	f244 2202 	movw	r2, #16898	; 0x4202
 8080e4c:	6821      	ldr	r1, [r4, #0]
 8080e4e:	487c      	ldr	r0, [pc, #496]	; (8081040 <loop+0x638>)
 8080e50:	f7ff fa6c 	bl	808032c <_ZN7FatFile4openEPKci>
  // Get the size of the image (frame) taken  
    uint16_t jpglen = cam.frameLength();
 8080e54:	487b      	ldr	r0, [pc, #492]	; (8081044 <loop+0x63c>)
 8080e56:	f000 fcf0 	bl	808183a <_ZN13camera_VC070611frameLengthEv>
 8080e5a:	b285      	uxth	r5, r0
    //Serial.print("Storing ");
    Serial.print(jpglen, DEC);
 8080e5c:	f007 f838 	bl	8087ed0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080e60:	220a      	movs	r2, #10
 8080e62:	4629      	mov	r1, r5
 8080e64:	f005 ff11 	bl	8086c8a <_ZN5Print11printNumberEmh>
    Serial.print(" byte image. ");
 8080e68:	f007 f832 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080e6c:	4976      	ldr	r1, [pc, #472]	; (8081048 <loop+0x640>)
 8080e6e:	f005 feeb 	bl	8086c48 <_ZN5Print5printEPKc>
    Serial.println(fileName);
 8080e72:	f007 f82d 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080e76:	6821      	ldr	r1, [r4, #0]
 8080e78:	f005 fefd 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8080e7c:	f004 fdcc 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>

    int32_t time = millis();
    pinMode(8, OUTPUT);
 8080e80:	2101      	movs	r1, #1
 8080e82:	4604      	mov	r4, r0
 8080e84:	2008      	movs	r0, #8
 8080e86:	f007 fd07 	bl	8088898 <pinMode>
    // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
 8080e8a:	f04f 0900 	mov.w	r9, #0
    while (jpglen > 0) {
 8080e8e:	b1ed      	cbz	r5, 8080ecc <loop+0x4c4>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 8080e90:	46a8      	mov	r8, r5
 8080e92:	2d40      	cmp	r5, #64	; 0x40
 8080e94:	bfa8      	it	ge
 8080e96:	f04f 0840 	movge.w	r8, #64	; 0x40
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
 8080e9a:	fa5f f188 	uxtb.w	r1, r8
 8080e9e:	4869      	ldr	r0, [pc, #420]	; (8081044 <loop+0x63c>)
 8080ea0:	f000 fce7 	bl	8081872 <_ZN13camera_VC070611readPictureEh>
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080ea4:	f109 0901 	add.w	r9, r9, #1
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
 8080ea8:	4601      	mov	r1, r0
 8080eaa:	4642      	mov	r2, r8
 8080eac:	4867      	ldr	r0, [pc, #412]	; (808104c <loop+0x644>)
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080eae:	fa5f f989 	uxtb.w	r9, r9
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
 8080eb2:	f7ff f955 	bl	8080160 <_ZN9PrintFile5writeEPKhj>
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080eb6:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8080eba:	d903      	bls.n	8080ec4 <loop+0x4bc>
      //  Serial.print('.');
        Blink();
 8080ebc:	f7ff fa7e 	bl	80803bc <_Z5Blinkv>
        wCount = 0;
 8080ec0:	f04f 0900 	mov.w	r9, #0
      }
      //Serial.print("Read ");  Serial.print(bytesToRead, DEC); Serial.println(" bytes");
      jpglen -= bytesToRead;
 8080ec4:	ebc8 0505 	rsb	r5, r8, r5
 8080ec8:	b2ad      	uxth	r5, r5

    int32_t time = millis();
    pinMode(8, OUTPUT);
    // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
    while (jpglen > 0) {
 8080eca:	e7e0      	b.n	8080e8e <loop+0x486>
        wCount = 0;
      }
      //Serial.print("Read ");  Serial.print(bytesToRead, DEC); Serial.println(" bytes");
      jpglen -= bytesToRead;
    }
    file.close();
 8080ecc:	485c      	ldr	r0, [pc, #368]	; (8081040 <loop+0x638>)
 8080ece:	f001 fbe5 	bl	808269c <_ZN7FatFile5closeEv>
 8080ed2:	f004 fda1 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
      time = millis() - time;
 8080ed6:	1b04      	subs	r4, r0, r4
    //Serial.println("done!");
    Serial.print(time); Serial.println(" ms elapsed");
 8080ed8:	f006 fffa 	bl	8087ed0 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8080edc:	2c00      	cmp	r4, #0
 8080ede:	4605      	mov	r5, r0
 8080ee0:	da03      	bge.n	8080eea <loop+0x4e2>
            t = print('-');
 8080ee2:	212d      	movs	r1, #45	; 0x2d
 8080ee4:	f005 feb4 	bl	8086c50 <_ZN5Print5printEc>
            val = -n;
 8080ee8:	4264      	negs	r4, r4
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080eea:	220a      	movs	r2, #10
 8080eec:	4621      	mov	r1, r4
 8080eee:	4628      	mov	r0, r5
 8080ef0:	f005 fecb 	bl	8086c8a <_ZN5Print11printNumberEmh>
 8080ef4:	f006 ffec 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080ef8:	4955      	ldr	r1, [pc, #340]	; (8081050 <loop+0x648>)
 8080efa:	f005 febc 	bl	8086c76 <_ZN5Print7printlnEPKc>
  /** Output a string from flash using the Arduino F() macro.
   * \param[in] arg pointing to flash string
   * \return the stream
   */
  ostream &operator<< (const __FlashStringHelper *arg) {
    putPgm(reinterpret_cast<const char*>(arg));
 8080efe:	4955      	ldr	r1, [pc, #340]	; (8081054 <loop+0x64c>)
 8080f00:	4855      	ldr	r0, [pc, #340]	; (8081058 <loop+0x650>)
 8080f02:	f001 f8a2 	bl	808204a <_ZN7ostream6putPgmEPKc>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false if an error occurred.
   */
  bool ls(const char* path, uint8_t flags = 0) {
    return ls(&Serial, path, flags);
 8080f06:	f006 ffe3 	bl	8087ed0 <_Z16_fetch_usbserialv>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080f0a:	2400      	movs	r4, #0
 8080f0c:	4605      	mov	r5, r0
   *
   * \return true for success or false if an error occurred.
   */
  bool ls(print_t* pr, const char* path, uint8_t flags) {
    FatFile dir;
    return dir.open(vwd(), path, O_RDONLY) && dir.ls(pr, flags);
 8080f0e:	4623      	mov	r3, r4
 8080f10:	4a52      	ldr	r2, [pc, #328]	; (808105c <loop+0x654>)
 8080f12:	4945      	ldr	r1, [pc, #276]	; (8081028 <loop+0x620>)
 8080f14:	a826      	add	r0, sp, #152	; 0x98
 8080f16:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
 8080f1a:	f88d 4099 	strb.w	r4, [sp, #153]	; 0x99
 8080f1e:	f001 fbc4 	bl	80826aa <_ZN7FatFile4openEPS_PKci>
 8080f22:	b128      	cbz	r0, 8080f30 <loop+0x528>
 8080f24:	4623      	mov	r3, r4
 8080f26:	2208      	movs	r2, #8
 8080f28:	4629      	mov	r1, r5
 8080f2a:	a826      	add	r0, sp, #152	; 0x98
 8080f2c:	f001 fd95 	bl	8082a5a <_ZN7FatFile2lsEP5Printhh>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080f30:	484b      	ldr	r0, [pc, #300]	; (8081060 <loop+0x658>)
 8080f32:	2300      	movs	r3, #0
 8080f34:	461a      	mov	r2, r3
 8080f36:	4619      	mov	r1, r3
 8080f38:	6840      	ldr	r0, [r0, #4]
 8080f3a:	f004 ff89 	bl	8085e50 <network_connect>
   Cellular.connect();   // this blocks further code execution (see reference) until connection
                          // when in SYSTEM_MODE(semi_automatic),
                          // unless SYSTEM_THREAD(ENABLED). I have SYSTEM_THREAD(ENABLED);
                          //  in any case, after 5 mins of not successfuly connecting the modem
                          // will give up and stop blocking code execution
   delay(500);
 8080f3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080f42:	f006 f81d 	bl	8086f80 <delay>
///   Serial.println("done the Cellular.connect() command, Waiting for Cellular.ready");
      // If the cellular modem does not successfuly connect to the cellular network in
      // 2 mins then blink blue LED and write message to serial below.
      // Regardless of code, after 5 mins of not successfuly connecting the modem will give up.
      if (!waitFor(Cellular.ready, a_minute * 1.5))
 8080f46:	4b47      	ldr	r3, [pc, #284]	; (8081064 <loop+0x65c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f48:	f04f 0900 	mov.w	r9, #0
 8080f4c:	6818      	ldr	r0, [r3, #0]
 8080f4e:	f008 f92b 	bl	80891a8 <__aeabi_i2d>
 8080f52:	2200      	movs	r2, #0
 8080f54:	4b44      	ldr	r3, [pc, #272]	; (8081068 <loop+0x660>)
 8080f56:	f008 f98d 	bl	8089274 <__aeabi_dmul>
 8080f5a:	f008 fc4d 	bl	80897f8 <__aeabi_d2uiz>
 8080f5e:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080f60:	2000      	movs	r0, #0
 8080f62:	f004 fd71 	bl	8085a48 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f66:	4680      	mov	r8, r0
 8080f68:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080f6a:	2000      	movs	r0, #0
 8080f6c:	f004 fd6c 	bl	8085a48 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f70:	ebb0 0208 	subs.w	r2, r0, r8
 8080f74:	eb61 0309 	sbc.w	r3, r1, r9
 8080f78:	42ab      	cmp	r3, r5
 8080f7a:	bf08      	it	eq
 8080f7c:	42a2      	cmpeq	r2, r4
 8080f7e:	d210      	bcs.n	8080fa2 <loop+0x59a>
            WeakSignalBlink();
            Serial.println("Difficulty connecting. Will try for 1 more min");
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080f80:	4837      	ldr	r0, [pc, #220]	; (8081060 <loop+0x658>)
 8080f82:	f7ff f94b 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 8080f86:	b960      	cbnz	r0, 8080fa2 <loop+0x59a>
 8080f88:	e044      	b.n	8081014 <loop+0x60c>
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
 8080f8a:	4b38      	ldr	r3, [pc, #224]	; (808106c <loop+0x664>)
 8080f8c:	f8c8 3000 	str.w	r3, [r8]
 8080f90:	602b      	str	r3, [r5, #0]
 8080f92:	603b      	str	r3, [r7, #0]
 8080f94:	e58a      	b.n	8080aac <loop+0xa4>
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
 8080f96:	4b35      	ldr	r3, [pc, #212]	; (808106c <loop+0x664>)
 8080f98:	4a35      	ldr	r2, [pc, #212]	; (8081070 <loop+0x668>)
 8080f9a:	f8c8 3000 	str.w	r3, [r8]
 8080f9e:	6013      	str	r3, [r2, #0]
 8080fa0:	e5ad      	b.n	8080afe <loop+0xf6>
            WeakSignalBlink();
            Serial.println("Difficulty connecting. Will try for 1 more min");
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080fa2:	482f      	ldr	r0, [pc, #188]	; (8081060 <loop+0x658>)
 8080fa4:	f7ff f93a 	bl	808021c <_ZN5spark13CellularClass5readyEv>
   delay(500);
///   Serial.println("done the Cellular.connect() command, Waiting for Cellular.ready");
      // If the cellular modem does not successfuly connect to the cellular network in
      // 2 mins then blink blue LED and write message to serial below.
      // Regardless of code, after 5 mins of not successfuly connecting the modem will give up.
      if (!waitFor(Cellular.ready, a_minute * 1.5))
 8080fa8:	b980      	cbnz	r0, 8080fcc <loop+0x5c4>
         {
            WeakSignalBlink();
 8080faa:	f7ff fa33 	bl	8080414 <_Z15WeakSignalBlinkv>
            delay(500);
 8080fae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080fb2:	f005 ffe5 	bl	8086f80 <delay>
            WeakSignalBlink();
 8080fb6:	f7ff fa2d 	bl	8080414 <_Z15WeakSignalBlinkv>
            Serial.println("Difficulty connecting. Will try for 1 more min");
 8080fba:	f006 ff89 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8080fbe:	492d      	ldr	r1, [pc, #180]	; (8081074 <loop+0x66c>)
 8080fc0:	f005 fe59 	bl	8086c76 <_ZN5Print7printlnEPKc>
            delay(500);
 8080fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080fc8:	f005 ffda 	bl	8086f80 <delay>
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080fcc:	4b25      	ldr	r3, [pc, #148]	; (8081064 <loop+0x65c>)
 8080fce:	f04f 0900 	mov.w	r9, #0
 8080fd2:	6818      	ldr	r0, [r3, #0]
 8080fd4:	f008 f8e8 	bl	80891a8 <__aeabi_i2d>
 8080fd8:	2200      	movs	r2, #0
 8080fda:	4b27      	ldr	r3, [pc, #156]	; (8081078 <loop+0x670>)
 8080fdc:	f008 f94a 	bl	8089274 <__aeabi_dmul>
 8080fe0:	f008 fc0a 	bl	80897f8 <__aeabi_d2uiz>
 8080fe4:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080fe6:	2000      	movs	r0, #0
 8080fe8:	f004 fd2e 	bl	8085a48 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080fec:	4680      	mov	r8, r0
 8080fee:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080ff0:	2000      	movs	r0, #0
 8080ff2:	f004 fd29 	bl	8085a48 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8080ffa:	eb61 0309 	sbc.w	r3, r1, r9
 8080ffe:	42ab      	cmp	r3, r5
 8081000:	bf08      	it	eq
 8081002:	42a2      	cmpeq	r2, r4
 8081004:	d23a      	bcs.n	808107c <loop+0x674>
 8081006:	4816      	ldr	r0, [pc, #88]	; (8081060 <loop+0x658>)
 8081008:	f7ff f908 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 808100c:	bbb0      	cbnz	r0, 808107c <loop+0x674>
            spark_process();
 808100e:	f004 ff77 	bl	8085f00 <spark_process>
 8081012:	e7ed      	b.n	8080ff0 <loop+0x5e8>
 8081014:	f004 ff74 	bl	8085f00 <spark_process>
 8081018:	e7a7      	b.n	8080f6a <loop+0x562>
 808101a:	bf00      	nop
 808101c:	0808d519 	.word	0x0808d519
 8081020:	0808d528 	.word	0x0808d528
 8081024:	200005e4 	.word	0x200005e4
 8081028:	2000059c 	.word	0x2000059c
 808102c:	200006cc 	.word	0x200006cc
 8081030:	0808d3ea 	.word	0x0808d3ea
 8081034:	0808d539 	.word	0x0808d539
 8081038:	20000960 	.word	0x20000960
 808103c:	0808d534 	.word	0x0808d534
 8081040:	200006f8 	.word	0x200006f8
 8081044:	20000658 	.word	0x20000658
 8081048:	0808d548 	.word	0x0808d548
 808104c:	200006f0 	.word	0x200006f0
 8081050:	0808d556 	.word	0x0808d556
 8081054:	0808d562 	.word	0x0808d562
 8081058:	2000071c 	.word	0x2000071c
 808105c:	0808deff 	.word	0x0808deff
 8081060:	20000d74 	.word	0x20000d74
 8081064:	20000028 	.word	0x20000028
 8081068:	3ff80000 	.word	0x3ff80000
 808106c:	c2c63333 	.word	0xc2c63333
 8081070:	20000024 	.word	0x20000024
 8081074:	0808d57d 	.word	0x0808d57d
 8081078:	3fe00000 	.word	0x3fe00000
 808107c:	4892      	ldr	r0, [pc, #584]	; (80812c8 <loop+0x8c0>)
 808107e:	f7ff f8cd 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 8081082:	bb28      	cbnz	r0, 80810d0 <loop+0x6c8>
         {
            WeakSignalBlink();
            delay(500);
            WeakSignalBlink();
            sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 8081084:	4c91      	ldr	r4, [pc, #580]	; (80812cc <loop+0x8c4>)
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
         {
            WeakSignalBlink();
 8081086:	f7ff f9c5 	bl	8080414 <_Z15WeakSignalBlinkv>
            delay(500);
 808108a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808108e:	f005 ff77 	bl	8086f80 <delay>
            WeakSignalBlink();
 8081092:	f7ff f9bf 	bl	8080414 <_Z15WeakSignalBlinkv>
            sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 8081096:	6822      	ldr	r2, [r4, #0]
 8081098:	498d      	ldr	r1, [pc, #564]	; (80812d0 <loop+0x8c8>)
 808109a:	488e      	ldr	r0, [pc, #568]	; (80812d4 <loop+0x8cc>)
 808109c:	f004 ff80 	bl	8085fa0 <sprintf>
           Serial.print("Difficulty connecting sleeping");   Serial.println(publishStr);
 80810a0:	f006 ff16 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80810a4:	498c      	ldr	r1, [pc, #560]	; (80812d8 <loop+0x8d0>)
 80810a6:	f005 fdcf 	bl	8086c48 <_ZN5Print5printEPKc>
 80810aa:	f006 ff11 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80810ae:	4989      	ldr	r1, [pc, #548]	; (80812d4 <loop+0x8cc>)
 80810b0:	f005 fde1 	bl	8086c76 <_ZN5Print7printlnEPKc>
            delay(500);
 80810b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80810b8:	f005 ff62 	bl	8086f80 <delay>
            //System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval*minutes);
            System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);
 80810bc:	4b87      	ldr	r3, [pc, #540]	; (80812dc <loop+0x8d4>)
 80810be:	6821      	ldr	r1, [r4, #0]
 80810c0:	681a      	ldr	r2, [r3, #0]
 80810c2:	4b87      	ldr	r3, [pc, #540]	; (80812e0 <loop+0x8d8>)
 80810c4:	434a      	muls	r2, r1
 80810c6:	681b      	ldr	r3, [r3, #0]
 80810c8:	2101      	movs	r1, #1
 80810ca:	a826      	add	r0, sp, #152	; 0x98
 80810cc:	f005 fa16 	bl	80864fc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 80810d0:	4c84      	ldr	r4, [pc, #528]	; (80812e4 <loop+0x8dc>)
            // if can't connect for a second time, go to deep sleep for
            // for "minutes" minutes and on wake the program starts from the beginning
          }
   Serial.println("passed the Cellular.ready test");
 80810d2:	f006 fefd 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80810d6:	4984      	ldr	r1, [pc, #528]	; (80812e8 <loop+0x8e0>)
 80810d8:	f005 fdcd 	bl	8086c76 <_ZN5Print7printlnEPKc>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80810dc:	f004 ff18 	bl	8085f10 <spark_cloud_flag_connect>
///     readyForOTA(5000);  // 5 second delay with call to Particle.process() to allow time for OTA flashing
     //delay(1000);

  /// if(Particle.connected()) { wDog.checkin();  } // resets the ApplicationWatchdog count if connected
///   if(Particle.connected()) {  
      wd->checkin();  
 80810e0:	f7ff f8aa 	bl	8080238 <_ZN19ApplicationWatchdog7checkinEv>
 80810e4:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80810e6:	4a81      	ldr	r2, [pc, #516]	; (80812ec <loop+0x8e4>)
 80810e8:	4981      	ldr	r1, [pc, #516]	; (80812f0 <loop+0x8e8>)
 80810ea:	f88d 3000 	strb.w	r3, [sp]
 80810ee:	a826      	add	r0, sp, #152	; 0x98
 80810f0:	233c      	movs	r3, #60	; 0x3c
 80810f2:	f006 fc9b 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80810f6:	a827      	add	r0, sp, #156	; 0x9c
 80810f8:	f7ff fc3c 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("particle", "connected",60,PRIVATE);
      Serial.println("connected");
 80810fc:	f006 fee8 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8081100:	497a      	ldr	r1, [pc, #488]	; (80812ec <loop+0x8e4>)
 8081102:	f005 fdb8 	bl	8086c76 <_ZN5Print7printlnEPKc>
// send data that is already in ubidots list
// add data to list of items to be sent to Ubidots. Max of 10 items in que. Limit set in include file ubidots.h


// ---- get cell signal strength & quality
      CellularSignal sig = Cellular.RSSI();  //this may hang up the system if no connection.
 8081106:	4970      	ldr	r1, [pc, #448]	; (80812c8 <loop+0x8c0>)
 8081108:	a826      	add	r0, sp, #152	; 0x98
 808110a:	f007 f819 	bl	8088140 <_ZN5spark13CellularClass4RSSIEv>
                                              //So this line has been moved to after the if Cellular.ready statement
      ubidots.add("CellQual", sig.qual); //value location will show up as Ubidots "context"
 808110e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8081110:	f008 fc9c 	bl	8089a4c <__aeabi_i2f>
 8081114:	4977      	ldr	r1, [pc, #476]	; (80812f4 <loop+0x8ec>)
 8081116:	4602      	mov	r2, r0
 8081118:	4877      	ldr	r0, [pc, #476]	; (80812f8 <loop+0x8f0>)
 808111a:	f003 f96b 	bl	80843f4 <_ZN7Ubidots3addEPcf>
      ubidots.add("CellStren", sig.rssi);
 808111e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8081120:	f008 fc94 	bl	8089a4c <__aeabi_i2f>
 8081124:	4975      	ldr	r1, [pc, #468]	; (80812fc <loop+0x8f4>)
 8081126:	4602      	mov	r2, r0
 8081128:	4873      	ldr	r0, [pc, #460]	; (80812f8 <loop+0x8f0>)
 808112a:	f003 f963 	bl	80843f4 <_ZN7Ubidots3addEPcf>
//
//  send the rest of the data to Ubidots
      ubidots.send(DATA_SOURCE_NAME,DATA_SOURCE_NAME); // Send rest of the data to your Ubidots account.
 808112e:	4a74      	ldr	r2, [pc, #464]	; (8081300 <loop+0x8f8>)
 8081130:	4871      	ldr	r0, [pc, #452]	; (80812f8 <loop+0x8f0>)
 8081132:	4611      	mov	r1, r2
 8081134:	f003 f967 	bl	8084406 <_ZN7Ubidots4sendEPKcS1_>
                //2020-01-12 modified UbiConstants.h to allow for sending up to 15 variables
                  // but unibots doesn't seem to accept well more than 14 for a device
            //        ubidots.sendAll();
    //readyForOTA(5000); //wait 5 seconds
    //delay(100000);
    waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds
 8081138:	2005      	movs	r0, #5
 808113a:	f7ff fb03 	bl	8080744 <_Z7waitSecm>

    UploadBlink();
 808113e:	f7ff f98d 	bl	808045c <_Z11UploadBlinkv>
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
 8081142:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    //readyForOTA(5000); //wait 5 seconds
    //delay(100000);
    waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds

    UploadBlink();
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
 8081146:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8081338 <loop+0x930>
 808114a:	4d6e      	ldr	r5, [pc, #440]	; (8081304 <loop+0x8fc>)
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
 808114c:	f8d8 0000 	ldr.w	r0, [r8]
 8081150:	f008 f83c 	bl	80891cc <__aeabi_f2d>
 8081154:	4b6c      	ldr	r3, [pc, #432]	; (8081308 <loop+0x900>)
 8081156:	2200      	movs	r2, #0
 8081158:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808115c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081160:	a355      	add	r3, pc, #340	; (adr r3, 80812b8 <loop+0x8b0>)
 8081162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081166:	4969      	ldr	r1, [pc, #420]	; (808130c <loop+0x904>)
 8081168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808116c:	a354      	add	r3, pc, #336	; (adr r3, 80812c0 <loop+0x8b8>)
 808116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081172:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8081176:	e9cd 2300 	strd	r2, r3, [sp]
 808117a:	4856      	ldr	r0, [pc, #344]	; (80812d4 <loop+0x8cc>)
 808117c:	4a64      	ldr	r2, [pc, #400]	; (8081310 <loop+0x908>)
 808117e:	f004 ff0f 	bl	8085fa0 <sprintf>
 8081182:	7823      	ldrb	r3, [r4, #0]
 8081184:	4a53      	ldr	r2, [pc, #332]	; (80812d4 <loop+0x8cc>)
 8081186:	f88d 3000 	strb.w	r3, [sp]
 808118a:	6829      	ldr	r1, [r5, #0]
 808118c:	233c      	movs	r3, #60	; 0x3c
 808118e:	a81e      	add	r0, sp, #120	; 0x78
 8081190:	f006 fc4c 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081194:	a81f      	add	r0, sp, #124	; 0x7c
 8081196:	f7ff fbed 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
 808119a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808119e:	f005 feef 	bl	8086f80 <delay>
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 80811a2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80811a6:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80811aa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80811ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80811b2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80811b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80811ba:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80811be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80811c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80811c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80811ca:	f8d8 0000 	ldr.w	r0, [r8]
 80811ce:	f007 fffd 	bl	80891cc <__aeabi_f2d>
 80811d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
 80811d6:	4b4f      	ldr	r3, [pc, #316]	; (8081314 <loop+0x90c>)
   ///   delay(500);
   ///   close_SD();

      Serial.println("finished uploading");
// send warning message to particle console
       sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 80811d8:	4e4f      	ldr	r6, [pc, #316]	; (8081318 <loop+0x910>)
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 80811da:	6818      	ldr	r0, [r3, #0]
 80811dc:	f007 fff6 	bl	80891cc <__aeabi_f2d>
 80811e0:	4a4e      	ldr	r2, [pc, #312]	; (808131c <loop+0x914>)
 80811e2:	e9cd 0100 	strd	r0, r1, [sp]
 80811e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80811ea:	a830      	add	r0, sp, #192	; 0xc0
 80811ec:	f004 fef0 	bl	8085fd0 <snprintf>
 80811f0:	7823      	ldrb	r3, [r4, #0]
 80811f2:	aa30      	add	r2, sp, #192	; 0xc0
 80811f4:	494a      	ldr	r1, [pc, #296]	; (8081320 <loop+0x918>)
 80811f6:	f88d 3000 	strb.w	r3, [sp]
 80811fa:	a81e      	add	r0, sp, #120	; 0x78
 80811fc:	233c      	movs	r3, #60	; 0x3c
 80811fe:	f006 fc15 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081202:	a81f      	add	r0, sp, #124	; 0x7c
 8081204:	f7ff fbb6 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("data", _json, PRIVATE);
delay(500);
 8081208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808120c:	f005 feb8 	bl	8086f80 <delay>
  //      sprintf(_json, ", %06.2f, %03.2f", fuel.getVCell(), fuel.getSoC());
   ///   logData(_json);
   ///   delay(500);
   ///   close_SD();

      Serial.println("finished uploading");
 8081210:	f006 fe5e 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8081214:	4943      	ldr	r1, [pc, #268]	; (8081324 <loop+0x91c>)
 8081216:	f005 fd2e 	bl	8086c76 <_ZN5Print7printlnEPKc>
// send warning message to particle console
       sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 808121a:	6832      	ldr	r2, [r6, #0]
 808121c:	4942      	ldr	r1, [pc, #264]	; (8081328 <loop+0x920>)
 808121e:	482d      	ldr	r0, [pc, #180]	; (80812d4 <loop+0x8cc>)
 8081220:	f004 febe 	bl	8085fa0 <sprintf>
 8081224:	7823      	ldrb	r3, [r4, #0]
 8081226:	4a2b      	ldr	r2, [pc, #172]	; (80812d4 <loop+0x8cc>)
 8081228:	f88d 3000 	strb.w	r3, [sp]
 808122c:	6829      	ldr	r1, [r5, #0]
 808122e:	233c      	movs	r3, #60	; 0x3c
 8081230:	a81e      	add	r0, sp, #120	; 0x78
 8081232:	f006 fbfb 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081236:	a81f      	add	r0, sp, #124	; 0x7c
 8081238:	f7ff fb9c 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr,60,PRIVATE);
      waitSec(seconds);  //wait seconds
 808123c:	6830      	ldr	r0, [r6, #0]
 808123e:	f7ff fa81 	bl	8080744 <_Z7waitSecm>
 8081242:	f004 fbe9 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
 8081246:	4606      	mov	r6, r0
 8081248:	f004 fbe6 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
} //end getmedianNum

inline void waitMS(uint32_t timeout)   // function to delay the system thread for the timeout period
{ // timeout == 0 waits forever
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
 808124c:	1b80      	subs	r0, r0, r6
 808124e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8081252:	d204      	bcs.n	808125e <loop+0x856>
 8081254:	f7fe fff0 	bl	8080238 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8081258:	f004 fe52 	bl	8085f00 <spark_process>
 808125c:	e7f4      	b.n	8081248 <loop+0x840>
         sprintf(publishStr, "sleeping %2i minutes", minutes+1);
       }
  else {
    */
  // send message to particle console
       sprintf(publishStr, "sleeping %2i minutes", minutes);
 808125e:	4e1b      	ldr	r6, [pc, #108]	; (80812cc <loop+0x8c4>)
 8081260:	4932      	ldr	r1, [pc, #200]	; (808132c <loop+0x924>)
 8081262:	6832      	ldr	r2, [r6, #0]
 8081264:	481b      	ldr	r0, [pc, #108]	; (80812d4 <loop+0x8cc>)
 8081266:	f004 fe9b 	bl	8085fa0 <sprintf>
       sprintf(event_name, " %s_on_%s", unit_name.c_str(), code_name);
 808126a:	682a      	ldr	r2, [r5, #0]
 808126c:	4b30      	ldr	r3, [pc, #192]	; (8081330 <loop+0x928>)
 808126e:	4931      	ldr	r1, [pc, #196]	; (8081334 <loop+0x92c>)
 8081270:	a81e      	add	r0, sp, #120	; 0x78
 8081272:	f004 fe95 	bl	8085fa0 <sprintf>
 8081276:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081278:	a91e      	add	r1, sp, #120	; 0x78
 808127a:	4a16      	ldr	r2, [pc, #88]	; (80812d4 <loop+0x8cc>)
 808127c:	f88d 3000 	strb.w	r3, [sp]
 8081280:	a81a      	add	r0, sp, #104	; 0x68
 8081282:	233c      	movs	r3, #60	; 0x3c
 8081284:	f006 fbd2 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081288:	a81b      	add	r0, sp, #108	; 0x6c
 808128a:	f7ff fb73 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish(event_name, publishStr,60,PRIVATE);
      waitSec(2); //wait 2 more seconds
 808128e:	2002      	movs	r0, #2
 8081290:	f7ff fa58 	bl	8080744 <_Z7waitSecm>
// Go to sleep for the amount of time determined by the battery charge
  // for sleep modes see:https://community.particle.io/t/choosing-an-electron-sleep-mode/41822?u=colemanjj
     System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);   //keeps SOC meter running
 8081294:	4b11      	ldr	r3, [pc, #68]	; (80812dc <loop+0x8d4>)
 8081296:	6831      	ldr	r1, [r6, #0]
 8081298:	681a      	ldr	r2, [r3, #0]
 808129a:	4b11      	ldr	r3, [pc, #68]	; (80812e0 <loop+0x8d8>)
 808129c:	434a      	muls	r2, r1
 808129e:	681b      	ldr	r3, [r3, #0]
 80812a0:	2101      	movs	r1, #1
 80812a2:	a81a      	add	r0, sp, #104	; 0x68
 80812a4:	f005 f92a 	bl	80864fc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>

//-----------LOOP
void loop() {  
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 80812a8:	a818      	add	r0, sp, #96	; 0x60
 80812aa:	f006 f93e 	bl	808752a <_ZN9FuelGaugeD1Ev>
    // System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);  // shuts down SOC meter
    // SLEEP_MODE_DEEP = 161 μA
    // SLEEP_MODE_SOFTPOWEROFF = 110 μA


} // end loop()
 80812ae:	b071      	add	sp, #452	; 0x1c4
 80812b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80812b4:	f3af 8000 	nop.w
 80812b8:	33333333 	.word	0x33333333
 80812bc:	bfe33333 	.word	0xbfe33333
 80812c0:	9999999a 	.word	0x9999999a
 80812c4:	bfe99999 	.word	0xbfe99999
 80812c8:	20000d74 	.word	0x20000d74
 80812cc:	2000001c 	.word	0x2000001c
 80812d0:	0808d5ac 	.word	0x0808d5ac
 80812d4:	20000738 	.word	0x20000738
 80812d8:	0808d5df 	.word	0x0808d5df
 80812dc:	2000002c 	.word	0x2000002c
 80812e0:	200006ec 	.word	0x200006ec
 80812e4:	200006dc 	.word	0x200006dc
 80812e8:	0808d5fe 	.word	0x0808d5fe
 80812ec:	0808d61d 	.word	0x0808d61d
 80812f0:	0808d627 	.word	0x0808d627
 80812f4:	0808d630 	.word	0x0808d630
 80812f8:	200006e0 	.word	0x200006e0
 80812fc:	0808d639 	.word	0x0808d639
 8081300:	0808d643 	.word	0x0808d643
 8081304:	200006cc 	.word	0x200006cc
 8081308:	3ff40000 	.word	0x3ff40000
 808130c:	0808d64f 	.word	0x0808d64f
 8081310:	20000756 	.word	0x20000756
 8081314:	20000020 	.word	0x20000020
 8081318:	20000018 	.word	0x20000018
 808131c:	0808d6c0 	.word	0x0808d6c0
 8081320:	0808dcfc 	.word	0x0808dcfc
 8081324:	0808d74a 	.word	0x0808d74a
 8081328:	0808d75d 	.word	0x0808d75d
 808132c:	0808d781 	.word	0x0808d781
 8081330:	0808d796 	.word	0x0808d796
 8081334:	0808d7a7 	.word	0x0808d7a7
 8081338:	20000024 	.word	0x20000024

0808133c <_Z9delayTime6String>:
  // In 2.0.0 and later, RESET_NO_WAIT prevents notifying the cloud of a pending reset
  System.reset();
    }

int delayTime(String delay)
  { if(delay == "long")
 808133c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808133e:	490e      	ldr	r1, [pc, #56]	; (8081378 <_Z9delayTime6String+0x3c>)
 8081340:	f005 fc4c 	bl	8086bdc <_ZNK6String6equalsEPKc>
 8081344:	4b0d      	ldr	r3, [pc, #52]	; (808137c <_Z9delayTime6String+0x40>)
 8081346:	b180      	cbz	r0, 808136a <_Z9delayTime6String+0x2e>
      {seconds=120;   // creat enough delay time to flash the unit
 8081348:	2278      	movs	r2, #120	; 0x78
 808134a:	601a      	str	r2, [r3, #0]
 808134c:	4b0c      	ldr	r3, [pc, #48]	; (8081380 <_Z9delayTime6String+0x44>)
 808134e:	4a0d      	ldr	r2, [pc, #52]	; (8081384 <_Z9delayTime6String+0x48>)
 8081350:	781b      	ldrb	r3, [r3, #0]
 8081352:	490d      	ldr	r1, [pc, #52]	; (8081388 <_Z9delayTime6String+0x4c>)
 8081354:	f88d 3000 	strb.w	r3, [sp]
 8081358:	a802      	add	r0, sp, #8
 808135a:	233c      	movs	r3, #60	; 0x3c
 808135c:	f006 fb66 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081360:	a803      	add	r0, sp, #12
 8081362:	f7ff fb07 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
 8081366:	2001      	movs	r0, #1
 8081368:	e003      	b.n	8081372 <_Z9delayTime6String+0x36>
    else 
      {seconds=5; return -1; }
 808136a:	2205      	movs	r2, #5
 808136c:	601a      	str	r2, [r3, #0]
 808136e:	f04f 30ff 	mov.w	r0, #4294967295
  }
 8081372:	b005      	add	sp, #20
 8081374:	f85d fb04 	ldr.w	pc, [sp], #4
 8081378:	0808d7b1 	.word	0x0808d7b1
 808137c:	20000018 	.word	0x20000018
 8081380:	200006dc 	.word	0x200006dc
 8081384:	0808d7b6 	.word	0x0808d7b6
 8081388:	0808d7c3 	.word	0x0808d7c3

0808138c <setup>:
  // reset the system after 15 min if the application is stuck.  set as an escape from some hangup.
    // watchDog is petted after cell connection estsblished
 //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
 808138c:	b510      	push	{r4, lr}
 808138e:	b088      	sub	sp, #32
     Serial.begin(9600);
 8081390:	f006 fd9e 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8081394:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081398:	f006 fd80 	bl	8087e9c <_ZN9USBSerial5beginEl>
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 808139c:	2018      	movs	r0, #24
 808139e:	f7fe fe7e 	bl	808009e <_Znwj>
 80813a2:	4604      	mov	r4, r0
 80813a4:	b128      	cbz	r0, 80813b2 <setup+0x26>
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
    ApplicationWatchdog(std::chrono::milliseconds ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}
 80813a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80813aa:	4a39      	ldr	r2, [pc, #228]	; (8081490 <setup+0x104>)
 80813ac:	4939      	ldr	r1, [pc, #228]	; (8081494 <setup+0x108>)
 80813ae:	f7fe ff4b 	bl	8080248 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 80813b2:	4b39      	ldr	r3, [pc, #228]	; (8081498 <setup+0x10c>)
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 80813b4:	2101      	movs	r1, #1
 //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
     Serial.begin(9600);
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 80813b6:	601c      	str	r4, [r3, #0]
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 80813b8:	4b38      	ldr	r3, [pc, #224]	; (808149c <setup+0x110>)
 80813ba:	8818      	ldrh	r0, [r3, #0]
 80813bc:	f007 fa6c 	bl	8088898 <pinMode>
// create power on digital pins for stable power supply AND so that sensors are shut down
  // when processor is shut down
	pinMode(D3, OUTPUT);     // power for the all digital sensors
 80813c0:	2101      	movs	r1, #1
 80813c2:	2003      	movs	r0, #3
 80813c4:	f007 fa68 	bl	8088898 <pinMode>
	digitalWrite(D3, HIGH);
 80813c8:	2101      	movs	r1, #1
 80813ca:	2003      	movs	r0, #3
 80813cc:	f007 fa75 	bl	80888ba <digitalWrite>
                              //activate the Electron internal pullup resistor but also have a 4.7Kohm pullup on the board
//	pinMode(D6, OUTPUT);     // power for 2nd analog sensor nt needed because TDS powered off B1
//	digitalWrite(D6, HIGH);

	pinMode(B0, OUTPUT);     // power for analog rain sensor
 80813d0:	2101      	movs	r1, #1
 80813d2:	2018      	movs	r0, #24
 80813d4:	f007 fa60 	bl	8088898 <pinMode>
	digitalWrite(B0, HIGH);	//
 80813d8:	2101      	movs	r1, #1
 80813da:	2018      	movs	r0, #24
 80813dc:	f007 fa6d 	bl	80888ba <digitalWrite>
  pinMode(B1, OUTPUT);     // power for analog TDS sensor
 80813e0:	2101      	movs	r1, #1
 80813e2:	2019      	movs	r0, #25
 80813e4:	f007 fa58 	bl	8088898 <pinMode>
  digitalWrite(B1, HIGH);	//
 80813e8:	2101      	movs	r1, #1
 80813ea:	2019      	movs	r0, #25
 80813ec:	f007 fa65 	bl	80888ba <digitalWrite>
	delay(500);   // delay to give time for power to turn on, don't know if this is needed
 80813f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80813f4:	f005 fdc4 	bl	8086f80 <delay>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 80813f8:	2100      	movs	r1, #0
 80813fa:	a805      	add	r0, sp, #20
 80813fc:	f004 fe17 	bl	808602e <_ZN4PMICC1Eb>
    // from spark_wiring_power.cpp
     @ https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_power.cpp
     This will be overridden if the input voltage drops out and comes back though (with something like a solar cell)
     and it will be set back to the default 900mA level. To counteract that you could set it in a Software Timer every 60 seconds or so.
    *******************************************************************************/
 pmic.setChargeCurrent(0, 0, 1, 0, 0, 0);      // Set charging current to 1024mA (512 + 512 offset)    //???????? is this good idea?
 8081400:	2200      	movs	r2, #0
 8081402:	4611      	mov	r1, r2
 8081404:	9202      	str	r2, [sp, #8]
 8081406:	9201      	str	r2, [sp, #4]
 8081408:	9200      	str	r2, [sp, #0]
 808140a:	2301      	movs	r3, #1
 808140c:	a805      	add	r0, sp, #20
 808140e:	f004 ff03 	bl	8086218 <_ZN4PMIC16setChargeCurrentEbbbbbb>
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
    */
 // Set the lowest input voltage to 4.84 volts. This keeps the solar panel from operating below 4.84 volts.
 pmic.setInputVoltageLimit(4840);  //  taken from code suggested by RyanB in the https://community.particle.io forum
 8081412:	f241 21e8 	movw	r1, #4840	; 0x12e8
 8081416:	a805      	add	r0, sp, #20
 8081418:	f004 fe74 	bl	8086104 <_ZN4PMIC20setInputVoltageLimitEt>
                    5000
                    5080
  * Return         : 0 Error, 1 Success
 *******************************************************************************/
 //pmic.setChargeVoltage(4512);  // for sealed lead-acit (SLA) battery. may not be implemented in spark_wiring_power.cpp
 pmic.setChargeVoltage(4208); // set upper limit on charge voltage. this limits the
 808141c:	f241 0170 	movw	r1, #4208	; 0x1070
 8081420:	a805      	add	r0, sp, #20
 8081422:	f004 ff2c 	bl	808627e <_ZN4PMIC16setChargeVoltageEt>
  *******************************************************************************
   bool PMIC::setChargeVoltage(uint16_t voltage) {.......................
 *******************************************************************************/

 // setup two BME280s
    if (!bme1.begin(0x77)) // the air sensor BME280 for temp, humidity, pressure
 8081426:	2177      	movs	r1, #119	; 0x77
 8081428:	481d      	ldr	r0, [pc, #116]	; (80814a0 <setup+0x114>)
 808142a:	f003 ff46 	bl	80852ba <_ZN9CE_BME2805beginEh>
 808142e:	b960      	cbnz	r0, 808144a <setup+0xbe>
 8081430:	4b1c      	ldr	r3, [pc, #112]	; (80814a4 <setup+0x118>)
 8081432:	a806      	add	r0, sp, #24
 8081434:	781b      	ldrb	r3, [r3, #0]
 8081436:	4a1c      	ldr	r2, [pc, #112]	; (80814a8 <setup+0x11c>)
 8081438:	f88d 3000 	strb.w	r3, [sp]
 808143c:	491b      	ldr	r1, [pc, #108]	; (80814ac <setup+0x120>)
 808143e:	233c      	movs	r3, #60	; 0x3c
 8081440:	f006 faf4 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081444:	a807      	add	r0, sp, #28
 8081446:	f7ff fa95 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///      Serial.println("Could not find 1st valid BME280 sensor, check wiring!");
      Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
        //  while (1);  // original code had this but seems like an endless loop if the BME is not detected.
      }
    if (!bme2.begin(0x76))  // the water depth sensor in oil made from a BME280. Temp and pressure
 808144a:	2176      	movs	r1, #118	; 0x76
 808144c:	4818      	ldr	r0, [pc, #96]	; (80814b0 <setup+0x124>)
 808144e:	f003 ff34 	bl	80852ba <_ZN9CE_BME2805beginEh>
 8081452:	b960      	cbnz	r0, 808146e <setup+0xe2>
 8081454:	4b13      	ldr	r3, [pc, #76]	; (80814a4 <setup+0x118>)
 8081456:	a806      	add	r0, sp, #24
 8081458:	781b      	ldrb	r3, [r3, #0]
 808145a:	4a13      	ldr	r2, [pc, #76]	; (80814a8 <setup+0x11c>)
 808145c:	f88d 3000 	strb.w	r3, [sp]
 8081460:	4912      	ldr	r1, [pc, #72]	; (80814ac <setup+0x120>)
 8081462:	233c      	movs	r3, #60	; 0x3c
 8081464:	f006 fae2 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081468:	a807      	add	r0, sp, #28
 808146a:	f7ff fa83 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///        Serial.println("Could not find 2nd valid BME280 sensor, check wiring!");
        Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
      }

 setup_SD();
 808146e:	f7ff f98f 	bl	8080790 <_Z8setup_SDv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8081472:	4a10      	ldr	r2, [pc, #64]	; (80814b4 <setup+0x128>)
 8081474:	4910      	ldr	r1, [pc, #64]	; (80814b8 <setup+0x12c>)
 8081476:	4811      	ldr	r0, [pc, #68]	; (80814bc <setup+0x130>)
 8081478:	f006 f9c8 	bl	808780c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  // register a Particle cloud Function
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
 808147c:	f006 fd28 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8081480:	490f      	ldr	r1, [pc, #60]	; (80814c0 <setup+0x134>)
 8081482:	f005 fbf8 	bl	8086c76 <_ZN5Print7printlnEPKc>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 8081486:	a805      	add	r0, sp, #20
 8081488:	f004 fde0 	bl	808604c <_ZN4PMICD1Ev>
 setup_SD();
  // register a Particle cloud Function
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
} // end setup()
 808148c:	b008      	add	sp, #32
 808148e:	bd10      	pop	{r4, pc}
 8081490:	080801c1 	.word	0x080801c1
 8081494:	000927c0 	.word	0x000927c0
 8081498:	200005f4 	.word	0x200005f4
 808149c:	20000008 	.word	0x20000008
 80814a0:	200005f8 	.word	0x200005f8
 80814a4:	200006dc 	.word	0x200006dc
 80814a8:	0808d7cc 	.word	0x0808d7cc
 80814ac:	0808d7e0 	.word	0x0808d7e0
 80814b0:	20000628 	.word	0x20000628
 80814b4:	0808d7e8 	.word	0x0808d7e8
 80814b8:	0808133d 	.word	0x0808133d
 80814bc:	080877e1 	.word	0x080877e1
 80814c0:	0808d7ee 	.word	0x0808d7ee

080814c4 <_GLOBAL__sub_I_fileName>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80814c4:	4b47      	ldr	r3, [pc, #284]	; (80815e4 <_GLOBAL__sub_I_fileName+0x120>)
      {seconds=120;   // creat enough delay time to flash the unit
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
    else 
      {seconds=5; return -1; }
  }
 80814c6:	b570      	push	{r4, r5, r6, lr}
 80814c8:	2400      	movs	r4, #0
 80814ca:	601c      	str	r4, [r3, #0]
 80814cc:	4b46      	ldr	r3, [pc, #280]	; (80815e8 <_GLOBAL__sub_I_fileName+0x124>)
 80814ce:	2501      	movs	r5, #1
 80814d0:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80814d2:	f004 f9f9 	bl	80858c8 <HAL_Pin_Map>
#include <SPI.h>        //**
#include <SdFat.h>      //**
// SD chip select pin.  Be sure to disable any other SPI devices such as Enet.
const uint8_t chipSelect = SS;  //**
// create filename as a global variable for use in several functions
String fileName ;       //**
 80814d6:	4945      	ldr	r1, [pc, #276]	; (80815ec <_GLOBAL__sub_I_fileName+0x128>)
 80814d8:	4845      	ldr	r0, [pc, #276]	; (80815f0 <_GLOBAL__sub_I_fileName+0x12c>)
 80814da:	f005 faf8 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80814de:	4e45      	ldr	r6, [pc, #276]	; (80815f4 <_GLOBAL__sub_I_fileName+0x130>)
 80814e0:	4a45      	ldr	r2, [pc, #276]	; (80815f8 <_GLOBAL__sub_I_fileName+0x134>)
 80814e2:	4946      	ldr	r1, [pc, #280]	; (80815fc <_GLOBAL__sub_I_fileName+0x138>)
 80814e4:	4842      	ldr	r0, [pc, #264]	; (80815f0 <_GLOBAL__sub_I_fileName+0x12c>)
 80814e6:	f007 fae7 	bl	8088ab8 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80814ea:	4b45      	ldr	r3, [pc, #276]	; (8081600 <_GLOBAL__sub_I_fileName+0x13c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80814ec:	2264      	movs	r2, #100	; 0x64
 80814ee:	6831      	ldr	r1, [r6, #0]
 80814f0:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 80814f4:	4a43      	ldr	r2, [pc, #268]	; (8081604 <_GLOBAL__sub_I_fileName+0x140>)
 80814f6:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
 80814fa:	400d      	ands	r5, r1
 80814fc:	71dc      	strb	r4, [r3, #7]
 80814fe:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 8081502:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 8081506:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 808150a:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 808150e:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 8081512:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 8081516:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 808151a:	461c      	mov	r4, r3
 808151c:	d10f      	bne.n	808153e <_GLOBAL__sub_I_fileName+0x7a>
 808151e:	4630      	mov	r0, r6
 8081520:	f7fe fdd0 	bl	80800c4 <__cxa_guard_acquire>
 8081524:	b158      	cbz	r0, 808153e <_GLOBAL__sub_I_fileName+0x7a>
 8081526:	4629      	mov	r1, r5
 8081528:	4837      	ldr	r0, [pc, #220]	; (8081608 <_GLOBAL__sub_I_fileName+0x144>)
 808152a:	f004 fedb 	bl	80862e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808152e:	4630      	mov	r0, r6
 8081530:	f7fe fdcd 	bl	80800ce <__cxa_guard_release>
 8081534:	4a30      	ldr	r2, [pc, #192]	; (80815f8 <_GLOBAL__sub_I_fileName+0x134>)
 8081536:	4935      	ldr	r1, [pc, #212]	; (808160c <_GLOBAL__sub_I_fileName+0x148>)
 8081538:	4833      	ldr	r0, [pc, #204]	; (8081608 <_GLOBAL__sub_I_fileName+0x144>)
 808153a:	f007 fabd 	bl	8088ab8 <__aeabi_atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 808153e:	4b32      	ldr	r3, [pc, #200]	; (8081608 <_GLOBAL__sub_I_fileName+0x144>)
 8081540:	4833      	ldr	r0, [pc, #204]	; (8081610 <_GLOBAL__sub_I_fileName+0x14c>)
 8081542:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 8081546:	2400      	movs	r4, #0
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8081548:	4b32      	ldr	r3, [pc, #200]	; (8081614 <_GLOBAL__sub_I_fileName+0x150>)
// File system object.
SdFat sd;               //**
// identify a Logging file.
SdFile file;            //**
 808154a:	4933      	ldr	r1, [pc, #204]	; (8081618 <_GLOBAL__sub_I_fileName+0x154>)
 808154c:	4a2a      	ldr	r2, [pc, #168]	; (80815f8 <_GLOBAL__sub_I_fileName+0x134>)
 808154e:	7204      	strb	r4, [r0, #8]
 8081550:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081552:	6044      	str	r4, [r0, #4]
 8081554:	6003      	str	r3, [r0, #0]
 8081556:	f007 faaf 	bl	8088ab8 <__aeabi_atexit>
// Error messages stored in flash.
#define error(msg) sd.errorHalt(F(msg))
ArduinoOutStream cout(Serial);
 808155a:	f006 fcb9 	bl	8087ed0 <_Z16_fetch_usbserialv>
  static const openmode out    = 0X40;
  /** truncate an existing stream when opening */
  static const openmode trunc  = 0X80;
  //----------------------------------------------------------------------------
  ios_base() : m_fill(' '), m_fmtflags(dec | right | skipws)
    , m_precision(2), m_width(0) {}
 808155e:	4b2f      	ldr	r3, [pc, #188]	; (808161c <_GLOBAL__sub_I_fileName+0x158>)
 8081560:	2220      	movs	r2, #32
 8081562:	721a      	strb	r2, [r3, #8]
 8081564:	f241 020a 	movw	r2, #4106	; 0x100a
 8081568:	2602      	movs	r6, #2
 808156a:	60da      	str	r2, [r3, #12]
 public:
  /** constructor
   *
   * \param[in] pr Print object for this ArduinoOutStream.
   */
  explicit ArduinoOutStream(Print& pr) : m_pr(&pr) {}
 808156c:	4a2c      	ldr	r2, [pc, #176]	; (8081620 <_GLOBAL__sub_I_fileName+0x15c>)
 808156e:	741e      	strb	r6, [r3, #16]
 8081570:	615c      	str	r4, [r3, #20]
 * \brief Error and state information for all streams
 */
class ios : public ios_base {
 public:
  /** Create ios with no error flags set */
  ios() : m_iostate(0) {}
 8081572:	761c      	strb	r4, [r3, #24]
 8081574:	601a      	str	r2, [r3, #0]
 8081576:	6058      	str	r0, [r3, #4]
// for camera-------------------------------
#include "camera_VC0706.h"
camera_VC0706 cam(&Serial1);
 8081578:	f006 fe96 	bl	80882a8 <_Z22__fetch_global_Serial1v>
 808157c:	4601      	mov	r1, r0
 808157e:	4829      	ldr	r0, [pc, #164]	; (8081624 <_GLOBAL__sub_I_fileName+0x160>)
 8081580:	f000 f86d 	bl	808165e <_ZN13camera_VC0706C1EP11USARTSerial>
#include "sensitive_definitions.h"  // this file contains ubidots token definition
                               // e.g.  #define your_token ""  // Put here your Ubidots TOKEN
// for the temp. humidity, pressure BME280 sensor
#include <CE_BME280.h>
// Create two BME280 instances
CE_BME280 bme1; // I2C  for air temp. pressure, humidity
 8081584:	4828      	ldr	r0, [pc, #160]	; (8081628 <_GLOBAL__sub_I_fileName+0x164>)
 8081586:	f003 fdb6 	bl	80850f6 <_ZN9CE_BME280C1Ev>
CE_BME280 bme2; // I2C   for WATER temp. & pressure
 808158a:	4828      	ldr	r0, [pc, #160]	; (808162c <_GLOBAL__sub_I_fileName+0x168>)
 808158c:	f003 fdb3 	bl	80850f6 <_ZN9CE_BME280C1Ev>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081590:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081594:	4d26      	ldr	r5, [pc, #152]	; (8081630 <_GLOBAL__sub_I_fileName+0x16c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081596:	4630      	mov	r0, r6
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081598:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808159a:	602c      	str	r4, [r5, #0]
 808159c:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808159e:	71ac      	strb	r4, [r5, #6]
 80815a0:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80815a2:	f004 fc09 	bl	8085db8 <set_system_mode>

//#include <Adafruit_DHT_Particle.h>  // air and humidity sensor.   includes "isnan()" function
//#include <math.h>
#include <Ubidots.h>   // using here Ubidots=3.1.4
//SYSTEM_MODE(AUTOMATIC); 
SYSTEM_MODE(SEMI_AUTOMATIC);   // was set at semi_automatic but I could not flash remotely, tried automatic then set back to semi-automatic
 80815a6:	4a14      	ldr	r2, [pc, #80]	; (80815f8 <_GLOBAL__sub_I_fileName+0x134>)
 80815a8:	4922      	ldr	r1, [pc, #136]	; (8081634 <_GLOBAL__sub_I_fileName+0x170>)
 80815aa:	4628      	mov	r0, r5
 80815ac:	f007 fa84 	bl	8088ab8 <__aeabi_atexit>
//The only main difference between SEMI_AUTOMATIC mode and AUTOMATIC mode is that for semi-automatic
    // Particle.connect() is not called at the beginning of your code;  With semi-automatic you must call Particle.connect() yourself
SYSTEM_THREAD(ENABLED);       // seems to make the checking for connection routine work, keep an eye on this ****
 80815b0:	4621      	mov	r1, r4
 80815b2:	2001      	movs	r0, #1
 80815b4:	f004 fc18 	bl	8085de8 <system_thread_set_state>
//#define your_token "xyz..."  // for privacy, the Ubidots token is defined in the included .h file as "your_token"
#define DATA_SOURCE_NAME "Spudnik-08b"
//#define unit_name "Spudnik-08b"
String unit_name = "Spudnik-08b";
 80815b8:	491f      	ldr	r1, [pc, #124]	; (8081638 <_GLOBAL__sub_I_fileName+0x174>)
 80815ba:	4820      	ldr	r0, [pc, #128]	; (808163c <_GLOBAL__sub_I_fileName+0x178>)
 80815bc:	f005 fa87 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>
 80815c0:	4a0d      	ldr	r2, [pc, #52]	; (80815f8 <_GLOBAL__sub_I_fileName+0x134>)
 80815c2:	490e      	ldr	r1, [pc, #56]	; (80815fc <_GLOBAL__sub_I_fileName+0x138>)
 80815c4:	481d      	ldr	r0, [pc, #116]	; (808163c <_GLOBAL__sub_I_fileName+0x178>)
 80815c6:	f007 fa77 	bl	8088ab8 <__aeabi_atexit>
#define code_name "particlesolar30c"

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 80815ca:	2201      	movs	r2, #1
 80815cc:	491c      	ldr	r1, [pc, #112]	; (8081640 <_GLOBAL__sub_I_fileName+0x17c>)
 80815ce:	481d      	ldr	r0, [pc, #116]	; (8081644 <_GLOBAL__sub_I_fileName+0x180>)
 80815d0:	f002 fee0 	bl	8084394 <_ZN7UbidotsC1EPc11IotProtocol>
      {seconds=120;   // creat enough delay time to flash the unit
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
    else 
      {seconds=5; return -1; }
  }
 80815d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String unit_name = "Spudnik-08b";
#define code_name "particlesolar30c"

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 80815d8:	4a07      	ldr	r2, [pc, #28]	; (80815f8 <_GLOBAL__sub_I_fileName+0x134>)
 80815da:	491b      	ldr	r1, [pc, #108]	; (8081648 <_GLOBAL__sub_I_fileName+0x184>)
 80815dc:	4819      	ldr	r0, [pc, #100]	; (8081644 <_GLOBAL__sub_I_fileName+0x180>)
 80815de:	f007 ba6b 	b.w	8088ab8 <__aeabi_atexit>
 80815e2:	bf00      	nop
 80815e4:	200006ec 	.word	0x200006ec
 80815e8:	200006dc 	.word	0x200006dc
 80815ec:	0808df27 	.word	0x0808df27
 80815f0:	200005e4 	.word	0x200005e4
 80815f4:	20000144 	.word	0x20000144
 80815f8:	20000140 	.word	0x20000140
 80815fc:	08086a41 	.word	0x08086a41
 8081600:	20000160 	.word	0x20000160
 8081604:	0808d2e0 	.word	0x0808d2e0
 8081608:	20000148 	.word	0x20000148
 808160c:	080801c5 	.word	0x080801c5
 8081610:	200006f0 	.word	0x200006f0
 8081614:	0808d33c 	.word	0x0808d33c
 8081618:	08080123 	.word	0x08080123
 808161c:	2000071c 	.word	0x2000071c
 8081620:	0808d31c 	.word	0x0808d31c
 8081624:	20000658 	.word	0x20000658
 8081628:	200005f8 	.word	0x200005f8
 808162c:	20000628 	.word	0x20000628
 8081630:	20000154 	.word	0x20000154
 8081634:	080801f5 	.word	0x080801f5
 8081638:	0808d643 	.word	0x0808d643
 808163c:	200006cc 	.word	0x200006cc
 8081640:	0808d7fb 	.word	0x0808d7fb
 8081644:	200006e0 	.word	0x200006e0
 8081648:	080843b1 	.word	0x080843b1

0808164c <_ZN13camera_VC070611common_initEv>:
#include "camera_VC0706.h"

void camera_VC0706::common_init(void) {
	swSerial  = NULL;
 808164c:	2300      	movs	r3, #0
 808164e:	66c3      	str	r3, [r0, #108]	; 0x6c
	hwSerial  = NULL;
 8081650:	6703      	str	r3, [r0, #112]	; 0x70
	frameptr  = 0;
 8081652:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	bufferLen = 0;
 8081656:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
	serialNum = 0;
 808165a:	7003      	strb	r3, [r0, #0]
 808165c:	4770      	bx	lr

0808165e <_ZN13camera_VC0706C1EP11USARTSerial>:
#endif
	common_init();  // Set everything to common state, then...
	swSerial = ser; // ...override swSerial with value passed.
}

camera_VC0706::camera_VC0706(HardwareSerial *ser) {
 808165e:	b508      	push	{r3, lr}
	common_init();  // Set everything to common state, then...
 8081660:	f7ff fff4 	bl	808164c <_ZN13camera_VC070611common_initEv>
	hwSerial = ser; // ...override hwSerial with value passed.
 8081664:	6701      	str	r1, [r0, #112]	; 0x70
}
 8081666:	bd08      	pop	{r3, pc}

08081668 <_ZN13camera_VC070611sendCommandEhPhh>:
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8081668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808166c:	4606      	mov	r6, r0
	if(swSerial) {
 808166e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8081670:	4688      	mov	r8, r1
 8081672:	4617      	mov	r7, r2
 8081674:	1e54      	subs	r4, r2, #1
 8081676:	1e5d      	subs	r5, r3, #1
	if(swSerial) {
 8081678:	b1b8      	cbz	r0, 80816aa <_ZN13camera_VC070611sendCommandEhPhh+0x42>
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
 808167a:	6803      	ldr	r3, [r0, #0]
 808167c:	2156      	movs	r1, #86	; 0x56
 808167e:	689b      	ldr	r3, [r3, #8]
 8081680:	4798      	blx	r3
		swSerial->write((byte)serialNum);
 8081682:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8081684:	7831      	ldrb	r1, [r6, #0]
 8081686:	6803      	ldr	r3, [r0, #0]
 8081688:	443d      	add	r5, r7
 808168a:	689b      	ldr	r3, [r3, #8]
 808168c:	4798      	blx	r3
		swSerial->write((byte)cmd);
 808168e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8081690:	4641      	mov	r1, r8
 8081692:	6803      	ldr	r3, [r0, #0]
 8081694:	689b      	ldr	r3, [r3, #8]
 8081696:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 8081698:	42a5      	cmp	r5, r4
 808169a:	d01f      	beq.n	80816dc <_ZN13camera_VC070611sendCommandEhPhh+0x74>
			swSerial->write((byte)args[i]);
 808169c:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 808169e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80816a2:	6803      	ldr	r3, [r0, #0]
 80816a4:	689b      	ldr	r3, [r3, #8]
 80816a6:	4798      	blx	r3
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
		swSerial->write((byte)serialNum);
		swSerial->write((byte)cmd);

		for (uint8_t i=0; i<argn; i++) {
 80816a8:	e7f6      	b.n	8081698 <_ZN13camera_VC070611sendCommandEhPhh+0x30>
			//Serial.print(args[i], HEX);
		}
#endif
	} else {
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
 80816aa:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80816ac:	2156      	movs	r1, #86	; 0x56
 80816ae:	6803      	ldr	r3, [r0, #0]
 80816b0:	443d      	add	r5, r7
 80816b2:	689b      	ldr	r3, [r3, #8]
 80816b4:	4798      	blx	r3
		hwSerial->write((byte)serialNum);
 80816b6:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80816b8:	7831      	ldrb	r1, [r6, #0]
 80816ba:	6803      	ldr	r3, [r0, #0]
 80816bc:	689b      	ldr	r3, [r3, #8]
 80816be:	4798      	blx	r3
		hwSerial->write((byte)cmd);
 80816c0:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80816c2:	4641      	mov	r1, r8
 80816c4:	6803      	ldr	r3, [r0, #0]
 80816c6:	689b      	ldr	r3, [r3, #8]
 80816c8:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 80816ca:	42ac      	cmp	r4, r5
 80816cc:	d006      	beq.n	80816dc <_ZN13camera_VC070611sendCommandEhPhh+0x74>
			hwSerial->write((byte)args[i]);
 80816ce:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80816d0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80816d4:	6803      	ldr	r3, [r0, #0]
 80816d6:	689b      	ldr	r3, [r3, #8]
 80816d8:	4798      	blx	r3
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
		hwSerial->write((byte)serialNum);
		hwSerial->write((byte)cmd);

		for (uint8_t i=0; i<argn; i++) {
 80816da:	e7f6      	b.n	80816ca <_ZN13camera_VC070611sendCommandEhPhh+0x62>
 80816dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080816e0 <_ZN13camera_VC070612readResponseEhh>:
		}
#endif
	}
}

uint8_t camera_VC0706::readResponse(uint8_t numbytes, uint8_t timeout) {
 80816e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80816e2:	4605      	mov	r5, r0
 80816e4:	460e      	mov	r6, r1
 80816e6:	4617      	mov	r7, r2
	uint8_t counter = 0;
	bufferLen = 0;
 80816e8:	2400      	movs	r4, #0
 80816ea:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
 80816ee:	42bc      	cmp	r4, r7
 80816f0:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
 80816f4:	d01f      	beq.n	8081736 <_ZN13camera_VC070612readResponseEhh+0x56>
 80816f6:	42b0      	cmp	r0, r6
 80816f8:	d01d      	beq.n	8081736 <_ZN13camera_VC070612readResponseEhh+0x56>
		avail = swSerial ? swSerial->available() : hwSerial->available();
 80816fa:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80816fc:	b900      	cbnz	r0, 8081700 <_ZN13camera_VC070612readResponseEhh+0x20>
 80816fe:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081700:	6803      	ldr	r3, [r0, #0]
 8081702:	691b      	ldr	r3, [r3, #16]
 8081704:	4798      	blx	r3
		if (avail <= 0) {
 8081706:	2800      	cmp	r0, #0
 8081708:	dc05      	bgt.n	8081716 <_ZN13camera_VC070612readResponseEhh+0x36>
			delay(1);
 808170a:	2001      	movs	r0, #1
			counter++;
 808170c:	3401      	adds	r4, #1
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
		avail = swSerial ? swSerial->available() : hwSerial->available();
		if (avail <= 0) {
			delay(1);
 808170e:	f005 fc37 	bl	8086f80 <delay>
			counter++;
 8081712:	b2e4      	uxtb	r4, r4
			continue;
 8081714:	e7eb      	b.n	80816ee <_ZN13camera_VC070612readResponseEhh+0xe>
		}
		counter = 0;
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
 8081716:	f895 4066 	ldrb.w	r4, [r5, #102]	; 0x66
 808171a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 808171c:	1c63      	adds	r3, r4, #1
 808171e:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
 8081722:	b900      	cbnz	r0, 8081726 <_ZN13camera_VC070612readResponseEhh+0x46>
 8081724:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081726:	6803      	ldr	r3, [r0, #0]
 8081728:	695b      	ldr	r3, [r3, #20]
 808172a:	4798      	blx	r3
 808172c:	192b      	adds	r3, r5, r4
 808172e:	b2c0      	uxtb	r0, r0
 8081730:	7058      	strb	r0, [r3, #1]
		if (avail <= 0) {
			delay(1);
			counter++;
			continue;
		}
		counter = 0;
 8081732:	2400      	movs	r4, #0
 8081734:	e7db      	b.n	80816ee <_ZN13camera_VC070612readResponseEhh+0xe>
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
	}
	return bufferLen;
}
 8081736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081738 <_ZN13camera_VC070610getVersionEv>:

	return runCommand(VC0706_DOWNSIZE_CTRL, args, 2, 5);
}

/***************** other high level commands */
char * camera_VC0706::getVersion(void) {
 8081738:	b513      	push	{r0, r1, r4, lr}
 808173a:	4604      	mov	r4, r0
	uint8_t args[] = {0x01};
 808173c:	aa02      	add	r2, sp, #8
 808173e:	2301      	movs	r3, #1
 8081740:	f802 3d04 	strb.w	r3, [r2, #-4]!

	sendCommand(VC0706_GEN_VERSION, args, 1);
 8081744:	2111      	movs	r1, #17
 8081746:	f7ff ff8f 	bl	8081668 <_ZN13camera_VC070611sendCommandEhPhh>
	// get reply
	if (!readResponse(CAMERABUFFSIZ, 200))
 808174a:	22c8      	movs	r2, #200	; 0xc8
 808174c:	2164      	movs	r1, #100	; 0x64
 808174e:	4620      	mov	r0, r4
 8081750:	f7ff ffc6 	bl	80816e0 <_ZN13camera_VC070612readResponseEhh>
 8081754:	b128      	cbz	r0, 8081762 <_ZN13camera_VC070610getVersionEv+0x2a>
		return 0;
	camerabuff[bufferLen] = 0;  // end it!
 8081756:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 808175a:	2200      	movs	r2, #0
 808175c:	4423      	add	r3, r4
 808175e:	705a      	strb	r2, [r3, #1]
	return (char *)camerabuff;  // return it!
 8081760:	1c60      	adds	r0, r4, #1
}
 8081762:	b002      	add	sp, #8
 8081764:	bd10      	pop	{r4, pc}

08081766 <_ZN13camera_VC070614verifyResponseEh>:
	}
	return bufferLen;
}

boolean camera_VC0706::verifyResponse(uint8_t command) {
	if ((camerabuff[0] != 0x76) ||
 8081766:	7843      	ldrb	r3, [r0, #1]
 8081768:	2b76      	cmp	r3, #118	; 0x76
 808176a:	d10b      	bne.n	8081784 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 808176c:	7882      	ldrb	r2, [r0, #2]
 808176e:	7803      	ldrb	r3, [r0, #0]
 8081770:	429a      	cmp	r2, r3
 8081772:	d107      	bne.n	8081784 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[1] != serialNum) ||
 8081774:	78c3      	ldrb	r3, [r0, #3]
 8081776:	428b      	cmp	r3, r1
 8081778:	d104      	bne.n	8081784 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[2] != command) ||
 808177a:	7900      	ldrb	r0, [r0, #4]
 808177c:	fab0 f080 	clz	r0, r0
 8081780:	0940      	lsrs	r0, r0, #5
 8081782:	4770      	bx	lr
	        (camerabuff[3] != 0x0))
		return false;
 8081784:	2000      	movs	r0, #0
	return true;

}
 8081786:	4770      	bx	lr

08081788 <_ZN13camera_VC070610runCommandEhPhhhb>:
	return camerabuff;
}

/**************** low level commands */
boolean camera_VC0706::runCommand(uint8_t cmd, uint8_t *args, uint8_t argn,
                                  uint8_t resplen, boolean flushflag) {
 8081788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808178c:	4698      	mov	r8, r3
 808178e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8081792:	4604      	mov	r4, r0
 8081794:	460d      	mov	r5, r1
 8081796:	4617      	mov	r7, r2
 8081798:	f89d 6018 	ldrb.w	r6, [sp, #24]
	// flush out anything in the buffer?
	if (flushflag) {
 808179c:	b11b      	cbz	r3, 80817a6 <_ZN13camera_VC070610runCommandEhPhhhb+0x1e>
		readResponse(100, 10);
 808179e:	220a      	movs	r2, #10
 80817a0:	2164      	movs	r1, #100	; 0x64
 80817a2:	f7ff ff9d 	bl	80816e0 <_ZN13camera_VC070612readResponseEhh>
	}

	sendCommand(cmd, args, argn);
 80817a6:	4643      	mov	r3, r8
 80817a8:	463a      	mov	r2, r7
 80817aa:	4629      	mov	r1, r5
 80817ac:	4620      	mov	r0, r4
 80817ae:	f7ff ff5b 	bl	8081668 <_ZN13camera_VC070611sendCommandEhPhh>
	if (readResponse(resplen, 200) != resplen)
 80817b2:	22c8      	movs	r2, #200	; 0xc8
 80817b4:	4631      	mov	r1, r6
 80817b6:	4620      	mov	r0, r4
 80817b8:	f7ff ff92 	bl	80816e0 <_ZN13camera_VC070612readResponseEhh>
 80817bc:	4286      	cmp	r6, r0
 80817be:	d105      	bne.n	80817cc <_ZN13camera_VC070610runCommandEhPhhhb+0x44>
		return false;
	if (! verifyResponse(cmd))
 80817c0:	4629      	mov	r1, r5
 80817c2:	4620      	mov	r0, r4
		return false;
	return true;
}
 80817c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}

	sendCommand(cmd, args, argn);
	if (readResponse(resplen, 200) != resplen)
		return false;
	if (! verifyResponse(cmd))
 80817c8:	f7ff bfcd 	b.w	8081766 <_ZN13camera_VC070614verifyResponseEh>
		return false;
	return true;
}
 80817cc:	2000      	movs	r0, #0
 80817ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080817d2 <_ZN13camera_VC07065resetEv>:
	if(swSerial) swSerial->begin(baud);
	else         hwSerial->begin(baud);
	return reset();
}

boolean camera_VC0706::reset() {
 80817d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x0};
 80817d4:	2300      	movs	r3, #0
 80817d6:	aa04      	add	r2, sp, #16
 80817d8:	f802 3d04 	strb.w	r3, [r2, #-4]!

	return runCommand(VC0706_RESET, args, 1, 5);
 80817dc:	2105      	movs	r1, #5
 80817de:	2301      	movs	r3, #1
 80817e0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80817e4:	2126      	movs	r1, #38	; 0x26
 80817e6:	f7ff ffcf 	bl	8081788 <_ZN13camera_VC070610runCommandEhPhhhb>
}
 80817ea:	b005      	add	sp, #20
 80817ec:	f85d fb04 	ldr.w	pc, [sp], #4

080817f0 <_ZN13camera_VC07065beginEt>:
camera_VC0706::camera_VC0706(HardwareSerial *ser) {
	common_init();  // Set everything to common state, then...
	hwSerial = ser; // ...override hwSerial with value passed.
}

boolean camera_VC0706::begin(uint16_t baud) {
 80817f0:	b510      	push	{r4, lr}
 80817f2:	4604      	mov	r4, r0
	if(swSerial) swSerial->begin(baud);
 80817f4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80817f6:	b110      	cbz	r0, 80817fe <_ZN13camera_VC07065beginEt+0xe>
 80817f8:	f002 f8fc 	bl	80839f4 <_ZN18ParticleSoftSerial5beginEm>
 80817fc:	e002      	b.n	8081804 <_ZN13camera_VC07065beginEt+0x14>
	else         hwSerial->begin(baud);
 80817fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8081800:	f006 fd4c 	bl	808829c <_ZN11USARTSerial5beginEm>
	return reset();
 8081804:	4620      	mov	r0, r4
}
 8081806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

boolean camera_VC0706::begin(uint16_t baud) {
	if(swSerial) swSerial->begin(baud);
	else         hwSerial->begin(baud);
	return reset();
 808180a:	f7ff bfe2 	b.w	80817d2 <_ZN13camera_VC07065resetEv>

0808180e <_ZN13camera_VC070619cameraFrameBuffCtrlEh>:
boolean camera_VC0706::TVoff() {
	uint8_t args[] = {0x1, 0x0};
	return runCommand(VC0706_TVOUT_CTRL, args, sizeof(args), 5);
}

boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
 808180e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x1, command};
 8081810:	2301      	movs	r3, #1
 8081812:	f88d 300c 	strb.w	r3, [sp, #12]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 8081816:	9301      	str	r3, [sp, #4]
 8081818:	2305      	movs	r3, #5
	uint8_t args[] = {0x1, 0x0};
	return runCommand(VC0706_TVOUT_CTRL, args, sizeof(args), 5);
}

boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
 808181a:	f88d 100d 	strb.w	r1, [sp, #13]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 808181e:	9300      	str	r3, [sp, #0]
 8081820:	aa03      	add	r2, sp, #12
 8081822:	2302      	movs	r3, #2
 8081824:	2136      	movs	r1, #54	; 0x36
 8081826:	f7ff ffaf 	bl	8081788 <_ZN13camera_VC070610runCommandEhPhhhb>
}
 808182a:	b005      	add	sp, #20
 808182c:	f85d fb04 	ldr.w	pc, [sp], #4

08081830 <_ZN13camera_VC070611takePictureEv>:
	return true;
}


boolean camera_VC0706::takePicture() {
	frameptr = 0;
 8081830:	2100      	movs	r1, #0
 8081832:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
	return cameraFrameBuffCtrl(VC0706_STOPCURRENTFRAME);
 8081836:	f7ff bfea 	b.w	808180e <_ZN13camera_VC070619cameraFrameBuffCtrlEh>

0808183a <_ZN13camera_VC070611frameLengthEv>:
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
 808183a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x01, 0x00};
 808183c:	2301      	movs	r3, #1
 808183e:	2200      	movs	r2, #0
 8081840:	f88d 300c 	strb.w	r3, [sp, #12]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 8081844:	9301      	str	r3, [sp, #4]
 8081846:	2309      	movs	r3, #9
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
	uint8_t args[] = {0x01, 0x00};
 8081848:	f88d 200d 	strb.w	r2, [sp, #13]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 808184c:	9300      	str	r3, [sp, #0]
 808184e:	aa03      	add	r2, sp, #12
 8081850:	2302      	movs	r3, #2
 8081852:	2134      	movs	r1, #52	; 0x34
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
 8081854:	4604      	mov	r4, r0
	uint8_t args[] = {0x01, 0x00};
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 8081856:	f7ff ff97 	bl	8081788 <_ZN13camera_VC070610runCommandEhPhhhb>
 808185a:	b140      	cbz	r0, 808186e <_ZN13camera_VC070611frameLengthEv+0x34>
 808185c:	88e3      	ldrh	r3, [r4, #6]
	uint32_t len;
	len = camerabuff[5];
	len <<= 8;
	len |= camerabuff[6];
	len <<= 8;
	len |= camerabuff[7];
 808185e:	7a20      	ldrb	r0, [r4, #8]
 8081860:	ba5b      	rev16	r3, r3
 8081862:	b29b      	uxth	r3, r3
 8081864:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	len <<= 8;
	len |= camerabuff[8];
 8081868:	7a63      	ldrb	r3, [r4, #9]
 808186a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8

	return len;
}
 808186e:	b004      	add	sp, #16
 8081870:	bd10      	pop	{r4, pc}

08081872 <_ZN13camera_VC070611readPictureEh>:
uint8_t camera_VC0706::available(void) {
	return bufferLen;
}


uint8_t * camera_VC0706::readPicture(uint8_t n) {
 8081872:	b570      	push	{r4, r5, r6, lr}
 8081874:	4604      	mov	r4, r0
 8081876:	460d      	mov	r5, r1
 8081878:	b086      	sub	sp, #24
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 808187a:	220d      	movs	r2, #13
 808187c:	2100      	movs	r1, #0
 808187e:	a802      	add	r0, sp, #8
 8081880:	f008 fe66 	bl	808a550 <memset>
 8081884:	230c      	movs	r3, #12
 8081886:	f88d 3008 	strb.w	r3, [sp, #8]
}


uint8_t * camera_VC0706::readPicture(uint8_t n) {
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
 808188a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 808188e:	260a      	movs	r6, #10
 8081890:	121a      	asrs	r2, r3, #8
 8081892:	f88d 200d 	strb.w	r2, [sp, #13]
 8081896:	f88d 300e 	strb.w	r3, [sp, #14]

	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 808189a:	2205      	movs	r2, #5
 808189c:	2300      	movs	r3, #0
 808189e:	e88d 000c 	stmia.w	sp, {r2, r3}
 80818a2:	2132      	movs	r1, #50	; 0x32
 80818a4:	230d      	movs	r3, #13
 80818a6:	aa02      	add	r2, sp, #8
 80818a8:	4620      	mov	r0, r4
uint8_t * camera_VC0706::readPicture(uint8_t n) {
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 80818aa:	f88d 600a 	strb.w	r6, [sp, #10]
 80818ae:	f88d 6014 	strb.w	r6, [sp, #20]
 80818b2:	f88d 5012 	strb.w	r5, [sp, #18]

	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 80818b6:	f7ff ff67 	bl	8081788 <_ZN13camera_VC070610runCommandEhPhhhb>
 80818ba:	b908      	cbnz	r0, 80818c0 <_ZN13camera_VC070611readPictureEh+0x4e>
		return 0;
 80818bc:	2000      	movs	r0, #0
 80818be:	e00d      	b.n	80818dc <_ZN13camera_VC070611readPictureEh+0x6a>


	// read into the buffer PACKETLEN!
	if (readResponse(n+5, CAMERADELAY) == 0)
 80818c0:	1d69      	adds	r1, r5, #5
 80818c2:	4632      	mov	r2, r6
 80818c4:	b2c9      	uxtb	r1, r1
 80818c6:	4620      	mov	r0, r4
 80818c8:	f7ff ff0a 	bl	80816e0 <_ZN13camera_VC070612readResponseEhh>
 80818cc:	2800      	cmp	r0, #0
 80818ce:	d0f5      	beq.n	80818bc <_ZN13camera_VC070611readPictureEh+0x4a>
		return 0;


	frameptr += n;
 80818d0:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68

	return camerabuff;
 80818d4:	1c60      	adds	r0, r4, #1
	// read into the buffer PACKETLEN!
	if (readResponse(n+5, CAMERADELAY) == 0)
		return 0;


	frameptr += n;
 80818d6:	4429      	add	r1, r5
 80818d8:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68

	return camerabuff;
}
 80818dc:	b006      	add	sp, #24
 80818de:	bd70      	pop	{r4, r5, r6, pc}

080818e0 <_GLOBAL__sub_I__ZN13camera_VC070611common_initEv>:
 80818e0:	f003 bff2 	b.w	80858c8 <HAL_Pin_Map>

080818e4 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 80818e4:	f003 bff0 	b.w	80858c8 <HAL_Pin_Map>

080818e8 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80818e8:	f003 bfee 	b.w	80858c8 <HAL_Pin_Map>

080818ec <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80818ec:	b510      	push	{r4, lr}
 80818ee:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80818f0:	3024      	adds	r0, #36	; 0x24
 80818f2:	f001 f935 	bl	8082b60 <_ZN8FatCache4syncEv>
 80818f6:	b128      	cbz	r0, 8081904 <_ZN9FatVolume9cacheSyncEv+0x18>
 80818f8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 80818fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081900:	f001 b92e 	b.w	8082b60 <_ZN8FatCache4syncEv>
  }
 8081904:	bd10      	pop	{r4, pc}

08081906 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8081906:	1e41      	subs	r1, r0, #1
 8081908:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 808190c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808190e:	0843      	lsrs	r3, r0, #1
 8081910:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8081914:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8081918:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808191a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808191c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081920:	d1f5      	bne.n	808190e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8081922:	4770      	bx	lr

08081924 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 8081924:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 8081926:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 8081928:	4604      	mov	r4, r0
 808192a:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 808192c:	b923      	cbnz	r3, 8081938 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
 808192e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
 8081932:	6889      	ldr	r1, [r1, #8]
 8081934:	f000 bc9d 	b.w	8082272 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
 8081938:	2224      	movs	r2, #36	; 0x24
 808193a:	2100      	movs	r1, #0
 808193c:	f008 fe08 	bl	808a550 <memset>
  m_attr = FILE_ATTR_SUBDIR;
 8081940:	2310      	movs	r3, #16
  m_flags = F_READ;
 8081942:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
 8081944:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 8081946:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 8081948:	68ab      	ldr	r3, [r5, #8]
 808194a:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 808194c:	68eb      	ldr	r3, [r5, #12]
 808194e:	6223      	str	r3, [r4, #32]
  return true;
}
 8081950:	bd38      	pop	{r3, r4, r5, pc}
	...

08081954 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8081954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8081958:	7803      	ldrb	r3, [r0, #0]
 808195a:	1c44      	adds	r4, r0, #1
 808195c:	2b20      	cmp	r3, #32
 808195e:	d101      	bne.n	8081964 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8081960:	4620      	mov	r0, r4
 8081962:	e7f9      	b.n	8081958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8081964:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081966:	4f70      	ldr	r7, [pc, #448]	; (8081b28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8081968:	6088      	str	r0, [r1, #8]
 808196a:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 808196c:	462e      	mov	r6, r5
 808196e:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8081972:	b30b      	cbz	r3, 80819b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8081974:	2b2f      	cmp	r3, #47	; 0x2f
 8081976:	d101      	bne.n	808197c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8081978:	1903      	adds	r3, r0, r4
 808197a:	e017      	b.n	80819ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808197c:	2b5c      	cmp	r3, #92	; 0x5c
 808197e:	d102      	bne.n	8081986 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8081980:	2000      	movs	r0, #0
 8081982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081986:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808198a:	b2e4      	uxtb	r4, r4
 808198c:	2c1d      	cmp	r4, #29
 808198e:	d803      	bhi.n	8081998 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8081990:	fa27 f404 	lsr.w	r4, r7, r4
 8081994:	07e4      	lsls	r4, r4, #31
 8081996:	d4f3      	bmi.n	8081980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8081998:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 808199c:	2c3c      	cmp	r4, #60	; 0x3c
 808199e:	d0ef      	beq.n	8081980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80819a0:	3b20      	subs	r3, #32
 80819a2:	2b5e      	cmp	r3, #94	; 0x5e
 80819a4:	d9e1      	bls.n	808196a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80819a6:	e7eb      	b.n	8081980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80819a8:	2d2f      	cmp	r5, #47	; 0x2f
 80819aa:	d105      	bne.n	80819b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80819ac:	461e      	mov	r6, r3
 80819ae:	f813 5b01 	ldrb.w	r5, [r3], #1
 80819b2:	2d20      	cmp	r5, #32
 80819b4:	d1f8      	bne.n	80819a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80819b6:	e7f9      	b.n	80819ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80819b8:	6016      	str	r6, [r2, #0]
 80819ba:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80819bc:	4298      	cmp	r0, r3
 80819be:	ebc0 0803 	rsb	r8, r0, r3
 80819c2:	d009      	beq.n	80819d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80819c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80819c8:	2a2e      	cmp	r2, #46	; 0x2e
 80819ca:	d0f7      	beq.n	80819bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80819cc:	2a20      	cmp	r2, #32
 80819ce:	d0f5      	beq.n	80819bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80819d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80819d4:	dcd4      	bgt.n	8081980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80819d6:	e001      	b.n	80819dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80819d8:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80819dc:	f8c1 8004 	str.w	r8, [r1, #4]
 80819e0:	f101 030c 	add.w	r3, r1, #12
 80819e4:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80819e8:	2420      	movs	r4, #32
 80819ea:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80819ee:	4293      	cmp	r3, r2
 80819f0:	d1fb      	bne.n	80819ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80819f2:	4603      	mov	r3, r0
 80819f4:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80819f6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80819fa:	2c2e      	cmp	r4, #46	; 0x2e
 80819fc:	d0fa      	beq.n	80819f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 80819fe:	2c20      	cmp	r4, #32
 8081a00:	d0f8      	beq.n	80819f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8081a02:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8081a06:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8081a0a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8081a0c:	1c73      	adds	r3, r6, #1
 8081a0e:	d107      	bne.n	8081a20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8081a10:	2700      	movs	r7, #0
 8081a12:	f04f 0e07 	mov.w	lr, #7
 8081a16:	463d      	mov	r5, r7
 8081a18:	46ba      	mov	sl, r7
 8081a1a:	f04f 0908 	mov.w	r9, #8
 8081a1e:	e009      	b.n	8081a34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8081a20:	5d83      	ldrb	r3, [r0, r6]
 8081a22:	2b2e      	cmp	r3, #46	; 0x2e
 8081a24:	d0f4      	beq.n	8081a10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8081a26:	3e01      	subs	r6, #1
 8081a28:	e7f0      	b.n	8081a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8081a2a:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8081a2c:	2b20      	cmp	r3, #32
 8081a2e:	d104      	bne.n	8081a3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8081a30:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8081a32:	3201      	adds	r2, #1
 8081a34:	4542      	cmp	r2, r8
 8081a36:	dbf8      	blt.n	8081a2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8081a38:	e04b      	b.n	8081ad2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8081a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8081a3c:	d102      	bne.n	8081a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8081a3e:	42b2      	cmp	r2, r6
 8081a40:	d1f6      	bne.n	8081a30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8081a42:	e003      	b.n	8081a4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8081a44:	2b22      	cmp	r3, #34	; 0x22
 8081a46:	d017      	beq.n	8081a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8081a48:	2b7c      	cmp	r3, #124	; 0x7c
 8081a4a:	d015      	beq.n	8081a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8081a4c:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8081a50:	f1bc 0f05 	cmp.w	ip, #5
 8081a54:	d801      	bhi.n	8081a5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8081a56:	2b2d      	cmp	r3, #45	; 0x2d
 8081a58:	d10e      	bne.n	8081a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 8081a5a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8081a5e:	f1bc 0f05 	cmp.w	ip, #5
 8081a62:	d909      	bls.n	8081a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8081a64:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8081a68:	f1bc 0f02 	cmp.w	ip, #2
 8081a6c:	d904      	bls.n	8081a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8081a6e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8081a72:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8081a76:	d902      	bls.n	8081a7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8081a78:	42b2      	cmp	r2, r6
 8081a7a:	d10e      	bne.n	8081a9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8081a7c:	e049      	b.n	8081b12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8081a7e:	42b2      	cmp	r2, r6
 8081a80:	d047      	beq.n	8081b12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8081a82:	4575      	cmp	r5, lr
 8081a84:	d821      	bhi.n	8081aca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8081a86:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8081a8a:	f1bc 0f19 	cmp.w	ip, #25
 8081a8e:	d808      	bhi.n	8081aa2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8081a90:	3b20      	subs	r3, #32
 8081a92:	b2db      	uxtb	r3, r3
        lc |= bit;
 8081a94:	ea49 0707 	orr.w	r7, r9, r7
 8081a98:	e00a      	b.n	8081ab0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8081a9a:	4575      	cmp	r5, lr
 8081a9c:	d815      	bhi.n	8081aca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8081a9e:	2400      	movs	r4, #0
      c = '_';
 8081aa0:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8081aa2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8081aa6:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8081aaa:	bf98      	it	ls
 8081aac:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8081ab0:	f105 0c01 	add.w	ip, r5, #1
 8081ab4:	fa5f fc8c 	uxtb.w	ip, ip
 8081ab8:	440d      	add	r5, r1
      if (i < 7) {
 8081aba:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8081abe:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8081ac0:	d801      	bhi.n	8081ac6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8081ac2:	f881 c00c 	strb.w	ip, [r1, #12]
 8081ac6:	4665      	mov	r5, ip
 8081ac8:	e7b3      	b.n	8081a32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8081aca:	f1be 0f0a 	cmp.w	lr, #10
 8081ace:	d117      	bne.n	8081b00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8081ad0:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8081ad2:	7b4b      	ldrb	r3, [r1, #13]
 8081ad4:	2b20      	cmp	r3, #32
 8081ad6:	f43f af53 	beq.w	8081980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8081ada:	b13c      	cbz	r4, 8081aec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8081adc:	ea1a 0f07 	tst.w	sl, r7
 8081ae0:	bf18      	it	ne
 8081ae2:	2702      	movne	r7, #2
 8081ae4:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8081ae6:	2001      	movs	r0, #1
 8081ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8081aec:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8081aee:	2001      	movs	r0, #1
 8081af0:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8081af2:	4419      	add	r1, r3
 8081af4:	237e      	movs	r3, #126	; 0x7e
 8081af6:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8081af8:	2331      	movs	r3, #49	; 0x31
 8081afa:	738b      	strb	r3, [r1, #14]
 8081afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8081b00:	42b2      	cmp	r2, r6
 8081b02:	dce5      	bgt.n	8081ad0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8081b04:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8081b06:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081b0a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081b0c:	f04f 0910 	mov.w	r9, #16
 8081b10:	e78e      	b.n	8081a30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8081b12:	f1be 0f0a 	cmp.w	lr, #10
 8081b16:	d0db      	beq.n	8081ad0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8081b18:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8081b1a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081b1e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081b20:	f04f 0910 	mov.w	r9, #16
 8081b24:	e785      	b.n	8081a32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8081b26:	bf00      	nop
 8081b28:	31000101 	.word	0x31000101

08081b2c <_ZN7FatFile9printNameEP5Print>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
 8081b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile dirFile;
  uint16_t u;
  size_t n = 0;
  ldir_t* ldir;

  if (!isLFN()) {
 8081b30:	78c3      	ldrb	r3, [r0, #3]

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
 8081b32:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081b34:	2400      	movs	r4, #0
 8081b36:	4680      	mov	r8, r0
 8081b38:	4689      	mov	r9, r1
 8081b3a:	f88d 4004 	strb.w	r4, [sp, #4]
 8081b3e:	f88d 4005 	strb.w	r4, [sp, #5]
  FatFile dirFile;
  uint16_t u;
  size_t n = 0;
  ldir_t* ldir;

  if (!isLFN()) {
 8081b42:	b913      	cbnz	r3, 8081b4a <_ZN7FatFile9printNameEP5Print+0x1e>
    return printSFN(pr);
 8081b44:	f000 fab6 	bl	80820b4 <_ZN7FatFile8printSFNEP5Print>
 8081b48:	e04f      	b.n	8081bea <_ZN7FatFile9printNameEP5Print+0xbe>
  }
  if (!dirFile.openCluster(this)) {
 8081b4a:	4601      	mov	r1, r0
 8081b4c:	a801      	add	r0, sp, #4
 8081b4e:	f7ff fee9 	bl	8081924 <_ZN7FatFile11openClusterEPS_>
 8081b52:	2800      	cmp	r0, #0
 8081b54:	d046      	beq.n	8081be4 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081b56:	2601      	movs	r6, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
 8081b58:	f898 3003 	ldrb.w	r3, [r8, #3]
 8081b5c:	42b3      	cmp	r3, r6
 8081b5e:	d341      	bcc.n	8081be4 <_ZN7FatFile9printNameEP5Print+0xb8>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
 8081b60:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8081b64:	a801      	add	r0, sp, #4
 8081b66:	1b89      	subs	r1, r1, r6
 8081b68:	0149      	lsls	r1, r1, #5
 8081b6a:	f000 fc6a 	bl	8082442 <_ZN7FatFile7seekSetEm>
 8081b6e:	2800      	cmp	r0, #0
 8081b70:	d038      	beq.n	8081be4 <_ZN7FatFile9printNameEP5Print+0xb8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
 8081b72:	2100      	movs	r1, #0
 8081b74:	a801      	add	r0, sp, #4
 8081b76:	f000 fc47 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081b7a:	4607      	mov	r7, r0
 8081b7c:	2800      	cmp	r0, #0
 8081b7e:	d031      	beq.n	8081be4 <_ZN7FatFile9printNameEP5Print+0xb8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
 8081b80:	7ac3      	ldrb	r3, [r0, #11]
 8081b82:	2b0f      	cmp	r3, #15
 8081b84:	d12e      	bne.n	8081be4 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081b86:	7803      	ldrb	r3, [r0, #0]
 8081b88:	f003 031f 	and.w	r3, r3, #31
 8081b8c:	429e      	cmp	r6, r3
 8081b8e:	d129      	bne.n	8081be4 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081b90:	2500      	movs	r5, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8081b92:	2d04      	cmp	r5, #4
 8081b94:	b2eb      	uxtb	r3, r5
 8081b96:	d804      	bhi.n	8081ba2 <_ZN7FatFile9printNameEP5Print+0x76>
    return ldir->name1[i];
 8081b98:	eb07 0345 	add.w	r3, r7, r5, lsl #1
 8081b9c:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 8081ba0:	e00b      	b.n	8081bba <_ZN7FatFile9printNameEP5Print+0x8e>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081ba2:	2b0a      	cmp	r3, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081ba4:	bf95      	itete	ls
 8081ba6:	f105 33ff 	addls.w	r3, r5, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081baa:	1c6b      	addhi	r3, r5, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081bac:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081bb0:	eb07 0343 	addhi.w	r3, r7, r3, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081bb4:	bf94      	ite	ls
 8081bb6:	88d9      	ldrhls	r1, [r3, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081bb8:	8899      	ldrhhi	r1, [r3, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
      if (u == 0) {
 8081bba:	b169      	cbz	r1, 8081bd8 <_ZN7FatFile9printNameEP5Print+0xac>
        // End of name.
        break;
      }
      if (u > 0X7E) {
        u = '?';
 8081bbc:	297f      	cmp	r1, #127	; 0x7f
      }
      pr->write(static_cast<char>(u));
 8081bbe:	f8d9 3000 	ldr.w	r3, [r9]
      if (u == 0) {
        // End of name.
        break;
      }
      if (u > 0X7E) {
        u = '?';
 8081bc2:	bf28      	it	cs
 8081bc4:	213f      	movcs	r1, #63	; 0x3f
      }
      pr->write(static_cast<char>(u));
 8081bc6:	689b      	ldr	r3, [r3, #8]
 8081bc8:	b2c9      	uxtb	r1, r1
 8081bca:	4648      	mov	r0, r9
 8081bcc:	3501      	adds	r5, #1
 8081bce:	4798      	blx	r3
    if (ldir->attr != DIR_ATT_LONG_NAME ||
        ord != (ldir->ord & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
 8081bd0:	2d0d      	cmp	r5, #13
      }
      if (u > 0X7E) {
        u = '?';
      }
      pr->write(static_cast<char>(u));
      n++;
 8081bd2:	f104 0401 	add.w	r4, r4, #1
    if (ldir->attr != DIR_ATT_LONG_NAME ||
        ord != (ldir->ord & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
 8081bd6:	d1dc      	bne.n	8081b92 <_ZN7FatFile9printNameEP5Print+0x66>
        u = '?';
      }
      pr->write(static_cast<char>(u));
      n++;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
 8081bd8:	783b      	ldrb	r3, [r7, #0]
 8081bda:	065b      	lsls	r3, r3, #25
 8081bdc:	d404      	bmi.n	8081be8 <_ZN7FatFile9printNameEP5Print+0xbc>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
 8081bde:	3601      	adds	r6, #1
 8081be0:	b2f6      	uxtb	r6, r6
 8081be2:	e7b9      	b.n	8081b58 <_ZN7FatFile9printNameEP5Print+0x2c>
  }
  // Fall into fail;
  DBG_FAIL_MACRO;

fail:
  return 0;
 8081be4:	2000      	movs	r0, #0
 8081be6:	e000      	b.n	8081bea <_ZN7FatFile9printNameEP5Print+0xbe>
 8081be8:	4620      	mov	r0, r4
}
 8081bea:	b00b      	add	sp, #44	; 0x2c
 8081bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08081bf0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8081bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081bf4:	4606      	mov	r6, r0
 8081bf6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8081bf8:	f891 900c 	ldrb.w	r9, [r1, #12]
 8081bfc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8081bfe:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8081c00:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8081c04:	6869      	ldr	r1, [r5, #4]
 8081c06:	68aa      	ldr	r2, [r5, #8]
 8081c08:	1863      	adds	r3, r4, r1
 8081c0a:	b29b      	uxth	r3, r3
 8081c0c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8081c0e:	4291      	cmp	r1, r2
 8081c10:	d006      	beq.n	8081c20 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8081c12:	f812 0b01 	ldrb.w	r0, [r2], #1
 8081c16:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8081c1a:	4043      	eors	r3, r0
 8081c1c:	b29b      	uxth	r3, r3
 8081c1e:	e7f6      	b.n	8081c0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8081c20:	f1b9 0f03 	cmp.w	r9, #3
 8081c24:	bf28      	it	cs
 8081c26:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081c2a:	f109 0204 	add.w	r2, r9, #4
 8081c2e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8081c30:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081c34:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081c36:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081c38:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081c3a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081c3c:	bf94      	ite	ls
 8081c3e:	3130      	addls	r1, #48	; 0x30
 8081c40:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081c42:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081c44:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8081c46:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081c4a:	d3f1      	bcc.n	8081c30 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8081c4c:	eb05 0309 	add.w	r3, r5, r9
 8081c50:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8081c52:	2100      	movs	r1, #0
 8081c54:	4630      	mov	r0, r6
 8081c56:	f000 fbf4 	bl	8082442 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8081c5a:	2101      	movs	r1, #1
 8081c5c:	4630      	mov	r0, r6
 8081c5e:	f000 fbd3 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8081c62:	4601      	mov	r1, r0
 8081c64:	b928      	cbnz	r0, 8081c72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8081c66:	7870      	ldrb	r0, [r6, #1]
 8081c68:	fab0 f080 	clz	r0, r0
 8081c6c:	0940      	lsrs	r0, r0, #5
 8081c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8081c72:	7803      	ldrb	r3, [r0, #0]
 8081c74:	b14b      	cbz	r3, 8081c8a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8081c76:	7ac3      	ldrb	r3, [r0, #11]
 8081c78:	071b      	lsls	r3, r3, #28
 8081c7a:	d4ee      	bmi.n	8081c5a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8081c7c:	220b      	movs	r2, #11
 8081c7e:	4640      	mov	r0, r8
 8081c80:	f008 fc4c 	bl	808a51c <memcmp>
 8081c84:	2800      	cmp	r0, #0
 8081c86:	d1e8      	bne.n	8081c5a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8081c88:	e002      	b.n	8081c90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8081c8a:	2001      	movs	r0, #1
 8081c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081c90:	3401      	adds	r4, #1
 8081c92:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8081c94:	2c64      	cmp	r4, #100	; 0x64
 8081c96:	d1b5      	bne.n	8081c04 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8081c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08081c9c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081ca0:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081ca2:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081ca4:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081ca6:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081caa:	9005      	str	r0, [sp, #20]
 8081cac:	460e      	mov	r6, r1
 8081cae:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081cb0:	d101      	bne.n	8081cb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8081cb2:	2000      	movs	r0, #0
 8081cb4:	e1a0      	b.n	8081ff8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081cb6:	9b05      	ldr	r3, [sp, #20]
 8081cb8:	781b      	ldrb	r3, [r3, #0]
 8081cba:	2b00      	cmp	r3, #0
 8081cbc:	d1f9      	bne.n	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8081cbe:	6853      	ldr	r3, [r2, #4]
 8081cc0:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081cc2:	7813      	ldrb	r3, [r2, #0]
 8081cc4:	079b      	lsls	r3, r3, #30
 8081cc6:	f000 818d 	beq.w	8081fe4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 8081cca:	9b02      	ldr	r3, [sp, #8]
 8081ccc:	270d      	movs	r7, #13
 8081cce:	330c      	adds	r3, #12
 8081cd0:	fbb3 f7f7 	udiv	r7, r3, r7
 8081cd4:	3701      	adds	r7, #1
 8081cd6:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8081cd8:	f04f 0800 	mov.w	r8, #0
 8081cdc:	2100      	movs	r1, #0
 8081cde:	4630      	mov	r0, r6
 8081ce0:	f000 fbaf 	bl	8082442 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8081ce4:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8081ce6:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8081ce8:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081cea:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8081cee:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8081cf2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081cf6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081cf8:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8081cfa:	2101      	movs	r1, #1
 8081cfc:	4630      	mov	r0, r6
 8081cfe:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081d00:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8081d04:	f000 fb80 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8081d08:	9b07      	ldr	r3, [sp, #28]
 8081d0a:	b920      	cbnz	r0, 8081d16 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 8081d0c:	7873      	ldrb	r3, [r6, #1]
 8081d0e:	2b00      	cmp	r3, #0
 8081d10:	f000 8090 	beq.w	8081e34 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8081d14:	e7cd      	b.n	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8081d16:	7802      	ldrb	r2, [r0, #0]
 8081d18:	2ae5      	cmp	r2, #229	; 0xe5
 8081d1a:	d000      	beq.n	8081d1e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8081d1c:	b942      	cbnz	r2, 8081d30 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081d1e:	2c00      	cmp	r4, #0
 8081d20:	bf08      	it	eq
 8081d22:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8081d24:	42bc      	cmp	r4, r7
        freeFound++;
 8081d26:	bf3c      	itt	cc
 8081d28:	3401      	addcc	r4, #1
 8081d2a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8081d2c:	b922      	cbnz	r2, 8081d38 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 8081d2e:	e081      	b.n	8081e34 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8081d30:	42bc      	cmp	r4, r7
 8081d32:	bf38      	it	cc
 8081d34:	2400      	movcc	r4, #0
 8081d36:	e003      	b.n	8081d40 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8081d38:	2ae5      	cmp	r2, #229	; 0xe5
 8081d3a:	d101      	bne.n	8081d40 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8081d3c:	2500      	movs	r5, #0
 8081d3e:	e7db      	b.n	8081cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8081d40:	2a2e      	cmp	r2, #46	; 0x2e
 8081d42:	d0fb      	beq.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081d44:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8081d46:	290f      	cmp	r1, #15
 8081d48:	d152      	bne.n	8081df0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8081d4a:	b93d      	cbnz	r5, 8081d5c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8081d4c:	0651      	lsls	r1, r2, #25
 8081d4e:	d5d3      	bpl.n	8081cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8081d50:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8081d52:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 8081d56:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8081d58:	462b      	mov	r3, r5
 8081d5a:	e007      	b.n	8081d6c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8081d5c:	3b01      	subs	r3, #1
 8081d5e:	b2db      	uxtb	r3, r3
 8081d60:	429a      	cmp	r2, r3
 8081d62:	d1eb      	bne.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081d64:	7b42      	ldrb	r2, [r0, #13]
 8081d66:	9903      	ldr	r1, [sp, #12]
 8081d68:	4291      	cmp	r1, r2
 8081d6a:	d1e7      	bne.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8081d6c:	1e5a      	subs	r2, r3, #1
 8081d6e:	f04f 0c0d 	mov.w	ip, #13
 8081d72:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8081d76:	9a02      	ldr	r2, [sp, #8]
 8081d78:	4562      	cmp	r2, ip
 8081d7a:	d9df      	bls.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081d7c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8081d80:	f1be 0f04 	cmp.w	lr, #4
 8081d84:	fa5f f28e 	uxtb.w	r2, lr
 8081d88:	d804      	bhi.n	8081d94 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 8081d8a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8081d8e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8081d92:	e00c      	b.n	8081dae <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081d94:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081d96:	bf95      	itete	ls
 8081d98:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081d9c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081da0:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081da4:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081da8:	bf94      	ite	ls
 8081daa:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081dac:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8081dae:	9902      	ldr	r1, [sp, #8]
 8081db0:	4561      	cmp	r1, ip
 8081db2:	d103      	bne.n	8081dbc <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8081db4:	2a00      	cmp	r2, #0
 8081db6:	bf18      	it	ne
 8081db8:	2500      	movne	r5, #0
 8081dba:	e79d      	b.n	8081cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081dbc:	2aff      	cmp	r2, #255	; 0xff
 8081dbe:	d8bd      	bhi.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081dc0:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081dc2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8081dc6:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081dc8:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081dcc:	bf98      	it	ls
 8081dce:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081dd0:	f811 100c 	ldrb.w	r1, [r1, ip]
 8081dd4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081dd8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8081ddc:	bf98      	it	ls
 8081dde:	b2d2      	uxtbls	r2, r2
 8081de0:	f1bc 0f19 	cmp.w	ip, #25
 8081de4:	bf9c      	itt	ls
 8081de6:	3120      	addls	r1, #32
 8081de8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081dea:	4291      	cmp	r1, r2
 8081dec:	d1a6      	bne.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081dee:	e0fb      	b.n	8081fe8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081df0:	0709      	lsls	r1, r1, #28
 8081df2:	d4a3      	bmi.n	8081d3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8081df4:	b14d      	cbz	r5, 8081e0a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8081df6:	2b01      	cmp	r3, #1
 8081df8:	f47f af5b 	bne.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081dfc:	f7ff fd83 	bl	8081906 <_ZN7FatFile11lfnChecksumEPh>
 8081e00:	9b03      	ldr	r3, [sp, #12]
 8081e02:	4283      	cmp	r3, r0
 8081e04:	f47f af55 	bne.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081e08:	e00f      	b.n	8081e2a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081e0a:	220b      	movs	r2, #11
 8081e0c:	9906      	ldr	r1, [sp, #24]
 8081e0e:	9307      	str	r3, [sp, #28]
 8081e10:	f008 fb84 	bl	808a51c <memcmp>
 8081e14:	9b07      	ldr	r3, [sp, #28]
 8081e16:	2800      	cmp	r0, #0
 8081e18:	f47f af6e 	bne.w	8081cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8081e1c:	f899 2000 	ldrb.w	r2, [r9]
 8081e20:	07d2      	lsls	r2, r2, #31
 8081e22:	d502      	bpl.n	8081e2a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8081e24:	2201      	movs	r2, #1
 8081e26:	9204      	str	r2, [sp, #16]
 8081e28:	e766      	b.n	8081cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8081e2a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8081e2e:	f000 80d1 	beq.w	8081fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 8081e32:	e73e      	b.n	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8081e34:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8081e38:	f43f af3b 	beq.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081e3c:	f00b 0303 	and.w	r3, fp, #3
 8081e40:	3b01      	subs	r3, #1
 8081e42:	2b01      	cmp	r3, #1
 8081e44:	f63f af35 	bhi.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8081e48:	2c00      	cmp	r4, #0
 8081e4a:	bf08      	it	eq
 8081e4c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8081e4e:	42bc      	cmp	r4, r7
 8081e50:	d302      	bcc.n	8081e58 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8081e52:	9b04      	ldr	r3, [sp, #16]
 8081e54:	b9cb      	cbnz	r3, 8081e8a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 8081e56:	e01f      	b.n	8081e98 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8081e58:	2100      	movs	r1, #0
 8081e5a:	4630      	mov	r0, r6
 8081e5c:	f000 fad4 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8081e60:	b910      	cbnz	r0, 8081e68 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 8081e62:	7873      	ldrb	r3, [r6, #1]
 8081e64:	b15b      	cbz	r3, 8081e7e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 8081e66:	e724      	b.n	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8081e68:	3401      	adds	r4, #1
 8081e6a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8081e6c:	e7ef      	b.n	8081e4e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 8081e6e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8081e70:	791b      	ldrb	r3, [r3, #4]
 8081e72:	2b01      	cmp	r3, #1
 8081e74:	d8ed      	bhi.n	8081e52 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 8081e76:	3410      	adds	r4, #16
 8081e78:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8081e7a:	42a7      	cmp	r7, r4
 8081e7c:	d9e9      	bls.n	8081e52 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8081e7e:	4630      	mov	r0, r6
 8081e80:	f000 f97e 	bl	8082180 <_ZN7FatFile13addDirClusterEv>
 8081e84:	2800      	cmp	r0, #0
 8081e86:	d1f2      	bne.n	8081e6e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 8081e88:	e713      	b.n	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8081e8a:	4649      	mov	r1, r9
 8081e8c:	4630      	mov	r0, r6
 8081e8e:	f7ff feaf 	bl	8081bf0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8081e92:	2800      	cmp	r0, #0
 8081e94:	f43f af0d 	beq.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8081e98:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8081e9c:	4630      	mov	r0, r6
 8081e9e:	f000 fad0 	bl	8082442 <_ZN7FatFile7seekSetEm>
 8081ea2:	2800      	cmp	r0, #0
 8081ea4:	f43f af05 	beq.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8081ea8:	1e7d      	subs	r5, r7, #1
 8081eaa:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8081eac:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8081eae:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8081eb2:	f04f 080f 	mov.w	r8, #15
 8081eb6:	e041      	b.n	8081f3c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8081eb8:	2100      	movs	r1, #0
 8081eba:	4630      	mov	r0, r6
 8081ebc:	f000 faa4 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081ec0:	4607      	mov	r7, r0
 8081ec2:	2800      	cmp	r0, #0
 8081ec4:	f43f aef5 	beq.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8081ec8:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081eca:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8081ecc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081ed0:	f043 0301 	orr.w	r3, r3, #1
 8081ed4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8081ed8:	bf14      	ite	ne
 8081eda:	4622      	movne	r2, r4
 8081edc:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8081ee0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8081ee2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8081ee6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8081eea:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081eee:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081ef0:	f7ff fd09 	bl	8081906 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081ef4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081ef6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8081ef8:	f887 a01a 	strb.w	sl, [r7, #26]
 8081efc:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081f00:	f002 021f 	and.w	r2, r2, #31
 8081f04:	230d      	movs	r3, #13
 8081f06:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8081f08:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081f0c:	435a      	muls	r2, r3
 8081f0e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081f10:	9902      	ldr	r1, [sp, #8]
 8081f12:	4291      	cmp	r1, r2
 8081f14:	d915      	bls.n	8081f42 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8081f16:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8081f1a:	2b04      	cmp	r3, #4
 8081f1c:	fa5f fc83 	uxtb.w	ip, r3
 8081f20:	f103 0001 	add.w	r0, r3, #1
 8081f24:	d813      	bhi.n	8081f4e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 8081f26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8081f2a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8081f2e:	280d      	cmp	r0, #13
 8081f30:	f102 0201 	add.w	r2, r2, #1
 8081f34:	4603      	mov	r3, r0
 8081f36:	d1eb      	bne.n	8081f10 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8081f38:	3c01      	subs	r4, #1
 8081f3a:	b2e4      	uxtb	r4, r4
 8081f3c:	2c00      	cmp	r4, #0
 8081f3e:	d1bb      	bne.n	8081eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 8081f40:	e00e      	b.n	8081f60 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081f42:	bf14      	ite	ne
 8081f44:	f04f 31ff 	movne.w	r1, #4294967295
 8081f48:	2100      	moveq	r1, #0
 8081f4a:	b289      	uxth	r1, r1
 8081f4c:	e7e5      	b.n	8081f1a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081f4e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8081f52:	bf94      	ite	ls
 8081f54:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8081f58:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8081f5c:	8099      	strh	r1, [r3, #4]
 8081f5e:	e7e6      	b.n	8081f2e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8081f60:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8081f62:	4621      	mov	r1, r4
 8081f64:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8081f66:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8081f6a:	f000 fa4d 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8081f6e:	4607      	mov	r7, r0
 8081f70:	2800      	cmp	r0, #0
 8081f72:	f43f ae9e 	beq.w	8081cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8081f76:	2220      	movs	r2, #32
 8081f78:	4621      	mov	r1, r4
 8081f7a:	f008 fae9 	bl	808a550 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8081f7e:	464b      	mov	r3, r9
 8081f80:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8081f84:	603a      	str	r2, [r7, #0]
 8081f86:	685a      	ldr	r2, [r3, #4]
 8081f88:	607a      	str	r2, [r7, #4]
 8081f8a:	891a      	ldrh	r2, [r3, #8]
 8081f8c:	813a      	strh	r2, [r7, #8]
 8081f8e:	7a9b      	ldrb	r3, [r3, #10]
 8081f90:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8081f92:	f899 3000 	ldrb.w	r3, [r9]
 8081f96:	f003 0318 	and.w	r3, r3, #24
 8081f9a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8081f9c:	4b18      	ldr	r3, [pc, #96]	; (8082000 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 8081f9e:	681b      	ldr	r3, [r3, #0]
 8081fa0:	b12b      	cbz	r3, 8081fae <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8081fa2:	f107 010e 	add.w	r1, r7, #14
 8081fa6:	f107 0010 	add.w	r0, r7, #16
 8081faa:	4798      	blx	r3
 8081fac:	e006      	b.n	8081fbc <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8081fae:	2321      	movs	r3, #33	; 0x21
 8081fb0:	743b      	strb	r3, [r7, #16]
 8081fb2:	2328      	movs	r3, #40	; 0x28
 8081fb4:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8081fb6:	2308      	movs	r3, #8
 8081fb8:	73bc      	strb	r4, [r7, #14]
 8081fba:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8081fbc:	8a3b      	ldrh	r3, [r7, #16]
 8081fbe:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8081fc0:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8081fc2:	89fb      	ldrh	r3, [r7, #14]
 8081fc4:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8081fc6:	68b2      	ldr	r2, [r6, #8]
 8081fc8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081fcc:	f043 0301 	orr.w	r3, r3, #1
 8081fd0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8081fd4:	9500      	str	r5, [sp, #0]
 8081fd6:	465b      	mov	r3, fp
 8081fd8:	4652      	mov	r2, sl
 8081fda:	4631      	mov	r1, r6
 8081fdc:	9805      	ldr	r0, [sp, #20]
 8081fde:	f000 fa79 	bl	80824d4 <_ZN7FatFile15openCachedEntryEPS_tih>
 8081fe2:	e009      	b.n	8081ff8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081fe4:	2701      	movs	r7, #1
 8081fe6:	e677      	b.n	8081cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8081fe8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8081fec:	f1be 0f0d 	cmp.w	lr, #13
 8081ff0:	f43f ae82 	beq.w	8081cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081ff4:	46d4      	mov	ip, sl
 8081ff6:	e6c3      	b.n	8081d80 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8081ff8:	b009      	add	sp, #36	; 0x24
 8081ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081ffe:	bf00      	nop
 8082000:	20000760 	.word	0x20000760

08082004 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8082004:	f003 bc60 	b.w	80858c8 <HAL_Pin_Map>

08082008 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8082008:	f003 bc5e 	b.w	80858c8 <HAL_Pin_Map>

0808200c <_ZN7ostream7do_fillEj>:
#include "ostream.h"
#ifndef PSTR
#define PSTR(x) x
#endif
//------------------------------------------------------------------------------
void ostream::do_fill(unsigned len) {
 808200c:	b538      	push	{r3, r4, r5, lr}
 808200e:	4604      	mov	r4, r0
 8082010:	460d      	mov	r5, r1
  for (; len < width(); len++) {
 8082012:	6821      	ldr	r1, [r4, #0]
 8082014:	f851 2c0c 	ldr.w	r2, [r1, #-12]
 8082018:	18a3      	adds	r3, r4, r2
 808201a:	68d8      	ldr	r0, [r3, #12]
 808201c:	4285      	cmp	r5, r0
 808201e:	d205      	bcs.n	808202c <_ZN7ostream7do_fillEj+0x20>
    putch(fill());
 8082020:	680b      	ldr	r3, [r1, #0]
 8082022:	4620      	mov	r0, r4
 8082024:	5ca1      	ldrb	r1, [r4, r2]
 8082026:	4798      	blx	r3
#ifndef PSTR
#define PSTR(x) x
#endif
//------------------------------------------------------------------------------
void ostream::do_fill(unsigned len) {
  for (; len < width(); len++) {
 8082028:	3501      	adds	r5, #1
 808202a:	e7f2      	b.n	8082012 <_ZN7ostream7do_fillEj+0x6>
   * \param[in] n new width
   * \return old width
   */
  unsigned width(unsigned n) {
    unsigned r = m_width;
    m_width = n;
 808202c:	2200      	movs	r2, #0
 808202e:	60da      	str	r2, [r3, #12]
 8082030:	bd38      	pop	{r3, r4, r5, pc}

08082032 <_ZN7ostream13fill_not_leftEj>:
  }
  width(0);
}
//------------------------------------------------------------------------------
void ostream::fill_not_left(unsigned len) {
  if ((flags() & adjustfield) != left) {
 8082032:	6803      	ldr	r3, [r0, #0]
 8082034:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8082038:	4403      	add	r3, r0
 808203a:	685b      	ldr	r3, [r3, #4]
 808203c:	f003 0307 	and.w	r3, r3, #7
 8082040:	2b01      	cmp	r3, #1
 8082042:	d001      	beq.n	8082048 <_ZN7ostream13fill_not_leftEj+0x16>
    do_fill(len);
 8082044:	f7ff bfe2 	b.w	808200c <_ZN7ostream7do_fillEj>
 8082048:	4770      	bx	lr

0808204a <_ZN7ostream6putPgmEPKc>:
  }
  putstr(str);
  do_fill(len);
}
//------------------------------------------------------------------------------
void ostream::putPgm(const char* str) {
 808204a:	b570      	push	{r4, r5, r6, lr}
 808204c:	460b      	mov	r3, r1
 808204e:	4605      	mov	r5, r0
 8082050:	460c      	mov	r4, r1
 8082052:	1b1e      	subs	r6, r3, r4
  int n;
  for (n = 0; pgm_read_byte(&str[n]); n++) {}
 8082054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082058:	2a00      	cmp	r2, #0
 808205a:	d1fa      	bne.n	8082052 <_ZN7ostream6putPgmEPKc+0x8>
  fill_not_left(n);
 808205c:	4631      	mov	r1, r6
 808205e:	4628      	mov	r0, r5
 8082060:	f7ff ffe7 	bl	8082032 <_ZN7ostream13fill_not_leftEj>
 8082064:	3c01      	subs	r4, #1
  for (uint8_t c; (c = pgm_read_byte(str)); str++) {
 8082066:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 808206a:	b121      	cbz	r1, 8082076 <_ZN7ostream6putPgmEPKc+0x2c>
    putch(c);
 808206c:	682b      	ldr	r3, [r5, #0]
 808206e:	4628      	mov	r0, r5
 8082070:	681b      	ldr	r3, [r3, #0]
 8082072:	4798      	blx	r3
//------------------------------------------------------------------------------
void ostream::putPgm(const char* str) {
  int n;
  for (n = 0; pgm_read_byte(&str[n]); n++) {}
  fill_not_left(n);
  for (uint8_t c; (c = pgm_read_byte(str)); str++) {
 8082074:	e7f7      	b.n	8082066 <_ZN7ostream6putPgmEPKc+0x1c>
    putch(c);
  }
  do_fill(n);
 8082076:	4631      	mov	r1, r6
 8082078:	4628      	mov	r0, r5
}
 808207a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  for (n = 0; pgm_read_byte(&str[n]); n++) {}
  fill_not_left(n);
  for (uint8_t c; (c = pgm_read_byte(str)); str++) {
    putch(c);
  }
  do_fill(n);
 808207e:	f7ff bfc5 	b.w	808200c <_ZN7ostream7do_fillEj>

08082082 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8082082:	f003 bc21 	b.w	80858c8 <HAL_Pin_Map>

08082086 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
 8082086:	b510      	push	{r4, lr}
 8082088:	460c      	mov	r4, r1
 808208a:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
 808208c:	b909      	cbnz	r1, 8082092 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
 808208e:	2000      	movs	r0, #0
 8082090:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
 8082092:	f011 0160 	ands.w	r1, r1, #96	; 0x60
 8082096:	d004      	beq.n	80820a2 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
 8082098:	232f      	movs	r3, #47	; 0x2f
 808209a:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
 808209c:	2300      	movs	r3, #0
 808209e:	7063      	strb	r3, [r4, #1]
 80820a0:	e006      	b.n	80820b0 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
 80820a2:	f000 f8ad 	bl	8082200 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 80820a6:	2800      	cmp	r0, #0
 80820a8:	d0f1      	beq.n	808208e <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
 80820aa:	4621      	mov	r1, r4
 80820ac:	f000 f8b7 	bl	808221e <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
 80820b0:	2001      	movs	r0, #1

fail:
  return false;
}
 80820b2:	bd10      	pop	{r4, pc}

080820b4 <_ZN7FatFile8printSFNEP5Print>:
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
 80820b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80820b6:	460c      	mov	r4, r1
  char name[13];
  if (!getSFN(name)) {
 80820b8:	4669      	mov	r1, sp
 80820ba:	f7ff ffe4 	bl	8082086 <_ZN7FatFile6getSFNEPc>
 80820be:	b140      	cbz	r0, 80820d2 <_ZN7FatFile8printSFNEP5Print+0x1e>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80820c0:	4668      	mov	r0, sp
 80820c2:	f008 ffc5 	bl	808b050 <strlen>
 80820c6:	6823      	ldr	r3, [r4, #0]
 80820c8:	4602      	mov	r2, r0
 80820ca:	68db      	ldr	r3, [r3, #12]
 80820cc:	4669      	mov	r1, sp
 80820ce:	4620      	mov	r0, r4
 80820d0:	4798      	blx	r3
  }
  return pr->write(name);

fail:
  return 0;
}
 80820d2:	b004      	add	sp, #16
 80820d4:	bd10      	pop	{r4, pc}

080820d6 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80820d6:	f003 bbf7 	b.w	80858c8 <HAL_Pin_Map>

080820da <_Z6fmtDectPc>:
  }
  return v;
}
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtDec(uint16_t n, char* p) {
 80820da:	b510      	push	{r4, lr}
  while (n > 9) {
 80820dc:	2809      	cmp	r0, #9
 80820de:	f101 32ff 	add.w	r2, r1, #4294967295
 80820e2:	d91b      	bls.n	808211c <_Z6fmtDectPc+0x42>
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm16(n, r, tmp8);
#else  // USE_STIMMER
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
 80820e4:	1083      	asrs	r3, r0, #2
 80820e6:	eb03 0360 	add.w	r3, r3, r0, asr #1
 80820ea:	b29b      	uxth	r3, r3
    n = n + (n >> 4);
 80820ec:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 80820f0:	b29b      	uxth	r3, r3
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
 80820f2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 80820f6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80820fa:	b29c      	uxth	r4, r3
    uint8_t r = t - (((n << 2) + n) << 1);
 80820fc:	b2db      	uxtb	r3, r3
 80820fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8082102:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8082106:	b2db      	uxtb	r3, r3
    if (r > 9) {
 8082108:	2b09      	cmp	r3, #9
      n++;
      r -= 10;
 808210a:	bf82      	ittt	hi
 808210c:	3b0a      	subhi	r3, #10
 808210e:	b2db      	uxtbhi	r3, r3
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
 8082110:	3401      	addhi	r4, #1
      r -= 10;
    }
#endif  // USE_STIMMER
    *--p = r + '0';
 8082112:	3330      	adds	r3, #48	; 0x30
 8082114:	4611      	mov	r1, r2
 8082116:	7013      	strb	r3, [r2, #0]
  return v;
}
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtDec(uint16_t n, char* p) {
  while (n > 9) {
 8082118:	4620      	mov	r0, r4
 808211a:	e7df      	b.n	80820dc <_Z6fmtDectPc+0x2>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--p = r + '0';
  }
  *--p = n + '0';
 808211c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8082120:	f801 3c01 	strb.w	r3, [r1, #-1]
  return p;
}
 8082124:	4610      	mov	r0, r2
 8082126:	bd10      	pop	{r4, pc}

08082128 <_Z6fmtDecmPc>:
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtDec(uint32_t n, char* p) {
  while (n >> 16) {
 8082128:	0c03      	lsrs	r3, r0, #16
 808212a:	d01b      	beq.n	8082164 <_Z6fmtDecmPc+0x3c>
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm32(n, r, tmp8);
#else  //  USE_STIMMER
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
 808212c:	0883      	lsrs	r3, r0, #2
 808212e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    n = n + (n >> 4);
 8082132:	eb03 1313 	add.w	r3, r3, r3, lsr #4
    n = n + (n >> 8);
 8082136:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    n = n + (n >> 16);
 808213a:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    n = n >> 3;
 808213e:	08db      	lsrs	r3, r3, #3
    uint8_t r = t - (((n << 2) + n) << 1);
 8082140:	b2da      	uxtb	r2, r3
 8082142:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8082146:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 808214a:	b2c0      	uxtb	r0, r0
    if (r > 9) {
 808214c:	2809      	cmp	r0, #9
      n++;
      r -= 10;
 808214e:	bf84      	itt	hi
 8082150:	380a      	subhi	r0, #10
 8082152:	b2c0      	uxtbhi	r0, r0
    }
#endif  // USE_STIMMER
    *--p = r + '0';
 8082154:	f100 0030 	add.w	r0, r0, #48	; 0x30
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
 8082158:	bf88      	it	hi
 808215a:	3301      	addhi	r3, #1
      r -= 10;
    }
#endif  // USE_STIMMER
    *--p = r + '0';
 808215c:	f801 0d01 	strb.w	r0, [r1, #-1]!
  return p;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtDec(uint32_t n, char* p) {
  while (n >> 16) {
 8082160:	4618      	mov	r0, r3
 8082162:	e7e1      	b.n	8082128 <_Z6fmtDecmPc>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--p = r + '0';
  }
  return fmtDec((uint16_t)n, p);
 8082164:	b280      	uxth	r0, r0
 8082166:	f7ff bfb8 	b.w	80820da <_Z6fmtDectPc>

0808216a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808216a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808216c:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8082170:	f043 0304 	orr.w	r3, r3, #4
 8082174:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8082176:	6901      	ldr	r1, [r0, #16]
 8082178:	6880      	ldr	r0, [r0, #8]
 808217a:	f000 bda7 	b.w	8082ccc <_ZN9FatVolume15allocateClusterEmPm>
	...

08082180 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8082180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8082184:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8082186:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8082188:	f003 0320 	and.w	r3, r3, #32
 808218c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8082190:	b10b      	cbz	r3, 8082196 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8082192:	2600      	movs	r6, #0
 8082194:	e02e      	b.n	80821f4 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8082196:	6942      	ldr	r2, [r0, #20]
 8082198:	4b18      	ldr	r3, [pc, #96]	; (80821fc <_ZN7FatFile13addDirClusterEv+0x7c>)
 808219a:	429a      	cmp	r2, r3
 808219c:	d8f9      	bhi.n	8082192 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 808219e:	f7ff ffe4 	bl	808216a <_ZN7FatFile10addClusterEv>
 80821a2:	4606      	mov	r6, r0
 80821a4:	2800      	cmp	r0, #0
 80821a6:	d0f4      	beq.n	8082192 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 80821a8:	6921      	ldr	r1, [r4, #16]
 80821aa:	68a0      	ldr	r0, [r4, #8]
 80821ac:	f000 fd23 	bl	8082bf6 <_ZNK9FatVolume17clusterFirstBlockEm>
 80821b0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80821b2:	68a0      	ldr	r0, [r4, #8]
 80821b4:	2205      	movs	r2, #5
 80821b6:	4639      	mov	r1, r7
 80821b8:	3024      	adds	r0, #36	; 0x24
 80821ba:	f000 fcf8 	bl	8082bae <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80821be:	4680      	mov	r8, r0
 80821c0:	2800      	cmp	r0, #0
 80821c2:	d0e6      	beq.n	8082192 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80821c4:	4629      	mov	r1, r5
 80821c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80821ca:	f008 f9c1 	bl	808a550 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80821ce:	2501      	movs	r5, #1
 80821d0:	68a3      	ldr	r3, [r4, #8]
 80821d2:	791a      	ldrb	r2, [r3, #4]
 80821d4:	42aa      	cmp	r2, r5
 80821d6:	d909      	bls.n	80821ec <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80821d8:	4642      	mov	r2, r8
 80821da:	19e9      	adds	r1, r5, r7
 80821dc:	6818      	ldr	r0, [r3, #0]
 80821de:	f001 f863 	bl	80832a8 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80821e2:	2800      	cmp	r0, #0
 80821e4:	d0d5      	beq.n	8082192 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80821e6:	3501      	adds	r5, #1
 80821e8:	b2ed      	uxtb	r5, r5
 80821ea:	e7f1      	b.n	80821d0 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80821ec:	6963      	ldr	r3, [r4, #20]
 80821ee:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80821f2:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80821f4:	4630      	mov	r0, r6
 80821f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80821fa:	bf00      	nop
 80821fc:	001ffdff 	.word	0x001ffdff

08082200 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8082200:	b510      	push	{r4, lr}
 8082202:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082204:	6880      	ldr	r0, [r0, #8]
 8082206:	460a      	mov	r2, r1
 8082208:	3024      	adds	r0, #36	; 0x24
 808220a:	69a1      	ldr	r1, [r4, #24]
 808220c:	f000 fccf 	bl	8082bae <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8082210:	b120      	cbz	r0, 808221c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8082212:	88a3      	ldrh	r3, [r4, #4]
 8082214:	f003 030f 	and.w	r3, r3, #15
 8082218:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 808221c:	bd10      	pop	{r4, pc}

0808221e <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
 808221e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082220:	2400      	movs	r4, #0
  uint8_t j = 0;
 8082222:	4623      	mov	r3, r4
 8082224:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
 8082226:	2608      	movs	r6, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
 8082228:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
 808222a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808222e:	2a20      	cmp	r2, #32
 8082230:	d018      	beq.n	8082264 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
 8082232:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
 8082234:	bf02      	ittt	eq
 8082236:	1c5a      	addeq	r2, r3, #1
 8082238:	54cf      	strbeq	r7, [r1, r3]
 808223a:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
 808223c:	782a      	ldrb	r2, [r5, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
 808223e:	bf08      	it	eq
 8082240:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
 8082242:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 8082246:	f1be 0f19 	cmp.w	lr, #25
 808224a:	d806      	bhi.n	808225a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
 808224c:	f890 e00c 	ldrb.w	lr, [r0, #12]
 8082250:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
 8082254:	bf1c      	itt	ne
 8082256:	3220      	addne	r2, #32
 8082258:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
 808225a:	f103 0e01 	add.w	lr, r3, #1
 808225e:	54ca      	strb	r2, [r1, r3]
 8082260:	fa5f f38e 	uxtb.w	r3, lr
 8082264:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
 8082266:	2c0b      	cmp	r4, #11
 8082268:	d1df      	bne.n	808222a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
 808226a:	2200      	movs	r2, #0
 808226c:	54ca      	strb	r2, [r1, r3]
  return j;
}
 808226e:	4618      	mov	r0, r3
 8082270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082272 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8082272:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8082274:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8082276:	4605      	mov	r5, r0
 8082278:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 808227a:	b984      	cbnz	r4, 808229e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 808227c:	2224      	movs	r2, #36	; 0x24
 808227e:	4621      	mov	r1, r4
 8082280:	f008 f966 	bl	808a550 <memset>

  m_vol = vol;
 8082284:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8082286:	79f3      	ldrb	r3, [r6, #7]
 8082288:	2b10      	cmp	r3, #16
 808228a:	d003      	beq.n	8082294 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 808228c:	2b20      	cmp	r3, #32
 808228e:	d106      	bne.n	808229e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8082290:	2340      	movs	r3, #64	; 0x40
 8082292:	e000      	b.n	8082296 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8082294:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8082296:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8082298:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808229a:	70a8      	strb	r0, [r5, #2]
 808229c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 808229e:	2000      	movs	r0, #0
 80822a0:	bd70      	pop	{r4, r5, r6, pc}

080822a2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80822a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80822a6:	7803      	ldrb	r3, [r0, #0]
 80822a8:	4604      	mov	r4, r0
 80822aa:	4689      	mov	r9, r1
 80822ac:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 80822ae:	b14b      	cbz	r3, 80822c4 <_ZN7FatFile4readEPvj+0x22>
 80822b0:	7882      	ldrb	r2, [r0, #2]
 80822b2:	07d1      	lsls	r1, r2, #31
 80822b4:	d506      	bpl.n	80822c4 <_ZN7FatFile4readEPvj+0x22>
 80822b6:	e00c      	b.n	80822d2 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80822b8:	465a      	mov	r2, fp
 80822ba:	6921      	ldr	r1, [r4, #16]
 80822bc:	f000 fca1 	bl	8082c02 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80822c0:	2800      	cmp	r0, #0
 80822c2:	da3d      	bge.n	8082340 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80822c4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80822c6:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80822ca:	f043 0302 	orr.w	r3, r3, #2
 80822ce:	7063      	strb	r3, [r4, #1]
  return -1;
 80822d0:	e097      	b.n	8082402 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80822d2:	071a      	lsls	r2, r3, #28
 80822d4:	d503      	bpl.n	80822de <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80822d6:	69e3      	ldr	r3, [r4, #28]
 80822d8:	6962      	ldr	r2, [r4, #20]
 80822da:	1a9b      	subs	r3, r3, r2
 80822dc:	e007      	b.n	80822ee <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80822de:	069a      	lsls	r2, r3, #26
 80822e0:	d508      	bpl.n	80822f4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80822e2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80822e4:	891a      	ldrh	r2, [r3, #8]
 80822e6:	6963      	ldr	r3, [r4, #20]
 80822e8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80822ec:	b29b      	uxth	r3, r3
 80822ee:	429d      	cmp	r5, r3
 80822f0:	bf28      	it	cs
 80822f2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80822f4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80822f6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80822fa:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80822fe:	2e00      	cmp	r6, #0
 8082300:	d035      	beq.n	808236e <_ZN7FatFile4readEPvj+0xcc>
 8082302:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8082304:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8082306:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808230a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 808230e:	68a0      	ldr	r0, [r4, #8]
 8082310:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8082314:	d002      	beq.n	808231c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8082316:	6a03      	ldr	r3, [r0, #32]
 8082318:	4419      	add	r1, r3
 808231a:	e01d      	b.n	8082358 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808231c:	f890 8005 	ldrb.w	r8, [r0, #5]
 8082320:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8082324:	f1ba 0f00 	cmp.w	sl, #0
 8082328:	d110      	bne.n	808234c <_ZN7FatFile4readEPvj+0xaa>
 808232a:	f1b8 0f00 	cmp.w	r8, #0
 808232e:	d10d      	bne.n	808234c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8082330:	2b00      	cmp	r3, #0
 8082332:	d1c1      	bne.n	80822b8 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8082334:	0653      	lsls	r3, r2, #25
 8082336:	bf4c      	ite	mi
 8082338:	6a03      	ldrmi	r3, [r0, #32]
 808233a:	6a23      	ldrpl	r3, [r4, #32]
 808233c:	6123      	str	r3, [r4, #16]
 808233e:	e005      	b.n	808234c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8082340:	d104      	bne.n	808234c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8082342:	7823      	ldrb	r3, [r4, #0]
 8082344:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082348:	d111      	bne.n	808236e <_ZN7FatFile4readEPvj+0xcc>
 808234a:	e7bb      	b.n	80822c4 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 808234c:	6921      	ldr	r1, [r4, #16]
 808234e:	68a0      	ldr	r0, [r4, #8]
 8082350:	f000 fc51 	bl	8082bf6 <_ZNK9FatVolume17clusterFirstBlockEm>
 8082354:	eb08 0100 	add.w	r1, r8, r0
 8082358:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808235a:	f1ba 0f00 	cmp.w	sl, #0
 808235e:	d135      	bne.n	80823cc <_ZN7FatFile4readEPvj+0x12a>
 8082360:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082364:	d332      	bcc.n	80823cc <_ZN7FatFile4readEPvj+0x12a>
 8082366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8082368:	4299      	cmp	r1, r3
 808236a:	d102      	bne.n	8082372 <_ZN7FatFile4readEPvj+0xd0>
 808236c:	e02e      	b.n	80823cc <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 808236e:	1ba8      	subs	r0, r5, r6
 8082370:	e047      	b.n	8082402 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8082372:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082376:	d31b      	bcc.n	80823b0 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8082378:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 808237a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 808237e:	0697      	lsls	r7, r2, #26
 8082380:	d406      	bmi.n	8082390 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 8082382:	7902      	ldrb	r2, [r0, #4]
 8082384:	ebc8 0202 	rsb	r2, r8, r2
 8082388:	b2d2      	uxtb	r2, r2
 808238a:	4592      	cmp	sl, r2
 808238c:	bf28      	it	cs
 808238e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082390:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8082392:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082396:	d207      	bcs.n	80823a8 <_ZN7FatFile4readEPvj+0x106>
 8082398:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 808239a:	4653      	mov	r3, sl
 808239c:	464a      	mov	r2, r9
 808239e:	6800      	ldr	r0, [r0, #0]
 80823a0:	f000 ff40 	bl	8083224 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80823a4:	b960      	cbnz	r0, 80823c0 <_ZN7FatFile4readEPvj+0x11e>
 80823a6:	e78d      	b.n	80822c4 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80823a8:	4453      	add	r3, sl
 80823aa:	4299      	cmp	r1, r3
 80823ac:	d321      	bcc.n	80823f2 <_ZN7FatFile4readEPvj+0x150>
 80823ae:	e7f3      	b.n	8082398 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80823b0:	464a      	mov	r2, r9
 80823b2:	6800      	ldr	r0, [r0, #0]
 80823b4:	f000 feee 	bl	8083194 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80823b8:	2800      	cmp	r0, #0
 80823ba:	d083      	beq.n	80822c4 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80823bc:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80823c0:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80823c2:	44b9      	add	r9, r7
    m_curPosition += n;
 80823c4:	443b      	add	r3, r7
 80823c6:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80823c8:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80823ca:	e798      	b.n	80822fe <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80823cc:	2200      	movs	r2, #0
 80823ce:	3024      	adds	r0, #36	; 0x24
 80823d0:	f000 fbed 	bl	8082bae <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80823d4:	2800      	cmp	r0, #0
 80823d6:	f43f af75 	beq.w	80822c4 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80823da:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80823de:	42b7      	cmp	r7, r6
 80823e0:	bf28      	it	cs
 80823e2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80823e4:	eb00 010a 	add.w	r1, r0, sl
 80823e8:	463a      	mov	r2, r7
 80823ea:	4648      	mov	r0, r9
 80823ec:	f008 f8a5 	bl	808a53a <memcpy>
 80823f0:	e7e6      	b.n	80823c0 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80823f2:	3024      	adds	r0, #36	; 0x24
 80823f4:	9101      	str	r1, [sp, #4]
 80823f6:	f000 fbb3 	bl	8082b60 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 80823fa:	9901      	ldr	r1, [sp, #4]
 80823fc:	2800      	cmp	r0, #0
 80823fe:	d1cb      	bne.n	8082398 <_ZN7FatFile4readEPvj+0xf6>
 8082400:	e760      	b.n	80822c4 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8082402:	b003      	add	sp, #12
 8082404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082408 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8082408:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808240a:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808240c:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808240e:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 8082412:	b105      	cbz	r5, 8082416 <_ZN7FatFile12readDirCacheEb+0xe>
 8082414:	b969      	cbnz	r1, 8082432 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8082416:	2201      	movs	r2, #1
 8082418:	f10d 0107 	add.w	r1, sp, #7
 808241c:	4620      	mov	r0, r4
 808241e:	f7ff ff40 	bl	80822a2 <_ZN7FatFile4readEPvj>
 8082422:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8082424:	2801      	cmp	r0, #1
 8082426:	d001      	beq.n	808242c <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8082428:	2000      	movs	r0, #0
 808242a:	e008      	b.n	808243e <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 808242c:	6963      	ldr	r3, [r4, #20]
 808242e:	331f      	adds	r3, #31
 8082430:	e000      	b.n	8082434 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 8082432:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8082434:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8082436:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8082438:	3030      	adds	r0, #48	; 0x30
 808243a:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 808243e:	b003      	add	sp, #12
 8082440:	bd30      	pop	{r4, r5, pc}

08082442 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8082442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082446:	460e      	mov	r6, r1
 8082448:	7801      	ldrb	r1, [r0, #0]
 808244a:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 808244c:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 808244e:	2900      	cmp	r1, #0
 8082450:	d039      	beq.n	80824c6 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8082452:	6945      	ldr	r5, [r0, #20]
 8082454:	42b5      	cmp	r5, r6
 8082456:	d03a      	beq.n	80824ce <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8082458:	b90e      	cbnz	r6, 808245e <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 808245a:	6106      	str	r6, [r0, #16]
    goto done;
 808245c:	e031      	b.n	80824c2 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 808245e:	070b      	lsls	r3, r1, #28
 8082460:	d503      	bpl.n	808246a <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8082462:	69c3      	ldr	r3, [r0, #28]
 8082464:	429e      	cmp	r6, r3
 8082466:	d82e      	bhi.n	80824c6 <_ZN7FatFile7seekSetEm+0x84>
 8082468:	e007      	b.n	808247a <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 808246a:	0688      	lsls	r0, r1, #26
 808246c:	d505      	bpl.n	808247a <_ZN7FatFile7seekSetEm+0x38>
 808246e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8082470:	891b      	ldrh	r3, [r3, #8]
 8082472:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8082476:	d826      	bhi.n	80824c6 <_ZN7FatFile7seekSetEm+0x84>
 8082478:	e023      	b.n	80824c2 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808247a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808247e:	1e6a      	subs	r2, r5, #1
 8082480:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8082484:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8082488:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808248a:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808248c:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 808248e:	429a      	cmp	r2, r3
 8082490:	d800      	bhi.n	8082494 <_ZN7FatFile7seekSetEm+0x52>
 8082492:	b94d      	cbnz	r5, 80824a8 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8082494:	064a      	lsls	r2, r1, #25
 8082496:	bf4c      	ite	mi
 8082498:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 808249c:	6a22      	ldrpl	r2, [r4, #32]
 808249e:	6122      	str	r2, [r4, #16]
 80824a0:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80824a2:	f104 0810 	add.w	r8, r4, #16
 80824a6:	e00a      	b.n	80824be <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80824a8:	1a9b      	subs	r3, r3, r2
 80824aa:	e7f9      	b.n	80824a0 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80824ac:	4642      	mov	r2, r8
 80824ae:	6921      	ldr	r1, [r4, #16]
 80824b0:	68a0      	ldr	r0, [r4, #8]
 80824b2:	f000 fba6 	bl	8082c02 <_ZN9FatVolume6fatGetEmPm>
 80824b6:	2800      	cmp	r0, #0
 80824b8:	f105 35ff 	add.w	r5, r5, #4294967295
 80824bc:	dd03      	ble.n	80824c6 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80824be:	2d00      	cmp	r5, #0
 80824c0:	d1f4      	bne.n	80824ac <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80824c2:	6166      	str	r6, [r4, #20]
 80824c4:	e003      	b.n	80824ce <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80824c6:	6127      	str	r7, [r4, #16]
  return false;
 80824c8:	2000      	movs	r0, #0
 80824ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80824ce:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80824d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080824d4 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80824d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80824d6:	460f      	mov	r7, r1
 80824d8:	4604      	mov	r4, r0
 80824da:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80824dc:	2100      	movs	r1, #0
 80824de:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80824e0:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80824e2:	f008 f835 	bl	808a550 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80824e6:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80824e8:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80824ea:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80824ec:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80824ee:	f005 020f 	and.w	r2, r5, #15
 80824f2:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80824f6:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80824f8:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80824fa:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80824fc:	7acb      	ldrb	r3, [r1, #11]
 80824fe:	071d      	lsls	r5, r3, #28
 8082500:	d44c      	bmi.n	808259c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8082502:	1883      	adds	r3, r0, r2
 8082504:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8082508:	f003 0317 	and.w	r3, r3, #23
 808250c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808250e:	7ac9      	ldrb	r1, [r1, #11]
 8082510:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 8082514:	bf04      	itt	eq
 8082516:	f043 0308 	orreq.w	r3, r3, #8
 808251a:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 808251c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8082520:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 8082522:	f006 0303 	and.w	r3, r6, #3
 8082526:	2b01      	cmp	r3, #1
 8082528:	d009      	beq.n	808253e <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 808252a:	2b02      	cmp	r3, #2
 808252c:	d005      	beq.n	808253a <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 808252e:	2b00      	cmp	r3, #0
 8082530:	d134      	bne.n	808259c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 8082532:	0571      	lsls	r1, r6, #21
 8082534:	d432      	bmi.n	808259c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 8082536:	2301      	movs	r3, #1
 8082538:	e002      	b.n	8082540 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 808253a:	2303      	movs	r3, #3
 808253c:	e000      	b.n	8082540 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 808253e:	2302      	movs	r3, #2
 8082540:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 8082542:	78a1      	ldrb	r1, [r4, #2]
 8082544:	078b      	lsls	r3, r1, #30
 8082546:	d503      	bpl.n	8082550 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 8082548:	7823      	ldrb	r3, [r4, #0]
 808254a:	f013 0f11 	tst.w	r3, #17
 808254e:	d125      	bne.n	808259c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 8082550:	b24b      	sxtb	r3, r1
 8082552:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8082556:	f006 0108 	and.w	r1, r6, #8
 808255a:	bf14      	ite	ne
 808255c:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 8082560:	2700      	moveq	r7, #0
 8082562:	4319      	orrs	r1, r3
 8082564:	4339      	orrs	r1, r7
 8082566:	70a1      	strb	r1, [r4, #2]
 8082568:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808256a:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 808256c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 808256e:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8082572:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8082576:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8082578:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 808257c:	d504      	bpl.n	8082588 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808257e:	b181      	cbz	r1, 80825a2 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8082580:	f000 fbdf 	bl	8082d42 <_ZN9FatVolume9freeChainEm>
 8082584:	b968      	cbnz	r0, 80825a2 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8082586:	e009      	b.n	808259c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8082588:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808258a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 808258c:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808258e:	0473      	lsls	r3, r6, #17
 8082590:	d50c      	bpl.n	80825ac <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8082592:	69e1      	ldr	r1, [r4, #28]
 8082594:	4620      	mov	r0, r4
 8082596:	f7ff ff54 	bl	8082442 <_ZN7FatFile7seekSetEm>
 808259a:	b938      	cbnz	r0, 80825ac <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808259c:	2000      	movs	r0, #0
 808259e:	7020      	strb	r0, [r4, #0]
  return false;
 80825a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80825a2:	78a3      	ldrb	r3, [r4, #2]
 80825a4:	f043 0304 	orr.w	r3, r3, #4
 80825a8:	70a3      	strb	r3, [r4, #2]
 80825aa:	e7f0      	b.n	808258e <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80825ac:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80825ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080825b0 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
 80825b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
 80825b4:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
 80825b6:	4606      	mov	r6, r0
 80825b8:	460d      	mov	r5, r1
 80825ba:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
 80825bc:	bb53      	cbnz	r3, 8082614 <_ZN7FatFile8openNextEPS_i+0x64>
 80825be:	780b      	ldrb	r3, [r1, #0]
 80825c0:	f013 0f70 	tst.w	r3, #112	; 0x70
 80825c4:	d026      	beq.n	8082614 <_ZN7FatFile8openNextEPS_i+0x64>
 80825c6:	694c      	ldr	r4, [r1, #20]
 80825c8:	f014 041f 	ands.w	r4, r4, #31
 80825cc:	d122      	bne.n	8082614 <_ZN7FatFile8openNextEPS_i+0x64>
 80825ce:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
 80825d0:	2100      	movs	r1, #0
 80825d2:	4628      	mov	r0, r5
 80825d4:	f8d5 9014 	ldr.w	r9, [r5, #20]
 80825d8:	f7ff ff16 	bl	8082408 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80825dc:	b1d0      	cbz	r0, 8082614 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
 80825de:	7803      	ldrb	r3, [r0, #0]
 80825e0:	b1c3      	cbz	r3, 8082614 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
 80825e2:	2b2e      	cmp	r3, #46	; 0x2e
 80825e4:	d101      	bne.n	80825ea <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
 80825e6:	2400      	movs	r4, #0
 80825e8:	e7f2      	b.n	80825d0 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
 80825ea:	2be5      	cmp	r3, #229	; 0xe5
 80825ec:	d0fb      	beq.n	80825e6 <_ZN7FatFile8openNextEPS_i+0x36>
 80825ee:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80825f0:	f011 0f08 	tst.w	r1, #8
 80825f4:	d105      	bne.n	8082602 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
 80825f6:	b17c      	cbz	r4, 8082618 <_ZN7FatFile8openNextEPS_i+0x68>
 80825f8:	f7ff f985 	bl	8081906 <_ZN7FatFile11lfnChecksumEPh>
 80825fc:	4580      	cmp	r8, r0
 80825fe:	d109      	bne.n	8082614 <_ZN7FatFile8openNextEPS_i+0x64>
 8082600:	e00a      	b.n	8082618 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8082602:	290f      	cmp	r1, #15
 8082604:	d1ef      	bne.n	80825e6 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
 8082606:	0659      	lsls	r1, r3, #25
 8082608:	d5e2      	bpl.n	80825d0 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
 808260a:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
 808260e:	f890 800d 	ldrb.w	r8, [r0, #13]
 8082612:	e7dd      	b.n	80825d0 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
 8082614:	2000      	movs	r0, #0
 8082616:	e007      	b.n	8082628 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
 8082618:	9400      	str	r4, [sp, #0]
 808261a:	463b      	mov	r3, r7
 808261c:	f3c9 124f 	ubfx	r2, r9, #5, #16
 8082620:	4629      	mov	r1, r5
 8082622:	4630      	mov	r0, r6
 8082624:	f7ff ff56 	bl	80824d4 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
 8082628:	b003      	add	sp, #12
 808262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08082630 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8082630:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8082632:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8082634:	4604      	mov	r4, r0
  if (!isOpen()) {
 8082636:	b90b      	cbnz	r3, 808263c <_ZN7FatFile4syncEv+0xc>
    return true;
 8082638:	2001      	movs	r0, #1
 808263a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 808263c:	7883      	ldrb	r3, [r0, #2]
 808263e:	075a      	lsls	r2, r3, #29
 8082640:	d523      	bpl.n	808268a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8082642:	2101      	movs	r1, #1
 8082644:	f7ff fddc 	bl	8082200 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8082648:	4605      	mov	r5, r0
 808264a:	b928      	cbnz	r0, 8082658 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808264c:	7863      	ldrb	r3, [r4, #1]
  return false;
 808264e:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8082650:	f043 0301 	orr.w	r3, r3, #1
 8082654:	7063      	strb	r3, [r4, #1]
 8082656:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8082658:	7803      	ldrb	r3, [r0, #0]
 808265a:	2be5      	cmp	r3, #229	; 0xe5
 808265c:	d0f6      	beq.n	808264c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 808265e:	7823      	ldrb	r3, [r4, #0]
 8082660:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8082662:	bf44      	itt	mi
 8082664:	69e3      	ldrmi	r3, [r4, #28]
 8082666:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8082668:	8c23      	ldrh	r3, [r4, #32]
 808266a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808266c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808266e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8082670:	4b09      	ldr	r3, [pc, #36]	; (8082698 <_ZN7FatFile4syncEv+0x68>)
 8082672:	681b      	ldr	r3, [r3, #0]
 8082674:	b12b      	cbz	r3, 8082682 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8082676:	f100 0116 	add.w	r1, r0, #22
 808267a:	3018      	adds	r0, #24
 808267c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 808267e:	8b2b      	ldrh	r3, [r5, #24]
 8082680:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8082682:	78a3      	ldrb	r3, [r4, #2]
 8082684:	f023 0304 	bic.w	r3, r3, #4
 8082688:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 808268a:	68a0      	ldr	r0, [r4, #8]
 808268c:	f7ff f92e 	bl	80818ec <_ZN9FatVolume9cacheSyncEv>
 8082690:	2800      	cmp	r0, #0
 8082692:	d0db      	beq.n	808264c <_ZN7FatFile4syncEv+0x1c>
 8082694:	e7d0      	b.n	8082638 <_ZN7FatFile4syncEv+0x8>
 8082696:	bf00      	nop
 8082698:	20000760 	.word	0x20000760

0808269c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 808269c:	b510      	push	{r4, lr}
 808269e:	4604      	mov	r4, r0
  bool rtn = sync();
 80826a0:	f7ff ffc6 	bl	8082630 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80826a4:	2300      	movs	r3, #0
 80826a6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80826a8:	bd10      	pop	{r4, pc}

080826aa <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80826aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80826ac:	461f      	mov	r7, r3
 80826ae:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80826b0:	2300      	movs	r3, #0
 80826b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80826b6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80826ba:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80826bc:	4606      	mov	r6, r0
 80826be:	460c      	mov	r4, r1
 80826c0:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80826c2:	b10b      	cbz	r3, 80826c8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80826c4:	2000      	movs	r0, #0
 80826c6:	e03d      	b.n	8082744 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80826c8:	780b      	ldrb	r3, [r1, #0]
 80826ca:	f013 0f70 	tst.w	r3, #112	; 0x70
 80826ce:	d0f9      	beq.n	80826c4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80826d0:	7813      	ldrb	r3, [r2, #0]
 80826d2:	2b2f      	cmp	r3, #47	; 0x2f
 80826d4:	d112      	bne.n	80826fc <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 80826d6:	9b01      	ldr	r3, [sp, #4]
 80826d8:	781a      	ldrb	r2, [r3, #0]
 80826da:	2a2f      	cmp	r2, #47	; 0x2f
 80826dc:	d102      	bne.n	80826e4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 80826de:	3301      	adds	r3, #1
 80826e0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 80826e2:	e7f8      	b.n	80826d6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 80826e4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 80826e6:	b91a      	cbnz	r2, 80826f0 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 80826e8:	4630      	mov	r0, r6
 80826ea:	f7ff fdc2 	bl	8082272 <_ZN7FatFile8openRootEP9FatVolume>
 80826ee:	e029      	b.n	8082744 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80826f0:	a809      	add	r0, sp, #36	; 0x24
 80826f2:	f7ff fdbe 	bl	8082272 <_ZN7FatFile8openRootEP9FatVolume>
 80826f6:	2800      	cmp	r0, #0
 80826f8:	d0e4      	beq.n	80826c4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80826fa:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80826fc:	aa01      	add	r2, sp, #4
 80826fe:	a903      	add	r1, sp, #12
 8082700:	9801      	ldr	r0, [sp, #4]
 8082702:	f7ff f927 	bl	8081954 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8082706:	2800      	cmp	r0, #0
 8082708:	d0dc      	beq.n	80826c4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 808270a:	9b01      	ldr	r3, [sp, #4]
 808270c:	781b      	ldrb	r3, [r3, #0]
 808270e:	b19b      	cbz	r3, 8082738 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8082710:	2300      	movs	r3, #0
 8082712:	aa03      	add	r2, sp, #12
 8082714:	4621      	mov	r1, r4
 8082716:	4630      	mov	r0, r6
 8082718:	f7ff fac0 	bl	8081c9c <_ZN7FatFile4openEPS_P7fname_ti>
 808271c:	2800      	cmp	r0, #0
 808271e:	d0d1      	beq.n	80826c4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082720:	4635      	mov	r5, r6
 8082722:	ac09      	add	r4, sp, #36	; 0x24
 8082724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808272c:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808272e:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082730:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8082732:	f7ff ffb3 	bl	808269c <_ZN7FatFile5closeEv>
 8082736:	e7e0      	b.n	80826fa <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8082738:	463b      	mov	r3, r7
 808273a:	aa03      	add	r2, sp, #12
 808273c:	4621      	mov	r1, r4
 808273e:	4630      	mov	r0, r6
 8082740:	f7ff faac 	bl	8081c9c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 8082744:	b013      	add	sp, #76	; 0x4c
 8082746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082748 <_ZN7FatFile8dirEntryEP14directoryEntry>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(dir_t* dst) {
 8082748:	b570      	push	{r4, r5, r6, lr}
 808274a:	4606      	mov	r6, r0
 808274c:	460c      	mov	r4, r1
  dir_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
 808274e:	f7ff ff6f 	bl	8082630 <_ZN7FatFile4syncEv>
 8082752:	4605      	mov	r5, r0
 8082754:	b908      	cbnz	r0, 808275a <_ZN7FatFile8dirEntryEP14directoryEntry+0x12>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(dir_t));
  return true;

fail:
  return false;
 8082756:	2500      	movs	r5, #0
 8082758:	e00e      	b.n	8082778 <_ZN7FatFile8dirEntryEP14directoryEntry+0x30>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
 808275a:	2100      	movs	r1, #0
 808275c:	4630      	mov	r0, r6
 808275e:	f7ff fd4f 	bl	8082200 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 8082762:	2800      	cmp	r0, #0
 8082764:	d0f7      	beq.n	8082756 <_ZN7FatFile8dirEntryEP14directoryEntry+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(dir_t));
 8082766:	4621      	mov	r1, r4
 8082768:	f100 0320 	add.w	r3, r0, #32
 808276c:	f850 2b04 	ldr.w	r2, [r0], #4
 8082770:	4298      	cmp	r0, r3
 8082772:	f841 2b04 	str.w	r2, [r1], #4
 8082776:	d1f9      	bne.n	808276c <_ZN7FatFile8dirEntryEP14directoryEntry+0x24>
  return true;

fail:
  return false;
}
 8082778:	4628      	mov	r0, r5
 808277a:	bd70      	pop	{r4, r5, r6, pc}

0808277c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082780:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082782:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082784:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082786:	4604      	mov	r4, r0
 8082788:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 808278a:	d508      	bpl.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
 808278c:	7883      	ldrb	r3, [r0, #2]
 808278e:	079a      	lsls	r2, r3, #30
 8082790:	d505      	bpl.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8082792:	071b      	lsls	r3, r3, #28
 8082794:	d50b      	bpl.n	80827ae <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8082796:	69e1      	ldr	r1, [r4, #28]
 8082798:	f7ff fe53 	bl	8082442 <_ZN7FatFile7seekSetEm>
 808279c:	b938      	cbnz	r0, 80827ae <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808279e:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80827a0:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80827a4:	f043 0301 	orr.w	r3, r3, #1
 80827a8:	7063      	strb	r3, [r4, #1]
  return -1;
 80827aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80827ae:	6963      	ldr	r3, [r4, #20]
 80827b0:	43db      	mvns	r3, r3
 80827b2:	4598      	cmp	r8, r3
 80827b4:	d8f3      	bhi.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
 80827b6:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80827b8:	f04f 0a00 	mov.w	sl, #0
 80827bc:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80827be:	2e00      	cmp	r6, #0
 80827c0:	d07f      	beq.n	80828c2 <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80827c2:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80827c4:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80827c8:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80827ca:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 80827ce:	d11c      	bne.n	808280a <_ZN7FatFile5writeEPKvj+0x8e>
 80827d0:	b9df      	cbnz	r7, 808280a <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 80827d2:	6921      	ldr	r1, [r4, #16]
 80827d4:	b171      	cbz	r1, 80827f4 <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80827d6:	f104 0210 	add.w	r2, r4, #16
 80827da:	f000 fa12 	bl	8082c02 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80827de:	2800      	cmp	r0, #0
 80827e0:	dbdd      	blt.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80827e2:	f040 808d 	bne.w	8082900 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 80827e6:	4620      	mov	r0, r4
 80827e8:	f7ff fcbf 	bl	808216a <_ZN7FatFile10addClusterEv>
 80827ec:	2800      	cmp	r0, #0
 80827ee:	f040 8087 	bne.w	8082900 <_ZN7FatFile5writeEPKvj+0x184>
 80827f2:	e7d4      	b.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80827f4:	6a23      	ldr	r3, [r4, #32]
 80827f6:	b93b      	cbnz	r3, 8082808 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 80827f8:	4620      	mov	r0, r4
 80827fa:	f7ff fcb6 	bl	808216a <_ZN7FatFile10addClusterEv>
 80827fe:	2800      	cmp	r0, #0
 8082800:	d0cd      	beq.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8082802:	6923      	ldr	r3, [r4, #16]
 8082804:	6223      	str	r3, [r4, #32]
 8082806:	e000      	b.n	808280a <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 8082808:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 808280a:	6921      	ldr	r1, [r4, #16]
 808280c:	68a0      	ldr	r0, [r4, #8]
 808280e:	f000 f9f2 	bl	8082bf6 <_ZNK9FatVolume17clusterFirstBlockEm>
 8082812:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8082814:	b917      	cbnz	r7, 808281c <_ZN7FatFile5writeEPKvj+0xa0>
 8082816:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808281a:	d221      	bcs.n	8082860 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 808281c:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 8082820:	42b5      	cmp	r5, r6
 8082822:	bf28      	it	cs
 8082824:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8082826:	b937      	cbnz	r7, 8082836 <_ZN7FatFile5writeEPKvj+0xba>
 8082828:	6963      	ldr	r3, [r4, #20]
 808282a:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 808282c:	4293      	cmp	r3, r2
 808282e:	bf34      	ite	cc
 8082830:	2201      	movcc	r2, #1
 8082832:	2205      	movcs	r2, #5
 8082834:	e000      	b.n	8082838 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8082836:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082838:	68a0      	ldr	r0, [r4, #8]
 808283a:	3024      	adds	r0, #36	; 0x24
 808283c:	f000 f9b7 	bl	8082bae <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8082840:	2800      	cmp	r0, #0
 8082842:	d0ac      	beq.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082844:	4438      	add	r0, r7
 8082846:	462a      	mov	r2, r5
 8082848:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 808284a:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808284c:	f007 fe75 	bl	808a53a <memcpy>
      if (512 == (n + blockOffset)) {
 8082850:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8082854:	d12f      	bne.n	80828b6 <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8082856:	68a0      	ldr	r0, [r4, #8]
 8082858:	3024      	adds	r0, #36	; 0x24
 808285a:	f000 f981 	bl	8082b60 <_ZN8FatCache4syncEv>
 808285e:	e016      	b.n	808288e <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8082860:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082864:	68a0      	ldr	r0, [r4, #8]
 8082866:	d314      	bcc.n	8082892 <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 8082868:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 808286a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 808286c:	1b52      	subs	r2, r2, r5
 808286e:	b2d2      	uxtb	r2, r2
 8082870:	4293      	cmp	r3, r2
 8082872:	bf28      	it	cs
 8082874:	4613      	movcs	r3, r2
 8082876:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 8082878:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808287a:	4291      	cmp	r1, r2
 808287c:	d302      	bcc.n	8082884 <_ZN7FatFile5writeEPKvj+0x108>
 808287e:	441a      	add	r2, r3
 8082880:	4291      	cmp	r1, r2
 8082882:	d337      	bcc.n	80828f4 <_ZN7FatFile5writeEPKvj+0x178>
 8082884:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 8082886:	464a      	mov	r2, r9
 8082888:	6838      	ldr	r0, [r7, #0]
 808288a:	f000 fd7f 	bl	808338c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 808288e:	b990      	cbnz	r0, 80828b6 <_ZN7FatFile5writeEPKvj+0x13a>
 8082890:	e785      	b.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8082892:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082894:	464a      	mov	r2, r9
 8082896:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082898:	bf02      	ittt	eq
 808289a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808289e:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80828a2:	62c3      	streq	r3, [r0, #44]	; 0x2c
 80828a4:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80828a6:	6818      	ldr	r0, [r3, #0]
 80828a8:	f000 fcfe 	bl	80832a8 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80828ac:	2800      	cmp	r0, #0
 80828ae:	f43f af76 	beq.w	808279e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80828b2:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80828b6:	6963      	ldr	r3, [r4, #20]
    src += n;
 80828b8:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80828ba:	442b      	add	r3, r5
 80828bc:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80828be:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80828c0:	e77c      	b.n	80827bc <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80828c2:	69e2      	ldr	r2, [r4, #28]
 80828c4:	4293      	cmp	r3, r2
 80828c6:	d901      	bls.n	80828cc <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80828c8:	61e3      	str	r3, [r4, #28]
 80828ca:	e002      	b.n	80828d2 <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80828cc:	4b0f      	ldr	r3, [pc, #60]	; (808290c <_ZN7FatFile5writeEPKvj+0x190>)
 80828ce:	681b      	ldr	r3, [r3, #0]
 80828d0:	b11b      	cbz	r3, 80828da <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80828d2:	78a3      	ldrb	r3, [r4, #2]
 80828d4:	f043 0304 	orr.w	r3, r3, #4
 80828d8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 80828da:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80828de:	2b00      	cmp	r3, #0
 80828e0:	db02      	blt.n	80828e8 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80828e2:	4640      	mov	r0, r8
 80828e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 80828e8:	4620      	mov	r0, r4
 80828ea:	f7ff fea1 	bl	8082630 <_ZN7FatFile4syncEv>
 80828ee:	2800      	cmp	r0, #0
 80828f0:	d1f7      	bne.n	80828e2 <_ZN7FatFile5writeEPKvj+0x166>
 80828f2:	e754      	b.n	808279e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80828f4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80828f8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80828fc:	62c2      	str	r2, [r0, #44]	; 0x2c
 80828fe:	e7c1      	b.n	8082884 <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8082900:	6921      	ldr	r1, [r4, #16]
 8082902:	68a0      	ldr	r0, [r4, #8]
 8082904:	f000 f977 	bl	8082bf6 <_ZNK9FatVolume17clusterFirstBlockEm>
 8082908:	4601      	mov	r1, r0
 808290a:	e784      	b.n	8082816 <_ZN7FatFile5writeEPKvj+0x9a>
 808290c:	20000760 	.word	0x20000760

08082910 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8082910:	f002 bfda 	b.w	80858c8 <HAL_Pin_Map>

08082914 <_ZL7print2uP5Printh.constprop.7>:
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(print_t* pr, uint8_t v) {
  char c0 = '?';
  char c1 = '?';
  if (v < 100) {
 8082914:	2963      	cmp	r1, #99	; 0x63
#include <math.h>
#include "FatFile.h"
#include "FmtNumber.h"
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(print_t* pr, uint8_t v) {
 8082916:	b570      	push	{r4, r5, r6, lr}
 8082918:	4605      	mov	r5, r0
  char c0 = '?';
  char c1 = '?';
  if (v < 100) {
 808291a:	d80e      	bhi.n	808293a <_ZL7print2uP5Printh.constprop.7+0x26>
    c1 = v/10;
 808291c:	230a      	movs	r3, #10
 808291e:	fbb1 f3f3 	udiv	r3, r1, r3
    c0 = v - 10*c1 + '0';
 8082922:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
 8082926:	3130      	adds	r1, #48	; 0x30
 8082928:	ebc3 0484 	rsb	r4, r3, r4, lsl #2
 808292c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    c1 += '0';
 8082930:	f103 0130 	add.w	r1, r3, #48	; 0x30
static void print2u(print_t* pr, uint8_t v) {
  char c0 = '?';
  char c1 = '?';
  if (v < 100) {
    c1 = v/10;
    c0 = v - 10*c1 + '0';
 8082934:	b2e4      	uxtb	r4, r4
    c1 += '0';
 8082936:	b2c9      	uxtb	r1, r1
 8082938:	e001      	b.n	808293e <_ZL7print2uP5Printh.constprop.7+0x2a>
#include "FmtNumber.h"
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(print_t* pr, uint8_t v) {
  char c0 = '?';
  char c1 = '?';
 808293a:	213f      	movs	r1, #63	; 0x3f
#include "FatFile.h"
#include "FmtNumber.h"
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(print_t* pr, uint8_t v) {
  char c0 = '?';
 808293c:	460c      	mov	r4, r1
  if (v < 100) {
    c1 = v/10;
    c0 = v - 10*c1 + '0';
    c1 += '0';
  }
  pr->write(c1);
 808293e:	682b      	ldr	r3, [r5, #0]
 8082940:	4628      	mov	r0, r5
 8082942:	689b      	ldr	r3, [r3, #8]
 8082944:	4798      	blx	r3
  pr->write(c0);
 8082946:	682b      	ldr	r3, [r5, #0]
 8082948:	4621      	mov	r1, r4
 808294a:	4628      	mov	r0, r5
}
 808294c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c1 = v/10;
    c0 = v - 10*c1 + '0';
    c1 += '0';
  }
  pr->write(c1);
  pr->write(c0);
 8082950:	689b      	ldr	r3, [r3, #8]
 8082952:	4718      	bx	r3

08082954 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082954:	b570      	push	{r4, r5, r6, lr}
 8082956:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082958:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808295a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 808295c:	b149      	cbz	r1, 8082972 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808295e:	f008 fb77 	bl	808b050 <strlen>
 8082962:	682b      	ldr	r3, [r5, #0]
 8082964:	4602      	mov	r2, r0
 8082966:	4621      	mov	r1, r4
 8082968:	4628      	mov	r0, r5
    }
 808296a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808296e:	68db      	ldr	r3, [r3, #12]
 8082970:	4718      	bx	r3
    }
 8082972:	bd70      	pop	{r4, r5, r6, pc}

08082974 <_ZN7FatFile12printFatDateEP5Printt>:

fail:
  return false;
}
//------------------------------------------------------------------------------
void FatFile::printFatDate(print_t* pr, uint16_t fatDate) {
 8082974:	b530      	push	{r4, r5, lr}
 8082976:	460d      	mov	r5, r1
 8082978:	b085      	sub	sp, #20
 808297a:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
static void printU32(print_t* pr, uint32_t v) {
  char buf[11];
  char* ptr = buf + sizeof(buf);
  *--ptr = 0;
 808297c:	a904      	add	r1, sp, #16
 808297e:	2300      	movs	r3, #0
  pr->write(fmtDec(v, ptr));
 8082980:	1268      	asrs	r0, r5, #9
}
//------------------------------------------------------------------------------
static void printU32(print_t* pr, uint32_t v) {
  char buf[11];
  char* ptr = buf + sizeof(buf);
  *--ptr = 0;
 8082982:	f801 3d02 	strb.w	r3, [r1, #-2]!
  pr->write(fmtDec(v, ptr));
 8082986:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
 808298a:	f7ff fbcd 	bl	8082128 <_Z6fmtDecmPc>
 808298e:	4601      	mov	r1, r0
 8082990:	4620      	mov	r0, r4
 8082992:	f7ff ffdf 	bl	8082954 <_ZN5Print5writeEPKc>
  return false;
}
//------------------------------------------------------------------------------
void FatFile::printFatDate(print_t* pr, uint16_t fatDate) {
  printU32(pr, FAT_YEAR(fatDate));
  pr->write('-');
 8082996:	6823      	ldr	r3, [r4, #0]
 8082998:	212d      	movs	r1, #45	; 0x2d
 808299a:	689b      	ldr	r3, [r3, #8]
 808299c:	4620      	mov	r0, r4
 808299e:	4798      	blx	r3
  print2u(pr, FAT_MONTH(fatDate));
 80829a0:	f3c5 1143 	ubfx	r1, r5, #5, #4
 80829a4:	4620      	mov	r0, r4
 80829a6:	f7ff ffb5 	bl	8082914 <_ZL7print2uP5Printh.constprop.7>
  pr->write('-');
 80829aa:	6823      	ldr	r3, [r4, #0]
 80829ac:	212d      	movs	r1, #45	; 0x2d
 80829ae:	689b      	ldr	r3, [r3, #8]
 80829b0:	4620      	mov	r0, r4
 80829b2:	4798      	blx	r3
  print2u(pr, FAT_DAY(fatDate));
 80829b4:	f005 011f 	and.w	r1, r5, #31
 80829b8:	4620      	mov	r0, r4
 80829ba:	f7ff ffab 	bl	8082914 <_ZL7print2uP5Printh.constprop.7>
}
 80829be:	b005      	add	sp, #20
 80829c0:	bd30      	pop	{r4, r5, pc}

080829c2 <_ZN7FatFile12printFatTimeEP5Printt>:
//------------------------------------------------------------------------------
void FatFile::printFatTime(print_t* pr, uint16_t fatTime) {
 80829c2:	b538      	push	{r3, r4, r5, lr}
 80829c4:	4604      	mov	r4, r0
 80829c6:	460d      	mov	r5, r1
  print2u(pr, FAT_HOUR(fatTime));
 80829c8:	0ac9      	lsrs	r1, r1, #11
 80829ca:	f7ff ffa3 	bl	8082914 <_ZL7print2uP5Printh.constprop.7>
  pr->write(':');
 80829ce:	6823      	ldr	r3, [r4, #0]
 80829d0:	213a      	movs	r1, #58	; 0x3a
 80829d2:	689b      	ldr	r3, [r3, #8]
 80829d4:	4620      	mov	r0, r4
 80829d6:	4798      	blx	r3
  print2u(pr, FAT_MINUTE(fatTime));
 80829d8:	f3c5 1145 	ubfx	r1, r5, #5, #6
 80829dc:	4620      	mov	r0, r4
 80829de:	f7ff ff99 	bl	8082914 <_ZL7print2uP5Printh.constprop.7>
  pr->write(':');
 80829e2:	6823      	ldr	r3, [r4, #0]
 80829e4:	213a      	movs	r1, #58	; 0x3a
 80829e6:	689b      	ldr	r3, [r3, #8]
 80829e8:	4620      	mov	r0, r4
 80829ea:	4798      	blx	r3
  print2u(pr, FAT_SECOND(fatTime));
 80829ec:	f005 011f 	and.w	r1, r5, #31
 80829f0:	4620      	mov	r0, r4
}
 80829f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void FatFile::printFatTime(print_t* pr, uint16_t fatTime) {
  print2u(pr, FAT_HOUR(fatTime));
  pr->write(':');
  print2u(pr, FAT_MINUTE(fatTime));
  pr->write(':');
  print2u(pr, FAT_SECOND(fatTime));
 80829f6:	0049      	lsls	r1, r1, #1
 80829f8:	f7ff bf8c 	b.w	8082914 <_ZL7print2uP5Printh.constprop.7>

080829fc <_ZN7FatFile19printModifyDateTimeEP5Print>:
    value = -value;
  }
  return printFieldT(this, sign, (uint32_t)value, term);
}
//------------------------------------------------------------------------------
bool FatFile::printModifyDateTime(print_t* pr) {
 80829fc:	b530      	push	{r4, r5, lr}
 80829fe:	b089      	sub	sp, #36	; 0x24
 8082a00:	460c      	mov	r4, r1
  dir_t dir;
  if (!dirEntry(&dir)) {
 8082a02:	4669      	mov	r1, sp
 8082a04:	f7ff fea0 	bl	8082748 <_ZN7FatFile8dirEntryEP14directoryEntry>
 8082a08:	4605      	mov	r5, r0
 8082a0a:	b170      	cbz	r0, 8082a2a <_ZN7FatFile19printModifyDateTimeEP5Print+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  printFatDate(pr, dir.lastWriteDate);
 8082a0c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8082a10:	4620      	mov	r0, r4
 8082a12:	f7ff ffaf 	bl	8082974 <_ZN7FatFile12printFatDateEP5Printt>
  pr->write(' ');
 8082a16:	6823      	ldr	r3, [r4, #0]
 8082a18:	2120      	movs	r1, #32
 8082a1a:	689b      	ldr	r3, [r3, #8]
 8082a1c:	4620      	mov	r0, r4
 8082a1e:	4798      	blx	r3
  printFatTime(pr, dir.lastWriteTime);
 8082a20:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8082a24:	4620      	mov	r0, r4
 8082a26:	f7ff ffcc 	bl	80829c2 <_ZN7FatFile12printFatTimeEP5Printt>
  return true;

fail:
  return false;
}
 8082a2a:	4628      	mov	r0, r5
 8082a2c:	b009      	add	sp, #36	; 0x24
 8082a2e:	bd30      	pop	{r4, r5, pc}

08082a30 <_ZN7FatFile13printFileSizeEP5Print>:
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
 8082a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
 8082a32:	2300      	movs	r3, #0

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
 8082a34:	460c      	mov	r4, r1
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
 8082a36:	a904      	add	r1, sp, #16
 8082a38:	f801 3d02 	strb.w	r3, [r1, #-2]!
  ptr = fmtDec(fileSize(), ptr);
 8082a3c:	69c0      	ldr	r0, [r0, #28]
 8082a3e:	f7ff fb73 	bl	8082128 <_Z6fmtDecmPc>
  while (ptr > buf) {
 8082a42:	a901      	add	r1, sp, #4
    *--ptr = ' ';
 8082a44:	2320      	movs	r3, #32
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtDec(fileSize(), ptr);
  while (ptr > buf) {
 8082a46:	4288      	cmp	r0, r1
 8082a48:	d902      	bls.n	8082a50 <_ZN7FatFile13printFileSizeEP5Print+0x20>
    *--ptr = ' ';
 8082a4a:	f800 3d01 	strb.w	r3, [r0, #-1]!
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtDec(fileSize(), ptr);
  while (ptr > buf) {
 8082a4e:	e7fa      	b.n	8082a46 <_ZN7FatFile13printFileSizeEP5Print+0x16>
    *--ptr = ' ';
  }
  return pr->write(buf);
 8082a50:	4620      	mov	r0, r4
 8082a52:	f7ff ff7f 	bl	8082954 <_ZN5Print5writeEPKc>
}
 8082a56:	b004      	add	sp, #16
 8082a58:	bd10      	pop	{r4, pc}

08082a5a <_ZN7FatFile2lsEP5Printhh>:
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
 8082a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082a5e:	4699      	mov	r9, r3
 8082a60:	b08b      	sub	sp, #44	; 0x2c
 8082a62:	2300      	movs	r3, #0
 8082a64:	f88d 3004 	strb.w	r3, [sp, #4]
 8082a68:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!isDir() || getError()) {
 8082a6c:	7803      	ldrb	r3, [r0, #0]
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
 8082a6e:	4606      	mov	r6, r0
  FatFile file;
  if (!isDir() || getError()) {
 8082a70:	f013 0f70 	tst.w	r3, #112	; 0x70
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
 8082a74:	460c      	mov	r4, r1
 8082a76:	4615      	mov	r5, r2
  FatFile file;
  if (!isDir() || getError()) {
 8082a78:	d101      	bne.n	8082a7e <_ZN7FatFile2lsEP5Printhh+0x24>
    goto fail;
  }
  return true;

 fail:
  return false;
 8082a7a:	2000      	movs	r0, #0
 8082a7c:	e069      	b.n	8082b52 <_ZN7FatFile2lsEP5Printhh+0xf8>
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
  FatFile file;
  if (!isDir() || getError()) {
 8082a7e:	7841      	ldrb	r1, [r0, #1]
 8082a80:	2900      	cmp	r1, #0
 8082a82:	d1fa      	bne.n	8082a7a <_ZN7FatFile2lsEP5Printhh+0x20>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8082a84:	f7ff fcdd 	bl	8082442 <_ZN7FatFile7seekSetEm>
    if (!file.isHidden() || (flags & LS_A)) {
    // indent for dir level
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
 8082a88:	f005 0702 	and.w	r7, r5, #2
 8082a8c:	b2ff      	uxtb	r7, r7
  if (!isDir() || getError()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
 8082a8e:	2200      	movs	r2, #0
 8082a90:	4631      	mov	r1, r6
 8082a92:	a801      	add	r0, sp, #4
 8082a94:	f7ff fd8c 	bl	80825b0 <_ZN7FatFile8openNextEPS_i>
 8082a98:	2800      	cmp	r0, #0
 8082a9a:	d04a      	beq.n	8082b32 <_ZN7FatFile2lsEP5Printhh+0xd8>
    if (!file.isHidden() || (flags & LS_A)) {
 8082a9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8082aa0:	0798      	lsls	r0, r3, #30
 8082aa2:	d505      	bpl.n	8082ab0 <_ZN7FatFile2lsEP5Printhh+0x56>
 8082aa4:	07e9      	lsls	r1, r5, #31
 8082aa6:	d403      	bmi.n	8082ab0 <_ZN7FatFile2lsEP5Printhh+0x56>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    file.close();
 8082aa8:	a801      	add	r0, sp, #4
 8082aaa:	f7ff fdf7 	bl	808269c <_ZN7FatFile5closeEv>
  if (!isDir() || getError()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
 8082aae:	e7ee      	b.n	8082a8e <_ZN7FatFile2lsEP5Printhh+0x34>
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
 8082ab0:	f04f 0800 	mov.w	r8, #0
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    if (!file.isHidden() || (flags & LS_A)) {
    // indent for dir level
      for (uint8_t i = 0; i < indent; i++) {
 8082ab4:	45c1      	cmp	r9, r8
 8082ab6:	d007      	beq.n	8082ac8 <_ZN7FatFile2lsEP5Printhh+0x6e>
        pr->write(' ');
 8082ab8:	6823      	ldr	r3, [r4, #0]
 8082aba:	2120      	movs	r1, #32
 8082abc:	689b      	ldr	r3, [r3, #8]
 8082abe:	4620      	mov	r0, r4
 8082ac0:	4798      	blx	r3
 8082ac2:	f108 0801 	add.w	r8, r8, #1
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    if (!file.isHidden() || (flags & LS_A)) {
    // indent for dir level
      for (uint8_t i = 0; i < indent; i++) {
 8082ac6:	e7f5      	b.n	8082ab4 <_ZN7FatFile2lsEP5Printhh+0x5a>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
 8082ac8:	b147      	cbz	r7, 8082adc <_ZN7FatFile2lsEP5Printhh+0x82>
        file.printModifyDateTime(pr);
 8082aca:	4621      	mov	r1, r4
 8082acc:	a801      	add	r0, sp, #4
 8082ace:	f7ff ff95 	bl	80829fc <_ZN7FatFile19printModifyDateTimeEP5Print>
        pr->write(' ');
 8082ad2:	6823      	ldr	r3, [r4, #0]
 8082ad4:	2120      	movs	r1, #32
 8082ad6:	689b      	ldr	r3, [r3, #8]
 8082ad8:	4620      	mov	r0, r4
 8082ada:	4798      	blx	r3
      }
      if (flags & LS_SIZE) {
 8082adc:	076a      	lsls	r2, r5, #29
 8082ade:	d508      	bpl.n	8082af2 <_ZN7FatFile2lsEP5Printhh+0x98>
        file.printFileSize(pr);
 8082ae0:	4621      	mov	r1, r4
 8082ae2:	a801      	add	r0, sp, #4
 8082ae4:	f7ff ffa4 	bl	8082a30 <_ZN7FatFile13printFileSizeEP5Print>
        pr->write(' ');
 8082ae8:	6823      	ldr	r3, [r4, #0]
 8082aea:	2120      	movs	r1, #32
 8082aec:	689b      	ldr	r3, [r3, #8]
 8082aee:	4620      	mov	r0, r4
 8082af0:	4798      	blx	r3
      }
      file.printName(pr);
 8082af2:	4621      	mov	r1, r4
 8082af4:	a801      	add	r0, sp, #4
 8082af6:	f7ff f819 	bl	8081b2c <_ZN7FatFile9printNameEP5Print>
      if (file.isDir()) {
 8082afa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8082afe:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082b02:	d004      	beq.n	8082b0e <_ZN7FatFile2lsEP5Printhh+0xb4>
        pr->write('/');
 8082b04:	6823      	ldr	r3, [r4, #0]
 8082b06:	212f      	movs	r1, #47	; 0x2f
 8082b08:	689b      	ldr	r3, [r3, #8]
 8082b0a:	4620      	mov	r0, r4
 8082b0c:	4798      	blx	r3
      }
      pr->write('\r');
 8082b0e:	6823      	ldr	r3, [r4, #0]
 8082b10:	210d      	movs	r1, #13
 8082b12:	689b      	ldr	r3, [r3, #8]
 8082b14:	4620      	mov	r0, r4
 8082b16:	4798      	blx	r3
      pr->write('\n');
 8082b18:	6823      	ldr	r3, [r4, #0]
 8082b1a:	210a      	movs	r1, #10
 8082b1c:	689b      	ldr	r3, [r3, #8]
 8082b1e:	4620      	mov	r0, r4
 8082b20:	4798      	blx	r3
      if ((flags & LS_R) && file.isDir()) {
 8082b22:	072b      	lsls	r3, r5, #28
 8082b24:	d5c0      	bpl.n	8082aa8 <_ZN7FatFile2lsEP5Printhh+0x4e>
 8082b26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8082b2a:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082b2e:	d105      	bne.n	8082b3c <_ZN7FatFile2lsEP5Printhh+0xe2>
 8082b30:	e7ba      	b.n	8082aa8 <_ZN7FatFile2lsEP5Printhh+0x4e>
        }
      }
    }
    file.close();
  }
  if (getError()) {
 8082b32:	7870      	ldrb	r0, [r6, #1]
 8082b34:	fab0 f080 	clz	r0, r0
 8082b38:	0940      	lsrs	r0, r0, #5
 8082b3a:	e00a      	b.n	8082b52 <_ZN7FatFile2lsEP5Printhh+0xf8>
        pr->write('/');
      }
      pr->write('\r');
      pr->write('\n');
      if ((flags & LS_R) && file.isDir()) {
        if (!file.ls(pr, flags, indent + 2)) {
 8082b3c:	f109 0302 	add.w	r3, r9, #2
 8082b40:	b2db      	uxtb	r3, r3
 8082b42:	462a      	mov	r2, r5
 8082b44:	4621      	mov	r1, r4
 8082b46:	a801      	add	r0, sp, #4
 8082b48:	f7ff ff87 	bl	8082a5a <_ZN7FatFile2lsEP5Printhh>
 8082b4c:	2800      	cmp	r0, #0
 8082b4e:	d1ab      	bne.n	8082aa8 <_ZN7FatFile2lsEP5Printhh+0x4e>
 8082b50:	e793      	b.n	8082a7a <_ZN7FatFile2lsEP5Printhh+0x20>
  }
  return true;

 fail:
  return false;
}
 8082b52:	b00b      	add	sp, #44	; 0x2c
 8082b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08082b58 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8082b58:	f002 beb6 	b.w	80858c8 <HAL_Pin_Map>

08082b5c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8082b5c:	f002 beb4 	b.w	80858c8 <HAL_Pin_Map>

08082b60 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082b60:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8082b62:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082b64:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8082b66:	07da      	lsls	r2, r3, #31
 8082b68:	d51e      	bpl.n	8082ba8 <_ZN8FatCache4syncEv+0x48>
 8082b6a:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8082b6c:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082b70:	6881      	ldr	r1, [r0, #8]
 8082b72:	4632      	mov	r2, r6
 8082b74:	6818      	ldr	r0, [r3, #0]
 8082b76:	f000 fb97 	bl	80832a8 <_ZN9SdSpiCard10writeBlockEmPKh>
 8082b7a:	4605      	mov	r5, r0
 8082b7c:	b908      	cbnz	r0, 8082b82 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8082b7e:	2500      	movs	r5, #0
 8082b80:	e013      	b.n	8082baa <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8082b82:	7823      	ldrb	r3, [r4, #0]
 8082b84:	079b      	lsls	r3, r3, #30
 8082b86:	d404      	bmi.n	8082b92 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8082b88:	7823      	ldrb	r3, [r4, #0]
 8082b8a:	f023 0301 	bic.w	r3, r3, #1
 8082b8e:	7023      	strb	r3, [r4, #0]
 8082b90:	e00b      	b.n	8082baa <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8082b92:	6863      	ldr	r3, [r4, #4]
 8082b94:	68a0      	ldr	r0, [r4, #8]
 8082b96:	6919      	ldr	r1, [r3, #16]
 8082b98:	4632      	mov	r2, r6
 8082b9a:	4401      	add	r1, r0
 8082b9c:	6818      	ldr	r0, [r3, #0]
 8082b9e:	f000 fb83 	bl	80832a8 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8082ba2:	2800      	cmp	r0, #0
 8082ba4:	d1f0      	bne.n	8082b88 <_ZN8FatCache4syncEv+0x28>
 8082ba6:	e7ea      	b.n	8082b7e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8082ba8:	2501      	movs	r5, #1

fail:
  return false;
}
 8082baa:	4628      	mov	r0, r5
 8082bac:	bd70      	pop	{r4, r5, r6, pc}

08082bae <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082bae:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8082bb0:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082bb2:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8082bb4:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082bb6:	460e      	mov	r6, r1
 8082bb8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8082bba:	d014      	beq.n	8082be6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8082bbc:	f7ff ffd0 	bl	8082b60 <_ZN8FatCache4syncEv>
 8082bc0:	b908      	cbnz	r0, 8082bc6 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 8082bc2:	2000      	movs	r0, #0
 8082bc4:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8082bc6:	076b      	lsls	r3, r5, #29
 8082bc8:	d503      	bpl.n	8082bd2 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8082bca:	2300      	movs	r3, #0
 8082bcc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8082bce:	60a6      	str	r6, [r4, #8]
 8082bd0:	e009      	b.n	8082be6 <_ZN8FatCache4readEmh+0x38>
 8082bd2:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8082bd4:	f104 020c 	add.w	r2, r4, #12
 8082bd8:	4631      	mov	r1, r6
 8082bda:	6818      	ldr	r0, [r3, #0]
 8082bdc:	f000 fada 	bl	8083194 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8082be0:	2800      	cmp	r0, #0
 8082be2:	d1f2      	bne.n	8082bca <_ZN8FatCache4readEmh+0x1c>
 8082be4:	e7ed      	b.n	8082bc2 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8082be6:	4620      	mov	r0, r4
 8082be8:	7823      	ldrb	r3, [r4, #0]
 8082bea:	f005 0503 	and.w	r5, r5, #3
 8082bee:	431d      	orrs	r5, r3
 8082bf0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 8082bf4:	bd70      	pop	{r4, r5, r6, pc}

08082bf6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8082bf6:	7983      	ldrb	r3, [r0, #6]
 8082bf8:	3902      	subs	r1, #2
 8082bfa:	6940      	ldr	r0, [r0, #20]
 8082bfc:	4099      	lsls	r1, r3
}
 8082bfe:	4408      	add	r0, r1
 8082c00:	4770      	bx	lr

08082c02 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082c02:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8082c04:	b570      	push	{r4, r5, r6, lr}
 8082c06:	4605      	mov	r5, r0
 8082c08:	460c      	mov	r4, r1
 8082c0a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082c0c:	d802      	bhi.n	8082c14 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8082c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8082c12:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082c14:	69c3      	ldr	r3, [r0, #28]
 8082c16:	4299      	cmp	r1, r3
 8082c18:	d8f9      	bhi.n	8082c0e <_ZN9FatVolume6fatGetEmPm+0xc>
 8082c1a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8082c1c:	2b20      	cmp	r3, #32
 8082c1e:	d110      	bne.n	8082c42 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8082c20:	6981      	ldr	r1, [r0, #24]
 8082c22:	2202      	movs	r2, #2
 8082c24:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082c28:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082c2c:	f7ff ffbf 	bl	8082bae <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082c30:	2800      	cmp	r0, #0
 8082c32:	d0ec      	beq.n	8082c0e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8082c34:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082c38:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8082c3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8082c40:	e00f      	b.n	8082c62 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 8082c42:	2b10      	cmp	r3, #16
 8082c44:	d1e3      	bne.n	8082c0e <_ZN9FatVolume6fatGetEmPm+0xc>
 8082c46:	6983      	ldr	r3, [r0, #24]
 8082c48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082c4c:	2202      	movs	r2, #2
 8082c4e:	4419      	add	r1, r3
 8082c50:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082c54:	f7ff ffab 	bl	8082bae <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082c58:	2800      	cmp	r0, #0
 8082c5a:	d0d8      	beq.n	8082c0e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8082c5c:	b2e4      	uxtb	r4, r4
 8082c5e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8082c62:	69ea      	ldr	r2, [r5, #28]
 8082c64:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8082c66:	bf9a      	itte	ls
 8082c68:	6033      	strls	r3, [r6, #0]
  return 1;
 8082c6a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8082c6c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8082c6e:	bd70      	pop	{r4, r5, r6, pc}

08082c70 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082c70:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8082c72:	b538      	push	{r3, r4, r5, lr}
 8082c74:	460c      	mov	r4, r1
 8082c76:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082c78:	d801      	bhi.n	8082c7e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8082c7a:	2000      	movs	r0, #0
 8082c7c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082c7e:	69c3      	ldr	r3, [r0, #28]
 8082c80:	4299      	cmp	r1, r3
 8082c82:	d8fa      	bhi.n	8082c7a <_ZN9FatVolume6fatPutEmm+0xa>
 8082c84:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8082c86:	2b20      	cmp	r3, #32
 8082c88:	d10e      	bne.n	8082ca8 <_ZN9FatVolume6fatPutEmm+0x38>
 8082c8a:	6981      	ldr	r1, [r0, #24]
 8082c8c:	2203      	movs	r2, #3
 8082c8e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082c92:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082c96:	f7ff ff8a 	bl	8082bae <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8082c9a:	2800      	cmp	r0, #0
 8082c9c:	d0ed      	beq.n	8082c7a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8082c9e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082ca2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8082ca6:	e00f      	b.n	8082cc8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8082ca8:	2b10      	cmp	r3, #16
 8082caa:	d1e6      	bne.n	8082c7a <_ZN9FatVolume6fatPutEmm+0xa>
 8082cac:	6983      	ldr	r3, [r0, #24]
 8082cae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082cb2:	2203      	movs	r2, #3
 8082cb4:	4419      	add	r1, r3
 8082cb6:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082cba:	f7ff ff78 	bl	8082bae <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8082cbe:	2800      	cmp	r0, #0
 8082cc0:	d0db      	beq.n	8082c7a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8082cc2:	b2e4      	uxtb	r4, r4
 8082cc4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8082cc8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8082cca:	bd38      	pop	{r3, r4, r5, pc}

08082ccc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082cd0:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082cd2:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082cd4:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082cd6:	460e      	mov	r6, r1
 8082cd8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082cda:	d207      	bcs.n	8082cec <_ZN9FatVolume15allocateClusterEmPm+0x20>
 8082cdc:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 8082cde:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 8082ce0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 8082ce2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 8082ce4:	429c      	cmp	r4, r3
 8082ce6:	d903      	bls.n	8082cf0 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 8082ce8:	b9cf      	cbnz	r7, 8082d1e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 8082cea:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 8082cec:	2701      	movs	r7, #1
 8082cee:	e7f7      	b.n	8082ce0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 8082cf0:	42a6      	cmp	r6, r4
 8082cf2:	d014      	beq.n	8082d1e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8082cf4:	aa01      	add	r2, sp, #4
 8082cf6:	4621      	mov	r1, r4
 8082cf8:	4628      	mov	r0, r5
 8082cfa:	f7ff ff82 	bl	8082c02 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082cfe:	2800      	cmp	r0, #0
 8082d00:	db0d      	blt.n	8082d1e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8082d02:	d0ed      	beq.n	8082ce0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8082d04:	9b01      	ldr	r3, [sp, #4]
 8082d06:	2b00      	cmp	r3, #0
 8082d08:	d1ea      	bne.n	8082ce0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 8082d0a:	b107      	cbz	r7, 8082d0e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 8082d0c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8082d0e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8082d12:	4621      	mov	r1, r4
 8082d14:	4628      	mov	r0, r5
 8082d16:	f7ff ffab 	bl	8082c70 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 8082d1a:	4607      	mov	r7, r0
 8082d1c:	b908      	cbnz	r0, 8082d22 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8082d1e:	2700      	movs	r7, #0
 8082d20:	e00b      	b.n	8082d3a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8082d22:	b916      	cbnz	r6, 8082d2a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 8082d24:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8082d28:	e007      	b.n	8082d3a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 8082d2a:	4622      	mov	r2, r4
 8082d2c:	4631      	mov	r1, r6
 8082d2e:	4628      	mov	r0, r5
 8082d30:	f7ff ff9e 	bl	8082c70 <_ZN9FatVolume6fatPutEmm>
 8082d34:	2800      	cmp	r0, #0
 8082d36:	d1f5      	bne.n	8082d24 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 8082d38:	e7f1      	b.n	8082d1e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 8082d3a:	4638      	mov	r0, r7
 8082d3c:	b002      	add	sp, #8
 8082d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082d42 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8082d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8082d44:	4605      	mov	r5, r0
 8082d46:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8082d48:	aa01      	add	r2, sp, #4
 8082d4a:	4621      	mov	r1, r4
 8082d4c:	4628      	mov	r0, r5
 8082d4e:	f7ff ff58 	bl	8082c02 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082d52:	1e06      	subs	r6, r0, #0
 8082d54:	da01      	bge.n	8082d5a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8082d56:	2000      	movs	r0, #0
 8082d58:	e00f      	b.n	8082d7a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8082d5a:	2200      	movs	r2, #0
 8082d5c:	4621      	mov	r1, r4
 8082d5e:	4628      	mov	r0, r5
 8082d60:	f7ff ff86 	bl	8082c70 <_ZN9FatVolume6fatPutEmm>
 8082d64:	2800      	cmp	r0, #0
 8082d66:	d0f6      	beq.n	8082d56 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8082d68:	68eb      	ldr	r3, [r5, #12]
 8082d6a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 8082d6c:	bf9c      	itt	ls
 8082d6e:	f104 34ff 	addls.w	r4, r4, #4294967295
 8082d72:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 8082d74:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8082d76:	2e00      	cmp	r6, #0
 8082d78:	d1e6      	bne.n	8082d48 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8082d7a:	b002      	add	sp, #8
 8082d7c:	bd70      	pop	{r4, r5, r6, pc}

08082d7e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8082d7e:	b570      	push	{r4, r5, r6, lr}
 8082d80:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8082d82:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8082d84:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8082d86:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082d88:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8082d8c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8082d8e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082d90:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082d92:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082d96:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082d98:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082d9c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 8082da0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 8082da4:	b1a1      	cbz	r1, 8082dd0 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8082da6:	2904      	cmp	r1, #4
 8082da8:	d85d      	bhi.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082daa:	4611      	mov	r1, r2
 8082dac:	3024      	adds	r0, #36	; 0x24
 8082dae:	f7ff fefe 	bl	8082bae <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082db2:	2800      	cmp	r0, #0
 8082db4:	d057      	beq.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8082db6:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8082dba:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8082dbe:	065b      	lsls	r3, r3, #25
 8082dc0:	d151      	bne.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
 8082dc2:	351b      	adds	r5, #27
 8082dc4:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8082dc8:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8082dcc:	2d00      	cmp	r5, #0
 8082dce:	d04a      	beq.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
 8082dd0:	2200      	movs	r2, #0
 8082dd2:	4629      	mov	r1, r5
 8082dd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8082dd8:	f7ff fee9 	bl	8082bae <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8082ddc:	2800      	cmp	r0, #0
 8082dde:	d042      	beq.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8082de0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8082de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8082de8:	d13d      	bne.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
 8082dea:	7c03      	ldrb	r3, [r0, #16]
 8082dec:	2b02      	cmp	r3, #2
 8082dee:	d13a      	bne.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 8082df0:	89c3      	ldrh	r3, [r0, #14]
 8082df2:	2b00      	cmp	r3, #0
 8082df4:	d037      	beq.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8082df6:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8082df8:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8082dfa:	1e4b      	subs	r3, r1, #1
 8082dfc:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8082dfe:	2300      	movs	r3, #0
 8082e00:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8082e02:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8082e04:	2301      	movs	r3, #1
 8082e06:	428b      	cmp	r3, r1
 8082e08:	d007      	beq.n	8082e1a <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8082e0a:	3e01      	subs	r6, #1
 8082e0c:	d02b      	beq.n	8082e66 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8082e0e:	79a2      	ldrb	r2, [r4, #6]
 8082e10:	005b      	lsls	r3, r3, #1
 8082e12:	3201      	adds	r2, #1
 8082e14:	b2db      	uxtb	r3, r3
 8082e16:	71a2      	strb	r2, [r4, #6]
 8082e18:	e7f5      	b.n	8082e06 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8082e1a:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8082e1c:	b902      	cbnz	r2, 8082e20 <_ZN9FatVolume4initEh+0xa2>
 8082e1e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8082e20:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8082e22:	89c6      	ldrh	r6, [r0, #14]
 8082e24:	442e      	add	r6, r5
 8082e26:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8082e28:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8082e2c:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8082e30:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8082e32:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8082e34:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8082e38:	0152      	lsls	r2, r2, #5
 8082e3a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8082e3e:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8082e42:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8082e44:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8082e48:	b903      	cbnz	r3, 8082e4c <_ZN9FatVolume4initEh+0xce>
 8082e4a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8082e4c:	1aad      	subs	r5, r5, r2
 8082e4e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8082e50:	79a5      	ldrb	r5, [r4, #6]
 8082e52:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8082e56:	1c6b      	adds	r3, r5, #1
 8082e58:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8082e5a:	f640 73f4 	movw	r3, #4084	; 0xff4
 8082e5e:	429d      	cmp	r5, r3
 8082e60:	d803      	bhi.n	8082e6a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 8082e62:	230c      	movs	r3, #12
 8082e64:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8082e66:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8082e68:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8082e6a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8082e6e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082e70:	bf89      	itett	hi
 8082e72:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8082e74:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082e76:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8082e78:	2320      	movhi	r3, #32
 8082e7a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8082e7c:	2001      	movs	r0, #1

fail:
  return false;
}
 8082e7e:	bd70      	pop	{r4, r5, r6, pc}

08082e80 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8082e80:	f002 bd22 	b.w	80858c8 <HAL_Pin_Map>

08082e84 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 8082e84:	f002 bd20 	b.w	80858c8 <HAL_Pin_Map>

08082e88 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8082e88:	f002 bd1e 	b.w	80858c8 <HAL_Pin_Map>

08082e8c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 8082e8c:	b570      	push	{r4, r5, r6, lr}
 8082e8e:	460e      	mov	r6, r1
 8082e90:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 8082e92:	f002 fdb9 	bl	8085a08 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 8082e96:	4c0c      	ldr	r4, [pc, #48]	; (8082ec8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8082e98:	6823      	ldr	r3, [r4, #0]
 8082e9a:	1ac0      	subs	r0, r0, r3
 8082e9c:	4b0b      	ldr	r3, [pc, #44]	; (8082ecc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 8082e9e:	4298      	cmp	r0, r3
 8082ea0:	d908      	bls.n	8082eb4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082ea2:	f002 fdb9 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082ea6:	4b0a      	ldr	r3, [pc, #40]	; (8082ed0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8082ea8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8082eaa:	f003 f829 	bl	8085f00 <spark_process>
 8082eae:	f002 fdab 	bl	8085a08 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 8082eb2:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8082eb4:	f002 fdb0 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 8082eb8:	b280      	uxth	r0, r0
 8082eba:	1b80      	subs	r0, r0, r6
}
 8082ebc:	42a8      	cmp	r0, r5
 8082ebe:	bfd4      	ite	le
 8082ec0:	2000      	movle	r0, #0
 8082ec2:	2001      	movgt	r0, #1
 8082ec4:	bd70      	pop	{r4, r5, r6, pc}
 8082ec6:	bf00      	nop
 8082ec8:	20000764 	.word	0x20000764
 8082ecc:	000186a0 	.word	0x000186a0
 8082ed0:	20000ecc 	.word	0x20000ecc

08082ed4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8082ed4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 8082ed6:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8082ed8:	4604      	mov	r4, r0
  if (!m_spiActive) {
 8082eda:	b94d      	cbnz	r5, 8082ef0 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 8082edc:	6840      	ldr	r0, [r0, #4]
 8082ede:	f000 fa7d 	bl	80833dc <_ZN14SdSpiAltDriver8activateEv>
 8082ee2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8082ee4:	4629      	mov	r1, r5
 8082ee6:	7d18      	ldrb	r0, [r3, #20]
 8082ee8:	f005 fce7 	bl	80888ba <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 8082eec:	2301      	movs	r3, #1
 8082eee:	7223      	strb	r3, [r4, #8]
 8082ef0:	bd38      	pop	{r3, r4, r5, pc}

08082ef2 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8082ef2:	b510      	push	{r4, lr}
  if (m_spiActive) {
 8082ef4:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8082ef6:	4604      	mov	r4, r0
  if (m_spiActive) {
 8082ef8:	b16b      	cbz	r3, 8082f16 <_ZN9SdSpiCard7spiStopEv+0x24>
 8082efa:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 8082efc:	2101      	movs	r1, #1
 8082efe:	7d18      	ldrb	r0, [r3, #20]
 8082f00:	f005 fcdb 	bl	80888ba <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082f04:	21ff      	movs	r1, #255	; 0xff
 8082f06:	6860      	ldr	r0, [r4, #4]
 8082f08:	f000 fa9a 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 8082f0c:	6860      	ldr	r0, [r4, #4]
 8082f0e:	f000 fa79 	bl	8083404 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 8082f12:	2300      	movs	r3, #0
 8082f14:	7223      	strb	r3, [r4, #8]
 8082f16:	bd10      	pop	{r4, pc}

08082f18 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8082f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082f1a:	4604      	mov	r4, r0
 8082f1c:	460d      	mov	r5, r1
 8082f1e:	4616      	mov	r6, r2
 8082f20:	f002 fd7a 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 8082f24:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082f26:	6860      	ldr	r0, [r4, #4]
 8082f28:	f000 fa6f 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 8082f2c:	28ff      	cmp	r0, #255	; 0xff
 8082f2e:	7260      	strb	r0, [r4, #9]
 8082f30:	d109      	bne.n	8082f46 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 8082f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082f36:	4639      	mov	r1, r7
 8082f38:	4620      	mov	r0, r4
 8082f3a:	f7ff ffa7 	bl	8082e8c <_ZN9SdSpiCard10isTimedOutEtt>
 8082f3e:	2800      	cmp	r0, #0
 8082f40:	d0f1      	beq.n	8082f26 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082f42:	2355      	movs	r3, #85	; 0x55
 8082f44:	e00b      	b.n	8082f5e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 8082f46:	28fe      	cmp	r0, #254	; 0xfe
 8082f48:	d001      	beq.n	8082f4e <_ZN9SdSpiCard8readDataEPhj+0x36>
 8082f4a:	2350      	movs	r3, #80	; 0x50
 8082f4c:	e007      	b.n	8082f5e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 8082f4e:	4632      	mov	r2, r6
 8082f50:	4629      	mov	r1, r5
 8082f52:	6860      	ldr	r0, [r4, #4]
 8082f54:	f000 fa5e 	bl	8083414 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8082f58:	7260      	strb	r0, [r4, #9]
 8082f5a:	b130      	cbz	r0, 8082f6a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082f5c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 8082f5e:	4620      	mov	r0, r4
 8082f60:	7023      	strb	r3, [r4, #0]
 8082f62:	f7ff ffc6 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082f66:	2000      	movs	r0, #0
}
 8082f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082f6a:	6860      	ldr	r0, [r4, #4]
 8082f6c:	f000 fa4d 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 8082f70:	6860      	ldr	r0, [r4, #4]
 8082f72:	f000 fa4a 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 8082f76:	2001      	movs	r0, #1
 8082f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082f7a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 8082f7a:	b570      	push	{r4, r5, r6, lr}
 8082f7c:	4604      	mov	r4, r0
 8082f7e:	460e      	mov	r6, r1
 8082f80:	f002 fd4a 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
 8082f84:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 8082f86:	4632      	mov	r2, r6
 8082f88:	4629      	mov	r1, r5
 8082f8a:	4620      	mov	r0, r4
 8082f8c:	f7ff ff7e 	bl	8082e8c <_ZN9SdSpiCard10isTimedOutEtt>
 8082f90:	b930      	cbnz	r0, 8082fa0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 8082f92:	6860      	ldr	r0, [r4, #4]
 8082f94:	f000 fa39 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 8082f98:	28ff      	cmp	r0, #255	; 0xff
 8082f9a:	d1f4      	bne.n	8082f86 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 8082f9c:	2001      	movs	r0, #1
 8082f9e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 8082fa0:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 8082fa2:	bd70      	pop	{r4, r5, r6, pc}

08082fa4 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 8082fa6:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082fa8:	4604      	mov	r4, r0
 8082faa:	460d      	mov	r5, r1
 8082fac:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 8082fae:	b90b      	cbnz	r3, 8082fb4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 8082fb0:	f7ff ff90 	bl	8082ed4 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 8082fb4:	b125      	cbz	r5, 8082fc0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 8082fb6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8082fba:	4620      	mov	r0, r4
 8082fbc:	f7ff ffdd 	bl	8082f7a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082fc0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8082fc4:	6860      	ldr	r0, [r4, #4]
 8082fc6:	f000 fa3b 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
 8082fca:	f10d 0607 	add.w	r6, sp, #7
 8082fce:	f10d 0703 	add.w	r7, sp, #3
 8082fd2:	f816 1901 	ldrb.w	r1, [r6], #-1
 8082fd6:	6860      	ldr	r0, [r4, #4]
 8082fd8:	f000 fa32 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 8082fdc:	42be      	cmp	r6, r7
 8082fde:	d1f8      	bne.n	8082fd2 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8082fe0:	2d00      	cmp	r5, #0
 8082fe2:	bf0c      	ite	eq
 8082fe4:	2195      	moveq	r1, #149	; 0x95
 8082fe6:	2187      	movne	r1, #135	; 0x87
 8082fe8:	6860      	ldr	r0, [r4, #4]
 8082fea:	f000 fa29 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082fee:	6860      	ldr	r0, [r4, #4]
 8082ff0:	f000 fa0b 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 8082ff4:	250b      	movs	r5, #11
 8082ff6:	6860      	ldr	r0, [r4, #4]
 8082ff8:	f000 fa07 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 8082ffc:	0603      	lsls	r3, r0, #24
 8082ffe:	7260      	strb	r0, [r4, #9]
 8083000:	d503      	bpl.n	808300a <_ZN9SdSpiCard11cardCommandEhm+0x66>
 8083002:	3d01      	subs	r5, #1
 8083004:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8083008:	d1f5      	bne.n	8082ff6 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 808300a:	b003      	add	sp, #12
 808300c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808300e <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 808300e:	b570      	push	{r4, r5, r6, lr}
 8083010:	4604      	mov	r4, r0
 8083012:	460d      	mov	r5, r1
 8083014:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 8083016:	2137      	movs	r1, #55	; 0x37
 8083018:	2200      	movs	r2, #0
 808301a:	f7ff ffc3 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808301e:	4632      	mov	r2, r6
 8083020:	4629      	mov	r1, r5
 8083022:	4620      	mov	r0, r4
  }
 8083024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 8083028:	f7ff bfbc 	b.w	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>

0808302c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 808302c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 8083030:	2500      	movs	r5, #0
 8083032:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 8083034:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 8083036:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 8083038:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 808303a:	4604      	mov	r4, r0
 808303c:	4690      	mov	r8, r2
 808303e:	461e      	mov	r6, r3
 8083040:	f002 fcea 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 8083044:	4641      	mov	r1, r8
 8083046:	4607      	mov	r7, r0
 8083048:	6860      	ldr	r0, [r4, #4]
 808304a:	f000 f9cb 	bl	80833e4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 808304e:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8083050:	4a4f      	ldr	r2, [pc, #316]	; (8083190 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 8083052:	f04f 0801 	mov.w	r8, #1
 8083056:	721d      	strb	r5, [r3, #8]
 8083058:	60da      	str	r2, [r3, #12]
 808305a:	745d      	strb	r5, [r3, #17]
 808305c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 8083060:	4620      	mov	r0, r4
 8083062:	f7ff ff37 	bl	8082ed4 <_ZN9SdSpiCard8spiStartEv>
 8083066:	6863      	ldr	r3, [r4, #4]
 8083068:	4641      	mov	r1, r8
 808306a:	7d18      	ldrb	r0, [r3, #20]
 808306c:	f005 fc25 	bl	80888ba <digitalWrite>
 8083070:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8083072:	21ff      	movs	r1, #255	; 0xff
 8083074:	6860      	ldr	r0, [r4, #4]
 8083076:	3d01      	subs	r5, #1
 8083078:	f000 f9e2 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 808307c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8083080:	d1f7      	bne.n	8083072 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 8083082:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8083084:	4629      	mov	r1, r5
 8083086:	7d18      	ldrb	r0, [r3, #20]
 8083088:	f005 fc17 	bl	80888ba <digitalWrite>
 808308c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 808308e:	2200      	movs	r2, #0
 8083090:	4611      	mov	r1, r2
 8083092:	4620      	mov	r0, r4
 8083094:	f7ff ff86 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 8083098:	2801      	cmp	r0, #1
 808309a:	4680      	mov	r8, r0
 808309c:	d012      	beq.n	80830c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 808309e:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80830a0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80830a4:	d101      	bne.n	80830aa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80830a6:	2320      	movs	r3, #32
 80830a8:	e057      	b.n	808315a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80830aa:	21fd      	movs	r1, #253	; 0xfd
 80830ac:	6860      	ldr	r0, [r4, #4]
 80830ae:	f000 f9c7 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
 80830b2:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80830b6:	6860      	ldr	r0, [r4, #4]
 80830b8:	f000 f9a7 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80830bc:	f1b8 0801 	subs.w	r8, r8, #1
 80830c0:	d1f9      	bne.n	80830b6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80830c2:	e7e4      	b.n	808308e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80830c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80830c8:	2108      	movs	r1, #8
 80830ca:	4620      	mov	r0, r4
 80830cc:	f7ff ff6a 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 80830d0:	2805      	cmp	r0, #5
 80830d2:	d102      	bne.n	80830da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80830d4:	f884 800a 	strb.w	r8, [r4, #10]
 80830d8:	e00f      	b.n	80830fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 80830da:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80830dc:	6860      	ldr	r0, [r4, #4]
 80830de:	f000 f994 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 80830e2:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80830e4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80830e8:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80830ea:	d1f7      	bne.n	80830dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80830ec:	28aa      	cmp	r0, #170	; 0xaa
 80830ee:	d102      	bne.n	80830f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80830f0:	2302      	movs	r3, #2
 80830f2:	72a3      	strb	r3, [r4, #10]
 80830f4:	e001      	b.n	80830fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80830f6:	2325      	movs	r3, #37	; 0x25
 80830f8:	e02f      	b.n	808315a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80830fa:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80830fc:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80830fe:	2b02      	cmp	r3, #2
 8083100:	bf0c      	ite	eq
 8083102:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8083106:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8083108:	462a      	mov	r2, r5
 808310a:	2129      	movs	r1, #41	; 0x29
 808310c:	4620      	mov	r0, r4
 808310e:	f7ff ff7e 	bl	808300e <_ZN9SdSpiCard8cardAcmdEhm>
 8083112:	4602      	mov	r2, r0
 8083114:	b148      	cbz	r0, 808312a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8083116:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 808311a:	4639      	mov	r1, r7
 808311c:	4620      	mov	r0, r4
 808311e:	f7ff feb5 	bl	8082e8c <_ZN9SdSpiCard10isTimedOutEtt>
 8083122:	2800      	cmp	r0, #0
 8083124:	d0f0      	beq.n	8083108 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8083126:	2343      	movs	r3, #67	; 0x43
 8083128:	e017      	b.n	808315a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 808312a:	7aa3      	ldrb	r3, [r4, #10]
 808312c:	2b02      	cmp	r3, #2
 808312e:	d00e      	beq.n	808314e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 8083130:	4620      	mov	r0, r4
 8083132:	f7ff fede 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 8083136:	6863      	ldr	r3, [r4, #4]
 8083138:	68b0      	ldr	r0, [r6, #8]
 808313a:	7934      	ldrb	r4, [r6, #4]
 808313c:	7b31      	ldrb	r1, [r6, #12]
 808313e:	7b72      	ldrb	r2, [r6, #13]
 8083140:	60d8      	str	r0, [r3, #12]
 8083142:	721c      	strb	r4, [r3, #8]
 8083144:	7419      	strb	r1, [r3, #16]
 8083146:	745a      	strb	r2, [r3, #17]
  return true;
 8083148:	2001      	movs	r0, #1
 808314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 808314e:	213a      	movs	r1, #58	; 0x3a
 8083150:	4620      	mov	r0, r4
 8083152:	f7ff ff27 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 8083156:	b138      	cbz	r0, 8083168 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8083158:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 808315a:	4620      	mov	r0, r4
 808315c:	7023      	strb	r3, [r4, #0]
 808315e:	f7ff fec8 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083162:	2000      	movs	r0, #0
}
 8083164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8083168:	6860      	ldr	r0, [r4, #4]
 808316a:	f000 f94e 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 808316e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8083172:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8083174:	bf04      	itt	eq
 8083176:	2303      	moveq	r3, #3
 8083178:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808317a:	6860      	ldr	r0, [r4, #4]
 808317c:	f000 f945 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 8083180:	6860      	ldr	r0, [r4, #4]
 8083182:	f000 f942 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 8083186:	6860      	ldr	r0, [r4, #4]
 8083188:	f000 f93f 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 808318c:	e7d0      	b.n	8083130 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 808318e:	bf00      	nop
 8083190:	0003d090 	.word	0x0003d090

08083194 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8083194:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8083196:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8083198:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808319a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808319c:	bf18      	it	ne
 808319e:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80831a0:	460a      	mov	r2, r1
 80831a2:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80831a4:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80831a6:	f7ff fefd 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 80831aa:	b110      	cbz	r0, 80831b2 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80831ac:	2330      	movs	r3, #48	; 0x30
 80831ae:	7023      	strb	r3, [r4, #0]
 80831b0:	e00b      	b.n	80831ca <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80831b2:	4629      	mov	r1, r5
 80831b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80831b8:	4620      	mov	r0, r4
 80831ba:	f7ff fead 	bl	8082f18 <_ZN9SdSpiCard8readDataEPhj>
 80831be:	4605      	mov	r5, r0
 80831c0:	b118      	cbz	r0, 80831ca <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 80831c2:	4620      	mov	r0, r4
 80831c4:	f7ff fe95 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80831c8:	e003      	b.n	80831d2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 80831ca:	4620      	mov	r0, r4
 80831cc:	f7ff fe91 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80831d0:	2500      	movs	r5, #0
}
 80831d2:	4628      	mov	r0, r5
 80831d4:	bd38      	pop	{r3, r4, r5, pc}

080831d6 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80831d6:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80831d8:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80831da:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80831dc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80831de:	bf18      	it	ne
 80831e0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80831e2:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80831e4:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80831e6:	f7ff fedd 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 80831ea:	b130      	cbz	r0, 80831fa <_ZN9SdSpiCard9readStartEm+0x24>
 80831ec:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 80831ee:	4620      	mov	r0, r4
 80831f0:	7023      	strb	r3, [r4, #0]
 80831f2:	f7ff fe7e 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80831f6:	2000      	movs	r0, #0
 80831f8:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 80831fa:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80831fc:	bd10      	pop	{r4, pc}

080831fe <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80831fe:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8083200:	2200      	movs	r2, #0
 8083202:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8083204:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8083206:	f7ff fecd 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 808320a:	b130      	cbz	r0, 808321a <_ZN9SdSpiCard8readStopEv+0x1c>
 808320c:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 808320e:	4620      	mov	r0, r4
 8083210:	7023      	strb	r3, [r4, #0]
 8083212:	f7ff fe6e 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083216:	2000      	movs	r0, #0
 8083218:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 808321a:	4620      	mov	r0, r4
 808321c:	f7ff fe69 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return true;
 8083220:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8083222:	bd10      	pop	{r4, pc}

08083224 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8083224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083226:	4605      	mov	r5, r0
 8083228:	4616      	mov	r6, r2
 808322a:	461f      	mov	r7, r3
  if (!readStart(block)) {
 808322c:	f7ff ffd3 	bl	80831d6 <_ZN9SdSpiCard9readStartEm>
 8083230:	b198      	cbz	r0, 808325a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8083232:	2400      	movs	r4, #0
 8083234:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8083236:	429f      	cmp	r7, r3
 8083238:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 808323c:	d908      	bls.n	8083250 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 808323e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8083242:	4628      	mov	r0, r5
 8083244:	f7ff fe68 	bl	8082f18 <_ZN9SdSpiCard8readDataEPhj>
 8083248:	3401      	adds	r4, #1
 808324a:	2800      	cmp	r0, #0
 808324c:	d1f2      	bne.n	8083234 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 808324e:	e004      	b.n	808325a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8083250:	4628      	mov	r0, r5
}
 8083252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8083256:	f7ff bfd2 	b.w	80831fe <_ZN9SdSpiCard8readStopEv>
}
 808325a:	2000      	movs	r0, #0
 808325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808325e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 808325e:	b538      	push	{r3, r4, r5, lr}
 8083260:	4604      	mov	r4, r0
 8083262:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8083264:	6840      	ldr	r0, [r0, #4]
 8083266:	f000 f8eb 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 808326a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808326e:	4629      	mov	r1, r5
 8083270:	6860      	ldr	r0, [r4, #4]
 8083272:	f000 f8e9 	bl	8083448 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8083276:	21ff      	movs	r1, #255	; 0xff
 8083278:	6860      	ldr	r0, [r4, #4]
 808327a:	f000 f8e1 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
 808327e:	21ff      	movs	r1, #255	; 0xff
 8083280:	6860      	ldr	r0, [r4, #4]
 8083282:	f000 f8dd 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8083286:	6860      	ldr	r0, [r4, #4]
 8083288:	f000 f8bf 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 808328c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 808328e:	f000 001f 	and.w	r0, r0, #31
 8083292:	2805      	cmp	r0, #5
 8083294:	d006      	beq.n	80832a4 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8083296:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 8083298:	4620      	mov	r0, r4
 808329a:	7023      	strb	r3, [r4, #0]
 808329c:	f7ff fe29 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80832a0:	2000      	movs	r0, #0
 80832a2:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80832a4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80832a6:	bd38      	pop	{r3, r4, r5, pc}

080832a8 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80832a8:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80832aa:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80832ac:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80832ae:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80832b0:	bf18      	it	ne
 80832b2:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80832b4:	460a      	mov	r2, r1
 80832b6:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80832b8:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80832ba:	f7ff fe73 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 80832be:	4606      	mov	r6, r0
 80832c0:	b108      	cbz	r0, 80832c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80832c2:	2332      	movs	r3, #50	; 0x32
 80832c4:	e01d      	b.n	8083302 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80832c6:	462a      	mov	r2, r5
 80832c8:	21fe      	movs	r1, #254	; 0xfe
 80832ca:	4620      	mov	r0, r4
 80832cc:	f7ff ffc7 	bl	808325e <_ZN9SdSpiCard9writeDataEhPKh>
 80832d0:	b1c0      	cbz	r0, 8083304 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80832d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80832d6:	4620      	mov	r0, r4
 80832d8:	f7ff fe4f 	bl	8082f7a <_ZN9SdSpiCard11waitNotBusyEt>
 80832dc:	4605      	mov	r5, r0
 80832de:	b908      	cbnz	r0, 80832e4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 80832e0:	235a      	movs	r3, #90	; 0x5a
 80832e2:	e00e      	b.n	8083302 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80832e4:	4632      	mov	r2, r6
 80832e6:	210d      	movs	r1, #13
 80832e8:	4620      	mov	r0, r4
 80832ea:	f7ff fe5b 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 80832ee:	b938      	cbnz	r0, 8083300 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80832f0:	6860      	ldr	r0, [r4, #4]
 80832f2:	f000 f88a 	bl	808340a <_ZN14SdSpiAltDriver7receiveEv>
 80832f6:	b918      	cbnz	r0, 8083300 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 80832f8:	4620      	mov	r0, r4
 80832fa:	f7ff fdfa 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80832fe:	e005      	b.n	808330c <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8083300:	2329      	movs	r3, #41	; 0x29
 8083302:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 8083304:	4620      	mov	r0, r4
 8083306:	f7ff fdf4 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 808330a:	2500      	movs	r5, #0
}
 808330c:	4628      	mov	r0, r5
 808330e:	bd70      	pop	{r4, r5, r6, pc}

08083310 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8083310:	b538      	push	{r3, r4, r5, lr}
 8083312:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083314:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8083318:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808331a:	f7ff fe2e 	bl	8082f7a <_ZN9SdSpiCard11waitNotBusyEt>
 808331e:	b910      	cbnz	r0, 8083326 <_ZN9SdSpiCard9writeDataEPKh+0x16>
 8083320:	235b      	movs	r3, #91	; 0x5b
 8083322:	7023      	strb	r3, [r4, #0]
 8083324:	e005      	b.n	8083332 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8083326:	462a      	mov	r2, r5
 8083328:	21fc      	movs	r1, #252	; 0xfc
 808332a:	4620      	mov	r0, r4
 808332c:	f7ff ff97 	bl	808325e <_ZN9SdSpiCard9writeDataEhPKh>
 8083330:	b918      	cbnz	r0, 808333a <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 8083332:	4620      	mov	r0, r4
 8083334:	f7ff fddd 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083338:	2000      	movs	r0, #0
}
 808333a:	bd38      	pop	{r3, r4, r5, pc}

0808333c <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 808333c:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808333e:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8083340:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8083342:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8083344:	bf18      	it	ne
 8083346:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8083348:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 808334a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 808334c:	f7ff fe2a 	bl	8082fa4 <_ZN9SdSpiCard11cardCommandEhm>
 8083350:	b130      	cbz	r0, 8083360 <_ZN9SdSpiCard10writeStartEm+0x24>
 8083352:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 8083354:	4620      	mov	r0, r4
 8083356:	7023      	strb	r3, [r4, #0]
 8083358:	f7ff fdcb 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 808335c:	2000      	movs	r0, #0
 808335e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8083360:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8083362:	bd10      	pop	{r4, pc}

08083364 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8083364:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083366:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 808336a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808336c:	f7ff fe05 	bl	8082f7a <_ZN9SdSpiCard11waitNotBusyEt>
 8083370:	4605      	mov	r5, r0
 8083372:	b120      	cbz	r0, 808337e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8083374:	21fd      	movs	r1, #253	; 0xfd
 8083376:	6860      	ldr	r0, [r4, #4]
 8083378:	f000 f862 	bl	8083440 <_ZN14SdSpiAltDriver4sendEh>
 808337c:	e001      	b.n	8083382 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808337e:	2356      	movs	r3, #86	; 0x56
 8083380:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 8083382:	4620      	mov	r0, r4
 8083384:	f7ff fdb5 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8083388:	4628      	mov	r0, r5
 808338a:	bd38      	pop	{r3, r4, r5, pc}

0808338c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808338e:	4605      	mov	r5, r0
 8083390:	4616      	mov	r6, r2
 8083392:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 8083394:	f7ff ffd2 	bl	808333c <_ZN9SdSpiCard10writeStartEm>
 8083398:	b170      	cbz	r0, 80833b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 808339a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 808339c:	42bc      	cmp	r4, r7
 808339e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80833a2:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80833a4:	d004      	beq.n	80833b0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80833a6:	f7ff ffb3 	bl	8083310 <_ZN9SdSpiCard9writeDataEPKh>
 80833aa:	b128      	cbz	r0, 80833b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80833ac:	3401      	adds	r4, #1
 80833ae:	e7f5      	b.n	808339c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 80833b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80833b4:	f7ff bfd6 	b.w	8083364 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80833b8:	4628      	mov	r0, r5
 80833ba:	f7ff fd9a 	bl	8082ef2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80833be:	2000      	movs	r0, #0
 80833c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080833c2 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80833c2:	f002 ba81 	b.w	80858c8 <HAL_Pin_Map>

080833c6 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80833c6:	f002 ba7f 	b.w	80858c8 <HAL_Pin_Map>

080833ca <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80833ca:	f002 ba7d 	b.w	80858c8 <HAL_Pin_Map>
	...

080833d0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80833d0:	4b01      	ldr	r3, [pc, #4]	; (80833d8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80833d2:	2201      	movs	r2, #1
 80833d4:	701a      	strb	r2, [r3, #0]
 80833d6:	4770      	bx	lr
 80833d8:	20000768 	.word	0x20000768

080833dc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80833dc:	1d01      	adds	r1, r0, #4
 80833de:	6800      	ldr	r0, [r0, #0]
 80833e0:	f002 bfba 	b.w	8086358 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

080833e4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80833e4:	b510      	push	{r4, lr}
 80833e6:	4604      	mov	r4, r0
  m_csPin = csPin;
 80833e8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80833ea:	6800      	ldr	r0, [r0, #0]
 80833ec:	f002 ff89 	bl	8086302 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80833f0:	7d20      	ldrb	r0, [r4, #20]
 80833f2:	2101      	movs	r1, #1
 80833f4:	f005 fa50 	bl	8088898 <pinMode>
  digitalWrite(m_csPin, HIGH);
 80833f8:	7d20      	ldrb	r0, [r4, #20]
 80833fa:	2101      	movs	r1, #1
}
 80833fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 8083400:	f005 ba5b 	b.w	80888ba <digitalWrite>

08083404 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8083404:	6800      	ldr	r0, [r0, #0]
 8083406:	f002 bf8c 	b.w	8086322 <_ZN8SPIClass14endTransactionEv>

0808340a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 808340a:	21ff      	movs	r1, #255	; 0xff
 808340c:	6800      	ldr	r0, [r0, #0]
 808340e:	f003 b812 	b.w	8086436 <_ZN8SPIClass8transferEh>
	...

08083414 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8083414:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8083416:	4b08      	ldr	r3, [pc, #32]	; (8083438 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083418:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808341a:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808341c:	4c07      	ldr	r4, [pc, #28]	; (808343c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808341e:	4613      	mov	r3, r2
 8083420:	6800      	ldr	r0, [r0, #0]
 8083422:	460a      	mov	r2, r1
 8083424:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083426:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8083428:	f003 f80b 	bl	8086442 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808342c:	7823      	ldrb	r3, [r4, #0]
 808342e:	2b00      	cmp	r3, #0
 8083430:	d0fc      	beq.n	808342c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 8083432:	2000      	movs	r0, #0
 8083434:	b003      	add	sp, #12
 8083436:	bd30      	pop	{r4, r5, pc}
 8083438:	080833d1 	.word	0x080833d1
 808343c:	20000768 	.word	0x20000768

08083440 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 8083440:	6800      	ldr	r0, [r0, #0]
 8083442:	f002 bff8 	b.w	8086436 <_ZN8SPIClass8transferEh>
	...

08083448 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8083448:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808344a:	4b07      	ldr	r3, [pc, #28]	; (8083468 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808344c:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808344e:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083450:	4c06      	ldr	r4, [pc, #24]	; (808346c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8083452:	4613      	mov	r3, r2
 8083454:	6800      	ldr	r0, [r0, #0]
 8083456:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083458:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808345a:	f002 fff2 	bl	8086442 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 808345e:	7823      	ldrb	r3, [r4, #0]
 8083460:	2b00      	cmp	r3, #0
 8083462:	d0fc      	beq.n	808345e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8083464:	b003      	add	sp, #12
 8083466:	bd30      	pop	{r4, r5, pc}
 8083468:	080833d1 	.word	0x080833d1
 808346c:	20000768 	.word	0x20000768

08083470 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 8083470:	f002 ba2a 	b.w	80858c8 <HAL_Pin_Map>

08083474 <_ZN18ParticleSoftSerial10rxTimerISREv>:
    detachInterrupt(_rxPin);
  }
}

void ParticleSoftSerial::rxTimerISR(void)
{
 8083474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  static uint8_t parityErr = (_parity & 0x01);
 8083476:	4c3c      	ldr	r4, [pc, #240]	; (8083568 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf4>)
 8083478:	6823      	ldr	r3, [r4, #0]
 808347a:	07d9      	lsls	r1, r3, #31
 808347c:	d40c      	bmi.n	8083498 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 808347e:	4620      	mov	r0, r4
 8083480:	f7fc fe20 	bl	80800c4 <__cxa_guard_acquire>
 8083484:	b140      	cbz	r0, 8083498 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 8083486:	4b39      	ldr	r3, [pc, #228]	; (808356c <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8083488:	4a39      	ldr	r2, [pc, #228]	; (8083570 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 808348a:	781b      	ldrb	r3, [r3, #0]
 808348c:	4620      	mov	r0, r4
 808348e:	f003 0301 	and.w	r3, r3, #1
 8083492:	7013      	strb	r3, [r2, #0]
 8083494:	f7fc fe1b 	bl	80800ce <__cxa_guard_release>
  uint8_t bit;

  if (_rxBitPos <= PSS_STARTBIT) return;
 8083498:	4c36      	ldr	r4, [pc, #216]	; (8083574 <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 808349a:	7823      	ldrb	r3, [r4, #0]
 808349c:	061a      	lsls	r2, r3, #24
 808349e:	d461      	bmi.n	8083564 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
  _PSS_DEBUG_HIGH(_debugPin);
  
  if (_rxBitPos == PSS_DATA) // after start bit go for normal bit length
 80834a0:	7825      	ldrb	r5, [r4, #0]
 80834a2:	4e32      	ldr	r6, [pc, #200]	; (808356c <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 80834a4:	b26d      	sxtb	r5, r5
 80834a6:	b975      	cbnz	r5, 80834c6 <_ZN18ParticleSoftSerial10rxTimerISREv+0x52>
  {
    rxTimer.resetPeriod_SIT(_usBitLength, uSec);
 80834a8:	4b33      	ldr	r3, [pc, #204]	; (8083578 <_ZN18ParticleSoftSerial10rxTimerISREv+0x104>)
 80834aa:	462a      	mov	r2, r5
 80834ac:	6819      	ldr	r1, [r3, #0]
 80834ae:	4833      	ldr	r0, [pc, #204]	; (808357c <_ZN18ParticleSoftSerial10rxTimerISREv+0x108>)
 80834b0:	f002 f9dc 	bl	808586c <_ZN13IntervalTimer15resetPeriod_SITEmb>

    parityErr = (_parity & 0x01);
 80834b4:	7833      	ldrb	r3, [r6, #0]
 80834b6:	4a2e      	ldr	r2, [pc, #184]	; (8083570 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 80834b8:	f003 0301 	and.w	r3, r3, #1
 80834bc:	7013      	strb	r3, [r2, #0]
    _rxBuffer[_rxBufferHead] = 0;
 80834be:	4b30      	ldr	r3, [pc, #192]	; (8083580 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 80834c0:	4a30      	ldr	r2, [pc, #192]	; (8083584 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 80834c2:	781b      	ldrb	r3, [r3, #0]
 80834c4:	54d5      	strb	r5, [r2, r3]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80834c6:	4b30      	ldr	r3, [pc, #192]	; (8083588 <_ZN18ParticleSoftSerial10rxTimerISREv+0x114>)
 80834c8:	4a30      	ldr	r2, [pc, #192]	; (808358c <_ZN18ParticleSoftSerial10rxTimerISREv+0x118>)
 80834ca:	8818      	ldrh	r0, [r3, #0]
 80834cc:	231c      	movs	r3, #28
 80834ce:	4343      	muls	r3, r0
 80834d0:	6812      	ldr	r2, [r2, #0]
 80834d2:	18d1      	adds	r1, r2, r3
 80834d4:	58d3      	ldr	r3, [r2, r3]
 80834d6:	888a      	ldrh	r2, [r1, #4]
 80834d8:	691b      	ldr	r3, [r3, #16]
  bit = pinReadFast(_rxPin);
#ifdef _PSS_DEBUG
  b[_rxBitPos+1] = bit;
  usLast[_rxBitPos+1] = micros();
#endif
  if (_rxBitPos <= _dataBits)
 80834da:	492d      	ldr	r1, [pc, #180]	; (8083590 <_ZN18ParticleSoftSerial10rxTimerISREv+0x11c>)
 80834dc:	421a      	tst	r2, r3
 80834de:	7823      	ldrb	r3, [r4, #0]
 80834e0:	780d      	ldrb	r5, [r1, #0]
 80834e2:	b25b      	sxtb	r3, r3
 80834e4:	bf14      	ite	ne
 80834e6:	2201      	movne	r2, #1
 80834e8:	2200      	moveq	r2, #0
 80834ea:	42ab      	cmp	r3, r5
 80834ec:	dc0d      	bgt.n	808350a <_ZN18ParticleSoftSerial10rxTimerISREv+0x96>
  {
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
 80834ee:	4b21      	ldr	r3, [pc, #132]	; (8083574 <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 80834f0:	4923      	ldr	r1, [pc, #140]	; (8083580 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 80834f2:	781b      	ldrb	r3, [r3, #0]
 80834f4:	7809      	ldrb	r1, [r1, #0]
 80834f6:	4f23      	ldr	r7, [pc, #140]	; (8083584 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 80834f8:	b2c9      	uxtb	r1, r1
 80834fa:	f817 e001 	ldrb.w	lr, [r7, r1]
 80834fe:	b25b      	sxtb	r3, r3
 8083500:	fa02 f303 	lsl.w	r3, r2, r3
 8083504:	ea4e 0303 	orr.w	r3, lr, r3
 8083508:	547b      	strb	r3, [r7, r1]
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
 808350a:	7833      	ldrb	r3, [r6, #0]
 808350c:	06db      	lsls	r3, r3, #27
 808350e:	d503      	bpl.n	8083518 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
 8083510:	7823      	ldrb	r3, [r4, #0]
 8083512:	b25b      	sxtb	r3, r3
 8083514:	429d      	cmp	r5, r3
 8083516:	da20      	bge.n	808355a <_ZN18ParticleSoftSerial10rxTimerISREv+0xe6>
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
  }  
  
  if (++_rxBitPos >= _totalBits)
 8083518:	7823      	ldrb	r3, [r4, #0]
 808351a:	4a1e      	ldr	r2, [pc, #120]	; (8083594 <_ZN18ParticleSoftSerial10rxTimerISREv+0x120>)
 808351c:	3301      	adds	r3, #1
 808351e:	7812      	ldrb	r2, [r2, #0]
 8083520:	b25b      	sxtb	r3, r3
 8083522:	4293      	cmp	r3, r2
 8083524:	7023      	strb	r3, [r4, #0]
 8083526:	db1d      	blt.n	8083564 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
  {
    if (parityErr)
 8083528:	4b11      	ldr	r3, [pc, #68]	; (8083570 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 808352a:	4a15      	ldr	r2, [pc, #84]	; (8083580 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 808352c:	781b      	ldrb	r3, [r3, #0]
 808352e:	b123      	cbz	r3, 808353a <_ZN18ParticleSoftSerial10rxTimerISREv+0xc6>
    {
      _rxBuffer[_rxBufferHead] = 0xFF;
 8083530:	7813      	ldrb	r3, [r2, #0]
 8083532:	4a14      	ldr	r2, [pc, #80]	; (8083584 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8083534:	21ff      	movs	r1, #255	; 0xff
 8083536:	54d1      	strb	r1, [r2, r3]
 8083538:	e004      	b.n	8083544 <_ZN18ParticleSoftSerial10rxTimerISREv+0xd0>
    }
    else
    {
      _rxBufferHead = (_rxBufferHead + 1) % _PSS_BUFF_SIZE;
 808353a:	7813      	ldrb	r3, [r2, #0]
 808353c:	3301      	adds	r3, #1
 808353e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8083542:	7013      	strb	r3, [r2, #0]
    }
    _rxBitPos = PSS_INACTIVE;
 8083544:	23fe      	movs	r3, #254	; 0xfe
 8083546:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
 8083548:	2300      	movs	r3, #0
 808354a:	9300      	str	r3, [sp, #0]
 808354c:	2202      	movs	r2, #2
 808354e:	f04f 33ff 	mov.w	r3, #4294967295
 8083552:	4911      	ldr	r1, [pc, #68]	; (8083598 <_ZN18ParticleSoftSerial10rxTimerISREv+0x124>)
 8083554:	f004 fd28 	bl	8087fa8 <_Z15attachInterrupttPFvvE13InterruptModeah>
 8083558:	e004      	b.n	8083564 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
 808355a:	4b05      	ldr	r3, [pc, #20]	; (8083570 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 808355c:	7819      	ldrb	r1, [r3, #0]
 808355e:	404a      	eors	r2, r1
 8083560:	701a      	strb	r2, [r3, #0]
 8083562:	e7d9      	b.n	8083518 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
    _rxBitPos = PSS_INACTIVE;
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
  }
  _PSS_DEBUG_LOW(_debugPin);
}
 8083564:	b003      	add	sp, #12
 8083566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083568:	20000774 	.word	0x20000774
 808356c:	200007cd 	.word	0x200007cd
 8083570:	20000778 	.word	0x20000778
 8083574:	20000040 	.word	0x20000040
 8083578:	20000034 	.word	0x20000034
 808357c:	2000081c 	.word	0x2000081c
 8083580:	200007d8 	.word	0x200007d8
 8083584:	20000779 	.word	0x20000779
 8083588:	20000048 	.word	0x20000048
 808358c:	200007d4 	.word	0x200007d4
 8083590:	2000003f 	.word	0x2000003f
 8083594:	20000030 	.word	0x20000030
 8083598:	080835a9 	.word	0x080835a9

0808359c <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 808359c:	b510      	push	{r4, lr}
 808359e:	4604      	mov	r4, r0
 80835a0:	f002 f95a 	bl	8085858 <_ZN13IntervalTimer3endEv>
 80835a4:	4620      	mov	r0, r4
 80835a6:	bd10      	pop	{r4, pc}

080835a8 <_ZN18ParticleSoftSerial8rxPinISREv>:
  volatile uint32_t usLast[12];
  volatile uint8_t  b[12];
#endif

void ParticleSoftSerial::rxPinISR(void)
{ // start bit triggers read after 1.5 bits lengths (= middle of first data bit)
 80835a8:	b510      	push	{r4, lr}
  if (_rxBitPos <= PSS_STARTBIT)
 80835aa:	4c09      	ldr	r4, [pc, #36]	; (80835d0 <_ZN18ParticleSoftSerial8rxPinISREv+0x28>)
 80835ac:	7823      	ldrb	r3, [r4, #0]
 80835ae:	061b      	lsls	r3, r3, #24
 80835b0:	d50d      	bpl.n	80835ce <_ZN18ParticleSoftSerial8rxPinISREv+0x26>
#ifdef _PSS_DEBUG
    usLast[0] = micros();
    b[0] = HIGH;
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
 80835b2:	4b08      	ldr	r3, [pc, #32]	; (80835d4 <_ZN18ParticleSoftSerial8rxPinISREv+0x2c>)
 80835b4:	4808      	ldr	r0, [pc, #32]	; (80835d8 <_ZN18ParticleSoftSerial8rxPinISREv+0x30>)
 80835b6:	6819      	ldr	r1, [r3, #0]
 80835b8:	2200      	movs	r2, #0
 80835ba:	f002 f957 	bl	808586c <_ZN13IntervalTimer15resetPeriod_SITEmb>
    _rxBitPos = PSS_DATA;
 80835be:	2300      	movs	r3, #0
 80835c0:	7023      	strb	r3, [r4, #0]
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 80835c2:	4b06      	ldr	r3, [pc, #24]	; (80835dc <_ZN18ParticleSoftSerial8rxPinISREv+0x34>)
  }
}
 80835c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
    _rxBitPos = PSS_DATA;
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 80835c8:	8818      	ldrh	r0, [r3, #0]
 80835ca:	f004 bd15 	b.w	8087ff8 <_Z15detachInterruptt>
 80835ce:	bd10      	pop	{r4, pc}
 80835d0:	20000040 	.word	0x20000040
 80835d4:	20000038 	.word	0x20000038
 80835d8:	2000081c 	.word	0x2000081c
 80835dc:	20000048 	.word	0x20000048

080835e0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80835e0:	b40e      	push	{r1, r2, r3}
 80835e2:	b500      	push	{lr}
 80835e4:	b08c      	sub	sp, #48	; 0x30
 80835e6:	aa0d      	add	r2, sp, #52	; 0x34
 80835e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80835ec:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80835ee:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80835f2:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80835f4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80835f6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80835f8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80835fa:	aa04      	add	r2, sp, #16
 80835fc:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80835fe:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8083600:	f002 fbca 	bl	8085d98 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8083604:	b00c      	add	sp, #48	; 0x30
 8083606:	f85d eb04 	ldr.w	lr, [sp], #4
 808360a:	b003      	add	sp, #12
 808360c:	4770      	bx	lr
	...

08083610 <_ZN13IntervalTimerC1Ev>:
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8083610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8083612:	223b      	movs	r2, #59	; 0x3b
 8083614:	8042      	strh	r2, [r0, #2]
 8083616:	f247 522f 	movw	r2, #29999	; 0x752f
 808361a:	8082      	strh	r2, [r0, #4]
 808361c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083620:	80c2      	strh	r2, [r0, #6]
	status = TIMER_OFF;

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8083622:	4a25      	ldr	r2, [pc, #148]	; (80836b8 <_ZN13IntervalTimerC1Ev+0xa8>)
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8083624:	2300      	movs	r3, #0
 8083626:	7003      	strb	r3, [r0, #0]
	status = TIMER_OFF;
 8083628:	7203      	strb	r3, [r0, #8]

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 808362a:	7013      	strb	r3, [r2, #0]
 808362c:	7053      	strb	r3, [r2, #1]
 808362e:	7093      	strb	r3, [r2, #2]
 8083630:	70d3      	strb	r3, [r2, #3]
 8083632:	7113      	strb	r3, [r2, #4]
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8083634:	7803      	ldrb	r3, [r0, #0]
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8083636:	4604      	mov	r4, r0
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8083638:	2b00      	cmp	r3, #0
 808363a:	d13a      	bne.n	80836b2 <_ZN13IntervalTimerC1Ev+0xa2>
		sysIntSetupDone = true;
 808363c:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808363e:	4e1f      	ldr	r6, [pc, #124]	; (80836bc <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 8083640:	4d1f      	ldr	r5, [pc, #124]	; (80836c0 <_ZN13IntervalTimerC1Ev+0xb0>)
 8083642:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083644:	4b1f      	ldr	r3, [pc, #124]	; (80836c4 <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 8083646:	4669      	mov	r1, sp
 8083648:	2013      	movs	r0, #19
 808364a:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808364c:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808364e:	9502      	str	r5, [sp, #8]
 8083650:	f004 fcfc 	bl	808804c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083654:	4668      	mov	r0, sp
 8083656:	f7fc fde6 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808365a:	4b1b      	ldr	r3, [pc, #108]	; (80836c8 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 808365c:	4669      	mov	r1, sp
 808365e:	201a      	movs	r0, #26
 8083660:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083662:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083664:	9502      	str	r5, [sp, #8]
 8083666:	f004 fcf1 	bl	808804c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808366a:	4668      	mov	r0, sp
 808366c:	f7fc fddb 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083670:	4b16      	ldr	r3, [pc, #88]	; (80836cc <_ZN13IntervalTimerC1Ev+0xbc>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 8083672:	4669      	mov	r1, sp
 8083674:	2021      	movs	r0, #33	; 0x21
 8083676:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083678:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808367a:	9502      	str	r5, [sp, #8]
 808367c:	f004 fce6 	bl	808804c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083680:	4668      	mov	r0, sp
 8083682:	f7fc fdd0 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083686:	4b12      	ldr	r3, [pc, #72]	; (80836d0 <_ZN13IntervalTimerC1Ev+0xc0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 8083688:	4669      	mov	r1, sp
 808368a:	2024      	movs	r0, #36	; 0x24
 808368c:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808368e:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083690:	9502      	str	r5, [sp, #8]
 8083692:	f004 fcdb 	bl	808804c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083696:	4668      	mov	r0, sp
 8083698:	f7fc fdc5 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808369c:	4b0d      	ldr	r3, [pc, #52]	; (80836d4 <_ZN13IntervalTimerC1Ev+0xc4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 808369e:	4669      	mov	r1, sp
 80836a0:	2026      	movs	r0, #38	; 0x26
 80836a2:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80836a4:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80836a6:	9502      	str	r5, [sp, #8]
 80836a8:	f004 fcd0 	bl	808804c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80836ac:	4668      	mov	r0, sp
 80836ae:	f7fc fdba 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
	}
#endif

    }
 80836b2:	4620      	mov	r0, r4
 80836b4:	b004      	add	sp, #16
 80836b6:	bd70      	pop	{r4, r5, r6, pc}
 80836b8:	20000938 	.word	0x20000938
 80836bc:	08080107 	.word	0x08080107
 80836c0:	0808010b 	.word	0x0808010b
 80836c4:	08085571 	.word	0x08085571
 80836c8:	08085599 	.word	0x08085599
 80836cc:	080855c1 	.word	0x080855c1
 80836d0:	080855e9 	.word	0x080855e9
 80836d4:	08085611 	.word	0x08085611

080836d8 <_ZN18ParticleSoftSerial9prepareRXEv>:
  end();
  pss = NULL;
}

void ParticleSoftSerial::prepareRX(void)
{
 80836d8:	b513      	push	{r0, r1, r4, lr}
  pinMode(_rxPin, INPUT_PULLUP);
 80836da:	4c11      	ldr	r4, [pc, #68]	; (8083720 <_ZN18ParticleSoftSerial9prepareRXEv+0x48>)
 80836dc:	2102      	movs	r1, #2
 80836de:	8820      	ldrh	r0, [r4, #0]
 80836e0:	f005 f8da 	bl	8088898 <pinMode>

  _rxBitPos = PSS_INACTIVE;
 80836e4:	4b0f      	ldr	r3, [pc, #60]	; (8083724 <_ZN18ParticleSoftSerial9prepareRXEv+0x4c>)
 80836e6:	22fe      	movs	r2, #254	; 0xfe
 80836e8:	701a      	strb	r2, [r3, #0]
  rxTimer.begin(rxTimerISR, _usBitLength, uSec, _rxTimId);
 80836ea:	4b0f      	ldr	r3, [pc, #60]	; (8083728 <_ZN18ParticleSoftSerial9prepareRXEv+0x50>)
 80836ec:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 80836ee:	2a09      	cmp	r2, #9
 80836f0:	d90a      	bls.n	8083708 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 80836f2:	480e      	ldr	r0, [pc, #56]	; (808372c <_ZN18ParticleSoftSerial9prepareRXEv+0x54>)
 80836f4:	88c3      	ldrh	r3, [r0, #6]
 80836f6:	429a      	cmp	r2, r3
 80836f8:	d806      	bhi.n	8083708 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 80836fa:	4b0d      	ldr	r3, [pc, #52]	; (8083730 <_ZN18ParticleSoftSerial9prepareRXEv+0x58>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 80836fc:	490d      	ldr	r1, [pc, #52]	; (8083734 <_ZN18ParticleSoftSerial9prepareRXEv+0x5c>)
 80836fe:	781b      	ldrb	r3, [r3, #0]
 8083700:	9300      	str	r3, [sp, #0]
 8083702:	2300      	movs	r3, #0
 8083704:	f002 f872 	bl	80857ec <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage

  // prepare for FALLING edge of start bit 
  attachInterrupt(_rxPin, rxPinISR, FALLING);
 8083708:	2300      	movs	r3, #0
 808370a:	9300      	str	r3, [sp, #0]
 808370c:	8820      	ldrh	r0, [r4, #0]
 808370e:	f04f 33ff 	mov.w	r3, #4294967295
 8083712:	2202      	movs	r2, #2
 8083714:	4908      	ldr	r1, [pc, #32]	; (8083738 <_ZN18ParticleSoftSerial9prepareRXEv+0x60>)
 8083716:	f004 fc47 	bl	8087fa8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 808371a:	b002      	add	sp, #8
 808371c:	bd10      	pop	{r4, pc}
 808371e:	bf00      	nop
 8083720:	20000048 	.word	0x20000048
 8083724:	20000040 	.word	0x20000040
 8083728:	20000034 	.word	0x20000034
 808372c:	2000081c 	.word	0x2000081c
 8083730:	2000003d 	.word	0x2000003d
 8083734:	08083475 	.word	0x08083475
 8083738:	080835a9 	.word	0x080835a9

0808373c <_ZN18ParticleSoftSerial10txTimerISREv>:
  }
  _PSS_DEBUG_LOW(_debugPin);
}

void ParticleSoftSerial::txTimerISR(void)
{
 808373c:	b538      	push	{r3, r4, r5, lr}
  static uint8_t parity = (_parity & 0x01);
 808373e:	4c56      	ldr	r4, [pc, #344]	; (8083898 <_ZN18ParticleSoftSerial10txTimerISREv+0x15c>)
 8083740:	6823      	ldr	r3, [r4, #0]
 8083742:	07db      	lsls	r3, r3, #31
 8083744:	d40c      	bmi.n	8083760 <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 8083746:	4620      	mov	r0, r4
 8083748:	f7fc fcbc 	bl	80800c4 <__cxa_guard_acquire>
 808374c:	b140      	cbz	r0, 8083760 <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 808374e:	4b53      	ldr	r3, [pc, #332]	; (808389c <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8083750:	4a53      	ldr	r2, [pc, #332]	; (80838a0 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083752:	781b      	ldrb	r3, [r3, #0]
 8083754:	4620      	mov	r0, r4
 8083756:	f003 0301 	and.w	r3, r3, #1
 808375a:	7013      	strb	r3, [r2, #0]
 808375c:	f7fc fcb7 	bl	80800ce <__cxa_guard_release>

  if(_txBitPos < PSS_STARTBIT) return;
 8083760:	4c50      	ldr	r4, [pc, #320]	; (80838a4 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8083762:	7823      	ldrb	r3, [r4, #0]
 8083764:	b25b      	sxtb	r3, r3
 8083766:	3301      	adds	r3, #1
 8083768:	f2c0 8094 	blt.w	8083894 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>

  if(_txBitPos == PSS_STARTBIT)                                 // produce StartBit
 808376c:	7823      	ldrb	r3, [r4, #0]
 808376e:	4d4e      	ldr	r5, [pc, #312]	; (80838a8 <_ZN18ParticleSoftSerial10txTimerISREv+0x16c>)
 8083770:	2bff      	cmp	r3, #255	; 0xff
 8083772:	d115      	bne.n	80837a0 <_ZN18ParticleSoftSerial10txTimerISREv+0x64>
  {
    txTimer.resetPeriod_SIT(_usBitLength, uSec);
 8083774:	4b4d      	ldr	r3, [pc, #308]	; (80838ac <_ZN18ParticleSoftSerial10txTimerISREv+0x170>)
 8083776:	2200      	movs	r2, #0
 8083778:	6819      	ldr	r1, [r3, #0]
 808377a:	484d      	ldr	r0, [pc, #308]	; (80838b0 <_ZN18ParticleSoftSerial10txTimerISREv+0x174>)
 808377c:	f002 f876 	bl	808586c <_ZN13IntervalTimer15resetPeriod_SITEmb>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8083780:	4b4c      	ldr	r3, [pc, #304]	; (80838b4 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8083782:	881a      	ldrh	r2, [r3, #0]
 8083784:	231c      	movs	r3, #28
 8083786:	4353      	muls	r3, r2
 8083788:	4a4b      	ldr	r2, [pc, #300]	; (80838b8 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 808378a:	6812      	ldr	r2, [r2, #0]
 808378c:	18d1      	adds	r1, r2, r3
 808378e:	58d3      	ldr	r3, [r2, r3]
 8083790:	888a      	ldrh	r2, [r1, #4]
 8083792:	835a      	strh	r2, [r3, #26]
    pinResetFast(_txPin);
    parity = (_parity & 0x01);
 8083794:	4b41      	ldr	r3, [pc, #260]	; (808389c <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8083796:	4a42      	ldr	r2, [pc, #264]	; (80838a0 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083798:	781b      	ldrb	r3, [r3, #0]
 808379a:	f003 0301 	and.w	r3, r3, #1
 808379e:	e020      	b.n	80837e2 <_ZN18ParticleSoftSerial10txTimerISREv+0xa6>
  }
  else if(PSS_DATA <= _txBitPos && _txBitPos < _dataBits)       // send data bits
 80837a0:	7823      	ldrb	r3, [r4, #0]
 80837a2:	4a46      	ldr	r2, [pc, #280]	; (80838bc <_ZN18ParticleSoftSerial10txTimerISREv+0x180>)
 80837a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80837a8:	d13d      	bne.n	8083826 <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
 80837aa:	7823      	ldrb	r3, [r4, #0]
 80837ac:	7811      	ldrb	r1, [r2, #0]
 80837ae:	b25b      	sxtb	r3, r3
 80837b0:	428b      	cmp	r3, r1
 80837b2:	da38      	bge.n	8083826 <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
  {
    if ((_txBuffer[_txBufferTail] >> _txBitPos) & 0x01)
 80837b4:	7829      	ldrb	r1, [r5, #0]
 80837b6:	7823      	ldrb	r3, [r4, #0]
 80837b8:	b25a      	sxtb	r2, r3
 80837ba:	4b41      	ldr	r3, [pc, #260]	; (80838c0 <_ZN18ParticleSoftSerial10txTimerISREv+0x184>)
 80837bc:	5c5b      	ldrb	r3, [r3, r1]
 80837be:	4113      	asrs	r3, r2
 80837c0:	f013 0f01 	tst.w	r3, #1
 80837c4:	4a3c      	ldr	r2, [pc, #240]	; (80838b8 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 80837c6:	4b3b      	ldr	r3, [pc, #236]	; (80838b4 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 80837c8:	d00d      	beq.n	80837e6 <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80837ca:	8819      	ldrh	r1, [r3, #0]
 80837cc:	231c      	movs	r3, #28
 80837ce:	434b      	muls	r3, r1
 80837d0:	6812      	ldr	r2, [r2, #0]
 80837d2:	18d1      	adds	r1, r2, r3
 80837d4:	58d3      	ldr	r3, [r2, r3]
 80837d6:	888a      	ldrh	r2, [r1, #4]
 80837d8:	831a      	strh	r2, [r3, #24]
    {
      pinSetFast(_txPin);
      parity ^= 0x01;                                           // keep track of the parity
 80837da:	4a31      	ldr	r2, [pc, #196]	; (80838a0 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 80837dc:	7813      	ldrb	r3, [r2, #0]
 80837de:	f083 0301 	eor.w	r3, r3, #1
 80837e2:	7013      	strb	r3, [r2, #0]
 80837e4:	e007      	b.n	80837f6 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80837e6:	8819      	ldrh	r1, [r3, #0]
 80837e8:	231c      	movs	r3, #28
 80837ea:	434b      	muls	r3, r1
 80837ec:	6812      	ldr	r2, [r2, #0]
 80837ee:	18d1      	adds	r1, r2, r3
 80837f0:	58d3      	ldr	r3, [r2, r3]
 80837f2:	888a      	ldrh	r2, [r1, #4]
 80837f4:	835a      	strh	r2, [r3, #26]
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
    _txBitPos = PSS_INACTIVE;
  }
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
 80837f6:	4b33      	ldr	r3, [pc, #204]	; (80838c4 <_ZN18ParticleSoftSerial10txTimerISREv+0x188>)
 80837f8:	782a      	ldrb	r2, [r5, #0]
 80837fa:	781b      	ldrb	r3, [r3, #0]
 80837fc:	429a      	cmp	r2, r3
 80837fe:	d10d      	bne.n	808381c <_ZN18ParticleSoftSerial10txTimerISREv+0xe0>
  {
    _txBitPos = PSS_INACTIVE;
 8083800:	23fe      	movs	r3, #254	; 0xfe
 8083802:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 8083804:	4b30      	ldr	r3, [pc, #192]	; (80838c8 <_ZN18ParticleSoftSerial10txTimerISREv+0x18c>)
 8083806:	781b      	ldrb	r3, [r3, #0]
 8083808:	2b00      	cmp	r3, #0
 808380a:	d043      	beq.n	8083894 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
 808380c:	4b2f      	ldr	r3, [pc, #188]	; (80838cc <_ZN18ParticleSoftSerial10txTimerISREv+0x190>)
 808380e:	6818      	ldr	r0, [r3, #0]
 8083810:	2800      	cmp	r0, #0
 8083812:	d03f      	beq.n	8083894 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
  }
  else
  {
    _txBitPos++;
  }
}
 8083814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
  {
    _txBitPos = PSS_INACTIVE;
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 8083818:	f7ff bf5e 	b.w	80836d8 <_ZN18ParticleSoftSerial9prepareRXEv>
  }
  else
  {
    _txBitPos++;
 808381c:	7823      	ldrb	r3, [r4, #0]
 808381e:	3301      	adds	r3, #1
 8083820:	b25b      	sxtb	r3, r3
 8083822:	7023      	strb	r3, [r4, #0]
 8083824:	bd38      	pop	{r3, r4, r5, pc}
    else
    {
      pinResetFast(_txPin);
    }
  }
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
 8083826:	4b1d      	ldr	r3, [pc, #116]	; (808389c <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8083828:	781b      	ldrb	r3, [r3, #0]
 808382a:	b123      	cbz	r3, 8083836 <_ZN18ParticleSoftSerial10txTimerISREv+0xfa>
 808382c:	7823      	ldrb	r3, [r4, #0]
 808382e:	7811      	ldrb	r1, [r2, #0]
 8083830:	b25b      	sxtb	r3, r3
 8083832:	428b      	cmp	r3, r1
 8083834:	d011      	beq.n	808385a <_ZN18ParticleSoftSerial10txTimerISREv+0x11e>
    else
    {
      pinResetFast(_txPin);
    }
  }
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
 8083836:	7823      	ldrb	r3, [r4, #0]
 8083838:	7812      	ldrb	r2, [r2, #0]
 808383a:	b25b      	sxtb	r3, r3
 808383c:	429a      	cmp	r2, r3
 808383e:	4a24      	ldr	r2, [pc, #144]	; (80838d0 <_ZN18ParticleSoftSerial10txTimerISREv+0x194>)
 8083840:	dc1a      	bgt.n	8083878 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
 8083842:	4b18      	ldr	r3, [pc, #96]	; (80838a4 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8083844:	7811      	ldrb	r1, [r2, #0]
 8083846:	781b      	ldrb	r3, [r3, #0]
 8083848:	b25b      	sxtb	r3, r3
 808384a:	428b      	cmp	r3, r1
 808384c:	da14      	bge.n	8083878 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808384e:	4b19      	ldr	r3, [pc, #100]	; (80838b4 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8083850:	881a      	ldrh	r2, [r3, #0]
 8083852:	231c      	movs	r3, #28
 8083854:	4353      	muls	r3, r2
 8083856:	4a18      	ldr	r2, [pc, #96]	; (80838b8 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8083858:	e008      	b.n	808386c <_ZN18ParticleSoftSerial10txTimerISREv+0x130>
      pinResetFast(_txPin);
    }
  }
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
  {
    if (parity)
 808385a:	4b11      	ldr	r3, [pc, #68]	; (80838a0 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 808385c:	4a16      	ldr	r2, [pc, #88]	; (80838b8 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 808385e:	7819      	ldrb	r1, [r3, #0]
 8083860:	4b14      	ldr	r3, [pc, #80]	; (80838b4 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8083862:	2900      	cmp	r1, #0
 8083864:	d0bf      	beq.n	80837e6 <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
 8083866:	8819      	ldrh	r1, [r3, #0]
 8083868:	231c      	movs	r3, #28
 808386a:	434b      	muls	r3, r1
 808386c:	6812      	ldr	r2, [r2, #0]
 808386e:	18d1      	adds	r1, r2, r3
 8083870:	58d3      	ldr	r3, [r2, r3]
 8083872:	888a      	ldrh	r2, [r1, #4]
 8083874:	831a      	strh	r2, [r3, #24]
 8083876:	e7be      	b.n	80837f6 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  }
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
  {
      pinSetFast(_txPin);
  }
  else if(_txBitPos >= _totalBits)
 8083878:	7823      	ldrb	r3, [r4, #0]
 808387a:	7812      	ldrb	r2, [r2, #0]
 808387c:	b25b      	sxtb	r3, r3
 808387e:	4293      	cmp	r3, r2
 8083880:	dbb9      	blt.n	80837f6 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 8083882:	782b      	ldrb	r3, [r5, #0]
    _txBitPos = PSS_INACTIVE;
 8083884:	22fe      	movs	r2, #254	; 0xfe
  {
      pinSetFast(_txPin);
  }
  else if(_txBitPos >= _totalBits)
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 8083886:	3301      	adds	r3, #1
 8083888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808388c:	702b      	strb	r3, [r5, #0]
    _txBitPos = PSS_INACTIVE;
 808388e:	4b05      	ldr	r3, [pc, #20]	; (80838a4 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8083890:	701a      	strb	r2, [r3, #0]
 8083892:	e7b0      	b.n	80837f6 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
 8083894:	bd38      	pop	{r3, r4, r5, pc}
 8083896:	bf00      	nop
 8083898:	2000076c 	.word	0x2000076c
 808389c:	200007cd 	.word	0x200007cd
 80838a0:	20000770 	.word	0x20000770
 80838a4:	2000003c 	.word	0x2000003c
 80838a8:	200007cc 	.word	0x200007cc
 80838ac:	20000034 	.word	0x20000034
 80838b0:	200007bc 	.word	0x200007bc
 80838b4:	20000044 	.word	0x20000044
 80838b8:	200007d4 	.word	0x200007d4
 80838bc:	2000003f 	.word	0x2000003f
 80838c0:	200007d9 	.word	0x200007d9
 80838c4:	2000082c 	.word	0x2000082c
 80838c8:	200007b9 	.word	0x200007b9
 80838cc:	200007d0 	.word	0x200007d0
 80838d0:	20000030 	.word	0x20000030

080838d4 <_ZN18ParticleSoftSerial9prepareTXEv>:
  // prepare for FALLING edge of start bit 
  attachInterrupt(_rxPin, rxPinISR, FALLING);
}

void ParticleSoftSerial::prepareTX(void)
{
 80838d4:	b513      	push	{r0, r1, r4, lr}
  pinMode(_txPin, OUTPUT);
 80838d6:	4c11      	ldr	r4, [pc, #68]	; (808391c <_ZN18ParticleSoftSerial9prepareTXEv+0x48>)
 80838d8:	2101      	movs	r1, #1
 80838da:	8820      	ldrh	r0, [r4, #0]
 80838dc:	f004 ffdc 	bl	8088898 <pinMode>
 80838e0:	8822      	ldrh	r2, [r4, #0]
 80838e2:	231c      	movs	r3, #28
 80838e4:	4353      	muls	r3, r2
 80838e6:	4a0e      	ldr	r2, [pc, #56]	; (8083920 <_ZN18ParticleSoftSerial9prepareTXEv+0x4c>)
 80838e8:	6812      	ldr	r2, [r2, #0]
 80838ea:	18d1      	adds	r1, r2, r3
 80838ec:	58d3      	ldr	r3, [r2, r3]
 80838ee:	888a      	ldrh	r2, [r1, #4]
 80838f0:	831a      	strh	r2, [r3, #24]
  pinSetFast(_txPin);

  _txBitPos = PSS_INACTIVE;
 80838f2:	4b0c      	ldr	r3, [pc, #48]	; (8083924 <_ZN18ParticleSoftSerial9prepareTXEv+0x50>)
 80838f4:	22fe      	movs	r2, #254	; 0xfe
 80838f6:	701a      	strb	r2, [r3, #0]
  txTimer.begin(txTimerISR, _usBitLength, uSec, _txTimId);
 80838f8:	4b0b      	ldr	r3, [pc, #44]	; (8083928 <_ZN18ParticleSoftSerial9prepareTXEv+0x54>)
 80838fa:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 80838fc:	2a09      	cmp	r2, #9
 80838fe:	d90a      	bls.n	8083916 <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 8083900:	480a      	ldr	r0, [pc, #40]	; (808392c <_ZN18ParticleSoftSerial9prepareTXEv+0x58>)
 8083902:	88c3      	ldrh	r3, [r0, #6]
 8083904:	429a      	cmp	r2, r3
 8083906:	d806      	bhi.n	8083916 <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 8083908:	4b09      	ldr	r3, [pc, #36]	; (8083930 <_ZN18ParticleSoftSerial9prepareTXEv+0x5c>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 808390a:	490a      	ldr	r1, [pc, #40]	; (8083934 <_ZN18ParticleSoftSerial9prepareTXEv+0x60>)
 808390c:	781b      	ldrb	r3, [r3, #0]
 808390e:	9300      	str	r3, [sp, #0]
 8083910:	2300      	movs	r3, #0
 8083912:	f001 ff6b 	bl	80857ec <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  //txTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage
}
 8083916:	b002      	add	sp, #8
 8083918:	bd10      	pop	{r4, pc}
 808391a:	bf00      	nop
 808391c:	20000044 	.word	0x20000044
 8083920:	200007d4 	.word	0x200007d4
 8083924:	2000003c 	.word	0x2000003c
 8083928:	20000034 	.word	0x20000034
 808392c:	200007bc 	.word	0x200007bc
 8083930:	2000003e 	.word	0x2000003e
 8083934:	0808373d 	.word	0x0808373d

08083938 <_ZN18ParticleSoftSerial5beginEmm>:

void ParticleSoftSerial::begin(unsigned long baud, uint32_t config)
{
  _PSS_DEBUG_PIN(_debugPin);

  if (config & SERIAL_DATA_BITS_9)
 8083938:	f012 0f10 	tst.w	r2, #16
{
  begin(baud, SERIAL_8N1);
}

void ParticleSoftSerial::begin(unsigned long baud, uint32_t config)
{
 808393c:	b538      	push	{r3, r4, r5, lr}
 808393e:	4605      	mov	r5, r0
 8083940:	4b23      	ldr	r3, [pc, #140]	; (80839d0 <_ZN18ParticleSoftSerial5beginEmm+0x98>)
  _PSS_DEBUG_PIN(_debugPin);

  if (config & SERIAL_DATA_BITS_9)
 8083942:	d001      	beq.n	8083948 <_ZN18ParticleSoftSerial5beginEmm+0x10>
  {
    _dataBits = 9;
 8083944:	2009      	movs	r0, #9
 8083946:	e003      	b.n	8083950 <_ZN18ParticleSoftSerial5beginEmm+0x18>
  }
  else if (config & SERIAL_DATA_BITS_7)
 8083948:	0690      	lsls	r0, r2, #26
  {
    _dataBits = 7;
 808394a:	bf4c      	ite	mi
 808394c:	2007      	movmi	r0, #7
  }
  else
  {
    _dataBits = 8;
 808394e:	2008      	movpl	r0, #8
 8083950:	7018      	strb	r0, [r3, #0]
  }
  
  if (config & SERIAL_STOP_BITS_2)
  {
    _totalBits = _dataBits + 2;
 8083952:	781b      	ldrb	r3, [r3, #0]
  else
  {
    _dataBits = 8;
  }
  
  if (config & SERIAL_STOP_BITS_2)
 8083954:	f012 0f01 	tst.w	r2, #1
 8083958:	481e      	ldr	r0, [pc, #120]	; (80839d4 <_ZN18ParticleSoftSerial5beginEmm+0x9c>)
  {
    _totalBits = _dataBits + 2;
 808395a:	bf14      	ite	ne
 808395c:	3302      	addne	r3, #2
  }
  else
  {
    _totalBits = _dataBits + 1;
 808395e:	3301      	addeq	r3, #1
  }

  if (config & SERIAL_PARITY)
 8083960:	f012 040c 	ands.w	r4, r2, #12
  {
    _totalBits = _dataBits + 2;
  }
  else
  {
    _totalBits = _dataBits + 1;
 8083964:	7003      	strb	r3, [r0, #0]
 8083966:	4b1c      	ldr	r3, [pc, #112]	; (80839d8 <_ZN18ParticleSoftSerial5beginEmm+0xa0>)
  }

  if (config & SERIAL_PARITY)
 8083968:	d009      	beq.n	808397e <_ZN18ParticleSoftSerial5beginEmm+0x46>
  {
    _parity = (config & SERIAL_PARITY_ODD) ? 0x11 : 0x10;
 808396a:	f012 0f08 	tst.w	r2, #8
 808396e:	bf14      	ite	ne
 8083970:	2211      	movne	r2, #17
 8083972:	2210      	moveq	r2, #16
 8083974:	701a      	strb	r2, [r3, #0]
    _totalBits++;
 8083976:	7803      	ldrb	r3, [r0, #0]
 8083978:	3301      	adds	r3, #1
 808397a:	7003      	strb	r3, [r0, #0]
 808397c:	e000      	b.n	8083980 <_ZN18ParticleSoftSerial5beginEmm+0x48>
  }
  else
  {
    _parity = 0;
 808397e:	701c      	strb	r4, [r3, #0]
  }
    
  for (int i=0; btTable[i].baudrate > 0; i++)
 8083980:	4a16      	ldr	r2, [pc, #88]	; (80839dc <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 8083982:	2400      	movs	r4, #0
 8083984:	200c      	movs	r0, #12
 8083986:	fb00 f304 	mul.w	r3, r0, r4
 808398a:	589b      	ldr	r3, [r3, r2]
 808398c:	b1a3      	cbz	r3, 80839b8 <_ZN18ParticleSoftSerial5beginEmm+0x80>
  {
    if (btTable[i].baudrate <= baud)
 808398e:	428b      	cmp	r3, r1
 8083990:	d810      	bhi.n	80839b4 <_ZN18ParticleSoftSerial5beginEmm+0x7c>
    {
#if (SYSTEM_VERSION >= 0x00060000)
      if (btTable[i].baudrate != baud)
 8083992:	d004      	beq.n	808399e <_ZN18ParticleSoftSerial5beginEmm+0x66>
      {
        Log.info("%lu not available! Selected rate %lu", baud, btTable[i].baudrate);
 8083994:	460a      	mov	r2, r1
 8083996:	4812      	ldr	r0, [pc, #72]	; (80839e0 <_ZN18ParticleSoftSerial5beginEmm+0xa8>)
 8083998:	4912      	ldr	r1, [pc, #72]	; (80839e4 <_ZN18ParticleSoftSerial5beginEmm+0xac>)
 808399a:	f7ff fe21 	bl	80835e0 <_ZNK5spark6Logger4infoEPKcz>
      }
#endif
      _usStartBit  = btTable[i].usStartBit;
 808399e:	4a0f      	ldr	r2, [pc, #60]	; (80839dc <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 80839a0:	230c      	movs	r3, #12
 80839a2:	fb03 2404 	mla	r4, r3, r4, r2
 80839a6:	4b10      	ldr	r3, [pc, #64]	; (80839e8 <_ZN18ParticleSoftSerial5beginEmm+0xb0>)
 80839a8:	6862      	ldr	r2, [r4, #4]
 80839aa:	601a      	str	r2, [r3, #0]
      _usBitLength = btTable[i].usBitLength;
 80839ac:	68a2      	ldr	r2, [r4, #8]
 80839ae:	4b0f      	ldr	r3, [pc, #60]	; (80839ec <_ZN18ParticleSoftSerial5beginEmm+0xb4>)
 80839b0:	601a      	str	r2, [r3, #0]

      break;
 80839b2:	e001      	b.n	80839b8 <_ZN18ParticleSoftSerial5beginEmm+0x80>
  else
  {
    _parity = 0;
  }
    
  for (int i=0; btTable[i].baudrate > 0; i++)
 80839b4:	3401      	adds	r4, #1
 80839b6:	e7e6      	b.n	8083986 <_ZN18ParticleSoftSerial5beginEmm+0x4e>

      break;
    }
  }

  if (!_halfduplex)
 80839b8:	4b0d      	ldr	r3, [pc, #52]	; (80839f0 <_ZN18ParticleSoftSerial5beginEmm+0xb8>)
 80839ba:	781b      	ldrb	r3, [r3, #0]
 80839bc:	b913      	cbnz	r3, 80839c4 <_ZN18ParticleSoftSerial5beginEmm+0x8c>
  { // since in halfduplex mode the pin starts off as RX pin
    prepareTX();
 80839be:	4628      	mov	r0, r5
 80839c0:	f7ff ff88 	bl	80838d4 <_ZN18ParticleSoftSerial9prepareTXEv>
  }
  prepareRX();
 80839c4:	4628      	mov	r0, r5
}
 80839c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (!_halfduplex)
  { // since in halfduplex mode the pin starts off as RX pin
    prepareTX();
  }
  prepareRX();
 80839ca:	f7ff be85 	b.w	80836d8 <_ZN18ParticleSoftSerial9prepareRXEv>
 80839ce:	bf00      	nop
 80839d0:	2000003f 	.word	0x2000003f
 80839d4:	20000030 	.word	0x20000030
 80839d8:	200007cd 	.word	0x200007cd
 80839dc:	0808d894 	.word	0x0808d894
 80839e0:	20000950 	.word	0x20000950
 80839e4:	0808d86e 	.word	0x0808d86e
 80839e8:	20000038 	.word	0x20000038
 80839ec:	20000034 	.word	0x20000034
 80839f0:	200007b9 	.word	0x200007b9

080839f4 <_ZN18ParticleSoftSerial5beginEm>:
  //txTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage
}

void ParticleSoftSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80839f4:	2200      	movs	r2, #0
 80839f6:	f7ff bf9f 	b.w	8083938 <_ZN18ParticleSoftSerial5beginEmm>
	...

080839fc <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
  }
  else
  {
    _txBitPos++;
  }
}
 80839fc:	b570      	push	{r4, r5, r6, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80839fe:	f001 ff63 	bl	80858c8 <HAL_Pin_Map>
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 8083a02:	4c0c      	ldr	r4, [pc, #48]	; (8083a34 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 8083a04:	4b0c      	ldr	r3, [pc, #48]	; (8083a38 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
 8083a06:	4e0d      	ldr	r6, [pc, #52]	; (8083a3c <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x40>)
 8083a08:	6018      	str	r0, [r3, #0]
 8083a0a:	4d0d      	ldr	r5, [pc, #52]	; (8083a40 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x44>)
 8083a0c:	4620      	mov	r0, r4
 8083a0e:	f7ff fdff 	bl	8083610 <_ZN13IntervalTimerC1Ev>
 8083a12:	4620      	mov	r0, r4
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8083a14:	4c0b      	ldr	r4, [pc, #44]	; (8083a44 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x48>)
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 8083a16:	4632      	mov	r2, r6
 8083a18:	4629      	mov	r1, r5
 8083a1a:	f005 f84d 	bl	8088ab8 <__aeabi_atexit>
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8083a1e:	4620      	mov	r0, r4
 8083a20:	f7ff fdf6 	bl	8083610 <_ZN13IntervalTimerC1Ev>
 8083a24:	4632      	mov	r2, r6
 8083a26:	4629      	mov	r1, r5
 8083a28:	4620      	mov	r0, r4
  }
  else
  {
    _txBitPos++;
  }
}
 8083a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8083a2e:	f005 b843 	b.w	8088ab8 <__aeabi_atexit>
 8083a32:	bf00      	nop
 8083a34:	2000081c 	.word	0x2000081c
 8083a38:	200007d4 	.word	0x200007d4
 8083a3c:	20000140 	.word	0x20000140
 8083a40:	0808359d 	.word	0x0808359d
 8083a44:	200007bc 	.word	0x200007bc

08083a48 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 8083a48:	f001 bf3e 	b.w	80858c8 <HAL_Pin_Map>

08083a4c <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 8083a4c:	7501      	strb	r1, [r0, #20]
 8083a4e:	4770      	bx	lr

08083a50 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 8083a50:	b538      	push	{r3, r4, r5, lr}
 8083a52:	4b0b      	ldr	r3, [pc, #44]	; (8083a80 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8083a54:	6984      	ldr	r4, [r0, #24]
 8083a56:	4605      	mov	r5, r0
 8083a58:	6003      	str	r3, [r0, #0]
 8083a5a:	b17c      	cbz	r4, 8083a7c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083a5c:	6863      	ldr	r3, [r4, #4]
 8083a5e:	3b01      	subs	r3, #1
 8083a60:	6063      	str	r3, [r4, #4]
 8083a62:	b95b      	cbnz	r3, 8083a7c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8083a64:	6823      	ldr	r3, [r4, #0]
 8083a66:	4620      	mov	r0, r4
 8083a68:	689b      	ldr	r3, [r3, #8]
 8083a6a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083a6c:	68a3      	ldr	r3, [r4, #8]
 8083a6e:	3b01      	subs	r3, #1
 8083a70:	60a3      	str	r3, [r4, #8]
 8083a72:	b91b      	cbnz	r3, 8083a7c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8083a74:	6823      	ldr	r3, [r4, #0]
 8083a76:	4620      	mov	r0, r4
 8083a78:	68db      	ldr	r3, [r3, #12]
 8083a7a:	4798      	blx	r3
 8083a7c:	4628      	mov	r0, r5
 8083a7e:	bd38      	pop	{r3, r4, r5, pc}
 8083a80:	0808e050 	.word	0x0808e050

08083a84 <_ZN9TCPClientD0Ev>:
 8083a84:	b510      	push	{r4, lr}
 8083a86:	4604      	mov	r4, r0
 8083a88:	f7ff ffe2 	bl	8083a50 <_ZN9TCPClientD1Ev>
 8083a8c:	4620      	mov	r0, r4
 8083a8e:	211c      	movs	r1, #28
 8083a90:	f005 f820 	bl	8088ad4 <_ZdlPvj>
 8083a94:	4620      	mov	r0, r4
 8083a96:	bd10      	pop	{r4, pc}

08083a98 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
 8083a98:	b530      	push	{r4, r5, lr}
               const char* token) {
 8083a9a:	4d06      	ldr	r5, [pc, #24]	; (8083ab4 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
  _host = host;
  _user_agent = user_agent;
 8083a9c:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
 8083a9e:	6005      	str	r5, [r0, #0]
 8083aa0:	2500      	movs	r5, #0
 8083aa2:	7505      	strb	r5, [r0, #20]
 8083aa4:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 8083aa8:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
 8083aaa:	6185      	str	r5, [r0, #24]
  _host = host;
 8083aac:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8083aae:	60c3      	str	r3, [r0, #12]
  _port = port;
 8083ab0:	6102      	str	r2, [r0, #16]
}
 8083ab2:	bd30      	pop	{r4, r5, pc}
 8083ab4:	0808da3c 	.word	0x0808da3c

08083ab8 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
 8083ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083abc:	460d      	mov	r5, r1
 8083abe:	4617      	mov	r7, r2
 8083ac0:	4606      	mov	r6, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
 8083ac2:	f004 fa05 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083ac6:	491c      	ldr	r1, [pc, #112]	; (8083b38 <_ZN6UbiTCP9reconnectEPKci+0x80>)
 8083ac8:	f003 f8d5 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8083acc:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8083ace:	481b      	ldr	r0, [pc, #108]	; (8083b3c <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8083ad0:	f002 febc 	bl	808684c <_ZN9TCPClient6statusEv>
 8083ad4:	bb68      	cbnz	r0, 8083b32 <_ZN6UbiTCP9reconnectEPKci+0x7a>
 8083ad6:	2c05      	cmp	r4, #5
 8083ad8:	d101      	bne.n	8083ade <_ZN6UbiTCP9reconnectEPKci+0x26>
 8083ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
 8083ade:	7d33      	ldrb	r3, [r6, #20]
 8083ae0:	b1c3      	cbz	r3, 8083b14 <_ZN6UbiTCP9reconnectEPKci+0x5c>
      Serial.print("Trying to connect to ");
 8083ae2:	f004 f9f5 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083ae6:	4916      	ldr	r1, [pc, #88]	; (8083b40 <_ZN6UbiTCP9reconnectEPKci+0x88>)
 8083ae8:	f003 f8ae 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(host);
 8083aec:	f004 f9f0 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083af0:	4629      	mov	r1, r5
 8083af2:	f003 f8a9 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 8083af6:	f004 f9eb 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083afa:	4912      	ldr	r1, [pc, #72]	; (8083b44 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
 8083afc:	f003 f8a4 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 8083b00:	f004 f9e6 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083b04:	4680      	mov	r8, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8083b06:	220a      	movs	r2, #10
 8083b08:	4621      	mov	r1, r4
 8083b0a:	f003 f8be 	bl	8086c8a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8083b0e:	4640      	mov	r0, r8
 8083b10:	f003 f8a5 	bl	8086c5e <_ZN5Print7printlnEv>
    }
    _client_tcp_ubi.stop();
 8083b14:	4809      	ldr	r0, [pc, #36]	; (8083b3c <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8083b16:	f002 fe17 	bl	8086748 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
 8083b1a:	2300      	movs	r3, #0
 8083b1c:	b2ba      	uxth	r2, r7
 8083b1e:	4629      	mov	r1, r5
 8083b20:	4806      	ldr	r0, [pc, #24]	; (8083b3c <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8083b22:	f002 ff5b 	bl	80869dc <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
 8083b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8083b2a:	f003 fa29 	bl	8086f80 <delay>
 8083b2e:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8083b30:	e7cd      	b.n	8083ace <_ZN6UbiTCP9reconnectEPKci+0x16>
 8083b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083b36:	bf00      	nop
 8083b38:	0808d930 	.word	0x0808d930
 8083b3c:	20000830 	.word	0x20000830
 8083b40:	0808d948 	.word	0x0808d948
 8083b44:	0808d95e 	.word	0x0808d95e

08083b48 <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
 8083b48:	b570      	push	{r4, r5, r6, lr}
 8083b4a:	4605      	mov	r5, r0
  int timeout = 0;
 8083b4c:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
 8083b4e:	480d      	ldr	r0, [pc, #52]	; (8083b84 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
 8083b50:	f002 fdbe 	bl	80866d0 <_ZN9TCPClient9availableEv>
 8083b54:	4606      	mov	r6, r0
 8083b56:	b910      	cbnz	r0, 8083b5e <_ZN6UbiTCP16waitServerAnswerEv+0x16>
 8083b58:	69ab      	ldr	r3, [r5, #24]
 8083b5a:	429c      	cmp	r4, r3
 8083b5c:	db01      	blt.n	8083b62 <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
 8083b5e:	2001      	movs	r0, #1
 8083b60:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
 8083b62:	2001      	movs	r0, #1
 8083b64:	f003 fa0c 	bl	8086f80 <delay>
    if (timeout > _timeout - 1) {
 8083b68:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
 8083b6a:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
 8083b6c:	429c      	cmp	r4, r3
 8083b6e:	dbee      	blt.n	8083b4e <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
 8083b70:	7d28      	ldrb	r0, [r5, #20]
 8083b72:	b130      	cbz	r0, 8083b82 <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
 8083b74:	f004 f9ac 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083b78:	4903      	ldr	r1, [pc, #12]	; (8083b88 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
 8083b7a:	f003 f87c 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8083b7e:	4630      	mov	r0, r6
 8083b80:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
 8083b82:	bd70      	pop	{r4, r5, r6, pc}
 8083b84:	20000830 	.word	0x20000830
 8083b88:	0808d972 	.word	0x0808d972

08083b8c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8083b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
 8083b90:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8083b92:	4606      	mov	r6, r0
 8083b94:	4688      	mov	r8, r1
 8083b96:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
 8083b98:	b14b      	cbz	r3, 8083bae <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
 8083b9a:	f004 f999 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083b9e:	4921      	ldr	r1, [pc, #132]	; (8083c24 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x98>)
 8083ba0:	f003 f869 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8083ba4:	f004 f994 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083ba8:	491f      	ldr	r1, [pc, #124]	; (8083c28 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x9c>)
 8083baa:	f003 f864 	bl	8086c76 <_ZN5Print7printlnEPKc>
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
 8083bae:	f240 29bb 	movw	r9, #699	; 0x2bb
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8083bb2:	2400      	movs	r4, #0
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
 8083bb4:	481d      	ldr	r0, [pc, #116]	; (8083c2c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8083bb6:	f002 fd8b 	bl	80866d0 <_ZN9TCPClient9availableEv>
 8083bba:	b178      	cbz	r0, 8083bdc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
 8083bbc:	481b      	ldr	r0, [pc, #108]	; (8083c2c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8083bbe:	f002 fd3c 	bl	808663a <_ZN9TCPClient4readEv>
    if (_debug) {
 8083bc2:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
 8083bc4:	b2c7      	uxtb	r7, r0
    if (_debug) {
 8083bc6:	b12b      	cbz	r3, 8083bd4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
 8083bc8:	f004 f982 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083bcc:	6803      	ldr	r3, [r0, #0]
 8083bce:	4639      	mov	r1, r7
 8083bd0:	689b      	ldr	r3, [r3, #8]
 8083bd2:	4798      	blx	r3
    }
    response[j] = c;
 8083bd4:	552f      	strb	r7, [r5, r4]
    j++;
 8083bd6:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
 8083bd8:	454c      	cmp	r4, r9
 8083bda:	d1eb      	bne.n	8083bb4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
 8083bdc:	7d33      	ldrb	r3, [r6, #20]
 8083bde:	b123      	cbz	r3, 8083bea <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
 8083be0:	f004 f976 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083be4:	4912      	ldr	r1, [pc, #72]	; (8083c30 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>)
 8083be6:	f003 f846 	bl	8086c76 <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
 8083bea:	2300      	movs	r3, #0
 8083bec:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
 8083bee:	4b11      	ldr	r3, [pc, #68]	; (8083c34 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa8>)
 8083bf0:	4598      	cmp	r8, r3
 8083bf2:	d108      	bne.n	8083c06 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7a>
    char* pch = strstr(response, "OK");
 8083bf4:	4910      	ldr	r1, [pc, #64]	; (8083c38 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
 8083bf6:	4628      	mov	r0, r5
 8083bf8:	f007 fa5a 	bl	808b0b0 <strstr>
    if (pch != NULL) {
 8083bfc:	b178      	cbz	r0, 8083c1e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
      result = 1;
 8083bfe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8083c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
 8083c06:	217c      	movs	r1, #124	; 0x7c
 8083c08:	4628      	mov	r0, r5
 8083c0a:	f006 fcd1 	bl	808a5b0 <strchr>
  if (pch != NULL) {
 8083c0e:	b130      	cbz	r0, 8083c1e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
    result = atof(pch + 1);
 8083c10:	3001      	adds	r0, #1
 8083c12:	f006 fb75 	bl	808a300 <atof>
 8083c16:	f005 fe0f 	bl	8089838 <__aeabi_d2f>
 8083c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
 8083c1e:	4807      	ldr	r0, [pc, #28]	; (8083c3c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
 8083c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083c24:	0808d9b9 	.word	0x0808d9b9
 8083c28:	0808d9a5 	.word	0x0808d9a5
 8083c2c:	20000830 	.word	0x20000830
 8083c30:	0808d9b8 	.word	0x0808d9b8
 8083c34:	0808d9c4 	.word	0x0808d9c4
 8083c38:	0808d9c9 	.word	0x0808d9c9
 8083c3c:	cda2425f 	.word	0xcda2425f

08083c40 <_ZN6UbiTCP3getEPKcS1_>:

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
 8083c40:	b570      	push	{r4, r5, r6, lr}
 8083c42:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083c44:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
 8083c46:	460e      	mov	r6, r1
 8083c48:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083c4a:	6841      	ldr	r1, [r0, #4]
 8083c4c:	f242 3234 	movw	r2, #9012	; 0x2334
 8083c50:	4845      	ldr	r0, [pc, #276]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c52:	f002 fec3 	bl	80869dc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 8083c56:	4620      	mov	r0, r4
 8083c58:	f242 3234 	movw	r2, #9012	; 0x2334
 8083c5c:	6861      	ldr	r1, [r4, #4]
 8083c5e:	f7ff ff2b 	bl	8083ab8 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
 8083c62:	4841      	ldr	r0, [pc, #260]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c64:	f002 fe29 	bl	80868ba <_ZN9TCPClient9connectedEv>
 8083c68:	2800      	cmp	r0, #0
 8083c6a:	d074      	beq.n	8083d56 <_ZN6UbiTCP3getEPKcS1_+0x116>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
 8083c6c:	68a1      	ldr	r1, [r4, #8]
 8083c6e:	483e      	ldr	r0, [pc, #248]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c70:	f002 ffea 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
 8083c74:	493d      	ldr	r1, [pc, #244]	; (8083d6c <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8083c76:	483c      	ldr	r0, [pc, #240]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c78:	f002 ffe6 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
 8083c7c:	68e1      	ldr	r1, [r4, #12]
 8083c7e:	483a      	ldr	r0, [pc, #232]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c80:	f002 ffe2 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
 8083c84:	493a      	ldr	r1, [pc, #232]	; (8083d70 <_ZN6UbiTCP3getEPKcS1_+0x130>)
 8083c86:	4838      	ldr	r0, [pc, #224]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c88:	f002 ffde 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
 8083c8c:	4631      	mov	r1, r6
 8083c8e:	4836      	ldr	r0, [pc, #216]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c90:	f002 ffda 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
 8083c94:	4937      	ldr	r1, [pc, #220]	; (8083d74 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8083c96:	4834      	ldr	r0, [pc, #208]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083c98:	f002 ffd6 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
 8083c9c:	4629      	mov	r1, r5
 8083c9e:	4832      	ldr	r0, [pc, #200]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083ca0:	f002 ffd2 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
 8083ca4:	4934      	ldr	r1, [pc, #208]	; (8083d78 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8083ca6:	4830      	ldr	r0, [pc, #192]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083ca8:	f002 ffce 	bl	8086c48 <_ZN5Print5printEPKc>

    if (_debug) {
 8083cac:	7d23      	ldrb	r3, [r4, #20]
 8083cae:	b3b3      	cbz	r3, 8083d1e <_ZN6UbiTCP3getEPKcS1_+0xde>
      Serial.println("----");
 8083cb0:	f004 f90e 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cb4:	4931      	ldr	r1, [pc, #196]	; (8083d7c <_ZN6UbiTCP3getEPKcS1_+0x13c>)
 8083cb6:	f002 ffde 	bl	8086c76 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
 8083cba:	f004 f909 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cbe:	4930      	ldr	r1, [pc, #192]	; (8083d80 <_ZN6UbiTCP3getEPKcS1_+0x140>)
 8083cc0:	f002 ffd9 	bl	8086c76 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
 8083cc4:	f004 f904 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cc8:	68a1      	ldr	r1, [r4, #8]
 8083cca:	f002 ffbd 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
 8083cce:	f004 f8ff 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cd2:	4926      	ldr	r1, [pc, #152]	; (8083d6c <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8083cd4:	f002 ffb8 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8083cd8:	f004 f8fa 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cdc:	68e1      	ldr	r1, [r4, #12]
 8083cde:	f002 ffb3 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("|");
 8083ce2:	f004 f8f5 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083ce6:	4922      	ldr	r1, [pc, #136]	; (8083d70 <_ZN6UbiTCP3getEPKcS1_+0x130>)
 8083ce8:	f002 ffae 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8083cec:	f004 f8f0 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cf0:	4631      	mov	r1, r6
 8083cf2:	f002 ffa9 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(":");
 8083cf6:	f004 f8eb 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083cfa:	491e      	ldr	r1, [pc, #120]	; (8083d74 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8083cfc:	f002 ffa4 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 8083d00:	f004 f8e6 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083d04:	4629      	mov	r1, r5
 8083d06:	f002 ff9f 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("|end");
 8083d0a:	f004 f8e1 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083d0e:	491a      	ldr	r1, [pc, #104]	; (8083d78 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8083d10:	f002 ff9a 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.println("\n----");
 8083d14:	f004 f8dc 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083d18:	491a      	ldr	r1, [pc, #104]	; (8083d84 <_ZN6UbiTCP3getEPKcS1_+0x144>)
 8083d1a:	f002 ffac 	bl	8086c76 <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
 8083d1e:	4620      	mov	r0, r4
 8083d20:	f7ff ff12 	bl	8083b48 <_ZN6UbiTCP16waitServerAnswerEv>
 8083d24:	b920      	cbnz	r0, 8083d30 <_ZN6UbiTCP3getEPKcS1_+0xf0>
      _client_tcp_ubi.stop();
 8083d26:	4810      	ldr	r0, [pc, #64]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083d28:	f002 fd0e 	bl	8086748 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 8083d2c:	4816      	ldr	r0, [pc, #88]	; (8083d88 <_ZN6UbiTCP3getEPKcS1_+0x148>)
 8083d2e:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8083d30:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8083d34:	f002 f91c 	bl	8085f70 <malloc>
    float value = parseTCPAnswer("LV", response);
 8083d38:	4914      	ldr	r1, [pc, #80]	; (8083d8c <_ZN6UbiTCP3getEPKcS1_+0x14c>)
 8083d3a:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8083d3c:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
 8083d3e:	4620      	mov	r0, r4
 8083d40:	f7ff ff24 	bl	8083b8c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8083d44:	4604      	mov	r4, r0
    _client_tcp_ubi.stop();
 8083d46:	4808      	ldr	r0, [pc, #32]	; (8083d68 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083d48:	f002 fcfe 	bl	8086748 <_ZN9TCPClient4stopEv>
    free(response);
 8083d4c:	4628      	mov	r0, r5
 8083d4e:	f002 f917 	bl	8085f80 <free>
    return value;
 8083d52:	4620      	mov	r0, r4
 8083d54:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (_debug) {
 8083d56:	7d23      	ldrb	r3, [r4, #20]
 8083d58:	2b00      	cmp	r3, #0
 8083d5a:	d0e4      	beq.n	8083d26 <_ZN6UbiTCP3getEPKcS1_+0xe6>
    Serial.println("ERROR could not connect to the server");
 8083d5c:	f004 f8b8 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083d60:	490b      	ldr	r1, [pc, #44]	; (8083d90 <_ZN6UbiTCP3getEPKcS1_+0x150>)
 8083d62:	f002 ff88 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8083d66:	e7de      	b.n	8083d26 <_ZN6UbiTCP3getEPKcS1_+0xe6>
 8083d68:	20000830 	.word	0x20000830
 8083d6c:	0808d9cc 	.word	0x0808d9cc
 8083d70:	0808d9cf 	.word	0x0808d9cf
 8083d74:	0808db28 	.word	0x0808db28
 8083d78:	0808db66 	.word	0x0808db66
 8083d7c:	0808d9e7 	.word	0x0808d9e7
 8083d80:	0808d9d1 	.word	0x0808d9d1
 8083d84:	0808d9e6 	.word	0x0808d9e6
 8083d88:	cda2425f 	.word	0xcda2425f
 8083d8c:	0808d9ec 	.word	0x0808d9ec
 8083d90:	0808d9ef 	.word	0x0808d9ef

08083d94 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
 8083d94:	b570      	push	{r4, r5, r6, lr}
 8083d96:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083d98:	6841      	ldr	r1, [r0, #4]
 8083d9a:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
 8083d9e:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083da0:	481e      	ldr	r0, [pc, #120]	; (8083e1c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083da2:	2300      	movs	r3, #0
 8083da4:	f002 fe1a 	bl	80869dc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 8083da8:	4620      	mov	r0, r4
 8083daa:	f242 3234 	movw	r2, #9012	; 0x2334
 8083dae:	6861      	ldr	r1, [r4, #4]
 8083db0:	f7ff fe82 	bl	8083ab8 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
 8083db4:	4819      	ldr	r0, [pc, #100]	; (8083e1c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083db6:	f002 fd80 	bl	80868ba <_ZN9TCPClient9connectedEv>
 8083dba:	b320      	cbz	r0, 8083e06 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x72>
    _client_tcp_ubi.print(payload);
 8083dbc:	4629      	mov	r1, r5
 8083dbe:	4817      	ldr	r0, [pc, #92]	; (8083e1c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083dc0:	f002 ff42 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
 8083dc4:	4620      	mov	r0, r4
 8083dc6:	f7ff febf 	bl	8083b48 <_ZN6UbiTCP16waitServerAnswerEv>
 8083dca:	4605      	mov	r5, r0
 8083dcc:	b920      	cbnz	r0, 8083dd8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x44>
    _client_tcp_ubi.stop();
 8083dce:	4813      	ldr	r0, [pc, #76]	; (8083e1c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083dd0:	f002 fcba 	bl	8086748 <_ZN9TCPClient4stopEv>
    return false;
 8083dd4:	2500      	movs	r5, #0
 8083dd6:	e01f      	b.n	8083e18 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
 8083dd8:	2064      	movs	r0, #100	; 0x64
 8083dda:	f002 f8c9 	bl	8085f70 <malloc>

  float value = parseTCPAnswer("POST", response);
 8083dde:	4910      	ldr	r1, [pc, #64]	; (8083e20 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>)
 8083de0:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
 8083de2:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
 8083de4:	4620      	mov	r0, r4
 8083de6:	f7ff fed1 	bl	8083b8c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8083dea:	4604      	mov	r4, r0
  free(response);
 8083dec:	4630      	mov	r0, r6
 8083dee:	f002 f8c7 	bl	8085f80 <free>
  if (value != ERROR_VALUE) {
 8083df2:	490c      	ldr	r1, [pc, #48]	; (8083e24 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x90>)
 8083df4:	4620      	mov	r0, r4
 8083df6:	f006 f811 	bl	8089e1c <__aeabi_fcmpeq>
 8083dfa:	2800      	cmp	r0, #0
 8083dfc:	d1e7      	bne.n	8083dce <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    _client_tcp_ubi.stop();
 8083dfe:	4807      	ldr	r0, [pc, #28]	; (8083e1c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083e00:	f002 fca2 	bl	8086748 <_ZN9TCPClient4stopEv>
 8083e04:	e008      	b.n	8083e18 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
 8083e06:	7d23      	ldrb	r3, [r4, #20]
 8083e08:	2b00      	cmp	r3, #0
 8083e0a:	d0e0      	beq.n	8083dce <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
      Serial.println("Could not connect to the host");
 8083e0c:	f004 f860 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8083e10:	4905      	ldr	r1, [pc, #20]	; (8083e28 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
 8083e12:	f002 ff30 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8083e16:	e7da      	b.n	8083dce <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
 8083e18:	4628      	mov	r0, r5
 8083e1a:	bd70      	pop	{r4, r5, r6, pc}
 8083e1c:	20000830 	.word	0x20000830
 8083e20:	0808d9c4 	.word	0x0808d9c4
 8083e24:	cda2425f 	.word	0xcda2425f
 8083e28:	0808da15 	.word	0x0808da15

08083e2c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 8083e2c:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
 8083e2e:	4c06      	ldr	r4, [pc, #24]	; (8083e48 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
 8083e30:	f001 fd4a 	bl	80858c8 <HAL_Pin_Map>
 8083e34:	4620      	mov	r0, r4
 8083e36:	f002 fdaf 	bl	8086998 <_ZN9TCPClientC1Ev>
 8083e3a:	4620      	mov	r0, r4
 8083e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083e40:	4a02      	ldr	r2, [pc, #8]	; (8083e4c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
 8083e42:	4903      	ldr	r1, [pc, #12]	; (8083e50 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
 8083e44:	f004 be38 	b.w	8088ab8 <__aeabi_atexit>
 8083e48:	20000830 	.word	0x20000830
 8083e4c:	20000140 	.word	0x20000140
 8083e50:	08083a51 	.word	0x08083a51

08083e54 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
 8083e54:	b510      	push	{r4, lr}
 8083e56:	4604      	mov	r4, r0
  delete[] _default_device_label;
 8083e58:	6800      	ldr	r0, [r0, #0]
 8083e5a:	b108      	cbz	r0, 8083e60 <_ZN18UbiProtocolHandlerD1Ev+0xc>
 8083e5c:	f7fc f925 	bl	80800aa <_ZdaPv>

  free(_dots);
 8083e60:	68e0      	ldr	r0, [r4, #12]
 8083e62:	f002 f88d 	bl	8085f80 <free>
  delete _ubiProtocol;
 8083e66:	6860      	ldr	r0, [r4, #4]
 8083e68:	2104      	movs	r1, #4
 8083e6a:	f004 fe33 	bl	8088ad4 <_ZdlPvj>
}
 8083e6e:	4620      	mov	r0, r4
 8083e70:	bd10      	pop	{r4, pc}
	...

08083e74 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
 8083e74:	b570      	push	{r4, r5, r6, lr}
 8083e76:	4604      	mov	r4, r0
  _dirty = true;
 8083e78:	2001      	movs	r0, #1
  (_dots + _current_value)->variable_label = variable_label;
 8083e7a:	f994 5010 	ldrsb.w	r5, [r4, #16]
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
  _dirty = true;
 8083e7e:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
 8083e80:	2014      	movs	r0, #20
 8083e82:	4345      	muls	r5, r0
 8083e84:	68e6      	ldr	r6, [r4, #12]
 8083e86:	5171      	str	r1, [r6, r5]
  (_dots + _current_value)->dot_value = value;
 8083e88:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8083e8c:	68e5      	ldr	r5, [r4, #12]
 8083e8e:	fb00 5101 	mla	r1, r0, r1, r5
 8083e92:	608a      	str	r2, [r1, #8]
  (_dots + _current_value)->dot_context = context;
 8083e94:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8083e98:	68e1      	ldr	r1, [r4, #12]
 8083e9a:	fb00 1202 	mla	r2, r0, r2, r1
 8083e9e:	6053      	str	r3, [r2, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
 8083ea0:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8083ea4:	68e2      	ldr	r2, [r4, #12]
 8083ea6:	fb00 2303 	mla	r3, r0, r3, r2
 8083eaa:	9a04      	ldr	r2, [sp, #16]
 8083eac:	60da      	str	r2, [r3, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
 8083eae:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8083eb2:	68e2      	ldr	r2, [r4, #12]
 8083eb4:	fb00 2003 	mla	r0, r0, r3, r2
 8083eb8:	9b05      	ldr	r3, [sp, #20]
 8083eba:	6103      	str	r3, [r0, #16]
  _current_value++;
 8083ebc:	7c23      	ldrb	r3, [r4, #16]
 8083ebe:	3301      	adds	r3, #1
 8083ec0:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
 8083ec2:	2b0f      	cmp	r3, #15
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
 8083ec4:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
 8083ec6:	dd08      	ble.n	8083eda <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x66>
    if (_debug) {
 8083ec8:	7ca3      	ldrb	r3, [r4, #18]
 8083eca:	b123      	cbz	r3, 8083ed6 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x62>
      Serial.println(
 8083ecc:	f004 f800 	bl	8087ed0 <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
 8083ed0:	4902      	ldr	r1, [pc, #8]	; (8083edc <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x68>)
 8083ed2:	f002 fed0 	bl	8086c76 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
 8083ed6:	230f      	movs	r3, #15
 8083ed8:	7423      	strb	r3, [r4, #16]
 8083eda:	bd70      	pop	{r4, r5, r6, pc}
 8083edc:	0808da48 	.word	0x0808da48

08083ee0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 8083ee0:	b530      	push	{r4, r5, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 8083ee2:	4610      	mov	r0, r2
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 8083ee4:	b087      	sub	sp, #28
 8083ee6:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 8083ee8:	f005 f970 	bl	80891cc <__aeabi_f2d>
 8083eec:	ad01      	add	r5, sp, #4
 8083eee:	4602      	mov	r2, r0
 8083ef0:	460b      	mov	r3, r1
 8083ef2:	4628      	mov	r0, r5
 8083ef4:	4909      	ldr	r1, [pc, #36]	; (8083f1c <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x3c>)
 8083ef6:	f002 f853 	bl	8085fa0 <sprintf>
 8083efa:	2200      	movs	r2, #0
  uint8_t j = 0;
  uint8_t k = 0;
 8083efc:	4613      	mov	r3, r2
  while (j < 20) {
    if (temp_arr[j] != ' ') {
 8083efe:	5ca9      	ldrb	r1, [r5, r2]
 8083f00:	2920      	cmp	r1, #32
 8083f02:	d005      	beq.n	8083f10 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
      str_value[k] = temp_arr[j];
 8083f04:	54e1      	strb	r1, [r4, r3]
      k++;
 8083f06:	3301      	adds	r3, #1
 8083f08:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
 8083f0a:	b909      	cbnz	r1, 8083f10 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
      str_value[k] = temp_arr[j];
 8083f0c:	54e1      	strb	r1, [r4, r3]
      break;
 8083f0e:	e002      	b.n	8083f16 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
 8083f10:	3201      	adds	r2, #1
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
 8083f12:	2a14      	cmp	r2, #20
 8083f14:	d1f3      	bne.n	8083efe <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x1e>
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
 8083f16:	b007      	add	sp, #28
 8083f18:	bd30      	pop	{r4, r5, pc}
 8083f1a:	bf00      	nop
 8083f1c:	0808dacb 	.word	0x0808dacb

08083f20 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
 * @payload [Mandatory] char payload pointer to store the built structure.
 * @timestamp_global [Optional] If set, it will be used for any dot without
 * timestamp.
 */

void UbiProtocolHandler::buildHttpPayload(char* payload) {
 8083f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083f24:	460c      	mov	r4, r1
 8083f26:	b088      	sub	sp, #32
 8083f28:	4605      	mov	r5, r0
  /* Builds the payload */
  sprintf(payload, "{");
 8083f2a:	4947      	ldr	r1, [pc, #284]	; (8084048 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x128>)
 8083f2c:	4620      	mov	r0, r4
 8083f2e:	f006 fb57 	bl	808a5e0 <strcpy>

  for (uint8_t i = 0; i < _current_value;) {
 8083f32:	2700      	movs	r7, #0
 8083f34:	f995 3010 	ldrsb.w	r3, [r5, #16]
 8083f38:	429f      	cmp	r7, r3
 8083f3a:	da66      	bge.n	808400a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xea>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
 8083f3c:	2614      	movs	r6, #20
 8083f3e:	437e      	muls	r6, r7
 8083f40:	68eb      	ldr	r3, [r5, #12]
 8083f42:	f10d 080c 	add.w	r8, sp, #12
 8083f46:	4433      	add	r3, r6
 8083f48:	689a      	ldr	r2, [r3, #8]
 8083f4a:	4641      	mov	r1, r8
 8083f4c:	4628      	mov	r0, r5
 8083f4e:	f7ff ffc7 	bl	8083ee0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
 8083f52:	68eb      	ldr	r3, [r5, #12]
            (_dots + i)->variable_label, str_value);
 8083f54:	f8cd 8000 	str.w	r8, [sp]
 8083f58:	599b      	ldr	r3, [r3, r6]
 8083f5a:	4622      	mov	r2, r4
 8083f5c:	493b      	ldr	r1, [pc, #236]	; (808404c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x12c>)
 8083f5e:	4620      	mov	r0, r4
 8083f60:	f002 f81e 	bl	8085fa0 <sprintf>

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 8083f64:	68eb      	ldr	r3, [r5, #12]
 8083f66:	4433      	add	r3, r6
 8083f68:	68db      	ldr	r3, [r3, #12]
 8083f6a:	b36b      	cbz	r3, 8083fc8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa8>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
              (_dots + i)->dot_timestamp_seconds);
 8083f6c:	4622      	mov	r2, r4
 8083f6e:	4938      	ldr	r1, [pc, #224]	; (8084050 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x130>)
 8083f70:	4620      	mov	r0, r4
 8083f72:	f002 f815 	bl	8085fa0 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 8083f76:	68eb      	ldr	r3, [r5, #12]
 8083f78:	4433      	add	r3, r6
 8083f7a:	691b      	ldr	r3, [r3, #16]
 8083f7c:	b1fb      	cbz	r3, 8083fbe <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x9e>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 8083f7e:	200a      	movs	r0, #10
 8083f80:	fb93 f1f0 	sdiv	r1, r3, r0
 8083f84:	2264      	movs	r2, #100	; 0x64
 8083f86:	fb93 f2f2 	sdiv	r2, r3, r2
 8083f8a:	fb91 fcf0 	sdiv	ip, r1, r0
 8083f8e:	fb92 fef0 	sdiv	lr, r2, r0
 8083f92:	fb00 1c1c 	mls	ip, r0, ip, r1
 8083f96:	fb00 3111 	mls	r1, r0, r1, r3
 8083f9a:	fb00 221e 	mls	r2, r0, lr, r2
 8083f9e:	b2c9      	uxtb	r1, r1
 8083fa0:	9100      	str	r1, [sp, #0]
 8083fa2:	fa5f f38c 	uxtb.w	r3, ip
 8083fa6:	b2d2      	uxtb	r2, r2
 8083fa8:	492a      	ldr	r1, [pc, #168]	; (8084054 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
 8083faa:	a802      	add	r0, sp, #8
 8083fac:	f001 fff8 	bl	8085fa0 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 8083fb0:	ab02      	add	r3, sp, #8
 8083fb2:	4622      	mov	r2, r4
 8083fb4:	4928      	ldr	r1, [pc, #160]	; (8084058 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
 8083fb6:	4620      	mov	r0, r4
 8083fb8:	f001 fff2 	bl	8085fa0 <sprintf>
 8083fbc:	e004      	b.n	8083fc8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa8>
      } else {
        sprintf(payload, "%s000", payload);
 8083fbe:	4622      	mov	r2, r4
 8083fc0:	4926      	ldr	r1, [pc, #152]	; (808405c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
 8083fc2:	4620      	mov	r0, r4
 8083fc4:	f001 ffec 	bl	8085fa0 <sprintf>
      }
    }

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
 8083fc8:	68eb      	ldr	r3, [r5, #12]
 8083fca:	441e      	add	r6, r3
 8083fcc:	6873      	ldr	r3, [r6, #4]
 8083fce:	b123      	cbz	r3, 8083fda <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xba>
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
 8083fd0:	4622      	mov	r2, r4
 8083fd2:	4923      	ldr	r1, [pc, #140]	; (8084060 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
 8083fd4:	4620      	mov	r0, r4
 8083fd6:	f001 ffe3 	bl	8085fa0 <sprintf>
    }

    sprintf(payload, "%s}", payload);
 8083fda:	4622      	mov	r2, r4
 8083fdc:	4921      	ldr	r1, [pc, #132]	; (8084064 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 8083fde:	4620      	mov	r0, r4
 8083fe0:	f001 ffde 	bl	8085fa0 <sprintf>
    i++;
 8083fe4:	3701      	adds	r7, #1

    if (i < _current_value) {
 8083fe6:	f995 3010 	ldrsb.w	r3, [r5, #16]
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
    }

    sprintf(payload, "%s}", payload);
    i++;
 8083fea:	b2ff      	uxtb	r7, r7

    if (i < _current_value) {
 8083fec:	429f      	cmp	r7, r3
      sprintf(payload, "%s,", payload);
 8083fee:	4622      	mov	r2, r4
    }

    sprintf(payload, "%s}", payload);
    i++;

    if (i < _current_value) {
 8083ff0:	da04      	bge.n	8083ffc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xdc>
      sprintf(payload, "%s,", payload);
 8083ff2:	491d      	ldr	r1, [pc, #116]	; (8084068 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
 8083ff4:	4620      	mov	r0, r4
 8083ff6:	f001 ffd3 	bl	8085fa0 <sprintf>
 8083ffa:	e79b      	b.n	8083f34 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
    } else {
      sprintf(payload, "%s}", payload);
 8083ffc:	4919      	ldr	r1, [pc, #100]	; (8084064 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 8083ffe:	4620      	mov	r0, r4
 8084000:	f001 ffce 	bl	8085fa0 <sprintf>
      _current_value = 0;
 8084004:	2300      	movs	r3, #0
 8084006:	742b      	strb	r3, [r5, #16]

void UbiProtocolHandler::buildHttpPayload(char* payload) {
  /* Builds the payload */
  sprintf(payload, "{");

  for (uint8_t i = 0; i < _current_value;) {
 8084008:	e794      	b.n	8083f34 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
      sprintf(payload, "%s}", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
 808400a:	7cab      	ldrb	r3, [r5, #18]
 808400c:	b1c3      	cbz	r3, 8084040 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x120>
    Serial.println("----------");
 808400e:	f003 ff5f 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084012:	4916      	ldr	r1, [pc, #88]	; (808406c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 8084014:	f002 fe2f 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 8084018:	f003 ff5a 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808401c:	4914      	ldr	r1, [pc, #80]	; (8084070 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
 808401e:	f002 fe2a 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 8084022:	f003 ff55 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084026:	4621      	mov	r1, r4
 8084028:	f002 fe25 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 808402c:	f003 ff50 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084030:	490e      	ldr	r1, [pc, #56]	; (808406c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 8084032:	f002 fe20 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("");
 8084036:	f003 ff4b 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808403a:	490e      	ldr	r1, [pc, #56]	; (8084074 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
 808403c:	f002 fe1b 	bl	8086c76 <_ZN5Print7printlnEPKc>
  }
}
 8084040:	b008      	add	sp, #32
 8084042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084046:	bf00      	nop
 8084048:	0808dad0 	.word	0x0808dad0
 808404c:	0808dad2 	.word	0x0808dad2
 8084050:	0808dae5 	.word	0x0808dae5
 8084054:	0808daf8 	.word	0x0808daf8
 8084058:	0808daff 	.word	0x0808daff
 808405c:	0808db04 	.word	0x0808db04
 8084060:	0808db0a 	.word	0x0808db0a
 8084064:	0808db19 	.word	0x0808db19
 8084068:	0808db1d 	.word	0x0808db1d
 808406c:	0808d9b9 	.word	0x0808d9b9
 8084070:	0808db21 	.word	0x0808db21
 8084074:	0808df27 	.word	0x0808df27

08084078 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
 8084078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808407c:	460c      	mov	r4, r1
 808407e:	4605      	mov	r5, r0
 8084080:	461f      	mov	r7, r3
 8084082:	4616      	mov	r6, r2
 8084084:	b088      	sub	sp, #32
  sprintf(payload, "");
 8084086:	494d      	ldr	r1, [pc, #308]	; (80841bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>)
 8084088:	4620      	mov	r0, r4
 808408a:	f006 faa9 	bl	808a5e0 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
 808408e:	68ab      	ldr	r3, [r5, #8]
 8084090:	4a4b      	ldr	r2, [pc, #300]	; (80841c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x148>)
 8084092:	494c      	ldr	r1, [pc, #304]	; (80841c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
 8084094:	4620      	mov	r0, r4
 8084096:	f001 ff83 	bl	8085fa0 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
 808409a:	9700      	str	r7, [sp, #0]
 808409c:	4633      	mov	r3, r6
 808409e:	4622      	mov	r2, r4
 80840a0:	4949      	ldr	r1, [pc, #292]	; (80841c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
 80840a2:	4620      	mov	r0, r4
 80840a4:	f001 ff7c 	bl	8085fa0 <sprintf>

  sprintf(payload, "%s=>", payload);
 80840a8:	4622      	mov	r2, r4
 80840aa:	4948      	ldr	r1, [pc, #288]	; (80841cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
 80840ac:	4620      	mov	r0, r4
 80840ae:	f001 ff77 	bl	8085fa0 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
 80840b2:	2700      	movs	r7, #0
 80840b4:	f995 3010 	ldrsb.w	r3, [r5, #16]
 80840b8:	429f      	cmp	r7, r3
 80840ba:	da60      	bge.n	808417e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x106>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
 80840bc:	2614      	movs	r6, #20
 80840be:	437e      	muls	r6, r7
 80840c0:	68eb      	ldr	r3, [r5, #12]
 80840c2:	f10d 080c 	add.w	r8, sp, #12
 80840c6:	4433      	add	r3, r6
 80840c8:	689a      	ldr	r2, [r3, #8]
 80840ca:	4641      	mov	r1, r8
 80840cc:	4628      	mov	r0, r5
 80840ce:	f7ff ff07 	bl	8083ee0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
 80840d2:	68eb      	ldr	r3, [r5, #12]
            str_value);
 80840d4:	f8cd 8000 	str.w	r8, [sp]
 80840d8:	599b      	ldr	r3, [r3, r6]
 80840da:	4622      	mov	r2, r4
 80840dc:	493a      	ldr	r1, [pc, #232]	; (80841c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
 80840de:	4620      	mov	r0, r4
 80840e0:	f001 ff5e 	bl	8085fa0 <sprintf>

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
 80840e4:	68eb      	ldr	r3, [r5, #12]
 80840e6:	4433      	add	r3, r6
 80840e8:	685b      	ldr	r3, [r3, #4]
 80840ea:	b123      	cbz	r3, 80840f6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x7e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
 80840ec:	4622      	mov	r2, r4
 80840ee:	4938      	ldr	r1, [pc, #224]	; (80841d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
 80840f0:	4620      	mov	r0, r4
 80840f2:	f001 ff55 	bl	8085fa0 <sprintf>
    }

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 80840f6:	68eb      	ldr	r3, [r5, #12]
 80840f8:	4433      	add	r3, r6
 80840fa:	68db      	ldr	r3, [r3, #12]
 80840fc:	b363      	cbz	r3, 8084158 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe0>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
 80840fe:	4622      	mov	r2, r4
 8084100:	4934      	ldr	r1, [pc, #208]	; (80841d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
 8084102:	4620      	mov	r0, r4
 8084104:	f001 ff4c 	bl	8085fa0 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 8084108:	68eb      	ldr	r3, [r5, #12]
 808410a:	441e      	add	r6, r3
 808410c:	6936      	ldr	r6, [r6, #16]
 808410e:	b1f6      	cbz	r6, 808414e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xd6>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 8084110:	200a      	movs	r0, #10
 8084112:	fb96 f1f0 	sdiv	r1, r6, r0
 8084116:	2264      	movs	r2, #100	; 0x64
 8084118:	fb96 f2f2 	sdiv	r2, r6, r2
 808411c:	fb91 f3f0 	sdiv	r3, r1, r0
 8084120:	fb92 fef0 	sdiv	lr, r2, r0
 8084124:	fb00 1313 	mls	r3, r0, r3, r1
 8084128:	fb00 6111 	mls	r1, r0, r1, r6
 808412c:	fb00 221e 	mls	r2, r0, lr, r2
 8084130:	b2c9      	uxtb	r1, r1
 8084132:	9100      	str	r1, [sp, #0]
 8084134:	b2db      	uxtb	r3, r3
 8084136:	b2d2      	uxtb	r2, r2
 8084138:	4927      	ldr	r1, [pc, #156]	; (80841d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
 808413a:	a802      	add	r0, sp, #8
 808413c:	f001 ff30 	bl	8085fa0 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 8084140:	ab02      	add	r3, sp, #8
 8084142:	4622      	mov	r2, r4
 8084144:	4925      	ldr	r1, [pc, #148]	; (80841dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
 8084146:	4620      	mov	r0, r4
 8084148:	f001 ff2a 	bl	8085fa0 <sprintf>
 808414c:	e004      	b.n	8084158 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe0>
      } else {
        sprintf(payload, "%s000", payload);
 808414e:	4622      	mov	r2, r4
 8084150:	4923      	ldr	r1, [pc, #140]	; (80841e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
 8084152:	4620      	mov	r0, r4
 8084154:	f001 ff24 	bl	8085fa0 <sprintf>
      }
    }

    i++;
 8084158:	3701      	adds	r7, #1

    if (i < _current_value) {
 808415a:	f995 3010 	ldrsb.w	r3, [r5, #16]
      } else {
        sprintf(payload, "%s000", payload);
      }
    }

    i++;
 808415e:	b2ff      	uxtb	r7, r7

    if (i < _current_value) {
 8084160:	429f      	cmp	r7, r3
      sprintf(payload, "%s,", payload);
 8084162:	4622      	mov	r2, r4
      }
    }

    i++;

    if (i < _current_value) {
 8084164:	da04      	bge.n	8084170 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xf8>
      sprintf(payload, "%s,", payload);
 8084166:	491f      	ldr	r1, [pc, #124]	; (80841e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
 8084168:	4620      	mov	r0, r4
 808416a:	f001 ff19 	bl	8085fa0 <sprintf>
 808416e:	e7a1      	b.n	80840b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
    } else {
      sprintf(payload, "%s|end", payload);
 8084170:	491d      	ldr	r1, [pc, #116]	; (80841e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
 8084172:	4620      	mov	r0, r4
 8084174:	f001 ff14 	bl	8085fa0 <sprintf>
      _current_value = 0;
 8084178:	2300      	movs	r3, #0
 808417a:	742b      	strb	r3, [r5, #16]
  sprintf(payload, "");
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);

  sprintf(payload, "%s=>", payload);
  for (uint8_t i = 0; i < _current_value;) {
 808417c:	e79a      	b.n	80840b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
      sprintf(payload, "%s|end", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
 808417e:	7cab      	ldrb	r3, [r5, #18]
 8084180:	b1c3      	cbz	r3, 80841b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x13c>
    Serial.println("----------");
 8084182:	f003 fea5 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084186:	4919      	ldr	r1, [pc, #100]	; (80841ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 8084188:	f002 fd75 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 808418c:	f003 fea0 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084190:	4917      	ldr	r1, [pc, #92]	; (80841f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
 8084192:	f002 fd70 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 8084196:	f003 fe9b 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808419a:	4621      	mov	r1, r4
 808419c:	f002 fd6b 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 80841a0:	f003 fe96 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80841a4:	4911      	ldr	r1, [pc, #68]	; (80841ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 80841a6:	f002 fd66 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("");
 80841aa:	f003 fe91 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80841ae:	4903      	ldr	r1, [pc, #12]	; (80841bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>)
 80841b0:	f002 fd61 	bl	8086c76 <_ZN5Print7printlnEPKc>
  }
}
 80841b4:	b008      	add	sp, #32
 80841b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80841ba:	bf00      	nop
 80841bc:	0808df27 	.word	0x0808df27
 80841c0:	0808db2a 	.word	0x0808db2a
 80841c4:	0808db3e 	.word	0x0808db3e
 80841c8:	0808db4a 	.word	0x0808db4a
 80841cc:	0808db52 	.word	0x0808db52
 80841d0:	0808db57 	.word	0x0808db57
 80841d4:	0808db5d 	.word	0x0808db5d
 80841d8:	0808daf8 	.word	0x0808daf8
 80841dc:	0808daff 	.word	0x0808daff
 80841e0:	0808db04 	.word	0x0808db04
 80841e4:	0808db1d 	.word	0x0808db1d
 80841e8:	0808db64 	.word	0x0808db64
 80841ec:	0808d9b9 	.word	0x0808d9b9
 80841f0:	0808db21 	.word	0x0808db21

080841f4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
 80841f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80841f8:	4604      	mov	r4, r0
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80841fa:	f44f 702f 	mov.w	r0, #700	; 0x2bc
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
 80841fe:	461f      	mov	r7, r3
 8084200:	460e      	mov	r6, r1
 8084202:	4690      	mov	r8, r2
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8084204:	f001 feb4 	bl	8085f70 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 8084208:	7ce3      	ldrb	r3, [r4, #19]
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 808420a:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 808420c:	3b01      	subs	r3, #1
 808420e:	2b01      	cmp	r3, #1
 8084210:	d806      	bhi.n	8084220 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2c>
    buildTcpPayload(payload, device_label, device_name);
 8084212:	4601      	mov	r1, r0
 8084214:	4643      	mov	r3, r8
 8084216:	4632      	mov	r2, r6
 8084218:	4620      	mov	r0, r4
 808421a:	f7ff ff2d 	bl	8084078 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
 808421e:	e003      	b.n	8084228 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x34>
  } else {
    buildHttpPayload(payload);
 8084220:	4601      	mov	r1, r0
 8084222:	4620      	mov	r0, r4
 8084224:	f7ff fe7c 	bl	8083f20 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
  }

  // Sends data
  if (_debug) {
 8084228:	7ca3      	ldrb	r3, [r4, #18]
 808422a:	b123      	cbz	r3, 8084236 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x42>
    Serial.println("Sending data...");
 808422c:	f003 fe50 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084230:	490d      	ldr	r1, [pc, #52]	; (8084268 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x74>)
 8084232:	f002 fd20 	bl	8086c76 <_ZN5Print7printlnEPKc>
  }

  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
 8084236:	6860      	ldr	r0, [r4, #4]
 8084238:	4631      	mov	r1, r6
 808423a:	6803      	ldr	r3, [r0, #0]
 808423c:	9700      	str	r7, [sp, #0]
 808423e:	4642      	mov	r2, r8
 8084240:	f8d3 9000 	ldr.w	r9, [r3]
 8084244:	462b      	mov	r3, r5
 8084246:	47c8      	blx	r9
 8084248:	4606      	mov	r6, r0
  free(payload);
 808424a:	4628      	mov	r0, r5
 808424c:	f001 fe98 	bl	8085f80 <free>
  delete flags;
 8084250:	2101      	movs	r1, #1
 8084252:	4638      	mov	r0, r7
 8084254:	f004 fc3e 	bl	8088ad4 <_ZdlPvj>
 8084258:	2300      	movs	r3, #0
  if (result) {
 808425a:	b106      	cbz	r6, 808425e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6a>
    _dirty = false;
 808425c:	7463      	strb	r3, [r4, #17]
    _current_value = 0;
  }

  _current_value = 0;
  return result;
}
 808425e:	4630      	mov	r0, r6
  if (result) {
    _dirty = false;
    _current_value = 0;
  }

  _current_value = 0;
 8084260:	7423      	strb	r3, [r4, #16]
  return result;
}
 8084262:	b003      	add	sp, #12
 8084264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8084268:	0808db6b 	.word	0x0808db6b

0808426c <_ZN18UbiProtocolHandler4sendEPKcS1_>:
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
 808426c:	b570      	push	{r4, r5, r6, lr}
 808426e:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
 8084270:	2001      	movs	r0, #1
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
 8084272:	460d      	mov	r5, r1
 8084274:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
 8084276:	f7fb ff12 	bl	808009e <_Znwj>
 808427a:	4603      	mov	r3, r0
 808427c:	b110      	cbz	r0, 8084284 <_ZN18UbiProtocolHandler4sendEPKcS1_+0x18>
 808427e:	4a05      	ldr	r2, [pc, #20]	; (8084294 <_ZN18UbiProtocolHandler4sendEPKcS1_+0x28>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8084280:	7812      	ldrb	r2, [r2, #0]
 8084282:	7002      	strb	r2, [r0, #0]
  return send(device_label, device_name, flags);
 8084284:	4632      	mov	r2, r6
 8084286:	4629      	mov	r1, r5
 8084288:	4620      	mov	r0, r4
}
 808428a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
 808428e:	f7ff bfb1 	b.w	80841f4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>
 8084292:	bf00      	nop
 8084294:	2000084c 	.word	0x2000084c

08084298 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084298:	b570      	push	{r4, r5, r6, lr}
 808429a:	4606      	mov	r6, r0
 808429c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 808429e:	b184      	cbz	r4, 80842c2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
 80842a0:	68e1      	ldr	r1, [r4, #12]
 80842a2:	4630      	mov	r0, r6
 80842a4:	f7ff fff8 	bl	8084298 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80842a8:	69e3      	ldr	r3, [r4, #28]
 80842aa:	68a5      	ldr	r5, [r4, #8]
 80842ac:	b123      	cbz	r3, 80842b8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80842ae:	f104 0114 	add.w	r1, r4, #20
 80842b2:	2203      	movs	r2, #3
 80842b4:	4608      	mov	r0, r1
 80842b6:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80842b8:	4620      	mov	r0, r4
 80842ba:	f7fb fef4 	bl	80800a6 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 80842be:	462c      	mov	r4, r5
 80842c0:	e7ed      	b.n	808429e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
 80842c2:	bd70      	pop	{r4, r5, r6, pc}

080842c4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
 80842c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80842c6:	b08d      	sub	sp, #52	; 0x34
 80842c8:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80842ca:	a801      	add	r0, sp, #4
 80842cc:	460d      	mov	r5, r1
 80842ce:	4617      	mov	r7, r2
 80842d0:	461e      	mov	r6, r3
 80842d2:	f001 fe2d 	bl	8085f30 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
 80842d6:	9803      	ldr	r0, [sp, #12]
 80842d8:	3001      	adds	r0, #1
 80842da:	f7fb fee2 	bl	80800a2 <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
 80842de:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
 80842e0:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
 80842e2:	f006 f97d 	bl	808a5e0 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
 80842e6:	462a      	mov	r2, r5
 80842e8:	4633      	mov	r3, r6
 80842ea:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
 80842ec:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
 80842ee:	a805      	add	r0, sp, #20
 80842f0:	f000 fd6a 	bl	8084dc8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
 80842f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80842f8:	f001 fe3a 	bl	8085f70 <malloc>
 80842fc:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
 80842fe:	a805      	add	r0, sp, #20
 8084300:	f000 fc72 	bl	8084be8 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
 8084304:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
 8084306:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
 8084308:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
 808430a:	9908      	ldr	r1, [sp, #32]
 808430c:	a806      	add	r0, sp, #24
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
 808430e:	60a5      	str	r5, [r4, #8]
 8084310:	f7ff ffc2 	bl	8084298 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
 8084314:	a801      	add	r0, sp, #4
 8084316:	f002 fb93 	bl	8086a40 <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
 808431a:	b00d      	add	sp, #52	; 0x34
 808431c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808431e <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
 808431e:	b538      	push	{r3, r4, r5, lr}
 8084320:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
 8084322:	2500      	movs	r5, #0
 8084324:	7405      	strb	r5, [r0, #16]
 8084326:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
 8084328:	f7ff ffcc 	bl	80842c4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
 808432c:	4620      	mov	r0, r4
 808432e:	bd38      	pop	{r3, r4, r5, pc}

08084330 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8084330:	4b02      	ldr	r3, [pc, #8]	; (808433c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
 8084332:	2200      	movs	r2, #0
 8084334:	701a      	strb	r2, [r3, #0]
 8084336:	f001 bac7 	b.w	80858c8 <HAL_Pin_Map>
 808433a:	bf00      	nop
 808433c:	2000084c 	.word	0x2000084c

08084340 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 8084340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084344:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8084346:	2078      	movs	r0, #120	; 0x78
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
 8084348:	7223      	strb	r3, [r4, #8]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 808434a:	461f      	mov	r7, r3
 808434c:	460d      	mov	r5, r1
 808434e:	4616      	mov	r6, r2
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8084350:	f001 fe0e 	bl	8085f70 <malloc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8084354:	7a23      	ldrb	r3, [r4, #8]
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8084356:	6060      	str	r0, [r4, #4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8084358:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 808435a:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 808435e:	d00c      	beq.n	808437a <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x3a>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 8084360:	f7fb fe9d 	bl	808009e <_Znwj>
 8084364:	4680      	mov	r8, r0
 8084366:	b120      	cbz	r0, 8084372 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x32>
 8084368:	463b      	mov	r3, r7
 808436a:	4632      	mov	r2, r6
 808436c:	4629      	mov	r1, r5
 808436e:	f7ff ffd6 	bl	808431e <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 8084372:	f8c4 8000 	str.w	r8, [r4]
 8084376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
 808437a:	f7fb fe90 	bl	808009e <_Znwj>
 808437e:	4607      	mov	r7, r0
 8084380:	b120      	cbz	r0, 808438c <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x4c>
 8084382:	2301      	movs	r3, #1
 8084384:	4632      	mov	r2, r6
 8084386:	4629      	mov	r1, r5
 8084388:	f7ff ffc9 	bl	808431e <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 808438c:	6027      	str	r7, [r4, #0]
 808438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08084394 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
 8084394:	b510      	push	{r4, lr}
 8084396:	4604      	mov	r4, r0
 8084398:	2300      	movs	r3, #0
 808439a:	7243      	strb	r3, [r0, #9]
 808439c:	7283      	strb	r3, [r0, #10]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
 808439e:	4613      	mov	r3, r2
 80843a0:	4a02      	ldr	r2, [pc, #8]	; (80843ac <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
 80843a2:	f7ff ffcd 	bl	8084340 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
 80843a6:	4620      	mov	r0, r4
 80843a8:	bd10      	pop	{r4, pc}
 80843aa:	bf00      	nop
 80843ac:	0808db7b 	.word	0x0808db7b

080843b0 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
 80843b0:	b538      	push	{r3, r4, r5, lr}
 80843b2:	4604      	mov	r4, r0
  free(_context);
 80843b4:	6840      	ldr	r0, [r0, #4]
 80843b6:	f001 fde3 	bl	8085f80 <free>
  delete _protocolMesh;
#elif PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
 80843ba:	6825      	ldr	r5, [r4, #0]
 80843bc:	b135      	cbz	r5, 80843cc <_ZN7UbidotsD1Ev+0x1c>
 80843be:	4628      	mov	r0, r5
 80843c0:	f7ff fd48 	bl	8083e54 <_ZN18UbiProtocolHandlerD1Ev>
 80843c4:	2114      	movs	r1, #20
 80843c6:	4628      	mov	r0, r5
 80843c8:	f004 fb84 	bl	8088ad4 <_ZdlPvj>
#endif
}
 80843cc:	4620      	mov	r0, r4
 80843ce:	bd38      	pop	{r3, r4, r5, pc}

080843d0 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
 80843d0:	b570      	push	{r4, r5, r6, lr}
  }

#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 80843d2:	7a06      	ldrb	r6, [r0, #8]
 80843d4:	2e04      	cmp	r6, #4
 80843d6:	d004      	beq.n	80843e2 <_ZN7Ubidots3addEPcfS0_mj+0x12>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 80843d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
 80843dc:	6800      	ldr	r0, [r0, #0]
 80843de:	f7ff bd49 	b.w	8083e74 <_ZN18UbiProtocolHandler3addEPcfS0_mj>
  } else {
    Serial.println(
 80843e2:	f003 fd75 	bl	8087ed0 <_Z16_fetch_usbserialv>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 80843e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
  } else {
    Serial.println(
        "[WARNING] please choose a different cloud protocol of Mesh in the "
        "Ubidots constructor");
 80843ea:	4901      	ldr	r1, [pc, #4]	; (80843f0 <_ZN7Ubidots3addEPcfS0_mj+0x20>)
 80843ec:	f002 bc43 	b.w	8086c76 <_ZN5Print7printlnEPKc>
 80843f0:	0808db96 	.word	0x0808db96

080843f4 <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
 80843f4:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
 80843f6:	2300      	movs	r3, #0
 80843f8:	9301      	str	r3, [sp, #4]
 80843fa:	9300      	str	r3, [sp, #0]
 80843fc:	f7ff ffe8 	bl	80843d0 <_ZN7Ubidots3addEPcfS0_mj>
}
 8084400:	b003      	add	sp, #12
 8084402:	f85d fb04 	ldr.w	pc, [sp], #4

08084406 <_ZN7Ubidots4sendEPKcS1_>:
bool Ubidots::send(const char* device_label, const char* device_name) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, device_name);
 8084406:	6800      	ldr	r0, [r0, #0]
 8084408:	f7ff bf30 	b.w	808426c <_ZN18UbiProtocolHandler4sendEPKcS1_>

0808440c <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
 808440c:	f001 ba5c 	b.w	80858c8 <HAL_Pin_Map>

08084410 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

 8084410:	7501      	strb	r1, [r0, #20]
 8084412:	4770      	bx	lr

08084414 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
 8084414:	b570      	push	{r4, r5, r6, lr}
 8084416:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
 8084418:	2014      	movs	r0, #20
 808441a:	f001 fda9 	bl	8085f70 <malloc>
 808441e:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
 8084420:	2014      	movs	r0, #20
 8084422:	f001 fda5 	bl	8085f70 <malloc>
 8084426:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
 8084428:	4620      	mov	r0, r4
 808442a:	f006 fe11 	bl	808b050 <strlen>
 808442e:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
 8084430:	2300      	movs	r3, #0
 8084432:	3802      	subs	r0, #2
 8084434:	4298      	cmp	r0, r3
 8084436:	dd17      	ble.n	8084468 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
 8084438:	f812 1b01 	ldrb.w	r1, [r2], #1
 808443c:	290d      	cmp	r1, #13
 808443e:	d111      	bne.n	8084464 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8084440:	7811      	ldrb	r1, [r2, #0]
 8084442:	290a      	cmp	r1, #10
 8084444:	d10e      	bne.n	8084464 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8084446:	7851      	ldrb	r1, [r2, #1]
 8084448:	290d      	cmp	r1, #13
 808444a:	d10b      	bne.n	8084464 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 808444c:	7891      	ldrb	r1, [r2, #2]
 808444e:	290a      	cmp	r1, #10
 8084450:	d108      	bne.n	8084464 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
 8084452:	1d19      	adds	r1, r3, #4
 8084454:	2214      	movs	r2, #20
 8084456:	4421      	add	r1, r4
 8084458:	4630      	mov	r0, r6
 808445a:	f006 fe16 	bl	808b08a <strncpy>
        parsed[20] = '\0';
 808445e:	2300      	movs	r3, #0
 8084460:	7533      	strb	r3, [r6, #20]
 8084462:	e001      	b.n	8084468 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
 8084464:	3301      	adds	r3, #1
 8084466:	e7e5      	b.n	8084434 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
 8084468:	210a      	movs	r1, #10
 808446a:	4630      	mov	r0, r6
 808446c:	f006 f8a0 	bl	808a5b0 <strchr>
    if (pch == NULL) {
 8084470:	4604      	mov	r4, r0
 8084472:	b1e8      	cbz	r0, 80844b0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
 8084474:	210a      	movs	r1, #10
 8084476:	3001      	adds	r0, #1
 8084478:	f006 f89a 	bl	808a5b0 <strchr>

    if (pch2 == NULL) {
 808447c:	b1c0      	cbz	r0, 80844b0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
 808447e:	4621      	mov	r1, r4
 8084480:	4628      	mov	r0, r5
 8084482:	f006 f8ad 	bl	808a5e0 <strcpy>
    dst[strlen(dst) - 1] = '\0';
 8084486:	4628      	mov	r0, r5
 8084488:	f006 fde2 	bl	808b050 <strlen>
 808448c:	2300      	movs	r3, #0
 808448e:	4428      	add	r0, r5
 8084490:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
 8084494:	4628      	mov	r0, r5
 8084496:	f005 ff33 	bl	808a300 <atof>
 808449a:	f005 f9cd 	bl	8089838 <__aeabi_d2f>
 808449e:	4604      	mov	r4, r0

    free(dst);
 80844a0:	4628      	mov	r0, r5
 80844a2:	f001 fd6d 	bl	8085f80 <free>
    free(parsed);
 80844a6:	4630      	mov	r0, r6
 80844a8:	f001 fd6a 	bl	8085f80 <free>
    return result;
 80844ac:	4620      	mov	r0, r4
 80844ae:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
 80844b0:	4800      	ldr	r0, [pc, #0]	; (80844b4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa0>)
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
 80844b2:	bd70      	pop	{r4, r5, r6, pc}
 80844b4:	cda2425f 	.word	0xcda2425f

080844b8 <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
 80844b8:	b530      	push	{r4, r5, lr}
                 const char* token) {
 80844ba:	4d07      	ldr	r5, [pc, #28]	; (80844d8 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
  _host = host;
  _user_agent = user_agent;
 80844bc:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
 80844be:	6005      	str	r5, [r0, #0]
 80844c0:	2500      	movs	r5, #0
 80844c2:	7505      	strb	r5, [r0, #20]
 80844c4:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 80844c8:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
 80844ca:	6185      	str	r5, [r0, #24]
 80844cc:	2505      	movs	r5, #5
 80844ce:	7705      	strb	r5, [r0, #28]
  _host = host;
 80844d0:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 80844d2:	60c3      	str	r3, [r0, #12]
  _port = port;
 80844d4:	6102      	str	r2, [r0, #16]
}
 80844d6:	bd30      	pop	{r4, r5, pc}
 80844d8:	0808ddc0 	.word	0x0808ddc0

080844dc <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
 80844dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80844e0:	4605      	mov	r5, r0
 80844e2:	460f      	mov	r7, r1
 80844e4:	4690      	mov	r8, r2
 80844e6:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 80844e8:	481d      	ldr	r0, [pc, #116]	; (8084560 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 80844ea:	b2e6      	uxtb	r6, r4
 80844ec:	f002 f9e5 	bl	80868ba <_ZN9TCPClient9connectedEv>
 80844f0:	bb98      	cbnz	r0, 808455a <_ZN7UbiHTTP9reconnectEPKci+0x7e>
 80844f2:	7f2b      	ldrb	r3, [r5, #28]
 80844f4:	42b3      	cmp	r3, r6
 80844f6:	d801      	bhi.n	80844fc <_ZN7UbiHTTP9reconnectEPKci+0x20>
 80844f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (_debug) {
 80844fc:	7d2b      	ldrb	r3, [r5, #20]
 80844fe:	b1c3      	cbz	r3, 8084532 <_ZN7UbiHTTP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
 8084500:	f003 fce6 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084504:	4917      	ldr	r1, [pc, #92]	; (8084564 <_ZN7UbiHTTP9reconnectEPKci+0x88>)
 8084506:	f002 fb9f 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(host);
 808450a:	f003 fce1 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808450e:	4639      	mov	r1, r7
 8084510:	f002 fb9a 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 8084514:	f003 fcdc 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084518:	4913      	ldr	r1, [pc, #76]	; (8084568 <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
 808451a:	f002 fb95 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 808451e:	f003 fcd7 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084522:	4681      	mov	r9, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8084524:	220a      	movs	r2, #10
 8084526:	4631      	mov	r1, r6
 8084528:	f002 fbaf 	bl	8086c8a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 808452c:	4648      	mov	r0, r9
 808452e:	f002 fb96 	bl	8086c5e <_ZN5Print7printlnEv>
    }
    _client_http_ubi.connect(host, port);
 8084532:	2300      	movs	r3, #0
 8084534:	fa1f f288 	uxth.w	r2, r8
 8084538:	4639      	mov	r1, r7
 808453a:	4809      	ldr	r0, [pc, #36]	; (8084560 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 808453c:	f002 fa4e 	bl	80869dc <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
 8084540:	7d2b      	ldrb	r3, [r5, #20]
 8084542:	b123      	cbz	r3, 808454e <_ZN7UbiHTTP9reconnectEPKci+0x72>
      Serial.println("Attempt finished");
 8084544:	f003 fcc4 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084548:	4908      	ldr	r1, [pc, #32]	; (808456c <_ZN7UbiHTTP9reconnectEPKci+0x90>)
 808454a:	f002 fb94 	bl	8086c76 <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
 808454e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8084552:	f002 fd15 	bl	8086f80 <delay>
 8084556:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 8084558:	e7c6      	b.n	80844e8 <_ZN7UbiHTTP9reconnectEPKci+0xc>
 808455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808455e:	bf00      	nop
 8084560:	20000850 	.word	0x20000850
 8084564:	0808d948 	.word	0x0808d948
 8084568:	0808d95e 	.word	0x0808d95e
 808456c:	0808ddcc 	.word	0x0808ddcc

08084570 <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
 8084570:	b570      	push	{r4, r5, r6, lr}
 8084572:	1e4d      	subs	r5, r1, #1
 8084574:	4606      	mov	r6, r0
 8084576:	462b      	mov	r3, r5
 8084578:	460c      	mov	r4, r1
 808457a:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
 808457e:	2100      	movs	r1, #0
 8084580:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
 8084584:	4293      	cmp	r3, r2
 8084586:	d1fb      	bne.n	8084580 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
 8084588:	7d33      	ldrb	r3, [r6, #20]
 808458a:	b14b      	cbz	r3, 80845a0 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
 808458c:	f003 fca0 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084590:	4913      	ldr	r1, [pc, #76]	; (80845e0 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
 8084592:	f002 fb70 	bl	8086c76 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8084596:	f003 fc9b 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808459a:	4912      	ldr	r1, [pc, #72]	; (80845e4 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
 808459c:	f002 fb6b 	bl	8086c76 <_ZN5Print7printlnEPKc>
 80845a0:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
 80845a4:	4810      	ldr	r0, [pc, #64]	; (80845e8 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 80845a6:	f002 f893 	bl	80866d0 <_ZN9TCPClient9availableEv>
 80845aa:	b940      	cbnz	r0, 80845be <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
 80845ac:	7d33      	ldrb	r3, [r6, #20]
 80845ae:	b1b3      	cbz	r3, 80845de <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
 80845b0:	f003 fc8e 	bl	8087ed0 <_Z16_fetch_usbserialv>
  }
}
 80845b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
 80845b8:	490c      	ldr	r1, [pc, #48]	; (80845ec <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
 80845ba:	f002 bb5c 	b.w	8086c76 <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
 80845be:	480a      	ldr	r0, [pc, #40]	; (80845e8 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 80845c0:	f002 f83b 	bl	808663a <_ZN9TCPClient4readEv>
 80845c4:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
 80845c8:	7d33      	ldrb	r3, [r6, #20]
 80845ca:	b12b      	cbz	r3, 80845d8 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
 80845cc:	f003 fc80 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80845d0:	6803      	ldr	r3, [r0, #0]
 80845d2:	7829      	ldrb	r1, [r5, #0]
 80845d4:	689b      	ldr	r3, [r3, #8]
 80845d6:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
 80845d8:	42a5      	cmp	r5, r4
 80845da:	d1e3      	bne.n	80845a4 <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
 80845dc:	e7e6      	b.n	80845ac <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
 80845de:	bd70      	pop	{r4, r5, r6, pc}
 80845e0:	0808d9b9 	.word	0x0808d9b9
 80845e4:	0808d9a5 	.word	0x0808d9a5
 80845e8:	20000850 	.word	0x20000850
 80845ec:	0808d9b8 	.word	0x0808d9b8

080845f0 <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
 80845f0:	b570      	push	{r4, r5, r6, lr}
 80845f2:	4605      	mov	r5, r0
  int timeout = 0;
 80845f4:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
 80845f6:	480d      	ldr	r0, [pc, #52]	; (808462c <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
 80845f8:	f002 f86a 	bl	80866d0 <_ZN9TCPClient9availableEv>
 80845fc:	4606      	mov	r6, r0
 80845fe:	b910      	cbnz	r0, 8084606 <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
 8084600:	69ab      	ldr	r3, [r5, #24]
 8084602:	429c      	cmp	r4, r3
 8084604:	db01      	blt.n	808460a <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
 8084606:	2001      	movs	r0, #1
 8084608:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
 808460a:	2001      	movs	r0, #1
 808460c:	f002 fcb8 	bl	8086f80 <delay>
    if (timeout > _timeout - 1) {
 8084610:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
 8084612:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
 8084614:	429c      	cmp	r4, r3
 8084616:	dbee      	blt.n	80845f6 <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
 8084618:	7d28      	ldrb	r0, [r5, #20]
 808461a:	b130      	cbz	r0, 808462a <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
 808461c:	f003 fc58 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084620:	4903      	ldr	r1, [pc, #12]	; (8084630 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
 8084622:	f002 fb28 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8084626:	4630      	mov	r0, r6
 8084628:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
 808462a:	bd70      	pop	{r4, r5, r6, pc}
 808462c:	20000850 	.word	0x20000850
 8084630:	0808d972 	.word	0x0808d972

08084634 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
 8084634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084636:	460f      	mov	r7, r1
  reconnect(_host, _port);
 8084638:	6902      	ldr	r2, [r0, #16]
 808463a:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
 808463c:	4604      	mov	r4, r0
 808463e:	461e      	mov	r6, r3
  reconnect(_host, _port);
 8084640:	f7ff ff4c 	bl	80844dc <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
 8084644:	4880      	ldr	r0, [pc, #512]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084646:	f002 f938 	bl	80868ba <_ZN9TCPClient9connectedEv>
 808464a:	4605      	mov	r5, r0
 808464c:	2800      	cmp	r0, #0
 808464e:	f000 80ec 	beq.w	808482a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
 8084652:	497e      	ldr	r1, [pc, #504]	; (808484c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8084654:	487c      	ldr	r0, [pc, #496]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084656:	f002 faf7 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 808465a:	4639      	mov	r1, r7
 808465c:	487a      	ldr	r0, [pc, #488]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808465e:	f002 faf3 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
 8084662:	497b      	ldr	r1, [pc, #492]	; (8084850 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8084664:	4878      	ldr	r0, [pc, #480]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084666:	f002 faef 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
 808466a:	497a      	ldr	r1, [pc, #488]	; (8084854 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 808466c:	4876      	ldr	r0, [pc, #472]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808466e:	f002 faeb 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
 8084672:	6861      	ldr	r1, [r4, #4]
 8084674:	4874      	ldr	r0, [pc, #464]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084676:	f002 fae7 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 808467a:	4977      	ldr	r1, [pc, #476]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808467c:	4872      	ldr	r0, [pc, #456]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808467e:	f002 fae3 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
 8084682:	4976      	ldr	r1, [pc, #472]	; (808485c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 8084684:	4870      	ldr	r0, [pc, #448]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084686:	f002 fadf 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 808468a:	68a1      	ldr	r1, [r4, #8]
 808468c:	486e      	ldr	r0, [pc, #440]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808468e:	f002 fadb 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084692:	4971      	ldr	r1, [pc, #452]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084694:	486c      	ldr	r0, [pc, #432]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084696:	f002 fad7 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
 808469a:	4971      	ldr	r1, [pc, #452]	; (8084860 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 808469c:	486a      	ldr	r0, [pc, #424]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808469e:	f002 fad3 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 80846a2:	68e1      	ldr	r1, [r4, #12]
 80846a4:	4868      	ldr	r0, [pc, #416]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846a6:	f002 facf 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 80846aa:	496b      	ldr	r1, [pc, #428]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80846ac:	4866      	ldr	r0, [pc, #408]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846ae:	f002 facb 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
 80846b2:	496c      	ldr	r1, [pc, #432]	; (8084864 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 80846b4:	4864      	ldr	r0, [pc, #400]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846b6:	f002 fac7 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
 80846ba:	496b      	ldr	r1, [pc, #428]	; (8084868 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 80846bc:	4862      	ldr	r0, [pc, #392]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846be:	f002 fac3 	bl	8086c48 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
 80846c2:	4630      	mov	r0, r6
 80846c4:	f006 fcc4 	bl	808b050 <strlen>
 80846c8:	4605      	mov	r5, r0
    _client_http_ubi.print(F("Content-Length: "));
 80846ca:	4968      	ldr	r1, [pc, #416]	; (808486c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 80846cc:	485e      	ldr	r0, [pc, #376]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846ce:	f002 fabb 	bl	8086c48 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80846d2:	2d00      	cmp	r5, #0
 80846d4:	da05      	bge.n	80846e2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
 80846d6:	212d      	movs	r1, #45	; 0x2d
 80846d8:	485b      	ldr	r0, [pc, #364]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846da:	f002 fab9 	bl	8086c50 <_ZN5Print5printEc>
            val = -n;
 80846de:	4269      	negs	r1, r5
 80846e0:	e000      	b.n	80846e4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80846e2:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80846e4:	220a      	movs	r2, #10
 80846e6:	4858      	ldr	r0, [pc, #352]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846e8:	f002 facf 	bl	8086c8a <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(content_length);
    _client_http_ubi.print(F("\r\n\r\n"));
 80846ec:	4960      	ldr	r1, [pc, #384]	; (8084870 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80846ee:	4856      	ldr	r0, [pc, #344]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846f0:	f002 faaa 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
 80846f4:	4631      	mov	r1, r6
 80846f6:	4854      	ldr	r0, [pc, #336]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80846f8:	f002 faa6 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 80846fc:	4956      	ldr	r1, [pc, #344]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80846fe:	4852      	ldr	r0, [pc, #328]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084700:	f002 faa2 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
 8084704:	4850      	ldr	r0, [pc, #320]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084706:	f001 ff5a 	bl	80865be <_ZN9TCPClient5flushEv>

    if (_debug) {
 808470a:	7d23      	ldrb	r3, [r4, #20]
 808470c:	2b00      	cmp	r3, #0
 808470e:	d071      	beq.n	80847f4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
      Serial.println(F("Making request to Ubidots:\n"));
 8084710:	f003 fbde 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084714:	4957      	ldr	r1, [pc, #348]	; (8084874 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
 8084716:	f002 faae 	bl	8086c76 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
 808471a:	f003 fbd9 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808471e:	494b      	ldr	r1, [pc, #300]	; (808484c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8084720:	f002 fa92 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8084724:	f003 fbd4 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084728:	4639      	mov	r1, r7
 808472a:	f002 fa8d 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 808472e:	f003 fbcf 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084732:	4947      	ldr	r1, [pc, #284]	; (8084850 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8084734:	f002 fa88 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 8084738:	f003 fbca 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808473c:	4945      	ldr	r1, [pc, #276]	; (8084854 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 808473e:	f002 fa83 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(_host);
 8084742:	f003 fbc5 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084746:	6861      	ldr	r1, [r4, #4]
 8084748:	f002 fa7e 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 808474c:	f003 fbc0 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084750:	4941      	ldr	r1, [pc, #260]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084752:	f002 fa79 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 8084756:	f003 fbbb 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808475a:	4940      	ldr	r1, [pc, #256]	; (808485c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 808475c:	f002 fa74 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 8084760:	f003 fbb6 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084764:	68a1      	ldr	r1, [r4, #8]
 8084766:	f002 fa6f 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 808476a:	f003 fbb1 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808476e:	493a      	ldr	r1, [pc, #232]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084770:	f002 fa6a 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 8084774:	f003 fbac 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084778:	4939      	ldr	r1, [pc, #228]	; (8084860 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 808477a:	f002 fa65 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(_token);
 808477e:	f003 fba7 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084782:	68e1      	ldr	r1, [r4, #12]
 8084784:	f002 fa60 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084788:	f003 fba2 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808478c:	4932      	ldr	r1, [pc, #200]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808478e:	f002 fa5b 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
 8084792:	f003 fb9d 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084796:	4933      	ldr	r1, [pc, #204]	; (8084864 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 8084798:	f002 fa56 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
 808479c:	f003 fb98 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80847a0:	4931      	ldr	r1, [pc, #196]	; (8084868 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 80847a2:	f002 fa51 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
 80847a6:	f003 fb93 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80847aa:	4930      	ldr	r1, [pc, #192]	; (808486c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 80847ac:	f002 fa4c 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(content_length);
 80847b0:	f003 fb8e 	bl	8087ed0 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80847b4:	2d00      	cmp	r5, #0
 80847b6:	4607      	mov	r7, r0
 80847b8:	da03      	bge.n	80847c2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
 80847ba:	212d      	movs	r1, #45	; 0x2d
 80847bc:	f002 fa48 	bl	8086c50 <_ZN5Print5printEc>
            val = -n;
 80847c0:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80847c2:	220a      	movs	r2, #10
 80847c4:	4629      	mov	r1, r5
 80847c6:	4638      	mov	r0, r7
 80847c8:	f002 fa5f 	bl	8086c8a <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
 80847cc:	f003 fb80 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80847d0:	4927      	ldr	r1, [pc, #156]	; (8084870 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80847d2:	f002 fa39 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(payload);
 80847d6:	f003 fb7b 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80847da:	4631      	mov	r1, r6
 80847dc:	f002 fa34 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 80847e0:	f003 fb76 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80847e4:	491c      	ldr	r1, [pc, #112]	; (8084858 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80847e6:	f002 fa2f 	bl	8086c48 <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
 80847ea:	f003 fb71 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80847ee:	4922      	ldr	r1, [pc, #136]	; (8084878 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
 80847f0:	f002 fa41 	bl	8086c76 <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
 80847f4:	4620      	mov	r0, r4
 80847f6:	f7ff fefb 	bl	80845f0 <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
 80847fa:	7d23      	ldrb	r3, [r4, #20]
 80847fc:	b90b      	cbnz	r3, 8084802 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
 80847fe:	2401      	movs	r4, #1
 8084800:	e01d      	b.n	808483e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
 8084802:	f003 fb65 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084806:	491d      	ldr	r1, [pc, #116]	; (808487c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
 8084808:	f002 fa35 	bl	8086c76 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
 808480c:	480e      	ldr	r0, [pc, #56]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808480e:	f001 ff5f 	bl	80866d0 <_ZN9TCPClient9availableEv>
 8084812:	2800      	cmp	r0, #0
 8084814:	d0f3      	beq.n	80847fe <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
        char c = _client_http_ubi.read();
 8084816:	480c      	ldr	r0, [pc, #48]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084818:	f001 ff0f 	bl	808663a <_ZN9TCPClient4readEv>
 808481c:	4604      	mov	r4, r0
        Serial.print(c);
 808481e:	f003 fb57 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084822:	b2e1      	uxtb	r1, r4
 8084824:	f002 fa14 	bl	8086c50 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
 8084828:	e7f0      	b.n	808480c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
    }

    result = true;

  } else {
    if (_debug) {
 808482a:	7d23      	ldrb	r3, [r4, #20]
 808482c:	b133      	cbz	r3, 808483c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
      Serial.println("Could not send data to ubidots using HTTP");
 808482e:	f003 fb4f 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084832:	4913      	ldr	r1, [pc, #76]	; (8084880 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
 8084834:	f002 fa1f 	bl	8086c76 <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
 8084838:	462c      	mov	r4, r5
 808483a:	e000      	b.n	808483e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
 808483c:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
 808483e:	4802      	ldr	r0, [pc, #8]	; (8084848 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084840:	f001 ff82 	bl	8086748 <_ZN9TCPClient4stopEv>
  return result;
}
 8084844:	4620      	mov	r0, r4
 8084846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084848:	20000850 	.word	0x20000850
 808484c:	0808dddd 	.word	0x0808dddd
 8084850:	0808ddf5 	.word	0x0808ddf5
 8084854:	0808de01 	.word	0x0808de01
 8084858:	0808df25 	.word	0x0808df25
 808485c:	0808de08 	.word	0x0808de08
 8084860:	0808de15 	.word	0x0808de15
 8084864:	0808de24 	.word	0x0808de24
 8084868:	0808de38 	.word	0x0808de38
 808486c:	0808de59 	.word	0x0808de59
 8084870:	0808df23 	.word	0x0808df23
 8084874:	0808de6a 	.word	0x0808de6a
 8084878:	0808de86 	.word	0x0808de86
 808487c:	0808dea4 	.word	0x0808dea4
 8084880:	0808dec0 	.word	0x0808dec0

08084884 <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
 8084884:	b570      	push	{r4, r5, r6, lr}
 8084886:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 8084888:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
 808488a:	460e      	mov	r6, r1
 808488c:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 808488e:	6841      	ldr	r1, [r0, #4]
 8084890:	2250      	movs	r2, #80	; 0x50
 8084892:	4865      	ldr	r0, [pc, #404]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084894:	f002 f8a2 	bl	80869dc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
 8084898:	4620      	mov	r0, r4
 808489a:	2250      	movs	r2, #80	; 0x50
 808489c:	6861      	ldr	r1, [r4, #4]
 808489e:	f7ff fe1d 	bl	80844dc <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
 80848a2:	4861      	ldr	r0, [pc, #388]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848a4:	f002 f809 	bl	80868ba <_ZN9TCPClient9connectedEv>
 80848a8:	2800      	cmp	r0, #0
 80848aa:	f000 80b2 	beq.w	8084a12 <_ZN7UbiHTTP3getEPKcS1_+0x18e>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
 80848ae:	495f      	ldr	r1, [pc, #380]	; (8084a2c <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 80848b0:	485d      	ldr	r0, [pc, #372]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848b2:	f002 f9c9 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 80848b6:	4631      	mov	r1, r6
 80848b8:	485b      	ldr	r0, [pc, #364]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848ba:	f002 f9c5 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
 80848be:	495c      	ldr	r1, [pc, #368]	; (8084a30 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 80848c0:	4859      	ldr	r0, [pc, #356]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848c2:	f002 f9c1 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
 80848c6:	4629      	mov	r1, r5
 80848c8:	4857      	ldr	r0, [pc, #348]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848ca:	f002 f9bd 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
 80848ce:	4959      	ldr	r1, [pc, #356]	; (8084a34 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 80848d0:	4855      	ldr	r0, [pc, #340]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848d2:	f002 f9b9 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
 80848d6:	4958      	ldr	r1, [pc, #352]	; (8084a38 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 80848d8:	4853      	ldr	r0, [pc, #332]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848da:	f002 f9b5 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
 80848de:	4957      	ldr	r1, [pc, #348]	; (8084a3c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 80848e0:	4851      	ldr	r0, [pc, #324]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848e2:	f002 f9b1 	bl	8086c48 <_ZN5Print5printEPKc>
 80848e6:	220a      	movs	r2, #10
 80848e8:	2150      	movs	r1, #80	; 0x50
 80848ea:	484f      	ldr	r0, [pc, #316]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848ec:	f002 f9cd 	bl	8086c8a <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
    _client_http_ubi.print("\r\n");
 80848f0:	4953      	ldr	r1, [pc, #332]	; (8084a40 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80848f2:	484d      	ldr	r0, [pc, #308]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848f4:	f002 f9a8 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
 80848f8:	4952      	ldr	r1, [pc, #328]	; (8084a44 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 80848fa:	484b      	ldr	r0, [pc, #300]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80848fc:	f002 f9a4 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 8084900:	68a1      	ldr	r1, [r4, #8]
 8084902:	4849      	ldr	r0, [pc, #292]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084904:	f002 f9a0 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 8084908:	494d      	ldr	r1, [pc, #308]	; (8084a40 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 808490a:	4847      	ldr	r0, [pc, #284]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808490c:	f002 f99c 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
 8084910:	494d      	ldr	r1, [pc, #308]	; (8084a48 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 8084912:	4845      	ldr	r0, [pc, #276]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084914:	f002 f998 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 8084918:	68e1      	ldr	r1, [r4, #12]
 808491a:	4843      	ldr	r0, [pc, #268]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808491c:	f002 f994 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 8084920:	4947      	ldr	r1, [pc, #284]	; (8084a40 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084922:	4841      	ldr	r0, [pc, #260]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084924:	f002 f990 	bl	8086c48 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
 8084928:	4948      	ldr	r1, [pc, #288]	; (8084a4c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 808492a:	483f      	ldr	r0, [pc, #252]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808492c:	f002 f98c 	bl	8086c48 <_ZN5Print5printEPKc>

    if (_debug) {
 8084930:	7d23      	ldrb	r3, [r4, #20]
 8084932:	2b00      	cmp	r3, #0
 8084934:	d050      	beq.n	80849d8 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
 8084936:	f003 facb 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808493a:	493c      	ldr	r1, [pc, #240]	; (8084a2c <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 808493c:	f002 f984 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8084940:	f003 fac6 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084944:	4631      	mov	r1, r6
 8084946:	f002 f97f 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("/");
 808494a:	f003 fac1 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808494e:	4938      	ldr	r1, [pc, #224]	; (8084a30 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8084950:	f002 f97a 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 8084954:	f003 fabc 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084958:	4629      	mov	r1, r5
 808495a:	f002 f975 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("/lv");
 808495e:	f003 fab7 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084962:	4934      	ldr	r1, [pc, #208]	; (8084a34 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 8084964:	f002 f970 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 8084968:	f003 fab2 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808496c:	4932      	ldr	r1, [pc, #200]	; (8084a38 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 808496e:	f002 f96b 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 8084972:	f003 faad 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084976:	4931      	ldr	r1, [pc, #196]	; (8084a3c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8084978:	f002 f966 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
 808497c:	f003 faa8 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084980:	220a      	movs	r2, #10
 8084982:	2150      	movs	r1, #80	; 0x50
 8084984:	f002 f981 	bl	8086c8a <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
 8084988:	f003 faa2 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808498c:	492c      	ldr	r1, [pc, #176]	; (8084a40 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 808498e:	f002 f95b 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 8084992:	f003 fa9d 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084996:	492b      	ldr	r1, [pc, #172]	; (8084a44 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 8084998:	f002 f956 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 808499c:	f003 fa98 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80849a0:	68a1      	ldr	r1, [r4, #8]
 80849a2:	f002 f951 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 80849a6:	f003 fa93 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80849aa:	4925      	ldr	r1, [pc, #148]	; (8084a40 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80849ac:	f002 f94c 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 80849b0:	f003 fa8e 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80849b4:	4924      	ldr	r1, [pc, #144]	; (8084a48 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 80849b6:	f002 f947 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print(_token);
 80849ba:	f003 fa89 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80849be:	68e1      	ldr	r1, [r4, #12]
 80849c0:	f002 f942 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 80849c4:	f003 fa84 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80849c8:	491d      	ldr	r1, [pc, #116]	; (8084a40 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80849ca:	f002 f93d 	bl	8086c48 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
 80849ce:	f003 fa7f 	bl	8087ed0 <_Z16_fetch_usbserialv>
 80849d2:	491e      	ldr	r1, [pc, #120]	; (8084a4c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 80849d4:	f002 f938 	bl	8086c48 <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
 80849d8:	4620      	mov	r0, r4
 80849da:	f7ff fe09 	bl	80845f0 <_ZN7UbiHTTP16waitServerAnswerEv>
 80849de:	b920      	cbnz	r0, 80849ea <_ZN7UbiHTTP3getEPKcS1_+0x166>
      _client_http_ubi.stop();
 80849e0:	4811      	ldr	r0, [pc, #68]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80849e2:	f001 feb1 	bl	8086748 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 80849e6:	4c1a      	ldr	r4, [pc, #104]	; (8084a50 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
 80849e8:	e01c      	b.n	8084a24 <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80849ea:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80849ee:	f001 fabf 	bl	8085f70 <malloc>
 80849f2:	4605      	mov	r5, r0
    readServerAnswer(response);
 80849f4:	4601      	mov	r1, r0
 80849f6:	4620      	mov	r0, r4
 80849f8:	f7ff fdba 	bl	8084570 <_ZN7UbiHTTP16readServerAnswerEPc>
 80849fc:	4628      	mov	r0, r5
 80849fe:	f7ff fd09 	bl	8084414 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>
 8084a02:	4604      	mov	r4, r0

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
 8084a04:	4808      	ldr	r0, [pc, #32]	; (8084a28 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084a06:	f001 fe9f 	bl	8086748 <_ZN9TCPClient4stopEv>
    free(response);
 8084a0a:	4628      	mov	r0, r5
 8084a0c:	f001 fab8 	bl	8085f80 <free>
 8084a10:	e008      	b.n	8084a24 <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
    return value;
  }

  if (_debug) {
 8084a12:	7d23      	ldrb	r3, [r4, #20]
 8084a14:	2b00      	cmp	r3, #0
 8084a16:	d0e3      	beq.n	80849e0 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
 8084a18:	f003 fa5a 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084a1c:	490d      	ldr	r1, [pc, #52]	; (8084a54 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
 8084a1e:	f002 f92a 	bl	8086c76 <_ZN5Print7printlnEPKc>
 8084a22:	e7dd      	b.n	80849e0 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
 8084a24:	4620      	mov	r0, r4
 8084a26:	bd70      	pop	{r4, r5, r6, pc}
 8084a28:	20000850 	.word	0x20000850
 8084a2c:	0808deea 	.word	0x0808deea
 8084a30:	0808deff 	.word	0x0808deff
 8084a34:	0808df01 	.word	0x0808df01
 8084a38:	0808ddf5 	.word	0x0808ddf5
 8084a3c:	0808de01 	.word	0x0808de01
 8084a40:	0808df25 	.word	0x0808df25
 8084a44:	0808de08 	.word	0x0808de08
 8084a48:	0808de15 	.word	0x0808de15
 8084a4c:	0808df05 	.word	0x0808df05
 8084a50:	cda2425f 	.word	0xcda2425f
 8084a54:	0808df28 	.word	0x0808df28

08084a58 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

 8084a58:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
 8084a5a:	4c06      	ldr	r4, [pc, #24]	; (8084a74 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
 8084a5c:	f000 ff34 	bl	80858c8 <HAL_Pin_Map>
 8084a60:	4620      	mov	r0, r4
 8084a62:	f001 ff99 	bl	8086998 <_ZN9TCPClientC1Ev>
 8084a66:	4620      	mov	r0, r4
 8084a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084a6c:	4a02      	ldr	r2, [pc, #8]	; (8084a78 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
 8084a6e:	4903      	ldr	r1, [pc, #12]	; (8084a7c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
 8084a70:	f004 b822 	b.w	8088ab8 <__aeabi_atexit>
 8084a74:	20000850 	.word	0x20000850
 8084a78:	20000140 	.word	0x20000140
 8084a7c:	08083a51 	.word	0x08083a51

08084a80 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
 8084a80:	6803      	ldr	r3, [r0, #0]
 8084a82:	4718      	bx	r3

08084a84 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8084a84:	2a01      	cmp	r2, #1
 8084a86:	d002      	beq.n	8084a8e <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 8084a88:	2a02      	cmp	r2, #2
 8084a8a:	d002      	beq.n	8084a92 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
 8084a8c:	e004      	b.n	8084a98 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8084a8e:	6001      	str	r1, [r0, #0]
	      break;
 8084a90:	e002      	b.n	8084a98 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8084a92:	680b      	ldr	r3, [r1, #0]
 8084a94:	b100      	cbz	r0, 8084a98 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
 8084a96:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8084a98:	2000      	movs	r0, #0
 8084a9a:	4770      	bx	lr

08084a9c <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
 8084a9c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8084a9e:	201c      	movs	r0, #28
 8084aa0:	f7fb fafd 	bl	808009e <_Znwj>
 8084aa4:	4604      	mov	r4, r0
 8084aa6:	b148      	cbz	r0, 8084abc <_Z10builderTcpv+0x20>
 8084aa8:	4b06      	ldr	r3, [pc, #24]	; (8084ac4 <_Z10builderTcpv+0x28>)
 8084aaa:	4907      	ldr	r1, [pc, #28]	; (8084ac8 <_Z10builderTcpv+0x2c>)
 8084aac:	681b      	ldr	r3, [r3, #0]
 8084aae:	f242 3234 	movw	r2, #9012	; 0x2334
 8084ab2:	9300      	str	r3, [sp, #0]
 8084ab4:	6809      	ldr	r1, [r1, #0]
 8084ab6:	4b05      	ldr	r3, [pc, #20]	; (8084acc <_Z10builderTcpv+0x30>)
 8084ab8:	f7fe ffee 	bl	8083a98 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
 8084abc:	4620      	mov	r0, r4
 8084abe:	b002      	add	sp, #8
 8084ac0:	bd10      	pop	{r4, pc}
 8084ac2:	bf00      	nop
 8084ac4:	200008a4 	.word	0x200008a4
 8084ac8:	200008a8 	.word	0x200008a8
 8084acc:	0808db2a 	.word	0x0808db2a

08084ad0 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
 8084ad0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
 8084ad2:	2020      	movs	r0, #32
 8084ad4:	f7fb fae3 	bl	808009e <_Znwj>
 8084ad8:	4604      	mov	r4, r0
 8084ada:	b140      	cbz	r0, 8084aee <_Z11builderHttpv+0x1e>
 8084adc:	4b05      	ldr	r3, [pc, #20]	; (8084af4 <_Z11builderHttpv+0x24>)
 8084ade:	4906      	ldr	r1, [pc, #24]	; (8084af8 <_Z11builderHttpv+0x28>)
 8084ae0:	681b      	ldr	r3, [r3, #0]
 8084ae2:	2250      	movs	r2, #80	; 0x50
 8084ae4:	9300      	str	r3, [sp, #0]
 8084ae6:	6809      	ldr	r1, [r1, #0]
 8084ae8:	4b04      	ldr	r3, [pc, #16]	; (8084afc <_Z11builderHttpv+0x2c>)
 8084aea:	f7ff fce5 	bl	80844b8 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
 8084aee:	4620      	mov	r0, r4
 8084af0:	b002      	add	sp, #8
 8084af2:	bd10      	pop	{r4, pc}
 8084af4:	200008a4 	.word	0x200008a4
 8084af8:	200008a8 	.word	0x200008a8
 8084afc:	0808db2a 	.word	0x0808db2a

08084b00 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
 8084b00:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8084b02:	201c      	movs	r0, #28
 8084b04:	f7fb facb 	bl	808009e <_Znwj>
 8084b08:	4604      	mov	r4, r0
 8084b0a:	b148      	cbz	r0, 8084b20 <_Z10builderUdpv+0x20>
 8084b0c:	4b06      	ldr	r3, [pc, #24]	; (8084b28 <_Z10builderUdpv+0x28>)
 8084b0e:	4907      	ldr	r1, [pc, #28]	; (8084b2c <_Z10builderUdpv+0x2c>)
 8084b10:	681b      	ldr	r3, [r3, #0]
 8084b12:	f242 3234 	movw	r2, #9012	; 0x2334
 8084b16:	9300      	str	r3, [sp, #0]
 8084b18:	6809      	ldr	r1, [r1, #0]
 8084b1a:	4b05      	ldr	r3, [pc, #20]	; (8084b30 <_Z10builderUdpv+0x30>)
 8084b1c:	f000 f9e2 	bl	8084ee4 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
 8084b20:	4620      	mov	r0, r4
 8084b22:	b002      	add	sp, #8
 8084b24:	bd10      	pop	{r4, pc}
 8084b26:	bf00      	nop
 8084b28:	200008a4 	.word	0x200008a4
 8084b2c:	200008a8 	.word	0x200008a8
 8084b30:	0808db2a 	.word	0x0808db2a

08084b34 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
 8084b34:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
 8084b36:	2014      	movs	r0, #20
 8084b38:	f7fb fab1 	bl	808009e <_Znwj>
 8084b3c:	4604      	mov	r4, r0
 8084b3e:	b140      	cbz	r0, 8084b52 <_Z15builderParticlev+0x1e>
 8084b40:	4b05      	ldr	r3, [pc, #20]	; (8084b58 <_Z15builderParticlev+0x24>)
 8084b42:	4906      	ldr	r1, [pc, #24]	; (8084b5c <_Z15builderParticlev+0x28>)
 8084b44:	681b      	ldr	r3, [r3, #0]
 8084b46:	9300      	str	r3, [sp, #0]
 8084b48:	2300      	movs	r3, #0
 8084b4a:	461a      	mov	r2, r3
 8084b4c:	6809      	ldr	r1, [r1, #0]
 8084b4e:	f000 fa71 	bl	8085034 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
 8084b52:	4620      	mov	r0, r4
 8084b54:	b002      	add	sp, #8
 8084b56:	bd10      	pop	{r4, pc}
 8084b58:	200008a4 	.word	0x200008a4
 8084b5c:	200008a8 	.word	0x200008a8

08084b60 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 8084b60:	b510      	push	{r4, lr}
 8084b62:	4604      	mov	r4, r0
 8084b64:	4b05      	ldr	r3, [pc, #20]	; (8084b7c <_ZN3UDPD1Ev+0x1c>)
 8084b66:	6003      	str	r3, [r0, #0]
 8084b68:	3364      	adds	r3, #100	; 0x64
 8084b6a:	6103      	str	r3, [r0, #16]
 8084b6c:	f002 fab0 	bl	80870d0 <_ZN3UDP4stopEv>
 8084b70:	4620      	mov	r0, r4
 8084b72:	f002 fb91 	bl	8087298 <_ZN3UDP13releaseBufferEv>
 8084b76:	4620      	mov	r0, r4
 8084b78:	bd10      	pop	{r4, pc}
 8084b7a:	bf00      	nop
 8084b7c:	0808e1b4 	.word	0x0808e1b4

08084b80 <_ZN3UDPD0Ev>:
 8084b80:	b510      	push	{r4, lr}
 8084b82:	4604      	mov	r4, r0
 8084b84:	f7ff ffec 	bl	8084b60 <_ZN3UDPD1Ev>
 8084b88:	4620      	mov	r0, r4
 8084b8a:	213c      	movs	r1, #60	; 0x3c
 8084b8c:	f003 ffa2 	bl	8088ad4 <_ZdlPvj>
 8084b90:	4620      	mov	r0, r4
 8084b92:	bd10      	pop	{r4, pc}

08084b94 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8084b94:	b510      	push	{r4, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084b96:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8084b98:	b086      	sub	sp, #24
 8084b9a:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084b9c:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8084b9e:	b121      	cbz	r1, 8084baa <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084ba0:	4b0f      	ldr	r3, [pc, #60]	; (8084be0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084ba2:	9102      	str	r1, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084ba4:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8084ba6:	4b0f      	ldr	r3, [pc, #60]	; (8084be4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
 8084ba8:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084baa:	ab02      	add	r3, sp, #8
 8084bac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8084bb0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8084bb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8084bb8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8084bbc:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084bc0:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8084bc2:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8084bc6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8084bc8:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084bca:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8084bcc:	9104      	str	r1, [sp, #16]
 8084bce:	68e1      	ldr	r1, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084bd0:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 8084bd2:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8084bd4:	9105      	str	r1, [sp, #20]
 8084bd6:	f7fb fb26 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 8084bda:	4620      	mov	r0, r4
 8084bdc:	b006      	add	sp, #24
 8084bde:	bd10      	pop	{r4, pc}
 8084be0:	08084a81 	.word	0x08084a81
 8084be4:	08084a85 	.word	0x08084a85

08084be8 <_ZN10UbiBuilder7builderEv>:
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084be8:	f100 0108 	add.w	r1, r0, #8
 8084bec:	460b      	mov	r3, r1
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
 8084bee:	b570      	push	{r4, r5, r6, lr}
 8084bf0:	68c2      	ldr	r2, [r0, #12]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8084bf2:	b14a      	cbz	r2, 8084c08 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8084bf4:	7804      	ldrb	r4, [r0, #0]
 8084bf6:	7c15      	ldrb	r5, [r2, #16]
 8084bf8:	42a5      	cmp	r5, r4
 8084bfa:	bf3a      	itte	cc
 8084bfc:	68d4      	ldrcc	r4, [r2, #12]
 8084bfe:	461a      	movcc	r2, r3
 8084c00:	6894      	ldrcs	r4, [r2, #8]
 8084c02:	4613      	mov	r3, r2
 8084c04:	4622      	mov	r2, r4
 8084c06:	e7f4      	b.n	8084bf2 <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8084c08:	4299      	cmp	r1, r3
 8084c0a:	d004      	beq.n	8084c16 <_ZN10UbiBuilder7builderEv+0x2e>
 8084c0c:	7800      	ldrb	r0, [r0, #0]
 8084c0e:	7c1a      	ldrb	r2, [r3, #16]
 8084c10:	4290      	cmp	r0, r2
 8084c12:	bf38      	it	cc
 8084c14:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084c16:	69da      	ldr	r2, [r3, #28]
 8084c18:	b90a      	cbnz	r2, 8084c1e <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
 8084c1a:	f004 f827 	bl	8088c6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084c1e:	6a1a      	ldr	r2, [r3, #32]
 8084c20:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
 8084c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084c28:	4710      	bx	r2

08084c2a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084c2a:	b570      	push	{r4, r5, r6, lr}
 8084c2c:	4604      	mov	r4, r0
 8084c2e:	688b      	ldr	r3, [r1, #8]
 8084c30:	4616      	mov	r6, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084c32:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
 8084c34:	2201      	movs	r2, #1
      while (__x != 0)
 8084c36:	b153      	cbz	r3, 8084c4e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x24>
 8084c38:	7830      	ldrb	r0, [r6, #0]
 8084c3a:	7c1a      	ldrb	r2, [r3, #16]
 8084c3c:	461d      	mov	r5, r3
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 8084c3e:	4290      	cmp	r0, r2
 8084c40:	bf35      	itete	cc
 8084c42:	6898      	ldrcc	r0, [r3, #8]
 8084c44:	68d8      	ldrcs	r0, [r3, #12]
 8084c46:	2201      	movcc	r2, #1
 8084c48:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084c4a:	4603      	mov	r3, r0
 8084c4c:	e7f3      	b.n	8084c36 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
 8084c4e:	b132      	cbz	r2, 8084c5e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
	{
	  if (__j == begin())
 8084c50:	68ca      	ldr	r2, [r1, #12]
 8084c52:	4295      	cmp	r5, r2
 8084c54:	d00a      	beq.n	8084c6c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x42>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 8084c56:	4628      	mov	r0, r5
 8084c58:	f003 ffa3 	bl	8088ba2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8084c5c:	e000      	b.n	8084c60 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
 8084c5e:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8084c60:	7833      	ldrb	r3, [r6, #0]
 8084c62:	7c02      	ldrb	r2, [r0, #16]
 8084c64:	429a      	cmp	r2, r3
 8084c66:	f04f 0300 	mov.w	r3, #0
 8084c6a:	d202      	bcs.n	8084c72 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x48>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8084c6c:	e884 0028 	stmia.w	r4, {r3, r5}
 8084c70:	e001      	b.n	8084c76 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4c>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
 8084c72:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 8084c76:	4620      	mov	r0, r4
 8084c78:	bd70      	pop	{r4, r5, r6, pc}

08084c7a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084c7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8084c7e:	461f      	mov	r7, r3
 8084c80:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8084c82:	2024      	movs	r0, #36	; 0x24
 8084c84:	460c      	mov	r4, r1
 8084c86:	f7fb fa0a 	bl	808009e <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8084c8a:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8084c8c:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8084c90:	bf18      	it	ne
 8084c92:	781b      	ldrbne	r3, [r3, #0]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084c94:	f106 0704 	add.w	r7, r6, #4
 8084c98:	bf1e      	ittt	ne
 8084c9a:	7403      	strbne	r3, [r0, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084c9c:	2300      	movne	r3, #0
 8084c9e:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
 8084ca0:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8084ca2:	4605      	mov	r5, r0
 8084ca4:	d108      	bne.n	8084cb8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
 8084ca6:	6973      	ldr	r3, [r6, #20]
 8084ca8:	2b00      	cmp	r3, #0
 8084caa:	d05c      	beq.n	8084d66 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8084cac:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
 8084cae:	7c03      	ldrb	r3, [r0, #16]
 8084cb0:	7c0a      	ldrb	r2, [r1, #16]
 8084cb2:	429a      	cmp	r2, r3
 8084cb4:	d33a      	bcc.n	8084d2c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
 8084cb6:	e056      	b.n	8084d66 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
 8084cb8:	f890 9010 	ldrb.w	r9, [r0, #16]
 8084cbc:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8084cbe:	4599      	cmp	r9, r3
 8084cc0:	d217      	bcs.n	8084cf2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
 8084cc2:	68f3      	ldr	r3, [r6, #12]
 8084cc4:	4620      	mov	r0, r4
 8084cc6:	42a3      	cmp	r3, r4
 8084cc8:	d011      	beq.n	8084cee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 8084cca:	f003 ff6a 	bl	8088ba2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8084cce:	7c03      	ldrb	r3, [r0, #16]
 8084cd0:	454b      	cmp	r3, r9
 8084cd2:	d205      	bcs.n	8084ce0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
 8084cd4:	68c3      	ldr	r3, [r0, #12]
 8084cd6:	2b00      	cmp	r3, #0
 8084cd8:	bf14      	ite	ne
 8084cda:	4620      	movne	r0, r4
 8084cdc:	2400      	moveq	r4, #0
 8084cde:	e006      	b.n	8084cee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 8084ce0:	4668      	mov	r0, sp
 8084ce2:	4642      	mov	r2, r8
 8084ce4:	4631      	mov	r1, r6
 8084ce6:	f7ff ffa0 	bl	8084c2a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8084cea:	9c00      	ldr	r4, [sp, #0]
 8084cec:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 8084cee:	4601      	mov	r1, r0
 8084cf0:	e01a      	b.n	8084d28 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8084cf2:	d92f      	bls.n	8084d54 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
 8084cf4:	6933      	ldr	r3, [r6, #16]
 8084cf6:	42a3      	cmp	r3, r4
 8084cf8:	d013      	beq.n	8084d22 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
 8084cfa:	4620      	mov	r0, r4
 8084cfc:	f003 ff3e 	bl	8088b7c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8084d00:	7c03      	ldrb	r3, [r0, #16]
 8084d02:	454b      	cmp	r3, r9
 8084d04:	d905      	bls.n	8084d12 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
 8084d06:	68e3      	ldr	r3, [r4, #12]
 8084d08:	2b00      	cmp	r3, #0
 8084d0a:	bf14      	ite	ne
 8084d0c:	4604      	movne	r4, r0
 8084d0e:	2000      	moveq	r0, #0
 8084d10:	e008      	b.n	8084d24 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 8084d12:	4668      	mov	r0, sp
 8084d14:	4642      	mov	r2, r8
 8084d16:	4631      	mov	r1, r6
 8084d18:	f7ff ff87 	bl	8084c2a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8084d1c:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8084d20:	e000      	b.n	8084d24 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
 8084d22:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 8084d24:	4621      	mov	r1, r4
 8084d26:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
 8084d28:	b1a1      	cbz	r1, 8084d54 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
 8084d2a:	b944      	cbnz	r4, 8084d3e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 8084d2c:	428f      	cmp	r7, r1
 8084d2e:	d006      	beq.n	8084d3e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 8084d30:	7c08      	ldrb	r0, [r1, #16]
 8084d32:	7c2b      	ldrb	r3, [r5, #16]
 8084d34:	4283      	cmp	r3, r0
 8084d36:	bf2c      	ite	cs
 8084d38:	2000      	movcs	r0, #0
 8084d3a:	2001      	movcc	r0, #1
 8084d3c:	e000      	b.n	8084d40 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
 8084d3e:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8084d40:	463b      	mov	r3, r7
 8084d42:	460a      	mov	r2, r1
 8084d44:	4629      	mov	r1, r5
 8084d46:	f003 ff2e 	bl	8088ba6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 8084d4a:	6973      	ldr	r3, [r6, #20]
 8084d4c:	4628      	mov	r0, r5
 8084d4e:	3301      	adds	r3, #1
 8084d50:	6173      	str	r3, [r6, #20]
 8084d52:	e010      	b.n	8084d76 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084d54:	f105 0014 	add.w	r0, r5, #20
 8084d58:	f7fb fa65 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8084d5c:	4628      	mov	r0, r5
 8084d5e:	f7fb f9a2 	bl	80800a6 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
 8084d62:	4620      	mov	r0, r4
 8084d64:	e007      	b.n	8084d76 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
 8084d66:	4631      	mov	r1, r6
 8084d68:	4642      	mov	r2, r8
 8084d6a:	4668      	mov	r0, sp
 8084d6c:	f7ff ff5d 	bl	8084c2a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8084d70:	9c00      	ldr	r4, [sp, #0]
 8084d72:	9901      	ldr	r1, [sp, #4]
 8084d74:	e7d8      	b.n	8084d28 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8084d76:	b003      	add	sp, #12
 8084d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08084d7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8084d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084d7e:	1d04      	adds	r4, r0, #4
 8084d80:	460a      	mov	r2, r1
 8084d82:	4621      	mov	r1, r4
 8084d84:	6883      	ldr	r3, [r0, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8084d86:	b14b      	cbz	r3, 8084d9c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8084d88:	7815      	ldrb	r5, [r2, #0]
 8084d8a:	7c1e      	ldrb	r6, [r3, #16]
 8084d8c:	42ae      	cmp	r6, r5
 8084d8e:	bf3a      	itte	cc
 8084d90:	68dd      	ldrcc	r5, [r3, #12]
 8084d92:	460b      	movcc	r3, r1
 8084d94:	689d      	ldrcs	r5, [r3, #8]
 8084d96:	4619      	mov	r1, r3
 8084d98:	462b      	mov	r3, r5
 8084d9a:	e7f4      	b.n	8084d86 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8084d9c:	428c      	cmp	r4, r1
 8084d9e:	d003      	beq.n	8084da8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
 8084da0:	7814      	ldrb	r4, [r2, #0]
 8084da2:	7c0b      	ldrb	r3, [r1, #16]
 8084da4:	429c      	cmp	r4, r3
 8084da6:	d208      	bcs.n	8084dba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8084da8:	ab04      	add	r3, sp, #16
 8084daa:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8084dae:	aa02      	add	r2, sp, #8
 8084db0:	9200      	str	r2, [sp, #0]
 8084db2:	4a04      	ldr	r2, [pc, #16]	; (8084dc4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
 8084db4:	f7ff ff61 	bl	8084c7a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8084db8:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
 8084dba:	f101 0014 	add.w	r0, r1, #20
      }
 8084dbe:	b004      	add	sp, #16
 8084dc0:	bd70      	pop	{r4, r5, r6, pc}
 8084dc2:	bf00      	nop
 8084dc4:	0808df4e 	.word	0x0808df4e

08084dc8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
 8084dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8084dcc:	4604      	mov	r4, r0
 8084dce:	461d      	mov	r5, r3
 8084dd0:	4689      	mov	r9, r1
 8084dd2:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 8084dd4:	2100      	movs	r1, #0
 8084dd6:	2210      	movs	r2, #16
 8084dd8:	3008      	adds	r0, #8
 8084dda:	f005 fbb9 	bl	808a550 <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
  command_list[UBI_TCP] = &builderTcp;
 8084dde:	2301      	movs	r3, #1
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
 8084de0:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
 8084de2:	ad02      	add	r5, sp, #8
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 8084de4:	f104 0208 	add.w	r2, r4, #8
 8084de8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8084dec:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 8084dee:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 8084df0:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
 8084df2:	6162      	str	r2, [r4, #20]
 8084df4:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 8084df6:	61a7      	str	r7, [r4, #24]
 8084df8:	4630      	mov	r0, r6
 8084dfa:	f7ff ffbf 	bl	8084d7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8084dfe:	4915      	ldr	r1, [pc, #84]	; (8084e54 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
 8084e00:	f7ff fec8 	bl	8084b94 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
 8084e04:	4629      	mov	r1, r5
 8084e06:	4630      	mov	r0, r6
 8084e08:	f88d 7007 	strb.w	r7, [sp, #7]
 8084e0c:	f7ff ffb6 	bl	8084d7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8084e10:	4911      	ldr	r1, [pc, #68]	; (8084e58 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
 8084e12:	f7ff febf 	bl	8084b94 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
 8084e16:	2302      	movs	r3, #2
 8084e18:	4629      	mov	r1, r5
 8084e1a:	4630      	mov	r0, r6
 8084e1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8084e20:	f7ff ffac 	bl	8084d7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8084e24:	490d      	ldr	r1, [pc, #52]	; (8084e5c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
 8084e26:	f7ff feb5 	bl	8084b94 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
 8084e2a:	2303      	movs	r3, #3
 8084e2c:	4629      	mov	r1, r5
 8084e2e:	4630      	mov	r0, r6
 8084e30:	f88d 3007 	strb.w	r3, [sp, #7]
 8084e34:	f7ff ffa2 	bl	8084d7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8084e38:	4909      	ldr	r1, [pc, #36]	; (8084e60 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
 8084e3a:	f7ff feab 	bl	8084b94 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
  _token = token;
}
 8084e3e:	4620      	mov	r0, r4
  _iot_protocol = iot_protocol;
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
 8084e40:	4b08      	ldr	r3, [pc, #32]	; (8084e64 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
 8084e42:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
 8084e46:	4b08      	ldr	r3, [pc, #32]	; (8084e68 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
 8084e48:	f8c3 8000 	str.w	r8, [r3]
}
 8084e4c:	b003      	add	sp, #12
 8084e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8084e52:	bf00      	nop
 8084e54:	08084a9d 	.word	0x08084a9d
 8084e58:	08084ad1 	.word	0x08084ad1
 8084e5c:	08084b01 	.word	0x08084b01
 8084e60:	08084b35 	.word	0x08084b35
 8084e64:	200008a8 	.word	0x200008a8
 8084e68:	200008a4 	.word	0x200008a4

08084e6c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
 8084e6c:	b570      	push	{r4, r5, r6, lr}
 8084e6e:	4d10      	ldr	r5, [pc, #64]	; (8084eb0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
 8084e70:	f000 fd2a 	bl	80858c8 <HAL_Pin_Map>
 8084e74:	4c0f      	ldr	r4, [pc, #60]	; (8084eb4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
 8084e76:	4e10      	ldr	r6, [pc, #64]	; (8084eb8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
 8084e78:	4628      	mov	r0, r5
 8084e7a:	f001 fd8d 	bl	8086998 <_ZN9TCPClientC1Ev>
 8084e7e:	4628      	mov	r0, r5
 8084e80:	4d0e      	ldr	r5, [pc, #56]	; (8084ebc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
 8084e82:	4622      	mov	r2, r4
 8084e84:	4631      	mov	r1, r6
 8084e86:	f003 fe17 	bl	8088ab8 <__aeabi_atexit>
 8084e8a:	4628      	mov	r0, r5
 8084e8c:	f001 fd84 	bl	8086998 <_ZN9TCPClientC1Ev>
 8084e90:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
 8084e92:	4d0b      	ldr	r5, [pc, #44]	; (8084ec0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
 8084e94:	4622      	mov	r2, r4
 8084e96:	4631      	mov	r1, r6
 8084e98:	f003 fe0e 	bl	8088ab8 <__aeabi_atexit>
 8084e9c:	4628      	mov	r0, r5
 8084e9e:	f002 f9dd 	bl	808725c <_ZN3UDPC1Ev>
 8084ea2:	4622      	mov	r2, r4
 8084ea4:	4628      	mov	r0, r5
 8084ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084eaa:	4906      	ldr	r1, [pc, #24]	; (8084ec4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
 8084eac:	f003 be04 	b.w	8088ab8 <__aeabi_atexit>
 8084eb0:	20000888 	.word	0x20000888
 8084eb4:	20000140 	.word	0x20000140
 8084eb8:	08083a51 	.word	0x08083a51
 8084ebc:	2000086c 	.word	0x2000086c
 8084ec0:	200008ac 	.word	0x200008ac
 8084ec4:	08084b61 	.word	0x08084b61

08084ec8 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
 8084ec8:	b508      	push	{r3, lr}
 8084eca:	f000 fcfd 	bl	80858c8 <HAL_Pin_Map>
 8084ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8084ed2:	f000 bda1 	b.w	8085a18 <HAL_Timer_Get_Milli_Seconds>
	...

08084ed8 <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
 8084ed8:	4800      	ldr	r0, [pc, #0]	; (8084edc <_ZN6UbiUDP3getEPKcS1_+0x4>)
 8084eda:	4770      	bx	lr
 8084edc:	cda2425f 	.word	0xcda2425f

08084ee0 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
 8084ee0:	7501      	strb	r1, [r0, #20]
 8084ee2:	4770      	bx	lr

08084ee4 <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
 8084ee4:	b530      	push	{r4, r5, lr}
               const char *token) {
 8084ee6:	4d06      	ldr	r5, [pc, #24]	; (8084f00 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
  _host = host;
  _user_agent = user_agent;
 8084ee8:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
 8084eea:	6005      	str	r5, [r0, #0]
 8084eec:	2500      	movs	r5, #0
 8084eee:	7505      	strb	r5, [r0, #20]
 8084ef0:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 8084ef4:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
 8084ef6:	6185      	str	r5, [r0, #24]
  _host = host;
 8084ef8:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8084efa:	60c3      	str	r3, [r0, #12]
  _port = port;
 8084efc:	6102      	str	r2, [r0, #16]
}
 8084efe:	bd30      	pop	{r4, r5, pc}
 8084f00:	0808e004 	.word	0x0808e004

08084f04 <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 8084f04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
#elif (PLATFORM_ID == 13 || PLATFORM_ID == 10)  // Boron(13), Electron(10)
  return Cellular.resolve(_host);
 8084f06:	684f      	ldr	r7, [r1, #4]

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 8084f08:	b085      	sub	sp, #20
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8084f0a:	2600      	movs	r6, #0
 8084f0c:	ac04      	add	r4, sp, #16
 8084f0e:	4605      	mov	r5, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084f10:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8084f12:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084f16:	f006 f89b 	bl	808b050 <strlen>
 8084f1a:	4b0a      	ldr	r3, [pc, #40]	; (8084f44 <_ZN6UbiUDP11getServerIpEv+0x40>)
 8084f1c:	9600      	str	r6, [sp, #0]
 8084f1e:	b281      	uxth	r1, r0
 8084f20:	685b      	ldr	r3, [r3, #4]
 8084f22:	4622      	mov	r2, r4
 8084f24:	4638      	mov	r0, r7
 8084f26:	f000 fedf 	bl	8085ce8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8084f2a:	b120      	cbz	r0, 8084f36 <_ZN6UbiUDP11getServerIpEv+0x32>
 8084f2c:	4631      	mov	r1, r6
 8084f2e:	4628      	mov	r0, r5
 8084f30:	f002 ff30 	bl	8087d94 <_ZN9IPAddressC1Em>
 8084f34:	e003      	b.n	8084f3e <_ZN6UbiUDP11getServerIpEv+0x3a>
 8084f36:	4621      	mov	r1, r4
 8084f38:	4628      	mov	r0, r5
 8084f3a:	f002 ff23 	bl	8087d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 8084f3e:	4628      	mov	r0, r5
 8084f40:	b005      	add	sp, #20
 8084f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084f44:	20000d74 	.word	0x20000d74

08084f48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 8084f48:	b530      	push	{r4, r5, lr}
 8084f4a:	b087      	sub	sp, #28
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084f4c:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 8084f4e:	4604      	mov	r4, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084f50:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 8084f52:	461d      	mov	r5, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084f54:	f7ff ffd6 	bl	8084f04 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 8084f58:	a802      	add	r0, sp, #8
 8084f5a:	f002 ff21 	bl	8087da0 <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
 8084f5e:	b980      	cbnz	r0, 8084f82 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    if (_debug) {
 8084f60:	7d23      	ldrb	r3, [r4, #20]
 8084f62:	b123      	cbz	r3, 8084f6e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
 8084f64:	f002 ffb4 	bl	8087ed0 <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
 8084f68:	4921      	ldr	r1, [pc, #132]	; (8084ff0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa8>)
 8084f6a:	f001 fe84 	bl	8086c76 <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
 8084f6e:	23f3      	movs	r3, #243	; 0xf3
 8084f70:	9300      	str	r3, [sp, #0]
 8084f72:	2237      	movs	r2, #55	; 0x37
 8084f74:	233d      	movs	r3, #61	; 0x3d
 8084f76:	21a9      	movs	r1, #169	; 0xa9
 8084f78:	a804      	add	r0, sp, #16
 8084f7a:	f002 ff21 	bl	8087dc0 <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8084f7e:	9b05      	ldr	r3, [sp, #20]
 8084f80:	9303      	str	r3, [sp, #12]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
 8084f82:	2200      	movs	r2, #0
 8084f84:	f240 21bd 	movw	r1, #701	; 0x2bd
 8084f88:	481a      	ldr	r0, [pc, #104]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084f8a:	f002 f997 	bl	80872bc <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
 8084f8e:	2200      	movs	r2, #0
 8084f90:	f242 3134 	movw	r1, #9012	; 0x2334
 8084f94:	4817      	ldr	r0, [pc, #92]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084f96:	f002 f873 	bl	8087080 <_ZN3UDP5beginEtm>
 8084f9a:	4b17      	ldr	r3, [pc, #92]	; (8084ff8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb0>)
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8084f9c:	f242 3234 	movw	r2, #9012	; 0x2334
 8084fa0:	9304      	str	r3, [sp, #16]
 8084fa2:	9b03      	ldr	r3, [sp, #12]
 8084fa4:	a904      	add	r1, sp, #16
 8084fa6:	4813      	ldr	r0, [pc, #76]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084fa8:	9305      	str	r3, [sp, #20]
 8084faa:	f002 f9a1 	bl	80872f0 <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 8084fae:	b168      	cbz	r0, 8084fcc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8084fb0:	b165      	cbz	r5, 8084fcc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
      return write((const uint8_t *)str, strlen(str));
 8084fb2:	4628      	mov	r0, r5
 8084fb4:	f006 f84c 	bl	808b050 <strlen>
 8084fb8:	4629      	mov	r1, r5
 8084fba:	4602      	mov	r2, r0
 8084fbc:	480d      	ldr	r0, [pc, #52]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084fbe:	f002 f8ba 	bl	8087136 <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8084fc2:	b118      	cbz	r0, 8084fcc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 8084fc4:	480b      	ldr	r0, [pc, #44]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084fc6:	f002 f809 	bl	8086fdc <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8084fca:	b958      	cbnz	r0, 8084fe4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
 8084fcc:	7d23      	ldrb	r3, [r4, #20]
 8084fce:	b123      	cbz	r3, 8084fda <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x92>
      Serial.println("ERROR sending values with UDP");
 8084fd0:	f002 ff7e 	bl	8087ed0 <_Z16_fetch_usbserialv>
 8084fd4:	4909      	ldr	r1, [pc, #36]	; (8084ffc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 8084fd6:	f001 fe4e 	bl	8086c76 <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
 8084fda:	4806      	ldr	r0, [pc, #24]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084fdc:	f002 f878 	bl	80870d0 <_ZN3UDP4stopEv>
    return false;
 8084fe0:	2000      	movs	r0, #0
 8084fe2:	e003      	b.n	8084fec <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa4>
  }

  _client_udp_ubi.stop();
 8084fe4:	4803      	ldr	r0, [pc, #12]	; (8084ff4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084fe6:	f002 f873 	bl	80870d0 <_ZN3UDP4stopEv>
  return true;
 8084fea:	2001      	movs	r0, #1
}
 8084fec:	b007      	add	sp, #28
 8084fee:	bd30      	pop	{r4, r5, pc}
 8084ff0:	0808df4f 	.word	0x0808df4f
 8084ff4:	200008e8 	.word	0x200008e8
 8084ff8:	0808e274 	.word	0x0808e274
 8084ffc:	0808dfdb 	.word	0x0808dfdb

08085000 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 8085000:	b510      	push	{r4, lr}
 8085002:	4c06      	ldr	r4, [pc, #24]	; (808501c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
 8085004:	f000 fc60 	bl	80858c8 <HAL_Pin_Map>
 8085008:	4620      	mov	r0, r4
 808500a:	f002 f927 	bl	808725c <_ZN3UDPC1Ev>
 808500e:	4620      	mov	r0, r4
 8085010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085014:	4a02      	ldr	r2, [pc, #8]	; (8085020 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
 8085016:	4903      	ldr	r1, [pc, #12]	; (8085024 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
 8085018:	f003 bd4e 	b.w	8088ab8 <__aeabi_atexit>
 808501c:	200008e8 	.word	0x200008e8
 8085020:	20000140 	.word	0x20000140
 8085024:	08084b61 	.word	0x08084b61

08085028 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
 8085028:	4800      	ldr	r0, [pc, #0]	; (808502c <_ZN11UbiParticle3getEPKcS1_+0x4>)
 808502a:	4770      	bx	lr
 808502c:	cda2425f 	.word	0xcda2425f

08085030 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
 8085030:	7401      	strb	r1, [r0, #16]
 8085032:	4770      	bx	lr

08085034 <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
 8085034:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
 8085036:	4c04      	ldr	r4, [pc, #16]	; (8085048 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
  _host = host;
  _user_agent = user_agent;
 8085038:	6083      	str	r3, [r0, #8]
  _token = token;
 808503a:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
 808503c:	6004      	str	r4, [r0, #0]
 808503e:	2400      	movs	r4, #0
 8085040:	7404      	strb	r4, [r0, #16]
  _host = host;
 8085042:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8085044:	60c3      	str	r3, [r0, #12]
}
 8085046:	bd10      	pop	{r4, pc}
 8085048:	0808e018 	.word	0x0808e018

0808504c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 808504c:	b570      	push	{r4, r5, r6, lr}
 808504e:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8085050:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8085052:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8085054:	f000 fed0 	bl	8085df8 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 8085058:	b908      	cbnz	r0, 808505e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
 808505a:	2000      	movs	r0, #0
 808505c:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
 808505e:	2c00      	cmp	r4, #0
 8085060:	dd03      	ble.n	808506a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
 8085062:	f000 fcd9 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
 8085066:	4605      	mov	r5, r0
 8085068:	e000      	b.n	808506c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 808506a:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808506c:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 808506e:	b93b      	cbnz	r3, 8085080 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
 8085070:	2c00      	cmp	r4, #0
 8085072:	dd07      	ble.n	8085084 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8085074:	f000 fcd0 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
 8085078:	1b40      	subs	r0, r0, r5
 808507a:	42a0      	cmp	r0, r4
 808507c:	d302      	bcc.n	8085084 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 808507e:	e7ec      	b.n	808505a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
 8085080:	2001      	movs	r0, #1
 8085082:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 8085084:	f000 ff3c 	bl	8085f00 <spark_process>
 8085088:	e7f0      	b.n	808506c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

0808508a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
 808508a:	b530      	push	{r4, r5, lr}
 808508c:	b085      	sub	sp, #20
 808508e:	461a      	mov	r2, r3
 8085090:	9b08      	ldr	r3, [sp, #32]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8085092:	a802      	add	r0, sp, #8
 8085094:	781b      	ldrb	r3, [r3, #0]
 8085096:	f88d 3000 	strb.w	r3, [sp]
 808509a:	233c      	movs	r3, #60	; 0x3c
 808509c:	f002 fcc6 	bl	8087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80850a0:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
 80850a2:	2100      	movs	r1, #0
 80850a4:	4620      	mov	r0, r4
 80850a6:	f7ff ffd1 	bl	808504c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
 80850aa:	7863      	ldrb	r3, [r4, #1]
 80850ac:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
 80850b0:	b133      	cbz	r3, 80850c0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
 80850b2:	2100      	movs	r1, #0
 80850b4:	4620      	mov	r0, r4
 80850b6:	f7ff ffc9 	bl	808504c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80850ba:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
 80850bc:	2b01      	cmp	r3, #1
 80850be:	d013      	beq.n	80850e8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
 80850c0:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80850c2:	9c03      	ldr	r4, [sp, #12]
 80850c4:	b194      	cbz	r4, 80850ec <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80850c6:	6863      	ldr	r3, [r4, #4]
 80850c8:	3b01      	subs	r3, #1
 80850ca:	6063      	str	r3, [r4, #4]
 80850cc:	b973      	cbnz	r3, 80850ec <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
 80850ce:	6823      	ldr	r3, [r4, #0]
 80850d0:	4620      	mov	r0, r4
 80850d2:	689b      	ldr	r3, [r3, #8]
 80850d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80850d6:	68a3      	ldr	r3, [r4, #8]
 80850d8:	3b01      	subs	r3, #1
 80850da:	60a3      	str	r3, [r4, #8]
 80850dc:	b933      	cbnz	r3, 80850ec <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
 80850de:	6823      	ldr	r3, [r4, #0]
 80850e0:	4620      	mov	r0, r4
 80850e2:	68db      	ldr	r3, [r3, #12]
 80850e4:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
 80850e6:	e001      	b.n	80850ec <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
 80850e8:	7b25      	ldrb	r5, [r4, #12]
 80850ea:	e7ea      	b.n	80850c2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
 80850ec:	4628      	mov	r0, r5
 80850ee:	b005      	add	sp, #20
 80850f0:	bd30      	pop	{r4, r5, pc}

080850f2 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
 80850f2:	f000 bbe9 	b.w	80858c8 <HAL_Pin_Map>

080850f6 <_ZN9CE_BME280C1Ev>:
 ***************************************************************************/



CE_BME280::CE_BME280()
{}
 80850f6:	4770      	bx	lr

080850f8 <_ZN9CE_BME2806write8Ehh>:
/*!
    @brief  Writes an 8 bit value over I2C/SPI
*/
/**************************************************************************/
void CE_BME280::write8(byte reg, byte value)
{
 80850f8:	b570      	push	{r4, r5, r6, lr}
 80850fa:	4606      	mov	r6, r0
 80850fc:	4614      	mov	r4, r2
 80850fe:	460d      	mov	r5, r1
    Wire.beginTransmission((uint8_t)_i2caddr);
 8085100:	f003 fc8e 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085104:	7831      	ldrb	r1, [r6, #0]
 8085106:	f003 f97e 	bl	8088406 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 808510a:	f003 fc89 	bl	8088a20 <_Z19__fetch_global_Wirev>
 808510e:	6803      	ldr	r3, [r0, #0]
 8085110:	4629      	mov	r1, r5
 8085112:	689b      	ldr	r3, [r3, #8]
 8085114:	4798      	blx	r3
    Wire.write((uint8_t)value);
 8085116:	f003 fc83 	bl	8088a20 <_Z19__fetch_global_Wirev>
 808511a:	6803      	ldr	r3, [r0, #0]
 808511c:	4621      	mov	r1, r4
 808511e:	689b      	ldr	r3, [r3, #8]
 8085120:	4798      	blx	r3
    Wire.endTransmission();
 8085122:	f003 fc7d 	bl	8088a20 <_Z19__fetch_global_Wirev>
}
 8085126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void CE_BME280::write8(byte reg, byte value)
{
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 808512a:	f003 b977 	b.w	808841c <_ZN7TwoWire15endTransmissionEv>

0808512e <_ZN9CE_BME2805read8Eh>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t CE_BME280::read8(byte reg)
{
 808512e:	b538      	push	{r3, r4, r5, lr}
 8085130:	4604      	mov	r4, r0
 8085132:	460d      	mov	r5, r1
  uint8_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 8085134:	f003 fc74 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085138:	7821      	ldrb	r1, [r4, #0]
 808513a:	f003 f964 	bl	8088406 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 808513e:	f003 fc6f 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085142:	6803      	ldr	r3, [r0, #0]
 8085144:	4629      	mov	r1, r5
 8085146:	689b      	ldr	r3, [r3, #8]
 8085148:	4798      	blx	r3
    Wire.endTransmission();
 808514a:	f003 fc69 	bl	8088a20 <_Z19__fetch_global_Wirev>
 808514e:	f003 f965 	bl	808841c <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
 8085152:	f003 fc65 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085156:	7821      	ldrb	r1, [r4, #0]
 8085158:	2201      	movs	r2, #1
 808515a:	f003 f951 	bl	8088400 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 808515e:	f003 fc5f 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085162:	6803      	ldr	r3, [r0, #0]
 8085164:	695b      	ldr	r3, [r3, #20]
 8085166:	4798      	blx	r3
 8085168:	4604      	mov	r4, r0
    Wire.endTransmission();
 808516a:	f003 fc59 	bl	8088a20 <_Z19__fetch_global_Wirev>
 808516e:	f003 f955 	bl	808841c <_ZN7TwoWire15endTransmissionEv>
 
  return value;
}
 8085172:	b2e0      	uxtb	r0, r4
 8085174:	bd38      	pop	{r3, r4, r5, pc}

08085176 <_ZN9CE_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C
*/
/**************************************************************************/
uint16_t CE_BME280::read16(byte reg)
{
 8085176:	b538      	push	{r3, r4, r5, lr}
 8085178:	4604      	mov	r4, r0
 808517a:	460d      	mov	r5, r1
  uint16_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 808517c:	f003 fc50 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085180:	7821      	ldrb	r1, [r4, #0]
 8085182:	f003 f940 	bl	8088406 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8085186:	f003 fc4b 	bl	8088a20 <_Z19__fetch_global_Wirev>
 808518a:	6803      	ldr	r3, [r0, #0]
 808518c:	4629      	mov	r1, r5
 808518e:	689b      	ldr	r3, [r3, #8]
 8085190:	4798      	blx	r3
    Wire.endTransmission();
 8085192:	f003 fc45 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8085196:	f003 f941 	bl	808841c <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
 808519a:	f003 fc41 	bl	8088a20 <_Z19__fetch_global_Wirev>
 808519e:	7821      	ldrb	r1, [r4, #0]
 80851a0:	2202      	movs	r2, #2
 80851a2:	f003 f92d 	bl	8088400 <_ZN7TwoWire11requestFromEhj>
    value = (Wire.read() << 8) | Wire.read();
 80851a6:	f003 fc3b 	bl	8088a20 <_Z19__fetch_global_Wirev>
 80851aa:	6803      	ldr	r3, [r0, #0]
 80851ac:	695b      	ldr	r3, [r3, #20]
 80851ae:	4798      	blx	r3
 80851b0:	4605      	mov	r5, r0
 80851b2:	f003 fc35 	bl	8088a20 <_Z19__fetch_global_Wirev>
 80851b6:	6803      	ldr	r3, [r0, #0]
 80851b8:	695b      	ldr	r3, [r3, #20]
 80851ba:	4798      	blx	r3
 80851bc:	4604      	mov	r4, r0
    Wire.endTransmission();
 80851be:	f003 fc2f 	bl	8088a20 <_Z19__fetch_global_Wirev>
 80851c2:	f003 f92b 	bl	808841c <_ZN7TwoWire15endTransmissionEv>
  

  return value;
 80851c6:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
}
 80851ca:	b280      	uxth	r0, r0
 80851cc:	bd38      	pop	{r3, r4, r5, pc}

080851ce <_ZN9CE_BME2809read16_LEEh>:

uint16_t CE_BME280::read16_LE(byte reg) {
 80851ce:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 80851d0:	f7ff ffd1 	bl	8085176 <_ZN9CE_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 80851d4:	ba40      	rev16	r0, r0

}
 80851d6:	b280      	uxth	r0, r0
 80851d8:	bd08      	pop	{r3, pc}

080851da <_ZN9CE_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 80851da:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80851dc:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 80851de:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80851e0:	f7ff fff5 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80851e4:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80851e6:	81a0      	strh	r0, [r4, #12]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80851e8:	4620      	mov	r0, r4
 80851ea:	f7ff fff0 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 80851ee:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80851f0:	81e0      	strh	r0, [r4, #14]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80851f2:	4620      	mov	r0, r4
 80851f4:	f7ff ffeb 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80851f8:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80851fa:	8220      	strh	r0, [r4, #16]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80851fc:	4620      	mov	r0, r4
 80851fe:	f7ff ffe6 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085202:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 8085204:	8260      	strh	r0, [r4, #18]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085206:	4620      	mov	r0, r4
 8085208:	f7ff ffe1 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 808520c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 808520e:	82a0      	strh	r0, [r4, #20]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085210:	4620      	mov	r0, r4
 8085212:	f7ff ffdc 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 8085216:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 8085218:	82e0      	strh	r0, [r4, #22]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808521a:	4620      	mov	r0, r4
 808521c:	f7ff ffd7 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 8085220:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 8085222:	8320      	strh	r0, [r4, #24]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085224:	4620      	mov	r0, r4
 8085226:	f7ff ffd2 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 808522a:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 808522c:	8360      	strh	r0, [r4, #26]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808522e:	4620      	mov	r0, r4
 8085230:	f7ff ffcd 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 8085234:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 8085236:	83a0      	strh	r0, [r4, #28]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085238:	4620      	mov	r0, r4
 808523a:	f7ff ffc8 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 808523e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 8085240:	83e0      	strh	r0, [r4, #30]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085242:	4620      	mov	r0, r4
 8085244:	f7ff ffc3 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
 8085248:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 808524a:	8420      	strh	r0, [r4, #32]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808524c:	4620      	mov	r0, r4
 808524e:	f7ff ffbe 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8085252:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 8085254:	8460      	strh	r0, [r4, #34]	; 0x22

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8085256:	4620      	mov	r0, r4
 8085258:	f7ff ff69 	bl	808512e <_ZN9CE_BME2805read8Eh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808525c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 808525e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8085262:	4620      	mov	r0, r4
 8085264:	f7ff ffb3 	bl	80851ce <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8085268:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 808526a:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 808526c:	4620      	mov	r0, r4
 808526e:	f7ff ff5e 	bl	808512e <_ZN9CE_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 8085272:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8085274:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 8085278:	4620      	mov	r0, r4
 808527a:	f7ff ff58 	bl	808512e <_ZN9CE_BME2805read8Eh>
 808527e:	21e5      	movs	r1, #229	; 0xe5
 8085280:	4605      	mov	r5, r0
 8085282:	4620      	mov	r0, r4
 8085284:	f7ff ff53 	bl	808512e <_ZN9CE_BME2805read8Eh>
 8085288:	f000 000f 	and.w	r0, r0, #15
 808528c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8085290:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 8085292:	21e6      	movs	r1, #230	; 0xe6
 8085294:	4620      	mov	r0, r4
 8085296:	f7ff ff4a 	bl	808512e <_ZN9CE_BME2805read8Eh>
 808529a:	21e5      	movs	r1, #229	; 0xe5
 808529c:	4605      	mov	r5, r0
 808529e:	4620      	mov	r0, r4
 80852a0:	f7ff ff45 	bl	808512e <_ZN9CE_BME2805read8Eh>
 80852a4:	1100      	asrs	r0, r0, #4
 80852a6:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80852aa:	85a0      	strh	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80852ac:	21e7      	movs	r1, #231	; 0xe7
 80852ae:	4620      	mov	r0, r4
 80852b0:	f7ff ff3d 	bl	808512e <_ZN9CE_BME2805read8Eh>
 80852b4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80852b8:	bd38      	pop	{r3, r4, r5, pc}

080852ba <_ZN9CE_BME2805beginEh>:


CE_BME280::CE_BME280()
{}

bool CE_BME280::begin(uint8_t a) {
 80852ba:	b510      	push	{r4, lr}
 80852bc:	4604      	mov	r4, r0
  _i2caddr = a;
 80852be:	7001      	strb	r1, [r0, #0]

  Wire.begin();
 80852c0:	f003 fbae 	bl	8088a20 <_Z19__fetch_global_Wirev>
 80852c4:	f003 f868 	bl	8088398 <_ZN7TwoWire5beginEv>

  if (read8(BME280_REGISTER_CHIPID) != 0x60)
 80852c8:	21d0      	movs	r1, #208	; 0xd0
 80852ca:	4620      	mov	r0, r4
 80852cc:	f7ff ff2f 	bl	808512e <_ZN9CE_BME2805read8Eh>
 80852d0:	2860      	cmp	r0, #96	; 0x60
 80852d2:	d10e      	bne.n	80852f2 <_ZN9CE_BME2805beginEh+0x38>
    return false;

  readCoefficients();
 80852d4:	4620      	mov	r0, r4
 80852d6:	f7ff ff80 	bl	80851da <_ZN9CE_BME28016readCoefficientsEv>
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
 80852da:	4620      	mov	r0, r4
 80852dc:	2203      	movs	r2, #3
 80852de:	21f2      	movs	r1, #242	; 0xf2
 80852e0:	f7ff ff0a 	bl	80850f8 <_ZN9CE_BME2806write8Ehh>
  write8(BME280_REGISTER_CONTROL, 0x3F);
 80852e4:	4620      	mov	r0, r4
 80852e6:	223f      	movs	r2, #63	; 0x3f
 80852e8:	21f4      	movs	r1, #244	; 0xf4
 80852ea:	f7ff ff05 	bl	80850f8 <_ZN9CE_BME2806write8Ehh>
  return true;
 80852ee:	2001      	movs	r0, #1
 80852f0:	bd10      	pop	{r4, pc}
  _i2caddr = a;

  Wire.begin();

  if (read8(BME280_REGISTER_CHIPID) != 0x60)
    return false;
 80852f2:	2000      	movs	r0, #0

  readCoefficients();
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
  write8(BME280_REGISTER_CONTROL, 0x3F);
  return true;
}
 80852f4:	bd10      	pop	{r4, pc}
	...

080852f8 <_ZN9CE_BME28015readTemperatureEv>:
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 80852f8:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 80852fa:	21fa      	movs	r1, #250	; 0xfa
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 80852fc:	4604      	mov	r4, r0
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 80852fe:	f7ff ff3a 	bl	8085176 <_ZN9CE_BME2806read16Eh>
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8085302:	21fc      	movs	r1, #252	; 0xfc
float CE_BME280::readTemperature(void)
{
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
  adc_T <<= 8;
 8085304:	0205      	lsls	r5, r0, #8
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8085306:	4620      	mov	r0, r4
 8085308:	f7ff ff11 	bl	808512e <_ZN9CE_BME2805read8Eh>
  adc_T >>= 4;

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 808530c:	89a2      	ldrh	r2, [r4, #12]
{
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 808530e:	4328      	orrs	r0, r5

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
	   ((int32_t)_bme280_calib.dig_T2)) >> 11;

  var2  = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
	     ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 8085310:	ebc2 2320 	rsb	r3, r2, r0, asr #8
	   ((int32_t)_bme280_calib.dig_T3)) >> 14;

  t_fine = var1 + var2;
 8085314:	435b      	muls	r3, r3
 8085316:	0052      	lsls	r2, r2, #1
 8085318:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 808531c:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8085320:	131b      	asrs	r3, r3, #12
 8085322:	4350      	muls	r0, r2
 8085324:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8085328:	4353      	muls	r3, r2
 808532a:	139b      	asrs	r3, r3, #14
 808532c:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 8085330:	60a0      	str	r0, [r4, #8]

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;
 8085332:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8085336:	3080      	adds	r0, #128	; 0x80
 8085338:	1200      	asrs	r0, r0, #8
 808533a:	f004 fb87 	bl	8089a4c <__aeabi_i2f>
 808533e:	4902      	ldr	r1, [pc, #8]	; (8085348 <_ZN9CE_BME28015readTemperatureEv+0x50>)
 8085340:	f004 fc8c 	bl	8089c5c <__aeabi_fdiv>
}
 8085344:	bd38      	pop	{r3, r4, r5, pc}
 8085346:	bf00      	nop
 8085348:	42c80000 	.word	0x42c80000

0808534c <_ZN9CE_BME28012readPressureEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 808534c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8085350:	21f7      	movs	r1, #247	; 0xf7
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 8085352:	4606      	mov	r6, r0
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8085354:	f7ff ff0f 	bl	8085176 <_ZN9CE_BME2806read16Eh>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8085358:	21f9      	movs	r1, #249	; 0xf9
*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 808535a:	4607      	mov	r7, r0
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 808535c:	4630      	mov	r0, r6
 808535e:	f7ff fee6 	bl	808512e <_ZN9CE_BME2805read8Eh>
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 8085362:	68b4      	ldr	r4, [r6, #8]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8085364:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 8085368:	17e5      	asrs	r5, r4, #31
 808536a:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 808536e:	f145 35ff 	adc.w	r5, r5, #4294967295
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8085372:	fba4 8904 	umull	r8, r9, r4, r4
 8085376:	fb04 f305 	mul.w	r3, r4, r5
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 808537a:	fb02 f105 	mul.w	r1, r2, r5
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 808537e:	eb09 0943 	add.w	r9, r9, r3, lsl #1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8085382:	17d3      	asrs	r3, r2, #31
 8085384:	fb04 1103 	mla	r1, r4, r3, r1
 8085388:	fba2 2304 	umull	r2, r3, r2, r4
 808538c:	440b      	add	r3, r1
 808538e:	0319      	lsls	r1, r3, #12
 8085390:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8085394:	4686      	mov	lr, r0
  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8085396:	0310      	lsls	r0, r2, #12
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 8085398:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 808539c:	fb02 fc09 	mul.w	ip, r2, r9
 80853a0:	17d3      	asrs	r3, r2, #31
 80853a2:	fb08 cc03 	mla	ip, r8, r3, ip
 80853a6:	fba2 2308 	umull	r2, r3, r2, r8
 80853aa:	4463      	add	r3, ip
 80853ac:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80853b0:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80853b4:	eb1a 0a00 	adds.w	sl, sl, r0
 80853b8:	8a72      	ldrh	r2, [r6, #18]
 80853ba:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80853be:	eb4b 0b01 	adc.w	fp, fp, r1
 80853c2:	f11a 0000 	adds.w	r0, sl, #0
 80853c6:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 80853ca:	fba0 ab02 	umull	sl, fp, r0, r2
 80853ce:	fb02 bb01 	mla	fp, r2, r1, fp
 80853d2:	ea4f 026b 	mov.w	r2, fp, asr #1
 80853d6:	ea4f 73eb 	mov.w	r3, fp, asr #31

  if (var1 == 0) {
 80853da:	ea52 0103 	orrs.w	r1, r2, r3
 80853de:	f000 8082 	beq.w	80854e6 <_ZN9CE_BME28012readPressureEv+0x19a>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80853e2:	f9b6 a01c 	ldrsh.w	sl, [r6, #28]
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 80853e6:	ea4e 2707 	orr.w	r7, lr, r7, lsl #8
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80853ea:	fb0a f109 	mul.w	r1, sl, r9
 80853ee:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80853f2:	fb08 110b 	mla	r1, r8, fp, r1
 80853f6:	fbaa 8908 	umull	r8, r9, sl, r8
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80853fa:	f9b6 a01a 	ldrsh.w	sl, [r6, #26]
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80853fe:	4489      	add	r9, r1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8085400:	fb0a f105 	mul.w	r1, sl, r5
 8085404:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8085408:	fb04 110b 	mla	r1, r4, fp, r1
 808540c:	fbaa 4504 	umull	r4, r5, sl, r4
 8085410:	440d      	add	r5, r1
 8085412:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 8085416:	ea4f 4a44 	mov.w	sl, r4, lsl #17

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 808541a:	113f      	asrs	r7, r7, #4
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 808541c:	eb1a 0a08 	adds.w	sl, sl, r8

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 8085420:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8085424:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 8085428:	eb4b 0b09 	adc.w	fp, fp, r9

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 808542c:	ea4f 79e7 	mov.w	r9, r7, asr #31
 8085430:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 8085434:	ea45 0557 	orr.w	r5, r5, r7, lsr #1
 8085438:	07fc      	lsls	r4, r7, #31
 808543a:	f640 4735 	movw	r7, #3125	; 0xc35
 808543e:	f9b6 0018 	ldrsh.w	r0, [r6, #24]
 8085442:	f04f 0800 	mov.w	r8, #0
 8085446:	eb18 080a 	adds.w	r8, r8, sl
 808544a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 808544e:	eb49 090b 	adc.w	r9, r9, fp
 8085452:	ebb4 0408 	subs.w	r4, r4, r8
 8085456:	fba4 0107 	umull	r0, r1, r4, r7
 808545a:	eb65 0509 	sbc.w	r5, r5, r9
 808545e:	fb07 1105 	mla	r1, r7, r5, r1
 8085462:	f004 fd49 	bl	8089ef8 <__aeabi_ldivmod>
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8085466:	f9b6 2022 	ldrsh.w	r2, [r6, #34]	; 0x22
  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 808546a:	134c      	asrs	r4, r1, #13
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 808546c:	fb02 f704 	mul.w	r7, r2, r4
  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8085470:	0b45      	lsrs	r5, r0, #13
 8085472:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8085476:	17d3      	asrs	r3, r2, #31
 8085478:	fb05 7703 	mla	r7, r5, r3, r7
 808547c:	fba2 2305 	umull	r2, r3, r2, r5
 8085480:	4354      	muls	r4, r2
 8085482:	443b      	add	r3, r7
 8085484:	fb05 4403 	mla	r4, r5, r3, r4
 8085488:	fba2 2305 	umull	r2, r3, r2, r5
 808548c:	4423      	add	r3, r4
 808548e:	0e54      	lsrs	r4, r2, #25
 8085490:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 8085494:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8085498:	1824      	adds	r4, r4, r0
 808549a:	ea4f 6563 	mov.w	r5, r3, asr #25
 808549e:	414d      	adcs	r5, r1
 80854a0:	4351      	muls	r1, r2
 80854a2:	17d3      	asrs	r3, r2, #31
 80854a4:	fb00 1303 	mla	r3, r0, r3, r1
 80854a8:	fba2 0100 	umull	r0, r1, r2, r0
 80854ac:	4419      	add	r1, r3
 80854ae:	0cc2      	lsrs	r2, r0, #19
 80854b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80854b4:	1912      	adds	r2, r2, r4
  return (float)p/256;
 80854b6:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80854ba:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80854be:	416b      	adcs	r3, r5
 80854c0:	0a10      	lsrs	r0, r2, #8
  return (float)p/256;
 80854c2:	17e5      	asrs	r5, r4, #31
 80854c4:	0122      	lsls	r2, r4, #4
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80854c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80854ca:	1219      	asrs	r1, r3, #8
  return (float)p/256;
 80854cc:	012b      	lsls	r3, r5, #4
 80854ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80854d2:	1880      	adds	r0, r0, r2
 80854d4:	4159      	adcs	r1, r3
 80854d6:	f004 facf 	bl	8089a78 <__aeabi_l2f>
 80854da:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80854de:	f004 fb09 	bl	8089af4 <__aeabi_fmul>
 80854e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
 80854e6:	2000      	movs	r0, #0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
  return (float)p/256;
}
 80854e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080854ec <_ZN9CE_BME28012readHumidityEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readHumidity(void) {
 80854ec:	b510      	push	{r4, lr}
 80854ee:	4604      	mov	r4, r0

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80854f0:	21fd      	movs	r1, #253	; 0xfd
 80854f2:	f7ff fe40 	bl	8085176 <_ZN9CE_BME2806read16Eh>
  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80854f6:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 80854fa:	68a2      	ldr	r2, [r4, #8]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80854fc:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 8085500:	051b      	lsls	r3, r3, #20

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 8085502:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8085506:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
 808550a:	fb02 0011 	mls	r0, r2, r1, r0
 808550e:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8085512:	13d8      	asrs	r0, r3, #15
	       (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
		    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
		  ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 8085514:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8085518:	f994 102e 	ldrsb.w	r1, [r4, #46]	; 0x2e
 808551c:	4353      	muls	r3, r2
 808551e:	434a      	muls	r2, r1
 8085520:	12db      	asrs	r3, r3, #11
 8085522:	1292      	asrs	r2, r2, #10
 8085524:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8085528:	4353      	muls	r3, r2
 808552a:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 808552e:	129b      	asrs	r3, r3, #10
 8085530:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8085534:	4353      	muls	r3, r2
 8085536:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 808553a:	139b      	asrs	r3, r3, #14
 808553c:	4343      	muls	r3, r0

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 808553e:	13d8      	asrs	r0, r3, #15
			     ((int32_t)_bme280_calib.dig_H1)) >> 4));
 8085540:	4340      	muls	r0, r0
 8085542:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8085546:	11c0      	asrs	r0, r0, #7
 8085548:	4350      	muls	r0, r2
 808554a:	eba3 1020 	sub.w	r0, r3, r0, asr #4

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 808554e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
  float h = (v_x1_u32r>>12);
  return  h / 1024.0;
 8085552:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8085556:	bfa8      	it	ge
 8085558:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 808555c:	1300      	asrs	r0, r0, #12
 808555e:	f004 fa75 	bl	8089a4c <__aeabi_i2f>
 8085562:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8085566:	f004 fac5 	bl	8089af4 <__aeabi_fmul>
}
 808556a:	bd10      	pop	{r4, pc}

0808556c <_GLOBAL__sub_I__ZN9CE_BME280C2Ev>:
 808556c:	f000 b9ac 	b.w	80858c8 <HAL_Pin_Map>

08085570 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 8085570:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8085572:	2101      	movs	r1, #1
 8085574:	4806      	ldr	r0, [pc, #24]	; (8085590 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8085576:	f003 f937 	bl	80887e8 <TIM_GetITStatus>
 808557a:	b140      	cbz	r0, 808558e <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 808557c:	2101      	movs	r1, #1
 808557e:	4804      	ldr	r0, [pc, #16]	; (8085590 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8085580:	f003 f93d 	bl	80887fe <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 8085584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM3_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[0]();
 8085588:	4b02      	ldr	r3, [pc, #8]	; (8085594 <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 808558a:	681b      	ldr	r3, [r3, #0]
 808558c:	4718      	bx	r3
 808558e:	bd10      	pop	{r4, pc}
 8085590:	40000400 	.word	0x40000400
 8085594:	20000924 	.word	0x20000924

08085598 <Wiring_TIM4_Interrupt_Handler_override>:
	}
}

void Wiring_TIM4_Interrupt_Handler_override()
{
 8085598:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 808559a:	2101      	movs	r1, #1
 808559c:	4806      	ldr	r0, [pc, #24]	; (80855b8 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 808559e:	f003 f923 	bl	80887e8 <TIM_GetITStatus>
 80855a2:	b140      	cbz	r0, 80855b6 <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80855a4:	2101      	movs	r1, #1
 80855a6:	4804      	ldr	r0, [pc, #16]	; (80855b8 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80855a8:	f003 f929 	bl	80887fe <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 80855ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM4_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[1]();
 80855b0:	4b02      	ldr	r3, [pc, #8]	; (80855bc <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 80855b2:	685b      	ldr	r3, [r3, #4]
 80855b4:	4718      	bx	r3
 80855b6:	bd10      	pop	{r4, pc}
 80855b8:	40000800 	.word	0x40000800
 80855bc:	20000924 	.word	0x20000924

080855c0 <Wiring_TIM5_Interrupt_Handler_override>:
	}
}

void Wiring_TIM5_Interrupt_Handler_override()
{
 80855c0:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 80855c2:	2101      	movs	r1, #1
 80855c4:	4806      	ldr	r0, [pc, #24]	; (80855e0 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80855c6:	f003 f90f 	bl	80887e8 <TIM_GetITStatus>
 80855ca:	b140      	cbz	r0, 80855de <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80855cc:	2101      	movs	r1, #1
 80855ce:	4804      	ldr	r0, [pc, #16]	; (80855e0 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80855d0:	f003 f915 	bl	80887fe <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 80855d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM5_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[2]();
 80855d8:	4b02      	ldr	r3, [pc, #8]	; (80855e4 <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 80855da:	689b      	ldr	r3, [r3, #8]
 80855dc:	4718      	bx	r3
 80855de:	bd10      	pop	{r4, pc}
 80855e0:	40000c00 	.word	0x40000c00
 80855e4:	20000924 	.word	0x20000924

080855e8 <Wiring_TIM6_Interrupt_Handler_override>:
	}
}

void Wiring_TIM6_Interrupt_Handler_override()
{
 80855e8:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 80855ea:	2101      	movs	r1, #1
 80855ec:	4806      	ldr	r0, [pc, #24]	; (8085608 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80855ee:	f003 f8fb 	bl	80887e8 <TIM_GetITStatus>
 80855f2:	b140      	cbz	r0, 8085606 <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 80855f4:	2101      	movs	r1, #1
 80855f6:	4804      	ldr	r0, [pc, #16]	; (8085608 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80855f8:	f003 f901 	bl	80887fe <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 80855fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM6_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[3]();
 8085600:	4b02      	ldr	r3, [pc, #8]	; (808560c <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 8085602:	68db      	ldr	r3, [r3, #12]
 8085604:	4718      	bx	r3
 8085606:	bd10      	pop	{r4, pc}
 8085608:	40001000 	.word	0x40001000
 808560c:	20000924 	.word	0x20000924

08085610 <Wiring_TIM7_Interrupt_Handler_override>:
	}
}

void Wiring_TIM7_Interrupt_Handler_override()
{
 8085610:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8085612:	2101      	movs	r1, #1
 8085614:	4806      	ldr	r0, [pc, #24]	; (8085630 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8085616:	f003 f8e7 	bl	80887e8 <TIM_GetITStatus>
 808561a:	b140      	cbz	r0, 808562e <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 808561c:	2101      	movs	r1, #1
 808561e:	4804      	ldr	r0, [pc, #16]	; (8085630 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8085620:	f003 f8ed 	bl	80887fe <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 8085624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM7_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[4]();
 8085628:	4b02      	ldr	r3, [pc, #8]	; (8085634 <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 808562a:	691b      	ldr	r3, [r3, #16]
 808562c:	4718      	bx	r3
 808562e:	bd10      	pop	{r4, pc}
 8085630:	40001400 	.word	0x40001400
 8085634:	20000924 	.word	0x20000924

08085638 <_ZN13IntervalTimer9start_SITEmb>:

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 8085638:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 808563a:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 808563c:	b085      	sub	sp, #20
 808563e:	4605      	mov	r5, r0
 8085640:	460f      	mov	r7, r1
 8085642:	4616      	mov	r6, r2
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8085644:	2b04      	cmp	r3, #4
 8085646:	d830      	bhi.n	80856aa <_ZN13IntervalTimer9start_SITEmb+0x72>
 8085648:	e8df f003 	tbb	[pc, r3]
 808564c:	1e150c03 	.word	0x1e150c03
 8085650:	27          	.byte	0x27
 8085651:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8085652:	2101      	movs	r1, #1
 8085654:	2002      	movs	r0, #2
 8085656:	f002 ffa3 	bl	80885a0 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 808565a:	231d      	movs	r3, #29
 808565c:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM3;
 8085660:	4c29      	ldr	r4, [pc, #164]	; (8085708 <_ZN13IntervalTimer9start_SITEmb+0xd0>)
		break;
 8085662:	e022      	b.n	80856aa <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 1:		// TIM4
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8085664:	2101      	movs	r1, #1
 8085666:	2004      	movs	r0, #4
 8085668:	f002 ff9a 	bl	80885a0 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 808566c:	231e      	movs	r3, #30
 808566e:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM4;
 8085672:	4c26      	ldr	r4, [pc, #152]	; (808570c <_ZN13IntervalTimer9start_SITEmb+0xd4>)
		break;
 8085674:	e019      	b.n	80856aa <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 2:		// TIM5
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8085676:	2101      	movs	r1, #1
 8085678:	2008      	movs	r0, #8
 808567a:	f002 ff91 	bl	80885a0 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 808567e:	2332      	movs	r3, #50	; 0x32
 8085680:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM5;
 8085684:	4c22      	ldr	r4, [pc, #136]	; (8085710 <_ZN13IntervalTimer9start_SITEmb+0xd8>)
		break;
 8085686:	e010      	b.n	80856aa <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 3:		// TIM6
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8085688:	2101      	movs	r1, #1
 808568a:	2010      	movs	r0, #16
 808568c:	f002 ff88 	bl	80885a0 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085690:	2336      	movs	r3, #54	; 0x36
 8085692:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM6;
 8085696:	4c1f      	ldr	r4, [pc, #124]	; (8085714 <_ZN13IntervalTimer9start_SITEmb+0xdc>)
		break;
 8085698:	e007      	b.n	80856aa <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 808569a:	2101      	movs	r1, #1
 808569c:	2020      	movs	r0, #32
 808569e:	f002 ff7f 	bl	80885a0 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
		TIMx = TIM7;
 80856a2:	4c1d      	ldr	r4, [pc, #116]	; (8085718 <_ZN13IntervalTimer9start_SITEmb+0xe0>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80856a4:	2337      	movs	r3, #55	; 0x37
 80856a6:	f88d 3000 	strb.w	r3, [sp]
		break;
#endif
	}
	
	// Initialize Timer
	switch (scale) {
 80856aa:	b11e      	cbz	r6, 80856b4 <_ZN13IntervalTimer9start_SITEmb+0x7c>
 80856ac:	2e01      	cmp	r6, #1
 80856ae:	d101      	bne.n	80856b4 <_ZN13IntervalTimer9start_SITEmb+0x7c>
		case uSec:
			prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
			break;
		case hmSec:
			prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 80856b0:	88ae      	ldrh	r6, [r5, #4]
			break;
 80856b2:	e000      	b.n	80856b6 <_ZN13IntervalTimer9start_SITEmb+0x7e>
		default:
			prescaler = SIT_PRESCALERu;
 80856b4:	886e      	ldrh	r6, [r5, #2]
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 80856b6:	7a6a      	ldrb	r2, [r5, #9]
 80856b8:	68e9      	ldr	r1, [r5, #12]
 80856ba:	4b18      	ldr	r3, [pc, #96]	; (808571c <_ZN13IntervalTimer9start_SITEmb+0xe4>)

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80856bc:	2501      	movs	r5, #1
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 80856be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
 80856c2:	4668      	mov	r0, sp

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
 80856c4:	230a      	movs	r3, #10
 80856c6:	f88d 3001 	strb.w	r3, [sp, #1]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80856ca:	f88d 5002 	strb.w	r5, [sp, #2]
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80856ce:	f88d 5003 	strb.w	r5, [sp, #3]
    	NVIC_Init(&nvicStructure);
 80856d2:	f002 ff2d 	bl	8088530 <NVIC_Init>
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80856d6:	2300      	movs	r3, #0
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80856d8:	a901      	add	r1, sp, #4
 80856da:	4620      	mov	r0, r4
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80856dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80856e0:	f8ad 300c 	strh.w	r3, [sp, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 80856e4:	f88d 300e 	strb.w	r3, [sp, #14]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
 80856e8:	f8ad 6004 	strh.w	r6, [sp, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = Period;
 80856ec:	9702      	str	r7, [sp, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80856ee:	f003 f831 	bl	8088754 <TIM_TimeBaseInit>
	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 80856f2:	462a      	mov	r2, r5
 80856f4:	4629      	mov	r1, r5
 80856f6:	4620      	mov	r0, r4
 80856f8:	f003 f88e 	bl	8088818 <TIM_ITConfig>
	TIM_Cmd(TIMx, ENABLE);
 80856fc:	4629      	mov	r1, r5
 80856fe:	4620      	mov	r0, r4
 8085700:	f003 f866 	bl	80887d0 <TIM_Cmd>
}
 8085704:	b005      	add	sp, #20
 8085706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085708:	40000400 	.word	0x40000400
 808570c:	40000800 	.word	0x40000800
 8085710:	40000c00 	.word	0x40000c00
 8085714:	40001000 	.word	0x40001000
 8085718:	40001400 	.word	0x40001400
 808571c:	20000924 	.word	0x20000924

08085720 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>:
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 8085720:	2b04      	cmp	r3, #4
// enables the SIT clock if not already enabled, then checks to
// see if any SITs are available for use. if one is available,
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {
 8085722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085724:	4606      	mov	r6, r0
 8085726:	460f      	mov	r7, r1
 8085728:	4696      	mov	lr, r2
 808572a:	461c      	mov	r4, r3
 808572c:	4d0e      	ldr	r5, [pc, #56]	; (8085768 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 808572e:	d911      	bls.n	8085754 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x34>
 8085730:	2400      	movs	r4, #0
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 8085732:	5d2a      	ldrb	r2, [r5, r4]
 8085734:	b2e3      	uxtb	r3, r4
 8085736:	b94a      	cbnz	r2, 808574c <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x2c>
				SIT_id = tid;
 8085738:	7273      	strb	r3, [r6, #9]
				start_SIT(Period, scale);
 808573a:	4630      	mov	r0, r6
 808573c:	4672      	mov	r2, lr
 808573e:	4639      	mov	r1, r7
 8085740:	f7ff ff7a 	bl	8085638 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 8085744:	4b08      	ldr	r3, [pc, #32]	; (8085768 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)
 8085746:	2001      	movs	r0, #1
 8085748:	5518      	strb	r0, [r3, r4]
 808574a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808574c:	3401      	adds	r4, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 808574e:	2c05      	cmp	r4, #5
 8085750:	d1ef      	bne.n	8085732 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x12>
 8085752:	e007      	b.n	8085764 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
		if (!SIT_used[id]) {
 8085754:	5ceb      	ldrb	r3, [r5, r3]
 8085756:	b92b      	cbnz	r3, 8085764 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
			SIT_id = id;
 8085758:	7244      	strb	r4, [r0, #9]
			start_SIT(Period, scale);
 808575a:	f7ff ff6d 	bl	8085638 <_ZN13IntervalTimer9start_SITEmb>
			SIT_used[id] = true;
 808575e:	2001      	movs	r0, #1
 8085760:	5528      	strb	r0, [r5, r4]
			return true;
 8085762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	
	// Specified or no auto-allocate SIT available
	return false;
 8085764:	2000      	movs	r0, #0
}
 8085766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085768:	20000938 	.word	0x20000938

0808576c <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 808576c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 808576e:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 8085770:	4606      	mov	r6, r0
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8085772:	2b04      	cmp	r3, #4
 8085774:	d81c      	bhi.n	80857b0 <_ZN13IntervalTimer8stop_SITEv+0x44>
 8085776:	e8df f003 	tbb	[pc, r3]
 808577a:	0803      	.short	0x0803
 808577c:	120d      	.short	0x120d
 808577e:	17          	.byte	0x17
 808577f:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085780:	231d      	movs	r3, #29
 8085782:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM3;
 8085786:	4c13      	ldr	r4, [pc, #76]	; (80857d4 <_ZN13IntervalTimer8stop_SITEv+0x68>)
		break;
 8085788:	e012      	b.n	80857b0 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 1:		// TIM4
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 808578a:	231e      	movs	r3, #30
 808578c:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM4;
 8085790:	4c11      	ldr	r4, [pc, #68]	; (80857d8 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
		break;
 8085792:	e00d      	b.n	80857b0 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 2:		// TIM5
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8085794:	2332      	movs	r3, #50	; 0x32
 8085796:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM5;
 808579a:	4c10      	ldr	r4, [pc, #64]	; (80857dc <_ZN13IntervalTimer8stop_SITEv+0x70>)
		break;
 808579c:	e008      	b.n	80857b0 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 808579e:	2336      	movs	r3, #54	; 0x36
 80857a0:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM6;
 80857a4:	4c0e      	ldr	r4, [pc, #56]	; (80857e0 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		break;
 80857a6:	e003      	b.n	80857b0 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80857a8:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 80857aa:	4c0e      	ldr	r4, [pc, #56]	; (80857e4 <_ZN13IntervalTimer8stop_SITEv+0x78>)
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80857ac:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM7;
		break;
#endif
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
 80857b0:	2100      	movs	r1, #0
 80857b2:	4620      	mov	r0, r4
 80857b4:	f003 f80c 	bl	80887d0 <TIM_Cmd>
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 80857b8:	2500      	movs	r5, #0
    NVIC_Init(&nvicStructure);
 80857ba:	a801      	add	r0, sp, #4
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 80857bc:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&nvicStructure);
 80857c0:	f002 feb6 	bl	8088530 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 80857c4:	4620      	mov	r0, r4
 80857c6:	f002 ff0f 	bl	80885e8 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 80857ca:	7a73      	ldrb	r3, [r6, #9]
 80857cc:	4a06      	ldr	r2, [pc, #24]	; (80857e8 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 80857ce:	54d5      	strb	r5, [r2, r3]
}
 80857d0:	b002      	add	sp, #8
 80857d2:	bd70      	pop	{r4, r5, r6, pc}
 80857d4:	40000400 	.word	0x40000400
 80857d8:	40000800 	.word	0x40000800
 80857dc:	40000c00 	.word	0x40000c00
 80857e0:	40001000 	.word	0x40001000
 80857e4:	40001400 	.word	0x40001400
 80857e8:	20000938 	.word	0x20000938

080857ec <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>:
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 80857ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80857f0:	461f      	mov	r7, r3

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 80857f2:	7a03      	ldrb	r3, [r0, #8]
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 80857f4:	4604      	mov	r4, r0
 80857f6:	4688      	mov	r8, r1
 80857f8:	4616      	mov	r6, r2
 80857fa:	f89d 5018 	ldrb.w	r5, [sp, #24]

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 80857fe:	b11b      	cbz	r3, 8085808 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x1c>
		stop_SIT();
 8085800:	f7ff ffb4 	bl	808576c <_ZN13IntervalTimer8stop_SITEv>
		status = TIMER_OFF;
 8085804:	2300      	movs	r3, #0
 8085806:	7223      	strb	r3, [r4, #8]
	}
	// store callback pointer
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 8085808:	2d04      	cmp	r5, #4
	if (status == TIMER_SIT) {
		stop_SIT();
		status = TIMER_OFF;
	}
	// store callback pointer
	myISRcallback = isrCallback;
 808580a:	f8c4 800c 	str.w	r8, [r4, #12]

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 808580e:	d810      	bhi.n	8085832 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x46>
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
 8085810:	462b      	mov	r3, r5
 8085812:	463a      	mov	r2, r7
 8085814:	4631      	mov	r1, r6
 8085816:	4620      	mov	r0, r4
 8085818:	f7ff ff82 	bl	8085720 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>
 808581c:	b120      	cbz	r0, 8085828 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3c>
 808581e:	2301      	movs	r3, #1
 8085820:	e003      	b.n	808582a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 8085822:	3501      	adds	r5, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 8085824:	2d05      	cmp	r5, #5
 8085826:	d106      	bne.n	8085836 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x4a>
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
		else status = TIMER_OFF;
 8085828:	2300      	movs	r3, #0
 808582a:	7223      	strb	r3, [r4, #8]

	// check for success and return
	if (status != TIMER_OFF) return true;
	return false;

}
 808582c:	7a20      	ldrb	r0, [r4, #8]
 808582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 8085832:	4b08      	ldr	r3, [pc, #32]	; (8085854 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 8085834:	2500      	movs	r5, #0
 8085836:	5ce9      	ldrb	r1, [r5, r3]
 8085838:	b2ea      	uxtb	r2, r5
 808583a:	2900      	cmp	r1, #0
 808583c:	d1f1      	bne.n	8085822 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x36>
				SIT_id = tid;
 808583e:	7262      	strb	r2, [r4, #9]
				start_SIT(Period, scale);
 8085840:	4631      	mov	r1, r6
 8085842:	463a      	mov	r2, r7
 8085844:	4620      	mov	r0, r4
 8085846:	f7ff fef7 	bl	8085638 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 808584a:	4a02      	ldr	r2, [pc, #8]	; (8085854 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 808584c:	2301      	movs	r3, #1
 808584e:	5553      	strb	r3, [r2, r5]
 8085850:	e7eb      	b.n	808582a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 8085852:	bf00      	nop
 8085854:	20000938 	.word	0x20000938

08085858 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
	if (status == TIMER_SIT) stop_SIT();
 8085858:	7a03      	ldrb	r3, [r0, #8]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
 808585a:	b510      	push	{r4, lr}
 808585c:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 808585e:	b10b      	cbz	r3, 8085864 <_ZN13IntervalTimer3endEv+0xc>
 8085860:	f7ff ff84 	bl	808576c <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 8085864:	2300      	movs	r3, #0
 8085866:	7223      	strb	r3, [r4, #8]
 8085868:	bd10      	pop	{r4, pc}
	...

0808586c <_ZN13IntervalTimer15resetPeriod_SITEmb>:
// ------------------------------------------------------------
// Set new period for the SIT without
// removing the SIT.
// ------------------------------------------------------------
void IntervalTimer::resetPeriod_SIT(intPeriod newPeriod, bool scale)
{
 808586c:	b510      	push	{r4, lr}
	//TIM_TimeBaseInitTypeDef timerInitStructure;
	TIM_TypeDef* TIMx;
	intPeriod prescaler;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 808586e:	7a44      	ldrb	r4, [r0, #9]
 8085870:	2c04      	cmp	r4, #4
 8085872:	d80d      	bhi.n	8085890 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 8085874:	e8df f004 	tbb	[pc, r4]
 8085878:	09070503 	.word	0x09070503
 808587c:	0b          	.byte	0x0b
 808587d:	00          	.byte	0x00
	case 2:		// TIM4
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		TIMx = TIM3;
 808587e:	4b0c      	ldr	r3, [pc, #48]	; (80858b0 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x44>)
 8085880:	e006      	b.n	8085890 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
		break;
	case 1:		// TIM4
		TIMx = TIM4;
 8085882:	4b0c      	ldr	r3, [pc, #48]	; (80858b4 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x48>)
		break;
 8085884:	e004      	b.n	8085890 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 2:		// TIM5
		TIMx = TIM5;
 8085886:	4b0c      	ldr	r3, [pc, #48]	; (80858b8 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x4c>)
		break;
 8085888:	e002      	b.n	8085890 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 3:		// TIM6
		TIMx = TIM6;
 808588a:	4b0c      	ldr	r3, [pc, #48]	; (80858bc <_ZN13IntervalTimer15resetPeriod_SITEmb+0x50>)
		break;
 808588c:	e000      	b.n	8085890 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 4:		// TIM7
		TIMx = TIM7;
 808588e:	4b0c      	ldr	r3, [pc, #48]	; (80858c0 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x54>)
		break;
#endif
	}

	switch (scale) {
 8085890:	b11a      	cbz	r2, 808589a <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
 8085892:	2a01      	cmp	r2, #1
 8085894:	d101      	bne.n	808589a <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
	case uSec:
		prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
		break;
	case hmSec:
		prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 8085896:	8882      	ldrh	r2, [r0, #4]
		break;
 8085898:	e000      	b.n	808589c <_ZN13IntervalTimer15resetPeriod_SITEmb+0x30>
	default:
		scale = uSec;				// Default to microseconds
		prescaler = SIT_PRESCALERu;
 808589a:	8842      	ldrh	r2, [r0, #2]
		break;
	}

	TIMx->ARR = newPeriod;
 808589c:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIMx->PSC = prescaler;
 808589e:	b292      	uxth	r2, r2
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80858a0:	2101      	movs	r1, #1
		prescaler = SIT_PRESCALERu;
		break;
	}

	TIMx->ARR = newPeriod;
	TIMx->PSC = prescaler;
 80858a2:	851a      	strh	r2, [r3, #40]	; 0x28
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80858a4:	8299      	strh	r1, [r3, #20]
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 80858a6:	4618      	mov	r0, r3
}
 80858a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	TIMx->ARR = newPeriod;
	TIMx->PSC = prescaler;
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 80858ac:	f002 bfa7 	b.w	80887fe <TIM_ClearITPendingBit>
 80858b0:	40000400 	.word	0x40000400
 80858b4:	40000800 	.word	0x40000800
 80858b8:	40000c00 	.word	0x40000c00
 80858bc:	40001000 	.word	0x40001000
 80858c0:	40001400 	.word	0x40001400

080858c4 <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 80858c4:	f000 b800 	b.w	80858c8 <HAL_Pin_Map>

080858c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80858c8:	b508      	push	{r3, lr}
 80858ca:	4b02      	ldr	r3, [pc, #8]	; (80858d4 <HAL_Pin_Map+0xc>)
 80858cc:	681b      	ldr	r3, [r3, #0]
 80858ce:	681b      	ldr	r3, [r3, #0]
 80858d0:	9301      	str	r3, [sp, #4]
 80858d2:	bd08      	pop	{r3, pc}
 80858d4:	080401b0 	.word	0x080401b0

080858d8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80858d8:	b508      	push	{r3, lr}
 80858da:	4b02      	ldr	r3, [pc, #8]	; (80858e4 <HAL_Validate_Pin_Function+0xc>)
 80858dc:	681b      	ldr	r3, [r3, #0]
 80858de:	685b      	ldr	r3, [r3, #4]
 80858e0:	9301      	str	r3, [sp, #4]
 80858e2:	bd08      	pop	{r3, pc}
 80858e4:	080401b0 	.word	0x080401b0

080858e8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80858e8:	b508      	push	{r3, lr}
 80858ea:	4b02      	ldr	r3, [pc, #8]	; (80858f4 <HAL_Pin_Mode+0xc>)
 80858ec:	681b      	ldr	r3, [r3, #0]
 80858ee:	689b      	ldr	r3, [r3, #8]
 80858f0:	9301      	str	r3, [sp, #4]
 80858f2:	bd08      	pop	{r3, pc}
 80858f4:	080401b0 	.word	0x080401b0

080858f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80858f8:	b508      	push	{r3, lr}
 80858fa:	4b02      	ldr	r3, [pc, #8]	; (8085904 <HAL_Get_Pin_Mode+0xc>)
 80858fc:	681b      	ldr	r3, [r3, #0]
 80858fe:	68db      	ldr	r3, [r3, #12]
 8085900:	9301      	str	r3, [sp, #4]
 8085902:	bd08      	pop	{r3, pc}
 8085904:	080401b0 	.word	0x080401b0

08085908 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8085908:	b508      	push	{r3, lr}
 808590a:	4b02      	ldr	r3, [pc, #8]	; (8085914 <HAL_GPIO_Write+0xc>)
 808590c:	681b      	ldr	r3, [r3, #0]
 808590e:	691b      	ldr	r3, [r3, #16]
 8085910:	9301      	str	r3, [sp, #4]
 8085912:	bd08      	pop	{r3, pc}
 8085914:	080401b0 	.word	0x080401b0

08085918 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8085918:	b508      	push	{r3, lr}
 808591a:	4b02      	ldr	r3, [pc, #8]	; (8085924 <HAL_Interrupts_Attach+0xc>)
 808591c:	681b      	ldr	r3, [r3, #0]
 808591e:	699b      	ldr	r3, [r3, #24]
 8085920:	9301      	str	r3, [sp, #4]
 8085922:	bd08      	pop	{r3, pc}
 8085924:	080401b0 	.word	0x080401b0

08085928 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8085928:	b508      	push	{r3, lr}
 808592a:	4b02      	ldr	r3, [pc, #8]	; (8085934 <HAL_Interrupts_Detach+0xc>)
 808592c:	681b      	ldr	r3, [r3, #0]
 808592e:	69db      	ldr	r3, [r3, #28]
 8085930:	9301      	str	r3, [sp, #4]
 8085932:	bd08      	pop	{r3, pc}
 8085934:	080401b0 	.word	0x080401b0

08085938 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8085938:	b508      	push	{r3, lr}
 808593a:	4b02      	ldr	r3, [pc, #8]	; (8085944 <HAL_ADC_Read+0xc>)
 808593c:	681b      	ldr	r3, [r3, #0]
 808593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085940:	9301      	str	r3, [sp, #4]
 8085942:	bd08      	pop	{r3, pc}
 8085944:	080401b0 	.word	0x080401b0

08085948 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 8085948:	b508      	push	{r3, lr}
 808594a:	4b02      	ldr	r3, [pc, #8]	; (8085954 <HAL_Set_System_Interrupt_Handler+0xc>)
 808594c:	681b      	ldr	r3, [r3, #0]
 808594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085950:	9301      	str	r3, [sp, #4]
 8085952:	bd08      	pop	{r3, pc}
 8085954:	080401b0 	.word	0x080401b0

08085958 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8085958:	b508      	push	{r3, lr}
 808595a:	4b02      	ldr	r3, [pc, #8]	; (8085964 <HAL_SPI_Begin+0xc>)
 808595c:	681b      	ldr	r3, [r3, #0]
 808595e:	681b      	ldr	r3, [r3, #0]
 8085960:	9301      	str	r3, [sp, #4]
 8085962:	bd08      	pop	{r3, pc}
 8085964:	080401b4 	.word	0x080401b4

08085968 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8085968:	b508      	push	{r3, lr}
 808596a:	4b02      	ldr	r3, [pc, #8]	; (8085974 <HAL_SPI_Send_Receive_Data+0xc>)
 808596c:	681b      	ldr	r3, [r3, #0]
 808596e:	695b      	ldr	r3, [r3, #20]
 8085970:	9301      	str	r3, [sp, #4]
 8085972:	bd08      	pop	{r3, pc}
 8085974:	080401b4 	.word	0x080401b4

08085978 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8085978:	b508      	push	{r3, lr}
 808597a:	4b02      	ldr	r3, [pc, #8]	; (8085984 <HAL_SPI_Init+0xc>)
 808597c:	681b      	ldr	r3, [r3, #0]
 808597e:	69db      	ldr	r3, [r3, #28]
 8085980:	9301      	str	r3, [sp, #4]
 8085982:	bd08      	pop	{r3, pc}
 8085984:	080401b4 	.word	0x080401b4

08085988 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8085988:	b508      	push	{r3, lr}
 808598a:	4b02      	ldr	r3, [pc, #8]	; (8085994 <HAL_SPI_Is_Enabled+0xc>)
 808598c:	681b      	ldr	r3, [r3, #0]
 808598e:	6a1b      	ldr	r3, [r3, #32]
 8085990:	9301      	str	r3, [sp, #4]
 8085992:	bd08      	pop	{r3, pc}
 8085994:	080401b4 	.word	0x080401b4

08085998 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8085998:	b508      	push	{r3, lr}
 808599a:	4b02      	ldr	r3, [pc, #8]	; (80859a4 <HAL_SPI_Info+0xc>)
 808599c:	681b      	ldr	r3, [r3, #0]
 808599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80859a0:	9301      	str	r3, [sp, #4]
 80859a2:	bd08      	pop	{r3, pc}
 80859a4:	080401b4 	.word	0x080401b4

080859a8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80859a8:	b508      	push	{r3, lr}
 80859aa:	4b02      	ldr	r3, [pc, #8]	; (80859b4 <HAL_SPI_DMA_Transfer+0xc>)
 80859ac:	681b      	ldr	r3, [r3, #0]
 80859ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80859b0:	9301      	str	r3, [sp, #4]
 80859b2:	bd08      	pop	{r3, pc}
 80859b4:	080401b4 	.word	0x080401b4

080859b8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80859b8:	b508      	push	{r3, lr}
 80859ba:	4b02      	ldr	r3, [pc, #8]	; (80859c4 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80859bc:	681b      	ldr	r3, [r3, #0]
 80859be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80859c0:	9301      	str	r3, [sp, #4]
 80859c2:	bd08      	pop	{r3, pc}
 80859c4:	080401b4 	.word	0x080401b4

080859c8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80859c8:	b508      	push	{r3, lr}
 80859ca:	4b02      	ldr	r3, [pc, #8]	; (80859d4 <HAL_SPI_Set_Settings+0xc>)
 80859cc:	681b      	ldr	r3, [r3, #0]
 80859ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80859d0:	9301      	str	r3, [sp, #4]
 80859d2:	bd08      	pop	{r3, pc}
 80859d4:	080401b4 	.word	0x080401b4

080859d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80859d8:	b508      	push	{r3, lr}
 80859da:	4b02      	ldr	r3, [pc, #8]	; (80859e4 <HAL_RNG_GetRandomNumber+0xc>)
 80859dc:	681b      	ldr	r3, [r3, #0]
 80859de:	685b      	ldr	r3, [r3, #4]
 80859e0:	9301      	str	r3, [sp, #4]
 80859e2:	bd08      	pop	{r3, pc}
 80859e4:	0804019c 	.word	0x0804019c

080859e8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80859e8:	b508      	push	{r3, lr}
 80859ea:	4b02      	ldr	r3, [pc, #8]	; (80859f4 <HAL_Delay_Milliseconds+0xc>)
 80859ec:	681b      	ldr	r3, [r3, #0]
 80859ee:	689b      	ldr	r3, [r3, #8]
 80859f0:	9301      	str	r3, [sp, #4]
 80859f2:	bd08      	pop	{r3, pc}
 80859f4:	0804019c 	.word	0x0804019c

080859f8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80859f8:	b508      	push	{r3, lr}
 80859fa:	4b02      	ldr	r3, [pc, #8]	; (8085a04 <HAL_Delay_Microseconds+0xc>)
 80859fc:	681b      	ldr	r3, [r3, #0]
 80859fe:	68db      	ldr	r3, [r3, #12]
 8085a00:	9301      	str	r3, [sp, #4]
 8085a02:	bd08      	pop	{r3, pc}
 8085a04:	0804019c 	.word	0x0804019c

08085a08 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8085a08:	b508      	push	{r3, lr}
 8085a0a:	4b02      	ldr	r3, [pc, #8]	; (8085a14 <HAL_Timer_Get_Micro_Seconds+0xc>)
 8085a0c:	681b      	ldr	r3, [r3, #0]
 8085a0e:	691b      	ldr	r3, [r3, #16]
 8085a10:	9301      	str	r3, [sp, #4]
 8085a12:	bd08      	pop	{r3, pc}
 8085a14:	0804019c 	.word	0x0804019c

08085a18 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8085a18:	b508      	push	{r3, lr}
 8085a1a:	4b02      	ldr	r3, [pc, #8]	; (8085a24 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8085a1c:	681b      	ldr	r3, [r3, #0]
 8085a1e:	695b      	ldr	r3, [r3, #20]
 8085a20:	9301      	str	r3, [sp, #4]
 8085a22:	bd08      	pop	{r3, pc}
 8085a24:	0804019c 	.word	0x0804019c

08085a28 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8085a28:	b508      	push	{r3, lr}
 8085a2a:	4b02      	ldr	r3, [pc, #8]	; (8085a34 <HAL_RTC_Get_UnixTime+0xc>)
 8085a2c:	681b      	ldr	r3, [r3, #0]
 8085a2e:	69db      	ldr	r3, [r3, #28]
 8085a30:	9301      	str	r3, [sp, #4]
 8085a32:	bd08      	pop	{r3, pc}
 8085a34:	0804019c 	.word	0x0804019c

08085a38 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8085a38:	b508      	push	{r3, lr}
 8085a3a:	4b02      	ldr	r3, [pc, #8]	; (8085a44 <HAL_RTC_Time_Is_Valid+0xc>)
 8085a3c:	681b      	ldr	r3, [r3, #0]
 8085a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085a40:	9301      	str	r3, [sp, #4]
 8085a42:	bd08      	pop	{r3, pc}
 8085a44:	0804019c 	.word	0x0804019c

08085a48 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8085a48:	b508      	push	{r3, lr}
 8085a4a:	4b02      	ldr	r3, [pc, #8]	; (8085a54 <hal_timer_millis+0xc>)
 8085a4c:	681b      	ldr	r3, [r3, #0]
 8085a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8085a50:	9301      	str	r3, [sp, #4]
 8085a52:	bd08      	pop	{r3, pc}
 8085a54:	0804019c 	.word	0x0804019c

08085a58 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8085a58:	b508      	push	{r3, lr}
 8085a5a:	4b02      	ldr	r3, [pc, #8]	; (8085a64 <HAL_Core_System_Reset_Ex+0xc>)
 8085a5c:	681b      	ldr	r3, [r3, #0]
 8085a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085a60:	9301      	str	r3, [sp, #4]
 8085a62:	bd08      	pop	{r3, pc}
 8085a64:	080401b8 	.word	0x080401b8

08085a68 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8085a68:	b508      	push	{r3, lr}
 8085a6a:	4b02      	ldr	r3, [pc, #8]	; (8085a74 <os_thread_create+0xc>)
 8085a6c:	681b      	ldr	r3, [r3, #0]
 8085a6e:	685b      	ldr	r3, [r3, #4]
 8085a70:	9301      	str	r3, [sp, #4]
 8085a72:	bd08      	pop	{r3, pc}
 8085a74:	080401d0 	.word	0x080401d0

08085a78 <os_thread_cleanup>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8085a78:	b508      	push	{r3, lr}
 8085a7a:	4b02      	ldr	r3, [pc, #8]	; (8085a84 <os_thread_cleanup+0xc>)
 8085a7c:	681b      	ldr	r3, [r3, #0]
 8085a7e:	695b      	ldr	r3, [r3, #20]
 8085a80:	9301      	str	r3, [sp, #4]
 8085a82:	bd08      	pop	{r3, pc}
 8085a84:	080401d0 	.word	0x080401d0

08085a88 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8085a88:	b508      	push	{r3, lr}
 8085a8a:	4b02      	ldr	r3, [pc, #8]	; (8085a94 <os_mutex_recursive_create+0xc>)
 8085a8c:	681b      	ldr	r3, [r3, #0]
 8085a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085a90:	9301      	str	r3, [sp, #4]
 8085a92:	bd08      	pop	{r3, pc}
 8085a94:	080401d0 	.word	0x080401d0

08085a98 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8085a98:	b508      	push	{r3, lr}
 8085a9a:	4b02      	ldr	r3, [pc, #8]	; (8085aa4 <os_mutex_recursive_destroy+0xc>)
 8085a9c:	681b      	ldr	r3, [r3, #0]
 8085a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085aa0:	9301      	str	r3, [sp, #4]
 8085aa2:	bd08      	pop	{r3, pc}
 8085aa4:	080401d0 	.word	0x080401d0

08085aa8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8085aa8:	b508      	push	{r3, lr}
 8085aaa:	4b02      	ldr	r3, [pc, #8]	; (8085ab4 <os_mutex_recursive_lock+0xc>)
 8085aac:	681b      	ldr	r3, [r3, #0]
 8085aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085ab0:	9301      	str	r3, [sp, #4]
 8085ab2:	bd08      	pop	{r3, pc}
 8085ab4:	080401d0 	.word	0x080401d0

08085ab8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8085ab8:	b508      	push	{r3, lr}
 8085aba:	4b02      	ldr	r3, [pc, #8]	; (8085ac4 <os_mutex_recursive_unlock+0xc>)
 8085abc:	681b      	ldr	r3, [r3, #0]
 8085abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085ac0:	9301      	str	r3, [sp, #4]
 8085ac2:	bd08      	pop	{r3, pc}
 8085ac4:	080401d0 	.word	0x080401d0

08085ac8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8085ac8:	b508      	push	{r3, lr}
 8085aca:	4b02      	ldr	r3, [pc, #8]	; (8085ad4 <os_thread_exit+0xc>)
 8085acc:	681b      	ldr	r3, [r3, #0]
 8085ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085ad0:	9301      	str	r3, [sp, #4]
 8085ad2:	bd08      	pop	{r3, pc}
 8085ad4:	080401d0 	.word	0x080401d0

08085ad8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8085ad8:	b508      	push	{r3, lr}
 8085ada:	4b02      	ldr	r3, [pc, #8]	; (8085ae4 <HAL_USART_Init+0xc>)
 8085adc:	681b      	ldr	r3, [r3, #0]
 8085ade:	699b      	ldr	r3, [r3, #24]
 8085ae0:	9301      	str	r3, [sp, #4]
 8085ae2:	bd08      	pop	{r3, pc}
 8085ae4:	080401c4 	.word	0x080401c4

08085ae8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8085ae8:	b508      	push	{r3, lr}
 8085aea:	4b02      	ldr	r3, [pc, #8]	; (8085af4 <HAL_USART_Write_Data+0xc>)
 8085aec:	681b      	ldr	r3, [r3, #0]
 8085aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085af0:	9301      	str	r3, [sp, #4]
 8085af2:	bd08      	pop	{r3, pc}
 8085af4:	080401c4 	.word	0x080401c4

08085af8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8085af8:	b508      	push	{r3, lr}
 8085afa:	4b02      	ldr	r3, [pc, #8]	; (8085b04 <HAL_USART_Available_Data+0xc>)
 8085afc:	681b      	ldr	r3, [r3, #0]
 8085afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085b00:	9301      	str	r3, [sp, #4]
 8085b02:	bd08      	pop	{r3, pc}
 8085b04:	080401c4 	.word	0x080401c4

08085b08 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8085b08:	b508      	push	{r3, lr}
 8085b0a:	4b02      	ldr	r3, [pc, #8]	; (8085b14 <HAL_USART_Read_Data+0xc>)
 8085b0c:	681b      	ldr	r3, [r3, #0]
 8085b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085b10:	9301      	str	r3, [sp, #4]
 8085b12:	bd08      	pop	{r3, pc}
 8085b14:	080401c4 	.word	0x080401c4

08085b18 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8085b18:	b508      	push	{r3, lr}
 8085b1a:	4b02      	ldr	r3, [pc, #8]	; (8085b24 <HAL_USART_Peek_Data+0xc>)
 8085b1c:	681b      	ldr	r3, [r3, #0]
 8085b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085b20:	9301      	str	r3, [sp, #4]
 8085b22:	bd08      	pop	{r3, pc}
 8085b24:	080401c4 	.word	0x080401c4

08085b28 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8085b28:	b508      	push	{r3, lr}
 8085b2a:	4b02      	ldr	r3, [pc, #8]	; (8085b34 <HAL_USART_Flush_Data+0xc>)
 8085b2c:	681b      	ldr	r3, [r3, #0]
 8085b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085b30:	9301      	str	r3, [sp, #4]
 8085b32:	bd08      	pop	{r3, pc}
 8085b34:	080401c4 	.word	0x080401c4

08085b38 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8085b38:	b508      	push	{r3, lr}
 8085b3a:	4b02      	ldr	r3, [pc, #8]	; (8085b44 <HAL_USART_Is_Enabled+0xc>)
 8085b3c:	681b      	ldr	r3, [r3, #0]
 8085b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085b40:	9301      	str	r3, [sp, #4]
 8085b42:	bd08      	pop	{r3, pc}
 8085b44:	080401c4 	.word	0x080401c4

08085b48 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8085b48:	b508      	push	{r3, lr}
 8085b4a:	4b02      	ldr	r3, [pc, #8]	; (8085b54 <HAL_USART_Available_Data_For_Write+0xc>)
 8085b4c:	681b      	ldr	r3, [r3, #0]
 8085b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085b50:	9301      	str	r3, [sp, #4]
 8085b52:	bd08      	pop	{r3, pc}
 8085b54:	080401c4 	.word	0x080401c4

08085b58 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8085b58:	b508      	push	{r3, lr}
 8085b5a:	4b02      	ldr	r3, [pc, #8]	; (8085b64 <HAL_USART_BeginConfig+0xc>)
 8085b5c:	681b      	ldr	r3, [r3, #0]
 8085b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085b60:	9301      	str	r3, [sp, #4]
 8085b62:	bd08      	pop	{r3, pc}
 8085b64:	080401c4 	.word	0x080401c4

08085b68 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8085b68:	b508      	push	{r3, lr}
 8085b6a:	4b02      	ldr	r3, [pc, #8]	; (8085b74 <HAL_I2C_Begin+0xc>)
 8085b6c:	681b      	ldr	r3, [r3, #0]
 8085b6e:	68db      	ldr	r3, [r3, #12]
 8085b70:	9301      	str	r3, [sp, #4]
 8085b72:	bd08      	pop	{r3, pc}
 8085b74:	080401ac 	.word	0x080401ac

08085b78 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8085b78:	b508      	push	{r3, lr}
 8085b7a:	4b02      	ldr	r3, [pc, #8]	; (8085b84 <HAL_I2C_Begin_Transmission+0xc>)
 8085b7c:	681b      	ldr	r3, [r3, #0]
 8085b7e:	699b      	ldr	r3, [r3, #24]
 8085b80:	9301      	str	r3, [sp, #4]
 8085b82:	bd08      	pop	{r3, pc}
 8085b84:	080401ac 	.word	0x080401ac

08085b88 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8085b88:	b508      	push	{r3, lr}
 8085b8a:	4b02      	ldr	r3, [pc, #8]	; (8085b94 <HAL_I2C_End_Transmission+0xc>)
 8085b8c:	681b      	ldr	r3, [r3, #0]
 8085b8e:	69db      	ldr	r3, [r3, #28]
 8085b90:	9301      	str	r3, [sp, #4]
 8085b92:	bd08      	pop	{r3, pc}
 8085b94:	080401ac 	.word	0x080401ac

08085b98 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8085b98:	b508      	push	{r3, lr}
 8085b9a:	4b02      	ldr	r3, [pc, #8]	; (8085ba4 <HAL_I2C_Write_Data+0xc>)
 8085b9c:	681b      	ldr	r3, [r3, #0]
 8085b9e:	6a1b      	ldr	r3, [r3, #32]
 8085ba0:	9301      	str	r3, [sp, #4]
 8085ba2:	bd08      	pop	{r3, pc}
 8085ba4:	080401ac 	.word	0x080401ac

08085ba8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8085ba8:	b508      	push	{r3, lr}
 8085baa:	4b02      	ldr	r3, [pc, #8]	; (8085bb4 <HAL_I2C_Available_Data+0xc>)
 8085bac:	681b      	ldr	r3, [r3, #0]
 8085bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085bb0:	9301      	str	r3, [sp, #4]
 8085bb2:	bd08      	pop	{r3, pc}
 8085bb4:	080401ac 	.word	0x080401ac

08085bb8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8085bb8:	b508      	push	{r3, lr}
 8085bba:	4b02      	ldr	r3, [pc, #8]	; (8085bc4 <HAL_I2C_Read_Data+0xc>)
 8085bbc:	681b      	ldr	r3, [r3, #0]
 8085bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085bc0:	9301      	str	r3, [sp, #4]
 8085bc2:	bd08      	pop	{r3, pc}
 8085bc4:	080401ac 	.word	0x080401ac

08085bc8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8085bc8:	b508      	push	{r3, lr}
 8085bca:	4b02      	ldr	r3, [pc, #8]	; (8085bd4 <HAL_I2C_Peek_Data+0xc>)
 8085bcc:	681b      	ldr	r3, [r3, #0]
 8085bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085bd0:	9301      	str	r3, [sp, #4]
 8085bd2:	bd08      	pop	{r3, pc}
 8085bd4:	080401ac 	.word	0x080401ac

08085bd8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8085bd8:	b508      	push	{r3, lr}
 8085bda:	4b02      	ldr	r3, [pc, #8]	; (8085be4 <HAL_I2C_Flush_Data+0xc>)
 8085bdc:	681b      	ldr	r3, [r3, #0]
 8085bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085be0:	9301      	str	r3, [sp, #4]
 8085be2:	bd08      	pop	{r3, pc}
 8085be4:	080401ac 	.word	0x080401ac

08085be8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8085be8:	b508      	push	{r3, lr}
 8085bea:	4b02      	ldr	r3, [pc, #8]	; (8085bf4 <HAL_I2C_Is_Enabled+0xc>)
 8085bec:	681b      	ldr	r3, [r3, #0]
 8085bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085bf0:	9301      	str	r3, [sp, #4]
 8085bf2:	bd08      	pop	{r3, pc}
 8085bf4:	080401ac 	.word	0x080401ac

08085bf8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8085bf8:	b508      	push	{r3, lr}
 8085bfa:	4b02      	ldr	r3, [pc, #8]	; (8085c04 <HAL_I2C_Init+0xc>)
 8085bfc:	681b      	ldr	r3, [r3, #0]
 8085bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085c00:	9301      	str	r3, [sp, #4]
 8085c02:	bd08      	pop	{r3, pc}
 8085c04:	080401ac 	.word	0x080401ac

08085c08 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8085c08:	b508      	push	{r3, lr}
 8085c0a:	4b02      	ldr	r3, [pc, #8]	; (8085c14 <HAL_I2C_Acquire+0xc>)
 8085c0c:	681b      	ldr	r3, [r3, #0]
 8085c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085c10:	9301      	str	r3, [sp, #4]
 8085c12:	bd08      	pop	{r3, pc}
 8085c14:	080401ac 	.word	0x080401ac

08085c18 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8085c18:	b508      	push	{r3, lr}
 8085c1a:	4b02      	ldr	r3, [pc, #8]	; (8085c24 <HAL_I2C_Release+0xc>)
 8085c1c:	681b      	ldr	r3, [r3, #0]
 8085c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085c20:	9301      	str	r3, [sp, #4]
 8085c22:	bd08      	pop	{r3, pc}
 8085c24:	080401ac 	.word	0x080401ac

08085c28 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8085c28:	b508      	push	{r3, lr}
 8085c2a:	4b02      	ldr	r3, [pc, #8]	; (8085c34 <HAL_I2C_Request_Data_Ex+0xc>)
 8085c2c:	681b      	ldr	r3, [r3, #0]
 8085c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085c30:	9301      	str	r3, [sp, #4]
 8085c32:	bd08      	pop	{r3, pc}
 8085c34:	080401ac 	.word	0x080401ac

08085c38 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8085c38:	b508      	push	{r3, lr}
 8085c3a:	4b02      	ldr	r3, [pc, #8]	; (8085c44 <socket_active_status+0xc>)
 8085c3c:	681b      	ldr	r3, [r3, #0]
 8085c3e:	681b      	ldr	r3, [r3, #0]
 8085c40:	9301      	str	r3, [sp, #4]
 8085c42:	bd08      	pop	{r3, pc}
 8085c44:	08060024 	.word	0x08060024

08085c48 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8085c48:	b508      	push	{r3, lr}
 8085c4a:	4b02      	ldr	r3, [pc, #8]	; (8085c54 <socket_handle_valid+0xc>)
 8085c4c:	681b      	ldr	r3, [r3, #0]
 8085c4e:	685b      	ldr	r3, [r3, #4]
 8085c50:	9301      	str	r3, [sp, #4]
 8085c52:	bd08      	pop	{r3, pc}
 8085c54:	08060024 	.word	0x08060024

08085c58 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8085c58:	b508      	push	{r3, lr}
 8085c5a:	4b02      	ldr	r3, [pc, #8]	; (8085c64 <socket_create+0xc>)
 8085c5c:	681b      	ldr	r3, [r3, #0]
 8085c5e:	689b      	ldr	r3, [r3, #8]
 8085c60:	9301      	str	r3, [sp, #4]
 8085c62:	bd08      	pop	{r3, pc}
 8085c64:	08060024 	.word	0x08060024

08085c68 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8085c68:	b508      	push	{r3, lr}
 8085c6a:	4b02      	ldr	r3, [pc, #8]	; (8085c74 <socket_connect+0xc>)
 8085c6c:	681b      	ldr	r3, [r3, #0]
 8085c6e:	68db      	ldr	r3, [r3, #12]
 8085c70:	9301      	str	r3, [sp, #4]
 8085c72:	bd08      	pop	{r3, pc}
 8085c74:	08060024 	.word	0x08060024

08085c78 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8085c78:	b508      	push	{r3, lr}
 8085c7a:	4b02      	ldr	r3, [pc, #8]	; (8085c84 <socket_receive+0xc>)
 8085c7c:	681b      	ldr	r3, [r3, #0]
 8085c7e:	691b      	ldr	r3, [r3, #16]
 8085c80:	9301      	str	r3, [sp, #4]
 8085c82:	bd08      	pop	{r3, pc}
 8085c84:	08060024 	.word	0x08060024

08085c88 <socket_receivefrom>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 8085c88:	b508      	push	{r3, lr}
 8085c8a:	4b02      	ldr	r3, [pc, #8]	; (8085c94 <socket_receivefrom+0xc>)
 8085c8c:	681b      	ldr	r3, [r3, #0]
 8085c8e:	695b      	ldr	r3, [r3, #20]
 8085c90:	9301      	str	r3, [sp, #4]
 8085c92:	bd08      	pop	{r3, pc}
 8085c94:	08060024 	.word	0x08060024

08085c98 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 8085c98:	b508      	push	{r3, lr}
 8085c9a:	4b02      	ldr	r3, [pc, #8]	; (8085ca4 <socket_sendto+0xc>)
 8085c9c:	681b      	ldr	r3, [r3, #0]
 8085c9e:	69db      	ldr	r3, [r3, #28]
 8085ca0:	9301      	str	r3, [sp, #4]
 8085ca2:	bd08      	pop	{r3, pc}
 8085ca4:	08060024 	.word	0x08060024

08085ca8 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8085ca8:	b508      	push	{r3, lr}
 8085caa:	4b02      	ldr	r3, [pc, #8]	; (8085cb4 <socket_close+0xc>)
 8085cac:	681b      	ldr	r3, [r3, #0]
 8085cae:	6a1b      	ldr	r3, [r3, #32]
 8085cb0:	9301      	str	r3, [sp, #4]
 8085cb2:	bd08      	pop	{r3, pc}
 8085cb4:	08060024 	.word	0x08060024

08085cb8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8085cb8:	b508      	push	{r3, lr}
 8085cba:	4b02      	ldr	r3, [pc, #8]	; (8085cc4 <socket_handle_invalid+0xc>)
 8085cbc:	681b      	ldr	r3, [r3, #0]
 8085cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085cc0:	9301      	str	r3, [sp, #4]
 8085cc2:	bd08      	pop	{r3, pc}
 8085cc4:	08060024 	.word	0x08060024

08085cc8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 8085cc8:	b508      	push	{r3, lr}
 8085cca:	4b02      	ldr	r3, [pc, #8]	; (8085cd4 <socket_send_ex+0xc>)
 8085ccc:	681b      	ldr	r3, [r3, #0]
 8085cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085cd0:	9301      	str	r3, [sp, #4]
 8085cd2:	bd08      	pop	{r3, pc}
 8085cd4:	08060024 	.word	0x08060024

08085cd8 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 8085cd8:	b508      	push	{r3, lr}
 8085cda:	4b02      	ldr	r3, [pc, #8]	; (8085ce4 <HAL_NET_SetNetWatchDog+0xc>)
 8085cdc:	681b      	ldr	r3, [r3, #0]
 8085cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085ce0:	9301      	str	r3, [sp, #4]
 8085ce2:	bd08      	pop	{r3, pc}
 8085ce4:	08060020 	.word	0x08060020

08085ce8 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8085ce8:	b508      	push	{r3, lr}
 8085cea:	4b02      	ldr	r3, [pc, #8]	; (8085cf4 <inet_gethostbyname+0xc>)
 8085cec:	681b      	ldr	r3, [r3, #0]
 8085cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085cf0:	9301      	str	r3, [sp, #4]
 8085cf2:	bd08      	pop	{r3, pc}
 8085cf4:	08060020 	.word	0x08060020

08085cf8 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8085cf8:	b508      	push	{r3, lr}
 8085cfa:	4b02      	ldr	r3, [pc, #8]	; (8085d04 <cellular_signal+0xc>)
 8085cfc:	681b      	ldr	r3, [r3, #0]
 8085cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085d00:	9301      	str	r3, [sp, #4]
 8085d02:	bd08      	pop	{r3, pc}
 8085d04:	08060020 	.word	0x08060020

08085d08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8085d08:	b508      	push	{r3, lr}
 8085d0a:	4b02      	ldr	r3, [pc, #8]	; (8085d14 <HAL_USB_USART_Init+0xc>)
 8085d0c:	681b      	ldr	r3, [r3, #0]
 8085d0e:	681b      	ldr	r3, [r3, #0]
 8085d10:	9301      	str	r3, [sp, #4]
 8085d12:	bd08      	pop	{r3, pc}
 8085d14:	0806001c 	.word	0x0806001c

08085d18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8085d18:	b508      	push	{r3, lr}
 8085d1a:	4b02      	ldr	r3, [pc, #8]	; (8085d24 <HAL_USB_USART_Begin+0xc>)
 8085d1c:	681b      	ldr	r3, [r3, #0]
 8085d1e:	685b      	ldr	r3, [r3, #4]
 8085d20:	9301      	str	r3, [sp, #4]
 8085d22:	bd08      	pop	{r3, pc}
 8085d24:	0806001c 	.word	0x0806001c

08085d28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8085d28:	b508      	push	{r3, lr}
 8085d2a:	4b02      	ldr	r3, [pc, #8]	; (8085d34 <HAL_USB_USART_Available_Data+0xc>)
 8085d2c:	681b      	ldr	r3, [r3, #0]
 8085d2e:	691b      	ldr	r3, [r3, #16]
 8085d30:	9301      	str	r3, [sp, #4]
 8085d32:	bd08      	pop	{r3, pc}
 8085d34:	0806001c 	.word	0x0806001c

08085d38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8085d38:	b508      	push	{r3, lr}
 8085d3a:	4b02      	ldr	r3, [pc, #8]	; (8085d44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8085d3c:	681b      	ldr	r3, [r3, #0]
 8085d3e:	695b      	ldr	r3, [r3, #20]
 8085d40:	9301      	str	r3, [sp, #4]
 8085d42:	bd08      	pop	{r3, pc}
 8085d44:	0806001c 	.word	0x0806001c

08085d48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8085d48:	b508      	push	{r3, lr}
 8085d4a:	4b02      	ldr	r3, [pc, #8]	; (8085d54 <HAL_USB_USART_Receive_Data+0xc>)
 8085d4c:	681b      	ldr	r3, [r3, #0]
 8085d4e:	699b      	ldr	r3, [r3, #24]
 8085d50:	9301      	str	r3, [sp, #4]
 8085d52:	bd08      	pop	{r3, pc}
 8085d54:	0806001c 	.word	0x0806001c

08085d58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8085d58:	b508      	push	{r3, lr}
 8085d5a:	4b02      	ldr	r3, [pc, #8]	; (8085d64 <HAL_USB_USART_Send_Data+0xc>)
 8085d5c:	681b      	ldr	r3, [r3, #0]
 8085d5e:	69db      	ldr	r3, [r3, #28]
 8085d60:	9301      	str	r3, [sp, #4]
 8085d62:	bd08      	pop	{r3, pc}
 8085d64:	0806001c 	.word	0x0806001c

08085d68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8085d68:	b508      	push	{r3, lr}
 8085d6a:	4b02      	ldr	r3, [pc, #8]	; (8085d74 <HAL_USB_USART_Flush_Data+0xc>)
 8085d6c:	681b      	ldr	r3, [r3, #0]
 8085d6e:	6a1b      	ldr	r3, [r3, #32]
 8085d70:	9301      	str	r3, [sp, #4]
 8085d72:	bd08      	pop	{r3, pc}
 8085d74:	0806001c 	.word	0x0806001c

08085d78 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8085d78:	b508      	push	{r3, lr}
 8085d7a:	4b02      	ldr	r3, [pc, #8]	; (8085d84 <panic_+0xc>)
 8085d7c:	681b      	ldr	r3, [r3, #0]
 8085d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085d80:	9301      	str	r3, [sp, #4]
 8085d82:	bd08      	pop	{r3, pc}
 8085d84:	080201a0 	.word	0x080201a0

08085d88 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8085d88:	b508      	push	{r3, lr}
 8085d8a:	4b02      	ldr	r3, [pc, #8]	; (8085d94 <log_message+0xc>)
 8085d8c:	681b      	ldr	r3, [r3, #0]
 8085d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085d90:	9301      	str	r3, [sp, #4]
 8085d92:	bd08      	pop	{r3, pc}
 8085d94:	080201a0 	.word	0x080201a0

08085d98 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8085d98:	b508      	push	{r3, lr}
 8085d9a:	4b02      	ldr	r3, [pc, #8]	; (8085da4 <log_message_v+0xc>)
 8085d9c:	681b      	ldr	r3, [r3, #0]
 8085d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085da0:	9301      	str	r3, [sp, #4]
 8085da2:	bd08      	pop	{r3, pc}
 8085da4:	080201a0 	.word	0x080201a0

08085da8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8085da8:	b508      	push	{r3, lr}
 8085daa:	4b02      	ldr	r3, [pc, #8]	; (8085db4 <system_mode+0xc>)
 8085dac:	681b      	ldr	r3, [r3, #0]
 8085dae:	681b      	ldr	r3, [r3, #0]
 8085db0:	9301      	str	r3, [sp, #4]
 8085db2:	bd08      	pop	{r3, pc}
 8085db4:	080401a4 	.word	0x080401a4

08085db8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8085db8:	b508      	push	{r3, lr}
 8085dba:	4b02      	ldr	r3, [pc, #8]	; (8085dc4 <set_system_mode+0xc>)
 8085dbc:	681b      	ldr	r3, [r3, #0]
 8085dbe:	685b      	ldr	r3, [r3, #4]
 8085dc0:	9301      	str	r3, [sp, #4]
 8085dc2:	bd08      	pop	{r3, pc}
 8085dc4:	080401a4 	.word	0x080401a4

08085dc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8085dc8:	b508      	push	{r3, lr}
 8085dca:	4b02      	ldr	r3, [pc, #8]	; (8085dd4 <system_delay_ms+0xc>)
 8085dcc:	681b      	ldr	r3, [r3, #0]
 8085dce:	695b      	ldr	r3, [r3, #20]
 8085dd0:	9301      	str	r3, [sp, #4]
 8085dd2:	bd08      	pop	{r3, pc}
 8085dd4:	080401a4 	.word	0x080401a4

08085dd8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8085dd8:	b508      	push	{r3, lr}
 8085dda:	4b02      	ldr	r3, [pc, #8]	; (8085de4 <system_sleep+0xc>)
 8085ddc:	681b      	ldr	r3, [r3, #0]
 8085dde:	699b      	ldr	r3, [r3, #24]
 8085de0:	9301      	str	r3, [sp, #4]
 8085de2:	bd08      	pop	{r3, pc}
 8085de4:	080401a4 	.word	0x080401a4

08085de8 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8085de8:	b508      	push	{r3, lr}
 8085dea:	4b02      	ldr	r3, [pc, #8]	; (8085df4 <system_thread_set_state+0xc>)
 8085dec:	681b      	ldr	r3, [r3, #0]
 8085dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085df0:	9301      	str	r3, [sp, #4]
 8085df2:	bd08      	pop	{r3, pc}
 8085df4:	080401a4 	.word	0x080401a4

08085df8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8085df8:	b508      	push	{r3, lr}
 8085dfa:	4b02      	ldr	r3, [pc, #8]	; (8085e04 <application_thread_current+0xc>)
 8085dfc:	681b      	ldr	r3, [r3, #0]
 8085dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085e00:	9301      	str	r3, [sp, #4]
 8085e02:	bd08      	pop	{r3, pc}
 8085e04:	080401a4 	.word	0x080401a4

08085e08 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8085e08:	b508      	push	{r3, lr}
 8085e0a:	4b02      	ldr	r3, [pc, #8]	; (8085e14 <application_thread_invoke+0xc>)
 8085e0c:	681b      	ldr	r3, [r3, #0]
 8085e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085e10:	9301      	str	r3, [sp, #4]
 8085e12:	bd08      	pop	{r3, pc}
 8085e14:	080401a4 	.word	0x080401a4

08085e18 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8085e18:	b508      	push	{r3, lr}
 8085e1a:	4b02      	ldr	r3, [pc, #8]	; (8085e24 <system_thread_get_state+0xc>)
 8085e1c:	681b      	ldr	r3, [r3, #0]
 8085e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085e20:	9301      	str	r3, [sp, #4]
 8085e22:	bd08      	pop	{r3, pc}
 8085e24:	080401a4 	.word	0x080401a4

08085e28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8085e28:	b508      	push	{r3, lr}
 8085e2a:	4b03      	ldr	r3, [pc, #12]	; (8085e38 <system_ctrl_set_app_request_handler+0x10>)
 8085e2c:	681b      	ldr	r3, [r3, #0]
 8085e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8085e32:	9301      	str	r3, [sp, #4]
 8085e34:	bd08      	pop	{r3, pc}
 8085e36:	0000      	.short	0x0000
 8085e38:	080401a4 	.word	0x080401a4

08085e3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8085e3c:	b508      	push	{r3, lr}
 8085e3e:	4b03      	ldr	r3, [pc, #12]	; (8085e4c <system_ctrl_set_result+0x10>)
 8085e40:	681b      	ldr	r3, [r3, #0]
 8085e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8085e46:	9301      	str	r3, [sp, #4]
 8085e48:	bd08      	pop	{r3, pc}
 8085e4a:	0000      	.short	0x0000
 8085e4c:	080401a4 	.word	0x080401a4

08085e50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8085e50:	b508      	push	{r3, lr}
 8085e52:	4b02      	ldr	r3, [pc, #8]	; (8085e5c <network_connect+0xc>)
 8085e54:	681b      	ldr	r3, [r3, #0]
 8085e56:	685b      	ldr	r3, [r3, #4]
 8085e58:	9301      	str	r3, [sp, #4]
 8085e5a:	bd08      	pop	{r3, pc}
 8085e5c:	080401c8 	.word	0x080401c8

08085e60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8085e60:	b508      	push	{r3, lr}
 8085e62:	4b02      	ldr	r3, [pc, #8]	; (8085e6c <network_connecting+0xc>)
 8085e64:	681b      	ldr	r3, [r3, #0]
 8085e66:	689b      	ldr	r3, [r3, #8]
 8085e68:	9301      	str	r3, [sp, #4]
 8085e6a:	bd08      	pop	{r3, pc}
 8085e6c:	080401c8 	.word	0x080401c8

08085e70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8085e70:	b508      	push	{r3, lr}
 8085e72:	4b02      	ldr	r3, [pc, #8]	; (8085e7c <network_disconnect+0xc>)
 8085e74:	681b      	ldr	r3, [r3, #0]
 8085e76:	68db      	ldr	r3, [r3, #12]
 8085e78:	9301      	str	r3, [sp, #4]
 8085e7a:	bd08      	pop	{r3, pc}
 8085e7c:	080401c8 	.word	0x080401c8

08085e80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8085e80:	b508      	push	{r3, lr}
 8085e82:	4b02      	ldr	r3, [pc, #8]	; (8085e8c <network_ready+0xc>)
 8085e84:	681b      	ldr	r3, [r3, #0]
 8085e86:	691b      	ldr	r3, [r3, #16]
 8085e88:	9301      	str	r3, [sp, #4]
 8085e8a:	bd08      	pop	{r3, pc}
 8085e8c:	080401c8 	.word	0x080401c8

08085e90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8085e90:	b508      	push	{r3, lr}
 8085e92:	4b02      	ldr	r3, [pc, #8]	; (8085e9c <network_on+0xc>)
 8085e94:	681b      	ldr	r3, [r3, #0]
 8085e96:	695b      	ldr	r3, [r3, #20]
 8085e98:	9301      	str	r3, [sp, #4]
 8085e9a:	bd08      	pop	{r3, pc}
 8085e9c:	080401c8 	.word	0x080401c8

08085ea0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8085ea0:	b508      	push	{r3, lr}
 8085ea2:	4b02      	ldr	r3, [pc, #8]	; (8085eac <network_off+0xc>)
 8085ea4:	681b      	ldr	r3, [r3, #0]
 8085ea6:	699b      	ldr	r3, [r3, #24]
 8085ea8:	9301      	str	r3, [sp, #4]
 8085eaa:	bd08      	pop	{r3, pc}
 8085eac:	080401c8 	.word	0x080401c8

08085eb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8085eb0:	b508      	push	{r3, lr}
 8085eb2:	4b02      	ldr	r3, [pc, #8]	; (8085ebc <network_listen+0xc>)
 8085eb4:	681b      	ldr	r3, [r3, #0]
 8085eb6:	69db      	ldr	r3, [r3, #28]
 8085eb8:	9301      	str	r3, [sp, #4]
 8085eba:	bd08      	pop	{r3, pc}
 8085ebc:	080401c8 	.word	0x080401c8

08085ec0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8085ec0:	b508      	push	{r3, lr}
 8085ec2:	4b02      	ldr	r3, [pc, #8]	; (8085ecc <network_listening+0xc>)
 8085ec4:	681b      	ldr	r3, [r3, #0]
 8085ec6:	6a1b      	ldr	r3, [r3, #32]
 8085ec8:	9301      	str	r3, [sp, #4]
 8085eca:	bd08      	pop	{r3, pc}
 8085ecc:	080401c8 	.word	0x080401c8

08085ed0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8085ed0:	b508      	push	{r3, lr}
 8085ed2:	4b02      	ldr	r3, [pc, #8]	; (8085edc <network_set_listen_timeout+0xc>)
 8085ed4:	681b      	ldr	r3, [r3, #0]
 8085ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085ed8:	9301      	str	r3, [sp, #4]
 8085eda:	bd08      	pop	{r3, pc}
 8085edc:	080401c8 	.word	0x080401c8

08085ee0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8085ee0:	b508      	push	{r3, lr}
 8085ee2:	4b02      	ldr	r3, [pc, #8]	; (8085eec <network_get_listen_timeout+0xc>)
 8085ee4:	681b      	ldr	r3, [r3, #0]
 8085ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085ee8:	9301      	str	r3, [sp, #4]
 8085eea:	bd08      	pop	{r3, pc}
 8085eec:	080401c8 	.word	0x080401c8

08085ef0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8085ef0:	b508      	push	{r3, lr}
 8085ef2:	4b02      	ldr	r3, [pc, #8]	; (8085efc <spark_function+0xc>)
 8085ef4:	681b      	ldr	r3, [r3, #0]
 8085ef6:	685b      	ldr	r3, [r3, #4]
 8085ef8:	9301      	str	r3, [sp, #4]
 8085efa:	bd08      	pop	{r3, pc}
 8085efc:	080401cc 	.word	0x080401cc

08085f00 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8085f00:	b508      	push	{r3, lr}
 8085f02:	4b02      	ldr	r3, [pc, #8]	; (8085f0c <spark_process+0xc>)
 8085f04:	681b      	ldr	r3, [r3, #0]
 8085f06:	689b      	ldr	r3, [r3, #8]
 8085f08:	9301      	str	r3, [sp, #4]
 8085f0a:	bd08      	pop	{r3, pc}
 8085f0c:	080401cc 	.word	0x080401cc

08085f10 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8085f10:	b508      	push	{r3, lr}
 8085f12:	4b02      	ldr	r3, [pc, #8]	; (8085f1c <spark_cloud_flag_connect+0xc>)
 8085f14:	681b      	ldr	r3, [r3, #0]
 8085f16:	68db      	ldr	r3, [r3, #12]
 8085f18:	9301      	str	r3, [sp, #4]
 8085f1a:	bd08      	pop	{r3, pc}
 8085f1c:	080401cc 	.word	0x080401cc

08085f20 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8085f20:	b508      	push	{r3, lr}
 8085f22:	4b02      	ldr	r3, [pc, #8]	; (8085f2c <spark_cloud_flag_connected+0xc>)
 8085f24:	681b      	ldr	r3, [r3, #0]
 8085f26:	695b      	ldr	r3, [r3, #20]
 8085f28:	9301      	str	r3, [sp, #4]
 8085f2a:	bd08      	pop	{r3, pc}
 8085f2c:	080401cc 	.word	0x080401cc

08085f30 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8085f30:	b508      	push	{r3, lr}
 8085f32:	4b02      	ldr	r3, [pc, #8]	; (8085f3c <spark_deviceID+0xc>)
 8085f34:	681b      	ldr	r3, [r3, #0]
 8085f36:	69db      	ldr	r3, [r3, #28]
 8085f38:	9301      	str	r3, [sp, #4]
 8085f3a:	bd08      	pop	{r3, pc}
 8085f3c:	080401cc 	.word	0x080401cc

08085f40 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8085f40:	b508      	push	{r3, lr}
 8085f42:	4b02      	ldr	r3, [pc, #8]	; (8085f4c <spark_send_event+0xc>)
 8085f44:	681b      	ldr	r3, [r3, #0]
 8085f46:	6a1b      	ldr	r3, [r3, #32]
 8085f48:	9301      	str	r3, [sp, #4]
 8085f4a:	bd08      	pop	{r3, pc}
 8085f4c:	080401cc 	.word	0x080401cc

08085f50 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8085f50:	b508      	push	{r3, lr}
 8085f52:	4b02      	ldr	r3, [pc, #8]	; (8085f5c <spark_sync_time_pending+0xc>)
 8085f54:	681b      	ldr	r3, [r3, #0]
 8085f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085f58:	9301      	str	r3, [sp, #4]
 8085f5a:	bd08      	pop	{r3, pc}
 8085f5c:	080401cc 	.word	0x080401cc

08085f60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8085f60:	b508      	push	{r3, lr}
 8085f62:	4b02      	ldr	r3, [pc, #8]	; (8085f6c <spark_set_random_seed_from_cloud_handler+0xc>)
 8085f64:	681b      	ldr	r3, [r3, #0]
 8085f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085f68:	9301      	str	r3, [sp, #4]
 8085f6a:	bd08      	pop	{r3, pc}
 8085f6c:	080401cc 	.word	0x080401cc

08085f70 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8085f70:	b508      	push	{r3, lr}
 8085f72:	4b02      	ldr	r3, [pc, #8]	; (8085f7c <malloc+0xc>)
 8085f74:	681b      	ldr	r3, [r3, #0]
 8085f76:	681b      	ldr	r3, [r3, #0]
 8085f78:	9301      	str	r3, [sp, #4]
 8085f7a:	bd08      	pop	{r3, pc}
 8085f7c:	080401a0 	.word	0x080401a0

08085f80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8085f80:	b508      	push	{r3, lr}
 8085f82:	4b02      	ldr	r3, [pc, #8]	; (8085f8c <free+0xc>)
 8085f84:	681b      	ldr	r3, [r3, #0]
 8085f86:	685b      	ldr	r3, [r3, #4]
 8085f88:	9301      	str	r3, [sp, #4]
 8085f8a:	bd08      	pop	{r3, pc}
 8085f8c:	080401a0 	.word	0x080401a0

08085f90 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8085f90:	b508      	push	{r3, lr}
 8085f92:	4b02      	ldr	r3, [pc, #8]	; (8085f9c <realloc+0xc>)
 8085f94:	681b      	ldr	r3, [r3, #0]
 8085f96:	689b      	ldr	r3, [r3, #8]
 8085f98:	9301      	str	r3, [sp, #4]
 8085f9a:	bd08      	pop	{r3, pc}
 8085f9c:	080401a0 	.word	0x080401a0

08085fa0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8085fa0:	b508      	push	{r3, lr}
 8085fa2:	4b02      	ldr	r3, [pc, #8]	; (8085fac <sprintf+0xc>)
 8085fa4:	681b      	ldr	r3, [r3, #0]
 8085fa6:	68db      	ldr	r3, [r3, #12]
 8085fa8:	9301      	str	r3, [sp, #4]
 8085faa:	bd08      	pop	{r3, pc}
 8085fac:	080401a0 	.word	0x080401a0

08085fb0 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8085fb0:	b508      	push	{r3, lr}
 8085fb2:	4b02      	ldr	r3, [pc, #8]	; (8085fbc <siprintf+0xc>)
 8085fb4:	681b      	ldr	r3, [r3, #0]
 8085fb6:	691b      	ldr	r3, [r3, #16]
 8085fb8:	9301      	str	r3, [sp, #4]
 8085fba:	bd08      	pop	{r3, pc}
 8085fbc:	080401a0 	.word	0x080401a0

08085fc0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8085fc0:	b508      	push	{r3, lr}
 8085fc2:	4b02      	ldr	r3, [pc, #8]	; (8085fcc <siscanf+0xc>)
 8085fc4:	681b      	ldr	r3, [r3, #0]
 8085fc6:	699b      	ldr	r3, [r3, #24]
 8085fc8:	9301      	str	r3, [sp, #4]
 8085fca:	bd08      	pop	{r3, pc}
 8085fcc:	080401a0 	.word	0x080401a0

08085fd0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8085fd0:	b508      	push	{r3, lr}
 8085fd2:	4b02      	ldr	r3, [pc, #8]	; (8085fdc <snprintf+0xc>)
 8085fd4:	681b      	ldr	r3, [r3, #0]
 8085fd6:	69db      	ldr	r3, [r3, #28]
 8085fd8:	9301      	str	r3, [sp, #4]
 8085fda:	bd08      	pop	{r3, pc}
 8085fdc:	080401a0 	.word	0x080401a0

08085fe0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8085fe0:	b508      	push	{r3, lr}
 8085fe2:	4b02      	ldr	r3, [pc, #8]	; (8085fec <sniprintf+0xc>)
 8085fe4:	681b      	ldr	r3, [r3, #0]
 8085fe6:	6a1b      	ldr	r3, [r3, #32]
 8085fe8:	9301      	str	r3, [sp, #4]
 8085fea:	bd08      	pop	{r3, pc}
 8085fec:	080401a0 	.word	0x080401a0

08085ff0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8085ff0:	b508      	push	{r3, lr}
 8085ff2:	4b02      	ldr	r3, [pc, #8]	; (8085ffc <vsnprintf+0xc>)
 8085ff4:	681b      	ldr	r3, [r3, #0]
 8085ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085ff8:	9301      	str	r3, [sp, #4]
 8085ffa:	bd08      	pop	{r3, pc}
 8085ffc:	080401a0 	.word	0x080401a0

08086000 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8086000:	b508      	push	{r3, lr}
 8086002:	4b02      	ldr	r3, [pc, #8]	; (808600c <abort+0xc>)
 8086004:	681b      	ldr	r3, [r3, #0]
 8086006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086008:	9301      	str	r3, [sp, #4]
 808600a:	bd08      	pop	{r3, pc}
 808600c:	080401a0 	.word	0x080401a0

08086010 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8086010:	b508      	push	{r3, lr}
 8086012:	4b02      	ldr	r3, [pc, #8]	; (808601c <_malloc_r+0xc>)
 8086014:	681b      	ldr	r3, [r3, #0]
 8086016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086018:	9301      	str	r3, [sp, #4]
 808601a:	bd08      	pop	{r3, pc}
 808601c:	080401a0 	.word	0x080401a0

08086020 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8086020:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086022:	f002 fd23 	bl	8088a6c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8086026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808602a:	f002 b9fe 	b.w	808842a <_ZN7TwoWire4lockEv>

0808602e <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808602e:	b510      	push	{r4, lr}
 8086030:	4604      	mov	r4, r0
    lock_(_lock)
 8086032:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8086034:	b109      	cbz	r1, 808603a <_ZN4PMICC1Eb+0xc>
        lock();
 8086036:	f7ff fff3 	bl	8086020 <_ZN4PMIC4lockEv>
    }
}
 808603a:	4620      	mov	r0, r4
 808603c:	bd10      	pop	{r4, pc}

0808603e <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808603e:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086040:	f002 fd14 	bl	8088a6c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8086044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8086048:	f002 b9f8 	b.w	808843c <_ZN7TwoWire6unlockEv>

0808604c <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808604c:	b510      	push	{r4, lr}
{
    if (lock_) {
 808604e:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8086050:	4604      	mov	r4, r0
{
    if (lock_) {
 8086052:	b10b      	cbz	r3, 8086058 <_ZN4PMICD1Ev+0xc>
        unlock();
 8086054:	f7ff fff3 	bl	808603e <_ZN4PMIC6unlockEv>
    }
}
 8086058:	4620      	mov	r0, r4
 808605a:	bd10      	pop	{r4, pc}

0808605c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808605c:	b510      	push	{r4, lr}
 808605e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8086060:	6800      	ldr	r0, [r0, #0]
 8086062:	f7ff ffec 	bl	808603e <_ZN4PMIC6unlockEv>
 8086066:	4620      	mov	r0, r4
 8086068:	bd10      	pop	{r4, pc}

0808606a <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808606a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808606c:	ac02      	add	r4, sp, #8
 808606e:	460d      	mov	r5, r1
 8086070:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8086074:	f7ff ffd4 	bl	8086020 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086078:	f002 fcf8 	bl	8088a6c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808607c:	216b      	movs	r1, #107	; 0x6b
 808607e:	f002 f9c6 	bl	808840e <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086082:	f002 fcf3 	bl	8088a6c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8086086:	6803      	ldr	r3, [r0, #0]
 8086088:	4629      	mov	r1, r5
 808608a:	689b      	ldr	r3, [r3, #8]
 808608c:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808608e:	f002 fced 	bl	8088a6c <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8086092:	2101      	movs	r1, #1
 8086094:	f002 f9be 	bl	8088414 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086098:	f002 fce8 	bl	8088a6c <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 808609c:	2301      	movs	r3, #1
 808609e:	461a      	mov	r2, r3
 80860a0:	216b      	movs	r1, #107	; 0x6b
 80860a2:	f002 f99b 	bl	80883dc <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80860a6:	f002 fce1 	bl	8088a6c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80860aa:	6803      	ldr	r3, [r0, #0]
 80860ac:	695b      	ldr	r3, [r3, #20]
 80860ae:	4798      	blx	r3
 80860b0:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80860b2:	4620      	mov	r0, r4
 80860b4:	f7ff ffd2 	bl	808605c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80860b8:	b2e8      	uxtb	r0, r5
 80860ba:	b003      	add	sp, #12
 80860bc:	bd30      	pop	{r4, r5, pc}

080860be <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 80860be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80860c0:	ac02      	add	r4, sp, #8
 80860c2:	4615      	mov	r5, r2
 80860c4:	460e      	mov	r6, r1
 80860c6:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80860ca:	f7ff ffa9 	bl	8086020 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80860ce:	f002 fccd 	bl	8088a6c <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80860d2:	216b      	movs	r1, #107	; 0x6b
 80860d4:	f002 f99b 	bl	808840e <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80860d8:	f002 fcc8 	bl	8088a6c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80860dc:	6803      	ldr	r3, [r0, #0]
 80860de:	4631      	mov	r1, r6
 80860e0:	689b      	ldr	r3, [r3, #8]
 80860e2:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80860e4:	f002 fcc2 	bl	8088a6c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80860e8:	6803      	ldr	r3, [r0, #0]
 80860ea:	4629      	mov	r1, r5
 80860ec:	689b      	ldr	r3, [r3, #8]
 80860ee:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80860f0:	f002 fcbc 	bl	8088a6c <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80860f4:	2101      	movs	r1, #1
 80860f6:	f002 f98d 	bl	8088414 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80860fa:	4620      	mov	r0, r4
 80860fc:	f7ff ffae 	bl	808605c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8086100:	b002      	add	sp, #8
 8086102:	bd70      	pop	{r4, r5, r6, pc}

08086104 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 8086104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086106:	4604      	mov	r4, r0
 8086108:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808610a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808610c:	f7ff ff88 	bl	8086020 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8086110:	2100      	movs	r1, #0
 8086112:	4620      	mov	r0, r4
 8086114:	f7ff ffa9 	bl	808606a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8086118:	f241 1358 	movw	r3, #4440	; 0x1158
 808611c:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 808611e:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8086122:	d05b      	beq.n	80861dc <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8086124:	d820      	bhi.n	8086168 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 8086126:	f241 0318 	movw	r3, #4120	; 0x1018
 808612a:	429d      	cmp	r5, r3
 808612c:	d04d      	beq.n	80861ca <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 808612e:	d80c      	bhi.n	808614a <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8086130:	f640 7378 	movw	r3, #3960	; 0xf78
 8086134:	429d      	cmp	r5, r3
 8086136:	d042      	beq.n	80861be <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8086138:	f640 73c8 	movw	r3, #4040	; 0xfc8
 808613c:	429d      	cmp	r5, r3
 808613e:	d041      	beq.n	80861c4 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8086140:	f640 7328 	movw	r3, #3880	; 0xf28
 8086144:	429d      	cmp	r5, r3
 8086146:	d160      	bne.n	808620a <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8086148:	e059      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 808614a:	f241 03b8 	movw	r3, #4280	; 0x10b8
 808614e:	429d      	cmp	r5, r3
 8086150:	d03e      	beq.n	80861d0 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8086152:	f241 1308 	movw	r3, #4360	; 0x1108
 8086156:	429d      	cmp	r5, r3
 8086158:	d03d      	beq.n	80861d6 <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 808615a:	f241 0368 	movw	r3, #4200	; 0x1068
 808615e:	429d      	cmp	r5, r3
 8086160:	d153      	bne.n	808620a <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8086162:	f042 0220 	orr.w	r2, r2, #32
 8086166:	e04a      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8086168:	f241 2398 	movw	r3, #4760	; 0x1298
 808616c:	429d      	cmp	r5, r3
 808616e:	d03e      	beq.n	80861ee <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8086170:	d80e      	bhi.n	8086190 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8086172:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8086176:	429d      	cmp	r5, r3
 8086178:	d033      	beq.n	80861e2 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 808617a:	f241 2348 	movw	r3, #4680	; 0x1248
 808617e:	429d      	cmp	r5, r3
 8086180:	d032      	beq.n	80861e8 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8086182:	f241 13a8 	movw	r3, #4520	; 0x11a8
 8086186:	429d      	cmp	r5, r3
 8086188:	d13f      	bne.n	808620a <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 808618a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 808618e:	e036      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8086190:	f241 3338 	movw	r3, #4920	; 0x1338
 8086194:	429d      	cmp	r5, r3
 8086196:	d02d      	beq.n	80861f4 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8086198:	d806      	bhi.n	80861a8 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 808619a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 808619e:	429d      	cmp	r5, r3
 80861a0:	d133      	bne.n	808620a <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 80861a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80861a6:	e02a      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80861a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80861ac:	429d      	cmp	r5, r3
 80861ae:	d024      	beq.n	80861fa <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 80861b0:	f241 33d8 	movw	r3, #5080	; 0x13d8
 80861b4:	429d      	cmp	r5, r3
 80861b6:	d128      	bne.n	808620a <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 80861b8:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80861bc:	e01f      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 80861be:	f042 0208 	orr.w	r2, r2, #8
 80861c2:	e01c      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 80861c4:	f042 0210 	orr.w	r2, r2, #16
 80861c8:	e019      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 80861ca:	f042 0218 	orr.w	r2, r2, #24
 80861ce:	e016      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 80861d0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80861d4:	e013      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 80861d6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80861da:	e010      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 80861dc:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80861e0:	e00d      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 80861e2:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 80861e6:	e00a      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 80861e8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80861ec:	e007      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 80861ee:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80861f2:	e004      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 80861f4:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80861f8:	e001      	b.n	80861fe <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 80861fa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80861fe:	4620      	mov	r0, r4
 8086200:	2100      	movs	r1, #0
 8086202:	f7ff ff5c 	bl	80860be <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8086206:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8086208:	e000      	b.n	808620c <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808620a:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 808620c:	a801      	add	r0, sp, #4
 808620e:	f7ff ff25 	bl	808605c <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8086212:	4620      	mov	r0, r4
 8086214:	b003      	add	sp, #12
 8086216:	bd30      	pop	{r4, r5, pc}

08086218 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8086218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808621a:	460c      	mov	r4, r1
 808621c:	4617      	mov	r7, r2
 808621e:	4605      	mov	r5, r0
 8086220:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086222:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8086224:	f7ff fefc 	bl	8086020 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8086228:	2c00      	cmp	r4, #0
 808622a:	bf0c      	ite	eq
 808622c:	2400      	moveq	r4, #0
 808622e:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8086230:	b117      	cbz	r7, 8086238 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8086232:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8086236:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8086238:	b10e      	cbz	r6, 808623e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808623a:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808623e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8086242:	b10b      	cbz	r3, 8086248 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8086244:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8086248:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808624c:	b10b      	cbz	r3, 8086252 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 808624e:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8086252:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8086256:	b10b      	cbz	r3, 808625c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8086258:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808625c:	2102      	movs	r1, #2
 808625e:	4628      	mov	r0, r5
 8086260:	f7ff ff03 	bl	808606a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8086264:	f000 0201 	and.w	r2, r0, #1
 8086268:	4322      	orrs	r2, r4
 808626a:	2102      	movs	r1, #2
 808626c:	4628      	mov	r0, r5
 808626e:	f7ff ff26 	bl	80860be <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8086272:	a801      	add	r0, sp, #4
 8086274:	f7ff fef2 	bl	808605c <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8086278:	2001      	movs	r0, #1
 808627a:	b003      	add	sp, #12
 808627c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808627e <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808627e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#endif // Wiring_Wire3
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
 8086280:	2400      	movs	r4, #0
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8086282:	4605      	mov	r5, r0
 8086284:	460f      	mov	r7, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086286:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8086288:	f7ff feca 	bl	8086020 <_ZN4PMIC4lockEv>
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808628c:	4623      	mov	r3, r4
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
 808628e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
        uint32_t sum = baseOffset + (mask << bitsBaseShift);
 8086292:	0118      	lsls	r0, r3, #4
 8086294:	f500 605b 	add.w	r0, r0, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8086298:	1bc2      	subs	r2, r0, r7
 808629a:	2a00      	cmp	r2, #0
 808629c:	bfb8      	it	lt
 808629e:	4252      	neglt	r2, r2
        if (delta < bestDelta && sum <= value) {
 80862a0:	4296      	cmp	r6, r2
 80862a2:	dd03      	ble.n	80862ac <_ZN4PMIC16setChargeVoltageEt+0x2e>
 80862a4:	4287      	cmp	r7, r0
 80862a6:	bf24      	itt	cs
 80862a8:	4616      	movcs	r6, r2
 80862aa:	461c      	movcs	r4, r3
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 80862ac:	3301      	adds	r3, #1
 80862ae:	2b40      	cmp	r3, #64	; 0x40
 80862b0:	d1ef      	bne.n	8086292 <_ZN4PMIC16setChargeVoltageEt+0x14>

    const uint16_t baseValue = 3504;
    // Find closest matching charge voltage not larger than 'voltage'
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);

    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 80862b2:	2104      	movs	r1, #4
 80862b4:	4628      	mov	r0, r5
 80862b6:	f7ff fed8 	bl	808606a <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 80862ba:	f000 0003 	and.w	r0, r0, #3
 80862be:	ea40 0284 	orr.w	r2, r0, r4, lsl #2

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 80862c2:	b2d2      	uxtb	r2, r2
 80862c4:	2104      	movs	r1, #4
 80862c6:	4628      	mov	r0, r5
 80862c8:	f7ff fef9 	bl	80860be <_ZN4PMIC13writeRegisterEhh>
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80862cc:	a801      	add	r0, sp, #4
 80862ce:	f7ff fec5 	bl	808605c <_ZNSt10lock_guardI4PMICED1Ev>
    cvcr |= (currentCvcr & 0b11);

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);

    return true;
}
 80862d2:	2001      	movs	r0, #1
 80862d4:	b003      	add	sp, #12
 80862d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080862d8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80862d8:	6800      	ldr	r0, [r0, #0]
 80862da:	f7ff bbe5 	b.w	8085aa8 <os_mutex_recursive_lock>

080862de <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80862de:	6800      	ldr	r0, [r0, #0]
 80862e0:	f7ff bbea 	b.w	8085ab8 <os_mutex_recursive_unlock>

080862e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80862e4:	b570      	push	{r4, r5, r6, lr}
 80862e6:	4604      	mov	r4, r0
 80862e8:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80862ea:	2500      	movs	r5, #0
 80862ec:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80862f0:	f7ff fbca 	bl	8085a88 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80862f4:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80862f6:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80862f8:	f7ff fb3e 	bl	8085978 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80862fc:	6065      	str	r5, [r4, #4]
}
 80862fe:	4620      	mov	r0, r4
 8086300:	bd70      	pop	{r4, r5, r6, pc}

08086302 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8086302:	b538      	push	{r3, r4, r5, lr}
 8086304:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8086306:	f100 0408 	add.w	r4, r0, #8
 808630a:	4620      	mov	r0, r4
 808630c:	f7ff ffe4 	bl	80862d8 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8086310:	7828      	ldrb	r0, [r5, #0]
 8086312:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8086316:	f7ff fb1f 	bl	8085958 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 808631a:	4620      	mov	r0, r4
 808631c:	f7ff ffdf 	bl	80862de <_ZN14RecursiveMutex6unlockEv>
 8086320:	bd38      	pop	{r3, r4, r5, pc}

08086322 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 8086322:	b508      	push	{r3, lr}
 8086324:	3008      	adds	r0, #8
 8086326:	f7ff ffda 	bl	80862de <_ZN14RecursiveMutex6unlockEv>
 808632a:	bd08      	pop	{r3, pc}

0808632c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808632c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808632e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8086330:	6018      	str	r0, [r3, #0]
 8086332:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8086334:	6818      	ldr	r0, [r3, #0]
 8086336:	b2e5      	uxtb	r5, r4
 8086338:	4288      	cmp	r0, r1
 808633a:	d906      	bls.n	808634a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808633c:	3401      	adds	r4, #1
 808633e:	2c08      	cmp	r4, #8
 8086340:	d002      	beq.n	8086348 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8086342:	0840      	lsrs	r0, r0, #1
 8086344:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8086346:	e7f5      	b.n	8086334 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8086348:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 808634a:	4b02      	ldr	r3, [pc, #8]	; (8086354 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808634c:	5d5b      	ldrb	r3, [r3, r5]
 808634e:	7013      	strb	r3, [r2, #0]
 8086350:	bd30      	pop	{r4, r5, pc}
 8086352:	bf00      	nop
 8086354:	0808e024 	.word	0x0808e024

08086358 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8086358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808635c:	4680      	mov	r8, r0
 808635e:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8086360:	3008      	adds	r0, #8
 8086362:	460e      	mov	r6, r1
 8086364:	f7ff ffb8 	bl	80862d8 <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 8086368:	f898 4000 	ldrb.w	r4, [r8]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 808636c:	2214      	movs	r2, #20
 808636e:	2100      	movs	r1, #0
 8086370:	a809      	add	r0, sp, #36	; 0x24
 8086372:	f004 f8ed 	bl	808a550 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8086376:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8086378:	4620      	mov	r0, r4
 808637a:	2200      	movs	r2, #0
 808637c:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 808637e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 8086382:	f7ff fb09 	bl	8085998 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 8086386:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 808638a:	b14c      	cbz	r4, 80863a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 808638c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8086390:	b92d      	cbnz	r5, 808639e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8086392:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8086394:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8086398:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 808639c:	e003      	b.n	80863a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 808639e:	2400      	movs	r4, #0
 80863a0:	46a1      	mov	r9, r4
 80863a2:	4627      	mov	r7, r4
 80863a4:	2501      	movs	r5, #1
 80863a6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80863a8:	b10d      	cbz	r5, 80863ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80863aa:	2b00      	cmp	r3, #0
 80863ac:	d13f      	bne.n	808642e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 80863ae:	429d      	cmp	r5, r3
 80863b0:	d10b      	bne.n	80863ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80863b2:	68b2      	ldr	r2, [r6, #8]
 80863b4:	42ba      	cmp	r2, r7
 80863b6:	d108      	bne.n	80863ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80863b8:	f88d 9020 	strb.w	r9, [sp, #32]
 80863bc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80863c0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80863c4:	89b2      	ldrh	r2, [r6, #12]
 80863c6:	4291      	cmp	r1, r2
 80863c8:	d031      	beq.n	808642e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 80863ca:	b13b      	cbz	r3, 80863dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80863cc:	2300      	movs	r3, #0
 80863ce:	f898 0000 	ldrb.w	r0, [r8]
 80863d2:	9301      	str	r3, [sp, #4]
 80863d4:	9300      	str	r3, [sp, #0]
 80863d6:	461a      	mov	r2, r3
 80863d8:	2101      	movs	r1, #1
 80863da:	e016      	b.n	808640a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 80863dc:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 80863e0:	68b1      	ldr	r1, [r6, #8]
 80863e2:	ab04      	add	r3, sp, #16
 80863e4:	f10d 020f 	add.w	r2, sp, #15
 80863e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80863ea:	f7ff ff9f 	bl	808632c <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80863ee:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80863f0:	b105      	cbz	r5, 80863f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 80863f2:	b9c9      	cbnz	r1, 8086428 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 80863f4:	42a9      	cmp	r1, r5
 80863f6:	d00b      	beq.n	8086410 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 80863f8:	2400      	movs	r4, #0
 80863fa:	9401      	str	r4, [sp, #4]
 80863fc:	7b74      	ldrb	r4, [r6, #13]
 80863fe:	7b33      	ldrb	r3, [r6, #12]
 8086400:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8086404:	f898 0000 	ldrb.w	r0, [r8]
 8086408:	9400      	str	r4, [sp, #0]
 808640a:	f7ff fadd 	bl	80859c8 <HAL_SPI_Set_Settings>
 808640e:	e00e      	b.n	808642e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 8086410:	68b3      	ldr	r3, [r6, #8]
 8086412:	42bb      	cmp	r3, r7
 8086414:	d3f0      	bcc.n	80863f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8086416:	f88d 9020 	strb.w	r9, [sp, #32]
 808641a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 808641e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8086422:	89b3      	ldrh	r3, [r6, #12]
 8086424:	429a      	cmp	r2, r3
 8086426:	d1e7      	bne.n	80863f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 8086428:	9b04      	ldr	r3, [sp, #16]
 808642a:	42bb      	cmp	r3, r7
 808642c:	d1e4      	bne.n	80863f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 808642e:	2000      	movs	r0, #0
 8086430:	b00f      	add	sp, #60	; 0x3c
 8086432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08086436 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8086436:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 8086438:	7800      	ldrb	r0, [r0, #0]
 808643a:	f7ff fa95 	bl	8085968 <HAL_SPI_Send_Receive_Data>
}
 808643e:	b2c0      	uxtb	r0, r0
 8086440:	bd08      	pop	{r3, pc}

08086442 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8086442:	b530      	push	{r4, r5, lr}
 8086444:	b087      	sub	sp, #28
 8086446:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8086448:	4604      	mov	r4, r0
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 808644a:	7800      	ldrb	r0, [r0, #0]
 808644c:	9500      	str	r5, [sp, #0]
 808644e:	f7ff faab 	bl	80859a8 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
 8086452:	b93d      	cbnz	r5, 8086464 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8086454:	a902      	add	r1, sp, #8
 8086456:	7820      	ldrb	r0, [r4, #0]
 8086458:	f7ff faae 	bl	80859b8 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
 808645c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8086460:	07db      	lsls	r3, r3, #31
 8086462:	d4f7      	bmi.n	8086454 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
 8086464:	b007      	add	sp, #28
 8086466:	bd30      	pop	{r4, r5, pc}

08086468 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 8086468:	7800      	ldrb	r0, [r0, #0]
 808646a:	f7ff ba8d 	b.w	8085988 <HAL_SPI_Is_Enabled>

0808646e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808646e:	b510      	push	{r4, lr}
 8086470:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8086472:	6800      	ldr	r0, [r0, #0]
 8086474:	b118      	cbz	r0, 808647e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8086476:	f7ff fd83 	bl	8085f80 <free>
            wakeupSource_ = nullptr;
 808647a:	2300      	movs	r3, #0
 808647c:	6023      	str	r3, [r4, #0]
 808647e:	bd10      	pop	{r4, pc}

08086480 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8086480:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8086482:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8086486:	460d      	mov	r5, r1
        error_ = result.error_;
 8086488:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808648a:	460b      	mov	r3, r1
 808648c:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8086490:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8086492:	f8c0 2006 	str.w	r2, [r0, #6]
 8086496:	889b      	ldrh	r3, [r3, #4]
 8086498:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808649a:	f7ff ffe8 	bl	808646e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 808649e:	682b      	ldr	r3, [r5, #0]
 80864a0:	b113      	cbz	r3, 80864a8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80864a2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80864a4:	2300      	movs	r3, #0
 80864a6:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 80864a8:	4620      	mov	r0, r4
 80864aa:	bd38      	pop	{r3, r4, r5, pc}

080864ac <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80864ac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 80864b0:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 80864b2:	b90b      	cbnz	r3, 80864b8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 80864b4:	680a      	ldr	r2, [r1, #0]
 80864b6:	b19a      	cbz	r2, 80864e0 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 80864b8:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 80864ba:	b15c      	cbz	r4, 80864d4 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 80864bc:	88a2      	ldrh	r2, [r4, #4]
 80864be:	2a01      	cmp	r2, #1
 80864c0:	d003      	beq.n	80864ca <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 80864c2:	2a04      	cmp	r2, #4
 80864c4:	d106      	bne.n	80864d4 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80864c6:	2202      	movs	r2, #2
 80864c8:	e005      	b.n	80864d6 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80864ca:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80864cc:	718a      	strb	r2, [r1, #6]
 80864ce:	810b      	strh	r3, [r1, #8]
 80864d0:	814c      	strh	r4, [r1, #10]
                    break;
 80864d2:	e005      	b.n	80864e0 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80864d4:	2204      	movs	r2, #4
 80864d6:	810b      	strh	r3, [r1, #8]
 80864d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80864dc:	718a      	strb	r2, [r1, #6]
 80864de:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 80864e0:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80864e4:	6003      	str	r3, [r0, #0]
 80864e6:	888b      	ldrh	r3, [r1, #4]
 80864e8:	8083      	strh	r3, [r0, #4]
    }
 80864ea:	bd10      	pop	{r4, pc}

080864ec <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80864ec:	4601      	mov	r1, r0
 80864ee:	2200      	movs	r2, #0
 80864f0:	208c      	movs	r0, #140	; 0x8c
 80864f2:	f7ff bab1 	b.w	8085a58 <HAL_Core_System_Reset_Ex>

080864f6 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80864f6:	2000      	movs	r0, #0
 80864f8:	f7ff bff8 	b.w	80864ec <_ZN11SystemClass5resetEm>

080864fc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80864fc:	b530      	push	{r4, r5, lr}
 80864fe:	4604      	mov	r4, r0
 8086500:	b085      	sub	sp, #20
 8086502:	4608      	mov	r0, r1
 8086504:	4611      	mov	r1, r2
 8086506:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8086508:	2300      	movs	r3, #0
 808650a:	f7ff fc65 	bl	8085dd8 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 808650e:	2300      	movs	r3, #0
 8086510:	9301      	str	r3, [sp, #4]
 8086512:	f8ad 3008 	strh.w	r3, [sp, #8]
 8086516:	f88d 300a 	strb.w	r3, [sp, #10]
 808651a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 808651e:	4d09      	ldr	r5, [pc, #36]	; (8086544 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8086520:	a901      	add	r1, sp, #4
 8086522:	f8ad 000c 	strh.w	r0, [sp, #12]
 8086526:	4628      	mov	r0, r5
 8086528:	f8ad 300e 	strh.w	r3, [sp, #14]
 808652c:	f7ff ffa8 	bl	8086480 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8086530:	a801      	add	r0, sp, #4
 8086532:	f7ff ff9c 	bl	808646e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8086536:	4620      	mov	r0, r4
 8086538:	4629      	mov	r1, r5
 808653a:	f7ff ffb7 	bl	80864ac <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 808653e:	4620      	mov	r0, r4
 8086540:	b005      	add	sp, #20
 8086542:	bd30      	pop	{r4, r5, pc}
 8086544:	20000940 	.word	0x20000940

08086548 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8086548:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808654c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808654e:	4c08      	ldr	r4, [pc, #32]	; (8086570 <_GLOBAL__sub_I_System+0x28>)
 8086550:	2000      	movs	r0, #0
 8086552:	6020      	str	r0, [r4, #0]
 8086554:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8086556:	71a0      	strb	r0, [r4, #6]
 8086558:	8120      	strh	r0, [r4, #8]
 808655a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808655c:	f7ff fc2c 	bl	8085db8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8086560:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8086562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8086566:	4a03      	ldr	r2, [pc, #12]	; (8086574 <_GLOBAL__sub_I_System+0x2c>)
 8086568:	4903      	ldr	r1, [pc, #12]	; (8086578 <_GLOBAL__sub_I_System+0x30>)
 808656a:	f002 baa5 	b.w	8088ab8 <__aeabi_atexit>
 808656e:	bf00      	nop
 8086570:	20000940 	.word	0x20000940
 8086574:	20000140 	.word	0x20000140
 8086578:	080801f5 	.word	0x080801f5

0808657c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 808657c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808657e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086580:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8086582:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086586:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8086588:	2201      	movs	r2, #1
 808658a:	f247 5330 	movw	r3, #30000	; 0x7530
 808658e:	4621      	mov	r1, r4
 8086590:	47a8      	blx	r5
}
 8086592:	b003      	add	sp, #12
 8086594:	bd30      	pop	{r4, r5, pc}

08086596 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8086596:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086598:	6803      	ldr	r3, [r0, #0]
 808659a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 808659c:	f247 5330 	movw	r3, #30000	; 0x7530
 80865a0:	46a4      	mov	ip, r4
}
 80865a2:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80865a4:	4760      	bx	ip

080865a6 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80865a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80865a8:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80865aa:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80865ac:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80865b0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80865b2:	4621      	mov	r1, r4
 80865b4:	4613      	mov	r3, r2
 80865b6:	2201      	movs	r2, #1
 80865b8:	47a8      	blx	r5
}
 80865ba:	b003      	add	sp, #12
 80865bc:	bd30      	pop	{r4, r5, pc}

080865be <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80865be:	4770      	bx	lr

080865c0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80865c0:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80865c2:	4903      	ldr	r1, [pc, #12]	; (80865d0 <_ZN9TCPClient8remoteIPEv+0x10>)
 80865c4:	6001      	str	r1, [r0, #0]
 80865c6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80865ca:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 80865cc:	4770      	bx	lr
 80865ce:	bf00      	nop
 80865d0:	0808e274 	.word	0x0808e274

080865d4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80865d4:	4770      	bx	lr

080865d6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80865d6:	2000      	movs	r0, #0
 80865d8:	4770      	bx	lr

080865da <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80865da:	b510      	push	{r4, lr}
 80865dc:	4604      	mov	r4, r0
 80865de:	2114      	movs	r1, #20
 80865e0:	f002 fa78 	bl	8088ad4 <_ZdlPvj>
 80865e4:	4620      	mov	r0, r4
 80865e6:	bd10      	pop	{r4, pc}

080865e8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
 80865e8:	f7f9 bd5d 	b.w	80800a6 <_ZdlPv>

080865ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80865ec:	b510      	push	{r4, lr}
 80865ee:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80865f0:	6803      	ldr	r3, [r0, #0]
 80865f2:	689b      	ldr	r3, [r3, #8]
 80865f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80865f6:	68a3      	ldr	r3, [r4, #8]
 80865f8:	3b01      	subs	r3, #1
 80865fa:	60a3      	str	r3, [r4, #8]
 80865fc:	b92b      	cbnz	r3, 808660a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80865fe:	6823      	ldr	r3, [r4, #0]
 8086600:	4620      	mov	r0, r4
        }
    }
 8086602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8086606:	68db      	ldr	r3, [r3, #12]
 8086608:	4718      	bx	r3
 808660a:	bd10      	pop	{r4, pc}

0808660c <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 808660c:	b510      	push	{r4, lr}
 808660e:	6943      	ldr	r3, [r0, #20]
 8086610:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8086612:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086616:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 808661a:	429a      	cmp	r2, r3
 808661c:	d005      	beq.n	808662a <_ZN9TCPClient4peekEv+0x1e>
 808661e:	6962      	ldr	r2, [r4, #20]
 8086620:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8086624:	4413      	add	r3, r2
 8086626:	7918      	ldrb	r0, [r3, #4]
 8086628:	bd10      	pop	{r4, pc}
 808662a:	6803      	ldr	r3, [r0, #0]
 808662c:	691b      	ldr	r3, [r3, #16]
 808662e:	4798      	blx	r3
 8086630:	2800      	cmp	r0, #0
 8086632:	d1f4      	bne.n	808661e <_ZN9TCPClient4peekEv+0x12>
 8086634:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086638:	bd10      	pop	{r4, pc}

0808663a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 808663a:	b510      	push	{r4, lr}
 808663c:	6943      	ldr	r3, [r0, #20]
 808663e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8086640:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086644:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8086648:	429a      	cmp	r2, r3
 808664a:	d008      	beq.n	808665e <_ZN9TCPClient4readEv+0x24>
 808664c:	6962      	ldr	r2, [r4, #20]
 808664e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8086652:	1c59      	adds	r1, r3, #1
 8086654:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8086658:	4413      	add	r3, r2
 808665a:	7918      	ldrb	r0, [r3, #4]
 808665c:	bd10      	pop	{r4, pc}
 808665e:	6803      	ldr	r3, [r0, #0]
 8086660:	691b      	ldr	r3, [r3, #16]
 8086662:	4798      	blx	r3
 8086664:	2800      	cmp	r0, #0
 8086666:	d1f1      	bne.n	808664c <_ZN9TCPClient4readEv+0x12>
 8086668:	f04f 30ff 	mov.w	r0, #4294967295
}
 808666c:	bd10      	pop	{r4, pc}

0808666e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 808666e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086670:	6943      	ldr	r3, [r0, #20]
 8086672:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8086674:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086678:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 808667c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 808667e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086680:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8086682:	d106      	bne.n	8086692 <_ZN9TCPClient4readEPhj+0x24>
 8086684:	6803      	ldr	r3, [r0, #0]
 8086686:	691b      	ldr	r3, [r3, #16]
 8086688:	4798      	blx	r3
 808668a:	b910      	cbnz	r0, 8086692 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 808668c:	f04f 34ff 	mov.w	r4, #4294967295
 8086690:	e014      	b.n	80866bc <_ZN9TCPClient4readEPhj+0x4e>
 8086692:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086694:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8086696:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 808669a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808669e:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80866a0:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80866a2:	42bc      	cmp	r4, r7
 80866a4:	bf28      	it	cs
 80866a6:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80866a8:	3104      	adds	r1, #4
 80866aa:	4622      	mov	r2, r4
 80866ac:	f003 ff45 	bl	808a53a <memcpy>
 80866b0:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80866b2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80866b6:	4423      	add	r3, r4
 80866b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80866bc:	4620      	mov	r0, r4
 80866be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080866c0 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80866c0:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80866c2:	2300      	movs	r3, #0
 80866c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80866c8:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80866ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80866ce:	4770      	bx	lr

080866d0 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80866d0:	b538      	push	{r3, r4, r5, lr}
 80866d2:	6942      	ldr	r2, [r0, #20]
 80866d4:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80866d6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80866da:	b11b      	cbz	r3, 80866e4 <_ZN9TCPClient9availableEv+0x14>
 80866dc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80866e0:	429a      	cmp	r2, r3
 80866e2:	d00c      	beq.n	80866fe <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80866e4:	6920      	ldr	r0, [r4, #16]
 80866e6:	f001 ff0d 	bl	8088504 <_ZN5spark12NetworkClass4fromEm>
 80866ea:	6803      	ldr	r3, [r0, #0]
 80866ec:	68db      	ldr	r3, [r3, #12]
 80866ee:	4798      	blx	r3
 80866f0:	b318      	cbz	r0, 808673a <_ZN9TCPClient9availableEv+0x6a>
 80866f2:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80866f4:	6818      	ldr	r0, [r3, #0]
 80866f6:	f7ff faa7 	bl	8085c48 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80866fa:	b918      	cbnz	r0, 8086704 <_ZN9TCPClient9availableEv+0x34>
 80866fc:	e01d      	b.n	808673a <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80866fe:	f7ff ffdf 	bl	80866c0 <_ZN9TCPClient12flush_bufferEv>
 8086702:	e7ef      	b.n	80866e4 <_ZN9TCPClient9availableEv+0x14>
 8086704:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 8086706:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 808670a:	297f      	cmp	r1, #127	; 0x7f
 808670c:	d815      	bhi.n	808673a <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 808670e:	1d05      	adds	r5, r0, #4
 8086710:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8086714:	2300      	movs	r3, #0
 8086716:	4429      	add	r1, r5
 8086718:	6800      	ldr	r0, [r0, #0]
 808671a:	f7ff faad 	bl	8085c78 <socket_receive>
            if (ret > 0)
 808671e:	2800      	cmp	r0, #0
 8086720:	dd0b      	ble.n	808673a <_ZN9TCPClient9availableEv+0x6a>
 8086722:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 8086724:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086728:	b90a      	cbnz	r2, 808672e <_ZN9TCPClient9availableEv+0x5e>
 808672a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 808672e:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 8086730:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086734:	4418      	add	r0, r3
 8086736:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 808673a:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 808673c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086740:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8086744:	1a18      	subs	r0, r3, r0
}
 8086746:	bd38      	pop	{r3, r4, r5, pc}

08086748 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 8086748:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 808674a:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 808674c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808674e:	6818      	ldr	r0, [r3, #0]
 8086750:	f7ff fa7a 	bl	8085c48 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8086754:	b118      	cbz	r0, 808675e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 8086756:	6963      	ldr	r3, [r4, #20]
 8086758:	6818      	ldr	r0, [r3, #0]
 808675a:	f7ff faa5 	bl	8085ca8 <socket_close>
 808675e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8086760:	f7ff faaa 	bl	8085cb8 <socket_handle_invalid>
 8086764:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8086766:	6963      	ldr	r3, [r4, #20]
 8086768:	2200      	movs	r2, #0
 808676a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 808676e:	4620      	mov	r0, r4
}
 8086770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8086774:	f7ff bfa4 	b.w	80866c0 <_ZN9TCPClient12flush_bufferEv>

08086778 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808677c:	461e      	mov	r6, r3
    stop();
 808677e:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086780:	b08a      	sub	sp, #40	; 0x28
    stop();
 8086782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086784:	4604      	mov	r4, r0
 8086786:	460d      	mov	r5, r1
 8086788:	4617      	mov	r7, r2
    stop();
 808678a:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 808678c:	4630      	mov	r0, r6
 808678e:	f001 feb9 	bl	8088504 <_ZN5spark12NetworkClass4fromEm>
 8086792:	6803      	ldr	r3, [r0, #0]
 8086794:	68db      	ldr	r3, [r3, #12]
 8086796:	4798      	blx	r3
 8086798:	2800      	cmp	r0, #0
 808679a:	d050      	beq.n	808683e <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 808679c:	9600      	str	r6, [sp, #0]
 808679e:	463b      	mov	r3, r7
 80867a0:	2206      	movs	r2, #6
 80867a2:	2101      	movs	r1, #1
 80867a4:	2002      	movs	r0, #2
 80867a6:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80867aa:	f7ff fa55 	bl	8085c58 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80867ae:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80867b0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80867b4:	2600      	movs	r6, #0
 80867b6:	9302      	str	r3, [sp, #8]
 80867b8:	6963      	ldr	r3, [r4, #20]
 80867ba:	9603      	str	r6, [sp, #12]
 80867bc:	681b      	ldr	r3, [r3, #0]
 80867be:	2001      	movs	r0, #1
 80867c0:	9301      	str	r3, [sp, #4]
 80867c2:	4b20      	ldr	r3, [pc, #128]	; (8086844 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 80867c4:	aa02      	add	r2, sp, #8
 80867c6:	9300      	str	r3, [sp, #0]
 80867c8:	491f      	ldr	r1, [pc, #124]	; (8086848 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 80867ca:	4633      	mov	r3, r6
 80867cc:	f7ff fadc 	bl	8085d88 <log_message>

          if (socket_handle_valid(d_->sock))
 80867d0:	6963      	ldr	r3, [r4, #20]
 80867d2:	6818      	ldr	r0, [r3, #0]
 80867d4:	f7ff fa38 	bl	8085c48 <socket_handle_valid>
 80867d8:	b388      	cbz	r0, 808683e <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
          {
            flush_buffer();
 80867da:	4620      	mov	r0, r4
 80867dc:	f7ff ff70 	bl	80866c0 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80867e0:	2302      	movs	r3, #2
 80867e2:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80867e6:	0a3b      	lsrs	r3, r7, #8
 80867e8:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80867ec:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80867ee:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80867f2:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80867f6:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80867f8:	f88d 700b 	strb.w	r7, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80867fc:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8086800:	796b      	ldrb	r3, [r5, #5]
 8086802:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8086806:	792b      	ldrb	r3, [r5, #4]
 8086808:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 808680c:	f7ff fa64 	bl	8085cd8 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086810:	6963      	ldr	r3, [r4, #20]
 8086812:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086814:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086816:	a902      	add	r1, sp, #8
 8086818:	6818      	ldr	r0, [r3, #0]
 808681a:	f7ff fa25 	bl	8085c68 <socket_connect>
 808681e:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8086820:	4640      	mov	r0, r8
 8086822:	f7ff fa59 	bl	8085cd8 <HAL_NET_SetNetWatchDog>
 8086826:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8086828:	686a      	ldr	r2, [r5, #4]
 808682a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 808682e:	b12f      	cbz	r7, 808683c <_ZN9TCPClient7connectE9IPAddresstm+0xc4>
            {
                stop();
 8086830:	6823      	ldr	r3, [r4, #0]
 8086832:	4620      	mov	r0, r4
 8086834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086836:	4798      	blx	r3
 8086838:	4630      	mov	r0, r6
 808683a:	e000      	b.n	808683e <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 808683c:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 808683e:	b00a      	add	sp, #40	; 0x28
 8086840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086844:	0808e09b 	.word	0x0808e09b
 8086848:	0808e094 	.word	0x0808e094

0808684c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 808684c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 808684e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8086850:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8086852:	6818      	ldr	r0, [r3, #0]
 8086854:	f7ff f9f8 	bl	8085c48 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086858:	b908      	cbnz	r0, 808685e <_ZN9TCPClient6statusEv+0x12>
 808685a:	2000      	movs	r0, #0
 808685c:	bd10      	pop	{r4, pc}
 808685e:	6920      	ldr	r0, [r4, #16]
 8086860:	f001 fe50 	bl	8088504 <_ZN5spark12NetworkClass4fromEm>
 8086864:	6803      	ldr	r3, [r0, #0]
 8086866:	68db      	ldr	r3, [r3, #12]
 8086868:	4798      	blx	r3
 808686a:	2800      	cmp	r0, #0
 808686c:	d0f5      	beq.n	808685a <_ZN9TCPClient6statusEv+0xe>
 808686e:	6963      	ldr	r3, [r4, #20]
 8086870:	6818      	ldr	r0, [r3, #0]
 8086872:	f7ff f9e1 	bl	8085c38 <socket_active_status>
 8086876:	fab0 f080 	clz	r0, r0
 808687a:	0940      	lsrs	r0, r0, #5
}
 808687c:	bd10      	pop	{r4, pc}

0808687e <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 808687e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 8086882:	2500      	movs	r5, #0
 8086884:	6045      	str	r5, [r0, #4]
 8086886:	4604      	mov	r4, r0
 8086888:	460e      	mov	r6, r1
 808688a:	4617      	mov	r7, r2
 808688c:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 808688e:	f7ff ffdd 	bl	808684c <_ZN9TCPClient6statusEv>
 8086892:	b160      	cbz	r0, 80868ae <_ZN9TCPClient5writeEPKhjm+0x30>
 8086894:	6960      	ldr	r0, [r4, #20]
 8086896:	9501      	str	r5, [sp, #4]
 8086898:	f8cd 8000 	str.w	r8, [sp]
 808689c:	462b      	mov	r3, r5
 808689e:	463a      	mov	r2, r7
 80868a0:	4631      	mov	r1, r6
 80868a2:	6800      	ldr	r0, [r0, #0]
 80868a4:	f7ff fa10 	bl	8085cc8 <socket_send_ex>
    if (ret < 0) {
 80868a8:	2800      	cmp	r0, #0
 80868aa:	da03      	bge.n	80868b4 <_ZN9TCPClient5writeEPKhjm+0x36>
 80868ac:	e001      	b.n	80868b2 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80868ae:	f04f 30ff 	mov.w	r0, #4294967295
 80868b2:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80868b4:	b002      	add	sp, #8
 80868b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080868ba <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80868ba:	b538      	push	{r3, r4, r5, lr}
 80868bc:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80868be:	f7ff ffc5 	bl	808684c <_ZN9TCPClient6statusEv>
 80868c2:	bb00      	cbnz	r0, 8086906 <_ZN9TCPClient9connectedEv+0x4c>
 80868c4:	6963      	ldr	r3, [r4, #20]
 80868c6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80868ca:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80868ce:	4291      	cmp	r1, r2
 80868d0:	d119      	bne.n	8086906 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80868d2:	6818      	ldr	r0, [r3, #0]
 80868d4:	f7ff f9b8 	bl	8085c48 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80868d8:	b128      	cbz	r0, 80868e6 <_ZN9TCPClient9connectedEv+0x2c>
 80868da:	6963      	ldr	r3, [r4, #20]
 80868dc:	6818      	ldr	r0, [r3, #0]
 80868de:	f7ff f9ab 	bl	8085c38 <socket_active_status>
 80868e2:	2801      	cmp	r0, #1
 80868e4:	d001      	beq.n	80868ea <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80868e6:	2500      	movs	r5, #0
 80868e8:	e00e      	b.n	8086908 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80868ea:	6823      	ldr	r3, [r4, #0]
 80868ec:	4620      	mov	r0, r4
 80868ee:	691b      	ldr	r3, [r3, #16]
 80868f0:	4798      	blx	r3
 80868f2:	2800      	cmp	r0, #0
 80868f4:	bf14      	ite	ne
 80868f6:	2501      	movne	r5, #1
 80868f8:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80868fa:	d105      	bne.n	8086908 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80868fc:	6823      	ldr	r3, [r4, #0]
 80868fe:	4620      	mov	r0, r4
 8086900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086902:	4798      	blx	r3
 8086904:	e000      	b.n	8086908 <_ZN9TCPClient9connectedEv+0x4e>
 8086906:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 8086908:	4628      	mov	r0, r5
 808690a:	bd38      	pop	{r3, r4, r5, pc}

0808690c <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 808690c:	b508      	push	{r3, lr}
   return (status()!=0);
 808690e:	f7ff ff9d 	bl	808684c <_ZN9TCPClient6statusEv>
}
 8086912:	3000      	adds	r0, #0
 8086914:	bf18      	it	ne
 8086916:	2001      	movne	r0, #1
 8086918:	bd08      	pop	{r3, pc}

0808691a <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 808691a:	b510      	push	{r4, lr}
 808691c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 808691e:	2300      	movs	r3, #0
 8086920:	6001      	str	r1, [r0, #0]
 8086922:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8086926:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 808692a:	3088      	adds	r0, #136	; 0x88
 808692c:	f001 fa22 	bl	8087d74 <_ZN9IPAddressC1Ev>
}
 8086930:	4620      	mov	r0, r4
 8086932:	bd10      	pop	{r4, pc}

08086934 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8086938:	b570      	push	{r4, r5, r6, lr}
 808693a:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 808693c:	4a14      	ldr	r2, [pc, #80]	; (8086990 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808693e:	2300      	movs	r3, #0
 8086940:	6043      	str	r3, [r0, #4]
 8086942:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8086944:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8086946:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8086948:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808694a:	2090      	movs	r0, #144	; 0x90
 808694c:	460e      	mov	r6, r1
 808694e:	f7f9 fba6 	bl	808009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8086952:	4605      	mov	r5, r0
 8086954:	b110      	cbz	r0, 808695c <_ZN9TCPClientC1Em+0x28>
 8086956:	4631      	mov	r1, r6
 8086958:	f7ff ffdf 	bl	808691a <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808695c:	2014      	movs	r0, #20
 808695e:	f7f9 fb9e 	bl	808009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8086962:	4603      	mov	r3, r0
 8086964:	b128      	cbz	r0, 8086972 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8086966:	2201      	movs	r2, #1
 8086968:	6042      	str	r2, [r0, #4]
 808696a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 808696c:	4a09      	ldr	r2, [pc, #36]	; (8086994 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 808696e:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8086970:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8086972:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8086974:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8086976:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8086978:	b128      	cbz	r0, 8086986 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808697a:	6843      	ldr	r3, [r0, #4]
 808697c:	3b01      	subs	r3, #1
 808697e:	6043      	str	r3, [r0, #4]
 8086980:	b90b      	cbnz	r3, 8086986 <_ZN9TCPClientC1Em+0x52>
 8086982:	f7ff fe33 	bl	80865ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8086986:	4620      	mov	r0, r4
 8086988:	f7ff fe9a 	bl	80866c0 <_ZN9TCPClient12flush_bufferEv>
}
 808698c:	4620      	mov	r0, r4
 808698e:	bd70      	pop	{r4, r5, r6, pc}
 8086990:	0808e050 	.word	0x0808e050
 8086994:	0808e034 	.word	0x0808e034

08086998 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8086998:	b510      	push	{r4, lr}
 808699a:	4604      	mov	r4, r0
 808699c:	f7ff f98c 	bl	8085cb8 <socket_handle_invalid>
 80869a0:	4601      	mov	r1, r0
 80869a2:	4620      	mov	r0, r4
 80869a4:	f7ff ffc6 	bl	8086934 <_ZN9TCPClientC1Em>
{
}
 80869a8:	4620      	mov	r0, r4
 80869aa:	bd10      	pop	{r4, pc}

080869ac <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80869ac:	b510      	push	{r4, lr}
 80869ae:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80869b0:	6800      	ldr	r0, [r0, #0]
 80869b2:	f7ff f949 	bl	8085c48 <socket_handle_valid>
 80869b6:	b110      	cbz	r0, 80869be <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80869b8:	6820      	ldr	r0, [r4, #0]
 80869ba:	f7ff f975 	bl	8085ca8 <socket_close>
    }
}
 80869be:	4620      	mov	r0, r4
 80869c0:	bd10      	pop	{r4, pc}

080869c2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80869c2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80869c4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80869c6:	4620      	mov	r0, r4
 80869c8:	f7ff fff0 	bl	80869ac <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80869cc:	b124      	cbz	r4, 80869d8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80869ce:	4620      	mov	r0, r4
 80869d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80869d4:	f7f9 bb67 	b.w	80800a6 <_ZdlPv>
 80869d8:	bd10      	pop	{r4, pc}
	...

080869dc <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80869dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80869e0:	461e      	mov	r6, r3
    stop();
 80869e2:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80869e4:	b086      	sub	sp, #24
    stop();
 80869e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80869e8:	4605      	mov	r5, r0
 80869ea:	460f      	mov	r7, r1
 80869ec:	4690      	mov	r8, r2
    stop();
 80869ee:	4798      	blx	r3
    if (Network.ready())
 80869f0:	4811      	ldr	r0, [pc, #68]	; (8086a38 <_ZN9TCPClient7connectEPKctm+0x5c>)
 80869f2:	f001 fd3b 	bl	808846c <_ZN5spark12NetworkClass5readyEv>
 80869f6:	b1d8      	cbz	r0, 8086a30 <_ZN9TCPClient7connectEPKctm+0x54>
    {
        IPAddress ip_addr;
 80869f8:	a802      	add	r0, sp, #8
 80869fa:	f001 f9bb 	bl	8087d74 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80869fe:	4638      	mov	r0, r7
 8086a00:	f004 fb26 	bl	808b050 <strlen>
 8086a04:	2400      	movs	r4, #0
 8086a06:	b281      	uxth	r1, r0
 8086a08:	9400      	str	r4, [sp, #0]
 8086a0a:	4633      	mov	r3, r6
 8086a0c:	aa03      	add	r2, sp, #12
 8086a0e:	4638      	mov	r0, r7
 8086a10:	f7ff f96a 	bl	8085ce8 <inet_gethostbyname>
 8086a14:	b958      	cbnz	r0, 8086a2e <_ZN9TCPClient7connectEPKctm+0x52>
            return connect(ip_addr, port, nif);
 8086a16:	682b      	ldr	r3, [r5, #0]
 8086a18:	4642      	mov	r2, r8
 8086a1a:	6a1c      	ldr	r4, [r3, #32]
 8086a1c:	4b07      	ldr	r3, [pc, #28]	; (8086a3c <_ZN9TCPClient7connectEPKctm+0x60>)
 8086a1e:	a904      	add	r1, sp, #16
 8086a20:	9304      	str	r3, [sp, #16]
 8086a22:	9b03      	ldr	r3, [sp, #12]
 8086a24:	4628      	mov	r0, r5
 8086a26:	9305      	str	r3, [sp, #20]
 8086a28:	4633      	mov	r3, r6
 8086a2a:	47a0      	blx	r4
 8086a2c:	e000      	b.n	8086a30 <_ZN9TCPClient7connectEPKctm+0x54>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 8086a2e:	4620      	mov	r0, r4
}
 8086a30:	b006      	add	sp, #24
 8086a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086a36:	bf00      	nop
 8086a38:	20000ec4 	.word	0x20000ec4
 8086a3c:	0808e274 	.word	0x0808e274

08086a40 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8086a40:	b510      	push	{r4, lr}
 8086a42:	4604      	mov	r4, r0
{
	free(buffer);
 8086a44:	6800      	ldr	r0, [r0, #0]
 8086a46:	f7ff fa9b 	bl	8085f80 <free>
}
 8086a4a:	4620      	mov	r0, r4
 8086a4c:	bd10      	pop	{r4, pc}

08086a4e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8086a4e:	b510      	push	{r4, lr}
 8086a50:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8086a52:	6800      	ldr	r0, [r0, #0]
 8086a54:	b108      	cbz	r0, 8086a5a <_ZN6String10invalidateEv+0xc>
 8086a56:	f7ff fa93 	bl	8085f80 <free>
	buffer = NULL;
 8086a5a:	2300      	movs	r3, #0
 8086a5c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8086a5e:	60a3      	str	r3, [r4, #8]
 8086a60:	6063      	str	r3, [r4, #4]
 8086a62:	bd10      	pop	{r4, pc}

08086a64 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8086a64:	b538      	push	{r3, r4, r5, lr}
 8086a66:	4604      	mov	r4, r0
 8086a68:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8086a6a:	6800      	ldr	r0, [r0, #0]
 8086a6c:	3101      	adds	r1, #1
 8086a6e:	f7ff fa8f 	bl	8085f90 <realloc>
	if (newbuffer) {
 8086a72:	b110      	cbz	r0, 8086a7a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8086a74:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8086a78:	2001      	movs	r0, #1
	}
	return 0;
}
 8086a7a:	bd38      	pop	{r3, r4, r5, pc}

08086a7c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8086a7c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8086a7e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8086a80:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8086a82:	b113      	cbz	r3, 8086a8a <_ZN6String7reserveEj+0xe>
 8086a84:	6843      	ldr	r3, [r0, #4]
 8086a86:	428b      	cmp	r3, r1
 8086a88:	d207      	bcs.n	8086a9a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8086a8a:	4620      	mov	r0, r4
 8086a8c:	f7ff ffea 	bl	8086a64 <_ZN6String12changeBufferEj>
 8086a90:	b120      	cbz	r0, 8086a9c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8086a92:	68a3      	ldr	r3, [r4, #8]
 8086a94:	b90b      	cbnz	r3, 8086a9a <_ZN6String7reserveEj+0x1e>
 8086a96:	6822      	ldr	r2, [r4, #0]
 8086a98:	7013      	strb	r3, [r2, #0]
 8086a9a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8086a9c:	bd10      	pop	{r4, pc}

08086a9e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8086a9e:	b570      	push	{r4, r5, r6, lr}
 8086aa0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8086aa2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8086aa4:	4604      	mov	r4, r0
 8086aa6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8086aa8:	f7ff ffe8 	bl	8086a7c <_ZN6String7reserveEj>
 8086aac:	b918      	cbnz	r0, 8086ab6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8086aae:	4620      	mov	r0, r4
 8086ab0:	f7ff ffcd 	bl	8086a4e <_ZN6String10invalidateEv>
		return *this;
 8086ab4:	e009      	b.n	8086aca <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8086ab6:	462a      	mov	r2, r5
 8086ab8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8086aba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8086abc:	6820      	ldr	r0, [r4, #0]
 8086abe:	f003 fd3c 	bl	808a53a <memcpy>
	buffer[len] = 0;
 8086ac2:	6822      	ldr	r2, [r4, #0]
 8086ac4:	68a3      	ldr	r3, [r4, #8]
 8086ac6:	2100      	movs	r1, #0
 8086ac8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8086aca:	4620      	mov	r0, r4
 8086acc:	bd70      	pop	{r4, r5, r6, pc}

08086ace <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8086ace:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086ad0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8086ad2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086ad4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8086ad6:	6043      	str	r3, [r0, #4]
	len = 0;
 8086ad8:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086ada:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8086adc:	460d      	mov	r5, r1
 8086ade:	b139      	cbz	r1, 8086af0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8086ae0:	4608      	mov	r0, r1
 8086ae2:	f004 fab5 	bl	808b050 <strlen>
 8086ae6:	4629      	mov	r1, r5
 8086ae8:	4602      	mov	r2, r0
 8086aea:	4620      	mov	r0, r4
 8086aec:	f7ff ffd7 	bl	8086a9e <_ZN6String4copyEPKcj>
}
 8086af0:	4620      	mov	r0, r4
 8086af2:	bd38      	pop	{r3, r4, r5, pc}

08086af4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8086af4:	b538      	push	{r3, r4, r5, lr}
 8086af6:	4605      	mov	r5, r0
	if (buffer) {
 8086af8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8086afa:	460c      	mov	r4, r1
	if (buffer) {
 8086afc:	b160      	cbz	r0, 8086b18 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8086afe:	686a      	ldr	r2, [r5, #4]
 8086b00:	688b      	ldr	r3, [r1, #8]
 8086b02:	429a      	cmp	r2, r3
 8086b04:	d306      	bcc.n	8086b14 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8086b06:	6809      	ldr	r1, [r1, #0]
 8086b08:	f003 fd6a 	bl	808a5e0 <strcpy>
			len = rhs.len;
 8086b0c:	68a3      	ldr	r3, [r4, #8]
 8086b0e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8086b10:	2300      	movs	r3, #0
 8086b12:	e00a      	b.n	8086b2a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8086b14:	f7ff fa34 	bl	8085f80 <free>
		}
	}
	buffer = rhs.buffer;
 8086b18:	6823      	ldr	r3, [r4, #0]
 8086b1a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8086b1c:	6863      	ldr	r3, [r4, #4]
 8086b1e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8086b20:	68a3      	ldr	r3, [r4, #8]
 8086b22:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8086b24:	2300      	movs	r3, #0
 8086b26:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8086b28:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8086b2a:	60a3      	str	r3, [r4, #8]
 8086b2c:	bd38      	pop	{r3, r4, r5, pc}

08086b2e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8086b2e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8086b30:	b510      	push	{r4, lr}
 8086b32:	460b      	mov	r3, r1
 8086b34:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8086b36:	d007      	beq.n	8086b48 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8086b38:	6809      	ldr	r1, [r1, #0]
 8086b3a:	b119      	cbz	r1, 8086b44 <_ZN6StringaSERKS_+0x16>
 8086b3c:	689a      	ldr	r2, [r3, #8]
 8086b3e:	f7ff ffae 	bl	8086a9e <_ZN6String4copyEPKcj>
 8086b42:	e001      	b.n	8086b48 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8086b44:	f7ff ff83 	bl	8086a4e <_ZN6String10invalidateEv>

	return *this;
}
 8086b48:	4620      	mov	r0, r4
 8086b4a:	bd10      	pop	{r4, pc}

08086b4c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8086b4c:	b510      	push	{r4, lr}
 8086b4e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086b50:	2300      	movs	r3, #0
 8086b52:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8086b54:	6043      	str	r3, [r0, #4]
	len = 0;
 8086b56:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086b58:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8086b5a:	f7ff ffe8 	bl	8086b2e <_ZN6StringaSERKS_>
}
 8086b5e:	4620      	mov	r0, r4
 8086b60:	bd10      	pop	{r4, pc}

08086b62 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8086b62:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8086b64:	b510      	push	{r4, lr}
 8086b66:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8086b68:	d001      	beq.n	8086b6e <_ZN6StringaSEOS_+0xc>
 8086b6a:	f7ff ffc3 	bl	8086af4 <_ZN6String4moveERS_>
	return *this;
}
 8086b6e:	4620      	mov	r0, r4
 8086b70:	bd10      	pop	{r4, pc}

08086b72 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8086b72:	b570      	push	{r4, r5, r6, lr}
 8086b74:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8086b76:	460e      	mov	r6, r1
 8086b78:	b909      	cbnz	r1, 8086b7e <_ZN6String6concatEPKcj+0xc>
 8086b7a:	2000      	movs	r0, #0
 8086b7c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8086b7e:	b16a      	cbz	r2, 8086b9c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8086b80:	6883      	ldr	r3, [r0, #8]
 8086b82:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8086b84:	4629      	mov	r1, r5
 8086b86:	f7ff ff79 	bl	8086a7c <_ZN6String7reserveEj>
 8086b8a:	2800      	cmp	r0, #0
 8086b8c:	d0f5      	beq.n	8086b7a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8086b8e:	6820      	ldr	r0, [r4, #0]
 8086b90:	68a3      	ldr	r3, [r4, #8]
 8086b92:	4631      	mov	r1, r6
 8086b94:	4418      	add	r0, r3
 8086b96:	f003 fd23 	bl	808a5e0 <strcpy>
	len = newlen;
 8086b9a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8086b9c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8086b9e:	bd70      	pop	{r4, r5, r6, pc}

08086ba0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8086ba0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8086ba2:	688a      	ldr	r2, [r1, #8]
 8086ba4:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8086ba6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8086ba8:	f7ff ffe3 	bl	8086b72 <_ZN6String6concatEPKcj>
 8086bac:	b910      	cbnz	r0, 8086bb4 <_ZplRK15StringSumHelperRK6String+0x14>
 8086bae:	4620      	mov	r0, r4
 8086bb0:	f7ff ff4d 	bl	8086a4e <_ZN6String10invalidateEv>
	return a;
}
 8086bb4:	4620      	mov	r0, r4
 8086bb6:	bd10      	pop	{r4, pc}

08086bb8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8086bb8:	b538      	push	{r3, r4, r5, lr}
 8086bba:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8086bbc:	460d      	mov	r5, r1
 8086bbe:	b141      	cbz	r1, 8086bd2 <_ZplRK15StringSumHelperPKc+0x1a>
 8086bc0:	4608      	mov	r0, r1
 8086bc2:	f004 fa45 	bl	808b050 <strlen>
 8086bc6:	4629      	mov	r1, r5
 8086bc8:	4602      	mov	r2, r0
 8086bca:	4620      	mov	r0, r4
 8086bcc:	f7ff ffd1 	bl	8086b72 <_ZN6String6concatEPKcj>
 8086bd0:	b910      	cbnz	r0, 8086bd8 <_ZplRK15StringSumHelperPKc+0x20>
 8086bd2:	4620      	mov	r0, r4
 8086bd4:	f7ff ff3b 	bl	8086a4e <_ZN6String10invalidateEv>
	return a;
}
 8086bd8:	4620      	mov	r0, r4
 8086bda:	bd38      	pop	{r3, r4, r5, pc}

08086bdc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086bdc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8086bde:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086be0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8086be2:	b912      	cbnz	r2, 8086bea <_ZNK6String6equalsEPKc+0xe>
 8086be4:	b919      	cbnz	r1, 8086bee <_ZNK6String6equalsEPKc+0x12>
 8086be6:	2001      	movs	r0, #1
 8086be8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8086bea:	b911      	cbnz	r1, 8086bf2 <_ZNK6String6equalsEPKc+0x16>
 8086bec:	6803      	ldr	r3, [r0, #0]
 8086bee:	7818      	ldrb	r0, [r3, #0]
 8086bf0:	e002      	b.n	8086bf8 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8086bf2:	6800      	ldr	r0, [r0, #0]
 8086bf4:	f003 fcea 	bl	808a5cc <strcmp>
 8086bf8:	fab0 f080 	clz	r0, r0
 8086bfc:	0940      	lsrs	r0, r0, #5
}
 8086bfe:	bd08      	pop	{r3, pc}

08086c00 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 8086c00:	6883      	ldr	r3, [r0, #8]
 8086c02:	428b      	cmp	r3, r1
 8086c04:	d901      	bls.n	8086c0a <_ZN6StringixEj+0xa>
 8086c06:	6800      	ldr	r0, [r0, #0]
 8086c08:	b918      	cbnz	r0, 8086c12 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 8086c0a:	4803      	ldr	r0, [pc, #12]	; (8086c18 <_ZN6StringixEj+0x18>)
 8086c0c:	2300      	movs	r3, #0
 8086c0e:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 8086c10:	4770      	bx	lr
	}
	return buffer[index];
 8086c12:	4408      	add	r0, r1
}
 8086c14:	4770      	bx	lr
 8086c16:	bf00      	nop
 8086c18:	2000094c 	.word	0x2000094c

08086c1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8086c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086c1e:	4606      	mov	r6, r0
 8086c20:	460d      	mov	r5, r1
 8086c22:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8086c24:	2400      	movs	r4, #0
  while (size--) {
 8086c26:	42bd      	cmp	r5, r7
 8086c28:	d00c      	beq.n	8086c44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8086c2a:	6833      	ldr	r3, [r6, #0]
 8086c2c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8086c30:	689b      	ldr	r3, [r3, #8]
 8086c32:	4630      	mov	r0, r6
 8086c34:	4798      	blx	r3
     if (chunk>=0)
 8086c36:	2800      	cmp	r0, #0
 8086c38:	db01      	blt.n	8086c3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8086c3a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8086c3c:	e7f3      	b.n	8086c26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8086c3e:	2c00      	cmp	r4, #0
 8086c40:	bf08      	it	eq
 8086c42:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8086c44:	4620      	mov	r0, r4
 8086c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086c48 <_ZN5Print5printEPKc>:
 8086c48:	b508      	push	{r3, lr}
 8086c4a:	f7fb fe83 	bl	8082954 <_ZN5Print5writeEPKc>
 8086c4e:	bd08      	pop	{r3, pc}

08086c50 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8086c50:	6803      	ldr	r3, [r0, #0]
 8086c52:	689b      	ldr	r3, [r3, #8]
 8086c54:	4718      	bx	r3

08086c56 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 8086c56:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086c58:	f7fb fe7c 	bl	8082954 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 8086c5c:	bd08      	pop	{r3, pc}

08086c5e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 8086c5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8086c60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8086c62:	4605      	mov	r5, r0
  size_t n = print('\r');
 8086c64:	f7ff fff4 	bl	8086c50 <_ZN5Print5printEc>
  n += print('\n');
 8086c68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8086c6a:	4604      	mov	r4, r0
  n += print('\n');
 8086c6c:	4628      	mov	r0, r5
 8086c6e:	f7ff ffef 	bl	8086c50 <_ZN5Print5printEc>
  return n;
}
 8086c72:	4420      	add	r0, r4
 8086c74:	bd38      	pop	{r3, r4, r5, pc}

08086c76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8086c76:	b538      	push	{r3, r4, r5, lr}
 8086c78:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086c7a:	f7fb fe6b 	bl	8082954 <_ZN5Print5writeEPKc>
 8086c7e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8086c80:	4628      	mov	r0, r5
 8086c82:	f7ff ffec 	bl	8086c5e <_ZN5Print7printlnEv>
  return n;
}
 8086c86:	4420      	add	r0, r4
 8086c88:	bd38      	pop	{r3, r4, r5, pc}

08086c8a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8086c8a:	2a01      	cmp	r2, #1
 8086c8c:	bf98      	it	ls
 8086c8e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8086c90:	b530      	push	{r4, r5, lr}
 8086c92:	460b      	mov	r3, r1
 8086c94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8086c96:	2100      	movs	r1, #0
 8086c98:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8086c9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8086ca0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8086ca4:	fb05 3312 	mls	r3, r5, r2, r3
 8086ca8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8086caa:	2b09      	cmp	r3, #9
 8086cac:	bf94      	ite	ls
 8086cae:	3330      	addls	r3, #48	; 0x30
 8086cb0:	3337      	addhi	r3, #55	; 0x37
 8086cb2:	b2db      	uxtb	r3, r3
 8086cb4:	4621      	mov	r1, r4
 8086cb6:	f804 3901 	strb.w	r3, [r4], #-1
 8086cba:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8086cbc:	2d00      	cmp	r5, #0
 8086cbe:	d1ef      	bne.n	8086ca0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8086cc0:	f7fb fe48 	bl	8082954 <_ZN5Print5writeEPKc>
}
 8086cc4:	b00b      	add	sp, #44	; 0x2c
 8086cc6:	bd30      	pop	{r4, r5, pc}

08086cc8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8086cc8:	b40c      	push	{r2, r3}
 8086cca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086cce:	b087      	sub	sp, #28
 8086cd0:	af00      	add	r7, sp, #0
 8086cd2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8086cd6:	f854 9b04 	ldr.w	r9, [r4], #4
 8086cda:	4605      	mov	r5, r0
 8086cdc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8086cde:	4623      	mov	r3, r4
 8086ce0:	464a      	mov	r2, r9
 8086ce2:	2114      	movs	r1, #20
 8086ce4:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8086ce6:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8086ce8:	f7ff f982 	bl	8085ff0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8086cec:	2813      	cmp	r0, #19
 8086cee:	d805      	bhi.n	8086cfc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086cf0:	1d39      	adds	r1, r7, #4
 8086cf2:	4628      	mov	r0, r5
 8086cf4:	f7fb fe2e 	bl	8082954 <_ZN5Print5writeEPKc>
 8086cf8:	4604      	mov	r4, r0
 8086cfa:	e013      	b.n	8086d24 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8086cfc:	f100 0308 	add.w	r3, r0, #8
 8086d00:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8086d04:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8086d06:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8086d0a:	1c41      	adds	r1, r0, #1
 8086d0c:	4623      	mov	r3, r4
 8086d0e:	464a      	mov	r2, r9
 8086d10:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8086d12:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8086d14:	f7ff f96c 	bl	8085ff0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086d18:	4669      	mov	r1, sp
 8086d1a:	4628      	mov	r0, r5
 8086d1c:	f7fb fe1a 	bl	8082954 <_ZN5Print5writeEPKc>
 8086d20:	4604      	mov	r4, r0
 8086d22:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8086d24:	b11e      	cbz	r6, 8086d2e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8086d26:	4628      	mov	r0, r5
 8086d28:	f7ff ff99 	bl	8086c5e <_ZN5Print7printlnEv>
 8086d2c:	4404      	add	r4, r0
    return n;
}
 8086d2e:	4620      	mov	r0, r4
 8086d30:	371c      	adds	r7, #28
 8086d32:	46bd      	mov	sp, r7
 8086d34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086d38:	b002      	add	sp, #8
 8086d3a:	4770      	bx	lr

08086d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8086d3c:	680b      	ldr	r3, [r1, #0]
 8086d3e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8086d40:	b113      	cbz	r3, 8086d48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8086d42:	685a      	ldr	r2, [r3, #4]
 8086d44:	3201      	adds	r2, #1
 8086d46:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8086d48:	4770      	bx	lr
	...

08086d4c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8086d4c:	4a01      	ldr	r2, [pc, #4]	; (8086d54 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8086d4e:	4b02      	ldr	r3, [pc, #8]	; (8086d58 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8086d50:	601a      	str	r2, [r3, #0]
 8086d52:	4770      	bx	lr
 8086d54:	0808e125 	.word	0x0808e125
 8086d58:	20000950 	.word	0x20000950

08086d5c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8086d5c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086d5e:	2000      	movs	r0, #0
 8086d60:	f7ff f8f6 	bl	8085f50 <spark_sync_time_pending>
 8086d64:	b128      	cbz	r0, 8086d72 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086d66:	f7ff f8db 	bl	8085f20 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086d6a:	f080 0001 	eor.w	r0, r0, #1
 8086d6e:	b2c0      	uxtb	r0, r0
 8086d70:	bd08      	pop	{r3, pc}
 8086d72:	2001      	movs	r0, #1
    }
 8086d74:	bd08      	pop	{r3, pc}
	...

08086d78 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8086d78:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8086d7a:	4909      	ldr	r1, [pc, #36]	; (8086da0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8086d7c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8086d7e:	f003 f857 	bl	8089e30 <__aeabi_fcmplt>
 8086d82:	b960      	cbnz	r0, 8086d9e <_ZN9TimeClass4zoneEf+0x26>
 8086d84:	4907      	ldr	r1, [pc, #28]	; (8086da4 <_ZN9TimeClass4zoneEf+0x2c>)
 8086d86:	4620      	mov	r0, r4
 8086d88:	f003 f870 	bl	8089e6c <__aeabi_fcmpgt>
 8086d8c:	b938      	cbnz	r0, 8086d9e <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8086d8e:	4906      	ldr	r1, [pc, #24]	; (8086da8 <_ZN9TimeClass4zoneEf+0x30>)
 8086d90:	4620      	mov	r0, r4
 8086d92:	f002 feaf 	bl	8089af4 <__aeabi_fmul>
 8086d96:	f003 f889 	bl	8089eac <__aeabi_f2iz>
 8086d9a:	4b04      	ldr	r3, [pc, #16]	; (8086dac <_ZN9TimeClass4zoneEf+0x34>)
 8086d9c:	6018      	str	r0, [r3, #0]
 8086d9e:	bd10      	pop	{r4, pc}
 8086da0:	c1400000 	.word	0xc1400000
 8086da4:	41600000 	.word	0x41600000
 8086da8:	45610000 	.word	0x45610000
 8086dac:	2000095c 	.word	0x2000095c

08086db0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8086db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8086db2:	4b0e      	ldr	r3, [pc, #56]	; (8086dec <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8086db4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8086db6:	681b      	ldr	r3, [r3, #0]
 8086db8:	a802      	add	r0, sp, #8
 8086dba:	4419      	add	r1, r3
 8086dbc:	4b0c      	ldr	r3, [pc, #48]	; (8086df0 <_ZN9TimeClass7timeStrEl+0x40>)
 8086dbe:	681b      	ldr	r3, [r3, #0]
 8086dc0:	4419      	add	r1, r3
 8086dc2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8086dc6:	f003 faad 	bl	808a324 <localtime>
        char* ascstr = asctime(calendar_time);
 8086dca:	f003 fa5d 	bl	808a288 <asctime>
 8086dce:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8086dd0:	f004 f93e 	bl	808b050 <strlen>
        ascstr[len-1] = 0; // remove final newline
 8086dd4:	2300      	movs	r3, #0
 8086dd6:	4428      	add	r0, r5
 8086dd8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8086ddc:	4629      	mov	r1, r5
 8086dde:	4620      	mov	r0, r4
 8086de0:	f7ff fe75 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>
}
 8086de4:	4620      	mov	r0, r4
 8086de6:	b003      	add	sp, #12
 8086de8:	bd30      	pop	{r4, r5, pc}
 8086dea:	bf00      	nop
 8086dec:	2000095c 	.word	0x2000095c
 8086df0:	20000958 	.word	0x20000958

08086df4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086df8:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086dfa:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086dfc:	4607      	mov	r7, r0
 8086dfe:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086e00:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086e02:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086e04:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086e06:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086e08:	f004 f93f 	bl	808b08a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086e0c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086e0e:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086e10:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086e14:	f004 f91c 	bl	808b050 <strlen>
 8086e18:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8086e1a:	b925      	cbnz	r5, 8086e26 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 8086e1c:	4924      	ldr	r1, [pc, #144]	; (8086eb0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 8086e1e:	a803      	add	r0, sp, #12
 8086e20:	f003 fbde 	bl	808a5e0 <strcpy>
 8086e24:	e013      	b.n	8086e4e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8086e26:	213c      	movs	r1, #60	; 0x3c
 8086e28:	fb95 f2f1 	sdiv	r2, r5, r1
 8086e2c:	2a00      	cmp	r2, #0
 8086e2e:	bfb8      	it	lt
 8086e30:	4252      	neglt	r2, r2
 8086e32:	fb92 f3f1 	sdiv	r3, r2, r1
 8086e36:	fb01 2213 	mls	r2, r1, r3, r2
 8086e3a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086e3e:	9200      	str	r2, [sp, #0]
 8086e40:	fb95 f3f3 	sdiv	r3, r5, r3
 8086e44:	4a1b      	ldr	r2, [pc, #108]	; (8086eb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 8086e46:	2110      	movs	r1, #16
 8086e48:	a803      	add	r0, sp, #12
 8086e4a:	f7ff f8c1 	bl	8085fd0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086e4e:	4625      	mov	r5, r4
 8086e50:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8086e52:	f108 3aff 	add.w	sl, r8, #4294967295
 8086e56:	45b2      	cmp	sl, r6
 8086e58:	d91b      	bls.n	8086e92 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8086e5a:	782b      	ldrb	r3, [r5, #0]
 8086e5c:	2b25      	cmp	r3, #37	; 0x25
 8086e5e:	d116      	bne.n	8086e8e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 8086e60:	786b      	ldrb	r3, [r5, #1]
 8086e62:	2b7a      	cmp	r3, #122	; 0x7a
 8086e64:	d113      	bne.n	8086e8e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 8086e66:	a803      	add	r0, sp, #12
 8086e68:	f004 f8f2 	bl	808b050 <strlen>
 8086e6c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8086e6e:	4430      	add	r0, r6
 8086e70:	ebc6 020a 	rsb	r2, r6, sl
 8086e74:	1ca9      	adds	r1, r5, #2
 8086e76:	4420      	add	r0, r4
 8086e78:	f003 fb5f 	bl	808a53a <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8086e7c:	4642      	mov	r2, r8
 8086e7e:	a903      	add	r1, sp, #12
 8086e80:	4628      	mov	r0, r5
 8086e82:	f003 fb5a 	bl	808a53a <memcpy>
            len = strlen(format_str);
 8086e86:	4620      	mov	r0, r4
 8086e88:	f004 f8e2 	bl	808b050 <strlen>
 8086e8c:	4680      	mov	r8, r0
 8086e8e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8086e90:	e7de      	b.n	8086e50 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 8086e92:	464b      	mov	r3, r9
 8086e94:	4622      	mov	r2, r4
 8086e96:	2132      	movs	r1, #50	; 0x32
 8086e98:	a807      	add	r0, sp, #28
 8086e9a:	f003 fc25 	bl	808a6e8 <strftime>
    return String(buf);
 8086e9e:	a907      	add	r1, sp, #28
 8086ea0:	4638      	mov	r0, r7
 8086ea2:	f7ff fe14 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>
}
 8086ea6:	4638      	mov	r0, r7
 8086ea8:	b024      	add	sp, #144	; 0x90
 8086eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086eae:	bf00      	nop
 8086eb0:	0808e86d 	.word	0x0808e86d
 8086eb4:	0808e185 	.word	0x0808e185

08086eb8 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8086eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8086eba:	4605      	mov	r5, r0
 8086ebc:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 8086ebe:	461c      	mov	r4, r3
 8086ec0:	b913      	cbnz	r3, 8086ec8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 8086ec2:	4b12      	ldr	r3, [pc, #72]	; (8086f0c <_ZN9TimeClass6formatElPKc+0x54>)
 8086ec4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 8086ec6:	b12c      	cbz	r4, 8086ed4 <_ZN9TimeClass6formatElPKc+0x1c>
 8086ec8:	4b11      	ldr	r3, [pc, #68]	; (8086f10 <_ZN9TimeClass6formatElPKc+0x58>)
 8086eca:	4620      	mov	r0, r4
 8086ecc:	6819      	ldr	r1, [r3, #0]
 8086ece:	f003 fb7d 	bl	808a5cc <strcmp>
 8086ed2:	b920      	cbnz	r0, 8086ede <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 8086ed4:	9901      	ldr	r1, [sp, #4]
 8086ed6:	4628      	mov	r0, r5
 8086ed8:	f7ff ff6a 	bl	8086db0 <_ZN9TimeClass7timeStrEl>
 8086edc:	e013      	b.n	8086f06 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8086ede:	4f0d      	ldr	r7, [pc, #52]	; (8086f14 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8086ee0:	9a01      	ldr	r2, [sp, #4]
 8086ee2:	683b      	ldr	r3, [r7, #0]
 8086ee4:	4e0c      	ldr	r6, [pc, #48]	; (8086f18 <_ZN9TimeClass6formatElPKc+0x60>)
 8086ee6:	441a      	add	r2, r3
 8086ee8:	6833      	ldr	r3, [r6, #0]
 8086eea:	a802      	add	r0, sp, #8
 8086eec:	4413      	add	r3, r2
 8086eee:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 8086ef2:	f003 fa17 	bl	808a324 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8086ef6:	683a      	ldr	r2, [r7, #0]
 8086ef8:	6833      	ldr	r3, [r6, #0]
 8086efa:	4601      	mov	r1, r0
 8086efc:	4413      	add	r3, r2
 8086efe:	4628      	mov	r0, r5
 8086f00:	4622      	mov	r2, r4
 8086f02:	f7ff ff77 	bl	8086df4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 8086f06:	4628      	mov	r0, r5
 8086f08:	b003      	add	sp, #12
 8086f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086f0c:	20000954 	.word	0x20000954
 8086f10:	20000050 	.word	0x20000050
 8086f14:	2000095c 	.word	0x2000095c
 8086f18:	20000958 	.word	0x20000958

08086f1c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8086f1c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8086f1e:	2000      	movs	r0, #0
 8086f20:	f7fe fd8a 	bl	8085a38 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8086f24:	4604      	mov	r4, r0
 8086f26:	b968      	cbnz	r0, 8086f44 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8086f28:	f7fe ff3e 	bl	8085da8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8086f2c:	2801      	cmp	r0, #1
 8086f2e:	d10b      	bne.n	8086f48 <_ZN9TimeClass7isValidEv+0x2c>
 8086f30:	4620      	mov	r0, r4
 8086f32:	f7fe ff71 	bl	8085e18 <system_thread_get_state>
 8086f36:	b938      	cbnz	r0, 8086f48 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8086f38:	f7ff ff10 	bl	8086d5c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8086f3c:	b930      	cbnz	r0, 8086f4c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8086f3e:	f7fe ffdf 	bl	8085f00 <spark_process>
 8086f42:	e7f9      	b.n	8086f38 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8086f44:	2001      	movs	r0, #1
 8086f46:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8086f48:	2000      	movs	r0, #0
 8086f4a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8086f4c:	f7ff ff06 	bl	8086d5c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8086f50:	2000      	movs	r0, #0
 8086f52:	f7fe fd71 	bl	8085a38 <HAL_RTC_Time_Is_Valid>
 8086f56:	3000      	adds	r0, #0
 8086f58:	bf18      	it	ne
 8086f5a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8086f5c:	bd10      	pop	{r4, pc}

08086f5e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8086f5e:	b508      	push	{r3, lr}
    (void)isValid();
 8086f60:	f7ff ffdc 	bl	8086f1c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8086f64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8086f68:	f7fe bd5e 	b.w	8085a28 <HAL_RTC_Get_UnixTime>

08086f6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8086f6c:	4b02      	ldr	r3, [pc, #8]	; (8086f78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8086f6e:	681a      	ldr	r2, [r3, #0]
 8086f70:	4b02      	ldr	r3, [pc, #8]	; (8086f7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8086f72:	601a      	str	r2, [r3, #0]
 8086f74:	4770      	bx	lr
 8086f76:	bf00      	nop
 8086f78:	20000050 	.word	0x20000050
 8086f7c:	20000954 	.word	0x20000954

08086f80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8086f80:	2100      	movs	r1, #0
 8086f82:	f7fe bf21 	b.w	8085dc8 <system_delay_ms>
	...

08086f88 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 8086f88:	b530      	push	{r4, r5, lr}
 8086f8a:	685b      	ldr	r3, [r3, #4]
 8086f8c:	b085      	sub	sp, #20
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 8086f8e:	6804      	ldr	r4, [r0, #0]
 8086f90:	9303      	str	r3, [sp, #12]
 8086f92:	4d05      	ldr	r5, [pc, #20]	; (8086fa8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x20>)
 8086f94:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8086f98:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8086f9a:	9502      	str	r5, [sp, #8]
 8086f9c:	9300      	str	r3, [sp, #0]
 8086f9e:	ab02      	add	r3, sp, #8
 8086fa0:	47a0      	blx	r4
    }
 8086fa2:	b005      	add	sp, #20
 8086fa4:	bd30      	pop	{r4, r5, pc}
 8086fa6:	bf00      	nop
 8086fa8:	0808e274 	.word	0x0808e274

08086fac <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 8086fac:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 8086fae:	6804      	ldr	r4, [r0, #0]
 8086fb0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8086fb2:	46a4      	mov	ip, r4
    }
 8086fb4:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 8086fb6:	4760      	bx	ip

08086fb8 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 8086fb8:	6803      	ldr	r3, [r0, #0]
 8086fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8086fbc:	4718      	bx	r3
	...

08086fc0 <_ZN3UDP8remoteIPEv>:
 8086fc0:	4a02      	ldr	r2, [pc, #8]	; (8086fcc <_ZN3UDP8remoteIPEv+0xc>)
 8086fc2:	6002      	str	r2, [r0, #0]
 8086fc4:	6a0a      	ldr	r2, [r1, #32]
 8086fc6:	6042      	str	r2, [r0, #4]
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 8086fc8:	4770      	bx	lr
 8086fca:	bf00      	nop
 8086fcc:	0808e274 	.word	0x0808e274

08086fd0 <_ZN3UDP10remotePortEv>:
    virtual uint16_t remotePort() { return _remotePort; };
 8086fd0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8086fd2:	4770      	bx	lr

08086fd4 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 8086fd4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8086fd6:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8086fd8:	1a10      	subs	r0, r2, r0
 8086fda:	4770      	bx	lr

08086fdc <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086fdc:	b530      	push	{r4, r5, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086fde:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086fe0:	b085      	sub	sp, #20
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086fe2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8086fe4:	4b09      	ldr	r3, [pc, #36]	; (808700c <_ZN3UDP9endPacketEv+0x30>)
 8086fe6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8086fe8:	9302      	str	r3, [sp, #8]
 8086fea:	6a03      	ldr	r3, [r0, #32]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086fec:	4604      	mov	r4, r0
 8086fee:	9303      	str	r3, [sp, #12]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086ff0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8086ff2:	9300      	str	r3, [sp, #0]
 8086ff4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8086ff6:	ab02      	add	r3, sp, #8
 8086ff8:	47a8      	blx	r5
 8086ffa:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 8086ffc:	6823      	ldr	r3, [r4, #0]
 8086ffe:	4620      	mov	r0, r4
 8087000:	69db      	ldr	r3, [r3, #28]
 8087002:	4798      	blx	r3
    return result;
}
 8087004:	4628      	mov	r0, r5
 8087006:	b005      	add	sp, #20
 8087008:	bd30      	pop	{r4, r5, pc}
 808700a:	bf00      	nop
 808700c:	0808e274 	.word	0x0808e274

08087010 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 8087010:	b513      	push	{r0, r1, r4, lr}
 8087012:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 8087014:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 8087016:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 808701a:	68d4      	ldr	r4, [r2, #12]
 808701c:	4619      	mov	r1, r3
 808701e:	2201      	movs	r2, #1
 8087020:	47a0      	blx	r4
}
 8087022:	b002      	add	sp, #8
 8087024:	bd10      	pop	{r4, pc}

08087026 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 8087026:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 8087028:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 808702a:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 808702c:	691b      	ldr	r3, [r3, #16]
 808702e:	4798      	blx	r3
 8087030:	b128      	cbz	r0, 808703e <_ZN3UDP4readEv+0x18>
 8087032:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087034:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8087036:	1c59      	adds	r1, r3, #1
 8087038:	84e1      	strh	r1, [r4, #38]	; 0x26
 808703a:	5cd0      	ldrb	r0, [r2, r3]
 808703c:	bd10      	pop	{r4, pc}
 808703e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087042:	bd10      	pop	{r4, pc}

08087044 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 8087044:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 8087046:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 8087048:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 808704a:	691b      	ldr	r3, [r3, #16]
 808704c:	4798      	blx	r3
 808704e:	b118      	cbz	r0, 8087058 <_ZN3UDP4peekEv+0x14>
 8087050:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087052:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8087054:	5cd0      	ldrb	r0, [r2, r3]
 8087056:	bd10      	pop	{r4, pc}
 8087058:	f04f 30ff 	mov.w	r0, #4294967295
}
 808705c:	bd10      	pop	{r4, pc}

0808705e <_ZN3UDP5flushEv>:

void UDP::flush()
{
 808705e:	4770      	bx	lr

08087060 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 8087060:	4603      	mov	r3, r0
 8087062:	4608      	mov	r0, r1
 8087064:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 8087066:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    return p.write(_buffer+_offset, size);
 8087068:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 808706a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 808706c:	6803      	ldr	r3, [r0, #0]
 808706e:	1a52      	subs	r2, r2, r1
 8087070:	68db      	ldr	r3, [r3, #12]
 8087072:	4421      	add	r1, r4
}
 8087074:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 8087076:	4718      	bx	r3

08087078 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 8087078:	f1a0 0010 	sub.w	r0, r0, #16
 808707c:	f7ff bff0 	b.w	8087060 <_ZNK3UDP7printToER5Print>

08087080 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8087080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087082:	4616      	mov	r6, r2
    stop();
 8087084:	6803      	ldr	r3, [r0, #0]
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8087086:	4605      	mov	r5, r0
    stop();
 8087088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 808708a:	460f      	mov	r7, r1
    stop();
 808708c:	4798      	blx	r3

    bool bound = 0;
    if(Network.from(nif).ready())
 808708e:	4630      	mov	r0, r6
 8087090:	f001 fa38 	bl	8088504 <_ZN5spark12NetworkClass4fromEm>
 8087094:	6803      	ldr	r3, [r0, #0]
 8087096:	68db      	ldr	r3, [r3, #12]
 8087098:	4798      	blx	r3
 808709a:	b1b8      	cbz	r0, 80870cc <_ZN3UDP5beginEtm+0x4c>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 808709c:	2102      	movs	r1, #2
 808709e:	463b      	mov	r3, r7
 80870a0:	2211      	movs	r2, #17
 80870a2:	4608      	mov	r0, r1
 80870a4:	9600      	str	r6, [sp, #0]
 80870a6:	f7fe fdd7 	bl	8085c58 <socket_create>
 80870aa:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80870ac:	f7fe fdcc 	bl	8085c48 <socket_handle_valid>
 80870b0:	4604      	mov	r4, r0
 80870b2:	b130      	cbz	r0, 80870c2 <_ZN3UDP5beginEtm+0x42>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80870b4:	2300      	movs	r3, #0
 80870b6:	84eb      	strh	r3, [r5, #38]	; 0x26
  _total = 0;
 80870b8:	852b      	strh	r3, [r5, #40]	; 0x28
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80870ba:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80870bc:	636e      	str	r6, [r5, #52]	; 0x34
            bound = true;
 80870be:	2001      	movs	r0, #1
 80870c0:	e004      	b.n	80870cc <_ZN3UDP5beginEtm+0x4c>
        }
        else {
            stop();
 80870c2:	682b      	ldr	r3, [r5, #0]
 80870c4:	4628      	mov	r0, r5
 80870c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80870c8:	4798      	blx	r3
            bound = false;
 80870ca:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80870cc:	b003      	add	sp, #12
 80870ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080870d0 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80870d0:	b538      	push	{r3, r4, r5, lr}
 80870d2:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80870d4:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80870d6:	f7fe fdef 	bl	8085cb8 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80870da:	4285      	cmp	r5, r0
 80870dc:	d002      	beq.n	80870e4 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80870de:	6960      	ldr	r0, [r4, #20]
 80870e0:	f7fe fde2 	bl	8085ca8 <socket_close>
    }
    _sock = socket_handle_invalid();
 80870e4:	f7fe fde8 	bl	8085cb8 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80870e8:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80870ea:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80870ec:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 80870ee:	8523      	strh	r3, [r4, #40]	; 0x28
 80870f0:	bd38      	pop	{r3, r4, r5, pc}

080870f2 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80870f2:	b530      	push	{r4, r5, lr}
 80870f4:	b087      	sub	sp, #28
 80870f6:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80870fa:	2502      	movs	r5, #2
 80870fc:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 8087100:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8087104:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8087106:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8087108:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 808710c:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 8087110:	799c      	ldrb	r4, [r3, #6]
 8087112:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8087116:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8087118:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 808711a:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 808711e:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 8087122:	2310      	movs	r3, #16
 8087124:	9301      	str	r3, [sp, #4]
 8087126:	ab02      	add	r3, sp, #8
 8087128:	9300      	str	r3, [sp, #0]
 808712a:	6940      	ldr	r0, [r0, #20]
 808712c:	2300      	movs	r3, #0
 808712e:	f7fe fdb3 	bl	8085c98 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 8087132:	b007      	add	sp, #28
 8087134:	bd30      	pop	{r4, r5, pc}

08087136 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8087136:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8087138:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 808713a:	4605      	mov	r5, r0
 808713c:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    size_t available = _buffer ? _buffer_size - _offset : 0;
 808713e:	b113      	cbz	r3, 8087146 <_ZN3UDP5writeEPKhj+0x10>
 8087140:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8087142:	1a24      	subs	r4, r4, r0
 8087144:	e000      	b.n	8087148 <_ZN3UDP5writeEPKhj+0x12>
 8087146:	461c      	mov	r4, r3
 8087148:	4294      	cmp	r4, r2
 808714a:	bf28      	it	cs
 808714c:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 808714e:	4418      	add	r0, r3
 8087150:	4622      	mov	r2, r4
 8087152:	f003 f9f2 	bl	808a53a <memcpy>
    _offset += size;
 8087156:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    return size;
}
 8087158:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 808715a:	4423      	add	r3, r4
 808715c:	84eb      	strh	r3, [r5, #38]	; 0x26
    return size;
}
 808715e:	bd38      	pop	{r3, r4, r5, pc}

08087160 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8087160:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 8087162:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8087164:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 8087166:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8087168:	460e      	mov	r6, r1
 808716a:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 808716c:	4798      	blx	r3
 808716e:	b188      	cbz	r0, 8087194 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 8087170:	6823      	ldr	r3, [r4, #0]
 8087172:	4620      	mov	r0, r4
 8087174:	691b      	ldr	r3, [r3, #16]
 8087176:	4798      	blx	r3
 8087178:	4285      	cmp	r5, r0
 808717a:	bfa8      	it	ge
 808717c:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 808717e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087180:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8087182:	462a      	mov	r2, r5
 8087184:	4419      	add	r1, r3
 8087186:	4630      	mov	r0, r6
 8087188:	f003 f9d7 	bl	808a53a <memcpy>
      _offset += read;
 808718c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 808718e:	442b      	add	r3, r5
 8087190:	84e3      	strh	r3, [r4, #38]	; 0x26
 8087192:	e001      	b.n	8087198 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 8087194:	f04f 35ff 	mov.w	r5, #4294967295
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 8087198:	4628      	mov	r0, r5
 808719a:	bd70      	pop	{r4, r5, r6, pc}

0808719c <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 808719c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808719e:	4604      	mov	r4, r0
 80871a0:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80871a2:	6b40      	ldr	r0, [r0, #52]	; 0x34
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80871a4:	460d      	mov	r5, r1
 80871a6:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80871a8:	f001 f9ac 	bl	8088504 <_ZN5spark12NetworkClass4fromEm>
 80871ac:	6803      	ldr	r3, [r0, #0]
 80871ae:	68db      	ldr	r3, [r3, #12]
 80871b0:	4798      	blx	r3
 80871b2:	b310      	cbz	r0, 80871fa <_ZN3UDP13receivePacketEPhjm+0x5e>
 80871b4:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80871b6:	f7fe fd7f 	bl	8085cb8 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80871ba:	4287      	cmp	r7, r0
 80871bc:	d01d      	beq.n	80871fa <_ZN3UDP13receivePacketEPhjm+0x5e>
 80871be:	b1e5      	cbz	r5, 80871fa <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80871c0:	ab08      	add	r3, sp, #32
 80871c2:	2210      	movs	r2, #16
 80871c4:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80871c8:	9301      	str	r3, [sp, #4]
 80871ca:	eb0d 0302 	add.w	r3, sp, r2
 80871ce:	9300      	str	r3, [sp, #0]
 80871d0:	4629      	mov	r1, r5
 80871d2:	2300      	movs	r3, #0
 80871d4:	4632      	mov	r2, r6
 80871d6:	6960      	ldr	r0, [r4, #20]
 80871d8:	f7fe fd56 	bl	8085c88 <socket_receivefrom>
        if (ret >= 0)
 80871dc:	1e05      	subs	r5, r0, #0
 80871de:	db0e      	blt.n	80871fe <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80871e0:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80871e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80871e8:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80871ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80871ee:	84a3      	strh	r3, [r4, #36]	; 0x24
            _remoteIP = &remoteSockAddr.sa_data[2];
 80871f0:	f104 001c 	add.w	r0, r4, #28
 80871f4:	f000 fdf0 	bl	8087dd8 <_ZN9IPAddressaSEPKh>
 80871f8:	e001      	b.n	80871fe <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80871fa:	f04f 35ff 	mov.w	r5, #4294967295
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80871fe:	4628      	mov	r0, r5
 8087200:	b009      	add	sp, #36	; 0x24
 8087202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087204 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8087204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087206:	4605      	mov	r5, r0
 8087208:	b089      	sub	sp, #36	; 0x24
    if(Network.from(_nif).ready())
 808720a:	6b40      	ldr	r0, [r0, #52]	; 0x34

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 808720c:	460e      	mov	r6, r1
 808720e:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 8087210:	f001 f978 	bl	8088504 <_ZN5spark12NetworkClass4fromEm>
 8087214:	6803      	ldr	r3, [r0, #0]
 8087216:	68db      	ldr	r3, [r3, #12]
 8087218:	4798      	blx	r3
 808721a:	b1d8      	cbz	r0, 8087254 <_ZN3UDP11beginPacketEPKct+0x50>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 808721c:	4630      	mov	r0, r6
 808721e:	f003 ff17 	bl	808b050 <strlen>
 8087222:	2400      	movs	r4, #0
 8087224:	b281      	uxth	r1, r0
 8087226:	9400      	str	r4, [sp, #0]
 8087228:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 808722a:	aa03      	add	r2, sp, #12
 808722c:	4630      	mov	r0, r6
 808722e:	f7fe fd5b 	bl	8085ce8 <inet_gethostbyname>
 8087232:	b970      	cbnz	r0, 8087252 <_ZN3UDP11beginPacketEPKct+0x4e>
        {
            IPAddress remote_addr(ip_addr);
 8087234:	a903      	add	r1, sp, #12
 8087236:	a804      	add	r0, sp, #16
 8087238:	f000 fda4 	bl	8087d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808723c:	4a06      	ldr	r2, [pc, #24]	; (8087258 <_ZN3UDP11beginPacketEPKct+0x54>)
            return beginPacket(remote_addr, port);
 808723e:	682b      	ldr	r3, [r5, #0]
 8087240:	9206      	str	r2, [sp, #24]
 8087242:	9a05      	ldr	r2, [sp, #20]
 8087244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087246:	9207      	str	r2, [sp, #28]
 8087248:	a906      	add	r1, sp, #24
 808724a:	463a      	mov	r2, r7
 808724c:	4628      	mov	r0, r5
 808724e:	4798      	blx	r3
 8087250:	e000      	b.n	8087254 <_ZN3UDP11beginPacketEPKct+0x50>
        }
    }
    return 0;
 8087252:	4620      	mov	r0, r4
}
 8087254:	b009      	add	sp, #36	; 0x24
 8087256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087258:	0808e274 	.word	0x0808e274

0808725c <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 808725c:	b538      	push	{r3, r4, r5, lr}
 808725e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087262:	6083      	str	r3, [r0, #8]
 8087264:	4b0b      	ldr	r3, [pc, #44]	; (8087294 <_ZN3UDPC1Ev+0x38>)
 8087266:	2500      	movs	r5, #0
 8087268:	f103 0208 	add.w	r2, r3, #8
 808726c:	336c      	adds	r3, #108	; 0x6c
 808726e:	6002      	str	r2, [r0, #0]
 8087270:	6103      	str	r3, [r0, #16]
 8087272:	6045      	str	r5, [r0, #4]
 8087274:	4604      	mov	r4, r0
 8087276:	f7fe fd1f 	bl	8085cb8 <socket_handle_invalid>
 808727a:	6160      	str	r0, [r4, #20]
 808727c:	f104 001c 	add.w	r0, r4, #28
 8087280:	f000 fd78 	bl	8087d74 <_ZN9IPAddressC1Ev>
 8087284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8087288:	84e5      	strh	r5, [r4, #38]	; 0x26
 808728a:	8525      	strh	r5, [r4, #40]	; 0x28
 808728c:	62e5      	str	r5, [r4, #44]	; 0x2c
 808728e:	6323      	str	r3, [r4, #48]	; 0x30
{
}
 8087290:	4620      	mov	r0, r4
 8087292:	bd38      	pop	{r3, r4, r5, pc}
 8087294:	0808e1ac 	.word	0x0808e1ac

08087298 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8087298:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 808729a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 808729e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80872a0:	b123      	cbz	r3, 80872ac <_ZN3UDP13releaseBufferEv+0x14>
 80872a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80872a4:	b110      	cbz	r0, 80872ac <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80872a6:	2101      	movs	r1, #1
 80872a8:	f001 fc14 	bl	8088ad4 <_ZdlPvj>
    }
    _buffer = NULL;
 80872ac:	2300      	movs	r3, #0
 80872ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    _buffer_allocated = false;
 80872b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    _buffer_size = 0;
 80872b4:	6323      	str	r3, [r4, #48]	; 0x30
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80872b6:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 80872b8:	8523      	strh	r3, [r4, #40]	; 0x28
 80872ba:	bd10      	pop	{r4, pc}

080872bc <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80872bc:	b570      	push	{r4, r5, r6, lr}
 80872be:	4604      	mov	r4, r0
 80872c0:	4616      	mov	r6, r2
 80872c2:	460d      	mov	r5, r1
    releaseBuffer();
 80872c4:	f7ff ffe8 	bl	8087298 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80872c8:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80872ca:	62e6      	str	r6, [r4, #44]	; 0x2c
    _buffer_size = 0;
 80872cc:	6323      	str	r3, [r4, #48]	; 0x30
    if (!_buffer && buf_size) {         // requested allocation
 80872ce:	b93e      	cbnz	r6, 80872e0 <_ZN3UDP9setBufferEjPh+0x24>
 80872d0:	b135      	cbz	r5, 80872e0 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80872d2:	4628      	mov	r0, r5
 80872d4:	f7f8 fee5 	bl	80800a2 <_Znaj>
        _buffer_allocated = true;
 80872d8:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80872da:	62e0      	str	r0, [r4, #44]	; 0x2c
        _buffer_allocated = true;
 80872dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
    if (_buffer) {
 80872e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80872e2:	b103      	cbz	r3, 80872e6 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80872e4:	6325      	str	r5, [r4, #48]	; 0x30
    }
    return _buffer_size;
 80872e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 80872e8:	3000      	adds	r0, #0
 80872ea:	bf18      	it	ne
 80872ec:	2001      	movne	r0, #1
 80872ee:	bd70      	pop	{r4, r5, r6, pc}

080872f0 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80872f0:	b570      	push	{r4, r5, r6, lr}
 80872f2:	4615      	mov	r5, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80872f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80872f6:	4604      	mov	r4, r0
 80872f8:	460e      	mov	r6, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80872fa:	b91a      	cbnz	r2, 8087304 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80872fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80872fe:	b109      	cbz	r1, 8087304 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 8087300:	f7ff ffdc 	bl	80872bc <_ZN3UDP9setBufferEjPh>
 8087304:	6873      	ldr	r3, [r6, #4]
    }

    _remoteIP = ip;
    _remotePort = port;
 8087306:	84a5      	strh	r5, [r4, #36]	; 0x24
 8087308:	6223      	str	r3, [r4, #32]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 808730a:	2300      	movs	r3, #0
 808730c:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 808730e:	8523      	strh	r3, [r4, #40]	; 0x28

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 8087310:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8087312:	bd70      	pop	{r4, r5, r6, pc}

08087314 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8087314:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 8087316:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8087318:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 808731a:	b91a      	cbnz	r2, 8087324 <_ZN3UDP11parsePacketEm+0x10>
 808731c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 808731e:	b109      	cbz	r1, 8087324 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 8087320:	f7ff ffcc 	bl	80872bc <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8087324:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087326:	2300      	movs	r3, #0
 8087328:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 808732a:	8523      	strh	r3, [r4, #40]	; 0x28
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 808732c:	b141      	cbz	r1, 8087340 <_ZN3UDP11parsePacketEm+0x2c>
 808732e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8087330:	b132      	cbz	r2, 8087340 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 8087332:	6820      	ldr	r0, [r4, #0]
 8087334:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8087336:	4620      	mov	r0, r4
 8087338:	47a8      	blx	r5
        if (result>0) {
 808733a:	2800      	cmp	r0, #0
            _total = result;
 808733c:	bfc8      	it	gt
 808733e:	8520      	strhgt	r0, [r4, #40]	; 0x28
        }
    };
    return available();
 8087340:	6823      	ldr	r3, [r4, #0]
 8087342:	4620      	mov	r0, r4
}
 8087344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 8087348:	691b      	ldr	r3, [r3, #16]
 808734a:	4718      	bx	r3

0808734c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808734c:	b510      	push	{r4, lr}
 808734e:	4604      	mov	r4, r0
 8087350:	f7f8 ff69 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 8087354:	4620      	mov	r0, r4
 8087356:	bd10      	pop	{r4, pc}

08087358 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8087358:	b513      	push	{r0, r1, r4, lr}
 808735a:	460b      	mov	r3, r1
 808735c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808735e:	c803      	ldmia	r0, {r0, r1}
 8087360:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8087364:	e893 0003 	ldmia.w	r3, {r0, r1}
 8087368:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808736c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8087370:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8087374:	b002      	add	sp, #8
 8087376:	bd10      	pop	{r4, pc}

08087378 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087378:	4803      	ldr	r0, [pc, #12]	; (8087388 <_GLOBAL__sub_I_RGB+0x10>)
 808737a:	2300      	movs	r3, #0
 808737c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808737e:	4a03      	ldr	r2, [pc, #12]	; (808738c <_GLOBAL__sub_I_RGB+0x14>)
 8087380:	4903      	ldr	r1, [pc, #12]	; (8087390 <_GLOBAL__sub_I_RGB+0x18>)
 8087382:	f001 bb99 	b.w	8088ab8 <__aeabi_atexit>
 8087386:	bf00      	nop
 8087388:	20000964 	.word	0x20000964
 808738c:	20000140 	.word	0x20000140
 8087390:	0808734d 	.word	0x0808734d

08087394 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8087394:	4770      	bx	lr

08087396 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8087396:	7d00      	ldrb	r0, [r0, #20]
 8087398:	4770      	bx	lr
	...

0808739c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 808739c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 808739e:	7d03      	ldrb	r3, [r0, #20]
 80873a0:	b11b      	cbz	r3, 80873aa <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 80873a2:	6980      	ldr	r0, [r0, #24]
 80873a4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80873a8:	d101      	bne.n	80873ae <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 80873aa:	2000      	movs	r0, #0
 80873ac:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 80873ae:	f002 fb4d 	bl	8089a4c <__aeabi_i2f>
 80873b2:	4902      	ldr	r1, [pc, #8]	; (80873bc <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 80873b4:	f002 fc52 	bl	8089c5c <__aeabi_fdiv>
    }

    return 0.0f;
}
 80873b8:	bd08      	pop	{r3, pc}
 80873ba:	bf00      	nop
 80873bc:	42c80000 	.word	0x42c80000

080873c0 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 80873c0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 80873c2:	7d03      	ldrb	r3, [r0, #20]
 80873c4:	b11b      	cbz	r3, 80873ce <_ZNK14CellularSignal15getQualityValueEv+0xe>
 80873c6:	6a00      	ldr	r0, [r0, #32]
 80873c8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80873cc:	d101      	bne.n	80873d2 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 80873ce:	2000      	movs	r0, #0
 80873d0:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 80873d2:	f002 fb3b 	bl	8089a4c <__aeabi_i2f>
 80873d6:	4902      	ldr	r1, [pc, #8]	; (80873e0 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 80873d8:	f002 fc40 	bl	8089c5c <__aeabi_fdiv>
    }

    return 0.0f;
}
 80873dc:	bd08      	pop	{r3, pc}
 80873de:	bf00      	nop
 80873e0:	42c80000 	.word	0x42c80000

080873e4 <_ZN14CellularSignalD0Ev>:
 80873e4:	b510      	push	{r4, lr}
 80873e6:	4604      	mov	r4, r0
 80873e8:	2128      	movs	r1, #40	; 0x28
 80873ea:	f001 fb73 	bl	8088ad4 <_ZdlPvj>
 80873ee:	4620      	mov	r0, r4
 80873f0:	bd10      	pop	{r4, pc}
	...

080873f4 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 80873f4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80873f6:	7d03      	ldrb	r3, [r0, #20]
 80873f8:	b15b      	cbz	r3, 8087412 <_ZNK14CellularSignal10getQualityEv+0x1e>
 80873fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80873fc:	2800      	cmp	r0, #0
 80873fe:	db08      	blt.n	8087412 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8087400:	f002 fb24 	bl	8089a4c <__aeabi_i2f>
 8087404:	4904      	ldr	r1, [pc, #16]	; (8087418 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8087406:	f002 fc29 	bl	8089c5c <__aeabi_fdiv>
 808740a:	4904      	ldr	r1, [pc, #16]	; (808741c <_ZNK14CellularSignal10getQualityEv+0x28>)
 808740c:	f002 fb72 	bl	8089af4 <__aeabi_fmul>
 8087410:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8087412:	4803      	ldr	r0, [pc, #12]	; (8087420 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8087414:	bd08      	pop	{r3, pc}
 8087416:	bf00      	nop
 8087418:	477fff00 	.word	0x477fff00
 808741c:	42c80000 	.word	0x42c80000
 8087420:	bf800000 	.word	0xbf800000

08087424 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8087424:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8087426:	7d03      	ldrb	r3, [r0, #20]
 8087428:	b15b      	cbz	r3, 8087442 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 808742a:	69c0      	ldr	r0, [r0, #28]
 808742c:	2800      	cmp	r0, #0
 808742e:	db08      	blt.n	8087442 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8087430:	f002 fb0c 	bl	8089a4c <__aeabi_i2f>
 8087434:	4904      	ldr	r1, [pc, #16]	; (8087448 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8087436:	f002 fc11 	bl	8089c5c <__aeabi_fdiv>
 808743a:	4904      	ldr	r1, [pc, #16]	; (808744c <_ZNK14CellularSignal11getStrengthEv+0x28>)
 808743c:	f002 fb5a 	bl	8089af4 <__aeabi_fmul>
 8087440:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8087442:	4803      	ldr	r0, [pc, #12]	; (8087450 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8087444:	bd08      	pop	{r3, pc}
 8087446:	bf00      	nop
 8087448:	477fff00 	.word	0x477fff00
 808744c:	42c80000 	.word	0x42c80000
 8087450:	bf800000 	.word	0xbf800000

08087454 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8087454:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8087456:	460d      	mov	r5, r1
 8087458:	f100 0410 	add.w	r4, r0, #16
 808745c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808745e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8087460:	e895 0003 	ldmia.w	r5, {r0, r1}
 8087464:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8087468:	2001      	movs	r0, #1
 808746a:	bd30      	pop	{r4, r5, pc}

0808746c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 808746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087470:	4607      	mov	r7, r0
 8087472:	460c      	mov	r4, r1
{
    if (base == 0) {
 8087474:	4615      	mov	r5, r2
 8087476:	b92a      	cbnz	r2, 8087484 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 8087478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 808747c:	6803      	ldr	r3, [r0, #0]
 808747e:	b2c9      	uxtb	r1, r1
 8087480:	689b      	ldr	r3, [r3, #8]
 8087482:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8087484:	2900      	cmp	r1, #0
 8087486:	da07      	bge.n	8087498 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 8087488:	2a0a      	cmp	r2, #10
 808748a:	d105      	bne.n	8087498 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 808748c:	212d      	movs	r1, #45	; 0x2d
 808748e:	f7ff fbdf 	bl	8086c50 <_ZN5Print5printEc>
            val = -n;
 8087492:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8087494:	4606      	mov	r6, r0
            val = -n;
 8087496:	e001      	b.n	808749c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 8087498:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 808749a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808749c:	b2ea      	uxtb	r2, r5
 808749e:	4638      	mov	r0, r7
 80874a0:	f7ff fbf3 	bl	8086c8a <_ZN5Print11printNumberEmh>
    }
}
 80874a4:	4430      	add	r0, r6
 80874a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080874aa <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
 80874aa:	b570      	push	{r4, r5, r6, lr}
 80874ac:	460d      	mov	r5, r1
 80874ae:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 80874b0:	220a      	movs	r2, #10
 80874b2:	6881      	ldr	r1, [r0, #8]
 80874b4:	4628      	mov	r0, r5
 80874b6:	f7ff ffd9 	bl	808746c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
 80874ba:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 80874bc:	4604      	mov	r4, r0
    n += p.print(',');
 80874be:	4628      	mov	r0, r5
 80874c0:	f7ff fbc6 	bl	8086c50 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 80874c4:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 80874c6:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 80874c8:	68f1      	ldr	r1, [r6, #12]
 80874ca:	4628      	mov	r0, r5
 80874cc:	f7ff ffce 	bl	808746c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
 80874d0:	4420      	add	r0, r4
 80874d2:	bd70      	pop	{r4, r5, r6, pc}

080874d4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 80874d4:	f1a0 0004 	sub.w	r0, r0, #4
 80874d8:	f7ff bfe7 	b.w	80874aa <_ZNK14CellularSignal7printToER5Print>

080874dc <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 80874dc:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 80874de:	0909      	lsrs	r1, r1, #4
 80874e0:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 80874e4:	f002 fab2 	bl	8089a4c <__aeabi_i2f>
 80874e8:	4901      	ldr	r1, [pc, #4]	; (80874f0 <_ZN6detail9_getVCellEhh+0x14>)
 80874ea:	f002 fbb7 	bl	8089c5c <__aeabi_fdiv>
	}
 80874ee:	bd08      	pop	{r3, pc}
 80874f0:	44480000 	.word	0x44480000

080874f4 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80874f4:	6800      	ldr	r0, [r0, #0]
 80874f6:	f000 bf98 	b.w	808842a <_ZN7TwoWire4lockEv>

080874fa <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80874fa:	b510      	push	{r4, lr}
 80874fc:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 80874fe:	6001      	str	r1, [r0, #0]
 8087500:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8087502:	b10a      	cbz	r2, 8087508 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8087504:	f7ff fff6 	bl	80874f4 <_ZN9FuelGauge4lockEv>
    }
}
 8087508:	4620      	mov	r0, r4
 808750a:	bd10      	pop	{r4, pc}

0808750c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808750c:	b538      	push	{r3, r4, r5, lr}
 808750e:	4604      	mov	r4, r0
 8087510:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087512:	f001 faab 	bl	8088a6c <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8087516:	462a      	mov	r2, r5
 8087518:	4601      	mov	r1, r0
 808751a:	4620      	mov	r0, r4
 808751c:	f7ff ffed 	bl	80874fa <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8087520:	4620      	mov	r0, r4
 8087522:	bd38      	pop	{r3, r4, r5, pc}

08087524 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8087524:	6800      	ldr	r0, [r0, #0]
 8087526:	f000 bf89 	b.w	808843c <_ZN7TwoWire6unlockEv>

0808752a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808752a:	b510      	push	{r4, lr}
{
    if (lock_) {
 808752c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808752e:	4604      	mov	r4, r0
{
    if (lock_) {
 8087530:	b10b      	cbz	r3, 8087536 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8087532:	f7ff fff7 	bl	8087524 <_ZN9FuelGauge6unlockEv>
    }
}
 8087536:	4620      	mov	r0, r4
 8087538:	bd10      	pop	{r4, pc}

0808753a <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808753c:	4604      	mov	r4, r0
 808753e:	460f      	mov	r7, r1
 8087540:	4616      	mov	r6, r2
 8087542:	461d      	mov	r5, r3
 8087544:	f7ff ffd6 	bl	80874f4 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8087548:	6820      	ldr	r0, [r4, #0]
 808754a:	2136      	movs	r1, #54	; 0x36
 808754c:	f000 ff5f 	bl	808840e <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8087550:	6820      	ldr	r0, [r4, #0]
 8087552:	4639      	mov	r1, r7
 8087554:	6803      	ldr	r3, [r0, #0]
 8087556:	689b      	ldr	r3, [r3, #8]
 8087558:	4798      	blx	r3
    i2c_.endTransmission(true);
 808755a:	2101      	movs	r1, #1
 808755c:	6820      	ldr	r0, [r4, #0]
 808755e:	f000 ff59 	bl	8088414 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8087562:	2202      	movs	r2, #2
 8087564:	2136      	movs	r1, #54	; 0x36
 8087566:	2301      	movs	r3, #1
 8087568:	6820      	ldr	r0, [r4, #0]
 808756a:	f000 ff37 	bl	80883dc <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
 808756e:	6820      	ldr	r0, [r4, #0]
 8087570:	6803      	ldr	r3, [r0, #0]
 8087572:	695b      	ldr	r3, [r3, #20]
 8087574:	4798      	blx	r3
 8087576:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8087578:	6820      	ldr	r0, [r4, #0]
 808757a:	6803      	ldr	r3, [r0, #0]
 808757c:	695b      	ldr	r3, [r3, #20]
 808757e:	4798      	blx	r3
 8087580:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8087582:	4620      	mov	r0, r4
}
 8087584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8087588:	f7ff bfcc 	b.w	8087524 <_ZN9FuelGauge6unlockEv>

0808758c <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 808758c:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 808758e:	2200      	movs	r2, #0
	byte LSB = 0;
 8087590:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 8087592:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 8087596:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 808759a:	2102      	movs	r1, #2
 808759c:	f10d 0206 	add.w	r2, sp, #6
 80875a0:	f7ff ffcb 	bl	808753a <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 80875a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80875a8:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 80875ac:	b003      	add	sp, #12
 80875ae:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 80875b2:	f7ff bf93 	b.w	80874dc <_ZN6detail9_getVCellEhh>
	...

080875b8 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80875b8:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80875ba:	2200      	movs	r2, #0
	byte LSB = 0;
 80875bc:	ab02      	add	r3, sp, #8
 80875be:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80875c2:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80875c6:	2104      	movs	r1, #4
 80875c8:	f10d 0206 	add.w	r2, sp, #6
 80875cc:	f7ff ffb5 	bl	808753a <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80875d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80875d4:	f001 fde8 	bl	80891a8 <__aeabi_i2d>
 80875d8:	2200      	movs	r2, #0
 80875da:	4b08      	ldr	r3, [pc, #32]	; (80875fc <_ZN9FuelGauge6getSoCEv+0x44>)
 80875dc:	f001 fe4a 	bl	8089274 <__aeabi_dmul>
 80875e0:	f002 f92a 	bl	8089838 <__aeabi_d2f>
 80875e4:	4604      	mov	r4, r0
 80875e6:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80875ea:	f002 fa2f 	bl	8089a4c <__aeabi_i2f>
 80875ee:	4601      	mov	r1, r0
 80875f0:	4620      	mov	r0, r4
 80875f2:	f002 f977 	bl	80898e4 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 80875f6:	b002      	add	sp, #8
 80875f8:	bd10      	pop	{r4, pc}
 80875fa:	bf00      	nop
 80875fc:	3f700000 	.word	0x3f700000

08087600 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8087600:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8087602:	4b18      	ldr	r3, [pc, #96]	; (8087664 <serialEventRun+0x64>)
 8087604:	b133      	cbz	r3, 8087614 <serialEventRun+0x14>
 8087606:	f000 fc63 	bl	8087ed0 <_Z16_fetch_usbserialv>
 808760a:	6803      	ldr	r3, [r0, #0]
 808760c:	691b      	ldr	r3, [r3, #16]
 808760e:	4798      	blx	r3
 8087610:	2800      	cmp	r0, #0
 8087612:	dc1e      	bgt.n	8087652 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8087614:	4b14      	ldr	r3, [pc, #80]	; (8087668 <serialEventRun+0x68>)
 8087616:	b133      	cbz	r3, 8087626 <serialEventRun+0x26>
 8087618:	f000 fe46 	bl	80882a8 <_Z22__fetch_global_Serial1v>
 808761c:	6803      	ldr	r3, [r0, #0]
 808761e:	691b      	ldr	r3, [r3, #16]
 8087620:	4798      	blx	r3
 8087622:	2800      	cmp	r0, #0
 8087624:	dc18      	bgt.n	8087658 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8087626:	4b11      	ldr	r3, [pc, #68]	; (808766c <serialEventRun+0x6c>)
 8087628:	b10b      	cbz	r3, 808762e <serialEventRun+0x2e>
 808762a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808762e:	4b10      	ldr	r3, [pc, #64]	; (8087670 <serialEventRun+0x70>)
 8087630:	b10b      	cbz	r3, 8087636 <serialEventRun+0x36>
 8087632:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8087636:	4b0f      	ldr	r3, [pc, #60]	; (8087674 <serialEventRun+0x74>)
 8087638:	b10b      	cbz	r3, 808763e <serialEventRun+0x3e>
 808763a:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808763e:	4b0e      	ldr	r3, [pc, #56]	; (8087678 <serialEventRun+0x78>)
 8087640:	b17b      	cbz	r3, 8087662 <serialEventRun+0x62>
 8087642:	f000 fc81 	bl	8087f48 <_Z17_fetch_usbserial1v>
 8087646:	6803      	ldr	r3, [r0, #0]
 8087648:	691b      	ldr	r3, [r3, #16]
 808764a:	4798      	blx	r3
 808764c:	2800      	cmp	r0, #0
 808764e:	dc06      	bgt.n	808765e <serialEventRun+0x5e>
 8087650:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8087652:	f3af 8000 	nop.w
 8087656:	e7dd      	b.n	8087614 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8087658:	f3af 8000 	nop.w
 808765c:	e7e3      	b.n	8087626 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808765e:	f3af 8000 	nop.w
 8087662:	bd08      	pop	{r3, pc}
	...

0808767c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808767c:	b508      	push	{r3, lr}
	serialEventRun();
 808767e:	f7ff ffbf 	bl	8087600 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8087682:	f7fe f9c9 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8087686:	4b01      	ldr	r3, [pc, #4]	; (808768c <_post_loop+0x10>)
 8087688:	6018      	str	r0, [r3, #0]
 808768a:	bd08      	pop	{r3, pc}
 808768c:	20000ecc 	.word	0x20000ecc

08087690 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8087690:	4802      	ldr	r0, [pc, #8]	; (808769c <_Z33system_initialize_user_backup_ramv+0xc>)
 8087692:	4a03      	ldr	r2, [pc, #12]	; (80876a0 <_Z33system_initialize_user_backup_ramv+0x10>)
 8087694:	4903      	ldr	r1, [pc, #12]	; (80876a4 <_Z33system_initialize_user_backup_ramv+0x14>)
 8087696:	1a12      	subs	r2, r2, r0
 8087698:	f002 bf4f 	b.w	808a53a <memcpy>
 808769c:	40024000 	.word	0x40024000
 80876a0:	40024004 	.word	0x40024004
 80876a4:	0808ea58 	.word	0x0808ea58

080876a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80876a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80876aa:	2300      	movs	r3, #0
 80876ac:	9300      	str	r3, [sp, #0]
 80876ae:	461a      	mov	r2, r3
 80876b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80876b4:	f7fe fbc2 	bl	8085e3c <system_ctrl_set_result>
}
 80876b8:	b003      	add	sp, #12
 80876ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080876c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80876c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80876c2:	8843      	ldrh	r3, [r0, #2]
 80876c4:	2b0a      	cmp	r3, #10
 80876c6:	d008      	beq.n	80876da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80876c8:	2b50      	cmp	r3, #80	; 0x50
 80876ca:	d109      	bne.n	80876e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80876cc:	4b09      	ldr	r3, [pc, #36]	; (80876f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80876ce:	681b      	ldr	r3, [r3, #0]
 80876d0:	b13b      	cbz	r3, 80876e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80876d2:	b003      	add	sp, #12
 80876d4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80876d8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80876da:	f7ff ffe5 	bl	80876a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80876de:	e006      	b.n	80876ee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80876e0:	2300      	movs	r3, #0
 80876e2:	9300      	str	r3, [sp, #0]
 80876e4:	461a      	mov	r2, r3
 80876e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80876ea:	f7fe fba7 	bl	8085e3c <system_ctrl_set_result>
        break;
    }
}
 80876ee:	b003      	add	sp, #12
 80876f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80876f4:	20000974 	.word	0x20000974

080876f8 <module_user_init_hook>:

void module_user_init_hook()
{
 80876f8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80876fa:	4c10      	ldr	r4, [pc, #64]	; (808773c <module_user_init_hook+0x44>)
 80876fc:	4d10      	ldr	r5, [pc, #64]	; (8087740 <module_user_init_hook+0x48>)
 80876fe:	6823      	ldr	r3, [r4, #0]
 8087700:	42ab      	cmp	r3, r5
 8087702:	4b10      	ldr	r3, [pc, #64]	; (8087744 <module_user_init_hook+0x4c>)
 8087704:	bf0c      	ite	eq
 8087706:	2201      	moveq	r2, #1
 8087708:	2200      	movne	r2, #0
 808770a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808770c:	d002      	beq.n	8087714 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808770e:	f7ff ffbf 	bl	8087690 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8087712:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8087714:	f7fe f960 	bl	80859d8 <HAL_RNG_GetRandomNumber>
 8087718:	4604      	mov	r4, r0
    srand(seed);
 808771a:	f002 ff21 	bl	808a560 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808771e:	4b0a      	ldr	r3, [pc, #40]	; (8087748 <module_user_init_hook+0x50>)
 8087720:	b113      	cbz	r3, 8087728 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8087722:	4620      	mov	r0, r4
 8087724:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8087728:	2100      	movs	r1, #0
 808772a:	4807      	ldr	r0, [pc, #28]	; (8087748 <module_user_init_hook+0x50>)
 808772c:	f7fe fc18 	bl	8085f60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8087730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8087734:	2100      	movs	r1, #0
 8087736:	4805      	ldr	r0, [pc, #20]	; (808774c <module_user_init_hook+0x54>)
 8087738:	f7fe bb76 	b.w	8085e28 <system_ctrl_set_app_request_handler>
 808773c:	40024000 	.word	0x40024000
 8087740:	9a271c1e 	.word	0x9a271c1e
 8087744:	20000978 	.word	0x20000978
 8087748:	00000000 	.word	0x00000000
 808774c:	080876c1 	.word	0x080876c1

08087750 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087750:	4770      	bx	lr

08087752 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8087752:	2000      	movs	r0, #0
 8087754:	4770      	bx	lr

08087756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087756:	b510      	push	{r4, lr}
 8087758:	4604      	mov	r4, r0
 808775a:	2110      	movs	r1, #16
 808775c:	f001 f9ba 	bl	8088ad4 <_ZdlPvj>
 8087760:	4620      	mov	r0, r4
 8087762:	bd10      	pop	{r4, pc}

08087764 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8087764:	b508      	push	{r3, lr}
      { delete this; }
 8087766:	b108      	cbz	r0, 808776c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8087768:	f7ff fff5 	bl	8087756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808776c:	bd08      	pop	{r3, pc}

0808776e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808776e:	2200      	movs	r2, #0
 8087770:	6002      	str	r2, [r0, #0]
 8087772:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8087776:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8087778:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808777a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808777e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8087780:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087782:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8087784:	680c      	ldr	r4, [r1, #0]
 8087786:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8087788:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808778a:	bd10      	pop	{r4, pc}

0808778c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808778c:	b510      	push	{r4, lr}
 808778e:	4604      	mov	r4, r0
    free((void*)msg_);
 8087790:	6800      	ldr	r0, [r0, #0]
 8087792:	f7fe fbf5 	bl	8085f80 <free>
}
 8087796:	4620      	mov	r0, r4
 8087798:	bd10      	pop	{r4, pc}

0808779a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808779a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808779c:	68c4      	ldr	r4, [r0, #12]
 808779e:	b1f4      	cbz	r4, 80877de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 80877a0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80877a2:	2b02      	cmp	r3, #2
 80877a4:	d103      	bne.n	80877ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80877a6:	f104 000c 	add.w	r0, r4, #12
 80877aa:	f7ff ffef 	bl	808778c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80877ae:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80877b0:	b135      	cbz	r5, 80877c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80877b2:	4628      	mov	r0, r5
 80877b4:	f7f8 fd37 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 80877b8:	2110      	movs	r1, #16
 80877ba:	4628      	mov	r0, r5
 80877bc:	f001 f98a 	bl	8088ad4 <_ZdlPvj>
 80877c0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80877c2:	b135      	cbz	r5, 80877d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80877c4:	4628      	mov	r0, r5
 80877c6:	f7f8 fd2e 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 80877ca:	2110      	movs	r1, #16
 80877cc:	4628      	mov	r0, r5
 80877ce:	f001 f981 	bl	8088ad4 <_ZdlPvj>
 80877d2:	4620      	mov	r0, r4
 80877d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80877d8:	2114      	movs	r1, #20
 80877da:	f001 b97b 	b.w	8088ad4 <_ZdlPvj>
 80877de:	bd38      	pop	{r3, r4, r5, pc}

080877e0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80877e0:	b510      	push	{r4, lr}
 80877e2:	b088      	sub	sp, #32
 80877e4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80877e6:	4668      	mov	r0, sp
 80877e8:	f7ff f971 	bl	8086ace <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80877ec:	4669      	mov	r1, sp
 80877ee:	a804      	add	r0, sp, #16
 80877f0:	f7ff f9ac 	bl	8086b4c <_ZN6StringC1ERKS_>
 80877f4:	a804      	add	r0, sp, #16
 80877f6:	47a0      	blx	r4
 80877f8:	4604      	mov	r4, r0
 80877fa:	a804      	add	r0, sp, #16
 80877fc:	f7ff f920 	bl	8086a40 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8087800:	4668      	mov	r0, sp
 8087802:	f7ff f91d 	bl	8086a40 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8087806:	4620      	mov	r0, r4
 8087808:	b008      	add	sp, #32
 808780a:	bd10      	pop	{r4, pc}

0808780c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808780c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808780e:	4607      	mov	r7, r0
 8087810:	460e      	mov	r6, r1
 8087812:	4615      	mov	r5, r2
 8087814:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8087816:	2410      	movs	r4, #16
 8087818:	4622      	mov	r2, r4
 808781a:	2100      	movs	r1, #0
 808781c:	4668      	mov	r0, sp
 808781e:	f002 fe97 	bl	808a550 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8087822:	2200      	movs	r2, #0
 8087824:	4669      	mov	r1, sp
 8087826:	4610      	mov	r0, r2
         size = sizeof(*this);
 8087828:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 808782c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808782e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8087830:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8087832:	f7fe fb5d 	bl	8085ef0 <spark_function>
}
 8087836:	b005      	add	sp, #20
 8087838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808783a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808783a:	b513      	push	{r0, r1, r4, lr}
 808783c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808783e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8087842:	2300      	movs	r3, #0
 8087844:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8087846:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087848:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808784a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808784c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808784e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8087850:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8087852:	f7f9 f88f 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087856:	4620      	mov	r0, r4
 8087858:	b002      	add	sp, #8
 808785a:	bd10      	pop	{r4, pc}

0808785c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808785c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808785e:	460c      	mov	r4, r1
 8087860:	4606      	mov	r6, r0
 8087862:	460f      	mov	r7, r1
 8087864:	f854 3b04 	ldr.w	r3, [r4], #4
 8087868:	ad02      	add	r5, sp, #8
 808786a:	f845 3d08 	str.w	r3, [r5, #-8]!
 808786e:	4621      	mov	r1, r4
 8087870:	a801      	add	r0, sp, #4
 8087872:	f7ff fa63 	bl	8086d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8087876:	4629      	mov	r1, r5
 8087878:	4630      	mov	r0, r6
 808787a:	f7ff ffde 	bl	808783a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808787e:	a801      	add	r0, sp, #4
 8087880:	f7f9 f878 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087884:	4620      	mov	r0, r4
 8087886:	f7f9 f875 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808788a:	4638      	mov	r0, r7
 808788c:	2108      	movs	r1, #8
 808788e:	f001 f921 	bl	8088ad4 <_ZdlPvj>
        return p;
    }
 8087892:	4630      	mov	r0, r6
 8087894:	b003      	add	sp, #12
 8087896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8087898:	b538      	push	{r3, r4, r5, lr}
 808789a:	2300      	movs	r3, #0
 808789c:	4604      	mov	r4, r0
 808789e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80878a0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80878a2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80878a4:	f7f8 fbfb 	bl	808009e <_Znwj>
 80878a8:	b128      	cbz	r0, 80878b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80878aa:	2301      	movs	r3, #1
 80878ac:	6043      	str	r3, [r0, #4]
 80878ae:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80878b0:	4b02      	ldr	r3, [pc, #8]	; (80878bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80878b2:	60c5      	str	r5, [r0, #12]
 80878b4:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80878b6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80878b8:	4620      	mov	r0, r4
 80878ba:	bd38      	pop	{r3, r4, r5, pc}
 80878bc:	0808e258 	.word	0x0808e258

080878c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80878c0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80878c2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80878c4:	b90a      	cbnz	r2, 80878ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80878c6:	f001 f9d1 	bl	8088c6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878ca:	68c3      	ldr	r3, [r0, #12]
    }
 80878cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878d0:	4718      	bx	r3

080878d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80878d2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80878d4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80878d6:	f100 0110 	add.w	r1, r0, #16
 80878da:	f7ff fff1 	bl	80878c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80878de:	bd08      	pop	{r3, pc}

080878e0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80878e0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80878e2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80878e4:	b90a      	cbnz	r2, 80878ea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80878e6:	f001 f9c1 	bl	8088c6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878ea:	68c3      	ldr	r3, [r0, #12]
    }
 80878ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878f0:	4718      	bx	r3

080878f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80878f2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80878f4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80878f6:	f100 0110 	add.w	r1, r0, #16
 80878fa:	f7ff fff1 	bl	80878e0 <_ZNKSt8functionIFvRKbEEclES1_>
 80878fe:	bd08      	pop	{r3, pc}

08087900 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087900:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087902:	2300      	movs	r3, #0
 8087904:	6083      	str	r3, [r0, #8]
 8087906:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087908:	4604      	mov	r4, r0
 808790a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808790c:	b12b      	cbz	r3, 808791a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808790e:	2202      	movs	r2, #2
 8087910:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087912:	68eb      	ldr	r3, [r5, #12]
 8087914:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087916:	68ab      	ldr	r3, [r5, #8]
 8087918:	60a3      	str	r3, [r4, #8]
	}
    }
 808791a:	4620      	mov	r0, r4
 808791c:	bd38      	pop	{r3, r4, r5, pc}
	...

08087920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8087920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087922:	b089      	sub	sp, #36	; 0x24
 8087924:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8087926:	4668      	mov	r0, sp
 8087928:	f7ff ff21 	bl	808776e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808792c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8087930:	2300      	movs	r3, #0
 8087932:	f88d 3008 	strb.w	r3, [sp, #8]
 8087936:	e8d4 3f4f 	ldrexb	r3, [r4]
 808793a:	2b00      	cmp	r3, #0
 808793c:	d103      	bne.n	8087946 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808793e:	e8c4 2f41 	strexb	r1, r2, [r4]
 8087942:	2900      	cmp	r1, #0
 8087944:	d1f7      	bne.n	8087936 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8087946:	d002      	beq.n	808794e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8087948:	f88d 3008 	strb.w	r3, [sp, #8]
 808794c:	e063      	b.n	8087a16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808794e:	f114 050c 	adds.w	r5, r4, #12
 8087952:	d003      	beq.n	808795c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8087954:	4669      	mov	r1, sp
 8087956:	4628      	mov	r0, r5
 8087958:	f7ff ff09 	bl	808776e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808795c:	f3bf 8f5f 	dmb	sy
 8087960:	2301      	movs	r3, #1
 8087962:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8087964:	f3bf 8f5f 	dmb	sy
 8087968:	f104 0308 	add.w	r3, r4, #8
 808796c:	2000      	movs	r0, #0
 808796e:	e853 6f00 	ldrex	r6, [r3]
 8087972:	e843 0200 	strex	r2, r0, [r3]
 8087976:	2a00      	cmp	r2, #0
 8087978:	d1f9      	bne.n	808796e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808797a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808797e:	2e00      	cmp	r6, #0
 8087980:	d049      	beq.n	8087a16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8087982:	f7fe fa39 	bl	8085df8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8087986:	b120      	cbz	r0, 8087992 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8087988:	4629      	mov	r1, r5
 808798a:	4630      	mov	r0, r6
 808798c:	f7ff ff98 	bl	80878c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8087990:	e03a      	b.n	8087a08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8087992:	4631      	mov	r1, r6
 8087994:	a802      	add	r0, sp, #8
 8087996:	f7ff ffb3 	bl	8087900 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808799a:	68e0      	ldr	r0, [r4, #12]
 808799c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80879a0:	b108      	cbz	r0, 80879a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80879a2:	f002 fe25 	bl	808a5f0 <strdup>
 80879a6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80879a8:	2010      	movs	r0, #16
 80879aa:	f8ad 501c 	strh.w	r5, [sp, #28]
 80879ae:	f7f8 fb76 	bl	808009e <_Znwj>
 80879b2:	4605      	mov	r5, r0
 80879b4:	b1e8      	cbz	r0, 80879f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80879b6:	2700      	movs	r7, #0
 80879b8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80879ba:	2018      	movs	r0, #24
 80879bc:	f7f8 fb6f 	bl	808009e <_Znwj>
 80879c0:	4604      	mov	r4, r0
 80879c2:	b188      	cbz	r0, 80879e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80879c4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80879c6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80879c8:	a802      	add	r0, sp, #8
 80879ca:	f7ff fcc5 	bl	8087358 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80879ce:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80879d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80879d2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80879d4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80879d6:	9204      	str	r2, [sp, #16]
 80879d8:	68e2      	ldr	r2, [r4, #12]
 80879da:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80879dc:	60e3      	str	r3, [r4, #12]
 80879de:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80879e2:	9205      	str	r2, [sp, #20]
 80879e4:	f7ff fec3 	bl	808776e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80879e8:	4b0d      	ldr	r3, [pc, #52]	; (8087a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80879ea:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80879ec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80879ee:	4b0d      	ldr	r3, [pc, #52]	; (8087a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80879f0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80879f2:	a806      	add	r0, sp, #24
 80879f4:	f7ff feca 	bl	808778c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80879f8:	a802      	add	r0, sp, #8
 80879fa:	f7f8 fc14 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80879fe:	2200      	movs	r2, #0
 8087a00:	4629      	mov	r1, r5
 8087a02:	4809      	ldr	r0, [pc, #36]	; (8087a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8087a04:	f7fe fa00 	bl	8085e08 <application_thread_invoke>
 8087a08:	4630      	mov	r0, r6
 8087a0a:	f7f8 fc0c 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8087a0e:	2110      	movs	r1, #16
 8087a10:	4630      	mov	r0, r6
 8087a12:	f001 f85f 	bl	8088ad4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8087a16:	4668      	mov	r0, sp
 8087a18:	f7ff feb8 	bl	808778c <_ZN8particle5ErrorD1Ev>
    }
 8087a1c:	b009      	add	sp, #36	; 0x24
 8087a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087a20:	080878d3 	.word	0x080878d3
 8087a24:	08087b49 	.word	0x08087b49
 8087a28:	080882f5 	.word	0x080882f5

08087a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8087a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087a30:	b08b      	sub	sp, #44	; 0x2c
 8087a32:	4606      	mov	r6, r0
 8087a34:	460f      	mov	r7, r1
 8087a36:	4690      	mov	r8, r2
 8087a38:	4699      	mov	r9, r3
 8087a3a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8087a3e:	f7fe fa6f 	bl	8085f20 <spark_cloud_flag_connected>
 8087a42:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8087a44:	4683      	mov	fp, r0
 8087a46:	bb30      	cbnz	r0, 8087a96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8087a48:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8087a4c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8087a4e:	a905      	add	r1, sp, #20
 8087a50:	4628      	mov	r0, r5
 8087a52:	f8ad 3018 	strh.w	r3, [sp, #24]
 8087a56:	f7ff fe8a 	bl	808776e <_ZN8particle5ErrorC1EOS0_>
 8087a5a:	2014      	movs	r0, #20
 8087a5c:	f7f8 fb1f 	bl	808009e <_Znwj>
 8087a60:	4604      	mov	r4, r0
 8087a62:	b158      	cbz	r0, 8087a7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8087a64:	2302      	movs	r3, #2
 8087a66:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8087a68:	2301      	movs	r3, #1
 8087a6a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8087a6c:	f8c0 b004 	str.w	fp, [r0, #4]
 8087a70:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8087a74:	4629      	mov	r1, r5
 8087a76:	300c      	adds	r0, #12
 8087a78:	f7ff fe79 	bl	808776e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8087a7c:	4630      	mov	r0, r6
 8087a7e:	4621      	mov	r1, r4
 8087a80:	f840 4b04 	str.w	r4, [r0], #4
 8087a84:	f7ff ff08 	bl	8087898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8087a88:	4628      	mov	r0, r5
 8087a8a:	f7ff fe7f 	bl	808778c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8087a8e:	a805      	add	r0, sp, #20
 8087a90:	f7ff fe7c 	bl	808778c <_ZN8particle5ErrorD1Ev>
 8087a94:	e052      	b.n	8087b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8087a96:	2400      	movs	r4, #0
 8087a98:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8087a9a:	2014      	movs	r0, #20
 8087a9c:	606c      	str	r4, [r5, #4]
 8087a9e:	60ac      	str	r4, [r5, #8]
 8087aa0:	9307      	str	r3, [sp, #28]
 8087aa2:	f7f8 fafc 	bl	808009e <_Znwj>
 8087aa6:	4601      	mov	r1, r0
 8087aa8:	b118      	cbz	r0, 8087ab2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8087aaa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8087aac:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8087aae:	6044      	str	r4, [r0, #4]
 8087ab0:	6084      	str	r4, [r0, #8]
 8087ab2:	a804      	add	r0, sp, #16
 8087ab4:	9103      	str	r1, [sp, #12]
 8087ab6:	f7ff feef 	bl	8087898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8087aba:	4b22      	ldr	r3, [pc, #136]	; (8087b44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8087abc:	2008      	movs	r0, #8
 8087abe:	9308      	str	r3, [sp, #32]
 8087ac0:	f7f8 faed 	bl	808009e <_Znwj>
 8087ac4:	4604      	mov	r4, r0
 8087ac6:	b128      	cbz	r0, 8087ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8087ac8:	9b03      	ldr	r3, [sp, #12]
 8087aca:	a904      	add	r1, sp, #16
 8087acc:	f840 3b04 	str.w	r3, [r0], #4
 8087ad0:	f7ff f934 	bl	8086d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8087ad4:	9500      	str	r5, [sp, #0]
 8087ad6:	fa5f f38a 	uxtb.w	r3, sl
 8087ada:	464a      	mov	r2, r9
 8087adc:	4641      	mov	r1, r8
 8087ade:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8087ae0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8087ae2:	f7fe fa2d 	bl	8085f40 <spark_send_event>
 8087ae6:	b920      	cbnz	r0, 8087af2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8087ae8:	9b03      	ldr	r3, [sp, #12]
 8087aea:	785b      	ldrb	r3, [r3, #1]
 8087aec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8087af0:	b183      	cbz	r3, 8087b14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8087af2:	9b03      	ldr	r3, [sp, #12]
 8087af4:	a904      	add	r1, sp, #16
 8087af6:	a806      	add	r0, sp, #24
 8087af8:	9305      	str	r3, [sp, #20]
 8087afa:	f7ff f91f 	bl	8086d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8087afe:	a905      	add	r1, sp, #20
 8087b00:	4630      	mov	r0, r6
 8087b02:	f7ff fe9a 	bl	808783a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8087b06:	a806      	add	r0, sp, #24
 8087b08:	f7f8 ff34 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087b0c:	a804      	add	r0, sp, #16
 8087b0e:	f7f8 ff31 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087b12:	e013      	b.n	8087b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8087b14:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8087b18:	a905      	add	r1, sp, #20
 8087b1a:	a803      	add	r0, sp, #12
 8087b1c:	9205      	str	r2, [sp, #20]
 8087b1e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8087b22:	f7ff fefd 	bl	8087920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8087b26:	a805      	add	r0, sp, #20
 8087b28:	f7ff fe30 	bl	808778c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8087b2c:	a805      	add	r0, sp, #20
 8087b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8087b30:	f7ff fe94 	bl	808785c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8087b34:	a806      	add	r0, sp, #24
 8087b36:	f7f8 ff1d 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087b3a:	e7da      	b.n	8087af2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8087b3c:	4630      	mov	r0, r6
 8087b3e:	b00b      	add	sp, #44	; 0x2c
 8087b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087b44:	08087cb9 	.word	0x08087cb9

08087b48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8087b48:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8087b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087b4c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8087b4e:	d006      	beq.n	8087b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8087b50:	2a03      	cmp	r2, #3
 8087b52:	d017      	beq.n	8087b84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8087b54:	2a01      	cmp	r2, #1
 8087b56:	d122      	bne.n	8087b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8087b58:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8087b5a:	6003      	str	r3, [r0, #0]
	      break;
 8087b5c:	e01f      	b.n	8087b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087b5e:	2018      	movs	r0, #24
 8087b60:	680e      	ldr	r6, [r1, #0]
 8087b62:	f7f8 fa9c 	bl	808009e <_Znwj>
 8087b66:	4605      	mov	r5, r0
 8087b68:	b150      	cbz	r0, 8087b80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8087b6a:	4631      	mov	r1, r6
 8087b6c:	f7ff fec8 	bl	8087900 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8087b70:	6930      	ldr	r0, [r6, #16]
 8087b72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8087b76:	b108      	cbz	r0, 8087b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8087b78:	f002 fd3a 	bl	808a5f0 <strdup>
 8087b7c:	6128      	str	r0, [r5, #16]
 8087b7e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087b80:	6025      	str	r5, [r4, #0]
 8087b82:	e00c      	b.n	8087b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087b84:	6804      	ldr	r4, [r0, #0]
 8087b86:	b154      	cbz	r4, 8087b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8087b88:	f104 0010 	add.w	r0, r4, #16
 8087b8c:	f7ff fdfe 	bl	808778c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087b90:	4620      	mov	r0, r4
 8087b92:	f7f8 fb48 	bl	8080226 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087b96:	2118      	movs	r1, #24
 8087b98:	4620      	mov	r0, r4
 8087b9a:	f000 ff9b 	bl	8088ad4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8087b9e:	2000      	movs	r0, #0
 8087ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087ba2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087ba2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087ba4:	2300      	movs	r3, #0
 8087ba6:	6083      	str	r3, [r0, #8]
 8087ba8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087baa:	4604      	mov	r4, r0
 8087bac:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8087bae:	b12b      	cbz	r3, 8087bbc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087bb0:	2202      	movs	r2, #2
 8087bb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087bb4:	68eb      	ldr	r3, [r5, #12]
 8087bb6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087bb8:	68ab      	ldr	r3, [r5, #8]
 8087bba:	60a3      	str	r3, [r4, #8]
	}
    }
 8087bbc:	4620      	mov	r0, r4
 8087bbe:	bd38      	pop	{r3, r4, r5, pc}

08087bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8087bc0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8087bc2:	b570      	push	{r4, r5, r6, lr}
 8087bc4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8087bc6:	d006      	beq.n	8087bd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8087bc8:	2a03      	cmp	r2, #3
 8087bca:	d011      	beq.n	8087bf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8087bcc:	2a01      	cmp	r2, #1
 8087bce:	d118      	bne.n	8087c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8087bd0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8087bd2:	6003      	str	r3, [r0, #0]
	      break;
 8087bd4:	e015      	b.n	8087c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087bd6:	2014      	movs	r0, #20
 8087bd8:	680e      	ldr	r6, [r1, #0]
 8087bda:	f7f8 fa60 	bl	808009e <_Znwj>
 8087bde:	4605      	mov	r5, r0
 8087be0:	b120      	cbz	r0, 8087bec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8087be2:	4631      	mov	r1, r6
 8087be4:	f7ff ffdd 	bl	8087ba2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8087be8:	7c33      	ldrb	r3, [r6, #16]
 8087bea:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087bec:	6025      	str	r5, [r4, #0]
 8087bee:	e008      	b.n	8087c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087bf0:	6804      	ldr	r4, [r0, #0]
 8087bf2:	b134      	cbz	r4, 8087c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087bf4:	4620      	mov	r0, r4
 8087bf6:	f7f8 fb16 	bl	8080226 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087bfa:	2114      	movs	r1, #20
 8087bfc:	4620      	mov	r0, r4
 8087bfe:	f000 ff69 	bl	8088ad4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8087c02:	2000      	movs	r0, #0
 8087c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08087c08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8087c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087c0a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8087c0c:	f3bf 8f5f 	dmb	sy
 8087c10:	b087      	sub	sp, #28
 8087c12:	2300      	movs	r3, #0
 8087c14:	e850 6f00 	ldrex	r6, [r0]
 8087c18:	e840 3200 	strex	r2, r3, [r0]
 8087c1c:	2a00      	cmp	r2, #0
 8087c1e:	d1f9      	bne.n	8087c14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8087c20:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8087c24:	2e00      	cmp	r6, #0
 8087c26:	d03f      	beq.n	8087ca8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8087c28:	4618      	mov	r0, r3
 8087c2a:	f7fe f8e5 	bl	8085df8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8087c2e:	4607      	mov	r7, r0
 8087c30:	b120      	cbz	r0, 8087c3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8087c32:	4621      	mov	r1, r4
 8087c34:	4630      	mov	r0, r6
 8087c36:	f7ff fe53 	bl	80878e0 <_ZNKSt8functionIFvRKbEEclES1_>
 8087c3a:	e02e      	b.n	8087c9a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8087c3c:	4631      	mov	r1, r6
 8087c3e:	a801      	add	r0, sp, #4
 8087c40:	f7ff ffaf 	bl	8087ba2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8087c44:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8087c46:	2010      	movs	r0, #16
 8087c48:	f88d 3014 	strb.w	r3, [sp, #20]
 8087c4c:	f7f8 fa27 	bl	808009e <_Znwj>
 8087c50:	4605      	mov	r5, r0
 8087c52:	b1d0      	cbz	r0, 8087c8a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087c54:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087c56:	2014      	movs	r0, #20
 8087c58:	f7f8 fa21 	bl	808009e <_Znwj>
 8087c5c:	4604      	mov	r4, r0
 8087c5e:	b178      	cbz	r0, 8087c80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087c60:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8087c62:	4601      	mov	r1, r0
 8087c64:	a801      	add	r0, sp, #4
 8087c66:	f7ff fb77 	bl	8087358 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087c6a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8087c6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8087c6e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087c70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8087c72:	9203      	str	r2, [sp, #12]
 8087c74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8087c76:	60e3      	str	r3, [r4, #12]
 8087c78:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8087c7c:	9204      	str	r2, [sp, #16]
 8087c7e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087c80:	4b0a      	ldr	r3, [pc, #40]	; (8087cac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087c82:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087c84:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8087c86:	4b0a      	ldr	r3, [pc, #40]	; (8087cb0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8087c88:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087c8a:	a801      	add	r0, sp, #4
 8087c8c:	f7f8 facb 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087c90:	2200      	movs	r2, #0
 8087c92:	4629      	mov	r1, r5
 8087c94:	4807      	ldr	r0, [pc, #28]	; (8087cb4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8087c96:	f7fe f8b7 	bl	8085e08 <application_thread_invoke>
 8087c9a:	4630      	mov	r0, r6
 8087c9c:	f7f8 fac3 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8087ca0:	2110      	movs	r1, #16
 8087ca2:	4630      	mov	r0, r6
 8087ca4:	f000 ff16 	bl	8088ad4 <_ZdlPvj>
        }
    }
 8087ca8:	b007      	add	sp, #28
 8087caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087cac:	080878f3 	.word	0x080878f3
 8087cb0:	08087bc1 	.word	0x08087bc1
 8087cb4:	080882f5 	.word	0x080882f5

08087cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8087cb8:	b530      	push	{r4, r5, lr}
 8087cba:	4604      	mov	r4, r0
 8087cbc:	b085      	sub	sp, #20
 8087cbe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8087cc0:	4668      	mov	r0, sp
 8087cc2:	4611      	mov	r1, r2
 8087cc4:	f7ff fdca 	bl	808785c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8087cc8:	b17c      	cbz	r4, 8087cea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8087cca:	b224      	sxth	r4, r4
 8087ccc:	4628      	mov	r0, r5
 8087cce:	b10d      	cbz	r5, 8087cd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8087cd0:	f002 fc8e 	bl	808a5f0 <strdup>
 8087cd4:	9002      	str	r0, [sp, #8]
 8087cd6:	a902      	add	r1, sp, #8
 8087cd8:	4668      	mov	r0, sp
 8087cda:	f8ad 400c 	strh.w	r4, [sp, #12]
 8087cde:	f7ff fe1f 	bl	8087920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8087ce2:	a802      	add	r0, sp, #8
 8087ce4:	f7ff fd52 	bl	808778c <_ZN8particle5ErrorD1Ev>
 8087ce8:	e01d      	b.n	8087d26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8087cea:	f04f 0201 	mov.w	r2, #1
 8087cee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8087cf0:	f88d 4008 	strb.w	r4, [sp, #8]
 8087cf4:	e8d0 3f4f 	ldrexb	r3, [r0]
 8087cf8:	42a3      	cmp	r3, r4
 8087cfa:	d103      	bne.n	8087d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8087cfc:	e8c0 2f41 	strexb	r1, r2, [r0]
 8087d00:	2900      	cmp	r1, #0
 8087d02:	d1f7      	bne.n	8087cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8087d04:	d002      	beq.n	8087d0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8087d06:	f88d 3008 	strb.w	r3, [sp, #8]
 8087d0a:	e00c      	b.n	8087d26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8087d0c:	f110 010c 	adds.w	r1, r0, #12
 8087d10:	f04f 0301 	mov.w	r3, #1
 8087d14:	bf18      	it	ne
 8087d16:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8087d18:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8087d1c:	3004      	adds	r0, #4
 8087d1e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8087d22:	f7ff ff71 	bl	8087c08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8087d26:	a801      	add	r0, sp, #4
 8087d28:	f7f8 fe24 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8087d2c:	b005      	add	sp, #20
 8087d2e:	bd30      	pop	{r4, r5, pc}

08087d30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8087d30:	4770      	bx	lr

08087d32 <_ZN9IPAddressD0Ev>:
 8087d32:	b510      	push	{r4, lr}
 8087d34:	4604      	mov	r4, r0
 8087d36:	2108      	movs	r1, #8
 8087d38:	f000 fecc 	bl	8088ad4 <_ZdlPvj>
 8087d3c:	4620      	mov	r0, r4
 8087d3e:	bd10      	pop	{r4, pc}

08087d40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8087d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087d42:	460f      	mov	r7, r1
 8087d44:	f100 0608 	add.w	r6, r0, #8
 8087d48:	1d05      	adds	r5, r0, #4
 8087d4a:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8087d4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8087d50:	220a      	movs	r2, #10
 8087d52:	4638      	mov	r0, r7
 8087d54:	f7fe ff99 	bl	8086c8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8087d58:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8087d5a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8087d5c:	d007      	beq.n	8087d6e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8087d5e:	2c00      	cmp	r4, #0
 8087d60:	d0f4      	beq.n	8087d4c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8087d62:	212e      	movs	r1, #46	; 0x2e
 8087d64:	4638      	mov	r0, r7
 8087d66:	f7fe ff73 	bl	8086c50 <_ZN5Print5printEc>
 8087d6a:	4404      	add	r4, r0
 8087d6c:	e7ee      	b.n	8087d4c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8087d6e:	4620      	mov	r0, r4
 8087d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08087d74 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8087d74:	4a02      	ldr	r2, [pc, #8]	; (8087d80 <_ZN9IPAddressC1Ev+0xc>)
 8087d76:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8087d78:	2200      	movs	r2, #0
 8087d7a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8087d7c:	4770      	bx	lr
 8087d7e:	bf00      	nop
 8087d80:	0808e274 	.word	0x0808e274

08087d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8087d84:	4a02      	ldr	r2, [pc, #8]	; (8087d90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8087d86:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8087d88:	680a      	ldr	r2, [r1, #0]
 8087d8a:	6042      	str	r2, [r0, #4]
}
 8087d8c:	4770      	bx	lr
 8087d8e:	bf00      	nop
 8087d90:	0808e274 	.word	0x0808e274

08087d94 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8087d94:	4a01      	ldr	r2, [pc, #4]	; (8087d9c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8087d96:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8087d98:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8087d9a:	4770      	bx	lr
 8087d9c:	0808e274 	.word	0x0808e274

08087da0 <_ZNK9IPAddresscvbEv>:
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
    } else {
        return false;
    }
#else
    return address.ipv4!=0;
 8087da0:	6840      	ldr	r0, [r0, #4]
#endif
}
 8087da2:	3000      	adds	r0, #0
 8087da4:	bf18      	it	ne
 8087da6:	2001      	movne	r0, #1
 8087da8:	4770      	bx	lr

08087daa <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8087daa:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8087dac:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8087db0:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8087db4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8087db8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8087dbc:	6041      	str	r1, [r0, #4]
 8087dbe:	bd10      	pop	{r4, pc}

08087dc0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8087dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087dc2:	4d04      	ldr	r5, [pc, #16]	; (8087dd4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8087dc4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8087dc6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8087dca:	9500      	str	r5, [sp, #0]
 8087dcc:	f7ff ffed 	bl	8087daa <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8087dd0:	b003      	add	sp, #12
 8087dd2:	bd30      	pop	{r4, r5, pc}
 8087dd4:	0808e274 	.word	0x0808e274

08087dd8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 8087dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 8087dda:	780d      	ldrb	r5, [r1, #0]
 8087ddc:	788b      	ldrb	r3, [r1, #2]
 8087dde:	784a      	ldrb	r2, [r1, #1]
 8087de0:	78c9      	ldrb	r1, [r1, #3]
 8087de2:	9100      	str	r1, [sp, #0]
 8087de4:	4629      	mov	r1, r5
 8087de6:	f7ff ffe0 	bl	8087daa <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 8087dea:	b003      	add	sp, #12
 8087dec:	bd30      	pop	{r4, r5, pc}

08087dee <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087dee:	7441      	strb	r1, [r0, #17]
 8087df0:	4770      	bx	lr

08087df2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8087df2:	4770      	bx	lr

08087df4 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8087df4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8087df6:	2100      	movs	r1, #0
 8087df8:	7c00      	ldrb	r0, [r0, #16]
 8087dfa:	f7fd ffa5 	bl	8085d48 <HAL_USB_USART_Receive_Data>
}
 8087dfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087e02:	bf28      	it	cs
 8087e04:	f04f 30ff 	movcs.w	r0, #4294967295
 8087e08:	bd08      	pop	{r3, pc}

08087e0a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8087e0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8087e0c:	2101      	movs	r1, #1
 8087e0e:	7c00      	ldrb	r0, [r0, #16]
 8087e10:	f7fd ff9a 	bl	8085d48 <HAL_USB_USART_Receive_Data>
}
 8087e14:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087e18:	bf28      	it	cs
 8087e1a:	f04f 30ff 	movcs.w	r0, #4294967295
 8087e1e:	bd08      	pop	{r3, pc}

08087e20 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8087e20:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8087e22:	7c00      	ldrb	r0, [r0, #16]
 8087e24:	f7fd ff88 	bl	8085d38 <HAL_USB_USART_Available_Data_For_Write>
}
 8087e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087e2c:	bd08      	pop	{r3, pc}

08087e2e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8087e2e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8087e30:	7c00      	ldrb	r0, [r0, #16]
 8087e32:	f7fd ff79 	bl	8085d28 <HAL_USB_USART_Available_Data>
}
 8087e36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087e3a:	bd08      	pop	{r3, pc}

08087e3c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8087e3c:	7c00      	ldrb	r0, [r0, #16]
 8087e3e:	f7fd bf93 	b.w	8085d68 <HAL_USB_USART_Flush_Data>

08087e42 <_ZN9USBSerialD0Ev>:
 8087e42:	b510      	push	{r4, lr}
 8087e44:	4604      	mov	r4, r0
 8087e46:	2114      	movs	r1, #20
 8087e48:	f000 fe44 	bl	8088ad4 <_ZdlPvj>
 8087e4c:	4620      	mov	r0, r4
 8087e4e:	bd10      	pop	{r4, pc}

08087e50 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8087e50:	b538      	push	{r3, r4, r5, lr}
 8087e52:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8087e54:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8087e56:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8087e58:	f7fd ff6e 	bl	8085d38 <HAL_USB_USART_Available_Data_For_Write>
 8087e5c:	2800      	cmp	r0, #0
 8087e5e:	dc01      	bgt.n	8087e64 <_ZN9USBSerial5writeEh+0x14>
 8087e60:	7c60      	ldrb	r0, [r4, #17]
 8087e62:	b128      	cbz	r0, 8087e70 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8087e64:	4629      	mov	r1, r5
 8087e66:	7c20      	ldrb	r0, [r4, #16]
 8087e68:	f7fd ff76 	bl	8085d58 <HAL_USB_USART_Send_Data>
 8087e6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8087e70:	bd38      	pop	{r3, r4, r5, pc}
	...

08087e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8087e74:	b510      	push	{r4, lr}
 8087e76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8087e78:	2300      	movs	r3, #0
 8087e7a:	6063      	str	r3, [r4, #4]
 8087e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087e80:	60a3      	str	r3, [r4, #8]
 8087e82:	4b05      	ldr	r3, [pc, #20]	; (8087e98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8087e84:	4608      	mov	r0, r1
 8087e86:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8087e88:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8087e8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8087e8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8087e8e:	4611      	mov	r1, r2
 8087e90:	f7fd ff3a 	bl	8085d08 <HAL_USB_USART_Init>
}
 8087e94:	4620      	mov	r0, r4
 8087e96:	bd10      	pop	{r4, pc}
 8087e98:	0808e288 	.word	0x0808e288

08087e9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8087e9c:	2200      	movs	r2, #0
 8087e9e:	7c00      	ldrb	r0, [r0, #16]
 8087ea0:	f7fd bf3a 	b.w	8085d18 <HAL_USB_USART_Begin>

08087ea4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8087ea4:	b510      	push	{r4, lr}
 8087ea6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087ea8:	2214      	movs	r2, #20
 8087eaa:	2100      	movs	r1, #0
 8087eac:	f002 fb50 	bl	808a550 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8087eb0:	4b05      	ldr	r3, [pc, #20]	; (8087ec8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8087eb2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8087eb4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8087eb6:	4b05      	ldr	r3, [pc, #20]	; (8087ecc <_Z19acquireSerialBufferv+0x28>)
 8087eb8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8087eba:	f240 1301 	movw	r3, #257	; 0x101
 8087ebe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8087ec0:	2381      	movs	r3, #129	; 0x81
 8087ec2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8087ec4:	bd10      	pop	{r4, pc}
 8087ec6:	bf00      	nop
 8087ec8:	20000a01 	.word	0x20000a01
 8087ecc:	20000980 	.word	0x20000980

08087ed0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8087ed0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8087ed2:	4d0e      	ldr	r5, [pc, #56]	; (8087f0c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8087ed4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8087ed6:	a801      	add	r0, sp, #4
 8087ed8:	f7ff ffe4 	bl	8087ea4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8087edc:	6829      	ldr	r1, [r5, #0]
 8087ede:	f011 0401 	ands.w	r4, r1, #1
 8087ee2:	d110      	bne.n	8087f06 <_Z16_fetch_usbserialv+0x36>
 8087ee4:	4628      	mov	r0, r5
 8087ee6:	f7f8 f8ed 	bl	80800c4 <__cxa_guard_acquire>
 8087eea:	b160      	cbz	r0, 8087f06 <_Z16_fetch_usbserialv+0x36>
 8087eec:	aa01      	add	r2, sp, #4
 8087eee:	4621      	mov	r1, r4
 8087ef0:	4807      	ldr	r0, [pc, #28]	; (8087f10 <_Z16_fetch_usbserialv+0x40>)
 8087ef2:	f7ff ffbf 	bl	8087e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8087ef6:	4628      	mov	r0, r5
 8087ef8:	f7f8 f8e9 	bl	80800ce <__cxa_guard_release>
 8087efc:	4a05      	ldr	r2, [pc, #20]	; (8087f14 <_Z16_fetch_usbserialv+0x44>)
 8087efe:	4906      	ldr	r1, [pc, #24]	; (8087f18 <_Z16_fetch_usbserialv+0x48>)
 8087f00:	4803      	ldr	r0, [pc, #12]	; (8087f10 <_Z16_fetch_usbserialv+0x40>)
 8087f02:	f000 fdd9 	bl	8088ab8 <__aeabi_atexit>
	return _usbserial;
}
 8087f06:	4802      	ldr	r0, [pc, #8]	; (8087f10 <_Z16_fetch_usbserialv+0x40>)
 8087f08:	b007      	add	sp, #28
 8087f0a:	bd30      	pop	{r4, r5, pc}
 8087f0c:	2000097c 	.word	0x2000097c
 8087f10:	20000b04 	.word	0x20000b04
 8087f14:	20000140 	.word	0x20000140
 8087f18:	08087df3 	.word	0x08087df3

08087f1c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8087f1c:	b510      	push	{r4, lr}
 8087f1e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087f20:	2214      	movs	r2, #20
 8087f22:	2100      	movs	r1, #0
 8087f24:	f002 fb14 	bl	808a550 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8087f28:	4b05      	ldr	r3, [pc, #20]	; (8087f40 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8087f2a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8087f2c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8087f2e:	4b05      	ldr	r3, [pc, #20]	; (8087f44 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8087f30:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8087f32:	f240 1301 	movw	r3, #257	; 0x101
 8087f36:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8087f38:	2381      	movs	r3, #129	; 0x81
 8087f3a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8087f3c:	bd10      	pop	{r4, pc}
 8087f3e:	bf00      	nop
 8087f40:	20000bb4 	.word	0x20000bb4
 8087f44:	20000b1c 	.word	0x20000b1c

08087f48 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8087f48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8087f4a:	4c0e      	ldr	r4, [pc, #56]	; (8087f84 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8087f4c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8087f4e:	a801      	add	r0, sp, #4
 8087f50:	f7ff ffe4 	bl	8087f1c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8087f54:	6823      	ldr	r3, [r4, #0]
 8087f56:	07db      	lsls	r3, r3, #31
 8087f58:	d410      	bmi.n	8087f7c <_Z17_fetch_usbserial1v+0x34>
 8087f5a:	4620      	mov	r0, r4
 8087f5c:	f7f8 f8b2 	bl	80800c4 <__cxa_guard_acquire>
 8087f60:	b160      	cbz	r0, 8087f7c <_Z17_fetch_usbserial1v+0x34>
 8087f62:	aa01      	add	r2, sp, #4
 8087f64:	2101      	movs	r1, #1
 8087f66:	4808      	ldr	r0, [pc, #32]	; (8087f88 <_Z17_fetch_usbserial1v+0x40>)
 8087f68:	f7ff ff84 	bl	8087e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8087f6c:	4620      	mov	r0, r4
 8087f6e:	f7f8 f8ae 	bl	80800ce <__cxa_guard_release>
 8087f72:	4a06      	ldr	r2, [pc, #24]	; (8087f8c <_Z17_fetch_usbserial1v+0x44>)
 8087f74:	4906      	ldr	r1, [pc, #24]	; (8087f90 <_Z17_fetch_usbserial1v+0x48>)
 8087f76:	4804      	ldr	r0, [pc, #16]	; (8087f88 <_Z17_fetch_usbserial1v+0x40>)
 8087f78:	f000 fd9e 	bl	8088ab8 <__aeabi_atexit>
  return _usbserial1;
}
 8087f7c:	4802      	ldr	r0, [pc, #8]	; (8087f88 <_Z17_fetch_usbserial1v+0x40>)
 8087f7e:	b006      	add	sp, #24
 8087f80:	bd10      	pop	{r4, pc}
 8087f82:	bf00      	nop
 8087f84:	20000b18 	.word	0x20000b18
 8087f88:	20000ba0 	.word	0x20000ba0
 8087f8c:	20000140 	.word	0x20000140
 8087f90:	08087df3 	.word	0x08087df3

08087f94 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8087f94:	4700      	bx	r0

08087f96 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087f96:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 8087f98:	b510      	push	{r4, lr}
 8087f9a:	b90a      	cbnz	r2, 8087fa0 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 8087f9c:	f000 fe66 	bl	8088c6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087fa0:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8087fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087fa6:	4718      	bx	r3

08087fa8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8087fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087faa:	461c      	mov	r4, r3
 8087fac:	b085      	sub	sp, #20
 8087fae:	460e      	mov	r6, r1
 8087fb0:	4617      	mov	r7, r2
 8087fb2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 8087fb4:	f7fd fcb8 	bl	8085928 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 8087fb8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8087fba:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8087fbc:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8087fc0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8087fc2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 8087fc6:	bfb4      	ite	lt
 8087fc8:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8087fca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087fce:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8087fd0:	bfa4      	itt	ge
 8087fd2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 8087fd6:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087fd8:	9300      	str	r3, [sp, #0]
 8087fda:	4906      	ldr	r1, [pc, #24]	; (8087ff4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8087fdc:	463b      	mov	r3, r7
 8087fde:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8087fe0:	bfa8      	it	ge
 8087fe2:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087fe6:	f7fd fc97 	bl	8085918 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8087fea:	fab0 f080 	clz	r0, r0
 8087fee:	0940      	lsrs	r0, r0, #5
 8087ff0:	b005      	add	sp, #20
 8087ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087ff4:	08087f95 	.word	0x08087f95

08087ff8 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8087ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087ffa:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8087ffc:	f7fd fc94 	bl	8085928 <HAL_Interrupts_Detach>
 8088000:	4607      	mov	r7, r0
 8088002:	b968      	cbnz	r0, 8088020 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 8088004:	4d08      	ldr	r5, [pc, #32]	; (8088028 <_Z15detachInterruptt+0x30>)
 8088006:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 808800a:	b15c      	cbz	r4, 8088024 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808800c:	4620      	mov	r0, r4
 808800e:	f7f8 f90a 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8088012:	2110      	movs	r1, #16
 8088014:	4620      	mov	r0, r4
 8088016:	f000 fd5d 	bl	8088ad4 <_ZdlPvj>
        handlers[pin] = nullptr;
 808801a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 808801e:	e001      	b.n	8088024 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 8088020:	2000      	movs	r0, #0
 8088022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 8088024:	2001      	movs	r0, #1
}
 8088026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088028:	20000cb8 	.word	0x20000cb8

0808802c <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808802c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808802e:	2300      	movs	r3, #0
 8088030:	6083      	str	r3, [r0, #8]
 8088032:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088034:	4604      	mov	r4, r0
 8088036:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8088038:	b12b      	cbz	r3, 8088046 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808803a:	2202      	movs	r2, #2
 808803c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808803e:	68eb      	ldr	r3, [r5, #12]
 8088040:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088042:	68ab      	ldr	r3, [r5, #8]
 8088044:	60a3      	str	r3, [r4, #8]
	}
    }
 8088046:	4620      	mov	r0, r4
 8088048:	bd38      	pop	{r3, r4, r5, pc}
	...

0808804c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 808804c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 808804e:	4b12      	ldr	r3, [pc, #72]	; (8088098 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8088050:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8088052:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8088054:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8088056:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8088058:	f7f8 f821 	bl	808009e <_Znwj>
 808805c:	4605      	mov	r5, r0
 808805e:	b110      	cbz	r0, 8088066 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 8088060:	4631      	mov	r1, r6
 8088062:	f7ff ffe3 	bl	808802c <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 8088066:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8088068:	4620      	mov	r0, r4
 808806a:	aa02      	add	r2, sp, #8
 808806c:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 808806e:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 8088070:	9302      	str	r3, [sp, #8]
 8088072:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8088074:	f7fd fc68 	bl	8085948 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 8088078:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 808807a:	1c05      	adds	r5, r0, #0
 808807c:	bf18      	it	ne
 808807e:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 8088080:	b134      	cbz	r4, 8088090 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088082:	4620      	mov	r0, r4
 8088084:	f7f8 f8cf 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 8088088:	2110      	movs	r1, #16
 808808a:	4620      	mov	r0, r4
 808808c:	f000 fd22 	bl	8088ad4 <_ZdlPvj>
    return ok;
}
 8088090:	4628      	mov	r0, r5
 8088092:	b004      	add	sp, #16
 8088094:	bd70      	pop	{r4, r5, r6, pc}
 8088096:	bf00      	nop
 8088098:	08087f97 	.word	0x08087f97

0808809c <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808809c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80880a0:	2600      	movs	r6, #0
 80880a2:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80880a4:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80880a6:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80880a8:	4688      	mov	r8, r1
 80880aa:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80880ac:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80880b0:	f002 ffce 	bl	808b050 <strlen>
 80880b4:	9600      	str	r6, [sp, #0]
 80880b6:	b281      	uxth	r1, r0
 80880b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80880bc:	4622      	mov	r2, r4
 80880be:	4638      	mov	r0, r7
 80880c0:	f7fd fe12 	bl	8085ce8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80880c4:	b120      	cbz	r0, 80880d0 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80880c6:	4631      	mov	r1, r6
 80880c8:	4628      	mov	r0, r5
 80880ca:	f7ff fe63 	bl	8087d94 <_ZN9IPAddressC1Em>
 80880ce:	e003      	b.n	80880d8 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80880d0:	4621      	mov	r1, r4
 80880d2:	4628      	mov	r0, r5
 80880d4:	f7ff fe56 	bl	8087d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80880d8:	4628      	mov	r0, r5
 80880da:	b004      	add	sp, #16
 80880dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080880e0 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80880e0:	2200      	movs	r2, #0
 80880e2:	4611      	mov	r1, r2
 80880e4:	6840      	ldr	r0, [r0, #4]
 80880e6:	f7fd beeb 	b.w	8085ec0 <network_listening>

080880ea <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80880ea:	2200      	movs	r2, #0
 80880ec:	4611      	mov	r1, r2
 80880ee:	6840      	ldr	r0, [r0, #4]
 80880f0:	f7fd bef6 	b.w	8085ee0 <network_get_listen_timeout>

080880f4 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80880f4:	2200      	movs	r2, #0
 80880f6:	6840      	ldr	r0, [r0, #4]
 80880f8:	f7fd beea 	b.w	8085ed0 <network_set_listen_timeout>

080880fc <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80880fc:	2200      	movs	r2, #0
 80880fe:	f081 0101 	eor.w	r1, r1, #1
 8088102:	6840      	ldr	r0, [r0, #4]
 8088104:	f7fd bed4 	b.w	8085eb0 <network_listen>

08088108 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8088108:	2300      	movs	r3, #0
 808810a:	461a      	mov	r2, r3
 808810c:	4619      	mov	r1, r3
 808810e:	6840      	ldr	r0, [r0, #4]
 8088110:	f7fd bec6 	b.w	8085ea0 <network_off>

08088114 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8088114:	2300      	movs	r3, #0
 8088116:	461a      	mov	r2, r3
 8088118:	4619      	mov	r1, r3
 808811a:	6840      	ldr	r0, [r0, #4]
 808811c:	f7fd beb8 	b.w	8085e90 <network_on>

08088120 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8088120:	2200      	movs	r2, #0
 8088122:	4611      	mov	r1, r2
 8088124:	6840      	ldr	r0, [r0, #4]
 8088126:	f7fd be9b 	b.w	8085e60 <network_connecting>

0808812a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808812a:	2200      	movs	r2, #0
 808812c:	2102      	movs	r1, #2
 808812e:	6840      	ldr	r0, [r0, #4]
 8088130:	f7fd be9e 	b.w	8085e70 <network_disconnect>

08088134 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8088134:	2300      	movs	r3, #0
 8088136:	461a      	mov	r2, r3
 8088138:	6840      	ldr	r0, [r0, #4]
 808813a:	f7fd be89 	b.w	8085e50 <network_connect>
	...

08088140 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8088140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088142:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8088144:	4b1a      	ldr	r3, [pc, #104]	; (80881b0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8088146:	2500      	movs	r5, #0
 8088148:	6003      	str	r3, [r0, #0]
 808814a:	2618      	movs	r6, #24
 808814c:	3328      	adds	r3, #40	; 0x28
 808814e:	b089      	sub	sp, #36	; 0x24
 8088150:	6043      	str	r3, [r0, #4]
 8088152:	6085      	str	r5, [r0, #8]
 8088154:	60c5      	str	r5, [r0, #12]
 8088156:	4632      	mov	r2, r6
 8088158:	4629      	mov	r1, r5
 808815a:	4604      	mov	r4, r0
 808815c:	3010      	adds	r0, #16
 808815e:	f002 f9f7 	bl	808a550 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8088162:	462a      	mov	r2, r5
 8088164:	4629      	mov	r1, r5
 8088166:	6878      	ldr	r0, [r7, #4]
 8088168:	f7fd fe8a 	bl	8085e80 <network_ready>
 808816c:	b908      	cbnz	r0, 8088172 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 808816e:	60a0      	str	r0, [r4, #8]
            return sig;
 8088170:	e01b      	b.n	80881aa <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8088172:	4629      	mov	r1, r5
 8088174:	4632      	mov	r2, r6
 8088176:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8088178:	9500      	str	r5, [sp, #0]
 808817a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 808817c:	f002 f9e8 	bl	808a550 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8088180:	a902      	add	r1, sp, #8
 8088182:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8088184:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8088188:	f7fd fdb6 	bl	8085cf8 <cellular_signal>
 808818c:	b110      	cbz	r0, 8088194 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 808818e:	2301      	movs	r3, #1
 8088190:	60a3      	str	r3, [r4, #8]
            return sig;
 8088192:	e00a      	b.n	80881aa <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8088194:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8088196:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8088198:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 808819a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 808819c:	b90b      	cbnz	r3, 80881a2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 808819e:	2302      	movs	r3, #2
 80881a0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80881a2:	a902      	add	r1, sp, #8
 80881a4:	4620      	mov	r0, r4
 80881a6:	f7ff f955 	bl	8087454 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80881aa:	4620      	mov	r0, r4
 80881ac:	b009      	add	sp, #36	; 0x24
 80881ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80881b0:	0808e224 	.word	0x0808e224

080881b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80881b4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80881b6:	4c08      	ldr	r4, [pc, #32]	; (80881d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80881b8:	2528      	movs	r5, #40	; 0x28
 80881ba:	462a      	mov	r2, r5
 80881bc:	2100      	movs	r1, #0
 80881be:	4620      	mov	r0, r4
 80881c0:	f002 f9c6 	bl	808a550 <memset>
        cid = -1;
 80881c4:	f04f 33ff 	mov.w	r3, #4294967295
 80881c8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80881ca:	4b04      	ldr	r3, [pc, #16]	; (80881dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 80881cc:	2204      	movs	r2, #4
 80881ce:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80881d0:	4a03      	ldr	r2, [pc, #12]	; (80881e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 80881d2:	8025      	strh	r5, [r4, #0]
 80881d4:	601a      	str	r2, [r3, #0]
 80881d6:	bd38      	pop	{r3, r4, r5, pc}
 80881d8:	20000d7c 	.word	0x20000d7c
 80881dc:	20000d74 	.word	0x20000d74
 80881e0:	0808e2b8 	.word	0x0808e2b8

080881e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80881e4:	4770      	bx	lr

080881e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80881e6:	7441      	strb	r1, [r0, #17]
 80881e8:	4770      	bx	lr

080881ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80881ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80881ec:	7c00      	ldrb	r0, [r0, #16]
 80881ee:	f7fd fcab 	bl	8085b48 <HAL_USART_Available_Data_For_Write>
}
 80881f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80881f6:	bd08      	pop	{r3, pc}

080881f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80881f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80881fa:	7c00      	ldrb	r0, [r0, #16]
 80881fc:	f7fd fc7c 	bl	8085af8 <HAL_USART_Available_Data>
}
 8088200:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088204:	bd08      	pop	{r3, pc}

08088206 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8088206:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8088208:	7c00      	ldrb	r0, [r0, #16]
 808820a:	f7fd fc85 	bl	8085b18 <HAL_USART_Peek_Data>
}
 808820e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8088212:	bf28      	it	cs
 8088214:	f04f 30ff 	movcs.w	r0, #4294967295
 8088218:	bd08      	pop	{r3, pc}

0808821a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808821a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808821c:	7c00      	ldrb	r0, [r0, #16]
 808821e:	f7fd fc73 	bl	8085b08 <HAL_USART_Read_Data>
}
 8088222:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8088226:	bf28      	it	cs
 8088228:	f04f 30ff 	movcs.w	r0, #4294967295
 808822c:	bd08      	pop	{r3, pc}

0808822e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808822e:	7c00      	ldrb	r0, [r0, #16]
 8088230:	f7fd bc7a 	b.w	8085b28 <HAL_USART_Flush_Data>

08088234 <_ZN11USARTSerialD0Ev>:
 8088234:	b510      	push	{r4, lr}
 8088236:	4604      	mov	r4, r0
 8088238:	2114      	movs	r1, #20
 808823a:	f000 fc4b 	bl	8088ad4 <_ZdlPvj>
 808823e:	4620      	mov	r0, r4
 8088240:	bd10      	pop	{r4, pc}

08088242 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8088242:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8088244:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8088246:	4604      	mov	r4, r0
 8088248:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808824a:	b925      	cbnz	r5, 8088256 <_ZN11USARTSerial5writeEh+0x14>
 808824c:	7c00      	ldrb	r0, [r0, #16]
 808824e:	f7fd fc7b 	bl	8085b48 <HAL_USART_Available_Data_For_Write>
 8088252:	2800      	cmp	r0, #0
 8088254:	dd05      	ble.n	8088262 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8088256:	4631      	mov	r1, r6
 8088258:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808825a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808825e:	f7fd bc43 	b.w	8085ae8 <HAL_USART_Write_Data>
  }
  return 0;
}
 8088262:	4628      	mov	r0, r5
 8088264:	bd70      	pop	{r4, r5, r6, pc}
	...

08088268 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8088268:	b510      	push	{r4, lr}
 808826a:	4604      	mov	r4, r0
 808826c:	4608      	mov	r0, r1
 808826e:	4611      	mov	r1, r2
 8088270:	2200      	movs	r2, #0
 8088272:	6062      	str	r2, [r4, #4]
 8088274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8088278:	60a2      	str	r2, [r4, #8]
 808827a:	4a05      	ldr	r2, [pc, #20]	; (8088290 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808827c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808827e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8088280:	2201      	movs	r2, #1
 8088282:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8088284:	461a      	mov	r2, r3
 8088286:	f7fd fc27 	bl	8085ad8 <HAL_USART_Init>
}
 808828a:	4620      	mov	r0, r4
 808828c:	bd10      	pop	{r4, pc}
 808828e:	bf00      	nop
 8088290:	0808e2ec 	.word	0x0808e2ec

08088294 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8088294:	2300      	movs	r3, #0
 8088296:	7c00      	ldrb	r0, [r0, #16]
 8088298:	f7fd bc5e 	b.w	8085b58 <HAL_USART_BeginConfig>

0808829c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808829c:	2200      	movs	r2, #0
 808829e:	f7ff bff9 	b.w	8088294 <_ZN11USARTSerial5beginEmm>

080882a2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80882a2:	7c00      	ldrb	r0, [r0, #16]
 80882a4:	f7fd bc48 	b.w	8085b38 <HAL_USART_Is_Enabled>

080882a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80882a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80882aa:	4d0c      	ldr	r5, [pc, #48]	; (80882dc <_Z22__fetch_global_Serial1v+0x34>)
 80882ac:	6829      	ldr	r1, [r5, #0]
 80882ae:	f011 0401 	ands.w	r4, r1, #1
 80882b2:	d111      	bne.n	80882d8 <_Z22__fetch_global_Serial1v+0x30>
 80882b4:	4628      	mov	r0, r5
 80882b6:	f7f7 ff05 	bl	80800c4 <__cxa_guard_acquire>
 80882ba:	b168      	cbz	r0, 80882d8 <_Z22__fetch_global_Serial1v+0x30>
 80882bc:	4a08      	ldr	r2, [pc, #32]	; (80882e0 <_Z22__fetch_global_Serial1v+0x38>)
 80882be:	4621      	mov	r1, r4
 80882c0:	4b08      	ldr	r3, [pc, #32]	; (80882e4 <_Z22__fetch_global_Serial1v+0x3c>)
 80882c2:	4809      	ldr	r0, [pc, #36]	; (80882e8 <_Z22__fetch_global_Serial1v+0x40>)
 80882c4:	f7ff ffd0 	bl	8088268 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80882c8:	4628      	mov	r0, r5
 80882ca:	f7f7 ff00 	bl	80800ce <__cxa_guard_release>
 80882ce:	4a07      	ldr	r2, [pc, #28]	; (80882ec <_Z22__fetch_global_Serial1v+0x44>)
 80882d0:	4907      	ldr	r1, [pc, #28]	; (80882f0 <_Z22__fetch_global_Serial1v+0x48>)
 80882d2:	4805      	ldr	r0, [pc, #20]	; (80882e8 <_Z22__fetch_global_Serial1v+0x40>)
 80882d4:	f000 fbf0 	bl	8088ab8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80882d8:	4803      	ldr	r0, [pc, #12]	; (80882e8 <_Z22__fetch_global_Serial1v+0x40>)
 80882da:	bd38      	pop	{r3, r4, r5, pc}
 80882dc:	20000e3c 	.word	0x20000e3c
 80882e0:	20000e40 	.word	0x20000e40
 80882e4:	20000db8 	.word	0x20000db8
 80882e8:	20000da4 	.word	0x20000da4
 80882ec:	20000140 	.word	0x20000140
 80882f0:	080881e5 	.word	0x080881e5

080882f4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80882f4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80882f6:	6883      	ldr	r3, [r0, #8]
 80882f8:	4604      	mov	r4, r0
 80882fa:	b90b      	cbnz	r3, 8088300 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80882fc:	f000 fcb6 	bl	8088c6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088300:	68c3      	ldr	r3, [r0, #12]
 8088302:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8088304:	68a3      	ldr	r3, [r4, #8]
 8088306:	b11b      	cbz	r3, 8088310 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8088308:	2203      	movs	r2, #3
 808830a:	4621      	mov	r1, r4
 808830c:	4620      	mov	r0, r4
 808830e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8088310:	4620      	mov	r0, r4
}
 8088312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8088316:	2110      	movs	r1, #16
 8088318:	f000 bbdc 	b.w	8088ad4 <_ZdlPvj>

0808831c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 808831c:	4770      	bx	lr

0808831e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808831e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088320:	4606      	mov	r6, r0
 8088322:	4615      	mov	r5, r2
 8088324:	460c      	mov	r4, r1
 8088326:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8088328:	42bc      	cmp	r4, r7
 808832a:	d006      	beq.n	808833a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808832c:	6833      	ldr	r3, [r6, #0]
 808832e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088332:	689b      	ldr	r3, [r3, #8]
 8088334:	4630      	mov	r0, r6
 8088336:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8088338:	e7f6      	b.n	8088328 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808833a:	4628      	mov	r0, r5
 808833c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808833e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808833e:	2200      	movs	r2, #0
 8088340:	7c00      	ldrb	r0, [r0, #16]
 8088342:	f7fd bc29 	b.w	8085b98 <HAL_I2C_Write_Data>

08088346 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8088346:	2100      	movs	r1, #0
 8088348:	7c00      	ldrb	r0, [r0, #16]
 808834a:	f7fd bc2d 	b.w	8085ba8 <HAL_I2C_Available_Data>

0808834e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808834e:	2100      	movs	r1, #0
 8088350:	7c00      	ldrb	r0, [r0, #16]
 8088352:	f7fd bc31 	b.w	8085bb8 <HAL_I2C_Read_Data>

08088356 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8088356:	2100      	movs	r1, #0
 8088358:	7c00      	ldrb	r0, [r0, #16]
 808835a:	f7fd bc35 	b.w	8085bc8 <HAL_I2C_Peek_Data>

0808835e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808835e:	2100      	movs	r1, #0
 8088360:	7c00      	ldrb	r0, [r0, #16]
 8088362:	f7fd bc39 	b.w	8085bd8 <HAL_I2C_Flush_Data>

08088366 <_ZN7TwoWireD0Ev>:
 8088366:	b510      	push	{r4, lr}
 8088368:	4604      	mov	r4, r0
 808836a:	2114      	movs	r1, #20
 808836c:	f000 fbb2 	bl	8088ad4 <_ZdlPvj>
 8088370:	4620      	mov	r0, r4
 8088372:	bd10      	pop	{r4, pc}

08088374 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8088374:	b510      	push	{r4, lr}
 8088376:	4604      	mov	r4, r0
 8088378:	2300      	movs	r3, #0
 808837a:	6063      	str	r3, [r4, #4]
 808837c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8088380:	60a3      	str	r3, [r4, #8]
 8088382:	4b04      	ldr	r3, [pc, #16]	; (8088394 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8088384:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8088386:	4608      	mov	r0, r1
 8088388:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 808838a:	4611      	mov	r1, r2
 808838c:	f7fd fc34 	bl	8085bf8 <HAL_I2C_Init>
}
 8088390:	4620      	mov	r0, r4
 8088392:	bd10      	pop	{r4, pc}
 8088394:	0808e31c 	.word	0x0808e31c

08088398 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8088398:	2300      	movs	r3, #0
 808839a:	461a      	mov	r2, r3
 808839c:	4619      	mov	r1, r3
 808839e:	7c00      	ldrb	r0, [r0, #16]
 80883a0:	f7fd bbe2 	b.w	8085b68 <HAL_I2C_Begin>

080883a4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80883a4:	b570      	push	{r4, r5, r6, lr}
 80883a6:	460c      	mov	r4, r1
 80883a8:	4606      	mov	r6, r0
 80883aa:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80883ac:	2514      	movs	r5, #20
 80883ae:	462a      	mov	r2, r5
 80883b0:	2100      	movs	r1, #0
 80883b2:	a801      	add	r0, sp, #4
 80883b4:	f002 f8cc 	bl	808a550 <memset>
 80883b8:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80883ba:	2200      	movs	r2, #0
 80883bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80883c0:	6863      	ldr	r3, [r4, #4]
 80883c2:	a901      	add	r1, sp, #4
 80883c4:	9303      	str	r3, [sp, #12]
 80883c6:	68e3      	ldr	r3, [r4, #12]
 80883c8:	7c30      	ldrb	r0, [r6, #16]
 80883ca:	9304      	str	r3, [sp, #16]
 80883cc:	7a23      	ldrb	r3, [r4, #8]
 80883ce:	f8ad 5004 	strh.w	r5, [sp, #4]
 80883d2:	9305      	str	r3, [sp, #20]
 80883d4:	f7fd fc28 	bl	8085c28 <HAL_I2C_Request_Data_Ex>
}
 80883d8:	b006      	add	sp, #24
 80883da:	bd70      	pop	{r4, r5, r6, pc}

080883dc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80883dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80883de:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80883e0:	f88d 1000 	strb.w	r1, [sp]
 80883e4:	f04f 0164 	mov.w	r1, #100	; 0x64
 80883e8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80883ea:	bf18      	it	ne
 80883ec:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80883ee:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80883f0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80883f2:	f88d 3008 	strb.w	r3, [sp, #8]
 80883f6:	f7ff ffd5 	bl	80883a4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80883fa:	b005      	add	sp, #20
 80883fc:	f85d fb04 	ldr.w	pc, [sp], #4

08088400 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 8088400:	2301      	movs	r3, #1
 8088402:	f7ff bfeb 	b.w	80883dc <_ZN7TwoWire11requestFromEhjh>

08088406 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8088406:	2200      	movs	r2, #0
 8088408:	7c00      	ldrb	r0, [r0, #16]
 808840a:	f7fd bbb5 	b.w	8085b78 <HAL_I2C_Begin_Transmission>

0808840e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808840e:	b2c9      	uxtb	r1, r1
 8088410:	f7ff bff9 	b.w	8088406 <_ZN7TwoWire17beginTransmissionEh>

08088414 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8088414:	2200      	movs	r2, #0
 8088416:	7c00      	ldrb	r0, [r0, #16]
 8088418:	f7fd bbb6 	b.w	8085b88 <HAL_I2C_End_Transmission>

0808841c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808841c:	2101      	movs	r1, #1
 808841e:	f7ff bff9 	b.w	8088414 <_ZN7TwoWire15endTransmissionEh>

08088422 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8088422:	2100      	movs	r1, #0
 8088424:	7c00      	ldrb	r0, [r0, #16]
 8088426:	f7fd bbdf 	b.w	8085be8 <HAL_I2C_Is_Enabled>

0808842a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808842a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808842c:	2100      	movs	r1, #0
 808842e:	7c00      	ldrb	r0, [r0, #16]
 8088430:	f7fd fbea 	bl	8085c08 <HAL_I2C_Acquire>
}
 8088434:	fab0 f080 	clz	r0, r0
 8088438:	0940      	lsrs	r0, r0, #5
 808843a:	bd08      	pop	{r3, pc}

0808843c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808843c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808843e:	2100      	movs	r1, #0
 8088440:	7c00      	ldrb	r0, [r0, #16]
 8088442:	f7fd fbe9 	bl	8085c18 <HAL_I2C_Release>
}
 8088446:	fab0 f080 	clz	r0, r0
 808844a:	0940      	lsrs	r0, r0, #5
 808844c:	bd08      	pop	{r3, pc}

0808844e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808844e:	2300      	movs	r3, #0
 8088450:	461a      	mov	r2, r3
 8088452:	6840      	ldr	r0, [r0, #4]
 8088454:	f7fd bcfc 	b.w	8085e50 <network_connect>

08088458 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8088458:	2200      	movs	r2, #0
 808845a:	2102      	movs	r1, #2
 808845c:	6840      	ldr	r0, [r0, #4]
 808845e:	f7fd bd07 	b.w	8085e70 <network_disconnect>

08088462 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8088462:	2200      	movs	r2, #0
 8088464:	4611      	mov	r1, r2
 8088466:	6840      	ldr	r0, [r0, #4]
 8088468:	f7fd bcfa 	b.w	8085e60 <network_connecting>

0808846c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808846c:	2200      	movs	r2, #0
 808846e:	4611      	mov	r1, r2
 8088470:	6840      	ldr	r0, [r0, #4]
 8088472:	f7fd bd05 	b.w	8085e80 <network_ready>

08088476 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8088476:	2300      	movs	r3, #0
 8088478:	461a      	mov	r2, r3
 808847a:	4619      	mov	r1, r3
 808847c:	6840      	ldr	r0, [r0, #4]
 808847e:	f7fd bd07 	b.w	8085e90 <network_on>

08088482 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8088482:	2300      	movs	r3, #0
 8088484:	461a      	mov	r2, r3
 8088486:	4619      	mov	r1, r3
 8088488:	6840      	ldr	r0, [r0, #4]
 808848a:	f7fd bd09 	b.w	8085ea0 <network_off>

0808848e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808848e:	2200      	movs	r2, #0
 8088490:	f081 0101 	eor.w	r1, r1, #1
 8088494:	6840      	ldr	r0, [r0, #4]
 8088496:	f7fd bd0b 	b.w	8085eb0 <network_listen>

0808849a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808849a:	2200      	movs	r2, #0
 808849c:	6840      	ldr	r0, [r0, #4]
 808849e:	f7fd bd17 	b.w	8085ed0 <network_set_listen_timeout>

080884a2 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80884a2:	2200      	movs	r2, #0
 80884a4:	4611      	mov	r1, r2
 80884a6:	6840      	ldr	r0, [r0, #4]
 80884a8:	f7fd bd1a 	b.w	8085ee0 <network_get_listen_timeout>

080884ac <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80884ac:	2200      	movs	r2, #0
 80884ae:	4611      	mov	r1, r2
 80884b0:	6840      	ldr	r0, [r0, #4]
 80884b2:	f7fd bd05 	b.w	8085ec0 <network_listening>
	...

080884b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80884b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80884ba:	4617      	mov	r7, r2
 80884bc:	b087      	sub	sp, #28
 80884be:	4605      	mov	r5, r0
    IPAddress addr;
 80884c0:	a804      	add	r0, sp, #16
 80884c2:	f7ff fc57 	bl	8087d74 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80884c6:	2600      	movs	r6, #0
 80884c8:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80884ca:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80884cc:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80884d0:	f002 fdbe 	bl	808b050 <strlen>
 80884d4:	4b0a      	ldr	r3, [pc, #40]	; (8088500 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80884d6:	9600      	str	r6, [sp, #0]
 80884d8:	b281      	uxth	r1, r0
 80884da:	685b      	ldr	r3, [r3, #4]
 80884dc:	4622      	mov	r2, r4
 80884de:	4638      	mov	r0, r7
 80884e0:	f7fd fc02 	bl	8085ce8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80884e4:	b120      	cbz	r0, 80884f0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80884e6:	4631      	mov	r1, r6
 80884e8:	4628      	mov	r0, r5
 80884ea:	f7ff fc53 	bl	8087d94 <_ZN9IPAddressC1Em>
 80884ee:	e003      	b.n	80884f8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80884f0:	4621      	mov	r1, r4
 80884f2:	4628      	mov	r0, r5
 80884f4:	f7ff fc46 	bl	8087d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80884f8:	4628      	mov	r0, r5
 80884fa:	b007      	add	sp, #28
 80884fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80884fe:	bf00      	nop
 8088500:	20000d74 	.word	0x20000d74

08088504 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 8088504:	4b03      	ldr	r3, [pc, #12]	; (8088514 <_ZN5spark12NetworkClass4fromEm+0x10>)
 8088506:	4a04      	ldr	r2, [pc, #16]	; (8088518 <_ZN5spark12NetworkClass4fromEm+0x14>)
 8088508:	2804      	cmp	r0, #4
 808850a:	bf0c      	ite	eq
 808850c:	4610      	moveq	r0, r2
 808850e:	4618      	movne	r0, r3
 8088510:	4770      	bx	lr
 8088512:	bf00      	nop
 8088514:	20000ec4 	.word	0x20000ec4
 8088518:	20000d74 	.word	0x20000d74

0808851c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808851c:	4b02      	ldr	r3, [pc, #8]	; (8088528 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808851e:	4a03      	ldr	r2, [pc, #12]	; (808852c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8088520:	601a      	str	r2, [r3, #0]
 8088522:	2200      	movs	r2, #0
 8088524:	605a      	str	r2, [r3, #4]
 8088526:	4770      	bx	lr
 8088528:	20000ec4 	.word	0x20000ec4
 808852c:	0808e344 	.word	0x0808e344

08088530 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8088530:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8088532:	b530      	push	{r4, r5, lr}
 8088534:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8088536:	b31a      	cbz	r2, 8088580 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8088538:	4a17      	ldr	r2, [pc, #92]	; (8088598 <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 808853a:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 808853c:	68d1      	ldr	r1, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 808853e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8088542:	43c9      	mvns	r1, r1
 8088544:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8088548:	f1c1 0204 	rsb	r2, r1, #4
 808854c:	b2d2      	uxtb	r2, r2
 808854e:	fa05 f202 	lsl.w	r2, r5, r2
 8088552:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8088554:	220f      	movs	r2, #15
 8088556:	410a      	asrs	r2, r1
 8088558:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 808855a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 808855e:	400a      	ands	r2, r1
 8088560:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
 8088562:	0112      	lsls	r2, r2, #4
 8088564:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8088566:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 808856a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 808856c:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 808856e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8088570:	f003 031f 	and.w	r3, r3, #31
 8088574:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8088578:	4a08      	ldr	r2, [pc, #32]	; (808859c <NVIC_Init+0x6c>)
 808857a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 808857e:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8088580:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8088582:	2101      	movs	r1, #1
 8088584:	f003 031f 	and.w	r3, r3, #31
 8088588:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 808858c:	4903      	ldr	r1, [pc, #12]	; (808859c <NVIC_Init+0x6c>)
 808858e:	3220      	adds	r2, #32
 8088590:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8088594:	bd30      	pop	{r4, r5, pc}
 8088596:	bf00      	nop
 8088598:	e000ed00 	.word	0xe000ed00
 808859c:	e000e100 	.word	0xe000e100

080885a0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80885a0:	4b04      	ldr	r3, [pc, #16]	; (80885b4 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80885a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80885a4:	b109      	cbz	r1, 80885aa <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80885a6:	4310      	orrs	r0, r2
 80885a8:	e001      	b.n	80885ae <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80885aa:	ea22 0000 	bic.w	r0, r2, r0
 80885ae:	6418      	str	r0, [r3, #64]	; 0x40
 80885b0:	4770      	bx	lr
 80885b2:	bf00      	nop
 80885b4:	40023800 	.word	0x40023800

080885b8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80885b8:	4b04      	ldr	r3, [pc, #16]	; (80885cc <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80885ba:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80885bc:	b109      	cbz	r1, 80885c2 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80885be:	4310      	orrs	r0, r2
 80885c0:	e001      	b.n	80885c6 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80885c2:	ea22 0000 	bic.w	r0, r2, r0
 80885c6:	6218      	str	r0, [r3, #32]
 80885c8:	4770      	bx	lr
 80885ca:	bf00      	nop
 80885cc:	40023800 	.word	0x40023800

080885d0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80885d0:	4b04      	ldr	r3, [pc, #16]	; (80885e4 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80885d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80885d4:	b109      	cbz	r1, 80885da <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80885d6:	4310      	orrs	r0, r2
 80885d8:	e001      	b.n	80885de <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80885da:	ea22 0000 	bic.w	r0, r2, r0
 80885de:	6258      	str	r0, [r3, #36]	; 0x24
 80885e0:	4770      	bx	lr
 80885e2:	bf00      	nop
 80885e4:	40023800 	.word	0x40023800

080885e8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80885e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 80885ea:	4b4d      	ldr	r3, [pc, #308]	; (8088720 <TIM_DeInit+0x138>)
 80885ec:	4298      	cmp	r0, r3
 80885ee:	d106      	bne.n	80885fe <TIM_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80885f0:	2101      	movs	r1, #1
 80885f2:	4608      	mov	r0, r1
 80885f4:	f7ff ffec 	bl	80885d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 80885f8:	2100      	movs	r1, #0
 80885fa:	2001      	movs	r0, #1
 80885fc:	e044      	b.n	8088688 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM2)
 80885fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8088602:	d106      	bne.n	8088612 <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8088604:	2101      	movs	r1, #1
 8088606:	4608      	mov	r0, r1
 8088608:	f7ff ffd6 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 808860c:	2100      	movs	r1, #0
 808860e:	2001      	movs	r0, #1
 8088610:	e081      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM3)
 8088612:	4b44      	ldr	r3, [pc, #272]	; (8088724 <TIM_DeInit+0x13c>)
 8088614:	4298      	cmp	r0, r3
 8088616:	d106      	bne.n	8088626 <TIM_DeInit+0x3e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8088618:	2101      	movs	r1, #1
 808861a:	2002      	movs	r0, #2
 808861c:	f7ff ffcc 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8088620:	2100      	movs	r1, #0
 8088622:	2002      	movs	r0, #2
 8088624:	e077      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM4)
 8088626:	4b40      	ldr	r3, [pc, #256]	; (8088728 <TIM_DeInit+0x140>)
 8088628:	4298      	cmp	r0, r3
 808862a:	d106      	bne.n	808863a <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 808862c:	2101      	movs	r1, #1
 808862e:	2004      	movs	r0, #4
 8088630:	f7ff ffc2 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8088634:	2100      	movs	r1, #0
 8088636:	2004      	movs	r0, #4
 8088638:	e06d      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM5)
 808863a:	4b3c      	ldr	r3, [pc, #240]	; (808872c <TIM_DeInit+0x144>)
 808863c:	4298      	cmp	r0, r3
 808863e:	d106      	bne.n	808864e <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8088640:	2101      	movs	r1, #1
 8088642:	2008      	movs	r0, #8
 8088644:	f7ff ffb8 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8088648:	2100      	movs	r1, #0
 808864a:	2008      	movs	r0, #8
 808864c:	e063      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM6)
 808864e:	4b38      	ldr	r3, [pc, #224]	; (8088730 <TIM_DeInit+0x148>)
 8088650:	4298      	cmp	r0, r3
 8088652:	d106      	bne.n	8088662 <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8088654:	2101      	movs	r1, #1
 8088656:	2010      	movs	r0, #16
 8088658:	f7ff ffae 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 808865c:	2100      	movs	r1, #0
 808865e:	2010      	movs	r0, #16
 8088660:	e059      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM7)
 8088662:	4b34      	ldr	r3, [pc, #208]	; (8088734 <TIM_DeInit+0x14c>)
 8088664:	4298      	cmp	r0, r3
 8088666:	d106      	bne.n	8088676 <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8088668:	2101      	movs	r1, #1
 808866a:	2020      	movs	r0, #32
 808866c:	f7ff ffa4 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8088670:	2100      	movs	r1, #0
 8088672:	2020      	movs	r0, #32
 8088674:	e04f      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM8)
 8088676:	4b30      	ldr	r3, [pc, #192]	; (8088738 <TIM_DeInit+0x150>)
 8088678:	4298      	cmp	r0, r3
 808867a:	d109      	bne.n	8088690 <TIM_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 808867c:	2101      	movs	r1, #1
 808867e:	2002      	movs	r0, #2
 8088680:	f7ff ffa6 	bl	80885d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8088684:	2100      	movs	r1, #0
 8088686:	2002      	movs	r0, #2
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 8088688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM8)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 808868c:	f7ff bfa0 	b.w	80885d0 <RCC_APB2PeriphResetCmd>
  }
  else if (TIMx == TIM9)
 8088690:	4b2a      	ldr	r3, [pc, #168]	; (808873c <TIM_DeInit+0x154>)
 8088692:	4298      	cmp	r0, r3
 8088694:	d108      	bne.n	80886a8 <TIM_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8088696:	2101      	movs	r1, #1
 8088698:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 808869c:	f7ff ff98 	bl	80885d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 80886a0:	2100      	movs	r1, #0
 80886a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80886a6:	e7ef      	b.n	8088688 <TIM_DeInit+0xa0>
   }
  else if (TIMx == TIM10)
 80886a8:	4b25      	ldr	r3, [pc, #148]	; (8088740 <TIM_DeInit+0x158>)
 80886aa:	4298      	cmp	r0, r3
 80886ac:	d108      	bne.n	80886c0 <TIM_DeInit+0xd8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80886ae:	2101      	movs	r1, #1
 80886b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80886b4:	f7ff ff8c 	bl	80885d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 80886b8:	2100      	movs	r1, #0
 80886ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80886be:	e7e3      	b.n	8088688 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM11)
 80886c0:	4b20      	ldr	r3, [pc, #128]	; (8088744 <TIM_DeInit+0x15c>)
 80886c2:	4298      	cmp	r0, r3
 80886c4:	d108      	bne.n	80886d8 <TIM_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80886c6:	2101      	movs	r1, #1
 80886c8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80886cc:	f7ff ff80 	bl	80885d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 80886d0:	2100      	movs	r1, #0
 80886d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80886d6:	e7d7      	b.n	8088688 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM12)
 80886d8:	4b1b      	ldr	r3, [pc, #108]	; (8088748 <TIM_DeInit+0x160>)
 80886da:	4298      	cmp	r0, r3
 80886dc:	d106      	bne.n	80886ec <TIM_DeInit+0x104>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80886de:	2101      	movs	r1, #1
 80886e0:	2040      	movs	r0, #64	; 0x40
 80886e2:	f7ff ff69 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 80886e6:	2100      	movs	r1, #0
 80886e8:	2040      	movs	r0, #64	; 0x40
 80886ea:	e014      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM13)
 80886ec:	4b17      	ldr	r3, [pc, #92]	; (808874c <TIM_DeInit+0x164>)
 80886ee:	4298      	cmp	r0, r3
 80886f0:	d106      	bne.n	8088700 <TIM_DeInit+0x118>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80886f2:	2101      	movs	r1, #1
 80886f4:	2080      	movs	r0, #128	; 0x80
 80886f6:	f7ff ff5f 	bl	80885b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 80886fa:	2100      	movs	r1, #0
 80886fc:	2080      	movs	r0, #128	; 0x80
 80886fe:	e00a      	b.n	8088716 <TIM_DeInit+0x12e>
  }
  else
  {
    if (TIMx == TIM14)
 8088700:	4b13      	ldr	r3, [pc, #76]	; (8088750 <TIM_DeInit+0x168>)
 8088702:	4298      	cmp	r0, r3
 8088704:	d10b      	bne.n	808871e <TIM_DeInit+0x136>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8088706:	2101      	movs	r1, #1
 8088708:	f44f 7080 	mov.w	r0, #256	; 0x100
 808870c:	f7ff ff54 	bl	80885b8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8088710:	2100      	movs	r1, #0
 8088712:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 8088716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM14)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 808871a:	f7ff bf4d 	b.w	80885b8 <RCC_APB1PeriphResetCmd>
 808871e:	bd08      	pop	{r3, pc}
 8088720:	40010000 	.word	0x40010000
 8088724:	40000400 	.word	0x40000400
 8088728:	40000800 	.word	0x40000800
 808872c:	40000c00 	.word	0x40000c00
 8088730:	40001000 	.word	0x40001000
 8088734:	40001400 	.word	0x40001400
 8088738:	40010400 	.word	0x40010400
 808873c:	40014000 	.word	0x40014000
 8088740:	40014400 	.word	0x40014400
 8088744:	40014800 	.word	0x40014800
 8088748:	40001800 	.word	0x40001800
 808874c:	40001c00 	.word	0x40001c00
 8088750:	40002000 	.word	0x40002000

08088754 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088754:	4a1c      	ldr	r2, [pc, #112]	; (80887c8 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8088756:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088758:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 808875a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 808875c:	d012      	beq.n	8088784 <TIM_TimeBaseInit+0x30>
 808875e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088762:	4290      	cmp	r0, r2
 8088764:	d00e      	beq.n	8088784 <TIM_TimeBaseInit+0x30>
 8088766:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 808876a:	d00b      	beq.n	8088784 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 808876c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8088770:	4290      	cmp	r0, r2
 8088772:	d007      	beq.n	8088784 <TIM_TimeBaseInit+0x30>
 8088774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088778:	4290      	cmp	r0, r2
 808877a:	d003      	beq.n	8088784 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5))
 808877c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088780:	4290      	cmp	r0, r2
 8088782:	d103      	bne.n	808878c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8088784:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8088786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 808878a:	4313      	orrs	r3, r2
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 808878c:	4a0f      	ldr	r2, [pc, #60]	; (80887cc <TIM_TimeBaseInit+0x78>)
 808878e:	4290      	cmp	r0, r2
 8088790:	d008      	beq.n	80887a4 <TIM_TimeBaseInit+0x50>
 8088792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088796:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8088798:	bf1f      	itttt	ne
 808879a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 808879e:	890a      	ldrhne	r2, [r1, #8]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80887a0:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80887a2:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80887a4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80887a6:	684b      	ldr	r3, [r1, #4]
 80887a8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80887aa:	880b      	ldrh	r3, [r1, #0]
 80887ac:	8503      	strh	r3, [r0, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 80887ae:	4b06      	ldr	r3, [pc, #24]	; (80887c8 <TIM_TimeBaseInit+0x74>)
 80887b0:	4298      	cmp	r0, r3
 80887b2:	d003      	beq.n	80887bc <TIM_TimeBaseInit+0x68>
 80887b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80887b8:	4298      	cmp	r0, r3
 80887ba:	d101      	bne.n	80887c0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80887bc:	7a8b      	ldrb	r3, [r1, #10]
 80887be:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80887c0:	2301      	movs	r3, #1
 80887c2:	8283      	strh	r3, [r0, #20]
 80887c4:	4770      	bx	lr
 80887c6:	bf00      	nop
 80887c8:	40010000 	.word	0x40010000
 80887cc:	40001000 	.word	0x40001000

080887d0 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80887d0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80887d2:	b119      	cbz	r1, 80887dc <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80887d4:	b29b      	uxth	r3, r3
 80887d6:	f043 0301 	orr.w	r3, r3, #1
 80887da:	e003      	b.n	80887e4 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80887dc:	f023 0301 	bic.w	r3, r3, #1
 80887e0:	041b      	lsls	r3, r3, #16
 80887e2:	0c1b      	lsrs	r3, r3, #16
 80887e4:	8003      	strh	r3, [r0, #0]
 80887e6:	4770      	bx	lr

080887e8 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 80887e8:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 80887ea:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80887ec:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 80887f0:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80887f2:	d003      	beq.n	80887fc <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 80887f4:	4211      	tst	r1, r2
 80887f6:	bf14      	ite	ne
 80887f8:	2001      	movne	r0, #1
 80887fa:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80887fc:	4770      	bx	lr

080887fe <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80887fe:	43c9      	mvns	r1, r1
 8088800:	b289      	uxth	r1, r1
 8088802:	8201      	strh	r1, [r0, #16]
 8088804:	4770      	bx	lr

08088806 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 8088806:	8983      	ldrh	r3, [r0, #12]
 8088808:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 808880a:	b10a      	cbz	r2, 8088810 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 808880c:	4319      	orrs	r1, r3
 808880e:	e001      	b.n	8088814 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8088810:	ea23 0101 	bic.w	r1, r3, r1
 8088814:	8181      	strh	r1, [r0, #12]
 8088816:	4770      	bx	lr

08088818 <TIM_ITConfig>:
 8088818:	f7ff bff5 	b.w	8088806 <TIM_DMACmd>

0808881c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808881c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808881e:	4e1a      	ldr	r6, [pc, #104]	; (8088888 <pinAvailable+0x6c>)
 8088820:	4604      	mov	r4, r0
 8088822:	6831      	ldr	r1, [r6, #0]
 8088824:	f011 0501 	ands.w	r5, r1, #1
 8088828:	d10f      	bne.n	808884a <pinAvailable+0x2e>
 808882a:	4630      	mov	r0, r6
 808882c:	f7f7 fc4a 	bl	80800c4 <__cxa_guard_acquire>
 8088830:	b158      	cbz	r0, 808884a <pinAvailable+0x2e>
 8088832:	4629      	mov	r1, r5
 8088834:	4815      	ldr	r0, [pc, #84]	; (808888c <pinAvailable+0x70>)
 8088836:	f7fd fd55 	bl	80862e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808883a:	4630      	mov	r0, r6
 808883c:	f7f7 fc47 	bl	80800ce <__cxa_guard_release>
 8088840:	4a13      	ldr	r2, [pc, #76]	; (8088890 <pinAvailable+0x74>)
 8088842:	4914      	ldr	r1, [pc, #80]	; (8088894 <pinAvailable+0x78>)
 8088844:	4811      	ldr	r0, [pc, #68]	; (808888c <pinAvailable+0x70>)
 8088846:	f000 f937 	bl	8088ab8 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 808884a:	4810      	ldr	r0, [pc, #64]	; (808888c <pinAvailable+0x70>)
 808884c:	f7fd fe0c 	bl	8086468 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8088850:	b128      	cbz	r0, 808885e <pinAvailable+0x42>
 8088852:	f1a4 030d 	sub.w	r3, r4, #13
 8088856:	2b02      	cmp	r3, #2
 8088858:	d801      	bhi.n	808885e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 808885a:	2000      	movs	r0, #0
 808885c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808885e:	f000 f8df 	bl	8088a20 <_Z19__fetch_global_Wirev>
 8088862:	f7ff fdde 	bl	8088422 <_ZN7TwoWire9isEnabledEv>
 8088866:	b108      	cbz	r0, 808886c <pinAvailable+0x50>
 8088868:	2c01      	cmp	r4, #1
 808886a:	d9f6      	bls.n	808885a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808886c:	f7ff fd1c 	bl	80882a8 <_Z22__fetch_global_Serial1v>
 8088870:	f7ff fd17 	bl	80882a2 <_ZN11USARTSerial9isEnabledEv>
 8088874:	b118      	cbz	r0, 808887e <pinAvailable+0x62>
 8088876:	f1a4 0312 	sub.w	r3, r4, #18
 808887a:	2b01      	cmp	r3, #1
 808887c:	d9ed      	bls.n	808885a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808887e:	2c2e      	cmp	r4, #46	; 0x2e
 8088880:	bf8c      	ite	hi
 8088882:	2000      	movhi	r0, #0
 8088884:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8088886:	bd70      	pop	{r4, r5, r6, pc}
 8088888:	20000144 	.word	0x20000144
 808888c:	20000148 	.word	0x20000148
 8088890:	20000140 	.word	0x20000140
 8088894:	080801c5 	.word	0x080801c5

08088898 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088898:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808889a:	b538      	push	{r3, r4, r5, lr}
 808889c:	4604      	mov	r4, r0
 808889e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80888a0:	d80a      	bhi.n	80888b8 <pinMode+0x20>
 80888a2:	29ff      	cmp	r1, #255	; 0xff
 80888a4:	d008      	beq.n	80888b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80888a6:	f7ff ffb9 	bl	808881c <pinAvailable>
 80888aa:	b128      	cbz	r0, 80888b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80888ac:	4629      	mov	r1, r5
 80888ae:	4620      	mov	r0, r4
}
 80888b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80888b4:	f7fd b818 	b.w	80858e8 <HAL_Pin_Mode>
 80888b8:	bd38      	pop	{r3, r4, r5, pc}

080888ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80888ba:	b538      	push	{r3, r4, r5, lr}
 80888bc:	4604      	mov	r4, r0
 80888be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80888c0:	f7fd f81a 	bl	80858f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80888c4:	28ff      	cmp	r0, #255	; 0xff
 80888c6:	d010      	beq.n	80888ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80888c8:	2806      	cmp	r0, #6
 80888ca:	d804      	bhi.n	80888d6 <digitalWrite+0x1c>
 80888cc:	234d      	movs	r3, #77	; 0x4d
 80888ce:	fa23 f000 	lsr.w	r0, r3, r0
 80888d2:	07c3      	lsls	r3, r0, #31
 80888d4:	d409      	bmi.n	80888ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80888d6:	4620      	mov	r0, r4
 80888d8:	f7ff ffa0 	bl	808881c <pinAvailable>
 80888dc:	b128      	cbz	r0, 80888ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80888de:	4629      	mov	r1, r5
 80888e0:	4620      	mov	r0, r4
}
 80888e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80888e6:	f7fd b80f 	b.w	8085908 <HAL_GPIO_Write>
 80888ea:	bd38      	pop	{r3, r4, r5, pc}

080888ec <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80888ec:	b510      	push	{r4, lr}
 80888ee:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80888f0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80888f2:	bf9c      	itt	ls
 80888f4:	340a      	addls	r4, #10
 80888f6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80888f8:	4620      	mov	r0, r4
 80888fa:	f7ff ff8f 	bl	808881c <pinAvailable>
 80888fe:	b150      	cbz	r0, 8088916 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8088900:	2103      	movs	r1, #3
 8088902:	4620      	mov	r0, r4
 8088904:	f7fc ffe8 	bl	80858d8 <HAL_Validate_Pin_Function>
 8088908:	2803      	cmp	r0, #3
 808890a:	d104      	bne.n	8088916 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808890c:	4620      	mov	r0, r4
}
 808890e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8088912:	f7fd b811 	b.w	8085938 <HAL_ADC_Read>
}
 8088916:	2000      	movs	r0, #0
 8088918:	bd10      	pop	{r4, pc}
	...

0808891c <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 808891c:	b530      	push	{r4, r5, lr}
 808891e:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8088920:	4d1b      	ldr	r5, [pc, #108]	; (8088990 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8088922:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 8088924:	6820      	ldr	r0, [r4, #0]
 8088926:	f7fd f85f 	bl	80859e8 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808892a:	f7fd f875 	bl	8085a18 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 808892e:	682b      	ldr	r3, [r5, #0]
 8088930:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 8088932:	1ac0      	subs	r0, r0, r3
 8088934:	4290      	cmp	r0, r2
 8088936:	d3f5      	bcc.n	8088924 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 8088938:	6823      	ldr	r3, [r4, #0]
 808893a:	b333      	cbz	r3, 808898a <_ZN19ApplicationWatchdog4loopEv+0x6e>
 808893c:	68e3      	ldr	r3, [r4, #12]
 808893e:	b323      	cbz	r3, 808898a <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088940:	1d25      	adds	r5, r4, #4
 8088942:	6923      	ldr	r3, [r4, #16]
 8088944:	4628      	mov	r0, r5
 8088946:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088948:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808894a:	a904      	add	r1, sp, #16
 808894c:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808894e:	9302      	str	r3, [sp, #8]
 8088950:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088952:	f7fe fd01 	bl	8087358 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088956:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8088958:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 808895a:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808895c:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808895e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8088960:	9a07      	ldr	r2, [sp, #28]
 8088962:	4629      	mov	r1, r5
 8088964:	a804      	add	r0, sp, #16
 8088966:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088968:	9307      	str	r3, [sp, #28]
 808896a:	f7fe fcf5 	bl	8087358 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808896e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088970:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088972:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088974:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8088976:	9206      	str	r2, [sp, #24]
 8088978:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808897a:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 808897c:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808897e:	9207      	str	r2, [sp, #28]
 8088980:	f7f7 fc51 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 8088984:	4668      	mov	r0, sp
 8088986:	f7f7 fc4e 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 808898a:	b009      	add	sp, #36	; 0x24
 808898c:	bd30      	pop	{r4, r5, pc}
 808898e:	bf00      	nop
 8088990:	20000ecc 	.word	0x20000ecc

08088994 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 8088994:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 8088996:	f7ff ffc1 	bl	808891c <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 808899a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 808899e:	2000      	movs	r0, #0
 80889a0:	f7fd b86a 	b.w	8085a78 <os_thread_cleanup>

080889a4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80889a4:	b513      	push	{r0, r1, r4, lr}
 80889a6:	4c08      	ldr	r4, [pc, #32]	; (80889c8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80889a8:	2300      	movs	r3, #0
 80889aa:	461a      	mov	r2, r3
 80889ac:	4619      	mov	r1, r3
 80889ae:	9300      	str	r3, [sp, #0]
 80889b0:	4620      	mov	r0, r4
 80889b2:	f7ff fa05 	bl	8087dc0 <_ZN9IPAddressC1Ehhhh>
 80889b6:	4620      	mov	r0, r4
 80889b8:	4a04      	ldr	r2, [pc, #16]	; (80889cc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80889ba:	4905      	ldr	r1, [pc, #20]	; (80889d0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80889bc:	b002      	add	sp, #8
 80889be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80889c2:	f000 b879 	b.w	8088ab8 <__aeabi_atexit>
 80889c6:	bf00      	nop
 80889c8:	20000ed0 	.word	0x20000ed0
 80889cc:	20000140 	.word	0x20000140
 80889d0:	08087d31 	.word	0x08087d31

080889d4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 80889d4:	b570      	push	{r4, r5, r6, lr}
 80889d6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80889d8:	2514      	movs	r5, #20
 80889da:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80889dc:	4e09      	ldr	r6, [pc, #36]	; (8088a04 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80889de:	2100      	movs	r1, #0
 80889e0:	f001 fdb6 	bl	808a550 <memset>
 80889e4:	8025      	strh	r5, [r4, #0]
 80889e6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80889e8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80889ea:	60a5      	str	r5, [r4, #8]
 80889ec:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80889ee:	4628      	mov	r0, r5
 80889f0:	f000 f872 	bl	8088ad8 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80889f4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80889f6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80889f8:	4628      	mov	r0, r5
 80889fa:	f000 f86d 	bl	8088ad8 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80889fe:	60e0      	str	r0, [r4, #12]

	return config;
}
 8088a00:	4620      	mov	r0, r4
 8088a02:	bd70      	pop	{r4, r5, r6, pc}
 8088a04:	0808e370 	.word	0x0808e370

08088a08 <_Z17acquireWireBufferv>:
 8088a08:	b510      	push	{r4, lr}
 8088a0a:	4604      	mov	r4, r0
 8088a0c:	f7ff ffe2 	bl	80889d4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8088a10:	4620      	mov	r0, r4
 8088a12:	bd10      	pop	{r4, pc}

08088a14 <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 8088a14:	b510      	push	{r4, lr}
 8088a16:	4604      	mov	r4, r0
	return defaultWireConfig();
 8088a18:	f7ff ffdc 	bl	80889d4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8088a1c:	4620      	mov	r0, r4
 8088a1e:	bd10      	pop	{r4, pc}

08088a20 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8088a20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8088a22:	4d0e      	ldr	r5, [pc, #56]	; (8088a5c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8088a24:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8088a26:	6829      	ldr	r1, [r5, #0]
 8088a28:	f011 0401 	ands.w	r4, r1, #1
 8088a2c:	d113      	bne.n	8088a56 <_Z19__fetch_global_Wirev+0x36>
 8088a2e:	4628      	mov	r0, r5
 8088a30:	f7f7 fb48 	bl	80800c4 <__cxa_guard_acquire>
 8088a34:	b178      	cbz	r0, 8088a56 <_Z19__fetch_global_Wirev+0x36>
 8088a36:	a801      	add	r0, sp, #4
 8088a38:	f7ff ffe6 	bl	8088a08 <_Z17acquireWireBufferv>
 8088a3c:	aa01      	add	r2, sp, #4
 8088a3e:	4621      	mov	r1, r4
 8088a40:	4807      	ldr	r0, [pc, #28]	; (8088a60 <_Z19__fetch_global_Wirev+0x40>)
 8088a42:	f7ff fc97 	bl	8088374 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8088a46:	4628      	mov	r0, r5
 8088a48:	f7f7 fb41 	bl	80800ce <__cxa_guard_release>
 8088a4c:	4a05      	ldr	r2, [pc, #20]	; (8088a64 <_Z19__fetch_global_Wirev+0x44>)
 8088a4e:	4906      	ldr	r1, [pc, #24]	; (8088a68 <_Z19__fetch_global_Wirev+0x48>)
 8088a50:	4803      	ldr	r0, [pc, #12]	; (8088a60 <_Z19__fetch_global_Wirev+0x40>)
 8088a52:	f000 f831 	bl	8088ab8 <__aeabi_atexit>
	return wire;
}
 8088a56:	4802      	ldr	r0, [pc, #8]	; (8088a60 <_Z19__fetch_global_Wirev+0x40>)
 8088a58:	b007      	add	sp, #28
 8088a5a:	bd30      	pop	{r4, r5, pc}
 8088a5c:	20000ed8 	.word	0x20000ed8
 8088a60:	20000ef0 	.word	0x20000ef0
 8088a64:	20000140 	.word	0x20000140
 8088a68:	0808831d 	.word	0x0808831d

08088a6c <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8088a6c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8088a6e:	4c0e      	ldr	r4, [pc, #56]	; (8088aa8 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8088a70:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8088a72:	6823      	ldr	r3, [r4, #0]
 8088a74:	07db      	lsls	r3, r3, #31
 8088a76:	d413      	bmi.n	8088aa0 <_Z20__fetch_global_Wire3v+0x34>
 8088a78:	4620      	mov	r0, r4
 8088a7a:	f7f7 fb23 	bl	80800c4 <__cxa_guard_acquire>
 8088a7e:	b178      	cbz	r0, 8088aa0 <_Z20__fetch_global_Wire3v+0x34>
 8088a80:	a801      	add	r0, sp, #4
 8088a82:	f7ff ffc7 	bl	8088a14 <_Z18acquireWire3Bufferv>
 8088a86:	aa01      	add	r2, sp, #4
 8088a88:	2102      	movs	r1, #2
 8088a8a:	4808      	ldr	r0, [pc, #32]	; (8088aac <_Z20__fetch_global_Wire3v+0x40>)
 8088a8c:	f7ff fc72 	bl	8088374 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8088a90:	4620      	mov	r0, r4
 8088a92:	f7f7 fb1c 	bl	80800ce <__cxa_guard_release>
 8088a96:	4a06      	ldr	r2, [pc, #24]	; (8088ab0 <_Z20__fetch_global_Wire3v+0x44>)
 8088a98:	4906      	ldr	r1, [pc, #24]	; (8088ab4 <_Z20__fetch_global_Wire3v+0x48>)
 8088a9a:	4804      	ldr	r0, [pc, #16]	; (8088aac <_Z20__fetch_global_Wire3v+0x40>)
 8088a9c:	f000 f80c 	bl	8088ab8 <__aeabi_atexit>
	return wire;
}
 8088aa0:	4802      	ldr	r0, [pc, #8]	; (8088aac <_Z20__fetch_global_Wire3v+0x40>)
 8088aa2:	b006      	add	sp, #24
 8088aa4:	bd10      	pop	{r4, pc}
 8088aa6:	bf00      	nop
 8088aa8:	20000f04 	.word	0x20000f04
 8088aac:	20000edc 	.word	0x20000edc
 8088ab0:	20000140 	.word	0x20000140
 8088ab4:	0808831d 	.word	0x0808831d

08088ab8 <__aeabi_atexit>:
 8088ab8:	460b      	mov	r3, r1
 8088aba:	4601      	mov	r1, r0
 8088abc:	4618      	mov	r0, r3
 8088abe:	f001 bc23 	b.w	808a308 <__cxa_atexit>
	...

08088ac4 <_ZSt15get_new_handlerv>:
 8088ac4:	4b02      	ldr	r3, [pc, #8]	; (8088ad0 <_ZSt15get_new_handlerv+0xc>)
 8088ac6:	6818      	ldr	r0, [r3, #0]
 8088ac8:	f3bf 8f5f 	dmb	sy
 8088acc:	4770      	bx	lr
 8088ace:	bf00      	nop
 8088ad0:	20000f08 	.word	0x20000f08

08088ad4 <_ZdlPvj>:
 8088ad4:	f7f7 bae7 	b.w	80800a6 <_ZdlPv>

08088ad8 <_ZnajRKSt9nothrow_t>:
 8088ad8:	f000 b800 	b.w	8088adc <_ZnwjRKSt9nothrow_t>

08088adc <_ZnwjRKSt9nothrow_t>:
 8088adc:	b510      	push	{r4, lr}
 8088ade:	2800      	cmp	r0, #0
 8088ae0:	bf14      	ite	ne
 8088ae2:	4604      	movne	r4, r0
 8088ae4:	2401      	moveq	r4, #1
 8088ae6:	4620      	mov	r0, r4
 8088ae8:	f7fd fa42 	bl	8085f70 <malloc>
 8088aec:	b920      	cbnz	r0, 8088af8 <_ZnwjRKSt9nothrow_t+0x1c>
 8088aee:	f7ff ffe9 	bl	8088ac4 <_ZSt15get_new_handlerv>
 8088af2:	b108      	cbz	r0, 8088af8 <_ZnwjRKSt9nothrow_t+0x1c>
 8088af4:	4780      	blx	r0
 8088af6:	e7f6      	b.n	8088ae6 <_ZnwjRKSt9nothrow_t+0xa>
 8088af8:	bd10      	pop	{r4, pc}

08088afa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8088afa:	68c3      	ldr	r3, [r0, #12]
 8088afc:	689a      	ldr	r2, [r3, #8]
 8088afe:	60c2      	str	r2, [r0, #12]
 8088b00:	b102      	cbz	r2, 8088b04 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 8088b02:	6050      	str	r0, [r2, #4]
 8088b04:	6842      	ldr	r2, [r0, #4]
 8088b06:	605a      	str	r2, [r3, #4]
 8088b08:	680a      	ldr	r2, [r1, #0]
 8088b0a:	4290      	cmp	r0, r2
 8088b0c:	d101      	bne.n	8088b12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
 8088b0e:	600b      	str	r3, [r1, #0]
 8088b10:	e005      	b.n	8088b1e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
 8088b12:	6842      	ldr	r2, [r0, #4]
 8088b14:	6891      	ldr	r1, [r2, #8]
 8088b16:	4288      	cmp	r0, r1
 8088b18:	bf0c      	ite	eq
 8088b1a:	6093      	streq	r3, [r2, #8]
 8088b1c:	60d3      	strne	r3, [r2, #12]
 8088b1e:	6098      	str	r0, [r3, #8]
 8088b20:	6043      	str	r3, [r0, #4]
 8088b22:	4770      	bx	lr

08088b24 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8088b24:	6883      	ldr	r3, [r0, #8]
 8088b26:	68da      	ldr	r2, [r3, #12]
 8088b28:	6082      	str	r2, [r0, #8]
 8088b2a:	b102      	cbz	r2, 8088b2e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 8088b2c:	6050      	str	r0, [r2, #4]
 8088b2e:	6842      	ldr	r2, [r0, #4]
 8088b30:	605a      	str	r2, [r3, #4]
 8088b32:	680a      	ldr	r2, [r1, #0]
 8088b34:	4290      	cmp	r0, r2
 8088b36:	d101      	bne.n	8088b3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
 8088b38:	600b      	str	r3, [r1, #0]
 8088b3a:	e005      	b.n	8088b48 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
 8088b3c:	6842      	ldr	r2, [r0, #4]
 8088b3e:	68d1      	ldr	r1, [r2, #12]
 8088b40:	4288      	cmp	r0, r1
 8088b42:	bf0c      	ite	eq
 8088b44:	60d3      	streq	r3, [r2, #12]
 8088b46:	6093      	strne	r3, [r2, #8]
 8088b48:	60d8      	str	r0, [r3, #12]
 8088b4a:	6043      	str	r3, [r0, #4]
 8088b4c:	4770      	bx	lr

08088b4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8088b4e:	7803      	ldrb	r3, [r0, #0]
 8088b50:	b92b      	cbnz	r3, 8088b5e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 8088b52:	6843      	ldr	r3, [r0, #4]
 8088b54:	685b      	ldr	r3, [r3, #4]
 8088b56:	4298      	cmp	r0, r3
 8088b58:	d101      	bne.n	8088b5e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 8088b5a:	68c3      	ldr	r3, [r0, #12]
 8088b5c:	e00c      	b.n	8088b78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8088b5e:	6883      	ldr	r3, [r0, #8]
 8088b60:	b11b      	cbz	r3, 8088b6a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
 8088b62:	68da      	ldr	r2, [r3, #12]
 8088b64:	b142      	cbz	r2, 8088b78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8088b66:	4613      	mov	r3, r2
 8088b68:	e7fb      	b.n	8088b62 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 8088b6a:	6843      	ldr	r3, [r0, #4]
 8088b6c:	689a      	ldr	r2, [r3, #8]
 8088b6e:	4282      	cmp	r2, r0
 8088b70:	d102      	bne.n	8088b78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8088b72:	4618      	mov	r0, r3
 8088b74:	685b      	ldr	r3, [r3, #4]
 8088b76:	e7f9      	b.n	8088b6c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
 8088b78:	4618      	mov	r0, r3
 8088b7a:	4770      	bx	lr

08088b7c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8088b7c:	68c3      	ldr	r3, [r0, #12]
 8088b7e:	b123      	cbz	r3, 8088b8a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8088b80:	4618      	mov	r0, r3
 8088b82:	689b      	ldr	r3, [r3, #8]
 8088b84:	2b00      	cmp	r3, #0
 8088b86:	d1fb      	bne.n	8088b80 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8088b88:	e00a      	b.n	8088ba0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 8088b8a:	6843      	ldr	r3, [r0, #4]
 8088b8c:	68da      	ldr	r2, [r3, #12]
 8088b8e:	4282      	cmp	r2, r0
 8088b90:	d102      	bne.n	8088b98 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8088b92:	4618      	mov	r0, r3
 8088b94:	685b      	ldr	r3, [r3, #4]
 8088b96:	e7f9      	b.n	8088b8c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8088b98:	68c2      	ldr	r2, [r0, #12]
 8088b9a:	4293      	cmp	r3, r2
 8088b9c:	bf18      	it	ne
 8088b9e:	4618      	movne	r0, r3
 8088ba0:	4770      	bx	lr

08088ba2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8088ba2:	f7ff bfd4 	b.w	8088b4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08088ba6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8088ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088baa:	461f      	mov	r7, r3
 8088bac:	f103 0904 	add.w	r9, r3, #4
 8088bb0:	2300      	movs	r3, #0
 8088bb2:	460c      	mov	r4, r1
 8088bb4:	604a      	str	r2, [r1, #4]
 8088bb6:	608b      	str	r3, [r1, #8]
 8088bb8:	60cb      	str	r3, [r1, #12]
 8088bba:	700b      	strb	r3, [r1, #0]
 8088bbc:	b168      	cbz	r0, 8088bda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
 8088bbe:	4297      	cmp	r7, r2
 8088bc0:	6091      	str	r1, [r2, #8]
 8088bc2:	d101      	bne.n	8088bc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8088bc4:	6079      	str	r1, [r7, #4]
 8088bc6:	e00c      	b.n	8088be2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
 8088bc8:	68bb      	ldr	r3, [r7, #8]
 8088bca:	429a      	cmp	r2, r3
 8088bcc:	bf08      	it	eq
 8088bce:	60b9      	streq	r1, [r7, #8]
 8088bd0:	f04f 0801 	mov.w	r8, #1
 8088bd4:	f04f 0a00 	mov.w	sl, #0
 8088bd8:	e017      	b.n	8088c0a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8088bda:	60d1      	str	r1, [r2, #12]
 8088bdc:	68fb      	ldr	r3, [r7, #12]
 8088bde:	429a      	cmp	r2, r3
 8088be0:	d1f6      	bne.n	8088bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8088be2:	60fc      	str	r4, [r7, #12]
 8088be4:	e7f4      	b.n	8088bd0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8088be6:	6866      	ldr	r6, [r4, #4]
 8088be8:	7832      	ldrb	r2, [r6, #0]
 8088bea:	2a00      	cmp	r2, #0
 8088bec:	d13a      	bne.n	8088c64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 8088bee:	6875      	ldr	r5, [r6, #4]
 8088bf0:	68ab      	ldr	r3, [r5, #8]
 8088bf2:	429e      	cmp	r6, r3
 8088bf4:	d11f      	bne.n	8088c36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 8088bf6:	68eb      	ldr	r3, [r5, #12]
 8088bf8:	b15b      	cbz	r3, 8088c12 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8088bfa:	781a      	ldrb	r2, [r3, #0]
 8088bfc:	b94a      	cbnz	r2, 8088c12 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8088bfe:	f886 8000 	strb.w	r8, [r6]
 8088c02:	f883 8000 	strb.w	r8, [r3]
 8088c06:	702a      	strb	r2, [r5, #0]
 8088c08:	462c      	mov	r4, r5
 8088c0a:	687b      	ldr	r3, [r7, #4]
 8088c0c:	429c      	cmp	r4, r3
 8088c0e:	d1ea      	bne.n	8088be6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8088c10:	e028      	b.n	8088c64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 8088c12:	68f3      	ldr	r3, [r6, #12]
 8088c14:	429c      	cmp	r4, r3
 8088c16:	d104      	bne.n	8088c22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8088c18:	4649      	mov	r1, r9
 8088c1a:	4630      	mov	r0, r6
 8088c1c:	f7ff ff6d 	bl	8088afa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8088c20:	4634      	mov	r4, r6
 8088c22:	6863      	ldr	r3, [r4, #4]
 8088c24:	4649      	mov	r1, r9
 8088c26:	f883 8000 	strb.w	r8, [r3]
 8088c2a:	4628      	mov	r0, r5
 8088c2c:	f885 a000 	strb.w	sl, [r5]
 8088c30:	f7ff ff78 	bl	8088b24 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8088c34:	e014      	b.n	8088c60 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
 8088c36:	b113      	cbz	r3, 8088c3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 8088c38:	781a      	ldrb	r2, [r3, #0]
 8088c3a:	2a00      	cmp	r2, #0
 8088c3c:	d0df      	beq.n	8088bfe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8088c3e:	68b3      	ldr	r3, [r6, #8]
 8088c40:	429c      	cmp	r4, r3
 8088c42:	d104      	bne.n	8088c4e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 8088c44:	4649      	mov	r1, r9
 8088c46:	4630      	mov	r0, r6
 8088c48:	f7ff ff6c 	bl	8088b24 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8088c4c:	4634      	mov	r4, r6
 8088c4e:	6863      	ldr	r3, [r4, #4]
 8088c50:	4649      	mov	r1, r9
 8088c52:	f883 8000 	strb.w	r8, [r3]
 8088c56:	4628      	mov	r0, r5
 8088c58:	f885 a000 	strb.w	sl, [r5]
 8088c5c:	f7ff ff4d 	bl	8088afa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8088c60:	4625      	mov	r5, r4
 8088c62:	e7d1      	b.n	8088c08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
 8088c64:	2201      	movs	r2, #1
 8088c66:	701a      	strb	r2, [r3, #0]
 8088c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08088c6c <_ZSt25__throw_bad_function_callv>:
 8088c6c:	b508      	push	{r3, lr}
 8088c6e:	f7fd f9c7 	bl	8086000 <abort>
	...

08088c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8088c74:	4b18      	ldr	r3, [pc, #96]	; (8088cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8088c76:	681a      	ldr	r2, [r3, #0]
 8088c78:	07d1      	lsls	r1, r2, #31
 8088c7a:	bf5c      	itt	pl
 8088c7c:	2201      	movpl	r2, #1
 8088c7e:	601a      	strpl	r2, [r3, #0]
 8088c80:	4b16      	ldr	r3, [pc, #88]	; (8088cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8088c82:	681a      	ldr	r2, [r3, #0]
 8088c84:	07d2      	lsls	r2, r2, #31
 8088c86:	bf5c      	itt	pl
 8088c88:	2201      	movpl	r2, #1
 8088c8a:	601a      	strpl	r2, [r3, #0]
 8088c8c:	4b14      	ldr	r3, [pc, #80]	; (8088ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8088c8e:	681a      	ldr	r2, [r3, #0]
 8088c90:	07d0      	lsls	r0, r2, #31
 8088c92:	bf5c      	itt	pl
 8088c94:	2201      	movpl	r2, #1
 8088c96:	601a      	strpl	r2, [r3, #0]
 8088c98:	4b12      	ldr	r3, [pc, #72]	; (8088ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8088c9a:	681a      	ldr	r2, [r3, #0]
 8088c9c:	07d1      	lsls	r1, r2, #31
 8088c9e:	bf5c      	itt	pl
 8088ca0:	2201      	movpl	r2, #1
 8088ca2:	601a      	strpl	r2, [r3, #0]
 8088ca4:	4b10      	ldr	r3, [pc, #64]	; (8088ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8088ca6:	681a      	ldr	r2, [r3, #0]
 8088ca8:	07d2      	lsls	r2, r2, #31
 8088caa:	bf5c      	itt	pl
 8088cac:	2201      	movpl	r2, #1
 8088cae:	601a      	strpl	r2, [r3, #0]
 8088cb0:	4b0e      	ldr	r3, [pc, #56]	; (8088cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8088cb2:	681a      	ldr	r2, [r3, #0]
 8088cb4:	07d0      	lsls	r0, r2, #31
 8088cb6:	bf5c      	itt	pl
 8088cb8:	2201      	movpl	r2, #1
 8088cba:	601a      	strpl	r2, [r3, #0]
 8088cbc:	4b0c      	ldr	r3, [pc, #48]	; (8088cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8088cbe:	681a      	ldr	r2, [r3, #0]
 8088cc0:	07d1      	lsls	r1, r2, #31
 8088cc2:	bf5c      	itt	pl
 8088cc4:	2201      	movpl	r2, #1
 8088cc6:	601a      	strpl	r2, [r3, #0]
 8088cc8:	4b0a      	ldr	r3, [pc, #40]	; (8088cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8088cca:	681a      	ldr	r2, [r3, #0]
 8088ccc:	07d2      	lsls	r2, r2, #31
 8088cce:	bf5c      	itt	pl
 8088cd0:	2201      	movpl	r2, #1
 8088cd2:	601a      	strpl	r2, [r3, #0]
 8088cd4:	4770      	bx	lr
 8088cd6:	bf00      	nop
 8088cd8:	20000f28 	.word	0x20000f28
 8088cdc:	20000f24 	.word	0x20000f24
 8088ce0:	20000f20 	.word	0x20000f20
 8088ce4:	20000f1c 	.word	0x20000f1c
 8088ce8:	20000f18 	.word	0x20000f18
 8088cec:	20000f14 	.word	0x20000f14
 8088cf0:	20000f10 	.word	0x20000f10
 8088cf4:	20000f0c 	.word	0x20000f0c

08088cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8088cf8:	4b24      	ldr	r3, [pc, #144]	; (8088d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8088cfa:	681a      	ldr	r2, [r3, #0]
 8088cfc:	07d0      	lsls	r0, r2, #31
 8088cfe:	bf5c      	itt	pl
 8088d00:	2201      	movpl	r2, #1
 8088d02:	601a      	strpl	r2, [r3, #0]
 8088d04:	4b22      	ldr	r3, [pc, #136]	; (8088d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8088d06:	681a      	ldr	r2, [r3, #0]
 8088d08:	07d1      	lsls	r1, r2, #31
 8088d0a:	bf5c      	itt	pl
 8088d0c:	2201      	movpl	r2, #1
 8088d0e:	601a      	strpl	r2, [r3, #0]
 8088d10:	4b20      	ldr	r3, [pc, #128]	; (8088d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8088d12:	681a      	ldr	r2, [r3, #0]
 8088d14:	07d2      	lsls	r2, r2, #31
 8088d16:	bf5c      	itt	pl
 8088d18:	2201      	movpl	r2, #1
 8088d1a:	601a      	strpl	r2, [r3, #0]
 8088d1c:	4b1e      	ldr	r3, [pc, #120]	; (8088d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8088d1e:	681a      	ldr	r2, [r3, #0]
 8088d20:	07d0      	lsls	r0, r2, #31
 8088d22:	bf5c      	itt	pl
 8088d24:	2201      	movpl	r2, #1
 8088d26:	601a      	strpl	r2, [r3, #0]
 8088d28:	4b1c      	ldr	r3, [pc, #112]	; (8088d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8088d2a:	681a      	ldr	r2, [r3, #0]
 8088d2c:	07d1      	lsls	r1, r2, #31
 8088d2e:	bf5c      	itt	pl
 8088d30:	2201      	movpl	r2, #1
 8088d32:	601a      	strpl	r2, [r3, #0]
 8088d34:	4b1a      	ldr	r3, [pc, #104]	; (8088da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8088d36:	681a      	ldr	r2, [r3, #0]
 8088d38:	07d2      	lsls	r2, r2, #31
 8088d3a:	bf5c      	itt	pl
 8088d3c:	2201      	movpl	r2, #1
 8088d3e:	601a      	strpl	r2, [r3, #0]
 8088d40:	4b18      	ldr	r3, [pc, #96]	; (8088da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8088d42:	681a      	ldr	r2, [r3, #0]
 8088d44:	07d0      	lsls	r0, r2, #31
 8088d46:	bf5c      	itt	pl
 8088d48:	2201      	movpl	r2, #1
 8088d4a:	601a      	strpl	r2, [r3, #0]
 8088d4c:	4b16      	ldr	r3, [pc, #88]	; (8088da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8088d4e:	681a      	ldr	r2, [r3, #0]
 8088d50:	07d1      	lsls	r1, r2, #31
 8088d52:	bf5c      	itt	pl
 8088d54:	2201      	movpl	r2, #1
 8088d56:	601a      	strpl	r2, [r3, #0]
 8088d58:	4b14      	ldr	r3, [pc, #80]	; (8088dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8088d5a:	681a      	ldr	r2, [r3, #0]
 8088d5c:	07d2      	lsls	r2, r2, #31
 8088d5e:	bf5c      	itt	pl
 8088d60:	2201      	movpl	r2, #1
 8088d62:	601a      	strpl	r2, [r3, #0]
 8088d64:	4b12      	ldr	r3, [pc, #72]	; (8088db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8088d66:	681a      	ldr	r2, [r3, #0]
 8088d68:	07d0      	lsls	r0, r2, #31
 8088d6a:	bf5c      	itt	pl
 8088d6c:	2201      	movpl	r2, #1
 8088d6e:	601a      	strpl	r2, [r3, #0]
 8088d70:	4b10      	ldr	r3, [pc, #64]	; (8088db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8088d72:	681a      	ldr	r2, [r3, #0]
 8088d74:	07d1      	lsls	r1, r2, #31
 8088d76:	bf5c      	itt	pl
 8088d78:	2201      	movpl	r2, #1
 8088d7a:	601a      	strpl	r2, [r3, #0]
 8088d7c:	4b0e      	ldr	r3, [pc, #56]	; (8088db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8088d7e:	681a      	ldr	r2, [r3, #0]
 8088d80:	07d2      	lsls	r2, r2, #31
 8088d82:	bf5c      	itt	pl
 8088d84:	2201      	movpl	r2, #1
 8088d86:	601a      	strpl	r2, [r3, #0]
 8088d88:	4770      	bx	lr
 8088d8a:	bf00      	nop
 8088d8c:	20000f58 	.word	0x20000f58
 8088d90:	20000f54 	.word	0x20000f54
 8088d94:	20000f50 	.word	0x20000f50
 8088d98:	20000f4c 	.word	0x20000f4c
 8088d9c:	20000f48 	.word	0x20000f48
 8088da0:	20000f44 	.word	0x20000f44
 8088da4:	20000f40 	.word	0x20000f40
 8088da8:	20000f3c 	.word	0x20000f3c
 8088dac:	20000f38 	.word	0x20000f38
 8088db0:	20000f34 	.word	0x20000f34
 8088db4:	20000f30 	.word	0x20000f30
 8088db8:	20000f2c 	.word	0x20000f2c

08088dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8088dbc:	4b24      	ldr	r3, [pc, #144]	; (8088e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8088dbe:	681a      	ldr	r2, [r3, #0]
 8088dc0:	07d0      	lsls	r0, r2, #31
 8088dc2:	bf5c      	itt	pl
 8088dc4:	2201      	movpl	r2, #1
 8088dc6:	601a      	strpl	r2, [r3, #0]
 8088dc8:	4b22      	ldr	r3, [pc, #136]	; (8088e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8088dca:	681a      	ldr	r2, [r3, #0]
 8088dcc:	07d1      	lsls	r1, r2, #31
 8088dce:	bf5c      	itt	pl
 8088dd0:	2201      	movpl	r2, #1
 8088dd2:	601a      	strpl	r2, [r3, #0]
 8088dd4:	4b20      	ldr	r3, [pc, #128]	; (8088e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8088dd6:	681a      	ldr	r2, [r3, #0]
 8088dd8:	07d2      	lsls	r2, r2, #31
 8088dda:	bf5c      	itt	pl
 8088ddc:	2201      	movpl	r2, #1
 8088dde:	601a      	strpl	r2, [r3, #0]
 8088de0:	4b1e      	ldr	r3, [pc, #120]	; (8088e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8088de2:	681a      	ldr	r2, [r3, #0]
 8088de4:	07d0      	lsls	r0, r2, #31
 8088de6:	bf5c      	itt	pl
 8088de8:	2201      	movpl	r2, #1
 8088dea:	601a      	strpl	r2, [r3, #0]
 8088dec:	4b1c      	ldr	r3, [pc, #112]	; (8088e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8088dee:	681a      	ldr	r2, [r3, #0]
 8088df0:	07d1      	lsls	r1, r2, #31
 8088df2:	bf5c      	itt	pl
 8088df4:	2201      	movpl	r2, #1
 8088df6:	601a      	strpl	r2, [r3, #0]
 8088df8:	4b1a      	ldr	r3, [pc, #104]	; (8088e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8088dfa:	681a      	ldr	r2, [r3, #0]
 8088dfc:	07d2      	lsls	r2, r2, #31
 8088dfe:	bf5c      	itt	pl
 8088e00:	2201      	movpl	r2, #1
 8088e02:	601a      	strpl	r2, [r3, #0]
 8088e04:	4b18      	ldr	r3, [pc, #96]	; (8088e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8088e06:	681a      	ldr	r2, [r3, #0]
 8088e08:	07d0      	lsls	r0, r2, #31
 8088e0a:	bf5c      	itt	pl
 8088e0c:	2201      	movpl	r2, #1
 8088e0e:	601a      	strpl	r2, [r3, #0]
 8088e10:	4b16      	ldr	r3, [pc, #88]	; (8088e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8088e12:	681a      	ldr	r2, [r3, #0]
 8088e14:	07d1      	lsls	r1, r2, #31
 8088e16:	bf5c      	itt	pl
 8088e18:	2201      	movpl	r2, #1
 8088e1a:	601a      	strpl	r2, [r3, #0]
 8088e1c:	4b14      	ldr	r3, [pc, #80]	; (8088e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8088e1e:	681a      	ldr	r2, [r3, #0]
 8088e20:	07d2      	lsls	r2, r2, #31
 8088e22:	bf5c      	itt	pl
 8088e24:	2201      	movpl	r2, #1
 8088e26:	601a      	strpl	r2, [r3, #0]
 8088e28:	4b12      	ldr	r3, [pc, #72]	; (8088e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8088e2a:	681a      	ldr	r2, [r3, #0]
 8088e2c:	07d0      	lsls	r0, r2, #31
 8088e2e:	bf5c      	itt	pl
 8088e30:	2201      	movpl	r2, #1
 8088e32:	601a      	strpl	r2, [r3, #0]
 8088e34:	4b10      	ldr	r3, [pc, #64]	; (8088e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8088e36:	681a      	ldr	r2, [r3, #0]
 8088e38:	07d1      	lsls	r1, r2, #31
 8088e3a:	bf5c      	itt	pl
 8088e3c:	2201      	movpl	r2, #1
 8088e3e:	601a      	strpl	r2, [r3, #0]
 8088e40:	4b0e      	ldr	r3, [pc, #56]	; (8088e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8088e42:	681a      	ldr	r2, [r3, #0]
 8088e44:	07d2      	lsls	r2, r2, #31
 8088e46:	bf5c      	itt	pl
 8088e48:	2201      	movpl	r2, #1
 8088e4a:	601a      	strpl	r2, [r3, #0]
 8088e4c:	4770      	bx	lr
 8088e4e:	bf00      	nop
 8088e50:	20000f88 	.word	0x20000f88
 8088e54:	20000f84 	.word	0x20000f84
 8088e58:	20000f80 	.word	0x20000f80
 8088e5c:	20000f7c 	.word	0x20000f7c
 8088e60:	20000f78 	.word	0x20000f78
 8088e64:	20000f74 	.word	0x20000f74
 8088e68:	20000f70 	.word	0x20000f70
 8088e6c:	20000f6c 	.word	0x20000f6c
 8088e70:	20000f68 	.word	0x20000f68
 8088e74:	20000f64 	.word	0x20000f64
 8088e78:	20000f60 	.word	0x20000f60
 8088e7c:	20000f5c 	.word	0x20000f5c

08088e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8088e80:	4b18      	ldr	r3, [pc, #96]	; (8088ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8088e82:	681a      	ldr	r2, [r3, #0]
 8088e84:	07d1      	lsls	r1, r2, #31
 8088e86:	bf5c      	itt	pl
 8088e88:	2201      	movpl	r2, #1
 8088e8a:	601a      	strpl	r2, [r3, #0]
 8088e8c:	4b16      	ldr	r3, [pc, #88]	; (8088ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8088e8e:	681a      	ldr	r2, [r3, #0]
 8088e90:	07d2      	lsls	r2, r2, #31
 8088e92:	bf5c      	itt	pl
 8088e94:	2201      	movpl	r2, #1
 8088e96:	601a      	strpl	r2, [r3, #0]
 8088e98:	4b14      	ldr	r3, [pc, #80]	; (8088eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8088e9a:	681a      	ldr	r2, [r3, #0]
 8088e9c:	07d0      	lsls	r0, r2, #31
 8088e9e:	bf5c      	itt	pl
 8088ea0:	2201      	movpl	r2, #1
 8088ea2:	601a      	strpl	r2, [r3, #0]
 8088ea4:	4b12      	ldr	r3, [pc, #72]	; (8088ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8088ea6:	681a      	ldr	r2, [r3, #0]
 8088ea8:	07d1      	lsls	r1, r2, #31
 8088eaa:	bf5c      	itt	pl
 8088eac:	2201      	movpl	r2, #1
 8088eae:	601a      	strpl	r2, [r3, #0]
 8088eb0:	4b10      	ldr	r3, [pc, #64]	; (8088ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8088eb2:	681a      	ldr	r2, [r3, #0]
 8088eb4:	07d2      	lsls	r2, r2, #31
 8088eb6:	bf5c      	itt	pl
 8088eb8:	2201      	movpl	r2, #1
 8088eba:	601a      	strpl	r2, [r3, #0]
 8088ebc:	4b0e      	ldr	r3, [pc, #56]	; (8088ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8088ebe:	681a      	ldr	r2, [r3, #0]
 8088ec0:	07d0      	lsls	r0, r2, #31
 8088ec2:	bf5c      	itt	pl
 8088ec4:	2201      	movpl	r2, #1
 8088ec6:	601a      	strpl	r2, [r3, #0]
 8088ec8:	4b0c      	ldr	r3, [pc, #48]	; (8088efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8088eca:	681a      	ldr	r2, [r3, #0]
 8088ecc:	07d1      	lsls	r1, r2, #31
 8088ece:	bf5c      	itt	pl
 8088ed0:	2201      	movpl	r2, #1
 8088ed2:	601a      	strpl	r2, [r3, #0]
 8088ed4:	4b0a      	ldr	r3, [pc, #40]	; (8088f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8088ed6:	681a      	ldr	r2, [r3, #0]
 8088ed8:	07d2      	lsls	r2, r2, #31
 8088eda:	bf5c      	itt	pl
 8088edc:	2201      	movpl	r2, #1
 8088ede:	601a      	strpl	r2, [r3, #0]
 8088ee0:	4770      	bx	lr
 8088ee2:	bf00      	nop
 8088ee4:	20000fa8 	.word	0x20000fa8
 8088ee8:	20000fa4 	.word	0x20000fa4
 8088eec:	20000fa0 	.word	0x20000fa0
 8088ef0:	20000f9c 	.word	0x20000f9c
 8088ef4:	20000f98 	.word	0x20000f98
 8088ef8:	20000f94 	.word	0x20000f94
 8088efc:	20000f90 	.word	0x20000f90
 8088f00:	20000f8c 	.word	0x20000f8c

08088f04 <__aeabi_drsub>:
 8088f04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8088f08:	e002      	b.n	8088f10 <__adddf3>
 8088f0a:	bf00      	nop

08088f0c <__aeabi_dsub>:
 8088f0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08088f10 <__adddf3>:
 8088f10:	b530      	push	{r4, r5, lr}
 8088f12:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8088f16:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8088f1a:	ea94 0f05 	teq	r4, r5
 8088f1e:	bf08      	it	eq
 8088f20:	ea90 0f02 	teqeq	r0, r2
 8088f24:	bf1f      	itttt	ne
 8088f26:	ea54 0c00 	orrsne.w	ip, r4, r0
 8088f2a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8088f2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8088f32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8088f36:	f000 80e2 	beq.w	80890fe <__adddf3+0x1ee>
 8088f3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8088f3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8088f42:	bfb8      	it	lt
 8088f44:	426d      	neglt	r5, r5
 8088f46:	dd0c      	ble.n	8088f62 <__adddf3+0x52>
 8088f48:	442c      	add	r4, r5
 8088f4a:	ea80 0202 	eor.w	r2, r0, r2
 8088f4e:	ea81 0303 	eor.w	r3, r1, r3
 8088f52:	ea82 0000 	eor.w	r0, r2, r0
 8088f56:	ea83 0101 	eor.w	r1, r3, r1
 8088f5a:	ea80 0202 	eor.w	r2, r0, r2
 8088f5e:	ea81 0303 	eor.w	r3, r1, r3
 8088f62:	2d36      	cmp	r5, #54	; 0x36
 8088f64:	bf88      	it	hi
 8088f66:	bd30      	pophi	{r4, r5, pc}
 8088f68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8088f6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8088f70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8088f74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8088f78:	d002      	beq.n	8088f80 <__adddf3+0x70>
 8088f7a:	4240      	negs	r0, r0
 8088f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088f80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8088f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088f88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8088f8c:	d002      	beq.n	8088f94 <__adddf3+0x84>
 8088f8e:	4252      	negs	r2, r2
 8088f90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8088f94:	ea94 0f05 	teq	r4, r5
 8088f98:	f000 80a7 	beq.w	80890ea <__adddf3+0x1da>
 8088f9c:	f1a4 0401 	sub.w	r4, r4, #1
 8088fa0:	f1d5 0e20 	rsbs	lr, r5, #32
 8088fa4:	db0d      	blt.n	8088fc2 <__adddf3+0xb2>
 8088fa6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8088faa:	fa22 f205 	lsr.w	r2, r2, r5
 8088fae:	1880      	adds	r0, r0, r2
 8088fb0:	f141 0100 	adc.w	r1, r1, #0
 8088fb4:	fa03 f20e 	lsl.w	r2, r3, lr
 8088fb8:	1880      	adds	r0, r0, r2
 8088fba:	fa43 f305 	asr.w	r3, r3, r5
 8088fbe:	4159      	adcs	r1, r3
 8088fc0:	e00e      	b.n	8088fe0 <__adddf3+0xd0>
 8088fc2:	f1a5 0520 	sub.w	r5, r5, #32
 8088fc6:	f10e 0e20 	add.w	lr, lr, #32
 8088fca:	2a01      	cmp	r2, #1
 8088fcc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8088fd0:	bf28      	it	cs
 8088fd2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8088fd6:	fa43 f305 	asr.w	r3, r3, r5
 8088fda:	18c0      	adds	r0, r0, r3
 8088fdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8088fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088fe4:	d507      	bpl.n	8088ff6 <__adddf3+0xe6>
 8088fe6:	f04f 0e00 	mov.w	lr, #0
 8088fea:	f1dc 0c00 	rsbs	ip, ip, #0
 8088fee:	eb7e 0000 	sbcs.w	r0, lr, r0
 8088ff2:	eb6e 0101 	sbc.w	r1, lr, r1
 8088ff6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8088ffa:	d31b      	bcc.n	8089034 <__adddf3+0x124>
 8088ffc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089000:	d30c      	bcc.n	808901c <__adddf3+0x10c>
 8089002:	0849      	lsrs	r1, r1, #1
 8089004:	ea5f 0030 	movs.w	r0, r0, rrx
 8089008:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808900c:	f104 0401 	add.w	r4, r4, #1
 8089010:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089014:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089018:	f080 809a 	bcs.w	8089150 <__adddf3+0x240>
 808901c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089020:	bf08      	it	eq
 8089022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089026:	f150 0000 	adcs.w	r0, r0, #0
 808902a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808902e:	ea41 0105 	orr.w	r1, r1, r5
 8089032:	bd30      	pop	{r4, r5, pc}
 8089034:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089038:	4140      	adcs	r0, r0
 808903a:	eb41 0101 	adc.w	r1, r1, r1
 808903e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089042:	f1a4 0401 	sub.w	r4, r4, #1
 8089046:	d1e9      	bne.n	808901c <__adddf3+0x10c>
 8089048:	f091 0f00 	teq	r1, #0
 808904c:	bf04      	itt	eq
 808904e:	4601      	moveq	r1, r0
 8089050:	2000      	moveq	r0, #0
 8089052:	fab1 f381 	clz	r3, r1
 8089056:	bf08      	it	eq
 8089058:	3320      	addeq	r3, #32
 808905a:	f1a3 030b 	sub.w	r3, r3, #11
 808905e:	f1b3 0220 	subs.w	r2, r3, #32
 8089062:	da0c      	bge.n	808907e <__adddf3+0x16e>
 8089064:	320c      	adds	r2, #12
 8089066:	dd08      	ble.n	808907a <__adddf3+0x16a>
 8089068:	f102 0c14 	add.w	ip, r2, #20
 808906c:	f1c2 020c 	rsb	r2, r2, #12
 8089070:	fa01 f00c 	lsl.w	r0, r1, ip
 8089074:	fa21 f102 	lsr.w	r1, r1, r2
 8089078:	e00c      	b.n	8089094 <__adddf3+0x184>
 808907a:	f102 0214 	add.w	r2, r2, #20
 808907e:	bfd8      	it	le
 8089080:	f1c2 0c20 	rsble	ip, r2, #32
 8089084:	fa01 f102 	lsl.w	r1, r1, r2
 8089088:	fa20 fc0c 	lsr.w	ip, r0, ip
 808908c:	bfdc      	itt	le
 808908e:	ea41 010c 	orrle.w	r1, r1, ip
 8089092:	4090      	lslle	r0, r2
 8089094:	1ae4      	subs	r4, r4, r3
 8089096:	bfa2      	ittt	ge
 8089098:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808909c:	4329      	orrge	r1, r5
 808909e:	bd30      	popge	{r4, r5, pc}
 80890a0:	ea6f 0404 	mvn.w	r4, r4
 80890a4:	3c1f      	subs	r4, #31
 80890a6:	da1c      	bge.n	80890e2 <__adddf3+0x1d2>
 80890a8:	340c      	adds	r4, #12
 80890aa:	dc0e      	bgt.n	80890ca <__adddf3+0x1ba>
 80890ac:	f104 0414 	add.w	r4, r4, #20
 80890b0:	f1c4 0220 	rsb	r2, r4, #32
 80890b4:	fa20 f004 	lsr.w	r0, r0, r4
 80890b8:	fa01 f302 	lsl.w	r3, r1, r2
 80890bc:	ea40 0003 	orr.w	r0, r0, r3
 80890c0:	fa21 f304 	lsr.w	r3, r1, r4
 80890c4:	ea45 0103 	orr.w	r1, r5, r3
 80890c8:	bd30      	pop	{r4, r5, pc}
 80890ca:	f1c4 040c 	rsb	r4, r4, #12
 80890ce:	f1c4 0220 	rsb	r2, r4, #32
 80890d2:	fa20 f002 	lsr.w	r0, r0, r2
 80890d6:	fa01 f304 	lsl.w	r3, r1, r4
 80890da:	ea40 0003 	orr.w	r0, r0, r3
 80890de:	4629      	mov	r1, r5
 80890e0:	bd30      	pop	{r4, r5, pc}
 80890e2:	fa21 f004 	lsr.w	r0, r1, r4
 80890e6:	4629      	mov	r1, r5
 80890e8:	bd30      	pop	{r4, r5, pc}
 80890ea:	f094 0f00 	teq	r4, #0
 80890ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80890f2:	bf06      	itte	eq
 80890f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80890f8:	3401      	addeq	r4, #1
 80890fa:	3d01      	subne	r5, #1
 80890fc:	e74e      	b.n	8088f9c <__adddf3+0x8c>
 80890fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089102:	bf18      	it	ne
 8089104:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089108:	d029      	beq.n	808915e <__adddf3+0x24e>
 808910a:	ea94 0f05 	teq	r4, r5
 808910e:	bf08      	it	eq
 8089110:	ea90 0f02 	teqeq	r0, r2
 8089114:	d005      	beq.n	8089122 <__adddf3+0x212>
 8089116:	ea54 0c00 	orrs.w	ip, r4, r0
 808911a:	bf04      	itt	eq
 808911c:	4619      	moveq	r1, r3
 808911e:	4610      	moveq	r0, r2
 8089120:	bd30      	pop	{r4, r5, pc}
 8089122:	ea91 0f03 	teq	r1, r3
 8089126:	bf1e      	ittt	ne
 8089128:	2100      	movne	r1, #0
 808912a:	2000      	movne	r0, #0
 808912c:	bd30      	popne	{r4, r5, pc}
 808912e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089132:	d105      	bne.n	8089140 <__adddf3+0x230>
 8089134:	0040      	lsls	r0, r0, #1
 8089136:	4149      	adcs	r1, r1
 8089138:	bf28      	it	cs
 808913a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808913e:	bd30      	pop	{r4, r5, pc}
 8089140:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089144:	bf3c      	itt	cc
 8089146:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808914a:	bd30      	popcc	{r4, r5, pc}
 808914c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089150:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089158:	f04f 0000 	mov.w	r0, #0
 808915c:	bd30      	pop	{r4, r5, pc}
 808915e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089162:	bf1a      	itte	ne
 8089164:	4619      	movne	r1, r3
 8089166:	4610      	movne	r0, r2
 8089168:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808916c:	bf1c      	itt	ne
 808916e:	460b      	movne	r3, r1
 8089170:	4602      	movne	r2, r0
 8089172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089176:	bf06      	itte	eq
 8089178:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808917c:	ea91 0f03 	teqeq	r1, r3
 8089180:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089184:	bd30      	pop	{r4, r5, pc}
 8089186:	bf00      	nop

08089188 <__aeabi_ui2d>:
 8089188:	f090 0f00 	teq	r0, #0
 808918c:	bf04      	itt	eq
 808918e:	2100      	moveq	r1, #0
 8089190:	4770      	bxeq	lr
 8089192:	b530      	push	{r4, r5, lr}
 8089194:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089198:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808919c:	f04f 0500 	mov.w	r5, #0
 80891a0:	f04f 0100 	mov.w	r1, #0
 80891a4:	e750      	b.n	8089048 <__adddf3+0x138>
 80891a6:	bf00      	nop

080891a8 <__aeabi_i2d>:
 80891a8:	f090 0f00 	teq	r0, #0
 80891ac:	bf04      	itt	eq
 80891ae:	2100      	moveq	r1, #0
 80891b0:	4770      	bxeq	lr
 80891b2:	b530      	push	{r4, r5, lr}
 80891b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80891b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80891bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80891c0:	bf48      	it	mi
 80891c2:	4240      	negmi	r0, r0
 80891c4:	f04f 0100 	mov.w	r1, #0
 80891c8:	e73e      	b.n	8089048 <__adddf3+0x138>
 80891ca:	bf00      	nop

080891cc <__aeabi_f2d>:
 80891cc:	0042      	lsls	r2, r0, #1
 80891ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80891d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80891d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80891da:	bf1f      	itttt	ne
 80891dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80891e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80891e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80891e8:	4770      	bxne	lr
 80891ea:	f092 0f00 	teq	r2, #0
 80891ee:	bf14      	ite	ne
 80891f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80891f4:	4770      	bxeq	lr
 80891f6:	b530      	push	{r4, r5, lr}
 80891f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80891fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089204:	e720      	b.n	8089048 <__adddf3+0x138>
 8089206:	bf00      	nop

08089208 <__aeabi_ul2d>:
 8089208:	ea50 0201 	orrs.w	r2, r0, r1
 808920c:	bf08      	it	eq
 808920e:	4770      	bxeq	lr
 8089210:	b530      	push	{r4, r5, lr}
 8089212:	f04f 0500 	mov.w	r5, #0
 8089216:	e00a      	b.n	808922e <__aeabi_l2d+0x16>

08089218 <__aeabi_l2d>:
 8089218:	ea50 0201 	orrs.w	r2, r0, r1
 808921c:	bf08      	it	eq
 808921e:	4770      	bxeq	lr
 8089220:	b530      	push	{r4, r5, lr}
 8089222:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089226:	d502      	bpl.n	808922e <__aeabi_l2d+0x16>
 8089228:	4240      	negs	r0, r0
 808922a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808922e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089232:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089236:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808923a:	f43f aedc 	beq.w	8088ff6 <__adddf3+0xe6>
 808923e:	f04f 0203 	mov.w	r2, #3
 8089242:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089246:	bf18      	it	ne
 8089248:	3203      	addne	r2, #3
 808924a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808924e:	bf18      	it	ne
 8089250:	3203      	addne	r2, #3
 8089252:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089256:	f1c2 0320 	rsb	r3, r2, #32
 808925a:	fa00 fc03 	lsl.w	ip, r0, r3
 808925e:	fa20 f002 	lsr.w	r0, r0, r2
 8089262:	fa01 fe03 	lsl.w	lr, r1, r3
 8089266:	ea40 000e 	orr.w	r0, r0, lr
 808926a:	fa21 f102 	lsr.w	r1, r1, r2
 808926e:	4414      	add	r4, r2
 8089270:	e6c1      	b.n	8088ff6 <__adddf3+0xe6>
 8089272:	bf00      	nop

08089274 <__aeabi_dmul>:
 8089274:	b570      	push	{r4, r5, r6, lr}
 8089276:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808927a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808927e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089282:	bf1d      	ittte	ne
 8089284:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089288:	ea94 0f0c 	teqne	r4, ip
 808928c:	ea95 0f0c 	teqne	r5, ip
 8089290:	f000 f8de 	bleq	8089450 <__aeabi_dmul+0x1dc>
 8089294:	442c      	add	r4, r5
 8089296:	ea81 0603 	eor.w	r6, r1, r3
 808929a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808929e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80892a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80892a6:	bf18      	it	ne
 80892a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80892ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80892b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80892b4:	d038      	beq.n	8089328 <__aeabi_dmul+0xb4>
 80892b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80892ba:	f04f 0500 	mov.w	r5, #0
 80892be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80892c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80892c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80892ca:	f04f 0600 	mov.w	r6, #0
 80892ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80892d2:	f09c 0f00 	teq	ip, #0
 80892d6:	bf18      	it	ne
 80892d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80892dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80892e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80892e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80892e8:	d204      	bcs.n	80892f4 <__aeabi_dmul+0x80>
 80892ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80892ee:	416d      	adcs	r5, r5
 80892f0:	eb46 0606 	adc.w	r6, r6, r6
 80892f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80892f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80892fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8089300:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8089304:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8089308:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808930c:	bf88      	it	hi
 808930e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089312:	d81e      	bhi.n	8089352 <__aeabi_dmul+0xde>
 8089314:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8089318:	bf08      	it	eq
 808931a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808931e:	f150 0000 	adcs.w	r0, r0, #0
 8089322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089326:	bd70      	pop	{r4, r5, r6, pc}
 8089328:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808932c:	ea46 0101 	orr.w	r1, r6, r1
 8089330:	ea40 0002 	orr.w	r0, r0, r2
 8089334:	ea81 0103 	eor.w	r1, r1, r3
 8089338:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808933c:	bfc2      	ittt	gt
 808933e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089342:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089346:	bd70      	popgt	{r4, r5, r6, pc}
 8089348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808934c:	f04f 0e00 	mov.w	lr, #0
 8089350:	3c01      	subs	r4, #1
 8089352:	f300 80ab 	bgt.w	80894ac <__aeabi_dmul+0x238>
 8089356:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808935a:	bfde      	ittt	le
 808935c:	2000      	movle	r0, #0
 808935e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8089362:	bd70      	pople	{r4, r5, r6, pc}
 8089364:	f1c4 0400 	rsb	r4, r4, #0
 8089368:	3c20      	subs	r4, #32
 808936a:	da35      	bge.n	80893d8 <__aeabi_dmul+0x164>
 808936c:	340c      	adds	r4, #12
 808936e:	dc1b      	bgt.n	80893a8 <__aeabi_dmul+0x134>
 8089370:	f104 0414 	add.w	r4, r4, #20
 8089374:	f1c4 0520 	rsb	r5, r4, #32
 8089378:	fa00 f305 	lsl.w	r3, r0, r5
 808937c:	fa20 f004 	lsr.w	r0, r0, r4
 8089380:	fa01 f205 	lsl.w	r2, r1, r5
 8089384:	ea40 0002 	orr.w	r0, r0, r2
 8089388:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808938c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089394:	fa21 f604 	lsr.w	r6, r1, r4
 8089398:	eb42 0106 	adc.w	r1, r2, r6
 808939c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80893a0:	bf08      	it	eq
 80893a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80893a6:	bd70      	pop	{r4, r5, r6, pc}
 80893a8:	f1c4 040c 	rsb	r4, r4, #12
 80893ac:	f1c4 0520 	rsb	r5, r4, #32
 80893b0:	fa00 f304 	lsl.w	r3, r0, r4
 80893b4:	fa20 f005 	lsr.w	r0, r0, r5
 80893b8:	fa01 f204 	lsl.w	r2, r1, r4
 80893bc:	ea40 0002 	orr.w	r0, r0, r2
 80893c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80893c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80893c8:	f141 0100 	adc.w	r1, r1, #0
 80893cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80893d0:	bf08      	it	eq
 80893d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80893d6:	bd70      	pop	{r4, r5, r6, pc}
 80893d8:	f1c4 0520 	rsb	r5, r4, #32
 80893dc:	fa00 f205 	lsl.w	r2, r0, r5
 80893e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80893e4:	fa20 f304 	lsr.w	r3, r0, r4
 80893e8:	fa01 f205 	lsl.w	r2, r1, r5
 80893ec:	ea43 0302 	orr.w	r3, r3, r2
 80893f0:	fa21 f004 	lsr.w	r0, r1, r4
 80893f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80893f8:	fa21 f204 	lsr.w	r2, r1, r4
 80893fc:	ea20 0002 	bic.w	r0, r0, r2
 8089400:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8089404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089408:	bf08      	it	eq
 808940a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808940e:	bd70      	pop	{r4, r5, r6, pc}
 8089410:	f094 0f00 	teq	r4, #0
 8089414:	d10f      	bne.n	8089436 <__aeabi_dmul+0x1c2>
 8089416:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808941a:	0040      	lsls	r0, r0, #1
 808941c:	eb41 0101 	adc.w	r1, r1, r1
 8089420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089424:	bf08      	it	eq
 8089426:	3c01      	subeq	r4, #1
 8089428:	d0f7      	beq.n	808941a <__aeabi_dmul+0x1a6>
 808942a:	ea41 0106 	orr.w	r1, r1, r6
 808942e:	f095 0f00 	teq	r5, #0
 8089432:	bf18      	it	ne
 8089434:	4770      	bxne	lr
 8089436:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808943a:	0052      	lsls	r2, r2, #1
 808943c:	eb43 0303 	adc.w	r3, r3, r3
 8089440:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8089444:	bf08      	it	eq
 8089446:	3d01      	subeq	r5, #1
 8089448:	d0f7      	beq.n	808943a <__aeabi_dmul+0x1c6>
 808944a:	ea43 0306 	orr.w	r3, r3, r6
 808944e:	4770      	bx	lr
 8089450:	ea94 0f0c 	teq	r4, ip
 8089454:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8089458:	bf18      	it	ne
 808945a:	ea95 0f0c 	teqne	r5, ip
 808945e:	d00c      	beq.n	808947a <__aeabi_dmul+0x206>
 8089460:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089464:	bf18      	it	ne
 8089466:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808946a:	d1d1      	bne.n	8089410 <__aeabi_dmul+0x19c>
 808946c:	ea81 0103 	eor.w	r1, r1, r3
 8089470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089474:	f04f 0000 	mov.w	r0, #0
 8089478:	bd70      	pop	{r4, r5, r6, pc}
 808947a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808947e:	bf06      	itte	eq
 8089480:	4610      	moveq	r0, r2
 8089482:	4619      	moveq	r1, r3
 8089484:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089488:	d019      	beq.n	80894be <__aeabi_dmul+0x24a>
 808948a:	ea94 0f0c 	teq	r4, ip
 808948e:	d102      	bne.n	8089496 <__aeabi_dmul+0x222>
 8089490:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8089494:	d113      	bne.n	80894be <__aeabi_dmul+0x24a>
 8089496:	ea95 0f0c 	teq	r5, ip
 808949a:	d105      	bne.n	80894a8 <__aeabi_dmul+0x234>
 808949c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80894a0:	bf1c      	itt	ne
 80894a2:	4610      	movne	r0, r2
 80894a4:	4619      	movne	r1, r3
 80894a6:	d10a      	bne.n	80894be <__aeabi_dmul+0x24a>
 80894a8:	ea81 0103 	eor.w	r1, r1, r3
 80894ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80894b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80894b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80894b8:	f04f 0000 	mov.w	r0, #0
 80894bc:	bd70      	pop	{r4, r5, r6, pc}
 80894be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80894c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80894c6:	bd70      	pop	{r4, r5, r6, pc}

080894c8 <__aeabi_ddiv>:
 80894c8:	b570      	push	{r4, r5, r6, lr}
 80894ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80894ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80894d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80894d6:	bf1d      	ittte	ne
 80894d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80894dc:	ea94 0f0c 	teqne	r4, ip
 80894e0:	ea95 0f0c 	teqne	r5, ip
 80894e4:	f000 f8a7 	bleq	8089636 <__aeabi_ddiv+0x16e>
 80894e8:	eba4 0405 	sub.w	r4, r4, r5
 80894ec:	ea81 0e03 	eor.w	lr, r1, r3
 80894f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80894f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80894f8:	f000 8088 	beq.w	808960c <__aeabi_ddiv+0x144>
 80894fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089500:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8089504:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8089508:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808950c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8089510:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8089514:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8089518:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808951c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8089520:	429d      	cmp	r5, r3
 8089522:	bf08      	it	eq
 8089524:	4296      	cmpeq	r6, r2
 8089526:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808952a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808952e:	d202      	bcs.n	8089536 <__aeabi_ddiv+0x6e>
 8089530:	085b      	lsrs	r3, r3, #1
 8089532:	ea4f 0232 	mov.w	r2, r2, rrx
 8089536:	1ab6      	subs	r6, r6, r2
 8089538:	eb65 0503 	sbc.w	r5, r5, r3
 808953c:	085b      	lsrs	r3, r3, #1
 808953e:	ea4f 0232 	mov.w	r2, r2, rrx
 8089542:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8089546:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808954a:	ebb6 0e02 	subs.w	lr, r6, r2
 808954e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089552:	bf22      	ittt	cs
 8089554:	1ab6      	subcs	r6, r6, r2
 8089556:	4675      	movcs	r5, lr
 8089558:	ea40 000c 	orrcs.w	r0, r0, ip
 808955c:	085b      	lsrs	r3, r3, #1
 808955e:	ea4f 0232 	mov.w	r2, r2, rrx
 8089562:	ebb6 0e02 	subs.w	lr, r6, r2
 8089566:	eb75 0e03 	sbcs.w	lr, r5, r3
 808956a:	bf22      	ittt	cs
 808956c:	1ab6      	subcs	r6, r6, r2
 808956e:	4675      	movcs	r5, lr
 8089570:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8089574:	085b      	lsrs	r3, r3, #1
 8089576:	ea4f 0232 	mov.w	r2, r2, rrx
 808957a:	ebb6 0e02 	subs.w	lr, r6, r2
 808957e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089582:	bf22      	ittt	cs
 8089584:	1ab6      	subcs	r6, r6, r2
 8089586:	4675      	movcs	r5, lr
 8089588:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808958c:	085b      	lsrs	r3, r3, #1
 808958e:	ea4f 0232 	mov.w	r2, r2, rrx
 8089592:	ebb6 0e02 	subs.w	lr, r6, r2
 8089596:	eb75 0e03 	sbcs.w	lr, r5, r3
 808959a:	bf22      	ittt	cs
 808959c:	1ab6      	subcs	r6, r6, r2
 808959e:	4675      	movcs	r5, lr
 80895a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80895a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80895a8:	d018      	beq.n	80895dc <__aeabi_ddiv+0x114>
 80895aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80895ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80895b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80895b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80895ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80895be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80895c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80895c6:	d1c0      	bne.n	808954a <__aeabi_ddiv+0x82>
 80895c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80895cc:	d10b      	bne.n	80895e6 <__aeabi_ddiv+0x11e>
 80895ce:	ea41 0100 	orr.w	r1, r1, r0
 80895d2:	f04f 0000 	mov.w	r0, #0
 80895d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80895da:	e7b6      	b.n	808954a <__aeabi_ddiv+0x82>
 80895dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80895e0:	bf04      	itt	eq
 80895e2:	4301      	orreq	r1, r0
 80895e4:	2000      	moveq	r0, #0
 80895e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80895ea:	bf88      	it	hi
 80895ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80895f0:	f63f aeaf 	bhi.w	8089352 <__aeabi_dmul+0xde>
 80895f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80895f8:	bf04      	itt	eq
 80895fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80895fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089602:	f150 0000 	adcs.w	r0, r0, #0
 8089606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808960a:	bd70      	pop	{r4, r5, r6, pc}
 808960c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8089610:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8089614:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8089618:	bfc2      	ittt	gt
 808961a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808961e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089622:	bd70      	popgt	{r4, r5, r6, pc}
 8089624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089628:	f04f 0e00 	mov.w	lr, #0
 808962c:	3c01      	subs	r4, #1
 808962e:	e690      	b.n	8089352 <__aeabi_dmul+0xde>
 8089630:	ea45 0e06 	orr.w	lr, r5, r6
 8089634:	e68d      	b.n	8089352 <__aeabi_dmul+0xde>
 8089636:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808963a:	ea94 0f0c 	teq	r4, ip
 808963e:	bf08      	it	eq
 8089640:	ea95 0f0c 	teqeq	r5, ip
 8089644:	f43f af3b 	beq.w	80894be <__aeabi_dmul+0x24a>
 8089648:	ea94 0f0c 	teq	r4, ip
 808964c:	d10a      	bne.n	8089664 <__aeabi_ddiv+0x19c>
 808964e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089652:	f47f af34 	bne.w	80894be <__aeabi_dmul+0x24a>
 8089656:	ea95 0f0c 	teq	r5, ip
 808965a:	f47f af25 	bne.w	80894a8 <__aeabi_dmul+0x234>
 808965e:	4610      	mov	r0, r2
 8089660:	4619      	mov	r1, r3
 8089662:	e72c      	b.n	80894be <__aeabi_dmul+0x24a>
 8089664:	ea95 0f0c 	teq	r5, ip
 8089668:	d106      	bne.n	8089678 <__aeabi_ddiv+0x1b0>
 808966a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808966e:	f43f aefd 	beq.w	808946c <__aeabi_dmul+0x1f8>
 8089672:	4610      	mov	r0, r2
 8089674:	4619      	mov	r1, r3
 8089676:	e722      	b.n	80894be <__aeabi_dmul+0x24a>
 8089678:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808967c:	bf18      	it	ne
 808967e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089682:	f47f aec5 	bne.w	8089410 <__aeabi_dmul+0x19c>
 8089686:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808968a:	f47f af0d 	bne.w	80894a8 <__aeabi_dmul+0x234>
 808968e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8089692:	f47f aeeb 	bne.w	808946c <__aeabi_dmul+0x1f8>
 8089696:	e712      	b.n	80894be <__aeabi_dmul+0x24a>

08089698 <__gedf2>:
 8089698:	f04f 3cff 	mov.w	ip, #4294967295
 808969c:	e006      	b.n	80896ac <__cmpdf2+0x4>
 808969e:	bf00      	nop

080896a0 <__ledf2>:
 80896a0:	f04f 0c01 	mov.w	ip, #1
 80896a4:	e002      	b.n	80896ac <__cmpdf2+0x4>
 80896a6:	bf00      	nop

080896a8 <__cmpdf2>:
 80896a8:	f04f 0c01 	mov.w	ip, #1
 80896ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80896b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80896b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80896b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80896bc:	bf18      	it	ne
 80896be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80896c2:	d01b      	beq.n	80896fc <__cmpdf2+0x54>
 80896c4:	b001      	add	sp, #4
 80896c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80896ca:	bf0c      	ite	eq
 80896cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80896d0:	ea91 0f03 	teqne	r1, r3
 80896d4:	bf02      	ittt	eq
 80896d6:	ea90 0f02 	teqeq	r0, r2
 80896da:	2000      	moveq	r0, #0
 80896dc:	4770      	bxeq	lr
 80896de:	f110 0f00 	cmn.w	r0, #0
 80896e2:	ea91 0f03 	teq	r1, r3
 80896e6:	bf58      	it	pl
 80896e8:	4299      	cmppl	r1, r3
 80896ea:	bf08      	it	eq
 80896ec:	4290      	cmpeq	r0, r2
 80896ee:	bf2c      	ite	cs
 80896f0:	17d8      	asrcs	r0, r3, #31
 80896f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80896f6:	f040 0001 	orr.w	r0, r0, #1
 80896fa:	4770      	bx	lr
 80896fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8089700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089704:	d102      	bne.n	808970c <__cmpdf2+0x64>
 8089706:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808970a:	d107      	bne.n	808971c <__cmpdf2+0x74>
 808970c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8089710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089714:	d1d6      	bne.n	80896c4 <__cmpdf2+0x1c>
 8089716:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808971a:	d0d3      	beq.n	80896c4 <__cmpdf2+0x1c>
 808971c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8089720:	4770      	bx	lr
 8089722:	bf00      	nop

08089724 <__aeabi_cdrcmple>:
 8089724:	4684      	mov	ip, r0
 8089726:	4610      	mov	r0, r2
 8089728:	4662      	mov	r2, ip
 808972a:	468c      	mov	ip, r1
 808972c:	4619      	mov	r1, r3
 808972e:	4663      	mov	r3, ip
 8089730:	e000      	b.n	8089734 <__aeabi_cdcmpeq>
 8089732:	bf00      	nop

08089734 <__aeabi_cdcmpeq>:
 8089734:	b501      	push	{r0, lr}
 8089736:	f7ff ffb7 	bl	80896a8 <__cmpdf2>
 808973a:	2800      	cmp	r0, #0
 808973c:	bf48      	it	mi
 808973e:	f110 0f00 	cmnmi.w	r0, #0
 8089742:	bd01      	pop	{r0, pc}

08089744 <__aeabi_dcmpeq>:
 8089744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089748:	f7ff fff4 	bl	8089734 <__aeabi_cdcmpeq>
 808974c:	bf0c      	ite	eq
 808974e:	2001      	moveq	r0, #1
 8089750:	2000      	movne	r0, #0
 8089752:	f85d fb08 	ldr.w	pc, [sp], #8
 8089756:	bf00      	nop

08089758 <__aeabi_dcmplt>:
 8089758:	f84d ed08 	str.w	lr, [sp, #-8]!
 808975c:	f7ff ffea 	bl	8089734 <__aeabi_cdcmpeq>
 8089760:	bf34      	ite	cc
 8089762:	2001      	movcc	r0, #1
 8089764:	2000      	movcs	r0, #0
 8089766:	f85d fb08 	ldr.w	pc, [sp], #8
 808976a:	bf00      	nop

0808976c <__aeabi_dcmple>:
 808976c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089770:	f7ff ffe0 	bl	8089734 <__aeabi_cdcmpeq>
 8089774:	bf94      	ite	ls
 8089776:	2001      	movls	r0, #1
 8089778:	2000      	movhi	r0, #0
 808977a:	f85d fb08 	ldr.w	pc, [sp], #8
 808977e:	bf00      	nop

08089780 <__aeabi_dcmpge>:
 8089780:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089784:	f7ff ffce 	bl	8089724 <__aeabi_cdrcmple>
 8089788:	bf94      	ite	ls
 808978a:	2001      	movls	r0, #1
 808978c:	2000      	movhi	r0, #0
 808978e:	f85d fb08 	ldr.w	pc, [sp], #8
 8089792:	bf00      	nop

08089794 <__aeabi_dcmpgt>:
 8089794:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089798:	f7ff ffc4 	bl	8089724 <__aeabi_cdrcmple>
 808979c:	bf34      	ite	cc
 808979e:	2001      	movcc	r0, #1
 80897a0:	2000      	movcs	r0, #0
 80897a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80897a6:	bf00      	nop

080897a8 <__aeabi_d2iz>:
 80897a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80897ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80897b0:	d215      	bcs.n	80897de <__aeabi_d2iz+0x36>
 80897b2:	d511      	bpl.n	80897d8 <__aeabi_d2iz+0x30>
 80897b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80897b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80897bc:	d912      	bls.n	80897e4 <__aeabi_d2iz+0x3c>
 80897be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80897c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80897c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80897ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80897ce:	fa23 f002 	lsr.w	r0, r3, r2
 80897d2:	bf18      	it	ne
 80897d4:	4240      	negne	r0, r0
 80897d6:	4770      	bx	lr
 80897d8:	f04f 0000 	mov.w	r0, #0
 80897dc:	4770      	bx	lr
 80897de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80897e2:	d105      	bne.n	80897f0 <__aeabi_d2iz+0x48>
 80897e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80897e8:	bf08      	it	eq
 80897ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80897ee:	4770      	bx	lr
 80897f0:	f04f 0000 	mov.w	r0, #0
 80897f4:	4770      	bx	lr
 80897f6:	bf00      	nop

080897f8 <__aeabi_d2uiz>:
 80897f8:	004a      	lsls	r2, r1, #1
 80897fa:	d211      	bcs.n	8089820 <__aeabi_d2uiz+0x28>
 80897fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8089800:	d211      	bcs.n	8089826 <__aeabi_d2uiz+0x2e>
 8089802:	d50d      	bpl.n	8089820 <__aeabi_d2uiz+0x28>
 8089804:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8089808:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808980c:	d40e      	bmi.n	808982c <__aeabi_d2uiz+0x34>
 808980e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8089812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8089816:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808981a:	fa23 f002 	lsr.w	r0, r3, r2
 808981e:	4770      	bx	lr
 8089820:	f04f 0000 	mov.w	r0, #0
 8089824:	4770      	bx	lr
 8089826:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808982a:	d102      	bne.n	8089832 <__aeabi_d2uiz+0x3a>
 808982c:	f04f 30ff 	mov.w	r0, #4294967295
 8089830:	4770      	bx	lr
 8089832:	f04f 0000 	mov.w	r0, #0
 8089836:	4770      	bx	lr

08089838 <__aeabi_d2f>:
 8089838:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808983c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8089840:	bf24      	itt	cs
 8089842:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8089846:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808984a:	d90d      	bls.n	8089868 <__aeabi_d2f+0x30>
 808984c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089850:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8089854:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8089858:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808985c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8089860:	bf08      	it	eq
 8089862:	f020 0001 	biceq.w	r0, r0, #1
 8089866:	4770      	bx	lr
 8089868:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808986c:	d121      	bne.n	80898b2 <__aeabi_d2f+0x7a>
 808986e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8089872:	bfbc      	itt	lt
 8089874:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8089878:	4770      	bxlt	lr
 808987a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808987e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8089882:	f1c2 0218 	rsb	r2, r2, #24
 8089886:	f1c2 0c20 	rsb	ip, r2, #32
 808988a:	fa10 f30c 	lsls.w	r3, r0, ip
 808988e:	fa20 f002 	lsr.w	r0, r0, r2
 8089892:	bf18      	it	ne
 8089894:	f040 0001 	orrne.w	r0, r0, #1
 8089898:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808989c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80898a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80898a4:	ea40 000c 	orr.w	r0, r0, ip
 80898a8:	fa23 f302 	lsr.w	r3, r3, r2
 80898ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80898b0:	e7cc      	b.n	808984c <__aeabi_d2f+0x14>
 80898b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80898b6:	d107      	bne.n	80898c8 <__aeabi_d2f+0x90>
 80898b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80898bc:	bf1e      	ittt	ne
 80898be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80898c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80898c6:	4770      	bxne	lr
 80898c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80898cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80898d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80898d4:	4770      	bx	lr
 80898d6:	bf00      	nop

080898d8 <__aeabi_frsub>:
 80898d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80898dc:	e002      	b.n	80898e4 <__addsf3>
 80898de:	bf00      	nop

080898e0 <__aeabi_fsub>:
 80898e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080898e4 <__addsf3>:
 80898e4:	0042      	lsls	r2, r0, #1
 80898e6:	bf1f      	itttt	ne
 80898e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80898ec:	ea92 0f03 	teqne	r2, r3
 80898f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80898f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80898f8:	d06a      	beq.n	80899d0 <__addsf3+0xec>
 80898fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80898fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8089902:	bfc1      	itttt	gt
 8089904:	18d2      	addgt	r2, r2, r3
 8089906:	4041      	eorgt	r1, r0
 8089908:	4048      	eorgt	r0, r1
 808990a:	4041      	eorgt	r1, r0
 808990c:	bfb8      	it	lt
 808990e:	425b      	neglt	r3, r3
 8089910:	2b19      	cmp	r3, #25
 8089912:	bf88      	it	hi
 8089914:	4770      	bxhi	lr
 8089916:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808991a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808991e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8089922:	bf18      	it	ne
 8089924:	4240      	negne	r0, r0
 8089926:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808992a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808992e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8089932:	bf18      	it	ne
 8089934:	4249      	negne	r1, r1
 8089936:	ea92 0f03 	teq	r2, r3
 808993a:	d03f      	beq.n	80899bc <__addsf3+0xd8>
 808993c:	f1a2 0201 	sub.w	r2, r2, #1
 8089940:	fa41 fc03 	asr.w	ip, r1, r3
 8089944:	eb10 000c 	adds.w	r0, r0, ip
 8089948:	f1c3 0320 	rsb	r3, r3, #32
 808994c:	fa01 f103 	lsl.w	r1, r1, r3
 8089950:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8089954:	d502      	bpl.n	808995c <__addsf3+0x78>
 8089956:	4249      	negs	r1, r1
 8089958:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808995c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8089960:	d313      	bcc.n	808998a <__addsf3+0xa6>
 8089962:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8089966:	d306      	bcc.n	8089976 <__addsf3+0x92>
 8089968:	0840      	lsrs	r0, r0, #1
 808996a:	ea4f 0131 	mov.w	r1, r1, rrx
 808996e:	f102 0201 	add.w	r2, r2, #1
 8089972:	2afe      	cmp	r2, #254	; 0xfe
 8089974:	d251      	bcs.n	8089a1a <__addsf3+0x136>
 8089976:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808997a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808997e:	bf08      	it	eq
 8089980:	f020 0001 	biceq.w	r0, r0, #1
 8089984:	ea40 0003 	orr.w	r0, r0, r3
 8089988:	4770      	bx	lr
 808998a:	0049      	lsls	r1, r1, #1
 808998c:	eb40 0000 	adc.w	r0, r0, r0
 8089990:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8089994:	f1a2 0201 	sub.w	r2, r2, #1
 8089998:	d1ed      	bne.n	8089976 <__addsf3+0x92>
 808999a:	fab0 fc80 	clz	ip, r0
 808999e:	f1ac 0c08 	sub.w	ip, ip, #8
 80899a2:	ebb2 020c 	subs.w	r2, r2, ip
 80899a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80899aa:	bfaa      	itet	ge
 80899ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80899b0:	4252      	neglt	r2, r2
 80899b2:	4318      	orrge	r0, r3
 80899b4:	bfbc      	itt	lt
 80899b6:	40d0      	lsrlt	r0, r2
 80899b8:	4318      	orrlt	r0, r3
 80899ba:	4770      	bx	lr
 80899bc:	f092 0f00 	teq	r2, #0
 80899c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80899c4:	bf06      	itte	eq
 80899c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80899ca:	3201      	addeq	r2, #1
 80899cc:	3b01      	subne	r3, #1
 80899ce:	e7b5      	b.n	808993c <__addsf3+0x58>
 80899d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80899d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80899d8:	bf18      	it	ne
 80899da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80899de:	d021      	beq.n	8089a24 <__addsf3+0x140>
 80899e0:	ea92 0f03 	teq	r2, r3
 80899e4:	d004      	beq.n	80899f0 <__addsf3+0x10c>
 80899e6:	f092 0f00 	teq	r2, #0
 80899ea:	bf08      	it	eq
 80899ec:	4608      	moveq	r0, r1
 80899ee:	4770      	bx	lr
 80899f0:	ea90 0f01 	teq	r0, r1
 80899f4:	bf1c      	itt	ne
 80899f6:	2000      	movne	r0, #0
 80899f8:	4770      	bxne	lr
 80899fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80899fe:	d104      	bne.n	8089a0a <__addsf3+0x126>
 8089a00:	0040      	lsls	r0, r0, #1
 8089a02:	bf28      	it	cs
 8089a04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8089a08:	4770      	bx	lr
 8089a0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8089a0e:	bf3c      	itt	cc
 8089a10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8089a14:	4770      	bxcc	lr
 8089a16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8089a1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8089a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089a22:	4770      	bx	lr
 8089a24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8089a28:	bf16      	itet	ne
 8089a2a:	4608      	movne	r0, r1
 8089a2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8089a30:	4601      	movne	r1, r0
 8089a32:	0242      	lsls	r2, r0, #9
 8089a34:	bf06      	itte	eq
 8089a36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8089a3a:	ea90 0f01 	teqeq	r0, r1
 8089a3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8089a42:	4770      	bx	lr

08089a44 <__aeabi_ui2f>:
 8089a44:	f04f 0300 	mov.w	r3, #0
 8089a48:	e004      	b.n	8089a54 <__aeabi_i2f+0x8>
 8089a4a:	bf00      	nop

08089a4c <__aeabi_i2f>:
 8089a4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8089a50:	bf48      	it	mi
 8089a52:	4240      	negmi	r0, r0
 8089a54:	ea5f 0c00 	movs.w	ip, r0
 8089a58:	bf08      	it	eq
 8089a5a:	4770      	bxeq	lr
 8089a5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8089a60:	4601      	mov	r1, r0
 8089a62:	f04f 0000 	mov.w	r0, #0
 8089a66:	e01c      	b.n	8089aa2 <__aeabi_l2f+0x2a>

08089a68 <__aeabi_ul2f>:
 8089a68:	ea50 0201 	orrs.w	r2, r0, r1
 8089a6c:	bf08      	it	eq
 8089a6e:	4770      	bxeq	lr
 8089a70:	f04f 0300 	mov.w	r3, #0
 8089a74:	e00a      	b.n	8089a8c <__aeabi_l2f+0x14>
 8089a76:	bf00      	nop

08089a78 <__aeabi_l2f>:
 8089a78:	ea50 0201 	orrs.w	r2, r0, r1
 8089a7c:	bf08      	it	eq
 8089a7e:	4770      	bxeq	lr
 8089a80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8089a84:	d502      	bpl.n	8089a8c <__aeabi_l2f+0x14>
 8089a86:	4240      	negs	r0, r0
 8089a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089a8c:	ea5f 0c01 	movs.w	ip, r1
 8089a90:	bf02      	ittt	eq
 8089a92:	4684      	moveq	ip, r0
 8089a94:	4601      	moveq	r1, r0
 8089a96:	2000      	moveq	r0, #0
 8089a98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8089a9c:	bf08      	it	eq
 8089a9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8089aa2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8089aa6:	fabc f28c 	clz	r2, ip
 8089aaa:	3a08      	subs	r2, #8
 8089aac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8089ab0:	db10      	blt.n	8089ad4 <__aeabi_l2f+0x5c>
 8089ab2:	fa01 fc02 	lsl.w	ip, r1, r2
 8089ab6:	4463      	add	r3, ip
 8089ab8:	fa00 fc02 	lsl.w	ip, r0, r2
 8089abc:	f1c2 0220 	rsb	r2, r2, #32
 8089ac0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089ac4:	fa20 f202 	lsr.w	r2, r0, r2
 8089ac8:	eb43 0002 	adc.w	r0, r3, r2
 8089acc:	bf08      	it	eq
 8089ace:	f020 0001 	biceq.w	r0, r0, #1
 8089ad2:	4770      	bx	lr
 8089ad4:	f102 0220 	add.w	r2, r2, #32
 8089ad8:	fa01 fc02 	lsl.w	ip, r1, r2
 8089adc:	f1c2 0220 	rsb	r2, r2, #32
 8089ae0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8089ae4:	fa21 f202 	lsr.w	r2, r1, r2
 8089ae8:	eb43 0002 	adc.w	r0, r3, r2
 8089aec:	bf08      	it	eq
 8089aee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8089af2:	4770      	bx	lr

08089af4 <__aeabi_fmul>:
 8089af4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089af8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8089afc:	bf1e      	ittt	ne
 8089afe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8089b02:	ea92 0f0c 	teqne	r2, ip
 8089b06:	ea93 0f0c 	teqne	r3, ip
 8089b0a:	d06f      	beq.n	8089bec <__aeabi_fmul+0xf8>
 8089b0c:	441a      	add	r2, r3
 8089b0e:	ea80 0c01 	eor.w	ip, r0, r1
 8089b12:	0240      	lsls	r0, r0, #9
 8089b14:	bf18      	it	ne
 8089b16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8089b1a:	d01e      	beq.n	8089b5a <__aeabi_fmul+0x66>
 8089b1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8089b20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8089b24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8089b28:	fba0 3101 	umull	r3, r1, r0, r1
 8089b2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8089b30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8089b34:	bf3e      	ittt	cc
 8089b36:	0049      	lslcc	r1, r1, #1
 8089b38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8089b3c:	005b      	lslcc	r3, r3, #1
 8089b3e:	ea40 0001 	orr.w	r0, r0, r1
 8089b42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8089b46:	2afd      	cmp	r2, #253	; 0xfd
 8089b48:	d81d      	bhi.n	8089b86 <__aeabi_fmul+0x92>
 8089b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8089b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8089b52:	bf08      	it	eq
 8089b54:	f020 0001 	biceq.w	r0, r0, #1
 8089b58:	4770      	bx	lr
 8089b5a:	f090 0f00 	teq	r0, #0
 8089b5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8089b62:	bf08      	it	eq
 8089b64:	0249      	lsleq	r1, r1, #9
 8089b66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8089b6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8089b6e:	3a7f      	subs	r2, #127	; 0x7f
 8089b70:	bfc2      	ittt	gt
 8089b72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8089b76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8089b7a:	4770      	bxgt	lr
 8089b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089b80:	f04f 0300 	mov.w	r3, #0
 8089b84:	3a01      	subs	r2, #1
 8089b86:	dc5d      	bgt.n	8089c44 <__aeabi_fmul+0x150>
 8089b88:	f112 0f19 	cmn.w	r2, #25
 8089b8c:	bfdc      	itt	le
 8089b8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8089b92:	4770      	bxle	lr
 8089b94:	f1c2 0200 	rsb	r2, r2, #0
 8089b98:	0041      	lsls	r1, r0, #1
 8089b9a:	fa21 f102 	lsr.w	r1, r1, r2
 8089b9e:	f1c2 0220 	rsb	r2, r2, #32
 8089ba2:	fa00 fc02 	lsl.w	ip, r0, r2
 8089ba6:	ea5f 0031 	movs.w	r0, r1, rrx
 8089baa:	f140 0000 	adc.w	r0, r0, #0
 8089bae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8089bb2:	bf08      	it	eq
 8089bb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8089bb8:	4770      	bx	lr
 8089bba:	f092 0f00 	teq	r2, #0
 8089bbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8089bc2:	bf02      	ittt	eq
 8089bc4:	0040      	lsleq	r0, r0, #1
 8089bc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8089bca:	3a01      	subeq	r2, #1
 8089bcc:	d0f9      	beq.n	8089bc2 <__aeabi_fmul+0xce>
 8089bce:	ea40 000c 	orr.w	r0, r0, ip
 8089bd2:	f093 0f00 	teq	r3, #0
 8089bd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089bda:	bf02      	ittt	eq
 8089bdc:	0049      	lsleq	r1, r1, #1
 8089bde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8089be2:	3b01      	subeq	r3, #1
 8089be4:	d0f9      	beq.n	8089bda <__aeabi_fmul+0xe6>
 8089be6:	ea41 010c 	orr.w	r1, r1, ip
 8089bea:	e78f      	b.n	8089b0c <__aeabi_fmul+0x18>
 8089bec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8089bf0:	ea92 0f0c 	teq	r2, ip
 8089bf4:	bf18      	it	ne
 8089bf6:	ea93 0f0c 	teqne	r3, ip
 8089bfa:	d00a      	beq.n	8089c12 <__aeabi_fmul+0x11e>
 8089bfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8089c00:	bf18      	it	ne
 8089c02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8089c06:	d1d8      	bne.n	8089bba <__aeabi_fmul+0xc6>
 8089c08:	ea80 0001 	eor.w	r0, r0, r1
 8089c0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8089c10:	4770      	bx	lr
 8089c12:	f090 0f00 	teq	r0, #0
 8089c16:	bf17      	itett	ne
 8089c18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8089c1c:	4608      	moveq	r0, r1
 8089c1e:	f091 0f00 	teqne	r1, #0
 8089c22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8089c26:	d014      	beq.n	8089c52 <__aeabi_fmul+0x15e>
 8089c28:	ea92 0f0c 	teq	r2, ip
 8089c2c:	d101      	bne.n	8089c32 <__aeabi_fmul+0x13e>
 8089c2e:	0242      	lsls	r2, r0, #9
 8089c30:	d10f      	bne.n	8089c52 <__aeabi_fmul+0x15e>
 8089c32:	ea93 0f0c 	teq	r3, ip
 8089c36:	d103      	bne.n	8089c40 <__aeabi_fmul+0x14c>
 8089c38:	024b      	lsls	r3, r1, #9
 8089c3a:	bf18      	it	ne
 8089c3c:	4608      	movne	r0, r1
 8089c3e:	d108      	bne.n	8089c52 <__aeabi_fmul+0x15e>
 8089c40:	ea80 0001 	eor.w	r0, r0, r1
 8089c44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8089c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8089c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089c50:	4770      	bx	lr
 8089c52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8089c56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8089c5a:	4770      	bx	lr

08089c5c <__aeabi_fdiv>:
 8089c5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089c60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8089c64:	bf1e      	ittt	ne
 8089c66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8089c6a:	ea92 0f0c 	teqne	r2, ip
 8089c6e:	ea93 0f0c 	teqne	r3, ip
 8089c72:	d069      	beq.n	8089d48 <__aeabi_fdiv+0xec>
 8089c74:	eba2 0203 	sub.w	r2, r2, r3
 8089c78:	ea80 0c01 	eor.w	ip, r0, r1
 8089c7c:	0249      	lsls	r1, r1, #9
 8089c7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8089c82:	d037      	beq.n	8089cf4 <__aeabi_fdiv+0x98>
 8089c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8089c88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8089c8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8089c90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8089c94:	428b      	cmp	r3, r1
 8089c96:	bf38      	it	cc
 8089c98:	005b      	lslcc	r3, r3, #1
 8089c9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8089c9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8089ca2:	428b      	cmp	r3, r1
 8089ca4:	bf24      	itt	cs
 8089ca6:	1a5b      	subcs	r3, r3, r1
 8089ca8:	ea40 000c 	orrcs.w	r0, r0, ip
 8089cac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8089cb0:	bf24      	itt	cs
 8089cb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8089cb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8089cba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8089cbe:	bf24      	itt	cs
 8089cc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8089cc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8089cc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8089ccc:	bf24      	itt	cs
 8089cce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8089cd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8089cd6:	011b      	lsls	r3, r3, #4
 8089cd8:	bf18      	it	ne
 8089cda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8089cde:	d1e0      	bne.n	8089ca2 <__aeabi_fdiv+0x46>
 8089ce0:	2afd      	cmp	r2, #253	; 0xfd
 8089ce2:	f63f af50 	bhi.w	8089b86 <__aeabi_fmul+0x92>
 8089ce6:	428b      	cmp	r3, r1
 8089ce8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8089cec:	bf08      	it	eq
 8089cee:	f020 0001 	biceq.w	r0, r0, #1
 8089cf2:	4770      	bx	lr
 8089cf4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8089cf8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8089cfc:	327f      	adds	r2, #127	; 0x7f
 8089cfe:	bfc2      	ittt	gt
 8089d00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8089d04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8089d08:	4770      	bxgt	lr
 8089d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089d0e:	f04f 0300 	mov.w	r3, #0
 8089d12:	3a01      	subs	r2, #1
 8089d14:	e737      	b.n	8089b86 <__aeabi_fmul+0x92>
 8089d16:	f092 0f00 	teq	r2, #0
 8089d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8089d1e:	bf02      	ittt	eq
 8089d20:	0040      	lsleq	r0, r0, #1
 8089d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8089d26:	3a01      	subeq	r2, #1
 8089d28:	d0f9      	beq.n	8089d1e <__aeabi_fdiv+0xc2>
 8089d2a:	ea40 000c 	orr.w	r0, r0, ip
 8089d2e:	f093 0f00 	teq	r3, #0
 8089d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089d36:	bf02      	ittt	eq
 8089d38:	0049      	lsleq	r1, r1, #1
 8089d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8089d3e:	3b01      	subeq	r3, #1
 8089d40:	d0f9      	beq.n	8089d36 <__aeabi_fdiv+0xda>
 8089d42:	ea41 010c 	orr.w	r1, r1, ip
 8089d46:	e795      	b.n	8089c74 <__aeabi_fdiv+0x18>
 8089d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8089d4c:	ea92 0f0c 	teq	r2, ip
 8089d50:	d108      	bne.n	8089d64 <__aeabi_fdiv+0x108>
 8089d52:	0242      	lsls	r2, r0, #9
 8089d54:	f47f af7d 	bne.w	8089c52 <__aeabi_fmul+0x15e>
 8089d58:	ea93 0f0c 	teq	r3, ip
 8089d5c:	f47f af70 	bne.w	8089c40 <__aeabi_fmul+0x14c>
 8089d60:	4608      	mov	r0, r1
 8089d62:	e776      	b.n	8089c52 <__aeabi_fmul+0x15e>
 8089d64:	ea93 0f0c 	teq	r3, ip
 8089d68:	d104      	bne.n	8089d74 <__aeabi_fdiv+0x118>
 8089d6a:	024b      	lsls	r3, r1, #9
 8089d6c:	f43f af4c 	beq.w	8089c08 <__aeabi_fmul+0x114>
 8089d70:	4608      	mov	r0, r1
 8089d72:	e76e      	b.n	8089c52 <__aeabi_fmul+0x15e>
 8089d74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8089d78:	bf18      	it	ne
 8089d7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8089d7e:	d1ca      	bne.n	8089d16 <__aeabi_fdiv+0xba>
 8089d80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8089d84:	f47f af5c 	bne.w	8089c40 <__aeabi_fmul+0x14c>
 8089d88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8089d8c:	f47f af3c 	bne.w	8089c08 <__aeabi_fmul+0x114>
 8089d90:	e75f      	b.n	8089c52 <__aeabi_fmul+0x15e>
 8089d92:	bf00      	nop

08089d94 <__gesf2>:
 8089d94:	f04f 3cff 	mov.w	ip, #4294967295
 8089d98:	e006      	b.n	8089da8 <__cmpsf2+0x4>
 8089d9a:	bf00      	nop

08089d9c <__lesf2>:
 8089d9c:	f04f 0c01 	mov.w	ip, #1
 8089da0:	e002      	b.n	8089da8 <__cmpsf2+0x4>
 8089da2:	bf00      	nop

08089da4 <__cmpsf2>:
 8089da4:	f04f 0c01 	mov.w	ip, #1
 8089da8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8089dac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8089db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8089db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089db8:	bf18      	it	ne
 8089dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089dbe:	d011      	beq.n	8089de4 <__cmpsf2+0x40>
 8089dc0:	b001      	add	sp, #4
 8089dc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8089dc6:	bf18      	it	ne
 8089dc8:	ea90 0f01 	teqne	r0, r1
 8089dcc:	bf58      	it	pl
 8089dce:	ebb2 0003 	subspl.w	r0, r2, r3
 8089dd2:	bf88      	it	hi
 8089dd4:	17c8      	asrhi	r0, r1, #31
 8089dd6:	bf38      	it	cc
 8089dd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8089ddc:	bf18      	it	ne
 8089dde:	f040 0001 	orrne.w	r0, r0, #1
 8089de2:	4770      	bx	lr
 8089de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089de8:	d102      	bne.n	8089df0 <__cmpsf2+0x4c>
 8089dea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8089dee:	d105      	bne.n	8089dfc <__cmpsf2+0x58>
 8089df0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8089df4:	d1e4      	bne.n	8089dc0 <__cmpsf2+0x1c>
 8089df6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8089dfa:	d0e1      	beq.n	8089dc0 <__cmpsf2+0x1c>
 8089dfc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8089e00:	4770      	bx	lr
 8089e02:	bf00      	nop

08089e04 <__aeabi_cfrcmple>:
 8089e04:	4684      	mov	ip, r0
 8089e06:	4608      	mov	r0, r1
 8089e08:	4661      	mov	r1, ip
 8089e0a:	e7ff      	b.n	8089e0c <__aeabi_cfcmpeq>

08089e0c <__aeabi_cfcmpeq>:
 8089e0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8089e0e:	f7ff ffc9 	bl	8089da4 <__cmpsf2>
 8089e12:	2800      	cmp	r0, #0
 8089e14:	bf48      	it	mi
 8089e16:	f110 0f00 	cmnmi.w	r0, #0
 8089e1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08089e1c <__aeabi_fcmpeq>:
 8089e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089e20:	f7ff fff4 	bl	8089e0c <__aeabi_cfcmpeq>
 8089e24:	bf0c      	ite	eq
 8089e26:	2001      	moveq	r0, #1
 8089e28:	2000      	movne	r0, #0
 8089e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8089e2e:	bf00      	nop

08089e30 <__aeabi_fcmplt>:
 8089e30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089e34:	f7ff ffea 	bl	8089e0c <__aeabi_cfcmpeq>
 8089e38:	bf34      	ite	cc
 8089e3a:	2001      	movcc	r0, #1
 8089e3c:	2000      	movcs	r0, #0
 8089e3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8089e42:	bf00      	nop

08089e44 <__aeabi_fcmple>:
 8089e44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089e48:	f7ff ffe0 	bl	8089e0c <__aeabi_cfcmpeq>
 8089e4c:	bf94      	ite	ls
 8089e4e:	2001      	movls	r0, #1
 8089e50:	2000      	movhi	r0, #0
 8089e52:	f85d fb08 	ldr.w	pc, [sp], #8
 8089e56:	bf00      	nop

08089e58 <__aeabi_fcmpge>:
 8089e58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089e5c:	f7ff ffd2 	bl	8089e04 <__aeabi_cfrcmple>
 8089e60:	bf94      	ite	ls
 8089e62:	2001      	movls	r0, #1
 8089e64:	2000      	movhi	r0, #0
 8089e66:	f85d fb08 	ldr.w	pc, [sp], #8
 8089e6a:	bf00      	nop

08089e6c <__aeabi_fcmpgt>:
 8089e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089e70:	f7ff ffc8 	bl	8089e04 <__aeabi_cfrcmple>
 8089e74:	bf34      	ite	cc
 8089e76:	2001      	movcc	r0, #1
 8089e78:	2000      	movcs	r0, #0
 8089e7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8089e7e:	bf00      	nop

08089e80 <__aeabi_fcmpun>:
 8089e80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8089e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8089e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089e8c:	d102      	bne.n	8089e94 <__aeabi_fcmpun+0x14>
 8089e8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8089e92:	d108      	bne.n	8089ea6 <__aeabi_fcmpun+0x26>
 8089e94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8089e98:	d102      	bne.n	8089ea0 <__aeabi_fcmpun+0x20>
 8089e9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8089e9e:	d102      	bne.n	8089ea6 <__aeabi_fcmpun+0x26>
 8089ea0:	f04f 0000 	mov.w	r0, #0
 8089ea4:	4770      	bx	lr
 8089ea6:	f04f 0001 	mov.w	r0, #1
 8089eaa:	4770      	bx	lr

08089eac <__aeabi_f2iz>:
 8089eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8089eb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8089eb4:	d30f      	bcc.n	8089ed6 <__aeabi_f2iz+0x2a>
 8089eb6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8089eba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8089ebe:	d90d      	bls.n	8089edc <__aeabi_f2iz+0x30>
 8089ec0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8089ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8089ec8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8089ecc:	fa23 f002 	lsr.w	r0, r3, r2
 8089ed0:	bf18      	it	ne
 8089ed2:	4240      	negne	r0, r0
 8089ed4:	4770      	bx	lr
 8089ed6:	f04f 0000 	mov.w	r0, #0
 8089eda:	4770      	bx	lr
 8089edc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8089ee0:	d101      	bne.n	8089ee6 <__aeabi_f2iz+0x3a>
 8089ee2:	0242      	lsls	r2, r0, #9
 8089ee4:	d105      	bne.n	8089ef2 <__aeabi_f2iz+0x46>
 8089ee6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8089eea:	bf08      	it	eq
 8089eec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089ef0:	4770      	bx	lr
 8089ef2:	f04f 0000 	mov.w	r0, #0
 8089ef6:	4770      	bx	lr

08089ef8 <__aeabi_ldivmod>:
 8089ef8:	b97b      	cbnz	r3, 8089f1a <__aeabi_ldivmod+0x22>
 8089efa:	b972      	cbnz	r2, 8089f1a <__aeabi_ldivmod+0x22>
 8089efc:	2900      	cmp	r1, #0
 8089efe:	bfbe      	ittt	lt
 8089f00:	2000      	movlt	r0, #0
 8089f02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8089f06:	e006      	blt.n	8089f16 <__aeabi_ldivmod+0x1e>
 8089f08:	bf08      	it	eq
 8089f0a:	2800      	cmpeq	r0, #0
 8089f0c:	bf1c      	itt	ne
 8089f0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8089f12:	f04f 30ff 	movne.w	r0, #4294967295
 8089f16:	f000 b9b5 	b.w	808a284 <__aeabi_idiv0>
 8089f1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8089f1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8089f22:	2900      	cmp	r1, #0
 8089f24:	db09      	blt.n	8089f3a <__aeabi_ldivmod+0x42>
 8089f26:	2b00      	cmp	r3, #0
 8089f28:	db1a      	blt.n	8089f60 <__aeabi_ldivmod+0x68>
 8089f2a:	f000 f835 	bl	8089f98 <__udivmoddi4>
 8089f2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089f36:	b004      	add	sp, #16
 8089f38:	4770      	bx	lr
 8089f3a:	4240      	negs	r0, r0
 8089f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089f40:	2b00      	cmp	r3, #0
 8089f42:	db1b      	blt.n	8089f7c <__aeabi_ldivmod+0x84>
 8089f44:	f000 f828 	bl	8089f98 <__udivmoddi4>
 8089f48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089f50:	b004      	add	sp, #16
 8089f52:	4240      	negs	r0, r0
 8089f54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089f58:	4252      	negs	r2, r2
 8089f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089f5e:	4770      	bx	lr
 8089f60:	4252      	negs	r2, r2
 8089f62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089f66:	f000 f817 	bl	8089f98 <__udivmoddi4>
 8089f6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089f72:	b004      	add	sp, #16
 8089f74:	4240      	negs	r0, r0
 8089f76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089f7a:	4770      	bx	lr
 8089f7c:	4252      	negs	r2, r2
 8089f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089f82:	f000 f809 	bl	8089f98 <__udivmoddi4>
 8089f86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089f8e:	b004      	add	sp, #16
 8089f90:	4252      	negs	r2, r2
 8089f92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089f96:	4770      	bx	lr

08089f98 <__udivmoddi4>:
 8089f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089f9c:	468c      	mov	ip, r1
 8089f9e:	460c      	mov	r4, r1
 8089fa0:	4605      	mov	r5, r0
 8089fa2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8089fa4:	2b00      	cmp	r3, #0
 8089fa6:	d14f      	bne.n	808a048 <__udivmoddi4+0xb0>
 8089fa8:	428a      	cmp	r2, r1
 8089faa:	4617      	mov	r7, r2
 8089fac:	d96b      	bls.n	808a086 <__udivmoddi4+0xee>
 8089fae:	fab2 fe82 	clz	lr, r2
 8089fb2:	f1be 0f00 	cmp.w	lr, #0
 8089fb6:	d00b      	beq.n	8089fd0 <__udivmoddi4+0x38>
 8089fb8:	f1ce 0520 	rsb	r5, lr, #32
 8089fbc:	fa20 f505 	lsr.w	r5, r0, r5
 8089fc0:	fa01 f30e 	lsl.w	r3, r1, lr
 8089fc4:	ea45 0c03 	orr.w	ip, r5, r3
 8089fc8:	fa02 f70e 	lsl.w	r7, r2, lr
 8089fcc:	fa00 f50e 	lsl.w	r5, r0, lr
 8089fd0:	0c39      	lsrs	r1, r7, #16
 8089fd2:	fbbc f0f1 	udiv	r0, ip, r1
 8089fd6:	b2ba      	uxth	r2, r7
 8089fd8:	fb01 c310 	mls	r3, r1, r0, ip
 8089fdc:	fb00 f802 	mul.w	r8, r0, r2
 8089fe0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8089fe4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8089fe8:	45a0      	cmp	r8, r4
 8089fea:	d909      	bls.n	808a000 <__udivmoddi4+0x68>
 8089fec:	19e4      	adds	r4, r4, r7
 8089fee:	f100 33ff 	add.w	r3, r0, #4294967295
 8089ff2:	f080 8128 	bcs.w	808a246 <__udivmoddi4+0x2ae>
 8089ff6:	45a0      	cmp	r8, r4
 8089ff8:	f240 8125 	bls.w	808a246 <__udivmoddi4+0x2ae>
 8089ffc:	3802      	subs	r0, #2
 8089ffe:	443c      	add	r4, r7
 808a000:	ebc8 0404 	rsb	r4, r8, r4
 808a004:	fbb4 f3f1 	udiv	r3, r4, r1
 808a008:	fb01 4c13 	mls	ip, r1, r3, r4
 808a00c:	fb03 f202 	mul.w	r2, r3, r2
 808a010:	b2ac      	uxth	r4, r5
 808a012:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808a016:	428a      	cmp	r2, r1
 808a018:	d909      	bls.n	808a02e <__udivmoddi4+0x96>
 808a01a:	19c9      	adds	r1, r1, r7
 808a01c:	f103 34ff 	add.w	r4, r3, #4294967295
 808a020:	f080 810f 	bcs.w	808a242 <__udivmoddi4+0x2aa>
 808a024:	428a      	cmp	r2, r1
 808a026:	f240 810c 	bls.w	808a242 <__udivmoddi4+0x2aa>
 808a02a:	3b02      	subs	r3, #2
 808a02c:	4439      	add	r1, r7
 808a02e:	1a8a      	subs	r2, r1, r2
 808a030:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808a034:	2100      	movs	r1, #0
 808a036:	2e00      	cmp	r6, #0
 808a038:	d063      	beq.n	808a102 <__udivmoddi4+0x16a>
 808a03a:	fa22 f20e 	lsr.w	r2, r2, lr
 808a03e:	2300      	movs	r3, #0
 808a040:	e886 000c 	stmia.w	r6, {r2, r3}
 808a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a048:	428b      	cmp	r3, r1
 808a04a:	d907      	bls.n	808a05c <__udivmoddi4+0xc4>
 808a04c:	2e00      	cmp	r6, #0
 808a04e:	d056      	beq.n	808a0fe <__udivmoddi4+0x166>
 808a050:	2100      	movs	r1, #0
 808a052:	e886 0011 	stmia.w	r6, {r0, r4}
 808a056:	4608      	mov	r0, r1
 808a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a05c:	fab3 f183 	clz	r1, r3
 808a060:	2900      	cmp	r1, #0
 808a062:	f040 8093 	bne.w	808a18c <__udivmoddi4+0x1f4>
 808a066:	42a3      	cmp	r3, r4
 808a068:	d302      	bcc.n	808a070 <__udivmoddi4+0xd8>
 808a06a:	4282      	cmp	r2, r0
 808a06c:	f200 80fe 	bhi.w	808a26c <__udivmoddi4+0x2d4>
 808a070:	1a85      	subs	r5, r0, r2
 808a072:	eb64 0303 	sbc.w	r3, r4, r3
 808a076:	469c      	mov	ip, r3
 808a078:	2001      	movs	r0, #1
 808a07a:	2e00      	cmp	r6, #0
 808a07c:	d041      	beq.n	808a102 <__udivmoddi4+0x16a>
 808a07e:	e886 1020 	stmia.w	r6, {r5, ip}
 808a082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a086:	b912      	cbnz	r2, 808a08e <__udivmoddi4+0xf6>
 808a088:	2701      	movs	r7, #1
 808a08a:	fbb7 f7f2 	udiv	r7, r7, r2
 808a08e:	fab7 fe87 	clz	lr, r7
 808a092:	f1be 0f00 	cmp.w	lr, #0
 808a096:	d136      	bne.n	808a106 <__udivmoddi4+0x16e>
 808a098:	1be4      	subs	r4, r4, r7
 808a09a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808a09e:	fa1f f987 	uxth.w	r9, r7
 808a0a2:	2101      	movs	r1, #1
 808a0a4:	fbb4 f3f8 	udiv	r3, r4, r8
 808a0a8:	fb08 4413 	mls	r4, r8, r3, r4
 808a0ac:	fb09 f203 	mul.w	r2, r9, r3
 808a0b0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808a0b4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808a0b8:	42a2      	cmp	r2, r4
 808a0ba:	d907      	bls.n	808a0cc <__udivmoddi4+0x134>
 808a0bc:	19e4      	adds	r4, r4, r7
 808a0be:	f103 30ff 	add.w	r0, r3, #4294967295
 808a0c2:	d202      	bcs.n	808a0ca <__udivmoddi4+0x132>
 808a0c4:	42a2      	cmp	r2, r4
 808a0c6:	f200 80d3 	bhi.w	808a270 <__udivmoddi4+0x2d8>
 808a0ca:	4603      	mov	r3, r0
 808a0cc:	1aa4      	subs	r4, r4, r2
 808a0ce:	fbb4 f0f8 	udiv	r0, r4, r8
 808a0d2:	fb08 4810 	mls	r8, r8, r0, r4
 808a0d6:	fb09 f900 	mul.w	r9, r9, r0
 808a0da:	b2ac      	uxth	r4, r5
 808a0dc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808a0e0:	4591      	cmp	r9, r2
 808a0e2:	d907      	bls.n	808a0f4 <__udivmoddi4+0x15c>
 808a0e4:	19d2      	adds	r2, r2, r7
 808a0e6:	f100 34ff 	add.w	r4, r0, #4294967295
 808a0ea:	d202      	bcs.n	808a0f2 <__udivmoddi4+0x15a>
 808a0ec:	4591      	cmp	r9, r2
 808a0ee:	f200 80ba 	bhi.w	808a266 <__udivmoddi4+0x2ce>
 808a0f2:	4620      	mov	r0, r4
 808a0f4:	ebc9 0202 	rsb	r2, r9, r2
 808a0f8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808a0fc:	e79b      	b.n	808a036 <__udivmoddi4+0x9e>
 808a0fe:	4631      	mov	r1, r6
 808a100:	4630      	mov	r0, r6
 808a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a106:	fa07 f70e 	lsl.w	r7, r7, lr
 808a10a:	f1ce 0c20 	rsb	ip, lr, #32
 808a10e:	fa24 f30c 	lsr.w	r3, r4, ip
 808a112:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808a116:	fbb3 faf8 	udiv	sl, r3, r8
 808a11a:	fa1f f987 	uxth.w	r9, r7
 808a11e:	fb08 351a 	mls	r5, r8, sl, r3
 808a122:	fa20 fc0c 	lsr.w	ip, r0, ip
 808a126:	fa04 f40e 	lsl.w	r4, r4, lr
 808a12a:	fb0a fb09 	mul.w	fp, sl, r9
 808a12e:	ea4c 0c04 	orr.w	ip, ip, r4
 808a132:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808a136:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808a13a:	459b      	cmp	fp, r3
 808a13c:	fa00 f50e 	lsl.w	r5, r0, lr
 808a140:	d90a      	bls.n	808a158 <__udivmoddi4+0x1c0>
 808a142:	19db      	adds	r3, r3, r7
 808a144:	f10a 32ff 	add.w	r2, sl, #4294967295
 808a148:	f080 808b 	bcs.w	808a262 <__udivmoddi4+0x2ca>
 808a14c:	459b      	cmp	fp, r3
 808a14e:	f240 8088 	bls.w	808a262 <__udivmoddi4+0x2ca>
 808a152:	f1aa 0a02 	sub.w	sl, sl, #2
 808a156:	443b      	add	r3, r7
 808a158:	ebcb 0303 	rsb	r3, fp, r3
 808a15c:	fbb3 f0f8 	udiv	r0, r3, r8
 808a160:	fb08 3310 	mls	r3, r8, r0, r3
 808a164:	fb00 f409 	mul.w	r4, r0, r9
 808a168:	fa1f fc8c 	uxth.w	ip, ip
 808a16c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808a170:	429c      	cmp	r4, r3
 808a172:	d907      	bls.n	808a184 <__udivmoddi4+0x1ec>
 808a174:	19db      	adds	r3, r3, r7
 808a176:	f100 32ff 	add.w	r2, r0, #4294967295
 808a17a:	d26e      	bcs.n	808a25a <__udivmoddi4+0x2c2>
 808a17c:	429c      	cmp	r4, r3
 808a17e:	d96c      	bls.n	808a25a <__udivmoddi4+0x2c2>
 808a180:	3802      	subs	r0, #2
 808a182:	443b      	add	r3, r7
 808a184:	1b1c      	subs	r4, r3, r4
 808a186:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808a18a:	e78b      	b.n	808a0a4 <__udivmoddi4+0x10c>
 808a18c:	f1c1 0e20 	rsb	lr, r1, #32
 808a190:	408b      	lsls	r3, r1
 808a192:	fa22 fc0e 	lsr.w	ip, r2, lr
 808a196:	ea4c 0c03 	orr.w	ip, ip, r3
 808a19a:	fa24 f70e 	lsr.w	r7, r4, lr
 808a19e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808a1a2:	fbb7 faf9 	udiv	sl, r7, r9
 808a1a6:	fa1f f38c 	uxth.w	r3, ip
 808a1aa:	fb09 771a 	mls	r7, r9, sl, r7
 808a1ae:	fa20 f80e 	lsr.w	r8, r0, lr
 808a1b2:	408c      	lsls	r4, r1
 808a1b4:	fb0a f503 	mul.w	r5, sl, r3
 808a1b8:	ea48 0404 	orr.w	r4, r8, r4
 808a1bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808a1c0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808a1c4:	42bd      	cmp	r5, r7
 808a1c6:	fa02 f201 	lsl.w	r2, r2, r1
 808a1ca:	fa00 fb01 	lsl.w	fp, r0, r1
 808a1ce:	d909      	bls.n	808a1e4 <__udivmoddi4+0x24c>
 808a1d0:	eb17 070c 	adds.w	r7, r7, ip
 808a1d4:	f10a 30ff 	add.w	r0, sl, #4294967295
 808a1d8:	d241      	bcs.n	808a25e <__udivmoddi4+0x2c6>
 808a1da:	42bd      	cmp	r5, r7
 808a1dc:	d93f      	bls.n	808a25e <__udivmoddi4+0x2c6>
 808a1de:	f1aa 0a02 	sub.w	sl, sl, #2
 808a1e2:	4467      	add	r7, ip
 808a1e4:	1b7f      	subs	r7, r7, r5
 808a1e6:	fbb7 f5f9 	udiv	r5, r7, r9
 808a1ea:	fb09 7715 	mls	r7, r9, r5, r7
 808a1ee:	fb05 f303 	mul.w	r3, r5, r3
 808a1f2:	b2a4      	uxth	r4, r4
 808a1f4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808a1f8:	42bb      	cmp	r3, r7
 808a1fa:	d908      	bls.n	808a20e <__udivmoddi4+0x276>
 808a1fc:	eb17 070c 	adds.w	r7, r7, ip
 808a200:	f105 30ff 	add.w	r0, r5, #4294967295
 808a204:	d227      	bcs.n	808a256 <__udivmoddi4+0x2be>
 808a206:	42bb      	cmp	r3, r7
 808a208:	d925      	bls.n	808a256 <__udivmoddi4+0x2be>
 808a20a:	3d02      	subs	r5, #2
 808a20c:	4467      	add	r7, ip
 808a20e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808a212:	fba0 8902 	umull	r8, r9, r0, r2
 808a216:	1aff      	subs	r7, r7, r3
 808a218:	454f      	cmp	r7, r9
 808a21a:	4645      	mov	r5, r8
 808a21c:	464c      	mov	r4, r9
 808a21e:	d314      	bcc.n	808a24a <__udivmoddi4+0x2b2>
 808a220:	d029      	beq.n	808a276 <__udivmoddi4+0x2de>
 808a222:	b366      	cbz	r6, 808a27e <__udivmoddi4+0x2e6>
 808a224:	ebbb 0305 	subs.w	r3, fp, r5
 808a228:	eb67 0704 	sbc.w	r7, r7, r4
 808a22c:	fa07 fe0e 	lsl.w	lr, r7, lr
 808a230:	40cb      	lsrs	r3, r1
 808a232:	40cf      	lsrs	r7, r1
 808a234:	ea4e 0303 	orr.w	r3, lr, r3
 808a238:	e886 0088 	stmia.w	r6, {r3, r7}
 808a23c:	2100      	movs	r1, #0
 808a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a242:	4623      	mov	r3, r4
 808a244:	e6f3      	b.n	808a02e <__udivmoddi4+0x96>
 808a246:	4618      	mov	r0, r3
 808a248:	e6da      	b.n	808a000 <__udivmoddi4+0x68>
 808a24a:	ebb8 0502 	subs.w	r5, r8, r2
 808a24e:	eb69 040c 	sbc.w	r4, r9, ip
 808a252:	3801      	subs	r0, #1
 808a254:	e7e5      	b.n	808a222 <__udivmoddi4+0x28a>
 808a256:	4605      	mov	r5, r0
 808a258:	e7d9      	b.n	808a20e <__udivmoddi4+0x276>
 808a25a:	4610      	mov	r0, r2
 808a25c:	e792      	b.n	808a184 <__udivmoddi4+0x1ec>
 808a25e:	4682      	mov	sl, r0
 808a260:	e7c0      	b.n	808a1e4 <__udivmoddi4+0x24c>
 808a262:	4692      	mov	sl, r2
 808a264:	e778      	b.n	808a158 <__udivmoddi4+0x1c0>
 808a266:	3802      	subs	r0, #2
 808a268:	443a      	add	r2, r7
 808a26a:	e743      	b.n	808a0f4 <__udivmoddi4+0x15c>
 808a26c:	4608      	mov	r0, r1
 808a26e:	e704      	b.n	808a07a <__udivmoddi4+0xe2>
 808a270:	3b02      	subs	r3, #2
 808a272:	443c      	add	r4, r7
 808a274:	e72a      	b.n	808a0cc <__udivmoddi4+0x134>
 808a276:	45c3      	cmp	fp, r8
 808a278:	d3e7      	bcc.n	808a24a <__udivmoddi4+0x2b2>
 808a27a:	463c      	mov	r4, r7
 808a27c:	e7d1      	b.n	808a222 <__udivmoddi4+0x28a>
 808a27e:	4631      	mov	r1, r6
 808a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808a284 <__aeabi_idiv0>:
 808a284:	4770      	bx	lr
 808a286:	bf00      	nop

0808a288 <asctime>:
 808a288:	4b09      	ldr	r3, [pc, #36]	; (808a2b0 <asctime+0x28>)
 808a28a:	b570      	push	{r4, r5, r6, lr}
 808a28c:	681c      	ldr	r4, [r3, #0]
 808a28e:	4606      	mov	r6, r0
 808a290:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808a292:	b93d      	cbnz	r5, 808a2a4 <asctime+0x1c>
 808a294:	201a      	movs	r0, #26
 808a296:	f7fb fe6b 	bl	8085f70 <malloc>
 808a29a:	221a      	movs	r2, #26
 808a29c:	6420      	str	r0, [r4, #64]	; 0x40
 808a29e:	4629      	mov	r1, r5
 808a2a0:	f000 f956 	bl	808a550 <memset>
 808a2a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808a2a6:	4630      	mov	r0, r6
 808a2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808a2ac:	f000 b802 	b.w	808a2b4 <asctime_r>
 808a2b0:	200000b8 	.word	0x200000b8

0808a2b4 <asctime_r>:
 808a2b4:	b510      	push	{r4, lr}
 808a2b6:	460c      	mov	r4, r1
 808a2b8:	6941      	ldr	r1, [r0, #20]
 808a2ba:	b086      	sub	sp, #24
 808a2bc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808a2c0:	6903      	ldr	r3, [r0, #16]
 808a2c2:	6982      	ldr	r2, [r0, #24]
 808a2c4:	9104      	str	r1, [sp, #16]
 808a2c6:	6801      	ldr	r1, [r0, #0]
 808a2c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808a2cc:	9103      	str	r1, [sp, #12]
 808a2ce:	6841      	ldr	r1, [r0, #4]
 808a2d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808a2d4:	9102      	str	r1, [sp, #8]
 808a2d6:	6881      	ldr	r1, [r0, #8]
 808a2d8:	9101      	str	r1, [sp, #4]
 808a2da:	68c1      	ldr	r1, [r0, #12]
 808a2dc:	4620      	mov	r0, r4
 808a2de:	9100      	str	r1, [sp, #0]
 808a2e0:	4904      	ldr	r1, [pc, #16]	; (808a2f4 <asctime_r+0x40>)
 808a2e2:	440b      	add	r3, r1
 808a2e4:	4904      	ldr	r1, [pc, #16]	; (808a2f8 <asctime_r+0x44>)
 808a2e6:	440a      	add	r2, r1
 808a2e8:	4904      	ldr	r1, [pc, #16]	; (808a2fc <asctime_r+0x48>)
 808a2ea:	f7fb fe61 	bl	8085fb0 <siprintf>
 808a2ee:	4620      	mov	r0, r4
 808a2f0:	b006      	add	sp, #24
 808a2f2:	bd10      	pop	{r4, pc}
 808a2f4:	0808e386 	.word	0x0808e386
 808a2f8:	0808e371 	.word	0x0808e371
 808a2fc:	0808e3aa 	.word	0x0808e3aa

0808a300 <atof>:
 808a300:	2100      	movs	r1, #0
 808a302:	f001 bd11 	b.w	808bd28 <strtod>
	...

0808a308 <__cxa_atexit>:
 808a308:	b510      	push	{r4, lr}
 808a30a:	4c05      	ldr	r4, [pc, #20]	; (808a320 <__cxa_atexit+0x18>)
 808a30c:	4613      	mov	r3, r2
 808a30e:	b12c      	cbz	r4, 808a31c <__cxa_atexit+0x14>
 808a310:	460a      	mov	r2, r1
 808a312:	4601      	mov	r1, r0
 808a314:	2002      	movs	r0, #2
 808a316:	f3af 8000 	nop.w
 808a31a:	bd10      	pop	{r4, pc}
 808a31c:	4620      	mov	r0, r4
 808a31e:	bd10      	pop	{r4, pc}
 808a320:	00000000 	.word	0x00000000

0808a324 <localtime>:
 808a324:	b538      	push	{r3, r4, r5, lr}
 808a326:	4b07      	ldr	r3, [pc, #28]	; (808a344 <localtime+0x20>)
 808a328:	4605      	mov	r5, r0
 808a32a:	681c      	ldr	r4, [r3, #0]
 808a32c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808a32e:	b91b      	cbnz	r3, 808a338 <localtime+0x14>
 808a330:	2024      	movs	r0, #36	; 0x24
 808a332:	f7fb fe1d 	bl	8085f70 <malloc>
 808a336:	63e0      	str	r0, [r4, #60]	; 0x3c
 808a338:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808a33a:	4628      	mov	r0, r5
 808a33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808a340:	f000 b802 	b.w	808a348 <localtime_r>
 808a344:	200000b8 	.word	0x200000b8

0808a348 <localtime_r>:
 808a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a34c:	460c      	mov	r4, r1
 808a34e:	4680      	mov	r8, r0
 808a350:	f002 fb20 	bl	808c994 <__gettzinfo>
 808a354:	4621      	mov	r1, r4
 808a356:	4607      	mov	r7, r0
 808a358:	4640      	mov	r0, r8
 808a35a:	f002 fb1f 	bl	808c99c <gmtime_r>
 808a35e:	6946      	ldr	r6, [r0, #20]
 808a360:	4604      	mov	r4, r0
 808a362:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808a366:	07b3      	lsls	r3, r6, #30
 808a368:	d105      	bne.n	808a376 <localtime_r+0x2e>
 808a36a:	2264      	movs	r2, #100	; 0x64
 808a36c:	fb96 f3f2 	sdiv	r3, r6, r2
 808a370:	fb02 6313 	mls	r3, r2, r3, r6
 808a374:	b94b      	cbnz	r3, 808a38a <localtime_r+0x42>
 808a376:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808a37a:	fb96 f3f5 	sdiv	r3, r6, r5
 808a37e:	fb05 6513 	mls	r5, r5, r3, r6
 808a382:	fab5 f385 	clz	r3, r5
 808a386:	095b      	lsrs	r3, r3, #5
 808a388:	e000      	b.n	808a38c <localtime_r+0x44>
 808a38a:	2301      	movs	r3, #1
 808a38c:	4a5f      	ldr	r2, [pc, #380]	; (808a50c <localtime_r+0x1c4>)
 808a38e:	2530      	movs	r5, #48	; 0x30
 808a390:	fb05 2503 	mla	r5, r5, r3, r2
 808a394:	f001 fe10 	bl	808bfb8 <__tz_lock>
 808a398:	f001 fe10 	bl	808bfbc <_tzset_unlocked>
 808a39c:	4b5c      	ldr	r3, [pc, #368]	; (808a510 <localtime_r+0x1c8>)
 808a39e:	681b      	ldr	r3, [r3, #0]
 808a3a0:	b1f3      	cbz	r3, 808a3e0 <localtime_r+0x98>
 808a3a2:	687b      	ldr	r3, [r7, #4]
 808a3a4:	429e      	cmp	r6, r3
 808a3a6:	d105      	bne.n	808a3b4 <localtime_r+0x6c>
 808a3a8:	6839      	ldr	r1, [r7, #0]
 808a3aa:	f8d8 3000 	ldr.w	r3, [r8]
 808a3ae:	69fa      	ldr	r2, [r7, #28]
 808a3b0:	b941      	cbnz	r1, 808a3c4 <localtime_r+0x7c>
 808a3b2:	e00a      	b.n	808a3ca <localtime_r+0x82>
 808a3b4:	4630      	mov	r0, r6
 808a3b6:	f001 fd57 	bl	808be68 <__tzcalc_limits>
 808a3ba:	2800      	cmp	r0, #0
 808a3bc:	d1f4      	bne.n	808a3a8 <localtime_r+0x60>
 808a3be:	f04f 33ff 	mov.w	r3, #4294967295
 808a3c2:	e00d      	b.n	808a3e0 <localtime_r+0x98>
 808a3c4:	4293      	cmp	r3, r2
 808a3c6:	db08      	blt.n	808a3da <localtime_r+0x92>
 808a3c8:	e001      	b.n	808a3ce <localtime_r+0x86>
 808a3ca:	4293      	cmp	r3, r2
 808a3cc:	da07      	bge.n	808a3de <localtime_r+0x96>
 808a3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808a3d0:	4293      	cmp	r3, r2
 808a3d2:	bfac      	ite	ge
 808a3d4:	2300      	movge	r3, #0
 808a3d6:	2301      	movlt	r3, #1
 808a3d8:	e002      	b.n	808a3e0 <localtime_r+0x98>
 808a3da:	2300      	movs	r3, #0
 808a3dc:	e000      	b.n	808a3e0 <localtime_r+0x98>
 808a3de:	2301      	movs	r3, #1
 808a3e0:	6223      	str	r3, [r4, #32]
 808a3e2:	6a23      	ldr	r3, [r4, #32]
 808a3e4:	203c      	movs	r0, #60	; 0x3c
 808a3e6:	2b01      	cmp	r3, #1
 808a3e8:	bf0c      	ite	eq
 808a3ea:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808a3ec:	6a39      	ldrne	r1, [r7, #32]
 808a3ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808a3f2:	fb91 f6f3 	sdiv	r6, r1, r3
 808a3f6:	fb03 1316 	mls	r3, r3, r6, r1
 808a3fa:	fb93 f2f0 	sdiv	r2, r3, r0
 808a3fe:	fb00 3012 	mls	r0, r0, r2, r3
 808a402:	6861      	ldr	r1, [r4, #4]
 808a404:	6823      	ldr	r3, [r4, #0]
 808a406:	1a89      	subs	r1, r1, r2
 808a408:	68a2      	ldr	r2, [r4, #8]
 808a40a:	1a1b      	subs	r3, r3, r0
 808a40c:	1b92      	subs	r2, r2, r6
 808a40e:	2b3b      	cmp	r3, #59	; 0x3b
 808a410:	6023      	str	r3, [r4, #0]
 808a412:	6061      	str	r1, [r4, #4]
 808a414:	60a2      	str	r2, [r4, #8]
 808a416:	dd03      	ble.n	808a420 <localtime_r+0xd8>
 808a418:	3101      	adds	r1, #1
 808a41a:	6061      	str	r1, [r4, #4]
 808a41c:	3b3c      	subs	r3, #60	; 0x3c
 808a41e:	e004      	b.n	808a42a <localtime_r+0xe2>
 808a420:	2b00      	cmp	r3, #0
 808a422:	da03      	bge.n	808a42c <localtime_r+0xe4>
 808a424:	3901      	subs	r1, #1
 808a426:	6061      	str	r1, [r4, #4]
 808a428:	333c      	adds	r3, #60	; 0x3c
 808a42a:	6023      	str	r3, [r4, #0]
 808a42c:	6863      	ldr	r3, [r4, #4]
 808a42e:	2b3b      	cmp	r3, #59	; 0x3b
 808a430:	dd03      	ble.n	808a43a <localtime_r+0xf2>
 808a432:	3201      	adds	r2, #1
 808a434:	60a2      	str	r2, [r4, #8]
 808a436:	3b3c      	subs	r3, #60	; 0x3c
 808a438:	e004      	b.n	808a444 <localtime_r+0xfc>
 808a43a:	2b00      	cmp	r3, #0
 808a43c:	da03      	bge.n	808a446 <localtime_r+0xfe>
 808a43e:	3a01      	subs	r2, #1
 808a440:	60a2      	str	r2, [r4, #8]
 808a442:	333c      	adds	r3, #60	; 0x3c
 808a444:	6063      	str	r3, [r4, #4]
 808a446:	68a3      	ldr	r3, [r4, #8]
 808a448:	2b17      	cmp	r3, #23
 808a44a:	dd22      	ble.n	808a492 <localtime_r+0x14a>
 808a44c:	69e2      	ldr	r2, [r4, #28]
 808a44e:	3b18      	subs	r3, #24
 808a450:	3201      	adds	r2, #1
 808a452:	61e2      	str	r2, [r4, #28]
 808a454:	69a2      	ldr	r2, [r4, #24]
 808a456:	60a3      	str	r3, [r4, #8]
 808a458:	3201      	adds	r2, #1
 808a45a:	2a06      	cmp	r2, #6
 808a45c:	bfc8      	it	gt
 808a45e:	2200      	movgt	r2, #0
 808a460:	61a2      	str	r2, [r4, #24]
 808a462:	68e2      	ldr	r2, [r4, #12]
 808a464:	6923      	ldr	r3, [r4, #16]
 808a466:	3201      	adds	r2, #1
 808a468:	60e2      	str	r2, [r4, #12]
 808a46a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808a46e:	428a      	cmp	r2, r1
 808a470:	dd46      	ble.n	808a500 <localtime_r+0x1b8>
 808a472:	3301      	adds	r3, #1
 808a474:	2b0c      	cmp	r3, #12
 808a476:	bf08      	it	eq
 808a478:	6963      	ldreq	r3, [r4, #20]
 808a47a:	eba2 0201 	sub.w	r2, r2, r1
 808a47e:	60e2      	str	r2, [r4, #12]
 808a480:	bf05      	ittet	eq
 808a482:	3301      	addeq	r3, #1
 808a484:	2200      	moveq	r2, #0
 808a486:	6123      	strne	r3, [r4, #16]
 808a488:	6122      	streq	r2, [r4, #16]
 808a48a:	bf04      	itt	eq
 808a48c:	6163      	streq	r3, [r4, #20]
 808a48e:	61e2      	streq	r2, [r4, #28]
 808a490:	e036      	b.n	808a500 <localtime_r+0x1b8>
 808a492:	2b00      	cmp	r3, #0
 808a494:	da34      	bge.n	808a500 <localtime_r+0x1b8>
 808a496:	69e2      	ldr	r2, [r4, #28]
 808a498:	3318      	adds	r3, #24
 808a49a:	3a01      	subs	r2, #1
 808a49c:	61e2      	str	r2, [r4, #28]
 808a49e:	69a2      	ldr	r2, [r4, #24]
 808a4a0:	60a3      	str	r3, [r4, #8]
 808a4a2:	3a01      	subs	r2, #1
 808a4a4:	bf48      	it	mi
 808a4a6:	2206      	movmi	r2, #6
 808a4a8:	61a2      	str	r2, [r4, #24]
 808a4aa:	68e2      	ldr	r2, [r4, #12]
 808a4ac:	3a01      	subs	r2, #1
 808a4ae:	60e2      	str	r2, [r4, #12]
 808a4b0:	bb32      	cbnz	r2, 808a500 <localtime_r+0x1b8>
 808a4b2:	6923      	ldr	r3, [r4, #16]
 808a4b4:	3b01      	subs	r3, #1
 808a4b6:	d401      	bmi.n	808a4bc <localtime_r+0x174>
 808a4b8:	6123      	str	r3, [r4, #16]
 808a4ba:	e01d      	b.n	808a4f8 <localtime_r+0x1b0>
 808a4bc:	230b      	movs	r3, #11
 808a4be:	6123      	str	r3, [r4, #16]
 808a4c0:	6963      	ldr	r3, [r4, #20]
 808a4c2:	1e5a      	subs	r2, r3, #1
 808a4c4:	f012 0f03 	tst.w	r2, #3
 808a4c8:	6162      	str	r2, [r4, #20]
 808a4ca:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808a4ce:	d105      	bne.n	808a4dc <localtime_r+0x194>
 808a4d0:	2164      	movs	r1, #100	; 0x64
 808a4d2:	fb93 f2f1 	sdiv	r2, r3, r1
 808a4d6:	fb01 3212 	mls	r2, r1, r2, r3
 808a4da:	b94a      	cbnz	r2, 808a4f0 <localtime_r+0x1a8>
 808a4dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808a4e0:	fb93 f2f1 	sdiv	r2, r3, r1
 808a4e4:	fb01 3312 	mls	r3, r1, r2, r3
 808a4e8:	fab3 f383 	clz	r3, r3
 808a4ec:	095b      	lsrs	r3, r3, #5
 808a4ee:	e000      	b.n	808a4f2 <localtime_r+0x1aa>
 808a4f0:	2301      	movs	r3, #1
 808a4f2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808a4f6:	61e3      	str	r3, [r4, #28]
 808a4f8:	6923      	ldr	r3, [r4, #16]
 808a4fa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808a4fe:	60e3      	str	r3, [r4, #12]
 808a500:	f001 fd5b 	bl	808bfba <__tz_unlock>
 808a504:	4620      	mov	r0, r4
 808a506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a50a:	bf00      	nop
 808a50c:	0808e534 	.word	0x0808e534
 808a510:	200010c8 	.word	0x200010c8

0808a514 <_localeconv_r>:
 808a514:	4800      	ldr	r0, [pc, #0]	; (808a518 <_localeconv_r+0x4>)
 808a516:	4770      	bx	lr
 808a518:	200000bc 	.word	0x200000bc

0808a51c <memcmp>:
 808a51c:	b510      	push	{r4, lr}
 808a51e:	3901      	subs	r1, #1
 808a520:	4402      	add	r2, r0
 808a522:	4290      	cmp	r0, r2
 808a524:	d007      	beq.n	808a536 <memcmp+0x1a>
 808a526:	f810 3b01 	ldrb.w	r3, [r0], #1
 808a52a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808a52e:	42a3      	cmp	r3, r4
 808a530:	d0f7      	beq.n	808a522 <memcmp+0x6>
 808a532:	1b18      	subs	r0, r3, r4
 808a534:	bd10      	pop	{r4, pc}
 808a536:	2000      	movs	r0, #0
 808a538:	bd10      	pop	{r4, pc}

0808a53a <memcpy>:
 808a53a:	b510      	push	{r4, lr}
 808a53c:	1e43      	subs	r3, r0, #1
 808a53e:	440a      	add	r2, r1
 808a540:	4291      	cmp	r1, r2
 808a542:	d004      	beq.n	808a54e <memcpy+0x14>
 808a544:	f811 4b01 	ldrb.w	r4, [r1], #1
 808a548:	f803 4f01 	strb.w	r4, [r3, #1]!
 808a54c:	e7f8      	b.n	808a540 <memcpy+0x6>
 808a54e:	bd10      	pop	{r4, pc}

0808a550 <memset>:
 808a550:	4603      	mov	r3, r0
 808a552:	4402      	add	r2, r0
 808a554:	4293      	cmp	r3, r2
 808a556:	d002      	beq.n	808a55e <memset+0xe>
 808a558:	f803 1b01 	strb.w	r1, [r3], #1
 808a55c:	e7fa      	b.n	808a554 <memset+0x4>
 808a55e:	4770      	bx	lr

0808a560 <srand>:
 808a560:	b538      	push	{r3, r4, r5, lr}
 808a562:	4b12      	ldr	r3, [pc, #72]	; (808a5ac <srand+0x4c>)
 808a564:	4605      	mov	r5, r0
 808a566:	681c      	ldr	r4, [r3, #0]
 808a568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808a56a:	b9d3      	cbnz	r3, 808a5a2 <srand+0x42>
 808a56c:	2018      	movs	r0, #24
 808a56e:	f7fb fcff 	bl	8085f70 <malloc>
 808a572:	f243 330e 	movw	r3, #13070	; 0x330e
 808a576:	63a0      	str	r0, [r4, #56]	; 0x38
 808a578:	8003      	strh	r3, [r0, #0]
 808a57a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808a57e:	8043      	strh	r3, [r0, #2]
 808a580:	f241 2334 	movw	r3, #4660	; 0x1234
 808a584:	8083      	strh	r3, [r0, #4]
 808a586:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808a58a:	80c3      	strh	r3, [r0, #6]
 808a58c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808a590:	8103      	strh	r3, [r0, #8]
 808a592:	2305      	movs	r3, #5
 808a594:	8143      	strh	r3, [r0, #10]
 808a596:	230b      	movs	r3, #11
 808a598:	8183      	strh	r3, [r0, #12]
 808a59a:	2201      	movs	r2, #1
 808a59c:	2300      	movs	r3, #0
 808a59e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808a5a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808a5a4:	2200      	movs	r2, #0
 808a5a6:	611d      	str	r5, [r3, #16]
 808a5a8:	615a      	str	r2, [r3, #20]
 808a5aa:	bd38      	pop	{r3, r4, r5, pc}
 808a5ac:	200000b8 	.word	0x200000b8

0808a5b0 <strchr>:
 808a5b0:	b2c9      	uxtb	r1, r1
 808a5b2:	4603      	mov	r3, r0
 808a5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 808a5b8:	b11a      	cbz	r2, 808a5c2 <strchr+0x12>
 808a5ba:	4291      	cmp	r1, r2
 808a5bc:	d1f9      	bne.n	808a5b2 <strchr+0x2>
 808a5be:	4618      	mov	r0, r3
 808a5c0:	4770      	bx	lr
 808a5c2:	2900      	cmp	r1, #0
 808a5c4:	bf0c      	ite	eq
 808a5c6:	4618      	moveq	r0, r3
 808a5c8:	2000      	movne	r0, #0
 808a5ca:	4770      	bx	lr

0808a5cc <strcmp>:
 808a5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 808a5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 808a5d4:	2a01      	cmp	r2, #1
 808a5d6:	bf28      	it	cs
 808a5d8:	429a      	cmpcs	r2, r3
 808a5da:	d0f7      	beq.n	808a5cc <strcmp>
 808a5dc:	1ad0      	subs	r0, r2, r3
 808a5de:	4770      	bx	lr

0808a5e0 <strcpy>:
 808a5e0:	4603      	mov	r3, r0
 808a5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 808a5e6:	f803 2b01 	strb.w	r2, [r3], #1
 808a5ea:	2a00      	cmp	r2, #0
 808a5ec:	d1f9      	bne.n	808a5e2 <strcpy+0x2>
 808a5ee:	4770      	bx	lr

0808a5f0 <strdup>:
 808a5f0:	4b02      	ldr	r3, [pc, #8]	; (808a5fc <strdup+0xc>)
 808a5f2:	4601      	mov	r1, r0
 808a5f4:	6818      	ldr	r0, [r3, #0]
 808a5f6:	f000 b803 	b.w	808a600 <_strdup_r>
 808a5fa:	bf00      	nop
 808a5fc:	200000b8 	.word	0x200000b8

0808a600 <_strdup_r>:
 808a600:	b570      	push	{r4, r5, r6, lr}
 808a602:	4606      	mov	r6, r0
 808a604:	4608      	mov	r0, r1
 808a606:	460c      	mov	r4, r1
 808a608:	f000 fd22 	bl	808b050 <strlen>
 808a60c:	1c45      	adds	r5, r0, #1
 808a60e:	4629      	mov	r1, r5
 808a610:	4630      	mov	r0, r6
 808a612:	f7fb fcfd 	bl	8086010 <_malloc_r>
 808a616:	4606      	mov	r6, r0
 808a618:	b118      	cbz	r0, 808a622 <_strdup_r+0x22>
 808a61a:	462a      	mov	r2, r5
 808a61c:	4621      	mov	r1, r4
 808a61e:	f7ff ff8c 	bl	808a53a <memcpy>
 808a622:	4630      	mov	r0, r6
 808a624:	bd70      	pop	{r4, r5, r6, pc}

0808a626 <iso_year_adjust>:
 808a626:	6941      	ldr	r1, [r0, #20]
 808a628:	b510      	push	{r4, lr}
 808a62a:	078b      	lsls	r3, r1, #30
 808a62c:	d10c      	bne.n	808a648 <iso_year_adjust+0x22>
 808a62e:	f240 736c 	movw	r3, #1900	; 0x76c
 808a632:	2900      	cmp	r1, #0
 808a634:	bfa8      	it	ge
 808a636:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808a63a:	440b      	add	r3, r1
 808a63c:	2464      	movs	r4, #100	; 0x64
 808a63e:	fb93 f2f4 	sdiv	r2, r3, r4
 808a642:	fb04 3312 	mls	r3, r4, r2, r3
 808a646:	b983      	cbnz	r3, 808a66a <iso_year_adjust+0x44>
 808a648:	f240 736c 	movw	r3, #1900	; 0x76c
 808a64c:	2900      	cmp	r1, #0
 808a64e:	bfa8      	it	ge
 808a650:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808a654:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a658:	440b      	add	r3, r1
 808a65a:	fb93 f1f2 	sdiv	r1, r3, r2
 808a65e:	fb02 3311 	mls	r3, r2, r1, r3
 808a662:	fab3 f283 	clz	r2, r3
 808a666:	0952      	lsrs	r2, r2, #5
 808a668:	e000      	b.n	808a66c <iso_year_adjust+0x46>
 808a66a:	2201      	movs	r2, #1
 808a66c:	6983      	ldr	r3, [r0, #24]
 808a66e:	69c1      	ldr	r1, [r0, #28]
 808a670:	005b      	lsls	r3, r3, #1
 808a672:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808a676:	4413      	add	r3, r2
 808a678:	2b21      	cmp	r3, #33	; 0x21
 808a67a:	dc0e      	bgt.n	808a69a <iso_year_adjust+0x74>
 808a67c:	2b20      	cmp	r3, #32
 808a67e:	da2f      	bge.n	808a6e0 <iso_year_adjust+0xba>
 808a680:	2b0d      	cmp	r3, #13
 808a682:	dc02      	bgt.n	808a68a <iso_year_adjust+0x64>
 808a684:	2b0a      	cmp	r3, #10
 808a686:	db05      	blt.n	808a694 <iso_year_adjust+0x6e>
 808a688:	e02a      	b.n	808a6e0 <iso_year_adjust+0xba>
 808a68a:	2b10      	cmp	r3, #16
 808a68c:	db26      	blt.n	808a6dc <iso_year_adjust+0xb6>
 808a68e:	2b11      	cmp	r3, #17
 808a690:	dd26      	ble.n	808a6e0 <iso_year_adjust+0xba>
 808a692:	3b1c      	subs	r3, #28
 808a694:	2b01      	cmp	r3, #1
 808a696:	d923      	bls.n	808a6e0 <iso_year_adjust+0xba>
 808a698:	e020      	b.n	808a6dc <iso_year_adjust+0xb6>
 808a69a:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808a69e:	4293      	cmp	r3, r2
 808a6a0:	dc0e      	bgt.n	808a6c0 <iso_year_adjust+0x9a>
 808a6a2:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808a6a6:	4293      	cmp	r3, r2
 808a6a8:	da16      	bge.n	808a6d8 <iso_year_adjust+0xb2>
 808a6aa:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808a6ae:	4293      	cmp	r3, r2
 808a6b0:	d012      	beq.n	808a6d8 <iso_year_adjust+0xb2>
 808a6b2:	db13      	blt.n	808a6dc <iso_year_adjust+0xb6>
 808a6b4:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808a6b8:	3b12      	subs	r3, #18
 808a6ba:	2b02      	cmp	r3, #2
 808a6bc:	d90c      	bls.n	808a6d8 <iso_year_adjust+0xb2>
 808a6be:	e00d      	b.n	808a6dc <iso_year_adjust+0xb6>
 808a6c0:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808a6c4:	4293      	cmp	r3, r2
 808a6c6:	d007      	beq.n	808a6d8 <iso_year_adjust+0xb2>
 808a6c8:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808a6cc:	4293      	cmp	r3, r2
 808a6ce:	d003      	beq.n	808a6d8 <iso_year_adjust+0xb2>
 808a6d0:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808a6d4:	4293      	cmp	r3, r2
 808a6d6:	d101      	bne.n	808a6dc <iso_year_adjust+0xb6>
 808a6d8:	2001      	movs	r0, #1
 808a6da:	bd10      	pop	{r4, pc}
 808a6dc:	2000      	movs	r0, #0
 808a6de:	bd10      	pop	{r4, pc}
 808a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 808a6e4:	bd10      	pop	{r4, pc}
	...

0808a6e8 <strftime>:
 808a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a6ec:	460e      	mov	r6, r1
 808a6ee:	b093      	sub	sp, #76	; 0x4c
 808a6f0:	461d      	mov	r5, r3
 808a6f2:	4607      	mov	r7, r0
 808a6f4:	4691      	mov	r9, r2
 808a6f6:	f001 fba7 	bl	808be48 <__get_current_time_locale>
 808a6fa:	2300      	movs	r3, #0
 808a6fc:	9306      	str	r3, [sp, #24]
 808a6fe:	461c      	mov	r4, r3
 808a700:	1e73      	subs	r3, r6, #1
 808a702:	9003      	str	r0, [sp, #12]
 808a704:	9302      	str	r3, [sp, #8]
 808a706:	f899 3000 	ldrb.w	r3, [r9]
 808a70a:	2b00      	cmp	r3, #0
 808a70c:	f000 8492 	beq.w	808b034 <strftime+0x94c>
 808a710:	2b25      	cmp	r3, #37	; 0x25
 808a712:	d008      	beq.n	808a726 <strftime+0x3e>
 808a714:	9a02      	ldr	r2, [sp, #8]
 808a716:	4294      	cmp	r4, r2
 808a718:	f080 8490 	bcs.w	808b03c <strftime+0x954>
 808a71c:	553b      	strb	r3, [r7, r4]
 808a71e:	f109 0901 	add.w	r9, r9, #1
 808a722:	3401      	adds	r4, #1
 808a724:	e7ef      	b.n	808a706 <strftime+0x1e>
 808a726:	f899 a001 	ldrb.w	sl, [r9, #1]
 808a72a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808a72e:	d007      	beq.n	808a740 <strftime+0x58>
 808a730:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a734:	d004      	beq.n	808a740 <strftime+0x58>
 808a736:	f109 0901 	add.w	r9, r9, #1
 808a73a:	f04f 0a00 	mov.w	sl, #0
 808a73e:	e001      	b.n	808a744 <strftime+0x5c>
 808a740:	f109 0902 	add.w	r9, r9, #2
 808a744:	f899 3000 	ldrb.w	r3, [r9]
 808a748:	3b31      	subs	r3, #49	; 0x31
 808a74a:	2b08      	cmp	r3, #8
 808a74c:	d808      	bhi.n	808a760 <strftime+0x78>
 808a74e:	4648      	mov	r0, r9
 808a750:	220a      	movs	r2, #10
 808a752:	a90a      	add	r1, sp, #40	; 0x28
 808a754:	f001 fb6e 	bl	808be34 <strtoul>
 808a758:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808a75c:	4680      	mov	r8, r0
 808a75e:	e001      	b.n	808a764 <strftime+0x7c>
 808a760:	f04f 0800 	mov.w	r8, #0
 808a764:	f899 3000 	ldrb.w	r3, [r9]
 808a768:	2b45      	cmp	r3, #69	; 0x45
 808a76a:	d001      	beq.n	808a770 <strftime+0x88>
 808a76c:	2b4f      	cmp	r3, #79	; 0x4f
 808a76e:	d101      	bne.n	808a774 <strftime+0x8c>
 808a770:	f109 0901 	add.w	r9, r9, #1
 808a774:	f899 0000 	ldrb.w	r0, [r9]
 808a778:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808a77c:	2b55      	cmp	r3, #85	; 0x55
 808a77e:	f200 845d 	bhi.w	808b03c <strftime+0x954>
 808a782:	e8df f013 	tbh	[pc, r3, lsl #1]
 808a786:	044a      	.short	0x044a
 808a788:	045b045b 	.word	0x045b045b
 808a78c:	045b045b 	.word	0x045b045b
 808a790:	045b045b 	.word	0x045b045b
 808a794:	045b045b 	.word	0x045b045b
 808a798:	045b045b 	.word	0x045b045b
 808a79c:	045b045b 	.word	0x045b045b
 808a7a0:	045b045b 	.word	0x045b045b
 808a7a4:	045b045b 	.word	0x045b045b
 808a7a8:	045b045b 	.word	0x045b045b
 808a7ac:	045b045b 	.word	0x045b045b
 808a7b0:	045b045b 	.word	0x045b045b
 808a7b4:	045b045b 	.word	0x045b045b
 808a7b8:	045b045b 	.word	0x045b045b
 808a7bc:	006f045b 	.word	0x006f045b
 808a7c0:	00d400a1 	.word	0x00d400a1
 808a7c4:	045b011a 	.word	0x045b011a
 808a7c8:	01a0013f 	.word	0x01a0013f
 808a7cc:	022d0226 	.word	0x022d0226
 808a7d0:	045b045b 	.word	0x045b045b
 808a7d4:	0260045b 	.word	0x0260045b
 808a7d8:	045b045b 	.word	0x045b045b
 808a7dc:	045b0268 	.word	0x045b0268
 808a7e0:	031c0296 	.word	0x031c0296
 808a7e4:	033a0324 	.word	0x033a0324
 808a7e8:	03850342 	.word	0x03850342
 808a7ec:	039f00c6 	.word	0x039f00c6
 808a7f0:	045b041f 	.word	0x045b041f
 808a7f4:	045b045b 	.word	0x045b045b
 808a7f8:	045b045b 	.word	0x045b045b
 808a7fc:	0056045b 	.word	0x0056045b
 808a800:	00ba0089 	.word	0x00ba0089
 808a804:	010c010c 	.word	0x010c010c
 808a808:	0171045b 	.word	0x0171045b
 808a80c:	045b0089 	.word	0x045b0089
 808a810:	0226023d 	.word	0x0226023d
 808a814:	025d022d 	.word	0x025d022d
 808a818:	045b0262 	.word	0x045b0262
 808a81c:	045b0268 	.word	0x045b0268
 808a820:	029b00be 	.word	0x029b00be
 808a824:	032d031e 	.word	0x032d031e
 808a828:	037e045b 	.word	0x037e045b
 808a82c:	039100c2 	.word	0x039100c2
 808a830:	03e7      	.short	0x03e7
 808a832:	69ab      	ldr	r3, [r5, #24]
 808a834:	9a03      	ldr	r2, [sp, #12]
 808a836:	3318      	adds	r3, #24
 808a838:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a83c:	4640      	mov	r0, r8
 808a83e:	f000 fc07 	bl	808b050 <strlen>
 808a842:	f108 38ff 	add.w	r8, r8, #4294967295
 808a846:	193b      	adds	r3, r7, r4
 808a848:	4420      	add	r0, r4
 808a84a:	4284      	cmp	r4, r0
 808a84c:	f000 83eb 	beq.w	808b026 <strftime+0x93e>
 808a850:	9a02      	ldr	r2, [sp, #8]
 808a852:	4294      	cmp	r4, r2
 808a854:	f080 83f2 	bcs.w	808b03c <strftime+0x954>
 808a858:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a85c:	3401      	adds	r4, #1
 808a85e:	f803 2b01 	strb.w	r2, [r3], #1
 808a862:	e7f2      	b.n	808a84a <strftime+0x162>
 808a864:	69ab      	ldr	r3, [r5, #24]
 808a866:	9a03      	ldr	r2, [sp, #12]
 808a868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808a86c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808a870:	4640      	mov	r0, r8
 808a872:	f000 fbed 	bl	808b050 <strlen>
 808a876:	f108 38ff 	add.w	r8, r8, #4294967295
 808a87a:	193b      	adds	r3, r7, r4
 808a87c:	4420      	add	r0, r4
 808a87e:	4284      	cmp	r4, r0
 808a880:	f000 83d1 	beq.w	808b026 <strftime+0x93e>
 808a884:	9a02      	ldr	r2, [sp, #8]
 808a886:	4294      	cmp	r4, r2
 808a888:	f080 83d8 	bcs.w	808b03c <strftime+0x954>
 808a88c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a890:	3401      	adds	r4, #1
 808a892:	f803 2b01 	strb.w	r2, [r3], #1
 808a896:	e7f2      	b.n	808a87e <strftime+0x196>
 808a898:	692b      	ldr	r3, [r5, #16]
 808a89a:	9a03      	ldr	r2, [sp, #12]
 808a89c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a8a0:	4640      	mov	r0, r8
 808a8a2:	f000 fbd5 	bl	808b050 <strlen>
 808a8a6:	f108 38ff 	add.w	r8, r8, #4294967295
 808a8aa:	193b      	adds	r3, r7, r4
 808a8ac:	4420      	add	r0, r4
 808a8ae:	4284      	cmp	r4, r0
 808a8b0:	f000 83b9 	beq.w	808b026 <strftime+0x93e>
 808a8b4:	9a02      	ldr	r2, [sp, #8]
 808a8b6:	4294      	cmp	r4, r2
 808a8b8:	f080 83c0 	bcs.w	808b03c <strftime+0x954>
 808a8bc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a8c0:	3401      	adds	r4, #1
 808a8c2:	f803 2b01 	strb.w	r2, [r3], #1
 808a8c6:	e7f2      	b.n	808a8ae <strftime+0x1c6>
 808a8c8:	692b      	ldr	r3, [r5, #16]
 808a8ca:	9a03      	ldr	r2, [sp, #12]
 808a8cc:	330c      	adds	r3, #12
 808a8ce:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a8d2:	4640      	mov	r0, r8
 808a8d4:	f000 fbbc 	bl	808b050 <strlen>
 808a8d8:	f108 38ff 	add.w	r8, r8, #4294967295
 808a8dc:	193b      	adds	r3, r7, r4
 808a8de:	4420      	add	r0, r4
 808a8e0:	4284      	cmp	r4, r0
 808a8e2:	f000 83a0 	beq.w	808b026 <strftime+0x93e>
 808a8e6:	9a02      	ldr	r2, [sp, #8]
 808a8e8:	4294      	cmp	r4, r2
 808a8ea:	f080 83a7 	bcs.w	808b03c <strftime+0x954>
 808a8ee:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a8f2:	3401      	adds	r4, #1
 808a8f4:	f803 2b01 	strb.w	r2, [r3], #1
 808a8f8:	e7f2      	b.n	808a8e0 <strftime+0x1f8>
 808a8fa:	9b03      	ldr	r3, [sp, #12]
 808a8fc:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808a900:	e00a      	b.n	808a918 <strftime+0x230>
 808a902:	9b03      	ldr	r3, [sp, #12]
 808a904:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808a908:	e006      	b.n	808a918 <strftime+0x230>
 808a90a:	9b03      	ldr	r3, [sp, #12]
 808a90c:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808a910:	e002      	b.n	808a918 <strftime+0x230>
 808a912:	9b03      	ldr	r3, [sp, #12]
 808a914:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808a918:	4640      	mov	r0, r8
 808a91a:	f000 fb99 	bl	808b050 <strlen>
 808a91e:	f898 3000 	ldrb.w	r3, [r8]
 808a922:	2b00      	cmp	r3, #0
 808a924:	f000 837f 	beq.w	808b026 <strftime+0x93e>
 808a928:	462b      	mov	r3, r5
 808a92a:	4642      	mov	r2, r8
 808a92c:	e093      	b.n	808aa56 <strftime+0x36e>
 808a92e:	49b6      	ldr	r1, [pc, #728]	; (808ac08 <strftime+0x520>)
 808a930:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808a934:	458b      	cmp	fp, r1
 808a936:	bfac      	ite	ge
 808a938:	2100      	movge	r1, #0
 808a93a:	2101      	movlt	r1, #1
 808a93c:	f1bb 0f00 	cmp.w	fp, #0
 808a940:	db04      	blt.n	808a94c <strftime+0x264>
 808a942:	2064      	movs	r0, #100	; 0x64
 808a944:	fb9b f0f0 	sdiv	r0, fp, r0
 808a948:	3013      	adds	r0, #19
 808a94a:	e008      	b.n	808a95e <strftime+0x276>
 808a94c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808a950:	9107      	str	r1, [sp, #28]
 808a952:	f001 fcb9 	bl	808c2c8 <abs>
 808a956:	2364      	movs	r3, #100	; 0x64
 808a958:	fb90 f0f3 	sdiv	r0, r0, r3
 808a95c:	9907      	ldr	r1, [sp, #28]
 808a95e:	f1ba 0f00 	cmp.w	sl, #0
 808a962:	d008      	beq.n	808a976 <strftime+0x28e>
 808a964:	2863      	cmp	r0, #99	; 0x63
 808a966:	dd09      	ble.n	808a97c <strftime+0x294>
 808a968:	4ba8      	ldr	r3, [pc, #672]	; (808ac0c <strftime+0x524>)
 808a96a:	4aa9      	ldr	r2, [pc, #676]	; (808ac10 <strftime+0x528>)
 808a96c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a970:	bf18      	it	ne
 808a972:	4613      	movne	r3, r2
 808a974:	e003      	b.n	808a97e <strftime+0x296>
 808a976:	4ba6      	ldr	r3, [pc, #664]	; (808ac10 <strftime+0x528>)
 808a978:	4aa6      	ldr	r2, [pc, #664]	; (808ac14 <strftime+0x52c>)
 808a97a:	e001      	b.n	808a980 <strftime+0x298>
 808a97c:	4ba4      	ldr	r3, [pc, #656]	; (808ac10 <strftime+0x528>)
 808a97e:	4aa6      	ldr	r2, [pc, #664]	; (808ac18 <strftime+0x530>)
 808a980:	f1b8 0f01 	cmp.w	r8, #1
 808a984:	bf98      	it	ls
 808a986:	f04f 0802 	movls.w	r8, #2
 808a98a:	ebc1 0108 	rsb	r1, r1, r8
 808a98e:	9001      	str	r0, [sp, #4]
 808a990:	9100      	str	r1, [sp, #0]
 808a992:	489d      	ldr	r0, [pc, #628]	; (808ac08 <strftime+0x520>)
 808a994:	49a1      	ldr	r1, [pc, #644]	; (808ac1c <strftime+0x534>)
 808a996:	4583      	cmp	fp, r0
 808a998:	bfb8      	it	lt
 808a99a:	460b      	movlt	r3, r1
 808a99c:	e21d      	b.n	808adda <strftime+0x6f2>
 808a99e:	4aa0      	ldr	r2, [pc, #640]	; (808ac20 <strftime+0x538>)
 808a9a0:	49a0      	ldr	r1, [pc, #640]	; (808ac24 <strftime+0x53c>)
 808a9a2:	68eb      	ldr	r3, [r5, #12]
 808a9a4:	2864      	cmp	r0, #100	; 0x64
 808a9a6:	bf08      	it	eq
 808a9a8:	460a      	moveq	r2, r1
 808a9aa:	1b31      	subs	r1, r6, r4
 808a9ac:	1938      	adds	r0, r7, r4
 808a9ae:	f7fb fb17 	bl	8085fe0 <sniprintf>
 808a9b2:	2800      	cmp	r0, #0
 808a9b4:	f280 8302 	bge.w	808afbc <strftime+0x8d4>
 808a9b8:	e340      	b.n	808b03c <strftime+0x954>
 808a9ba:	6968      	ldr	r0, [r5, #20]
 808a9bc:	692b      	ldr	r3, [r5, #16]
 808a9be:	2800      	cmp	r0, #0
 808a9c0:	f103 0b01 	add.w	fp, r3, #1
 808a9c4:	eb07 0804 	add.w	r8, r7, r4
 808a9c8:	ebc4 0a06 	rsb	sl, r4, r6
 808a9cc:	68eb      	ldr	r3, [r5, #12]
 808a9ce:	db05      	blt.n	808a9dc <strftime+0x2f4>
 808a9d0:	2264      	movs	r2, #100	; 0x64
 808a9d2:	fb90 f1f2 	sdiv	r1, r0, r2
 808a9d6:	fb02 0011 	mls	r0, r2, r1, r0
 808a9da:	e00a      	b.n	808a9f2 <strftime+0x30a>
 808a9dc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a9e0:	9307      	str	r3, [sp, #28]
 808a9e2:	f001 fc71 	bl	808c2c8 <abs>
 808a9e6:	2264      	movs	r2, #100	; 0x64
 808a9e8:	fb90 f1f2 	sdiv	r1, r0, r2
 808a9ec:	fb01 0012 	mls	r0, r1, r2, r0
 808a9f0:	9b07      	ldr	r3, [sp, #28]
 808a9f2:	9001      	str	r0, [sp, #4]
 808a9f4:	9300      	str	r3, [sp, #0]
 808a9f6:	4651      	mov	r1, sl
 808a9f8:	465b      	mov	r3, fp
 808a9fa:	4640      	mov	r0, r8
 808a9fc:	4a8a      	ldr	r2, [pc, #552]	; (808ac28 <strftime+0x540>)
 808a9fe:	f7fb faef 	bl	8085fe0 <sniprintf>
 808aa02:	e7d6      	b.n	808a9b2 <strftime+0x2ca>
 808aa04:	2325      	movs	r3, #37	; 0x25
 808aa06:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808aa0a:	f1ba 0f00 	cmp.w	sl, #0
 808aa0e:	d007      	beq.n	808aa20 <strftime+0x338>
 808aa10:	f1b8 0f05 	cmp.w	r8, #5
 808aa14:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808aa18:	bf98      	it	ls
 808aa1a:	f04f 0806 	movls.w	r8, #6
 808aa1e:	e004      	b.n	808aa2a <strftime+0x342>
 808aa20:	232b      	movs	r3, #43	; 0x2b
 808aa22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808aa26:	f04f 080a 	mov.w	r8, #10
 808aa2a:	f1b8 0306 	subs.w	r3, r8, #6
 808aa2e:	d102      	bne.n	808aa36 <strftime+0x34e>
 808aa30:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808aa34:	e00a      	b.n	808aa4c <strftime+0x364>
 808aa36:	4a7d      	ldr	r2, [pc, #500]	; (808ac2c <strftime+0x544>)
 808aa38:	211e      	movs	r1, #30
 808aa3a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808aa3e:	f7fb facf 	bl	8085fe0 <sniprintf>
 808aa42:	2800      	cmp	r0, #0
 808aa44:	ddf4      	ble.n	808aa30 <strftime+0x348>
 808aa46:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808aa4a:	4418      	add	r0, r3
 808aa4c:	4978      	ldr	r1, [pc, #480]	; (808ac30 <strftime+0x548>)
 808aa4e:	f7ff fdc7 	bl	808a5e0 <strcpy>
 808aa52:	462b      	mov	r3, r5
 808aa54:	aa0a      	add	r2, sp, #40	; 0x28
 808aa56:	1b31      	subs	r1, r6, r4
 808aa58:	1938      	adds	r0, r7, r4
 808aa5a:	f7ff fe45 	bl	808a6e8 <strftime>
 808aa5e:	2800      	cmp	r0, #0
 808aa60:	f340 82ec 	ble.w	808b03c <strftime+0x954>
 808aa64:	4404      	add	r4, r0
 808aa66:	e2de      	b.n	808b026 <strftime+0x93e>
 808aa68:	4628      	mov	r0, r5
 808aa6a:	f7ff fddc 	bl	808a626 <iso_year_adjust>
 808aa6e:	4680      	mov	r8, r0
 808aa70:	6968      	ldr	r0, [r5, #20]
 808aa72:	2800      	cmp	r0, #0
 808aa74:	db05      	blt.n	808aa82 <strftime+0x39a>
 808aa76:	2264      	movs	r2, #100	; 0x64
 808aa78:	fb90 f1f2 	sdiv	r1, r0, r2
 808aa7c:	fb02 0011 	mls	r0, r2, r1, r0
 808aa80:	e008      	b.n	808aa94 <strftime+0x3ac>
 808aa82:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808aa86:	f001 fc1f 	bl	808c2c8 <abs>
 808aa8a:	2264      	movs	r2, #100	; 0x64
 808aa8c:	fb90 f3f2 	sdiv	r3, r0, r2
 808aa90:	fb03 0012 	mls	r0, r3, r2, r0
 808aa94:	f1b8 0f00 	cmp.w	r8, #0
 808aa98:	da06      	bge.n	808aaa8 <strftime+0x3c0>
 808aa9a:	696a      	ldr	r2, [r5, #20]
 808aa9c:	4b65      	ldr	r3, [pc, #404]	; (808ac34 <strftime+0x54c>)
 808aa9e:	429a      	cmp	r2, r3
 808aaa0:	bfb8      	it	lt
 808aaa2:	f04f 0801 	movlt.w	r8, #1
 808aaa6:	e006      	b.n	808aab6 <strftime+0x3ce>
 808aaa8:	d005      	beq.n	808aab6 <strftime+0x3ce>
 808aaaa:	696a      	ldr	r2, [r5, #20]
 808aaac:	4b56      	ldr	r3, [pc, #344]	; (808ac08 <strftime+0x520>)
 808aaae:	429a      	cmp	r2, r3
 808aab0:	bfb8      	it	lt
 808aab2:	f04f 38ff 	movlt.w	r8, #4294967295
 808aab6:	2364      	movs	r3, #100	; 0x64
 808aab8:	4440      	add	r0, r8
 808aaba:	fb90 f2f3 	sdiv	r2, r0, r3
 808aabe:	fb03 0012 	mls	r0, r3, r2, r0
 808aac2:	4418      	add	r0, r3
 808aac4:	e1f8      	b.n	808aeb8 <strftime+0x7d0>
 808aac6:	4b50      	ldr	r3, [pc, #320]	; (808ac08 <strftime+0x520>)
 808aac8:	6969      	ldr	r1, [r5, #20]
 808aaca:	4628      	mov	r0, r5
 808aacc:	4299      	cmp	r1, r3
 808aace:	bfac      	ite	ge
 808aad0:	2300      	movge	r3, #0
 808aad2:	2301      	movlt	r3, #1
 808aad4:	9108      	str	r1, [sp, #32]
 808aad6:	9307      	str	r3, [sp, #28]
 808aad8:	f7ff fda5 	bl	808a626 <iso_year_adjust>
 808aadc:	9908      	ldr	r1, [sp, #32]
 808aade:	4683      	mov	fp, r0
 808aae0:	2900      	cmp	r1, #0
 808aae2:	db04      	blt.n	808aaee <strftime+0x406>
 808aae4:	2364      	movs	r3, #100	; 0x64
 808aae6:	fb91 f3f3 	sdiv	r3, r1, r3
 808aaea:	3313      	adds	r3, #19
 808aaec:	e008      	b.n	808ab00 <strftime+0x418>
 808aaee:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808aaf2:	9108      	str	r1, [sp, #32]
 808aaf4:	f001 fbe8 	bl	808c2c8 <abs>
 808aaf8:	2364      	movs	r3, #100	; 0x64
 808aafa:	fb90 f3f3 	sdiv	r3, r0, r3
 808aafe:	9908      	ldr	r1, [sp, #32]
 808ab00:	6968      	ldr	r0, [r5, #20]
 808ab02:	2800      	cmp	r0, #0
 808ab04:	db06      	blt.n	808ab14 <strftime+0x42c>
 808ab06:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ab0a:	fb90 fcfe 	sdiv	ip, r0, lr
 808ab0e:	fb0e 001c 	mls	r0, lr, ip, r0
 808ab12:	e00d      	b.n	808ab30 <strftime+0x448>
 808ab14:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ab18:	9109      	str	r1, [sp, #36]	; 0x24
 808ab1a:	9308      	str	r3, [sp, #32]
 808ab1c:	f001 fbd4 	bl	808c2c8 <abs>
 808ab20:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ab24:	fb90 fcfe 	sdiv	ip, r0, lr
 808ab28:	fb0c 001e 	mls	r0, ip, lr, r0
 808ab2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 808ab2e:	9b08      	ldr	r3, [sp, #32]
 808ab30:	f1bb 0f00 	cmp.w	fp, #0
 808ab34:	da08      	bge.n	808ab48 <strftime+0x460>
 808ab36:	6969      	ldr	r1, [r5, #20]
 808ab38:	4a3e      	ldr	r2, [pc, #248]	; (808ac34 <strftime+0x54c>)
 808ab3a:	4291      	cmp	r1, r2
 808ab3c:	da0a      	bge.n	808ab54 <strftime+0x46c>
 808ab3e:	f04f 0b01 	mov.w	fp, #1
 808ab42:	f8cd b01c 	str.w	fp, [sp, #28]
 808ab46:	e005      	b.n	808ab54 <strftime+0x46c>
 808ab48:	d004      	beq.n	808ab54 <strftime+0x46c>
 808ab4a:	4a2f      	ldr	r2, [pc, #188]	; (808ac08 <strftime+0x520>)
 808ab4c:	4291      	cmp	r1, r2
 808ab4e:	bfb8      	it	lt
 808ab50:	f04f 3bff 	movlt.w	fp, #4294967295
 808ab54:	eb0b 0200 	add.w	r2, fp, r0
 808ab58:	1c50      	adds	r0, r2, #1
 808ab5a:	d102      	bne.n	808ab62 <strftime+0x47a>
 808ab5c:	3b01      	subs	r3, #1
 808ab5e:	2263      	movs	r2, #99	; 0x63
 808ab60:	e003      	b.n	808ab6a <strftime+0x482>
 808ab62:	2a64      	cmp	r2, #100	; 0x64
 808ab64:	bf04      	itt	eq
 808ab66:	3301      	addeq	r3, #1
 808ab68:	2200      	moveq	r2, #0
 808ab6a:	2064      	movs	r0, #100	; 0x64
 808ab6c:	fb00 2303 	mla	r3, r0, r3, r2
 808ab70:	9a07      	ldr	r2, [sp, #28]
 808ab72:	b142      	cbz	r2, 808ab86 <strftime+0x49e>
 808ab74:	222d      	movs	r2, #45	; 0x2d
 808ab76:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808ab7a:	f1b8 0f00 	cmp.w	r8, #0
 808ab7e:	d013      	beq.n	808aba8 <strftime+0x4c0>
 808ab80:	f108 38ff 	add.w	r8, r8, #4294967295
 808ab84:	e010      	b.n	808aba8 <strftime+0x4c0>
 808ab86:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808ab8a:	d110      	bne.n	808abae <strftime+0x4c6>
 808ab8c:	f242 720f 	movw	r2, #9999	; 0x270f
 808ab90:	4293      	cmp	r3, r2
 808ab92:	d90c      	bls.n	808abae <strftime+0x4c6>
 808ab94:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808ab98:	f1b8 0f00 	cmp.w	r8, #0
 808ab9c:	d1f0      	bne.n	808ab80 <strftime+0x498>
 808ab9e:	aa12      	add	r2, sp, #72	; 0x48
 808aba0:	2125      	movs	r1, #37	; 0x25
 808aba2:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808aba6:	e00a      	b.n	808abbe <strftime+0x4d6>
 808aba8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808abac:	e000      	b.n	808abb0 <strftime+0x4c8>
 808abae:	aa0a      	add	r2, sp, #40	; 0x28
 808abb0:	2125      	movs	r1, #37	; 0x25
 808abb2:	7011      	strb	r1, [r2, #0]
 808abb4:	f1ba 0f00 	cmp.w	sl, #0
 808abb8:	d101      	bne.n	808abbe <strftime+0x4d6>
 808abba:	1c50      	adds	r0, r2, #1
 808abbc:	e002      	b.n	808abc4 <strftime+0x4dc>
 808abbe:	2130      	movs	r1, #48	; 0x30
 808abc0:	1c90      	adds	r0, r2, #2
 808abc2:	7051      	strb	r1, [r2, #1]
 808abc4:	491c      	ldr	r1, [pc, #112]	; (808ac38 <strftime+0x550>)
 808abc6:	9307      	str	r3, [sp, #28]
 808abc8:	f7ff fd0a 	bl	808a5e0 <strcpy>
 808abcc:	9b07      	ldr	r3, [sp, #28]
 808abce:	9300      	str	r3, [sp, #0]
 808abd0:	e1ac      	b.n	808af2c <strftime+0x844>
 808abd2:	4a14      	ldr	r2, [pc, #80]	; (808ac24 <strftime+0x53c>)
 808abd4:	4912      	ldr	r1, [pc, #72]	; (808ac20 <strftime+0x538>)
 808abd6:	68ab      	ldr	r3, [r5, #8]
 808abd8:	286b      	cmp	r0, #107	; 0x6b
 808abda:	bf08      	it	eq
 808abdc:	460a      	moveq	r2, r1
 808abde:	e6e4      	b.n	808a9aa <strftime+0x2c2>
 808abe0:	68a9      	ldr	r1, [r5, #8]
 808abe2:	230c      	movs	r3, #12
 808abe4:	b131      	cbz	r1, 808abf4 <strftime+0x50c>
 808abe6:	4299      	cmp	r1, r3
 808abe8:	bf16      	itet	ne
 808abea:	fb91 f2f3 	sdivne	r2, r1, r3
 808abee:	460b      	moveq	r3, r1
 808abf0:	fb03 1312 	mlsne	r3, r3, r2, r1
 808abf4:	4a0a      	ldr	r2, [pc, #40]	; (808ac20 <strftime+0x538>)
 808abf6:	490b      	ldr	r1, [pc, #44]	; (808ac24 <strftime+0x53c>)
 808abf8:	2849      	cmp	r0, #73	; 0x49
 808abfa:	bf08      	it	eq
 808abfc:	460a      	moveq	r2, r1
 808abfe:	e6d4      	b.n	808a9aa <strftime+0x2c2>
 808ac00:	69eb      	ldr	r3, [r5, #28]
 808ac02:	4a0e      	ldr	r2, [pc, #56]	; (808ac3c <strftime+0x554>)
 808ac04:	3301      	adds	r3, #1
 808ac06:	e6d0      	b.n	808a9aa <strftime+0x2c2>
 808ac08:	fffff894 	.word	0xfffff894
 808ac0c:	0808e5a3 	.word	0x0808e5a3
 808ac10:	0808df27 	.word	0x0808df27
 808ac14:	0808e594 	.word	0x0808e594
 808ac18:	0808e59b 	.word	0x0808e59b
 808ac1c:	0808d9ea 	.word	0x0808d9ea
 808ac20:	0808e5a5 	.word	0x0808e5a5
 808ac24:	0808e5b3 	.word	0x0808e5b3
 808ac28:	0808e5a9 	.word	0x0808e5a9
 808ac2c:	0808d88f 	.word	0x0808d88f
 808ac30:	0808d3ed 	.word	0x0808d3ed
 808ac34:	fffff895 	.word	0xfffff895
 808ac38:	0808e5b8 	.word	0x0808e5b8
 808ac3c:	0808e5bc 	.word	0x0808e5bc
 808ac40:	692b      	ldr	r3, [r5, #16]
 808ac42:	3301      	adds	r3, #1
 808ac44:	e13c      	b.n	808aec0 <strftime+0x7d8>
 808ac46:	686b      	ldr	r3, [r5, #4]
 808ac48:	e13a      	b.n	808aec0 <strftime+0x7d8>
 808ac4a:	9b02      	ldr	r3, [sp, #8]
 808ac4c:	429c      	cmp	r4, r3
 808ac4e:	f080 81f5 	bcs.w	808b03c <strftime+0x954>
 808ac52:	230a      	movs	r3, #10
 808ac54:	e1e5      	b.n	808b022 <strftime+0x93a>
 808ac56:	68ab      	ldr	r3, [r5, #8]
 808ac58:	9a03      	ldr	r2, [sp, #12]
 808ac5a:	2b0b      	cmp	r3, #11
 808ac5c:	bfcc      	ite	gt
 808ac5e:	23a4      	movgt	r3, #164	; 0xa4
 808ac60:	23a0      	movle	r3, #160	; 0xa0
 808ac62:	4413      	add	r3, r2
 808ac64:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808ac68:	4640      	mov	r0, r8
 808ac6a:	f000 f9f1 	bl	808b050 <strlen>
 808ac6e:	4642      	mov	r2, r8
 808ac70:	4bb1      	ldr	r3, [pc, #708]	; (808af38 <strftime+0x850>)
 808ac72:	1939      	adds	r1, r7, r4
 808ac74:	f8d3 e000 	ldr.w	lr, [r3]
 808ac78:	4420      	add	r0, r4
 808ac7a:	4284      	cmp	r4, r0
 808ac7c:	f000 81d3 	beq.w	808b026 <strftime+0x93e>
 808ac80:	9b02      	ldr	r3, [sp, #8]
 808ac82:	429c      	cmp	r4, r3
 808ac84:	f080 81da 	bcs.w	808b03c <strftime+0x954>
 808ac88:	f899 3000 	ldrb.w	r3, [r9]
 808ac8c:	3401      	adds	r4, #1
 808ac8e:	2b50      	cmp	r3, #80	; 0x50
 808ac90:	7813      	ldrb	r3, [r2, #0]
 808ac92:	d10a      	bne.n	808acaa <strftime+0x5c2>
 808ac94:	eb0e 0c03 	add.w	ip, lr, r3
 808ac98:	f89c c001 	ldrb.w	ip, [ip, #1]
 808ac9c:	f00c 0c03 	and.w	ip, ip, #3
 808aca0:	f1bc 0f01 	cmp.w	ip, #1
 808aca4:	bf08      	it	eq
 808aca6:	3320      	addeq	r3, #32
 808aca8:	b2db      	uxtb	r3, r3
 808acaa:	f801 3b01 	strb.w	r3, [r1], #1
 808acae:	3201      	adds	r2, #1
 808acb0:	e7e3      	b.n	808ac7a <strftime+0x592>
 808acb2:	686b      	ldr	r3, [r5, #4]
 808acb4:	4aa1      	ldr	r2, [pc, #644]	; (808af3c <strftime+0x854>)
 808acb6:	9300      	str	r3, [sp, #0]
 808acb8:	68ab      	ldr	r3, [r5, #8]
 808acba:	e139      	b.n	808af30 <strftime+0x848>
 808acbc:	6a2b      	ldr	r3, [r5, #32]
 808acbe:	2b00      	cmp	r3, #0
 808acc0:	db17      	blt.n	808acf2 <strftime+0x60a>
 808acc2:	f001 f979 	bl	808bfb8 <__tz_lock>
 808acc6:	9b06      	ldr	r3, [sp, #24]
 808acc8:	b91b      	cbnz	r3, 808acd2 <strftime+0x5ea>
 808acca:	f001 f977 	bl	808bfbc <_tzset_unlocked>
 808acce:	2301      	movs	r3, #1
 808acd0:	9306      	str	r3, [sp, #24]
 808acd2:	f001 fe5f 	bl	808c994 <__gettzinfo>
 808acd6:	6a2b      	ldr	r3, [r5, #32]
 808acd8:	221c      	movs	r2, #28
 808acda:	2b00      	cmp	r3, #0
 808acdc:	bfd4      	ite	le
 808acde:	2300      	movle	r3, #0
 808ace0:	2301      	movgt	r3, #1
 808ace2:	fb02 0003 	mla	r0, r2, r3, r0
 808ace6:	6a03      	ldr	r3, [r0, #32]
 808ace8:	f1c3 0800 	rsb	r8, r3, #0
 808acec:	f001 f965 	bl	808bfba <__tz_unlock>
 808acf0:	e001      	b.n	808acf6 <strftime+0x60e>
 808acf2:	f04f 0800 	mov.w	r8, #0
 808acf6:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808acfa:	ebc4 0c06 	rsb	ip, r4, r6
 808acfe:	4670      	mov	r0, lr
 808ad00:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808ad04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808ad08:	f141 33ff 	adc.w	r3, r1, #4294967295
 808ad0c:	2a00      	cmp	r2, #0
 808ad0e:	f173 0b00 	sbcs.w	fp, r3, #0
 808ad12:	eb07 0a04 	add.w	sl, r7, r4
 808ad16:	da03      	bge.n	808ad20 <strftime+0x638>
 808ad18:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808ad1c:	f141 33ff 	adc.w	r3, r1, #4294967295
 808ad20:	0891      	lsrs	r1, r2, #2
 808ad22:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808ad26:	109b      	asrs	r3, r3, #2
 808ad28:	9104      	str	r1, [sp, #16]
 808ad2a:	9305      	str	r3, [sp, #20]
 808ad2c:	f10e 31ff 	add.w	r1, lr, #4294967295
 808ad30:	2364      	movs	r3, #100	; 0x64
 808ad32:	fb91 f1f3 	sdiv	r1, r1, r3
 808ad36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808ad3a:	1a52      	subs	r2, r2, r1
 808ad3c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808ad40:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808ad44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808ad48:	fb90 f1f1 	sdiv	r1, r0, r1
 808ad4c:	1852      	adds	r2, r2, r1
 808ad4e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ad52:	f240 116d 	movw	r1, #365	; 0x16d
 808ad56:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808ad5a:	fb01 fe0e 	mul.w	lr, r1, lr
 808ad5e:	69e9      	ldr	r1, [r5, #28]
 808ad60:	eb12 020e 	adds.w	r2, r2, lr
 808ad64:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808ad68:	1852      	adds	r2, r2, r1
 808ad6a:	f04f 0e18 	mov.w	lr, #24
 808ad6e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ad72:	fba2 010e 	umull	r0, r1, r2, lr
 808ad76:	fb0e 1103 	mla	r1, lr, r3, r1
 808ad7a:	68ab      	ldr	r3, [r5, #8]
 808ad7c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808ad80:	18c0      	adds	r0, r0, r3
 808ad82:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808ad86:	fba0 230e 	umull	r2, r3, r0, lr
 808ad8a:	fb0e 3301 	mla	r3, lr, r1, r3
 808ad8e:	6869      	ldr	r1, [r5, #4]
 808ad90:	1852      	adds	r2, r2, r1
 808ad92:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ad96:	fba2 010e 	umull	r0, r1, r2, lr
 808ad9a:	fb0e 1103 	mla	r1, lr, r3, r1
 808ad9e:	682b      	ldr	r3, [r5, #0]
 808ada0:	4a67      	ldr	r2, [pc, #412]	; (808af40 <strftime+0x858>)
 808ada2:	18c0      	adds	r0, r0, r3
 808ada4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808ada8:	ebb0 0008 	subs.w	r0, r0, r8
 808adac:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808adb0:	e9cd 0100 	strd	r0, r1, [sp]
 808adb4:	4661      	mov	r1, ip
 808adb6:	4650      	mov	r0, sl
 808adb8:	f7fb f912 	bl	8085fe0 <sniprintf>
 808adbc:	e5f9      	b.n	808a9b2 <strftime+0x2ca>
 808adbe:	682b      	ldr	r3, [r5, #0]
 808adc0:	e07e      	b.n	808aec0 <strftime+0x7d8>
 808adc2:	9b02      	ldr	r3, [sp, #8]
 808adc4:	429c      	cmp	r4, r3
 808adc6:	f080 8139 	bcs.w	808b03c <strftime+0x954>
 808adca:	2309      	movs	r3, #9
 808adcc:	e129      	b.n	808b022 <strftime+0x93a>
 808adce:	682b      	ldr	r3, [r5, #0]
 808add0:	4a5c      	ldr	r2, [pc, #368]	; (808af44 <strftime+0x85c>)
 808add2:	9301      	str	r3, [sp, #4]
 808add4:	686b      	ldr	r3, [r5, #4]
 808add6:	9300      	str	r3, [sp, #0]
 808add8:	68ab      	ldr	r3, [r5, #8]
 808adda:	1b31      	subs	r1, r6, r4
 808addc:	1938      	adds	r0, r7, r4
 808adde:	e60e      	b.n	808a9fe <strftime+0x316>
 808ade0:	9b02      	ldr	r3, [sp, #8]
 808ade2:	429c      	cmp	r4, r3
 808ade4:	f080 812a 	bcs.w	808b03c <strftime+0x954>
 808ade8:	69ab      	ldr	r3, [r5, #24]
 808adea:	1c62      	adds	r2, r4, #1
 808adec:	b90b      	cbnz	r3, 808adf2 <strftime+0x70a>
 808adee:	2337      	movs	r3, #55	; 0x37
 808adf0:	e000      	b.n	808adf4 <strftime+0x70c>
 808adf2:	3330      	adds	r3, #48	; 0x30
 808adf4:	553b      	strb	r3, [r7, r4]
 808adf6:	4614      	mov	r4, r2
 808adf8:	e115      	b.n	808b026 <strftime+0x93e>
 808adfa:	69eb      	ldr	r3, [r5, #28]
 808adfc:	69aa      	ldr	r2, [r5, #24]
 808adfe:	3307      	adds	r3, #7
 808ae00:	1a9b      	subs	r3, r3, r2
 808ae02:	2207      	movs	r2, #7
 808ae04:	fb93 f3f2 	sdiv	r3, r3, r2
 808ae08:	e05a      	b.n	808aec0 <strftime+0x7d8>
 808ae0a:	4628      	mov	r0, r5
 808ae0c:	f7ff fc0b 	bl	808a626 <iso_year_adjust>
 808ae10:	69aa      	ldr	r2, [r5, #24]
 808ae12:	b10a      	cbz	r2, 808ae18 <strftime+0x730>
 808ae14:	1e53      	subs	r3, r2, #1
 808ae16:	e000      	b.n	808ae1a <strftime+0x732>
 808ae18:	2306      	movs	r3, #6
 808ae1a:	2800      	cmp	r0, #0
 808ae1c:	dc2f      	bgt.n	808ae7e <strftime+0x796>
 808ae1e:	69ea      	ldr	r2, [r5, #28]
 808ae20:	d101      	bne.n	808ae26 <strftime+0x73e>
 808ae22:	320a      	adds	r2, #10
 808ae24:	e03b      	b.n	808ae9e <strftime+0x7b6>
 808ae26:	f240 716b 	movw	r1, #1899	; 0x76b
 808ae2a:	1a9a      	subs	r2, r3, r2
 808ae2c:	696b      	ldr	r3, [r5, #20]
 808ae2e:	2b00      	cmp	r3, #0
 808ae30:	bfb4      	ite	lt
 808ae32:	4608      	movlt	r0, r1
 808ae34:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808ae38:	4418      	add	r0, r3
 808ae3a:	0781      	lsls	r1, r0, #30
 808ae3c:	d107      	bne.n	808ae4e <strftime+0x766>
 808ae3e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ae42:	4601      	mov	r1, r0
 808ae44:	fb90 f0fe 	sdiv	r0, r0, lr
 808ae48:	fb0e 1110 	mls	r1, lr, r0, r1
 808ae4c:	b981      	cbnz	r1, 808ae70 <strftime+0x788>
 808ae4e:	f240 716b 	movw	r1, #1899	; 0x76b
 808ae52:	2b00      	cmp	r3, #0
 808ae54:	bfa8      	it	ge
 808ae56:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808ae5a:	4419      	add	r1, r3
 808ae5c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808ae60:	fb91 f0f3 	sdiv	r0, r1, r3
 808ae64:	fb03 1110 	mls	r1, r3, r0, r1
 808ae68:	fab1 f181 	clz	r1, r1
 808ae6c:	0949      	lsrs	r1, r1, #5
 808ae6e:	e000      	b.n	808ae72 <strftime+0x78a>
 808ae70:	2101      	movs	r1, #1
 808ae72:	1a52      	subs	r2, r2, r1
 808ae74:	2a05      	cmp	r2, #5
 808ae76:	bfb4      	ite	lt
 808ae78:	2335      	movlt	r3, #53	; 0x35
 808ae7a:	2334      	movge	r3, #52	; 0x34
 808ae7c:	e020      	b.n	808aec0 <strftime+0x7d8>
 808ae7e:	2301      	movs	r3, #1
 808ae80:	e01e      	b.n	808aec0 <strftime+0x7d8>
 808ae82:	9b02      	ldr	r3, [sp, #8]
 808ae84:	429c      	cmp	r4, r3
 808ae86:	f080 80d9 	bcs.w	808b03c <strftime+0x954>
 808ae8a:	69ab      	ldr	r3, [r5, #24]
 808ae8c:	3330      	adds	r3, #48	; 0x30
 808ae8e:	e0c8      	b.n	808b022 <strftime+0x93a>
 808ae90:	69aa      	ldr	r2, [r5, #24]
 808ae92:	b10a      	cbz	r2, 808ae98 <strftime+0x7b0>
 808ae94:	1e53      	subs	r3, r2, #1
 808ae96:	e000      	b.n	808ae9a <strftime+0x7b2>
 808ae98:	2306      	movs	r3, #6
 808ae9a:	69ea      	ldr	r2, [r5, #28]
 808ae9c:	3207      	adds	r2, #7
 808ae9e:	1ad2      	subs	r2, r2, r3
 808aea0:	2307      	movs	r3, #7
 808aea2:	fb92 f3f3 	sdiv	r3, r2, r3
 808aea6:	e00b      	b.n	808aec0 <strftime+0x7d8>
 808aea8:	6968      	ldr	r0, [r5, #20]
 808aeaa:	2800      	cmp	r0, #0
 808aeac:	da03      	bge.n	808aeb6 <strftime+0x7ce>
 808aeae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808aeb2:	f001 fa09 	bl	808c2c8 <abs>
 808aeb6:	2364      	movs	r3, #100	; 0x64
 808aeb8:	fb90 f2f3 	sdiv	r2, r0, r3
 808aebc:	fb02 0313 	mls	r3, r2, r3, r0
 808aec0:	4a21      	ldr	r2, [pc, #132]	; (808af48 <strftime+0x860>)
 808aec2:	e572      	b.n	808a9aa <strftime+0x2c2>
 808aec4:	696b      	ldr	r3, [r5, #20]
 808aec6:	4a21      	ldr	r2, [pc, #132]	; (808af4c <strftime+0x864>)
 808aec8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808aecc:	4293      	cmp	r3, r2
 808aece:	da05      	bge.n	808aedc <strftime+0x7f4>
 808aed0:	232d      	movs	r3, #45	; 0x2d
 808aed2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808aed6:	f1cb 0b00 	rsb	fp, fp, #0
 808aeda:	e008      	b.n	808aeee <strftime+0x806>
 808aedc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808aee0:	d10d      	bne.n	808aefe <strftime+0x816>
 808aee2:	f242 730f 	movw	r3, #9999	; 0x270f
 808aee6:	459b      	cmp	fp, r3
 808aee8:	d911      	bls.n	808af0e <strftime+0x826>
 808aeea:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808aeee:	f1b8 0f00 	cmp.w	r8, #0
 808aef2:	d001      	beq.n	808aef8 <strftime+0x810>
 808aef4:	f108 38ff 	add.w	r8, r8, #4294967295
 808aef8:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808aefc:	e000      	b.n	808af00 <strftime+0x818>
 808aefe:	ab0a      	add	r3, sp, #40	; 0x28
 808af00:	2225      	movs	r2, #37	; 0x25
 808af02:	701a      	strb	r2, [r3, #0]
 808af04:	f1ba 0f00 	cmp.w	sl, #0
 808af08:	d108      	bne.n	808af1c <strftime+0x834>
 808af0a:	1c58      	adds	r0, r3, #1
 808af0c:	e009      	b.n	808af22 <strftime+0x83a>
 808af0e:	f1b8 0f00 	cmp.w	r8, #0
 808af12:	d1f4      	bne.n	808aefe <strftime+0x816>
 808af14:	2325      	movs	r3, #37	; 0x25
 808af16:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808af1a:	ab0a      	add	r3, sp, #40	; 0x28
 808af1c:	2230      	movs	r2, #48	; 0x30
 808af1e:	1c98      	adds	r0, r3, #2
 808af20:	705a      	strb	r2, [r3, #1]
 808af22:	490b      	ldr	r1, [pc, #44]	; (808af50 <strftime+0x868>)
 808af24:	f7ff fb5c 	bl	808a5e0 <strcpy>
 808af28:	f8cd b000 	str.w	fp, [sp]
 808af2c:	4643      	mov	r3, r8
 808af2e:	aa0a      	add	r2, sp, #40	; 0x28
 808af30:	1b31      	subs	r1, r6, r4
 808af32:	1938      	adds	r0, r7, r4
 808af34:	e03f      	b.n	808afb6 <strftime+0x8ce>
 808af36:	bf00      	nop
 808af38:	20000054 	.word	0x20000054
 808af3c:	0808e5cb 	.word	0x0808e5cb
 808af40:	0808e5c1 	.word	0x0808e5c1
 808af44:	0808e5c6 	.word	0x0808e5c6
 808af48:	0808e5b3 	.word	0x0808e5b3
 808af4c:	fffff894 	.word	0xfffff894
 808af50:	0808e5b8 	.word	0x0808e5b8
 808af54:	6a2b      	ldr	r3, [r5, #32]
 808af56:	2b00      	cmp	r3, #0
 808af58:	db65      	blt.n	808b026 <strftime+0x93e>
 808af5a:	f001 f82d 	bl	808bfb8 <__tz_lock>
 808af5e:	9b06      	ldr	r3, [sp, #24]
 808af60:	b91b      	cbnz	r3, 808af6a <strftime+0x882>
 808af62:	f001 f82b 	bl	808bfbc <_tzset_unlocked>
 808af66:	2301      	movs	r3, #1
 808af68:	9306      	str	r3, [sp, #24]
 808af6a:	f001 fd13 	bl	808c994 <__gettzinfo>
 808af6e:	6a2b      	ldr	r3, [r5, #32]
 808af70:	221c      	movs	r2, #28
 808af72:	2b00      	cmp	r3, #0
 808af74:	bfd4      	ite	le
 808af76:	2300      	movle	r3, #0
 808af78:	2301      	movgt	r3, #1
 808af7a:	fb02 0003 	mla	r0, r2, r3, r0
 808af7e:	6a03      	ldr	r3, [r0, #32]
 808af80:	eb07 0a04 	add.w	sl, r7, r4
 808af84:	f1c3 0800 	rsb	r8, r3, #0
 808af88:	f001 f817 	bl	808bfba <__tz_unlock>
 808af8c:	233c      	movs	r3, #60	; 0x3c
 808af8e:	fb98 f0f3 	sdiv	r0, r8, r3
 808af92:	9307      	str	r3, [sp, #28]
 808af94:	f001 fd98 	bl	808cac8 <labs>
 808af98:	9b07      	ldr	r3, [sp, #28]
 808af9a:	ebc4 0b06 	rsb	fp, r4, r6
 808af9e:	fb90 f2f3 	sdiv	r2, r0, r3
 808afa2:	fb02 0013 	mls	r0, r2, r3, r0
 808afa6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808afaa:	9000      	str	r0, [sp, #0]
 808afac:	fb98 f3f3 	sdiv	r3, r8, r3
 808afb0:	4659      	mov	r1, fp
 808afb2:	4650      	mov	r0, sl
 808afb4:	4a24      	ldr	r2, [pc, #144]	; (808b048 <strftime+0x960>)
 808afb6:	f7fb f813 	bl	8085fe0 <sniprintf>
 808afba:	e4fa      	b.n	808a9b2 <strftime+0x2ca>
 808afbc:	4404      	add	r4, r0
 808afbe:	42a6      	cmp	r6, r4
 808afc0:	d831      	bhi.n	808b026 <strftime+0x93e>
 808afc2:	e03b      	b.n	808b03c <strftime+0x954>
 808afc4:	6a2b      	ldr	r3, [r5, #32]
 808afc6:	2b00      	cmp	r3, #0
 808afc8:	db2d      	blt.n	808b026 <strftime+0x93e>
 808afca:	f000 fff5 	bl	808bfb8 <__tz_lock>
 808afce:	9b06      	ldr	r3, [sp, #24]
 808afd0:	b91b      	cbnz	r3, 808afda <strftime+0x8f2>
 808afd2:	f000 fff3 	bl	808bfbc <_tzset_unlocked>
 808afd6:	2301      	movs	r3, #1
 808afd8:	9306      	str	r3, [sp, #24]
 808afda:	6a2b      	ldr	r3, [r5, #32]
 808afdc:	4a1b      	ldr	r2, [pc, #108]	; (808b04c <strftime+0x964>)
 808afde:	2b00      	cmp	r3, #0
 808afe0:	bfd4      	ite	le
 808afe2:	2300      	movle	r3, #0
 808afe4:	2301      	movgt	r3, #1
 808afe6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808afea:	4640      	mov	r0, r8
 808afec:	f000 f830 	bl	808b050 <strlen>
 808aff0:	f108 38ff 	add.w	r8, r8, #4294967295
 808aff4:	193b      	adds	r3, r7, r4
 808aff6:	4420      	add	r0, r4
 808aff8:	4284      	cmp	r4, r0
 808affa:	d00b      	beq.n	808b014 <strftime+0x92c>
 808affc:	9a02      	ldr	r2, [sp, #8]
 808affe:	4294      	cmp	r4, r2
 808b000:	d205      	bcs.n	808b00e <strftime+0x926>
 808b002:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b006:	3401      	adds	r4, #1
 808b008:	f803 2b01 	strb.w	r2, [r3], #1
 808b00c:	e7f4      	b.n	808aff8 <strftime+0x910>
 808b00e:	f000 ffd4 	bl	808bfba <__tz_unlock>
 808b012:	e013      	b.n	808b03c <strftime+0x954>
 808b014:	f000 ffd1 	bl	808bfba <__tz_unlock>
 808b018:	e005      	b.n	808b026 <strftime+0x93e>
 808b01a:	9b02      	ldr	r3, [sp, #8]
 808b01c:	429c      	cmp	r4, r3
 808b01e:	d20d      	bcs.n	808b03c <strftime+0x954>
 808b020:	2325      	movs	r3, #37	; 0x25
 808b022:	553b      	strb	r3, [r7, r4]
 808b024:	3401      	adds	r4, #1
 808b026:	f899 3000 	ldrb.w	r3, [r9]
 808b02a:	b11b      	cbz	r3, 808b034 <strftime+0x94c>
 808b02c:	f109 0901 	add.w	r9, r9, #1
 808b030:	f7ff bb69 	b.w	808a706 <strftime+0x1e>
 808b034:	b126      	cbz	r6, 808b040 <strftime+0x958>
 808b036:	2300      	movs	r3, #0
 808b038:	553b      	strb	r3, [r7, r4]
 808b03a:	e001      	b.n	808b040 <strftime+0x958>
 808b03c:	2000      	movs	r0, #0
 808b03e:	e000      	b.n	808b042 <strftime+0x95a>
 808b040:	4620      	mov	r0, r4
 808b042:	b013      	add	sp, #76	; 0x4c
 808b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b048:	0808e5d5 	.word	0x0808e5d5
 808b04c:	200000f4 	.word	0x200000f4

0808b050 <strlen>:
 808b050:	4603      	mov	r3, r0
 808b052:	f813 2b01 	ldrb.w	r2, [r3], #1
 808b056:	2a00      	cmp	r2, #0
 808b058:	d1fb      	bne.n	808b052 <strlen+0x2>
 808b05a:	1a18      	subs	r0, r3, r0
 808b05c:	3801      	subs	r0, #1
 808b05e:	4770      	bx	lr

0808b060 <strncmp>:
 808b060:	b530      	push	{r4, r5, lr}
 808b062:	b182      	cbz	r2, 808b086 <strncmp+0x26>
 808b064:	1e45      	subs	r5, r0, #1
 808b066:	3901      	subs	r1, #1
 808b068:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808b06c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b070:	42a3      	cmp	r3, r4
 808b072:	d106      	bne.n	808b082 <strncmp+0x22>
 808b074:	43ec      	mvns	r4, r5
 808b076:	4414      	add	r4, r2
 808b078:	42e0      	cmn	r0, r4
 808b07a:	d001      	beq.n	808b080 <strncmp+0x20>
 808b07c:	2b00      	cmp	r3, #0
 808b07e:	d1f3      	bne.n	808b068 <strncmp+0x8>
 808b080:	461c      	mov	r4, r3
 808b082:	1b18      	subs	r0, r3, r4
 808b084:	bd30      	pop	{r4, r5, pc}
 808b086:	4610      	mov	r0, r2
 808b088:	bd30      	pop	{r4, r5, pc}

0808b08a <strncpy>:
 808b08a:	4603      	mov	r3, r0
 808b08c:	b510      	push	{r4, lr}
 808b08e:	b142      	cbz	r2, 808b0a2 <strncpy+0x18>
 808b090:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b094:	3a01      	subs	r2, #1
 808b096:	f803 4b01 	strb.w	r4, [r3], #1
 808b09a:	2c00      	cmp	r4, #0
 808b09c:	d1f7      	bne.n	808b08e <strncpy+0x4>
 808b09e:	441a      	add	r2, r3
 808b0a0:	e000      	b.n	808b0a4 <strncpy+0x1a>
 808b0a2:	bd10      	pop	{r4, pc}
 808b0a4:	4293      	cmp	r3, r2
 808b0a6:	d002      	beq.n	808b0ae <strncpy+0x24>
 808b0a8:	f803 4b01 	strb.w	r4, [r3], #1
 808b0ac:	e7fa      	b.n	808b0a4 <strncpy+0x1a>
 808b0ae:	bd10      	pop	{r4, pc}

0808b0b0 <strstr>:
 808b0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b0b2:	7803      	ldrb	r3, [r0, #0]
 808b0b4:	b963      	cbnz	r3, 808b0d0 <strstr+0x20>
 808b0b6:	780b      	ldrb	r3, [r1, #0]
 808b0b8:	2b00      	cmp	r3, #0
 808b0ba:	bf18      	it	ne
 808b0bc:	2000      	movne	r0, #0
 808b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b0c0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808b0c4:	b162      	cbz	r2, 808b0e0 <strstr+0x30>
 808b0c6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808b0ca:	4630      	mov	r0, r6
 808b0cc:	4297      	cmp	r7, r2
 808b0ce:	d0f7      	beq.n	808b0c0 <strstr+0x10>
 808b0d0:	4603      	mov	r3, r0
 808b0d2:	1c46      	adds	r6, r0, #1
 808b0d4:	7800      	ldrb	r0, [r0, #0]
 808b0d6:	b110      	cbz	r0, 808b0de <strstr+0x2e>
 808b0d8:	1e4d      	subs	r5, r1, #1
 808b0da:	1e5c      	subs	r4, r3, #1
 808b0dc:	e7f0      	b.n	808b0c0 <strstr+0x10>
 808b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b0e0:	4618      	mov	r0, r3
 808b0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b0e4 <sulp>:
 808b0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b0e8:	460f      	mov	r7, r1
 808b0ea:	4690      	mov	r8, r2
 808b0ec:	f001 ffb6 	bl	808d05c <__ulp>
 808b0f0:	4604      	mov	r4, r0
 808b0f2:	460d      	mov	r5, r1
 808b0f4:	f1b8 0f00 	cmp.w	r8, #0
 808b0f8:	d011      	beq.n	808b11e <sulp+0x3a>
 808b0fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808b0fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b102:	2b00      	cmp	r3, #0
 808b104:	dd0b      	ble.n	808b11e <sulp+0x3a>
 808b106:	051b      	lsls	r3, r3, #20
 808b108:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808b10c:	2400      	movs	r4, #0
 808b10e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808b112:	4622      	mov	r2, r4
 808b114:	462b      	mov	r3, r5
 808b116:	f7fe f8ad 	bl	8089274 <__aeabi_dmul>
 808b11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b11e:	4620      	mov	r0, r4
 808b120:	4629      	mov	r1, r5
 808b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808b128 <_strtod_r>:
 808b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b12c:	4682      	mov	sl, r0
 808b12e:	460c      	mov	r4, r1
 808b130:	b09d      	sub	sp, #116	; 0x74
 808b132:	2300      	movs	r3, #0
 808b134:	9213      	str	r2, [sp, #76]	; 0x4c
 808b136:	9318      	str	r3, [sp, #96]	; 0x60
 808b138:	f04f 0800 	mov.w	r8, #0
 808b13c:	f04f 0900 	mov.w	r9, #0
 808b140:	9117      	str	r1, [sp, #92]	; 0x5c
 808b142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b144:	781a      	ldrb	r2, [r3, #0]
 808b146:	2a0d      	cmp	r2, #13
 808b148:	d805      	bhi.n	808b156 <_strtod_r+0x2e>
 808b14a:	2a09      	cmp	r2, #9
 808b14c:	d213      	bcs.n	808b176 <_strtod_r+0x4e>
 808b14e:	2a00      	cmp	r2, #0
 808b150:	f000 81ad 	beq.w	808b4ae <_strtod_r+0x386>
 808b154:	e012      	b.n	808b17c <_strtod_r+0x54>
 808b156:	2a2b      	cmp	r2, #43	; 0x2b
 808b158:	d004      	beq.n	808b164 <_strtod_r+0x3c>
 808b15a:	2a2d      	cmp	r2, #45	; 0x2d
 808b15c:	d004      	beq.n	808b168 <_strtod_r+0x40>
 808b15e:	2a20      	cmp	r2, #32
 808b160:	d10c      	bne.n	808b17c <_strtod_r+0x54>
 808b162:	e008      	b.n	808b176 <_strtod_r+0x4e>
 808b164:	2200      	movs	r2, #0
 808b166:	e000      	b.n	808b16a <_strtod_r+0x42>
 808b168:	2201      	movs	r2, #1
 808b16a:	920c      	str	r2, [sp, #48]	; 0x30
 808b16c:	1c5a      	adds	r2, r3, #1
 808b16e:	9217      	str	r2, [sp, #92]	; 0x5c
 808b170:	785b      	ldrb	r3, [r3, #1]
 808b172:	b92b      	cbnz	r3, 808b180 <_strtod_r+0x58>
 808b174:	e19b      	b.n	808b4ae <_strtod_r+0x386>
 808b176:	3301      	adds	r3, #1
 808b178:	9317      	str	r3, [sp, #92]	; 0x5c
 808b17a:	e7e2      	b.n	808b142 <_strtod_r+0x1a>
 808b17c:	2300      	movs	r3, #0
 808b17e:	930c      	str	r3, [sp, #48]	; 0x30
 808b180:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808b182:	782b      	ldrb	r3, [r5, #0]
 808b184:	2b30      	cmp	r3, #48	; 0x30
 808b186:	d15c      	bne.n	808b242 <_strtod_r+0x11a>
 808b188:	786b      	ldrb	r3, [r5, #1]
 808b18a:	2b58      	cmp	r3, #88	; 0x58
 808b18c:	d001      	beq.n	808b192 <_strtod_r+0x6a>
 808b18e:	2b78      	cmp	r3, #120	; 0x78
 808b190:	d14c      	bne.n	808b22c <_strtod_r+0x104>
 808b192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808b194:	4aa8      	ldr	r2, [pc, #672]	; (808b438 <_strtod_r+0x310>)
 808b196:	9301      	str	r3, [sp, #4]
 808b198:	ab18      	add	r3, sp, #96	; 0x60
 808b19a:	9300      	str	r3, [sp, #0]
 808b19c:	a917      	add	r1, sp, #92	; 0x5c
 808b19e:	ab19      	add	r3, sp, #100	; 0x64
 808b1a0:	4650      	mov	r0, sl
 808b1a2:	f001 f8e0 	bl	808c366 <__gethex>
 808b1a6:	f010 0607 	ands.w	r6, r0, #7
 808b1aa:	4604      	mov	r4, r0
 808b1ac:	f000 8585 	beq.w	808bcba <_strtod_r+0xb92>
 808b1b0:	2e06      	cmp	r6, #6
 808b1b2:	d105      	bne.n	808b1c0 <_strtod_r+0x98>
 808b1b4:	3501      	adds	r5, #1
 808b1b6:	2300      	movs	r3, #0
 808b1b8:	9517      	str	r5, [sp, #92]	; 0x5c
 808b1ba:	930c      	str	r3, [sp, #48]	; 0x30
 808b1bc:	f000 bd7d 	b.w	808bcba <_strtod_r+0xb92>
 808b1c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808b1c2:	b13a      	cbz	r2, 808b1d4 <_strtod_r+0xac>
 808b1c4:	2135      	movs	r1, #53	; 0x35
 808b1c6:	a81a      	add	r0, sp, #104	; 0x68
 808b1c8:	f002 f82f 	bl	808d22a <__copybits>
 808b1cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b1ce:	4650      	mov	r0, sl
 808b1d0:	f001 fcb3 	bl	808cb3a <_Bfree>
 808b1d4:	2e06      	cmp	r6, #6
 808b1d6:	d822      	bhi.n	808b21e <_strtod_r+0xf6>
 808b1d8:	e8df f006 	tbb	[pc, r6]
 808b1dc:	18080d04 	.word	0x18080d04
 808b1e0:	0d1d      	.short	0x0d1d
 808b1e2:	04          	.byte	0x04
 808b1e3:	00          	.byte	0x00
 808b1e4:	f04f 0900 	mov.w	r9, #0
 808b1e8:	46c8      	mov	r8, r9
 808b1ea:	e018      	b.n	808b21e <_strtod_r+0xf6>
 808b1ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808b1f0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808b1f4:	e013      	b.n	808b21e <_strtod_r+0xf6>
 808b1f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b1f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808b1fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808b1fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808b202:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808b206:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808b20a:	e008      	b.n	808b21e <_strtod_r+0xf6>
 808b20c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808b43c <_strtod_r+0x314>
 808b210:	f04f 0800 	mov.w	r8, #0
 808b214:	e003      	b.n	808b21e <_strtod_r+0xf6>
 808b216:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808b21a:	f04f 38ff 	mov.w	r8, #4294967295
 808b21e:	0721      	lsls	r1, r4, #28
 808b220:	f140 854b 	bpl.w	808bcba <_strtod_r+0xb92>
 808b224:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808b228:	f000 bd47 	b.w	808bcba <_strtod_r+0xb92>
 808b22c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b22e:	1c5a      	adds	r2, r3, #1
 808b230:	9217      	str	r2, [sp, #92]	; 0x5c
 808b232:	785b      	ldrb	r3, [r3, #1]
 808b234:	2b30      	cmp	r3, #48	; 0x30
 808b236:	d0f9      	beq.n	808b22c <_strtod_r+0x104>
 808b238:	2b00      	cmp	r3, #0
 808b23a:	f000 853e 	beq.w	808bcba <_strtod_r+0xb92>
 808b23e:	2301      	movs	r3, #1
 808b240:	e000      	b.n	808b244 <_strtod_r+0x11c>
 808b242:	2300      	movs	r3, #0
 808b244:	9305      	str	r3, [sp, #20]
 808b246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b248:	220a      	movs	r2, #10
 808b24a:	9306      	str	r3, [sp, #24]
 808b24c:	2300      	movs	r3, #0
 808b24e:	469b      	mov	fp, r3
 808b250:	9302      	str	r3, [sp, #8]
 808b252:	9304      	str	r3, [sp, #16]
 808b254:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808b256:	782e      	ldrb	r6, [r5, #0]
 808b258:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808b25c:	b2d9      	uxtb	r1, r3
 808b25e:	2909      	cmp	r1, #9
 808b260:	d811      	bhi.n	808b286 <_strtod_r+0x15e>
 808b262:	f1bb 0f08 	cmp.w	fp, #8
 808b266:	bfd5      	itete	le
 808b268:	9904      	ldrle	r1, [sp, #16]
 808b26a:	9902      	ldrgt	r1, [sp, #8]
 808b26c:	fb02 3301 	mlale	r3, r2, r1, r3
 808b270:	fb02 3301 	mlagt	r3, r2, r1, r3
 808b274:	f105 0501 	add.w	r5, r5, #1
 808b278:	bfd4      	ite	le
 808b27a:	9304      	strle	r3, [sp, #16]
 808b27c:	9302      	strgt	r3, [sp, #8]
 808b27e:	f10b 0b01 	add.w	fp, fp, #1
 808b282:	9517      	str	r5, [sp, #92]	; 0x5c
 808b284:	e7e6      	b.n	808b254 <_strtod_r+0x12c>
 808b286:	4650      	mov	r0, sl
 808b288:	f7ff f944 	bl	808a514 <_localeconv_r>
 808b28c:	6807      	ldr	r7, [r0, #0]
 808b28e:	4650      	mov	r0, sl
 808b290:	f7ff f940 	bl	808a514 <_localeconv_r>
 808b294:	6800      	ldr	r0, [r0, #0]
 808b296:	f7ff fedb 	bl	808b050 <strlen>
 808b29a:	4639      	mov	r1, r7
 808b29c:	4602      	mov	r2, r0
 808b29e:	4628      	mov	r0, r5
 808b2a0:	f7ff fede 	bl	808b060 <strncmp>
 808b2a4:	4607      	mov	r7, r0
 808b2a6:	b128      	cbz	r0, 808b2b4 <_strtod_r+0x18c>
 808b2a8:	2000      	movs	r0, #0
 808b2aa:	4633      	mov	r3, r6
 808b2ac:	465d      	mov	r5, fp
 808b2ae:	4602      	mov	r2, r0
 808b2b0:	4601      	mov	r1, r0
 808b2b2:	e05a      	b.n	808b36a <_strtod_r+0x242>
 808b2b4:	4650      	mov	r0, sl
 808b2b6:	f7ff f92d 	bl	808a514 <_localeconv_r>
 808b2ba:	6800      	ldr	r0, [r0, #0]
 808b2bc:	f7ff fec8 	bl	808b050 <strlen>
 808b2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b2c2:	181a      	adds	r2, r3, r0
 808b2c4:	9217      	str	r2, [sp, #92]	; 0x5c
 808b2c6:	5c1b      	ldrb	r3, [r3, r0]
 808b2c8:	f1bb 0f00 	cmp.w	fp, #0
 808b2cc:	d145      	bne.n	808b35a <_strtod_r+0x232>
 808b2ce:	4658      	mov	r0, fp
 808b2d0:	2b30      	cmp	r3, #48	; 0x30
 808b2d2:	d105      	bne.n	808b2e0 <_strtod_r+0x1b8>
 808b2d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b2d6:	3001      	adds	r0, #1
 808b2d8:	1c5a      	adds	r2, r3, #1
 808b2da:	9217      	str	r2, [sp, #92]	; 0x5c
 808b2dc:	785b      	ldrb	r3, [r3, #1]
 808b2de:	e7f7      	b.n	808b2d0 <_strtod_r+0x1a8>
 808b2e0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808b2e4:	2a08      	cmp	r2, #8
 808b2e6:	d846      	bhi.n	808b376 <_strtod_r+0x24e>
 808b2e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808b2ea:	9206      	str	r2, [sp, #24]
 808b2ec:	4602      	mov	r2, r0
 808b2ee:	2000      	movs	r0, #0
 808b2f0:	4605      	mov	r5, r0
 808b2f2:	3b30      	subs	r3, #48	; 0x30
 808b2f4:	f100 0101 	add.w	r1, r0, #1
 808b2f8:	d029      	beq.n	808b34e <_strtod_r+0x226>
 808b2fa:	440a      	add	r2, r1
 808b2fc:	4629      	mov	r1, r5
 808b2fe:	eb05 0c00 	add.w	ip, r5, r0
 808b302:	260a      	movs	r6, #10
 808b304:	4561      	cmp	r1, ip
 808b306:	d00f      	beq.n	808b328 <_strtod_r+0x200>
 808b308:	3101      	adds	r1, #1
 808b30a:	f101 3eff 	add.w	lr, r1, #4294967295
 808b30e:	f1be 0f08 	cmp.w	lr, #8
 808b312:	dc03      	bgt.n	808b31c <_strtod_r+0x1f4>
 808b314:	9f04      	ldr	r7, [sp, #16]
 808b316:	4377      	muls	r7, r6
 808b318:	9704      	str	r7, [sp, #16]
 808b31a:	e7f3      	b.n	808b304 <_strtod_r+0x1dc>
 808b31c:	2910      	cmp	r1, #16
 808b31e:	bfde      	ittt	le
 808b320:	9f02      	ldrle	r7, [sp, #8]
 808b322:	4377      	mulle	r7, r6
 808b324:	9702      	strle	r7, [sp, #8]
 808b326:	e7ed      	b.n	808b304 <_strtod_r+0x1dc>
 808b328:	4428      	add	r0, r5
 808b32a:	2808      	cmp	r0, #8
 808b32c:	f100 0501 	add.w	r5, r0, #1
 808b330:	dc05      	bgt.n	808b33e <_strtod_r+0x216>
 808b332:	9804      	ldr	r0, [sp, #16]
 808b334:	210a      	movs	r1, #10
 808b336:	fb01 3300 	mla	r3, r1, r0, r3
 808b33a:	9304      	str	r3, [sp, #16]
 808b33c:	e006      	b.n	808b34c <_strtod_r+0x224>
 808b33e:	2d10      	cmp	r5, #16
 808b340:	bfdf      	itttt	le
 808b342:	9802      	ldrle	r0, [sp, #8]
 808b344:	210a      	movle	r1, #10
 808b346:	fb01 3300 	mlale	r3, r1, r0, r3
 808b34a:	9302      	strle	r3, [sp, #8]
 808b34c:	2100      	movs	r1, #0
 808b34e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b350:	1c58      	adds	r0, r3, #1
 808b352:	9017      	str	r0, [sp, #92]	; 0x5c
 808b354:	785b      	ldrb	r3, [r3, #1]
 808b356:	4608      	mov	r0, r1
 808b358:	e002      	b.n	808b360 <_strtod_r+0x238>
 808b35a:	465d      	mov	r5, fp
 808b35c:	4638      	mov	r0, r7
 808b35e:	463a      	mov	r2, r7
 808b360:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808b364:	2909      	cmp	r1, #9
 808b366:	d9c4      	bls.n	808b2f2 <_strtod_r+0x1ca>
 808b368:	2101      	movs	r1, #1
 808b36a:	2b65      	cmp	r3, #101	; 0x65
 808b36c:	d001      	beq.n	808b372 <_strtod_r+0x24a>
 808b36e:	2b45      	cmp	r3, #69	; 0x45
 808b370:	d14f      	bne.n	808b412 <_strtod_r+0x2ea>
 808b372:	b96d      	cbnz	r5, 808b390 <_strtod_r+0x268>
 808b374:	e004      	b.n	808b380 <_strtod_r+0x258>
 808b376:	2b65      	cmp	r3, #101	; 0x65
 808b378:	f040 84ad 	bne.w	808bcd6 <_strtod_r+0xbae>
 808b37c:	2200      	movs	r2, #0
 808b37e:	2101      	movs	r1, #1
 808b380:	b928      	cbnz	r0, 808b38e <_strtod_r+0x266>
 808b382:	9b05      	ldr	r3, [sp, #20]
 808b384:	2b00      	cmp	r3, #0
 808b386:	f000 8092 	beq.w	808b4ae <_strtod_r+0x386>
 808b38a:	4605      	mov	r5, r0
 808b38c:	e000      	b.n	808b390 <_strtod_r+0x268>
 808b38e:	2500      	movs	r5, #0
 808b390:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808b392:	1c63      	adds	r3, r4, #1
 808b394:	9317      	str	r3, [sp, #92]	; 0x5c
 808b396:	7863      	ldrb	r3, [r4, #1]
 808b398:	2b2b      	cmp	r3, #43	; 0x2b
 808b39a:	d006      	beq.n	808b3aa <_strtod_r+0x282>
 808b39c:	2b2d      	cmp	r3, #45	; 0x2d
 808b39e:	d002      	beq.n	808b3a6 <_strtod_r+0x27e>
 808b3a0:	2600      	movs	r6, #0
 808b3a2:	9603      	str	r6, [sp, #12]
 808b3a4:	e006      	b.n	808b3b4 <_strtod_r+0x28c>
 808b3a6:	2301      	movs	r3, #1
 808b3a8:	e000      	b.n	808b3ac <_strtod_r+0x284>
 808b3aa:	2300      	movs	r3, #0
 808b3ac:	9303      	str	r3, [sp, #12]
 808b3ae:	1ca3      	adds	r3, r4, #2
 808b3b0:	9317      	str	r3, [sp, #92]	; 0x5c
 808b3b2:	78a3      	ldrb	r3, [r4, #2]
 808b3b4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808b3b8:	2e09      	cmp	r6, #9
 808b3ba:	d829      	bhi.n	808b410 <_strtod_r+0x2e8>
 808b3bc:	2b30      	cmp	r3, #48	; 0x30
 808b3be:	d104      	bne.n	808b3ca <_strtod_r+0x2a2>
 808b3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b3c2:	1c5e      	adds	r6, r3, #1
 808b3c4:	9617      	str	r6, [sp, #92]	; 0x5c
 808b3c6:	785b      	ldrb	r3, [r3, #1]
 808b3c8:	e7f8      	b.n	808b3bc <_strtod_r+0x294>
 808b3ca:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808b3ce:	2e08      	cmp	r6, #8
 808b3d0:	d81f      	bhi.n	808b412 <_strtod_r+0x2ea>
 808b3d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808b3d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b3d8:	461f      	mov	r7, r3
 808b3da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b3dc:	1c5e      	adds	r6, r3, #1
 808b3de:	9617      	str	r6, [sp, #92]	; 0x5c
 808b3e0:	785b      	ldrb	r3, [r3, #1]
 808b3e2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808b3e6:	f1bc 0f09 	cmp.w	ip, #9
 808b3ea:	d805      	bhi.n	808b3f8 <_strtod_r+0x2d0>
 808b3ec:	260a      	movs	r6, #10
 808b3ee:	fb06 3e0e 	mla	lr, r6, lr, r3
 808b3f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808b3f6:	e7f0      	b.n	808b3da <_strtod_r+0x2b2>
 808b3f8:	1bf6      	subs	r6, r6, r7
 808b3fa:	2e08      	cmp	r6, #8
 808b3fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808b400:	dc02      	bgt.n	808b408 <_strtod_r+0x2e0>
 808b402:	4576      	cmp	r6, lr
 808b404:	bfa8      	it	ge
 808b406:	4676      	movge	r6, lr
 808b408:	9f03      	ldr	r7, [sp, #12]
 808b40a:	b11f      	cbz	r7, 808b414 <_strtod_r+0x2ec>
 808b40c:	4276      	negs	r6, r6
 808b40e:	e001      	b.n	808b414 <_strtod_r+0x2ec>
 808b410:	9417      	str	r4, [sp, #92]	; 0x5c
 808b412:	2600      	movs	r6, #0
 808b414:	2d00      	cmp	r5, #0
 808b416:	d152      	bne.n	808b4be <_strtod_r+0x396>
 808b418:	2800      	cmp	r0, #0
 808b41a:	f040 844e 	bne.w	808bcba <_strtod_r+0xb92>
 808b41e:	9a05      	ldr	r2, [sp, #20]
 808b420:	2a00      	cmp	r2, #0
 808b422:	f040 844a 	bne.w	808bcba <_strtod_r+0xb92>
 808b426:	2900      	cmp	r1, #0
 808b428:	d141      	bne.n	808b4ae <_strtod_r+0x386>
 808b42a:	2b4e      	cmp	r3, #78	; 0x4e
 808b42c:	d020      	beq.n	808b470 <_strtod_r+0x348>
 808b42e:	dc07      	bgt.n	808b440 <_strtod_r+0x318>
 808b430:	2b49      	cmp	r3, #73	; 0x49
 808b432:	d00a      	beq.n	808b44a <_strtod_r+0x322>
 808b434:	e03b      	b.n	808b4ae <_strtod_r+0x386>
 808b436:	bf00      	nop
 808b438:	0808e5e4 	.word	0x0808e5e4
 808b43c:	7ff00000 	.word	0x7ff00000
 808b440:	2b69      	cmp	r3, #105	; 0x69
 808b442:	d002      	beq.n	808b44a <_strtod_r+0x322>
 808b444:	2b6e      	cmp	r3, #110	; 0x6e
 808b446:	d013      	beq.n	808b470 <_strtod_r+0x348>
 808b448:	e031      	b.n	808b4ae <_strtod_r+0x386>
 808b44a:	49aa      	ldr	r1, [pc, #680]	; (808b6f4 <_strtod_r+0x5cc>)
 808b44c:	a817      	add	r0, sp, #92	; 0x5c
 808b44e:	f001 f9bb 	bl	808c7c8 <__match>
 808b452:	b360      	cbz	r0, 808b4ae <_strtod_r+0x386>
 808b454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b456:	49a8      	ldr	r1, [pc, #672]	; (808b6f8 <_strtod_r+0x5d0>)
 808b458:	3b01      	subs	r3, #1
 808b45a:	a817      	add	r0, sp, #92	; 0x5c
 808b45c:	9317      	str	r3, [sp, #92]	; 0x5c
 808b45e:	f001 f9b3 	bl	808c7c8 <__match>
 808b462:	b910      	cbnz	r0, 808b46a <_strtod_r+0x342>
 808b464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b466:	3301      	adds	r3, #1
 808b468:	9317      	str	r3, [sp, #92]	; 0x5c
 808b46a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808b714 <_strtod_r+0x5ec>
 808b46e:	e01a      	b.n	808b4a6 <_strtod_r+0x37e>
 808b470:	49a2      	ldr	r1, [pc, #648]	; (808b6fc <_strtod_r+0x5d4>)
 808b472:	a817      	add	r0, sp, #92	; 0x5c
 808b474:	f001 f9a8 	bl	808c7c8 <__match>
 808b478:	b1c8      	cbz	r0, 808b4ae <_strtod_r+0x386>
 808b47a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b47c:	781b      	ldrb	r3, [r3, #0]
 808b47e:	2b28      	cmp	r3, #40	; 0x28
 808b480:	d10f      	bne.n	808b4a2 <_strtod_r+0x37a>
 808b482:	aa1a      	add	r2, sp, #104	; 0x68
 808b484:	499e      	ldr	r1, [pc, #632]	; (808b700 <_strtod_r+0x5d8>)
 808b486:	a817      	add	r0, sp, #92	; 0x5c
 808b488:	f001 f9b1 	bl	808c7ee <__hexnan>
 808b48c:	2805      	cmp	r0, #5
 808b48e:	d108      	bne.n	808b4a2 <_strtod_r+0x37a>
 808b490:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b492:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808b496:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808b49a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808b49e:	f000 bc0c 	b.w	808bcba <_strtod_r+0xb92>
 808b4a2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808b718 <_strtod_r+0x5f0>
 808b4a6:	f04f 0800 	mov.w	r8, #0
 808b4aa:	f000 bc06 	b.w	808bcba <_strtod_r+0xb92>
 808b4ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808b4b0:	9417      	str	r4, [sp, #92]	; 0x5c
 808b4b2:	2b00      	cmp	r3, #0
 808b4b4:	f000 840c 	beq.w	808bcd0 <_strtod_r+0xba8>
 808b4b8:	2300      	movs	r3, #0
 808b4ba:	930c      	str	r3, [sp, #48]	; 0x30
 808b4bc:	e3ff      	b.n	808bcbe <_strtod_r+0xb96>
 808b4be:	462c      	mov	r4, r5
 808b4c0:	f1bb 0f00 	cmp.w	fp, #0
 808b4c4:	bf08      	it	eq
 808b4c6:	46ab      	moveq	fp, r5
 808b4c8:	9804      	ldr	r0, [sp, #16]
 808b4ca:	2d10      	cmp	r5, #16
 808b4cc:	bfa8      	it	ge
 808b4ce:	2410      	movge	r4, #16
 808b4d0:	1ab7      	subs	r7, r6, r2
 808b4d2:	f7fd fe59 	bl	8089188 <__aeabi_ui2d>
 808b4d6:	2c09      	cmp	r4, #9
 808b4d8:	4680      	mov	r8, r0
 808b4da:	4689      	mov	r9, r1
 808b4dc:	dd13      	ble.n	808b506 <_strtod_r+0x3de>
 808b4de:	4b89      	ldr	r3, [pc, #548]	; (808b704 <_strtod_r+0x5dc>)
 808b4e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808b4e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808b4e8:	f7fd fec4 	bl	8089274 <__aeabi_dmul>
 808b4ec:	4680      	mov	r8, r0
 808b4ee:	9802      	ldr	r0, [sp, #8]
 808b4f0:	4689      	mov	r9, r1
 808b4f2:	f7fd fe49 	bl	8089188 <__aeabi_ui2d>
 808b4f6:	4602      	mov	r2, r0
 808b4f8:	460b      	mov	r3, r1
 808b4fa:	4640      	mov	r0, r8
 808b4fc:	4649      	mov	r1, r9
 808b4fe:	f7fd fd07 	bl	8088f10 <__adddf3>
 808b502:	4680      	mov	r8, r0
 808b504:	4689      	mov	r9, r1
 808b506:	2d0f      	cmp	r5, #15
 808b508:	dc33      	bgt.n	808b572 <_strtod_r+0x44a>
 808b50a:	2f00      	cmp	r7, #0
 808b50c:	f000 83d5 	beq.w	808bcba <_strtod_r+0xb92>
 808b510:	dd22      	ble.n	808b558 <_strtod_r+0x430>
 808b512:	2f16      	cmp	r7, #22
 808b514:	dc07      	bgt.n	808b526 <_strtod_r+0x3fe>
 808b516:	4d7b      	ldr	r5, [pc, #492]	; (808b704 <_strtod_r+0x5dc>)
 808b518:	4642      	mov	r2, r8
 808b51a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808b51e:	464b      	mov	r3, r9
 808b520:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b524:	e013      	b.n	808b54e <_strtod_r+0x426>
 808b526:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808b52a:	429f      	cmp	r7, r3
 808b52c:	dc21      	bgt.n	808b572 <_strtod_r+0x44a>
 808b52e:	4c75      	ldr	r4, [pc, #468]	; (808b704 <_strtod_r+0x5dc>)
 808b530:	f1c5 050f 	rsb	r5, r5, #15
 808b534:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808b538:	1b7d      	subs	r5, r7, r5
 808b53a:	4642      	mov	r2, r8
 808b53c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b540:	464b      	mov	r3, r9
 808b542:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808b546:	f7fd fe95 	bl	8089274 <__aeabi_dmul>
 808b54a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808b54e:	f7fd fe91 	bl	8089274 <__aeabi_dmul>
 808b552:	4680      	mov	r8, r0
 808b554:	4689      	mov	r9, r1
 808b556:	e3b0      	b.n	808bcba <_strtod_r+0xb92>
 808b558:	f117 0f16 	cmn.w	r7, #22
 808b55c:	db09      	blt.n	808b572 <_strtod_r+0x44a>
 808b55e:	4d69      	ldr	r5, [pc, #420]	; (808b704 <_strtod_r+0x5dc>)
 808b560:	4640      	mov	r0, r8
 808b562:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b56a:	4649      	mov	r1, r9
 808b56c:	f7fd ffac 	bl	80894c8 <__aeabi_ddiv>
 808b570:	e7ef      	b.n	808b552 <_strtod_r+0x42a>
 808b572:	1b2c      	subs	r4, r5, r4
 808b574:	443c      	add	r4, r7
 808b576:	2c00      	cmp	r4, #0
 808b578:	dd5d      	ble.n	808b636 <_strtod_r+0x50e>
 808b57a:	f014 010f 	ands.w	r1, r4, #15
 808b57e:	d00a      	beq.n	808b596 <_strtod_r+0x46e>
 808b580:	4b60      	ldr	r3, [pc, #384]	; (808b704 <_strtod_r+0x5dc>)
 808b582:	4642      	mov	r2, r8
 808b584:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808b588:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b58c:	464b      	mov	r3, r9
 808b58e:	f7fd fe71 	bl	8089274 <__aeabi_dmul>
 808b592:	4680      	mov	r8, r0
 808b594:	4689      	mov	r9, r1
 808b596:	f034 040f 	bics.w	r4, r4, #15
 808b59a:	f000 80c1 	beq.w	808b720 <_strtod_r+0x5f8>
 808b59e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808b5a2:	dd0f      	ble.n	808b5c4 <_strtod_r+0x49c>
 808b5a4:	f04f 0b00 	mov.w	fp, #0
 808b5a8:	f8cd b008 	str.w	fp, [sp, #8]
 808b5ac:	f8cd b014 	str.w	fp, [sp, #20]
 808b5b0:	f8cd b010 	str.w	fp, [sp, #16]
 808b5b4:	2322      	movs	r3, #34	; 0x22
 808b5b6:	f8ca 3000 	str.w	r3, [sl]
 808b5ba:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808b714 <_strtod_r+0x5ec>
 808b5be:	f04f 0800 	mov.w	r8, #0
 808b5c2:	e189      	b.n	808b8d8 <_strtod_r+0x7b0>
 808b5c4:	4640      	mov	r0, r8
 808b5c6:	4649      	mov	r1, r9
 808b5c8:	2300      	movs	r3, #0
 808b5ca:	4e4f      	ldr	r6, [pc, #316]	; (808b708 <_strtod_r+0x5e0>)
 808b5cc:	1124      	asrs	r4, r4, #4
 808b5ce:	9302      	str	r3, [sp, #8]
 808b5d0:	2c01      	cmp	r4, #1
 808b5d2:	dd0c      	ble.n	808b5ee <_strtod_r+0x4c6>
 808b5d4:	07e2      	lsls	r2, r4, #31
 808b5d6:	d504      	bpl.n	808b5e2 <_strtod_r+0x4ba>
 808b5d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 808b5dc:	f7fd fe4a 	bl	8089274 <__aeabi_dmul>
 808b5e0:	2301      	movs	r3, #1
 808b5e2:	9a02      	ldr	r2, [sp, #8]
 808b5e4:	1064      	asrs	r4, r4, #1
 808b5e6:	3201      	adds	r2, #1
 808b5e8:	9202      	str	r2, [sp, #8]
 808b5ea:	3608      	adds	r6, #8
 808b5ec:	e7f0      	b.n	808b5d0 <_strtod_r+0x4a8>
 808b5ee:	b10b      	cbz	r3, 808b5f4 <_strtod_r+0x4cc>
 808b5f0:	4680      	mov	r8, r0
 808b5f2:	4689      	mov	r9, r1
 808b5f4:	4b44      	ldr	r3, [pc, #272]	; (808b708 <_strtod_r+0x5e0>)
 808b5f6:	9a02      	ldr	r2, [sp, #8]
 808b5f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808b5fc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808b600:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b604:	4642      	mov	r2, r8
 808b606:	464b      	mov	r3, r9
 808b608:	f7fd fe34 	bl	8089274 <__aeabi_dmul>
 808b60c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808b610:	4689      	mov	r9, r1
 808b612:	460a      	mov	r2, r1
 808b614:	0d1b      	lsrs	r3, r3, #20
 808b616:	493d      	ldr	r1, [pc, #244]	; (808b70c <_strtod_r+0x5e4>)
 808b618:	051b      	lsls	r3, r3, #20
 808b61a:	428b      	cmp	r3, r1
 808b61c:	4680      	mov	r8, r0
 808b61e:	d8c1      	bhi.n	808b5a4 <_strtod_r+0x47c>
 808b620:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808b624:	428b      	cmp	r3, r1
 808b626:	bf86      	itte	hi
 808b628:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808b71c <_strtod_r+0x5f4>
 808b62c:	f04f 38ff 	movhi.w	r8, #4294967295
 808b630:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808b634:	e074      	b.n	808b720 <_strtod_r+0x5f8>
 808b636:	d073      	beq.n	808b720 <_strtod_r+0x5f8>
 808b638:	4264      	negs	r4, r4
 808b63a:	f014 020f 	ands.w	r2, r4, #15
 808b63e:	d00a      	beq.n	808b656 <_strtod_r+0x52e>
 808b640:	4b30      	ldr	r3, [pc, #192]	; (808b704 <_strtod_r+0x5dc>)
 808b642:	4640      	mov	r0, r8
 808b644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808b648:	4649      	mov	r1, r9
 808b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b64e:	f7fd ff3b 	bl	80894c8 <__aeabi_ddiv>
 808b652:	4680      	mov	r8, r0
 808b654:	4689      	mov	r9, r1
 808b656:	1124      	asrs	r4, r4, #4
 808b658:	d062      	beq.n	808b720 <_strtod_r+0x5f8>
 808b65a:	2c1f      	cmp	r4, #31
 808b65c:	dd08      	ble.n	808b670 <_strtod_r+0x548>
 808b65e:	f04f 0b00 	mov.w	fp, #0
 808b662:	f8cd b008 	str.w	fp, [sp, #8]
 808b666:	f8cd b014 	str.w	fp, [sp, #20]
 808b66a:	f8cd b010 	str.w	fp, [sp, #16]
 808b66e:	e12c      	b.n	808b8ca <_strtod_r+0x7a2>
 808b670:	4640      	mov	r0, r8
 808b672:	4649      	mov	r1, r9
 808b674:	f014 0f10 	tst.w	r4, #16
 808b678:	bf0c      	ite	eq
 808b67a:	2300      	moveq	r3, #0
 808b67c:	236a      	movne	r3, #106	; 0x6a
 808b67e:	4e24      	ldr	r6, [pc, #144]	; (808b710 <_strtod_r+0x5e8>)
 808b680:	9303      	str	r3, [sp, #12]
 808b682:	2300      	movs	r3, #0
 808b684:	2c00      	cmp	r4, #0
 808b686:	dd09      	ble.n	808b69c <_strtod_r+0x574>
 808b688:	07e2      	lsls	r2, r4, #31
 808b68a:	d504      	bpl.n	808b696 <_strtod_r+0x56e>
 808b68c:	e9d6 2300 	ldrd	r2, r3, [r6]
 808b690:	f7fd fdf0 	bl	8089274 <__aeabi_dmul>
 808b694:	2301      	movs	r3, #1
 808b696:	1064      	asrs	r4, r4, #1
 808b698:	3608      	adds	r6, #8
 808b69a:	e7f3      	b.n	808b684 <_strtod_r+0x55c>
 808b69c:	b10b      	cbz	r3, 808b6a2 <_strtod_r+0x57a>
 808b69e:	4680      	mov	r8, r0
 808b6a0:	4689      	mov	r9, r1
 808b6a2:	9b03      	ldr	r3, [sp, #12]
 808b6a4:	b1eb      	cbz	r3, 808b6e2 <_strtod_r+0x5ba>
 808b6a6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808b6aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b6ae:	2b00      	cmp	r3, #0
 808b6b0:	4649      	mov	r1, r9
 808b6b2:	dd16      	ble.n	808b6e2 <_strtod_r+0x5ba>
 808b6b4:	2b1f      	cmp	r3, #31
 808b6b6:	dd0e      	ble.n	808b6d6 <_strtod_r+0x5ae>
 808b6b8:	2b34      	cmp	r3, #52	; 0x34
 808b6ba:	bfde      	ittt	le
 808b6bc:	3b20      	suble	r3, #32
 808b6be:	f04f 32ff 	movle.w	r2, #4294967295
 808b6c2:	fa02 f303 	lslle.w	r3, r2, r3
 808b6c6:	f04f 0800 	mov.w	r8, #0
 808b6ca:	bfcc      	ite	gt
 808b6cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808b6d0:	ea03 0901 	andle.w	r9, r3, r1
 808b6d4:	e005      	b.n	808b6e2 <_strtod_r+0x5ba>
 808b6d6:	f04f 32ff 	mov.w	r2, #4294967295
 808b6da:	fa02 f303 	lsl.w	r3, r2, r3
 808b6de:	ea03 0808 	and.w	r8, r3, r8
 808b6e2:	2200      	movs	r2, #0
 808b6e4:	2300      	movs	r3, #0
 808b6e6:	4640      	mov	r0, r8
 808b6e8:	4649      	mov	r1, r9
 808b6ea:	f7fe f82b 	bl	8089744 <__aeabi_dcmpeq>
 808b6ee:	2800      	cmp	r0, #0
 808b6f0:	d1b5      	bne.n	808b65e <_strtod_r+0x536>
 808b6f2:	e017      	b.n	808b724 <_strtod_r+0x5fc>
 808b6f4:	0808e5f8 	.word	0x0808e5f8
 808b6f8:	0808e5fb 	.word	0x0808e5fb
 808b6fc:	0808e649 	.word	0x0808e649
 808b700:	0808e604 	.word	0x0808e604
 808b704:	0808e8a8 	.word	0x0808e8a8
 808b708:	0808e970 	.word	0x0808e970
 808b70c:	7ca00000 	.word	0x7ca00000
 808b710:	0808e618 	.word	0x0808e618
 808b714:	7ff00000 	.word	0x7ff00000
 808b718:	fff80000 	.word	0xfff80000
 808b71c:	7fefffff 	.word	0x7fefffff
 808b720:	2300      	movs	r3, #0
 808b722:	9303      	str	r3, [sp, #12]
 808b724:	9b04      	ldr	r3, [sp, #16]
 808b726:	465a      	mov	r2, fp
 808b728:	9300      	str	r3, [sp, #0]
 808b72a:	9906      	ldr	r1, [sp, #24]
 808b72c:	462b      	mov	r3, r5
 808b72e:	4650      	mov	r0, sl
 808b730:	f001 fa55 	bl	808cbde <__s2b>
 808b734:	9005      	str	r0, [sp, #20]
 808b736:	2800      	cmp	r0, #0
 808b738:	f43f af34 	beq.w	808b5a4 <_strtod_r+0x47c>
 808b73c:	2f00      	cmp	r7, #0
 808b73e:	f1c7 0300 	rsb	r3, r7, #0
 808b742:	bfa8      	it	ge
 808b744:	2300      	movge	r3, #0
 808b746:	930d      	str	r3, [sp, #52]	; 0x34
 808b748:	f04f 0b00 	mov.w	fp, #0
 808b74c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808b750:	9312      	str	r3, [sp, #72]	; 0x48
 808b752:	f8cd b008 	str.w	fp, [sp, #8]
 808b756:	9b05      	ldr	r3, [sp, #20]
 808b758:	4650      	mov	r0, sl
 808b75a:	6859      	ldr	r1, [r3, #4]
 808b75c:	f001 f9b8 	bl	808cad0 <_Balloc>
 808b760:	9004      	str	r0, [sp, #16]
 808b762:	2800      	cmp	r0, #0
 808b764:	f43f af26 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b768:	9b05      	ldr	r3, [sp, #20]
 808b76a:	300c      	adds	r0, #12
 808b76c:	691a      	ldr	r2, [r3, #16]
 808b76e:	f103 010c 	add.w	r1, r3, #12
 808b772:	3202      	adds	r2, #2
 808b774:	0092      	lsls	r2, r2, #2
 808b776:	f7fe fee0 	bl	808a53a <memcpy>
 808b77a:	ab1a      	add	r3, sp, #104	; 0x68
 808b77c:	9301      	str	r3, [sp, #4]
 808b77e:	ab19      	add	r3, sp, #100	; 0x64
 808b780:	9300      	str	r3, [sp, #0]
 808b782:	4642      	mov	r2, r8
 808b784:	464b      	mov	r3, r9
 808b786:	4650      	mov	r0, sl
 808b788:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808b78c:	f001 fcd7 	bl	808d13e <__d2b>
 808b790:	9018      	str	r0, [sp, #96]	; 0x60
 808b792:	2800      	cmp	r0, #0
 808b794:	f43f af0e 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b798:	2101      	movs	r1, #1
 808b79a:	4650      	mov	r0, sl
 808b79c:	f001 faaa 	bl	808ccf4 <__i2b>
 808b7a0:	9002      	str	r0, [sp, #8]
 808b7a2:	2800      	cmp	r0, #0
 808b7a4:	f43f af06 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b7a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b7aa:	9903      	ldr	r1, [sp, #12]
 808b7ac:	2b00      	cmp	r3, #0
 808b7ae:	bfac      	ite	ge
 808b7b0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808b7b2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808b7b4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808b7b6:	bfac      	ite	ge
 808b7b8:	18d6      	addge	r6, r2, r3
 808b7ba:	1ad2      	sublt	r2, r2, r3
 808b7bc:	eba3 0301 	sub.w	r3, r3, r1
 808b7c0:	4423      	add	r3, r4
 808b7c2:	49b1      	ldr	r1, [pc, #708]	; (808ba88 <_strtod_r+0x960>)
 808b7c4:	f103 33ff 	add.w	r3, r3, #4294967295
 808b7c8:	bfac      	ite	ge
 808b7ca:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808b7cc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808b7ce:	428b      	cmp	r3, r1
 808b7d0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808b7d4:	f280 8085 	bge.w	808b8e2 <_strtod_r+0x7ba>
 808b7d8:	1ac9      	subs	r1, r1, r3
 808b7da:	291f      	cmp	r1, #31
 808b7dc:	bfc8      	it	gt
 808b7de:	4dab      	ldrgt	r5, [pc, #684]	; (808ba8c <_strtod_r+0x964>)
 808b7e0:	f04f 0701 	mov.w	r7, #1
 808b7e4:	bfd4      	ite	le
 808b7e6:	fa07 f301 	lslle.w	r3, r7, r1
 808b7ea:	1aed      	subgt	r5, r5, r3
 808b7ec:	eba4 0401 	sub.w	r4, r4, r1
 808b7f0:	bfd9      	ittee	le
 808b7f2:	9307      	strle	r3, [sp, #28]
 808b7f4:	2500      	movle	r5, #0
 808b7f6:	fa07 f505 	lslgt.w	r5, r7, r5
 808b7fa:	9707      	strgt	r7, [sp, #28]
 808b7fc:	1937      	adds	r7, r6, r4
 808b7fe:	9b03      	ldr	r3, [sp, #12]
 808b800:	42be      	cmp	r6, r7
 808b802:	4414      	add	r4, r2
 808b804:	441c      	add	r4, r3
 808b806:	4633      	mov	r3, r6
 808b808:	bfa8      	it	ge
 808b80a:	463b      	movge	r3, r7
 808b80c:	42a3      	cmp	r3, r4
 808b80e:	bfa8      	it	ge
 808b810:	4623      	movge	r3, r4
 808b812:	2b00      	cmp	r3, #0
 808b814:	bfc2      	ittt	gt
 808b816:	1aff      	subgt	r7, r7, r3
 808b818:	1ae4      	subgt	r4, r4, r3
 808b81a:	1af6      	subgt	r6, r6, r3
 808b81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b81e:	2b00      	cmp	r3, #0
 808b820:	d163      	bne.n	808b8ea <_strtod_r+0x7c2>
 808b822:	2f00      	cmp	r7, #0
 808b824:	dc7a      	bgt.n	808b91c <_strtod_r+0x7f4>
 808b826:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808b828:	2b00      	cmp	r3, #0
 808b82a:	f040 8081 	bne.w	808b930 <_strtod_r+0x808>
 808b82e:	2c00      	cmp	r4, #0
 808b830:	f300 8088 	bgt.w	808b944 <_strtod_r+0x81c>
 808b834:	2e00      	cmp	r6, #0
 808b836:	f300 808f 	bgt.w	808b958 <_strtod_r+0x830>
 808b83a:	9a04      	ldr	r2, [sp, #16]
 808b83c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b83e:	4650      	mov	r0, sl
 808b840:	f001 fbad 	bl	808cf9e <__mdiff>
 808b844:	4683      	mov	fp, r0
 808b846:	2800      	cmp	r0, #0
 808b848:	f43f aeb4 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b84c:	68c3      	ldr	r3, [r0, #12]
 808b84e:	2400      	movs	r4, #0
 808b850:	60c4      	str	r4, [r0, #12]
 808b852:	9902      	ldr	r1, [sp, #8]
 808b854:	9306      	str	r3, [sp, #24]
 808b856:	f001 fb86 	bl	808cf66 <__mcmp>
 808b85a:	42a0      	cmp	r0, r4
 808b85c:	f280 808b 	bge.w	808b976 <_strtod_r+0x84e>
 808b860:	9b06      	ldr	r3, [sp, #24]
 808b862:	2b00      	cmp	r3, #0
 808b864:	f040 8202 	bne.w	808bc6c <_strtod_r+0xb44>
 808b868:	f1b8 0f00 	cmp.w	r8, #0
 808b86c:	f040 81fe 	bne.w	808bc6c <_strtod_r+0xb44>
 808b870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b874:	2b00      	cmp	r3, #0
 808b876:	f040 81f9 	bne.w	808bc6c <_strtod_r+0xb44>
 808b87a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b87e:	0d1b      	lsrs	r3, r3, #20
 808b880:	051b      	lsls	r3, r3, #20
 808b882:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b886:	f240 81f1 	bls.w	808bc6c <_strtod_r+0xb44>
 808b88a:	f8db 3014 	ldr.w	r3, [fp, #20]
 808b88e:	2b00      	cmp	r3, #0
 808b890:	d06c      	beq.n	808b96c <_strtod_r+0x844>
 808b892:	4659      	mov	r1, fp
 808b894:	2201      	movs	r2, #1
 808b896:	4650      	mov	r0, sl
 808b898:	f001 fb14 	bl	808cec4 <__lshift>
 808b89c:	9902      	ldr	r1, [sp, #8]
 808b89e:	4683      	mov	fp, r0
 808b8a0:	f001 fb61 	bl	808cf66 <__mcmp>
 808b8a4:	2800      	cmp	r0, #0
 808b8a6:	f340 81e1 	ble.w	808bc6c <_strtod_r+0xb44>
 808b8aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b8ae:	9a03      	ldr	r2, [sp, #12]
 808b8b0:	0d1b      	lsrs	r3, r3, #20
 808b8b2:	051b      	lsls	r3, r3, #20
 808b8b4:	2a00      	cmp	r2, #0
 808b8b6:	f000 808d 	beq.w	808b9d4 <_strtod_r+0x8ac>
 808b8ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b8be:	f300 8089 	bgt.w	808b9d4 <_strtod_r+0x8ac>
 808b8c2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808b8c6:	f300 81d3 	bgt.w	808bc70 <_strtod_r+0xb48>
 808b8ca:	2322      	movs	r3, #34	; 0x22
 808b8cc:	f04f 0800 	mov.w	r8, #0
 808b8d0:	f04f 0900 	mov.w	r9, #0
 808b8d4:	f8ca 3000 	str.w	r3, [sl]
 808b8d8:	9b05      	ldr	r3, [sp, #20]
 808b8da:	2b00      	cmp	r3, #0
 808b8dc:	f040 81d9 	bne.w	808bc92 <_strtod_r+0xb6a>
 808b8e0:	e1eb      	b.n	808bcba <_strtod_r+0xb92>
 808b8e2:	2301      	movs	r3, #1
 808b8e4:	2500      	movs	r5, #0
 808b8e6:	9307      	str	r3, [sp, #28]
 808b8e8:	e788      	b.n	808b7fc <_strtod_r+0x6d4>
 808b8ea:	461a      	mov	r2, r3
 808b8ec:	9902      	ldr	r1, [sp, #8]
 808b8ee:	4650      	mov	r0, sl
 808b8f0:	f001 fa9a 	bl	808ce28 <__pow5mult>
 808b8f4:	9002      	str	r0, [sp, #8]
 808b8f6:	2800      	cmp	r0, #0
 808b8f8:	f43f ae5c 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b8fc:	4601      	mov	r1, r0
 808b8fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808b900:	4650      	mov	r0, sl
 808b902:	f001 fa00 	bl	808cd06 <__multiply>
 808b906:	9006      	str	r0, [sp, #24]
 808b908:	2800      	cmp	r0, #0
 808b90a:	f43f ae53 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b90e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b910:	4650      	mov	r0, sl
 808b912:	f001 f912 	bl	808cb3a <_Bfree>
 808b916:	9b06      	ldr	r3, [sp, #24]
 808b918:	9318      	str	r3, [sp, #96]	; 0x60
 808b91a:	e782      	b.n	808b822 <_strtod_r+0x6fa>
 808b91c:	463a      	mov	r2, r7
 808b91e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b920:	4650      	mov	r0, sl
 808b922:	f001 facf 	bl	808cec4 <__lshift>
 808b926:	9018      	str	r0, [sp, #96]	; 0x60
 808b928:	2800      	cmp	r0, #0
 808b92a:	f47f af7c 	bne.w	808b826 <_strtod_r+0x6fe>
 808b92e:	e641      	b.n	808b5b4 <_strtod_r+0x48c>
 808b930:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808b932:	9904      	ldr	r1, [sp, #16]
 808b934:	4650      	mov	r0, sl
 808b936:	f001 fa77 	bl	808ce28 <__pow5mult>
 808b93a:	9004      	str	r0, [sp, #16]
 808b93c:	2800      	cmp	r0, #0
 808b93e:	f47f af76 	bne.w	808b82e <_strtod_r+0x706>
 808b942:	e637      	b.n	808b5b4 <_strtod_r+0x48c>
 808b944:	4622      	mov	r2, r4
 808b946:	9904      	ldr	r1, [sp, #16]
 808b948:	4650      	mov	r0, sl
 808b94a:	f001 fabb 	bl	808cec4 <__lshift>
 808b94e:	9004      	str	r0, [sp, #16]
 808b950:	2800      	cmp	r0, #0
 808b952:	f47f af6f 	bne.w	808b834 <_strtod_r+0x70c>
 808b956:	e62d      	b.n	808b5b4 <_strtod_r+0x48c>
 808b958:	4632      	mov	r2, r6
 808b95a:	9902      	ldr	r1, [sp, #8]
 808b95c:	4650      	mov	r0, sl
 808b95e:	f001 fab1 	bl	808cec4 <__lshift>
 808b962:	9002      	str	r0, [sp, #8]
 808b964:	2800      	cmp	r0, #0
 808b966:	f47f af68 	bne.w	808b83a <_strtod_r+0x712>
 808b96a:	e623      	b.n	808b5b4 <_strtod_r+0x48c>
 808b96c:	f8db 3010 	ldr.w	r3, [fp, #16]
 808b970:	2b01      	cmp	r3, #1
 808b972:	dc8e      	bgt.n	808b892 <_strtod_r+0x76a>
 808b974:	e17a      	b.n	808bc6c <_strtod_r+0xb44>
 808b976:	d161      	bne.n	808ba3c <_strtod_r+0x914>
 808b978:	9a06      	ldr	r2, [sp, #24]
 808b97a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b97e:	b322      	cbz	r2, 808b9ca <_strtod_r+0x8a2>
 808b980:	4943      	ldr	r1, [pc, #268]	; (808ba90 <_strtod_r+0x968>)
 808b982:	464a      	mov	r2, r9
 808b984:	428b      	cmp	r3, r1
 808b986:	d12e      	bne.n	808b9e6 <_strtod_r+0x8be>
 808b988:	9b03      	ldr	r3, [sp, #12]
 808b98a:	4641      	mov	r1, r8
 808b98c:	b163      	cbz	r3, 808b9a8 <_strtod_r+0x880>
 808b98e:	4b41      	ldr	r3, [pc, #260]	; (808ba94 <_strtod_r+0x96c>)
 808b990:	4013      	ands	r3, r2
 808b992:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808b996:	d807      	bhi.n	808b9a8 <_strtod_r+0x880>
 808b998:	0d1b      	lsrs	r3, r3, #20
 808b99a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b99e:	f04f 30ff 	mov.w	r0, #4294967295
 808b9a2:	fa00 f303 	lsl.w	r3, r0, r3
 808b9a6:	e001      	b.n	808b9ac <_strtod_r+0x884>
 808b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 808b9ac:	428b      	cmp	r3, r1
 808b9ae:	d11a      	bne.n	808b9e6 <_strtod_r+0x8be>
 808b9b0:	4939      	ldr	r1, [pc, #228]	; (808ba98 <_strtod_r+0x970>)
 808b9b2:	428a      	cmp	r2, r1
 808b9b4:	d102      	bne.n	808b9bc <_strtod_r+0x894>
 808b9b6:	3301      	adds	r3, #1
 808b9b8:	f43f adfc 	beq.w	808b5b4 <_strtod_r+0x48c>
 808b9bc:	4b35      	ldr	r3, [pc, #212]	; (808ba94 <_strtod_r+0x96c>)
 808b9be:	f04f 0800 	mov.w	r8, #0
 808b9c2:	4013      	ands	r3, r2
 808b9c4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808b9c8:	e150      	b.n	808bc6c <_strtod_r+0xb44>
 808b9ca:	b963      	cbnz	r3, 808b9e6 <_strtod_r+0x8be>
 808b9cc:	f1b8 0f00 	cmp.w	r8, #0
 808b9d0:	d109      	bne.n	808b9e6 <_strtod_r+0x8be>
 808b9d2:	e76a      	b.n	808b8aa <_strtod_r+0x782>
 808b9d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808b9d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808b9dc:	f04f 38ff 	mov.w	r8, #4294967295
 808b9e0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808b9e4:	e142      	b.n	808bc6c <_strtod_r+0xb44>
 808b9e6:	b115      	cbz	r5, 808b9ee <_strtod_r+0x8c6>
 808b9e8:	ea15 0f09 	tst.w	r5, r9
 808b9ec:	e002      	b.n	808b9f4 <_strtod_r+0x8cc>
 808b9ee:	9b07      	ldr	r3, [sp, #28]
 808b9f0:	ea13 0f08 	tst.w	r3, r8
 808b9f4:	f000 813a 	beq.w	808bc6c <_strtod_r+0xb44>
 808b9f8:	9b06      	ldr	r3, [sp, #24]
 808b9fa:	9a03      	ldr	r2, [sp, #12]
 808b9fc:	4640      	mov	r0, r8
 808b9fe:	4649      	mov	r1, r9
 808ba00:	b153      	cbz	r3, 808ba18 <_strtod_r+0x8f0>
 808ba02:	f7ff fb6f 	bl	808b0e4 <sulp>
 808ba06:	4602      	mov	r2, r0
 808ba08:	460b      	mov	r3, r1
 808ba0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808ba0e:	f7fd fa7f 	bl	8088f10 <__adddf3>
 808ba12:	4680      	mov	r8, r0
 808ba14:	4689      	mov	r9, r1
 808ba16:	e129      	b.n	808bc6c <_strtod_r+0xb44>
 808ba18:	f7ff fb64 	bl	808b0e4 <sulp>
 808ba1c:	4602      	mov	r2, r0
 808ba1e:	460b      	mov	r3, r1
 808ba20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808ba24:	f7fd fa72 	bl	8088f0c <__aeabi_dsub>
 808ba28:	2200      	movs	r2, #0
 808ba2a:	2300      	movs	r3, #0
 808ba2c:	4680      	mov	r8, r0
 808ba2e:	4689      	mov	r9, r1
 808ba30:	f7fd fe88 	bl	8089744 <__aeabi_dcmpeq>
 808ba34:	2800      	cmp	r0, #0
 808ba36:	f47f af48 	bne.w	808b8ca <_strtod_r+0x7a2>
 808ba3a:	e117      	b.n	808bc6c <_strtod_r+0xb44>
 808ba3c:	9902      	ldr	r1, [sp, #8]
 808ba3e:	4658      	mov	r0, fp
 808ba40:	f001 fbcb 	bl	808d1da <__ratio>
 808ba44:	2200      	movs	r2, #0
 808ba46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808ba4a:	4606      	mov	r6, r0
 808ba4c:	460f      	mov	r7, r1
 808ba4e:	f7fd fe8d 	bl	808976c <__aeabi_dcmple>
 808ba52:	2800      	cmp	r0, #0
 808ba54:	d03f      	beq.n	808bad6 <_strtod_r+0x9ae>
 808ba56:	9b06      	ldr	r3, [sp, #24]
 808ba58:	b113      	cbz	r3, 808ba60 <_strtod_r+0x938>
 808ba5a:	2600      	movs	r6, #0
 808ba5c:	4f0f      	ldr	r7, [pc, #60]	; (808ba9c <_strtod_r+0x974>)
 808ba5e:	e010      	b.n	808ba82 <_strtod_r+0x95a>
 808ba60:	f1b8 0f00 	cmp.w	r8, #0
 808ba64:	d103      	bne.n	808ba6e <_strtod_r+0x946>
 808ba66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808ba6a:	b93b      	cbnz	r3, 808ba7c <_strtod_r+0x954>
 808ba6c:	e01a      	b.n	808baa4 <_strtod_r+0x97c>
 808ba6e:	f1b8 0f01 	cmp.w	r8, #1
 808ba72:	d103      	bne.n	808ba7c <_strtod_r+0x954>
 808ba74:	f1b9 0f00 	cmp.w	r9, #0
 808ba78:	f43f af27 	beq.w	808b8ca <_strtod_r+0x7a2>
 808ba7c:	4f08      	ldr	r7, [pc, #32]	; (808baa0 <_strtod_r+0x978>)
 808ba7e:	2600      	movs	r6, #0
 808ba80:	2400      	movs	r4, #0
 808ba82:	4d06      	ldr	r5, [pc, #24]	; (808ba9c <_strtod_r+0x974>)
 808ba84:	e03c      	b.n	808bb00 <_strtod_r+0x9d8>
 808ba86:	bf00      	nop
 808ba88:	fffffc02 	.word	0xfffffc02
 808ba8c:	fffffbe2 	.word	0xfffffbe2
 808ba90:	000fffff 	.word	0x000fffff
 808ba94:	7ff00000 	.word	0x7ff00000
 808ba98:	7fefffff 	.word	0x7fefffff
 808ba9c:	3ff00000 	.word	0x3ff00000
 808baa0:	bff00000 	.word	0xbff00000
 808baa4:	2200      	movs	r2, #0
 808baa6:	4b9a      	ldr	r3, [pc, #616]	; (808bd10 <_strtod_r+0xbe8>)
 808baa8:	4630      	mov	r0, r6
 808baaa:	4639      	mov	r1, r7
 808baac:	f7fd fe54 	bl	8089758 <__aeabi_dcmplt>
 808bab0:	b940      	cbnz	r0, 808bac4 <_strtod_r+0x99c>
 808bab2:	2200      	movs	r2, #0
 808bab4:	4b97      	ldr	r3, [pc, #604]	; (808bd14 <_strtod_r+0xbec>)
 808bab6:	4630      	mov	r0, r6
 808bab8:	4639      	mov	r1, r7
 808baba:	f7fd fbdb 	bl	8089274 <__aeabi_dmul>
 808babe:	4604      	mov	r4, r0
 808bac0:	460d      	mov	r5, r1
 808bac2:	e001      	b.n	808bac8 <_strtod_r+0x9a0>
 808bac4:	9c06      	ldr	r4, [sp, #24]
 808bac6:	4d93      	ldr	r5, [pc, #588]	; (808bd14 <_strtod_r+0xbec>)
 808bac8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808bacc:	9414      	str	r4, [sp, #80]	; 0x50
 808bace:	9315      	str	r3, [sp, #84]	; 0x54
 808bad0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808bad4:	e014      	b.n	808bb00 <_strtod_r+0x9d8>
 808bad6:	4b8f      	ldr	r3, [pc, #572]	; (808bd14 <_strtod_r+0xbec>)
 808bad8:	2200      	movs	r2, #0
 808bada:	4630      	mov	r0, r6
 808badc:	4639      	mov	r1, r7
 808bade:	f7fd fbc9 	bl	8089274 <__aeabi_dmul>
 808bae2:	9b06      	ldr	r3, [sp, #24]
 808bae4:	4604      	mov	r4, r0
 808bae6:	460d      	mov	r5, r1
 808bae8:	b923      	cbnz	r3, 808baf4 <_strtod_r+0x9cc>
 808baea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808baee:	900e      	str	r0, [sp, #56]	; 0x38
 808baf0:	930f      	str	r3, [sp, #60]	; 0x3c
 808baf2:	e003      	b.n	808bafc <_strtod_r+0x9d4>
 808baf4:	4602      	mov	r2, r0
 808baf6:	460b      	mov	r3, r1
 808baf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808bafc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808bb00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808bb04:	0d1b      	lsrs	r3, r3, #20
 808bb06:	051b      	lsls	r3, r3, #20
 808bb08:	9307      	str	r3, [sp, #28]
 808bb0a:	9a07      	ldr	r2, [sp, #28]
 808bb0c:	4b82      	ldr	r3, [pc, #520]	; (808bd18 <_strtod_r+0xbf0>)
 808bb0e:	429a      	cmp	r2, r3
 808bb10:	d12b      	bne.n	808bb6a <_strtod_r+0xa42>
 808bb12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808bb16:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808bb1a:	4640      	mov	r0, r8
 808bb1c:	4649      	mov	r1, r9
 808bb1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808bb22:	f001 fa9b 	bl	808d05c <__ulp>
 808bb26:	4602      	mov	r2, r0
 808bb28:	460b      	mov	r3, r1
 808bb2a:	4630      	mov	r0, r6
 808bb2c:	4639      	mov	r1, r7
 808bb2e:	f7fd fba1 	bl	8089274 <__aeabi_dmul>
 808bb32:	4642      	mov	r2, r8
 808bb34:	464b      	mov	r3, r9
 808bb36:	f7fd f9eb 	bl	8088f10 <__adddf3>
 808bb3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808bb3e:	0d1b      	lsrs	r3, r3, #20
 808bb40:	4a76      	ldr	r2, [pc, #472]	; (808bd1c <_strtod_r+0xbf4>)
 808bb42:	051b      	lsls	r3, r3, #20
 808bb44:	4293      	cmp	r3, r2
 808bb46:	4680      	mov	r8, r0
 808bb48:	d90c      	bls.n	808bb64 <_strtod_r+0xa3c>
 808bb4a:	4b75      	ldr	r3, [pc, #468]	; (808bd20 <_strtod_r+0xbf8>)
 808bb4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808bb4e:	429a      	cmp	r2, r3
 808bb50:	d103      	bne.n	808bb5a <_strtod_r+0xa32>
 808bb52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808bb54:	3301      	adds	r3, #1
 808bb56:	f43f ad2d 	beq.w	808b5b4 <_strtod_r+0x48c>
 808bb5a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808bd20 <_strtod_r+0xbf8>
 808bb5e:	f04f 38ff 	mov.w	r8, #4294967295
 808bb62:	e072      	b.n	808bc4a <_strtod_r+0xb22>
 808bb64:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808bb68:	e039      	b.n	808bbde <_strtod_r+0xab6>
 808bb6a:	9b03      	ldr	r3, [sp, #12]
 808bb6c:	b33b      	cbz	r3, 808bbbe <_strtod_r+0xa96>
 808bb6e:	9b07      	ldr	r3, [sp, #28]
 808bb70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808bb74:	d823      	bhi.n	808bbbe <_strtod_r+0xa96>
 808bb76:	a35e      	add	r3, pc, #376	; (adr r3, 808bcf0 <_strtod_r+0xbc8>)
 808bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bb7c:	4620      	mov	r0, r4
 808bb7e:	4629      	mov	r1, r5
 808bb80:	f7fd fdf4 	bl	808976c <__aeabi_dcmple>
 808bb84:	b1b8      	cbz	r0, 808bbb6 <_strtod_r+0xa8e>
 808bb86:	4629      	mov	r1, r5
 808bb88:	4620      	mov	r0, r4
 808bb8a:	f7fd fe35 	bl	80897f8 <__aeabi_d2uiz>
 808bb8e:	2800      	cmp	r0, #0
 808bb90:	bf08      	it	eq
 808bb92:	2001      	moveq	r0, #1
 808bb94:	f7fd faf8 	bl	8089188 <__aeabi_ui2d>
 808bb98:	9b06      	ldr	r3, [sp, #24]
 808bb9a:	4604      	mov	r4, r0
 808bb9c:	460d      	mov	r5, r1
 808bb9e:	b923      	cbnz	r3, 808bbaa <_strtod_r+0xa82>
 808bba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808bba4:	9010      	str	r0, [sp, #64]	; 0x40
 808bba6:	9311      	str	r3, [sp, #68]	; 0x44
 808bba8:	e003      	b.n	808bbb2 <_strtod_r+0xa8a>
 808bbaa:	4602      	mov	r2, r0
 808bbac:	460b      	mov	r3, r1
 808bbae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808bbb2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808bbb6:	9a07      	ldr	r2, [sp, #28]
 808bbb8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808bbbc:	1a9f      	subs	r7, r3, r2
 808bbbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808bbc2:	f001 fa4b 	bl	808d05c <__ulp>
 808bbc6:	4602      	mov	r2, r0
 808bbc8:	460b      	mov	r3, r1
 808bbca:	4630      	mov	r0, r6
 808bbcc:	4639      	mov	r1, r7
 808bbce:	f7fd fb51 	bl	8089274 <__aeabi_dmul>
 808bbd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808bbd6:	f7fd f99b 	bl	8088f10 <__adddf3>
 808bbda:	4680      	mov	r8, r0
 808bbdc:	4689      	mov	r9, r1
 808bbde:	9b03      	ldr	r3, [sp, #12]
 808bbe0:	bb9b      	cbnz	r3, 808bc4a <_strtod_r+0xb22>
 808bbe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808bbe6:	0d1b      	lsrs	r3, r3, #20
 808bbe8:	9a07      	ldr	r2, [sp, #28]
 808bbea:	051b      	lsls	r3, r3, #20
 808bbec:	429a      	cmp	r2, r3
 808bbee:	464e      	mov	r6, r9
 808bbf0:	d12b      	bne.n	808bc4a <_strtod_r+0xb22>
 808bbf2:	4629      	mov	r1, r5
 808bbf4:	4620      	mov	r0, r4
 808bbf6:	f7fd fdd7 	bl	80897a8 <__aeabi_d2iz>
 808bbfa:	f7fd fad5 	bl	80891a8 <__aeabi_i2d>
 808bbfe:	460b      	mov	r3, r1
 808bc00:	4602      	mov	r2, r0
 808bc02:	4629      	mov	r1, r5
 808bc04:	4620      	mov	r0, r4
 808bc06:	f7fd f981 	bl	8088f0c <__aeabi_dsub>
 808bc0a:	9b06      	ldr	r3, [sp, #24]
 808bc0c:	4604      	mov	r4, r0
 808bc0e:	460d      	mov	r5, r1
 808bc10:	b92b      	cbnz	r3, 808bc1e <_strtod_r+0xaf6>
 808bc12:	f1b8 0f00 	cmp.w	r8, #0
 808bc16:	d102      	bne.n	808bc1e <_strtod_r+0xaf6>
 808bc18:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808bc1c:	b17e      	cbz	r6, 808bc3e <_strtod_r+0xb16>
 808bc1e:	a336      	add	r3, pc, #216	; (adr r3, 808bcf8 <_strtod_r+0xbd0>)
 808bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bc24:	4620      	mov	r0, r4
 808bc26:	4629      	mov	r1, r5
 808bc28:	f7fd fd96 	bl	8089758 <__aeabi_dcmplt>
 808bc2c:	bb88      	cbnz	r0, 808bc92 <_strtod_r+0xb6a>
 808bc2e:	a334      	add	r3, pc, #208	; (adr r3, 808bd00 <_strtod_r+0xbd8>)
 808bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bc34:	4620      	mov	r0, r4
 808bc36:	4629      	mov	r1, r5
 808bc38:	f7fd fdac 	bl	8089794 <__aeabi_dcmpgt>
 808bc3c:	e004      	b.n	808bc48 <_strtod_r+0xb20>
 808bc3e:	a332      	add	r3, pc, #200	; (adr r3, 808bd08 <_strtod_r+0xbe0>)
 808bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bc44:	f7fd fd88 	bl	8089758 <__aeabi_dcmplt>
 808bc48:	bb18      	cbnz	r0, 808bc92 <_strtod_r+0xb6a>
 808bc4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808bc4c:	4650      	mov	r0, sl
 808bc4e:	f000 ff74 	bl	808cb3a <_Bfree>
 808bc52:	9904      	ldr	r1, [sp, #16]
 808bc54:	4650      	mov	r0, sl
 808bc56:	f000 ff70 	bl	808cb3a <_Bfree>
 808bc5a:	9902      	ldr	r1, [sp, #8]
 808bc5c:	4650      	mov	r0, sl
 808bc5e:	f000 ff6c 	bl	808cb3a <_Bfree>
 808bc62:	4659      	mov	r1, fp
 808bc64:	4650      	mov	r0, sl
 808bc66:	f000 ff68 	bl	808cb3a <_Bfree>
 808bc6a:	e574      	b.n	808b756 <_strtod_r+0x62e>
 808bc6c:	9b03      	ldr	r3, [sp, #12]
 808bc6e:	b183      	cbz	r3, 808bc92 <_strtod_r+0xb6a>
 808bc70:	4b2c      	ldr	r3, [pc, #176]	; (808bd24 <_strtod_r+0xbfc>)
 808bc72:	4640      	mov	r0, r8
 808bc74:	930b      	str	r3, [sp, #44]	; 0x2c
 808bc76:	2300      	movs	r3, #0
 808bc78:	930a      	str	r3, [sp, #40]	; 0x28
 808bc7a:	4649      	mov	r1, r9
 808bc7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808bc80:	f7fd faf8 	bl	8089274 <__aeabi_dmul>
 808bc84:	4680      	mov	r8, r0
 808bc86:	4689      	mov	r9, r1
 808bc88:	b919      	cbnz	r1, 808bc92 <_strtod_r+0xb6a>
 808bc8a:	b910      	cbnz	r0, 808bc92 <_strtod_r+0xb6a>
 808bc8c:	2322      	movs	r3, #34	; 0x22
 808bc8e:	f8ca 3000 	str.w	r3, [sl]
 808bc92:	9918      	ldr	r1, [sp, #96]	; 0x60
 808bc94:	4650      	mov	r0, sl
 808bc96:	f000 ff50 	bl	808cb3a <_Bfree>
 808bc9a:	9904      	ldr	r1, [sp, #16]
 808bc9c:	4650      	mov	r0, sl
 808bc9e:	f000 ff4c 	bl	808cb3a <_Bfree>
 808bca2:	9902      	ldr	r1, [sp, #8]
 808bca4:	4650      	mov	r0, sl
 808bca6:	f000 ff48 	bl	808cb3a <_Bfree>
 808bcaa:	9905      	ldr	r1, [sp, #20]
 808bcac:	4650      	mov	r0, sl
 808bcae:	f000 ff44 	bl	808cb3a <_Bfree>
 808bcb2:	4659      	mov	r1, fp
 808bcb4:	4650      	mov	r0, sl
 808bcb6:	f000 ff40 	bl	808cb3a <_Bfree>
 808bcba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808bcbc:	b113      	cbz	r3, 808bcc4 <_strtod_r+0xb9c>
 808bcbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bcc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808bcc2:	6013      	str	r3, [r2, #0]
 808bcc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808bcc6:	b11b      	cbz	r3, 808bcd0 <_strtod_r+0xba8>
 808bcc8:	4642      	mov	r2, r8
 808bcca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808bcce:	e007      	b.n	808bce0 <_strtod_r+0xbb8>
 808bcd0:	4642      	mov	r2, r8
 808bcd2:	464b      	mov	r3, r9
 808bcd4:	e004      	b.n	808bce0 <_strtod_r+0xbb8>
 808bcd6:	2500      	movs	r5, #0
 808bcd8:	462a      	mov	r2, r5
 808bcda:	2101      	movs	r1, #1
 808bcdc:	f7ff bb47 	b.w	808b36e <_strtod_r+0x246>
 808bce0:	4610      	mov	r0, r2
 808bce2:	4619      	mov	r1, r3
 808bce4:	b01d      	add	sp, #116	; 0x74
 808bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bcea:	bf00      	nop
 808bcec:	f3af 8000 	nop.w
 808bcf0:	ffc00000 	.word	0xffc00000
 808bcf4:	41dfffff 	.word	0x41dfffff
 808bcf8:	94a03595 	.word	0x94a03595
 808bcfc:	3fdfffff 	.word	0x3fdfffff
 808bd00:	35afe535 	.word	0x35afe535
 808bd04:	3fe00000 	.word	0x3fe00000
 808bd08:	94a03595 	.word	0x94a03595
 808bd0c:	3fcfffff 	.word	0x3fcfffff
 808bd10:	3ff00000 	.word	0x3ff00000
 808bd14:	3fe00000 	.word	0x3fe00000
 808bd18:	7fe00000 	.word	0x7fe00000
 808bd1c:	7c9fffff 	.word	0x7c9fffff
 808bd20:	7fefffff 	.word	0x7fefffff
 808bd24:	39500000 	.word	0x39500000

0808bd28 <strtod>:
 808bd28:	4b02      	ldr	r3, [pc, #8]	; (808bd34 <strtod+0xc>)
 808bd2a:	460a      	mov	r2, r1
 808bd2c:	4601      	mov	r1, r0
 808bd2e:	6818      	ldr	r0, [r3, #0]
 808bd30:	f7ff b9fa 	b.w	808b128 <_strtod_r>
 808bd34:	200000b8 	.word	0x200000b8

0808bd38 <_strtoul_r>:
 808bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808bd3c:	460e      	mov	r6, r1
 808bd3e:	4680      	mov	r8, r0
 808bd40:	483b      	ldr	r0, [pc, #236]	; (808be30 <_strtoul_r+0xf8>)
 808bd42:	f8d0 9000 	ldr.w	r9, [r0]
 808bd46:	4635      	mov	r5, r6
 808bd48:	f815 4b01 	ldrb.w	r4, [r5], #1
 808bd4c:	eb09 0004 	add.w	r0, r9, r4
 808bd50:	7840      	ldrb	r0, [r0, #1]
 808bd52:	f000 0008 	and.w	r0, r0, #8
 808bd56:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808bd5a:	b108      	cbz	r0, 808bd60 <_strtoul_r+0x28>
 808bd5c:	462e      	mov	r6, r5
 808bd5e:	e7f2      	b.n	808bd46 <_strtoul_r+0xe>
 808bd60:	2c2d      	cmp	r4, #45	; 0x2d
 808bd62:	d103      	bne.n	808bd6c <_strtoul_r+0x34>
 808bd64:	1cb5      	adds	r5, r6, #2
 808bd66:	7874      	ldrb	r4, [r6, #1]
 808bd68:	2701      	movs	r7, #1
 808bd6a:	e003      	b.n	808bd74 <_strtoul_r+0x3c>
 808bd6c:	2c2b      	cmp	r4, #43	; 0x2b
 808bd6e:	bf04      	itt	eq
 808bd70:	7874      	ldrbeq	r4, [r6, #1]
 808bd72:	1cb5      	addeq	r5, r6, #2
 808bd74:	b113      	cbz	r3, 808bd7c <_strtoul_r+0x44>
 808bd76:	2b10      	cmp	r3, #16
 808bd78:	d10a      	bne.n	808bd90 <_strtoul_r+0x58>
 808bd7a:	e053      	b.n	808be24 <_strtoul_r+0xec>
 808bd7c:	2c30      	cmp	r4, #48	; 0x30
 808bd7e:	d14f      	bne.n	808be20 <_strtoul_r+0xe8>
 808bd80:	7828      	ldrb	r0, [r5, #0]
 808bd82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808bd86:	2858      	cmp	r0, #88	; 0x58
 808bd88:	d145      	bne.n	808be16 <_strtoul_r+0xde>
 808bd8a:	786c      	ldrb	r4, [r5, #1]
 808bd8c:	2310      	movs	r3, #16
 808bd8e:	3502      	adds	r5, #2
 808bd90:	f04f 3cff 	mov.w	ip, #4294967295
 808bd94:	fbbc fcf3 	udiv	ip, ip, r3
 808bd98:	fb03 fa0c 	mul.w	sl, r3, ip
 808bd9c:	2600      	movs	r6, #0
 808bd9e:	ea6f 0a0a 	mvn.w	sl, sl
 808bda2:	4630      	mov	r0, r6
 808bda4:	eb09 0e04 	add.w	lr, r9, r4
 808bda8:	f89e e001 	ldrb.w	lr, [lr, #1]
 808bdac:	f01e 0f04 	tst.w	lr, #4
 808bdb0:	d001      	beq.n	808bdb6 <_strtoul_r+0x7e>
 808bdb2:	3c30      	subs	r4, #48	; 0x30
 808bdb4:	e00b      	b.n	808bdce <_strtoul_r+0x96>
 808bdb6:	f01e 0e03 	ands.w	lr, lr, #3
 808bdba:	d01a      	beq.n	808bdf2 <_strtoul_r+0xba>
 808bdbc:	f1be 0f01 	cmp.w	lr, #1
 808bdc0:	bf0c      	ite	eq
 808bdc2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808bdc6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808bdca:	ebce 0404 	rsb	r4, lr, r4
 808bdce:	42a3      	cmp	r3, r4
 808bdd0:	dd0f      	ble.n	808bdf2 <_strtoul_r+0xba>
 808bdd2:	2e00      	cmp	r6, #0
 808bdd4:	db08      	blt.n	808bde8 <_strtoul_r+0xb0>
 808bdd6:	4560      	cmp	r0, ip
 808bdd8:	d806      	bhi.n	808bde8 <_strtoul_r+0xb0>
 808bdda:	d101      	bne.n	808bde0 <_strtoul_r+0xa8>
 808bddc:	4554      	cmp	r4, sl
 808bdde:	dc03      	bgt.n	808bde8 <_strtoul_r+0xb0>
 808bde0:	fb03 4000 	mla	r0, r3, r0, r4
 808bde4:	2601      	movs	r6, #1
 808bde6:	e001      	b.n	808bdec <_strtoul_r+0xb4>
 808bde8:	f04f 36ff 	mov.w	r6, #4294967295
 808bdec:	f815 4b01 	ldrb.w	r4, [r5], #1
 808bdf0:	e7d8      	b.n	808bda4 <_strtoul_r+0x6c>
 808bdf2:	2e00      	cmp	r6, #0
 808bdf4:	da07      	bge.n	808be06 <_strtoul_r+0xce>
 808bdf6:	2322      	movs	r3, #34	; 0x22
 808bdf8:	f8c8 3000 	str.w	r3, [r8]
 808bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 808be00:	b92a      	cbnz	r2, 808be0e <_strtoul_r+0xd6>
 808be02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808be06:	b107      	cbz	r7, 808be0a <_strtoul_r+0xd2>
 808be08:	4240      	negs	r0, r0
 808be0a:	b172      	cbz	r2, 808be2a <_strtoul_r+0xf2>
 808be0c:	b106      	cbz	r6, 808be10 <_strtoul_r+0xd8>
 808be0e:	1e69      	subs	r1, r5, #1
 808be10:	6011      	str	r1, [r2, #0]
 808be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808be16:	2430      	movs	r4, #48	; 0x30
 808be18:	2b00      	cmp	r3, #0
 808be1a:	d1b9      	bne.n	808bd90 <_strtoul_r+0x58>
 808be1c:	2308      	movs	r3, #8
 808be1e:	e7b7      	b.n	808bd90 <_strtoul_r+0x58>
 808be20:	230a      	movs	r3, #10
 808be22:	e7b5      	b.n	808bd90 <_strtoul_r+0x58>
 808be24:	2c30      	cmp	r4, #48	; 0x30
 808be26:	d0ab      	beq.n	808bd80 <_strtoul_r+0x48>
 808be28:	e7b2      	b.n	808bd90 <_strtoul_r+0x58>
 808be2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808be2e:	bf00      	nop
 808be30:	20000054 	.word	0x20000054

0808be34 <strtoul>:
 808be34:	4613      	mov	r3, r2
 808be36:	460a      	mov	r2, r1
 808be38:	4601      	mov	r1, r0
 808be3a:	4802      	ldr	r0, [pc, #8]	; (808be44 <strtoul+0x10>)
 808be3c:	6800      	ldr	r0, [r0, #0]
 808be3e:	f7ff bf7b 	b.w	808bd38 <_strtoul_r>
 808be42:	bf00      	nop
 808be44:	200000b8 	.word	0x200000b8

0808be48 <__get_current_time_locale>:
 808be48:	4b04      	ldr	r3, [pc, #16]	; (808be5c <__get_current_time_locale+0x14>)
 808be4a:	4a05      	ldr	r2, [pc, #20]	; (808be60 <__get_current_time_locale+0x18>)
 808be4c:	6818      	ldr	r0, [r3, #0]
 808be4e:	4b05      	ldr	r3, [pc, #20]	; (808be64 <__get_current_time_locale+0x1c>)
 808be50:	2800      	cmp	r0, #0
 808be52:	bf14      	ite	ne
 808be54:	4610      	movne	r0, r2
 808be56:	4618      	moveq	r0, r3
 808be58:	4770      	bx	lr
 808be5a:	bf00      	nop
 808be5c:	20000fac 	.word	0x20000fac
 808be60:	20000fb0 	.word	0x20000fb0
 808be64:	0808e770 	.word	0x0808e770

0808be68 <__tzcalc_limits>:
 808be68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808be6c:	4604      	mov	r4, r0
 808be6e:	f000 fd91 	bl	808c994 <__gettzinfo>
 808be72:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808be76:	429c      	cmp	r4, r3
 808be78:	f340 8096 	ble.w	808bfa8 <__tzcalc_limits+0x140>
 808be7c:	f240 156d 	movw	r5, #365	; 0x16d
 808be80:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808be84:	18e3      	adds	r3, r4, r3
 808be86:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808be8a:	109b      	asrs	r3, r3, #2
 808be8c:	fb05 3502 	mla	r5, r5, r2, r3
 808be90:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808be94:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808be98:	fb92 f3f3 	sdiv	r3, r2, r3
 808be9c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808bea0:	442b      	add	r3, r5
 808bea2:	18a5      	adds	r5, r4, r2
 808bea4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808bea8:	fb94 f7f2 	sdiv	r7, r4, r2
 808beac:	fb95 f5f2 	sdiv	r5, r5, r2
 808beb0:	fb02 4717 	mls	r7, r2, r7, r4
 808beb4:	441d      	add	r5, r3
 808beb6:	2364      	movs	r3, #100	; 0x64
 808beb8:	fb94 f6f3 	sdiv	r6, r4, r3
 808bebc:	fab7 fe87 	clz	lr, r7
 808bec0:	4601      	mov	r1, r0
 808bec2:	fb03 4616 	mls	r6, r3, r6, r4
 808bec6:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808beca:	9301      	str	r3, [sp, #4]
 808becc:	f004 0303 	and.w	r3, r4, #3
 808bed0:	6044      	str	r4, [r0, #4]
 808bed2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808bed6:	9300      	str	r3, [sp, #0]
 808bed8:	f04f 0c07 	mov.w	ip, #7
 808bedc:	7a0b      	ldrb	r3, [r1, #8]
 808bede:	2b4a      	cmp	r3, #74	; 0x4a
 808bee0:	d10e      	bne.n	808bf00 <__tzcalc_limits+0x98>
 808bee2:	694b      	ldr	r3, [r1, #20]
 808bee4:	9a00      	ldr	r2, [sp, #0]
 808bee6:	18ec      	adds	r4, r5, r3
 808bee8:	b902      	cbnz	r2, 808beec <__tzcalc_limits+0x84>
 808beea:	b906      	cbnz	r6, 808beee <__tzcalc_limits+0x86>
 808beec:	b927      	cbnz	r7, 808bef8 <__tzcalc_limits+0x90>
 808beee:	2b3b      	cmp	r3, #59	; 0x3b
 808bef0:	bfd4      	ite	le
 808bef2:	2300      	movle	r3, #0
 808bef4:	2301      	movgt	r3, #1
 808bef6:	e000      	b.n	808befa <__tzcalc_limits+0x92>
 808bef8:	2300      	movs	r3, #0
 808befa:	4423      	add	r3, r4
 808befc:	3b01      	subs	r3, #1
 808befe:	e03f      	b.n	808bf80 <__tzcalc_limits+0x118>
 808bf00:	2b44      	cmp	r3, #68	; 0x44
 808bf02:	d102      	bne.n	808bf0a <__tzcalc_limits+0xa2>
 808bf04:	694b      	ldr	r3, [r1, #20]
 808bf06:	442b      	add	r3, r5
 808bf08:	e03a      	b.n	808bf80 <__tzcalc_limits+0x118>
 808bf0a:	9b00      	ldr	r3, [sp, #0]
 808bf0c:	b92b      	cbnz	r3, 808bf1a <__tzcalc_limits+0xb2>
 808bf0e:	2e00      	cmp	r6, #0
 808bf10:	bf0c      	ite	eq
 808bf12:	46f0      	moveq	r8, lr
 808bf14:	f04f 0801 	movne.w	r8, #1
 808bf18:	e000      	b.n	808bf1c <__tzcalc_limits+0xb4>
 808bf1a:	46f0      	mov	r8, lr
 808bf1c:	46a9      	mov	r9, r5
 808bf1e:	4b24      	ldr	r3, [pc, #144]	; (808bfb0 <__tzcalc_limits+0x148>)
 808bf20:	2230      	movs	r2, #48	; 0x30
 808bf22:	fb02 3808 	mla	r8, r2, r8, r3
 808bf26:	68cc      	ldr	r4, [r1, #12]
 808bf28:	f1a8 0a04 	sub.w	sl, r8, #4
 808bf2c:	2301      	movs	r3, #1
 808bf2e:	42a3      	cmp	r3, r4
 808bf30:	da04      	bge.n	808bf3c <__tzcalc_limits+0xd4>
 808bf32:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808bf36:	3301      	adds	r3, #1
 808bf38:	44d9      	add	r9, fp
 808bf3a:	e7f8      	b.n	808bf2e <__tzcalc_limits+0xc6>
 808bf3c:	f109 0304 	add.w	r3, r9, #4
 808bf40:	fb93 fbfc 	sdiv	fp, r3, ip
 808bf44:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808bf48:	ebca 0a03 	rsb	sl, sl, r3
 808bf4c:	694b      	ldr	r3, [r1, #20]
 808bf4e:	2c01      	cmp	r4, #1
 808bf50:	bfb8      	it	lt
 808bf52:	2401      	movlt	r4, #1
 808bf54:	ebb3 0a0a 	subs.w	sl, r3, sl
 808bf58:	690b      	ldr	r3, [r1, #16]
 808bf5a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808bf5e:	f103 33ff 	add.w	r3, r3, #4294967295
 808bf62:	f104 34ff 	add.w	r4, r4, #4294967295
 808bf66:	bf48      	it	mi
 808bf68:	f10a 0a07 	addmi.w	sl, sl, #7
 808bf6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808bf70:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808bf74:	4453      	add	r3, sl
 808bf76:	42a3      	cmp	r3, r4
 808bf78:	db01      	blt.n	808bf7e <__tzcalc_limits+0x116>
 808bf7a:	3b07      	subs	r3, #7
 808bf7c:	e7fb      	b.n	808bf76 <__tzcalc_limits+0x10e>
 808bf7e:	444b      	add	r3, r9
 808bf80:	698c      	ldr	r4, [r1, #24]
 808bf82:	4a0c      	ldr	r2, [pc, #48]	; (808bfb4 <__tzcalc_limits+0x14c>)
 808bf84:	fb02 4303 	mla	r3, r2, r3, r4
 808bf88:	6a0c      	ldr	r4, [r1, #32]
 808bf8a:	4423      	add	r3, r4
 808bf8c:	f841 3f1c 	str.w	r3, [r1, #28]!
 808bf90:	9b01      	ldr	r3, [sp, #4]
 808bf92:	4299      	cmp	r1, r3
 808bf94:	d1a2      	bne.n	808bedc <__tzcalc_limits+0x74>
 808bf96:	69c3      	ldr	r3, [r0, #28]
 808bf98:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808bf9a:	4293      	cmp	r3, r2
 808bf9c:	bfac      	ite	ge
 808bf9e:	2300      	movge	r3, #0
 808bfa0:	2301      	movlt	r3, #1
 808bfa2:	6003      	str	r3, [r0, #0]
 808bfa4:	2001      	movs	r0, #1
 808bfa6:	e000      	b.n	808bfaa <__tzcalc_limits+0x142>
 808bfa8:	2000      	movs	r0, #0
 808bfaa:	b003      	add	sp, #12
 808bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bfb0:	0808e534 	.word	0x0808e534
 808bfb4:	00015180 	.word	0x00015180

0808bfb8 <__tz_lock>:
 808bfb8:	4770      	bx	lr

0808bfba <__tz_unlock>:
 808bfba:	4770      	bx	lr

0808bfbc <_tzset_unlocked>:
 808bfbc:	4b01      	ldr	r3, [pc, #4]	; (808bfc4 <_tzset_unlocked+0x8>)
 808bfbe:	6818      	ldr	r0, [r3, #0]
 808bfc0:	f000 b802 	b.w	808bfc8 <_tzset_unlocked_r>
 808bfc4:	200000b8 	.word	0x200000b8

0808bfc8 <_tzset_unlocked_r>:
 808bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bfcc:	b08d      	sub	sp, #52	; 0x34
 808bfce:	4607      	mov	r7, r0
 808bfd0:	f000 fce0 	bl	808c994 <__gettzinfo>
 808bfd4:	49b0      	ldr	r1, [pc, #704]	; (808c298 <_tzset_unlocked_r+0x2d0>)
 808bfd6:	4604      	mov	r4, r0
 808bfd8:	4638      	mov	r0, r7
 808bfda:	f000 fcd3 	bl	808c984 <_getenv_r>
 808bfde:	4eaf      	ldr	r6, [pc, #700]	; (808c29c <_tzset_unlocked_r+0x2d4>)
 808bfe0:	4605      	mov	r5, r0
 808bfe2:	b960      	cbnz	r0, 808bffe <_tzset_unlocked_r+0x36>
 808bfe4:	4bae      	ldr	r3, [pc, #696]	; (808c2a0 <_tzset_unlocked_r+0x2d8>)
 808bfe6:	4aaf      	ldr	r2, [pc, #700]	; (808c2a4 <_tzset_unlocked_r+0x2dc>)
 808bfe8:	6018      	str	r0, [r3, #0]
 808bfea:	4baf      	ldr	r3, [pc, #700]	; (808c2a8 <_tzset_unlocked_r+0x2e0>)
 808bfec:	6018      	str	r0, [r3, #0]
 808bfee:	4baf      	ldr	r3, [pc, #700]	; (808c2ac <_tzset_unlocked_r+0x2e4>)
 808bff0:	6830      	ldr	r0, [r6, #0]
 808bff2:	601a      	str	r2, [r3, #0]
 808bff4:	605a      	str	r2, [r3, #4]
 808bff6:	f7f9 ffc3 	bl	8085f80 <free>
 808bffa:	6035      	str	r5, [r6, #0]
 808bffc:	e148      	b.n	808c290 <_tzset_unlocked_r+0x2c8>
 808bffe:	6831      	ldr	r1, [r6, #0]
 808c000:	b979      	cbnz	r1, 808c022 <_tzset_unlocked_r+0x5a>
 808c002:	6830      	ldr	r0, [r6, #0]
 808c004:	f7f9 ffbc 	bl	8085f80 <free>
 808c008:	4628      	mov	r0, r5
 808c00a:	f7ff f821 	bl	808b050 <strlen>
 808c00e:	1c41      	adds	r1, r0, #1
 808c010:	4638      	mov	r0, r7
 808c012:	f7f9 fffd 	bl	8086010 <_malloc_r>
 808c016:	6030      	str	r0, [r6, #0]
 808c018:	b148      	cbz	r0, 808c02e <_tzset_unlocked_r+0x66>
 808c01a:	4629      	mov	r1, r5
 808c01c:	f7fe fae0 	bl	808a5e0 <strcpy>
 808c020:	e005      	b.n	808c02e <_tzset_unlocked_r+0x66>
 808c022:	f7fe fad3 	bl	808a5cc <strcmp>
 808c026:	2800      	cmp	r0, #0
 808c028:	f000 8132 	beq.w	808c290 <_tzset_unlocked_r+0x2c8>
 808c02c:	e7e9      	b.n	808c002 <_tzset_unlocked_r+0x3a>
 808c02e:	782b      	ldrb	r3, [r5, #0]
 808c030:	ae0a      	add	r6, sp, #40	; 0x28
 808c032:	2b3a      	cmp	r3, #58	; 0x3a
 808c034:	bf08      	it	eq
 808c036:	3501      	addeq	r5, #1
 808c038:	4633      	mov	r3, r6
 808c03a:	4a9d      	ldr	r2, [pc, #628]	; (808c2b0 <_tzset_unlocked_r+0x2e8>)
 808c03c:	499d      	ldr	r1, [pc, #628]	; (808c2b4 <_tzset_unlocked_r+0x2ec>)
 808c03e:	4628      	mov	r0, r5
 808c040:	f7f9 ffbe 	bl	8085fc0 <siscanf>
 808c044:	2800      	cmp	r0, #0
 808c046:	f340 8123 	ble.w	808c290 <_tzset_unlocked_r+0x2c8>
 808c04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c04c:	18ef      	adds	r7, r5, r3
 808c04e:	5ceb      	ldrb	r3, [r5, r3]
 808c050:	2b2d      	cmp	r3, #45	; 0x2d
 808c052:	d103      	bne.n	808c05c <_tzset_unlocked_r+0x94>
 808c054:	3701      	adds	r7, #1
 808c056:	f04f 35ff 	mov.w	r5, #4294967295
 808c05a:	e003      	b.n	808c064 <_tzset_unlocked_r+0x9c>
 808c05c:	2b2b      	cmp	r3, #43	; 0x2b
 808c05e:	bf08      	it	eq
 808c060:	3701      	addeq	r7, #1
 808c062:	2501      	movs	r5, #1
 808c064:	f10d 0a20 	add.w	sl, sp, #32
 808c068:	f10d 0b1e 	add.w	fp, sp, #30
 808c06c:	f04f 0800 	mov.w	r8, #0
 808c070:	9603      	str	r6, [sp, #12]
 808c072:	f8cd a008 	str.w	sl, [sp, #8]
 808c076:	9601      	str	r6, [sp, #4]
 808c078:	f8cd b000 	str.w	fp, [sp]
 808c07c:	4633      	mov	r3, r6
 808c07e:	aa07      	add	r2, sp, #28
 808c080:	498d      	ldr	r1, [pc, #564]	; (808c2b8 <_tzset_unlocked_r+0x2f0>)
 808c082:	4638      	mov	r0, r7
 808c084:	f8ad 801e 	strh.w	r8, [sp, #30]
 808c088:	f8ad 8020 	strh.w	r8, [sp, #32]
 808c08c:	f7f9 ff98 	bl	8085fc0 <siscanf>
 808c090:	4540      	cmp	r0, r8
 808c092:	f340 80fd 	ble.w	808c290 <_tzset_unlocked_r+0x2c8>
 808c096:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808c09a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808c09e:	213c      	movs	r1, #60	; 0x3c
 808c0a0:	fb01 3302 	mla	r3, r1, r2, r3
 808c0a4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808c0a8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808c0ac:	fb01 3302 	mla	r3, r1, r2, r3
 808c0b0:	435d      	muls	r5, r3
 808c0b2:	4b7f      	ldr	r3, [pc, #508]	; (808c2b0 <_tzset_unlocked_r+0x2e8>)
 808c0b4:	6225      	str	r5, [r4, #32]
 808c0b6:	4d7d      	ldr	r5, [pc, #500]	; (808c2ac <_tzset_unlocked_r+0x2e4>)
 808c0b8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808c2c4 <_tzset_unlocked_r+0x2fc>
 808c0bc:	602b      	str	r3, [r5, #0]
 808c0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c0c0:	464a      	mov	r2, r9
 808c0c2:	441f      	add	r7, r3
 808c0c4:	497b      	ldr	r1, [pc, #492]	; (808c2b4 <_tzset_unlocked_r+0x2ec>)
 808c0c6:	4633      	mov	r3, r6
 808c0c8:	4638      	mov	r0, r7
 808c0ca:	f7f9 ff79 	bl	8085fc0 <siscanf>
 808c0ce:	4540      	cmp	r0, r8
 808c0d0:	dc08      	bgt.n	808c0e4 <_tzset_unlocked_r+0x11c>
 808c0d2:	682b      	ldr	r3, [r5, #0]
 808c0d4:	6a22      	ldr	r2, [r4, #32]
 808c0d6:	606b      	str	r3, [r5, #4]
 808c0d8:	4b71      	ldr	r3, [pc, #452]	; (808c2a0 <_tzset_unlocked_r+0x2d8>)
 808c0da:	601a      	str	r2, [r3, #0]
 808c0dc:	4b72      	ldr	r3, [pc, #456]	; (808c2a8 <_tzset_unlocked_r+0x2e0>)
 808c0de:	f8c3 8000 	str.w	r8, [r3]
 808c0e2:	e0d5      	b.n	808c290 <_tzset_unlocked_r+0x2c8>
 808c0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c0e6:	f8c5 9004 	str.w	r9, [r5, #4]
 808c0ea:	18fd      	adds	r5, r7, r3
 808c0ec:	5cfb      	ldrb	r3, [r7, r3]
 808c0ee:	2b2d      	cmp	r3, #45	; 0x2d
 808c0f0:	d103      	bne.n	808c0fa <_tzset_unlocked_r+0x132>
 808c0f2:	3501      	adds	r5, #1
 808c0f4:	f04f 37ff 	mov.w	r7, #4294967295
 808c0f8:	e003      	b.n	808c102 <_tzset_unlocked_r+0x13a>
 808c0fa:	2b2b      	cmp	r3, #43	; 0x2b
 808c0fc:	bf08      	it	eq
 808c0fe:	3501      	addeq	r5, #1
 808c100:	2701      	movs	r7, #1
 808c102:	2300      	movs	r3, #0
 808c104:	f8ad 301c 	strh.w	r3, [sp, #28]
 808c108:	f8ad 301e 	strh.w	r3, [sp, #30]
 808c10c:	f8ad 3020 	strh.w	r3, [sp, #32]
 808c110:	930a      	str	r3, [sp, #40]	; 0x28
 808c112:	9603      	str	r6, [sp, #12]
 808c114:	f8cd a008 	str.w	sl, [sp, #8]
 808c118:	9601      	str	r6, [sp, #4]
 808c11a:	f8cd b000 	str.w	fp, [sp]
 808c11e:	4633      	mov	r3, r6
 808c120:	aa07      	add	r2, sp, #28
 808c122:	4965      	ldr	r1, [pc, #404]	; (808c2b8 <_tzset_unlocked_r+0x2f0>)
 808c124:	4628      	mov	r0, r5
 808c126:	f7f9 ff4b 	bl	8085fc0 <siscanf>
 808c12a:	2800      	cmp	r0, #0
 808c12c:	dc04      	bgt.n	808c138 <_tzset_unlocked_r+0x170>
 808c12e:	6a23      	ldr	r3, [r4, #32]
 808c130:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808c134:	63e3      	str	r3, [r4, #60]	; 0x3c
 808c136:	e00e      	b.n	808c156 <_tzset_unlocked_r+0x18e>
 808c138:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808c13c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808c140:	213c      	movs	r1, #60	; 0x3c
 808c142:	fb01 3302 	mla	r3, r1, r2, r3
 808c146:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808c14a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808c14e:	fb01 3302 	mla	r3, r1, r2, r3
 808c152:	435f      	muls	r7, r3
 808c154:	63e7      	str	r7, [r4, #60]	; 0x3c
 808c156:	4627      	mov	r7, r4
 808c158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c15a:	f04f 0900 	mov.w	r9, #0
 808c15e:	441d      	add	r5, r3
 808c160:	782b      	ldrb	r3, [r5, #0]
 808c162:	2b2c      	cmp	r3, #44	; 0x2c
 808c164:	bf08      	it	eq
 808c166:	3501      	addeq	r5, #1
 808c168:	f895 8000 	ldrb.w	r8, [r5]
 808c16c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808c170:	d126      	bne.n	808c1c0 <_tzset_unlocked_r+0x1f8>
 808c172:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808c176:	9302      	str	r3, [sp, #8]
 808c178:	ab09      	add	r3, sp, #36	; 0x24
 808c17a:	9300      	str	r3, [sp, #0]
 808c17c:	9603      	str	r6, [sp, #12]
 808c17e:	9601      	str	r6, [sp, #4]
 808c180:	4633      	mov	r3, r6
 808c182:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808c186:	494d      	ldr	r1, [pc, #308]	; (808c2bc <_tzset_unlocked_r+0x2f4>)
 808c188:	4628      	mov	r0, r5
 808c18a:	f7f9 ff19 	bl	8085fc0 <siscanf>
 808c18e:	2803      	cmp	r0, #3
 808c190:	d17e      	bne.n	808c290 <_tzset_unlocked_r+0x2c8>
 808c192:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808c196:	1e4b      	subs	r3, r1, #1
 808c198:	2b0b      	cmp	r3, #11
 808c19a:	d879      	bhi.n	808c290 <_tzset_unlocked_r+0x2c8>
 808c19c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808c1a0:	1e53      	subs	r3, r2, #1
 808c1a2:	2b04      	cmp	r3, #4
 808c1a4:	d874      	bhi.n	808c290 <_tzset_unlocked_r+0x2c8>
 808c1a6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808c1aa:	2b06      	cmp	r3, #6
 808c1ac:	d870      	bhi.n	808c290 <_tzset_unlocked_r+0x2c8>
 808c1ae:	f887 8008 	strb.w	r8, [r7, #8]
 808c1b2:	60f9      	str	r1, [r7, #12]
 808c1b4:	613a      	str	r2, [r7, #16]
 808c1b6:	617b      	str	r3, [r7, #20]
 808c1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c1ba:	eb05 0803 	add.w	r8, r5, r3
 808c1be:	e02a      	b.n	808c216 <_tzset_unlocked_r+0x24e>
 808c1c0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808c1c4:	bf06      	itte	eq
 808c1c6:	4643      	moveq	r3, r8
 808c1c8:	3501      	addeq	r5, #1
 808c1ca:	2344      	movne	r3, #68	; 0x44
 808c1cc:	220a      	movs	r2, #10
 808c1ce:	a90b      	add	r1, sp, #44	; 0x2c
 808c1d0:	4628      	mov	r0, r5
 808c1d2:	9305      	str	r3, [sp, #20]
 808c1d4:	f7ff fe2e 	bl	808be34 <strtoul>
 808c1d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808c1dc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808c1e0:	4545      	cmp	r5, r8
 808c1e2:	9b05      	ldr	r3, [sp, #20]
 808c1e4:	d114      	bne.n	808c210 <_tzset_unlocked_r+0x248>
 808c1e6:	234d      	movs	r3, #77	; 0x4d
 808c1e8:	f1b9 0f00 	cmp.w	r9, #0
 808c1ec:	d107      	bne.n	808c1fe <_tzset_unlocked_r+0x236>
 808c1ee:	7223      	strb	r3, [r4, #8]
 808c1f0:	2303      	movs	r3, #3
 808c1f2:	60e3      	str	r3, [r4, #12]
 808c1f4:	2302      	movs	r3, #2
 808c1f6:	6123      	str	r3, [r4, #16]
 808c1f8:	f8c4 9014 	str.w	r9, [r4, #20]
 808c1fc:	e00b      	b.n	808c216 <_tzset_unlocked_r+0x24e>
 808c1fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808c202:	230b      	movs	r3, #11
 808c204:	62a3      	str	r3, [r4, #40]	; 0x28
 808c206:	2301      	movs	r3, #1
 808c208:	62e3      	str	r3, [r4, #44]	; 0x2c
 808c20a:	2300      	movs	r3, #0
 808c20c:	6323      	str	r3, [r4, #48]	; 0x30
 808c20e:	e002      	b.n	808c216 <_tzset_unlocked_r+0x24e>
 808c210:	b280      	uxth	r0, r0
 808c212:	723b      	strb	r3, [r7, #8]
 808c214:	6178      	str	r0, [r7, #20]
 808c216:	2302      	movs	r3, #2
 808c218:	f8ad 301c 	strh.w	r3, [sp, #28]
 808c21c:	2300      	movs	r3, #0
 808c21e:	f8ad 301e 	strh.w	r3, [sp, #30]
 808c222:	f8ad 3020 	strh.w	r3, [sp, #32]
 808c226:	930a      	str	r3, [sp, #40]	; 0x28
 808c228:	f898 3000 	ldrb.w	r3, [r8]
 808c22c:	2b2f      	cmp	r3, #47	; 0x2f
 808c22e:	d10b      	bne.n	808c248 <_tzset_unlocked_r+0x280>
 808c230:	9603      	str	r6, [sp, #12]
 808c232:	f8cd a008 	str.w	sl, [sp, #8]
 808c236:	9601      	str	r6, [sp, #4]
 808c238:	f8cd b000 	str.w	fp, [sp]
 808c23c:	4633      	mov	r3, r6
 808c23e:	aa07      	add	r2, sp, #28
 808c240:	491f      	ldr	r1, [pc, #124]	; (808c2c0 <_tzset_unlocked_r+0x2f8>)
 808c242:	4640      	mov	r0, r8
 808c244:	f7f9 febc 	bl	8085fc0 <siscanf>
 808c248:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808c24c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808c250:	213c      	movs	r1, #60	; 0x3c
 808c252:	fb01 3302 	mla	r3, r1, r2, r3
 808c256:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808c25a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808c25e:	fb01 3302 	mla	r3, r1, r2, r3
 808c262:	61bb      	str	r3, [r7, #24]
 808c264:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808c266:	f109 0901 	add.w	r9, r9, #1
 808c26a:	f1b9 0f02 	cmp.w	r9, #2
 808c26e:	4445      	add	r5, r8
 808c270:	f107 071c 	add.w	r7, r7, #28
 808c274:	f47f af74 	bne.w	808c160 <_tzset_unlocked_r+0x198>
 808c278:	6860      	ldr	r0, [r4, #4]
 808c27a:	f7ff fdf5 	bl	808be68 <__tzcalc_limits>
 808c27e:	6a22      	ldr	r2, [r4, #32]
 808c280:	4b07      	ldr	r3, [pc, #28]	; (808c2a0 <_tzset_unlocked_r+0x2d8>)
 808c282:	601a      	str	r2, [r3, #0]
 808c284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808c286:	1a9b      	subs	r3, r3, r2
 808c288:	4a07      	ldr	r2, [pc, #28]	; (808c2a8 <_tzset_unlocked_r+0x2e0>)
 808c28a:	bf18      	it	ne
 808c28c:	2301      	movne	r3, #1
 808c28e:	6013      	str	r3, [r2, #0]
 808c290:	b00d      	add	sp, #52	; 0x34
 808c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c296:	bf00      	nop
 808c298:	0808e86c 	.word	0x0808e86c
 808c29c:	200010c4 	.word	0x200010c4
 808c2a0:	200010cc 	.word	0x200010cc
 808c2a4:	0808e86f 	.word	0x0808e86f
 808c2a8:	200010c8 	.word	0x200010c8
 808c2ac:	200000f4 	.word	0x200000f4
 808c2b0:	200010b7 	.word	0x200010b7
 808c2b4:	0808e873 	.word	0x0808e873
 808c2b8:	0808e896 	.word	0x0808e896
 808c2bc:	0808e882 	.word	0x0808e882
 808c2c0:	0808e895 	.word	0x0808e895
 808c2c4:	200010ac 	.word	0x200010ac

0808c2c8 <abs>:
 808c2c8:	2800      	cmp	r0, #0
 808c2ca:	bfb8      	it	lt
 808c2cc:	4240      	neglt	r0, r0
 808c2ce:	4770      	bx	lr

0808c2d0 <rshift>:
 808c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c2d2:	6906      	ldr	r6, [r0, #16]
 808c2d4:	114b      	asrs	r3, r1, #5
 808c2d6:	42b3      	cmp	r3, r6
 808c2d8:	f100 0514 	add.w	r5, r0, #20
 808c2dc:	da27      	bge.n	808c32e <rshift+0x5e>
 808c2de:	f011 011f 	ands.w	r1, r1, #31
 808c2e2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808c2e6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808c2ea:	d101      	bne.n	808c2f0 <rshift+0x20>
 808c2ec:	4629      	mov	r1, r5
 808c2ee:	e016      	b.n	808c31e <rshift+0x4e>
 808c2f0:	1d14      	adds	r4, r2, #4
 808c2f2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808c2f6:	462b      	mov	r3, r5
 808c2f8:	f1c1 0e20 	rsb	lr, r1, #32
 808c2fc:	40ca      	lsrs	r2, r1
 808c2fe:	42b4      	cmp	r4, r6
 808c300:	d209      	bcs.n	808c316 <rshift+0x46>
 808c302:	6827      	ldr	r7, [r4, #0]
 808c304:	fa07 f70e 	lsl.w	r7, r7, lr
 808c308:	433a      	orrs	r2, r7
 808c30a:	f843 2b04 	str.w	r2, [r3], #4
 808c30e:	f854 2b04 	ldr.w	r2, [r4], #4
 808c312:	40ca      	lsrs	r2, r1
 808c314:	e7f3      	b.n	808c2fe <rshift+0x2e>
 808c316:	601a      	str	r2, [r3, #0]
 808c318:	b152      	cbz	r2, 808c330 <rshift+0x60>
 808c31a:	3304      	adds	r3, #4
 808c31c:	e008      	b.n	808c330 <rshift+0x60>
 808c31e:	42b2      	cmp	r2, r6
 808c320:	460b      	mov	r3, r1
 808c322:	d205      	bcs.n	808c330 <rshift+0x60>
 808c324:	f852 3b04 	ldr.w	r3, [r2], #4
 808c328:	f841 3b04 	str.w	r3, [r1], #4
 808c32c:	e7f7      	b.n	808c31e <rshift+0x4e>
 808c32e:	462b      	mov	r3, r5
 808c330:	1b5b      	subs	r3, r3, r5
 808c332:	109b      	asrs	r3, r3, #2
 808c334:	6103      	str	r3, [r0, #16]
 808c336:	b903      	cbnz	r3, 808c33a <rshift+0x6a>
 808c338:	6143      	str	r3, [r0, #20]
 808c33a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c33c <__hexdig_fun>:
 808c33c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808c340:	2b09      	cmp	r3, #9
 808c342:	d801      	bhi.n	808c348 <__hexdig_fun+0xc>
 808c344:	3820      	subs	r0, #32
 808c346:	e00a      	b.n	808c35e <__hexdig_fun+0x22>
 808c348:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808c34c:	2b05      	cmp	r3, #5
 808c34e:	d801      	bhi.n	808c354 <__hexdig_fun+0x18>
 808c350:	3847      	subs	r0, #71	; 0x47
 808c352:	e004      	b.n	808c35e <__hexdig_fun+0x22>
 808c354:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808c358:	2b05      	cmp	r3, #5
 808c35a:	d802      	bhi.n	808c362 <__hexdig_fun+0x26>
 808c35c:	3827      	subs	r0, #39	; 0x27
 808c35e:	b2c0      	uxtb	r0, r0
 808c360:	4770      	bx	lr
 808c362:	2000      	movs	r0, #0
 808c364:	4770      	bx	lr

0808c366 <__gethex>:
 808c366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c36a:	b08b      	sub	sp, #44	; 0x2c
 808c36c:	468a      	mov	sl, r1
 808c36e:	4690      	mov	r8, r2
 808c370:	9306      	str	r3, [sp, #24]
 808c372:	9002      	str	r0, [sp, #8]
 808c374:	f7fe f8ce 	bl	808a514 <_localeconv_r>
 808c378:	6803      	ldr	r3, [r0, #0]
 808c37a:	f04f 0b00 	mov.w	fp, #0
 808c37e:	4618      	mov	r0, r3
 808c380:	9303      	str	r3, [sp, #12]
 808c382:	f7fe fe65 	bl	808b050 <strlen>
 808c386:	9b03      	ldr	r3, [sp, #12]
 808c388:	9001      	str	r0, [sp, #4]
 808c38a:	4403      	add	r3, r0
 808c38c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808c390:	9307      	str	r3, [sp, #28]
 808c392:	f8da 3000 	ldr.w	r3, [sl]
 808c396:	3302      	adds	r3, #2
 808c398:	461f      	mov	r7, r3
 808c39a:	f813 0b01 	ldrb.w	r0, [r3], #1
 808c39e:	2830      	cmp	r0, #48	; 0x30
 808c3a0:	d102      	bne.n	808c3a8 <__gethex+0x42>
 808c3a2:	f10b 0b01 	add.w	fp, fp, #1
 808c3a6:	e7f7      	b.n	808c398 <__gethex+0x32>
 808c3a8:	f7ff ffc8 	bl	808c33c <__hexdig_fun>
 808c3ac:	4604      	mov	r4, r0
 808c3ae:	b9e0      	cbnz	r0, 808c3ea <__gethex+0x84>
 808c3b0:	9a01      	ldr	r2, [sp, #4]
 808c3b2:	9903      	ldr	r1, [sp, #12]
 808c3b4:	4638      	mov	r0, r7
 808c3b6:	f7fe fe53 	bl	808b060 <strncmp>
 808c3ba:	2800      	cmp	r0, #0
 808c3bc:	d134      	bne.n	808c428 <__gethex+0xc2>
 808c3be:	9b01      	ldr	r3, [sp, #4]
 808c3c0:	5cf8      	ldrb	r0, [r7, r3]
 808c3c2:	18fe      	adds	r6, r7, r3
 808c3c4:	f7ff ffba 	bl	808c33c <__hexdig_fun>
 808c3c8:	b380      	cbz	r0, 808c42c <__gethex+0xc6>
 808c3ca:	4633      	mov	r3, r6
 808c3cc:	7818      	ldrb	r0, [r3, #0]
 808c3ce:	461f      	mov	r7, r3
 808c3d0:	2830      	cmp	r0, #48	; 0x30
 808c3d2:	f103 0301 	add.w	r3, r3, #1
 808c3d6:	d0f9      	beq.n	808c3cc <__gethex+0x66>
 808c3d8:	f7ff ffb0 	bl	808c33c <__hexdig_fun>
 808c3dc:	fab0 f580 	clz	r5, r0
 808c3e0:	4634      	mov	r4, r6
 808c3e2:	096d      	lsrs	r5, r5, #5
 808c3e4:	f04f 0b01 	mov.w	fp, #1
 808c3e8:	e001      	b.n	808c3ee <__gethex+0x88>
 808c3ea:	2500      	movs	r5, #0
 808c3ec:	462c      	mov	r4, r5
 808c3ee:	463a      	mov	r2, r7
 808c3f0:	4616      	mov	r6, r2
 808c3f2:	7830      	ldrb	r0, [r6, #0]
 808c3f4:	3201      	adds	r2, #1
 808c3f6:	f7ff ffa1 	bl	808c33c <__hexdig_fun>
 808c3fa:	2800      	cmp	r0, #0
 808c3fc:	d1f8      	bne.n	808c3f0 <__gethex+0x8a>
 808c3fe:	9a01      	ldr	r2, [sp, #4]
 808c400:	9903      	ldr	r1, [sp, #12]
 808c402:	4630      	mov	r0, r6
 808c404:	f7fe fe2c 	bl	808b060 <strncmp>
 808c408:	b950      	cbnz	r0, 808c420 <__gethex+0xba>
 808c40a:	b954      	cbnz	r4, 808c422 <__gethex+0xbc>
 808c40c:	9b01      	ldr	r3, [sp, #4]
 808c40e:	18f4      	adds	r4, r6, r3
 808c410:	4622      	mov	r2, r4
 808c412:	4616      	mov	r6, r2
 808c414:	7830      	ldrb	r0, [r6, #0]
 808c416:	3201      	adds	r2, #1
 808c418:	f7ff ff90 	bl	808c33c <__hexdig_fun>
 808c41c:	2800      	cmp	r0, #0
 808c41e:	d1f8      	bne.n	808c412 <__gethex+0xac>
 808c420:	b134      	cbz	r4, 808c430 <__gethex+0xca>
 808c422:	1ba4      	subs	r4, r4, r6
 808c424:	00a4      	lsls	r4, r4, #2
 808c426:	e003      	b.n	808c430 <__gethex+0xca>
 808c428:	463e      	mov	r6, r7
 808c42a:	e000      	b.n	808c42e <__gethex+0xc8>
 808c42c:	4604      	mov	r4, r0
 808c42e:	2501      	movs	r5, #1
 808c430:	7833      	ldrb	r3, [r6, #0]
 808c432:	2b50      	cmp	r3, #80	; 0x50
 808c434:	d001      	beq.n	808c43a <__gethex+0xd4>
 808c436:	2b70      	cmp	r3, #112	; 0x70
 808c438:	d12a      	bne.n	808c490 <__gethex+0x12a>
 808c43a:	7873      	ldrb	r3, [r6, #1]
 808c43c:	2b2b      	cmp	r3, #43	; 0x2b
 808c43e:	d008      	beq.n	808c452 <__gethex+0xec>
 808c440:	2b2d      	cmp	r3, #45	; 0x2d
 808c442:	d003      	beq.n	808c44c <__gethex+0xe6>
 808c444:	1c71      	adds	r1, r6, #1
 808c446:	f04f 0900 	mov.w	r9, #0
 808c44a:	e005      	b.n	808c458 <__gethex+0xf2>
 808c44c:	f04f 0901 	mov.w	r9, #1
 808c450:	e001      	b.n	808c456 <__gethex+0xf0>
 808c452:	f04f 0900 	mov.w	r9, #0
 808c456:	1cb1      	adds	r1, r6, #2
 808c458:	7808      	ldrb	r0, [r1, #0]
 808c45a:	f7ff ff6f 	bl	808c33c <__hexdig_fun>
 808c45e:	1e43      	subs	r3, r0, #1
 808c460:	b2db      	uxtb	r3, r3
 808c462:	2b18      	cmp	r3, #24
 808c464:	d814      	bhi.n	808c490 <__gethex+0x12a>
 808c466:	f1a0 0210 	sub.w	r2, r0, #16
 808c46a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808c46e:	f7ff ff65 	bl	808c33c <__hexdig_fun>
 808c472:	1e43      	subs	r3, r0, #1
 808c474:	b2db      	uxtb	r3, r3
 808c476:	2b18      	cmp	r3, #24
 808c478:	d804      	bhi.n	808c484 <__gethex+0x11e>
 808c47a:	230a      	movs	r3, #10
 808c47c:	fb03 0202 	mla	r2, r3, r2, r0
 808c480:	3a10      	subs	r2, #16
 808c482:	e7f2      	b.n	808c46a <__gethex+0x104>
 808c484:	f1b9 0f00 	cmp.w	r9, #0
 808c488:	d000      	beq.n	808c48c <__gethex+0x126>
 808c48a:	4252      	negs	r2, r2
 808c48c:	4414      	add	r4, r2
 808c48e:	e000      	b.n	808c492 <__gethex+0x12c>
 808c490:	4631      	mov	r1, r6
 808c492:	f8ca 1000 	str.w	r1, [sl]
 808c496:	b12d      	cbz	r5, 808c4a4 <__gethex+0x13e>
 808c498:	f1bb 0f00 	cmp.w	fp, #0
 808c49c:	bf14      	ite	ne
 808c49e:	2000      	movne	r0, #0
 808c4a0:	2006      	moveq	r0, #6
 808c4a2:	e17c      	b.n	808c79e <__gethex+0x438>
 808c4a4:	4629      	mov	r1, r5
 808c4a6:	1bf3      	subs	r3, r6, r7
 808c4a8:	3b01      	subs	r3, #1
 808c4aa:	2b07      	cmp	r3, #7
 808c4ac:	dd02      	ble.n	808c4b4 <__gethex+0x14e>
 808c4ae:	3101      	adds	r1, #1
 808c4b0:	105b      	asrs	r3, r3, #1
 808c4b2:	e7fa      	b.n	808c4aa <__gethex+0x144>
 808c4b4:	9802      	ldr	r0, [sp, #8]
 808c4b6:	f000 fb0b 	bl	808cad0 <_Balloc>
 808c4ba:	f04f 0900 	mov.w	r9, #0
 808c4be:	4605      	mov	r5, r0
 808c4c0:	46cb      	mov	fp, r9
 808c4c2:	9b01      	ldr	r3, [sp, #4]
 808c4c4:	f100 0a14 	add.w	sl, r0, #20
 808c4c8:	f1c3 0301 	rsb	r3, r3, #1
 808c4cc:	f8cd a010 	str.w	sl, [sp, #16]
 808c4d0:	9308      	str	r3, [sp, #32]
 808c4d2:	42b7      	cmp	r7, r6
 808c4d4:	d22f      	bcs.n	808c536 <__gethex+0x1d0>
 808c4d6:	1e73      	subs	r3, r6, #1
 808c4d8:	9305      	str	r3, [sp, #20]
 808c4da:	9a07      	ldr	r2, [sp, #28]
 808c4dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808c4e0:	4293      	cmp	r3, r2
 808c4e2:	d00b      	beq.n	808c4fc <__gethex+0x196>
 808c4e4:	f1bb 0f20 	cmp.w	fp, #32
 808c4e8:	d116      	bne.n	808c518 <__gethex+0x1b2>
 808c4ea:	9b04      	ldr	r3, [sp, #16]
 808c4ec:	f8c3 9000 	str.w	r9, [r3]
 808c4f0:	3304      	adds	r3, #4
 808c4f2:	f04f 0900 	mov.w	r9, #0
 808c4f6:	9304      	str	r3, [sp, #16]
 808c4f8:	46cb      	mov	fp, r9
 808c4fa:	e00d      	b.n	808c518 <__gethex+0x1b2>
 808c4fc:	9b05      	ldr	r3, [sp, #20]
 808c4fe:	9a08      	ldr	r2, [sp, #32]
 808c500:	4413      	add	r3, r2
 808c502:	429f      	cmp	r7, r3
 808c504:	d8ee      	bhi.n	808c4e4 <__gethex+0x17e>
 808c506:	4618      	mov	r0, r3
 808c508:	9a01      	ldr	r2, [sp, #4]
 808c50a:	9903      	ldr	r1, [sp, #12]
 808c50c:	9309      	str	r3, [sp, #36]	; 0x24
 808c50e:	f7fe fda7 	bl	808b060 <strncmp>
 808c512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c514:	b168      	cbz	r0, 808c532 <__gethex+0x1cc>
 808c516:	e7e5      	b.n	808c4e4 <__gethex+0x17e>
 808c518:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808c51c:	f7ff ff0e 	bl	808c33c <__hexdig_fun>
 808c520:	f000 000f 	and.w	r0, r0, #15
 808c524:	fa00 f00b 	lsl.w	r0, r0, fp
 808c528:	9b05      	ldr	r3, [sp, #20]
 808c52a:	ea49 0900 	orr.w	r9, r9, r0
 808c52e:	f10b 0b04 	add.w	fp, fp, #4
 808c532:	461e      	mov	r6, r3
 808c534:	e7cd      	b.n	808c4d2 <__gethex+0x16c>
 808c536:	9804      	ldr	r0, [sp, #16]
 808c538:	f840 9b04 	str.w	r9, [r0], #4
 808c53c:	ebca 0000 	rsb	r0, sl, r0
 808c540:	1080      	asrs	r0, r0, #2
 808c542:	6128      	str	r0, [r5, #16]
 808c544:	0147      	lsls	r7, r0, #5
 808c546:	4648      	mov	r0, r9
 808c548:	f000 fb87 	bl	808cc5a <__hi0bits>
 808c54c:	f8d8 6000 	ldr.w	r6, [r8]
 808c550:	1a38      	subs	r0, r7, r0
 808c552:	42b0      	cmp	r0, r6
 808c554:	dd26      	ble.n	808c5a4 <__gethex+0x23e>
 808c556:	1b87      	subs	r7, r0, r6
 808c558:	4639      	mov	r1, r7
 808c55a:	4628      	mov	r0, r5
 808c55c:	f000 fe7f 	bl	808d25e <__any_on>
 808c560:	b1c8      	cbz	r0, 808c596 <__gethex+0x230>
 808c562:	1e7b      	subs	r3, r7, #1
 808c564:	1159      	asrs	r1, r3, #5
 808c566:	f003 021f 	and.w	r2, r3, #31
 808c56a:	f04f 0901 	mov.w	r9, #1
 808c56e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808c572:	fa09 f202 	lsl.w	r2, r9, r2
 808c576:	420a      	tst	r2, r1
 808c578:	d00e      	beq.n	808c598 <__gethex+0x232>
 808c57a:	454b      	cmp	r3, r9
 808c57c:	dc02      	bgt.n	808c584 <__gethex+0x21e>
 808c57e:	f04f 0902 	mov.w	r9, #2
 808c582:	e009      	b.n	808c598 <__gethex+0x232>
 808c584:	1eb9      	subs	r1, r7, #2
 808c586:	4628      	mov	r0, r5
 808c588:	f000 fe69 	bl	808d25e <__any_on>
 808c58c:	2800      	cmp	r0, #0
 808c58e:	d0f6      	beq.n	808c57e <__gethex+0x218>
 808c590:	f04f 0903 	mov.w	r9, #3
 808c594:	e000      	b.n	808c598 <__gethex+0x232>
 808c596:	4681      	mov	r9, r0
 808c598:	4639      	mov	r1, r7
 808c59a:	4628      	mov	r0, r5
 808c59c:	f7ff fe98 	bl	808c2d0 <rshift>
 808c5a0:	443c      	add	r4, r7
 808c5a2:	e00c      	b.n	808c5be <__gethex+0x258>
 808c5a4:	da09      	bge.n	808c5ba <__gethex+0x254>
 808c5a6:	1a37      	subs	r7, r6, r0
 808c5a8:	4629      	mov	r1, r5
 808c5aa:	463a      	mov	r2, r7
 808c5ac:	9802      	ldr	r0, [sp, #8]
 808c5ae:	f000 fc89 	bl	808cec4 <__lshift>
 808c5b2:	4605      	mov	r5, r0
 808c5b4:	1be4      	subs	r4, r4, r7
 808c5b6:	f100 0a14 	add.w	sl, r0, #20
 808c5ba:	f04f 0900 	mov.w	r9, #0
 808c5be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c5c2:	429c      	cmp	r4, r3
 808c5c4:	dd08      	ble.n	808c5d8 <__gethex+0x272>
 808c5c6:	9802      	ldr	r0, [sp, #8]
 808c5c8:	4629      	mov	r1, r5
 808c5ca:	f000 fab6 	bl	808cb3a <_Bfree>
 808c5ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808c5d0:	2300      	movs	r3, #0
 808c5d2:	6013      	str	r3, [r2, #0]
 808c5d4:	20a3      	movs	r0, #163	; 0xa3
 808c5d6:	e0e2      	b.n	808c79e <__gethex+0x438>
 808c5d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808c5dc:	4284      	cmp	r4, r0
 808c5de:	da53      	bge.n	808c688 <__gethex+0x322>
 808c5e0:	1b04      	subs	r4, r0, r4
 808c5e2:	42a6      	cmp	r6, r4
 808c5e4:	dc2e      	bgt.n	808c644 <__gethex+0x2de>
 808c5e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808c5ea:	2b02      	cmp	r3, #2
 808c5ec:	d01a      	beq.n	808c624 <__gethex+0x2be>
 808c5ee:	2b03      	cmp	r3, #3
 808c5f0:	d01c      	beq.n	808c62c <__gethex+0x2c6>
 808c5f2:	2b01      	cmp	r3, #1
 808c5f4:	d11d      	bne.n	808c632 <__gethex+0x2cc>
 808c5f6:	42a6      	cmp	r6, r4
 808c5f8:	d11b      	bne.n	808c632 <__gethex+0x2cc>
 808c5fa:	2e01      	cmp	r6, #1
 808c5fc:	dc0b      	bgt.n	808c616 <__gethex+0x2b0>
 808c5fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808c602:	9a06      	ldr	r2, [sp, #24]
 808c604:	2062      	movs	r0, #98	; 0x62
 808c606:	6013      	str	r3, [r2, #0]
 808c608:	2301      	movs	r3, #1
 808c60a:	612b      	str	r3, [r5, #16]
 808c60c:	f8ca 3000 	str.w	r3, [sl]
 808c610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c612:	601d      	str	r5, [r3, #0]
 808c614:	e0c3      	b.n	808c79e <__gethex+0x438>
 808c616:	1e71      	subs	r1, r6, #1
 808c618:	4628      	mov	r0, r5
 808c61a:	f000 fe20 	bl	808d25e <__any_on>
 808c61e:	2800      	cmp	r0, #0
 808c620:	d1ed      	bne.n	808c5fe <__gethex+0x298>
 808c622:	e006      	b.n	808c632 <__gethex+0x2cc>
 808c624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c626:	2b00      	cmp	r3, #0
 808c628:	d0e9      	beq.n	808c5fe <__gethex+0x298>
 808c62a:	e002      	b.n	808c632 <__gethex+0x2cc>
 808c62c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c62e:	2b00      	cmp	r3, #0
 808c630:	d1e5      	bne.n	808c5fe <__gethex+0x298>
 808c632:	9802      	ldr	r0, [sp, #8]
 808c634:	4629      	mov	r1, r5
 808c636:	f000 fa80 	bl	808cb3a <_Bfree>
 808c63a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808c63c:	2300      	movs	r3, #0
 808c63e:	6013      	str	r3, [r2, #0]
 808c640:	2050      	movs	r0, #80	; 0x50
 808c642:	e0ac      	b.n	808c79e <__gethex+0x438>
 808c644:	1e67      	subs	r7, r4, #1
 808c646:	f1b9 0f00 	cmp.w	r9, #0
 808c64a:	d106      	bne.n	808c65a <__gethex+0x2f4>
 808c64c:	b13f      	cbz	r7, 808c65e <__gethex+0x2f8>
 808c64e:	4639      	mov	r1, r7
 808c650:	4628      	mov	r0, r5
 808c652:	f000 fe04 	bl	808d25e <__any_on>
 808c656:	4681      	mov	r9, r0
 808c658:	e001      	b.n	808c65e <__gethex+0x2f8>
 808c65a:	f04f 0901 	mov.w	r9, #1
 808c65e:	117a      	asrs	r2, r7, #5
 808c660:	2301      	movs	r3, #1
 808c662:	f007 071f 	and.w	r7, r7, #31
 808c666:	fa03 f707 	lsl.w	r7, r3, r7
 808c66a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808c66e:	4621      	mov	r1, r4
 808c670:	421f      	tst	r7, r3
 808c672:	4628      	mov	r0, r5
 808c674:	bf18      	it	ne
 808c676:	f049 0902 	orrne.w	r9, r9, #2
 808c67a:	1b36      	subs	r6, r6, r4
 808c67c:	f7ff fe28 	bl	808c2d0 <rshift>
 808c680:	2702      	movs	r7, #2
 808c682:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808c686:	e000      	b.n	808c68a <__gethex+0x324>
 808c688:	2701      	movs	r7, #1
 808c68a:	f1b9 0f00 	cmp.w	r9, #0
 808c68e:	f000 8081 	beq.w	808c794 <__gethex+0x42e>
 808c692:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808c696:	2b02      	cmp	r3, #2
 808c698:	d00e      	beq.n	808c6b8 <__gethex+0x352>
 808c69a:	2b03      	cmp	r3, #3
 808c69c:	d010      	beq.n	808c6c0 <__gethex+0x35a>
 808c69e:	2b01      	cmp	r3, #1
 808c6a0:	d176      	bne.n	808c790 <__gethex+0x42a>
 808c6a2:	f019 0f02 	tst.w	r9, #2
 808c6a6:	d073      	beq.n	808c790 <__gethex+0x42a>
 808c6a8:	f8da 0000 	ldr.w	r0, [sl]
 808c6ac:	ea49 0900 	orr.w	r9, r9, r0
 808c6b0:	f019 0f01 	tst.w	r9, #1
 808c6b4:	d107      	bne.n	808c6c6 <__gethex+0x360>
 808c6b6:	e06b      	b.n	808c790 <__gethex+0x42a>
 808c6b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c6ba:	f1c3 0301 	rsb	r3, r3, #1
 808c6be:	9315      	str	r3, [sp, #84]	; 0x54
 808c6c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c6c2:	2b00      	cmp	r3, #0
 808c6c4:	d064      	beq.n	808c790 <__gethex+0x42a>
 808c6c6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808c6ca:	f105 0314 	add.w	r3, r5, #20
 808c6ce:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808c6d2:	eb03 0109 	add.w	r1, r3, r9
 808c6d6:	2000      	movs	r0, #0
 808c6d8:	681a      	ldr	r2, [r3, #0]
 808c6da:	f1b2 3fff 	cmp.w	r2, #4294967295
 808c6de:	d002      	beq.n	808c6e6 <__gethex+0x380>
 808c6e0:	3201      	adds	r2, #1
 808c6e2:	601a      	str	r2, [r3, #0]
 808c6e4:	e020      	b.n	808c728 <__gethex+0x3c2>
 808c6e6:	f843 0b04 	str.w	r0, [r3], #4
 808c6ea:	4299      	cmp	r1, r3
 808c6ec:	d8f4      	bhi.n	808c6d8 <__gethex+0x372>
 808c6ee:	68ab      	ldr	r3, [r5, #8]
 808c6f0:	459a      	cmp	sl, r3
 808c6f2:	db12      	blt.n	808c71a <__gethex+0x3b4>
 808c6f4:	6869      	ldr	r1, [r5, #4]
 808c6f6:	9802      	ldr	r0, [sp, #8]
 808c6f8:	3101      	adds	r1, #1
 808c6fa:	f000 f9e9 	bl	808cad0 <_Balloc>
 808c6fe:	4683      	mov	fp, r0
 808c700:	692a      	ldr	r2, [r5, #16]
 808c702:	f105 010c 	add.w	r1, r5, #12
 808c706:	3202      	adds	r2, #2
 808c708:	0092      	lsls	r2, r2, #2
 808c70a:	300c      	adds	r0, #12
 808c70c:	f7fd ff15 	bl	808a53a <memcpy>
 808c710:	4629      	mov	r1, r5
 808c712:	9802      	ldr	r0, [sp, #8]
 808c714:	f000 fa11 	bl	808cb3a <_Bfree>
 808c718:	465d      	mov	r5, fp
 808c71a:	692b      	ldr	r3, [r5, #16]
 808c71c:	1c5a      	adds	r2, r3, #1
 808c71e:	612a      	str	r2, [r5, #16]
 808c720:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808c724:	2201      	movs	r2, #1
 808c726:	615a      	str	r2, [r3, #20]
 808c728:	2f02      	cmp	r7, #2
 808c72a:	f105 0214 	add.w	r2, r5, #20
 808c72e:	d111      	bne.n	808c754 <__gethex+0x3ee>
 808c730:	f8d8 3000 	ldr.w	r3, [r8]
 808c734:	3b01      	subs	r3, #1
 808c736:	429e      	cmp	r6, r3
 808c738:	d127      	bne.n	808c78a <__gethex+0x424>
 808c73a:	1171      	asrs	r1, r6, #5
 808c73c:	2301      	movs	r3, #1
 808c73e:	f006 061f 	and.w	r6, r6, #31
 808c742:	fa03 f606 	lsl.w	r6, r3, r6
 808c746:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808c74a:	421e      	tst	r6, r3
 808c74c:	bf0c      	ite	eq
 808c74e:	2702      	moveq	r7, #2
 808c750:	2701      	movne	r7, #1
 808c752:	e01a      	b.n	808c78a <__gethex+0x424>
 808c754:	692b      	ldr	r3, [r5, #16]
 808c756:	459a      	cmp	sl, r3
 808c758:	da0a      	bge.n	808c770 <__gethex+0x40a>
 808c75a:	2101      	movs	r1, #1
 808c75c:	4628      	mov	r0, r5
 808c75e:	f7ff fdb7 	bl	808c2d0 <rshift>
 808c762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c766:	3401      	adds	r4, #1
 808c768:	429c      	cmp	r4, r3
 808c76a:	f73f af2c 	bgt.w	808c5c6 <__gethex+0x260>
 808c76e:	e00b      	b.n	808c788 <__gethex+0x422>
 808c770:	f016 061f 	ands.w	r6, r6, #31
 808c774:	d008      	beq.n	808c788 <__gethex+0x422>
 808c776:	4491      	add	r9, r2
 808c778:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808c77c:	f000 fa6d 	bl	808cc5a <__hi0bits>
 808c780:	f1c6 0620 	rsb	r6, r6, #32
 808c784:	42b0      	cmp	r0, r6
 808c786:	dbe8      	blt.n	808c75a <__gethex+0x3f4>
 808c788:	2701      	movs	r7, #1
 808c78a:	f047 0720 	orr.w	r7, r7, #32
 808c78e:	e001      	b.n	808c794 <__gethex+0x42e>
 808c790:	f047 0710 	orr.w	r7, r7, #16
 808c794:	4638      	mov	r0, r7
 808c796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c798:	601d      	str	r5, [r3, #0]
 808c79a:	9b06      	ldr	r3, [sp, #24]
 808c79c:	601c      	str	r4, [r3, #0]
 808c79e:	b00b      	add	sp, #44	; 0x2c
 808c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c7a4 <L_shift>:
 808c7a4:	f1c2 0208 	rsb	r2, r2, #8
 808c7a8:	0092      	lsls	r2, r2, #2
 808c7aa:	b570      	push	{r4, r5, r6, lr}
 808c7ac:	f1c2 0620 	rsb	r6, r2, #32
 808c7b0:	6843      	ldr	r3, [r0, #4]
 808c7b2:	6805      	ldr	r5, [r0, #0]
 808c7b4:	fa03 f406 	lsl.w	r4, r3, r6
 808c7b8:	432c      	orrs	r4, r5
 808c7ba:	40d3      	lsrs	r3, r2
 808c7bc:	6004      	str	r4, [r0, #0]
 808c7be:	f840 3f04 	str.w	r3, [r0, #4]!
 808c7c2:	4288      	cmp	r0, r1
 808c7c4:	d3f4      	bcc.n	808c7b0 <L_shift+0xc>
 808c7c6:	bd70      	pop	{r4, r5, r6, pc}

0808c7c8 <__match>:
 808c7c8:	b530      	push	{r4, r5, lr}
 808c7ca:	6803      	ldr	r3, [r0, #0]
 808c7cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 808c7d0:	3301      	adds	r3, #1
 808c7d2:	b14c      	cbz	r4, 808c7e8 <__match+0x20>
 808c7d4:	781a      	ldrb	r2, [r3, #0]
 808c7d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808c7da:	2d19      	cmp	r5, #25
 808c7dc:	bf98      	it	ls
 808c7de:	3220      	addls	r2, #32
 808c7e0:	42a2      	cmp	r2, r4
 808c7e2:	d0f3      	beq.n	808c7cc <__match+0x4>
 808c7e4:	2000      	movs	r0, #0
 808c7e6:	bd30      	pop	{r4, r5, pc}
 808c7e8:	6003      	str	r3, [r0, #0]
 808c7ea:	2001      	movs	r0, #1
 808c7ec:	bd30      	pop	{r4, r5, pc}

0808c7ee <__hexnan>:
 808c7ee:	680b      	ldr	r3, [r1, #0]
 808c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c7f4:	115e      	asrs	r6, r3, #5
 808c7f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808c7fa:	f013 031f 	ands.w	r3, r3, #31
 808c7fe:	bf18      	it	ne
 808c800:	3604      	addne	r6, #4
 808c802:	1f35      	subs	r5, r6, #4
 808c804:	4617      	mov	r7, r2
 808c806:	2200      	movs	r2, #0
 808c808:	4682      	mov	sl, r0
 808c80a:	46a8      	mov	r8, r5
 808c80c:	462c      	mov	r4, r5
 808c80e:	4691      	mov	r9, r2
 808c810:	b085      	sub	sp, #20
 808c812:	f8d0 b000 	ldr.w	fp, [r0]
 808c816:	9301      	str	r3, [sp, #4]
 808c818:	f846 2c04 	str.w	r2, [r6, #-4]
 808c81c:	9200      	str	r2, [sp, #0]
 808c81e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808c822:	2900      	cmp	r1, #0
 808c824:	d03c      	beq.n	808c8a0 <__hexnan+0xb2>
 808c826:	4608      	mov	r0, r1
 808c828:	9203      	str	r2, [sp, #12]
 808c82a:	9102      	str	r1, [sp, #8]
 808c82c:	f7ff fd86 	bl	808c33c <__hexdig_fun>
 808c830:	9a03      	ldr	r2, [sp, #12]
 808c832:	bb00      	cbnz	r0, 808c876 <__hexnan+0x88>
 808c834:	9902      	ldr	r1, [sp, #8]
 808c836:	2920      	cmp	r1, #32
 808c838:	d816      	bhi.n	808c868 <__hexnan+0x7a>
 808c83a:	9b00      	ldr	r3, [sp, #0]
 808c83c:	4599      	cmp	r9, r3
 808c83e:	ddee      	ble.n	808c81e <__hexnan+0x30>
 808c840:	4544      	cmp	r4, r8
 808c842:	d205      	bcs.n	808c850 <__hexnan+0x62>
 808c844:	2a07      	cmp	r2, #7
 808c846:	dc03      	bgt.n	808c850 <__hexnan+0x62>
 808c848:	4641      	mov	r1, r8
 808c84a:	4620      	mov	r0, r4
 808c84c:	f7ff ffaa 	bl	808c7a4 <L_shift>
 808c850:	42bc      	cmp	r4, r7
 808c852:	d923      	bls.n	808c89c <__hexnan+0xae>
 808c854:	2300      	movs	r3, #0
 808c856:	f1a4 0804 	sub.w	r8, r4, #4
 808c85a:	f844 3c04 	str.w	r3, [r4, #-4]
 808c85e:	f8cd 9000 	str.w	r9, [sp]
 808c862:	4644      	mov	r4, r8
 808c864:	461a      	mov	r2, r3
 808c866:	e7da      	b.n	808c81e <__hexnan+0x30>
 808c868:	2929      	cmp	r1, #41	; 0x29
 808c86a:	d148      	bne.n	808c8fe <__hexnan+0x110>
 808c86c:	f10b 0301 	add.w	r3, fp, #1
 808c870:	f8ca 3000 	str.w	r3, [sl]
 808c874:	e014      	b.n	808c8a0 <__hexnan+0xb2>
 808c876:	3201      	adds	r2, #1
 808c878:	2a08      	cmp	r2, #8
 808c87a:	f109 0901 	add.w	r9, r9, #1
 808c87e:	dd06      	ble.n	808c88e <__hexnan+0xa0>
 808c880:	42bc      	cmp	r4, r7
 808c882:	d9cc      	bls.n	808c81e <__hexnan+0x30>
 808c884:	2300      	movs	r3, #0
 808c886:	f844 3c04 	str.w	r3, [r4, #-4]
 808c88a:	2201      	movs	r2, #1
 808c88c:	3c04      	subs	r4, #4
 808c88e:	6821      	ldr	r1, [r4, #0]
 808c890:	f000 000f 	and.w	r0, r0, #15
 808c894:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808c898:	6020      	str	r0, [r4, #0]
 808c89a:	e7c0      	b.n	808c81e <__hexnan+0x30>
 808c89c:	2208      	movs	r2, #8
 808c89e:	e7be      	b.n	808c81e <__hexnan+0x30>
 808c8a0:	f1b9 0f00 	cmp.w	r9, #0
 808c8a4:	d02b      	beq.n	808c8fe <__hexnan+0x110>
 808c8a6:	4544      	cmp	r4, r8
 808c8a8:	d205      	bcs.n	808c8b6 <__hexnan+0xc8>
 808c8aa:	2a07      	cmp	r2, #7
 808c8ac:	dc03      	bgt.n	808c8b6 <__hexnan+0xc8>
 808c8ae:	4641      	mov	r1, r8
 808c8b0:	4620      	mov	r0, r4
 808c8b2:	f7ff ff77 	bl	808c7a4 <L_shift>
 808c8b6:	42bc      	cmp	r4, r7
 808c8b8:	d90c      	bls.n	808c8d4 <__hexnan+0xe6>
 808c8ba:	463b      	mov	r3, r7
 808c8bc:	f854 2b04 	ldr.w	r2, [r4], #4
 808c8c0:	42a5      	cmp	r5, r4
 808c8c2:	f843 2b04 	str.w	r2, [r3], #4
 808c8c6:	d2f9      	bcs.n	808c8bc <__hexnan+0xce>
 808c8c8:	2200      	movs	r2, #0
 808c8ca:	f843 2b04 	str.w	r2, [r3], #4
 808c8ce:	429d      	cmp	r5, r3
 808c8d0:	d2fb      	bcs.n	808c8ca <__hexnan+0xdc>
 808c8d2:	e00b      	b.n	808c8ec <__hexnan+0xfe>
 808c8d4:	9b01      	ldr	r3, [sp, #4]
 808c8d6:	b14b      	cbz	r3, 808c8ec <__hexnan+0xfe>
 808c8d8:	f1c3 0220 	rsb	r2, r3, #32
 808c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 808c8e0:	40d3      	lsrs	r3, r2
 808c8e2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808c8e6:	4013      	ands	r3, r2
 808c8e8:	f846 3c04 	str.w	r3, [r6, #-4]
 808c8ec:	682b      	ldr	r3, [r5, #0]
 808c8ee:	b943      	cbnz	r3, 808c902 <__hexnan+0x114>
 808c8f0:	42bd      	cmp	r5, r7
 808c8f2:	d102      	bne.n	808c8fa <__hexnan+0x10c>
 808c8f4:	2301      	movs	r3, #1
 808c8f6:	602b      	str	r3, [r5, #0]
 808c8f8:	e003      	b.n	808c902 <__hexnan+0x114>
 808c8fa:	3d04      	subs	r5, #4
 808c8fc:	e7f6      	b.n	808c8ec <__hexnan+0xfe>
 808c8fe:	2004      	movs	r0, #4
 808c900:	e000      	b.n	808c904 <__hexnan+0x116>
 808c902:	2005      	movs	r0, #5
 808c904:	b005      	add	sp, #20
 808c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808c90c <_findenv_r>:
 808c90c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c910:	4607      	mov	r7, r0
 808c912:	468b      	mov	fp, r1
 808c914:	4690      	mov	r8, r2
 808c916:	f000 fcd2 	bl	808d2be <__env_lock>
 808c91a:	4b19      	ldr	r3, [pc, #100]	; (808c980 <_findenv_r+0x74>)
 808c91c:	681d      	ldr	r5, [r3, #0]
 808c91e:	469a      	mov	sl, r3
 808c920:	b13d      	cbz	r5, 808c932 <_findenv_r+0x26>
 808c922:	465c      	mov	r4, fp
 808c924:	4623      	mov	r3, r4
 808c926:	f813 2b01 	ldrb.w	r2, [r3], #1
 808c92a:	b142      	cbz	r2, 808c93e <_findenv_r+0x32>
 808c92c:	2a3d      	cmp	r2, #61	; 0x3d
 808c92e:	461c      	mov	r4, r3
 808c930:	d1f8      	bne.n	808c924 <_findenv_r+0x18>
 808c932:	4638      	mov	r0, r7
 808c934:	f000 fcc4 	bl	808d2c0 <__env_unlock>
 808c938:	2000      	movs	r0, #0
 808c93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c93e:	ebcb 0404 	rsb	r4, fp, r4
 808c942:	46a9      	mov	r9, r5
 808c944:	f859 0b04 	ldr.w	r0, [r9], #4
 808c948:	2800      	cmp	r0, #0
 808c94a:	d0f2      	beq.n	808c932 <_findenv_r+0x26>
 808c94c:	4622      	mov	r2, r4
 808c94e:	4659      	mov	r1, fp
 808c950:	f7fe fb86 	bl	808b060 <strncmp>
 808c954:	b988      	cbnz	r0, 808c97a <_findenv_r+0x6e>
 808c956:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808c95a:	191e      	adds	r6, r3, r4
 808c95c:	5d1b      	ldrb	r3, [r3, r4]
 808c95e:	2b3d      	cmp	r3, #61	; 0x3d
 808c960:	d10b      	bne.n	808c97a <_findenv_r+0x6e>
 808c962:	f8da 3000 	ldr.w	r3, [sl]
 808c966:	4638      	mov	r0, r7
 808c968:	1aed      	subs	r5, r5, r3
 808c96a:	10ad      	asrs	r5, r5, #2
 808c96c:	f8c8 5000 	str.w	r5, [r8]
 808c970:	f000 fca6 	bl	808d2c0 <__env_unlock>
 808c974:	1c70      	adds	r0, r6, #1
 808c976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c97a:	464d      	mov	r5, r9
 808c97c:	e7e1      	b.n	808c942 <_findenv_r+0x36>
 808c97e:	bf00      	nop
 808c980:	2000013c 	.word	0x2000013c

0808c984 <_getenv_r>:
 808c984:	b507      	push	{r0, r1, r2, lr}
 808c986:	aa01      	add	r2, sp, #4
 808c988:	f7ff ffc0 	bl	808c90c <_findenv_r>
 808c98c:	b003      	add	sp, #12
 808c98e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c994 <__gettzinfo>:
 808c994:	4800      	ldr	r0, [pc, #0]	; (808c998 <__gettzinfo+0x4>)
 808c996:	4770      	bx	lr
 808c998:	200000fc 	.word	0x200000fc

0808c99c <gmtime_r>:
 808c99c:	6802      	ldr	r2, [r0, #0]
 808c99e:	4b46      	ldr	r3, [pc, #280]	; (808cab8 <gmtime_r+0x11c>)
 808c9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c9a2:	fb92 f4f3 	sdiv	r4, r2, r3
 808c9a6:	fb03 2214 	mls	r2, r3, r4, r2
 808c9aa:	2a00      	cmp	r2, #0
 808c9ac:	bfbc      	itt	lt
 808c9ae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808c9b2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808c9b6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808c9ba:	fb92 f3f0 	sdiv	r3, r2, r0
 808c9be:	fb00 2213 	mls	r2, r0, r3, r2
 808c9c2:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808c9c6:	608b      	str	r3, [r1, #8]
 808c9c8:	fb92 f3f0 	sdiv	r3, r2, r0
 808c9cc:	fb00 2213 	mls	r2, r0, r3, r2
 808c9d0:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808c9d4:	bfac      	ite	ge
 808c9d6:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808c9da:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808c9de:	604b      	str	r3, [r1, #4]
 808c9e0:	600a      	str	r2, [r1, #0]
 808c9e2:	2307      	movs	r3, #7
 808c9e4:	1ce2      	adds	r2, r4, #3
 808c9e6:	fb92 f3f3 	sdiv	r3, r2, r3
 808c9ea:	4d34      	ldr	r5, [pc, #208]	; (808cabc <gmtime_r+0x120>)
 808c9ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808c9f0:	fb94 f5f5 	sdiv	r5, r4, r5
 808c9f4:	1ad3      	subs	r3, r2, r3
 808c9f6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808c9fa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808c9fe:	618b      	str	r3, [r1, #24]
 808ca00:	4b2f      	ldr	r3, [pc, #188]	; (808cac0 <gmtime_r+0x124>)
 808ca02:	4830      	ldr	r0, [pc, #192]	; (808cac4 <gmtime_r+0x128>)
 808ca04:	fb03 4405 	mla	r4, r3, r5, r4
 808ca08:	fbb4 f2f2 	udiv	r2, r4, r2
 808ca0c:	fbb4 f3f7 	udiv	r3, r4, r7
 808ca10:	fbb4 f0f0 	udiv	r0, r4, r0
 808ca14:	4422      	add	r2, r4
 808ca16:	1ad2      	subs	r2, r2, r3
 808ca18:	f648 6694 	movw	r6, #36500	; 0x8e94
 808ca1c:	1a13      	subs	r3, r2, r0
 808ca1e:	f240 126d 	movw	r2, #365	; 0x16d
 808ca22:	fbb3 f6f6 	udiv	r6, r3, r6
 808ca26:	fbb3 f0f2 	udiv	r0, r3, r2
 808ca2a:	fbb3 f3f7 	udiv	r3, r3, r7
 808ca2e:	4434      	add	r4, r6
 808ca30:	1ae3      	subs	r3, r4, r3
 808ca32:	fb02 3310 	mls	r3, r2, r0, r3
 808ca36:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808ca3a:	2499      	movs	r4, #153	; 0x99
 808ca3c:	3202      	adds	r2, #2
 808ca3e:	fbb2 f2f4 	udiv	r2, r2, r4
 808ca42:	4354      	muls	r4, r2
 808ca44:	1ca6      	adds	r6, r4, #2
 808ca46:	2405      	movs	r4, #5
 808ca48:	fbb6 f4f4 	udiv	r4, r6, r4
 808ca4c:	2a0a      	cmp	r2, #10
 808ca4e:	bf34      	ite	cc
 808ca50:	2602      	movcc	r6, #2
 808ca52:	f06f 0609 	mvncs.w	r6, #9
 808ca56:	4416      	add	r6, r2
 808ca58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808ca5c:	fb02 0505 	mla	r5, r2, r5, r0
 808ca60:	1c5f      	adds	r7, r3, #1
 808ca62:	2e01      	cmp	r6, #1
 808ca64:	bf98      	it	ls
 808ca66:	3501      	addls	r5, #1
 808ca68:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808ca6c:	eba7 0704 	sub.w	r7, r7, r4
 808ca70:	d302      	bcc.n	808ca78 <gmtime_r+0xdc>
 808ca72:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808ca76:	e014      	b.n	808caa2 <gmtime_r+0x106>
 808ca78:	0782      	lsls	r2, r0, #30
 808ca7a:	d105      	bne.n	808ca88 <gmtime_r+0xec>
 808ca7c:	2464      	movs	r4, #100	; 0x64
 808ca7e:	fbb0 f2f4 	udiv	r2, r0, r4
 808ca82:	fb04 0212 	mls	r2, r4, r2, r0
 808ca86:	b94a      	cbnz	r2, 808ca9c <gmtime_r+0x100>
 808ca88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808ca8c:	fbb0 f4f2 	udiv	r4, r0, r2
 808ca90:	fb02 0014 	mls	r0, r2, r4, r0
 808ca94:	fab0 f280 	clz	r2, r0
 808ca98:	0952      	lsrs	r2, r2, #5
 808ca9a:	e000      	b.n	808ca9e <gmtime_r+0x102>
 808ca9c:	2201      	movs	r2, #1
 808ca9e:	333b      	adds	r3, #59	; 0x3b
 808caa0:	441a      	add	r2, r3
 808caa2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808caa6:	2300      	movs	r3, #0
 808caa8:	61ca      	str	r2, [r1, #28]
 808caaa:	614d      	str	r5, [r1, #20]
 808caac:	610e      	str	r6, [r1, #16]
 808caae:	60cf      	str	r7, [r1, #12]
 808cab0:	620b      	str	r3, [r1, #32]
 808cab2:	4608      	mov	r0, r1
 808cab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808cab6:	bf00      	nop
 808cab8:	00015180 	.word	0x00015180
 808cabc:	00023ab1 	.word	0x00023ab1
 808cac0:	fffdc54f 	.word	0xfffdc54f
 808cac4:	00023ab0 	.word	0x00023ab0

0808cac8 <labs>:
 808cac8:	2800      	cmp	r0, #0
 808caca:	bfb8      	it	lt
 808cacc:	4240      	neglt	r0, r0
 808cace:	4770      	bx	lr

0808cad0 <_Balloc>:
 808cad0:	b570      	push	{r4, r5, r6, lr}
 808cad2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808cad4:	4604      	mov	r4, r0
 808cad6:	460e      	mov	r6, r1
 808cad8:	b93d      	cbnz	r5, 808caea <_Balloc+0x1a>
 808cada:	2010      	movs	r0, #16
 808cadc:	f7f9 fa48 	bl	8085f70 <malloc>
 808cae0:	6260      	str	r0, [r4, #36]	; 0x24
 808cae2:	6045      	str	r5, [r0, #4]
 808cae4:	6085      	str	r5, [r0, #8]
 808cae6:	6005      	str	r5, [r0, #0]
 808cae8:	60c5      	str	r5, [r0, #12]
 808caea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808caec:	68eb      	ldr	r3, [r5, #12]
 808caee:	b143      	cbz	r3, 808cb02 <_Balloc+0x32>
 808caf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808caf2:	68db      	ldr	r3, [r3, #12]
 808caf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808caf8:	b178      	cbz	r0, 808cb1a <_Balloc+0x4a>
 808cafa:	6802      	ldr	r2, [r0, #0]
 808cafc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808cb00:	e017      	b.n	808cb32 <_Balloc+0x62>
 808cb02:	2221      	movs	r2, #33	; 0x21
 808cb04:	2104      	movs	r1, #4
 808cb06:	4620      	mov	r0, r4
 808cb08:	f000 fbcb 	bl	808d2a2 <_calloc_r>
 808cb0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808cb0e:	60e8      	str	r0, [r5, #12]
 808cb10:	68db      	ldr	r3, [r3, #12]
 808cb12:	2b00      	cmp	r3, #0
 808cb14:	d1ec      	bne.n	808caf0 <_Balloc+0x20>
 808cb16:	2000      	movs	r0, #0
 808cb18:	bd70      	pop	{r4, r5, r6, pc}
 808cb1a:	2101      	movs	r1, #1
 808cb1c:	fa01 f506 	lsl.w	r5, r1, r6
 808cb20:	1d6a      	adds	r2, r5, #5
 808cb22:	0092      	lsls	r2, r2, #2
 808cb24:	4620      	mov	r0, r4
 808cb26:	f000 fbbc 	bl	808d2a2 <_calloc_r>
 808cb2a:	2800      	cmp	r0, #0
 808cb2c:	d0f3      	beq.n	808cb16 <_Balloc+0x46>
 808cb2e:	6046      	str	r6, [r0, #4]
 808cb30:	6085      	str	r5, [r0, #8]
 808cb32:	2300      	movs	r3, #0
 808cb34:	6103      	str	r3, [r0, #16]
 808cb36:	60c3      	str	r3, [r0, #12]
 808cb38:	bd70      	pop	{r4, r5, r6, pc}

0808cb3a <_Bfree>:
 808cb3a:	b570      	push	{r4, r5, r6, lr}
 808cb3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808cb3e:	4606      	mov	r6, r0
 808cb40:	460d      	mov	r5, r1
 808cb42:	b93c      	cbnz	r4, 808cb54 <_Bfree+0x1a>
 808cb44:	2010      	movs	r0, #16
 808cb46:	f7f9 fa13 	bl	8085f70 <malloc>
 808cb4a:	6270      	str	r0, [r6, #36]	; 0x24
 808cb4c:	6044      	str	r4, [r0, #4]
 808cb4e:	6084      	str	r4, [r0, #8]
 808cb50:	6004      	str	r4, [r0, #0]
 808cb52:	60c4      	str	r4, [r0, #12]
 808cb54:	b13d      	cbz	r5, 808cb66 <_Bfree+0x2c>
 808cb56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808cb58:	686a      	ldr	r2, [r5, #4]
 808cb5a:	68db      	ldr	r3, [r3, #12]
 808cb5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808cb60:	6029      	str	r1, [r5, #0]
 808cb62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808cb66:	bd70      	pop	{r4, r5, r6, pc}

0808cb68 <__multadd>:
 808cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808cb6c:	4606      	mov	r6, r0
 808cb6e:	460c      	mov	r4, r1
 808cb70:	690d      	ldr	r5, [r1, #16]
 808cb72:	461f      	mov	r7, r3
 808cb74:	f101 0e14 	add.w	lr, r1, #20
 808cb78:	2300      	movs	r3, #0
 808cb7a:	f8de 0000 	ldr.w	r0, [lr]
 808cb7e:	3301      	adds	r3, #1
 808cb80:	b281      	uxth	r1, r0
 808cb82:	fb02 7101 	mla	r1, r2, r1, r7
 808cb86:	0c00      	lsrs	r0, r0, #16
 808cb88:	0c0f      	lsrs	r7, r1, #16
 808cb8a:	fb02 7000 	mla	r0, r2, r0, r7
 808cb8e:	b289      	uxth	r1, r1
 808cb90:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808cb94:	429d      	cmp	r5, r3
 808cb96:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808cb9a:	f84e 1b04 	str.w	r1, [lr], #4
 808cb9e:	dcec      	bgt.n	808cb7a <__multadd+0x12>
 808cba0:	b1d7      	cbz	r7, 808cbd8 <__multadd+0x70>
 808cba2:	68a3      	ldr	r3, [r4, #8]
 808cba4:	429d      	cmp	r5, r3
 808cba6:	db12      	blt.n	808cbce <__multadd+0x66>
 808cba8:	6861      	ldr	r1, [r4, #4]
 808cbaa:	4630      	mov	r0, r6
 808cbac:	3101      	adds	r1, #1
 808cbae:	f7ff ff8f 	bl	808cad0 <_Balloc>
 808cbb2:	4680      	mov	r8, r0
 808cbb4:	6922      	ldr	r2, [r4, #16]
 808cbb6:	f104 010c 	add.w	r1, r4, #12
 808cbba:	3202      	adds	r2, #2
 808cbbc:	0092      	lsls	r2, r2, #2
 808cbbe:	300c      	adds	r0, #12
 808cbc0:	f7fd fcbb 	bl	808a53a <memcpy>
 808cbc4:	4621      	mov	r1, r4
 808cbc6:	4630      	mov	r0, r6
 808cbc8:	f7ff ffb7 	bl	808cb3a <_Bfree>
 808cbcc:	4644      	mov	r4, r8
 808cbce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808cbd2:	3501      	adds	r5, #1
 808cbd4:	615f      	str	r7, [r3, #20]
 808cbd6:	6125      	str	r5, [r4, #16]
 808cbd8:	4620      	mov	r0, r4
 808cbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808cbde <__s2b>:
 808cbde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808cbe2:	4606      	mov	r6, r0
 808cbe4:	4615      	mov	r5, r2
 808cbe6:	461f      	mov	r7, r3
 808cbe8:	2209      	movs	r2, #9
 808cbea:	3308      	adds	r3, #8
 808cbec:	460c      	mov	r4, r1
 808cbee:	fb93 f3f2 	sdiv	r3, r3, r2
 808cbf2:	2100      	movs	r1, #0
 808cbf4:	2201      	movs	r2, #1
 808cbf6:	429a      	cmp	r2, r3
 808cbf8:	da02      	bge.n	808cc00 <__s2b+0x22>
 808cbfa:	0052      	lsls	r2, r2, #1
 808cbfc:	3101      	adds	r1, #1
 808cbfe:	e7fa      	b.n	808cbf6 <__s2b+0x18>
 808cc00:	4630      	mov	r0, r6
 808cc02:	f7ff ff65 	bl	808cad0 <_Balloc>
 808cc06:	9b08      	ldr	r3, [sp, #32]
 808cc08:	2d09      	cmp	r5, #9
 808cc0a:	6143      	str	r3, [r0, #20]
 808cc0c:	f04f 0301 	mov.w	r3, #1
 808cc10:	6103      	str	r3, [r0, #16]
 808cc12:	dd11      	ble.n	808cc38 <__s2b+0x5a>
 808cc14:	f104 0809 	add.w	r8, r4, #9
 808cc18:	46c1      	mov	r9, r8
 808cc1a:	442c      	add	r4, r5
 808cc1c:	f819 3b01 	ldrb.w	r3, [r9], #1
 808cc20:	4601      	mov	r1, r0
 808cc22:	3b30      	subs	r3, #48	; 0x30
 808cc24:	220a      	movs	r2, #10
 808cc26:	4630      	mov	r0, r6
 808cc28:	f7ff ff9e 	bl	808cb68 <__multadd>
 808cc2c:	45a1      	cmp	r9, r4
 808cc2e:	d1f5      	bne.n	808cc1c <__s2b+0x3e>
 808cc30:	eb08 0405 	add.w	r4, r8, r5
 808cc34:	3c08      	subs	r4, #8
 808cc36:	e001      	b.n	808cc3c <__s2b+0x5e>
 808cc38:	340a      	adds	r4, #10
 808cc3a:	2509      	movs	r5, #9
 808cc3c:	1b2d      	subs	r5, r5, r4
 808cc3e:	1963      	adds	r3, r4, r5
 808cc40:	429f      	cmp	r7, r3
 808cc42:	dd08      	ble.n	808cc56 <__s2b+0x78>
 808cc44:	f814 3b01 	ldrb.w	r3, [r4], #1
 808cc48:	4601      	mov	r1, r0
 808cc4a:	3b30      	subs	r3, #48	; 0x30
 808cc4c:	220a      	movs	r2, #10
 808cc4e:	4630      	mov	r0, r6
 808cc50:	f7ff ff8a 	bl	808cb68 <__multadd>
 808cc54:	e7f3      	b.n	808cc3e <__s2b+0x60>
 808cc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808cc5a <__hi0bits>:
 808cc5a:	0c03      	lsrs	r3, r0, #16
 808cc5c:	041b      	lsls	r3, r3, #16
 808cc5e:	b913      	cbnz	r3, 808cc66 <__hi0bits+0xc>
 808cc60:	0400      	lsls	r0, r0, #16
 808cc62:	2310      	movs	r3, #16
 808cc64:	e000      	b.n	808cc68 <__hi0bits+0xe>
 808cc66:	2300      	movs	r3, #0
 808cc68:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808cc6c:	bf04      	itt	eq
 808cc6e:	0200      	lsleq	r0, r0, #8
 808cc70:	3308      	addeq	r3, #8
 808cc72:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808cc76:	bf04      	itt	eq
 808cc78:	0100      	lsleq	r0, r0, #4
 808cc7a:	3304      	addeq	r3, #4
 808cc7c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808cc80:	bf04      	itt	eq
 808cc82:	0080      	lsleq	r0, r0, #2
 808cc84:	3302      	addeq	r3, #2
 808cc86:	2800      	cmp	r0, #0
 808cc88:	db03      	blt.n	808cc92 <__hi0bits+0x38>
 808cc8a:	0042      	lsls	r2, r0, #1
 808cc8c:	d503      	bpl.n	808cc96 <__hi0bits+0x3c>
 808cc8e:	1c58      	adds	r0, r3, #1
 808cc90:	4770      	bx	lr
 808cc92:	4618      	mov	r0, r3
 808cc94:	4770      	bx	lr
 808cc96:	2020      	movs	r0, #32
 808cc98:	4770      	bx	lr

0808cc9a <__lo0bits>:
 808cc9a:	6803      	ldr	r3, [r0, #0]
 808cc9c:	f013 0207 	ands.w	r2, r3, #7
 808cca0:	d00b      	beq.n	808ccba <__lo0bits+0x20>
 808cca2:	07d9      	lsls	r1, r3, #31
 808cca4:	d422      	bmi.n	808ccec <__lo0bits+0x52>
 808cca6:	079a      	lsls	r2, r3, #30
 808cca8:	bf4b      	itete	mi
 808ccaa:	085b      	lsrmi	r3, r3, #1
 808ccac:	089b      	lsrpl	r3, r3, #2
 808ccae:	6003      	strmi	r3, [r0, #0]
 808ccb0:	6003      	strpl	r3, [r0, #0]
 808ccb2:	bf4c      	ite	mi
 808ccb4:	2001      	movmi	r0, #1
 808ccb6:	2002      	movpl	r0, #2
 808ccb8:	4770      	bx	lr
 808ccba:	b299      	uxth	r1, r3
 808ccbc:	b909      	cbnz	r1, 808ccc2 <__lo0bits+0x28>
 808ccbe:	0c1b      	lsrs	r3, r3, #16
 808ccc0:	2210      	movs	r2, #16
 808ccc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 808ccc6:	bf04      	itt	eq
 808ccc8:	0a1b      	lsreq	r3, r3, #8
 808ccca:	3208      	addeq	r2, #8
 808cccc:	0719      	lsls	r1, r3, #28
 808ccce:	bf04      	itt	eq
 808ccd0:	091b      	lsreq	r3, r3, #4
 808ccd2:	3204      	addeq	r2, #4
 808ccd4:	0799      	lsls	r1, r3, #30
 808ccd6:	bf04      	itt	eq
 808ccd8:	089b      	lsreq	r3, r3, #2
 808ccda:	3202      	addeq	r2, #2
 808ccdc:	07d9      	lsls	r1, r3, #31
 808ccde:	d402      	bmi.n	808cce6 <__lo0bits+0x4c>
 808cce0:	085b      	lsrs	r3, r3, #1
 808cce2:	d005      	beq.n	808ccf0 <__lo0bits+0x56>
 808cce4:	3201      	adds	r2, #1
 808cce6:	6003      	str	r3, [r0, #0]
 808cce8:	4610      	mov	r0, r2
 808ccea:	4770      	bx	lr
 808ccec:	2000      	movs	r0, #0
 808ccee:	4770      	bx	lr
 808ccf0:	2020      	movs	r0, #32
 808ccf2:	4770      	bx	lr

0808ccf4 <__i2b>:
 808ccf4:	b510      	push	{r4, lr}
 808ccf6:	460c      	mov	r4, r1
 808ccf8:	2101      	movs	r1, #1
 808ccfa:	f7ff fee9 	bl	808cad0 <_Balloc>
 808ccfe:	2201      	movs	r2, #1
 808cd00:	6144      	str	r4, [r0, #20]
 808cd02:	6102      	str	r2, [r0, #16]
 808cd04:	bd10      	pop	{r4, pc}

0808cd06 <__multiply>:
 808cd06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cd0a:	4614      	mov	r4, r2
 808cd0c:	690a      	ldr	r2, [r1, #16]
 808cd0e:	6923      	ldr	r3, [r4, #16]
 808cd10:	4688      	mov	r8, r1
 808cd12:	429a      	cmp	r2, r3
 808cd14:	bfbe      	ittt	lt
 808cd16:	460b      	movlt	r3, r1
 808cd18:	46a0      	movlt	r8, r4
 808cd1a:	461c      	movlt	r4, r3
 808cd1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808cd20:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808cd24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808cd28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808cd2c:	eb07 0609 	add.w	r6, r7, r9
 808cd30:	429e      	cmp	r6, r3
 808cd32:	bfc8      	it	gt
 808cd34:	3101      	addgt	r1, #1
 808cd36:	f7ff fecb 	bl	808cad0 <_Balloc>
 808cd3a:	f100 0514 	add.w	r5, r0, #20
 808cd3e:	462b      	mov	r3, r5
 808cd40:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808cd44:	2200      	movs	r2, #0
 808cd46:	4563      	cmp	r3, ip
 808cd48:	d202      	bcs.n	808cd50 <__multiply+0x4a>
 808cd4a:	f843 2b04 	str.w	r2, [r3], #4
 808cd4e:	e7fa      	b.n	808cd46 <__multiply+0x40>
 808cd50:	f104 0214 	add.w	r2, r4, #20
 808cd54:	f108 0114 	add.w	r1, r8, #20
 808cd58:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808cd5c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808cd60:	9300      	str	r3, [sp, #0]
 808cd62:	9b00      	ldr	r3, [sp, #0]
 808cd64:	9201      	str	r2, [sp, #4]
 808cd66:	4293      	cmp	r3, r2
 808cd68:	d957      	bls.n	808ce1a <__multiply+0x114>
 808cd6a:	f8b2 b000 	ldrh.w	fp, [r2]
 808cd6e:	f1bb 0f00 	cmp.w	fp, #0
 808cd72:	d023      	beq.n	808cdbc <__multiply+0xb6>
 808cd74:	4689      	mov	r9, r1
 808cd76:	46ae      	mov	lr, r5
 808cd78:	f04f 0800 	mov.w	r8, #0
 808cd7c:	f859 4b04 	ldr.w	r4, [r9], #4
 808cd80:	f8be a000 	ldrh.w	sl, [lr]
 808cd84:	b2a3      	uxth	r3, r4
 808cd86:	fb0b a303 	mla	r3, fp, r3, sl
 808cd8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808cd8e:	f8de 4000 	ldr.w	r4, [lr]
 808cd92:	4443      	add	r3, r8
 808cd94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808cd98:	fb0b 840a 	mla	r4, fp, sl, r8
 808cd9c:	46f2      	mov	sl, lr
 808cd9e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808cda2:	b29b      	uxth	r3, r3
 808cda4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808cda8:	454f      	cmp	r7, r9
 808cdaa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808cdae:	f84a 3b04 	str.w	r3, [sl], #4
 808cdb2:	d901      	bls.n	808cdb8 <__multiply+0xb2>
 808cdb4:	46d6      	mov	lr, sl
 808cdb6:	e7e1      	b.n	808cd7c <__multiply+0x76>
 808cdb8:	f8ce 8004 	str.w	r8, [lr, #4]
 808cdbc:	9b01      	ldr	r3, [sp, #4]
 808cdbe:	3204      	adds	r2, #4
 808cdc0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808cdc4:	f1ba 0f00 	cmp.w	sl, #0
 808cdc8:	d021      	beq.n	808ce0e <__multiply+0x108>
 808cdca:	462c      	mov	r4, r5
 808cdcc:	4689      	mov	r9, r1
 808cdce:	682b      	ldr	r3, [r5, #0]
 808cdd0:	f04f 0800 	mov.w	r8, #0
 808cdd4:	f8b9 e000 	ldrh.w	lr, [r9]
 808cdd8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808cddc:	b29b      	uxth	r3, r3
 808cdde:	fb0a be0e 	mla	lr, sl, lr, fp
 808cde2:	46a3      	mov	fp, r4
 808cde4:	44f0      	add	r8, lr
 808cde6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808cdea:	f84b 3b04 	str.w	r3, [fp], #4
 808cdee:	f859 3b04 	ldr.w	r3, [r9], #4
 808cdf2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808cdf6:	0c1b      	lsrs	r3, r3, #16
 808cdf8:	fb0a e303 	mla	r3, sl, r3, lr
 808cdfc:	454f      	cmp	r7, r9
 808cdfe:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808ce02:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808ce06:	d901      	bls.n	808ce0c <__multiply+0x106>
 808ce08:	465c      	mov	r4, fp
 808ce0a:	e7e3      	b.n	808cdd4 <__multiply+0xce>
 808ce0c:	6063      	str	r3, [r4, #4]
 808ce0e:	3504      	adds	r5, #4
 808ce10:	e7a7      	b.n	808cd62 <__multiply+0x5c>
 808ce12:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808ce16:	b913      	cbnz	r3, 808ce1e <__multiply+0x118>
 808ce18:	3e01      	subs	r6, #1
 808ce1a:	2e00      	cmp	r6, #0
 808ce1c:	dcf9      	bgt.n	808ce12 <__multiply+0x10c>
 808ce1e:	6106      	str	r6, [r0, #16]
 808ce20:	b003      	add	sp, #12
 808ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808ce28 <__pow5mult>:
 808ce28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808ce2c:	4615      	mov	r5, r2
 808ce2e:	f012 0203 	ands.w	r2, r2, #3
 808ce32:	4606      	mov	r6, r0
 808ce34:	460f      	mov	r7, r1
 808ce36:	d007      	beq.n	808ce48 <__pow5mult+0x20>
 808ce38:	4c21      	ldr	r4, [pc, #132]	; (808cec0 <__pow5mult+0x98>)
 808ce3a:	3a01      	subs	r2, #1
 808ce3c:	2300      	movs	r3, #0
 808ce3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808ce42:	f7ff fe91 	bl	808cb68 <__multadd>
 808ce46:	4607      	mov	r7, r0
 808ce48:	10ad      	asrs	r5, r5, #2
 808ce4a:	d036      	beq.n	808ceba <__pow5mult+0x92>
 808ce4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808ce4e:	b93c      	cbnz	r4, 808ce60 <__pow5mult+0x38>
 808ce50:	2010      	movs	r0, #16
 808ce52:	f7f9 f88d 	bl	8085f70 <malloc>
 808ce56:	6270      	str	r0, [r6, #36]	; 0x24
 808ce58:	6044      	str	r4, [r0, #4]
 808ce5a:	6084      	str	r4, [r0, #8]
 808ce5c:	6004      	str	r4, [r0, #0]
 808ce5e:	60c4      	str	r4, [r0, #12]
 808ce60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808ce64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808ce68:	b94c      	cbnz	r4, 808ce7e <__pow5mult+0x56>
 808ce6a:	f240 2171 	movw	r1, #625	; 0x271
 808ce6e:	4630      	mov	r0, r6
 808ce70:	f7ff ff40 	bl	808ccf4 <__i2b>
 808ce74:	4604      	mov	r4, r0
 808ce76:	2300      	movs	r3, #0
 808ce78:	f8c8 0008 	str.w	r0, [r8, #8]
 808ce7c:	6003      	str	r3, [r0, #0]
 808ce7e:	f04f 0800 	mov.w	r8, #0
 808ce82:	07eb      	lsls	r3, r5, #31
 808ce84:	d50a      	bpl.n	808ce9c <__pow5mult+0x74>
 808ce86:	4639      	mov	r1, r7
 808ce88:	4622      	mov	r2, r4
 808ce8a:	4630      	mov	r0, r6
 808ce8c:	f7ff ff3b 	bl	808cd06 <__multiply>
 808ce90:	4681      	mov	r9, r0
 808ce92:	4639      	mov	r1, r7
 808ce94:	4630      	mov	r0, r6
 808ce96:	f7ff fe50 	bl	808cb3a <_Bfree>
 808ce9a:	464f      	mov	r7, r9
 808ce9c:	106d      	asrs	r5, r5, #1
 808ce9e:	d00c      	beq.n	808ceba <__pow5mult+0x92>
 808cea0:	6820      	ldr	r0, [r4, #0]
 808cea2:	b108      	cbz	r0, 808cea8 <__pow5mult+0x80>
 808cea4:	4604      	mov	r4, r0
 808cea6:	e7ec      	b.n	808ce82 <__pow5mult+0x5a>
 808cea8:	4622      	mov	r2, r4
 808ceaa:	4621      	mov	r1, r4
 808ceac:	4630      	mov	r0, r6
 808ceae:	f7ff ff2a 	bl	808cd06 <__multiply>
 808ceb2:	6020      	str	r0, [r4, #0]
 808ceb4:	f8c0 8000 	str.w	r8, [r0]
 808ceb8:	e7f4      	b.n	808cea4 <__pow5mult+0x7c>
 808ceba:	4638      	mov	r0, r7
 808cebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808cec0:	0808e998 	.word	0x0808e998

0808cec4 <__lshift>:
 808cec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cec8:	460c      	mov	r4, r1
 808ceca:	4607      	mov	r7, r0
 808cecc:	4691      	mov	r9, r2
 808cece:	6926      	ldr	r6, [r4, #16]
 808ced0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808ced4:	4456      	add	r6, sl
 808ced6:	6849      	ldr	r1, [r1, #4]
 808ced8:	68a3      	ldr	r3, [r4, #8]
 808ceda:	1c75      	adds	r5, r6, #1
 808cedc:	42ab      	cmp	r3, r5
 808cede:	da02      	bge.n	808cee6 <__lshift+0x22>
 808cee0:	3101      	adds	r1, #1
 808cee2:	005b      	lsls	r3, r3, #1
 808cee4:	e7fa      	b.n	808cedc <__lshift+0x18>
 808cee6:	4638      	mov	r0, r7
 808cee8:	f7ff fdf2 	bl	808cad0 <_Balloc>
 808ceec:	2300      	movs	r3, #0
 808ceee:	4680      	mov	r8, r0
 808cef0:	461a      	mov	r2, r3
 808cef2:	f100 0114 	add.w	r1, r0, #20
 808cef6:	4553      	cmp	r3, sl
 808cef8:	da03      	bge.n	808cf02 <__lshift+0x3e>
 808cefa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808cefe:	3301      	adds	r3, #1
 808cf00:	e7f9      	b.n	808cef6 <__lshift+0x32>
 808cf02:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808cf06:	6920      	ldr	r0, [r4, #16]
 808cf08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808cf0c:	f019 091f 	ands.w	r9, r9, #31
 808cf10:	f104 0114 	add.w	r1, r4, #20
 808cf14:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808cf18:	d014      	beq.n	808cf44 <__lshift+0x80>
 808cf1a:	f1c9 0c20 	rsb	ip, r9, #32
 808cf1e:	2200      	movs	r2, #0
 808cf20:	6808      	ldr	r0, [r1, #0]
 808cf22:	469a      	mov	sl, r3
 808cf24:	fa00 f009 	lsl.w	r0, r0, r9
 808cf28:	4302      	orrs	r2, r0
 808cf2a:	f843 2b04 	str.w	r2, [r3], #4
 808cf2e:	f851 2b04 	ldr.w	r2, [r1], #4
 808cf32:	458e      	cmp	lr, r1
 808cf34:	fa22 f20c 	lsr.w	r2, r2, ip
 808cf38:	d8f2      	bhi.n	808cf20 <__lshift+0x5c>
 808cf3a:	f8ca 2004 	str.w	r2, [sl, #4]
 808cf3e:	b142      	cbz	r2, 808cf52 <__lshift+0x8e>
 808cf40:	1cb5      	adds	r5, r6, #2
 808cf42:	e006      	b.n	808cf52 <__lshift+0x8e>
 808cf44:	3b04      	subs	r3, #4
 808cf46:	f851 2b04 	ldr.w	r2, [r1], #4
 808cf4a:	458e      	cmp	lr, r1
 808cf4c:	f843 2f04 	str.w	r2, [r3, #4]!
 808cf50:	d8f9      	bhi.n	808cf46 <__lshift+0x82>
 808cf52:	3d01      	subs	r5, #1
 808cf54:	4638      	mov	r0, r7
 808cf56:	f8c8 5010 	str.w	r5, [r8, #16]
 808cf5a:	4621      	mov	r1, r4
 808cf5c:	f7ff fded 	bl	808cb3a <_Bfree>
 808cf60:	4640      	mov	r0, r8
 808cf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808cf66 <__mcmp>:
 808cf66:	6903      	ldr	r3, [r0, #16]
 808cf68:	690a      	ldr	r2, [r1, #16]
 808cf6a:	b510      	push	{r4, lr}
 808cf6c:	1a9b      	subs	r3, r3, r2
 808cf6e:	d111      	bne.n	808cf94 <__mcmp+0x2e>
 808cf70:	0092      	lsls	r2, r2, #2
 808cf72:	3014      	adds	r0, #20
 808cf74:	3114      	adds	r1, #20
 808cf76:	1883      	adds	r3, r0, r2
 808cf78:	440a      	add	r2, r1
 808cf7a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808cf7e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808cf82:	428c      	cmp	r4, r1
 808cf84:	d002      	beq.n	808cf8c <__mcmp+0x26>
 808cf86:	d307      	bcc.n	808cf98 <__mcmp+0x32>
 808cf88:	2001      	movs	r0, #1
 808cf8a:	bd10      	pop	{r4, pc}
 808cf8c:	4298      	cmp	r0, r3
 808cf8e:	d3f4      	bcc.n	808cf7a <__mcmp+0x14>
 808cf90:	2000      	movs	r0, #0
 808cf92:	bd10      	pop	{r4, pc}
 808cf94:	4618      	mov	r0, r3
 808cf96:	bd10      	pop	{r4, pc}
 808cf98:	f04f 30ff 	mov.w	r0, #4294967295
 808cf9c:	bd10      	pop	{r4, pc}

0808cf9e <__mdiff>:
 808cf9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808cfa2:	460c      	mov	r4, r1
 808cfa4:	4607      	mov	r7, r0
 808cfa6:	4611      	mov	r1, r2
 808cfa8:	4620      	mov	r0, r4
 808cfaa:	4615      	mov	r5, r2
 808cfac:	f7ff ffdb 	bl	808cf66 <__mcmp>
 808cfb0:	1e06      	subs	r6, r0, #0
 808cfb2:	d108      	bne.n	808cfc6 <__mdiff+0x28>
 808cfb4:	4631      	mov	r1, r6
 808cfb6:	4638      	mov	r0, r7
 808cfb8:	f7ff fd8a 	bl	808cad0 <_Balloc>
 808cfbc:	2301      	movs	r3, #1
 808cfbe:	6103      	str	r3, [r0, #16]
 808cfc0:	6146      	str	r6, [r0, #20]
 808cfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808cfc6:	bfbc      	itt	lt
 808cfc8:	4623      	movlt	r3, r4
 808cfca:	462c      	movlt	r4, r5
 808cfcc:	4638      	mov	r0, r7
 808cfce:	6861      	ldr	r1, [r4, #4]
 808cfd0:	bfba      	itte	lt
 808cfd2:	461d      	movlt	r5, r3
 808cfd4:	2601      	movlt	r6, #1
 808cfd6:	2600      	movge	r6, #0
 808cfd8:	f7ff fd7a 	bl	808cad0 <_Balloc>
 808cfdc:	692b      	ldr	r3, [r5, #16]
 808cfde:	60c6      	str	r6, [r0, #12]
 808cfe0:	6926      	ldr	r6, [r4, #16]
 808cfe2:	f105 0914 	add.w	r9, r5, #20
 808cfe6:	f104 0114 	add.w	r1, r4, #20
 808cfea:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808cfee:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808cff2:	f100 0514 	add.w	r5, r0, #20
 808cff6:	f04f 0c00 	mov.w	ip, #0
 808cffa:	f851 2b04 	ldr.w	r2, [r1], #4
 808cffe:	f859 4b04 	ldr.w	r4, [r9], #4
 808d002:	b293      	uxth	r3, r2
 808d004:	449c      	add	ip, r3
 808d006:	b2a3      	uxth	r3, r4
 808d008:	0c24      	lsrs	r4, r4, #16
 808d00a:	ebc3 030c 	rsb	r3, r3, ip
 808d00e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808d012:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808d016:	b29b      	uxth	r3, r3
 808d018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808d01c:	45c8      	cmp	r8, r9
 808d01e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808d022:	468e      	mov	lr, r1
 808d024:	f845 2b04 	str.w	r2, [r5], #4
 808d028:	d8e7      	bhi.n	808cffa <__mdiff+0x5c>
 808d02a:	45be      	cmp	lr, r7
 808d02c:	d20e      	bcs.n	808d04c <__mdiff+0xae>
 808d02e:	f85e 1b04 	ldr.w	r1, [lr], #4
 808d032:	b28a      	uxth	r2, r1
 808d034:	4462      	add	r2, ip
 808d036:	1413      	asrs	r3, r2, #16
 808d038:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808d03c:	b292      	uxth	r2, r2
 808d03e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808d042:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808d046:	f845 2b04 	str.w	r2, [r5], #4
 808d04a:	e7ee      	b.n	808d02a <__mdiff+0x8c>
 808d04c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808d050:	b90b      	cbnz	r3, 808d056 <__mdiff+0xb8>
 808d052:	3e01      	subs	r6, #1
 808d054:	e7fa      	b.n	808d04c <__mdiff+0xae>
 808d056:	6106      	str	r6, [r0, #16]
 808d058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808d05c <__ulp>:
 808d05c:	4b10      	ldr	r3, [pc, #64]	; (808d0a0 <__ulp+0x44>)
 808d05e:	400b      	ands	r3, r1
 808d060:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808d064:	2b00      	cmp	r3, #0
 808d066:	dd02      	ble.n	808d06e <__ulp+0x12>
 808d068:	2000      	movs	r0, #0
 808d06a:	4619      	mov	r1, r3
 808d06c:	4770      	bx	lr
 808d06e:	425b      	negs	r3, r3
 808d070:	151b      	asrs	r3, r3, #20
 808d072:	2b13      	cmp	r3, #19
 808d074:	f04f 0000 	mov.w	r0, #0
 808d078:	f04f 0100 	mov.w	r1, #0
 808d07c:	dc04      	bgt.n	808d088 <__ulp+0x2c>
 808d07e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808d082:	fa42 f103 	asr.w	r1, r2, r3
 808d086:	4770      	bx	lr
 808d088:	3b14      	subs	r3, #20
 808d08a:	2b1e      	cmp	r3, #30
 808d08c:	f04f 0201 	mov.w	r2, #1
 808d090:	bfce      	itee	gt
 808d092:	4613      	movgt	r3, r2
 808d094:	f1c3 031f 	rsble	r3, r3, #31
 808d098:	fa02 f303 	lslle.w	r3, r2, r3
 808d09c:	4618      	mov	r0, r3
 808d09e:	4770      	bx	lr
 808d0a0:	7ff00000 	.word	0x7ff00000

0808d0a4 <__b2d>:
 808d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808d0a6:	6905      	ldr	r5, [r0, #16]
 808d0a8:	f100 0614 	add.w	r6, r0, #20
 808d0ac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808d0b0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808d0b4:	1f2f      	subs	r7, r5, #4
 808d0b6:	4620      	mov	r0, r4
 808d0b8:	f7ff fdcf 	bl	808cc5a <__hi0bits>
 808d0bc:	f1c0 0320 	rsb	r3, r0, #32
 808d0c0:	280a      	cmp	r0, #10
 808d0c2:	600b      	str	r3, [r1, #0]
 808d0c4:	dc14      	bgt.n	808d0f0 <__b2d+0x4c>
 808d0c6:	f1c0 0e0b 	rsb	lr, r0, #11
 808d0ca:	fa24 f10e 	lsr.w	r1, r4, lr
 808d0ce:	42be      	cmp	r6, r7
 808d0d0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808d0d4:	bf34      	ite	cc
 808d0d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808d0da:	2100      	movcs	r1, #0
 808d0dc:	3015      	adds	r0, #21
 808d0de:	fa04 f000 	lsl.w	r0, r4, r0
 808d0e2:	fa21 f10e 	lsr.w	r1, r1, lr
 808d0e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808d0ea:	ea40 0201 	orr.w	r2, r0, r1
 808d0ee:	e023      	b.n	808d138 <__b2d+0x94>
 808d0f0:	42be      	cmp	r6, r7
 808d0f2:	bf3a      	itte	cc
 808d0f4:	f1a5 0708 	subcc.w	r7, r5, #8
 808d0f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808d0fc:	2100      	movcs	r1, #0
 808d0fe:	380b      	subs	r0, #11
 808d100:	d015      	beq.n	808d12e <__b2d+0x8a>
 808d102:	4084      	lsls	r4, r0
 808d104:	f1c0 0520 	rsb	r5, r0, #32
 808d108:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808d10c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808d110:	42b7      	cmp	r7, r6
 808d112:	fa21 fe05 	lsr.w	lr, r1, r5
 808d116:	ea44 030e 	orr.w	r3, r4, lr
 808d11a:	bf8c      	ite	hi
 808d11c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808d120:	2400      	movls	r4, #0
 808d122:	fa01 f000 	lsl.w	r0, r1, r0
 808d126:	40ec      	lsrs	r4, r5
 808d128:	ea40 0204 	orr.w	r2, r0, r4
 808d12c:	e004      	b.n	808d138 <__b2d+0x94>
 808d12e:	460a      	mov	r2, r1
 808d130:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808d134:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808d138:	4610      	mov	r0, r2
 808d13a:	4619      	mov	r1, r3
 808d13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808d13e <__d2b>:
 808d13e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808d142:	461c      	mov	r4, r3
 808d144:	2101      	movs	r1, #1
 808d146:	4690      	mov	r8, r2
 808d148:	9e08      	ldr	r6, [sp, #32]
 808d14a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808d14c:	f7ff fcc0 	bl	808cad0 <_Balloc>
 808d150:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808d154:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808d158:	4607      	mov	r7, r0
 808d15a:	b10c      	cbz	r4, 808d160 <__d2b+0x22>
 808d15c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808d160:	9201      	str	r2, [sp, #4]
 808d162:	f1b8 0f00 	cmp.w	r8, #0
 808d166:	d019      	beq.n	808d19c <__d2b+0x5e>
 808d168:	a802      	add	r0, sp, #8
 808d16a:	f840 8d08 	str.w	r8, [r0, #-8]!
 808d16e:	f7ff fd94 	bl	808cc9a <__lo0bits>
 808d172:	9b00      	ldr	r3, [sp, #0]
 808d174:	b148      	cbz	r0, 808d18a <__d2b+0x4c>
 808d176:	9a01      	ldr	r2, [sp, #4]
 808d178:	f1c0 0120 	rsb	r1, r0, #32
 808d17c:	fa02 f101 	lsl.w	r1, r2, r1
 808d180:	430b      	orrs	r3, r1
 808d182:	40c2      	lsrs	r2, r0
 808d184:	617b      	str	r3, [r7, #20]
 808d186:	9201      	str	r2, [sp, #4]
 808d188:	e000      	b.n	808d18c <__d2b+0x4e>
 808d18a:	617b      	str	r3, [r7, #20]
 808d18c:	9b01      	ldr	r3, [sp, #4]
 808d18e:	2b00      	cmp	r3, #0
 808d190:	bf14      	ite	ne
 808d192:	2102      	movne	r1, #2
 808d194:	2101      	moveq	r1, #1
 808d196:	61bb      	str	r3, [r7, #24]
 808d198:	6139      	str	r1, [r7, #16]
 808d19a:	e007      	b.n	808d1ac <__d2b+0x6e>
 808d19c:	a801      	add	r0, sp, #4
 808d19e:	f7ff fd7c 	bl	808cc9a <__lo0bits>
 808d1a2:	9b01      	ldr	r3, [sp, #4]
 808d1a4:	2101      	movs	r1, #1
 808d1a6:	617b      	str	r3, [r7, #20]
 808d1a8:	6139      	str	r1, [r7, #16]
 808d1aa:	3020      	adds	r0, #32
 808d1ac:	b134      	cbz	r4, 808d1bc <__d2b+0x7e>
 808d1ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808d1b2:	4404      	add	r4, r0
 808d1b4:	6034      	str	r4, [r6, #0]
 808d1b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808d1ba:	e009      	b.n	808d1d0 <__d2b+0x92>
 808d1bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808d1c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808d1c4:	6030      	str	r0, [r6, #0]
 808d1c6:	6918      	ldr	r0, [r3, #16]
 808d1c8:	f7ff fd47 	bl	808cc5a <__hi0bits>
 808d1cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808d1d0:	6028      	str	r0, [r5, #0]
 808d1d2:	4638      	mov	r0, r7
 808d1d4:	b002      	add	sp, #8
 808d1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d1da <__ratio>:
 808d1da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808d1de:	4688      	mov	r8, r1
 808d1e0:	4669      	mov	r1, sp
 808d1e2:	4681      	mov	r9, r0
 808d1e4:	f7ff ff5e 	bl	808d0a4 <__b2d>
 808d1e8:	460d      	mov	r5, r1
 808d1ea:	4604      	mov	r4, r0
 808d1ec:	a901      	add	r1, sp, #4
 808d1ee:	4640      	mov	r0, r8
 808d1f0:	f7ff ff58 	bl	808d0a4 <__b2d>
 808d1f4:	460f      	mov	r7, r1
 808d1f6:	4606      	mov	r6, r0
 808d1f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808d1fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808d200:	4620      	mov	r0, r4
 808d202:	1a9a      	subs	r2, r3, r2
 808d204:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808d208:	1ac9      	subs	r1, r1, r3
 808d20a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808d20e:	2b00      	cmp	r3, #0
 808d210:	bfcc      	ite	gt
 808d212:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808d216:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808d21a:	4632      	mov	r2, r6
 808d21c:	463b      	mov	r3, r7
 808d21e:	4629      	mov	r1, r5
 808d220:	f7fc f952 	bl	80894c8 <__aeabi_ddiv>
 808d224:	b003      	add	sp, #12
 808d226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808d22a <__copybits>:
 808d22a:	3901      	subs	r1, #1
 808d22c:	b510      	push	{r4, lr}
 808d22e:	1149      	asrs	r1, r1, #5
 808d230:	6914      	ldr	r4, [r2, #16]
 808d232:	3101      	adds	r1, #1
 808d234:	f102 0314 	add.w	r3, r2, #20
 808d238:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808d23c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808d240:	42a3      	cmp	r3, r4
 808d242:	4602      	mov	r2, r0
 808d244:	d204      	bcs.n	808d250 <__copybits+0x26>
 808d246:	f853 2b04 	ldr.w	r2, [r3], #4
 808d24a:	f840 2b04 	str.w	r2, [r0], #4
 808d24e:	e7f7      	b.n	808d240 <__copybits+0x16>
 808d250:	2300      	movs	r3, #0
 808d252:	428a      	cmp	r2, r1
 808d254:	d202      	bcs.n	808d25c <__copybits+0x32>
 808d256:	f842 3b04 	str.w	r3, [r2], #4
 808d25a:	e7fa      	b.n	808d252 <__copybits+0x28>
 808d25c:	bd10      	pop	{r4, pc}

0808d25e <__any_on>:
 808d25e:	f100 0214 	add.w	r2, r0, #20
 808d262:	6900      	ldr	r0, [r0, #16]
 808d264:	114b      	asrs	r3, r1, #5
 808d266:	4298      	cmp	r0, r3
 808d268:	b510      	push	{r4, lr}
 808d26a:	db0c      	blt.n	808d286 <__any_on+0x28>
 808d26c:	dd0c      	ble.n	808d288 <__any_on+0x2a>
 808d26e:	f011 011f 	ands.w	r1, r1, #31
 808d272:	d009      	beq.n	808d288 <__any_on+0x2a>
 808d274:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808d278:	fa24 f001 	lsr.w	r0, r4, r1
 808d27c:	fa00 f101 	lsl.w	r1, r0, r1
 808d280:	428c      	cmp	r4, r1
 808d282:	d10c      	bne.n	808d29e <__any_on+0x40>
 808d284:	e000      	b.n	808d288 <__any_on+0x2a>
 808d286:	4603      	mov	r3, r0
 808d288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808d28c:	4293      	cmp	r3, r2
 808d28e:	d904      	bls.n	808d29a <__any_on+0x3c>
 808d290:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808d294:	2900      	cmp	r1, #0
 808d296:	d0f9      	beq.n	808d28c <__any_on+0x2e>
 808d298:	e001      	b.n	808d29e <__any_on+0x40>
 808d29a:	2000      	movs	r0, #0
 808d29c:	bd10      	pop	{r4, pc}
 808d29e:	2001      	movs	r0, #1
 808d2a0:	bd10      	pop	{r4, pc}

0808d2a2 <_calloc_r>:
 808d2a2:	b538      	push	{r3, r4, r5, lr}
 808d2a4:	fb02 f401 	mul.w	r4, r2, r1
 808d2a8:	4621      	mov	r1, r4
 808d2aa:	f7f8 feb1 	bl	8086010 <_malloc_r>
 808d2ae:	4605      	mov	r5, r0
 808d2b0:	b118      	cbz	r0, 808d2ba <_calloc_r+0x18>
 808d2b2:	4622      	mov	r2, r4
 808d2b4:	2100      	movs	r1, #0
 808d2b6:	f7fd f94b 	bl	808a550 <memset>
 808d2ba:	4628      	mov	r0, r5
 808d2bc:	bd38      	pop	{r3, r4, r5, pc}

0808d2be <__env_lock>:
 808d2be:	4770      	bx	lr

0808d2c0 <__env_unlock>:
 808d2c0:	4770      	bx	lr

0808d2c2 <link_code_end>:
	...

0808d2c4 <dynalib_user>:
 808d2c4:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808d2d4:	0000 0000                                   ....

0808d2d8 <_ZTVN8particle13__SPISettingsE>:
	...
 808d2e0:	0169 0808                                   i...

0808d2e4 <_ZTC16ArduinoOutStream0_7ostream>:
 808d2e4:	0008 0000 0000 0000 0000 0000 00b1 0808     ................
 808d2f4:	00b1 0808 00b1 0808 00b1 0808 00b1 0808     ................
 808d304:	00b1 0808                                   ....

0808d308 <_ZTT16ArduinoOutStream>:
 808d308:	d31c 0808 d2f0 0808                         ........

0808d310 <_ZTV16ArduinoOutStream>:
 808d310:	0008 0000 0000 0000 0000 0000 00d5 0808     ................
 808d320:	01d5 0808 00f7 0808 00fb 0808 00ff 0808     ................
 808d330:	0103 0808                                   ....

0808d334 <_ZTV6SdFile>:
	...
 808d33c:	0123 0808 0153 0808 0205 0808 0161 0808     #...S.......a...
 808d34c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
 808d35c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
 808d36c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
 808d37c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
 808d38c:	2545 3e64 6100 7070 6477 0074 6164 6574     E%d>.appwdt.date
 808d39c:	6974 656d 202c 3174 202c 3274 202c 7053     time, t1, t2, Sp
 808d3ac:	435f 2c20 7641 6c6f 7374 202c 6172 6e69     _C ,Avolts, rain
 808d3bc:	202c 6564 7470 2c68 5320 436f 202c 6f76     , depth, SoC, vo
 808d3cc:	746c 0073 6f4e 0020 6559 2073 6c00 736f     lts.No .Yes .los
 808d3dc:	2d74 6974 656d 3030 2e30 7363 0076 005f     t-time000.csv._.
 808d3ec:	5925 252d 2d6d 6425 2000 6966 656c 616e     %Y-%m-%d. filena
 808d3fc:	656d 7700 6972 6574 6520 7272 726f 4c00     me.write error.L
 808d40c:	676f 5300 2d44 7277 7469 2065 6f77 6b72     og.SD-write work
 808d41c:	6465 203a 7325 5200 6961 006e 7548 696d     ed: %s.Rain.Humi
 808d42c:	6964 7974 255f 4100 7269 542d 6d65 5f70     dity_%.Air-Temp_
 808d43c:	0043 7250 7365 7573 6572 685f 4150 4800     C.Pressure_hPA.H
 808d44c:	4f32 542d 6d65 5f70 0043 3248 5f4f 5068     2O-Temp_C.H2O_hP
 808d45c:	0041 6544 7470 5f68 6e69 5600 6c6f 7374     A.Depth_in.Volts
 808d46c:	5300 434f 5300 5f70 6f43 646e 4100 762e     .SOC.Sp_Cond.A.v
 808d47c:	6c6f 7374 2c00 2520 3530 322e 2c66 2520     olts., %05.2f, %
 808d48c:	3530 322e 2c66 2520 3630 312e 2c66 2520     05.2f, %06.1f, %
 808d49c:	3530 332e 2c66 2520 3430 302e 2c66 2520     05.3f, %04.0f, %
 808d4ac:	3630 332e 2c66 2520 3530 322e 2c66 2520     06.3f, %05.2f, %
 808d4bc:	3430 322e 0066 6143 656d 6172 4620 756f     04.2f.Camera Fou
 808d4cc:	646e 003a 6f4e 6320 6d61 7265 2061 6f66     nd:.No camera fo
 808d4dc:	6e75 3f64 4600 6961 656c 2064 6f74 6720     und?.Failed to g
 808d4ec:	7465 7620 7265 6973 6e6f 5300 616e 2070     et version.Snap 
 808d4fc:	6e69 3120 7320 6365 2e73 2e2e 4600 6961     in 1 secs....Fai
 808d50c:	656c 2064 6f74 7320 616e 2170 5000 6369     led to snap!.Pic
 808d51c:	7574 6572 7420 6b61 6e65 0021 6f6c 7473     ture taken!.lost
 808d52c:	742d 6d69 3065 3030 6a2e 6770 2500 2d59     -time000.jpg.%Y-
 808d53c:	6d25 252d 2d64 4825 252d 004d 6220 7479     %m-%d-%H-%M. byt
 808d54c:	2065 6d69 6761 2e65 0020 6d20 2073 6c65     e image. . ms el
 808d55c:	7061 6573 0064 4c0a 7369 2074 666f 6620     apsed..List of f
 808d56c:	6c69 7365 6f20 206e 6874 2065 4453 0a2e     iles on the SD..
 808d57c:	4400 6669 6966 7563 746c 2079 6f63 6e6e     .Difficulty conn
 808d58c:	6365 6974 676e 202e 6957 6c6c 7420 7972     ecting. Will try
 808d59c:	6620 726f 3120 6d20 726f 2065 696d 006e      for 1 more min.
 808d5ac:	7320 656c 7065 6e69 2067 6f66 2072 3225      sleeping for %2
 808d5bc:	2069 696d 756e 6574 2073 6f74 7720 6961     i minutes to wai
 808d5cc:	2074 6f66 2072 6562 7474 7265 7420 6d69     t for better tim
 808d5dc:	2065 4400 6669 6966 7563 746c 2079 6f63     e .Difficulty co
 808d5ec:	6e6e 6365 6974 676e 7320 656c 7065 6e69     nnecting sleepin
 808d5fc:	0067 6170 7373 6465 7420 6568 4320 6c65     g.passed the Cel
 808d60c:	756c 616c 2e72 6572 6461 2079 6574 7473     lular.ready test
 808d61c:	6300 6e6f 656e 7463 6465 7000 7261 6974     .connected.parti
 808d62c:	6c63 0065 6543 6c6c 7551 6c61 4300 6c65     cle.CellQual.Cel
 808d63c:	536c 7274 6e65 5300 7570 6e64 6b69 302d     lStren.Spudnik-0
 808d64c:	6238 2500 2c73 7420 5f31 666f 7366 7465     8b.%s, t1_offset
 808d65c:	202c 3274 6f5f 6666 6573 2c74 6b20 635f     , t2_offset, k_c
 808d66c:	726f 6572 7463 6f69 2c6e 4120 762e 6c6f     orrection, A.vol
 808d67c:	7374 202c 7457 6d65 2c70 4420 7065 6874     ts, Wtemp, Depth
 808d68c:	695f 2c6e 2520 3530 322e 2c66 2520 3530     _in, %05.2f, %05
 808d69c:	322e 2c66 2520 3530 322e 2c66 2520 3530     .2f, %05.2f, %05
 808d6ac:	332e 2c66 2520 3530 322e 2c66 2520 3630     .3f, %05.2f, %06
 808d6bc:	332e 0066 227b 7441 6d65 4370 3a22 2522     .3f.{"AtempC":"%
 808d6cc:	3530 322e 2266 222c 3248 744f 6d65 2270     05.2f","H2Otemp"
 808d6dc:	223a 3025 2e35 6632 2c22 5322 4370 3a22     :"%05.2f","SpC":
 808d6ec:	2522 3630 312e 2266 202c 4122 6f76 746c     "%06.1f", "Avolt
 808d6fc:	2273 223a 3025 2e35 6633 2c22 7222 6961     s":"%05.3f","rai
 808d70c:	226e 223a 3025 2e34 6630 2c22 6422 7065     n":"%04.0f","dep
 808d71c:	6874 3a22 2522 3630 332e 2266 222c 4f53     th":"%06.3f","SO
 808d72c:	2243 223a 3025 2e35 6632 2c22 7622 6c6f     C":"%05.2f","vol
 808d73c:	7374 3a22 2522 3430 322e 2266 007d 6966     ts":"%04.2f"}.fi
 808d74c:	696e 6873 6465 7520 6c70 616f 6964 676e     nished uploading
 808d75c:	7500 6c70 616f 6564 2c64 7720 6c69 206c     .uploaded, will 
 808d76c:	6c73 6565 2070 6e69 2520 6932 7320 6365     sleep in %2i sec
 808d77c:	6e6f 7364 7300 656c 7065 6e69 2067 3225     onds.sleeping %2
 808d78c:	2069 696d 756e 6574 0073 6170 7472 6369     i minutes.partic
 808d79c:	656c 6f73 616c 3372 6330 2000 7325 6f5f     lesolar30c. %s_o
 808d7ac:	5f6e 7325 6c00 6e6f 0067 6e69 6420 6c65     n_%s.long.in del
 808d7bc:	7961 6954 656d 5000 7261 6974 6c63 0065     ayTime.Particle.
 808d7cc:	6f63 6c75 2064 6f6e 2074 6966 646e 6220     could not find b
 808d7dc:	656d 0031 624f 4469 746f 0073 6544 616c     me1.ObiDots.Dela
 808d7ec:	0079 6e65 6964 676e 7320 7465 7075 4200     y.ending setup.B
 808d7fc:	4642 2d46 324d 5958 4d7a 4849 786a 4976     BFF-M2XYzMIHjxvI
 808d80c:	4765 306a 5768 3837 6850 7732 5145 7950     eGj0hW78Ph2wEQPy
 808d81c:	366c 5400 6568 6572 6920 2073 6c61 6572     l6.There is alre
 808d82c:	6461 2079 6e61 6920 736e 6174 636e 2065     ady an instance 
 808d83c:	666f 5020 7261 6974 6c63 5365 666f 5374     of ParticleSoftS
 808d84c:	7265 6169 206c 7572 6e6e 6e69 2067 6e6f     erial running on
 808d85c:	7020 6e69 2073 5852 6425 2f20 5420 2558      pins RX%d / TX%
 808d86c:	0064 6c25 2075 6f6e 2074 7661 6961 616c     d.%lu not availa
 808d87c:	6c62 2165 5320 6c65 6365 6574 2064 6172     ble! Selected ra
 808d88c:	6574 2520 756c 0000                         te %lu..

0808d894 <_ZL7btTable>:
 808d894:	e100 0000 0009 0000 0010 0000 9600 0000     ................
 808d8a4:	0018 0000 0018 0000 7a12 0000 001f 0000     .........z......
 808d8b4:	001f 0000 7080 0000 0025 0000 0021 0000     .....p..%...!...
 808d8c4:	4b00 0000 003d 0000 0033 0000 3840 0000     .K..=...3...@8..
 808d8d4:	005a 0000 0044 0000 2580 0000 008c 0000     Z...D....%......
 808d8e4:	0068 0000 12c0 0000 0127 0000 00d0 0000     h.......'.......
 808d8f4:	0960 0000 0262 0000 01a1 0000 04b0 0000     `...b...........
 808d904:	04ce 0000 0341 0000 0258 0000 09c4 0000     ....A...X.......
 808d914:	0683 0000 012c 0000 1388 0000 0d05 0000     ....,...........
	...
 808d930:	7441 6574 706d 6974 676e 7420 206f 6572     Attempting to re
 808d940:	6f63 6e6e 6365 0074 7254 6979 676e 7420     connect.Trying t
 808d950:	206f 6f63 6e6e 6365 2074 6f74 0020 2c20     o connect to . ,
 808d960:	6120 7474 6d65 7470 6e20 6d75 6562 3a72      attempt number:
 808d970:	0020 6974 656d 756f 2c74 6320 756f 646c      .timeout, could
 808d980:	6e20 746f 7220 6165 2064 6e61 2079 6572      not read any re
 808d990:	7073 6e6f 6573 6620 6f72 206d 6874 2065     sponse from the 
 808d9a0:	6f68 7473 5300 7265 6576 2772 2073 6572     host.Server's re
 808d9b0:	7073 6e6f 6573 003a 2d0a 2d2d 2d2d 2d2d     sponse:..-------
 808d9c0:	2d2d 002d 4f50 5453 4f00 004b 4c7c 7c56     ---.POST.OK.|LV|
 808d9d0:	5000 7961 6f6c 6461 6620 726f 7220 7165     .Payload for req
 808d9e0:	6575 7473 003a 2d0a 2d2d 002d 564c 4500     uest:..----.LV.E
 808d9f0:	5252 524f 6320 756f 646c 6e20 746f 6320     RROR could not c
 808da00:	6e6f 656e 7463 7420 206f 6874 2065 6573     onnect to the se
 808da10:	7672 7265 4300 756f 646c 6e20 746f 6320     rver.Could not c
 808da20:	6e6f 656e 7463 7420 206f 6874 2065 6f68     onnect to the ho
 808da30:	7473 0000                                   st..

0808da34 <_ZTV6UbiTCP>:
	...
 808da3c:	3d95 0808 3c41 0808 3a4d 0808 6f59 2075     .=..A<..M:..You 
 808da4c:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
 808da5c:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
 808da6c:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
 808da7c:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
 808da8c:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
 808da9c:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
 808daac:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
 808dabc:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
 808dacc:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
 808dadc:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
 808daec:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
 808dafc:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
 808db0c:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
 808db1c:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
 808db2c:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
 808db3c:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
 808db4c:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
 808db5c:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
 808db6c:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
 808db7c:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
 808db8c:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
 808db9c:	474e 205d 6c70 6165 6573 6320 6f68 736f     NG] please choos
 808dbac:	2065 2061 6964 6666 7265 6e65 2074 6c63     e a different cl
 808dbbc:	756f 2064 7270 746f 636f 6c6f 6f20 2066     oud protocol of 
 808dbcc:	654d 6873 6920 206e 6874 2065 6255 6469     Mesh in the Ubid
 808dbdc:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
 808dbec:	575b 5241 494e 474e 205d 6f59 7275 6220     [WARNING] Your b
 808dbfc:	616f 6472 6420 656f 2073 6f6e 2074 7573     oard does not su
 808dc0c:	7070 726f 2074 6874 2065 656d 6873 7550     pport the meshPu
 808dc1c:	6c62 7369 5468 556f 6962 6f64 7374 2928     blishToUbidots()
 808dc2c:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808dc3c:	205d 6f59 7275 6220 616f 6472 6420 656f     ] Your board doe
 808dc4c:	2073 6f6e 2074 7573 7070 726f 2074 6874     s not support th
 808dc5c:	2065 656d 6873 6f4c 706f 2928 6d20 7465     e meshLoop() met
 808dc6c:	6f68 0064 575b 5241 494e 474e 205d 6f59     hod.[WARNING] Yo
 808dc7c:	7275 6220 616f 6472 6420 656f 2073 6f6e     ur board does no
 808dc8c:	2074 7573 7070 726f 2074 6874 2065 6573     t support the se
 808dc9c:	4374 6f6c 6475 7250 746f 636f 6c6f 2928     tCloudProtocol()
 808dcac:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808dcbc:	205d 6854 2065 654d 6873 5020 6f72 6f74     ] The Mesh Proto
 808dccc:	6f63 206c 7369 6e20 746f 7320 7075 6f70     col is not suppo
 808dcdc:	7472 6465 6920 206e 6874 7369 6420 7665     rted in this dev
 808dcec:	6369 2065 6f66 2072 6573 646e 6e69 2067     ice for sending 
 808dcfc:	6164 6174 5b00 6157 6e72 6e69 5d67 5420     data.[Warning] T
 808dd0c:	206f 6572 7274 6569 6576 6420 7461 2c61     o retrieve data,
 808dd1c:	7020 656c 7361 2065 6573 2074 2061 6176      please set a va
 808dd2c:	696c 2064 6c63 756f 2064 7270 746f 636f     lid cloud protoc
 808dd3c:	6c6f 6920 206e 6874 2065 6255 6469 746f     ol in the Ubidot
 808dd4c:	2073 6f63 736e 7274 6375 6f74 0072 6f59     s constructor.Yo
 808dd5c:	2075 7261 2065 6461 6964 676e 6d20 726f     u are adding mor
 808dd6c:	2065 6874 6e61 7420 6568 6d20 7861 6d69     e than the maxim
 808dd7c:	6d75 6f20 2066 6f63 736e 6365 7475 7669     um of consecutiv
 808dd8c:	2065 656b 2d79 6176 756c 7365 7020 6961     e key-values pai
 808dd9c:	7372 2500 2573 3d73 7325 2500 2473 2500     rs.%s%s=%s.%s$.%
 808ddac:	2273 7325 3a22 2522 2273 0000               s"%s":"%s"..

0808ddb8 <_ZTV7UbiHTTP>:
	...
 808ddc0:	4635 0808 4885 0808 4411 0808 7441 6574     5F...H...D..Atte
 808ddd0:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
 808dde0:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
 808ddf0:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
 808de00:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
 808de10:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
 808de20:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
 808de30:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
 808de40:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
 808de50:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
 808de60:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
 808de70:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
 808de80:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
 808de90:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
 808dea0:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
 808deb0:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
 808dec0:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
 808ded0:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
 808dee0:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
 808def0:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
 808df00:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
 808df10:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
 808df20:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
 808df30:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
 808df40:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

0808df4e <_ZStL19piecewise_construct>:
 808df4e:	5b00 6157 6e72 6e69 5d67 4320 756f 646c     .[Warning] Could
 808df5e:	6e20 746f 7320 6c6f 6576 4920 2050 6441      not solve IP Ad
 808df6e:	7264 7365 2073 666f 7420 6568 7220 6d65     dress of the rem
 808df7e:	746f 2065 6f68 7473 202c 6977 6874 7920     ote host, with y
 808df8e:	756f 2072 4e44 2053 6573 7574 2e70 2020     our DNS setup.  
 808df9e:	2020 2020 2020 2020 0a20 7355 6e69 2067              .Using 
 808dfae:	6564 6166 6c75 2074 6e49 7564 7473 6972     default Industri
 808dfbe:	6c61 5520 6962 6f64 7374 4920 3a50 3120     al Ubidots IP: 1
 808dfce:	3936 352e 2e35 3136 322e 3334 4500 5252     69.55.61.243.ERR
 808dfde:	524f 7320 6e65 6964 676e 7620 6c61 6575     OR sending value
 808dfee:	2073 6977 6874 5520 5044 0000 0000          s with UDP....

0808dffc <_ZTV6UbiUDP>:
	...
 808e004:	4f49 0808 4ed9 0808 4ee1 0808               IO...N...N..

0808e010 <_ZTV11UbiParticle>:
	...
 808e018:	508b 0808 5029 0808 5031 0808               .P..)P..1P..

0808e024 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808e024:	0800 1810 2820 3830                         .... (08

0808e02c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 808e034:	65d5 0808 65db 0808 69c3 0808 65e9 0808     .e...e...i...e..
 808e044:	65d7 0808                                   .e..

0808e048 <_ZTV9TCPClient>:
	...
 808e050:	3a51 0808 3a85 0808 657d 0808 6597 0808     Q:...:..}e...e..
 808e060:	66d1 0808 663b 0808 660d 0808 65bf 0808     .f..;f...f...e..
 808e070:	6779 0808 69dd 0808 666f 0808 6749 0808     yg...i..of..Ig..
 808e080:	68bb 0808 690d 0808 65a7 0808 687f 0808     .h...i...e...h..
 808e090:	65c1 0808 6977 6972 676e 5400 5043 6c43     .e..wiring.TCPCl
 808e0a0:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 808e0b0:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 808e0c0:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 808e0d0:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 808e0e0:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 808e0f0:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 808e100:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 808e110:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 808e120:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 808e130:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
 808e140:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 808e150:	3d20 0020 6e6c 6600 006e 6f63 6564 6400      = .ln.fn.code.d
 808e160:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 808e170:	6900 666e 006f 6177 6e72 7000 6e61 6369     .info.warn.panic
 808e180:	6100 6c6c 2500 302b 6433 253a 3230 0075     .all.%+03d:%02u.
 808e190:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 808e1a0:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

0808e1ac <_ZTV3UDP>:
	...
 808e1b4:	4b61 0808 4b81 0808 7011 0808 7137 0808     aK...K...p..7q..
 808e1c4:	6fd5 0808 7027 0808 7045 0808 705f 0808     .o..'p..Ep.._p..
 808e1d4:	7081 0808 70d1 0808 70f3 0808 6f89 0808     .p...p...p...o..
 808e1e4:	719d 0808 6fad 0808 72f1 0808 7205 0808     .q...o...r...r..
 808e1f4:	6fdd 0808 7315 0808 7161 0808 6fb9 0808     .o...s..aq...o..
 808e204:	6fc1 0808 6fd1 0808 7061 0808 fff0 ffff     .o...o..ap......
 808e214:	0000 0000 7079 0808                         ....yp..

0808e21c <_ZTV14CellularSignal>:
	...
 808e224:	7395 0808 73e5 0808 7397 0808 7425 0808     .s...s...s..%t..
 808e234:	739d 0808 73f5 0808 73c1 0808 74ab 0808     .s...s...s...t..
 808e244:	fffc ffff 0000 0000 74d5 0808               .........t..

0808e250 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808e258:	7751 0808 7757 0808 779b 0808 7765 0808     Qw..Ww...w..ew..
 808e268:	7753 0808                                   Sw..

0808e26c <_ZTV9IPAddress>:
	...
 808e274:	7d41 0808 7d31 0808 7d33 0808               A}..1}..3}..

0808e280 <_ZTV9USBSerial>:
	...
 808e288:	7df3 0808 7e43 0808 7e51 0808 6c1d 0808     .}..C~..Q~...l..
 808e298:	7e2f 0808 7df5 0808 7e0b 0808 7e3d 0808     /~...}...~..=~..
 808e2a8:	7e21 0808 7def 0808                         !~...}..

0808e2b0 <_ZTVN5spark13CellularClassE>:
	...
 808e2b8:	8135 0808 812b 0808 8121 0808 021d 0808     5...+...!.......
 808e2c8:	8115 0808 8109 0808 80fd 0808 80f5 0808     ................
 808e2d8:	80eb 0808 80e1 0808 809d 0808               ............

0808e2e4 <_ZTV11USARTSerial>:
	...
 808e2ec:	81e5 0808 8235 0808 8243 0808 6c1d 0808     ....5...C....l..
 808e2fc:	81f9 0808 821b 0808 8207 0808 822f 0808     ............/...
 808e30c:	81e7 0808 81eb 0808                         ........

0808e314 <_ZTV7TwoWire>:
	...
 808e31c:	831d 0808 8367 0808 833f 0808 831f 0808     ....g...?.......
 808e32c:	8347 0808 834f 0808 8357 0808 835f 0808     G...O...W..._...

0808e33c <_ZTVN5spark12NetworkClassE>:
	...
 808e344:	844f 0808 8459 0808 8463 0808 846d 0808     O...Y...c...m...
 808e354:	8477 0808 8483 0808 848f 0808 849b 0808     w...............
 808e364:	84a3 0808 84ad 0808 84b9 0808               ............

0808e370 <_ZSt7nothrow>:
	...

0808e371 <day_name.4723>:
 808e371:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808e381:	6972 6153 4a74                                   riSat

0808e386 <mon_name.4724>:
 808e386:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808e396:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808e3a6:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808e3b6:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808e3c6:	6425 000a                                   %d..

0808e3ca <_ctype_>:
 808e3ca:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808e3da:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808e3ea:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808e3fa:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808e40a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808e41a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808e42a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808e43a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808e44a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808e4cc <__sf_fake_stdin>:
	...

0808e4ec <__sf_fake_stdout>:
	...

0808e50c <__sf_fake_stderr>:
	...
 808e52c:	4f50 4953 0058 0000                         POSIX...

0808e534 <__month_lengths>:
 808e534:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808e544:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808e554:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808e564:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808e574:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808e584:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808e594:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808e5a4:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 808e5b4:	322e 0064 2a2e 0075 2e25 6433 2500 6c6c     .2d..*u.%.3d.%ll
 808e5c4:	0064 2e25 6432 253a 322e 3a64 2e25 6432     d.%.2d:%.2d:%.2d
 808e5d4:	2500 302b 6c33 2564 322e 646c 0000 0000     .%+03ld%.2ld....

0808e5e4 <fpi.5342>:
 808e5e4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808e5f4:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

0808e604 <fpinan.5378>:
 808e604:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808e614:	0000 0000                                   ....

0808e618 <tinytens>:
 808e618:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808e628:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808e638:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 808e648:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 808e658:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 808e668:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 808e678:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 808e688:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 808e698:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 808e6a8:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 808e6b8:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 808e6c8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 808e6d8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 808e6e8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 808e6f8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 808e708:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 808e718:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 808e728:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 808e738:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 808e748:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 808e758:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 808e768:	3a4d 5325 2520 0070                         M:%S %p.

0808e770 <_C_time_locale>:
 808e770:	e648 0808 e64c 0808 e650 0808 e654 0808     H...L...P...T...
 808e780:	e658 0808 e65c 0808 e660 0808 e664 0808     X...\...`...d...
 808e790:	e668 0808 e66c 0808 e670 0808 e674 0808     h...l...p...t...
 808e7a0:	e678 0808 e680 0808 e689 0808 e68f 0808     x...............
 808e7b0:	e658 0808 e695 0808 e69a 0808 e69f 0808     X...............
 808e7c0:	e6a6 0808 e6b0 0808 e6b8 0808 e6c1 0808     ................
 808e7d0:	e6ca 0808 e6ce 0808 e6d2 0808 e6d6 0808     ................
 808e7e0:	e6da 0808 e6de 0808 e6e2 0808 e6e6 0808     ................
 808e7f0:	e6ed 0808 e6f4 0808 e6fc 0808 e706 0808     ................
 808e800:	e70f 0808 e716 0808 e71f 0808 e728 0808     ............(...
 808e810:	e731 0808 e746 0808 e749 0808 e74c 0808     1...F...I...L...
 808e820:	e678 0808 e680 0808 e689 0808 e68f 0808     x...............
 808e830:	e658 0808 e695 0808 e69a 0808 e69f 0808     X...............
 808e840:	e6a6 0808 e6b0 0808 e6b8 0808 e6c1 0808     ................
 808e850:	e0d2 0808 e764 0808 df27 0808 df27 0808     ....d...'...'...
 808e860:	df27 0808 df27 0808 df27 0808 5a54 4700     '...'...'...TZ.G
 808e870:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808e880:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808e890:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808e8a0:	3a6e 6825 2575 006e                         n:%hu%n.

0808e8a8 <__mprec_tens>:
 808e8a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808e8b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808e8c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808e8d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808e8e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808e8f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808e908:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808e918:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808e928:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808e938:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808e948:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808e958:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808e968:	9db4 79d9 7843 44ea                         ...yCx.D

0808e970 <__mprec_bigtens>:
 808e970:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808e980:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808e990:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808e998 <p05.5385>:
 808e998:	0005 0000 0019 0000 007d 0000               ........}...

0808e9a4 <link_const_variable_data_end>:
 808e9a4:	080814c5 	.word	0x080814c5
 808e9a8:	080818e1 	.word	0x080818e1
 808e9ac:	080818e5 	.word	0x080818e5
 808e9b0:	080818e9 	.word	0x080818e9
 808e9b4:	08082005 	.word	0x08082005
 808e9b8:	08082009 	.word	0x08082009
 808e9bc:	08082083 	.word	0x08082083
 808e9c0:	080820d7 	.word	0x080820d7
 808e9c4:	08082911 	.word	0x08082911
 808e9c8:	08082b59 	.word	0x08082b59
 808e9cc:	08082b5d 	.word	0x08082b5d
 808e9d0:	08082e81 	.word	0x08082e81
 808e9d4:	08082e85 	.word	0x08082e85
 808e9d8:	08082e89 	.word	0x08082e89
 808e9dc:	080833c3 	.word	0x080833c3
 808e9e0:	080833c7 	.word	0x080833c7
 808e9e4:	080833cb 	.word	0x080833cb
 808e9e8:	08083471 	.word	0x08083471
 808e9ec:	080839fd 	.word	0x080839fd
 808e9f0:	08083a49 	.word	0x08083a49
 808e9f4:	08083e2d 	.word	0x08083e2d
 808e9f8:	08084331 	.word	0x08084331
 808e9fc:	0808440d 	.word	0x0808440d
 808ea00:	08084a59 	.word	0x08084a59
 808ea04:	08084e6d 	.word	0x08084e6d
 808ea08:	08084ec9 	.word	0x08084ec9
 808ea0c:	08085001 	.word	0x08085001
 808ea10:	080850f3 	.word	0x080850f3
 808ea14:	0808556d 	.word	0x0808556d
 808ea18:	080858c5 	.word	0x080858c5
 808ea1c:	08086549 	.word	0x08086549
 808ea20:	08086d4d 	.word	0x08086d4d
 808ea24:	08086f6d 	.word	0x08086f6d
 808ea28:	08087379 	.word	0x08087379
 808ea2c:	080881b5 	.word	0x080881b5
 808ea30:	0808851d 	.word	0x0808851d
 808ea34:	080889a5 	.word	0x080889a5
 808ea38:	08088c75 	.word	0x08088c75
 808ea3c:	08088cf9 	.word	0x08088cf9
 808ea40:	08088dbd 	.word	0x08088dbd
 808ea44:	08088e81 	.word	0x08088e81

0808ea48 <link_constructors_end>:
	...
