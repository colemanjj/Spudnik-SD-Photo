
g:/jsc/IoT/particle/Spudnik-SD-Photo/target/1.5.2/electron/Spudnik-SD-Photo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f810  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  0808f830  0808f830  0001f830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  0808f838  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000144  20000000  0808f83c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000fa0  20000144  20000144  00040144  2**2
                  ALLOC
  7 .module_info_suffix 00000028  0808f980  0808f980  0003f980  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0808f9a8  0808f9a8  0003f9a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00205bc4  00000000  00000000  0003f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002b9c8  00000000  00000000  00245570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00033661  00000000  00000000  00270f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003df0  00000000  00000000  002a4599  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006a10  00000000  00000000  002a8389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c947  00000000  00000000  002aed99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006bcd9  00000000  00000000  002fb6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d2e77  00000000  00000000  003673b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011c38  00000000  00000000  0043a230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00b f92e 	bl	808b292 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00b f94e 	bl	808b2de <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808f83c 	.word	0x0808f83c
 8080050:	20000144 	.word	0x20000144
 8080054:	20000144 	.word	0x20000144
 8080058:	200010e4 	.word	0x200010e4
 808005c:	200010e4 	.word	0x200010e4

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f008 f837 	bl	80880d4 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808f784 	.word	0x0808f784
 8080088:	0808f828 	.word	0x0808f828

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 bff0 	b.w	8081070 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fdb9 	bl	8080c08 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f007 bfdd 	b.w	8088058 <_post_loop>

0808009e <_Znwj>:
 808009e:	f005 bce1 	b.w	8085a64 <malloc>

080800a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80800a2:	f005 bcdf 	b.w	8085a64 <malloc>

080800a6 <_ZdlPv>:
 80800a6:	f005 bce5 	b.w	8085a74 <free>

080800aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800aa:	f005 bce3 	b.w	8085a74 <free>
	...

080800b0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80800b0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b2:	4a03      	ldr	r2, [pc, #12]	; (80800c0 <__cxa_pure_virtual+0x10>)
 80800b4:	2100      	movs	r1, #0
 80800b6:	200c      	movs	r0, #12
 80800b8:	f005 fbce 	bl	8085858 <panic_>
 80800bc:	e7fe      	b.n	80800bc <__cxa_pure_virtual+0xc>
 80800be:	bf00      	nop
 80800c0:	080854d9 	.word	0x080854d9

080800c4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c4:	7800      	ldrb	r0, [r0, #0]
 80800c6:	fab0 f080 	clz	r0, r0
 80800ca:	0940      	lsrs	r0, r0, #5
 80800cc:	4770      	bx	lr

080800ce <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ce:	2301      	movs	r3, #1
 80800d0:	7003      	strb	r3, [r0, #0]
 80800d2:	4770      	bx	lr

080800d4 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80800d4:	4770      	bx	lr

080800d6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800d6:	6a00      	ldr	r0, [r0, #32]
 80800d8:	6803      	ldr	r3, [r0, #0]
 80800da:	68db      	ldr	r3, [r3, #12]
 80800dc:	4718      	bx	r3

080800de <_ZN16ArduinoOutStream5putchEc>:
  /**
   * Internal do not use
   * \param[in] c
   */
  void putch(char c) {
    if (c == '\n') {
 80800de:	290a      	cmp	r1, #10
  /// @cond SHOW_PROTECTED
  /**
   * Internal do not use
   * \param[in] c
   */
  void putch(char c) {
 80800e0:	b570      	push	{r4, r5, r6, lr}
 80800e2:	4605      	mov	r5, r0
 80800e4:	460c      	mov	r4, r1
    if (c == '\n') {
 80800e6:	d104      	bne.n	80800f2 <_ZN16ArduinoOutStream5putchEc+0x14>
      m_pr->write('\r');
 80800e8:	6840      	ldr	r0, [r0, #4]
 80800ea:	210d      	movs	r1, #13
 80800ec:	6803      	ldr	r3, [r0, #0]
 80800ee:	689b      	ldr	r3, [r3, #8]
 80800f0:	4798      	blx	r3
    }
    m_pr->write(c);
 80800f2:	6868      	ldr	r0, [r5, #4]
 80800f4:	4621      	mov	r1, r4
  }
 80800f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   */
  void putch(char c) {
    if (c == '\n') {
      m_pr->write('\r');
    }
    m_pr->write(c);
 80800fa:	6803      	ldr	r3, [r0, #0]
 80800fc:	689b      	ldr	r3, [r3, #8]
 80800fe:	4718      	bx	r3

08080100 <_ZN16ArduinoOutStream7seekoffElN8ios_base7seekdirE>:
  }
  bool seekoff(off_type off, seekdir way) {
    (void)off;
    (void)way;
    return false;
  }
 8080100:	2000      	movs	r0, #0
 8080102:	4770      	bx	lr

08080104 <_ZN16ArduinoOutStream7seekposEm>:
  bool seekpos(pos_type pos) {
    (void)pos;
    return false;
  }
 8080104:	2000      	movs	r0, #0
 8080106:	4770      	bx	lr

08080108 <_ZN16ArduinoOutStream4syncEv>:
  bool sync() {
    return true;
  }
 8080108:	2001      	movs	r0, #1
 808010a:	4770      	bx	lr

0808010c <_ZN16ArduinoOutStream7tellposEv>:
  pos_type tellpos() {
    return 0;
  }
 808010c:	2000      	movs	r0, #0
 808010e:	4770      	bx	lr

08080110 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8080110:	6803      	ldr	r3, [r0, #0]
 8080112:	4718      	bx	r3

08080114 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080114:	2a01      	cmp	r2, #1
 8080116:	d002      	beq.n	808011e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 8080118:	2a02      	cmp	r2, #2
 808011a:	d002      	beq.n	8080122 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 808011c:	e004      	b.n	8080128 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808011e:	6001      	str	r1, [r0, #0]
	      break;
 8080120:	e002      	b.n	8080128 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080122:	680b      	ldr	r3, [r1, #0]
 8080124:	b100      	cbz	r0, 8080128 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 8080126:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080128:	2000      	movs	r0, #0
 808012a:	4770      	bx	lr

0808012c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 808012c:	4770      	bx	lr

0808012e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808012e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 8080130:	2301      	movs	r3, #1
 8080132:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8080134:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8080136:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 8080138:	b10b      	cbz	r3, 808013e <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 808013a:	68c0      	ldr	r0, [r0, #12]
 808013c:	e006      	b.n	808014c <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 808013e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8080140:	b128      	cbz	r0, 808014e <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080142:	6883      	ldr	r3, [r0, #8]
 8080144:	b90b      	cbnz	r3, 808014a <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 8080146:	f009 fc3d 	bl	80899c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808014a:	68c3      	ldr	r3, [r0, #12]
 808014c:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 808014e:	2301      	movs	r3, #1
 8080150:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 8080152:	2000      	movs	r0, #0
    }
 8080154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 8080158:	f005 ba1e 	b.w	8085598 <os_thread_exit>

0808015c <_ZN6SdFileD0Ev>:
 808015c:	b510      	push	{r4, lr}
 808015e:	4604      	mov	r4, r0
 8080160:	212c      	movs	r1, #44	; 0x2c
 8080162:	f009 fb63 	bl	808982c <_ZdlPvj>
 8080166:	4620      	mov	r0, r4
 8080168:	bd10      	pop	{r4, pc}
	...

0808016c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 808016c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808016e:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080170:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080172:	4608      	mov	r0, r1
 8080174:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 8080176:	b133      	cbz	r3, 8080186 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 8080178:	b93d      	cbnz	r5, 808018a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 808017a:	490c      	ldr	r1, [pc, #48]	; (80801ac <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 808017c:	b004      	add	sp, #16
 808017e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080182:	f006 baeb 	b.w	808675c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 8080186:	4b0a      	ldr	r3, [pc, #40]	; (80801b0 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 8080188:	e000      	b.n	808018c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 808018a:	4b0a      	ldr	r3, [pc, #40]	; (80801b4 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 808018c:	7b16      	ldrb	r6, [r2, #12]
 808018e:	4c0a      	ldr	r4, [pc, #40]	; (80801b8 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080190:	490a      	ldr	r1, [pc, #40]	; (80801bc <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080192:	7b52      	ldrb	r2, [r2, #13]
 8080194:	2e01      	cmp	r6, #1
 8080196:	bf08      	it	eq
 8080198:	4621      	moveq	r1, r4
 808019a:	9202      	str	r2, [sp, #8]
 808019c:	9101      	str	r1, [sp, #4]
 808019e:	9500      	str	r5, [sp, #0]
 80801a0:	4a07      	ldr	r2, [pc, #28]	; (80801c0 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80801a2:	2100      	movs	r1, #0
 80801a4:	f006 fb1a 	bl	80867dc <_ZN5Print11printf_implEbPKcz>
  }
 80801a8:	b004      	add	sp, #16
 80801aa:	bd70      	pop	{r4, r5, r6, pc}
 80801ac:	0808e275 	.word	0x0808e275
 80801b0:	0808ec97 	.word	0x0808ec97
 80801b4:	0808e264 	.word	0x0808e264
 80801b8:	0808e26d 	.word	0x0808e26d
 80801bc:	0808e271 	.word	0x0808e271
 80801c0:	0808e28b 	.word	0x0808e28b

080801c4 <_Z15watchdogHandlerv>:
  // Do as little as possible in this function, preferably just calling System.reset().
  // Do not attempt to Particle.publish(), use Cellular.command() 
  // or similar functions. You can save data to a retained variable
  // here safetly so you know the watchdog triggered when you restart.
  // In 2.0.0 and later, System.reset(RESET_NO_WAIT); prevents notifying the cloud of a pending reset
  System.reset();
 80801c4:	f005 bf11 	b.w	8085fea <_ZN11SystemClass5resetEv>

080801c8 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80801c8:	3008      	adds	r0, #8
 80801ca:	f002 ba25 	b.w	8082618 <_ZN7FatFile5writeEPKvj>

080801ce <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80801ce:	b510      	push	{r4, lr}
 80801d0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80801d2:	6880      	ldr	r0, [r0, #8]
 80801d4:	b108      	cbz	r0, 80801da <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80801d6:	f005 f9c7 	bl	8085568 <os_mutex_recursive_destroy>
 80801da:	4620      	mov	r0, r4
 80801dc:	bd10      	pop	{r4, pc}

080801de <_ZN16ArduinoOutStream6putstrEPKc>:
    if (c == '\n') {
      m_pr->write('\r');
    }
    m_pr->write(c);
  }
  void putstr(const char* str) {
 80801de:	b570      	push	{r4, r5, r6, lr}
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80801e0:	460c      	mov	r4, r1
 80801e2:	b159      	cbz	r1, 80801fc <_ZN16ArduinoOutStream6putstrEPKc+0x1e>
    m_pr->write(str);
 80801e4:	6845      	ldr	r5, [r0, #4]
      return write((const uint8_t *)str, strlen(str));
 80801e6:	4608      	mov	r0, r1
 80801e8:	f00b fe04 	bl	808bdf4 <strlen>
 80801ec:	682b      	ldr	r3, [r5, #0]
 80801ee:	4602      	mov	r2, r0
 80801f0:	4621      	mov	r1, r4
 80801f2:	4628      	mov	r0, r5
  }
 80801f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80801f8:	68db      	ldr	r3, [r3, #12]
 80801fa:	4718      	bx	r3
 80801fc:	bd70      	pop	{r4, r5, r6, pc}

080801fe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80801fe:	b510      	push	{r4, lr}
 8080200:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080202:	6800      	ldr	r0, [r0, #0]
 8080204:	b108      	cbz	r0, 808020a <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080206:	f005 fc35 	bl	8085a74 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808020a:	4620      	mov	r0, r4
 808020c:	bd10      	pop	{r4, pc}

0808020e <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808020e:	b507      	push	{r0, r1, r2, lr}
 8080210:	ab02      	add	r3, sp, #8
 8080212:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080216:	2201      	movs	r2, #1
 8080218:	4619      	mov	r1, r3
 808021a:	3008      	adds	r0, #8
 808021c:	f002 f9fc 	bl	8082618 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080220:	b003      	add	sp, #12
 8080222:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080228 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080228:	b510      	push	{r4, lr}
 808022a:	4604      	mov	r4, r0
 808022c:	4b09      	ldr	r3, [pc, #36]	; (8080254 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808022e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 8080230:	f006 fc54 	bl	8086adc <_ZN5spark10LogManager8instanceEv>
 8080234:	4621      	mov	r1, r4
 8080236:	f006 fe58 	bl	8086eea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 808023a:	f008 fb3b 	bl	80888b4 <_Z16_fetch_usbserialv>
 808023e:	f008 fb1f 	bl	8088880 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 8080242:	4620      	mov	r0, r4
 8080244:	4b04      	ldr	r3, [pc, #16]	; (8080258 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 8080246:	f840 3b04 	str.w	r3, [r0], #4
 808024a:	f006 fd55 	bl	8086cf8 <_ZN5spark6detail9LogFilterD1Ev>
    }
 808024e:	4620      	mov	r0, r4
 8080250:	bd10      	pop	{r4, pc}
 8080252:	bf00      	nop
 8080254:	0808e1ec 	.word	0x0808e1ec
 8080258:	0808e1d4 	.word	0x0808e1d4

0808025c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 808025c:	b510      	push	{r4, lr}
 808025e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 8080260:	f7ff ffe2 	bl	8080228 <_ZN5spark16SerialLogHandlerD1Ev>
 8080264:	4620      	mov	r0, r4
 8080266:	2124      	movs	r1, #36	; 0x24
 8080268:	f009 fae0 	bl	808982c <_ZdlPvj>
 808026c:	4620      	mov	r0, r4
 808026e:	bd10      	pop	{r4, pc}

08080270 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080270:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080272:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080274:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080276:	b113      	cbz	r3, 808027e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080278:	2203      	movs	r2, #3
 808027a:	4601      	mov	r1, r0
 808027c:	4798      	blx	r3
    }
 808027e:	4620      	mov	r0, r4
 8080280:	bd10      	pop	{r4, pc}
	...

08080284 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 8080284:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080286:	f005 f937 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808028a:	4b01      	ldr	r3, [pc, #4]	; (8080290 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 808028c:	6018      	str	r0, [r3, #0]
 808028e:	bd08      	pop	{r3, pc}
 8080290:	20000edc 	.word	0x20000edc

08080294 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
	}
	ApplicationWatchdog(std::chrono::milliseconds ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 8080294:	b570      	push	{r4, r5, r6, lr}
 8080296:	461d      	mov	r5, r3
 8080298:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808029a:	2300      	movs	r3, #0
 808029c:	4604      	mov	r4, r0
 808029e:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80802a0:	b122      	cbz	r2, 80802ac <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80802a2:	4b27      	ldr	r3, [pc, #156]	; (8080340 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80802a4:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80802a6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80802a8:	4b26      	ldr	r3, [pc, #152]	; (8080344 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 80802aa:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80802ac:	2300      	movs	r3, #0
 80802ae:	60e3      	str	r3, [r4, #12]
 80802b0:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80802b2:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80802b4:	b13b      	cbz	r3, 80802c6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80802b6:	2202      	movs	r2, #2
 80802b8:	a902      	add	r1, sp, #8
 80802ba:	1d20      	adds	r0, r4, #4
 80802bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80802be:	9b05      	ldr	r3, [sp, #20]
 80802c0:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 80802c2:	9b04      	ldr	r3, [sp, #16]
 80802c4:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80802c6:	4920      	ldr	r1, [pc, #128]	; (8080348 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb4>)
 80802c8:	2014      	movs	r0, #20
 80802ca:	f009 fab3 	bl	8089834 <_ZnwjRKSt9nothrow_t>
 80802ce:	b130      	cbz	r0, 80802de <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80802d0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80802d2:	7403      	strb	r3, [r0, #16]
 80802d4:	6003      	str	r3, [r0, #0]
 80802d6:	6043      	str	r3, [r0, #4]
 80802d8:	6083      	str	r3, [r0, #8]
 80802da:	60c3      	str	r3, [r0, #12]
 80802dc:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80802de:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80802e0:	b1a0      	cbz	r0, 808030c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 80802e2:	4b1a      	ldr	r3, [pc, #104]	; (808034c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb8>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80802e4:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 80802e6:	6083      	str	r3, [r0, #8]
 80802e8:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80802ea:	4919      	ldr	r1, [pc, #100]	; (8080350 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xbc>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80802ec:	60dc      	str	r4, [r3, #12]
 80802ee:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80802f0:	4b18      	ldr	r3, [pc, #96]	; (8080354 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xc0>)
 80802f2:	e88d 0021 	stmia.w	sp, {r0, r5}
 80802f6:	3004      	adds	r0, #4
 80802f8:	f005 f91e 	bl	8085538 <os_thread_create>
 80802fc:	b930      	cbnz	r0, 808030c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 80802fe:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 8080300:	7c1b      	ldrb	r3, [r3, #16]
 8080302:	b9a3      	cbnz	r3, 808032e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8080304:	2001      	movs	r0, #1
 8080306:	f005 f8df 	bl	80854c8 <HAL_Delay_Milliseconds>
 808030a:	e7f8      	b.n	80802fe <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808030c:	6965      	ldr	r5, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 808030e:	2300      	movs	r3, #0
 8080310:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8080312:	b165      	cbz	r5, 808032e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 8080314:	682e      	ldr	r6, [r5, #0]
 8080316:	b136      	cbz	r6, 8080326 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x92>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080318:	4630      	mov	r0, r6
 808031a:	f7ff ffa9 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 808031e:	2110      	movs	r1, #16
 8080320:	4630      	mov	r0, r6
 8080322:	f009 fa83 	bl	808982c <_ZdlPvj>
 8080326:	2114      	movs	r1, #20
 8080328:	4628      	mov	r0, r5
 808032a:	f009 fa7f 	bl	808982c <_ZdlPvj>
	{
		checkin();
 808032e:	f7ff ffa9 	bl	8080284 <_ZN19ApplicationWatchdog7checkinEv>
 8080332:	a802      	add	r0, sp, #8
 8080334:	f7ff ff9c 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 8080338:	4620      	mov	r0, r4
 808033a:	b006      	add	sp, #24
 808033c:	bd70      	pop	{r4, r5, r6, pc}
 808033e:	bf00      	nop
 8080340:	08080111 	.word	0x08080111
 8080344:	08080115 	.word	0x08080115
 8080348:	0808f14e 	.word	0x0808f14e
 808034c:	080896ed 	.word	0x080896ed
 8080350:	0808e2a9 	.word	0x0808e2a9
 8080354:	0808012f 	.word	0x0808012f

08080358 <_ZN7FatFile6existsEPKc>:
   * dirFile.exists("TOFIND.TXT") searches for "TOFIND.TXT" in  the directory
   * dirFile.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 8080358:	b500      	push	{lr}
 808035a:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808035c:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 808035e:	460a      	mov	r2, r1
 8080360:	4601      	mov	r1, r0
 8080362:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080364:	f88d 3004 	strb.w	r3, [sp, #4]
 8080368:	f88d 3005 	strb.w	r3, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 808036c:	f002 f8eb 	bl	8082546 <_ZN7FatFile4openEPS_PKci>
  }
 8080370:	b00b      	add	sp, #44	; 0x2c
 8080372:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080378 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 8080378:	4613      	mov	r3, r2
 808037a:	460a      	mov	r2, r1
 808037c:	4901      	ldr	r1, [pc, #4]	; (8080384 <_ZN7FatFile4openEPKci+0xc>)
 808037e:	6809      	ldr	r1, [r1, #0]
 8080380:	f002 b8e1 	b.w	8082546 <_ZN7FatFile4openEPS_PKci>
 8080384:	20000710 	.word	0x20000710

08080388 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080388:	b530      	push	{r4, r5, lr}
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 808038a:	4b1d      	ldr	r3, [pc, #116]	; (8080400 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 808038c:	b085      	sub	sp, #20
 808038e:	9300      	str	r3, [sp, #0]
 8080390:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080392:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 8080396:	f88d 3004 	strb.w	r3, [sp, #4]
 808039a:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 808039c:	4604      	mov	r4, r0
 808039e:	9302      	str	r3, [sp, #8]
 80803a0:	7b13      	ldrb	r3, [r2, #12]
 80803a2:	f88d 300c 	strb.w	r3, [sp, #12]
 80803a6:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80803a8:	460a      	mov	r2, r1
 80803aa:	f88d 300d 	strb.w	r3, [sp, #13]
 80803ae:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 80803b2:	466b      	mov	r3, sp
 80803b4:	4628      	mov	r0, r5
 80803b6:	f002 fd87 	bl	8082ec8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 80803ba:	b1f0      	cbz	r0, 80803fa <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80803bc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80803be:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 80803c2:	4628      	mov	r0, r5
 80803c4:	f002 f8b8 	bl	8082538 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80803c8:	2101      	movs	r1, #1
 80803ca:	4620      	mov	r0, r4
 80803cc:	f002 fc25 	bl	8082c1a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80803d0:	4601      	mov	r1, r0
 80803d2:	b168      	cbz	r0, 80803f0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 80803d4:	4621      	mov	r1, r4
 80803d6:	4628      	mov	r0, r5
 80803d8:	f001 fe99 	bl	808210e <_ZN7FatFile8openRootEP9FatVolume>
 80803dc:	b168      	cbz	r0, 80803fa <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 80803de:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80803e2:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 80803e6:	bf16      	itet	ne
 80803e8:	4b06      	ldrne	r3, [pc, #24]	; (8080404 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 80803ea:	4618      	moveq	r0, r3
 80803ec:	601d      	strne	r5, [r3, #0]
 80803ee:	e005      	b.n	80803fc <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 80803f0:	4620      	mov	r0, r4
 80803f2:	f002 fc12 	bl	8082c1a <_ZN9FatVolume4initEh>
 80803f6:	2800      	cmp	r0, #0
 80803f8:	d1ec      	bne.n	80803d4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 80803fa:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 80803fc:	b005      	add	sp, #20
 80803fe:	bd30      	pop	{r4, r5, pc}
 8080400:	0808e1c8 	.word	0x0808e1c8
 8080404:	20000710 	.word	0x20000710

08080408 <_Z5Blinkv>:

//*******************************************************************************************
//------------------------------ Functions --------------------------------------------------
//
void Blink()
     {
 8080408:	b510      	push	{r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808040a:	4c08      	ldr	r4, [pc, #32]	; (808042c <_Z5Blinkv+0x24>)
 808040c:	2101      	movs	r1, #1
 808040e:	8820      	ldrh	r0, [r4, #0]
 8080410:	f009 f8ff 	bl	8089612 <digitalWrite>
            delay(20);                   // Waits for a sec
 8080414:	2014      	movs	r0, #20
 8080416:	f007 fb45 	bl	8087aa4 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 808041a:	8820      	ldrh	r0, [r4, #0]
 808041c:	2100      	movs	r1, #0
 808041e:	f009 f8f8 	bl	8089612 <digitalWrite>
            delay(5);
          }
     }
 8080422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(20);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
 8080426:	2005      	movs	r0, #5
 8080428:	f007 bb3c 	b.w	8087aa4 <delay>
 808042c:	20000008 	.word	0x20000008

08080430 <_Z12LowBattBlinkv>:
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 8080430:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080432:	4d0a      	ldr	r5, [pc, #40]	; (808045c <_Z12LowBattBlinkv+0x2c>)
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 8080434:	2402      	movs	r4, #2
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080436:	2101      	movs	r1, #1
 8080438:	8828      	ldrh	r0, [r5, #0]
 808043a:	f009 f8ea 	bl	8089612 <digitalWrite>
            delay(2000);                   // Waits for a sec
 808043e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080442:	f007 fb2f 	bl	8087aa4 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080446:	2100      	movs	r1, #0
 8080448:	8828      	ldrh	r0, [r5, #0]
 808044a:	f009 f8e2 	bl	8089612 <digitalWrite>
            delay(2000);
 808044e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080452:	f007 fb27 	bl	8087aa4 <delay>
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
          for (size_t i = 0; i < 2; i++)
 8080456:	3c01      	subs	r4, #1
 8080458:	d1ed      	bne.n	8080436 <_Z12LowBattBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(2000);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(2000);
          }
     }
 808045a:	bd38      	pop	{r3, r4, r5, pc}
 808045c:	20000008 	.word	0x20000008

08080460 <_Z12checkBatteryff>:
            delay(50);
          }
     }
// set sleep time based on battery charge----------------------------
     int checkBattery(float charge,float V)
       {
 8080460:	b537      	push	{r0, r1, r2, r4, r5, lr}
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 8080462:	491d      	ldr	r1, [pc, #116]	; (80804d8 <_Z12checkBatteryff+0x78>)
            delay(50);
          }
     }
// set sleep time based on battery charge----------------------------
     int checkBattery(float charge,float V)
       {
 8080464:	4605      	mov	r5, r0
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 8080466:	f00a fbad 	bl	808abc4 <__aeabi_fcmpgt>
 808046a:	b328      	cbz	r0, 80804b8 <_Z12checkBatteryff+0x58>
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
 808046c:	491b      	ldr	r1, [pc, #108]	; (80804dc <_Z12checkBatteryff+0x7c>)
 808046e:	4628      	mov	r0, r5
 8080470:	f00a fba8 	bl	808abc4 <__aeabi_fcmpgt>
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
 8080474:	491a      	ldr	r1, [pc, #104]	; (80804e0 <_Z12checkBatteryff+0x80>)
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 8080476:	2800      	cmp	r0, #0
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
 8080478:	4628      	mov	r0, r5
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 808047a:	bf14      	ite	ne
 808047c:	2404      	movne	r4, #4
 808047e:	f44f 7416 	moveq.w	r4, #600	; 0x258
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
 8080482:	f00a fb9f 	bl	808abc4 <__aeabi_fcmpgt>
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
 8080486:	4917      	ldr	r1, [pc, #92]	; (80804e4 <_Z12checkBatteryff+0x84>)
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
 8080488:	2800      	cmp	r0, #0
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
 808048a:	4628      	mov	r0, r5
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
 808048c:	bf18      	it	ne
 808048e:	2402      	movne	r4, #2
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
 8080490:	f00a fb98 	bl	808abc4 <__aeabi_fcmpgt>
                                 if (charge>75 )   min = 1;     // 60 minutes
 8080494:	4914      	ldr	r1, [pc, #80]	; (80804e8 <_Z12checkBatteryff+0x88>)
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
 8080496:	2800      	cmp	r0, #0
                                 if (charge>75 )   min = 1;     // 60 minutes
 8080498:	4628      	mov	r0, r5
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
 808049a:	bf18      	it	ne
 808049c:	2402      	movne	r4, #2
                                 if (charge>75 )   min = 1;     // 60 minutes
 808049e:	f00a fb91 	bl	808abc4 <__aeabi_fcmpgt>
                                     if (charge>80 )   min = 1;      // 30 minutes;
 80804a2:	4912      	ldr	r1, [pc, #72]	; (80804ec <_Z12checkBatteryff+0x8c>)
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
                                 if (charge>75 )   min = 1;     // 60 minutes
 80804a4:	2800      	cmp	r0, #0
                                     if (charge>80 )   min = 1;      // 30 minutes;
 80804a6:	4628      	mov	r0, r5
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 4;    // 5 hours (300 min)
                     if (charge>50 )   min = 2;     // 2 hours (120 min)
                         if (charge>65 )   min = 2;   // 1.5 hours (90 min)
                                 if (charge>75 )   min = 1;     // 60 minutes
 80804a8:	bf18      	it	ne
 80804aa:	2401      	movne	r4, #1
                                     if (charge>80 )   min = 1;      // 30 minutes;
 80804ac:	f00a fb8a 	bl	808abc4 <__aeabi_fcmpgt>
 80804b0:	2800      	cmp	r0, #0
 80804b2:	bf18      	it	ne
 80804b4:	2401      	movne	r4, #1
 80804b6:	e00b      	b.n	80804d0 <_Z12checkBatteryff+0x70>
                else
                { // if battery below 12.5%, don't even try to connect but go to sleep for 9 hours
                   min = 432000;   // sleep 5 days if battery very low
              //   sprintf(publishStr, "not connecting, sleeping for %2i min to charge battery ", min);
              //     Serial.println(publishStr);
                   LowBattBlink();
 80804b8:	f7ff ffba 	bl	8080430 <_Z12LowBattBlinkv>
                   System.sleep(SLEEP_MODE_DEEP, sleepInterval * min);
 80804bc:	4b0c      	ldr	r3, [pc, #48]	; (80804f0 <_Z12checkBatteryff+0x90>)
 80804be:	4c0d      	ldr	r4, [pc, #52]	; (80804f4 <_Z12checkBatteryff+0x94>)
 80804c0:	681a      	ldr	r2, [r3, #0]
 80804c2:	4b0d      	ldr	r3, [pc, #52]	; (80804f8 <_Z12checkBatteryff+0x98>)
 80804c4:	4362      	muls	r2, r4
 80804c6:	681b      	ldr	r3, [r3, #0]
 80804c8:	2101      	movs	r1, #1
 80804ca:	4668      	mov	r0, sp
 80804cc:	f005 fd90 	bl	8085ff0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
                 }
           return min;
       }  // end of checkBattery
 80804d0:	4620      	mov	r0, r4
 80804d2:	b003      	add	sp, #12
 80804d4:	bd30      	pop	{r4, r5, pc}
 80804d6:	bf00      	nop
 80804d8:	41480000 	.word	0x41480000
 80804dc:	41c80000 	.word	0x41c80000
 80804e0:	42480000 	.word	0x42480000
 80804e4:	42820000 	.word	0x42820000
 80804e8:	42960000 	.word	0x42960000
 80804ec:	42a00000 	.word	0x42a00000
 80804f0:	20000028 	.word	0x20000028
 80804f4:	00069780 	.word	0x00069780
 80804f8:	2000067c 	.word	0x2000067c

080804fc <_Z12getMedianNumPii>:
   return averageVoltage;
  }  // end of getAvolts

// calculate a median for set of values in buffer ----------------------------------------
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
 80804fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80804fe:	008b      	lsls	r3, r1, #2
 8080500:	330a      	adds	r3, #10
 8080502:	f023 0307 	bic.w	r3, r3, #7
 8080506:	af00      	add	r7, sp, #0
 8080508:	ebad 0d03 	sub.w	sp, sp, r3
 808050c:	466b      	mov	r3, sp
 808050e:	1e4a      	subs	r2, r1, #1
 8080510:	2400      	movs	r4, #0
    for (byte i = 0; i<iFilterLen; i++)
 8080512:	b2e5      	uxtb	r5, r4
 8080514:	42a9      	cmp	r1, r5
 8080516:	f104 0401 	add.w	r4, r4, #1
 808051a:	dc01      	bgt.n	8080520 <_Z12getMedianNumPii+0x24>
 808051c:	2400      	movs	r4, #0
 808051e:	e010      	b.n	8080542 <_Z12getMedianNumPii+0x46>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
 8080520:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8080524:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
  }  // end of getAvolts

// calculate a median for set of values in buffer ----------------------------------------
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
 8080528:	e7f3      	b.n	8080512 <_Z12getMedianNumPii+0x16>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
           {  if (bTab[i] > bTab[i + 1])
 808052a:	6806      	ldr	r6, [r0, #0]
 808052c:	f850 ef04 	ldr.w	lr, [r0, #4]!
 8080530:	3501      	adds	r5, #1
 8080532:	4576      	cmp	r6, lr
 8080534:	dd02      	ble.n	808053c <_Z12getMedianNumPii+0x40>
              {  bTemp = bTab[i];
                 bTab[i] = bTab[i + 1];
 8080536:	f840 ec04 	str.w	lr, [r0, #-4]
                 bTab[i + 1] = bTemp;
 808053a:	6006      	str	r6, [r0, #0]
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 808053c:	4565      	cmp	r5, ip
 808053e:	dbf4      	blt.n	808052a <_Z12getMedianNumPii+0x2e>
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
 8080540:	3401      	adds	r4, #1
 8080542:	4294      	cmp	r4, r2
 8080544:	da04      	bge.n	8080550 <_Z12getMedianNumPii+0x54>
 8080546:	4618      	mov	r0, r3
 8080548:	2500      	movs	r5, #0
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 808054a:	ebc4 0c02 	rsb	ip, r4, r2
 808054e:	e7f5      	b.n	808053c <_Z12getMedianNumPii+0x40>
                 bTab[i] = bTab[i + 1];
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
 8080550:	f011 0f01 	tst.w	r1, #1
 8080554:	f04f 0402 	mov.w	r4, #2
 8080558:	bf01      	itttt	eq
 808055a:	fb91 f1f4 	sdiveq	r1, r1, r4
 808055e:	eb03 0281 	addeq.w	r2, r3, r1, lsl #2
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080562:	f853 0021 	ldreq.w	r0, [r3, r1, lsl #2]
 8080566:	f852 3c04 	ldreq.w	r3, [r2, #-4]
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 808056a:	bf13      	iteet	ne
 808056c:	fb92 f2f4 	sdivne	r2, r2, r4
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080570:	18c0      	addeq	r0, r0, r3
 8080572:	fb90 f0f4 	sdiveq	r0, r0, r4
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 8080576:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
  return bTemp;
} //end getmedianNum
 808057a:	46bd      	mov	sp, r7
 808057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080580 <_Z6getSpCv>:
           return min;
       }  // end of checkBattery

// get SpC value from sensor----------------------------------------------
  float getSpC()
   {
 8080580:	b5f0      	push	{r4, r5, r6, r7, lr}
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080582:	4d43      	ldr	r5, [pc, #268]	; (8080690 <_Z6getSpCv+0x110>)
           return min;
       }  // end of checkBattery

// get SpC value from sensor----------------------------------------------
  float getSpC()
   {
 8080584:	b0d1      	sub	sp, #324	; 0x144
      #define VREF 3.3      // analog reference voltage(Volt) of the ADC
      #define SCOUNT  40           // number of sample points to collect for averaging
      #define resolution 4095.0  // analog resolution of 4095 with Particle electron
      int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
 8080586:	2400      	movs	r4, #0
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080588:	8828      	ldrh	r0, [r5, #0]
 808058a:	f009 f85b 	bl	8089644 <analogRead>
 808058e:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
           analogBufferIndex++;
 8080592:	3401      	adds	r4, #1
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
 8080594:	2032      	movs	r0, #50	; 0x32
 8080596:	f007 fa85 	bl	8087aa4 <delay>
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 808059a:	2c28      	cmp	r4, #40	; 0x28
 808059c:	d1f4      	bne.n	8080588 <_Z6getSpCv+0x8>
 808059e:	2100      	movs	r1, #0
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
 80805a0:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 80805a4:	a828      	add	r0, sp, #160	; 0xa0
 80805a6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 80805aa:	3101      	adds	r1, #1
 80805ac:	2928      	cmp	r1, #40	; 0x28
 80805ae:	d1f7      	bne.n	80805a0 <_Z6getSpCv+0x20>
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 80805b0:	f7ff ffa4 	bl	80804fc <_Z12getMedianNumPii>
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
// hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
      SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 80805b4:	f00a f8f6 	bl	808a7a4 <__aeabi_i2f>
 80805b8:	4936      	ldr	r1, [pc, #216]	; (8080694 <_Z6getSpCv+0x114>)
 80805ba:	f00a f947 	bl	808a84c <__aeabi_fmul>
 80805be:	4936      	ldr	r1, [pc, #216]	; (8080698 <_Z6getSpCv+0x118>)
 80805c0:	f00a f9f8 	bl	808a9b4 <__aeabi_fdiv>
 80805c4:	f009 fcae 	bl	8089f24 <__aeabi_f2d>
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 80805c8:	a329      	add	r3, pc, #164	; (adr r3, 8080670 <_Z6getSpCv+0xf0>)
 80805ca:	e9d3 2300 	ldrd	r2, r3, [r3]
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
// hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
      SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 80805ce:	4604      	mov	r4, r0
 80805d0:	460d      	mov	r5, r1
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 80805d2:	f009 fcfb 	bl	8089fcc <__aeabi_dmul>
 80805d6:	4622      	mov	r2, r4
 80805d8:	462b      	mov	r3, r5
 80805da:	f009 fcf7 	bl	8089fcc <__aeabi_dmul>
 80805de:	4622      	mov	r2, r4
 80805e0:	462b      	mov	r3, r5
 80805e2:	f009 fcf3 	bl	8089fcc <__aeabi_dmul>
 80805e6:	a324      	add	r3, pc, #144	; (adr r3, 8080678 <_Z6getSpCv+0xf8>)
 80805e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805ec:	4606      	mov	r6, r0
 80805ee:	460f      	mov	r7, r1
 80805f0:	4620      	mov	r0, r4
 80805f2:	4629      	mov	r1, r5
 80805f4:	f009 fcea 	bl	8089fcc <__aeabi_dmul>
 80805f8:	4622      	mov	r2, r4
 80805fa:	462b      	mov	r3, r5
 80805fc:	f009 fce6 	bl	8089fcc <__aeabi_dmul>
 8080600:	4602      	mov	r2, r0
 8080602:	460b      	mov	r3, r1
 8080604:	4630      	mov	r0, r6
 8080606:	4639      	mov	r1, r7
 8080608:	f009 fb2e 	bl	8089c68 <__adddf3>
 808060c:	a31c      	add	r3, pc, #112	; (adr r3, 8080680 <_Z6getSpCv+0x100>)
 808060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080612:	4606      	mov	r6, r0
 8080614:	460f      	mov	r7, r1
 8080616:	4620      	mov	r0, r4
 8080618:	4629      	mov	r1, r5
 808061a:	f009 fcd7 	bl	8089fcc <__aeabi_dmul>
 808061e:	4602      	mov	r2, r0
 8080620:	460b      	mov	r3, r1
 8080622:	4630      	mov	r0, r6
 8080624:	4639      	mov	r1, r7
 8080626:	f009 fb1f 	bl	8089c68 <__adddf3>
                                            //made more stable by the median filtering algorithm, and convert to voltage value
///      Serial.print(t2);   // temperature comes from a different sensor, outside this function.
///      Serial.println(" deg.C at start");
///      Serial.print("median analog reading= "); Serial.println(getMedianNum(analogBufferTemp,SCOUNT));
///      Serial.print("averageVoltage= "); Serial.println(averageVoltage);
      float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 808062a:	4b1c      	ldr	r3, [pc, #112]	; (808069c <_Z6getSpCv+0x11c>)
*/
// coefficients for the following equation derived from calibration to
// hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
      SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 808062c:	4604      	mov	r4, r0
 808062e:	6818      	ldr	r0, [r3, #0]
 8080630:	460d      	mov	r5, r1
 8080632:	f009 fc77 	bl	8089f24 <__aeabi_f2d>
 8080636:	2200      	movs	r2, #0
 8080638:	4b19      	ldr	r3, [pc, #100]	; (80806a0 <_Z6getSpCv+0x120>)
 808063a:	f009 fb13 	bl	8089c64 <__aeabi_dsub>
 808063e:	a312      	add	r3, pc, #72	; (adr r3, 8080688 <_Z6getSpCv+0x108>)
 8080640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080644:	f009 fcc2 	bl	8089fcc <__aeabi_dmul>
 8080648:	2200      	movs	r2, #0
 808064a:	4b16      	ldr	r3, [pc, #88]	; (80806a4 <_Z6getSpCv+0x124>)
 808064c:	f009 fb0c 	bl	8089c68 <__adddf3>
 8080650:	f009 ff9e 	bl	808a590 <__aeabi_d2f>
 8080654:	f009 fc66 	bl	8089f24 <__aeabi_f2d>
 8080658:	4602      	mov	r2, r0
 808065a:	460b      	mov	r3, r1
 808065c:	4620      	mov	r0, r4
 808065e:	4629      	mov	r1, r5
 8080660:	f009 fdde 	bl	808a220 <__aeabi_ddiv>
 8080664:	f009 ff94 	bl	808a590 <__aeabi_d2f>

    //  Serial.print("SpC Value: ");
    //  Serial.println(SpC,2);
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC
 8080668:	b051      	add	sp, #324	; 0x144
 808066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808066c:	f3af 8000 	nop.w
 8080670:	8f5c28f6 	.word	0x8f5c28f6
 8080674:	4032d5c2 	.word	0x4032d5c2
 8080678:	20c49ba6 	.word	0x20c49ba6
 808067c:	4038d2b0 	.word	0x4038d2b0
 8080680:	4fdf3b64 	.word	0x4fdf3b64
 8080684:	4083818d 	.word	0x4083818d
 8080688:	6a7ef9db 	.word	0x6a7ef9db
 808068c:	3f9374bc 	.word	0x3f9374bc
 8080690:	20000010 	.word	0x20000010
 8080694:	40533333 	.word	0x40533333
 8080698:	457ff000 	.word	0x457ff000
 808069c:	20000024 	.word	0x20000024
 80806a0:	40390000 	.word	0x40390000
 80806a4:	3ff00000 	.word	0x3ff00000

080806a8 <_Z9getAvoltsv>:

// get averageVolts value from sensor.  -----------------------------------------------
      //  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 80806a8:	b530      	push	{r4, r5, lr}
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80806aa:	4d11      	ldr	r5, [pc, #68]	; (80806f0 <_Z9getAvoltsv+0x48>)
   }  // end of getSpC

// get averageVolts value from sensor.  -----------------------------------------------
      //  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 80806ac:	b0d1      	sub	sp, #324	; 0x144
     #define VREF 3.3      // analog reference voltage(Volt) of the ADC
     #define SCOUNT  40           // number of sample points to collect for averaging
     #define resolution 4095.0  // analog resolution of 4095 with Particle electron
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
 80806ae:	2400      	movs	r4, #0
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80806b0:	8828      	ldrh	r0, [r5, #0]
 80806b2:	f008 ffc7 	bl	8089644 <analogRead>
 80806b6:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
          analogBufferIndex++;
 80806ba:	3401      	adds	r4, #1
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
 80806bc:	2032      	movs	r0, #50	; 0x32
 80806be:	f007 f9f1 	bl	8087aa4 <delay>
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 80806c2:	2c28      	cmp	r4, #40	; 0x28
 80806c4:	d1f4      	bne.n	80806b0 <_Z9getAvoltsv+0x8>
 80806c6:	2100      	movs	r1, #0
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
 80806c8:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 80806cc:	a828      	add	r0, sp, #160	; 0xa0
 80806ce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
          analogBufferIndex++;
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 80806d2:	3101      	adds	r1, #1
 80806d4:	2928      	cmp	r1, #40	; 0x28
 80806d6:	d1f7      	bne.n	80806c8 <_Z9getAvoltsv+0x20>
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
        }
     averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 80806d8:	f7ff ff10 	bl	80804fc <_Z12getMedianNumPii>
             // remember particle board has analog resolution of 4095
             //made more stable by the median filtering algorithm, and convert to voltage value
   return averageVoltage;
 80806dc:	f00a f862 	bl	808a7a4 <__aeabi_i2f>
 80806e0:	4904      	ldr	r1, [pc, #16]	; (80806f4 <_Z9getAvoltsv+0x4c>)
 80806e2:	f00a f8b3 	bl	808a84c <__aeabi_fmul>
 80806e6:	4904      	ldr	r1, [pc, #16]	; (80806f8 <_Z9getAvoltsv+0x50>)
 80806e8:	f00a f964 	bl	808a9b4 <__aeabi_fdiv>
  }  // end of getAvolts
 80806ec:	b051      	add	sp, #324	; 0x144
 80806ee:	bd30      	pop	{r4, r5, pc}
 80806f0:	20000010 	.word	0x20000010
 80806f4:	40533333 	.word	0x40533333
 80806f8:	457ff000 	.word	0x457ff000

080806fc <_Z11writeHeaderv>:
            }
    }
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
  {
 80806fc:	b510      	push	{r4, lr}
    //  file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
    file.print(F("datetime, Atemp, H2Otemp, Sp_C , Avolts, rain, depth_in, humid, Apressure, H2Opressure, SoC, volts"));
 80806fe:	4c05      	ldr	r4, [pc, #20]	; (8080714 <_Z11writeHeaderv+0x18>)
 8080700:	4905      	ldr	r1, [pc, #20]	; (8080718 <_Z11writeHeaderv+0x1c>)
 8080702:	4620      	mov	r0, r4
 8080704:	f006 f831 	bl	808676a <_ZN5Print5printEPK19__FlashStringHelper>
    file.println();
 8080708:	4620      	mov	r0, r4
    }
 808070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Write data header.
void writeHeader()
  {
    //  file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
    file.print(F("datetime, Atemp, H2Otemp, Sp_C , Avolts, rain, depth_in, humid, Apressure, H2Opressure, SoC, volts"));
    file.println();
 808070e:	f006 b830 	b.w	8086772 <_ZN5Print7printlnEv>
 8080712:	bf00      	nop
 8080714:	20000680 	.word	0x20000680
 8080718:	0808e2b0 	.word	0x0808e2b0

0808071c <_Z8setup_SDv>:

//===========================SD FUNCTIONS=====================================

//setup the sd card -----------------------------------------
void setup_SD()
    {
 808071c:	b5f0      	push	{r4, r5, r6, r7, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 808071e:	4a53      	ldr	r2, [pc, #332]	; (808086c <_Z8setup_SDv+0x150>)
 8080720:	b08d      	sub	sp, #52	; 0x34
 8080722:	4b53      	ldr	r3, [pc, #332]	; (8080870 <_Z8setup_SDv+0x154>)
 8080724:	920a      	str	r2, [sp, #40]	; 0x28
 8080726:	2201      	movs	r2, #1
 8080728:	9308      	str	r3, [sp, #32]
 808072a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 808072e:	2300      	movs	r3, #0
      //char works[3];
       if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sprintf(works,"No ");   }
 8080730:	aa08      	add	r2, sp, #32
 8080732:	210c      	movs	r1, #12
 8080734:	484f      	ldr	r0, [pc, #316]	; (8080874 <_Z8setup_SDv+0x158>)
 8080736:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 808073a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 808073e:	f7ff fe23 	bl	8080388 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 8080742:	b908      	cbnz	r0, 8080748 <_Z8setup_SDv+0x2c>
 8080744:	494c      	ldr	r1, [pc, #304]	; (8080878 <_Z8setup_SDv+0x15c>)
 8080746:	e000      	b.n	808074a <_Z8setup_SDv+0x2e>
          else { sprintf(works,"Yes "); }
 8080748:	494c      	ldr	r1, [pc, #304]	; (808087c <_Z8setup_SDv+0x160>)
 808074a:	484d      	ldr	r0, [pc, #308]	; (8080880 <_Z8setup_SDv+0x164>)
 808074c:	f00a fe1a 	bl	808b384 <strcpy>
        Time.zone(-6);  // setup to CST time zone, which is part of the ISO8601 format        //**
 8080750:	484c      	ldr	r0, [pc, #304]	; (8080884 <_Z8setup_SDv+0x168>)
 8080752:	f007 f899 	bl	8087888 <_ZN9TimeClass4zoneEf>
        //if(Time.year() < 2020)

        if( !Time.isValid())
 8080756:	f007 f969 	bl	8087a2c <_ZN9TimeClass7isValidEv>
 808075a:	4e4b      	ldr	r6, [pc, #300]	; (8080888 <_Z8setup_SDv+0x16c>)
 808075c:	4604      	mov	r4, r0
 808075e:	bb78      	cbnz	r0, 80807c0 <_Z8setup_SDv+0xa4>
        {
               fileName = String("lost-time000.csv");       
 8080760:	494a      	ldr	r1, [pc, #296]	; (808088c <_Z8setup_SDv+0x170>)
 8080762:	a808      	add	r0, sp, #32
 8080764:	f005 ff3d 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080768:	a908      	add	r1, sp, #32
 808076a:	4630      	mov	r0, r6
 808076c:	f005 ff83 	bl	8086676 <_ZN6StringaSEOS_>
 8080770:	a808      	add	r0, sp, #32
 8080772:	f005 feef 	bl	8086554 <_ZN6StringD1Ev>
        for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 8080776:	270a      	movs	r7, #10

        if( !Time.isValid())
        {
               fileName = String("lost-time000.csv");       
        for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 8080778:	2109      	movs	r1, #9
 808077a:	4843      	ldr	r0, [pc, #268]	; (8080888 <_Z8setup_SDv+0x16c>)
 808077c:	f005 ffca 	bl	8086714 <_ZN6StringixEj>
 8080780:	2364      	movs	r3, #100	; 0x64
 8080782:	fb94 f3f3 	sdiv	r3, r4, r3
 8080786:	3330      	adds	r3, #48	; 0x30
 8080788:	7003      	strb	r3, [r0, #0]
 //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 808078a:	210a      	movs	r1, #10
 808078c:	483e      	ldr	r0, [pc, #248]	; (8080888 <_Z8setup_SDv+0x16c>)
 808078e:	f005 ffc1 	bl	8086714 <_ZN6StringixEj>
 8080792:	fb94 f5f7 	sdiv	r5, r4, r7
 8080796:	f105 0330 	add.w	r3, r5, #48	; 0x30
 808079a:	7003      	strb	r3, [r0, #0]
            fileName.String::operator[](11) = '0' + i%10;
 808079c:	210b      	movs	r1, #11
 808079e:	483a      	ldr	r0, [pc, #232]	; (8080888 <_Z8setup_SDv+0x16c>)
 80807a0:	f005 ffb8 	bl	8086714 <_ZN6StringixEj>
 80807a4:	fb07 4515 	mls	r5, r7, r5, r4
 80807a8:	3530      	adds	r5, #48	; 0x30
 80807aa:	7005      	strb	r5, [r0, #0]
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
 80807ac:	6831      	ldr	r1, [r6, #0]
 80807ae:	4838      	ldr	r0, [pc, #224]	; (8080890 <_Z8setup_SDv+0x174>)
 80807b0:	f7ff fdd2 	bl	8080358 <_ZN7FatFile6existsEPKc>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 80807b4:	b368      	cbz	r0, 8080812 <_Z8setup_SDv+0xf6>
        //if(Time.year() < 2020)

        if( !Time.isValid())
        {
               fileName = String("lost-time000.csv");       
        for (int i = 0; i < 1000; i++) {
 80807b6:	3401      	adds	r4, #1
 80807b8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80807bc:	d1dc      	bne.n	8080778 <_Z8setup_SDv+0x5c>
 80807be:	e028      	b.n	8080812 <_Z8setup_SDv+0xf6>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80807c0:	4934      	ldr	r1, [pc, #208]	; (8080894 <_Z8setup_SDv+0x178>)
 80807c2:	4668      	mov	r0, sp
 80807c4:	f005 ff4c 	bl	8086660 <_ZN6StringC1ERKS_>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
          }
        }
          else
             fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%m-%d") + ".csv");    //**
 80807c8:	4933      	ldr	r1, [pc, #204]	; (8080898 <_Z8setup_SDv+0x17c>)
 80807ca:	4668      	mov	r0, sp
 80807cc:	f005 ff7e 	bl	80866cc <_ZplRK15StringSumHelperPKc>
 80807d0:	4604      	mov	r4, r0
 80807d2:	f007 f94c 	bl	8087a6e <_ZN9TimeClass3nowEv>
 80807d6:	4b31      	ldr	r3, [pc, #196]	; (808089c <_Z8setup_SDv+0x180>)
 80807d8:	4602      	mov	r2, r0
 80807da:	4931      	ldr	r1, [pc, #196]	; (80808a0 <_Z8setup_SDv+0x184>)
 80807dc:	a804      	add	r0, sp, #16
 80807de:	f007 f8f3 	bl	80879c8 <_ZN9TimeClass6formatElPKc>
 80807e2:	a904      	add	r1, sp, #16
 80807e4:	4620      	mov	r0, r4
 80807e6:	f005 ff65 	bl	80866b4 <_ZplRK15StringSumHelperRK6String>
 80807ea:	492e      	ldr	r1, [pc, #184]	; (80808a4 <_Z8setup_SDv+0x188>)
 80807ec:	f005 ff6e 	bl	80866cc <_ZplRK15StringSumHelperPKc>
 80807f0:	4601      	mov	r1, r0
 80807f2:	a808      	add	r0, sp, #32
 80807f4:	f005 ff34 	bl	8086660 <_ZN6StringC1ERKS_>
 80807f8:	a908      	add	r1, sp, #32
 80807fa:	4630      	mov	r0, r6
 80807fc:	f005 ff3b 	bl	8086676 <_ZN6StringaSEOS_>
 8080800:	a808      	add	r0, sp, #32
 8080802:	f005 fea7 	bl	8086554 <_ZN6StringD1Ev>
 8080806:	a804      	add	r0, sp, #16
 8080808:	f005 fea4 	bl	8086554 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808080c:	4668      	mov	r0, sp
 808080e:	f005 fea1 	bl	8086554 <_ZN6StringD1Ev>
        Serial.println(fileName + " filename");
 8080812:	f008 f84f 	bl	80888b4 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080816:	4c1c      	ldr	r4, [pc, #112]	; (8080888 <_Z8setup_SDv+0x16c>)
 8080818:	4605      	mov	r5, r0
 808081a:	4621      	mov	r1, r4
 808081c:	a808      	add	r0, sp, #32
 808081e:	f005 ff1f 	bl	8086660 <_ZN6StringC1ERKS_>
 8080822:	4921      	ldr	r1, [pc, #132]	; (80808a8 <_Z8setup_SDv+0x18c>)
 8080824:	a808      	add	r0, sp, #32
 8080826:	f005 ff51 	bl	80866cc <_ZplRK15StringSumHelperPKc>
 808082a:	6801      	ldr	r1, [r0, #0]
 808082c:	4628      	mov	r0, r5
 808082e:	f005 ffac 	bl	808678a <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080832:	a808      	add	r0, sp, #32
 8080834:	f005 fe8e 	bl	8086554 <_ZN6StringD1Ev>

        Serial.println(works);
 8080838:	f008 f83c 	bl	80888b4 <_Z16_fetch_usbserialv>
 808083c:	4910      	ldr	r1, [pc, #64]	; (8080880 <_Z8setup_SDv+0x164>)
 808083e:	f005 ffa4 	bl	808678a <_ZN5Print7printlnEPKc>
 8080842:	6831      	ldr	r1, [r6, #0]
 8080844:	4812      	ldr	r0, [pc, #72]	; (8080890 <_Z8setup_SDv+0x174>)
 8080846:	f7ff fd87 	bl	8080358 <_ZN7FatFile6existsEPKc>
        if(sd.exists(fileName))
 808084a:	b128      	cbz	r0, 8080858 <_Z8setup_SDv+0x13c>
            {  file.open(fileName, O_WRONLY | O_APPEND);  }
 808084c:	2209      	movs	r2, #9
 808084e:	6821      	ldr	r1, [r4, #0]
 8080850:	4816      	ldr	r0, [pc, #88]	; (80808ac <_Z8setup_SDv+0x190>)
 8080852:	f7ff fd91 	bl	8080378 <_ZN7FatFile4openEPKci>
 8080856:	e007      	b.n	8080868 <_Z8setup_SDv+0x14c>
            else
            {
                file.open(fileName, O_WRONLY |O_CREAT | O_EXCL);
 8080858:	f640 2201 	movw	r2, #2561	; 0xa01
 808085c:	6821      	ldr	r1, [r4, #0]
 808085e:	4813      	ldr	r0, [pc, #76]	; (80808ac <_Z8setup_SDv+0x190>)
 8080860:	f7ff fd8a 	bl	8080378 <_ZN7FatFile4openEPKci>
                writeHeader();
 8080864:	f7ff ff4a 	bl	80806fc <_Z11writeHeaderv>
            }
    }
 8080868:	b00d      	add	sp, #52	; 0x34
 808086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808086c:	01312d00 	.word	0x01312d00
 8080870:	0808e1c8 	.word	0x0808e1c8
 8080874:	20000164 	.word	0x20000164
 8080878:	0808e313 	.word	0x0808e313
 808087c:	0808e317 	.word	0x0808e317
 8080880:	2000070a 	.word	0x2000070a
 8080884:	c0c00000 	.word	0xc0c00000
 8080888:	200005e8 	.word	0x200005e8
 808088c:	0808e31c 	.word	0x0808e31c
 8080890:	200005a0 	.word	0x200005a0
 8080894:	2000065c 	.word	0x2000065c
 8080898:	0808e32d 	.word	0x0808e32d
 808089c:	0808e32f 	.word	0x0808e32f
 80808a0:	20000970 	.word	0x20000970
 80808a4:	0808e328 	.word	0x0808e328
 80808a8:	0808e338 	.word	0x0808e338
 80808ac:	20000688 	.word	0x20000688

080808b0 <_Z7logDataPc>:
    file.println();
    }
//------------------------------------------------------------------------------
// Log a data record.
void logData(char data[256])
    {
 80808b0:	b530      	push	{r4, r5, lr}
 80808b2:	b085      	sub	sp, #20
 80808b4:	4605      	mov	r5, r0
    // Write data to file.
        time_t time = Time.now();
 80808b6:	f007 f8da 	bl	8087a6e <_ZN9TimeClass3nowEv>
        file.print(Time.format(time, TIME_FORMAT_ISO8601_FULL)); // e.g. 2004-01-10T08:22:04-06:00
 80808ba:	4b10      	ldr	r3, [pc, #64]	; (80808fc <_Z7logDataPc+0x4c>)
 80808bc:	4c10      	ldr	r4, [pc, #64]	; (8080900 <_Z7logDataPc+0x50>)
 80808be:	4602      	mov	r2, r0
 80808c0:	681b      	ldr	r3, [r3, #0]
 80808c2:	4668      	mov	r0, sp
 80808c4:	490f      	ldr	r1, [pc, #60]	; (8080904 <_Z7logDataPc+0x54>)
 80808c6:	f007 f87f 	bl	80879c8 <_ZN9TimeClass6formatElPKc>
 80808ca:	9900      	ldr	r1, [sp, #0]
 80808cc:	4620      	mov	r0, r4
 80808ce:	f005 ff45 	bl	808675c <_ZN5Print5printEPKc>
 80808d2:	4668      	mov	r0, sp
 80808d4:	f005 fe3e 	bl	8086554 <_ZN6StringD1Ev>
        delay(500);
 80808d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80808dc:	f007 f8e2 	bl	8087aa4 <delay>
        file.print(data);
 80808e0:	4629      	mov	r1, r5
 80808e2:	4620      	mov	r0, r4
 80808e4:	f005 ff3a 	bl	808675c <_ZN5Print5printEPKc>
        file.println();
 80808e8:	4620      	mov	r0, r4
 80808ea:	f005 ff42 	bl	8086772 <_ZN5Print7printlnEv>
        Serial.println(data);
 80808ee:	f007 ffe1 	bl	80888b4 <_Z16_fetch_usbserialv>
 80808f2:	4629      	mov	r1, r5
 80808f4:	f005 ff49 	bl	808678a <_ZN5Print7printlnEPKc>
    }
 80808f8:	b005      	add	sp, #20
 80808fa:	bd30      	pop	{r4, r5, pc}
 80808fc:	20000050 	.word	0x20000050
 8080900:	20000680 	.word	0x20000680
 8080904:	20000970 	.word	0x20000970

08080908 <_Z9takePhotov>:
    else 
      {seconds=5; return -1; }
  }
//--------take Photo and store on SD--------------------------------------------
void takePhoto()
{
 8080908:	b5f0      	push	{r4, r5, r6, r7, lr}
 808090a:	b0ab      	sub	sp, #172	; 0xac
  camera_VC0706 cam(&Serial1);
 808090c:	f008 f98c 	bl	8088c28 <_Z22__fetch_global_Serial1v>
 8080910:	4601      	mov	r1, r0
 8080912:	a80d      	add	r0, sp, #52	; 0x34
 8080914:	f000 fdf1 	bl	80814fa <_ZN13camera_VC0706C1EP11USARTSerial>
  // locatecamera
  if (cam.begin()) {
 8080918:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 808091c:	a80d      	add	r0, sp, #52	; 0x34
 808091e:	f000 feb5 	bl	808168c <_ZN13camera_VC07065beginEt>
 8080922:	b118      	cbz	r0, 808092c <_Z9takePhotov+0x24>
    Serial.println("Camera Found:");
 8080924:	f007 ffc6 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080928:	496c      	ldr	r1, [pc, #432]	; (8080adc <_Z9takePhotov+0x1d4>)
 808092a:	e002      	b.n	8080932 <_Z9takePhotov+0x2a>
  } else {
    Serial.println("No camera found?");
 808092c:	f007 ffc2 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080930:	496b      	ldr	r1, [pc, #428]	; (8080ae0 <_Z9takePhotov+0x1d8>)
 8080932:	f005 ff2a 	bl	808678a <_ZN5Print7printlnEPKc>
     }
  // Print out the camera version information (optional)
  char *reply = cam.getVersion();
 8080936:	a80d      	add	r0, sp, #52	; 0x34
 8080938:	f000 fe4c 	bl	80815d4 <_ZN13camera_VC070610getVersionEv>
  if (reply == 0) {
 808093c:	4604      	mov	r4, r0
 808093e:	b120      	cbz	r0, 808094a <_Z9takePhotov+0x42>
 ///   Serial.print("Failed to get version");
    } else {
    //  Serial.println("-----------------");
      Serial.print(reply);
 8080940:	f007 ffb8 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080944:	4621      	mov	r1, r4
 8080946:	f005 ff09 	bl	808675c <_ZN5Print5printEPKc>
    //  Serial.println("-----------------");
    }
  Serial.println("Snap in 1/2 secs...");
 808094a:	f007 ffb3 	bl	80888b4 <_Z16_fetch_usbserialv>
 808094e:	4965      	ldr	r1, [pc, #404]	; (8080ae4 <_Z9takePhotov+0x1dc>)
 8080950:	f005 ff1b 	bl	808678a <_ZN5Print7printlnEPKc>
  delay(500);
 8080954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080958:	f007 f8a4 	bl	8087aa4 <delay>
  if (! cam.takePicture()) 
 808095c:	a80d      	add	r0, sp, #52	; 0x34
 808095e:	f000 feb5 	bl	80816cc <_ZN13camera_VC070611takePictureEv>
 8080962:	b918      	cbnz	r0, 808096c <_Z9takePhotov+0x64>
      Serial.println("Failed to snap!");
 8080964:	f007 ffa6 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080968:	495f      	ldr	r1, [pc, #380]	; (8080ae8 <_Z9takePhotov+0x1e0>)
 808096a:	e002      	b.n	8080972 <_Z9takePhotov+0x6a>
    else 
      Serial.println("Picture taken!");   
 808096c:	f007 ffa2 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080970:	495e      	ldr	r1, [pc, #376]	; (8080aec <_Z9takePhotov+0x1e4>)
 8080972:	f005 ff0a 	bl	808678a <_ZN5Print7printlnEPKc>

  // setupFile
  if(! Time.isValid()) 
 8080976:	f007 f859 	bl	8087a2c <_ZN9TimeClass7isValidEv>
 808097a:	4e5d      	ldr	r6, [pc, #372]	; (8080af0 <_Z9takePhotov+0x1e8>)
 808097c:	4604      	mov	r4, r0
 808097e:	bb78      	cbnz	r0, 80809e0 <_Z9takePhotov+0xd8>
        {
          fileName = String("lost-time000.jpg");       
 8080980:	495c      	ldr	r1, [pc, #368]	; (8080af4 <_Z9takePhotov+0x1ec>)
 8080982:	a809      	add	r0, sp, #36	; 0x24
 8080984:	f005 fe2d 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080988:	a909      	add	r1, sp, #36	; 0x24
 808098a:	4630      	mov	r0, r6
 808098c:	f005 fe73 	bl	8086676 <_ZN6StringaSEOS_>
 8080990:	a809      	add	r0, sp, #36	; 0x24
 8080992:	f005 fddf 	bl	8086554 <_ZN6StringD1Ev>
          for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
  //           strcpy(fileName, "lost-time000.jpg");  
  //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 8080996:	270a      	movs	r7, #10
  // setupFile
  if(! Time.isValid()) 
        {
          fileName = String("lost-time000.jpg");       
          for (int i = 0; i < 1000; i++) {
            fileName.String::operator[](9) = '0' + i/100;
 8080998:	2109      	movs	r1, #9
 808099a:	4855      	ldr	r0, [pc, #340]	; (8080af0 <_Z9takePhotov+0x1e8>)
 808099c:	f005 feba 	bl	8086714 <_ZN6StringixEj>
 80809a0:	2364      	movs	r3, #100	; 0x64
 80809a2:	fb94 f3f3 	sdiv	r3, r4, r3
 80809a6:	3330      	adds	r3, #48	; 0x30
 80809a8:	7003      	strb	r3, [r0, #0]
  //           strcpy(fileName, "lost-time000.jpg");  
  //           fileName[9] = '0' + i/100;
            fileName.String::operator[](10) = '0' + i/10;
 80809aa:	210a      	movs	r1, #10
 80809ac:	4850      	ldr	r0, [pc, #320]	; (8080af0 <_Z9takePhotov+0x1e8>)
 80809ae:	f005 feb1 	bl	8086714 <_ZN6StringixEj>
 80809b2:	fb94 f5f7 	sdiv	r5, r4, r7
 80809b6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80809ba:	7003      	strb	r3, [r0, #0]
            fileName.String::operator[](11) = '0' + i%10;
 80809bc:	210b      	movs	r1, #11
 80809be:	484c      	ldr	r0, [pc, #304]	; (8080af0 <_Z9takePhotov+0x1e8>)
 80809c0:	f005 fea8 	bl	8086714 <_ZN6StringixEj>
 80809c4:	fb07 4515 	mls	r5, r7, r5, r4
 80809c8:	3530      	adds	r5, #48	; 0x30
 80809ca:	7005      	strb	r5, [r0, #0]
 80809cc:	6831      	ldr	r1, [r6, #0]
 80809ce:	484a      	ldr	r0, [pc, #296]	; (8080af8 <_Z9takePhotov+0x1f0>)
 80809d0:	f7ff fcc2 	bl	8080358 <_ZN7FatFile6existsEPKc>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 80809d4:	b368      	cbz	r0, 8080a32 <_Z9takePhotov+0x12a>

  // setupFile
  if(! Time.isValid()) 
        {
          fileName = String("lost-time000.jpg");       
          for (int i = 0; i < 1000; i++) {
 80809d6:	3401      	adds	r4, #1
 80809d8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80809dc:	d1dc      	bne.n	8080998 <_Z9takePhotov+0x90>
 80809de:	e028      	b.n	8080a32 <_Z9takePhotov+0x12a>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80809e0:	4946      	ldr	r1, [pc, #280]	; (8080afc <_Z9takePhotov+0x1f4>)
 80809e2:	a801      	add	r0, sp, #4
 80809e4:	f005 fe3c 	bl	8086660 <_ZN6StringC1ERKS_>
          if (!sd.exists(fileName)) {  break;  }
          }
        }
        else
          {
           fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%m-%d-%H-%M") + ".jpg");    
 80809e8:	4945      	ldr	r1, [pc, #276]	; (8080b00 <_Z9takePhotov+0x1f8>)
 80809ea:	a801      	add	r0, sp, #4
 80809ec:	f005 fe6e 	bl	80866cc <_ZplRK15StringSumHelperPKc>
 80809f0:	4604      	mov	r4, r0
 80809f2:	f007 f83c 	bl	8087a6e <_ZN9TimeClass3nowEv>
 80809f6:	4b43      	ldr	r3, [pc, #268]	; (8080b04 <_Z9takePhotov+0x1fc>)
 80809f8:	4602      	mov	r2, r0
 80809fa:	4943      	ldr	r1, [pc, #268]	; (8080b08 <_Z9takePhotov+0x200>)
 80809fc:	a805      	add	r0, sp, #20
 80809fe:	f006 ffe3 	bl	80879c8 <_ZN9TimeClass6formatElPKc>
 8080a02:	a905      	add	r1, sp, #20
 8080a04:	4620      	mov	r0, r4
 8080a06:	f005 fe55 	bl	80866b4 <_ZplRK15StringSumHelperRK6String>
 8080a0a:	4940      	ldr	r1, [pc, #256]	; (8080b0c <_Z9takePhotov+0x204>)
 8080a0c:	f005 fe5e 	bl	80866cc <_ZplRK15StringSumHelperPKc>
 8080a10:	4601      	mov	r1, r0
 8080a12:	a809      	add	r0, sp, #36	; 0x24
 8080a14:	f005 fe24 	bl	8086660 <_ZN6StringC1ERKS_>
 8080a18:	a909      	add	r1, sp, #36	; 0x24
 8080a1a:	4630      	mov	r0, r6
 8080a1c:	f005 fe2b 	bl	8086676 <_ZN6StringaSEOS_>
 8080a20:	a809      	add	r0, sp, #36	; 0x24
 8080a22:	f005 fd97 	bl	8086554 <_ZN6StringD1Ev>
 8080a26:	a805      	add	r0, sp, #20
 8080a28:	f005 fd94 	bl	8086554 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080a2c:	a801      	add	r0, sp, #4
 8080a2e:	f005 fd91 	bl	8086554 <_ZN6StringD1Ev>
          ///  strcpy(fileName, hold); 
          }
  // Open the file for writing
    file.open(fileName, FILE_WRITE);
 8080a32:	6831      	ldr	r1, [r6, #0]
 8080a34:	f244 2202 	movw	r2, #16898	; 0x4202
 8080a38:	4835      	ldr	r0, [pc, #212]	; (8080b10 <_Z9takePhotov+0x208>)
 8080a3a:	f7ff fc9d 	bl	8080378 <_ZN7FatFile4openEPKci>

  // writePhotoToFile
  // Get the size of the image (frame) taken  
    uint16_t jpglen = cam.frameLength();
 8080a3e:	a80d      	add	r0, sp, #52	; 0x34
 8080a40:	f000 fe49 	bl	80816d6 <_ZN13camera_VC070611frameLengthEv>
 8080a44:	b284      	uxth	r4, r0
    Serial.print(jpglen, DEC);
 8080a46:	f007 ff35 	bl	80888b4 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080a4a:	220a      	movs	r2, #10
 8080a4c:	4621      	mov	r1, r4
 8080a4e:	f005 fea6 	bl	808679e <_ZN5Print11printNumberEmh>
    Serial.print(" byte image. ");
 8080a52:	f007 ff2f 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080a56:	492f      	ldr	r1, [pc, #188]	; (8080b14 <_Z9takePhotov+0x20c>)
 8080a58:	f005 fe80 	bl	808675c <_ZN5Print5printEPKc>
    Serial.println(fileName);
 8080a5c:	f007 ff2a 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080a60:	6831      	ldr	r1, [r6, #0]
 8080a62:	f005 fe92 	bl	808678a <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080a66:	f004 fd47 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>

    int32_t time = millis();
    pinMode(8, OUTPUT);
 8080a6a:	2101      	movs	r1, #1
 8080a6c:	4605      	mov	r5, r0
 8080a6e:	2008      	movs	r0, #8
 8080a70:	f008 fdbe 	bl	80895f0 <pinMode>
  // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
 8080a74:	2600      	movs	r6, #0
    while (jpglen > 0) {
 8080a76:	b1b4      	cbz	r4, 8080aa6 <_Z9takePhotov+0x19e>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 8080a78:	4627      	mov	r7, r4
 8080a7a:	2c40      	cmp	r4, #64	; 0x40
 8080a7c:	bfa8      	it	ge
 8080a7e:	2740      	movge	r7, #64	; 0x40
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
 8080a80:	b2f9      	uxtb	r1, r7
 8080a82:	a80d      	add	r0, sp, #52	; 0x34
 8080a84:	f000 fe43 	bl	808170e <_ZN13camera_VC070611readPictureEh>
      file.write(buffer, bytesToRead);
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080a88:	3601      	adds	r6, #1
    while (jpglen > 0) {
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      file.write(buffer, bytesToRead);
 8080a8a:	4601      	mov	r1, r0
 8080a8c:	463a      	mov	r2, r7
 8080a8e:	4822      	ldr	r0, [pc, #136]	; (8080b18 <_Z9takePhotov+0x210>)
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080a90:	b2f6      	uxtb	r6, r6
    while (jpglen > 0) {
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      file.write(buffer, bytesToRead);
 8080a92:	f7ff fb99 	bl	80801c8 <_ZN9PrintFile5writeEPKhj>
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080a96:	2e3f      	cmp	r6, #63	; 0x3f
 8080a98:	d902      	bls.n	8080aa0 <_Z9takePhotov+0x198>
      //  Serial.print('.');
        Blink();
 8080a9a:	f7ff fcb5 	bl	8080408 <_Z5Blinkv>
        wCount = 0;
 8080a9e:	2600      	movs	r6, #0
      }
      jpglen -= bytesToRead;
 8080aa0:	1be4      	subs	r4, r4, r7
 8080aa2:	b2a4      	uxth	r4, r4

    int32_t time = millis();
    pinMode(8, OUTPUT);
  // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
    while (jpglen > 0) {
 8080aa4:	e7e7      	b.n	8080a76 <_Z9takePhotov+0x16e>
        Blink();
        wCount = 0;
      }
      jpglen -= bytesToRead;
    }
    file.close();
 8080aa6:	481a      	ldr	r0, [pc, #104]	; (8080b10 <_Z9takePhotov+0x208>)
 8080aa8:	f001 fd46 	bl	8082538 <_ZN7FatFile5closeEv>
 8080aac:	f004 fd24 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
      time = millis() - time;
 8080ab0:	1b44      	subs	r4, r0, r5
      Serial.print(time); Serial.println(" ms elapsed");
 8080ab2:	f007 feff 	bl	80888b4 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8080ab6:	2c00      	cmp	r4, #0
 8080ab8:	4605      	mov	r5, r0
 8080aba:	da03      	bge.n	8080ac4 <_Z9takePhotov+0x1bc>
            t = print('-');
 8080abc:	212d      	movs	r1, #45	; 0x2d
 8080abe:	f005 fe51 	bl	8086764 <_ZN5Print5printEc>
            val = -n;
 8080ac2:	4264      	negs	r4, r4
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080ac4:	220a      	movs	r2, #10
 8080ac6:	4621      	mov	r1, r4
 8080ac8:	4628      	mov	r0, r5
 8080aca:	f005 fe68 	bl	808679e <_ZN5Print11printNumberEmh>
 8080ace:	f007 fef1 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080ad2:	4912      	ldr	r1, [pc, #72]	; (8080b1c <_Z9takePhotov+0x214>)
 8080ad4:	f005 fe59 	bl	808678a <_ZN5Print7printlnEPKc>
 8080ad8:	b02b      	add	sp, #172	; 0xac
 8080ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080adc:	0808e342 	.word	0x0808e342
 8080ae0:	0808e350 	.word	0x0808e350
 8080ae4:	0808e361 	.word	0x0808e361
 8080ae8:	0808e375 	.word	0x0808e375
 8080aec:	0808e385 	.word	0x0808e385
 8080af0:	200005e8 	.word	0x200005e8
 8080af4:	0808e394 	.word	0x0808e394
 8080af8:	200005a0 	.word	0x200005a0
 8080afc:	2000065c 	.word	0x2000065c
 8080b00:	0808e32d 	.word	0x0808e32d
 8080b04:	0808e3a5 	.word	0x0808e3a5
 8080b08:	20000970 	.word	0x20000970
 8080b0c:	0808e3a0 	.word	0x0808e3a0
 8080b10:	20000688 	.word	0x20000688
 8080b14:	0808e3b4 	.word	0x0808e3b4
 8080b18:	20000680 	.word	0x20000680
 8080b1c:	0808e3c2 	.word	0x0808e3c2

08080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080b20:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080b22:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080b24:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080b26:	b17c      	cbz	r4, 8080b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080b28:	6863      	ldr	r3, [r4, #4]
 8080b2a:	3b01      	subs	r3, #1
 8080b2c:	6063      	str	r3, [r4, #4]
 8080b2e:	b95b      	cbnz	r3, 8080b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080b30:	6823      	ldr	r3, [r4, #0]
 8080b32:	4620      	mov	r0, r4
 8080b34:	689b      	ldr	r3, [r3, #8]
 8080b36:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080b38:	68a3      	ldr	r3, [r4, #8]
 8080b3a:	3b01      	subs	r3, #1
 8080b3c:	60a3      	str	r3, [r4, #8]
 8080b3e:	b91b      	cbnz	r3, 8080b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080b40:	6823      	ldr	r3, [r4, #0]
 8080b42:	4620      	mov	r0, r4
 8080b44:	68db      	ldr	r3, [r3, #12]
 8080b46:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080b48:	4628      	mov	r0, r5
 8080b4a:	bd38      	pop	{r3, r4, r5, pc}

08080b4c <_Z8close_SDv>:
        Serial.println(data);
    }
//--------------------------------------------------------------------------------
//close down the SD card
void close_SD()
    {
 8080b4c:	b510      	push	{r4, lr}
    // Force data to SD and update the directory entry to avoid data loss.
     /// if (!file.sync() || file.getWriteError()) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 8080b4e:	4824      	ldr	r0, [pc, #144]	; (8080be0 <_Z8close_SDv+0x94>)
        Serial.println(data);
    }
//--------------------------------------------------------------------------------
//close down the SD card
void close_SD()
    {
 8080b50:	b086      	sub	sp, #24
    // Force data to SD and update the directory entry to avoid data loss.
     /// if (!file.sync() || file.getWriteError()) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 8080b52:	f001 fcbb 	bl	80824cc <_ZN7FatFile4syncEv>
 8080b56:	b960      	cbnz	r0, 8080b72 <_Z8close_SDv+0x26>
 8080b58:	4b22      	ldr	r3, [pc, #136]	; (8080be4 <_Z8close_SDv+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080b5a:	a802      	add	r0, sp, #8
 8080b5c:	781b      	ldrb	r3, [r3, #0]
 8080b5e:	4a22      	ldr	r2, [pc, #136]	; (8080be8 <_Z8close_SDv+0x9c>)
 8080b60:	f88d 3000 	strb.w	r3, [sp]
 8080b64:	4921      	ldr	r1, [pc, #132]	; (8080bec <_Z8close_SDv+0xa0>)
 8080b66:	233c      	movs	r3, #60	; 0x3c
 8080b68:	f007 fc4e 	bl	8088408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080b6c:	a803      	add	r0, sp, #12
 8080b6e:	f7ff ffd7 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080b72:	481b      	ldr	r0, [pc, #108]	; (8080be0 <_Z8close_SDv+0x94>)
 8080b74:	f001 fcaa 	bl	80824cc <_ZN7FatFile4syncEv>
 8080b78:	f004 fcbe 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8080b7c:	4604      	mov	r4, r0
 8080b7e:	f004 fcbb 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>

// a delay times using ms
inline void waitMS(uint32_t timeout)   // function to delay the system thread for the timeout period
{ // timeout == 0 waits forever
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
 8080b82:	1b00      	subs	r0, r0, r4
 8080b84:	28c7      	cmp	r0, #199	; 0xc7
 8080b86:	d804      	bhi.n	8080b92 <_Z8close_SDv+0x46>
		last_checkin = current_time();
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 8080b88:	f7ff fb7c 	bl	8080284 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080b8c:	f004 ff3a 	bl	8085a04 <spark_process>
 8080b90:	e7f5      	b.n	8080b7e <_Z8close_SDv+0x32>
        // Close file and stop.
        file.flush();
        waitMS(200);
      //  file.close();
        
      if ( file.close() )  {
 8080b92:	4813      	ldr	r0, [pc, #76]	; (8080be0 <_Z8close_SDv+0x94>)
 8080b94:	f001 fcd0 	bl	8082538 <_ZN7FatFile5closeEv>
 8080b98:	b150      	cbz	r0, 8080bb0 <_Z8close_SDv+0x64>
        sprintf(publishStr, "SD-write worked at %s", 
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 8080b9a:	f006 ff68 	bl	8087a6e <_ZN9TimeClass3nowEv>
 8080b9e:	4914      	ldr	r1, [pc, #80]	; (8080bf0 <_Z8close_SDv+0xa4>)
 8080ba0:	4602      	mov	r2, r0
 8080ba2:	4b14      	ldr	r3, [pc, #80]	; (8080bf4 <_Z8close_SDv+0xa8>)
 8080ba4:	a802      	add	r0, sp, #8
 8080ba6:	f006 ff0f 	bl	80879c8 <_ZN9TimeClass6formatElPKc>
 8080baa:	9a02      	ldr	r2, [sp, #8]
 8080bac:	4912      	ldr	r1, [pc, #72]	; (8080bf8 <_Z8close_SDv+0xac>)
 8080bae:	e009      	b.n	8080bc4 <_Z8close_SDv+0x78>
         Serial.println((publishStr));
        }
        else {
        sprintf(publishStr, "SD-write FAILED at %s", 
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 8080bb0:	f006 ff5d 	bl	8087a6e <_ZN9TimeClass3nowEv>
 8080bb4:	490e      	ldr	r1, [pc, #56]	; (8080bf0 <_Z8close_SDv+0xa4>)
 8080bb6:	4602      	mov	r2, r0
 8080bb8:	4b0e      	ldr	r3, [pc, #56]	; (8080bf4 <_Z8close_SDv+0xa8>)
 8080bba:	a802      	add	r0, sp, #8
 8080bbc:	f006 ff04 	bl	80879c8 <_ZN9TimeClass6formatElPKc>
 8080bc0:	9a02      	ldr	r2, [sp, #8]
 8080bc2:	490e      	ldr	r1, [pc, #56]	; (8080bfc <_Z8close_SDv+0xb0>)
 8080bc4:	480e      	ldr	r0, [pc, #56]	; (8080c00 <_Z8close_SDv+0xb4>)
 8080bc6:	f004 ff65 	bl	8085a94 <sprintf>
 8080bca:	a802      	add	r0, sp, #8
 8080bcc:	f005 fcc2 	bl	8086554 <_ZN6StringD1Ev>
         Serial.println((publishStr));
 8080bd0:	f007 fe70 	bl	80888b4 <_Z16_fetch_usbserialv>
 8080bd4:	490a      	ldr	r1, [pc, #40]	; (8080c00 <_Z8close_SDv+0xb4>)
 8080bd6:	f005 fdd8 	bl	808678a <_ZN5Print7printlnEPKc>
        }
      
    }
 8080bda:	b006      	add	sp, #24
 8080bdc:	bd10      	pop	{r4, pc}
 8080bde:	bf00      	nop
 8080be0:	20000688 	.word	0x20000688
 8080be4:	2000066c 	.word	0x2000066c
 8080be8:	0808e3ce 	.word	0x0808e3ce
 8080bec:	0808e3da 	.word	0x0808e3da
 8080bf0:	20000970 	.word	0x20000970
 8080bf4:	0808e3a5 	.word	0x0808e3a5
 8080bf8:	0808e3de 	.word	0x0808e3de
 8080bfc:	0808e3f4 	.word	0x0808e3f4
 8080c00:	200006ec 	.word	0x200006ec
 8080c04:	00000000 	.word	0x00000000

08080c08 <loop>:

 Serial.println("ending setup");
} // end setup()

//-----------LOOP
void loop() {  
 8080c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080c0c:	b0ef      	sub	sp, #444	; 0x1bc
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 8080c0e:	2100      	movs	r1, #0
 8080c10:	a81d      	add	r0, sp, #116	; 0x74
 8080c12:	f007 f969 	bl	8087ee8 <_ZN9FuelGaugeC1Eb>
  //--- get battery info
  float volts = fuel.getVCell();
 8080c16:	a81d      	add	r0, sp, #116	; 0x74
 8080c18:	f007 f9a6 	bl	8087f68 <_ZN9FuelGauge8getVCellEv>
 8080c1c:	4607      	mov	r7, r0
  float SoC = -99;
  SoC = fuel.getSoC();
 8080c1e:	a81d      	add	r0, sp, #116	; 0x74
 8080c20:	f007 f9b8 	bl	8087f94 <_ZN9FuelGauge6getSoCEv>
 8080c24:	4605      	mov	r5, r0
        Log.info("Battery state: %s", batteryStates[std::max(0, batteryState)]);
        Log.info("Battery charge: %f", batterySoc);
    }
*/
// setup the SD for logging the data
 setup_SD();
 8080c26:	f7ff fd79 	bl	808071c <_Z8setup_SDv>
  
//  set the deep sleep time based on the battery charge
 minutes = checkBattery(SoC,volts);
 8080c2a:	4639      	mov	r1, r7
 8080c2c:	4628      	mov	r0, r5
 8080c2e:	f7ff fc17 	bl	8080460 <_Z12checkBatteryff>
 8080c32:	4bbf      	ldr	r3, [pc, #764]	; (8080f30 <loop+0x328>)
  delay(200);
  // ---- get AIR temperature and humidity and pressure  // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 8080c34:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8080f44 <loop+0x33c>
*/
// setup the SD for logging the data
 setup_SD();
  
//  set the deep sleep time based on the battery charge
 minutes = checkBattery(SoC,volts);
 8080c38:	6018      	str	r0, [r3, #0]

  float rain = analogRead(RainPin);
 8080c3a:	4bbe      	ldr	r3, [pc, #760]	; (8080f34 <loop+0x32c>)
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080c3c:	f04f 0902 	mov.w	r9, #2
 setup_SD();
  
//  set the deep sleep time based on the battery charge
 minutes = checkBattery(SoC,volts);

  float rain = analogRead(RainPin);
 8080c40:	8818      	ldrh	r0, [r3, #0]
 8080c42:	f008 fcff 	bl	8089644 <analogRead>
 8080c46:	f009 fdad 	bl	808a7a4 <__aeabi_i2f>
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 8080c4a:	2100      	movs	r1, #0
 setup_SD();
  
//  set the deep sleep time based on the battery charge
 minutes = checkBattery(SoC,volts);

  float rain = analogRead(RainPin);
 8080c4c:	9017      	str	r0, [sp, #92]	; 0x5c
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 8080c4e:	2018      	movs	r0, #24
 8080c50:	f008 fcdf 	bl	8089612 <digitalWrite>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080c54:	20c8      	movs	r0, #200	; 0xc8
 8080c56:	f006 ff25 	bl	8087aa4 <delay>
  // ---- get AIR temperature and humidity and pressure  // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 8080c5a:	48b7      	ldr	r0, [pc, #732]	; (8080f38 <loop+0x330>)
 8080c5c:	f004 f8bc 	bl	8084dd8 <_ZN9CE_BME28015readTemperatureEv>
 8080c60:	f8ca 0000 	str.w	r0, [sl]
               h1 = bme1.readHumidity();
 8080c64:	48b4      	ldr	r0, [pc, #720]	; (8080f38 <loop+0x330>)
 8080c66:	f004 f9b1 	bl	8084fcc <_ZN9CE_BME28012readHumidityEv>
 8080c6a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8080f64 <loop+0x35c>
               p1 = bme1.readPressure()/100.0;
 8080c6e:	4eb3      	ldr	r6, [pc, #716]	; (8080f3c <loop+0x334>)
  // ---- get AIR temperature and humidity and pressure  // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
               h1 = bme1.readHumidity();
 8080c70:	f8c8 0000 	str.w	r0, [r8]
               p1 = bme1.readPressure()/100.0;
 8080c74:	48b0      	ldr	r0, [pc, #704]	; (8080f38 <loop+0x330>)
 8080c76:	f004 f8d9 	bl	8084e2c <_ZN9CE_BME28012readPressureEv>
 8080c7a:	49b1      	ldr	r1, [pc, #708]	; (8080f40 <loop+0x338>)
 8080c7c:	f009 fe9a 	bl	808a9b4 <__aeabi_fdiv>
 8080c80:	6030      	str	r0, [r6, #0]
               delay(200);
 8080c82:	20c8      	movs	r0, #200	; 0xc8
 8080c84:	f006 ff0e 	bl	8087aa4 <delay>
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
  // ---- get AIR temperature and humidity and pressure  // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080c88:	f1b9 0901 	subs.w	r9, r9, #1
 8080c8c:	4cad      	ldr	r4, [pc, #692]	; (8080f44 <loop+0x33c>)
 8080c8e:	d1e4      	bne.n	8080c5a <loop+0x52>
               h1 = bme1.readHumidity();
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
 8080c90:	f8d6 9000 	ldr.w	r9, [r6]
 8080c94:	4649      	mov	r1, r9
 8080c96:	4648      	mov	r0, r9
 8080c98:	f009 ff9e 	bl	808abd8 <__aeabi_fcmpun>
 8080c9c:	2800      	cmp	r0, #0
 8080c9e:	f040 81a2 	bne.w	8080fe6 <loop+0x3de>
 8080ca2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080ca6:	4648      	mov	r0, r9
 8080ca8:	f009 ff6e 	bl	808ab88 <__aeabi_fcmplt>
 8080cac:	2800      	cmp	r0, #0
 8080cae:	f040 819a 	bne.w	8080fe6 <loop+0x3de>
    // ---- get WATER temperature and pressure // from the BME280 using I2C connection. 
          // being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080cb2:	f8df a298 	ldr.w	sl, [pc, #664]	; 8080f4c <loop+0x344>
 minutes = checkBattery(SoC,volts);

  float rain = analogRead(RainPin);
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080cb6:	f04f 0902 	mov.w	r9, #2
    // ---- get WATER temperature and pressure // from the BME280 using I2C connection. 
          // being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080cba:	48a3      	ldr	r0, [pc, #652]	; (8080f48 <loop+0x340>)
 8080cbc:	f004 f88c 	bl	8084dd8 <_ZN9CE_BME28015readTemperatureEv>
 8080cc0:	f8ca 0000 	str.w	r0, [sl]
              p2 = bme2.readPressure()/100.0;
 8080cc4:	48a0      	ldr	r0, [pc, #640]	; (8080f48 <loop+0x340>)
 8080cc6:	f004 f8b1 	bl	8084e2c <_ZN9CE_BME28012readPressureEv>
 8080cca:	499d      	ldr	r1, [pc, #628]	; (8080f40 <loop+0x338>)
 8080ccc:	f009 fe72 	bl	808a9b4 <__aeabi_fdiv>
 8080cd0:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8080fa0 <loop+0x398>
 8080cd4:	f8c8 0000 	str.w	r0, [r8]
              delay(200);
 8080cd8:	20c8      	movs	r0, #200	; 0xc8
 8080cda:	f006 fee3 	bl	8087aa4 <delay>
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
    // ---- get WATER temperature and pressure // from the BME280 using I2C connection. 
          // being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080cde:	f1b9 0901 	subs.w	r9, r9, #1
 8080ce2:	d1ea      	bne.n	8080cba <loop+0xb2>
              p2 = bme2.readPressure()/100.0;
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
 8080ce4:	6831      	ldr	r1, [r6, #0]
 8080ce6:	4608      	mov	r0, r1
 8080ce8:	f009 ff76 	bl	808abd8 <__aeabi_fcmpun>
 8080cec:	2800      	cmp	r0, #0
 8080cee:	f040 8180 	bne.w	8080ff2 <loop+0x3ea>
 8080cf2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080cf6:	f8d8 0000 	ldr.w	r0, [r8]
 8080cfa:	f009 ff45 	bl	808ab88 <__aeabi_fcmplt>
 8080cfe:	2800      	cmp	r0, #0
 8080d00:	f040 8177 	bne.w	8080ff2 <loop+0x3ea>
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080d04:	6820      	ldr	r0, [r4, #0]
 8080d06:	f009 f90d 	bl	8089f24 <__aeabi_f2d>
 8080d0a:	a383      	add	r3, pc, #524	; (adr r3, 8080f18 <loop+0x310>)
 8080d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080d10:	f008 ffa8 	bl	8089c64 <__aeabi_dsub>
 8080d14:	f009 fc3c 	bl	808a590 <__aeabi_d2f>
        t2 = t2+t2_offset;
 8080d18:	4e8c      	ldr	r6, [pc, #560]	; (8080f4c <loop+0x344>)
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080d1a:	6020      	str	r0, [r4, #0]
        t2 = t2+t2_offset;
 8080d1c:	6830      	ldr	r0, [r6, #0]
 8080d1e:	f009 f901 	bl	8089f24 <__aeabi_f2d>
 8080d22:	a37f      	add	r3, pc, #508	; (adr r3, 8080f20 <loop+0x318>)
 8080d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080d28:	f008 ff9c 	bl	8089c64 <__aeabi_dsub>
 8080d2c:	f009 fc30 	bl	808a590 <__aeabi_d2f>
 8080d30:	6030      	str	r0, [r6, #0]

// ---- get WATER calculated Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
 8080d32:	f7ff fc25 	bl	8080580 <_Z6getSpCv>
 8080d36:	4986      	ldr	r1, [pc, #536]	; (8080f50 <loop+0x348>)
 8080d38:	f009 fd88 	bl	808a84c <__aeabi_fmul>
 8080d3c:	9018      	str	r0, [sp, #96]	; 0x60
    float Avolts = getAvolts();
 8080d3e:	f7ff fcb3 	bl	80806a8 <_Z9getAvoltsv>
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s  and camera
 8080d42:	2100      	movs	r1, #0
        t1 = t1+t1_offset;
        t2 = t2+t2_offset;

// ---- get WATER calculated Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
    float Avolts = getAvolts();
 8080d44:	4682      	mov	sl, r0
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s  and camera
 8080d46:	2003      	movs	r0, #3
 8080d48:	f008 fc63 	bl	8089612 <digitalWrite>
      //  digitalWrite(D6, LOW);	// not needed because all digital sensors run off D3
    ///digitalWrite(B0, LOW);	// for the rain sensor
        digitalWrite(B1, LOW);     //for the TDS-Sp.C sensor  
 8080d4c:	2100      	movs	r1, #0
 8080d4e:	2019      	movs	r0, #25
 8080d50:	f008 fc5f 	bl	8089612 <digitalWrite>
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);

//char Rain = "Rain";
char Rain[] = "Rain";
 8080d54:	4b7f      	ldr	r3, [pc, #508]	; (8080f54 <loop+0x34c>)
char AirT[] = "Air-Temp_C";
 8080d56:	4a80      	ldr	r2, [pc, #512]	; (8080f58 <loop+0x350>)
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);

//char Rain = "Rain";
char Rain[] = "Rain";
 8080d58:	6818      	ldr	r0, [r3, #0]
 8080d5a:	791b      	ldrb	r3, [r3, #4]
char AirT[] = "Air-Temp_C";
 8080d5c:	6851      	ldr	r1, [r2, #4]
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);

//char Rain = "Rain";
char Rain[] = "Rain";
 8080d5e:	901b      	str	r0, [sp, #108]	; 0x6c
char AirT[] = "Air-Temp_C";
 8080d60:	6810      	ldr	r0, [r2, #0]
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);

//char Rain = "Rain";
char Rain[] = "Rain";
 8080d62:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
char AirT[] = "Air-Temp_C";
 8080d66:	ab1f      	add	r3, sp, #124	; 0x7c
 8080d68:	c303      	stmia	r3!, {r0, r1}
 8080d6a:	8911      	ldrh	r1, [r2, #8]
 8080d6c:	7a92      	ldrb	r2, [r2, #10]
 8080d6e:	8019      	strh	r1, [r3, #0]
 8080d70:	709a      	strb	r2, [r3, #2]
char Humid[] = "Humidity_%";
 8080d72:	4a7a      	ldr	r2, [pc, #488]	; (8080f5c <loop+0x354>)
 8080d74:	ab22      	add	r3, sp, #136	; 0x88
 8080d76:	6810      	ldr	r0, [r2, #0]
 8080d78:	6851      	ldr	r1, [r2, #4]
  float depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8080d7a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8080fa0 <loop+0x398>
///	ubidots.add("time(UTC)",Time.now()/60);

//char Rain = "Rain";
char Rain[] = "Rain";
char AirT[] = "Air-Temp_C";
char Humid[] = "Humidity_%";
 8080d7e:	c303      	stmia	r3!, {r0, r1}
  float depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8080d80:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8080f3c <loop+0x334>
///	ubidots.add("time(UTC)",Time.now()/60);

//char Rain = "Rain";
char Rain[] = "Rain";
char AirT[] = "Air-Temp_C";
char Humid[] = "Humidity_%";
 8080d84:	8911      	ldrh	r1, [r2, #8]
 8080d86:	7a92      	ldrb	r2, [r2, #10]
 8080d88:	8019      	strh	r1, [r3, #0]
 8080d8a:	709a      	strb	r2, [r3, #2]
  float depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8080d8c:	f8d8 1000 	ldr.w	r1, [r8]
 8080d90:	f8d9 0000 	ldr.w	r0, [r9]
 8080d94:	f009 fc50 	bl	808a638 <__aeabi_fsub>
 8080d98:	f009 f8c4 	bl	8089f24 <__aeabi_f2d>
 8080d9c:	a362      	add	r3, pc, #392	; (adr r3, 8080f28 <loop+0x320>)
 8080d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080da2:	f009 f913 	bl	8089fcc <__aeabi_dmul>
 8080da6:	f009 fbf3 	bl	808a590 <__aeabi_d2f>
 8080daa:	4683      	mov	fp, r0

  ubidots.add(Rain, rain);
 8080dac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8080dae:	a91b      	add	r1, sp, #108	; 0x6c
 8080db0:	486b      	ldr	r0, [pc, #428]	; (8080f60 <loop+0x358>)
 8080db2:	f003 f891 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
	ubidots.add(Humid, h1);
 8080db6:	4b6b      	ldr	r3, [pc, #428]	; (8080f64 <loop+0x35c>)
 8080db8:	a922      	add	r1, sp, #136	; 0x88
 8080dba:	681a      	ldr	r2, [r3, #0]
 8080dbc:	4868      	ldr	r0, [pc, #416]	; (8080f60 <loop+0x358>)
 8080dbe:	9319      	str	r3, [sp, #100]	; 0x64
 8080dc0:	f003 f88a 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
	ubidots.add(AirT, t1);
 8080dc4:	6822      	ldr	r2, [r4, #0]
 8080dc6:	a91f      	add	r1, sp, #124	; 0x7c
 8080dc8:	4865      	ldr	r0, [pc, #404]	; (8080f60 <loop+0x358>)
 8080dca:	f003 f885 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("Pressure_hPA", p1);
 8080dce:	f8d8 2000 	ldr.w	r2, [r8]
 8080dd2:	4965      	ldr	r1, [pc, #404]	; (8080f68 <loop+0x360>)
 8080dd4:	4862      	ldr	r0, [pc, #392]	; (8080f60 <loop+0x358>)
 8080dd6:	f003 f87f 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O-Temp_C", t2);
 8080dda:	6832      	ldr	r2, [r6, #0]
 8080ddc:	4963      	ldr	r1, [pc, #396]	; (8080f6c <loop+0x364>)
 8080dde:	4860      	ldr	r0, [pc, #384]	; (8080f60 <loop+0x358>)
 8080de0:	f003 f87a 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O_hPA", p2);
 8080de4:	f8d9 2000 	ldr.w	r2, [r9]
 8080de8:	4961      	ldr	r1, [pc, #388]	; (8080f70 <loop+0x368>)
 8080dea:	485d      	ldr	r0, [pc, #372]	; (8080f60 <loop+0x358>)
 8080dec:	f003 f874 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("Depth_in", depth);
 8080df0:	465a      	mov	r2, fp
 8080df2:	4960      	ldr	r1, [pc, #384]	; (8080f74 <loop+0x36c>)
 8080df4:	485a      	ldr	r0, [pc, #360]	; (8080f60 <loop+0x358>)
 8080df6:	f003 f86f 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("Volts", volts);
 8080dfa:	463a      	mov	r2, r7
 8080dfc:	495e      	ldr	r1, [pc, #376]	; (8080f78 <loop+0x370>)
 8080dfe:	4858      	ldr	r0, [pc, #352]	; (8080f60 <loop+0x358>)
 8080e00:	f003 f86a 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("SOC", SoC);
 8080e04:	462a      	mov	r2, r5
 8080e06:	495d      	ldr	r1, [pc, #372]	; (8080f7c <loop+0x374>)
 8080e08:	4855      	ldr	r0, [pc, #340]	; (8080f60 <loop+0x358>)
 8080e0a:	f003 f865 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
   //if (t2 > -99.0)   // if reading water temperature was successful, send temp and Sp_Cond to Ubidots
  ubidots.add("Sp_Cond", Sp_C);
 8080e0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8080e10:	495b      	ldr	r1, [pc, #364]	; (8080f80 <loop+0x378>)
 8080e12:	4853      	ldr	r0, [pc, #332]	; (8080f60 <loop+0x358>)
 8080e14:	f003 f860 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  ubidots.add("A.volts", Avolts);
 8080e18:	4652      	mov	r2, sl
 8080e1a:	495a      	ldr	r1, [pc, #360]	; (8080f84 <loop+0x37c>)
 8080e1c:	4850      	ldr	r0, [pc, #320]	; (8080f60 <loop+0x358>)
 8080e1e:	f003 f85b 	bl	8083ed8 <_ZN7Ubidots3addEPcf>
  

//  write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %06.1f, %06.1f, %05.2f, %04.2f",
                          t1, t2, Sp_C ,Avolts, rain, depth, h1, p1, p2, SoC, volts);
 8080e22:	4638      	mov	r0, r7
 8080e24:	f009 f87e 	bl	8089f24 <__aeabi_f2d>
 8080e28:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080e2c:	4628      	mov	r0, r5
 8080e2e:	f009 f879 	bl	8089f24 <__aeabi_f2d>
 8080e32:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8080e36:	f8d9 0000 	ldr.w	r0, [r9]
 8080e3a:	f009 f873 	bl	8089f24 <__aeabi_f2d>
 8080e3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080e42:	f8d8 0000 	ldr.w	r0, [r8]
 8080e46:	f009 f86d 	bl	8089f24 <__aeabi_f2d>
 8080e4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8080e4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8080e50:	6818      	ldr	r0, [r3, #0]
 8080e52:	f009 f867 	bl	8089f24 <__aeabi_f2d>
 8080e56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8080e5a:	4658      	mov	r0, fp
 8080e5c:	f009 f862 	bl	8089f24 <__aeabi_f2d>
 8080e60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8080e64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8080e66:	f009 f85d 	bl	8089f24 <__aeabi_f2d>
 8080e6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8080e6e:	4650      	mov	r0, sl
 8080e70:	f009 f858 	bl	8089f24 <__aeabi_f2d>
 8080e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8080e78:	9818      	ldr	r0, [sp, #96]	; 0x60
 8080e7a:	f009 f853 	bl	8089f24 <__aeabi_f2d>
 8080e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080e82:	6830      	ldr	r0, [r6, #0]
 8080e84:	f009 f84e 	bl	8089f24 <__aeabi_f2d>
 8080e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080e8c:	6820      	ldr	r0, [r4, #0]
 8080e8e:	f009 f849 	bl	8089f24 <__aeabi_f2d>
 8080e92:	4a3d      	ldr	r2, [pc, #244]	; (8080f88 <loop+0x380>)
 8080e94:	e9cd 0100 	strd	r0, r1, [sp]
 8080e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080e9c:	a82e      	add	r0, sp, #184	; 0xb8
 8080e9e:	f004 fe11 	bl	8085ac4 <snprintf>
logData(_json);
 8080ea2:	a82e      	add	r0, sp, #184	; 0xb8
 8080ea4:	f7ff fd04 	bl	80808b0 <_Z7logDataPc>
delay(300);
 8080ea8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8080eac:	f006 fdfa 	bl	8087aa4 <delay>
close_SD();
 8080eb0:	f7ff fe4c 	bl	8080b4c <_Z8close_SDv>
delay(300);
 8080eb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8080eb8:	f006 fdf4 	bl	8087aa4 <delay>

 //--------------take a photo  ------------------------------
if ((SoC > 60.0) && ((Time.hour() == 13) || (Time.hour() == 15) || (Time.hour() == 17))) 
 8080ebc:	4933      	ldr	r1, [pc, #204]	; (8080f8c <loop+0x384>)
 8080ebe:	4628      	mov	r0, r5
 8080ec0:	f009 fe80 	bl	808abc4 <__aeabi_fcmpgt>
 8080ec4:	b170      	cbz	r0, 8080ee4 <loop+0x2dc>
 8080ec6:	f006 fdd9 	bl	8087a7c <_ZN9TimeClass4hourEv>
 8080eca:	280d      	cmp	r0, #13
 8080ecc:	f000 8097 	beq.w	8080ffe <loop+0x3f6>
 8080ed0:	f006 fdd4 	bl	8087a7c <_ZN9TimeClass4hourEv>
 8080ed4:	280f      	cmp	r0, #15
 8080ed6:	f000 8092 	beq.w	8080ffe <loop+0x3f6>
 8080eda:	f006 fdcf 	bl	8087a7c <_ZN9TimeClass4hourEv>
 8080ede:	2811      	cmp	r0, #17
 8080ee0:	f000 808d 	beq.w	8080ffe <loop+0x3f6>
 8080ee4:	f004 fb08 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8080ee8:	f004 fb06 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
  /** Output a string from flash using the Arduino F() macro.
   * \param[in] arg pointing to flash string
   * \return the stream
   */
  ostream &operator<< (const __FlashStringHelper *arg) {
    putPgm(reinterpret_cast<const char*>(arg));
 8080eec:	4928      	ldr	r1, [pc, #160]	; (8080f90 <loop+0x388>)
 8080eee:	4829      	ldr	r0, [pc, #164]	; (8080f94 <loop+0x38c>)
 8080ef0:	f000 fff9 	bl	8081ee6 <_ZN7ostream6putPgmEPKc>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false if an error occurred.
   */
  bool ls(const char* path, uint8_t flags = 0) {
    return ls(&Serial, path, flags);
 8080ef4:	f007 fcde 	bl	80888b4 <_Z16_fetch_usbserialv>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080ef8:	2400      	movs	r4, #0
 8080efa:	4605      	mov	r5, r0
   *
   * \return true for success or false if an error occurred.
   */
  bool ls(print_t* pr, const char* path, uint8_t flags) {
    FatFile dir;
    return dir.open(vwd(), path, O_RDONLY) && dir.ls(pr, flags);
 8080efc:	4623      	mov	r3, r4
 8080efe:	4a26      	ldr	r2, [pc, #152]	; (8080f98 <loop+0x390>)
 8080f00:	4926      	ldr	r1, [pc, #152]	; (8080f9c <loop+0x394>)
 8080f02:	a825      	add	r0, sp, #148	; 0x94
 8080f04:	f88d 4094 	strb.w	r4, [sp, #148]	; 0x94
 8080f08:	f88d 4095 	strb.w	r4, [sp, #149]	; 0x95
 8080f0c:	f001 fb1b 	bl	8082546 <_ZN7FatFile4openEPS_PKci>
 8080f10:	e048      	b.n	8080fa4 <loop+0x39c>
 8080f12:	bf00      	nop
 8080f14:	f3af 8000 	nop.w
 8080f18:	9999999a 	.word	0x9999999a
 8080f1c:	3fe99999 	.word	0x3fe99999
 8080f20:	33333333 	.word	0x33333333
 8080f24:	3fe33333 	.word	0x3fe33333
 8080f28:	3a14cec4 	.word	0x3a14cec4
 8080f2c:	3fd9b1af 	.word	0x3fd9b1af
 8080f30:	2000001c 	.word	0x2000001c
 8080f34:	20000014 	.word	0x20000014
 8080f38:	200005fc 	.word	0x200005fc
 8080f3c:	20000000 	.word	0x20000000
 8080f40:	42c80000 	.word	0x42c80000
 8080f44:	20000020 	.word	0x20000020
 8080f48:	2000062c 	.word	0x2000062c
 8080f4c:	20000024 	.word	0x20000024
 8080f50:	3fa00000 	.word	0x3fa00000
 8080f54:	0808e4f8 	.word	0x0808e4f8
 8080f58:	0808e4fd 	.word	0x0808e4fd
 8080f5c:	0808e508 	.word	0x0808e508
 8080f60:	20000670 	.word	0x20000670
 8080f64:	2000000c 	.word	0x2000000c
 8080f68:	0808e40a 	.word	0x0808e40a
 8080f6c:	0808e417 	.word	0x0808e417
 8080f70:	0808e422 	.word	0x0808e422
 8080f74:	0808e42a 	.word	0x0808e42a
 8080f78:	0808e433 	.word	0x0808e433
 8080f7c:	0808e439 	.word	0x0808e439
 8080f80:	0808e43d 	.word	0x0808e43d
 8080f84:	0808e445 	.word	0x0808e445
 8080f88:	0808e44d 	.word	0x0808e44d
 8080f8c:	42700000 	.word	0x42700000
 8080f90:	0808e4a6 	.word	0x0808e4a6
 8080f94:	200006ac 	.word	0x200006ac
 8080f98:	0808ec6f 	.word	0x0808ec6f
 8080f9c:	200005a0 	.word	0x200005a0
 8080fa0:	20000004 	.word	0x20000004
 8080fa4:	b128      	cbz	r0, 8080fb2 <loop+0x3aa>
 8080fa6:	4623      	mov	r3, r4
 8080fa8:	2208      	movs	r2, #8
 8080faa:	4629      	mov	r1, r5
 8080fac:	a825      	add	r0, sp, #148	; 0x94
 8080fae:	f001 fca2 	bl	80828f6 <_ZN7FatFile2lsEP5Printhh>
  cout <<  F("\nList of files on the SD.\n");
  (sd.ls("/", LS_R) );

digitalWrite(B2, LOW);     //disconnect ground for the SD-card & camera
// turn off  POWER pins after SD-card and camera are done
  sprintf(publishStr, " this forces the files to be written to SD %2i minutes", minutes);  
 8080fb2:	4c14      	ldr	r4, [pc, #80]	; (8081004 <loop+0x3fc>)
  waitSec(0.5);
//list files on SD to terminal
  cout <<  F("\nList of files on the SD.\n");
  (sd.ls("/", LS_R) );

digitalWrite(B2, LOW);     //disconnect ground for the SD-card & camera
 8080fb4:	2100      	movs	r1, #0
 8080fb6:	201a      	movs	r0, #26
 8080fb8:	f008 fb2b 	bl	8089612 <digitalWrite>
// turn off  POWER pins after SD-card and camera are done
  sprintf(publishStr, " this forces the files to be written to SD %2i minutes", minutes);  
 8080fbc:	6822      	ldr	r2, [r4, #0]
 8080fbe:	4912      	ldr	r1, [pc, #72]	; (8081008 <loop+0x400>)
 8080fc0:	4812      	ldr	r0, [pc, #72]	; (808100c <loop+0x404>)
 8080fc2:	f004 fd67 	bl	8085a94 <sprintf>
      Particle.publish(event_name, publishStr,60,PRIVATE);
    waitSec(2); //wait 2 more seconds
    */ //*************************************
//  Go to sleep for the amount of time determined by the battery charge
//  for sleep modes see:https://community.particle.io/t/choosing-an-electron-sleep-mode/41822?u=colemanjj
    System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);   //keeps SOC meter running
 8080fc6:	4b12      	ldr	r3, [pc, #72]	; (8081010 <loop+0x408>)
 8080fc8:	6821      	ldr	r1, [r4, #0]
 8080fca:	681a      	ldr	r2, [r3, #0]
 8080fcc:	4b11      	ldr	r3, [pc, #68]	; (8081014 <loop+0x40c>)
 8080fce:	434a      	muls	r2, r1
 8080fd0:	681b      	ldr	r3, [r3, #0]
 8080fd2:	2101      	movs	r1, #1
 8080fd4:	a825      	add	r0, sp, #148	; 0x94
 8080fd6:	f005 f80b 	bl	8085ff0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>

//-----------LOOP
void loop() {  
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 8080fda:	a81d      	add	r0, sp, #116	; 0x74
 8080fdc:	f006 ff93 	bl	8087f06 <_ZN9FuelGaugeD1Ev>
    System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);   //keeps SOC meter running
    // System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);  // shuts down SOC meter
    // SLEEP_MODE_DEEP = 161 μA
    // SLEEP_MODE_SOFTPOWEROFF = 110 μA

} // end loop()
 8080fe0:	b06f      	add	sp, #444	; 0x1bc
 8080fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
 8080fe6:	4b0c      	ldr	r3, [pc, #48]	; (8081018 <loop+0x410>)
 8080fe8:	f8c8 3000 	str.w	r3, [r8]
 8080fec:	6023      	str	r3, [r4, #0]
 8080fee:	6033      	str	r3, [r6, #0]
 8080ff0:	e65f      	b.n	8080cb2 <loop+0xaa>
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
 8080ff2:	4b09      	ldr	r3, [pc, #36]	; (8081018 <loop+0x410>)
 8080ff4:	4a09      	ldr	r2, [pc, #36]	; (808101c <loop+0x414>)
 8080ff6:	f8c8 3000 	str.w	r3, [r8]
 8080ffa:	6013      	str	r3, [r2, #0]
 8080ffc:	e682      	b.n	8080d04 <loop+0xfc>

 //--------------take a photo  ------------------------------
if ((SoC > 60.0) && ((Time.hour() == 13) || (Time.hour() == 15) || (Time.hour() == 17))) 
  {  
//    waitSec(0.5);
    takePhoto(); 
 8080ffe:	f7ff fc83 	bl	8080908 <_Z9takePhotov>
 8081002:	e76f      	b.n	8080ee4 <loop+0x2dc>
 8081004:	2000001c 	.word	0x2000001c
 8081008:	0808e4c1 	.word	0x0808e4c1
 808100c:	200006ec 	.word	0x200006ec
 8081010:	20000028 	.word	0x20000028
 8081014:	2000067c 	.word	0x2000067c
 8081018:	c2c63333 	.word	0xc2c63333
 808101c:	20000024 	.word	0x20000024

08081020 <_Z9delayTime6String>:
  // In 2.0.0 and later, System.reset(RESET_NO_WAIT); prevents notifying the cloud of a pending reset
  System.reset();
  }

int delayTime(String delay)
  { if(delay == "long")
 8081020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081022:	490e      	ldr	r1, [pc, #56]	; (808105c <_Z9delayTime6String+0x3c>)
 8081024:	f005 fb64 	bl	80866f0 <_ZNK6String6equalsEPKc>
 8081028:	4b0d      	ldr	r3, [pc, #52]	; (8081060 <_Z9delayTime6String+0x40>)
 808102a:	b180      	cbz	r0, 808104e <_Z9delayTime6String+0x2e>
      {seconds=180;   // creat enough delay time to flash the unit
 808102c:	22b4      	movs	r2, #180	; 0xb4
 808102e:	601a      	str	r2, [r3, #0]
 8081030:	4b0c      	ldr	r3, [pc, #48]	; (8081064 <_Z9delayTime6String+0x44>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081032:	4a0d      	ldr	r2, [pc, #52]	; (8081068 <_Z9delayTime6String+0x48>)
 8081034:	781b      	ldrb	r3, [r3, #0]
 8081036:	490d      	ldr	r1, [pc, #52]	; (808106c <_Z9delayTime6String+0x4c>)
 8081038:	f88d 3000 	strb.w	r3, [sp]
 808103c:	a802      	add	r0, sp, #8
 808103e:	233c      	movs	r3, #60	; 0x3c
 8081040:	f007 f9e2 	bl	8088408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081044:	a803      	add	r0, sp, #12
 8081046:	f7ff fd6b 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
 808104a:	2001      	movs	r0, #1
 808104c:	e003      	b.n	8081056 <_Z9delayTime6String+0x36>
    else 
      {seconds=5; return -1; }
 808104e:	2205      	movs	r2, #5
 8081050:	601a      	str	r2, [r3, #0]
 8081052:	f04f 30ff 	mov.w	r0, #4294967295
  }
 8081056:	b005      	add	sp, #20
 8081058:	f85d fb04 	ldr.w	pc, [sp], #4
 808105c:	0808e513 	.word	0x0808e513
 8081060:	20000018 	.word	0x20000018
 8081064:	2000066c 	.word	0x2000066c
 8081068:	0808e518 	.word	0x0808e518
 808106c:	0808e525 	.word	0x0808e525

08081070 <setup>:
  // reset the system after 15 min if the application is stuck.  set as an escape from some hangup.
  // watchDog is petted after cell connection estsblished
  //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
 8081070:	b530      	push	{r4, r5, lr}
 8081072:	b091      	sub	sp, #68	; 0x44
     Serial.begin(9600);
 8081074:	f007 fc1e 	bl	80888b4 <_Z16_fetch_usbserialv>
 8081078:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808107c:	f007 fbfc 	bl	8088878 <_ZN9USBSerial5beginEl>
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 8081080:	2018      	movs	r0, #24
 8081082:	f7ff f80c 	bl	808009e <_Znwj>
 8081086:	4604      	mov	r4, r0
 8081088:	b128      	cbz	r0, 8081096 <setup+0x26>
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
    ApplicationWatchdog(std::chrono::milliseconds ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}
 808108a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 808108e:	4a50      	ldr	r2, [pc, #320]	; (80811d0 <setup+0x160>)
 8081090:	4950      	ldr	r1, [pc, #320]	; (80811d4 <setup+0x164>)
 8081092:	f7ff f8ff 	bl	8080294 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 8081096:	4b50      	ldr	r3, [pc, #320]	; (80811d8 <setup+0x168>)
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 8081098:	2101      	movs	r1, #1
  //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
     Serial.begin(9600);
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 808109a:	601c      	str	r4, [r3, #0]
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 808109c:	4b4f      	ldr	r3, [pc, #316]	; (80811dc <setup+0x16c>)
    // from spark_wiring_power.cpp
     @ https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_power.cpp
     This will be overridden if the input voltage drops out and comes back though (with something like a solar cell)
     and it will be set back to the default 900mA level. To counteract that you could set it in a Software Timer every 60 seconds or so.
    *******************************************************************************/
 pmic.setChargeCurrent(0, 0, 1, 0, 0, 0);      // Set charging current to 1024mA (512 + 512 offset)    //???????? is this good idea?
 808109e:	2400      	movs	r4, #0
     Serial.begin(9600);
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 80810a0:	8818      	ldrh	r0, [r3, #0]
 80810a2:	f008 faa5 	bl	80895f0 <pinMode>
// create power on digital pins for stable power supply AND so that sensors are shut down
  // when processor is shut down
	pinMode(D3, OUTPUT);     // power for the all digital sensors
 80810a6:	2101      	movs	r1, #1
 80810a8:	2003      	movs	r0, #3
 80810aa:	f008 faa1 	bl	80895f0 <pinMode>
	digitalWrite(D3, HIGH);
 80810ae:	2101      	movs	r1, #1
 80810b0:	2003      	movs	r0, #3
 80810b2:	f008 faae 	bl	8089612 <digitalWrite>
                              //activate the Electron internal pullup resistor but also have a 4.7Kohm pullup on the board
	pinMode(D5, OUTPUT);     // power for SD-card and camera
 80810b6:	2101      	movs	r1, #1
 80810b8:	2005      	movs	r0, #5
 80810ba:	f008 fa99 	bl	80895f0 <pinMode>
	digitalWrite(D5, HIGH);
 80810be:	2101      	movs	r1, #1
 80810c0:	2005      	movs	r0, #5
 80810c2:	f008 faa6 	bl	8089612 <digitalWrite>

	pinMode(B0, OUTPUT);     // power for analog rain sensor
 80810c6:	2101      	movs	r1, #1
 80810c8:	2018      	movs	r0, #24
 80810ca:	f008 fa91 	bl	80895f0 <pinMode>
	digitalWrite(B0, HIGH);	//
 80810ce:	2101      	movs	r1, #1
 80810d0:	2018      	movs	r0, #24
 80810d2:	f008 fa9e 	bl	8089612 <digitalWrite>
  pinMode(B1, OUTPUT);     // power for analog TDS sensor
 80810d6:	2101      	movs	r1, #1
 80810d8:	2019      	movs	r0, #25
 80810da:	f008 fa89 	bl	80895f0 <pinMode>
  digitalWrite(B1, HIGH);	//
 80810de:	2101      	movs	r1, #1
 80810e0:	2019      	movs	r0, #25
 80810e2:	f008 fa96 	bl	8089612 <digitalWrite>
  pinMode(B2, OUTPUT);     // set high to trigger 3V3 grounding for SD card
 80810e6:	2101      	movs	r1, #1
 80810e8:	201a      	movs	r0, #26
 80810ea:	f008 fa81 	bl	80895f0 <pinMode>
  digitalWrite(B2, HIGH);	//      
 80810ee:	2101      	movs	r1, #1
 80810f0:	201a      	movs	r0, #26
 80810f2:	f008 fa8e 	bl	8089612 <digitalWrite>

	delay(500);   // delay to give time for power to turn on, don't know if this is needed
 80810f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80810fa:	f006 fcd3 	bl	8087aa4 <delay>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 80810fe:	2100      	movs	r1, #0
 8081100:	a805      	add	r0, sp, #20
 8081102:	f004 fd0e 	bl	8085b22 <_ZN4PMICC1Eb>
    // from spark_wiring_power.cpp
     @ https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_power.cpp
     This will be overridden if the input voltage drops out and comes back though (with something like a solar cell)
     and it will be set back to the default 900mA level. To counteract that you could set it in a Software Timer every 60 seconds or so.
    *******************************************************************************/
 pmic.setChargeCurrent(0, 0, 1, 0, 0, 0);      // Set charging current to 1024mA (512 + 512 offset)    //???????? is this good idea?
 8081106:	2301      	movs	r3, #1
 8081108:	4622      	mov	r2, r4
 808110a:	4621      	mov	r1, r4
 808110c:	9402      	str	r4, [sp, #8]
 808110e:	9401      	str	r4, [sp, #4]
 8081110:	9400      	str	r4, [sp, #0]
 8081112:	a805      	add	r0, sp, #20
 8081114:	f004 fdfa 	bl	8085d0c <_ZN4PMIC16setChargeCurrentEbbbbbb>
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
    */
 // Set the lowest input voltage to 4.84 volts. This keeps the solar panel from operating below 4.84 volts.
 pmic.setInputVoltageLimit(4840);  //  taken from code suggested by RyanB in the https://community.particle.io forum
 8081118:	f241 21e8 	movw	r1, #4840	; 0x12e8
 808111c:	a805      	add	r0, sp, #20
 808111e:	f004 fd6b 	bl	8085bf8 <_ZN4PMIC20setInputVoltageLimitEt>

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 8081122:	2520      	movs	r5, #32
                    5000
                    5080
  * Return         : 0 Error, 1 Success
 *******************************************************************************/
 //pmic.setChargeVoltage(4512);  // for sealed lead-acit (SLA) battery. may not be implemented in spark_wiring_power.cpp
 pmic.setChargeVoltage(4208); // set upper limit on charge voltage. this limits the
 8081124:	f241 0170 	movw	r1, #4208	; 0x1070
 8081128:	a805      	add	r0, sp, #20
 808112a:	f004 fe22 	bl	8085d72 <_ZN4PMIC16setChargeVoltageEt>
 808112e:	462a      	mov	r2, r5
 8081130:	4621      	mov	r1, r4
 8081132:	eb0d 0005 	add.w	r0, sp, r5
 8081136:	f00a f8d2 	bl	808b2de <memset>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 808113a:	f241 22e8 	movw	r2, #4840	; 0x12e8
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 808113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8081142:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 8081146:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 808114a:	f44f 634d 	mov.w	r3, #3280	; 0xcd0
 808114e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
 8081152:	4621      	mov	r1, r4
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 8081154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8081158:	eb0d 0005 	add.w	r0, sp, r5
class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
        conf_.size = sizeof(conf_);
 808115c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 8081160:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 8081164:	9308      	str	r3, [sp, #32]
 8081166:	f004 fbeb 	bl	8085940 <system_power_management_set_config>
    // returns SYSTEM_ERROR_NONE (0) in case of success
    // Settings are persisted, you normally wouldn't do this on every startup.
  // pmic.disableCharging();

 // setup two BME280s
    if (!bme1.begin(0x77)) // the air sensor BME280 for temp, humidity, pressure
 808116a:	2177      	movs	r1, #119	; 0x77
 808116c:	481c      	ldr	r0, [pc, #112]	; (80811e0 <setup+0x170>)
 808116e:	f003 fe14 	bl	8084d9a <_ZN9CE_BME2805beginEh>
 8081172:	b960      	cbnz	r0, 808118e <setup+0x11e>
 8081174:	4b1b      	ldr	r3, [pc, #108]	; (80811e4 <setup+0x174>)
 8081176:	a806      	add	r0, sp, #24
 8081178:	781b      	ldrb	r3, [r3, #0]
 808117a:	4a1b      	ldr	r2, [pc, #108]	; (80811e8 <setup+0x178>)
 808117c:	f88d 3000 	strb.w	r3, [sp]
 8081180:	491a      	ldr	r1, [pc, #104]	; (80811ec <setup+0x17c>)
 8081182:	233c      	movs	r3, #60	; 0x3c
 8081184:	f007 f940 	bl	8088408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081188:	a807      	add	r0, sp, #28
 808118a:	f7ff fcc9 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///      Serial.println("Could not find 1st valid BME280 sensor, check wiring!");
      Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
        //  while (1);  // original code had this but seems like an endless loop if the BME is not detected.
      }
    if (!bme2.begin(0x76))  // the water depth sensor in oil made from a BME280. Temp and pressure
 808118e:	2176      	movs	r1, #118	; 0x76
 8081190:	4817      	ldr	r0, [pc, #92]	; (80811f0 <setup+0x180>)
 8081192:	f003 fe02 	bl	8084d9a <_ZN9CE_BME2805beginEh>
 8081196:	b960      	cbnz	r0, 80811b2 <setup+0x142>
 8081198:	4b12      	ldr	r3, [pc, #72]	; (80811e4 <setup+0x174>)
 808119a:	a806      	add	r0, sp, #24
 808119c:	781b      	ldrb	r3, [r3, #0]
 808119e:	4a12      	ldr	r2, [pc, #72]	; (80811e8 <setup+0x178>)
 80811a0:	f88d 3000 	strb.w	r3, [sp]
 80811a4:	4911      	ldr	r1, [pc, #68]	; (80811ec <setup+0x17c>)
 80811a6:	233c      	movs	r3, #60	; 0x3c
 80811a8:	f007 f92e 	bl	8088408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80811ac:	a807      	add	r0, sp, #28
 80811ae:	f7ff fcb7 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80811b2:	4a10      	ldr	r2, [pc, #64]	; (80811f4 <setup+0x184>)
 80811b4:	4910      	ldr	r1, [pc, #64]	; (80811f8 <setup+0x188>)
 80811b6:	4811      	ldr	r0, [pc, #68]	; (80811fc <setup+0x18c>)
 80811b8:	f007 f816 	bl	80881e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  // register a Particle cloud Function.  "Delay" is used from the Particle console to set the delay 
     // to "long", i.e. delay of 120 seconds for OTA software uploads. otherwise delay defaults to 2 seconds.
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
 80811bc:	f007 fb7a 	bl	80888b4 <_Z16_fetch_usbserialv>
 80811c0:	490f      	ldr	r1, [pc, #60]	; (8081200 <setup+0x190>)
 80811c2:	f005 fae2 	bl	808678a <_ZN5Print7printlnEPKc>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 80811c6:	a805      	add	r0, sp, #20
 80811c8:	f004 fcba 	bl	8085b40 <_ZN4PMICD1Ev>
  // register a Particle cloud Function.  "Delay" is used from the Particle console to set the delay 
     // to "long", i.e. delay of 120 seconds for OTA software uploads. otherwise delay defaults to 2 seconds.
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
} // end setup()
 80811cc:	b011      	add	sp, #68	; 0x44
 80811ce:	bd30      	pop	{r4, r5, pc}
 80811d0:	080801c5 	.word	0x080801c5
 80811d4:	000927c0 	.word	0x000927c0
 80811d8:	200005f8 	.word	0x200005f8
 80811dc:	20000008 	.word	0x20000008
 80811e0:	200005fc 	.word	0x200005fc
 80811e4:	2000066c 	.word	0x2000066c
 80811e8:	0808e52e 	.word	0x0808e52e
 80811ec:	0808e542 	.word	0x0808e542
 80811f0:	2000062c 	.word	0x2000062c
 80811f4:	0808e54a 	.word	0x0808e54a
 80811f8:	08081021 	.word	0x08081021
 80811fc:	080881bd 	.word	0x080881bd
 8081200:	0808e550 	.word	0x0808e550

08081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081204:	b570      	push	{r4, r5, r6, lr}
 8081206:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 8081208:	6804      	ldr	r4, [r0, #0]
 808120a:	6843      	ldr	r3, [r0, #4]
 808120c:	2614      	movs	r6, #20
 808120e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8081212:	42a6      	cmp	r6, r4
 8081214:	d004      	beq.n	8081220 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 8081216:	4620      	mov	r0, r4
 8081218:	f005 f99c 	bl	8086554 <_ZN6StringD1Ev>
 808121c:	3414      	adds	r4, #20
 808121e:	e7f8      	b.n	8081212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8081220:	6828      	ldr	r0, [r5, #0]
 8081222:	f004 fc27 	bl	8085a74 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8081226:	4628      	mov	r0, r5
 8081228:	bd70      	pop	{r4, r5, r6, pc}

0808122a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 808122a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 808122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808122e:	4606      	mov	r6, r0
 8081230:	460c      	mov	r4, r1
 8081232:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8081234:	d916      	bls.n	8081264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8081236:	4290      	cmp	r0, r2
 8081238:	d215      	bcs.n	8081266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 808123a:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 808123e:	1a6c      	subs	r4, r5, r1
 8081240:	f1a1 0714 	sub.w	r7, r1, #20
 8081244:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8081246:	42af      	cmp	r7, r5
 8081248:	d01c      	beq.n	8081284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 808124a:	b12c      	cbz	r4, 8081258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 808124c:	4629      	mov	r1, r5
 808124e:	4620      	mov	r0, r4
 8081250:	f005 f970 	bl	8086534 <_ZN6StringC1EOS_>
 8081254:	7c2b      	ldrb	r3, [r5, #16]
 8081256:	7423      	strb	r3, [r4, #16]
 8081258:	4628      	mov	r0, r5
 808125a:	f005 f97b 	bl	8086554 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 808125e:	3d14      	subs	r5, #20
 8081260:	3c14      	subs	r4, #20
 8081262:	e7f0      	b.n	8081246 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8081264:	d00e      	beq.n	8081284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 8081266:	42ac      	cmp	r4, r5
 8081268:	d00c      	beq.n	8081284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 808126a:	b12e      	cbz	r6, 8081278 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 808126c:	4621      	mov	r1, r4
 808126e:	4630      	mov	r0, r6
 8081270:	f005 f960 	bl	8086534 <_ZN6StringC1EOS_>
 8081274:	7c23      	ldrb	r3, [r4, #16]
 8081276:	7433      	strb	r3, [r6, #16]
 8081278:	4620      	mov	r0, r4
 808127a:	f005 f96b 	bl	8086554 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 808127e:	3414      	adds	r4, #20
 8081280:	3614      	adds	r6, #20
 8081282:	e7f0      	b.n	8081266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 8081284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808128a:	2300      	movs	r3, #0
 808128c:	6003      	str	r3, [r0, #0]
 808128e:	6043      	str	r3, [r0, #4]
 8081290:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081292:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081294:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081296:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081298:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808129a:	dd24      	ble.n	80812e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 808129c:	f04f 0814 	mov.w	r8, #20
 80812a0:	fb08 f006 	mul.w	r0, r8, r6
 80812a4:	f004 fbde 	bl	8085a64 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80812a8:	4605      	mov	r5, r0
 80812aa:	b1e0      	cbz	r0, 80812e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 80812ac:	e894 0006 	ldmia.w	r4, {r1, r2}
 80812b0:	fb08 1202 	mla	r2, r8, r2, r1
 80812b4:	f7ff ffb9 	bl	808122a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80812b8:	6820      	ldr	r0, [r4, #0]
 80812ba:	f004 fbdb 	bl	8085a74 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80812be:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80812c0:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80812c2:	683e      	ldr	r6, [r7, #0]
 80812c4:	687b      	ldr	r3, [r7, #4]
 80812c6:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80812ca:	4546      	cmp	r6, r8
 80812cc:	d009      	beq.n	80812e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 80812ce:	b12d      	cbz	r5, 80812dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 80812d0:	4631      	mov	r1, r6
 80812d2:	4628      	mov	r0, r5
 80812d4:	f005 f9c4 	bl	8086660 <_ZN6StringC1ERKS_>
 80812d8:	7c33      	ldrb	r3, [r6, #16]
 80812da:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80812dc:	3614      	adds	r6, #20
 80812de:	3514      	adds	r5, #20
 80812e0:	e7f3      	b.n	80812ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 80812e2:	687b      	ldr	r3, [r7, #4]
 80812e4:	6063      	str	r3, [r4, #4]
    }
}
 80812e6:	4620      	mov	r0, r4
 80812e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080812ec <_GLOBAL__sub_I_fileName>:
      jpglen -= bytesToRead;
    }
    file.close();
      time = millis() - time;
      Serial.print(time); Serial.println(" ms elapsed");
 80812ec:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80812ee:	4b60      	ldr	r3, [pc, #384]	; (8081470 <_GLOBAL__sub_I_fileName+0x184>)
 80812f0:	2400      	movs	r4, #0
 80812f2:	601c      	str	r4, [r3, #0]
 80812f4:	4b5f      	ldr	r3, [pc, #380]	; (8081474 <_GLOBAL__sub_I_fileName+0x188>)
 80812f6:	b08c      	sub	sp, #48	; 0x30
 80812f8:	2501      	movs	r5, #1
 80812fa:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80812fc:	f004 f854 	bl	80853a8 <HAL_Pin_Map>
#include <SPI.h>        //**
#include <SdFat.h>      //**
// SD chip select pin.  Be sure to disable any other SPI devices such as Enet.
const uint8_t chipSelect = SS;  //**
// create filename as a global variable for use in several functions
String fileName ;       //**
 8081300:	495d      	ldr	r1, [pc, #372]	; (8081478 <_GLOBAL__sub_I_fileName+0x18c>)
 8081302:	485e      	ldr	r0, [pc, #376]	; (808147c <_GLOBAL__sub_I_fileName+0x190>)
 8081304:	f005 f96d 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8081308:	4e5d      	ldr	r6, [pc, #372]	; (8081480 <_GLOBAL__sub_I_fileName+0x194>)
 808130a:	4a5e      	ldr	r2, [pc, #376]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 808130c:	495e      	ldr	r1, [pc, #376]	; (8081488 <_GLOBAL__sub_I_fileName+0x19c>)
 808130e:	485b      	ldr	r0, [pc, #364]	; (808147c <_GLOBAL__sub_I_fileName+0x190>)
 8081310:	f008 fa7e 	bl	8089810 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8081314:	4b5d      	ldr	r3, [pc, #372]	; (808148c <_GLOBAL__sub_I_fileName+0x1a0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8081316:	2264      	movs	r2, #100	; 0x64
 8081318:	6831      	ldr	r1, [r6, #0]
 808131a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 808131e:	4a5c      	ldr	r2, [pc, #368]	; (8081490 <_GLOBAL__sub_I_fileName+0x1a4>)
 8081320:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
 8081324:	400d      	ands	r5, r1
 8081326:	71dc      	strb	r4, [r3, #7]
 8081328:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 808132c:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 8081330:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 8081334:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 8081338:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 808133c:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 8081340:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 8081344:	461c      	mov	r4, r3
 8081346:	d10f      	bne.n	8081368 <_GLOBAL__sub_I_fileName+0x7c>
 8081348:	4630      	mov	r0, r6
 808134a:	f7fe febb 	bl	80800c4 <__cxa_guard_acquire>
 808134e:	b158      	cbz	r0, 8081368 <_GLOBAL__sub_I_fileName+0x7c>
 8081350:	4629      	mov	r1, r5
 8081352:	4850      	ldr	r0, [pc, #320]	; (8081494 <_GLOBAL__sub_I_fileName+0x1a8>)
 8081354:	f004 fd40 	bl	8085dd8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081358:	4630      	mov	r0, r6
 808135a:	f7fe feb8 	bl	80800ce <__cxa_guard_release>
 808135e:	4a49      	ldr	r2, [pc, #292]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 8081360:	494d      	ldr	r1, [pc, #308]	; (8081498 <_GLOBAL__sub_I_fileName+0x1ac>)
 8081362:	484c      	ldr	r0, [pc, #304]	; (8081494 <_GLOBAL__sub_I_fileName+0x1a8>)
 8081364:	f008 fa54 	bl	8089810 <__aeabi_atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 8081368:	4b4a      	ldr	r3, [pc, #296]	; (8081494 <_GLOBAL__sub_I_fileName+0x1a8>)
 808136a:	484c      	ldr	r0, [pc, #304]	; (808149c <_GLOBAL__sub_I_fileName+0x1b0>)
 808136c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 8081370:	2400      	movs	r4, #0
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8081372:	4b4b      	ldr	r3, [pc, #300]	; (80814a0 <_GLOBAL__sub_I_fileName+0x1b4>)
// File system object.
SdFat sd;               //**
// identify a Logging file.
SdFile file;            //**
 8081374:	494b      	ldr	r1, [pc, #300]	; (80814a4 <_GLOBAL__sub_I_fileName+0x1b8>)
 8081376:	4a43      	ldr	r2, [pc, #268]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 8081378:	7204      	strb	r4, [r0, #8]
 808137a:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808137c:	6044      	str	r4, [r0, #4]
 808137e:	6003      	str	r3, [r0, #0]
 8081380:	f008 fa46 	bl	8089810 <__aeabi_atexit>
// Error messages stored in flash.
#define error(msg) sd.errorHalt(F(msg))
ArduinoOutStream cout(Serial);
 8081384:	f007 fa96 	bl	80888b4 <_Z16_fetch_usbserialv>
  static const openmode out    = 0X40;
  /** truncate an existing stream when opening */
  static const openmode trunc  = 0X80;
  //----------------------------------------------------------------------------
  ios_base() : m_fill(' '), m_fmtflags(dec | right | skipws)
    , m_precision(2), m_width(0) {}
 8081388:	4b47      	ldr	r3, [pc, #284]	; (80814a8 <_GLOBAL__sub_I_fileName+0x1bc>)
 808138a:	2220      	movs	r2, #32
 808138c:	721a      	strb	r2, [r3, #8]
 808138e:	f241 020a 	movw	r2, #4106	; 0x100a
 8081392:	2602      	movs	r6, #2
 8081394:	60da      	str	r2, [r3, #12]
 public:
  /** constructor
   *
   * \param[in] pr Print object for this ArduinoOutStream.
   */
  explicit ArduinoOutStream(Print& pr) : m_pr(&pr) {}
 8081396:	4a45      	ldr	r2, [pc, #276]	; (80814ac <_GLOBAL__sub_I_fileName+0x1c0>)
 8081398:	741e      	strb	r6, [r3, #16]
 808139a:	615c      	str	r4, [r3, #20]
 * \brief Error and state information for all streams
 */
class ios : public ios_base {
 public:
  /** Create ios with no error flags set */
  ios() : m_iostate(0) {}
 808139c:	761c      	strb	r4, [r3, #24]
 808139e:	6058      	str	r0, [r3, #4]
#include "sensitive_definitions.h"  // this file contains ubidots token definition
                               // e.g.  #define your_token ""  // Put here your Ubidots TOKEN
// for the temp. humidity, pressure BME280 sensor
#include <CE_BME280.h>
// Create two BME280 instances
CE_BME280 bme1; // I2C  for air temp. pressure, humidity
 80813a0:	4843      	ldr	r0, [pc, #268]	; (80814b0 <_GLOBAL__sub_I_fileName+0x1c4>)
 80813a2:	601a      	str	r2, [r3, #0]
 80813a4:	f003 fc17 	bl	8084bd6 <_ZN9CE_BME280C1Ev>
CE_BME280 bme2; // I2C   for WATER temp. & pressure
 80813a8:	4842      	ldr	r0, [pc, #264]	; (80814b4 <_GLOBAL__sub_I_fileName+0x1c8>)
 80813aa:	f003 fc14 	bl	8084bd6 <_ZN9CE_BME280C1Ev>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80813ae:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80813b2:	4d41      	ldr	r5, [pc, #260]	; (80814b8 <_GLOBAL__sub_I_fileName+0x1cc>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80813b4:	4630      	mov	r0, r6
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80813b6:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80813b8:	602c      	str	r4, [r5, #0]
 80813ba:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80813bc:	71ac      	strb	r4, [r5, #6]
 80813be:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80813c0:	f004 fa7a 	bl	80858b8 <set_system_mode>

//---#include <Adafruit_DHT_Particle.h>  // air and humidity sensor.   includes "isnan()" function
//---#include <math.h>
#include <Ubidots.h>   // using here Ubidots=3.1.4
//SYSTEM_MODE(AUTOMATIC); 
SYSTEM_MODE(SEMI_AUTOMATIC);   // was set at semi_automatic but I could not flash remotely, tried automatic then set back to semi-automatic
 80813c4:	4a2f      	ldr	r2, [pc, #188]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 80813c6:	493d      	ldr	r1, [pc, #244]	; (80814bc <_GLOBAL__sub_I_fileName+0x1d0>)
 80813c8:	4628      	mov	r0, r5
 80813ca:	f008 fa21 	bl	8089810 <__aeabi_atexit>
    // Particle.connect() is not called at the beginning of your code;  With semi-automatic you must call Particle.connect() yourself
///SYSTEM_THREAD(ENABLED);       // seems to make the checking for connection routine work, keep an eye on this ****
//#define your_token "xyz..."  // for privacy, the Ubidots token is defined in the included .h file as "your_token"
#define DATA_SOURCE_NAME "Spudnik-08b"
//--#define unit_name "Spudnik-08b"
String unit_name = "Spudnik-08b";
 80813ce:	493c      	ldr	r1, [pc, #240]	; (80814c0 <_GLOBAL__sub_I_fileName+0x1d4>)
 80813d0:	483c      	ldr	r0, [pc, #240]	; (80814c4 <_GLOBAL__sub_I_fileName+0x1d8>)
 80813d2:	f005 f906 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>
 80813d6:	4a2b      	ldr	r2, [pc, #172]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 80813d8:	492b      	ldr	r1, [pc, #172]	; (8081488 <_GLOBAL__sub_I_fileName+0x19c>)
 80813da:	483a      	ldr	r0, [pc, #232]	; (80814c4 <_GLOBAL__sub_I_fileName+0x1d8>)
 80813dc:	f008 fa18 	bl	8089810 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80813e0:	9400      	str	r4, [sp, #0]
 80813e2:	9401      	str	r4, [sp, #4]
 80813e4:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 80813e6:	f007 fa65 	bl	80888b4 <_Z16_fetch_usbserialv>
 80813ea:	4605      	mov	r5, r0
 80813ec:	4669      	mov	r1, sp
 80813ee:	a803      	add	r0, sp, #12
 80813f0:	f7ff ff49 	bl	8081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80813f4:	a903      	add	r1, sp, #12
 80813f6:	a806      	add	r0, sp, #24
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80813f8:	4c33      	ldr	r4, [pc, #204]	; (80814c8 <_GLOBAL__sub_I_fileName+0x1dc>)
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80813fa:	f7ff ff44 	bl	8081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80813fe:	4b33      	ldr	r3, [pc, #204]	; (80814cc <_GLOBAL__sub_I_fileName+0x1e0>)
 8081400:	a906      	add	r1, sp, #24
 8081402:	6023      	str	r3, [r4, #0]
 8081404:	a809      	add	r0, sp, #36	; 0x24
 8081406:	f7ff ff3e 	bl	8081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808140a:	aa09      	add	r2, sp, #36	; 0x24
 808140c:	211e      	movs	r1, #30
 808140e:	1d20      	adds	r0, r4, #4
 8081410:	f005 fed1 	bl	80871b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081414:	a809      	add	r0, sp, #36	; 0x24
 8081416:	f7ff fef5 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 808141a:	a806      	add	r0, sp, #24
 808141c:	f7ff fef2 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081420:	4b2b      	ldr	r3, [pc, #172]	; (80814d0 <_GLOBAL__sub_I_fileName+0x1e4>)
 8081422:	6225      	str	r5, [r4, #32]
 8081424:	6023      	str	r3, [r4, #0]
 8081426:	a803      	add	r0, sp, #12
 8081428:	f7ff feec 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808142c:	4b29      	ldr	r3, [pc, #164]	; (80814d4 <_GLOBAL__sub_I_fileName+0x1e8>)
 808142e:	6023      	str	r3, [r4, #0]
        Serial.begin();
 8081430:	f007 fa40 	bl	80888b4 <_Z16_fetch_usbserialv>
 8081434:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081438:	f007 fa1e 	bl	8088878 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 808143c:	f005 fb4e 	bl	8086adc <_ZN5spark10LogManager8instanceEv>
 8081440:	4621      	mov	r1, r4
 8081442:	f005 fe4c 	bl	80870de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
#define code_name "particlesolar30c"
SerialLogHandler logHandler;
 8081446:	4668      	mov	r0, sp
 8081448:	f7ff fedc 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808144c:	4a0d      	ldr	r2, [pc, #52]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 808144e:	4922      	ldr	r1, [pc, #136]	; (80814d8 <_GLOBAL__sub_I_fileName+0x1ec>)
 8081450:	4620      	mov	r0, r4
 8081452:	f008 f9dd 	bl	8089810 <__aeabi_atexit>

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 8081456:	2201      	movs	r2, #1
 8081458:	4920      	ldr	r1, [pc, #128]	; (80814dc <_GLOBAL__sub_I_fileName+0x1f0>)
 808145a:	4821      	ldr	r0, [pc, #132]	; (80814e0 <_GLOBAL__sub_I_fileName+0x1f4>)
 808145c:	f002 fd0c 	bl	8083e78 <_ZN7UbidotsC1EPc11IotProtocol>
 8081460:	4a08      	ldr	r2, [pc, #32]	; (8081484 <_GLOBAL__sub_I_fileName+0x198>)
 8081462:	4920      	ldr	r1, [pc, #128]	; (80814e4 <_GLOBAL__sub_I_fileName+0x1f8>)
 8081464:	481e      	ldr	r0, [pc, #120]	; (80814e0 <_GLOBAL__sub_I_fileName+0x1f4>)
 8081466:	f008 f9d3 	bl	8089810 <__aeabi_atexit>
      jpglen -= bytesToRead;
    }
    file.close();
      time = millis() - time;
      Serial.print(time); Serial.println(" ms elapsed");
 808146a:	b00c      	add	sp, #48	; 0x30
 808146c:	bd70      	pop	{r4, r5, r6, pc}
 808146e:	bf00      	nop
 8081470:	2000067c 	.word	0x2000067c
 8081474:	2000066c 	.word	0x2000066c
 8081478:	0808ec97 	.word	0x0808ec97
 808147c:	200005e8 	.word	0x200005e8
 8081480:	20000148 	.word	0x20000148
 8081484:	20000144 	.word	0x20000144
 8081488:	08086555 	.word	0x08086555
 808148c:	20000164 	.word	0x20000164
 8081490:	0808e1c8 	.word	0x0808e1c8
 8081494:	2000014c 	.word	0x2000014c
 8081498:	080801cf 	.word	0x080801cf
 808149c:	20000680 	.word	0x20000680
 80814a0:	0808e254 	.word	0x0808e254
 80814a4:	0808012d 	.word	0x0808012d
 80814a8:	200006ac 	.word	0x200006ac
 80814ac:	0808e234 	.word	0x0808e234
 80814b0:	200005fc 	.word	0x200005fc
 80814b4:	2000062c 	.word	0x2000062c
 80814b8:	20000158 	.word	0x20000158
 80814bc:	080801ff 	.word	0x080801ff
 80814c0:	0808e55d 	.word	0x0808e55d
 80814c4:	2000065c 	.word	0x2000065c
 80814c8:	200006c8 	.word	0x200006c8
 80814cc:	0808e1d4 	.word	0x0808e1d4
 80814d0:	0808ef30 	.word	0x0808ef30
 80814d4:	0808e1ec 	.word	0x0808e1ec
 80814d8:	08080229 	.word	0x08080229
 80814dc:	0808e569 	.word	0x0808e569
 80814e0:	20000670 	.word	0x20000670
 80814e4:	08083e95 	.word	0x08083e95

080814e8 <_ZN13camera_VC070611common_initEv>:
 80814e8:	2300      	movs	r3, #0
 80814ea:	66c3      	str	r3, [r0, #108]	; 0x6c
 80814ec:	6703      	str	r3, [r0, #112]	; 0x70
 80814ee:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80814f2:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
 80814f6:	7003      	strb	r3, [r0, #0]
 80814f8:	4770      	bx	lr

080814fa <_ZN13camera_VC0706C1EP11USARTSerial>:
 80814fa:	b508      	push	{r3, lr}
 80814fc:	f7ff fff4 	bl	80814e8 <_ZN13camera_VC070611common_initEv>
 8081500:	6701      	str	r1, [r0, #112]	; 0x70
 8081502:	bd08      	pop	{r3, pc}

08081504 <_ZN13camera_VC070611sendCommandEhPhh>:
 8081504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081508:	4606      	mov	r6, r0
 808150a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 808150c:	4688      	mov	r8, r1
 808150e:	4617      	mov	r7, r2
 8081510:	1e54      	subs	r4, r2, #1
 8081512:	1e5d      	subs	r5, r3, #1
 8081514:	b1b8      	cbz	r0, 8081546 <_ZN13camera_VC070611sendCommandEhPhh+0x42>
 8081516:	6803      	ldr	r3, [r0, #0]
 8081518:	2156      	movs	r1, #86	; 0x56
 808151a:	689b      	ldr	r3, [r3, #8]
 808151c:	4798      	blx	r3
 808151e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8081520:	7831      	ldrb	r1, [r6, #0]
 8081522:	6803      	ldr	r3, [r0, #0]
 8081524:	443d      	add	r5, r7
 8081526:	689b      	ldr	r3, [r3, #8]
 8081528:	4798      	blx	r3
 808152a:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 808152c:	4641      	mov	r1, r8
 808152e:	6803      	ldr	r3, [r0, #0]
 8081530:	689b      	ldr	r3, [r3, #8]
 8081532:	4798      	blx	r3
 8081534:	42a5      	cmp	r5, r4
 8081536:	d01f      	beq.n	8081578 <_ZN13camera_VC070611sendCommandEhPhh+0x74>
 8081538:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 808153a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 808153e:	6803      	ldr	r3, [r0, #0]
 8081540:	689b      	ldr	r3, [r3, #8]
 8081542:	4798      	blx	r3
 8081544:	e7f6      	b.n	8081534 <_ZN13camera_VC070611sendCommandEhPhh+0x30>
 8081546:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8081548:	2156      	movs	r1, #86	; 0x56
 808154a:	6803      	ldr	r3, [r0, #0]
 808154c:	443d      	add	r5, r7
 808154e:	689b      	ldr	r3, [r3, #8]
 8081550:	4798      	blx	r3
 8081552:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8081554:	7831      	ldrb	r1, [r6, #0]
 8081556:	6803      	ldr	r3, [r0, #0]
 8081558:	689b      	ldr	r3, [r3, #8]
 808155a:	4798      	blx	r3
 808155c:	6f30      	ldr	r0, [r6, #112]	; 0x70
 808155e:	4641      	mov	r1, r8
 8081560:	6803      	ldr	r3, [r0, #0]
 8081562:	689b      	ldr	r3, [r3, #8]
 8081564:	4798      	blx	r3
 8081566:	42ac      	cmp	r4, r5
 8081568:	d006      	beq.n	8081578 <_ZN13camera_VC070611sendCommandEhPhh+0x74>
 808156a:	6f30      	ldr	r0, [r6, #112]	; 0x70
 808156c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8081570:	6803      	ldr	r3, [r0, #0]
 8081572:	689b      	ldr	r3, [r3, #8]
 8081574:	4798      	blx	r3
 8081576:	e7f6      	b.n	8081566 <_ZN13camera_VC070611sendCommandEhPhh+0x62>
 8081578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808157c <_ZN13camera_VC070612readResponseEhh>:
 808157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808157e:	4605      	mov	r5, r0
 8081580:	460e      	mov	r6, r1
 8081582:	4617      	mov	r7, r2
 8081584:	2400      	movs	r4, #0
 8081586:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
 808158a:	42bc      	cmp	r4, r7
 808158c:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
 8081590:	d01f      	beq.n	80815d2 <_ZN13camera_VC070612readResponseEhh+0x56>
 8081592:	42b0      	cmp	r0, r6
 8081594:	d01d      	beq.n	80815d2 <_ZN13camera_VC070612readResponseEhh+0x56>
 8081596:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8081598:	b900      	cbnz	r0, 808159c <_ZN13camera_VC070612readResponseEhh+0x20>
 808159a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 808159c:	6803      	ldr	r3, [r0, #0]
 808159e:	691b      	ldr	r3, [r3, #16]
 80815a0:	4798      	blx	r3
 80815a2:	2800      	cmp	r0, #0
 80815a4:	dc05      	bgt.n	80815b2 <_ZN13camera_VC070612readResponseEhh+0x36>
 80815a6:	2001      	movs	r0, #1
 80815a8:	3401      	adds	r4, #1
 80815aa:	f006 fa7b 	bl	8087aa4 <delay>
 80815ae:	b2e4      	uxtb	r4, r4
 80815b0:	e7eb      	b.n	808158a <_ZN13camera_VC070612readResponseEhh+0xe>
 80815b2:	f895 4066 	ldrb.w	r4, [r5, #102]	; 0x66
 80815b6:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80815b8:	1c63      	adds	r3, r4, #1
 80815ba:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
 80815be:	b900      	cbnz	r0, 80815c2 <_ZN13camera_VC070612readResponseEhh+0x46>
 80815c0:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80815c2:	6803      	ldr	r3, [r0, #0]
 80815c4:	695b      	ldr	r3, [r3, #20]
 80815c6:	4798      	blx	r3
 80815c8:	192b      	adds	r3, r5, r4
 80815ca:	b2c0      	uxtb	r0, r0
 80815cc:	7058      	strb	r0, [r3, #1]
 80815ce:	2400      	movs	r4, #0
 80815d0:	e7db      	b.n	808158a <_ZN13camera_VC070612readResponseEhh+0xe>
 80815d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080815d4 <_ZN13camera_VC070610getVersionEv>:
 80815d4:	b513      	push	{r0, r1, r4, lr}
 80815d6:	4604      	mov	r4, r0
 80815d8:	aa02      	add	r2, sp, #8
 80815da:	2301      	movs	r3, #1
 80815dc:	f802 3d04 	strb.w	r3, [r2, #-4]!
 80815e0:	2111      	movs	r1, #17
 80815e2:	f7ff ff8f 	bl	8081504 <_ZN13camera_VC070611sendCommandEhPhh>
 80815e6:	22c8      	movs	r2, #200	; 0xc8
 80815e8:	2164      	movs	r1, #100	; 0x64
 80815ea:	4620      	mov	r0, r4
 80815ec:	f7ff ffc6 	bl	808157c <_ZN13camera_VC070612readResponseEhh>
 80815f0:	b128      	cbz	r0, 80815fe <_ZN13camera_VC070610getVersionEv+0x2a>
 80815f2:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80815f6:	2200      	movs	r2, #0
 80815f8:	4423      	add	r3, r4
 80815fa:	705a      	strb	r2, [r3, #1]
 80815fc:	1c60      	adds	r0, r4, #1
 80815fe:	b002      	add	sp, #8
 8081600:	bd10      	pop	{r4, pc}

08081602 <_ZN13camera_VC070614verifyResponseEh>:
 8081602:	7843      	ldrb	r3, [r0, #1]
 8081604:	2b76      	cmp	r3, #118	; 0x76
 8081606:	d10b      	bne.n	8081620 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 8081608:	7882      	ldrb	r2, [r0, #2]
 808160a:	7803      	ldrb	r3, [r0, #0]
 808160c:	429a      	cmp	r2, r3
 808160e:	d107      	bne.n	8081620 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 8081610:	78c3      	ldrb	r3, [r0, #3]
 8081612:	428b      	cmp	r3, r1
 8081614:	d104      	bne.n	8081620 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 8081616:	7900      	ldrb	r0, [r0, #4]
 8081618:	fab0 f080 	clz	r0, r0
 808161c:	0940      	lsrs	r0, r0, #5
 808161e:	4770      	bx	lr
 8081620:	2000      	movs	r0, #0
 8081622:	4770      	bx	lr

08081624 <_ZN13camera_VC070610runCommandEhPhhhb>:
 8081624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081628:	4698      	mov	r8, r3
 808162a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 808162e:	4604      	mov	r4, r0
 8081630:	460d      	mov	r5, r1
 8081632:	4617      	mov	r7, r2
 8081634:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8081638:	b11b      	cbz	r3, 8081642 <_ZN13camera_VC070610runCommandEhPhhhb+0x1e>
 808163a:	220a      	movs	r2, #10
 808163c:	2164      	movs	r1, #100	; 0x64
 808163e:	f7ff ff9d 	bl	808157c <_ZN13camera_VC070612readResponseEhh>
 8081642:	4643      	mov	r3, r8
 8081644:	463a      	mov	r2, r7
 8081646:	4629      	mov	r1, r5
 8081648:	4620      	mov	r0, r4
 808164a:	f7ff ff5b 	bl	8081504 <_ZN13camera_VC070611sendCommandEhPhh>
 808164e:	22c8      	movs	r2, #200	; 0xc8
 8081650:	4631      	mov	r1, r6
 8081652:	4620      	mov	r0, r4
 8081654:	f7ff ff92 	bl	808157c <_ZN13camera_VC070612readResponseEhh>
 8081658:	4286      	cmp	r6, r0
 808165a:	d105      	bne.n	8081668 <_ZN13camera_VC070610runCommandEhPhhhb+0x44>
 808165c:	4629      	mov	r1, r5
 808165e:	4620      	mov	r0, r4
 8081660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8081664:	f7ff bfcd 	b.w	8081602 <_ZN13camera_VC070614verifyResponseEh>
 8081668:	2000      	movs	r0, #0
 808166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808166e <_ZN13camera_VC07065resetEv>:
 808166e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8081670:	2300      	movs	r3, #0
 8081672:	aa04      	add	r2, sp, #16
 8081674:	f802 3d04 	strb.w	r3, [r2, #-4]!
 8081678:	2105      	movs	r1, #5
 808167a:	2301      	movs	r3, #1
 808167c:	e88d 000a 	stmia.w	sp, {r1, r3}
 8081680:	2126      	movs	r1, #38	; 0x26
 8081682:	f7ff ffcf 	bl	8081624 <_ZN13camera_VC070610runCommandEhPhhhb>
 8081686:	b005      	add	sp, #20
 8081688:	f85d fb04 	ldr.w	pc, [sp], #4

0808168c <_ZN13camera_VC07065beginEt>:
 808168c:	b510      	push	{r4, lr}
 808168e:	4604      	mov	r4, r0
 8081690:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8081692:	b110      	cbz	r0, 808169a <_ZN13camera_VC07065beginEt+0xe>
 8081694:	f002 f8fc 	bl	8083890 <_ZN18ParticleSoftSerial5beginEm>
 8081698:	e002      	b.n	80816a0 <_ZN13camera_VC07065beginEt+0x14>
 808169a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 808169c:	f007 faba 	bl	8088c14 <_ZN11USARTSerial5beginEm>
 80816a0:	4620      	mov	r0, r4
 80816a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80816a6:	f7ff bfe2 	b.w	808166e <_ZN13camera_VC07065resetEv>

080816aa <_ZN13camera_VC070619cameraFrameBuffCtrlEh>:
 80816aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80816ac:	2301      	movs	r3, #1
 80816ae:	f88d 300c 	strb.w	r3, [sp, #12]
 80816b2:	9301      	str	r3, [sp, #4]
 80816b4:	2305      	movs	r3, #5
 80816b6:	f88d 100d 	strb.w	r1, [sp, #13]
 80816ba:	9300      	str	r3, [sp, #0]
 80816bc:	aa03      	add	r2, sp, #12
 80816be:	2302      	movs	r3, #2
 80816c0:	2136      	movs	r1, #54	; 0x36
 80816c2:	f7ff ffaf 	bl	8081624 <_ZN13camera_VC070610runCommandEhPhhhb>
 80816c6:	b005      	add	sp, #20
 80816c8:	f85d fb04 	ldr.w	pc, [sp], #4

080816cc <_ZN13camera_VC070611takePictureEv>:
 80816cc:	2100      	movs	r1, #0
 80816ce:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
 80816d2:	f7ff bfea 	b.w	80816aa <_ZN13camera_VC070619cameraFrameBuffCtrlEh>

080816d6 <_ZN13camera_VC070611frameLengthEv>:
 80816d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80816d8:	2301      	movs	r3, #1
 80816da:	2200      	movs	r2, #0
 80816dc:	f88d 300c 	strb.w	r3, [sp, #12]
 80816e0:	9301      	str	r3, [sp, #4]
 80816e2:	2309      	movs	r3, #9
 80816e4:	f88d 200d 	strb.w	r2, [sp, #13]
 80816e8:	9300      	str	r3, [sp, #0]
 80816ea:	aa03      	add	r2, sp, #12
 80816ec:	2302      	movs	r3, #2
 80816ee:	2134      	movs	r1, #52	; 0x34
 80816f0:	4604      	mov	r4, r0
 80816f2:	f7ff ff97 	bl	8081624 <_ZN13camera_VC070610runCommandEhPhhhb>
 80816f6:	b140      	cbz	r0, 808170a <_ZN13camera_VC070611frameLengthEv+0x34>
 80816f8:	88e3      	ldrh	r3, [r4, #6]
 80816fa:	7a20      	ldrb	r0, [r4, #8]
 80816fc:	ba5b      	rev16	r3, r3
 80816fe:	b29b      	uxth	r3, r3
 8081700:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8081704:	7a63      	ldrb	r3, [r4, #9]
 8081706:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 808170a:	b004      	add	sp, #16
 808170c:	bd10      	pop	{r4, pc}

0808170e <_ZN13camera_VC070611readPictureEh>:
 808170e:	b570      	push	{r4, r5, r6, lr}
 8081710:	4604      	mov	r4, r0
 8081712:	460d      	mov	r5, r1
 8081714:	b086      	sub	sp, #24
 8081716:	220d      	movs	r2, #13
 8081718:	2100      	movs	r1, #0
 808171a:	a802      	add	r0, sp, #8
 808171c:	f009 fddf 	bl	808b2de <memset>
 8081720:	230c      	movs	r3, #12
 8081722:	f88d 3008 	strb.w	r3, [sp, #8]
 8081726:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 808172a:	260a      	movs	r6, #10
 808172c:	121a      	asrs	r2, r3, #8
 808172e:	f88d 200d 	strb.w	r2, [sp, #13]
 8081732:	f88d 300e 	strb.w	r3, [sp, #14]
 8081736:	2205      	movs	r2, #5
 8081738:	2300      	movs	r3, #0
 808173a:	e88d 000c 	stmia.w	sp, {r2, r3}
 808173e:	2132      	movs	r1, #50	; 0x32
 8081740:	230d      	movs	r3, #13
 8081742:	aa02      	add	r2, sp, #8
 8081744:	4620      	mov	r0, r4
 8081746:	f88d 600a 	strb.w	r6, [sp, #10]
 808174a:	f88d 6014 	strb.w	r6, [sp, #20]
 808174e:	f88d 5012 	strb.w	r5, [sp, #18]
 8081752:	f7ff ff67 	bl	8081624 <_ZN13camera_VC070610runCommandEhPhhhb>
 8081756:	b908      	cbnz	r0, 808175c <_ZN13camera_VC070611readPictureEh+0x4e>
 8081758:	2000      	movs	r0, #0
 808175a:	e00d      	b.n	8081778 <_ZN13camera_VC070611readPictureEh+0x6a>
 808175c:	1d69      	adds	r1, r5, #5
 808175e:	4632      	mov	r2, r6
 8081760:	b2c9      	uxtb	r1, r1
 8081762:	4620      	mov	r0, r4
 8081764:	f7ff ff0a 	bl	808157c <_ZN13camera_VC070612readResponseEhh>
 8081768:	2800      	cmp	r0, #0
 808176a:	d0f5      	beq.n	8081758 <_ZN13camera_VC070611readPictureEh+0x4a>
 808176c:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 8081770:	1c60      	adds	r0, r4, #1
 8081772:	4429      	add	r1, r5
 8081774:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8081778:	b006      	add	sp, #24
 808177a:	bd70      	pop	{r4, r5, r6, pc}

0808177c <_GLOBAL__sub_I__ZN13camera_VC070611common_initEv>:
 808177c:	f003 be14 	b.w	80853a8 <HAL_Pin_Map>

08081780 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8081780:	f003 be12 	b.w	80853a8 <HAL_Pin_Map>

08081784 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8081784:	f003 be10 	b.w	80853a8 <HAL_Pin_Map>

08081788 <_ZN9FatVolume9cacheSyncEv>:
 8081788:	b510      	push	{r4, lr}
 808178a:	4604      	mov	r4, r0
 808178c:	3024      	adds	r0, #36	; 0x24
 808178e:	f001 f935 	bl	80829fc <_ZN8FatCache4syncEv>
 8081792:	b128      	cbz	r0, 80817a0 <_ZN9FatVolume9cacheSyncEv+0x18>
 8081794:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8081798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808179c:	f001 b92e 	b.w	80829fc <_ZN8FatCache4syncEv>
 80817a0:	bd10      	pop	{r4, pc}

080817a2 <_ZN7FatFile11lfnChecksumEPh>:
 80817a2:	1e41      	subs	r1, r0, #1
 80817a4:	f100 020a 	add.w	r2, r0, #10
 80817a8:	2000      	movs	r0, #0
 80817aa:	0843      	lsrs	r3, r0, #1
 80817ac:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80817b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80817b4:	4418      	add	r0, r3
 80817b6:	428a      	cmp	r2, r1
 80817b8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80817bc:	d1f5      	bne.n	80817aa <_ZN7FatFile11lfnChecksumEPh+0x8>
 80817be:	4770      	bx	lr

080817c0 <_ZN7FatFile11openClusterEPS_>:
 80817c0:	b538      	push	{r3, r4, r5, lr}
 80817c2:	68cb      	ldr	r3, [r1, #12]
 80817c4:	4604      	mov	r4, r0
 80817c6:	460d      	mov	r5, r1
 80817c8:	b923      	cbnz	r3, 80817d4 <_ZN7FatFile11openClusterEPS_+0x14>
 80817ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80817ce:	6889      	ldr	r1, [r1, #8]
 80817d0:	f000 bc9d 	b.w	808210e <_ZN7FatFile8openRootEP9FatVolume>
 80817d4:	2224      	movs	r2, #36	; 0x24
 80817d6:	2100      	movs	r1, #0
 80817d8:	f009 fd81 	bl	808b2de <memset>
 80817dc:	2310      	movs	r3, #16
 80817de:	2001      	movs	r0, #1
 80817e0:	7023      	strb	r3, [r4, #0]
 80817e2:	70a0      	strb	r0, [r4, #2]
 80817e4:	68ab      	ldr	r3, [r5, #8]
 80817e6:	60a3      	str	r3, [r4, #8]
 80817e8:	68eb      	ldr	r3, [r5, #12]
 80817ea:	6223      	str	r3, [r4, #32]
 80817ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080817f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
 80817f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80817f4:	7803      	ldrb	r3, [r0, #0]
 80817f6:	1c44      	adds	r4, r0, #1
 80817f8:	2b20      	cmp	r3, #32
 80817fa:	d101      	bne.n	8081800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80817fc:	4620      	mov	r0, r4
 80817fe:	e7f9      	b.n	80817f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
 8081800:	4605      	mov	r5, r0
 8081802:	4f70      	ldr	r7, [pc, #448]	; (80819c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)
 8081804:	6088      	str	r0, [r1, #8]
 8081806:	1a2c      	subs	r4, r5, r0
 8081808:	462e      	mov	r6, r5
 808180a:	f815 3b01 	ldrb.w	r3, [r5], #1
 808180e:	b30b      	cbz	r3, 8081854 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8081810:	2b2f      	cmp	r3, #47	; 0x2f
 8081812:	d101      	bne.n	8081818 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8081814:	1903      	adds	r3, r0, r4
 8081816:	e017      	b.n	8081848 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
 8081818:	2b5c      	cmp	r3, #92	; 0x5c
 808181a:	d102      	bne.n	8081822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
 808181c:	2000      	movs	r0, #0
 808181e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081822:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8081826:	b2e4      	uxtb	r4, r4
 8081828:	2c1d      	cmp	r4, #29
 808182a:	d803      	bhi.n	8081834 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 808182c:	fa27 f404 	lsr.w	r4, r7, r4
 8081830:	07e4      	lsls	r4, r4, #31
 8081832:	d4f3      	bmi.n	808181c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8081834:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8081838:	2c3c      	cmp	r4, #60	; 0x3c
 808183a:	d0ef      	beq.n	808181c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 808183c:	3b20      	subs	r3, #32
 808183e:	2b5e      	cmp	r3, #94	; 0x5e
 8081840:	d9e1      	bls.n	8081806 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8081842:	e7eb      	b.n	808181c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8081844:	2d2f      	cmp	r5, #47	; 0x2f
 8081846:	d105      	bne.n	8081854 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8081848:	461e      	mov	r6, r3
 808184a:	f813 5b01 	ldrb.w	r5, [r3], #1
 808184e:	2d20      	cmp	r5, #32
 8081850:	d1f8      	bne.n	8081844 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8081852:	e7f9      	b.n	8081848 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
 8081854:	6016      	str	r6, [r2, #0]
 8081856:	1903      	adds	r3, r0, r4
 8081858:	4298      	cmp	r0, r3
 808185a:	ebc0 0803 	rsb	r8, r0, r3
 808185e:	d009      	beq.n	8081874 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
 8081860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8081864:	2a2e      	cmp	r2, #46	; 0x2e
 8081866:	d0f7      	beq.n	8081858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8081868:	2a20      	cmp	r2, #32
 808186a:	d0f5      	beq.n	8081858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 808186c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8081870:	dcd4      	bgt.n	808181c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8081872:	e001      	b.n	8081878 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8081874:	f04f 0800 	mov.w	r8, #0
 8081878:	f8c1 8004 	str.w	r8, [r1, #4]
 808187c:	f101 030c 	add.w	r3, r1, #12
 8081880:	f101 0217 	add.w	r2, r1, #23
 8081884:	2420      	movs	r4, #32
 8081886:	f803 4f01 	strb.w	r4, [r3, #1]!
 808188a:	4293      	cmp	r3, r2
 808188c:	d1fb      	bne.n	8081886 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 808188e:	4603      	mov	r3, r0
 8081890:	1a1a      	subs	r2, r3, r0
 8081892:	f813 4b01 	ldrb.w	r4, [r3], #1
 8081896:	2c2e      	cmp	r4, #46	; 0x2e
 8081898:	d0fa      	beq.n	8081890 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 808189a:	2c20      	cmp	r4, #32
 808189c:	d0f8      	beq.n	8081890 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 808189e:	fab2 f482 	clz	r4, r2
 80818a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80818a6:	0964      	lsrs	r4, r4, #5
 80818a8:	1c73      	adds	r3, r6, #1
 80818aa:	d107      	bne.n	80818bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 80818ac:	2700      	movs	r7, #0
 80818ae:	f04f 0e07 	mov.w	lr, #7
 80818b2:	463d      	mov	r5, r7
 80818b4:	46ba      	mov	sl, r7
 80818b6:	f04f 0908 	mov.w	r9, #8
 80818ba:	e009      	b.n	80818d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80818bc:	5d83      	ldrb	r3, [r0, r6]
 80818be:	2b2e      	cmp	r3, #46	; 0x2e
 80818c0:	d0f4      	beq.n	80818ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80818c2:	3e01      	subs	r6, #1
 80818c4:	e7f0      	b.n	80818a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
 80818c6:	5c83      	ldrb	r3, [r0, r2]
 80818c8:	2b20      	cmp	r3, #32
 80818ca:	d104      	bne.n	80818d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
 80818cc:	2400      	movs	r4, #0
 80818ce:	3201      	adds	r2, #1
 80818d0:	4542      	cmp	r2, r8
 80818d2:	dbf8      	blt.n	80818c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80818d4:	e04b      	b.n	808196e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
 80818d6:	2b2e      	cmp	r3, #46	; 0x2e
 80818d8:	d102      	bne.n	80818e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80818da:	42b2      	cmp	r2, r6
 80818dc:	d1f6      	bne.n	80818cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80818de:	e003      	b.n	80818e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 80818e0:	2b22      	cmp	r3, #34	; 0x22
 80818e2:	d017      	beq.n	8081914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80818e4:	2b7c      	cmp	r3, #124	; 0x7c
 80818e6:	d015      	beq.n	8081914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80818e8:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80818ec:	f1bc 0f05 	cmp.w	ip, #5
 80818f0:	d801      	bhi.n	80818f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80818f2:	2b2d      	cmp	r3, #45	; 0x2d
 80818f4:	d10e      	bne.n	8081914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80818f6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80818fa:	f1bc 0f05 	cmp.w	ip, #5
 80818fe:	d909      	bls.n	8081914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8081900:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8081904:	f1bc 0f02 	cmp.w	ip, #2
 8081908:	d904      	bls.n	8081914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 808190a:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 808190e:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8081912:	d902      	bls.n	808191a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8081914:	42b2      	cmp	r2, r6
 8081916:	d10e      	bne.n	8081936 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8081918:	e049      	b.n	80819ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 808191a:	42b2      	cmp	r2, r6
 808191c:	d047      	beq.n	80819ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 808191e:	4575      	cmp	r5, lr
 8081920:	d821      	bhi.n	8081966 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
 8081922:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8081926:	f1bc 0f19 	cmp.w	ip, #25
 808192a:	d808      	bhi.n	808193e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
 808192c:	3b20      	subs	r3, #32
 808192e:	b2db      	uxtb	r3, r3
 8081930:	ea49 0707 	orr.w	r7, r9, r7
 8081934:	e00a      	b.n	808194c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
 8081936:	4575      	cmp	r5, lr
 8081938:	d815      	bhi.n	8081966 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
 808193a:	2400      	movs	r4, #0
 808193c:	235f      	movs	r3, #95	; 0x5f
 808193e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8081942:	f1bc 0f19 	cmp.w	ip, #25
 8081946:	bf98      	it	ls
 8081948:	ea49 0a0a 	orrls.w	sl, r9, sl
 808194c:	f105 0c01 	add.w	ip, r5, #1
 8081950:	fa5f fc8c 	uxtb.w	ip, ip
 8081954:	440d      	add	r5, r1
 8081956:	f1bc 0f06 	cmp.w	ip, #6
 808195a:	736b      	strb	r3, [r5, #13]
 808195c:	d801      	bhi.n	8081962 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
 808195e:	f881 c00c 	strb.w	ip, [r1, #12]
 8081962:	4665      	mov	r5, ip
 8081964:	e7b3      	b.n	80818ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8081966:	f1be 0f0a 	cmp.w	lr, #10
 808196a:	d117      	bne.n	808199c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
 808196c:	2400      	movs	r4, #0
 808196e:	7b4b      	ldrb	r3, [r1, #13]
 8081970:	2b20      	cmp	r3, #32
 8081972:	f43f af53 	beq.w	808181c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8081976:	b13c      	cbz	r4, 8081988 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
 8081978:	ea1a 0f07 	tst.w	sl, r7
 808197c:	bf18      	it	ne
 808197e:	2702      	movne	r7, #2
 8081980:	700f      	strb	r7, [r1, #0]
 8081982:	2001      	movs	r0, #1
 8081984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081988:	7b0b      	ldrb	r3, [r1, #12]
 808198a:	2001      	movs	r0, #1
 808198c:	7008      	strb	r0, [r1, #0]
 808198e:	4419      	add	r1, r3
 8081990:	237e      	movs	r3, #126	; 0x7e
 8081992:	734b      	strb	r3, [r1, #13]
 8081994:	2331      	movs	r3, #49	; 0x31
 8081996:	738b      	strb	r3, [r1, #14]
 8081998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808199c:	42b2      	cmp	r2, r6
 808199e:	dce5      	bgt.n	808196c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80819a0:	4632      	mov	r2, r6
 80819a2:	f04f 0e0a 	mov.w	lr, #10
 80819a6:	2508      	movs	r5, #8
 80819a8:	f04f 0910 	mov.w	r9, #16
 80819ac:	e78e      	b.n	80818cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80819ae:	f1be 0f0a 	cmp.w	lr, #10
 80819b2:	d0db      	beq.n	808196c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80819b4:	4632      	mov	r2, r6
 80819b6:	f04f 0e0a 	mov.w	lr, #10
 80819ba:	2508      	movs	r5, #8
 80819bc:	f04f 0910 	mov.w	r9, #16
 80819c0:	e785      	b.n	80818ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80819c2:	bf00      	nop
 80819c4:	31000101 	.word	0x31000101

080819c8 <_ZN7FatFile9printNameEP5Print>:
 80819c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80819cc:	78c3      	ldrb	r3, [r0, #3]
 80819ce:	b08b      	sub	sp, #44	; 0x2c
 80819d0:	2400      	movs	r4, #0
 80819d2:	4680      	mov	r8, r0
 80819d4:	4689      	mov	r9, r1
 80819d6:	f88d 4004 	strb.w	r4, [sp, #4]
 80819da:	f88d 4005 	strb.w	r4, [sp, #5]
 80819de:	b913      	cbnz	r3, 80819e6 <_ZN7FatFile9printNameEP5Print+0x1e>
 80819e0:	f000 fab6 	bl	8081f50 <_ZN7FatFile8printSFNEP5Print>
 80819e4:	e04f      	b.n	8081a86 <_ZN7FatFile9printNameEP5Print+0xbe>
 80819e6:	4601      	mov	r1, r0
 80819e8:	a801      	add	r0, sp, #4
 80819ea:	f7ff fee9 	bl	80817c0 <_ZN7FatFile11openClusterEPS_>
 80819ee:	2800      	cmp	r0, #0
 80819f0:	d046      	beq.n	8081a80 <_ZN7FatFile9printNameEP5Print+0xb8>
 80819f2:	2601      	movs	r6, #1
 80819f4:	f898 3003 	ldrb.w	r3, [r8, #3]
 80819f8:	42b3      	cmp	r3, r6
 80819fa:	d341      	bcc.n	8081a80 <_ZN7FatFile9printNameEP5Print+0xb8>
 80819fc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8081a00:	a801      	add	r0, sp, #4
 8081a02:	1b89      	subs	r1, r1, r6
 8081a04:	0149      	lsls	r1, r1, #5
 8081a06:	f000 fc6a 	bl	80822de <_ZN7FatFile7seekSetEm>
 8081a0a:	2800      	cmp	r0, #0
 8081a0c:	d038      	beq.n	8081a80 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081a0e:	2100      	movs	r1, #0
 8081a10:	a801      	add	r0, sp, #4
 8081a12:	f000 fc47 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8081a16:	4607      	mov	r7, r0
 8081a18:	2800      	cmp	r0, #0
 8081a1a:	d031      	beq.n	8081a80 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081a1c:	7ac3      	ldrb	r3, [r0, #11]
 8081a1e:	2b0f      	cmp	r3, #15
 8081a20:	d12e      	bne.n	8081a80 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081a22:	7803      	ldrb	r3, [r0, #0]
 8081a24:	f003 031f 	and.w	r3, r3, #31
 8081a28:	429e      	cmp	r6, r3
 8081a2a:	d129      	bne.n	8081a80 <_ZN7FatFile9printNameEP5Print+0xb8>
 8081a2c:	2500      	movs	r5, #0
 8081a2e:	2d04      	cmp	r5, #4
 8081a30:	b2eb      	uxtb	r3, r5
 8081a32:	d804      	bhi.n	8081a3e <_ZN7FatFile9printNameEP5Print+0x76>
 8081a34:	eb07 0345 	add.w	r3, r7, r5, lsl #1
 8081a38:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 8081a3c:	e00b      	b.n	8081a56 <_ZN7FatFile9printNameEP5Print+0x8e>
 8081a3e:	2b0a      	cmp	r3, #10
 8081a40:	bf95      	itete	ls
 8081a42:	f105 33ff 	addls.w	r3, r5, #4294967295
 8081a46:	1c6b      	addhi	r3, r5, #1
 8081a48:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
 8081a4c:	eb07 0343 	addhi.w	r3, r7, r3, lsl #1
 8081a50:	bf94      	ite	ls
 8081a52:	88d9      	ldrhls	r1, [r3, #6]
 8081a54:	8899      	ldrhhi	r1, [r3, #4]
 8081a56:	b169      	cbz	r1, 8081a74 <_ZN7FatFile9printNameEP5Print+0xac>
 8081a58:	297f      	cmp	r1, #127	; 0x7f
 8081a5a:	f8d9 3000 	ldr.w	r3, [r9]
 8081a5e:	bf28      	it	cs
 8081a60:	213f      	movcs	r1, #63	; 0x3f
 8081a62:	689b      	ldr	r3, [r3, #8]
 8081a64:	b2c9      	uxtb	r1, r1
 8081a66:	4648      	mov	r0, r9
 8081a68:	3501      	adds	r5, #1
 8081a6a:	4798      	blx	r3
 8081a6c:	2d0d      	cmp	r5, #13
 8081a6e:	f104 0401 	add.w	r4, r4, #1
 8081a72:	d1dc      	bne.n	8081a2e <_ZN7FatFile9printNameEP5Print+0x66>
 8081a74:	783b      	ldrb	r3, [r7, #0]
 8081a76:	065b      	lsls	r3, r3, #25
 8081a78:	d404      	bmi.n	8081a84 <_ZN7FatFile9printNameEP5Print+0xbc>
 8081a7a:	3601      	adds	r6, #1
 8081a7c:	b2f6      	uxtb	r6, r6
 8081a7e:	e7b9      	b.n	80819f4 <_ZN7FatFile9printNameEP5Print+0x2c>
 8081a80:	2000      	movs	r0, #0
 8081a82:	e000      	b.n	8081a86 <_ZN7FatFile9printNameEP5Print+0xbe>
 8081a84:	4620      	mov	r0, r4
 8081a86:	b00b      	add	sp, #44	; 0x2c
 8081a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08081a8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
 8081a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081a90:	4606      	mov	r6, r0
 8081a92:	460d      	mov	r5, r1
 8081a94:	f891 900c 	ldrb.w	r9, [r1, #12]
 8081a98:	2402      	movs	r4, #2
 8081a9a:	277e      	movs	r7, #126	; 0x7e
 8081a9c:	f101 080d 	add.w	r8, r1, #13
 8081aa0:	6869      	ldr	r1, [r5, #4]
 8081aa2:	68aa      	ldr	r2, [r5, #8]
 8081aa4:	1863      	adds	r3, r4, r1
 8081aa6:	b29b      	uxth	r3, r3
 8081aa8:	4411      	add	r1, r2
 8081aaa:	4291      	cmp	r1, r2
 8081aac:	d006      	beq.n	8081abc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
 8081aae:	f812 0b01 	ldrb.w	r0, [r2], #1
 8081ab2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8081ab6:	4043      	eors	r3, r0
 8081ab8:	b29b      	uxth	r3, r3
 8081aba:	e7f6      	b.n	8081aaa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8081abc:	f1b9 0f03 	cmp.w	r9, #3
 8081ac0:	bf28      	it	cs
 8081ac2:	f04f 0903 	movcs.w	r9, #3
 8081ac6:	f109 0204 	add.w	r2, r9, #4
 8081aca:	b2d2      	uxtb	r2, r2
 8081acc:	f003 010f 	and.w	r1, r3, #15
 8081ad0:	18a8      	adds	r0, r5, r2
 8081ad2:	3a01      	subs	r2, #1
 8081ad4:	2909      	cmp	r1, #9
 8081ad6:	b2d2      	uxtb	r2, r2
 8081ad8:	bf94      	ite	ls
 8081ada:	3130      	addls	r1, #48	; 0x30
 8081adc:	3137      	addhi	r1, #55	; 0x37
 8081ade:	4591      	cmp	r9, r2
 8081ae0:	7341      	strb	r1, [r0, #13]
 8081ae2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8081ae6:	d3f1      	bcc.n	8081acc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
 8081ae8:	eb05 0309 	add.w	r3, r5, r9
 8081aec:	735f      	strb	r7, [r3, #13]
 8081aee:	2100      	movs	r1, #0
 8081af0:	4630      	mov	r0, r6
 8081af2:	f000 fbf4 	bl	80822de <_ZN7FatFile7seekSetEm>
 8081af6:	2101      	movs	r1, #1
 8081af8:	4630      	mov	r0, r6
 8081afa:	f000 fbd3 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8081afe:	4601      	mov	r1, r0
 8081b00:	b928      	cbnz	r0, 8081b0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
 8081b02:	7870      	ldrb	r0, [r6, #1]
 8081b04:	fab0 f080 	clz	r0, r0
 8081b08:	0940      	lsrs	r0, r0, #5
 8081b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081b0e:	7803      	ldrb	r3, [r0, #0]
 8081b10:	b14b      	cbz	r3, 8081b26 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
 8081b12:	7ac3      	ldrb	r3, [r0, #11]
 8081b14:	071b      	lsls	r3, r3, #28
 8081b16:	d4ee      	bmi.n	8081af6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8081b18:	220b      	movs	r2, #11
 8081b1a:	4640      	mov	r0, r8
 8081b1c:	f009 fbaa 	bl	808b274 <memcmp>
 8081b20:	2800      	cmp	r0, #0
 8081b22:	d1e8      	bne.n	8081af6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8081b24:	e002      	b.n	8081b2c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>
 8081b26:	2001      	movs	r0, #1
 8081b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081b2c:	3401      	adds	r4, #1
 8081b2e:	b2a4      	uxth	r4, r4
 8081b30:	2c64      	cmp	r4, #100	; 0x64
 8081b32:	d1b5      	bne.n	8081aa0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8081b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08081b38 <_ZN7FatFile4openEPS_P7fname_ti>:
 8081b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081b3c:	469b      	mov	fp, r3
 8081b3e:	780b      	ldrb	r3, [r1, #0]
 8081b40:	b089      	sub	sp, #36	; 0x24
 8081b42:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081b46:	9005      	str	r0, [sp, #20]
 8081b48:	460e      	mov	r6, r1
 8081b4a:	4691      	mov	r9, r2
 8081b4c:	d101      	bne.n	8081b52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
 8081b4e:	2000      	movs	r0, #0
 8081b50:	e1a0      	b.n	8081e94 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
 8081b52:	9b05      	ldr	r3, [sp, #20]
 8081b54:	781b      	ldrb	r3, [r3, #0]
 8081b56:	2b00      	cmp	r3, #0
 8081b58:	d1f9      	bne.n	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081b5a:	6853      	ldr	r3, [r2, #4]
 8081b5c:	9302      	str	r3, [sp, #8]
 8081b5e:	7813      	ldrb	r3, [r2, #0]
 8081b60:	079b      	lsls	r3, r3, #30
 8081b62:	f000 818d 	beq.w	8081e80 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 8081b66:	9b02      	ldr	r3, [sp, #8]
 8081b68:	270d      	movs	r7, #13
 8081b6a:	330c      	adds	r3, #12
 8081b6c:	fbb3 f7f7 	udiv	r7, r3, r7
 8081b70:	3701      	adds	r7, #1
 8081b72:	b2ff      	uxtb	r7, r7
 8081b74:	f04f 0800 	mov.w	r8, #0
 8081b78:	2100      	movs	r1, #0
 8081b7a:	4630      	mov	r0, r6
 8081b7c:	f000 fbaf 	bl	80822de <_ZN7FatFile7seekSetEm>
 8081b80:	4644      	mov	r4, r8
 8081b82:	4643      	mov	r3, r8
 8081b84:	4645      	mov	r5, r8
 8081b86:	f109 020d 	add.w	r2, r9, #13
 8081b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8081b8e:	f8cd 8010 	str.w	r8, [sp, #16]
 8081b92:	9206      	str	r2, [sp, #24]
 8081b94:	6972      	ldr	r2, [r6, #20]
 8081b96:	2101      	movs	r1, #1
 8081b98:	4630      	mov	r0, r6
 8081b9a:	9307      	str	r3, [sp, #28]
 8081b9c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
 8081ba0:	f000 fb80 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8081ba4:	9b07      	ldr	r3, [sp, #28]
 8081ba6:	b920      	cbnz	r0, 8081bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
 8081ba8:	7873      	ldrb	r3, [r6, #1]
 8081baa:	2b00      	cmp	r3, #0
 8081bac:	f000 8090 	beq.w	8081cd0 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8081bb0:	e7cd      	b.n	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081bb2:	7802      	ldrb	r2, [r0, #0]
 8081bb4:	2ae5      	cmp	r2, #229	; 0xe5
 8081bb6:	d000      	beq.n	8081bba <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8081bb8:	b942      	cbnz	r2, 8081bcc <_ZN7FatFile4openEPS_P7fname_ti+0x94>
 8081bba:	2c00      	cmp	r4, #0
 8081bbc:	bf08      	it	eq
 8081bbe:	46d0      	moveq	r8, sl
 8081bc0:	42bc      	cmp	r4, r7
 8081bc2:	bf3c      	itt	cc
 8081bc4:	3401      	addcc	r4, #1
 8081bc6:	b2e4      	uxtbcc	r4, r4
 8081bc8:	b922      	cbnz	r2, 8081bd4 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 8081bca:	e081      	b.n	8081cd0 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8081bcc:	42bc      	cmp	r4, r7
 8081bce:	bf38      	it	cc
 8081bd0:	2400      	movcc	r4, #0
 8081bd2:	e003      	b.n	8081bdc <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
 8081bd4:	2ae5      	cmp	r2, #229	; 0xe5
 8081bd6:	d101      	bne.n	8081bdc <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
 8081bd8:	2500      	movs	r5, #0
 8081bda:	e7db      	b.n	8081b94 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
 8081bdc:	2a2e      	cmp	r2, #46	; 0x2e
 8081bde:	d0fb      	beq.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081be0:	7ac1      	ldrb	r1, [r0, #11]
 8081be2:	290f      	cmp	r1, #15
 8081be4:	d152      	bne.n	8081c8c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
 8081be6:	b93d      	cbnz	r5, 8081bf8 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
 8081be8:	0651      	lsls	r1, r2, #25
 8081bea:	d5d3      	bpl.n	8081b94 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
 8081bec:	7b43      	ldrb	r3, [r0, #13]
 8081bee:	f002 051f 	and.w	r5, r2, #31
 8081bf2:	9303      	str	r3, [sp, #12]
 8081bf4:	462b      	mov	r3, r5
 8081bf6:	e007      	b.n	8081c08 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
 8081bf8:	3b01      	subs	r3, #1
 8081bfa:	b2db      	uxtb	r3, r3
 8081bfc:	429a      	cmp	r2, r3
 8081bfe:	d1eb      	bne.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c00:	7b42      	ldrb	r2, [r0, #13]
 8081c02:	9903      	ldr	r1, [sp, #12]
 8081c04:	4291      	cmp	r1, r2
 8081c06:	d1e7      	bne.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c08:	1e5a      	subs	r2, r3, #1
 8081c0a:	f04f 0c0d 	mov.w	ip, #13
 8081c0e:	fb0c fc02 	mul.w	ip, ip, r2
 8081c12:	9a02      	ldr	r2, [sp, #8]
 8081c14:	4562      	cmp	r2, ip
 8081c16:	d9df      	bls.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c18:	f04f 0e00 	mov.w	lr, #0
 8081c1c:	f1be 0f04 	cmp.w	lr, #4
 8081c20:	fa5f f28e 	uxtb.w	r2, lr
 8081c24:	d804      	bhi.n	8081c30 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
 8081c26:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8081c2a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8081c2e:	e00c      	b.n	8081c4a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
 8081c30:	2a0a      	cmp	r2, #10
 8081c32:	bf95      	itete	ls
 8081c34:	f10e 32ff 	addls.w	r2, lr, #4294967295
 8081c38:	f10e 0201 	addhi.w	r2, lr, #1
 8081c3c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
 8081c40:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 8081c44:	bf94      	ite	ls
 8081c46:	88d2      	ldrhls	r2, [r2, #6]
 8081c48:	8892      	ldrhhi	r2, [r2, #4]
 8081c4a:	9902      	ldr	r1, [sp, #8]
 8081c4c:	4561      	cmp	r1, ip
 8081c4e:	d103      	bne.n	8081c58 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
 8081c50:	2a00      	cmp	r2, #0
 8081c52:	bf18      	it	ne
 8081c54:	2500      	movne	r5, #0
 8081c56:	e79d      	b.n	8081b94 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
 8081c58:	2aff      	cmp	r2, #255	; 0xff
 8081c5a:	d8bd      	bhi.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c5c:	b2d2      	uxtb	r2, r2
 8081c5e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8081c62:	2919      	cmp	r1, #25
 8081c64:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8081c68:	bf98      	it	ls
 8081c6a:	3220      	addls	r2, #32
 8081c6c:	f811 100c 	ldrb.w	r1, [r1, ip]
 8081c70:	f10c 0a01 	add.w	sl, ip, #1
 8081c74:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8081c78:	bf98      	it	ls
 8081c7a:	b2d2      	uxtbls	r2, r2
 8081c7c:	f1bc 0f19 	cmp.w	ip, #25
 8081c80:	bf9c      	itt	ls
 8081c82:	3120      	addls	r1, #32
 8081c84:	b2c9      	uxtbls	r1, r1
 8081c86:	4291      	cmp	r1, r2
 8081c88:	d1a6      	bne.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c8a:	e0fb      	b.n	8081e84 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
 8081c8c:	0709      	lsls	r1, r1, #28
 8081c8e:	d4a3      	bmi.n	8081bd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c90:	b14d      	cbz	r5, 8081ca6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
 8081c92:	2b01      	cmp	r3, #1
 8081c94:	f47f af5b 	bne.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081c98:	f7ff fd83 	bl	80817a2 <_ZN7FatFile11lfnChecksumEPh>
 8081c9c:	9b03      	ldr	r3, [sp, #12]
 8081c9e:	4283      	cmp	r3, r0
 8081ca0:	f47f af55 	bne.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081ca4:	e00f      	b.n	8081cc6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
 8081ca6:	220b      	movs	r2, #11
 8081ca8:	9906      	ldr	r1, [sp, #24]
 8081caa:	9307      	str	r3, [sp, #28]
 8081cac:	f009 fae2 	bl	808b274 <memcmp>
 8081cb0:	9b07      	ldr	r3, [sp, #28]
 8081cb2:	2800      	cmp	r0, #0
 8081cb4:	f47f af6e 	bne.w	8081b94 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
 8081cb8:	f899 2000 	ldrb.w	r2, [r9]
 8081cbc:	07d2      	lsls	r2, r2, #31
 8081cbe:	d502      	bpl.n	8081cc6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
 8081cc0:	2201      	movs	r2, #1
 8081cc2:	9204      	str	r2, [sp, #16]
 8081cc4:	e766      	b.n	8081b94 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
 8081cc6:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8081cca:	f000 80d1 	beq.w	8081e70 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 8081cce:	e73e      	b.n	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081cd0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8081cd4:	f43f af3b 	beq.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081cd8:	f00b 0303 	and.w	r3, fp, #3
 8081cdc:	3b01      	subs	r3, #1
 8081cde:	2b01      	cmp	r3, #1
 8081ce0:	f63f af35 	bhi.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081ce4:	2c00      	cmp	r4, #0
 8081ce6:	bf08      	it	eq
 8081ce8:	46d0      	moveq	r8, sl
 8081cea:	42bc      	cmp	r4, r7
 8081cec:	d302      	bcc.n	8081cf4 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
 8081cee:	9b04      	ldr	r3, [sp, #16]
 8081cf0:	b9cb      	cbnz	r3, 8081d26 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 8081cf2:	e01f      	b.n	8081d34 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
 8081cf4:	2100      	movs	r1, #0
 8081cf6:	4630      	mov	r0, r6
 8081cf8:	f000 fad4 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8081cfc:	b910      	cbnz	r0, 8081d04 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
 8081cfe:	7873      	ldrb	r3, [r6, #1]
 8081d00:	b15b      	cbz	r3, 8081d1a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 8081d02:	e724      	b.n	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081d04:	3401      	adds	r4, #1
 8081d06:	b2e4      	uxtb	r4, r4
 8081d08:	e7ef      	b.n	8081cea <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 8081d0a:	68b3      	ldr	r3, [r6, #8]
 8081d0c:	791b      	ldrb	r3, [r3, #4]
 8081d0e:	2b01      	cmp	r3, #1
 8081d10:	d8ed      	bhi.n	8081cee <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
 8081d12:	3410      	adds	r4, #16
 8081d14:	b2e4      	uxtb	r4, r4
 8081d16:	42a7      	cmp	r7, r4
 8081d18:	d9e9      	bls.n	8081cee <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
 8081d1a:	4630      	mov	r0, r6
 8081d1c:	f000 f97e 	bl	808201c <_ZN7FatFile13addDirClusterEv>
 8081d20:	2800      	cmp	r0, #0
 8081d22:	d1f2      	bne.n	8081d0a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 8081d24:	e713      	b.n	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081d26:	4649      	mov	r1, r9
 8081d28:	4630      	mov	r0, r6
 8081d2a:	f7ff feaf 	bl	8081a8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8081d2e:	2800      	cmp	r0, #0
 8081d30:	f43f af0d 	beq.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081d34:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8081d38:	4630      	mov	r0, r6
 8081d3a:	f000 fad0 	bl	80822de <_ZN7FatFile7seekSetEm>
 8081d3e:	2800      	cmp	r0, #0
 8081d40:	f43f af05 	beq.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081d44:	1e7d      	subs	r5, r7, #1
 8081d46:	b2ed      	uxtb	r5, r5
 8081d48:	462c      	mov	r4, r5
 8081d4a:	f04f 0a00 	mov.w	sl, #0
 8081d4e:	f04f 080f 	mov.w	r8, #15
 8081d52:	e041      	b.n	8081dd8 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
 8081d54:	2100      	movs	r1, #0
 8081d56:	4630      	mov	r0, r6
 8081d58:	f000 faa4 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8081d5c:	4607      	mov	r7, r0
 8081d5e:	2800      	cmp	r0, #0
 8081d60:	f43f aef5 	beq.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081d64:	68b2      	ldr	r2, [r6, #8]
 8081d66:	42ac      	cmp	r4, r5
 8081d68:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081d6c:	f043 0301 	orr.w	r3, r3, #1
 8081d70:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8081d74:	bf14      	ite	ne
 8081d76:	4622      	movne	r2, r4
 8081d78:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8081d7c:	7002      	strb	r2, [r0, #0]
 8081d7e:	f880 800b 	strb.w	r8, [r0, #11]
 8081d82:	f880 a00c 	strb.w	sl, [r0, #12]
 8081d86:	f109 000d 	add.w	r0, r9, #13
 8081d8a:	9203      	str	r2, [sp, #12]
 8081d8c:	f7ff fd09 	bl	80817a2 <_ZN7FatFile11lfnChecksumEPh>
 8081d90:	9a03      	ldr	r2, [sp, #12]
 8081d92:	7378      	strb	r0, [r7, #13]
 8081d94:	f887 a01a 	strb.w	sl, [r7, #26]
 8081d98:	f887 a01b 	strb.w	sl, [r7, #27]
 8081d9c:	f002 021f 	and.w	r2, r2, #31
 8081da0:	230d      	movs	r3, #13
 8081da2:	3a01      	subs	r2, #1
 8081da4:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8081da8:	435a      	muls	r2, r3
 8081daa:	2300      	movs	r3, #0
 8081dac:	9902      	ldr	r1, [sp, #8]
 8081dae:	4291      	cmp	r1, r2
 8081db0:	d915      	bls.n	8081dde <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8081db2:	f81e 1002 	ldrb.w	r1, [lr, r2]
 8081db6:	2b04      	cmp	r3, #4
 8081db8:	fa5f fc83 	uxtb.w	ip, r3
 8081dbc:	f103 0001 	add.w	r0, r3, #1
 8081dc0:	d813      	bhi.n	8081dea <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
 8081dc2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8081dc6:	f8a3 1001 	strh.w	r1, [r3, #1]
 8081dca:	280d      	cmp	r0, #13
 8081dcc:	f102 0201 	add.w	r2, r2, #1
 8081dd0:	4603      	mov	r3, r0
 8081dd2:	d1eb      	bne.n	8081dac <_ZN7FatFile4openEPS_P7fname_ti+0x274>
 8081dd4:	3c01      	subs	r4, #1
 8081dd6:	b2e4      	uxtb	r4, r4
 8081dd8:	2c00      	cmp	r4, #0
 8081dda:	d1bb      	bne.n	8081d54 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 8081ddc:	e00e      	b.n	8081dfc <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
 8081dde:	bf14      	ite	ne
 8081de0:	f04f 31ff 	movne.w	r1, #4294967295
 8081de4:	2100      	moveq	r1, #0
 8081de6:	b289      	uxth	r1, r1
 8081de8:	e7e5      	b.n	8081db6 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 8081dea:	f1bc 0f0a 	cmp.w	ip, #10
 8081dee:	bf94      	ite	ls
 8081df0:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
 8081df4:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8081df8:	8099      	strh	r1, [r3, #4]
 8081dfa:	e7e6      	b.n	8081dca <_ZN7FatFile4openEPS_P7fname_ti+0x292>
 8081dfc:	6973      	ldr	r3, [r6, #20]
 8081dfe:	4621      	mov	r1, r4
 8081e00:	4630      	mov	r0, r6
 8081e02:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
 8081e06:	f000 fa4d 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8081e0a:	4607      	mov	r7, r0
 8081e0c:	2800      	cmp	r0, #0
 8081e0e:	f43f ae9e 	beq.w	8081b4e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081e12:	2220      	movs	r2, #32
 8081e14:	4621      	mov	r1, r4
 8081e16:	f009 fa62 	bl	808b2de <memset>
 8081e1a:	464b      	mov	r3, r9
 8081e1c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8081e20:	603a      	str	r2, [r7, #0]
 8081e22:	685a      	ldr	r2, [r3, #4]
 8081e24:	607a      	str	r2, [r7, #4]
 8081e26:	891a      	ldrh	r2, [r3, #8]
 8081e28:	813a      	strh	r2, [r7, #8]
 8081e2a:	7a9b      	ldrb	r3, [r3, #10]
 8081e2c:	72bb      	strb	r3, [r7, #10]
 8081e2e:	f899 3000 	ldrb.w	r3, [r9]
 8081e32:	f003 0318 	and.w	r3, r3, #24
 8081e36:	733b      	strb	r3, [r7, #12]
 8081e38:	4b18      	ldr	r3, [pc, #96]	; (8081e9c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 8081e3a:	681b      	ldr	r3, [r3, #0]
 8081e3c:	b12b      	cbz	r3, 8081e4a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
 8081e3e:	f107 010e 	add.w	r1, r7, #14
 8081e42:	f107 0010 	add.w	r0, r7, #16
 8081e46:	4798      	blx	r3
 8081e48:	e006      	b.n	8081e58 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
 8081e4a:	2321      	movs	r3, #33	; 0x21
 8081e4c:	743b      	strb	r3, [r7, #16]
 8081e4e:	2328      	movs	r3, #40	; 0x28
 8081e50:	747b      	strb	r3, [r7, #17]
 8081e52:	2308      	movs	r3, #8
 8081e54:	73bc      	strb	r4, [r7, #14]
 8081e56:	73fb      	strb	r3, [r7, #15]
 8081e58:	8a3b      	ldrh	r3, [r7, #16]
 8081e5a:	827b      	strh	r3, [r7, #18]
 8081e5c:	833b      	strh	r3, [r7, #24]
 8081e5e:	89fb      	ldrh	r3, [r7, #14]
 8081e60:	82fb      	strh	r3, [r7, #22]
 8081e62:	68b2      	ldr	r2, [r6, #8]
 8081e64:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081e68:	f043 0301 	orr.w	r3, r3, #1
 8081e6c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8081e70:	9500      	str	r5, [sp, #0]
 8081e72:	465b      	mov	r3, fp
 8081e74:	4652      	mov	r2, sl
 8081e76:	4631      	mov	r1, r6
 8081e78:	9805      	ldr	r0, [sp, #20]
 8081e7a:	f000 fa79 	bl	8082370 <_ZN7FatFile15openCachedEntryEPS_tih>
 8081e7e:	e009      	b.n	8081e94 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
 8081e80:	2701      	movs	r7, #1
 8081e82:	e677      	b.n	8081b74 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8081e84:	f10e 0e01 	add.w	lr, lr, #1
 8081e88:	f1be 0f0d 	cmp.w	lr, #13
 8081e8c:	f43f ae82 	beq.w	8081b94 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
 8081e90:	46d4      	mov	ip, sl
 8081e92:	e6c3      	b.n	8081c1c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
 8081e94:	b009      	add	sp, #36	; 0x24
 8081e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081e9a:	bf00      	nop
 8081e9c:	20000714 	.word	0x20000714

08081ea0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081ea0:	f003 ba82 	b.w	80853a8 <HAL_Pin_Map>

08081ea4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8081ea4:	f003 ba80 	b.w	80853a8 <HAL_Pin_Map>

08081ea8 <_ZN7ostream7do_fillEj>:
 8081ea8:	b538      	push	{r3, r4, r5, lr}
 8081eaa:	4604      	mov	r4, r0
 8081eac:	460d      	mov	r5, r1
 8081eae:	6821      	ldr	r1, [r4, #0]
 8081eb0:	f851 2c0c 	ldr.w	r2, [r1, #-12]
 8081eb4:	18a3      	adds	r3, r4, r2
 8081eb6:	68d8      	ldr	r0, [r3, #12]
 8081eb8:	4285      	cmp	r5, r0
 8081eba:	d205      	bcs.n	8081ec8 <_ZN7ostream7do_fillEj+0x20>
 8081ebc:	680b      	ldr	r3, [r1, #0]
 8081ebe:	4620      	mov	r0, r4
 8081ec0:	5ca1      	ldrb	r1, [r4, r2]
 8081ec2:	4798      	blx	r3
 8081ec4:	3501      	adds	r5, #1
 8081ec6:	e7f2      	b.n	8081eae <_ZN7ostream7do_fillEj+0x6>
 8081ec8:	2200      	movs	r2, #0
 8081eca:	60da      	str	r2, [r3, #12]
 8081ecc:	bd38      	pop	{r3, r4, r5, pc}

08081ece <_ZN7ostream13fill_not_leftEj>:
 8081ece:	6803      	ldr	r3, [r0, #0]
 8081ed0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8081ed4:	4403      	add	r3, r0
 8081ed6:	685b      	ldr	r3, [r3, #4]
 8081ed8:	f003 0307 	and.w	r3, r3, #7
 8081edc:	2b01      	cmp	r3, #1
 8081ede:	d001      	beq.n	8081ee4 <_ZN7ostream13fill_not_leftEj+0x16>
 8081ee0:	f7ff bfe2 	b.w	8081ea8 <_ZN7ostream7do_fillEj>
 8081ee4:	4770      	bx	lr

08081ee6 <_ZN7ostream6putPgmEPKc>:
 8081ee6:	b570      	push	{r4, r5, r6, lr}
 8081ee8:	460b      	mov	r3, r1
 8081eea:	4605      	mov	r5, r0
 8081eec:	460c      	mov	r4, r1
 8081eee:	1b1e      	subs	r6, r3, r4
 8081ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081ef4:	2a00      	cmp	r2, #0
 8081ef6:	d1fa      	bne.n	8081eee <_ZN7ostream6putPgmEPKc+0x8>
 8081ef8:	4631      	mov	r1, r6
 8081efa:	4628      	mov	r0, r5
 8081efc:	f7ff ffe7 	bl	8081ece <_ZN7ostream13fill_not_leftEj>
 8081f00:	3c01      	subs	r4, #1
 8081f02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8081f06:	b121      	cbz	r1, 8081f12 <_ZN7ostream6putPgmEPKc+0x2c>
 8081f08:	682b      	ldr	r3, [r5, #0]
 8081f0a:	4628      	mov	r0, r5
 8081f0c:	681b      	ldr	r3, [r3, #0]
 8081f0e:	4798      	blx	r3
 8081f10:	e7f7      	b.n	8081f02 <_ZN7ostream6putPgmEPKc+0x1c>
 8081f12:	4631      	mov	r1, r6
 8081f14:	4628      	mov	r0, r5
 8081f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081f1a:	f7ff bfc5 	b.w	8081ea8 <_ZN7ostream7do_fillEj>

08081f1e <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8081f1e:	f003 ba43 	b.w	80853a8 <HAL_Pin_Map>

08081f22 <_ZN7FatFile6getSFNEPc>:
 8081f22:	b510      	push	{r4, lr}
 8081f24:	460c      	mov	r4, r1
 8081f26:	7801      	ldrb	r1, [r0, #0]
 8081f28:	b909      	cbnz	r1, 8081f2e <_ZN7FatFile6getSFNEPc+0xc>
 8081f2a:	2000      	movs	r0, #0
 8081f2c:	bd10      	pop	{r4, pc}
 8081f2e:	f011 0160 	ands.w	r1, r1, #96	; 0x60
 8081f32:	d004      	beq.n	8081f3e <_ZN7FatFile6getSFNEPc+0x1c>
 8081f34:	232f      	movs	r3, #47	; 0x2f
 8081f36:	7023      	strb	r3, [r4, #0]
 8081f38:	2300      	movs	r3, #0
 8081f3a:	7063      	strb	r3, [r4, #1]
 8081f3c:	e006      	b.n	8081f4c <_ZN7FatFile6getSFNEPc+0x2a>
 8081f3e:	f000 f8ad 	bl	808209c <_ZN7FatFile13cacheDirEntryEh>
 8081f42:	2800      	cmp	r0, #0
 8081f44:	d0f1      	beq.n	8081f2a <_ZN7FatFile6getSFNEPc+0x8>
 8081f46:	4621      	mov	r1, r4
 8081f48:	f000 f8b7 	bl	80820ba <_ZN7FatFile7dirNameEPK14directoryEntryPc>
 8081f4c:	2001      	movs	r0, #1
 8081f4e:	bd10      	pop	{r4, pc}

08081f50 <_ZN7FatFile8printSFNEP5Print>:
 8081f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8081f52:	460c      	mov	r4, r1
 8081f54:	4669      	mov	r1, sp
 8081f56:	f7ff ffe4 	bl	8081f22 <_ZN7FatFile6getSFNEPc>
 8081f5a:	b140      	cbz	r0, 8081f6e <_ZN7FatFile8printSFNEP5Print+0x1e>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081f5c:	4668      	mov	r0, sp
 8081f5e:	f009 ff49 	bl	808bdf4 <strlen>
 8081f62:	6823      	ldr	r3, [r4, #0]
 8081f64:	4602      	mov	r2, r0
 8081f66:	68db      	ldr	r3, [r3, #12]
 8081f68:	4669      	mov	r1, sp
 8081f6a:	4620      	mov	r0, r4
 8081f6c:	4798      	blx	r3
 8081f6e:	b004      	add	sp, #16
 8081f70:	bd10      	pop	{r4, pc}

08081f72 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8081f72:	f003 ba19 	b.w	80853a8 <HAL_Pin_Map>

08081f76 <_Z6fmtDectPc>:
 8081f76:	b510      	push	{r4, lr}
 8081f78:	2809      	cmp	r0, #9
 8081f7a:	f101 32ff 	add.w	r2, r1, #4294967295
 8081f7e:	d91b      	bls.n	8081fb8 <_Z6fmtDectPc+0x42>
 8081f80:	1083      	asrs	r3, r0, #2
 8081f82:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8081f86:	b29b      	uxth	r3, r3
 8081f88:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8081f8c:	b29b      	uxth	r3, r3
 8081f8e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8081f92:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8081f96:	b29c      	uxth	r4, r3
 8081f98:	b2db      	uxtb	r3, r3
 8081f9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8081f9e:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8081fa2:	b2db      	uxtb	r3, r3
 8081fa4:	2b09      	cmp	r3, #9
 8081fa6:	bf82      	ittt	hi
 8081fa8:	3b0a      	subhi	r3, #10
 8081faa:	b2db      	uxtbhi	r3, r3
 8081fac:	3401      	addhi	r4, #1
 8081fae:	3330      	adds	r3, #48	; 0x30
 8081fb0:	4611      	mov	r1, r2
 8081fb2:	7013      	strb	r3, [r2, #0]
 8081fb4:	4620      	mov	r0, r4
 8081fb6:	e7df      	b.n	8081f78 <_Z6fmtDectPc+0x2>
 8081fb8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8081fbc:	f801 3c01 	strb.w	r3, [r1, #-1]
 8081fc0:	4610      	mov	r0, r2
 8081fc2:	bd10      	pop	{r4, pc}

08081fc4 <_Z6fmtDecmPc>:
 8081fc4:	0c03      	lsrs	r3, r0, #16
 8081fc6:	d01b      	beq.n	8082000 <_Z6fmtDecmPc+0x3c>
 8081fc8:	0883      	lsrs	r3, r0, #2
 8081fca:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8081fce:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8081fd2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8081fd6:	eb03 4313 	add.w	r3, r3, r3, lsr #16
 8081fda:	08db      	lsrs	r3, r3, #3
 8081fdc:	b2da      	uxtb	r2, r3
 8081fde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8081fe2:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8081fe6:	b2c0      	uxtb	r0, r0
 8081fe8:	2809      	cmp	r0, #9
 8081fea:	bf84      	itt	hi
 8081fec:	380a      	subhi	r0, #10
 8081fee:	b2c0      	uxtbhi	r0, r0
 8081ff0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8081ff4:	bf88      	it	hi
 8081ff6:	3301      	addhi	r3, #1
 8081ff8:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8081ffc:	4618      	mov	r0, r3
 8081ffe:	e7e1      	b.n	8081fc4 <_Z6fmtDecmPc>
 8082000:	b280      	uxth	r0, r0
 8082002:	f7ff bfb8 	b.w	8081f76 <_Z6fmtDectPc>

08082006 <_ZN7FatFile10addClusterEv>:
 8082006:	7883      	ldrb	r3, [r0, #2]
 8082008:	f100 0210 	add.w	r2, r0, #16
 808200c:	f043 0304 	orr.w	r3, r3, #4
 8082010:	7083      	strb	r3, [r0, #2]
 8082012:	6901      	ldr	r1, [r0, #16]
 8082014:	6880      	ldr	r0, [r0, #8]
 8082016:	f000 bda7 	b.w	8082b68 <_ZN9FatVolume15allocateClusterEmPm>
	...

0808201c <_ZN7FatFile13addDirClusterEv>:
 808201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082020:	7803      	ldrb	r3, [r0, #0]
 8082022:	4604      	mov	r4, r0
 8082024:	f003 0320 	and.w	r3, r3, #32
 8082028:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 808202c:	b10b      	cbz	r3, 8082032 <_ZN7FatFile13addDirClusterEv+0x16>
 808202e:	2600      	movs	r6, #0
 8082030:	e02e      	b.n	8082090 <_ZN7FatFile13addDirClusterEv+0x74>
 8082032:	6942      	ldr	r2, [r0, #20]
 8082034:	4b18      	ldr	r3, [pc, #96]	; (8082098 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8082036:	429a      	cmp	r2, r3
 8082038:	d8f9      	bhi.n	808202e <_ZN7FatFile13addDirClusterEv+0x12>
 808203a:	f7ff ffe4 	bl	8082006 <_ZN7FatFile10addClusterEv>
 808203e:	4606      	mov	r6, r0
 8082040:	2800      	cmp	r0, #0
 8082042:	d0f4      	beq.n	808202e <_ZN7FatFile13addDirClusterEv+0x12>
 8082044:	6921      	ldr	r1, [r4, #16]
 8082046:	68a0      	ldr	r0, [r4, #8]
 8082048:	f000 fd23 	bl	8082a92 <_ZNK9FatVolume17clusterFirstBlockEm>
 808204c:	4607      	mov	r7, r0
 808204e:	68a0      	ldr	r0, [r4, #8]
 8082050:	2205      	movs	r2, #5
 8082052:	4639      	mov	r1, r7
 8082054:	3024      	adds	r0, #36	; 0x24
 8082056:	f000 fcf8 	bl	8082a4a <_ZN8FatCache4readEmh>
 808205a:	4680      	mov	r8, r0
 808205c:	2800      	cmp	r0, #0
 808205e:	d0e6      	beq.n	808202e <_ZN7FatFile13addDirClusterEv+0x12>
 8082060:	4629      	mov	r1, r5
 8082062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082066:	f009 f93a 	bl	808b2de <memset>
 808206a:	2501      	movs	r5, #1
 808206c:	68a3      	ldr	r3, [r4, #8]
 808206e:	791a      	ldrb	r2, [r3, #4]
 8082070:	42aa      	cmp	r2, r5
 8082072:	d909      	bls.n	8082088 <_ZN7FatFile13addDirClusterEv+0x6c>
 8082074:	4642      	mov	r2, r8
 8082076:	19e9      	adds	r1, r5, r7
 8082078:	6818      	ldr	r0, [r3, #0]
 808207a:	f001 f863 	bl	8083144 <_ZN9SdSpiCard10writeBlockEmPKh>
 808207e:	2800      	cmp	r0, #0
 8082080:	d0d5      	beq.n	808202e <_ZN7FatFile13addDirClusterEv+0x12>
 8082082:	3501      	adds	r5, #1
 8082084:	b2ed      	uxtb	r5, r5
 8082086:	e7f1      	b.n	808206c <_ZN7FatFile13addDirClusterEv+0x50>
 8082088:	6963      	ldr	r3, [r4, #20]
 808208a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808208e:	6163      	str	r3, [r4, #20]
 8082090:	4630      	mov	r0, r6
 8082092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082096:	bf00      	nop
 8082098:	001ffdff 	.word	0x001ffdff

0808209c <_ZN7FatFile13cacheDirEntryEh>:
 808209c:	b510      	push	{r4, lr}
 808209e:	4604      	mov	r4, r0
 80820a0:	6880      	ldr	r0, [r0, #8]
 80820a2:	460a      	mov	r2, r1
 80820a4:	3024      	adds	r0, #36	; 0x24
 80820a6:	69a1      	ldr	r1, [r4, #24]
 80820a8:	f000 fccf 	bl	8082a4a <_ZN8FatCache4readEmh>
 80820ac:	b120      	cbz	r0, 80820b8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
 80820ae:	88a3      	ldrh	r3, [r4, #4]
 80820b0:	f003 030f 	and.w	r3, r3, #15
 80820b4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80820b8:	bd10      	pop	{r4, pc}

080820ba <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
 80820ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80820bc:	2400      	movs	r4, #0
 80820be:	4623      	mov	r3, r4
 80820c0:	1e45      	subs	r5, r0, #1
 80820c2:	2608      	movs	r6, #8
 80820c4:	272e      	movs	r7, #46	; 0x2e
 80820c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80820ca:	2a20      	cmp	r2, #32
 80820cc:	d018      	beq.n	8082100 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
 80820ce:	2c08      	cmp	r4, #8
 80820d0:	bf02      	ittt	eq
 80820d2:	1c5a      	addeq	r2, r3, #1
 80820d4:	54cf      	strbeq	r7, [r1, r3]
 80820d6:	b2d3      	uxtbeq	r3, r2
 80820d8:	782a      	ldrb	r2, [r5, #0]
 80820da:	bf08      	it	eq
 80820dc:	2610      	moveq	r6, #16
 80820de:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 80820e2:	f1be 0f19 	cmp.w	lr, #25
 80820e6:	d806      	bhi.n	80820f6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
 80820e8:	f890 e00c 	ldrb.w	lr, [r0, #12]
 80820ec:	ea16 0f0e 	tst.w	r6, lr
 80820f0:	bf1c      	itt	ne
 80820f2:	3220      	addne	r2, #32
 80820f4:	b2d2      	uxtbne	r2, r2
 80820f6:	f103 0e01 	add.w	lr, r3, #1
 80820fa:	54ca      	strb	r2, [r1, r3]
 80820fc:	fa5f f38e 	uxtb.w	r3, lr
 8082100:	3401      	adds	r4, #1
 8082102:	2c0b      	cmp	r4, #11
 8082104:	d1df      	bne.n	80820c6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
 8082106:	2200      	movs	r2, #0
 8082108:	54ca      	strb	r2, [r1, r3]
 808210a:	4618      	mov	r0, r3
 808210c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808210e <_ZN7FatFile8openRootEP9FatVolume>:
 808210e:	b570      	push	{r4, r5, r6, lr}
 8082110:	7804      	ldrb	r4, [r0, #0]
 8082112:	4605      	mov	r5, r0
 8082114:	460e      	mov	r6, r1
 8082116:	b984      	cbnz	r4, 808213a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
 8082118:	2224      	movs	r2, #36	; 0x24
 808211a:	4621      	mov	r1, r4
 808211c:	f009 f8df 	bl	808b2de <memset>
 8082120:	60ae      	str	r6, [r5, #8]
 8082122:	79f3      	ldrb	r3, [r6, #7]
 8082124:	2b10      	cmp	r3, #16
 8082126:	d003      	beq.n	8082130 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8082128:	2b20      	cmp	r3, #32
 808212a:	d106      	bne.n	808213a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
 808212c:	2340      	movs	r3, #64	; 0x40
 808212e:	e000      	b.n	8082132 <_ZN7FatFile8openRootEP9FatVolume+0x24>
 8082130:	2320      	movs	r3, #32
 8082132:	2001      	movs	r0, #1
 8082134:	702b      	strb	r3, [r5, #0]
 8082136:	70a8      	strb	r0, [r5, #2]
 8082138:	bd70      	pop	{r4, r5, r6, pc}
 808213a:	2000      	movs	r0, #0
 808213c:	bd70      	pop	{r4, r5, r6, pc}

0808213e <_ZN7FatFile4readEPvj>:
 808213e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082142:	7803      	ldrb	r3, [r0, #0]
 8082144:	4604      	mov	r4, r0
 8082146:	4689      	mov	r9, r1
 8082148:	4615      	mov	r5, r2
 808214a:	b14b      	cbz	r3, 8082160 <_ZN7FatFile4readEPvj+0x22>
 808214c:	7882      	ldrb	r2, [r0, #2]
 808214e:	07d1      	lsls	r1, r2, #31
 8082150:	d506      	bpl.n	8082160 <_ZN7FatFile4readEPvj+0x22>
 8082152:	e00c      	b.n	808216e <_ZN7FatFile4readEPvj+0x30>
 8082154:	465a      	mov	r2, fp
 8082156:	6921      	ldr	r1, [r4, #16]
 8082158:	f000 fca1 	bl	8082a9e <_ZN9FatVolume6fatGetEmPm>
 808215c:	2800      	cmp	r0, #0
 808215e:	da3d      	bge.n	80821dc <_ZN7FatFile4readEPvj+0x9e>
 8082160:	7863      	ldrb	r3, [r4, #1]
 8082162:	f04f 30ff 	mov.w	r0, #4294967295
 8082166:	f043 0302 	orr.w	r3, r3, #2
 808216a:	7063      	strb	r3, [r4, #1]
 808216c:	e097      	b.n	808229e <_ZN7FatFile4readEPvj+0x160>
 808216e:	071a      	lsls	r2, r3, #28
 8082170:	d503      	bpl.n	808217a <_ZN7FatFile4readEPvj+0x3c>
 8082172:	69e3      	ldr	r3, [r4, #28]
 8082174:	6962      	ldr	r2, [r4, #20]
 8082176:	1a9b      	subs	r3, r3, r2
 8082178:	e007      	b.n	808218a <_ZN7FatFile4readEPvj+0x4c>
 808217a:	069a      	lsls	r2, r3, #26
 808217c:	d508      	bpl.n	8082190 <_ZN7FatFile4readEPvj+0x52>
 808217e:	68a3      	ldr	r3, [r4, #8]
 8082180:	891a      	ldrh	r2, [r3, #8]
 8082182:	6963      	ldr	r3, [r4, #20]
 8082184:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8082188:	b29b      	uxth	r3, r3
 808218a:	429d      	cmp	r5, r3
 808218c:	bf28      	it	cs
 808218e:	461d      	movcs	r5, r3
 8082190:	462e      	mov	r6, r5
 8082192:	f04f 0800 	mov.w	r8, #0
 8082196:	f104 0b10 	add.w	fp, r4, #16
 808219a:	2e00      	cmp	r6, #0
 808219c:	d035      	beq.n	808220a <_ZN7FatFile4readEPvj+0xcc>
 808219e:	7822      	ldrb	r2, [r4, #0]
 80821a0:	6963      	ldr	r3, [r4, #20]
 80821a2:	f012 0f20 	tst.w	r2, #32
 80821a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80821aa:	68a0      	ldr	r0, [r4, #8]
 80821ac:	ea4f 2153 	mov.w	r1, r3, lsr #9
 80821b0:	d002      	beq.n	80821b8 <_ZN7FatFile4readEPvj+0x7a>
 80821b2:	6a03      	ldr	r3, [r0, #32]
 80821b4:	4419      	add	r1, r3
 80821b6:	e01d      	b.n	80821f4 <_ZN7FatFile4readEPvj+0xb6>
 80821b8:	f890 8005 	ldrb.w	r8, [r0, #5]
 80821bc:	ea01 0808 	and.w	r8, r1, r8
 80821c0:	f1ba 0f00 	cmp.w	sl, #0
 80821c4:	d110      	bne.n	80821e8 <_ZN7FatFile4readEPvj+0xaa>
 80821c6:	f1b8 0f00 	cmp.w	r8, #0
 80821ca:	d10d      	bne.n	80821e8 <_ZN7FatFile4readEPvj+0xaa>
 80821cc:	2b00      	cmp	r3, #0
 80821ce:	d1c1      	bne.n	8082154 <_ZN7FatFile4readEPvj+0x16>
 80821d0:	0653      	lsls	r3, r2, #25
 80821d2:	bf4c      	ite	mi
 80821d4:	6a03      	ldrmi	r3, [r0, #32]
 80821d6:	6a23      	ldrpl	r3, [r4, #32]
 80821d8:	6123      	str	r3, [r4, #16]
 80821da:	e005      	b.n	80821e8 <_ZN7FatFile4readEPvj+0xaa>
 80821dc:	d104      	bne.n	80821e8 <_ZN7FatFile4readEPvj+0xaa>
 80821de:	7823      	ldrb	r3, [r4, #0]
 80821e0:	f013 0f70 	tst.w	r3, #112	; 0x70
 80821e4:	d111      	bne.n	808220a <_ZN7FatFile4readEPvj+0xcc>
 80821e6:	e7bb      	b.n	8082160 <_ZN7FatFile4readEPvj+0x22>
 80821e8:	6921      	ldr	r1, [r4, #16]
 80821ea:	68a0      	ldr	r0, [r4, #8]
 80821ec:	f000 fc51 	bl	8082a92 <_ZNK9FatVolume17clusterFirstBlockEm>
 80821f0:	eb08 0100 	add.w	r1, r8, r0
 80821f4:	68a0      	ldr	r0, [r4, #8]
 80821f6:	f1ba 0f00 	cmp.w	sl, #0
 80821fa:	d135      	bne.n	8082268 <_ZN7FatFile4readEPvj+0x12a>
 80821fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082200:	d332      	bcc.n	8082268 <_ZN7FatFile4readEPvj+0x12a>
 8082202:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8082204:	4299      	cmp	r1, r3
 8082206:	d102      	bne.n	808220e <_ZN7FatFile4readEPvj+0xd0>
 8082208:	e02e      	b.n	8082268 <_ZN7FatFile4readEPvj+0x12a>
 808220a:	1ba8      	subs	r0, r5, r6
 808220c:	e047      	b.n	808229e <_ZN7FatFile4readEPvj+0x160>
 808220e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082212:	d31b      	bcc.n	808224c <_ZN7FatFile4readEPvj+0x10e>
 8082214:	7822      	ldrb	r2, [r4, #0]
 8082216:	ea4f 2a56 	mov.w	sl, r6, lsr #9
 808221a:	0697      	lsls	r7, r2, #26
 808221c:	d406      	bmi.n	808222c <_ZN7FatFile4readEPvj+0xee>
 808221e:	7902      	ldrb	r2, [r0, #4]
 8082220:	ebc8 0202 	rsb	r2, r8, r2
 8082224:	b2d2      	uxtb	r2, r2
 8082226:	4592      	cmp	sl, r2
 8082228:	bf28      	it	cs
 808222a:	4692      	movcs	sl, r2
 808222c:	4299      	cmp	r1, r3
 808222e:	ea4f 274a 	mov.w	r7, sl, lsl #9
 8082232:	d207      	bcs.n	8082244 <_ZN7FatFile4readEPvj+0x106>
 8082234:	68a0      	ldr	r0, [r4, #8]
 8082236:	4653      	mov	r3, sl
 8082238:	464a      	mov	r2, r9
 808223a:	6800      	ldr	r0, [r0, #0]
 808223c:	f000 ff40 	bl	80830c0 <_ZN9SdSpiCard10readBlocksEmPhj>
 8082240:	b960      	cbnz	r0, 808225c <_ZN7FatFile4readEPvj+0x11e>
 8082242:	e78d      	b.n	8082160 <_ZN7FatFile4readEPvj+0x22>
 8082244:	4453      	add	r3, sl
 8082246:	4299      	cmp	r1, r3
 8082248:	d321      	bcc.n	808228e <_ZN7FatFile4readEPvj+0x150>
 808224a:	e7f3      	b.n	8082234 <_ZN7FatFile4readEPvj+0xf6>
 808224c:	464a      	mov	r2, r9
 808224e:	6800      	ldr	r0, [r0, #0]
 8082250:	f000 feee 	bl	8083030 <_ZN9SdSpiCard9readBlockEmPh>
 8082254:	2800      	cmp	r0, #0
 8082256:	d083      	beq.n	8082160 <_ZN7FatFile4readEPvj+0x22>
 8082258:	f44f 7700 	mov.w	r7, #512	; 0x200
 808225c:	6963      	ldr	r3, [r4, #20]
 808225e:	44b9      	add	r9, r7
 8082260:	443b      	add	r3, r7
 8082262:	6163      	str	r3, [r4, #20]
 8082264:	1bf6      	subs	r6, r6, r7
 8082266:	e798      	b.n	808219a <_ZN7FatFile4readEPvj+0x5c>
 8082268:	2200      	movs	r2, #0
 808226a:	3024      	adds	r0, #36	; 0x24
 808226c:	f000 fbed 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082270:	2800      	cmp	r0, #0
 8082272:	f43f af75 	beq.w	8082160 <_ZN7FatFile4readEPvj+0x22>
 8082276:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 808227a:	42b7      	cmp	r7, r6
 808227c:	bf28      	it	cs
 808227e:	4637      	movcs	r7, r6
 8082280:	eb00 010a 	add.w	r1, r0, sl
 8082284:	463a      	mov	r2, r7
 8082286:	4648      	mov	r0, r9
 8082288:	f009 f803 	bl	808b292 <memcpy>
 808228c:	e7e6      	b.n	808225c <_ZN7FatFile4readEPvj+0x11e>
 808228e:	3024      	adds	r0, #36	; 0x24
 8082290:	9101      	str	r1, [sp, #4]
 8082292:	f000 fbb3 	bl	80829fc <_ZN8FatCache4syncEv>
 8082296:	9901      	ldr	r1, [sp, #4]
 8082298:	2800      	cmp	r0, #0
 808229a:	d1cb      	bne.n	8082234 <_ZN7FatFile4readEPvj+0xf6>
 808229c:	e760      	b.n	8082160 <_ZN7FatFile4readEPvj+0x22>
 808229e:	b003      	add	sp, #12
 80822a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080822a4 <_ZN7FatFile12readDirCacheEb>:
 80822a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80822a6:	6943      	ldr	r3, [r0, #20]
 80822a8:	4604      	mov	r4, r0
 80822aa:	f3c3 1543 	ubfx	r5, r3, #5, #4
 80822ae:	b105      	cbz	r5, 80822b2 <_ZN7FatFile12readDirCacheEb+0xe>
 80822b0:	b969      	cbnz	r1, 80822ce <_ZN7FatFile12readDirCacheEb+0x2a>
 80822b2:	2201      	movs	r2, #1
 80822b4:	f10d 0107 	add.w	r1, sp, #7
 80822b8:	4620      	mov	r0, r4
 80822ba:	f7ff ff40 	bl	808213e <_ZN7FatFile4readEPvj>
 80822be:	b240      	sxtb	r0, r0
 80822c0:	2801      	cmp	r0, #1
 80822c2:	d001      	beq.n	80822c8 <_ZN7FatFile12readDirCacheEb+0x24>
 80822c4:	2000      	movs	r0, #0
 80822c6:	e008      	b.n	80822da <_ZN7FatFile12readDirCacheEb+0x36>
 80822c8:	6963      	ldr	r3, [r4, #20]
 80822ca:	331f      	adds	r3, #31
 80822cc:	e000      	b.n	80822d0 <_ZN7FatFile12readDirCacheEb+0x2c>
 80822ce:	3320      	adds	r3, #32
 80822d0:	68a0      	ldr	r0, [r4, #8]
 80822d2:	6163      	str	r3, [r4, #20]
 80822d4:	3030      	adds	r0, #48	; 0x30
 80822d6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80822da:	b003      	add	sp, #12
 80822dc:	bd30      	pop	{r4, r5, pc}

080822de <_ZN7FatFile7seekSetEm>:
 80822de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80822e2:	460e      	mov	r6, r1
 80822e4:	7801      	ldrb	r1, [r0, #0]
 80822e6:	4604      	mov	r4, r0
 80822e8:	6907      	ldr	r7, [r0, #16]
 80822ea:	2900      	cmp	r1, #0
 80822ec:	d039      	beq.n	8082362 <_ZN7FatFile7seekSetEm+0x84>
 80822ee:	6945      	ldr	r5, [r0, #20]
 80822f0:	42b5      	cmp	r5, r6
 80822f2:	d03a      	beq.n	808236a <_ZN7FatFile7seekSetEm+0x8c>
 80822f4:	b90e      	cbnz	r6, 80822fa <_ZN7FatFile7seekSetEm+0x1c>
 80822f6:	6106      	str	r6, [r0, #16]
 80822f8:	e031      	b.n	808235e <_ZN7FatFile7seekSetEm+0x80>
 80822fa:	070b      	lsls	r3, r1, #28
 80822fc:	d503      	bpl.n	8082306 <_ZN7FatFile7seekSetEm+0x28>
 80822fe:	69c3      	ldr	r3, [r0, #28]
 8082300:	429e      	cmp	r6, r3
 8082302:	d82e      	bhi.n	8082362 <_ZN7FatFile7seekSetEm+0x84>
 8082304:	e007      	b.n	8082316 <_ZN7FatFile7seekSetEm+0x38>
 8082306:	0688      	lsls	r0, r1, #26
 8082308:	d505      	bpl.n	8082316 <_ZN7FatFile7seekSetEm+0x38>
 808230a:	68a3      	ldr	r3, [r4, #8]
 808230c:	891b      	ldrh	r3, [r3, #8]
 808230e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8082312:	d826      	bhi.n	8082362 <_ZN7FatFile7seekSetEm+0x84>
 8082314:	e023      	b.n	808235e <_ZN7FatFile7seekSetEm+0x80>
 8082316:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808231a:	1e6a      	subs	r2, r5, #1
 808231c:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8082320:	f103 0009 	add.w	r0, r3, #9
 8082324:	1e73      	subs	r3, r6, #1
 8082326:	40c2      	lsrs	r2, r0
 8082328:	40c3      	lsrs	r3, r0
 808232a:	429a      	cmp	r2, r3
 808232c:	d800      	bhi.n	8082330 <_ZN7FatFile7seekSetEm+0x52>
 808232e:	b94d      	cbnz	r5, 8082344 <_ZN7FatFile7seekSetEm+0x66>
 8082330:	064a      	lsls	r2, r1, #25
 8082332:	bf4c      	ite	mi
 8082334:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8082338:	6a22      	ldrpl	r2, [r4, #32]
 808233a:	6122      	str	r2, [r4, #16]
 808233c:	461d      	mov	r5, r3
 808233e:	f104 0810 	add.w	r8, r4, #16
 8082342:	e00a      	b.n	808235a <_ZN7FatFile7seekSetEm+0x7c>
 8082344:	1a9b      	subs	r3, r3, r2
 8082346:	e7f9      	b.n	808233c <_ZN7FatFile7seekSetEm+0x5e>
 8082348:	4642      	mov	r2, r8
 808234a:	6921      	ldr	r1, [r4, #16]
 808234c:	68a0      	ldr	r0, [r4, #8]
 808234e:	f000 fba6 	bl	8082a9e <_ZN9FatVolume6fatGetEmPm>
 8082352:	2800      	cmp	r0, #0
 8082354:	f105 35ff 	add.w	r5, r5, #4294967295
 8082358:	dd03      	ble.n	8082362 <_ZN7FatFile7seekSetEm+0x84>
 808235a:	2d00      	cmp	r5, #0
 808235c:	d1f4      	bne.n	8082348 <_ZN7FatFile7seekSetEm+0x6a>
 808235e:	6166      	str	r6, [r4, #20]
 8082360:	e003      	b.n	808236a <_ZN7FatFile7seekSetEm+0x8c>
 8082362:	6127      	str	r7, [r4, #16]
 8082364:	2000      	movs	r0, #0
 8082366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808236a:	2001      	movs	r0, #1
 808236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082370 <_ZN7FatFile15openCachedEntryEPS_tih>:
 8082370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082372:	460f      	mov	r7, r1
 8082374:	4604      	mov	r4, r0
 8082376:	4615      	mov	r5, r2
 8082378:	2100      	movs	r1, #0
 808237a:	2224      	movs	r2, #36	; 0x24
 808237c:	461e      	mov	r6, r3
 808237e:	f008 ffae 	bl	808b2de <memset>
 8082382:	68b8      	ldr	r0, [r7, #8]
 8082384:	80a5      	strh	r5, [r4, #4]
 8082386:	60a0      	str	r0, [r4, #8]
 8082388:	6a3b      	ldr	r3, [r7, #32]
 808238a:	f005 020f 	and.w	r2, r5, #15
 808238e:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8082392:	0152      	lsls	r2, r2, #5
 8082394:	60e3      	str	r3, [r4, #12]
 8082396:	4411      	add	r1, r2
 8082398:	7acb      	ldrb	r3, [r1, #11]
 808239a:	071d      	lsls	r5, r3, #28
 808239c:	d44c      	bmi.n	8082438 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
 808239e:	1883      	adds	r3, r0, r2
 80823a0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80823a4:	f003 0317 	and.w	r3, r3, #23
 80823a8:	7023      	strb	r3, [r4, #0]
 80823aa:	7ac9      	ldrb	r1, [r1, #11]
 80823ac:	f011 0f18 	tst.w	r1, #24
 80823b0:	bf04      	itt	eq
 80823b2:	f043 0308 	orreq.w	r3, r3, #8
 80823b6:	7023      	strbeq	r3, [r4, #0]
 80823b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80823bc:	70e3      	strb	r3, [r4, #3]
 80823be:	f006 0303 	and.w	r3, r6, #3
 80823c2:	2b01      	cmp	r3, #1
 80823c4:	d009      	beq.n	80823da <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 80823c6:	2b02      	cmp	r3, #2
 80823c8:	d005      	beq.n	80823d6 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 80823ca:	2b00      	cmp	r3, #0
 80823cc:	d134      	bne.n	8082438 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
 80823ce:	0571      	lsls	r1, r6, #21
 80823d0:	d432      	bmi.n	8082438 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
 80823d2:	2301      	movs	r3, #1
 80823d4:	e002      	b.n	80823dc <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
 80823d6:	2303      	movs	r3, #3
 80823d8:	e000      	b.n	80823dc <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
 80823da:	2302      	movs	r3, #2
 80823dc:	70a3      	strb	r3, [r4, #2]
 80823de:	78a1      	ldrb	r1, [r4, #2]
 80823e0:	078b      	lsls	r3, r1, #30
 80823e2:	d503      	bpl.n	80823ec <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
 80823e4:	7823      	ldrb	r3, [r4, #0]
 80823e6:	f013 0f11 	tst.w	r3, #17
 80823ea:	d125      	bne.n	8082438 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
 80823ec:	b24b      	sxtb	r3, r1
 80823ee:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80823f2:	f006 0108 	and.w	r1, r6, #8
 80823f6:	bf14      	ite	ne
 80823f8:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 80823fc:	2700      	moveq	r7, #0
 80823fe:	4319      	orrs	r1, r3
 8082400:	4339      	orrs	r1, r7
 8082402:	70a1      	strb	r1, [r4, #2]
 8082404:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8082406:	4402      	add	r2, r0
 8082408:	61a3      	str	r3, [r4, #24]
 808240a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 808240e:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
 8082412:	0575      	lsls	r5, r6, #21
 8082414:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8082418:	d504      	bpl.n	8082424 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
 808241a:	b181      	cbz	r1, 808243e <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 808241c:	f000 fbdf 	bl	8082bde <_ZN9FatVolume9freeChainEm>
 8082420:	b968      	cbnz	r0, 808243e <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8082422:	e009      	b.n	8082438 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
 8082424:	6221      	str	r1, [r4, #32]
 8082426:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8082428:	61e3      	str	r3, [r4, #28]
 808242a:	0473      	lsls	r3, r6, #17
 808242c:	d50c      	bpl.n	8082448 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 808242e:	69e1      	ldr	r1, [r4, #28]
 8082430:	4620      	mov	r0, r4
 8082432:	f7ff ff54 	bl	80822de <_ZN7FatFile7seekSetEm>
 8082436:	b938      	cbnz	r0, 8082448 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8082438:	2000      	movs	r0, #0
 808243a:	7020      	strb	r0, [r4, #0]
 808243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808243e:	78a3      	ldrb	r3, [r4, #2]
 8082440:	f043 0304 	orr.w	r3, r3, #4
 8082444:	70a3      	strb	r3, [r4, #2]
 8082446:	e7f0      	b.n	808242a <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
 8082448:	2001      	movs	r0, #1
 808244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808244c <_ZN7FatFile8openNextEPS_i>:
 808244c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8082450:	7803      	ldrb	r3, [r0, #0]
 8082452:	4606      	mov	r6, r0
 8082454:	460d      	mov	r5, r1
 8082456:	4617      	mov	r7, r2
 8082458:	bb53      	cbnz	r3, 80824b0 <_ZN7FatFile8openNextEPS_i+0x64>
 808245a:	780b      	ldrb	r3, [r1, #0]
 808245c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082460:	d026      	beq.n	80824b0 <_ZN7FatFile8openNextEPS_i+0x64>
 8082462:	694c      	ldr	r4, [r1, #20]
 8082464:	f014 041f 	ands.w	r4, r4, #31
 8082468:	d122      	bne.n	80824b0 <_ZN7FatFile8openNextEPS_i+0x64>
 808246a:	46a0      	mov	r8, r4
 808246c:	2100      	movs	r1, #0
 808246e:	4628      	mov	r0, r5
 8082470:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8082474:	f7ff ff16 	bl	80822a4 <_ZN7FatFile12readDirCacheEb>
 8082478:	b1d0      	cbz	r0, 80824b0 <_ZN7FatFile8openNextEPS_i+0x64>
 808247a:	7803      	ldrb	r3, [r0, #0]
 808247c:	b1c3      	cbz	r3, 80824b0 <_ZN7FatFile8openNextEPS_i+0x64>
 808247e:	2b2e      	cmp	r3, #46	; 0x2e
 8082480:	d101      	bne.n	8082486 <_ZN7FatFile8openNextEPS_i+0x3a>
 8082482:	2400      	movs	r4, #0
 8082484:	e7f2      	b.n	808246c <_ZN7FatFile8openNextEPS_i+0x20>
 8082486:	2be5      	cmp	r3, #229	; 0xe5
 8082488:	d0fb      	beq.n	8082482 <_ZN7FatFile8openNextEPS_i+0x36>
 808248a:	7ac1      	ldrb	r1, [r0, #11]
 808248c:	f011 0f08 	tst.w	r1, #8
 8082490:	d105      	bne.n	808249e <_ZN7FatFile8openNextEPS_i+0x52>
 8082492:	b17c      	cbz	r4, 80824b4 <_ZN7FatFile8openNextEPS_i+0x68>
 8082494:	f7ff f985 	bl	80817a2 <_ZN7FatFile11lfnChecksumEPh>
 8082498:	4580      	cmp	r8, r0
 808249a:	d109      	bne.n	80824b0 <_ZN7FatFile8openNextEPS_i+0x64>
 808249c:	e00a      	b.n	80824b4 <_ZN7FatFile8openNextEPS_i+0x68>
 808249e:	290f      	cmp	r1, #15
 80824a0:	d1ef      	bne.n	8082482 <_ZN7FatFile8openNextEPS_i+0x36>
 80824a2:	0659      	lsls	r1, r3, #25
 80824a4:	d5e2      	bpl.n	808246c <_ZN7FatFile8openNextEPS_i+0x20>
 80824a6:	f003 041f 	and.w	r4, r3, #31
 80824aa:	f890 800d 	ldrb.w	r8, [r0, #13]
 80824ae:	e7dd      	b.n	808246c <_ZN7FatFile8openNextEPS_i+0x20>
 80824b0:	2000      	movs	r0, #0
 80824b2:	e007      	b.n	80824c4 <_ZN7FatFile8openNextEPS_i+0x78>
 80824b4:	9400      	str	r4, [sp, #0]
 80824b6:	463b      	mov	r3, r7
 80824b8:	f3c9 124f 	ubfx	r2, r9, #5, #16
 80824bc:	4629      	mov	r1, r5
 80824be:	4630      	mov	r0, r6
 80824c0:	f7ff ff56 	bl	8082370 <_ZN7FatFile15openCachedEntryEPS_tih>
 80824c4:	b003      	add	sp, #12
 80824c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080824cc <_ZN7FatFile4syncEv>:
 80824cc:	b538      	push	{r3, r4, r5, lr}
 80824ce:	7803      	ldrb	r3, [r0, #0]
 80824d0:	4604      	mov	r4, r0
 80824d2:	b90b      	cbnz	r3, 80824d8 <_ZN7FatFile4syncEv+0xc>
 80824d4:	2001      	movs	r0, #1
 80824d6:	bd38      	pop	{r3, r4, r5, pc}
 80824d8:	7883      	ldrb	r3, [r0, #2]
 80824da:	075a      	lsls	r2, r3, #29
 80824dc:	d523      	bpl.n	8082526 <_ZN7FatFile4syncEv+0x5a>
 80824de:	2101      	movs	r1, #1
 80824e0:	f7ff fddc 	bl	808209c <_ZN7FatFile13cacheDirEntryEh>
 80824e4:	4605      	mov	r5, r0
 80824e6:	b928      	cbnz	r0, 80824f4 <_ZN7FatFile4syncEv+0x28>
 80824e8:	7863      	ldrb	r3, [r4, #1]
 80824ea:	2000      	movs	r0, #0
 80824ec:	f043 0301 	orr.w	r3, r3, #1
 80824f0:	7063      	strb	r3, [r4, #1]
 80824f2:	bd38      	pop	{r3, r4, r5, pc}
 80824f4:	7803      	ldrb	r3, [r0, #0]
 80824f6:	2be5      	cmp	r3, #229	; 0xe5
 80824f8:	d0f6      	beq.n	80824e8 <_ZN7FatFile4syncEv+0x1c>
 80824fa:	7823      	ldrb	r3, [r4, #0]
 80824fc:	071b      	lsls	r3, r3, #28
 80824fe:	bf44      	itt	mi
 8082500:	69e3      	ldrmi	r3, [r4, #28]
 8082502:	61c3      	strmi	r3, [r0, #28]
 8082504:	8c23      	ldrh	r3, [r4, #32]
 8082506:	8343      	strh	r3, [r0, #26]
 8082508:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808250a:	8283      	strh	r3, [r0, #20]
 808250c:	4b09      	ldr	r3, [pc, #36]	; (8082534 <_ZN7FatFile4syncEv+0x68>)
 808250e:	681b      	ldr	r3, [r3, #0]
 8082510:	b12b      	cbz	r3, 808251e <_ZN7FatFile4syncEv+0x52>
 8082512:	f100 0116 	add.w	r1, r0, #22
 8082516:	3018      	adds	r0, #24
 8082518:	4798      	blx	r3
 808251a:	8b2b      	ldrh	r3, [r5, #24]
 808251c:	826b      	strh	r3, [r5, #18]
 808251e:	78a3      	ldrb	r3, [r4, #2]
 8082520:	f023 0304 	bic.w	r3, r3, #4
 8082524:	70a3      	strb	r3, [r4, #2]
 8082526:	68a0      	ldr	r0, [r4, #8]
 8082528:	f7ff f92e 	bl	8081788 <_ZN9FatVolume9cacheSyncEv>
 808252c:	2800      	cmp	r0, #0
 808252e:	d0db      	beq.n	80824e8 <_ZN7FatFile4syncEv+0x1c>
 8082530:	e7d0      	b.n	80824d4 <_ZN7FatFile4syncEv+0x8>
 8082532:	bf00      	nop
 8082534:	20000714 	.word	0x20000714

08082538 <_ZN7FatFile5closeEv>:
 8082538:	b510      	push	{r4, lr}
 808253a:	4604      	mov	r4, r0
 808253c:	f7ff ffc6 	bl	80824cc <_ZN7FatFile4syncEv>
 8082540:	2300      	movs	r3, #0
 8082542:	7023      	strb	r3, [r4, #0]
 8082544:	bd10      	pop	{r4, pc}

08082546 <_ZN7FatFile4openEPS_PKci>:
 8082546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082548:	461f      	mov	r7, r3
 808254a:	b093      	sub	sp, #76	; 0x4c
 808254c:	2300      	movs	r3, #0
 808254e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8082552:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8082556:	7803      	ldrb	r3, [r0, #0]
 8082558:	4606      	mov	r6, r0
 808255a:	460c      	mov	r4, r1
 808255c:	9201      	str	r2, [sp, #4]
 808255e:	b10b      	cbz	r3, 8082564 <_ZN7FatFile4openEPS_PKci+0x1e>
 8082560:	2000      	movs	r0, #0
 8082562:	e03d      	b.n	80825e0 <_ZN7FatFile4openEPS_PKci+0x9a>
 8082564:	780b      	ldrb	r3, [r1, #0]
 8082566:	f013 0f70 	tst.w	r3, #112	; 0x70
 808256a:	d0f9      	beq.n	8082560 <_ZN7FatFile4openEPS_PKci+0x1a>
 808256c:	7813      	ldrb	r3, [r2, #0]
 808256e:	2b2f      	cmp	r3, #47	; 0x2f
 8082570:	d112      	bne.n	8082598 <_ZN7FatFile4openEPS_PKci+0x52>
 8082572:	9b01      	ldr	r3, [sp, #4]
 8082574:	781a      	ldrb	r2, [r3, #0]
 8082576:	2a2f      	cmp	r2, #47	; 0x2f
 8082578:	d102      	bne.n	8082580 <_ZN7FatFile4openEPS_PKci+0x3a>
 808257a:	3301      	adds	r3, #1
 808257c:	9301      	str	r3, [sp, #4]
 808257e:	e7f8      	b.n	8082572 <_ZN7FatFile4openEPS_PKci+0x2c>
 8082580:	68a1      	ldr	r1, [r4, #8]
 8082582:	b91a      	cbnz	r2, 808258c <_ZN7FatFile4openEPS_PKci+0x46>
 8082584:	4630      	mov	r0, r6
 8082586:	f7ff fdc2 	bl	808210e <_ZN7FatFile8openRootEP9FatVolume>
 808258a:	e029      	b.n	80825e0 <_ZN7FatFile4openEPS_PKci+0x9a>
 808258c:	a809      	add	r0, sp, #36	; 0x24
 808258e:	f7ff fdbe 	bl	808210e <_ZN7FatFile8openRootEP9FatVolume>
 8082592:	2800      	cmp	r0, #0
 8082594:	d0e4      	beq.n	8082560 <_ZN7FatFile4openEPS_PKci+0x1a>
 8082596:	ac09      	add	r4, sp, #36	; 0x24
 8082598:	aa01      	add	r2, sp, #4
 808259a:	a903      	add	r1, sp, #12
 808259c:	9801      	ldr	r0, [sp, #4]
 808259e:	f7ff f927 	bl	80817f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80825a2:	2800      	cmp	r0, #0
 80825a4:	d0dc      	beq.n	8082560 <_ZN7FatFile4openEPS_PKci+0x1a>
 80825a6:	9b01      	ldr	r3, [sp, #4]
 80825a8:	781b      	ldrb	r3, [r3, #0]
 80825aa:	b19b      	cbz	r3, 80825d4 <_ZN7FatFile4openEPS_PKci+0x8e>
 80825ac:	2300      	movs	r3, #0
 80825ae:	aa03      	add	r2, sp, #12
 80825b0:	4621      	mov	r1, r4
 80825b2:	4630      	mov	r0, r6
 80825b4:	f7ff fac0 	bl	8081b38 <_ZN7FatFile4openEPS_P7fname_ti>
 80825b8:	2800      	cmp	r0, #0
 80825ba:	d0d1      	beq.n	8082560 <_ZN7FatFile4openEPS_PKci+0x1a>
 80825bc:	4635      	mov	r5, r6
 80825be:	ac09      	add	r4, sp, #36	; 0x24
 80825c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80825c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80825c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80825c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80825c8:	682b      	ldr	r3, [r5, #0]
 80825ca:	4630      	mov	r0, r6
 80825cc:	6023      	str	r3, [r4, #0]
 80825ce:	f7ff ffb3 	bl	8082538 <_ZN7FatFile5closeEv>
 80825d2:	e7e0      	b.n	8082596 <_ZN7FatFile4openEPS_PKci+0x50>
 80825d4:	463b      	mov	r3, r7
 80825d6:	aa03      	add	r2, sp, #12
 80825d8:	4621      	mov	r1, r4
 80825da:	4630      	mov	r0, r6
 80825dc:	f7ff faac 	bl	8081b38 <_ZN7FatFile4openEPS_P7fname_ti>
 80825e0:	b013      	add	sp, #76	; 0x4c
 80825e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080825e4 <_ZN7FatFile8dirEntryEP14directoryEntry>:
 80825e4:	b570      	push	{r4, r5, r6, lr}
 80825e6:	4606      	mov	r6, r0
 80825e8:	460c      	mov	r4, r1
 80825ea:	f7ff ff6f 	bl	80824cc <_ZN7FatFile4syncEv>
 80825ee:	4605      	mov	r5, r0
 80825f0:	b908      	cbnz	r0, 80825f6 <_ZN7FatFile8dirEntryEP14directoryEntry+0x12>
 80825f2:	2500      	movs	r5, #0
 80825f4:	e00e      	b.n	8082614 <_ZN7FatFile8dirEntryEP14directoryEntry+0x30>
 80825f6:	2100      	movs	r1, #0
 80825f8:	4630      	mov	r0, r6
 80825fa:	f7ff fd4f 	bl	808209c <_ZN7FatFile13cacheDirEntryEh>
 80825fe:	2800      	cmp	r0, #0
 8082600:	d0f7      	beq.n	80825f2 <_ZN7FatFile8dirEntryEP14directoryEntry+0xe>
 8082602:	4621      	mov	r1, r4
 8082604:	f100 0320 	add.w	r3, r0, #32
 8082608:	f850 2b04 	ldr.w	r2, [r0], #4
 808260c:	4298      	cmp	r0, r3
 808260e:	f841 2b04 	str.w	r2, [r1], #4
 8082612:	d1f9      	bne.n	8082608 <_ZN7FatFile8dirEntryEP14directoryEntry+0x24>
 8082614:	4628      	mov	r0, r5
 8082616:	bd70      	pop	{r4, r5, r6, pc}

08082618 <_ZN7FatFile5writeEPKvj>:
 8082618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808261c:	7803      	ldrb	r3, [r0, #0]
 808261e:	4689      	mov	r9, r1
 8082620:	0719      	lsls	r1, r3, #28
 8082622:	4604      	mov	r4, r0
 8082624:	4690      	mov	r8, r2
 8082626:	d508      	bpl.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 8082628:	7883      	ldrb	r3, [r0, #2]
 808262a:	079a      	lsls	r2, r3, #30
 808262c:	d505      	bpl.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 808262e:	071b      	lsls	r3, r3, #28
 8082630:	d50b      	bpl.n	808264a <_ZN7FatFile5writeEPKvj+0x32>
 8082632:	69e1      	ldr	r1, [r4, #28]
 8082634:	f7ff fe53 	bl	80822de <_ZN7FatFile7seekSetEm>
 8082638:	b938      	cbnz	r0, 808264a <_ZN7FatFile5writeEPKvj+0x32>
 808263a:	7863      	ldrb	r3, [r4, #1]
 808263c:	f04f 30ff 	mov.w	r0, #4294967295
 8082640:	f043 0301 	orr.w	r3, r3, #1
 8082644:	7063      	strb	r3, [r4, #1]
 8082646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808264a:	6963      	ldr	r3, [r4, #20]
 808264c:	43db      	mvns	r3, r3
 808264e:	4598      	cmp	r8, r3
 8082650:	d8f3      	bhi.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 8082652:	4646      	mov	r6, r8
 8082654:	f04f 0a00 	mov.w	sl, #0
 8082658:	6963      	ldr	r3, [r4, #20]
 808265a:	2e00      	cmp	r6, #0
 808265c:	d07f      	beq.n	808275e <_ZN7FatFile5writeEPKvj+0x146>
 808265e:	68a0      	ldr	r0, [r4, #8]
 8082660:	f3c3 0708 	ubfx	r7, r3, #0, #9
 8082664:	7942      	ldrb	r2, [r0, #5]
 8082666:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 808266a:	d11c      	bne.n	80826a6 <_ZN7FatFile5writeEPKvj+0x8e>
 808266c:	b9df      	cbnz	r7, 80826a6 <_ZN7FatFile5writeEPKvj+0x8e>
 808266e:	6921      	ldr	r1, [r4, #16]
 8082670:	b171      	cbz	r1, 8082690 <_ZN7FatFile5writeEPKvj+0x78>
 8082672:	f104 0210 	add.w	r2, r4, #16
 8082676:	f000 fa12 	bl	8082a9e <_ZN9FatVolume6fatGetEmPm>
 808267a:	2800      	cmp	r0, #0
 808267c:	dbdd      	blt.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 808267e:	f040 808d 	bne.w	808279c <_ZN7FatFile5writeEPKvj+0x184>
 8082682:	4620      	mov	r0, r4
 8082684:	f7ff fcbf 	bl	8082006 <_ZN7FatFile10addClusterEv>
 8082688:	2800      	cmp	r0, #0
 808268a:	f040 8087 	bne.w	808279c <_ZN7FatFile5writeEPKvj+0x184>
 808268e:	e7d4      	b.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 8082690:	6a23      	ldr	r3, [r4, #32]
 8082692:	b93b      	cbnz	r3, 80826a4 <_ZN7FatFile5writeEPKvj+0x8c>
 8082694:	4620      	mov	r0, r4
 8082696:	f7ff fcb6 	bl	8082006 <_ZN7FatFile10addClusterEv>
 808269a:	2800      	cmp	r0, #0
 808269c:	d0cd      	beq.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 808269e:	6923      	ldr	r3, [r4, #16]
 80826a0:	6223      	str	r3, [r4, #32]
 80826a2:	e000      	b.n	80826a6 <_ZN7FatFile5writeEPKvj+0x8e>
 80826a4:	6123      	str	r3, [r4, #16]
 80826a6:	6921      	ldr	r1, [r4, #16]
 80826a8:	68a0      	ldr	r0, [r4, #8]
 80826aa:	f000 f9f2 	bl	8082a92 <_ZNK9FatVolume17clusterFirstBlockEm>
 80826ae:	1829      	adds	r1, r5, r0
 80826b0:	b917      	cbnz	r7, 80826b8 <_ZN7FatFile5writeEPKvj+0xa0>
 80826b2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80826b6:	d221      	bcs.n	80826fc <_ZN7FatFile5writeEPKvj+0xe4>
 80826b8:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 80826bc:	42b5      	cmp	r5, r6
 80826be:	bf28      	it	cs
 80826c0:	4635      	movcs	r5, r6
 80826c2:	b937      	cbnz	r7, 80826d2 <_ZN7FatFile5writeEPKvj+0xba>
 80826c4:	6963      	ldr	r3, [r4, #20]
 80826c6:	69e2      	ldr	r2, [r4, #28]
 80826c8:	4293      	cmp	r3, r2
 80826ca:	bf34      	ite	cc
 80826cc:	2201      	movcc	r2, #1
 80826ce:	2205      	movcs	r2, #5
 80826d0:	e000      	b.n	80826d4 <_ZN7FatFile5writeEPKvj+0xbc>
 80826d2:	2201      	movs	r2, #1
 80826d4:	68a0      	ldr	r0, [r4, #8]
 80826d6:	3024      	adds	r0, #36	; 0x24
 80826d8:	f000 f9b7 	bl	8082a4a <_ZN8FatCache4readEmh>
 80826dc:	2800      	cmp	r0, #0
 80826de:	d0ac      	beq.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 80826e0:	4438      	add	r0, r7
 80826e2:	462a      	mov	r2, r5
 80826e4:	4649      	mov	r1, r9
 80826e6:	442f      	add	r7, r5
 80826e8:	f008 fdd3 	bl	808b292 <memcpy>
 80826ec:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80826f0:	d12f      	bne.n	8082752 <_ZN7FatFile5writeEPKvj+0x13a>
 80826f2:	68a0      	ldr	r0, [r4, #8]
 80826f4:	3024      	adds	r0, #36	; 0x24
 80826f6:	f000 f981 	bl	80829fc <_ZN8FatCache4syncEv>
 80826fa:	e016      	b.n	808272a <_ZN7FatFile5writeEPKvj+0x112>
 80826fc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082700:	68a0      	ldr	r0, [r4, #8]
 8082702:	d314      	bcc.n	808272e <_ZN7FatFile5writeEPKvj+0x116>
 8082704:	7902      	ldrb	r2, [r0, #4]
 8082706:	0a73      	lsrs	r3, r6, #9
 8082708:	1b52      	subs	r2, r2, r5
 808270a:	b2d2      	uxtb	r2, r2
 808270c:	4293      	cmp	r3, r2
 808270e:	bf28      	it	cs
 8082710:	4613      	movcs	r3, r2
 8082712:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8082714:	025d      	lsls	r5, r3, #9
 8082716:	4291      	cmp	r1, r2
 8082718:	d302      	bcc.n	8082720 <_ZN7FatFile5writeEPKvj+0x108>
 808271a:	441a      	add	r2, r3
 808271c:	4291      	cmp	r1, r2
 808271e:	d337      	bcc.n	8082790 <_ZN7FatFile5writeEPKvj+0x178>
 8082720:	68a7      	ldr	r7, [r4, #8]
 8082722:	464a      	mov	r2, r9
 8082724:	6838      	ldr	r0, [r7, #0]
 8082726:	f000 fd7f 	bl	8083228 <_ZN9SdSpiCard11writeBlocksEmPKhj>
 808272a:	b990      	cbnz	r0, 8082752 <_ZN7FatFile5writeEPKvj+0x13a>
 808272c:	e785      	b.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 808272e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8082730:	464a      	mov	r2, r9
 8082732:	4299      	cmp	r1, r3
 8082734:	bf02      	ittt	eq
 8082736:	f04f 33ff 	moveq.w	r3, #4294967295
 808273a:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
 808273e:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8082740:	68a3      	ldr	r3, [r4, #8]
 8082742:	6818      	ldr	r0, [r3, #0]
 8082744:	f000 fcfe 	bl	8083144 <_ZN9SdSpiCard10writeBlockEmPKh>
 8082748:	2800      	cmp	r0, #0
 808274a:	f43f af76 	beq.w	808263a <_ZN7FatFile5writeEPKvj+0x22>
 808274e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8082752:	6963      	ldr	r3, [r4, #20]
 8082754:	44a9      	add	r9, r5
 8082756:	442b      	add	r3, r5
 8082758:	6163      	str	r3, [r4, #20]
 808275a:	1b76      	subs	r6, r6, r5
 808275c:	e77c      	b.n	8082658 <_ZN7FatFile5writeEPKvj+0x40>
 808275e:	69e2      	ldr	r2, [r4, #28]
 8082760:	4293      	cmp	r3, r2
 8082762:	d901      	bls.n	8082768 <_ZN7FatFile5writeEPKvj+0x150>
 8082764:	61e3      	str	r3, [r4, #28]
 8082766:	e002      	b.n	808276e <_ZN7FatFile5writeEPKvj+0x156>
 8082768:	4b0f      	ldr	r3, [pc, #60]	; (80827a8 <_ZN7FatFile5writeEPKvj+0x190>)
 808276a:	681b      	ldr	r3, [r3, #0]
 808276c:	b11b      	cbz	r3, 8082776 <_ZN7FatFile5writeEPKvj+0x15e>
 808276e:	78a3      	ldrb	r3, [r4, #2]
 8082770:	f043 0304 	orr.w	r3, r3, #4
 8082774:	70a3      	strb	r3, [r4, #2]
 8082776:	f994 3002 	ldrsb.w	r3, [r4, #2]
 808277a:	2b00      	cmp	r3, #0
 808277c:	db02      	blt.n	8082784 <_ZN7FatFile5writeEPKvj+0x16c>
 808277e:	4640      	mov	r0, r8
 8082780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082784:	4620      	mov	r0, r4
 8082786:	f7ff fea1 	bl	80824cc <_ZN7FatFile4syncEv>
 808278a:	2800      	cmp	r0, #0
 808278c:	d1f7      	bne.n	808277e <_ZN7FatFile5writeEPKvj+0x166>
 808278e:	e754      	b.n	808263a <_ZN7FatFile5writeEPKvj+0x22>
 8082790:	f04f 32ff 	mov.w	r2, #4294967295
 8082794:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
 8082798:	62c2      	str	r2, [r0, #44]	; 0x2c
 808279a:	e7c1      	b.n	8082720 <_ZN7FatFile5writeEPKvj+0x108>
 808279c:	6921      	ldr	r1, [r4, #16]
 808279e:	68a0      	ldr	r0, [r4, #8]
 80827a0:	f000 f977 	bl	8082a92 <_ZNK9FatVolume17clusterFirstBlockEm>
 80827a4:	4601      	mov	r1, r0
 80827a6:	e784      	b.n	80826b2 <_ZN7FatFile5writeEPKvj+0x9a>
 80827a8:	20000714 	.word	0x20000714

080827ac <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80827ac:	f002 bdfc 	b.w	80853a8 <HAL_Pin_Map>

080827b0 <_ZL7print2uP5Printh.constprop.7>:
 80827b0:	2963      	cmp	r1, #99	; 0x63
 80827b2:	b570      	push	{r4, r5, r6, lr}
 80827b4:	4605      	mov	r5, r0
 80827b6:	d80e      	bhi.n	80827d6 <_ZL7print2uP5Printh.constprop.7+0x26>
 80827b8:	230a      	movs	r3, #10
 80827ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80827be:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
 80827c2:	3130      	adds	r1, #48	; 0x30
 80827c4:	ebc3 0484 	rsb	r4, r3, r4, lsl #2
 80827c8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80827cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80827d0:	b2e4      	uxtb	r4, r4
 80827d2:	b2c9      	uxtb	r1, r1
 80827d4:	e001      	b.n	80827da <_ZL7print2uP5Printh.constprop.7+0x2a>
 80827d6:	213f      	movs	r1, #63	; 0x3f
 80827d8:	460c      	mov	r4, r1
 80827da:	682b      	ldr	r3, [r5, #0]
 80827dc:	4628      	mov	r0, r5
 80827de:	689b      	ldr	r3, [r3, #8]
 80827e0:	4798      	blx	r3
 80827e2:	682b      	ldr	r3, [r5, #0]
 80827e4:	4621      	mov	r1, r4
 80827e6:	4628      	mov	r0, r5
 80827e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80827ec:	689b      	ldr	r3, [r3, #8]
 80827ee:	4718      	bx	r3

080827f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80827f0:	b570      	push	{r4, r5, r6, lr}
 80827f2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80827f4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80827f6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80827f8:	b149      	cbz	r1, 808280e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80827fa:	f009 fafb 	bl	808bdf4 <strlen>
 80827fe:	682b      	ldr	r3, [r5, #0]
 8082800:	4602      	mov	r2, r0
 8082802:	4621      	mov	r1, r4
 8082804:	4628      	mov	r0, r5
    }
 8082806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808280a:	68db      	ldr	r3, [r3, #12]
 808280c:	4718      	bx	r3
    }
 808280e:	bd70      	pop	{r4, r5, r6, pc}

08082810 <_ZN7FatFile12printFatDateEP5Printt>:
 8082810:	b530      	push	{r4, r5, lr}
 8082812:	460d      	mov	r5, r1
 8082814:	b085      	sub	sp, #20
 8082816:	4604      	mov	r4, r0
 8082818:	a904      	add	r1, sp, #16
 808281a:	2300      	movs	r3, #0
 808281c:	1268      	asrs	r0, r5, #9
 808281e:	f801 3d02 	strb.w	r3, [r1, #-2]!
 8082822:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
 8082826:	f7ff fbcd 	bl	8081fc4 <_Z6fmtDecmPc>
 808282a:	4601      	mov	r1, r0
 808282c:	4620      	mov	r0, r4
 808282e:	f7ff ffdf 	bl	80827f0 <_ZN5Print5writeEPKc>
 8082832:	6823      	ldr	r3, [r4, #0]
 8082834:	212d      	movs	r1, #45	; 0x2d
 8082836:	689b      	ldr	r3, [r3, #8]
 8082838:	4620      	mov	r0, r4
 808283a:	4798      	blx	r3
 808283c:	f3c5 1143 	ubfx	r1, r5, #5, #4
 8082840:	4620      	mov	r0, r4
 8082842:	f7ff ffb5 	bl	80827b0 <_ZL7print2uP5Printh.constprop.7>
 8082846:	6823      	ldr	r3, [r4, #0]
 8082848:	212d      	movs	r1, #45	; 0x2d
 808284a:	689b      	ldr	r3, [r3, #8]
 808284c:	4620      	mov	r0, r4
 808284e:	4798      	blx	r3
 8082850:	f005 011f 	and.w	r1, r5, #31
 8082854:	4620      	mov	r0, r4
 8082856:	f7ff ffab 	bl	80827b0 <_ZL7print2uP5Printh.constprop.7>
 808285a:	b005      	add	sp, #20
 808285c:	bd30      	pop	{r4, r5, pc}

0808285e <_ZN7FatFile12printFatTimeEP5Printt>:
 808285e:	b538      	push	{r3, r4, r5, lr}
 8082860:	4604      	mov	r4, r0
 8082862:	460d      	mov	r5, r1
 8082864:	0ac9      	lsrs	r1, r1, #11
 8082866:	f7ff ffa3 	bl	80827b0 <_ZL7print2uP5Printh.constprop.7>
 808286a:	6823      	ldr	r3, [r4, #0]
 808286c:	213a      	movs	r1, #58	; 0x3a
 808286e:	689b      	ldr	r3, [r3, #8]
 8082870:	4620      	mov	r0, r4
 8082872:	4798      	blx	r3
 8082874:	f3c5 1145 	ubfx	r1, r5, #5, #6
 8082878:	4620      	mov	r0, r4
 808287a:	f7ff ff99 	bl	80827b0 <_ZL7print2uP5Printh.constprop.7>
 808287e:	6823      	ldr	r3, [r4, #0]
 8082880:	213a      	movs	r1, #58	; 0x3a
 8082882:	689b      	ldr	r3, [r3, #8]
 8082884:	4620      	mov	r0, r4
 8082886:	4798      	blx	r3
 8082888:	f005 011f 	and.w	r1, r5, #31
 808288c:	4620      	mov	r0, r4
 808288e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082892:	0049      	lsls	r1, r1, #1
 8082894:	f7ff bf8c 	b.w	80827b0 <_ZL7print2uP5Printh.constprop.7>

08082898 <_ZN7FatFile19printModifyDateTimeEP5Print>:
 8082898:	b530      	push	{r4, r5, lr}
 808289a:	b089      	sub	sp, #36	; 0x24
 808289c:	460c      	mov	r4, r1
 808289e:	4669      	mov	r1, sp
 80828a0:	f7ff fea0 	bl	80825e4 <_ZN7FatFile8dirEntryEP14directoryEntry>
 80828a4:	4605      	mov	r5, r0
 80828a6:	b170      	cbz	r0, 80828c6 <_ZN7FatFile19printModifyDateTimeEP5Print+0x2e>
 80828a8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80828ac:	4620      	mov	r0, r4
 80828ae:	f7ff ffaf 	bl	8082810 <_ZN7FatFile12printFatDateEP5Printt>
 80828b2:	6823      	ldr	r3, [r4, #0]
 80828b4:	2120      	movs	r1, #32
 80828b6:	689b      	ldr	r3, [r3, #8]
 80828b8:	4620      	mov	r0, r4
 80828ba:	4798      	blx	r3
 80828bc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80828c0:	4620      	mov	r0, r4
 80828c2:	f7ff ffcc 	bl	808285e <_ZN7FatFile12printFatTimeEP5Printt>
 80828c6:	4628      	mov	r0, r5
 80828c8:	b009      	add	sp, #36	; 0x24
 80828ca:	bd30      	pop	{r4, r5, pc}

080828cc <_ZN7FatFile13printFileSizeEP5Print>:
 80828cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80828ce:	2300      	movs	r3, #0
 80828d0:	460c      	mov	r4, r1
 80828d2:	a904      	add	r1, sp, #16
 80828d4:	f801 3d02 	strb.w	r3, [r1, #-2]!
 80828d8:	69c0      	ldr	r0, [r0, #28]
 80828da:	f7ff fb73 	bl	8081fc4 <_Z6fmtDecmPc>
 80828de:	a901      	add	r1, sp, #4
 80828e0:	2320      	movs	r3, #32
 80828e2:	4288      	cmp	r0, r1
 80828e4:	d902      	bls.n	80828ec <_ZN7FatFile13printFileSizeEP5Print+0x20>
 80828e6:	f800 3d01 	strb.w	r3, [r0, #-1]!
 80828ea:	e7fa      	b.n	80828e2 <_ZN7FatFile13printFileSizeEP5Print+0x16>
 80828ec:	4620      	mov	r0, r4
 80828ee:	f7ff ff7f 	bl	80827f0 <_ZN5Print5writeEPKc>
 80828f2:	b004      	add	sp, #16
 80828f4:	bd10      	pop	{r4, pc}

080828f6 <_ZN7FatFile2lsEP5Printhh>:
 80828f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80828fa:	4699      	mov	r9, r3
 80828fc:	b08b      	sub	sp, #44	; 0x2c
 80828fe:	2300      	movs	r3, #0
 8082900:	f88d 3004 	strb.w	r3, [sp, #4]
 8082904:	f88d 3005 	strb.w	r3, [sp, #5]
 8082908:	7803      	ldrb	r3, [r0, #0]
 808290a:	4606      	mov	r6, r0
 808290c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082910:	460c      	mov	r4, r1
 8082912:	4615      	mov	r5, r2
 8082914:	d101      	bne.n	808291a <_ZN7FatFile2lsEP5Printhh+0x24>
 8082916:	2000      	movs	r0, #0
 8082918:	e069      	b.n	80829ee <_ZN7FatFile2lsEP5Printhh+0xf8>
 808291a:	7841      	ldrb	r1, [r0, #1]
 808291c:	2900      	cmp	r1, #0
 808291e:	d1fa      	bne.n	8082916 <_ZN7FatFile2lsEP5Printhh+0x20>
 8082920:	f7ff fcdd 	bl	80822de <_ZN7FatFile7seekSetEm>
 8082924:	f005 0702 	and.w	r7, r5, #2
 8082928:	b2ff      	uxtb	r7, r7
 808292a:	2200      	movs	r2, #0
 808292c:	4631      	mov	r1, r6
 808292e:	a801      	add	r0, sp, #4
 8082930:	f7ff fd8c 	bl	808244c <_ZN7FatFile8openNextEPS_i>
 8082934:	2800      	cmp	r0, #0
 8082936:	d04a      	beq.n	80829ce <_ZN7FatFile2lsEP5Printhh+0xd8>
 8082938:	f89d 3004 	ldrb.w	r3, [sp, #4]
 808293c:	0798      	lsls	r0, r3, #30
 808293e:	d505      	bpl.n	808294c <_ZN7FatFile2lsEP5Printhh+0x56>
 8082940:	07e9      	lsls	r1, r5, #31
 8082942:	d403      	bmi.n	808294c <_ZN7FatFile2lsEP5Printhh+0x56>
 8082944:	a801      	add	r0, sp, #4
 8082946:	f7ff fdf7 	bl	8082538 <_ZN7FatFile5closeEv>
 808294a:	e7ee      	b.n	808292a <_ZN7FatFile2lsEP5Printhh+0x34>
 808294c:	f04f 0800 	mov.w	r8, #0
 8082950:	45c1      	cmp	r9, r8
 8082952:	d007      	beq.n	8082964 <_ZN7FatFile2lsEP5Printhh+0x6e>
 8082954:	6823      	ldr	r3, [r4, #0]
 8082956:	2120      	movs	r1, #32
 8082958:	689b      	ldr	r3, [r3, #8]
 808295a:	4620      	mov	r0, r4
 808295c:	4798      	blx	r3
 808295e:	f108 0801 	add.w	r8, r8, #1
 8082962:	e7f5      	b.n	8082950 <_ZN7FatFile2lsEP5Printhh+0x5a>
 8082964:	b147      	cbz	r7, 8082978 <_ZN7FatFile2lsEP5Printhh+0x82>
 8082966:	4621      	mov	r1, r4
 8082968:	a801      	add	r0, sp, #4
 808296a:	f7ff ff95 	bl	8082898 <_ZN7FatFile19printModifyDateTimeEP5Print>
 808296e:	6823      	ldr	r3, [r4, #0]
 8082970:	2120      	movs	r1, #32
 8082972:	689b      	ldr	r3, [r3, #8]
 8082974:	4620      	mov	r0, r4
 8082976:	4798      	blx	r3
 8082978:	076a      	lsls	r2, r5, #29
 808297a:	d508      	bpl.n	808298e <_ZN7FatFile2lsEP5Printhh+0x98>
 808297c:	4621      	mov	r1, r4
 808297e:	a801      	add	r0, sp, #4
 8082980:	f7ff ffa4 	bl	80828cc <_ZN7FatFile13printFileSizeEP5Print>
 8082984:	6823      	ldr	r3, [r4, #0]
 8082986:	2120      	movs	r1, #32
 8082988:	689b      	ldr	r3, [r3, #8]
 808298a:	4620      	mov	r0, r4
 808298c:	4798      	blx	r3
 808298e:	4621      	mov	r1, r4
 8082990:	a801      	add	r0, sp, #4
 8082992:	f7ff f819 	bl	80819c8 <_ZN7FatFile9printNameEP5Print>
 8082996:	f89d 3004 	ldrb.w	r3, [sp, #4]
 808299a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808299e:	d004      	beq.n	80829aa <_ZN7FatFile2lsEP5Printhh+0xb4>
 80829a0:	6823      	ldr	r3, [r4, #0]
 80829a2:	212f      	movs	r1, #47	; 0x2f
 80829a4:	689b      	ldr	r3, [r3, #8]
 80829a6:	4620      	mov	r0, r4
 80829a8:	4798      	blx	r3
 80829aa:	6823      	ldr	r3, [r4, #0]
 80829ac:	210d      	movs	r1, #13
 80829ae:	689b      	ldr	r3, [r3, #8]
 80829b0:	4620      	mov	r0, r4
 80829b2:	4798      	blx	r3
 80829b4:	6823      	ldr	r3, [r4, #0]
 80829b6:	210a      	movs	r1, #10
 80829b8:	689b      	ldr	r3, [r3, #8]
 80829ba:	4620      	mov	r0, r4
 80829bc:	4798      	blx	r3
 80829be:	072b      	lsls	r3, r5, #28
 80829c0:	d5c0      	bpl.n	8082944 <_ZN7FatFile2lsEP5Printhh+0x4e>
 80829c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80829c6:	f013 0f70 	tst.w	r3, #112	; 0x70
 80829ca:	d105      	bne.n	80829d8 <_ZN7FatFile2lsEP5Printhh+0xe2>
 80829cc:	e7ba      	b.n	8082944 <_ZN7FatFile2lsEP5Printhh+0x4e>
 80829ce:	7870      	ldrb	r0, [r6, #1]
 80829d0:	fab0 f080 	clz	r0, r0
 80829d4:	0940      	lsrs	r0, r0, #5
 80829d6:	e00a      	b.n	80829ee <_ZN7FatFile2lsEP5Printhh+0xf8>
 80829d8:	f109 0302 	add.w	r3, r9, #2
 80829dc:	b2db      	uxtb	r3, r3
 80829de:	462a      	mov	r2, r5
 80829e0:	4621      	mov	r1, r4
 80829e2:	a801      	add	r0, sp, #4
 80829e4:	f7ff ff87 	bl	80828f6 <_ZN7FatFile2lsEP5Printhh>
 80829e8:	2800      	cmp	r0, #0
 80829ea:	d1ab      	bne.n	8082944 <_ZN7FatFile2lsEP5Printhh+0x4e>
 80829ec:	e793      	b.n	8082916 <_ZN7FatFile2lsEP5Printhh+0x20>
 80829ee:	b00b      	add	sp, #44	; 0x2c
 80829f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080829f4 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80829f4:	f002 bcd8 	b.w	80853a8 <HAL_Pin_Map>

080829f8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80829f8:	f002 bcd6 	b.w	80853a8 <HAL_Pin_Map>

080829fc <_ZN8FatCache4syncEv>:
 80829fc:	b570      	push	{r4, r5, r6, lr}
 80829fe:	7803      	ldrb	r3, [r0, #0]
 8082a00:	4604      	mov	r4, r0
 8082a02:	07da      	lsls	r2, r3, #31
 8082a04:	d51e      	bpl.n	8082a44 <_ZN8FatCache4syncEv+0x48>
 8082a06:	6843      	ldr	r3, [r0, #4]
 8082a08:	f100 060c 	add.w	r6, r0, #12
 8082a0c:	6881      	ldr	r1, [r0, #8]
 8082a0e:	4632      	mov	r2, r6
 8082a10:	6818      	ldr	r0, [r3, #0]
 8082a12:	f000 fb97 	bl	8083144 <_ZN9SdSpiCard10writeBlockEmPKh>
 8082a16:	4605      	mov	r5, r0
 8082a18:	b908      	cbnz	r0, 8082a1e <_ZN8FatCache4syncEv+0x22>
 8082a1a:	2500      	movs	r5, #0
 8082a1c:	e013      	b.n	8082a46 <_ZN8FatCache4syncEv+0x4a>
 8082a1e:	7823      	ldrb	r3, [r4, #0]
 8082a20:	079b      	lsls	r3, r3, #30
 8082a22:	d404      	bmi.n	8082a2e <_ZN8FatCache4syncEv+0x32>
 8082a24:	7823      	ldrb	r3, [r4, #0]
 8082a26:	f023 0301 	bic.w	r3, r3, #1
 8082a2a:	7023      	strb	r3, [r4, #0]
 8082a2c:	e00b      	b.n	8082a46 <_ZN8FatCache4syncEv+0x4a>
 8082a2e:	6863      	ldr	r3, [r4, #4]
 8082a30:	68a0      	ldr	r0, [r4, #8]
 8082a32:	6919      	ldr	r1, [r3, #16]
 8082a34:	4632      	mov	r2, r6
 8082a36:	4401      	add	r1, r0
 8082a38:	6818      	ldr	r0, [r3, #0]
 8082a3a:	f000 fb83 	bl	8083144 <_ZN9SdSpiCard10writeBlockEmPKh>
 8082a3e:	2800      	cmp	r0, #0
 8082a40:	d1f0      	bne.n	8082a24 <_ZN8FatCache4syncEv+0x28>
 8082a42:	e7ea      	b.n	8082a1a <_ZN8FatCache4syncEv+0x1e>
 8082a44:	2501      	movs	r5, #1
 8082a46:	4628      	mov	r0, r5
 8082a48:	bd70      	pop	{r4, r5, r6, pc}

08082a4a <_ZN8FatCache4readEmh>:
 8082a4a:	b570      	push	{r4, r5, r6, lr}
 8082a4c:	6883      	ldr	r3, [r0, #8]
 8082a4e:	4604      	mov	r4, r0
 8082a50:	428b      	cmp	r3, r1
 8082a52:	460e      	mov	r6, r1
 8082a54:	4615      	mov	r5, r2
 8082a56:	d014      	beq.n	8082a82 <_ZN8FatCache4readEmh+0x38>
 8082a58:	f7ff ffd0 	bl	80829fc <_ZN8FatCache4syncEv>
 8082a5c:	b908      	cbnz	r0, 8082a62 <_ZN8FatCache4readEmh+0x18>
 8082a5e:	2000      	movs	r0, #0
 8082a60:	bd70      	pop	{r4, r5, r6, pc}
 8082a62:	076b      	lsls	r3, r5, #29
 8082a64:	d503      	bpl.n	8082a6e <_ZN8FatCache4readEmh+0x24>
 8082a66:	2300      	movs	r3, #0
 8082a68:	7023      	strb	r3, [r4, #0]
 8082a6a:	60a6      	str	r6, [r4, #8]
 8082a6c:	e009      	b.n	8082a82 <_ZN8FatCache4readEmh+0x38>
 8082a6e:	6863      	ldr	r3, [r4, #4]
 8082a70:	f104 020c 	add.w	r2, r4, #12
 8082a74:	4631      	mov	r1, r6
 8082a76:	6818      	ldr	r0, [r3, #0]
 8082a78:	f000 fada 	bl	8083030 <_ZN9SdSpiCard9readBlockEmPh>
 8082a7c:	2800      	cmp	r0, #0
 8082a7e:	d1f2      	bne.n	8082a66 <_ZN8FatCache4readEmh+0x1c>
 8082a80:	e7ed      	b.n	8082a5e <_ZN8FatCache4readEmh+0x14>
 8082a82:	4620      	mov	r0, r4
 8082a84:	7823      	ldrb	r3, [r4, #0]
 8082a86:	f005 0503 	and.w	r5, r5, #3
 8082a8a:	431d      	orrs	r5, r3
 8082a8c:	f800 5b0c 	strb.w	r5, [r0], #12
 8082a90:	bd70      	pop	{r4, r5, r6, pc}

08082a92 <_ZNK9FatVolume17clusterFirstBlockEm>:
 8082a92:	7983      	ldrb	r3, [r0, #6]
 8082a94:	3902      	subs	r1, #2
 8082a96:	6940      	ldr	r0, [r0, #20]
 8082a98:	4099      	lsls	r1, r3
 8082a9a:	4408      	add	r0, r1
 8082a9c:	4770      	bx	lr

08082a9e <_ZN9FatVolume6fatGetEmPm>:
 8082a9e:	2901      	cmp	r1, #1
 8082aa0:	b570      	push	{r4, r5, r6, lr}
 8082aa2:	4605      	mov	r5, r0
 8082aa4:	460c      	mov	r4, r1
 8082aa6:	4616      	mov	r6, r2
 8082aa8:	d802      	bhi.n	8082ab0 <_ZN9FatVolume6fatGetEmPm+0x12>
 8082aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8082aae:	bd70      	pop	{r4, r5, r6, pc}
 8082ab0:	69c3      	ldr	r3, [r0, #28]
 8082ab2:	4299      	cmp	r1, r3
 8082ab4:	d8f9      	bhi.n	8082aaa <_ZN9FatVolume6fatGetEmPm+0xc>
 8082ab6:	79c3      	ldrb	r3, [r0, #7]
 8082ab8:	2b20      	cmp	r3, #32
 8082aba:	d110      	bne.n	8082ade <_ZN9FatVolume6fatGetEmPm+0x40>
 8082abc:	6981      	ldr	r1, [r0, #24]
 8082abe:	2202      	movs	r2, #2
 8082ac0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082ac4:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082ac8:	f7ff ffbf 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082acc:	2800      	cmp	r0, #0
 8082ace:	d0ec      	beq.n	8082aaa <_ZN9FatVolume6fatGetEmPm+0xc>
 8082ad0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082ad4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8082ad8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8082adc:	e00f      	b.n	8082afe <_ZN9FatVolume6fatGetEmPm+0x60>
 8082ade:	2b10      	cmp	r3, #16
 8082ae0:	d1e3      	bne.n	8082aaa <_ZN9FatVolume6fatGetEmPm+0xc>
 8082ae2:	6983      	ldr	r3, [r0, #24]
 8082ae4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082ae8:	2202      	movs	r2, #2
 8082aea:	4419      	add	r1, r3
 8082aec:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082af0:	f7ff ffab 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082af4:	2800      	cmp	r0, #0
 8082af6:	d0d8      	beq.n	8082aaa <_ZN9FatVolume6fatGetEmPm+0xc>
 8082af8:	b2e4      	uxtb	r4, r4
 8082afa:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
 8082afe:	69ea      	ldr	r2, [r5, #28]
 8082b00:	4293      	cmp	r3, r2
 8082b02:	bf9a      	itte	ls
 8082b04:	6033      	strls	r3, [r6, #0]
 8082b06:	2001      	movls	r0, #1
 8082b08:	2000      	movhi	r0, #0
 8082b0a:	bd70      	pop	{r4, r5, r6, pc}

08082b0c <_ZN9FatVolume6fatPutEmm>:
 8082b0c:	2901      	cmp	r1, #1
 8082b0e:	b538      	push	{r3, r4, r5, lr}
 8082b10:	460c      	mov	r4, r1
 8082b12:	4615      	mov	r5, r2
 8082b14:	d801      	bhi.n	8082b1a <_ZN9FatVolume6fatPutEmm+0xe>
 8082b16:	2000      	movs	r0, #0
 8082b18:	bd38      	pop	{r3, r4, r5, pc}
 8082b1a:	69c3      	ldr	r3, [r0, #28]
 8082b1c:	4299      	cmp	r1, r3
 8082b1e:	d8fa      	bhi.n	8082b16 <_ZN9FatVolume6fatPutEmm+0xa>
 8082b20:	79c3      	ldrb	r3, [r0, #7]
 8082b22:	2b20      	cmp	r3, #32
 8082b24:	d10e      	bne.n	8082b44 <_ZN9FatVolume6fatPutEmm+0x38>
 8082b26:	6981      	ldr	r1, [r0, #24]
 8082b28:	2203      	movs	r2, #3
 8082b2a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082b2e:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082b32:	f7ff ff8a 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082b36:	2800      	cmp	r0, #0
 8082b38:	d0ed      	beq.n	8082b16 <_ZN9FatVolume6fatPutEmm+0xa>
 8082b3a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082b3e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8082b42:	e00f      	b.n	8082b64 <_ZN9FatVolume6fatPutEmm+0x58>
 8082b44:	2b10      	cmp	r3, #16
 8082b46:	d1e6      	bne.n	8082b16 <_ZN9FatVolume6fatPutEmm+0xa>
 8082b48:	6983      	ldr	r3, [r0, #24]
 8082b4a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082b4e:	2203      	movs	r2, #3
 8082b50:	4419      	add	r1, r3
 8082b52:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082b56:	f7ff ff78 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082b5a:	2800      	cmp	r0, #0
 8082b5c:	d0db      	beq.n	8082b16 <_ZN9FatVolume6fatPutEmm+0xa>
 8082b5e:	b2e4      	uxtb	r4, r4
 8082b60:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8082b64:	2001      	movs	r0, #1
 8082b66:	bd38      	pop	{r3, r4, r5, pc}

08082b68 <_ZN9FatVolume15allocateClusterEmPm>:
 8082b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8082b6c:	68c4      	ldr	r4, [r0, #12]
 8082b6e:	4605      	mov	r5, r0
 8082b70:	428c      	cmp	r4, r1
 8082b72:	460e      	mov	r6, r1
 8082b74:	4690      	mov	r8, r2
 8082b76:	d207      	bcs.n	8082b88 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 8082b78:	460c      	mov	r4, r1
 8082b7a:	2700      	movs	r7, #0
 8082b7c:	69eb      	ldr	r3, [r5, #28]
 8082b7e:	3401      	adds	r4, #1
 8082b80:	429c      	cmp	r4, r3
 8082b82:	d903      	bls.n	8082b8c <_ZN9FatVolume15allocateClusterEmPm+0x24>
 8082b84:	b9cf      	cbnz	r7, 8082bba <_ZN9FatVolume15allocateClusterEmPm+0x52>
 8082b86:	68ec      	ldr	r4, [r5, #12]
 8082b88:	2701      	movs	r7, #1
 8082b8a:	e7f7      	b.n	8082b7c <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8082b8c:	42a6      	cmp	r6, r4
 8082b8e:	d014      	beq.n	8082bba <_ZN9FatVolume15allocateClusterEmPm+0x52>
 8082b90:	aa01      	add	r2, sp, #4
 8082b92:	4621      	mov	r1, r4
 8082b94:	4628      	mov	r0, r5
 8082b96:	f7ff ff82 	bl	8082a9e <_ZN9FatVolume6fatGetEmPm>
 8082b9a:	2800      	cmp	r0, #0
 8082b9c:	db0d      	blt.n	8082bba <_ZN9FatVolume15allocateClusterEmPm+0x52>
 8082b9e:	d0ed      	beq.n	8082b7c <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8082ba0:	9b01      	ldr	r3, [sp, #4]
 8082ba2:	2b00      	cmp	r3, #0
 8082ba4:	d1ea      	bne.n	8082b7c <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8082ba6:	b107      	cbz	r7, 8082baa <_ZN9FatVolume15allocateClusterEmPm+0x42>
 8082ba8:	60ec      	str	r4, [r5, #12]
 8082baa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8082bae:	4621      	mov	r1, r4
 8082bb0:	4628      	mov	r0, r5
 8082bb2:	f7ff ffab 	bl	8082b0c <_ZN9FatVolume6fatPutEmm>
 8082bb6:	4607      	mov	r7, r0
 8082bb8:	b908      	cbnz	r0, 8082bbe <_ZN9FatVolume15allocateClusterEmPm+0x56>
 8082bba:	2700      	movs	r7, #0
 8082bbc:	e00b      	b.n	8082bd6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
 8082bbe:	b916      	cbnz	r6, 8082bc6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8082bc0:	f8c8 4000 	str.w	r4, [r8]
 8082bc4:	e007      	b.n	8082bd6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
 8082bc6:	4622      	mov	r2, r4
 8082bc8:	4631      	mov	r1, r6
 8082bca:	4628      	mov	r0, r5
 8082bcc:	f7ff ff9e 	bl	8082b0c <_ZN9FatVolume6fatPutEmm>
 8082bd0:	2800      	cmp	r0, #0
 8082bd2:	d1f5      	bne.n	8082bc0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 8082bd4:	e7f1      	b.n	8082bba <_ZN9FatVolume15allocateClusterEmPm+0x52>
 8082bd6:	4638      	mov	r0, r7
 8082bd8:	b002      	add	sp, #8
 8082bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082bde <_ZN9FatVolume9freeChainEm>:
 8082bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8082be0:	4605      	mov	r5, r0
 8082be2:	460c      	mov	r4, r1
 8082be4:	aa01      	add	r2, sp, #4
 8082be6:	4621      	mov	r1, r4
 8082be8:	4628      	mov	r0, r5
 8082bea:	f7ff ff58 	bl	8082a9e <_ZN9FatVolume6fatGetEmPm>
 8082bee:	1e06      	subs	r6, r0, #0
 8082bf0:	da01      	bge.n	8082bf6 <_ZN9FatVolume9freeChainEm+0x18>
 8082bf2:	2000      	movs	r0, #0
 8082bf4:	e00f      	b.n	8082c16 <_ZN9FatVolume9freeChainEm+0x38>
 8082bf6:	2200      	movs	r2, #0
 8082bf8:	4621      	mov	r1, r4
 8082bfa:	4628      	mov	r0, r5
 8082bfc:	f7ff ff86 	bl	8082b0c <_ZN9FatVolume6fatPutEmm>
 8082c00:	2800      	cmp	r0, #0
 8082c02:	d0f6      	beq.n	8082bf2 <_ZN9FatVolume9freeChainEm+0x14>
 8082c04:	68eb      	ldr	r3, [r5, #12]
 8082c06:	429c      	cmp	r4, r3
 8082c08:	bf9c      	itt	ls
 8082c0a:	f104 34ff 	addls.w	r4, r4, #4294967295
 8082c0e:	60ec      	strls	r4, [r5, #12]
 8082c10:	9c01      	ldr	r4, [sp, #4]
 8082c12:	2e00      	cmp	r6, #0
 8082c14:	d1e6      	bne.n	8082be4 <_ZN9FatVolume9freeChainEm+0x6>
 8082c16:	b002      	add	sp, #8
 8082c18:	bd70      	pop	{r4, r5, r6, pc}

08082c1a <_ZN9FatVolume4initEh>:
 8082c1a:	b570      	push	{r4, r5, r6, lr}
 8082c1c:	4604      	mov	r4, r0
 8082c1e:	2301      	movs	r3, #1
 8082c20:	2200      	movs	r2, #0
 8082c22:	60c3      	str	r3, [r0, #12]
 8082c24:	f04f 33ff 	mov.w	r3, #4294967295
 8082c28:	71c2      	strb	r2, [r0, #7]
 8082c2a:	460d      	mov	r5, r1
 8082c2c:	62a0      	str	r0, [r4, #40]	; 0x28
 8082c2e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8082c32:	62c3      	str	r3, [r0, #44]	; 0x2c
 8082c34:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
 8082c38:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
 8082c3c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 8082c40:	b1a1      	cbz	r1, 8082c6c <_ZN9FatVolume4initEh+0x52>
 8082c42:	2904      	cmp	r1, #4
 8082c44:	d85d      	bhi.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c46:	4611      	mov	r1, r2
 8082c48:	3024      	adds	r0, #36	; 0x24
 8082c4a:	f7ff fefe 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082c4e:	2800      	cmp	r0, #0
 8082c50:	d057      	beq.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c52:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8082c56:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8082c5a:	065b      	lsls	r3, r3, #25
 8082c5c:	d151      	bne.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c5e:	351b      	adds	r5, #27
 8082c60:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8082c64:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8082c68:	2d00      	cmp	r5, #0
 8082c6a:	d04a      	beq.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c6c:	2200      	movs	r2, #0
 8082c6e:	4629      	mov	r1, r5
 8082c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8082c74:	f7ff fee9 	bl	8082a4a <_ZN8FatCache4readEmh>
 8082c78:	2800      	cmp	r0, #0
 8082c7a:	d042      	beq.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c7c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8082c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8082c84:	d13d      	bne.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c86:	7c03      	ldrb	r3, [r0, #16]
 8082c88:	2b02      	cmp	r3, #2
 8082c8a:	d13a      	bne.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c8c:	89c3      	ldrh	r3, [r0, #14]
 8082c8e:	2b00      	cmp	r3, #0
 8082c90:	d037      	beq.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082c92:	7b41      	ldrb	r1, [r0, #13]
 8082c94:	2609      	movs	r6, #9
 8082c96:	1e4b      	subs	r3, r1, #1
 8082c98:	7163      	strb	r3, [r4, #5]
 8082c9a:	2300      	movs	r3, #0
 8082c9c:	71a3      	strb	r3, [r4, #6]
 8082c9e:	7121      	strb	r1, [r4, #4]
 8082ca0:	2301      	movs	r3, #1
 8082ca2:	428b      	cmp	r3, r1
 8082ca4:	d007      	beq.n	8082cb6 <_ZN9FatVolume4initEh+0x9c>
 8082ca6:	3e01      	subs	r6, #1
 8082ca8:	d02b      	beq.n	8082d02 <_ZN9FatVolume4initEh+0xe8>
 8082caa:	79a2      	ldrb	r2, [r4, #6]
 8082cac:	005b      	lsls	r3, r3, #1
 8082cae:	3201      	adds	r2, #1
 8082cb0:	b2db      	uxtb	r3, r3
 8082cb2:	71a2      	strb	r2, [r4, #6]
 8082cb4:	e7f5      	b.n	8082ca2 <_ZN9FatVolume4initEh+0x88>
 8082cb6:	8ac2      	ldrh	r2, [r0, #22]
 8082cb8:	b902      	cbnz	r2, 8082cbc <_ZN9FatVolume4initEh+0xa2>
 8082cba:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8082cbc:	6122      	str	r2, [r4, #16]
 8082cbe:	89c6      	ldrh	r6, [r0, #14]
 8082cc0:	442e      	add	r6, r5
 8082cc2:	61a6      	str	r6, [r4, #24]
 8082cc4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
 8082cc8:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 8082ccc:	8123      	strh	r3, [r4, #8]
 8082cce:	6221      	str	r1, [r4, #32]
 8082cd0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8082cd4:	0152      	lsls	r2, r2, #5
 8082cd6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8082cda:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8082cde:	6162      	str	r2, [r4, #20]
 8082ce0:	f8b0 3013 	ldrh.w	r3, [r0, #19]
 8082ce4:	b903      	cbnz	r3, 8082ce8 <_ZN9FatVolume4initEh+0xce>
 8082ce6:	6a03      	ldr	r3, [r0, #32]
 8082ce8:	1aad      	subs	r5, r5, r2
 8082cea:	442b      	add	r3, r5
 8082cec:	79a5      	ldrb	r5, [r4, #6]
 8082cee:	fa23 f505 	lsr.w	r5, r3, r5
 8082cf2:	1c6b      	adds	r3, r5, #1
 8082cf4:	61e3      	str	r3, [r4, #28]
 8082cf6:	f640 73f4 	movw	r3, #4084	; 0xff4
 8082cfa:	429d      	cmp	r5, r3
 8082cfc:	d803      	bhi.n	8082d06 <_ZN9FatVolume4initEh+0xec>
 8082cfe:	230c      	movs	r3, #12
 8082d00:	71e3      	strb	r3, [r4, #7]
 8082d02:	2000      	movs	r0, #0
 8082d04:	bd70      	pop	{r4, r5, r6, pc}
 8082d06:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8082d0a:	429d      	cmp	r5, r3
 8082d0c:	bf89      	itett	hi
 8082d0e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
 8082d10:	2310      	movls	r3, #16
 8082d12:	6223      	strhi	r3, [r4, #32]
 8082d14:	2320      	movhi	r3, #32
 8082d16:	71e3      	strb	r3, [r4, #7]
 8082d18:	2001      	movs	r0, #1
 8082d1a:	bd70      	pop	{r4, r5, r6, pc}

08082d1c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8082d1c:	f002 bb44 	b.w	80853a8 <HAL_Pin_Map>

08082d20 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 8082d20:	f002 bb42 	b.w	80853a8 <HAL_Pin_Map>

08082d24 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8082d24:	f002 bb40 	b.w	80853a8 <HAL_Pin_Map>

08082d28 <_ZN9SdSpiCard10isTimedOutEtt>:
 8082d28:	b570      	push	{r4, r5, r6, lr}
 8082d2a:	460e      	mov	r6, r1
 8082d2c:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 8082d2e:	f002 fbdb 	bl	80854e8 <HAL_Timer_Get_Micro_Seconds>
 8082d32:	4c0c      	ldr	r4, [pc, #48]	; (8082d64 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8082d34:	6823      	ldr	r3, [r4, #0]
 8082d36:	1ac0      	subs	r0, r0, r3
 8082d38:	4b0b      	ldr	r3, [pc, #44]	; (8082d68 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 8082d3a:	4298      	cmp	r0, r3
 8082d3c:	d908      	bls.n	8082d50 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082d3e:	f002 fbdb 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082d42:	4b0a      	ldr	r3, [pc, #40]	; (8082d6c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8082d44:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8082d46:	f002 fe5d 	bl	8085a04 <spark_process>
 8082d4a:	f002 fbcd 	bl	80854e8 <HAL_Timer_Get_Micro_Seconds>
 8082d4e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8082d50:	f002 fbd2 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8082d54:	b280      	uxth	r0, r0
 8082d56:	1b80      	subs	r0, r0, r6
 8082d58:	42a8      	cmp	r0, r5
 8082d5a:	bfd4      	ite	le
 8082d5c:	2000      	movle	r0, #0
 8082d5e:	2001      	movgt	r0, #1
 8082d60:	bd70      	pop	{r4, r5, r6, pc}
 8082d62:	bf00      	nop
 8082d64:	20000718 	.word	0x20000718
 8082d68:	000186a0 	.word	0x000186a0
 8082d6c:	20000edc 	.word	0x20000edc

08082d70 <_ZN9SdSpiCard8spiStartEv>:
 8082d70:	b538      	push	{r3, r4, r5, lr}
 8082d72:	7a05      	ldrb	r5, [r0, #8]
 8082d74:	4604      	mov	r4, r0
 8082d76:	b94d      	cbnz	r5, 8082d8c <_ZN9SdSpiCard8spiStartEv+0x1c>
 8082d78:	6840      	ldr	r0, [r0, #4]
 8082d7a:	f000 fa7d 	bl	8083278 <_ZN14SdSpiAltDriver8activateEv>
 8082d7e:	6863      	ldr	r3, [r4, #4]
 8082d80:	4629      	mov	r1, r5
 8082d82:	7d18      	ldrb	r0, [r3, #20]
 8082d84:	f006 fc45 	bl	8089612 <digitalWrite>
 8082d88:	2301      	movs	r3, #1
 8082d8a:	7223      	strb	r3, [r4, #8]
 8082d8c:	bd38      	pop	{r3, r4, r5, pc}

08082d8e <_ZN9SdSpiCard7spiStopEv>:
 8082d8e:	b510      	push	{r4, lr}
 8082d90:	7a03      	ldrb	r3, [r0, #8]
 8082d92:	4604      	mov	r4, r0
 8082d94:	b16b      	cbz	r3, 8082db2 <_ZN9SdSpiCard7spiStopEv+0x24>
 8082d96:	6843      	ldr	r3, [r0, #4]
 8082d98:	2101      	movs	r1, #1
 8082d9a:	7d18      	ldrb	r0, [r3, #20]
 8082d9c:	f006 fc39 	bl	8089612 <digitalWrite>
 8082da0:	21ff      	movs	r1, #255	; 0xff
 8082da2:	6860      	ldr	r0, [r4, #4]
 8082da4:	f000 fa9a 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8082da8:	6860      	ldr	r0, [r4, #4]
 8082daa:	f000 fa79 	bl	80832a0 <_ZN14SdSpiAltDriver10deactivateEv>
 8082dae:	2300      	movs	r3, #0
 8082db0:	7223      	strb	r3, [r4, #8]
 8082db2:	bd10      	pop	{r4, pc}

08082db4 <_ZN9SdSpiCard8readDataEPhj>:
 8082db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082db6:	4604      	mov	r4, r0
 8082db8:	460d      	mov	r5, r1
 8082dba:	4616      	mov	r6, r2
 8082dbc:	f002 fb9c 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8082dc0:	b287      	uxth	r7, r0
 8082dc2:	6860      	ldr	r0, [r4, #4]
 8082dc4:	f000 fa6f 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082dc8:	28ff      	cmp	r0, #255	; 0xff
 8082dca:	7260      	strb	r0, [r4, #9]
 8082dcc:	d109      	bne.n	8082de2 <_ZN9SdSpiCard8readDataEPhj+0x2e>
 8082dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082dd2:	4639      	mov	r1, r7
 8082dd4:	4620      	mov	r0, r4
 8082dd6:	f7ff ffa7 	bl	8082d28 <_ZN9SdSpiCard10isTimedOutEtt>
 8082dda:	2800      	cmp	r0, #0
 8082ddc:	d0f1      	beq.n	8082dc2 <_ZN9SdSpiCard8readDataEPhj+0xe>
 8082dde:	2355      	movs	r3, #85	; 0x55
 8082de0:	e00b      	b.n	8082dfa <_ZN9SdSpiCard8readDataEPhj+0x46>
 8082de2:	28fe      	cmp	r0, #254	; 0xfe
 8082de4:	d001      	beq.n	8082dea <_ZN9SdSpiCard8readDataEPhj+0x36>
 8082de6:	2350      	movs	r3, #80	; 0x50
 8082de8:	e007      	b.n	8082dfa <_ZN9SdSpiCard8readDataEPhj+0x46>
 8082dea:	4632      	mov	r2, r6
 8082dec:	4629      	mov	r1, r5
 8082dee:	6860      	ldr	r0, [r4, #4]
 8082df0:	f000 fa5e 	bl	80832b0 <_ZN14SdSpiAltDriver7receiveEPhj>
 8082df4:	7260      	strb	r0, [r4, #9]
 8082df6:	b130      	cbz	r0, 8082e06 <_ZN9SdSpiCard8readDataEPhj+0x52>
 8082df8:	2360      	movs	r3, #96	; 0x60
 8082dfa:	4620      	mov	r0, r4
 8082dfc:	7023      	strb	r3, [r4, #0]
 8082dfe:	f7ff ffc6 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 8082e02:	2000      	movs	r0, #0
 8082e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082e06:	6860      	ldr	r0, [r4, #4]
 8082e08:	f000 fa4d 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082e0c:	6860      	ldr	r0, [r4, #4]
 8082e0e:	f000 fa4a 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082e12:	2001      	movs	r0, #1
 8082e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082e16 <_ZN9SdSpiCard11waitNotBusyEt>:
 8082e16:	b570      	push	{r4, r5, r6, lr}
 8082e18:	4604      	mov	r4, r0
 8082e1a:	460e      	mov	r6, r1
 8082e1c:	f002 fb6c 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8082e20:	b285      	uxth	r5, r0
 8082e22:	4632      	mov	r2, r6
 8082e24:	4629      	mov	r1, r5
 8082e26:	4620      	mov	r0, r4
 8082e28:	f7ff ff7e 	bl	8082d28 <_ZN9SdSpiCard10isTimedOutEtt>
 8082e2c:	b930      	cbnz	r0, 8082e3c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 8082e2e:	6860      	ldr	r0, [r4, #4]
 8082e30:	f000 fa39 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082e34:	28ff      	cmp	r0, #255	; 0xff
 8082e36:	d1f4      	bne.n	8082e22 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
 8082e38:	2001      	movs	r0, #1
 8082e3a:	bd70      	pop	{r4, r5, r6, pc}
 8082e3c:	2000      	movs	r0, #0
 8082e3e:	bd70      	pop	{r4, r5, r6, pc}

08082e40 <_ZN9SdSpiCard11cardCommandEhm>:
 8082e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082e42:	7a03      	ldrb	r3, [r0, #8]
 8082e44:	4604      	mov	r4, r0
 8082e46:	460d      	mov	r5, r1
 8082e48:	9201      	str	r2, [sp, #4]
 8082e4a:	b90b      	cbnz	r3, 8082e50 <_ZN9SdSpiCard11cardCommandEhm+0x10>
 8082e4c:	f7ff ff90 	bl	8082d70 <_ZN9SdSpiCard8spiStartEv>
 8082e50:	b125      	cbz	r5, 8082e5c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
 8082e52:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8082e56:	4620      	mov	r0, r4
 8082e58:	f7ff ffdd 	bl	8082e16 <_ZN9SdSpiCard11waitNotBusyEt>
 8082e5c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8082e60:	6860      	ldr	r0, [r4, #4]
 8082e62:	f000 fa3b 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8082e66:	f10d 0607 	add.w	r6, sp, #7
 8082e6a:	f10d 0703 	add.w	r7, sp, #3
 8082e6e:	f816 1901 	ldrb.w	r1, [r6], #-1
 8082e72:	6860      	ldr	r0, [r4, #4]
 8082e74:	f000 fa32 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8082e78:	42be      	cmp	r6, r7
 8082e7a:	d1f8      	bne.n	8082e6e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
 8082e7c:	2d00      	cmp	r5, #0
 8082e7e:	bf0c      	ite	eq
 8082e80:	2195      	moveq	r1, #149	; 0x95
 8082e82:	2187      	movne	r1, #135	; 0x87
 8082e84:	6860      	ldr	r0, [r4, #4]
 8082e86:	f000 fa29 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8082e8a:	6860      	ldr	r0, [r4, #4]
 8082e8c:	f000 fa0b 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082e90:	250b      	movs	r5, #11
 8082e92:	6860      	ldr	r0, [r4, #4]
 8082e94:	f000 fa07 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082e98:	0603      	lsls	r3, r0, #24
 8082e9a:	7260      	strb	r0, [r4, #9]
 8082e9c:	d503      	bpl.n	8082ea6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 8082e9e:	3d01      	subs	r5, #1
 8082ea0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082ea4:	d1f5      	bne.n	8082e92 <_ZN9SdSpiCard11cardCommandEhm+0x52>
 8082ea6:	b003      	add	sp, #12
 8082ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082eaa <_ZN9SdSpiCard8cardAcmdEhm>:
 8082eaa:	b570      	push	{r4, r5, r6, lr}
 8082eac:	4604      	mov	r4, r0
 8082eae:	460d      	mov	r5, r1
 8082eb0:	4616      	mov	r6, r2
 8082eb2:	2137      	movs	r1, #55	; 0x37
 8082eb4:	2200      	movs	r2, #0
 8082eb6:	f7ff ffc3 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 8082eba:	4632      	mov	r2, r6
 8082ebc:	4629      	mov	r1, r5
 8082ebe:	4620      	mov	r0, r4
 8082ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8082ec4:	f7ff bfbc 	b.w	8082e40 <_ZN9SdSpiCard11cardCommandEhm>

08082ec8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 8082ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082ecc:	2500      	movs	r5, #0
 8082ece:	7205      	strb	r5, [r0, #8]
 8082ed0:	7005      	strb	r5, [r0, #0]
 8082ed2:	7285      	strb	r5, [r0, #10]
 8082ed4:	6041      	str	r1, [r0, #4]
 8082ed6:	4604      	mov	r4, r0
 8082ed8:	4690      	mov	r8, r2
 8082eda:	461e      	mov	r6, r3
 8082edc:	f002 fb0c 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8082ee0:	4641      	mov	r1, r8
 8082ee2:	4607      	mov	r7, r0
 8082ee4:	6860      	ldr	r0, [r4, #4]
 8082ee6:	f000 f9cb 	bl	8083280 <_ZN14SdSpiAltDriver5beginEh>
 8082eea:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8082eec:	4a4f      	ldr	r2, [pc, #316]	; (808302c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 8082eee:	f04f 0801 	mov.w	r8, #1
 8082ef2:	721d      	strb	r5, [r3, #8]
 8082ef4:	60da      	str	r2, [r3, #12]
 8082ef6:	745d      	strb	r5, [r3, #17]
 8082ef8:	f883 8010 	strb.w	r8, [r3, #16]
 8082efc:	4620      	mov	r0, r4
 8082efe:	f7ff ff37 	bl	8082d70 <_ZN9SdSpiCard8spiStartEv>
 8082f02:	6863      	ldr	r3, [r4, #4]
 8082f04:	4641      	mov	r1, r8
 8082f06:	7d18      	ldrb	r0, [r3, #20]
 8082f08:	f006 fb83 	bl	8089612 <digitalWrite>
 8082f0c:	250a      	movs	r5, #10
 8082f0e:	21ff      	movs	r1, #255	; 0xff
 8082f10:	6860      	ldr	r0, [r4, #4]
 8082f12:	3d01      	subs	r5, #1
 8082f14:	f000 f9e2 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8082f18:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082f1c:	d1f7      	bne.n	8082f0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 8082f1e:	6863      	ldr	r3, [r4, #4]
 8082f20:	4629      	mov	r1, r5
 8082f22:	7d18      	ldrb	r0, [r3, #20]
 8082f24:	f006 fb75 	bl	8089612 <digitalWrite>
 8082f28:	250a      	movs	r5, #10
 8082f2a:	2200      	movs	r2, #0
 8082f2c:	4611      	mov	r1, r2
 8082f2e:	4620      	mov	r0, r4
 8082f30:	f7ff ff86 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 8082f34:	2801      	cmp	r0, #1
 8082f36:	4680      	mov	r8, r0
 8082f38:	d012      	beq.n	8082f60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 8082f3a:	3d01      	subs	r5, #1
 8082f3c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082f40:	d101      	bne.n	8082f46 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
 8082f42:	2320      	movs	r3, #32
 8082f44:	e057      	b.n	8082ff6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
 8082f46:	21fd      	movs	r1, #253	; 0xfd
 8082f48:	6860      	ldr	r0, [r4, #4]
 8082f4a:	f000 f9c7 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8082f4e:	f44f 7802 	mov.w	r8, #520	; 0x208
 8082f52:	6860      	ldr	r0, [r4, #4]
 8082f54:	f000 f9a7 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082f58:	f1b8 0801 	subs.w	r8, r8, #1
 8082f5c:	d1f9      	bne.n	8082f52 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 8082f5e:	e7e4      	b.n	8082f2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
 8082f60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8082f64:	2108      	movs	r1, #8
 8082f66:	4620      	mov	r0, r4
 8082f68:	f7ff ff6a 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 8082f6c:	2805      	cmp	r0, #5
 8082f6e:	d102      	bne.n	8082f76 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
 8082f70:	f884 800a 	strb.w	r8, [r4, #10]
 8082f74:	e00f      	b.n	8082f96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 8082f76:	2504      	movs	r5, #4
 8082f78:	6860      	ldr	r0, [r4, #4]
 8082f7a:	f000 f994 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8082f7e:	3d01      	subs	r5, #1
 8082f80:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082f84:	7260      	strb	r0, [r4, #9]
 8082f86:	d1f7      	bne.n	8082f78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
 8082f88:	28aa      	cmp	r0, #170	; 0xaa
 8082f8a:	d102      	bne.n	8082f92 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
 8082f8c:	2302      	movs	r3, #2
 8082f8e:	72a3      	strb	r3, [r4, #10]
 8082f90:	e001      	b.n	8082f96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 8082f92:	2325      	movs	r3, #37	; 0x25
 8082f94:	e02f      	b.n	8082ff6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
 8082f96:	7aa3      	ldrb	r3, [r4, #10]
 8082f98:	b2bf      	uxth	r7, r7
 8082f9a:	2b02      	cmp	r3, #2
 8082f9c:	bf0c      	ite	eq
 8082f9e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8082fa2:	2500      	movne	r5, #0
 8082fa4:	462a      	mov	r2, r5
 8082fa6:	2129      	movs	r1, #41	; 0x29
 8082fa8:	4620      	mov	r0, r4
 8082faa:	f7ff ff7e 	bl	8082eaa <_ZN9SdSpiCard8cardAcmdEhm>
 8082fae:	4602      	mov	r2, r0
 8082fb0:	b148      	cbz	r0, 8082fc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
 8082fb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8082fb6:	4639      	mov	r1, r7
 8082fb8:	4620      	mov	r0, r4
 8082fba:	f7ff feb5 	bl	8082d28 <_ZN9SdSpiCard10isTimedOutEtt>
 8082fbe:	2800      	cmp	r0, #0
 8082fc0:	d0f0      	beq.n	8082fa4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8082fc2:	2343      	movs	r3, #67	; 0x43
 8082fc4:	e017      	b.n	8082ff6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
 8082fc6:	7aa3      	ldrb	r3, [r4, #10]
 8082fc8:	2b02      	cmp	r3, #2
 8082fca:	d00e      	beq.n	8082fea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
 8082fcc:	4620      	mov	r0, r4
 8082fce:	f7ff fede 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 8082fd2:	6863      	ldr	r3, [r4, #4]
 8082fd4:	68b0      	ldr	r0, [r6, #8]
 8082fd6:	7934      	ldrb	r4, [r6, #4]
 8082fd8:	7b31      	ldrb	r1, [r6, #12]
 8082fda:	7b72      	ldrb	r2, [r6, #13]
 8082fdc:	60d8      	str	r0, [r3, #12]
 8082fde:	721c      	strb	r4, [r3, #8]
 8082fe0:	7419      	strb	r1, [r3, #16]
 8082fe2:	745a      	strb	r2, [r3, #17]
 8082fe4:	2001      	movs	r0, #1
 8082fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082fea:	213a      	movs	r1, #58	; 0x3a
 8082fec:	4620      	mov	r0, r4
 8082fee:	f7ff ff27 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 8082ff2:	b138      	cbz	r0, 8083004 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8082ff4:	2337      	movs	r3, #55	; 0x37
 8082ff6:	4620      	mov	r0, r4
 8082ff8:	7023      	strb	r3, [r4, #0]
 8082ffa:	f7ff fec8 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 8082ffe:	2000      	movs	r0, #0
 8083000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083004:	6860      	ldr	r0, [r4, #4]
 8083006:	f000 f94e 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 808300a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 808300e:	28c0      	cmp	r0, #192	; 0xc0
 8083010:	bf04      	itt	eq
 8083012:	2303      	moveq	r3, #3
 8083014:	72a3      	strbeq	r3, [r4, #10]
 8083016:	6860      	ldr	r0, [r4, #4]
 8083018:	f000 f945 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 808301c:	6860      	ldr	r0, [r4, #4]
 808301e:	f000 f942 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8083022:	6860      	ldr	r0, [r4, #4]
 8083024:	f000 f93f 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8083028:	e7d0      	b.n	8082fcc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 808302a:	bf00      	nop
 808302c:	0003d090 	.word	0x0003d090

08083030 <_ZN9SdSpiCard9readBlockEmPh>:
 8083030:	b538      	push	{r3, r4, r5, lr}
 8083032:	7a83      	ldrb	r3, [r0, #10]
 8083034:	4615      	mov	r5, r2
 8083036:	2b03      	cmp	r3, #3
 8083038:	bf18      	it	ne
 808303a:	0249      	lslne	r1, r1, #9
 808303c:	460a      	mov	r2, r1
 808303e:	2111      	movs	r1, #17
 8083040:	4604      	mov	r4, r0
 8083042:	f7ff fefd 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 8083046:	b110      	cbz	r0, 808304e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
 8083048:	2330      	movs	r3, #48	; 0x30
 808304a:	7023      	strb	r3, [r4, #0]
 808304c:	e00b      	b.n	8083066 <_ZN9SdSpiCard9readBlockEmPh+0x36>
 808304e:	4629      	mov	r1, r5
 8083050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8083054:	4620      	mov	r0, r4
 8083056:	f7ff fead 	bl	8082db4 <_ZN9SdSpiCard8readDataEPhj>
 808305a:	4605      	mov	r5, r0
 808305c:	b118      	cbz	r0, 8083066 <_ZN9SdSpiCard9readBlockEmPh+0x36>
 808305e:	4620      	mov	r0, r4
 8083060:	f7ff fe95 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 8083064:	e003      	b.n	808306e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
 8083066:	4620      	mov	r0, r4
 8083068:	f7ff fe91 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 808306c:	2500      	movs	r5, #0
 808306e:	4628      	mov	r0, r5
 8083070:	bd38      	pop	{r3, r4, r5, pc}

08083072 <_ZN9SdSpiCard9readStartEm>:
 8083072:	b510      	push	{r4, lr}
 8083074:	7a83      	ldrb	r3, [r0, #10]
 8083076:	460a      	mov	r2, r1
 8083078:	2b03      	cmp	r3, #3
 808307a:	bf18      	it	ne
 808307c:	024a      	lslne	r2, r1, #9
 808307e:	2112      	movs	r1, #18
 8083080:	4604      	mov	r4, r0
 8083082:	f7ff fedd 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 8083086:	b130      	cbz	r0, 8083096 <_ZN9SdSpiCard9readStartEm+0x24>
 8083088:	2331      	movs	r3, #49	; 0x31
 808308a:	4620      	mov	r0, r4
 808308c:	7023      	strb	r3, [r4, #0]
 808308e:	f7ff fe7e 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 8083092:	2000      	movs	r0, #0
 8083094:	bd10      	pop	{r4, pc}
 8083096:	2001      	movs	r0, #1
 8083098:	bd10      	pop	{r4, pc}

0808309a <_ZN9SdSpiCard8readStopEv>:
 808309a:	b510      	push	{r4, lr}
 808309c:	2200      	movs	r2, #0
 808309e:	210c      	movs	r1, #12
 80830a0:	4604      	mov	r4, r0
 80830a2:	f7ff fecd 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 80830a6:	b130      	cbz	r0, 80830b6 <_ZN9SdSpiCard8readStopEv+0x1c>
 80830a8:	2328      	movs	r3, #40	; 0x28
 80830aa:	4620      	mov	r0, r4
 80830ac:	7023      	strb	r3, [r4, #0]
 80830ae:	f7ff fe6e 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 80830b2:	2000      	movs	r0, #0
 80830b4:	bd10      	pop	{r4, pc}
 80830b6:	4620      	mov	r0, r4
 80830b8:	f7ff fe69 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 80830bc:	2001      	movs	r0, #1
 80830be:	bd10      	pop	{r4, pc}

080830c0 <_ZN9SdSpiCard10readBlocksEmPhj>:
 80830c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80830c2:	4605      	mov	r5, r0
 80830c4:	4616      	mov	r6, r2
 80830c6:	461f      	mov	r7, r3
 80830c8:	f7ff ffd3 	bl	8083072 <_ZN9SdSpiCard9readStartEm>
 80830cc:	b198      	cbz	r0, 80830f6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80830ce:	2400      	movs	r4, #0
 80830d0:	b2a3      	uxth	r3, r4
 80830d2:	429f      	cmp	r7, r3
 80830d4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80830d8:	d908      	bls.n	80830ec <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
 80830da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80830de:	4628      	mov	r0, r5
 80830e0:	f7ff fe68 	bl	8082db4 <_ZN9SdSpiCard8readDataEPhj>
 80830e4:	3401      	adds	r4, #1
 80830e6:	2800      	cmp	r0, #0
 80830e8:	d1f2      	bne.n	80830d0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 80830ea:	e004      	b.n	80830f6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80830ec:	4628      	mov	r0, r5
 80830ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80830f2:	f7ff bfd2 	b.w	808309a <_ZN9SdSpiCard8readStopEv>
 80830f6:	2000      	movs	r0, #0
 80830f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080830fa <_ZN9SdSpiCard9writeDataEhPKh>:
 80830fa:	b538      	push	{r3, r4, r5, lr}
 80830fc:	4604      	mov	r4, r0
 80830fe:	4615      	mov	r5, r2
 8083100:	6840      	ldr	r0, [r0, #4]
 8083102:	f000 f8eb 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8083106:	f44f 7200 	mov.w	r2, #512	; 0x200
 808310a:	4629      	mov	r1, r5
 808310c:	6860      	ldr	r0, [r4, #4]
 808310e:	f000 f8e9 	bl	80832e4 <_ZN14SdSpiAltDriver4sendEPKhj>
 8083112:	21ff      	movs	r1, #255	; 0xff
 8083114:	6860      	ldr	r0, [r4, #4]
 8083116:	f000 f8e1 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 808311a:	21ff      	movs	r1, #255	; 0xff
 808311c:	6860      	ldr	r0, [r4, #4]
 808311e:	f000 f8dd 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8083122:	6860      	ldr	r0, [r4, #4]
 8083124:	f000 f8bf 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8083128:	7260      	strb	r0, [r4, #9]
 808312a:	f000 001f 	and.w	r0, r0, #31
 808312e:	2805      	cmp	r0, #5
 8083130:	d006      	beq.n	8083140 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
 8083132:	2357      	movs	r3, #87	; 0x57
 8083134:	4620      	mov	r0, r4
 8083136:	7023      	strb	r3, [r4, #0]
 8083138:	f7ff fe29 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 808313c:	2000      	movs	r0, #0
 808313e:	bd38      	pop	{r3, r4, r5, pc}
 8083140:	2001      	movs	r0, #1
 8083142:	bd38      	pop	{r3, r4, r5, pc}

08083144 <_ZN9SdSpiCard10writeBlockEmPKh>:
 8083144:	b570      	push	{r4, r5, r6, lr}
 8083146:	7a83      	ldrb	r3, [r0, #10]
 8083148:	4615      	mov	r5, r2
 808314a:	2b03      	cmp	r3, #3
 808314c:	bf18      	it	ne
 808314e:	0249      	lslne	r1, r1, #9
 8083150:	460a      	mov	r2, r1
 8083152:	2118      	movs	r1, #24
 8083154:	4604      	mov	r4, r0
 8083156:	f7ff fe73 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 808315a:	4606      	mov	r6, r0
 808315c:	b108      	cbz	r0, 8083162 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 808315e:	2332      	movs	r3, #50	; 0x32
 8083160:	e01d      	b.n	808319e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
 8083162:	462a      	mov	r2, r5
 8083164:	21fe      	movs	r1, #254	; 0xfe
 8083166:	4620      	mov	r0, r4
 8083168:	f7ff ffc7 	bl	80830fa <_ZN9SdSpiCard9writeDataEhPKh>
 808316c:	b1c0      	cbz	r0, 80831a0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>
 808316e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8083172:	4620      	mov	r0, r4
 8083174:	f7ff fe4f 	bl	8082e16 <_ZN9SdSpiCard11waitNotBusyEt>
 8083178:	4605      	mov	r5, r0
 808317a:	b908      	cbnz	r0, 8083180 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 808317c:	235a      	movs	r3, #90	; 0x5a
 808317e:	e00e      	b.n	808319e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
 8083180:	4632      	mov	r2, r6
 8083182:	210d      	movs	r1, #13
 8083184:	4620      	mov	r0, r4
 8083186:	f7ff fe5b 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 808318a:	b938      	cbnz	r0, 808319c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
 808318c:	6860      	ldr	r0, [r4, #4]
 808318e:	f000 f88a 	bl	80832a6 <_ZN14SdSpiAltDriver7receiveEv>
 8083192:	b918      	cbnz	r0, 808319c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
 8083194:	4620      	mov	r0, r4
 8083196:	f7ff fdfa 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 808319a:	e005      	b.n	80831a8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
 808319c:	2329      	movs	r3, #41	; 0x29
 808319e:	7023      	strb	r3, [r4, #0]
 80831a0:	4620      	mov	r0, r4
 80831a2:	f7ff fdf4 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 80831a6:	2500      	movs	r5, #0
 80831a8:	4628      	mov	r0, r5
 80831aa:	bd70      	pop	{r4, r5, r6, pc}

080831ac <_ZN9SdSpiCard9writeDataEPKh>:
 80831ac:	b538      	push	{r3, r4, r5, lr}
 80831ae:	460d      	mov	r5, r1
 80831b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80831b4:	4604      	mov	r4, r0
 80831b6:	f7ff fe2e 	bl	8082e16 <_ZN9SdSpiCard11waitNotBusyEt>
 80831ba:	b910      	cbnz	r0, 80831c2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
 80831bc:	235b      	movs	r3, #91	; 0x5b
 80831be:	7023      	strb	r3, [r4, #0]
 80831c0:	e005      	b.n	80831ce <_ZN9SdSpiCard9writeDataEPKh+0x22>
 80831c2:	462a      	mov	r2, r5
 80831c4:	21fc      	movs	r1, #252	; 0xfc
 80831c6:	4620      	mov	r0, r4
 80831c8:	f7ff ff97 	bl	80830fa <_ZN9SdSpiCard9writeDataEhPKh>
 80831cc:	b918      	cbnz	r0, 80831d6 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
 80831ce:	4620      	mov	r0, r4
 80831d0:	f7ff fddd 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 80831d4:	2000      	movs	r0, #0
 80831d6:	bd38      	pop	{r3, r4, r5, pc}

080831d8 <_ZN9SdSpiCard10writeStartEm>:
 80831d8:	b510      	push	{r4, lr}
 80831da:	7a83      	ldrb	r3, [r0, #10]
 80831dc:	460a      	mov	r2, r1
 80831de:	2b03      	cmp	r3, #3
 80831e0:	bf18      	it	ne
 80831e2:	024a      	lslne	r2, r1, #9
 80831e4:	2119      	movs	r1, #25
 80831e6:	4604      	mov	r4, r0
 80831e8:	f7ff fe2a 	bl	8082e40 <_ZN9SdSpiCard11cardCommandEhm>
 80831ec:	b130      	cbz	r0, 80831fc <_ZN9SdSpiCard10writeStartEm+0x24>
 80831ee:	2333      	movs	r3, #51	; 0x33
 80831f0:	4620      	mov	r0, r4
 80831f2:	7023      	strb	r3, [r4, #0]
 80831f4:	f7ff fdcb 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 80831f8:	2000      	movs	r0, #0
 80831fa:	bd10      	pop	{r4, pc}
 80831fc:	2001      	movs	r0, #1
 80831fe:	bd10      	pop	{r4, pc}

08083200 <_ZN9SdSpiCard9writeStopEv>:
 8083200:	b538      	push	{r3, r4, r5, lr}
 8083202:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8083206:	4604      	mov	r4, r0
 8083208:	f7ff fe05 	bl	8082e16 <_ZN9SdSpiCard11waitNotBusyEt>
 808320c:	4605      	mov	r5, r0
 808320e:	b120      	cbz	r0, 808321a <_ZN9SdSpiCard9writeStopEv+0x1a>
 8083210:	21fd      	movs	r1, #253	; 0xfd
 8083212:	6860      	ldr	r0, [r4, #4]
 8083214:	f000 f862 	bl	80832dc <_ZN14SdSpiAltDriver4sendEh>
 8083218:	e001      	b.n	808321e <_ZN9SdSpiCard9writeStopEv+0x1e>
 808321a:	2356      	movs	r3, #86	; 0x56
 808321c:	7023      	strb	r3, [r4, #0]
 808321e:	4620      	mov	r0, r4
 8083220:	f7ff fdb5 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 8083224:	4628      	mov	r0, r5
 8083226:	bd38      	pop	{r3, r4, r5, pc}

08083228 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
 8083228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808322a:	4605      	mov	r5, r0
 808322c:	4616      	mov	r6, r2
 808322e:	461f      	mov	r7, r3
 8083230:	f7ff ffd2 	bl	80831d8 <_ZN9SdSpiCard10writeStartEm>
 8083234:	b170      	cbz	r0, 8083254 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 8083236:	2400      	movs	r4, #0
 8083238:	42bc      	cmp	r4, r7
 808323a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 808323e:	4628      	mov	r0, r5
 8083240:	d004      	beq.n	808324c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
 8083242:	f7ff ffb3 	bl	80831ac <_ZN9SdSpiCard9writeDataEPKh>
 8083246:	b128      	cbz	r0, 8083254 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 8083248:	3401      	adds	r4, #1
 808324a:	e7f5      	b.n	8083238 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
 808324c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8083250:	f7ff bfd6 	b.w	8083200 <_ZN9SdSpiCard9writeStopEv>
 8083254:	4628      	mov	r0, r5
 8083256:	f7ff fd9a 	bl	8082d8e <_ZN9SdSpiCard7spiStopEv>
 808325a:	2000      	movs	r0, #0
 808325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808325e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 808325e:	f002 b8a3 	b.w	80853a8 <HAL_Pin_Map>

08083262 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 8083262:	f002 b8a1 	b.w	80853a8 <HAL_Pin_Map>

08083266 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 8083266:	f002 b89f 	b.w	80853a8 <HAL_Pin_Map>
	...

0808326c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
 808326c:	4b01      	ldr	r3, [pc, #4]	; (8083274 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 808326e:	2201      	movs	r2, #1
 8083270:	701a      	strb	r2, [r3, #0]
 8083272:	4770      	bx	lr
 8083274:	2000071c 	.word	0x2000071c

08083278 <_ZN14SdSpiAltDriver8activateEv>:
 8083278:	1d01      	adds	r1, r0, #4
 808327a:	6800      	ldr	r0, [r0, #0]
 808327c:	f002 bde6 	b.w	8085e4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

08083280 <_ZN14SdSpiAltDriver5beginEh>:
 8083280:	b510      	push	{r4, lr}
 8083282:	4604      	mov	r4, r0
 8083284:	7501      	strb	r1, [r0, #20]
 8083286:	6800      	ldr	r0, [r0, #0]
 8083288:	f002 fdb5 	bl	8085df6 <_ZN8SPIClass5beginEv>
 808328c:	7d20      	ldrb	r0, [r4, #20]
 808328e:	2101      	movs	r1, #1
 8083290:	f006 f9ae 	bl	80895f0 <pinMode>
 8083294:	7d20      	ldrb	r0, [r4, #20]
 8083296:	2101      	movs	r1, #1
 8083298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808329c:	f006 b9b9 	b.w	8089612 <digitalWrite>

080832a0 <_ZN14SdSpiAltDriver10deactivateEv>:
 80832a0:	6800      	ldr	r0, [r0, #0]
 80832a2:	f002 bdb8 	b.w	8085e16 <_ZN8SPIClass14endTransactionEv>

080832a6 <_ZN14SdSpiAltDriver7receiveEv>:
 80832a6:	21ff      	movs	r1, #255	; 0xff
 80832a8:	6800      	ldr	r0, [r0, #0]
 80832aa:	f002 be3e 	b.w	8085f2a <_ZN8SPIClass8transferEh>
	...

080832b0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 80832b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80832b2:	4b08      	ldr	r3, [pc, #32]	; (80832d4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 80832b4:	2500      	movs	r5, #0
 80832b6:	9300      	str	r3, [sp, #0]
 80832b8:	4c07      	ldr	r4, [pc, #28]	; (80832d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
 80832ba:	4613      	mov	r3, r2
 80832bc:	6800      	ldr	r0, [r0, #0]
 80832be:	460a      	mov	r2, r1
 80832c0:	4629      	mov	r1, r5
 80832c2:	7025      	strb	r5, [r4, #0]
 80832c4:	f002 fe37 	bl	8085f36 <_ZN8SPIClass8transferEPvS0_jPFvvE>
 80832c8:	7823      	ldrb	r3, [r4, #0]
 80832ca:	2b00      	cmp	r3, #0
 80832cc:	d0fc      	beq.n	80832c8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
 80832ce:	2000      	movs	r0, #0
 80832d0:	b003      	add	sp, #12
 80832d2:	bd30      	pop	{r4, r5, pc}
 80832d4:	0808326d 	.word	0x0808326d
 80832d8:	2000071c 	.word	0x2000071c

080832dc <_ZN14SdSpiAltDriver4sendEh>:
 80832dc:	6800      	ldr	r0, [r0, #0]
 80832de:	f002 be24 	b.w	8085f2a <_ZN8SPIClass8transferEh>
	...

080832e4 <_ZN14SdSpiAltDriver4sendEPKhj>:
 80832e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80832e6:	4b07      	ldr	r3, [pc, #28]	; (8083304 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 80832e8:	2500      	movs	r5, #0
 80832ea:	9300      	str	r3, [sp, #0]
 80832ec:	4c06      	ldr	r4, [pc, #24]	; (8083308 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
 80832ee:	4613      	mov	r3, r2
 80832f0:	6800      	ldr	r0, [r0, #0]
 80832f2:	462a      	mov	r2, r5
 80832f4:	7025      	strb	r5, [r4, #0]
 80832f6:	f002 fe1e 	bl	8085f36 <_ZN8SPIClass8transferEPvS0_jPFvvE>
 80832fa:	7823      	ldrb	r3, [r4, #0]
 80832fc:	2b00      	cmp	r3, #0
 80832fe:	d0fc      	beq.n	80832fa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
 8083300:	b003      	add	sp, #12
 8083302:	bd30      	pop	{r4, r5, pc}
 8083304:	0808326d 	.word	0x0808326d
 8083308:	2000071c 	.word	0x2000071c

0808330c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 808330c:	f002 b84c 	b.w	80853a8 <HAL_Pin_Map>

08083310 <_ZN18ParticleSoftSerial10rxTimerISREv>:
 8083310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083312:	4c3c      	ldr	r4, [pc, #240]	; (8083404 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf4>)
 8083314:	6823      	ldr	r3, [r4, #0]
 8083316:	07d9      	lsls	r1, r3, #31
 8083318:	d40c      	bmi.n	8083334 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 808331a:	4620      	mov	r0, r4
 808331c:	f7fc fed2 	bl	80800c4 <__cxa_guard_acquire>
 8083320:	b140      	cbz	r0, 8083334 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 8083322:	4b39      	ldr	r3, [pc, #228]	; (8083408 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8083324:	4a39      	ldr	r2, [pc, #228]	; (808340c <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8083326:	781b      	ldrb	r3, [r3, #0]
 8083328:	4620      	mov	r0, r4
 808332a:	f003 0301 	and.w	r3, r3, #1
 808332e:	7013      	strb	r3, [r2, #0]
 8083330:	f7fc fecd 	bl	80800ce <__cxa_guard_release>
 8083334:	4c36      	ldr	r4, [pc, #216]	; (8083410 <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 8083336:	7823      	ldrb	r3, [r4, #0]
 8083338:	061a      	lsls	r2, r3, #24
 808333a:	d461      	bmi.n	8083400 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
 808333c:	7825      	ldrb	r5, [r4, #0]
 808333e:	4e32      	ldr	r6, [pc, #200]	; (8083408 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8083340:	b26d      	sxtb	r5, r5
 8083342:	b975      	cbnz	r5, 8083362 <_ZN18ParticleSoftSerial10rxTimerISREv+0x52>
 8083344:	4b33      	ldr	r3, [pc, #204]	; (8083414 <_ZN18ParticleSoftSerial10rxTimerISREv+0x104>)
 8083346:	462a      	mov	r2, r5
 8083348:	6819      	ldr	r1, [r3, #0]
 808334a:	4833      	ldr	r0, [pc, #204]	; (8083418 <_ZN18ParticleSoftSerial10rxTimerISREv+0x108>)
 808334c:	f001 fffe 	bl	808534c <_ZN13IntervalTimer15resetPeriod_SITEmb>
 8083350:	7833      	ldrb	r3, [r6, #0]
 8083352:	4a2e      	ldr	r2, [pc, #184]	; (808340c <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8083354:	f003 0301 	and.w	r3, r3, #1
 8083358:	7013      	strb	r3, [r2, #0]
 808335a:	4b30      	ldr	r3, [pc, #192]	; (808341c <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 808335c:	4a30      	ldr	r2, [pc, #192]	; (8083420 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 808335e:	781b      	ldrb	r3, [r3, #0]
 8083360:	54d5      	strb	r5, [r2, r3]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8083362:	4b30      	ldr	r3, [pc, #192]	; (8083424 <_ZN18ParticleSoftSerial10rxTimerISREv+0x114>)
 8083364:	4a30      	ldr	r2, [pc, #192]	; (8083428 <_ZN18ParticleSoftSerial10rxTimerISREv+0x118>)
 8083366:	8818      	ldrh	r0, [r3, #0]
 8083368:	231c      	movs	r3, #28
 808336a:	4343      	muls	r3, r0
 808336c:	6812      	ldr	r2, [r2, #0]
 808336e:	18d1      	adds	r1, r2, r3
 8083370:	58d3      	ldr	r3, [r2, r3]
 8083372:	888a      	ldrh	r2, [r1, #4]
 8083374:	691b      	ldr	r3, [r3, #16]
 8083376:	492d      	ldr	r1, [pc, #180]	; (808342c <_ZN18ParticleSoftSerial10rxTimerISREv+0x11c>)
 8083378:	421a      	tst	r2, r3
 808337a:	7823      	ldrb	r3, [r4, #0]
 808337c:	780d      	ldrb	r5, [r1, #0]
 808337e:	b25b      	sxtb	r3, r3
 8083380:	bf14      	ite	ne
 8083382:	2201      	movne	r2, #1
 8083384:	2200      	moveq	r2, #0
 8083386:	42ab      	cmp	r3, r5
 8083388:	dc0d      	bgt.n	80833a6 <_ZN18ParticleSoftSerial10rxTimerISREv+0x96>
 808338a:	4b21      	ldr	r3, [pc, #132]	; (8083410 <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 808338c:	4923      	ldr	r1, [pc, #140]	; (808341c <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 808338e:	781b      	ldrb	r3, [r3, #0]
 8083390:	7809      	ldrb	r1, [r1, #0]
 8083392:	4f23      	ldr	r7, [pc, #140]	; (8083420 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8083394:	b2c9      	uxtb	r1, r1
 8083396:	f817 e001 	ldrb.w	lr, [r7, r1]
 808339a:	b25b      	sxtb	r3, r3
 808339c:	fa02 f303 	lsl.w	r3, r2, r3
 80833a0:	ea4e 0303 	orr.w	r3, lr, r3
 80833a4:	547b      	strb	r3, [r7, r1]
 80833a6:	7833      	ldrb	r3, [r6, #0]
 80833a8:	06db      	lsls	r3, r3, #27
 80833aa:	d503      	bpl.n	80833b4 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
 80833ac:	7823      	ldrb	r3, [r4, #0]
 80833ae:	b25b      	sxtb	r3, r3
 80833b0:	429d      	cmp	r5, r3
 80833b2:	da20      	bge.n	80833f6 <_ZN18ParticleSoftSerial10rxTimerISREv+0xe6>
 80833b4:	7823      	ldrb	r3, [r4, #0]
 80833b6:	4a1e      	ldr	r2, [pc, #120]	; (8083430 <_ZN18ParticleSoftSerial10rxTimerISREv+0x120>)
 80833b8:	3301      	adds	r3, #1
 80833ba:	7812      	ldrb	r2, [r2, #0]
 80833bc:	b25b      	sxtb	r3, r3
 80833be:	4293      	cmp	r3, r2
 80833c0:	7023      	strb	r3, [r4, #0]
 80833c2:	db1d      	blt.n	8083400 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
 80833c4:	4b11      	ldr	r3, [pc, #68]	; (808340c <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 80833c6:	4a15      	ldr	r2, [pc, #84]	; (808341c <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 80833c8:	781b      	ldrb	r3, [r3, #0]
 80833ca:	b123      	cbz	r3, 80833d6 <_ZN18ParticleSoftSerial10rxTimerISREv+0xc6>
 80833cc:	7813      	ldrb	r3, [r2, #0]
 80833ce:	4a14      	ldr	r2, [pc, #80]	; (8083420 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 80833d0:	21ff      	movs	r1, #255	; 0xff
 80833d2:	54d1      	strb	r1, [r2, r3]
 80833d4:	e004      	b.n	80833e0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xd0>
 80833d6:	7813      	ldrb	r3, [r2, #0]
 80833d8:	3301      	adds	r3, #1
 80833da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80833de:	7013      	strb	r3, [r2, #0]
 80833e0:	23fe      	movs	r3, #254	; 0xfe
 80833e2:	7023      	strb	r3, [r4, #0]
 80833e4:	2300      	movs	r3, #0
 80833e6:	9300      	str	r3, [sp, #0]
 80833e8:	2202      	movs	r2, #2
 80833ea:	f04f 33ff 	mov.w	r3, #4294967295
 80833ee:	4911      	ldr	r1, [pc, #68]	; (8083434 <_ZN18ParticleSoftSerial10rxTimerISREv+0x124>)
 80833f0:	f005 facc 	bl	808898c <_Z15attachInterrupttPFvvE13InterruptModeah>
 80833f4:	e004      	b.n	8083400 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
 80833f6:	4b05      	ldr	r3, [pc, #20]	; (808340c <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 80833f8:	7819      	ldrb	r1, [r3, #0]
 80833fa:	404a      	eors	r2, r1
 80833fc:	701a      	strb	r2, [r3, #0]
 80833fe:	e7d9      	b.n	80833b4 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
 8083400:	b003      	add	sp, #12
 8083402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083404:	20000728 	.word	0x20000728
 8083408:	20000781 	.word	0x20000781
 808340c:	2000072c 	.word	0x2000072c
 8083410:	2000003c 	.word	0x2000003c
 8083414:	20000030 	.word	0x20000030
 8083418:	200007d0 	.word	0x200007d0
 808341c:	2000078c 	.word	0x2000078c
 8083420:	2000072d 	.word	0x2000072d
 8083424:	20000044 	.word	0x20000044
 8083428:	20000788 	.word	0x20000788
 808342c:	2000003b 	.word	0x2000003b
 8083430:	2000002c 	.word	0x2000002c
 8083434:	08083445 	.word	0x08083445

08083438 <_ZN13IntervalTimerD1Ev>:
 8083438:	b510      	push	{r4, lr}
 808343a:	4604      	mov	r4, r0
 808343c:	f001 ff7c 	bl	8085338 <_ZN13IntervalTimer3endEv>
 8083440:	4620      	mov	r0, r4
 8083442:	bd10      	pop	{r4, pc}

08083444 <_ZN18ParticleSoftSerial8rxPinISREv>:
 8083444:	b510      	push	{r4, lr}
 8083446:	4c09      	ldr	r4, [pc, #36]	; (808346c <_ZN18ParticleSoftSerial8rxPinISREv+0x28>)
 8083448:	7823      	ldrb	r3, [r4, #0]
 808344a:	061b      	lsls	r3, r3, #24
 808344c:	d50d      	bpl.n	808346a <_ZN18ParticleSoftSerial8rxPinISREv+0x26>
 808344e:	4b08      	ldr	r3, [pc, #32]	; (8083470 <_ZN18ParticleSoftSerial8rxPinISREv+0x2c>)
 8083450:	4808      	ldr	r0, [pc, #32]	; (8083474 <_ZN18ParticleSoftSerial8rxPinISREv+0x30>)
 8083452:	6819      	ldr	r1, [r3, #0]
 8083454:	2200      	movs	r2, #0
 8083456:	f001 ff79 	bl	808534c <_ZN13IntervalTimer15resetPeriod_SITEmb>
 808345a:	2300      	movs	r3, #0
 808345c:	7023      	strb	r3, [r4, #0]
 808345e:	4b06      	ldr	r3, [pc, #24]	; (8083478 <_ZN18ParticleSoftSerial8rxPinISREv+0x34>)
 8083460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083464:	8818      	ldrh	r0, [r3, #0]
 8083466:	f005 bab9 	b.w	80889dc <_Z15detachInterruptt>
 808346a:	bd10      	pop	{r4, pc}
 808346c:	2000003c 	.word	0x2000003c
 8083470:	20000034 	.word	0x20000034
 8083474:	200007d0 	.word	0x200007d0
 8083478:	20000044 	.word	0x20000044

0808347c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 808347c:	b40e      	push	{r1, r2, r3}
 808347e:	b500      	push	{lr}
 8083480:	b08c      	sub	sp, #48	; 0x30
 8083482:	aa0d      	add	r2, sp, #52	; 0x34
 8083484:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8083488:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808348a:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 808348e:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8083490:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8083492:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8083494:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8083496:	aa04      	add	r2, sp, #16
 8083498:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808349a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808349c:	f002 f9ec 	bl	8085878 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80834a0:	b00c      	add	sp, #48	; 0x30
 80834a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80834a6:	b003      	add	sp, #12
 80834a8:	4770      	bx	lr
	...

080834ac <_ZN13IntervalTimerC1Ev>:
 80834ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80834ae:	223b      	movs	r2, #59	; 0x3b
 80834b0:	8042      	strh	r2, [r0, #2]
 80834b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80834b6:	8082      	strh	r2, [r0, #4]
 80834b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80834bc:	80c2      	strh	r2, [r0, #6]
 80834be:	4a25      	ldr	r2, [pc, #148]	; (8083554 <_ZN13IntervalTimerC1Ev+0xa8>)
 80834c0:	2300      	movs	r3, #0
 80834c2:	7003      	strb	r3, [r0, #0]
 80834c4:	7203      	strb	r3, [r0, #8]
 80834c6:	7013      	strb	r3, [r2, #0]
 80834c8:	7053      	strb	r3, [r2, #1]
 80834ca:	7093      	strb	r3, [r2, #2]
 80834cc:	70d3      	strb	r3, [r2, #3]
 80834ce:	7113      	strb	r3, [r2, #4]
 80834d0:	7803      	ldrb	r3, [r0, #0]
 80834d2:	4604      	mov	r4, r0
 80834d4:	2b00      	cmp	r3, #0
 80834d6:	d13a      	bne.n	808354e <_ZN13IntervalTimerC1Ev+0xa2>
 80834d8:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80834da:	4e1f      	ldr	r6, [pc, #124]	; (8083558 <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 80834dc:	4d1f      	ldr	r5, [pc, #124]	; (808355c <_ZN13IntervalTimerC1Ev+0xb0>)
 80834de:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80834e0:	4b1f      	ldr	r3, [pc, #124]	; (8083560 <_ZN13IntervalTimerC1Ev+0xb4>)
 80834e2:	4669      	mov	r1, sp
 80834e4:	2013      	movs	r0, #19
 80834e6:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80834e8:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80834ea:	9502      	str	r5, [sp, #8]
 80834ec:	f005 faa0 	bl	8088a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80834f0:	4668      	mov	r0, sp
 80834f2:	f7fc febd 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80834f6:	4b1b      	ldr	r3, [pc, #108]	; (8083564 <_ZN13IntervalTimerC1Ev+0xb8>)
 80834f8:	4669      	mov	r1, sp
 80834fa:	201a      	movs	r0, #26
 80834fc:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80834fe:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083500:	9502      	str	r5, [sp, #8]
 8083502:	f005 fa95 	bl	8088a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083506:	4668      	mov	r0, sp
 8083508:	f7fc feb2 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808350c:	4b16      	ldr	r3, [pc, #88]	; (8083568 <_ZN13IntervalTimerC1Ev+0xbc>)
 808350e:	4669      	mov	r1, sp
 8083510:	2021      	movs	r0, #33	; 0x21
 8083512:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083514:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083516:	9502      	str	r5, [sp, #8]
 8083518:	f005 fa8a 	bl	8088a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808351c:	4668      	mov	r0, sp
 808351e:	f7fc fea7 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083522:	4b12      	ldr	r3, [pc, #72]	; (808356c <_ZN13IntervalTimerC1Ev+0xc0>)
 8083524:	4669      	mov	r1, sp
 8083526:	2024      	movs	r0, #36	; 0x24
 8083528:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808352a:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808352c:	9502      	str	r5, [sp, #8]
 808352e:	f005 fa7f 	bl	8088a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083532:	4668      	mov	r0, sp
 8083534:	f7fc fe9c 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083538:	4b0d      	ldr	r3, [pc, #52]	; (8083570 <_ZN13IntervalTimerC1Ev+0xc4>)
 808353a:	4669      	mov	r1, sp
 808353c:	2026      	movs	r0, #38	; 0x26
 808353e:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083540:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083542:	9502      	str	r5, [sp, #8]
 8083544:	f005 fa74 	bl	8088a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083548:	4668      	mov	r0, sp
 808354a:	f7fc fe91 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
 808354e:	4620      	mov	r0, r4
 8083550:	b004      	add	sp, #16
 8083552:	bd70      	pop	{r4, r5, r6, pc}
 8083554:	200008ec 	.word	0x200008ec
 8083558:	08080111 	.word	0x08080111
 808355c:	08080115 	.word	0x08080115
 8083560:	08085051 	.word	0x08085051
 8083564:	08085079 	.word	0x08085079
 8083568:	080850a1 	.word	0x080850a1
 808356c:	080850c9 	.word	0x080850c9
 8083570:	080850f1 	.word	0x080850f1

08083574 <_ZN18ParticleSoftSerial9prepareRXEv>:
 8083574:	b513      	push	{r0, r1, r4, lr}
 8083576:	4c11      	ldr	r4, [pc, #68]	; (80835bc <_ZN18ParticleSoftSerial9prepareRXEv+0x48>)
 8083578:	2102      	movs	r1, #2
 808357a:	8820      	ldrh	r0, [r4, #0]
 808357c:	f006 f838 	bl	80895f0 <pinMode>
 8083580:	4b0f      	ldr	r3, [pc, #60]	; (80835c0 <_ZN18ParticleSoftSerial9prepareRXEv+0x4c>)
 8083582:	22fe      	movs	r2, #254	; 0xfe
 8083584:	701a      	strb	r2, [r3, #0]
 8083586:	4b0f      	ldr	r3, [pc, #60]	; (80835c4 <_ZN18ParticleSoftSerial9prepareRXEv+0x50>)
 8083588:	681a      	ldr	r2, [r3, #0]
 808358a:	2a09      	cmp	r2, #9
 808358c:	d90a      	bls.n	80835a4 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 808358e:	480e      	ldr	r0, [pc, #56]	; (80835c8 <_ZN18ParticleSoftSerial9prepareRXEv+0x54>)
 8083590:	88c3      	ldrh	r3, [r0, #6]
 8083592:	429a      	cmp	r2, r3
 8083594:	d806      	bhi.n	80835a4 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 8083596:	4b0d      	ldr	r3, [pc, #52]	; (80835cc <_ZN18ParticleSoftSerial9prepareRXEv+0x58>)
 8083598:	490d      	ldr	r1, [pc, #52]	; (80835d0 <_ZN18ParticleSoftSerial9prepareRXEv+0x5c>)
 808359a:	781b      	ldrb	r3, [r3, #0]
 808359c:	9300      	str	r3, [sp, #0]
 808359e:	2300      	movs	r3, #0
 80835a0:	f001 fe94 	bl	80852cc <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
 80835a4:	2300      	movs	r3, #0
 80835a6:	9300      	str	r3, [sp, #0]
 80835a8:	8820      	ldrh	r0, [r4, #0]
 80835aa:	f04f 33ff 	mov.w	r3, #4294967295
 80835ae:	2202      	movs	r2, #2
 80835b0:	4908      	ldr	r1, [pc, #32]	; (80835d4 <_ZN18ParticleSoftSerial9prepareRXEv+0x60>)
 80835b2:	f005 f9eb 	bl	808898c <_Z15attachInterrupttPFvvE13InterruptModeah>
 80835b6:	b002      	add	sp, #8
 80835b8:	bd10      	pop	{r4, pc}
 80835ba:	bf00      	nop
 80835bc:	20000044 	.word	0x20000044
 80835c0:	2000003c 	.word	0x2000003c
 80835c4:	20000030 	.word	0x20000030
 80835c8:	200007d0 	.word	0x200007d0
 80835cc:	20000039 	.word	0x20000039
 80835d0:	08083311 	.word	0x08083311
 80835d4:	08083445 	.word	0x08083445

080835d8 <_ZN18ParticleSoftSerial10txTimerISREv>:
 80835d8:	b538      	push	{r3, r4, r5, lr}
 80835da:	4c56      	ldr	r4, [pc, #344]	; (8083734 <_ZN18ParticleSoftSerial10txTimerISREv+0x15c>)
 80835dc:	6823      	ldr	r3, [r4, #0]
 80835de:	07db      	lsls	r3, r3, #31
 80835e0:	d40c      	bmi.n	80835fc <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 80835e2:	4620      	mov	r0, r4
 80835e4:	f7fc fd6e 	bl	80800c4 <__cxa_guard_acquire>
 80835e8:	b140      	cbz	r0, 80835fc <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 80835ea:	4b53      	ldr	r3, [pc, #332]	; (8083738 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 80835ec:	4a53      	ldr	r2, [pc, #332]	; (808373c <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 80835ee:	781b      	ldrb	r3, [r3, #0]
 80835f0:	4620      	mov	r0, r4
 80835f2:	f003 0301 	and.w	r3, r3, #1
 80835f6:	7013      	strb	r3, [r2, #0]
 80835f8:	f7fc fd69 	bl	80800ce <__cxa_guard_release>
 80835fc:	4c50      	ldr	r4, [pc, #320]	; (8083740 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 80835fe:	7823      	ldrb	r3, [r4, #0]
 8083600:	b25b      	sxtb	r3, r3
 8083602:	3301      	adds	r3, #1
 8083604:	f2c0 8094 	blt.w	8083730 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
 8083608:	7823      	ldrb	r3, [r4, #0]
 808360a:	4d4e      	ldr	r5, [pc, #312]	; (8083744 <_ZN18ParticleSoftSerial10txTimerISREv+0x16c>)
 808360c:	2bff      	cmp	r3, #255	; 0xff
 808360e:	d115      	bne.n	808363c <_ZN18ParticleSoftSerial10txTimerISREv+0x64>
 8083610:	4b4d      	ldr	r3, [pc, #308]	; (8083748 <_ZN18ParticleSoftSerial10txTimerISREv+0x170>)
 8083612:	2200      	movs	r2, #0
 8083614:	6819      	ldr	r1, [r3, #0]
 8083616:	484d      	ldr	r0, [pc, #308]	; (808374c <_ZN18ParticleSoftSerial10txTimerISREv+0x174>)
 8083618:	f001 fe98 	bl	808534c <_ZN13IntervalTimer15resetPeriod_SITEmb>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808361c:	4b4c      	ldr	r3, [pc, #304]	; (8083750 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 808361e:	881a      	ldrh	r2, [r3, #0]
 8083620:	231c      	movs	r3, #28
 8083622:	4353      	muls	r3, r2
 8083624:	4a4b      	ldr	r2, [pc, #300]	; (8083754 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8083626:	6812      	ldr	r2, [r2, #0]
 8083628:	18d1      	adds	r1, r2, r3
 808362a:	58d3      	ldr	r3, [r2, r3]
 808362c:	888a      	ldrh	r2, [r1, #4]
 808362e:	835a      	strh	r2, [r3, #26]
 8083630:	4b41      	ldr	r3, [pc, #260]	; (8083738 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8083632:	4a42      	ldr	r2, [pc, #264]	; (808373c <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083634:	781b      	ldrb	r3, [r3, #0]
 8083636:	f003 0301 	and.w	r3, r3, #1
 808363a:	e020      	b.n	808367e <_ZN18ParticleSoftSerial10txTimerISREv+0xa6>
 808363c:	7823      	ldrb	r3, [r4, #0]
 808363e:	4a46      	ldr	r2, [pc, #280]	; (8083758 <_ZN18ParticleSoftSerial10txTimerISREv+0x180>)
 8083640:	f013 0f80 	tst.w	r3, #128	; 0x80
 8083644:	d13d      	bne.n	80836c2 <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
 8083646:	7823      	ldrb	r3, [r4, #0]
 8083648:	7811      	ldrb	r1, [r2, #0]
 808364a:	b25b      	sxtb	r3, r3
 808364c:	428b      	cmp	r3, r1
 808364e:	da38      	bge.n	80836c2 <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
 8083650:	7829      	ldrb	r1, [r5, #0]
 8083652:	7823      	ldrb	r3, [r4, #0]
 8083654:	b25a      	sxtb	r2, r3
 8083656:	4b41      	ldr	r3, [pc, #260]	; (808375c <_ZN18ParticleSoftSerial10txTimerISREv+0x184>)
 8083658:	5c5b      	ldrb	r3, [r3, r1]
 808365a:	4113      	asrs	r3, r2
 808365c:	f013 0f01 	tst.w	r3, #1
 8083660:	4a3c      	ldr	r2, [pc, #240]	; (8083754 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8083662:	4b3b      	ldr	r3, [pc, #236]	; (8083750 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8083664:	d00d      	beq.n	8083682 <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8083666:	8819      	ldrh	r1, [r3, #0]
 8083668:	231c      	movs	r3, #28
 808366a:	434b      	muls	r3, r1
 808366c:	6812      	ldr	r2, [r2, #0]
 808366e:	18d1      	adds	r1, r2, r3
 8083670:	58d3      	ldr	r3, [r2, r3]
 8083672:	888a      	ldrh	r2, [r1, #4]
 8083674:	831a      	strh	r2, [r3, #24]
 8083676:	4a31      	ldr	r2, [pc, #196]	; (808373c <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083678:	7813      	ldrb	r3, [r2, #0]
 808367a:	f083 0301 	eor.w	r3, r3, #1
 808367e:	7013      	strb	r3, [r2, #0]
 8083680:	e007      	b.n	8083692 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8083682:	8819      	ldrh	r1, [r3, #0]
 8083684:	231c      	movs	r3, #28
 8083686:	434b      	muls	r3, r1
 8083688:	6812      	ldr	r2, [r2, #0]
 808368a:	18d1      	adds	r1, r2, r3
 808368c:	58d3      	ldr	r3, [r2, r3]
 808368e:	888a      	ldrh	r2, [r1, #4]
 8083690:	835a      	strh	r2, [r3, #26]
 8083692:	4b33      	ldr	r3, [pc, #204]	; (8083760 <_ZN18ParticleSoftSerial10txTimerISREv+0x188>)
 8083694:	782a      	ldrb	r2, [r5, #0]
 8083696:	781b      	ldrb	r3, [r3, #0]
 8083698:	429a      	cmp	r2, r3
 808369a:	d10d      	bne.n	80836b8 <_ZN18ParticleSoftSerial10txTimerISREv+0xe0>
 808369c:	23fe      	movs	r3, #254	; 0xfe
 808369e:	7023      	strb	r3, [r4, #0]
 80836a0:	4b30      	ldr	r3, [pc, #192]	; (8083764 <_ZN18ParticleSoftSerial10txTimerISREv+0x18c>)
 80836a2:	781b      	ldrb	r3, [r3, #0]
 80836a4:	2b00      	cmp	r3, #0
 80836a6:	d043      	beq.n	8083730 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
 80836a8:	4b2f      	ldr	r3, [pc, #188]	; (8083768 <_ZN18ParticleSoftSerial10txTimerISREv+0x190>)
 80836aa:	6818      	ldr	r0, [r3, #0]
 80836ac:	2800      	cmp	r0, #0
 80836ae:	d03f      	beq.n	8083730 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
 80836b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80836b4:	f7ff bf5e 	b.w	8083574 <_ZN18ParticleSoftSerial9prepareRXEv>
 80836b8:	7823      	ldrb	r3, [r4, #0]
 80836ba:	3301      	adds	r3, #1
 80836bc:	b25b      	sxtb	r3, r3
 80836be:	7023      	strb	r3, [r4, #0]
 80836c0:	bd38      	pop	{r3, r4, r5, pc}
 80836c2:	4b1d      	ldr	r3, [pc, #116]	; (8083738 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 80836c4:	781b      	ldrb	r3, [r3, #0]
 80836c6:	b123      	cbz	r3, 80836d2 <_ZN18ParticleSoftSerial10txTimerISREv+0xfa>
 80836c8:	7823      	ldrb	r3, [r4, #0]
 80836ca:	7811      	ldrb	r1, [r2, #0]
 80836cc:	b25b      	sxtb	r3, r3
 80836ce:	428b      	cmp	r3, r1
 80836d0:	d011      	beq.n	80836f6 <_ZN18ParticleSoftSerial10txTimerISREv+0x11e>
 80836d2:	7823      	ldrb	r3, [r4, #0]
 80836d4:	7812      	ldrb	r2, [r2, #0]
 80836d6:	b25b      	sxtb	r3, r3
 80836d8:	429a      	cmp	r2, r3
 80836da:	4a24      	ldr	r2, [pc, #144]	; (808376c <_ZN18ParticleSoftSerial10txTimerISREv+0x194>)
 80836dc:	dc1a      	bgt.n	8083714 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
 80836de:	4b18      	ldr	r3, [pc, #96]	; (8083740 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 80836e0:	7811      	ldrb	r1, [r2, #0]
 80836e2:	781b      	ldrb	r3, [r3, #0]
 80836e4:	b25b      	sxtb	r3, r3
 80836e6:	428b      	cmp	r3, r1
 80836e8:	da14      	bge.n	8083714 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80836ea:	4b19      	ldr	r3, [pc, #100]	; (8083750 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 80836ec:	881a      	ldrh	r2, [r3, #0]
 80836ee:	231c      	movs	r3, #28
 80836f0:	4353      	muls	r3, r2
 80836f2:	4a18      	ldr	r2, [pc, #96]	; (8083754 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 80836f4:	e008      	b.n	8083708 <_ZN18ParticleSoftSerial10txTimerISREv+0x130>
 80836f6:	4b11      	ldr	r3, [pc, #68]	; (808373c <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 80836f8:	4a16      	ldr	r2, [pc, #88]	; (8083754 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 80836fa:	7819      	ldrb	r1, [r3, #0]
 80836fc:	4b14      	ldr	r3, [pc, #80]	; (8083750 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 80836fe:	2900      	cmp	r1, #0
 8083700:	d0bf      	beq.n	8083682 <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
 8083702:	8819      	ldrh	r1, [r3, #0]
 8083704:	231c      	movs	r3, #28
 8083706:	434b      	muls	r3, r1
 8083708:	6812      	ldr	r2, [r2, #0]
 808370a:	18d1      	adds	r1, r2, r3
 808370c:	58d3      	ldr	r3, [r2, r3]
 808370e:	888a      	ldrh	r2, [r1, #4]
 8083710:	831a      	strh	r2, [r3, #24]
 8083712:	e7be      	b.n	8083692 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
 8083714:	7823      	ldrb	r3, [r4, #0]
 8083716:	7812      	ldrb	r2, [r2, #0]
 8083718:	b25b      	sxtb	r3, r3
 808371a:	4293      	cmp	r3, r2
 808371c:	dbb9      	blt.n	8083692 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
 808371e:	782b      	ldrb	r3, [r5, #0]
 8083720:	22fe      	movs	r2, #254	; 0xfe
 8083722:	3301      	adds	r3, #1
 8083724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8083728:	702b      	strb	r3, [r5, #0]
 808372a:	4b05      	ldr	r3, [pc, #20]	; (8083740 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 808372c:	701a      	strb	r2, [r3, #0]
 808372e:	e7b0      	b.n	8083692 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
 8083730:	bd38      	pop	{r3, r4, r5, pc}
 8083732:	bf00      	nop
 8083734:	20000720 	.word	0x20000720
 8083738:	20000781 	.word	0x20000781
 808373c:	20000724 	.word	0x20000724
 8083740:	20000038 	.word	0x20000038
 8083744:	20000780 	.word	0x20000780
 8083748:	20000030 	.word	0x20000030
 808374c:	20000770 	.word	0x20000770
 8083750:	20000040 	.word	0x20000040
 8083754:	20000788 	.word	0x20000788
 8083758:	2000003b 	.word	0x2000003b
 808375c:	2000078d 	.word	0x2000078d
 8083760:	200007e0 	.word	0x200007e0
 8083764:	2000076d 	.word	0x2000076d
 8083768:	20000784 	.word	0x20000784
 808376c:	2000002c 	.word	0x2000002c

08083770 <_ZN18ParticleSoftSerial9prepareTXEv>:
 8083770:	b513      	push	{r0, r1, r4, lr}
 8083772:	4c11      	ldr	r4, [pc, #68]	; (80837b8 <_ZN18ParticleSoftSerial9prepareTXEv+0x48>)
 8083774:	2101      	movs	r1, #1
 8083776:	8820      	ldrh	r0, [r4, #0]
 8083778:	f005 ff3a 	bl	80895f0 <pinMode>
 808377c:	8822      	ldrh	r2, [r4, #0]
 808377e:	231c      	movs	r3, #28
 8083780:	4353      	muls	r3, r2
 8083782:	4a0e      	ldr	r2, [pc, #56]	; (80837bc <_ZN18ParticleSoftSerial9prepareTXEv+0x4c>)
 8083784:	6812      	ldr	r2, [r2, #0]
 8083786:	18d1      	adds	r1, r2, r3
 8083788:	58d3      	ldr	r3, [r2, r3]
 808378a:	888a      	ldrh	r2, [r1, #4]
 808378c:	831a      	strh	r2, [r3, #24]
 808378e:	4b0c      	ldr	r3, [pc, #48]	; (80837c0 <_ZN18ParticleSoftSerial9prepareTXEv+0x50>)
 8083790:	22fe      	movs	r2, #254	; 0xfe
 8083792:	701a      	strb	r2, [r3, #0]
 8083794:	4b0b      	ldr	r3, [pc, #44]	; (80837c4 <_ZN18ParticleSoftSerial9prepareTXEv+0x54>)
 8083796:	681a      	ldr	r2, [r3, #0]
 8083798:	2a09      	cmp	r2, #9
 808379a:	d90a      	bls.n	80837b2 <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 808379c:	480a      	ldr	r0, [pc, #40]	; (80837c8 <_ZN18ParticleSoftSerial9prepareTXEv+0x58>)
 808379e:	88c3      	ldrh	r3, [r0, #6]
 80837a0:	429a      	cmp	r2, r3
 80837a2:	d806      	bhi.n	80837b2 <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 80837a4:	4b09      	ldr	r3, [pc, #36]	; (80837cc <_ZN18ParticleSoftSerial9prepareTXEv+0x5c>)
 80837a6:	490a      	ldr	r1, [pc, #40]	; (80837d0 <_ZN18ParticleSoftSerial9prepareTXEv+0x60>)
 80837a8:	781b      	ldrb	r3, [r3, #0]
 80837aa:	9300      	str	r3, [sp, #0]
 80837ac:	2300      	movs	r3, #0
 80837ae:	f001 fd8d 	bl	80852cc <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
 80837b2:	b002      	add	sp, #8
 80837b4:	bd10      	pop	{r4, pc}
 80837b6:	bf00      	nop
 80837b8:	20000040 	.word	0x20000040
 80837bc:	20000788 	.word	0x20000788
 80837c0:	20000038 	.word	0x20000038
 80837c4:	20000030 	.word	0x20000030
 80837c8:	20000770 	.word	0x20000770
 80837cc:	2000003a 	.word	0x2000003a
 80837d0:	080835d9 	.word	0x080835d9

080837d4 <_ZN18ParticleSoftSerial5beginEmm>:
 80837d4:	f012 0f10 	tst.w	r2, #16
 80837d8:	b538      	push	{r3, r4, r5, lr}
 80837da:	4605      	mov	r5, r0
 80837dc:	4b23      	ldr	r3, [pc, #140]	; (808386c <_ZN18ParticleSoftSerial5beginEmm+0x98>)
 80837de:	d001      	beq.n	80837e4 <_ZN18ParticleSoftSerial5beginEmm+0x10>
 80837e0:	2009      	movs	r0, #9
 80837e2:	e003      	b.n	80837ec <_ZN18ParticleSoftSerial5beginEmm+0x18>
 80837e4:	0690      	lsls	r0, r2, #26
 80837e6:	bf4c      	ite	mi
 80837e8:	2007      	movmi	r0, #7
 80837ea:	2008      	movpl	r0, #8
 80837ec:	7018      	strb	r0, [r3, #0]
 80837ee:	781b      	ldrb	r3, [r3, #0]
 80837f0:	f012 0f01 	tst.w	r2, #1
 80837f4:	481e      	ldr	r0, [pc, #120]	; (8083870 <_ZN18ParticleSoftSerial5beginEmm+0x9c>)
 80837f6:	bf14      	ite	ne
 80837f8:	3302      	addne	r3, #2
 80837fa:	3301      	addeq	r3, #1
 80837fc:	f012 040c 	ands.w	r4, r2, #12
 8083800:	7003      	strb	r3, [r0, #0]
 8083802:	4b1c      	ldr	r3, [pc, #112]	; (8083874 <_ZN18ParticleSoftSerial5beginEmm+0xa0>)
 8083804:	d009      	beq.n	808381a <_ZN18ParticleSoftSerial5beginEmm+0x46>
 8083806:	f012 0f08 	tst.w	r2, #8
 808380a:	bf14      	ite	ne
 808380c:	2211      	movne	r2, #17
 808380e:	2210      	moveq	r2, #16
 8083810:	701a      	strb	r2, [r3, #0]
 8083812:	7803      	ldrb	r3, [r0, #0]
 8083814:	3301      	adds	r3, #1
 8083816:	7003      	strb	r3, [r0, #0]
 8083818:	e000      	b.n	808381c <_ZN18ParticleSoftSerial5beginEmm+0x48>
 808381a:	701c      	strb	r4, [r3, #0]
 808381c:	4a16      	ldr	r2, [pc, #88]	; (8083878 <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 808381e:	2400      	movs	r4, #0
 8083820:	200c      	movs	r0, #12
 8083822:	fb00 f304 	mul.w	r3, r0, r4
 8083826:	589b      	ldr	r3, [r3, r2]
 8083828:	b1a3      	cbz	r3, 8083854 <_ZN18ParticleSoftSerial5beginEmm+0x80>
 808382a:	428b      	cmp	r3, r1
 808382c:	d810      	bhi.n	8083850 <_ZN18ParticleSoftSerial5beginEmm+0x7c>
 808382e:	d004      	beq.n	808383a <_ZN18ParticleSoftSerial5beginEmm+0x66>
 8083830:	460a      	mov	r2, r1
 8083832:	4812      	ldr	r0, [pc, #72]	; (808387c <_ZN18ParticleSoftSerial5beginEmm+0xa8>)
 8083834:	4912      	ldr	r1, [pc, #72]	; (8083880 <_ZN18ParticleSoftSerial5beginEmm+0xac>)
 8083836:	f7ff fe21 	bl	808347c <_ZNK5spark6Logger4infoEPKcz>
 808383a:	4a0f      	ldr	r2, [pc, #60]	; (8083878 <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 808383c:	230c      	movs	r3, #12
 808383e:	fb03 2404 	mla	r4, r3, r4, r2
 8083842:	4b10      	ldr	r3, [pc, #64]	; (8083884 <_ZN18ParticleSoftSerial5beginEmm+0xb0>)
 8083844:	6862      	ldr	r2, [r4, #4]
 8083846:	601a      	str	r2, [r3, #0]
 8083848:	68a2      	ldr	r2, [r4, #8]
 808384a:	4b0f      	ldr	r3, [pc, #60]	; (8083888 <_ZN18ParticleSoftSerial5beginEmm+0xb4>)
 808384c:	601a      	str	r2, [r3, #0]
 808384e:	e001      	b.n	8083854 <_ZN18ParticleSoftSerial5beginEmm+0x80>
 8083850:	3401      	adds	r4, #1
 8083852:	e7e6      	b.n	8083822 <_ZN18ParticleSoftSerial5beginEmm+0x4e>
 8083854:	4b0d      	ldr	r3, [pc, #52]	; (808388c <_ZN18ParticleSoftSerial5beginEmm+0xb8>)
 8083856:	781b      	ldrb	r3, [r3, #0]
 8083858:	b913      	cbnz	r3, 8083860 <_ZN18ParticleSoftSerial5beginEmm+0x8c>
 808385a:	4628      	mov	r0, r5
 808385c:	f7ff ff88 	bl	8083770 <_ZN18ParticleSoftSerial9prepareTXEv>
 8083860:	4628      	mov	r0, r5
 8083862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8083866:	f7ff be85 	b.w	8083574 <_ZN18ParticleSoftSerial9prepareRXEv>
 808386a:	bf00      	nop
 808386c:	2000003b 	.word	0x2000003b
 8083870:	2000002c 	.word	0x2000002c
 8083874:	20000781 	.word	0x20000781
 8083878:	0808e604 	.word	0x0808e604
 808387c:	20000938 	.word	0x20000938
 8083880:	0808e5dc 	.word	0x0808e5dc
 8083884:	20000034 	.word	0x20000034
 8083888:	20000030 	.word	0x20000030
 808388c:	2000076d 	.word	0x2000076d

08083890 <_ZN18ParticleSoftSerial5beginEm>:
 8083890:	2200      	movs	r2, #0
 8083892:	f7ff bf9f 	b.w	80837d4 <_ZN18ParticleSoftSerial5beginEmm>
	...

08083898 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
 8083898:	b570      	push	{r4, r5, r6, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808389a:	f001 fd85 	bl	80853a8 <HAL_Pin_Map>
 808389e:	4c0c      	ldr	r4, [pc, #48]	; (80838d0 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 80838a0:	4b0c      	ldr	r3, [pc, #48]	; (80838d4 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
 80838a2:	4e0d      	ldr	r6, [pc, #52]	; (80838d8 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x40>)
 80838a4:	6018      	str	r0, [r3, #0]
 80838a6:	4d0d      	ldr	r5, [pc, #52]	; (80838dc <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x44>)
 80838a8:	4620      	mov	r0, r4
 80838aa:	f7ff fdff 	bl	80834ac <_ZN13IntervalTimerC1Ev>
 80838ae:	4620      	mov	r0, r4
 80838b0:	4c0b      	ldr	r4, [pc, #44]	; (80838e0 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x48>)
 80838b2:	4632      	mov	r2, r6
 80838b4:	4629      	mov	r1, r5
 80838b6:	f005 ffab 	bl	8089810 <__aeabi_atexit>
 80838ba:	4620      	mov	r0, r4
 80838bc:	f7ff fdf6 	bl	80834ac <_ZN13IntervalTimerC1Ev>
 80838c0:	4632      	mov	r2, r6
 80838c2:	4629      	mov	r1, r5
 80838c4:	4620      	mov	r0, r4
 80838c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80838ca:	f005 bfa1 	b.w	8089810 <__aeabi_atexit>
 80838ce:	bf00      	nop
 80838d0:	200007d0 	.word	0x200007d0
 80838d4:	20000788 	.word	0x20000788
 80838d8:	20000144 	.word	0x20000144
 80838dc:	08083439 	.word	0x08083439
 80838e0:	20000770 	.word	0x20000770

080838e4 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80838e4:	f001 bd60 	b.w	80853a8 <HAL_Pin_Map>

080838e8 <_ZN6UbiTCP8setDebugEb>:
 80838e8:	7501      	strb	r1, [r0, #20]
 80838ea:	4770      	bx	lr

080838ec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80838ec:	b538      	push	{r3, r4, r5, lr}
 80838ee:	4b0b      	ldr	r3, [pc, #44]	; (808391c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80838f0:	6984      	ldr	r4, [r0, #24]
 80838f2:	4605      	mov	r5, r0
 80838f4:	6003      	str	r3, [r0, #0]
 80838f6:	b17c      	cbz	r4, 8083918 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80838f8:	6863      	ldr	r3, [r4, #4]
 80838fa:	3b01      	subs	r3, #1
 80838fc:	6063      	str	r3, [r4, #4]
 80838fe:	b95b      	cbnz	r3, 8083918 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8083900:	6823      	ldr	r3, [r4, #0]
 8083902:	4620      	mov	r0, r4
 8083904:	689b      	ldr	r3, [r3, #8]
 8083906:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083908:	68a3      	ldr	r3, [r4, #8]
 808390a:	3b01      	subs	r3, #1
 808390c:	60a3      	str	r3, [r4, #8]
 808390e:	b91b      	cbnz	r3, 8083918 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8083910:	6823      	ldr	r3, [r4, #0]
 8083912:	4620      	mov	r0, r4
 8083914:	68db      	ldr	r3, [r3, #12]
 8083916:	4798      	blx	r3
 8083918:	4628      	mov	r0, r5
 808391a:	bd38      	pop	{r3, r4, r5, pc}
 808391c:	0808edc0 	.word	0x0808edc0

08083920 <_ZN9TCPClientD0Ev>:
 8083920:	b510      	push	{r4, lr}
 8083922:	4604      	mov	r4, r0
 8083924:	f7ff ffe2 	bl	80838ec <_ZN9TCPClientD1Ev>
 8083928:	4620      	mov	r0, r4
 808392a:	211c      	movs	r1, #28
 808392c:	f005 ff7e 	bl	808982c <_ZdlPvj>
 8083930:	4620      	mov	r0, r4
 8083932:	bd10      	pop	{r4, pc}

08083934 <_ZN6UbiTCPC1EPKciS1_S1_>:
 8083934:	b530      	push	{r4, r5, lr}
 8083936:	4d06      	ldr	r5, [pc, #24]	; (8083950 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
 8083938:	6083      	str	r3, [r0, #8]
 808393a:	6005      	str	r5, [r0, #0]
 808393c:	2500      	movs	r5, #0
 808393e:	7505      	strb	r5, [r0, #20]
 8083940:	f241 3588 	movw	r5, #5000	; 0x1388
 8083944:	9b03      	ldr	r3, [sp, #12]
 8083946:	6185      	str	r5, [r0, #24]
 8083948:	6041      	str	r1, [r0, #4]
 808394a:	60c3      	str	r3, [r0, #12]
 808394c:	6102      	str	r2, [r0, #16]
 808394e:	bd30      	pop	{r4, r5, pc}
 8083950:	0808e7ac 	.word	0x0808e7ac

08083954 <_ZN6UbiTCP9reconnectEPKci>:
 8083954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083958:	460d      	mov	r5, r1
 808395a:	4617      	mov	r7, r2
 808395c:	4606      	mov	r6, r0
 808395e:	f004 ffa9 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083962:	491c      	ldr	r1, [pc, #112]	; (80839d4 <_ZN6UbiTCP9reconnectEPKci+0x80>)
 8083964:	f002 ff11 	bl	808678a <_ZN5Print7printlnEPKc>
 8083968:	2400      	movs	r4, #0
 808396a:	481b      	ldr	r0, [pc, #108]	; (80839d8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 808396c:	f002 fce8 	bl	8086340 <_ZN9TCPClient6statusEv>
 8083970:	bb68      	cbnz	r0, 80839ce <_ZN6UbiTCP9reconnectEPKci+0x7a>
 8083972:	2c05      	cmp	r4, #5
 8083974:	d101      	bne.n	808397a <_ZN6UbiTCP9reconnectEPKci+0x26>
 8083976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808397a:	7d33      	ldrb	r3, [r6, #20]
 808397c:	b1c3      	cbz	r3, 80839b0 <_ZN6UbiTCP9reconnectEPKci+0x5c>
 808397e:	f004 ff99 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083982:	4916      	ldr	r1, [pc, #88]	; (80839dc <_ZN6UbiTCP9reconnectEPKci+0x88>)
 8083984:	f002 feea 	bl	808675c <_ZN5Print5printEPKc>
 8083988:	f004 ff94 	bl	80888b4 <_Z16_fetch_usbserialv>
 808398c:	4629      	mov	r1, r5
 808398e:	f002 fee5 	bl	808675c <_ZN5Print5printEPKc>
 8083992:	f004 ff8f 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083996:	4912      	ldr	r1, [pc, #72]	; (80839e0 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
 8083998:	f002 fee0 	bl	808675c <_ZN5Print5printEPKc>
 808399c:	f004 ff8a 	bl	80888b4 <_Z16_fetch_usbserialv>
 80839a0:	4680      	mov	r8, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80839a2:	220a      	movs	r2, #10
 80839a4:	4621      	mov	r1, r4
 80839a6:	f002 fefa 	bl	808679e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80839aa:	4640      	mov	r0, r8
 80839ac:	f002 fee1 	bl	8086772 <_ZN5Print7printlnEv>
 80839b0:	4809      	ldr	r0, [pc, #36]	; (80839d8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 80839b2:	f002 fc43 	bl	808623c <_ZN9TCPClient4stopEv>
 80839b6:	2300      	movs	r3, #0
 80839b8:	b2ba      	uxth	r2, r7
 80839ba:	4629      	mov	r1, r5
 80839bc:	4806      	ldr	r0, [pc, #24]	; (80839d8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 80839be:	f002 fd87 	bl	80864d0 <_ZN9TCPClient7connectEPKctm>
 80839c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80839c6:	f004 f86d 	bl	8087aa4 <delay>
 80839ca:	3401      	adds	r4, #1
 80839cc:	e7cd      	b.n	808396a <_ZN6UbiTCP9reconnectEPKci+0x16>
 80839ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80839d2:	bf00      	nop
 80839d4:	0808e6a0 	.word	0x0808e6a0
 80839d8:	200007e4 	.word	0x200007e4
 80839dc:	0808e6b8 	.word	0x0808e6b8
 80839e0:	0808e6ce 	.word	0x0808e6ce

080839e4 <_ZN6UbiTCP16waitServerAnswerEv>:
 80839e4:	b570      	push	{r4, r5, r6, lr}
 80839e6:	4605      	mov	r5, r0
 80839e8:	2400      	movs	r4, #0
 80839ea:	480d      	ldr	r0, [pc, #52]	; (8083a20 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
 80839ec:	f002 fbea 	bl	80861c4 <_ZN9TCPClient9availableEv>
 80839f0:	4606      	mov	r6, r0
 80839f2:	b910      	cbnz	r0, 80839fa <_ZN6UbiTCP16waitServerAnswerEv+0x16>
 80839f4:	69ab      	ldr	r3, [r5, #24]
 80839f6:	429c      	cmp	r4, r3
 80839f8:	db01      	blt.n	80839fe <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
 80839fa:	2001      	movs	r0, #1
 80839fc:	bd70      	pop	{r4, r5, r6, pc}
 80839fe:	2001      	movs	r0, #1
 8083a00:	f004 f850 	bl	8087aa4 <delay>
 8083a04:	69ab      	ldr	r3, [r5, #24]
 8083a06:	3401      	adds	r4, #1
 8083a08:	429c      	cmp	r4, r3
 8083a0a:	dbee      	blt.n	80839ea <_ZN6UbiTCP16waitServerAnswerEv+0x6>
 8083a0c:	7d28      	ldrb	r0, [r5, #20]
 8083a0e:	b130      	cbz	r0, 8083a1e <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
 8083a10:	f004 ff50 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083a14:	4903      	ldr	r1, [pc, #12]	; (8083a24 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
 8083a16:	f002 feb8 	bl	808678a <_ZN5Print7printlnEPKc>
 8083a1a:	4630      	mov	r0, r6
 8083a1c:	bd70      	pop	{r4, r5, r6, pc}
 8083a1e:	bd70      	pop	{r4, r5, r6, pc}
 8083a20:	200007e4 	.word	0x200007e4
 8083a24:	0808e6e2 	.word	0x0808e6e2

08083a28 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 8083a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8083a2c:	7d03      	ldrb	r3, [r0, #20]
 8083a2e:	4606      	mov	r6, r0
 8083a30:	4688      	mov	r8, r1
 8083a32:	4615      	mov	r5, r2
 8083a34:	b14b      	cbz	r3, 8083a4a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
 8083a36:	f004 ff3d 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083a3a:	4921      	ldr	r1, [pc, #132]	; (8083ac0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x98>)
 8083a3c:	f002 fea5 	bl	808678a <_ZN5Print7printlnEPKc>
 8083a40:	f004 ff38 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083a44:	491f      	ldr	r1, [pc, #124]	; (8083ac4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x9c>)
 8083a46:	f002 fea0 	bl	808678a <_ZN5Print7printlnEPKc>
 8083a4a:	f240 29bb 	movw	r9, #699	; 0x2bb
 8083a4e:	2400      	movs	r4, #0
 8083a50:	481d      	ldr	r0, [pc, #116]	; (8083ac8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8083a52:	f002 fbb7 	bl	80861c4 <_ZN9TCPClient9availableEv>
 8083a56:	b178      	cbz	r0, 8083a78 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
 8083a58:	481b      	ldr	r0, [pc, #108]	; (8083ac8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8083a5a:	f002 fb68 	bl	808612e <_ZN9TCPClient4readEv>
 8083a5e:	7d33      	ldrb	r3, [r6, #20]
 8083a60:	b2c7      	uxtb	r7, r0
 8083a62:	b12b      	cbz	r3, 8083a70 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
 8083a64:	f004 ff26 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083a68:	6803      	ldr	r3, [r0, #0]
 8083a6a:	4639      	mov	r1, r7
 8083a6c:	689b      	ldr	r3, [r3, #8]
 8083a6e:	4798      	blx	r3
 8083a70:	552f      	strb	r7, [r5, r4]
 8083a72:	3401      	adds	r4, #1
 8083a74:	454c      	cmp	r4, r9
 8083a76:	d1eb      	bne.n	8083a50 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
 8083a78:	7d33      	ldrb	r3, [r6, #20]
 8083a7a:	b123      	cbz	r3, 8083a86 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
 8083a7c:	f004 ff1a 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083a80:	4912      	ldr	r1, [pc, #72]	; (8083acc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>)
 8083a82:	f002 fe82 	bl	808678a <_ZN5Print7printlnEPKc>
 8083a86:	2300      	movs	r3, #0
 8083a88:	552b      	strb	r3, [r5, r4]
 8083a8a:	4b11      	ldr	r3, [pc, #68]	; (8083ad0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa8>)
 8083a8c:	4598      	cmp	r8, r3
 8083a8e:	d108      	bne.n	8083aa2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7a>
 8083a90:	4910      	ldr	r1, [pc, #64]	; (8083ad4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
 8083a92:	4628      	mov	r0, r5
 8083a94:	f008 f9f1 	bl	808be7a <strstr>
 8083a98:	b178      	cbz	r0, 8083aba <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
 8083a9a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8083a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083aa2:	217c      	movs	r1, #124	; 0x7c
 8083aa4:	4628      	mov	r0, r5
 8083aa6:	f007 fc4b 	bl	808b340 <strchr>
 8083aaa:	b130      	cbz	r0, 8083aba <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
 8083aac:	3001      	adds	r0, #1
 8083aae:	f007 fad3 	bl	808b058 <atof>
 8083ab2:	f006 fd6d 	bl	808a590 <__aeabi_d2f>
 8083ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083aba:	4807      	ldr	r0, [pc, #28]	; (8083ad8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
 8083abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083ac0:	0808e729 	.word	0x0808e729
 8083ac4:	0808e715 	.word	0x0808e715
 8083ac8:	200007e4 	.word	0x200007e4
 8083acc:	0808e728 	.word	0x0808e728
 8083ad0:	0808e734 	.word	0x0808e734
 8083ad4:	0808e739 	.word	0x0808e739
 8083ad8:	cda2425f 	.word	0xcda2425f

08083adc <_ZN6UbiTCP3getEPKcS1_>:
 8083adc:	b570      	push	{r4, r5, r6, lr}
 8083ade:	4604      	mov	r4, r0
 8083ae0:	2300      	movs	r3, #0
 8083ae2:	460e      	mov	r6, r1
 8083ae4:	4615      	mov	r5, r2
 8083ae6:	6841      	ldr	r1, [r0, #4]
 8083ae8:	f242 3234 	movw	r2, #9012	; 0x2334
 8083aec:	4845      	ldr	r0, [pc, #276]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083aee:	f002 fcef 	bl	80864d0 <_ZN9TCPClient7connectEPKctm>
 8083af2:	4620      	mov	r0, r4
 8083af4:	f242 3234 	movw	r2, #9012	; 0x2334
 8083af8:	6861      	ldr	r1, [r4, #4]
 8083afa:	f7ff ff2b 	bl	8083954 <_ZN6UbiTCP9reconnectEPKci>
 8083afe:	4841      	ldr	r0, [pc, #260]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b00:	f002 fc55 	bl	80863ae <_ZN9TCPClient9connectedEv>
 8083b04:	2800      	cmp	r0, #0
 8083b06:	d074      	beq.n	8083bf2 <_ZN6UbiTCP3getEPKcS1_+0x116>
 8083b08:	68a1      	ldr	r1, [r4, #8]
 8083b0a:	483e      	ldr	r0, [pc, #248]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b0c:	f002 fe26 	bl	808675c <_ZN5Print5printEPKc>
 8083b10:	493d      	ldr	r1, [pc, #244]	; (8083c08 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8083b12:	483c      	ldr	r0, [pc, #240]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b14:	f002 fe22 	bl	808675c <_ZN5Print5printEPKc>
 8083b18:	68e1      	ldr	r1, [r4, #12]
 8083b1a:	483a      	ldr	r0, [pc, #232]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b1c:	f002 fe1e 	bl	808675c <_ZN5Print5printEPKc>
 8083b20:	493a      	ldr	r1, [pc, #232]	; (8083c0c <_ZN6UbiTCP3getEPKcS1_+0x130>)
 8083b22:	4838      	ldr	r0, [pc, #224]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b24:	f002 fe1a 	bl	808675c <_ZN5Print5printEPKc>
 8083b28:	4631      	mov	r1, r6
 8083b2a:	4836      	ldr	r0, [pc, #216]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b2c:	f002 fe16 	bl	808675c <_ZN5Print5printEPKc>
 8083b30:	4937      	ldr	r1, [pc, #220]	; (8083c10 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8083b32:	4834      	ldr	r0, [pc, #208]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b34:	f002 fe12 	bl	808675c <_ZN5Print5printEPKc>
 8083b38:	4629      	mov	r1, r5
 8083b3a:	4832      	ldr	r0, [pc, #200]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b3c:	f002 fe0e 	bl	808675c <_ZN5Print5printEPKc>
 8083b40:	4934      	ldr	r1, [pc, #208]	; (8083c14 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8083b42:	4830      	ldr	r0, [pc, #192]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083b44:	f002 fe0a 	bl	808675c <_ZN5Print5printEPKc>
 8083b48:	7d23      	ldrb	r3, [r4, #20]
 8083b4a:	b3b3      	cbz	r3, 8083bba <_ZN6UbiTCP3getEPKcS1_+0xde>
 8083b4c:	f004 feb2 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b50:	4931      	ldr	r1, [pc, #196]	; (8083c18 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
 8083b52:	f002 fe1a 	bl	808678a <_ZN5Print7printlnEPKc>
 8083b56:	f004 fead 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b5a:	4930      	ldr	r1, [pc, #192]	; (8083c1c <_ZN6UbiTCP3getEPKcS1_+0x140>)
 8083b5c:	f002 fe15 	bl	808678a <_ZN5Print7printlnEPKc>
 8083b60:	f004 fea8 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b64:	68a1      	ldr	r1, [r4, #8]
 8083b66:	f002 fdf9 	bl	808675c <_ZN5Print5printEPKc>
 8083b6a:	f004 fea3 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b6e:	4926      	ldr	r1, [pc, #152]	; (8083c08 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8083b70:	f002 fdf4 	bl	808675c <_ZN5Print5printEPKc>
 8083b74:	f004 fe9e 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b78:	68e1      	ldr	r1, [r4, #12]
 8083b7a:	f002 fdef 	bl	808675c <_ZN5Print5printEPKc>
 8083b7e:	f004 fe99 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b82:	4922      	ldr	r1, [pc, #136]	; (8083c0c <_ZN6UbiTCP3getEPKcS1_+0x130>)
 8083b84:	f002 fdea 	bl	808675c <_ZN5Print5printEPKc>
 8083b88:	f004 fe94 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b8c:	4631      	mov	r1, r6
 8083b8e:	f002 fde5 	bl	808675c <_ZN5Print5printEPKc>
 8083b92:	f004 fe8f 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083b96:	491e      	ldr	r1, [pc, #120]	; (8083c10 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8083b98:	f002 fde0 	bl	808675c <_ZN5Print5printEPKc>
 8083b9c:	f004 fe8a 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083ba0:	4629      	mov	r1, r5
 8083ba2:	f002 fddb 	bl	808675c <_ZN5Print5printEPKc>
 8083ba6:	f004 fe85 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083baa:	491a      	ldr	r1, [pc, #104]	; (8083c14 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8083bac:	f002 fdd6 	bl	808675c <_ZN5Print5printEPKc>
 8083bb0:	f004 fe80 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083bb4:	491a      	ldr	r1, [pc, #104]	; (8083c20 <_ZN6UbiTCP3getEPKcS1_+0x144>)
 8083bb6:	f002 fde8 	bl	808678a <_ZN5Print7printlnEPKc>
 8083bba:	4620      	mov	r0, r4
 8083bbc:	f7ff ff12 	bl	80839e4 <_ZN6UbiTCP16waitServerAnswerEv>
 8083bc0:	b920      	cbnz	r0, 8083bcc <_ZN6UbiTCP3getEPKcS1_+0xf0>
 8083bc2:	4810      	ldr	r0, [pc, #64]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083bc4:	f002 fb3a 	bl	808623c <_ZN9TCPClient4stopEv>
 8083bc8:	4816      	ldr	r0, [pc, #88]	; (8083c24 <_ZN6UbiTCP3getEPKcS1_+0x148>)
 8083bca:	bd70      	pop	{r4, r5, r6, pc}
 8083bcc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8083bd0:	f001 ff48 	bl	8085a64 <malloc>
 8083bd4:	4914      	ldr	r1, [pc, #80]	; (8083c28 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
 8083bd6:	4602      	mov	r2, r0
 8083bd8:	4605      	mov	r5, r0
 8083bda:	4620      	mov	r0, r4
 8083bdc:	f7ff ff24 	bl	8083a28 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8083be0:	4604      	mov	r4, r0
 8083be2:	4808      	ldr	r0, [pc, #32]	; (8083c04 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083be4:	f002 fb2a 	bl	808623c <_ZN9TCPClient4stopEv>
 8083be8:	4628      	mov	r0, r5
 8083bea:	f001 ff43 	bl	8085a74 <free>
 8083bee:	4620      	mov	r0, r4
 8083bf0:	bd70      	pop	{r4, r5, r6, pc}
 8083bf2:	7d23      	ldrb	r3, [r4, #20]
 8083bf4:	2b00      	cmp	r3, #0
 8083bf6:	d0e4      	beq.n	8083bc2 <_ZN6UbiTCP3getEPKcS1_+0xe6>
 8083bf8:	f004 fe5c 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083bfc:	490b      	ldr	r1, [pc, #44]	; (8083c2c <_ZN6UbiTCP3getEPKcS1_+0x150>)
 8083bfe:	f002 fdc4 	bl	808678a <_ZN5Print7printlnEPKc>
 8083c02:	e7de      	b.n	8083bc2 <_ZN6UbiTCP3getEPKcS1_+0xe6>
 8083c04:	200007e4 	.word	0x200007e4
 8083c08:	0808e73c 	.word	0x0808e73c
 8083c0c:	0808e73f 	.word	0x0808e73f
 8083c10:	0808e898 	.word	0x0808e898
 8083c14:	0808e8d6 	.word	0x0808e8d6
 8083c18:	0808e757 	.word	0x0808e757
 8083c1c:	0808e741 	.word	0x0808e741
 8083c20:	0808e756 	.word	0x0808e756
 8083c24:	cda2425f 	.word	0xcda2425f
 8083c28:	0808e75c 	.word	0x0808e75c
 8083c2c:	0808e75f 	.word	0x0808e75f

08083c30 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
 8083c30:	b570      	push	{r4, r5, r6, lr}
 8083c32:	4604      	mov	r4, r0
 8083c34:	6841      	ldr	r1, [r0, #4]
 8083c36:	f242 3234 	movw	r2, #9012	; 0x2334
 8083c3a:	461d      	mov	r5, r3
 8083c3c:	481e      	ldr	r0, [pc, #120]	; (8083cb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083c3e:	2300      	movs	r3, #0
 8083c40:	f002 fc46 	bl	80864d0 <_ZN9TCPClient7connectEPKctm>
 8083c44:	4620      	mov	r0, r4
 8083c46:	f242 3234 	movw	r2, #9012	; 0x2334
 8083c4a:	6861      	ldr	r1, [r4, #4]
 8083c4c:	f7ff fe82 	bl	8083954 <_ZN6UbiTCP9reconnectEPKci>
 8083c50:	4819      	ldr	r0, [pc, #100]	; (8083cb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083c52:	f002 fbac 	bl	80863ae <_ZN9TCPClient9connectedEv>
 8083c56:	b320      	cbz	r0, 8083ca2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x72>
 8083c58:	4629      	mov	r1, r5
 8083c5a:	4817      	ldr	r0, [pc, #92]	; (8083cb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083c5c:	f002 fd7e 	bl	808675c <_ZN5Print5printEPKc>
 8083c60:	4620      	mov	r0, r4
 8083c62:	f7ff febf 	bl	80839e4 <_ZN6UbiTCP16waitServerAnswerEv>
 8083c66:	4605      	mov	r5, r0
 8083c68:	b920      	cbnz	r0, 8083c74 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x44>
 8083c6a:	4813      	ldr	r0, [pc, #76]	; (8083cb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083c6c:	f002 fae6 	bl	808623c <_ZN9TCPClient4stopEv>
 8083c70:	2500      	movs	r5, #0
 8083c72:	e01f      	b.n	8083cb4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>
 8083c74:	2064      	movs	r0, #100	; 0x64
 8083c76:	f001 fef5 	bl	8085a64 <malloc>
 8083c7a:	4910      	ldr	r1, [pc, #64]	; (8083cbc <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>)
 8083c7c:	4602      	mov	r2, r0
 8083c7e:	4606      	mov	r6, r0
 8083c80:	4620      	mov	r0, r4
 8083c82:	f7ff fed1 	bl	8083a28 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8083c86:	4604      	mov	r4, r0
 8083c88:	4630      	mov	r0, r6
 8083c8a:	f001 fef3 	bl	8085a74 <free>
 8083c8e:	490c      	ldr	r1, [pc, #48]	; (8083cc0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x90>)
 8083c90:	4620      	mov	r0, r4
 8083c92:	f006 ff6f 	bl	808ab74 <__aeabi_fcmpeq>
 8083c96:	2800      	cmp	r0, #0
 8083c98:	d1e7      	bne.n	8083c6a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
 8083c9a:	4807      	ldr	r0, [pc, #28]	; (8083cb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083c9c:	f002 face 	bl	808623c <_ZN9TCPClient4stopEv>
 8083ca0:	e008      	b.n	8083cb4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>
 8083ca2:	7d23      	ldrb	r3, [r4, #20]
 8083ca4:	2b00      	cmp	r3, #0
 8083ca6:	d0e0      	beq.n	8083c6a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
 8083ca8:	f004 fe04 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083cac:	4905      	ldr	r1, [pc, #20]	; (8083cc4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
 8083cae:	f002 fd6c 	bl	808678a <_ZN5Print7printlnEPKc>
 8083cb2:	e7da      	b.n	8083c6a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
 8083cb4:	4628      	mov	r0, r5
 8083cb6:	bd70      	pop	{r4, r5, r6, pc}
 8083cb8:	200007e4 	.word	0x200007e4
 8083cbc:	0808e734 	.word	0x0808e734
 8083cc0:	cda2425f 	.word	0xcda2425f
 8083cc4:	0808e785 	.word	0x0808e785

08083cc8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
 8083cc8:	b510      	push	{r4, lr}
 8083cca:	4c06      	ldr	r4, [pc, #24]	; (8083ce4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
 8083ccc:	f001 fb6c 	bl	80853a8 <HAL_Pin_Map>
 8083cd0:	4620      	mov	r0, r4
 8083cd2:	f002 fbdb 	bl	808648c <_ZN9TCPClientC1Ev>
 8083cd6:	4620      	mov	r0, r4
 8083cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083cdc:	4a02      	ldr	r2, [pc, #8]	; (8083ce8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
 8083cde:	4903      	ldr	r1, [pc, #12]	; (8083cec <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
 8083ce0:	f005 bd96 	b.w	8089810 <__aeabi_atexit>
 8083ce4:	200007e4 	.word	0x200007e4
 8083ce8:	20000144 	.word	0x20000144
 8083cec:	080838ed 	.word	0x080838ed

08083cf0 <_ZN18UbiProtocolHandlerD1Ev>:
 8083cf0:	b510      	push	{r4, lr}
 8083cf2:	4604      	mov	r4, r0
 8083cf4:	6800      	ldr	r0, [r0, #0]
 8083cf6:	b108      	cbz	r0, 8083cfc <_ZN18UbiProtocolHandlerD1Ev+0xc>
 8083cf8:	f7fc f9d7 	bl	80800aa <_ZdaPv>
 8083cfc:	68e0      	ldr	r0, [r4, #12]
 8083cfe:	f001 feb9 	bl	8085a74 <free>
 8083d02:	6860      	ldr	r0, [r4, #4]
 8083d04:	2104      	movs	r1, #4
 8083d06:	f005 fd91 	bl	808982c <_ZdlPvj>
 8083d0a:	4620      	mov	r0, r4
 8083d0c:	bd10      	pop	{r4, pc}
	...

08083d10 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 8083d10:	b570      	push	{r4, r5, r6, lr}
 8083d12:	4604      	mov	r4, r0
 8083d14:	2001      	movs	r0, #1
 8083d16:	f994 5010 	ldrsb.w	r5, [r4, #16]
 8083d1a:	7460      	strb	r0, [r4, #17]
 8083d1c:	2014      	movs	r0, #20
 8083d1e:	4345      	muls	r5, r0
 8083d20:	68e6      	ldr	r6, [r4, #12]
 8083d22:	5171      	str	r1, [r6, r5]
 8083d24:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8083d28:	68e5      	ldr	r5, [r4, #12]
 8083d2a:	fb00 5101 	mla	r1, r0, r1, r5
 8083d2e:	608a      	str	r2, [r1, #8]
 8083d30:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8083d34:	68e1      	ldr	r1, [r4, #12]
 8083d36:	fb00 1202 	mla	r2, r0, r2, r1
 8083d3a:	6053      	str	r3, [r2, #4]
 8083d3c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8083d40:	68e2      	ldr	r2, [r4, #12]
 8083d42:	fb00 2303 	mla	r3, r0, r3, r2
 8083d46:	9a04      	ldr	r2, [sp, #16]
 8083d48:	60da      	str	r2, [r3, #12]
 8083d4a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8083d4e:	68e2      	ldr	r2, [r4, #12]
 8083d50:	fb00 2003 	mla	r0, r0, r3, r2
 8083d54:	9b05      	ldr	r3, [sp, #20]
 8083d56:	6103      	str	r3, [r0, #16]
 8083d58:	7c23      	ldrb	r3, [r4, #16]
 8083d5a:	3301      	adds	r3, #1
 8083d5c:	b25b      	sxtb	r3, r3
 8083d5e:	2b0f      	cmp	r3, #15
 8083d60:	7423      	strb	r3, [r4, #16]
 8083d62:	dd08      	ble.n	8083d76 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x66>
 8083d64:	7ca3      	ldrb	r3, [r4, #18]
 8083d66:	b123      	cbz	r3, 8083d72 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x62>
 8083d68:	f004 fda4 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083d6c:	4902      	ldr	r1, [pc, #8]	; (8083d78 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x68>)
 8083d6e:	f002 fd0c 	bl	808678a <_ZN5Print7printlnEPKc>
 8083d72:	230f      	movs	r3, #15
 8083d74:	7423      	strb	r3, [r4, #16]
 8083d76:	bd70      	pop	{r4, r5, r6, pc}
 8083d78:	0808e7b8 	.word	0x0808e7b8

08083d7c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8083d7c:	b570      	push	{r4, r5, r6, lr}
 8083d7e:	4606      	mov	r6, r0
 8083d80:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8083d82:	b184      	cbz	r4, 8083da6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
 8083d84:	68e1      	ldr	r1, [r4, #12]
 8083d86:	4630      	mov	r0, r6
 8083d88:	f7ff fff8 	bl	8083d7c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8083d8c:	69e3      	ldr	r3, [r4, #28]
 8083d8e:	68a5      	ldr	r5, [r4, #8]
 8083d90:	b123      	cbz	r3, 8083d9c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8083d92:	f104 0114 	add.w	r1, r4, #20
 8083d96:	2203      	movs	r2, #3
 8083d98:	4608      	mov	r0, r1
 8083d9a:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8083d9c:	4620      	mov	r0, r4
 8083d9e:	f7fc f982 	bl	80800a6 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 8083da2:	462c      	mov	r4, r5
 8083da4:	e7ed      	b.n	8083d82 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
 8083da6:	bd70      	pop	{r4, r5, r6, pc}

08083da8 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
 8083da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083daa:	b08d      	sub	sp, #52	; 0x34
 8083dac:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 8083dae:	a801      	add	r0, sp, #4
 8083db0:	460d      	mov	r5, r1
 8083db2:	4617      	mov	r7, r2
 8083db4:	461e      	mov	r6, r3
 8083db6:	f001 fe35 	bl	8085a24 <spark_deviceID>
 8083dba:	9803      	ldr	r0, [sp, #12]
 8083dbc:	3001      	adds	r0, #1
 8083dbe:	f7fc f970 	bl	80800a2 <_Znaj>
 8083dc2:	9901      	ldr	r1, [sp, #4]
 8083dc4:	6020      	str	r0, [r4, #0]
 8083dc6:	f007 fadd 	bl	808b384 <strcpy>
 8083dca:	462a      	mov	r2, r5
 8083dcc:	4633      	mov	r3, r6
 8083dce:	4639      	mov	r1, r7
 8083dd0:	74e6      	strb	r6, [r4, #19]
 8083dd2:	a805      	add	r0, sp, #20
 8083dd4:	f000 fd68 	bl	80848a8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
 8083dd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8083ddc:	f001 fe42 	bl	8085a64 <malloc>
 8083de0:	60e0      	str	r0, [r4, #12]
 8083de2:	a805      	add	r0, sp, #20
 8083de4:	f000 fc70 	bl	80846c8 <_ZN10UbiBuilder7builderEv>
 8083de8:	2300      	movs	r3, #0
 8083dea:	6060      	str	r0, [r4, #4]
 8083dec:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
 8083dee:	9908      	ldr	r1, [sp, #32]
 8083df0:	a806      	add	r0, sp, #24
 8083df2:	60a5      	str	r5, [r4, #8]
 8083df4:	f7ff ffc2 	bl	8083d7c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 8083df8:	a801      	add	r0, sp, #4
 8083dfa:	f002 fbab 	bl	8086554 <_ZN6StringD1Ev>
 8083dfe:	b00d      	add	sp, #52	; 0x34
 8083e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083e02 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
 8083e02:	b538      	push	{r3, r4, r5, lr}
 8083e04:	4604      	mov	r4, r0
 8083e06:	2500      	movs	r5, #0
 8083e08:	7405      	strb	r5, [r0, #16]
 8083e0a:	7445      	strb	r5, [r0, #17]
 8083e0c:	f7ff ffcc 	bl	8083da8 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
 8083e10:	4620      	mov	r0, r4
 8083e12:	bd38      	pop	{r3, r4, r5, pc}

08083e14 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
 8083e14:	4b02      	ldr	r3, [pc, #8]	; (8083e20 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
 8083e16:	2200      	movs	r2, #0
 8083e18:	701a      	strb	r2, [r3, #0]
 8083e1a:	f001 bac5 	b.w	80853a8 <HAL_Pin_Map>
 8083e1e:	bf00      	nop
 8083e20:	20000800 	.word	0x20000800

08083e24 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:
 8083e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083e28:	4604      	mov	r4, r0
 8083e2a:	2078      	movs	r0, #120	; 0x78
 8083e2c:	7223      	strb	r3, [r4, #8]
 8083e2e:	461f      	mov	r7, r3
 8083e30:	460d      	mov	r5, r1
 8083e32:	4616      	mov	r6, r2
 8083e34:	f001 fe16 	bl	8085a64 <malloc>
 8083e38:	7a23      	ldrb	r3, [r4, #8]
 8083e3a:	6060      	str	r0, [r4, #4]
 8083e3c:	2b04      	cmp	r3, #4
 8083e3e:	f04f 0014 	mov.w	r0, #20
 8083e42:	d00c      	beq.n	8083e5e <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x3a>
 8083e44:	f7fc f92b 	bl	808009e <_Znwj>
 8083e48:	4680      	mov	r8, r0
 8083e4a:	b120      	cbz	r0, 8083e56 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x32>
 8083e4c:	463b      	mov	r3, r7
 8083e4e:	4632      	mov	r2, r6
 8083e50:	4629      	mov	r1, r5
 8083e52:	f7ff ffd6 	bl	8083e02 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 8083e56:	f8c4 8000 	str.w	r8, [r4]
 8083e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083e5e:	f7fc f91e 	bl	808009e <_Znwj>
 8083e62:	4607      	mov	r7, r0
 8083e64:	b120      	cbz	r0, 8083e70 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x4c>
 8083e66:	2301      	movs	r3, #1
 8083e68:	4632      	mov	r2, r6
 8083e6a:	4629      	mov	r1, r5
 8083e6c:	f7ff ffc9 	bl	8083e02 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 8083e70:	6027      	str	r7, [r4, #0]
 8083e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08083e78 <_ZN7UbidotsC1EPc11IotProtocol>:
 8083e78:	b510      	push	{r4, lr}
 8083e7a:	4604      	mov	r4, r0
 8083e7c:	2300      	movs	r3, #0
 8083e7e:	7243      	strb	r3, [r0, #9]
 8083e80:	7283      	strb	r3, [r0, #10]
 8083e82:	4613      	mov	r3, r2
 8083e84:	4a02      	ldr	r2, [pc, #8]	; (8083e90 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
 8083e86:	f7ff ffcd 	bl	8083e24 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
 8083e8a:	4620      	mov	r0, r4
 8083e8c:	bd10      	pop	{r4, pc}
 8083e8e:	bf00      	nop
 8083e90:	0808e8eb 	.word	0x0808e8eb

08083e94 <_ZN7UbidotsD1Ev>:
 8083e94:	b538      	push	{r3, r4, r5, lr}
 8083e96:	4604      	mov	r4, r0
 8083e98:	6840      	ldr	r0, [r0, #4]
 8083e9a:	f001 fdeb 	bl	8085a74 <free>
 8083e9e:	6825      	ldr	r5, [r4, #0]
 8083ea0:	b135      	cbz	r5, 8083eb0 <_ZN7UbidotsD1Ev+0x1c>
 8083ea2:	4628      	mov	r0, r5
 8083ea4:	f7ff ff24 	bl	8083cf0 <_ZN18UbiProtocolHandlerD1Ev>
 8083ea8:	2114      	movs	r1, #20
 8083eaa:	4628      	mov	r0, r5
 8083eac:	f005 fcbe 	bl	808982c <_ZdlPvj>
 8083eb0:	4620      	mov	r0, r4
 8083eb2:	bd38      	pop	{r3, r4, r5, pc}

08083eb4 <_ZN7Ubidots3addEPcfS0_mj>:
 8083eb4:	b570      	push	{r4, r5, r6, lr}
 8083eb6:	7a06      	ldrb	r6, [r0, #8]
 8083eb8:	2e04      	cmp	r6, #4
 8083eba:	d004      	beq.n	8083ec6 <_ZN7Ubidots3addEPcfS0_mj+0x12>
 8083ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083ec0:	6800      	ldr	r0, [r0, #0]
 8083ec2:	f7ff bf25 	b.w	8083d10 <_ZN18UbiProtocolHandler3addEPcfS0_mj>
 8083ec6:	f004 fcf5 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083ece:	4901      	ldr	r1, [pc, #4]	; (8083ed4 <_ZN7Ubidots3addEPcfS0_mj+0x20>)
 8083ed0:	f002 bc5b 	b.w	808678a <_ZN5Print7printlnEPKc>
 8083ed4:	0808e906 	.word	0x0808e906

08083ed8 <_ZN7Ubidots3addEPcf>:
 8083ed8:	b507      	push	{r0, r1, r2, lr}
 8083eda:	2300      	movs	r3, #0
 8083edc:	9301      	str	r3, [sp, #4]
 8083ede:	9300      	str	r3, [sp, #0]
 8083ee0:	f7ff ffe8 	bl	8083eb4 <_ZN7Ubidots3addEPcfS0_mj>
 8083ee4:	b003      	add	sp, #12
 8083ee6:	f85d fb04 	ldr.w	pc, [sp], #4

08083eea <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
 8083eea:	f001 ba5d 	b.w	80853a8 <HAL_Pin_Map>

08083eee <_ZN7UbiHTTP8setDebugEb>:
 8083eee:	7501      	strb	r1, [r0, #20]
 8083ef0:	4770      	bx	lr
	...

08083ef4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
 8083ef4:	b570      	push	{r4, r5, r6, lr}
 8083ef6:	4604      	mov	r4, r0
 8083ef8:	2014      	movs	r0, #20
 8083efa:	f001 fdb3 	bl	8085a64 <malloc>
 8083efe:	4606      	mov	r6, r0
 8083f00:	2014      	movs	r0, #20
 8083f02:	f001 fdaf 	bl	8085a64 <malloc>
 8083f06:	4605      	mov	r5, r0
 8083f08:	4620      	mov	r0, r4
 8083f0a:	f007 ff73 	bl	808bdf4 <strlen>
 8083f0e:	4622      	mov	r2, r4
 8083f10:	2300      	movs	r3, #0
 8083f12:	3802      	subs	r0, #2
 8083f14:	4298      	cmp	r0, r3
 8083f16:	dd17      	ble.n	8083f48 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
 8083f18:	f812 1b01 	ldrb.w	r1, [r2], #1
 8083f1c:	290d      	cmp	r1, #13
 8083f1e:	d111      	bne.n	8083f44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083f20:	7811      	ldrb	r1, [r2, #0]
 8083f22:	290a      	cmp	r1, #10
 8083f24:	d10e      	bne.n	8083f44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083f26:	7851      	ldrb	r1, [r2, #1]
 8083f28:	290d      	cmp	r1, #13
 8083f2a:	d10b      	bne.n	8083f44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083f2c:	7891      	ldrb	r1, [r2, #2]
 8083f2e:	290a      	cmp	r1, #10
 8083f30:	d108      	bne.n	8083f44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083f32:	1d19      	adds	r1, r3, #4
 8083f34:	2214      	movs	r2, #20
 8083f36:	4421      	add	r1, r4
 8083f38:	4630      	mov	r0, r6
 8083f3a:	f007 ff78 	bl	808be2e <strncpy>
 8083f3e:	2300      	movs	r3, #0
 8083f40:	7533      	strb	r3, [r6, #20]
 8083f42:	e001      	b.n	8083f48 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
 8083f44:	3301      	adds	r3, #1
 8083f46:	e7e5      	b.n	8083f14 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
 8083f48:	210a      	movs	r1, #10
 8083f4a:	4630      	mov	r0, r6
 8083f4c:	f007 f9f8 	bl	808b340 <strchr>
 8083f50:	4604      	mov	r4, r0
 8083f52:	b1e8      	cbz	r0, 8083f90 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
 8083f54:	210a      	movs	r1, #10
 8083f56:	3001      	adds	r0, #1
 8083f58:	f007 f9f2 	bl	808b340 <strchr>
 8083f5c:	b1c0      	cbz	r0, 8083f90 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
 8083f5e:	4621      	mov	r1, r4
 8083f60:	4628      	mov	r0, r5
 8083f62:	f007 fa0f 	bl	808b384 <strcpy>
 8083f66:	4628      	mov	r0, r5
 8083f68:	f007 ff44 	bl	808bdf4 <strlen>
 8083f6c:	2300      	movs	r3, #0
 8083f6e:	4428      	add	r0, r5
 8083f70:	f800 3c01 	strb.w	r3, [r0, #-1]
 8083f74:	4628      	mov	r0, r5
 8083f76:	f007 f86f 	bl	808b058 <atof>
 8083f7a:	f006 fb09 	bl	808a590 <__aeabi_d2f>
 8083f7e:	4604      	mov	r4, r0
 8083f80:	4628      	mov	r0, r5
 8083f82:	f001 fd77 	bl	8085a74 <free>
 8083f86:	4630      	mov	r0, r6
 8083f88:	f001 fd74 	bl	8085a74 <free>
 8083f8c:	4620      	mov	r0, r4
 8083f8e:	bd70      	pop	{r4, r5, r6, pc}
 8083f90:	4800      	ldr	r0, [pc, #0]	; (8083f94 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa0>)
 8083f92:	bd70      	pop	{r4, r5, r6, pc}
 8083f94:	cda2425f 	.word	0xcda2425f

08083f98 <_ZN7UbiHTTPC1EPKciS1_S1_>:
 8083f98:	b530      	push	{r4, r5, lr}
 8083f9a:	4d07      	ldr	r5, [pc, #28]	; (8083fb8 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
 8083f9c:	6083      	str	r3, [r0, #8]
 8083f9e:	6005      	str	r5, [r0, #0]
 8083fa0:	2500      	movs	r5, #0
 8083fa2:	7505      	strb	r5, [r0, #20]
 8083fa4:	f241 3588 	movw	r5, #5000	; 0x1388
 8083fa8:	9b03      	ldr	r3, [sp, #12]
 8083faa:	6185      	str	r5, [r0, #24]
 8083fac:	2505      	movs	r5, #5
 8083fae:	7705      	strb	r5, [r0, #28]
 8083fb0:	6041      	str	r1, [r0, #4]
 8083fb2:	60c3      	str	r3, [r0, #12]
 8083fb4:	6102      	str	r2, [r0, #16]
 8083fb6:	bd30      	pop	{r4, r5, pc}
 8083fb8:	0808eb30 	.word	0x0808eb30

08083fbc <_ZN7UbiHTTP9reconnectEPKci>:
 8083fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8083fc0:	4605      	mov	r5, r0
 8083fc2:	460f      	mov	r7, r1
 8083fc4:	4690      	mov	r8, r2
 8083fc6:	2400      	movs	r4, #0
 8083fc8:	481d      	ldr	r0, [pc, #116]	; (8084040 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 8083fca:	b2e6      	uxtb	r6, r4
 8083fcc:	f002 f9ef 	bl	80863ae <_ZN9TCPClient9connectedEv>
 8083fd0:	bb98      	cbnz	r0, 808403a <_ZN7UbiHTTP9reconnectEPKci+0x7e>
 8083fd2:	7f2b      	ldrb	r3, [r5, #28]
 8083fd4:	42b3      	cmp	r3, r6
 8083fd6:	d801      	bhi.n	8083fdc <_ZN7UbiHTTP9reconnectEPKci+0x20>
 8083fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083fdc:	7d2b      	ldrb	r3, [r5, #20]
 8083fde:	b1c3      	cbz	r3, 8084012 <_ZN7UbiHTTP9reconnectEPKci+0x56>
 8083fe0:	f004 fc68 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083fe4:	4917      	ldr	r1, [pc, #92]	; (8084044 <_ZN7UbiHTTP9reconnectEPKci+0x88>)
 8083fe6:	f002 fbb9 	bl	808675c <_ZN5Print5printEPKc>
 8083fea:	f004 fc63 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083fee:	4639      	mov	r1, r7
 8083ff0:	f002 fbb4 	bl	808675c <_ZN5Print5printEPKc>
 8083ff4:	f004 fc5e 	bl	80888b4 <_Z16_fetch_usbserialv>
 8083ff8:	4913      	ldr	r1, [pc, #76]	; (8084048 <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
 8083ffa:	f002 fbaf 	bl	808675c <_ZN5Print5printEPKc>
 8083ffe:	f004 fc59 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084002:	4681      	mov	r9, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8084004:	220a      	movs	r2, #10
 8084006:	4631      	mov	r1, r6
 8084008:	f002 fbc9 	bl	808679e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 808400c:	4648      	mov	r0, r9
 808400e:	f002 fbb0 	bl	8086772 <_ZN5Print7printlnEv>
 8084012:	2300      	movs	r3, #0
 8084014:	fa1f f288 	uxth.w	r2, r8
 8084018:	4639      	mov	r1, r7
 808401a:	4809      	ldr	r0, [pc, #36]	; (8084040 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 808401c:	f002 fa58 	bl	80864d0 <_ZN9TCPClient7connectEPKctm>
 8084020:	7d2b      	ldrb	r3, [r5, #20]
 8084022:	b123      	cbz	r3, 808402e <_ZN7UbiHTTP9reconnectEPKci+0x72>
 8084024:	f004 fc46 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084028:	4908      	ldr	r1, [pc, #32]	; (808404c <_ZN7UbiHTTP9reconnectEPKci+0x90>)
 808402a:	f002 fbae 	bl	808678a <_ZN5Print7printlnEPKc>
 808402e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8084032:	f003 fd37 	bl	8087aa4 <delay>
 8084036:	3401      	adds	r4, #1
 8084038:	e7c6      	b.n	8083fc8 <_ZN7UbiHTTP9reconnectEPKci+0xc>
 808403a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808403e:	bf00      	nop
 8084040:	20000804 	.word	0x20000804
 8084044:	0808e6b8 	.word	0x0808e6b8
 8084048:	0808e6ce 	.word	0x0808e6ce
 808404c:	0808eb3c 	.word	0x0808eb3c

08084050 <_ZN7UbiHTTP16readServerAnswerEPc>:
 8084050:	b570      	push	{r4, r5, r6, lr}
 8084052:	1e4d      	subs	r5, r1, #1
 8084054:	4606      	mov	r6, r0
 8084056:	462b      	mov	r3, r5
 8084058:	460c      	mov	r4, r1
 808405a:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
 808405e:	2100      	movs	r1, #0
 8084060:	f803 1f01 	strb.w	r1, [r3, #1]!
 8084064:	4293      	cmp	r3, r2
 8084066:	d1fb      	bne.n	8084060 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
 8084068:	7d33      	ldrb	r3, [r6, #20]
 808406a:	b14b      	cbz	r3, 8084080 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
 808406c:	f004 fc22 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084070:	4913      	ldr	r1, [pc, #76]	; (80840c0 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
 8084072:	f002 fb8a 	bl	808678a <_ZN5Print7printlnEPKc>
 8084076:	f004 fc1d 	bl	80888b4 <_Z16_fetch_usbserialv>
 808407a:	4912      	ldr	r1, [pc, #72]	; (80840c4 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
 808407c:	f002 fb85 	bl	808678a <_ZN5Print7printlnEPKc>
 8084080:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
 8084084:	4810      	ldr	r0, [pc, #64]	; (80840c8 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 8084086:	f002 f89d 	bl	80861c4 <_ZN9TCPClient9availableEv>
 808408a:	b940      	cbnz	r0, 808409e <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
 808408c:	7d33      	ldrb	r3, [r6, #20]
 808408e:	b1b3      	cbz	r3, 80840be <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
 8084090:	f004 fc10 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084098:	490c      	ldr	r1, [pc, #48]	; (80840cc <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
 808409a:	f002 bb76 	b.w	808678a <_ZN5Print7printlnEPKc>
 808409e:	480a      	ldr	r0, [pc, #40]	; (80840c8 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 80840a0:	f002 f845 	bl	808612e <_ZN9TCPClient4readEv>
 80840a4:	f805 0f01 	strb.w	r0, [r5, #1]!
 80840a8:	7d33      	ldrb	r3, [r6, #20]
 80840aa:	b12b      	cbz	r3, 80840b8 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
 80840ac:	f004 fc02 	bl	80888b4 <_Z16_fetch_usbserialv>
 80840b0:	6803      	ldr	r3, [r0, #0]
 80840b2:	7829      	ldrb	r1, [r5, #0]
 80840b4:	689b      	ldr	r3, [r3, #8]
 80840b6:	4798      	blx	r3
 80840b8:	42a5      	cmp	r5, r4
 80840ba:	d1e3      	bne.n	8084084 <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
 80840bc:	e7e6      	b.n	808408c <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
 80840be:	bd70      	pop	{r4, r5, r6, pc}
 80840c0:	0808e729 	.word	0x0808e729
 80840c4:	0808e715 	.word	0x0808e715
 80840c8:	20000804 	.word	0x20000804
 80840cc:	0808e728 	.word	0x0808e728

080840d0 <_ZN7UbiHTTP16waitServerAnswerEv>:
 80840d0:	b570      	push	{r4, r5, r6, lr}
 80840d2:	4605      	mov	r5, r0
 80840d4:	2400      	movs	r4, #0
 80840d6:	480d      	ldr	r0, [pc, #52]	; (808410c <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
 80840d8:	f002 f874 	bl	80861c4 <_ZN9TCPClient9availableEv>
 80840dc:	4606      	mov	r6, r0
 80840de:	b910      	cbnz	r0, 80840e6 <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
 80840e0:	69ab      	ldr	r3, [r5, #24]
 80840e2:	429c      	cmp	r4, r3
 80840e4:	db01      	blt.n	80840ea <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
 80840e6:	2001      	movs	r0, #1
 80840e8:	bd70      	pop	{r4, r5, r6, pc}
 80840ea:	2001      	movs	r0, #1
 80840ec:	f003 fcda 	bl	8087aa4 <delay>
 80840f0:	69ab      	ldr	r3, [r5, #24]
 80840f2:	3401      	adds	r4, #1
 80840f4:	429c      	cmp	r4, r3
 80840f6:	dbee      	blt.n	80840d6 <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
 80840f8:	7d28      	ldrb	r0, [r5, #20]
 80840fa:	b130      	cbz	r0, 808410a <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
 80840fc:	f004 fbda 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084100:	4903      	ldr	r1, [pc, #12]	; (8084110 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
 8084102:	f002 fb42 	bl	808678a <_ZN5Print7printlnEPKc>
 8084106:	4630      	mov	r0, r6
 8084108:	bd70      	pop	{r4, r5, r6, pc}
 808410a:	bd70      	pop	{r4, r5, r6, pc}
 808410c:	20000804 	.word	0x20000804
 8084110:	0808e6e2 	.word	0x0808e6e2

08084114 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
 8084114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084116:	460f      	mov	r7, r1
 8084118:	6902      	ldr	r2, [r0, #16]
 808411a:	6841      	ldr	r1, [r0, #4]
 808411c:	4604      	mov	r4, r0
 808411e:	461e      	mov	r6, r3
 8084120:	f7ff ff4c 	bl	8083fbc <_ZN7UbiHTTP9reconnectEPKci>
 8084124:	4880      	ldr	r0, [pc, #512]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084126:	f002 f942 	bl	80863ae <_ZN9TCPClient9connectedEv>
 808412a:	4605      	mov	r5, r0
 808412c:	2800      	cmp	r0, #0
 808412e:	f000 80ec 	beq.w	808430a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
 8084132:	497e      	ldr	r1, [pc, #504]	; (808432c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8084134:	487c      	ldr	r0, [pc, #496]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084136:	f002 fb11 	bl	808675c <_ZN5Print5printEPKc>
 808413a:	4639      	mov	r1, r7
 808413c:	487a      	ldr	r0, [pc, #488]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808413e:	f002 fb0d 	bl	808675c <_ZN5Print5printEPKc>
 8084142:	497b      	ldr	r1, [pc, #492]	; (8084330 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8084144:	4878      	ldr	r0, [pc, #480]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084146:	f002 fb09 	bl	808675c <_ZN5Print5printEPKc>
 808414a:	497a      	ldr	r1, [pc, #488]	; (8084334 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 808414c:	4876      	ldr	r0, [pc, #472]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808414e:	f002 fb05 	bl	808675c <_ZN5Print5printEPKc>
 8084152:	6861      	ldr	r1, [r4, #4]
 8084154:	4874      	ldr	r0, [pc, #464]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084156:	f002 fb01 	bl	808675c <_ZN5Print5printEPKc>
 808415a:	4977      	ldr	r1, [pc, #476]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808415c:	4872      	ldr	r0, [pc, #456]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808415e:	f002 fafd 	bl	808675c <_ZN5Print5printEPKc>
 8084162:	4976      	ldr	r1, [pc, #472]	; (808433c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 8084164:	4870      	ldr	r0, [pc, #448]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084166:	f002 faf9 	bl	808675c <_ZN5Print5printEPKc>
 808416a:	68a1      	ldr	r1, [r4, #8]
 808416c:	486e      	ldr	r0, [pc, #440]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808416e:	f002 faf5 	bl	808675c <_ZN5Print5printEPKc>
 8084172:	4971      	ldr	r1, [pc, #452]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084174:	486c      	ldr	r0, [pc, #432]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084176:	f002 faf1 	bl	808675c <_ZN5Print5printEPKc>
 808417a:	4971      	ldr	r1, [pc, #452]	; (8084340 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 808417c:	486a      	ldr	r0, [pc, #424]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808417e:	f002 faed 	bl	808675c <_ZN5Print5printEPKc>
 8084182:	68e1      	ldr	r1, [r4, #12]
 8084184:	4868      	ldr	r0, [pc, #416]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084186:	f002 fae9 	bl	808675c <_ZN5Print5printEPKc>
 808418a:	496b      	ldr	r1, [pc, #428]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808418c:	4866      	ldr	r0, [pc, #408]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808418e:	f002 fae5 	bl	808675c <_ZN5Print5printEPKc>
 8084192:	496c      	ldr	r1, [pc, #432]	; (8084344 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 8084194:	4864      	ldr	r0, [pc, #400]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084196:	f002 fae1 	bl	808675c <_ZN5Print5printEPKc>
 808419a:	496b      	ldr	r1, [pc, #428]	; (8084348 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 808419c:	4862      	ldr	r0, [pc, #392]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808419e:	f002 fadd 	bl	808675c <_ZN5Print5printEPKc>
 80841a2:	4630      	mov	r0, r6
 80841a4:	f007 fe26 	bl	808bdf4 <strlen>
 80841a8:	4605      	mov	r5, r0
 80841aa:	4968      	ldr	r1, [pc, #416]	; (808434c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 80841ac:	485e      	ldr	r0, [pc, #376]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841ae:	f002 fad5 	bl	808675c <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80841b2:	2d00      	cmp	r5, #0
 80841b4:	da05      	bge.n	80841c2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
 80841b6:	212d      	movs	r1, #45	; 0x2d
 80841b8:	485b      	ldr	r0, [pc, #364]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841ba:	f002 fad3 	bl	8086764 <_ZN5Print5printEc>
            val = -n;
 80841be:	4269      	negs	r1, r5
 80841c0:	e000      	b.n	80841c4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80841c2:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80841c4:	220a      	movs	r2, #10
 80841c6:	4858      	ldr	r0, [pc, #352]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841c8:	f002 fae9 	bl	808679e <_ZN5Print11printNumberEmh>
 80841cc:	4960      	ldr	r1, [pc, #384]	; (8084350 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80841ce:	4856      	ldr	r0, [pc, #344]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841d0:	f002 fac4 	bl	808675c <_ZN5Print5printEPKc>
 80841d4:	4631      	mov	r1, r6
 80841d6:	4854      	ldr	r0, [pc, #336]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841d8:	f002 fac0 	bl	808675c <_ZN5Print5printEPKc>
 80841dc:	4956      	ldr	r1, [pc, #344]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80841de:	4852      	ldr	r0, [pc, #328]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841e0:	f002 fabc 	bl	808675c <_ZN5Print5printEPKc>
 80841e4:	4850      	ldr	r0, [pc, #320]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841e6:	f001 ff64 	bl	80860b2 <_ZN9TCPClient5flushEv>
 80841ea:	7d23      	ldrb	r3, [r4, #20]
 80841ec:	2b00      	cmp	r3, #0
 80841ee:	d071      	beq.n	80842d4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
 80841f0:	f004 fb60 	bl	80888b4 <_Z16_fetch_usbserialv>
 80841f4:	4957      	ldr	r1, [pc, #348]	; (8084354 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
 80841f6:	f002 fac8 	bl	808678a <_ZN5Print7printlnEPKc>
 80841fa:	f004 fb5b 	bl	80888b4 <_Z16_fetch_usbserialv>
 80841fe:	494b      	ldr	r1, [pc, #300]	; (808432c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8084200:	f002 faac 	bl	808675c <_ZN5Print5printEPKc>
 8084204:	f004 fb56 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084208:	4639      	mov	r1, r7
 808420a:	f002 faa7 	bl	808675c <_ZN5Print5printEPKc>
 808420e:	f004 fb51 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084212:	4947      	ldr	r1, [pc, #284]	; (8084330 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8084214:	f002 faa2 	bl	808675c <_ZN5Print5printEPKc>
 8084218:	f004 fb4c 	bl	80888b4 <_Z16_fetch_usbserialv>
 808421c:	4945      	ldr	r1, [pc, #276]	; (8084334 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 808421e:	f002 fa9d 	bl	808675c <_ZN5Print5printEPKc>
 8084222:	f004 fb47 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084226:	6861      	ldr	r1, [r4, #4]
 8084228:	f002 fa98 	bl	808675c <_ZN5Print5printEPKc>
 808422c:	f004 fb42 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084230:	4941      	ldr	r1, [pc, #260]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084232:	f002 fa93 	bl	808675c <_ZN5Print5printEPKc>
 8084236:	f004 fb3d 	bl	80888b4 <_Z16_fetch_usbserialv>
 808423a:	4940      	ldr	r1, [pc, #256]	; (808433c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 808423c:	f002 fa8e 	bl	808675c <_ZN5Print5printEPKc>
 8084240:	f004 fb38 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084244:	68a1      	ldr	r1, [r4, #8]
 8084246:	f002 fa89 	bl	808675c <_ZN5Print5printEPKc>
 808424a:	f004 fb33 	bl	80888b4 <_Z16_fetch_usbserialv>
 808424e:	493a      	ldr	r1, [pc, #232]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084250:	f002 fa84 	bl	808675c <_ZN5Print5printEPKc>
 8084254:	f004 fb2e 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084258:	4939      	ldr	r1, [pc, #228]	; (8084340 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 808425a:	f002 fa7f 	bl	808675c <_ZN5Print5printEPKc>
 808425e:	f004 fb29 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084262:	68e1      	ldr	r1, [r4, #12]
 8084264:	f002 fa7a 	bl	808675c <_ZN5Print5printEPKc>
 8084268:	f004 fb24 	bl	80888b4 <_Z16_fetch_usbserialv>
 808426c:	4932      	ldr	r1, [pc, #200]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808426e:	f002 fa75 	bl	808675c <_ZN5Print5printEPKc>
 8084272:	f004 fb1f 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084276:	4933      	ldr	r1, [pc, #204]	; (8084344 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 8084278:	f002 fa70 	bl	808675c <_ZN5Print5printEPKc>
 808427c:	f004 fb1a 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084280:	4931      	ldr	r1, [pc, #196]	; (8084348 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 8084282:	f002 fa6b 	bl	808675c <_ZN5Print5printEPKc>
 8084286:	f004 fb15 	bl	80888b4 <_Z16_fetch_usbserialv>
 808428a:	4930      	ldr	r1, [pc, #192]	; (808434c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 808428c:	f002 fa66 	bl	808675c <_ZN5Print5printEPKc>
 8084290:	f004 fb10 	bl	80888b4 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8084294:	2d00      	cmp	r5, #0
 8084296:	4607      	mov	r7, r0
 8084298:	da03      	bge.n	80842a2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
 808429a:	212d      	movs	r1, #45	; 0x2d
 808429c:	f002 fa62 	bl	8086764 <_ZN5Print5printEc>
            val = -n;
 80842a0:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80842a2:	220a      	movs	r2, #10
 80842a4:	4629      	mov	r1, r5
 80842a6:	4638      	mov	r0, r7
 80842a8:	f002 fa79 	bl	808679e <_ZN5Print11printNumberEmh>
 80842ac:	f004 fb02 	bl	80888b4 <_Z16_fetch_usbserialv>
 80842b0:	4927      	ldr	r1, [pc, #156]	; (8084350 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80842b2:	f002 fa53 	bl	808675c <_ZN5Print5printEPKc>
 80842b6:	f004 fafd 	bl	80888b4 <_Z16_fetch_usbserialv>
 80842ba:	4631      	mov	r1, r6
 80842bc:	f002 fa4e 	bl	808675c <_ZN5Print5printEPKc>
 80842c0:	f004 faf8 	bl	80888b4 <_Z16_fetch_usbserialv>
 80842c4:	491c      	ldr	r1, [pc, #112]	; (8084338 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80842c6:	f002 fa49 	bl	808675c <_ZN5Print5printEPKc>
 80842ca:	f004 faf3 	bl	80888b4 <_Z16_fetch_usbserialv>
 80842ce:	4922      	ldr	r1, [pc, #136]	; (8084358 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
 80842d0:	f002 fa5b 	bl	808678a <_ZN5Print7printlnEPKc>
 80842d4:	4620      	mov	r0, r4
 80842d6:	f7ff fefb 	bl	80840d0 <_ZN7UbiHTTP16waitServerAnswerEv>
 80842da:	7d23      	ldrb	r3, [r4, #20]
 80842dc:	b90b      	cbnz	r3, 80842e2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
 80842de:	2401      	movs	r4, #1
 80842e0:	e01d      	b.n	808431e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
 80842e2:	f004 fae7 	bl	80888b4 <_Z16_fetch_usbserialv>
 80842e6:	491d      	ldr	r1, [pc, #116]	; (808435c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
 80842e8:	f002 fa4f 	bl	808678a <_ZN5Print7printlnEPKc>
 80842ec:	480e      	ldr	r0, [pc, #56]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80842ee:	f001 ff69 	bl	80861c4 <_ZN9TCPClient9availableEv>
 80842f2:	2800      	cmp	r0, #0
 80842f4:	d0f3      	beq.n	80842de <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
 80842f6:	480c      	ldr	r0, [pc, #48]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80842f8:	f001 ff19 	bl	808612e <_ZN9TCPClient4readEv>
 80842fc:	4604      	mov	r4, r0
 80842fe:	f004 fad9 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084302:	b2e1      	uxtb	r1, r4
 8084304:	f002 fa2e 	bl	8086764 <_ZN5Print5printEc>
 8084308:	e7f0      	b.n	80842ec <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
 808430a:	7d23      	ldrb	r3, [r4, #20]
 808430c:	b133      	cbz	r3, 808431c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
 808430e:	f004 fad1 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084312:	4913      	ldr	r1, [pc, #76]	; (8084360 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
 8084314:	f002 fa39 	bl	808678a <_ZN5Print7printlnEPKc>
 8084318:	462c      	mov	r4, r5
 808431a:	e000      	b.n	808431e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
 808431c:	461c      	mov	r4, r3
 808431e:	4802      	ldr	r0, [pc, #8]	; (8084328 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084320:	f001 ff8c 	bl	808623c <_ZN9TCPClient4stopEv>
 8084324:	4620      	mov	r0, r4
 8084326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084328:	20000804 	.word	0x20000804
 808432c:	0808eb4d 	.word	0x0808eb4d
 8084330:	0808eb65 	.word	0x0808eb65
 8084334:	0808eb71 	.word	0x0808eb71
 8084338:	0808ec95 	.word	0x0808ec95
 808433c:	0808eb78 	.word	0x0808eb78
 8084340:	0808eb85 	.word	0x0808eb85
 8084344:	0808eb94 	.word	0x0808eb94
 8084348:	0808eba8 	.word	0x0808eba8
 808434c:	0808ebc9 	.word	0x0808ebc9
 8084350:	0808ec93 	.word	0x0808ec93
 8084354:	0808ebda 	.word	0x0808ebda
 8084358:	0808ebf6 	.word	0x0808ebf6
 808435c:	0808ec14 	.word	0x0808ec14
 8084360:	0808ec30 	.word	0x0808ec30

08084364 <_ZN7UbiHTTP3getEPKcS1_>:
 8084364:	b570      	push	{r4, r5, r6, lr}
 8084366:	4604      	mov	r4, r0
 8084368:	2300      	movs	r3, #0
 808436a:	460e      	mov	r6, r1
 808436c:	4615      	mov	r5, r2
 808436e:	6841      	ldr	r1, [r0, #4]
 8084370:	2250      	movs	r2, #80	; 0x50
 8084372:	4865      	ldr	r0, [pc, #404]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084374:	f002 f8ac 	bl	80864d0 <_ZN9TCPClient7connectEPKctm>
 8084378:	4620      	mov	r0, r4
 808437a:	2250      	movs	r2, #80	; 0x50
 808437c:	6861      	ldr	r1, [r4, #4]
 808437e:	f7ff fe1d 	bl	8083fbc <_ZN7UbiHTTP9reconnectEPKci>
 8084382:	4861      	ldr	r0, [pc, #388]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084384:	f002 f813 	bl	80863ae <_ZN9TCPClient9connectedEv>
 8084388:	2800      	cmp	r0, #0
 808438a:	f000 80b2 	beq.w	80844f2 <_ZN7UbiHTTP3getEPKcS1_+0x18e>
 808438e:	495f      	ldr	r1, [pc, #380]	; (808450c <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 8084390:	485d      	ldr	r0, [pc, #372]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084392:	f002 f9e3 	bl	808675c <_ZN5Print5printEPKc>
 8084396:	4631      	mov	r1, r6
 8084398:	485b      	ldr	r0, [pc, #364]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808439a:	f002 f9df 	bl	808675c <_ZN5Print5printEPKc>
 808439e:	495c      	ldr	r1, [pc, #368]	; (8084510 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 80843a0:	4859      	ldr	r0, [pc, #356]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843a2:	f002 f9db 	bl	808675c <_ZN5Print5printEPKc>
 80843a6:	4629      	mov	r1, r5
 80843a8:	4857      	ldr	r0, [pc, #348]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843aa:	f002 f9d7 	bl	808675c <_ZN5Print5printEPKc>
 80843ae:	4959      	ldr	r1, [pc, #356]	; (8084514 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 80843b0:	4855      	ldr	r0, [pc, #340]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843b2:	f002 f9d3 	bl	808675c <_ZN5Print5printEPKc>
 80843b6:	4958      	ldr	r1, [pc, #352]	; (8084518 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 80843b8:	4853      	ldr	r0, [pc, #332]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843ba:	f002 f9cf 	bl	808675c <_ZN5Print5printEPKc>
 80843be:	4957      	ldr	r1, [pc, #348]	; (808451c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 80843c0:	4851      	ldr	r0, [pc, #324]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843c2:	f002 f9cb 	bl	808675c <_ZN5Print5printEPKc>
 80843c6:	220a      	movs	r2, #10
 80843c8:	2150      	movs	r1, #80	; 0x50
 80843ca:	484f      	ldr	r0, [pc, #316]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843cc:	f002 f9e7 	bl	808679e <_ZN5Print11printNumberEmh>
 80843d0:	4953      	ldr	r1, [pc, #332]	; (8084520 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80843d2:	484d      	ldr	r0, [pc, #308]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843d4:	f002 f9c2 	bl	808675c <_ZN5Print5printEPKc>
 80843d8:	4952      	ldr	r1, [pc, #328]	; (8084524 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 80843da:	484b      	ldr	r0, [pc, #300]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843dc:	f002 f9be 	bl	808675c <_ZN5Print5printEPKc>
 80843e0:	68a1      	ldr	r1, [r4, #8]
 80843e2:	4849      	ldr	r0, [pc, #292]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843e4:	f002 f9ba 	bl	808675c <_ZN5Print5printEPKc>
 80843e8:	494d      	ldr	r1, [pc, #308]	; (8084520 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80843ea:	4847      	ldr	r0, [pc, #284]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843ec:	f002 f9b6 	bl	808675c <_ZN5Print5printEPKc>
 80843f0:	494d      	ldr	r1, [pc, #308]	; (8084528 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 80843f2:	4845      	ldr	r0, [pc, #276]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843f4:	f002 f9b2 	bl	808675c <_ZN5Print5printEPKc>
 80843f8:	68e1      	ldr	r1, [r4, #12]
 80843fa:	4843      	ldr	r0, [pc, #268]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843fc:	f002 f9ae 	bl	808675c <_ZN5Print5printEPKc>
 8084400:	4947      	ldr	r1, [pc, #284]	; (8084520 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084402:	4841      	ldr	r0, [pc, #260]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084404:	f002 f9aa 	bl	808675c <_ZN5Print5printEPKc>
 8084408:	4948      	ldr	r1, [pc, #288]	; (808452c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 808440a:	483f      	ldr	r0, [pc, #252]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808440c:	f002 f9a6 	bl	808675c <_ZN5Print5printEPKc>
 8084410:	7d23      	ldrb	r3, [r4, #20]
 8084412:	2b00      	cmp	r3, #0
 8084414:	d050      	beq.n	80844b8 <_ZN7UbiHTTP3getEPKcS1_+0x154>
 8084416:	f004 fa4d 	bl	80888b4 <_Z16_fetch_usbserialv>
 808441a:	493c      	ldr	r1, [pc, #240]	; (808450c <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 808441c:	f002 f99e 	bl	808675c <_ZN5Print5printEPKc>
 8084420:	f004 fa48 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084424:	4631      	mov	r1, r6
 8084426:	f002 f999 	bl	808675c <_ZN5Print5printEPKc>
 808442a:	f004 fa43 	bl	80888b4 <_Z16_fetch_usbserialv>
 808442e:	4938      	ldr	r1, [pc, #224]	; (8084510 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8084430:	f002 f994 	bl	808675c <_ZN5Print5printEPKc>
 8084434:	f004 fa3e 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084438:	4629      	mov	r1, r5
 808443a:	f002 f98f 	bl	808675c <_ZN5Print5printEPKc>
 808443e:	f004 fa39 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084442:	4934      	ldr	r1, [pc, #208]	; (8084514 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 8084444:	f002 f98a 	bl	808675c <_ZN5Print5printEPKc>
 8084448:	f004 fa34 	bl	80888b4 <_Z16_fetch_usbserialv>
 808444c:	4932      	ldr	r1, [pc, #200]	; (8084518 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 808444e:	f002 f985 	bl	808675c <_ZN5Print5printEPKc>
 8084452:	f004 fa2f 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084456:	4931      	ldr	r1, [pc, #196]	; (808451c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8084458:	f002 f980 	bl	808675c <_ZN5Print5printEPKc>
 808445c:	f004 fa2a 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084460:	220a      	movs	r2, #10
 8084462:	2150      	movs	r1, #80	; 0x50
 8084464:	f002 f99b 	bl	808679e <_ZN5Print11printNumberEmh>
 8084468:	f004 fa24 	bl	80888b4 <_Z16_fetch_usbserialv>
 808446c:	492c      	ldr	r1, [pc, #176]	; (8084520 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 808446e:	f002 f975 	bl	808675c <_ZN5Print5printEPKc>
 8084472:	f004 fa1f 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084476:	492b      	ldr	r1, [pc, #172]	; (8084524 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 8084478:	f002 f970 	bl	808675c <_ZN5Print5printEPKc>
 808447c:	f004 fa1a 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084480:	68a1      	ldr	r1, [r4, #8]
 8084482:	f002 f96b 	bl	808675c <_ZN5Print5printEPKc>
 8084486:	f004 fa15 	bl	80888b4 <_Z16_fetch_usbserialv>
 808448a:	4925      	ldr	r1, [pc, #148]	; (8084520 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 808448c:	f002 f966 	bl	808675c <_ZN5Print5printEPKc>
 8084490:	f004 fa10 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084494:	4924      	ldr	r1, [pc, #144]	; (8084528 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 8084496:	f002 f961 	bl	808675c <_ZN5Print5printEPKc>
 808449a:	f004 fa0b 	bl	80888b4 <_Z16_fetch_usbserialv>
 808449e:	68e1      	ldr	r1, [r4, #12]
 80844a0:	f002 f95c 	bl	808675c <_ZN5Print5printEPKc>
 80844a4:	f004 fa06 	bl	80888b4 <_Z16_fetch_usbserialv>
 80844a8:	491d      	ldr	r1, [pc, #116]	; (8084520 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80844aa:	f002 f957 	bl	808675c <_ZN5Print5printEPKc>
 80844ae:	f004 fa01 	bl	80888b4 <_Z16_fetch_usbserialv>
 80844b2:	491e      	ldr	r1, [pc, #120]	; (808452c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 80844b4:	f002 f952 	bl	808675c <_ZN5Print5printEPKc>
 80844b8:	4620      	mov	r0, r4
 80844ba:	f7ff fe09 	bl	80840d0 <_ZN7UbiHTTP16waitServerAnswerEv>
 80844be:	b920      	cbnz	r0, 80844ca <_ZN7UbiHTTP3getEPKcS1_+0x166>
 80844c0:	4811      	ldr	r0, [pc, #68]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80844c2:	f001 febb 	bl	808623c <_ZN9TCPClient4stopEv>
 80844c6:	4c1a      	ldr	r4, [pc, #104]	; (8084530 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
 80844c8:	e01c      	b.n	8084504 <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
 80844ca:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80844ce:	f001 fac9 	bl	8085a64 <malloc>
 80844d2:	4605      	mov	r5, r0
 80844d4:	4601      	mov	r1, r0
 80844d6:	4620      	mov	r0, r4
 80844d8:	f7ff fdba 	bl	8084050 <_ZN7UbiHTTP16readServerAnswerEPc>
 80844dc:	4628      	mov	r0, r5
 80844de:	f7ff fd09 	bl	8083ef4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>
 80844e2:	4604      	mov	r4, r0
 80844e4:	4808      	ldr	r0, [pc, #32]	; (8084508 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80844e6:	f001 fea9 	bl	808623c <_ZN9TCPClient4stopEv>
 80844ea:	4628      	mov	r0, r5
 80844ec:	f001 fac2 	bl	8085a74 <free>
 80844f0:	e008      	b.n	8084504 <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
 80844f2:	7d23      	ldrb	r3, [r4, #20]
 80844f4:	2b00      	cmp	r3, #0
 80844f6:	d0e3      	beq.n	80844c0 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
 80844f8:	f004 f9dc 	bl	80888b4 <_Z16_fetch_usbserialv>
 80844fc:	490d      	ldr	r1, [pc, #52]	; (8084534 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
 80844fe:	f002 f944 	bl	808678a <_ZN5Print7printlnEPKc>
 8084502:	e7dd      	b.n	80844c0 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
 8084504:	4620      	mov	r0, r4
 8084506:	bd70      	pop	{r4, r5, r6, pc}
 8084508:	20000804 	.word	0x20000804
 808450c:	0808ec5a 	.word	0x0808ec5a
 8084510:	0808ec6f 	.word	0x0808ec6f
 8084514:	0808ec71 	.word	0x0808ec71
 8084518:	0808eb65 	.word	0x0808eb65
 808451c:	0808eb71 	.word	0x0808eb71
 8084520:	0808ec95 	.word	0x0808ec95
 8084524:	0808eb78 	.word	0x0808eb78
 8084528:	0808eb85 	.word	0x0808eb85
 808452c:	0808ec75 	.word	0x0808ec75
 8084530:	cda2425f 	.word	0xcda2425f
 8084534:	0808ec98 	.word	0x0808ec98

08084538 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
 8084538:	b510      	push	{r4, lr}
 808453a:	4c06      	ldr	r4, [pc, #24]	; (8084554 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
 808453c:	f000 ff34 	bl	80853a8 <HAL_Pin_Map>
 8084540:	4620      	mov	r0, r4
 8084542:	f001 ffa3 	bl	808648c <_ZN9TCPClientC1Ev>
 8084546:	4620      	mov	r0, r4
 8084548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808454c:	4a02      	ldr	r2, [pc, #8]	; (8084558 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
 808454e:	4903      	ldr	r1, [pc, #12]	; (808455c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
 8084550:	f005 b95e 	b.w	8089810 <__aeabi_atexit>
 8084554:	20000804 	.word	0x20000804
 8084558:	20000144 	.word	0x20000144
 808455c:	080838ed 	.word	0x080838ed

08084560 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
 8084560:	6803      	ldr	r3, [r0, #0]
 8084562:	4718      	bx	r3

08084564 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8084564:	2a01      	cmp	r2, #1
 8084566:	d002      	beq.n	808456e <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 8084568:	2a02      	cmp	r2, #2
 808456a:	d002      	beq.n	8084572 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
 808456c:	e004      	b.n	8084578 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808456e:	6001      	str	r1, [r0, #0]
	      break;
 8084570:	e002      	b.n	8084578 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8084572:	680b      	ldr	r3, [r1, #0]
 8084574:	b100      	cbz	r0, 8084578 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
 8084576:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8084578:	2000      	movs	r0, #0
 808457a:	4770      	bx	lr

0808457c <_Z10builderTcpv>:
 808457c:	b513      	push	{r0, r1, r4, lr}
 808457e:	201c      	movs	r0, #28
 8084580:	f7fb fd8d 	bl	808009e <_Znwj>
 8084584:	4604      	mov	r4, r0
 8084586:	b148      	cbz	r0, 808459c <_Z10builderTcpv+0x20>
 8084588:	4b06      	ldr	r3, [pc, #24]	; (80845a4 <_Z10builderTcpv+0x28>)
 808458a:	4907      	ldr	r1, [pc, #28]	; (80845a8 <_Z10builderTcpv+0x2c>)
 808458c:	681b      	ldr	r3, [r3, #0]
 808458e:	f242 3234 	movw	r2, #9012	; 0x2334
 8084592:	9300      	str	r3, [sp, #0]
 8084594:	6809      	ldr	r1, [r1, #0]
 8084596:	4b05      	ldr	r3, [pc, #20]	; (80845ac <_Z10builderTcpv+0x30>)
 8084598:	f7ff f9cc 	bl	8083934 <_ZN6UbiTCPC1EPKciS1_S1_>
 808459c:	4620      	mov	r0, r4
 808459e:	b002      	add	sp, #8
 80845a0:	bd10      	pop	{r4, pc}
 80845a2:	bf00      	nop
 80845a4:	20000858 	.word	0x20000858
 80845a8:	2000085c 	.word	0x2000085c
 80845ac:	0808e89a 	.word	0x0808e89a

080845b0 <_Z11builderHttpv>:
 80845b0:	b513      	push	{r0, r1, r4, lr}
 80845b2:	2020      	movs	r0, #32
 80845b4:	f7fb fd73 	bl	808009e <_Znwj>
 80845b8:	4604      	mov	r4, r0
 80845ba:	b140      	cbz	r0, 80845ce <_Z11builderHttpv+0x1e>
 80845bc:	4b05      	ldr	r3, [pc, #20]	; (80845d4 <_Z11builderHttpv+0x24>)
 80845be:	4906      	ldr	r1, [pc, #24]	; (80845d8 <_Z11builderHttpv+0x28>)
 80845c0:	681b      	ldr	r3, [r3, #0]
 80845c2:	2250      	movs	r2, #80	; 0x50
 80845c4:	9300      	str	r3, [sp, #0]
 80845c6:	6809      	ldr	r1, [r1, #0]
 80845c8:	4b04      	ldr	r3, [pc, #16]	; (80845dc <_Z11builderHttpv+0x2c>)
 80845ca:	f7ff fce5 	bl	8083f98 <_ZN7UbiHTTPC1EPKciS1_S1_>
 80845ce:	4620      	mov	r0, r4
 80845d0:	b002      	add	sp, #8
 80845d2:	bd10      	pop	{r4, pc}
 80845d4:	20000858 	.word	0x20000858
 80845d8:	2000085c 	.word	0x2000085c
 80845dc:	0808e89a 	.word	0x0808e89a

080845e0 <_Z10builderUdpv>:
 80845e0:	b513      	push	{r0, r1, r4, lr}
 80845e2:	201c      	movs	r0, #28
 80845e4:	f7fb fd5b 	bl	808009e <_Znwj>
 80845e8:	4604      	mov	r4, r0
 80845ea:	b148      	cbz	r0, 8084600 <_Z10builderUdpv+0x20>
 80845ec:	4b06      	ldr	r3, [pc, #24]	; (8084608 <_Z10builderUdpv+0x28>)
 80845ee:	4907      	ldr	r1, [pc, #28]	; (808460c <_Z10builderUdpv+0x2c>)
 80845f0:	681b      	ldr	r3, [r3, #0]
 80845f2:	f242 3234 	movw	r2, #9012	; 0x2334
 80845f6:	9300      	str	r3, [sp, #0]
 80845f8:	6809      	ldr	r1, [r1, #0]
 80845fa:	4b05      	ldr	r3, [pc, #20]	; (8084610 <_Z10builderUdpv+0x30>)
 80845fc:	f000 f9e2 	bl	80849c4 <_ZN6UbiUDPC1EPKciS1_S1_>
 8084600:	4620      	mov	r0, r4
 8084602:	b002      	add	sp, #8
 8084604:	bd10      	pop	{r4, pc}
 8084606:	bf00      	nop
 8084608:	20000858 	.word	0x20000858
 808460c:	2000085c 	.word	0x2000085c
 8084610:	0808e89a 	.word	0x0808e89a

08084614 <_Z15builderParticlev>:
 8084614:	b513      	push	{r0, r1, r4, lr}
 8084616:	2014      	movs	r0, #20
 8084618:	f7fb fd41 	bl	808009e <_Znwj>
 808461c:	4604      	mov	r4, r0
 808461e:	b140      	cbz	r0, 8084632 <_Z15builderParticlev+0x1e>
 8084620:	4b05      	ldr	r3, [pc, #20]	; (8084638 <_Z15builderParticlev+0x24>)
 8084622:	4906      	ldr	r1, [pc, #24]	; (808463c <_Z15builderParticlev+0x28>)
 8084624:	681b      	ldr	r3, [r3, #0]
 8084626:	9300      	str	r3, [sp, #0]
 8084628:	2300      	movs	r3, #0
 808462a:	461a      	mov	r2, r3
 808462c:	6809      	ldr	r1, [r1, #0]
 808462e:	f000 fa71 	bl	8084b14 <_ZN11UbiParticleC1EPKciS1_S1_>
 8084632:	4620      	mov	r0, r4
 8084634:	b002      	add	sp, #8
 8084636:	bd10      	pop	{r4, pc}
 8084638:	20000858 	.word	0x20000858
 808463c:	2000085c 	.word	0x2000085c

08084640 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 8084640:	b510      	push	{r4, lr}
 8084642:	4604      	mov	r4, r0
 8084644:	4b05      	ldr	r3, [pc, #20]	; (808465c <_ZN3UDPD1Ev+0x1c>)
 8084646:	6003      	str	r3, [r0, #0]
 8084648:	3364      	adds	r3, #100	; 0x64
 808464a:	6103      	str	r3, [r0, #16]
 808464c:	f003 fad2 	bl	8087bf4 <_ZN3UDP4stopEv>
 8084650:	4620      	mov	r0, r4
 8084652:	f003 fbb3 	bl	8087dbc <_ZN3UDP13releaseBufferEv>
 8084656:	4620      	mov	r0, r4
 8084658:	bd10      	pop	{r4, pc}
 808465a:	bf00      	nop
 808465c:	0808efa0 	.word	0x0808efa0

08084660 <_ZN3UDPD0Ev>:
 8084660:	b510      	push	{r4, lr}
 8084662:	4604      	mov	r4, r0
 8084664:	f7ff ffec 	bl	8084640 <_ZN3UDPD1Ev>
 8084668:	4620      	mov	r0, r4
 808466a:	213c      	movs	r1, #60	; 0x3c
 808466c:	f005 f8de 	bl	808982c <_ZdlPvj>
 8084670:	4620      	mov	r0, r4
 8084672:	bd10      	pop	{r4, pc}

08084674 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8084674:	b510      	push	{r4, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084676:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8084678:	b086      	sub	sp, #24
 808467a:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808467c:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 808467e:	b121      	cbz	r1, 808468a <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084680:	4b0f      	ldr	r3, [pc, #60]	; (80846c0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084682:	9102      	str	r1, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084684:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8084686:	4b0f      	ldr	r3, [pc, #60]	; (80846c4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
 8084688:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808468a:	ab02      	add	r3, sp, #8
 808468c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8084690:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8084694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8084698:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808469c:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80846a0:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80846a2:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80846a6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80846a8:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80846aa:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80846ac:	9104      	str	r1, [sp, #16]
 80846ae:	68e1      	ldr	r1, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80846b0:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 80846b2:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80846b4:	9105      	str	r1, [sp, #20]
 80846b6:	f7fb fddb 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 80846ba:	4620      	mov	r0, r4
 80846bc:	b006      	add	sp, #24
 80846be:	bd10      	pop	{r4, pc}
 80846c0:	08084561 	.word	0x08084561
 80846c4:	08084565 	.word	0x08084565

080846c8 <_ZN10UbiBuilder7builderEv>:
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 80846c8:	f100 0108 	add.w	r1, r0, #8
 80846cc:	460b      	mov	r3, r1
 80846ce:	b570      	push	{r4, r5, r6, lr}
 80846d0:	68c2      	ldr	r2, [r0, #12]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 80846d2:	b14a      	cbz	r2, 80846e8 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80846d4:	7804      	ldrb	r4, [r0, #0]
 80846d6:	7c15      	ldrb	r5, [r2, #16]
 80846d8:	42a5      	cmp	r5, r4
 80846da:	bf3a      	itte	cc
 80846dc:	68d4      	ldrcc	r4, [r2, #12]
 80846de:	461a      	movcc	r2, r3
 80846e0:	6894      	ldrcs	r4, [r2, #8]
 80846e2:	4613      	mov	r3, r2
 80846e4:	4622      	mov	r2, r4
 80846e6:	e7f4      	b.n	80846d2 <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80846e8:	4299      	cmp	r1, r3
 80846ea:	d004      	beq.n	80846f6 <_ZN10UbiBuilder7builderEv+0x2e>
 80846ec:	7800      	ldrb	r0, [r0, #0]
 80846ee:	7c1a      	ldrb	r2, [r3, #16]
 80846f0:	4290      	cmp	r0, r2
 80846f2:	bf38      	it	cc
 80846f4:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80846f6:	69da      	ldr	r2, [r3, #28]
 80846f8:	b90a      	cbnz	r2, 80846fe <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
 80846fa:	f005 f963 	bl	80899c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80846fe:	6a1a      	ldr	r2, [r3, #32]
 8084700:	f103 0014 	add.w	r0, r3, #20
 8084704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084708:	4710      	bx	r2

0808470a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 808470a:	b570      	push	{r4, r5, r6, lr}
 808470c:	4604      	mov	r4, r0
 808470e:	688b      	ldr	r3, [r1, #8]
 8084710:	4616      	mov	r6, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084712:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
 8084714:	2201      	movs	r2, #1
      while (__x != 0)
 8084716:	b153      	cbz	r3, 808472e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x24>
 8084718:	7830      	ldrb	r0, [r6, #0]
 808471a:	7c1a      	ldrb	r2, [r3, #16]
 808471c:	461d      	mov	r5, r3
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 808471e:	4290      	cmp	r0, r2
 8084720:	bf35      	itete	cc
 8084722:	6898      	ldrcc	r0, [r3, #8]
 8084724:	68d8      	ldrcs	r0, [r3, #12]
 8084726:	2201      	movcc	r2, #1
 8084728:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 808472a:	4603      	mov	r3, r0
 808472c:	e7f3      	b.n	8084716 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
 808472e:	b132      	cbz	r2, 808473e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
	{
	  if (__j == begin())
 8084730:	68ca      	ldr	r2, [r1, #12]
 8084732:	4295      	cmp	r5, r2
 8084734:	d00a      	beq.n	808474c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x42>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 8084736:	4628      	mov	r0, r5
 8084738:	f005 f8df 	bl	80898fa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 808473c:	e000      	b.n	8084740 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
 808473e:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8084740:	7833      	ldrb	r3, [r6, #0]
 8084742:	7c02      	ldrb	r2, [r0, #16]
 8084744:	429a      	cmp	r2, r3
 8084746:	f04f 0300 	mov.w	r3, #0
 808474a:	d202      	bcs.n	8084752 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x48>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 808474c:	e884 0028 	stmia.w	r4, {r3, r5}
 8084750:	e001      	b.n	8084756 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4c>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
 8084752:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 8084756:	4620      	mov	r0, r4
 8084758:	bd70      	pop	{r4, r5, r6, pc}

0808475a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 808475a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808475e:	461f      	mov	r7, r3
 8084760:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8084762:	2024      	movs	r0, #36	; 0x24
 8084764:	460c      	mov	r4, r1
 8084766:	f7fb fc9a 	bl	808009e <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 808476a:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 808476c:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8084770:	bf18      	it	ne
 8084772:	781b      	ldrbne	r3, [r3, #0]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084774:	f106 0704 	add.w	r7, r6, #4
 8084778:	bf1e      	ittt	ne
 808477a:	7403      	strbne	r3, [r0, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808477c:	2300      	movne	r3, #0
 808477e:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
 8084780:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8084782:	4605      	mov	r5, r0
 8084784:	d108      	bne.n	8084798 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
 8084786:	6973      	ldr	r3, [r6, #20]
 8084788:	2b00      	cmp	r3, #0
 808478a:	d05c      	beq.n	8084846 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 808478c:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
 808478e:	7c03      	ldrb	r3, [r0, #16]
 8084790:	7c0a      	ldrb	r2, [r1, #16]
 8084792:	429a      	cmp	r2, r3
 8084794:	d33a      	bcc.n	808480c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
 8084796:	e056      	b.n	8084846 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
 8084798:	f890 9010 	ldrb.w	r9, [r0, #16]
 808479c:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 808479e:	4599      	cmp	r9, r3
 80847a0:	d217      	bcs.n	80847d2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
 80847a2:	68f3      	ldr	r3, [r6, #12]
 80847a4:	4620      	mov	r0, r4
 80847a6:	42a3      	cmp	r3, r4
 80847a8:	d011      	beq.n	80847ce <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 80847aa:	f005 f8a6 	bl	80898fa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80847ae:	7c03      	ldrb	r3, [r0, #16]
 80847b0:	454b      	cmp	r3, r9
 80847b2:	d205      	bcs.n	80847c0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
 80847b4:	68c3      	ldr	r3, [r0, #12]
 80847b6:	2b00      	cmp	r3, #0
 80847b8:	bf14      	ite	ne
 80847ba:	4620      	movne	r0, r4
 80847bc:	2400      	moveq	r4, #0
 80847be:	e006      	b.n	80847ce <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 80847c0:	4668      	mov	r0, sp
 80847c2:	4642      	mov	r2, r8
 80847c4:	4631      	mov	r1, r6
 80847c6:	f7ff ffa0 	bl	808470a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 80847ca:	9c00      	ldr	r4, [sp, #0]
 80847cc:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 80847ce:	4601      	mov	r1, r0
 80847d0:	e01a      	b.n	8084808 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80847d2:	d92f      	bls.n	8084834 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
 80847d4:	6933      	ldr	r3, [r6, #16]
 80847d6:	42a3      	cmp	r3, r4
 80847d8:	d013      	beq.n	8084802 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
 80847da:	4620      	mov	r0, r4
 80847dc:	f005 f87a 	bl	80898d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80847e0:	7c03      	ldrb	r3, [r0, #16]
 80847e2:	454b      	cmp	r3, r9
 80847e4:	d905      	bls.n	80847f2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
 80847e6:	68e3      	ldr	r3, [r4, #12]
 80847e8:	2b00      	cmp	r3, #0
 80847ea:	bf14      	ite	ne
 80847ec:	4604      	movne	r4, r0
 80847ee:	2000      	moveq	r0, #0
 80847f0:	e008      	b.n	8084804 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 80847f2:	4668      	mov	r0, sp
 80847f4:	4642      	mov	r2, r8
 80847f6:	4631      	mov	r1, r6
 80847f8:	f7ff ff87 	bl	808470a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 80847fc:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8084800:	e000      	b.n	8084804 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
 8084802:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 8084804:	4621      	mov	r1, r4
 8084806:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
 8084808:	b1a1      	cbz	r1, 8084834 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
 808480a:	b944      	cbnz	r4, 808481e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 808480c:	428f      	cmp	r7, r1
 808480e:	d006      	beq.n	808481e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 8084810:	7c08      	ldrb	r0, [r1, #16]
 8084812:	7c2b      	ldrb	r3, [r5, #16]
 8084814:	4283      	cmp	r3, r0
 8084816:	bf2c      	ite	cs
 8084818:	2000      	movcs	r0, #0
 808481a:	2001      	movcc	r0, #1
 808481c:	e000      	b.n	8084820 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
 808481e:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8084820:	463b      	mov	r3, r7
 8084822:	460a      	mov	r2, r1
 8084824:	4629      	mov	r1, r5
 8084826:	f005 f86a 	bl	80898fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 808482a:	6973      	ldr	r3, [r6, #20]
 808482c:	4628      	mov	r0, r5
 808482e:	3301      	adds	r3, #1
 8084830:	6173      	str	r3, [r6, #20]
 8084832:	e010      	b.n	8084856 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084834:	f105 0014 	add.w	r0, r5, #20
 8084838:	f7fb fd1a 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 808483c:	4628      	mov	r0, r5
 808483e:	f7fb fc32 	bl	80800a6 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
 8084842:	4620      	mov	r0, r4
 8084844:	e007      	b.n	8084856 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
 8084846:	4631      	mov	r1, r6
 8084848:	4642      	mov	r2, r8
 808484a:	4668      	mov	r0, sp
 808484c:	f7ff ff5d 	bl	808470a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8084850:	9c00      	ldr	r4, [sp, #0]
 8084852:	9901      	ldr	r1, [sp, #4]
 8084854:	e7d8      	b.n	8084808 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8084856:	b003      	add	sp, #12
 8084858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808485c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 808485c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 808485e:	1d04      	adds	r4, r0, #4
 8084860:	460a      	mov	r2, r1
 8084862:	4621      	mov	r1, r4
 8084864:	6883      	ldr	r3, [r0, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8084866:	b14b      	cbz	r3, 808487c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8084868:	7815      	ldrb	r5, [r2, #0]
 808486a:	7c1e      	ldrb	r6, [r3, #16]
 808486c:	42ae      	cmp	r6, r5
 808486e:	bf3a      	itte	cc
 8084870:	68dd      	ldrcc	r5, [r3, #12]
 8084872:	460b      	movcc	r3, r1
 8084874:	689d      	ldrcs	r5, [r3, #8]
 8084876:	4619      	mov	r1, r3
 8084878:	462b      	mov	r3, r5
 808487a:	e7f4      	b.n	8084866 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 808487c:	428c      	cmp	r4, r1
 808487e:	d003      	beq.n	8084888 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
 8084880:	7814      	ldrb	r4, [r2, #0]
 8084882:	7c0b      	ldrb	r3, [r1, #16]
 8084884:	429c      	cmp	r4, r3
 8084886:	d208      	bcs.n	808489a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8084888:	ab04      	add	r3, sp, #16
 808488a:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 808488e:	aa02      	add	r2, sp, #8
 8084890:	9200      	str	r2, [sp, #0]
 8084892:	4a04      	ldr	r2, [pc, #16]	; (80848a4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
 8084894:	f7ff ff61 	bl	808475a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8084898:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
 808489a:	f101 0014 	add.w	r0, r1, #20
      }
 808489e:	b004      	add	sp, #16
 80848a0:	bd70      	pop	{r4, r5, r6, pc}
 80848a2:	bf00      	nop
 80848a4:	0808ecbe 	.word	0x0808ecbe

080848a8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
 80848a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80848ac:	4604      	mov	r4, r0
 80848ae:	461d      	mov	r5, r3
 80848b0:	4689      	mov	r9, r1
 80848b2:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 80848b4:	2100      	movs	r1, #0
 80848b6:	2210      	movs	r2, #16
 80848b8:	3008      	adds	r0, #8
 80848ba:	f006 fd10 	bl	808b2de <memset>
 80848be:	2301      	movs	r3, #1
 80848c0:	7025      	strb	r5, [r4, #0]
 80848c2:	ad02      	add	r5, sp, #8
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 80848c4:	f104 0208 	add.w	r2, r4, #8
 80848c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80848cc:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 80848ce:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 80848d0:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
 80848d2:	6162      	str	r2, [r4, #20]
 80848d4:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 80848d6:	61a7      	str	r7, [r4, #24]
 80848d8:	4630      	mov	r0, r6
 80848da:	f7ff ffbf 	bl	808485c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 80848de:	4915      	ldr	r1, [pc, #84]	; (8084934 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
 80848e0:	f7ff fec8 	bl	8084674 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
 80848e4:	4629      	mov	r1, r5
 80848e6:	4630      	mov	r0, r6
 80848e8:	f88d 7007 	strb.w	r7, [sp, #7]
 80848ec:	f7ff ffb6 	bl	808485c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 80848f0:	4911      	ldr	r1, [pc, #68]	; (8084938 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
 80848f2:	f7ff febf 	bl	8084674 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
 80848f6:	2302      	movs	r3, #2
 80848f8:	4629      	mov	r1, r5
 80848fa:	4630      	mov	r0, r6
 80848fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8084900:	f7ff ffac 	bl	808485c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8084904:	490d      	ldr	r1, [pc, #52]	; (808493c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
 8084906:	f7ff feb5 	bl	8084674 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
 808490a:	2303      	movs	r3, #3
 808490c:	4629      	mov	r1, r5
 808490e:	4630      	mov	r0, r6
 8084910:	f88d 3007 	strb.w	r3, [sp, #7]
 8084914:	f7ff ffa2 	bl	808485c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8084918:	4909      	ldr	r1, [pc, #36]	; (8084940 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
 808491a:	f7ff feab 	bl	8084674 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
 808491e:	4620      	mov	r0, r4
 8084920:	4b08      	ldr	r3, [pc, #32]	; (8084944 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
 8084922:	f8c3 9000 	str.w	r9, [r3]
 8084926:	4b08      	ldr	r3, [pc, #32]	; (8084948 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
 8084928:	f8c3 8000 	str.w	r8, [r3]
 808492c:	b003      	add	sp, #12
 808492e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8084932:	bf00      	nop
 8084934:	0808457d 	.word	0x0808457d
 8084938:	080845b1 	.word	0x080845b1
 808493c:	080845e1 	.word	0x080845e1
 8084940:	08084615 	.word	0x08084615
 8084944:	2000085c 	.word	0x2000085c
 8084948:	20000858 	.word	0x20000858

0808494c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
 808494c:	b570      	push	{r4, r5, r6, lr}
 808494e:	4d10      	ldr	r5, [pc, #64]	; (8084990 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
 8084950:	f000 fd2a 	bl	80853a8 <HAL_Pin_Map>
 8084954:	4c0f      	ldr	r4, [pc, #60]	; (8084994 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
 8084956:	4e10      	ldr	r6, [pc, #64]	; (8084998 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
 8084958:	4628      	mov	r0, r5
 808495a:	f001 fd97 	bl	808648c <_ZN9TCPClientC1Ev>
 808495e:	4628      	mov	r0, r5
 8084960:	4d0e      	ldr	r5, [pc, #56]	; (808499c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
 8084962:	4622      	mov	r2, r4
 8084964:	4631      	mov	r1, r6
 8084966:	f004 ff53 	bl	8089810 <__aeabi_atexit>
 808496a:	4628      	mov	r0, r5
 808496c:	f001 fd8e 	bl	808648c <_ZN9TCPClientC1Ev>
 8084970:	4628      	mov	r0, r5
 8084972:	4d0b      	ldr	r5, [pc, #44]	; (80849a0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
 8084974:	4622      	mov	r2, r4
 8084976:	4631      	mov	r1, r6
 8084978:	f004 ff4a 	bl	8089810 <__aeabi_atexit>
 808497c:	4628      	mov	r0, r5
 808497e:	f003 f9ff 	bl	8087d80 <_ZN3UDPC1Ev>
 8084982:	4622      	mov	r2, r4
 8084984:	4628      	mov	r0, r5
 8084986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808498a:	4906      	ldr	r1, [pc, #24]	; (80849a4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
 808498c:	f004 bf40 	b.w	8089810 <__aeabi_atexit>
 8084990:	2000083c 	.word	0x2000083c
 8084994:	20000144 	.word	0x20000144
 8084998:	080838ed 	.word	0x080838ed
 808499c:	20000820 	.word	0x20000820
 80849a0:	20000860 	.word	0x20000860
 80849a4:	08084641 	.word	0x08084641

080849a8 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:
 80849a8:	b508      	push	{r3, lr}
 80849aa:	f000 fcfd 	bl	80853a8 <HAL_Pin_Map>
 80849ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80849b2:	f000 bda1 	b.w	80854f8 <HAL_Timer_Get_Milli_Seconds>
	...

080849b8 <_ZN6UbiUDP3getEPKcS1_>:
 80849b8:	4800      	ldr	r0, [pc, #0]	; (80849bc <_ZN6UbiUDP3getEPKcS1_+0x4>)
 80849ba:	4770      	bx	lr
 80849bc:	cda2425f 	.word	0xcda2425f

080849c0 <_ZN6UbiUDP8setDebugEb>:
 80849c0:	7501      	strb	r1, [r0, #20]
 80849c2:	4770      	bx	lr

080849c4 <_ZN6UbiUDPC1EPKciS1_S1_>:
 80849c4:	b530      	push	{r4, r5, lr}
 80849c6:	4d06      	ldr	r5, [pc, #24]	; (80849e0 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
 80849c8:	6083      	str	r3, [r0, #8]
 80849ca:	6005      	str	r5, [r0, #0]
 80849cc:	2500      	movs	r5, #0
 80849ce:	7505      	strb	r5, [r0, #20]
 80849d0:	f241 3588 	movw	r5, #5000	; 0x1388
 80849d4:	9b03      	ldr	r3, [sp, #12]
 80849d6:	6185      	str	r5, [r0, #24]
 80849d8:	6041      	str	r1, [r0, #4]
 80849da:	60c3      	str	r3, [r0, #12]
 80849dc:	6102      	str	r2, [r0, #16]
 80849de:	bd30      	pop	{r4, r5, pc}
 80849e0:	0808ed74 	.word	0x0808ed74

080849e4 <_ZN6UbiUDP11getServerIpEv>:
 80849e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80849e6:	684f      	ldr	r7, [r1, #4]
 80849e8:	b085      	sub	sp, #20
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80849ea:	2600      	movs	r6, #0
 80849ec:	ac04      	add	r4, sp, #16
 80849ee:	4605      	mov	r5, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80849f0:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80849f2:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80849f6:	f007 f9fd 	bl	808bdf4 <strlen>
 80849fa:	4b0a      	ldr	r3, [pc, #40]	; (8084a24 <_ZN6UbiUDP11getServerIpEv+0x40>)
 80849fc:	9600      	str	r6, [sp, #0]
 80849fe:	b281      	uxth	r1, r0
 8084a00:	685b      	ldr	r3, [r3, #4]
 8084a02:	4622      	mov	r2, r4
 8084a04:	4638      	mov	r0, r7
 8084a06:	f000 fedf 	bl	80857c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8084a0a:	b120      	cbz	r0, 8084a16 <_ZN6UbiUDP11getServerIpEv+0x32>
 8084a0c:	4631      	mov	r1, r6
 8084a0e:	4628      	mov	r0, r5
 8084a10:	f003 feae 	bl	8088770 <_ZN9IPAddressC1Em>
 8084a14:	e003      	b.n	8084a1e <_ZN6UbiUDP11getServerIpEv+0x3a>
 8084a16:	4621      	mov	r1, r4
 8084a18:	4628      	mov	r0, r5
 8084a1a:	f003 fea1 	bl	8088760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8084a1e:	4628      	mov	r0, r5
 8084a20:	b005      	add	sp, #20
 8084a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084a24:	20000d84 	.word	0x20000d84

08084a28 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
 8084a28:	b530      	push	{r4, r5, lr}
 8084a2a:	b087      	sub	sp, #28
 8084a2c:	4601      	mov	r1, r0
 8084a2e:	4604      	mov	r4, r0
 8084a30:	a802      	add	r0, sp, #8
 8084a32:	461d      	mov	r5, r3
 8084a34:	f7ff ffd6 	bl	80849e4 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 8084a38:	a802      	add	r0, sp, #8
 8084a3a:	f003 fe9f 	bl	808877c <_ZNK9IPAddresscvbEv>
 8084a3e:	b980      	cbnz	r0, 8084a62 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
 8084a40:	7d23      	ldrb	r3, [r4, #20]
 8084a42:	b123      	cbz	r3, 8084a4e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
 8084a44:	f003 ff36 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084a48:	4921      	ldr	r1, [pc, #132]	; (8084ad0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa8>)
 8084a4a:	f001 fe9e 	bl	808678a <_ZN5Print7printlnEPKc>
 8084a4e:	23f3      	movs	r3, #243	; 0xf3
 8084a50:	9300      	str	r3, [sp, #0]
 8084a52:	2237      	movs	r2, #55	; 0x37
 8084a54:	233d      	movs	r3, #61	; 0x3d
 8084a56:	21a9      	movs	r1, #169	; 0xa9
 8084a58:	a804      	add	r0, sp, #16
 8084a5a:	f003 fe9f 	bl	808879c <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8084a5e:	9b05      	ldr	r3, [sp, #20]
 8084a60:	9303      	str	r3, [sp, #12]
 8084a62:	2200      	movs	r2, #0
 8084a64:	f240 21bd 	movw	r1, #701	; 0x2bd
 8084a68:	481a      	ldr	r0, [pc, #104]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084a6a:	f003 f9b9 	bl	8087de0 <_ZN3UDP9setBufferEjPh>
 8084a6e:	2200      	movs	r2, #0
 8084a70:	f242 3134 	movw	r1, #9012	; 0x2334
 8084a74:	4817      	ldr	r0, [pc, #92]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084a76:	f003 f895 	bl	8087ba4 <_ZN3UDP5beginEtm>
 8084a7a:	4b17      	ldr	r3, [pc, #92]	; (8084ad8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb0>)
 8084a7c:	f242 3234 	movw	r2, #9012	; 0x2334
 8084a80:	9304      	str	r3, [sp, #16]
 8084a82:	9b03      	ldr	r3, [sp, #12]
 8084a84:	a904      	add	r1, sp, #16
 8084a86:	4813      	ldr	r0, [pc, #76]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084a88:	9305      	str	r3, [sp, #20]
 8084a8a:	f003 f9c3 	bl	8087e14 <_ZN3UDP11beginPacketE9IPAddresst>
 8084a8e:	b168      	cbz	r0, 8084aac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8084a90:	b165      	cbz	r5, 8084aac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
      return write((const uint8_t *)str, strlen(str));
 8084a92:	4628      	mov	r0, r5
 8084a94:	f007 f9ae 	bl	808bdf4 <strlen>
 8084a98:	4629      	mov	r1, r5
 8084a9a:	4602      	mov	r2, r0
 8084a9c:	480d      	ldr	r0, [pc, #52]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084a9e:	f003 f8dc 	bl	8087c5a <_ZN3UDP5writeEPKhj>
 8084aa2:	b118      	cbz	r0, 8084aac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
 8084aa4:	480b      	ldr	r0, [pc, #44]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084aa6:	f003 f82b 	bl	8087b00 <_ZN3UDP9endPacketEv>
 8084aaa:	b958      	cbnz	r0, 8084ac4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
 8084aac:	7d23      	ldrb	r3, [r4, #20]
 8084aae:	b123      	cbz	r3, 8084aba <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x92>
 8084ab0:	f003 ff00 	bl	80888b4 <_Z16_fetch_usbserialv>
 8084ab4:	4909      	ldr	r1, [pc, #36]	; (8084adc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 8084ab6:	f001 fe68 	bl	808678a <_ZN5Print7printlnEPKc>
 8084aba:	4806      	ldr	r0, [pc, #24]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084abc:	f003 f89a 	bl	8087bf4 <_ZN3UDP4stopEv>
 8084ac0:	2000      	movs	r0, #0
 8084ac2:	e003      	b.n	8084acc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa4>
 8084ac4:	4803      	ldr	r0, [pc, #12]	; (8084ad4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084ac6:	f003 f895 	bl	8087bf4 <_ZN3UDP4stopEv>
 8084aca:	2001      	movs	r0, #1
 8084acc:	b007      	add	sp, #28
 8084ace:	bd30      	pop	{r4, r5, pc}
 8084ad0:	0808ecbf 	.word	0x0808ecbf
 8084ad4:	2000089c 	.word	0x2000089c
 8084ad8:	0808f02c 	.word	0x0808f02c
 8084adc:	0808ed4b 	.word	0x0808ed4b

08084ae0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
 8084ae0:	b510      	push	{r4, lr}
 8084ae2:	4c06      	ldr	r4, [pc, #24]	; (8084afc <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
 8084ae4:	f000 fc60 	bl	80853a8 <HAL_Pin_Map>
 8084ae8:	4620      	mov	r0, r4
 8084aea:	f003 f949 	bl	8087d80 <_ZN3UDPC1Ev>
 8084aee:	4620      	mov	r0, r4
 8084af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084af4:	4a02      	ldr	r2, [pc, #8]	; (8084b00 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
 8084af6:	4903      	ldr	r1, [pc, #12]	; (8084b04 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
 8084af8:	f004 be8a 	b.w	8089810 <__aeabi_atexit>
 8084afc:	2000089c 	.word	0x2000089c
 8084b00:	20000144 	.word	0x20000144
 8084b04:	08084641 	.word	0x08084641

08084b08 <_ZN11UbiParticle3getEPKcS1_>:
 8084b08:	4800      	ldr	r0, [pc, #0]	; (8084b0c <_ZN11UbiParticle3getEPKcS1_+0x4>)
 8084b0a:	4770      	bx	lr
 8084b0c:	cda2425f 	.word	0xcda2425f

08084b10 <_ZN11UbiParticle8setDebugEb>:
 8084b10:	7401      	strb	r1, [r0, #16]
 8084b12:	4770      	bx	lr

08084b14 <_ZN11UbiParticleC1EPKciS1_S1_>:
 8084b14:	b510      	push	{r4, lr}
 8084b16:	4c04      	ldr	r4, [pc, #16]	; (8084b28 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
 8084b18:	6083      	str	r3, [r0, #8]
 8084b1a:	9b02      	ldr	r3, [sp, #8]
 8084b1c:	6004      	str	r4, [r0, #0]
 8084b1e:	2400      	movs	r4, #0
 8084b20:	7404      	strb	r4, [r0, #16]
 8084b22:	6041      	str	r1, [r0, #4]
 8084b24:	60c3      	str	r3, [r0, #12]
 8084b26:	bd10      	pop	{r4, pc}
 8084b28:	0808ed88 	.word	0x0808ed88

08084b2c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8084b2c:	b570      	push	{r4, r5, r6, lr}
 8084b2e:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8084b30:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8084b32:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8084b34:	f000 fed8 	bl	80858e8 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 8084b38:	b908      	cbnz	r0, 8084b3e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
 8084b3a:	2000      	movs	r0, #0
 8084b3c:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
 8084b3e:	2c00      	cmp	r4, #0
 8084b40:	dd03      	ble.n	8084b4a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
 8084b42:	f000 fcd9 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8084b46:	4605      	mov	r5, r0
 8084b48:	e000      	b.n	8084b4c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 8084b4a:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8084b4c:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8084b4e:	b93b      	cbnz	r3, 8084b60 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
 8084b50:	2c00      	cmp	r4, #0
 8084b52:	dd07      	ble.n	8084b64 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8084b54:	f000 fcd0 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
 8084b58:	1b40      	subs	r0, r0, r5
 8084b5a:	42a0      	cmp	r0, r4
 8084b5c:	d302      	bcc.n	8084b64 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8084b5e:	e7ec      	b.n	8084b3a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
 8084b60:	2001      	movs	r0, #1
 8084b62:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 8084b64:	f000 ff4e 	bl	8085a04 <spark_process>
 8084b68:	e7f0      	b.n	8084b4c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

08084b6a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
 8084b6a:	b530      	push	{r4, r5, lr}
 8084b6c:	b085      	sub	sp, #20
 8084b6e:	461a      	mov	r2, r3
 8084b70:	9b08      	ldr	r3, [sp, #32]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8084b72:	a802      	add	r0, sp, #8
 8084b74:	781b      	ldrb	r3, [r3, #0]
 8084b76:	f88d 3000 	strb.w	r3, [sp]
 8084b7a:	233c      	movs	r3, #60	; 0x3c
 8084b7c:	f003 fc44 	bl	8088408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8084b80:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
 8084b82:	2100      	movs	r1, #0
 8084b84:	4620      	mov	r0, r4
 8084b86:	f7ff ffd1 	bl	8084b2c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
 8084b8a:	7863      	ldrb	r3, [r4, #1]
 8084b8c:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
 8084b90:	b133      	cbz	r3, 8084ba0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
 8084b92:	2100      	movs	r1, #0
 8084b94:	4620      	mov	r0, r4
 8084b96:	f7ff ffc9 	bl	8084b2c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8084b9a:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
 8084b9c:	2b01      	cmp	r3, #1
 8084b9e:	d013      	beq.n	8084bc8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
 8084ba0:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8084ba2:	9c03      	ldr	r4, [sp, #12]
 8084ba4:	b194      	cbz	r4, 8084bcc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8084ba6:	6863      	ldr	r3, [r4, #4]
 8084ba8:	3b01      	subs	r3, #1
 8084baa:	6063      	str	r3, [r4, #4]
 8084bac:	b973      	cbnz	r3, 8084bcc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
 8084bae:	6823      	ldr	r3, [r4, #0]
 8084bb0:	4620      	mov	r0, r4
 8084bb2:	689b      	ldr	r3, [r3, #8]
 8084bb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8084bb6:	68a3      	ldr	r3, [r4, #8]
 8084bb8:	3b01      	subs	r3, #1
 8084bba:	60a3      	str	r3, [r4, #8]
 8084bbc:	b933      	cbnz	r3, 8084bcc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
 8084bbe:	6823      	ldr	r3, [r4, #0]
 8084bc0:	4620      	mov	r0, r4
 8084bc2:	68db      	ldr	r3, [r3, #12]
 8084bc4:	4798      	blx	r3
 8084bc6:	e001      	b.n	8084bcc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
 8084bc8:	7b25      	ldrb	r5, [r4, #12]
 8084bca:	e7ea      	b.n	8084ba2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
 8084bcc:	4628      	mov	r0, r5
 8084bce:	b005      	add	sp, #20
 8084bd0:	bd30      	pop	{r4, r5, pc}

08084bd2 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
 8084bd2:	f000 bbe9 	b.w	80853a8 <HAL_Pin_Map>

08084bd6 <_ZN9CE_BME280C1Ev>:
 8084bd6:	4770      	bx	lr

08084bd8 <_ZN9CE_BME2806write8Ehh>:
 8084bd8:	b570      	push	{r4, r5, r6, lr}
 8084bda:	4606      	mov	r6, r0
 8084bdc:	4614      	mov	r4, r2
 8084bde:	460d      	mov	r5, r1
 8084be0:	f004 fdca 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084be4:	7831      	ldrb	r1, [r6, #0]
 8084be6:	f004 f8ce 	bl	8088d86 <_ZN7TwoWire17beginTransmissionEh>
 8084bea:	f004 fdc5 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084bee:	6803      	ldr	r3, [r0, #0]
 8084bf0:	4629      	mov	r1, r5
 8084bf2:	689b      	ldr	r3, [r3, #8]
 8084bf4:	4798      	blx	r3
 8084bf6:	f004 fdbf 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084bfa:	6803      	ldr	r3, [r0, #0]
 8084bfc:	4621      	mov	r1, r4
 8084bfe:	689b      	ldr	r3, [r3, #8]
 8084c00:	4798      	blx	r3
 8084c02:	f004 fdb9 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084c0a:	f004 b8c7 	b.w	8088d9c <_ZN7TwoWire15endTransmissionEv>

08084c0e <_ZN9CE_BME2805read8Eh>:
 8084c0e:	b538      	push	{r3, r4, r5, lr}
 8084c10:	4604      	mov	r4, r0
 8084c12:	460d      	mov	r5, r1
 8084c14:	f004 fdb0 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c18:	7821      	ldrb	r1, [r4, #0]
 8084c1a:	f004 f8b4 	bl	8088d86 <_ZN7TwoWire17beginTransmissionEh>
 8084c1e:	f004 fdab 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c22:	6803      	ldr	r3, [r0, #0]
 8084c24:	4629      	mov	r1, r5
 8084c26:	689b      	ldr	r3, [r3, #8]
 8084c28:	4798      	blx	r3
 8084c2a:	f004 fda5 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c2e:	f004 f8b5 	bl	8088d9c <_ZN7TwoWire15endTransmissionEv>
 8084c32:	f004 fda1 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c36:	7821      	ldrb	r1, [r4, #0]
 8084c38:	2201      	movs	r2, #1
 8084c3a:	f004 f8a1 	bl	8088d80 <_ZN7TwoWire11requestFromEhj>
 8084c3e:	f004 fd9b 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c42:	6803      	ldr	r3, [r0, #0]
 8084c44:	695b      	ldr	r3, [r3, #20]
 8084c46:	4798      	blx	r3
 8084c48:	4604      	mov	r4, r0
 8084c4a:	f004 fd95 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c4e:	f004 f8a5 	bl	8088d9c <_ZN7TwoWire15endTransmissionEv>
 8084c52:	b2e0      	uxtb	r0, r4
 8084c54:	bd38      	pop	{r3, r4, r5, pc}

08084c56 <_ZN9CE_BME2806read16Eh>:
 8084c56:	b538      	push	{r3, r4, r5, lr}
 8084c58:	4604      	mov	r4, r0
 8084c5a:	460d      	mov	r5, r1
 8084c5c:	f004 fd8c 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c60:	7821      	ldrb	r1, [r4, #0]
 8084c62:	f004 f890 	bl	8088d86 <_ZN7TwoWire17beginTransmissionEh>
 8084c66:	f004 fd87 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c6a:	6803      	ldr	r3, [r0, #0]
 8084c6c:	4629      	mov	r1, r5
 8084c6e:	689b      	ldr	r3, [r3, #8]
 8084c70:	4798      	blx	r3
 8084c72:	f004 fd81 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c76:	f004 f891 	bl	8088d9c <_ZN7TwoWire15endTransmissionEv>
 8084c7a:	f004 fd7d 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c7e:	7821      	ldrb	r1, [r4, #0]
 8084c80:	2202      	movs	r2, #2
 8084c82:	f004 f87d 	bl	8088d80 <_ZN7TwoWire11requestFromEhj>
 8084c86:	f004 fd77 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c8a:	6803      	ldr	r3, [r0, #0]
 8084c8c:	695b      	ldr	r3, [r3, #20]
 8084c8e:	4798      	blx	r3
 8084c90:	4605      	mov	r5, r0
 8084c92:	f004 fd71 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084c96:	6803      	ldr	r3, [r0, #0]
 8084c98:	695b      	ldr	r3, [r3, #20]
 8084c9a:	4798      	blx	r3
 8084c9c:	4604      	mov	r4, r0
 8084c9e:	f004 fd6b 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084ca2:	f004 f87b 	bl	8088d9c <_ZN7TwoWire15endTransmissionEv>
 8084ca6:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
 8084caa:	b280      	uxth	r0, r0
 8084cac:	bd38      	pop	{r3, r4, r5, pc}

08084cae <_ZN9CE_BME2809read16_LEEh>:
 8084cae:	b508      	push	{r3, lr}
 8084cb0:	f7ff ffd1 	bl	8084c56 <_ZN9CE_BME2806read16Eh>
 8084cb4:	ba40      	rev16	r0, r0
 8084cb6:	b280      	uxth	r0, r0
 8084cb8:	bd08      	pop	{r3, pc}

08084cba <_ZN9CE_BME28016readCoefficientsEv>:
 8084cba:	b538      	push	{r3, r4, r5, lr}
 8084cbc:	2188      	movs	r1, #136	; 0x88
 8084cbe:	4604      	mov	r4, r0
 8084cc0:	f7ff fff5 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084cc4:	218a      	movs	r1, #138	; 0x8a
 8084cc6:	81a0      	strh	r0, [r4, #12]
 8084cc8:	4620      	mov	r0, r4
 8084cca:	f7ff fff0 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084cce:	218c      	movs	r1, #140	; 0x8c
 8084cd0:	81e0      	strh	r0, [r4, #14]
 8084cd2:	4620      	mov	r0, r4
 8084cd4:	f7ff ffeb 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084cd8:	218e      	movs	r1, #142	; 0x8e
 8084cda:	8220      	strh	r0, [r4, #16]
 8084cdc:	4620      	mov	r0, r4
 8084cde:	f7ff ffe6 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084ce2:	2190      	movs	r1, #144	; 0x90
 8084ce4:	8260      	strh	r0, [r4, #18]
 8084ce6:	4620      	mov	r0, r4
 8084ce8:	f7ff ffe1 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084cec:	2192      	movs	r1, #146	; 0x92
 8084cee:	82a0      	strh	r0, [r4, #20]
 8084cf0:	4620      	mov	r0, r4
 8084cf2:	f7ff ffdc 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084cf6:	2194      	movs	r1, #148	; 0x94
 8084cf8:	82e0      	strh	r0, [r4, #22]
 8084cfa:	4620      	mov	r0, r4
 8084cfc:	f7ff ffd7 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d00:	2196      	movs	r1, #150	; 0x96
 8084d02:	8320      	strh	r0, [r4, #24]
 8084d04:	4620      	mov	r0, r4
 8084d06:	f7ff ffd2 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d0a:	2198      	movs	r1, #152	; 0x98
 8084d0c:	8360      	strh	r0, [r4, #26]
 8084d0e:	4620      	mov	r0, r4
 8084d10:	f7ff ffcd 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d14:	219a      	movs	r1, #154	; 0x9a
 8084d16:	83a0      	strh	r0, [r4, #28]
 8084d18:	4620      	mov	r0, r4
 8084d1a:	f7ff ffc8 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d1e:	219c      	movs	r1, #156	; 0x9c
 8084d20:	83e0      	strh	r0, [r4, #30]
 8084d22:	4620      	mov	r0, r4
 8084d24:	f7ff ffc3 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d28:	219e      	movs	r1, #158	; 0x9e
 8084d2a:	8420      	strh	r0, [r4, #32]
 8084d2c:	4620      	mov	r0, r4
 8084d2e:	f7ff ffbe 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d32:	21a1      	movs	r1, #161	; 0xa1
 8084d34:	8460      	strh	r0, [r4, #34]	; 0x22
 8084d36:	4620      	mov	r0, r4
 8084d38:	f7ff ff69 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d3c:	21e1      	movs	r1, #225	; 0xe1
 8084d3e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 8084d42:	4620      	mov	r0, r4
 8084d44:	f7ff ffb3 	bl	8084cae <_ZN9CE_BME2809read16_LEEh>
 8084d48:	21e3      	movs	r1, #227	; 0xe3
 8084d4a:	84e0      	strh	r0, [r4, #38]	; 0x26
 8084d4c:	4620      	mov	r0, r4
 8084d4e:	f7ff ff5e 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d52:	21e4      	movs	r1, #228	; 0xe4
 8084d54:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8084d58:	4620      	mov	r0, r4
 8084d5a:	f7ff ff58 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d5e:	21e5      	movs	r1, #229	; 0xe5
 8084d60:	4605      	mov	r5, r0
 8084d62:	4620      	mov	r0, r4
 8084d64:	f7ff ff53 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d68:	f000 000f 	and.w	r0, r0, #15
 8084d6c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8084d70:	8560      	strh	r0, [r4, #42]	; 0x2a
 8084d72:	21e6      	movs	r1, #230	; 0xe6
 8084d74:	4620      	mov	r0, r4
 8084d76:	f7ff ff4a 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d7a:	21e5      	movs	r1, #229	; 0xe5
 8084d7c:	4605      	mov	r5, r0
 8084d7e:	4620      	mov	r0, r4
 8084d80:	f7ff ff45 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d84:	1100      	asrs	r0, r0, #4
 8084d86:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8084d8a:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8084d8c:	21e7      	movs	r1, #231	; 0xe7
 8084d8e:	4620      	mov	r0, r4
 8084d90:	f7ff ff3d 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084d94:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8084d98:	bd38      	pop	{r3, r4, r5, pc}

08084d9a <_ZN9CE_BME2805beginEh>:
 8084d9a:	b510      	push	{r4, lr}
 8084d9c:	4604      	mov	r4, r0
 8084d9e:	7001      	strb	r1, [r0, #0]
 8084da0:	f004 fcea 	bl	8089778 <_Z19__fetch_global_Wirev>
 8084da4:	f003 ffb8 	bl	8088d18 <_ZN7TwoWire5beginEv>
 8084da8:	21d0      	movs	r1, #208	; 0xd0
 8084daa:	4620      	mov	r0, r4
 8084dac:	f7ff ff2f 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084db0:	2860      	cmp	r0, #96	; 0x60
 8084db2:	d10e      	bne.n	8084dd2 <_ZN9CE_BME2805beginEh+0x38>
 8084db4:	4620      	mov	r0, r4
 8084db6:	f7ff ff80 	bl	8084cba <_ZN9CE_BME28016readCoefficientsEv>
 8084dba:	4620      	mov	r0, r4
 8084dbc:	2203      	movs	r2, #3
 8084dbe:	21f2      	movs	r1, #242	; 0xf2
 8084dc0:	f7ff ff0a 	bl	8084bd8 <_ZN9CE_BME2806write8Ehh>
 8084dc4:	4620      	mov	r0, r4
 8084dc6:	223f      	movs	r2, #63	; 0x3f
 8084dc8:	21f4      	movs	r1, #244	; 0xf4
 8084dca:	f7ff ff05 	bl	8084bd8 <_ZN9CE_BME2806write8Ehh>
 8084dce:	2001      	movs	r0, #1
 8084dd0:	bd10      	pop	{r4, pc}
 8084dd2:	2000      	movs	r0, #0
 8084dd4:	bd10      	pop	{r4, pc}
	...

08084dd8 <_ZN9CE_BME28015readTemperatureEv>:
 8084dd8:	b538      	push	{r3, r4, r5, lr}
 8084dda:	21fa      	movs	r1, #250	; 0xfa
 8084ddc:	4604      	mov	r4, r0
 8084dde:	f7ff ff3a 	bl	8084c56 <_ZN9CE_BME2806read16Eh>
 8084de2:	21fc      	movs	r1, #252	; 0xfc
 8084de4:	0205      	lsls	r5, r0, #8
 8084de6:	4620      	mov	r0, r4
 8084de8:	f7ff ff11 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084dec:	89a2      	ldrh	r2, [r4, #12]
 8084dee:	4328      	orrs	r0, r5
 8084df0:	ebc2 2320 	rsb	r3, r2, r0, asr #8
 8084df4:	435b      	muls	r3, r3
 8084df6:	0052      	lsls	r2, r2, #1
 8084df8:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8084dfc:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8084e00:	131b      	asrs	r3, r3, #12
 8084e02:	4350      	muls	r0, r2
 8084e04:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8084e08:	4353      	muls	r3, r2
 8084e0a:	139b      	asrs	r3, r3, #14
 8084e0c:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 8084e10:	60a0      	str	r0, [r4, #8]
 8084e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8084e16:	3080      	adds	r0, #128	; 0x80
 8084e18:	1200      	asrs	r0, r0, #8
 8084e1a:	f005 fcc3 	bl	808a7a4 <__aeabi_i2f>
 8084e1e:	4902      	ldr	r1, [pc, #8]	; (8084e28 <_ZN9CE_BME28015readTemperatureEv+0x50>)
 8084e20:	f005 fdc8 	bl	808a9b4 <__aeabi_fdiv>
 8084e24:	bd38      	pop	{r3, r4, r5, pc}
 8084e26:	bf00      	nop
 8084e28:	42c80000 	.word	0x42c80000

08084e2c <_ZN9CE_BME28012readPressureEv>:
 8084e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084e30:	21f7      	movs	r1, #247	; 0xf7
 8084e32:	4606      	mov	r6, r0
 8084e34:	f7ff ff0f 	bl	8084c56 <_ZN9CE_BME2806read16Eh>
 8084e38:	21f9      	movs	r1, #249	; 0xf9
 8084e3a:	4607      	mov	r7, r0
 8084e3c:	4630      	mov	r0, r6
 8084e3e:	f7ff fee6 	bl	8084c0e <_ZN9CE_BME2805read8Eh>
 8084e42:	68b4      	ldr	r4, [r6, #8]
 8084e44:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8084e48:	17e5      	asrs	r5, r4, #31
 8084e4a:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 8084e4e:	f145 35ff 	adc.w	r5, r5, #4294967295
 8084e52:	fba4 8904 	umull	r8, r9, r4, r4
 8084e56:	fb04 f305 	mul.w	r3, r4, r5
 8084e5a:	fb02 f105 	mul.w	r1, r2, r5
 8084e5e:	eb09 0943 	add.w	r9, r9, r3, lsl #1
 8084e62:	17d3      	asrs	r3, r2, #31
 8084e64:	fb04 1103 	mla	r1, r4, r3, r1
 8084e68:	fba2 2304 	umull	r2, r3, r2, r4
 8084e6c:	440b      	add	r3, r1
 8084e6e:	0319      	lsls	r1, r3, #12
 8084e70:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8084e74:	4686      	mov	lr, r0
 8084e76:	0310      	lsls	r0, r2, #12
 8084e78:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8084e7c:	fb02 fc09 	mul.w	ip, r2, r9
 8084e80:	17d3      	asrs	r3, r2, #31
 8084e82:	fb08 cc03 	mla	ip, r8, r3, ip
 8084e86:	fba2 2308 	umull	r2, r3, r2, r8
 8084e8a:	4463      	add	r3, ip
 8084e8c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8084e90:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 8084e94:	eb1a 0a00 	adds.w	sl, sl, r0
 8084e98:	8a72      	ldrh	r2, [r6, #18]
 8084e9a:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8084e9e:	eb4b 0b01 	adc.w	fp, fp, r1
 8084ea2:	f11a 0000 	adds.w	r0, sl, #0
 8084ea6:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 8084eaa:	fba0 ab02 	umull	sl, fp, r0, r2
 8084eae:	fb02 bb01 	mla	fp, r2, r1, fp
 8084eb2:	ea4f 026b 	mov.w	r2, fp, asr #1
 8084eb6:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8084eba:	ea52 0103 	orrs.w	r1, r2, r3
 8084ebe:	f000 8082 	beq.w	8084fc6 <_ZN9CE_BME28012readPressureEv+0x19a>
 8084ec2:	f9b6 a01c 	ldrsh.w	sl, [r6, #28]
 8084ec6:	ea4e 2707 	orr.w	r7, lr, r7, lsl #8
 8084eca:	fb0a f109 	mul.w	r1, sl, r9
 8084ece:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8084ed2:	fb08 110b 	mla	r1, r8, fp, r1
 8084ed6:	fbaa 8908 	umull	r8, r9, sl, r8
 8084eda:	f9b6 a01a 	ldrsh.w	sl, [r6, #26]
 8084ede:	4489      	add	r9, r1
 8084ee0:	fb0a f105 	mul.w	r1, sl, r5
 8084ee4:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8084ee8:	fb04 110b 	mla	r1, r4, fp, r1
 8084eec:	fbaa 4504 	umull	r4, r5, sl, r4
 8084ef0:	440d      	add	r5, r1
 8084ef2:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 8084ef6:	ea4f 4a44 	mov.w	sl, r4, lsl #17
 8084efa:	113f      	asrs	r7, r7, #4
 8084efc:	eb1a 0a08 	adds.w	sl, sl, r8
 8084f00:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
 8084f04:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 8084f08:	eb4b 0b09 	adc.w	fp, fp, r9
 8084f0c:	ea4f 79e7 	mov.w	r9, r7, asr #31
 8084f10:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 8084f14:	ea45 0557 	orr.w	r5, r5, r7, lsr #1
 8084f18:	07fc      	lsls	r4, r7, #31
 8084f1a:	f640 4735 	movw	r7, #3125	; 0xc35
 8084f1e:	f9b6 0018 	ldrsh.w	r0, [r6, #24]
 8084f22:	f04f 0800 	mov.w	r8, #0
 8084f26:	eb18 080a 	adds.w	r8, r8, sl
 8084f2a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8084f2e:	eb49 090b 	adc.w	r9, r9, fp
 8084f32:	ebb4 0408 	subs.w	r4, r4, r8
 8084f36:	fba4 0107 	umull	r0, r1, r4, r7
 8084f3a:	eb65 0509 	sbc.w	r5, r5, r9
 8084f3e:	fb07 1105 	mla	r1, r7, r5, r1
 8084f42:	f005 fe85 	bl	808ac50 <__aeabi_ldivmod>
 8084f46:	f9b6 2022 	ldrsh.w	r2, [r6, #34]	; 0x22
 8084f4a:	134c      	asrs	r4, r1, #13
 8084f4c:	fb02 f704 	mul.w	r7, r2, r4
 8084f50:	0b45      	lsrs	r5, r0, #13
 8084f52:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 8084f56:	17d3      	asrs	r3, r2, #31
 8084f58:	fb05 7703 	mla	r7, r5, r3, r7
 8084f5c:	fba2 2305 	umull	r2, r3, r2, r5
 8084f60:	4354      	muls	r4, r2
 8084f62:	443b      	add	r3, r7
 8084f64:	fb05 4403 	mla	r4, r5, r3, r4
 8084f68:	fba2 2305 	umull	r2, r3, r2, r5
 8084f6c:	4423      	add	r3, r4
 8084f6e:	0e54      	lsrs	r4, r2, #25
 8084f70:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 8084f74:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8084f78:	1824      	adds	r4, r4, r0
 8084f7a:	ea4f 6563 	mov.w	r5, r3, asr #25
 8084f7e:	414d      	adcs	r5, r1
 8084f80:	4351      	muls	r1, r2
 8084f82:	17d3      	asrs	r3, r2, #31
 8084f84:	fb00 1303 	mla	r3, r0, r3, r1
 8084f88:	fba2 0100 	umull	r0, r1, r2, r0
 8084f8c:	4419      	add	r1, r3
 8084f8e:	0cc2      	lsrs	r2, r0, #19
 8084f90:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8084f94:	1912      	adds	r2, r2, r4
 8084f96:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
 8084f9a:	ea4f 43e1 	mov.w	r3, r1, asr #19
 8084f9e:	416b      	adcs	r3, r5
 8084fa0:	0a10      	lsrs	r0, r2, #8
 8084fa2:	17e5      	asrs	r5, r4, #31
 8084fa4:	0122      	lsls	r2, r4, #4
 8084fa6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8084faa:	1219      	asrs	r1, r3, #8
 8084fac:	012b      	lsls	r3, r5, #4
 8084fae:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8084fb2:	1880      	adds	r0, r0, r2
 8084fb4:	4159      	adcs	r1, r3
 8084fb6:	f005 fc0b 	bl	808a7d0 <__aeabi_l2f>
 8084fba:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8084fbe:	f005 fc45 	bl	808a84c <__aeabi_fmul>
 8084fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084fc6:	2000      	movs	r0, #0
 8084fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08084fcc <_ZN9CE_BME28012readHumidityEv>:
 8084fcc:	b510      	push	{r4, lr}
 8084fce:	4604      	mov	r4, r0
 8084fd0:	21fd      	movs	r1, #253	; 0xfd
 8084fd2:	f7ff fe40 	bl	8084c56 <_ZN9CE_BME2806read16Eh>
 8084fd6:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 8084fda:	68a2      	ldr	r2, [r4, #8]
 8084fdc:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 8084fe0:	051b      	lsls	r3, r3, #20
 8084fe2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 8084fe6:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
 8084fea:	fb02 0011 	mls	r0, r2, r1, r0
 8084fee:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8084ff2:	13d8      	asrs	r0, r3, #15
 8084ff4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8084ff8:	f994 102e 	ldrsb.w	r1, [r4, #46]	; 0x2e
 8084ffc:	4353      	muls	r3, r2
 8084ffe:	434a      	muls	r2, r1
 8085000:	12db      	asrs	r3, r3, #11
 8085002:	1292      	asrs	r2, r2, #10
 8085004:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8085008:	4353      	muls	r3, r2
 808500a:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 808500e:	129b      	asrs	r3, r3, #10
 8085010:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8085014:	4353      	muls	r3, r2
 8085016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 808501a:	139b      	asrs	r3, r3, #14
 808501c:	4343      	muls	r3, r0
 808501e:	13d8      	asrs	r0, r3, #15
 8085020:	4340      	muls	r0, r0
 8085022:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8085026:	11c0      	asrs	r0, r0, #7
 8085028:	4350      	muls	r0, r2
 808502a:	eba3 1020 	sub.w	r0, r3, r0, asr #4
 808502e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8085032:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8085036:	bfa8      	it	ge
 8085038:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 808503c:	1300      	asrs	r0, r0, #12
 808503e:	f005 fbb1 	bl	808a7a4 <__aeabi_i2f>
 8085042:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8085046:	f005 fc01 	bl	808a84c <__aeabi_fmul>
 808504a:	bd10      	pop	{r4, pc}

0808504c <_GLOBAL__sub_I__ZN9CE_BME280C2Ev>:
 808504c:	f000 b9ac 	b.w	80853a8 <HAL_Pin_Map>

08085050 <Wiring_TIM3_Interrupt_Handler_override>:
 8085050:	b510      	push	{r4, lr}
 8085052:	2101      	movs	r1, #1
 8085054:	4806      	ldr	r0, [pc, #24]	; (8085070 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8085056:	f004 fa73 	bl	8089540 <TIM_GetITStatus>
 808505a:	b140      	cbz	r0, 808506e <Wiring_TIM3_Interrupt_Handler_override+0x1e>
 808505c:	2101      	movs	r1, #1
 808505e:	4804      	ldr	r0, [pc, #16]	; (8085070 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8085060:	f004 fa79 	bl	8089556 <TIM_ClearITPendingBit>
 8085064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085068:	4b02      	ldr	r3, [pc, #8]	; (8085074 <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 808506a:	681b      	ldr	r3, [r3, #0]
 808506c:	4718      	bx	r3
 808506e:	bd10      	pop	{r4, pc}
 8085070:	40000400 	.word	0x40000400
 8085074:	200008d8 	.word	0x200008d8

08085078 <Wiring_TIM4_Interrupt_Handler_override>:
 8085078:	b510      	push	{r4, lr}
 808507a:	2101      	movs	r1, #1
 808507c:	4806      	ldr	r0, [pc, #24]	; (8085098 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 808507e:	f004 fa5f 	bl	8089540 <TIM_GetITStatus>
 8085082:	b140      	cbz	r0, 8085096 <Wiring_TIM4_Interrupt_Handler_override+0x1e>
 8085084:	2101      	movs	r1, #1
 8085086:	4804      	ldr	r0, [pc, #16]	; (8085098 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8085088:	f004 fa65 	bl	8089556 <TIM_ClearITPendingBit>
 808508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085090:	4b02      	ldr	r3, [pc, #8]	; (808509c <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 8085092:	685b      	ldr	r3, [r3, #4]
 8085094:	4718      	bx	r3
 8085096:	bd10      	pop	{r4, pc}
 8085098:	40000800 	.word	0x40000800
 808509c:	200008d8 	.word	0x200008d8

080850a0 <Wiring_TIM5_Interrupt_Handler_override>:
 80850a0:	b510      	push	{r4, lr}
 80850a2:	2101      	movs	r1, #1
 80850a4:	4806      	ldr	r0, [pc, #24]	; (80850c0 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80850a6:	f004 fa4b 	bl	8089540 <TIM_GetITStatus>
 80850aa:	b140      	cbz	r0, 80850be <Wiring_TIM5_Interrupt_Handler_override+0x1e>
 80850ac:	2101      	movs	r1, #1
 80850ae:	4804      	ldr	r0, [pc, #16]	; (80850c0 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80850b0:	f004 fa51 	bl	8089556 <TIM_ClearITPendingBit>
 80850b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80850b8:	4b02      	ldr	r3, [pc, #8]	; (80850c4 <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 80850ba:	689b      	ldr	r3, [r3, #8]
 80850bc:	4718      	bx	r3
 80850be:	bd10      	pop	{r4, pc}
 80850c0:	40000c00 	.word	0x40000c00
 80850c4:	200008d8 	.word	0x200008d8

080850c8 <Wiring_TIM6_Interrupt_Handler_override>:
 80850c8:	b510      	push	{r4, lr}
 80850ca:	2101      	movs	r1, #1
 80850cc:	4806      	ldr	r0, [pc, #24]	; (80850e8 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80850ce:	f004 fa37 	bl	8089540 <TIM_GetITStatus>
 80850d2:	b140      	cbz	r0, 80850e6 <Wiring_TIM6_Interrupt_Handler_override+0x1e>
 80850d4:	2101      	movs	r1, #1
 80850d6:	4804      	ldr	r0, [pc, #16]	; (80850e8 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80850d8:	f004 fa3d 	bl	8089556 <TIM_ClearITPendingBit>
 80850dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80850e0:	4b02      	ldr	r3, [pc, #8]	; (80850ec <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 80850e2:	68db      	ldr	r3, [r3, #12]
 80850e4:	4718      	bx	r3
 80850e6:	bd10      	pop	{r4, pc}
 80850e8:	40001000 	.word	0x40001000
 80850ec:	200008d8 	.word	0x200008d8

080850f0 <Wiring_TIM7_Interrupt_Handler_override>:
 80850f0:	b510      	push	{r4, lr}
 80850f2:	2101      	movs	r1, #1
 80850f4:	4806      	ldr	r0, [pc, #24]	; (8085110 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80850f6:	f004 fa23 	bl	8089540 <TIM_GetITStatus>
 80850fa:	b140      	cbz	r0, 808510e <Wiring_TIM7_Interrupt_Handler_override+0x1e>
 80850fc:	2101      	movs	r1, #1
 80850fe:	4804      	ldr	r0, [pc, #16]	; (8085110 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8085100:	f004 fa29 	bl	8089556 <TIM_ClearITPendingBit>
 8085104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085108:	4b02      	ldr	r3, [pc, #8]	; (8085114 <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 808510a:	691b      	ldr	r3, [r3, #16]
 808510c:	4718      	bx	r3
 808510e:	bd10      	pop	{r4, pc}
 8085110:	40001400 	.word	0x40001400
 8085114:	200008d8 	.word	0x200008d8

08085118 <_ZN13IntervalTimer9start_SITEmb>:
 8085118:	b5f0      	push	{r4, r5, r6, r7, lr}
 808511a:	7a43      	ldrb	r3, [r0, #9]
 808511c:	b085      	sub	sp, #20
 808511e:	4605      	mov	r5, r0
 8085120:	460f      	mov	r7, r1
 8085122:	4616      	mov	r6, r2
 8085124:	2b04      	cmp	r3, #4
 8085126:	d830      	bhi.n	808518a <_ZN13IntervalTimer9start_SITEmb+0x72>
 8085128:	e8df f003 	tbb	[pc, r3]
 808512c:	1e150c03 	.word	0x1e150c03
 8085130:	27          	.byte	0x27
 8085131:	00          	.byte	0x00
 8085132:	2101      	movs	r1, #1
 8085134:	2002      	movs	r0, #2
 8085136:	f004 f8df 	bl	80892f8 <RCC_APB1PeriphClockCmd>
 808513a:	231d      	movs	r3, #29
 808513c:	f88d 3000 	strb.w	r3, [sp]
 8085140:	4c29      	ldr	r4, [pc, #164]	; (80851e8 <_ZN13IntervalTimer9start_SITEmb+0xd0>)
 8085142:	e022      	b.n	808518a <_ZN13IntervalTimer9start_SITEmb+0x72>
 8085144:	2101      	movs	r1, #1
 8085146:	2004      	movs	r0, #4
 8085148:	f004 f8d6 	bl	80892f8 <RCC_APB1PeriphClockCmd>
 808514c:	231e      	movs	r3, #30
 808514e:	f88d 3000 	strb.w	r3, [sp]
 8085152:	4c26      	ldr	r4, [pc, #152]	; (80851ec <_ZN13IntervalTimer9start_SITEmb+0xd4>)
 8085154:	e019      	b.n	808518a <_ZN13IntervalTimer9start_SITEmb+0x72>
 8085156:	2101      	movs	r1, #1
 8085158:	2008      	movs	r0, #8
 808515a:	f004 f8cd 	bl	80892f8 <RCC_APB1PeriphClockCmd>
 808515e:	2332      	movs	r3, #50	; 0x32
 8085160:	f88d 3000 	strb.w	r3, [sp]
 8085164:	4c22      	ldr	r4, [pc, #136]	; (80851f0 <_ZN13IntervalTimer9start_SITEmb+0xd8>)
 8085166:	e010      	b.n	808518a <_ZN13IntervalTimer9start_SITEmb+0x72>
 8085168:	2101      	movs	r1, #1
 808516a:	2010      	movs	r0, #16
 808516c:	f004 f8c4 	bl	80892f8 <RCC_APB1PeriphClockCmd>
 8085170:	2336      	movs	r3, #54	; 0x36
 8085172:	f88d 3000 	strb.w	r3, [sp]
 8085176:	4c1f      	ldr	r4, [pc, #124]	; (80851f4 <_ZN13IntervalTimer9start_SITEmb+0xdc>)
 8085178:	e007      	b.n	808518a <_ZN13IntervalTimer9start_SITEmb+0x72>
 808517a:	2101      	movs	r1, #1
 808517c:	2020      	movs	r0, #32
 808517e:	f004 f8bb 	bl	80892f8 <RCC_APB1PeriphClockCmd>
 8085182:	4c1d      	ldr	r4, [pc, #116]	; (80851f8 <_ZN13IntervalTimer9start_SITEmb+0xe0>)
 8085184:	2337      	movs	r3, #55	; 0x37
 8085186:	f88d 3000 	strb.w	r3, [sp]
 808518a:	b11e      	cbz	r6, 8085194 <_ZN13IntervalTimer9start_SITEmb+0x7c>
 808518c:	2e01      	cmp	r6, #1
 808518e:	d101      	bne.n	8085194 <_ZN13IntervalTimer9start_SITEmb+0x7c>
 8085190:	88ae      	ldrh	r6, [r5, #4]
 8085192:	e000      	b.n	8085196 <_ZN13IntervalTimer9start_SITEmb+0x7e>
 8085194:	886e      	ldrh	r6, [r5, #2]
 8085196:	7a6a      	ldrb	r2, [r5, #9]
 8085198:	68e9      	ldr	r1, [r5, #12]
 808519a:	4b18      	ldr	r3, [pc, #96]	; (80851fc <_ZN13IntervalTimer9start_SITEmb+0xe4>)
 808519c:	2501      	movs	r5, #1
 808519e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80851a2:	4668      	mov	r0, sp
 80851a4:	230a      	movs	r3, #10
 80851a6:	f88d 3001 	strb.w	r3, [sp, #1]
 80851aa:	f88d 5002 	strb.w	r5, [sp, #2]
 80851ae:	f88d 5003 	strb.w	r5, [sp, #3]
 80851b2:	f004 f869 	bl	8089288 <NVIC_Init>
 80851b6:	2300      	movs	r3, #0
 80851b8:	a901      	add	r1, sp, #4
 80851ba:	4620      	mov	r0, r4
 80851bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80851c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80851c4:	f88d 300e 	strb.w	r3, [sp, #14]
 80851c8:	f8ad 6004 	strh.w	r6, [sp, #4]
 80851cc:	9702      	str	r7, [sp, #8]
 80851ce:	f004 f96d 	bl	80894ac <TIM_TimeBaseInit>
 80851d2:	462a      	mov	r2, r5
 80851d4:	4629      	mov	r1, r5
 80851d6:	4620      	mov	r0, r4
 80851d8:	f004 f9ca 	bl	8089570 <TIM_ITConfig>
 80851dc:	4629      	mov	r1, r5
 80851de:	4620      	mov	r0, r4
 80851e0:	f004 f9a2 	bl	8089528 <TIM_Cmd>
 80851e4:	b005      	add	sp, #20
 80851e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80851e8:	40000400 	.word	0x40000400
 80851ec:	40000800 	.word	0x40000800
 80851f0:	40000c00 	.word	0x40000c00
 80851f4:	40001000 	.word	0x40001000
 80851f8:	40001400 	.word	0x40001400
 80851fc:	200008d8 	.word	0x200008d8

08085200 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>:
 8085200:	2b04      	cmp	r3, #4
 8085202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085204:	4606      	mov	r6, r0
 8085206:	460f      	mov	r7, r1
 8085208:	4696      	mov	lr, r2
 808520a:	461c      	mov	r4, r3
 808520c:	4d0e      	ldr	r5, [pc, #56]	; (8085248 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)
 808520e:	d911      	bls.n	8085234 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x34>
 8085210:	2400      	movs	r4, #0
 8085212:	5d2a      	ldrb	r2, [r5, r4]
 8085214:	b2e3      	uxtb	r3, r4
 8085216:	b94a      	cbnz	r2, 808522c <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x2c>
 8085218:	7273      	strb	r3, [r6, #9]
 808521a:	4630      	mov	r0, r6
 808521c:	4672      	mov	r2, lr
 808521e:	4639      	mov	r1, r7
 8085220:	f7ff ff7a 	bl	8085118 <_ZN13IntervalTimer9start_SITEmb>
 8085224:	4b08      	ldr	r3, [pc, #32]	; (8085248 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)
 8085226:	2001      	movs	r0, #1
 8085228:	5518      	strb	r0, [r3, r4]
 808522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808522c:	3401      	adds	r4, #1
 808522e:	2c05      	cmp	r4, #5
 8085230:	d1ef      	bne.n	8085212 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x12>
 8085232:	e007      	b.n	8085244 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
 8085234:	5ceb      	ldrb	r3, [r5, r3]
 8085236:	b92b      	cbnz	r3, 8085244 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
 8085238:	7244      	strb	r4, [r0, #9]
 808523a:	f7ff ff6d 	bl	8085118 <_ZN13IntervalTimer9start_SITEmb>
 808523e:	2001      	movs	r0, #1
 8085240:	5528      	strb	r0, [r5, r4]
 8085242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085244:	2000      	movs	r0, #0
 8085246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085248:	200008ec 	.word	0x200008ec

0808524c <_ZN13IntervalTimer8stop_SITEv>:
 808524c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808524e:	7a43      	ldrb	r3, [r0, #9]
 8085250:	4606      	mov	r6, r0
 8085252:	2b04      	cmp	r3, #4
 8085254:	d81c      	bhi.n	8085290 <_ZN13IntervalTimer8stop_SITEv+0x44>
 8085256:	e8df f003 	tbb	[pc, r3]
 808525a:	0803      	.short	0x0803
 808525c:	120d      	.short	0x120d
 808525e:	17          	.byte	0x17
 808525f:	00          	.byte	0x00
 8085260:	231d      	movs	r3, #29
 8085262:	f88d 3004 	strb.w	r3, [sp, #4]
 8085266:	4c13      	ldr	r4, [pc, #76]	; (80852b4 <_ZN13IntervalTimer8stop_SITEv+0x68>)
 8085268:	e012      	b.n	8085290 <_ZN13IntervalTimer8stop_SITEv+0x44>
 808526a:	231e      	movs	r3, #30
 808526c:	f88d 3004 	strb.w	r3, [sp, #4]
 8085270:	4c11      	ldr	r4, [pc, #68]	; (80852b8 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
 8085272:	e00d      	b.n	8085290 <_ZN13IntervalTimer8stop_SITEv+0x44>
 8085274:	2332      	movs	r3, #50	; 0x32
 8085276:	f88d 3004 	strb.w	r3, [sp, #4]
 808527a:	4c10      	ldr	r4, [pc, #64]	; (80852bc <_ZN13IntervalTimer8stop_SITEv+0x70>)
 808527c:	e008      	b.n	8085290 <_ZN13IntervalTimer8stop_SITEv+0x44>
 808527e:	2336      	movs	r3, #54	; 0x36
 8085280:	f88d 3004 	strb.w	r3, [sp, #4]
 8085284:	4c0e      	ldr	r4, [pc, #56]	; (80852c0 <_ZN13IntervalTimer8stop_SITEv+0x74>)
 8085286:	e003      	b.n	8085290 <_ZN13IntervalTimer8stop_SITEv+0x44>
 8085288:	2337      	movs	r3, #55	; 0x37
 808528a:	4c0e      	ldr	r4, [pc, #56]	; (80852c4 <_ZN13IntervalTimer8stop_SITEv+0x78>)
 808528c:	f88d 3004 	strb.w	r3, [sp, #4]
 8085290:	2100      	movs	r1, #0
 8085292:	4620      	mov	r0, r4
 8085294:	f004 f948 	bl	8089528 <TIM_Cmd>
 8085298:	2500      	movs	r5, #0
 808529a:	a801      	add	r0, sp, #4
 808529c:	f88d 5007 	strb.w	r5, [sp, #7]
 80852a0:	f003 fff2 	bl	8089288 <NVIC_Init>
 80852a4:	4620      	mov	r0, r4
 80852a6:	f004 f84b 	bl	8089340 <TIM_DeInit>
 80852aa:	7a73      	ldrb	r3, [r6, #9]
 80852ac:	4a06      	ldr	r2, [pc, #24]	; (80852c8 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 80852ae:	54d5      	strb	r5, [r2, r3]
 80852b0:	b002      	add	sp, #8
 80852b2:	bd70      	pop	{r4, r5, r6, pc}
 80852b4:	40000400 	.word	0x40000400
 80852b8:	40000800 	.word	0x40000800
 80852bc:	40000c00 	.word	0x40000c00
 80852c0:	40001000 	.word	0x40001000
 80852c4:	40001400 	.word	0x40001400
 80852c8:	200008ec 	.word	0x200008ec

080852cc <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>:
 80852cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80852d0:	461f      	mov	r7, r3
 80852d2:	7a03      	ldrb	r3, [r0, #8]
 80852d4:	4604      	mov	r4, r0
 80852d6:	4688      	mov	r8, r1
 80852d8:	4616      	mov	r6, r2
 80852da:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80852de:	b11b      	cbz	r3, 80852e8 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x1c>
 80852e0:	f7ff ffb4 	bl	808524c <_ZN13IntervalTimer8stop_SITEv>
 80852e4:	2300      	movs	r3, #0
 80852e6:	7223      	strb	r3, [r4, #8]
 80852e8:	2d04      	cmp	r5, #4
 80852ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80852ee:	d810      	bhi.n	8085312 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x46>
 80852f0:	462b      	mov	r3, r5
 80852f2:	463a      	mov	r2, r7
 80852f4:	4631      	mov	r1, r6
 80852f6:	4620      	mov	r0, r4
 80852f8:	f7ff ff82 	bl	8085200 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>
 80852fc:	b120      	cbz	r0, 8085308 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3c>
 80852fe:	2301      	movs	r3, #1
 8085300:	e003      	b.n	808530a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 8085302:	3501      	adds	r5, #1
 8085304:	2d05      	cmp	r5, #5
 8085306:	d106      	bne.n	8085316 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x4a>
 8085308:	2300      	movs	r3, #0
 808530a:	7223      	strb	r3, [r4, #8]
 808530c:	7a20      	ldrb	r0, [r4, #8]
 808530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085312:	4b08      	ldr	r3, [pc, #32]	; (8085334 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 8085314:	2500      	movs	r5, #0
 8085316:	5ce9      	ldrb	r1, [r5, r3]
 8085318:	b2ea      	uxtb	r2, r5
 808531a:	2900      	cmp	r1, #0
 808531c:	d1f1      	bne.n	8085302 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x36>
 808531e:	7262      	strb	r2, [r4, #9]
 8085320:	4631      	mov	r1, r6
 8085322:	463a      	mov	r2, r7
 8085324:	4620      	mov	r0, r4
 8085326:	f7ff fef7 	bl	8085118 <_ZN13IntervalTimer9start_SITEmb>
 808532a:	4a02      	ldr	r2, [pc, #8]	; (8085334 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 808532c:	2301      	movs	r3, #1
 808532e:	5553      	strb	r3, [r2, r5]
 8085330:	e7eb      	b.n	808530a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 8085332:	bf00      	nop
 8085334:	200008ec 	.word	0x200008ec

08085338 <_ZN13IntervalTimer3endEv>:
 8085338:	7a03      	ldrb	r3, [r0, #8]
 808533a:	b510      	push	{r4, lr}
 808533c:	4604      	mov	r4, r0
 808533e:	b10b      	cbz	r3, 8085344 <_ZN13IntervalTimer3endEv+0xc>
 8085340:	f7ff ff84 	bl	808524c <_ZN13IntervalTimer8stop_SITEv>
 8085344:	2300      	movs	r3, #0
 8085346:	7223      	strb	r3, [r4, #8]
 8085348:	bd10      	pop	{r4, pc}
	...

0808534c <_ZN13IntervalTimer15resetPeriod_SITEmb>:
 808534c:	b510      	push	{r4, lr}
 808534e:	7a44      	ldrb	r4, [r0, #9]
 8085350:	2c04      	cmp	r4, #4
 8085352:	d80d      	bhi.n	8085370 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 8085354:	e8df f004 	tbb	[pc, r4]
 8085358:	09070503 	.word	0x09070503
 808535c:	0b          	.byte	0x0b
 808535d:	00          	.byte	0x00
 808535e:	4b0c      	ldr	r3, [pc, #48]	; (8085390 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x44>)
 8085360:	e006      	b.n	8085370 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 8085362:	4b0c      	ldr	r3, [pc, #48]	; (8085394 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x48>)
 8085364:	e004      	b.n	8085370 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 8085366:	4b0c      	ldr	r3, [pc, #48]	; (8085398 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x4c>)
 8085368:	e002      	b.n	8085370 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 808536a:	4b0c      	ldr	r3, [pc, #48]	; (808539c <_ZN13IntervalTimer15resetPeriod_SITEmb+0x50>)
 808536c:	e000      	b.n	8085370 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 808536e:	4b0c      	ldr	r3, [pc, #48]	; (80853a0 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x54>)
 8085370:	b11a      	cbz	r2, 808537a <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
 8085372:	2a01      	cmp	r2, #1
 8085374:	d101      	bne.n	808537a <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
 8085376:	8882      	ldrh	r2, [r0, #4]
 8085378:	e000      	b.n	808537c <_ZN13IntervalTimer15resetPeriod_SITEmb+0x30>
 808537a:	8842      	ldrh	r2, [r0, #2]
 808537c:	62d9      	str	r1, [r3, #44]	; 0x2c
 808537e:	b292      	uxth	r2, r2
 8085380:	2101      	movs	r1, #1
 8085382:	851a      	strh	r2, [r3, #40]	; 0x28
 8085384:	8299      	strh	r1, [r3, #20]
 8085386:	4618      	mov	r0, r3
 8085388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808538c:	f004 b8e3 	b.w	8089556 <TIM_ClearITPendingBit>
 8085390:	40000400 	.word	0x40000400
 8085394:	40000800 	.word	0x40000800
 8085398:	40000c00 	.word	0x40000c00
 808539c:	40001000 	.word	0x40001000
 80853a0:	40001400 	.word	0x40001400

080853a4 <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 80853a4:	f000 b800 	b.w	80853a8 <HAL_Pin_Map>

080853a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80853a8:	b508      	push	{r3, lr}
 80853aa:	4b02      	ldr	r3, [pc, #8]	; (80853b4 <HAL_Pin_Map+0xc>)
 80853ac:	681b      	ldr	r3, [r3, #0]
 80853ae:	681b      	ldr	r3, [r3, #0]
 80853b0:	9301      	str	r3, [sp, #4]
 80853b2:	bd08      	pop	{r3, pc}
 80853b4:	080401b0 	.word	0x080401b0

080853b8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80853b8:	b508      	push	{r3, lr}
 80853ba:	4b02      	ldr	r3, [pc, #8]	; (80853c4 <HAL_Validate_Pin_Function+0xc>)
 80853bc:	681b      	ldr	r3, [r3, #0]
 80853be:	685b      	ldr	r3, [r3, #4]
 80853c0:	9301      	str	r3, [sp, #4]
 80853c2:	bd08      	pop	{r3, pc}
 80853c4:	080401b0 	.word	0x080401b0

080853c8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80853c8:	b508      	push	{r3, lr}
 80853ca:	4b02      	ldr	r3, [pc, #8]	; (80853d4 <HAL_Pin_Mode+0xc>)
 80853cc:	681b      	ldr	r3, [r3, #0]
 80853ce:	689b      	ldr	r3, [r3, #8]
 80853d0:	9301      	str	r3, [sp, #4]
 80853d2:	bd08      	pop	{r3, pc}
 80853d4:	080401b0 	.word	0x080401b0

080853d8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80853d8:	b508      	push	{r3, lr}
 80853da:	4b02      	ldr	r3, [pc, #8]	; (80853e4 <HAL_Get_Pin_Mode+0xc>)
 80853dc:	681b      	ldr	r3, [r3, #0]
 80853de:	68db      	ldr	r3, [r3, #12]
 80853e0:	9301      	str	r3, [sp, #4]
 80853e2:	bd08      	pop	{r3, pc}
 80853e4:	080401b0 	.word	0x080401b0

080853e8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80853e8:	b508      	push	{r3, lr}
 80853ea:	4b02      	ldr	r3, [pc, #8]	; (80853f4 <HAL_GPIO_Write+0xc>)
 80853ec:	681b      	ldr	r3, [r3, #0]
 80853ee:	691b      	ldr	r3, [r3, #16]
 80853f0:	9301      	str	r3, [sp, #4]
 80853f2:	bd08      	pop	{r3, pc}
 80853f4:	080401b0 	.word	0x080401b0

080853f8 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80853f8:	b508      	push	{r3, lr}
 80853fa:	4b02      	ldr	r3, [pc, #8]	; (8085404 <HAL_Interrupts_Attach+0xc>)
 80853fc:	681b      	ldr	r3, [r3, #0]
 80853fe:	699b      	ldr	r3, [r3, #24]
 8085400:	9301      	str	r3, [sp, #4]
 8085402:	bd08      	pop	{r3, pc}
 8085404:	080401b0 	.word	0x080401b0

08085408 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8085408:	b508      	push	{r3, lr}
 808540a:	4b02      	ldr	r3, [pc, #8]	; (8085414 <HAL_Interrupts_Detach+0xc>)
 808540c:	681b      	ldr	r3, [r3, #0]
 808540e:	69db      	ldr	r3, [r3, #28]
 8085410:	9301      	str	r3, [sp, #4]
 8085412:	bd08      	pop	{r3, pc}
 8085414:	080401b0 	.word	0x080401b0

08085418 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8085418:	b508      	push	{r3, lr}
 808541a:	4b02      	ldr	r3, [pc, #8]	; (8085424 <HAL_ADC_Read+0xc>)
 808541c:	681b      	ldr	r3, [r3, #0]
 808541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085420:	9301      	str	r3, [sp, #4]
 8085422:	bd08      	pop	{r3, pc}
 8085424:	080401b0 	.word	0x080401b0

08085428 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 8085428:	b508      	push	{r3, lr}
 808542a:	4b02      	ldr	r3, [pc, #8]	; (8085434 <HAL_Set_System_Interrupt_Handler+0xc>)
 808542c:	681b      	ldr	r3, [r3, #0]
 808542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085430:	9301      	str	r3, [sp, #4]
 8085432:	bd08      	pop	{r3, pc}
 8085434:	080401b0 	.word	0x080401b0

08085438 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8085438:	b508      	push	{r3, lr}
 808543a:	4b02      	ldr	r3, [pc, #8]	; (8085444 <HAL_SPI_Begin+0xc>)
 808543c:	681b      	ldr	r3, [r3, #0]
 808543e:	681b      	ldr	r3, [r3, #0]
 8085440:	9301      	str	r3, [sp, #4]
 8085442:	bd08      	pop	{r3, pc}
 8085444:	080401b4 	.word	0x080401b4

08085448 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8085448:	b508      	push	{r3, lr}
 808544a:	4b02      	ldr	r3, [pc, #8]	; (8085454 <HAL_SPI_Send_Receive_Data+0xc>)
 808544c:	681b      	ldr	r3, [r3, #0]
 808544e:	695b      	ldr	r3, [r3, #20]
 8085450:	9301      	str	r3, [sp, #4]
 8085452:	bd08      	pop	{r3, pc}
 8085454:	080401b4 	.word	0x080401b4

08085458 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8085458:	b508      	push	{r3, lr}
 808545a:	4b02      	ldr	r3, [pc, #8]	; (8085464 <HAL_SPI_Init+0xc>)
 808545c:	681b      	ldr	r3, [r3, #0]
 808545e:	69db      	ldr	r3, [r3, #28]
 8085460:	9301      	str	r3, [sp, #4]
 8085462:	bd08      	pop	{r3, pc}
 8085464:	080401b4 	.word	0x080401b4

08085468 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8085468:	b508      	push	{r3, lr}
 808546a:	4b02      	ldr	r3, [pc, #8]	; (8085474 <HAL_SPI_Is_Enabled+0xc>)
 808546c:	681b      	ldr	r3, [r3, #0]
 808546e:	6a1b      	ldr	r3, [r3, #32]
 8085470:	9301      	str	r3, [sp, #4]
 8085472:	bd08      	pop	{r3, pc}
 8085474:	080401b4 	.word	0x080401b4

08085478 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8085478:	b508      	push	{r3, lr}
 808547a:	4b02      	ldr	r3, [pc, #8]	; (8085484 <HAL_SPI_Info+0xc>)
 808547c:	681b      	ldr	r3, [r3, #0]
 808547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085480:	9301      	str	r3, [sp, #4]
 8085482:	bd08      	pop	{r3, pc}
 8085484:	080401b4 	.word	0x080401b4

08085488 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8085488:	b508      	push	{r3, lr}
 808548a:	4b02      	ldr	r3, [pc, #8]	; (8085494 <HAL_SPI_DMA_Transfer+0xc>)
 808548c:	681b      	ldr	r3, [r3, #0]
 808548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085490:	9301      	str	r3, [sp, #4]
 8085492:	bd08      	pop	{r3, pc}
 8085494:	080401b4 	.word	0x080401b4

08085498 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8085498:	b508      	push	{r3, lr}
 808549a:	4b02      	ldr	r3, [pc, #8]	; (80854a4 <HAL_SPI_DMA_Transfer_Status+0xc>)
 808549c:	681b      	ldr	r3, [r3, #0]
 808549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80854a0:	9301      	str	r3, [sp, #4]
 80854a2:	bd08      	pop	{r3, pc}
 80854a4:	080401b4 	.word	0x080401b4

080854a8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80854a8:	b508      	push	{r3, lr}
 80854aa:	4b02      	ldr	r3, [pc, #8]	; (80854b4 <HAL_SPI_Set_Settings+0xc>)
 80854ac:	681b      	ldr	r3, [r3, #0]
 80854ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80854b0:	9301      	str	r3, [sp, #4]
 80854b2:	bd08      	pop	{r3, pc}
 80854b4:	080401b4 	.word	0x080401b4

080854b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80854b8:	b508      	push	{r3, lr}
 80854ba:	4b02      	ldr	r3, [pc, #8]	; (80854c4 <HAL_RNG_GetRandomNumber+0xc>)
 80854bc:	681b      	ldr	r3, [r3, #0]
 80854be:	685b      	ldr	r3, [r3, #4]
 80854c0:	9301      	str	r3, [sp, #4]
 80854c2:	bd08      	pop	{r3, pc}
 80854c4:	0804019c 	.word	0x0804019c

080854c8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80854c8:	b508      	push	{r3, lr}
 80854ca:	4b02      	ldr	r3, [pc, #8]	; (80854d4 <HAL_Delay_Milliseconds+0xc>)
 80854cc:	681b      	ldr	r3, [r3, #0]
 80854ce:	689b      	ldr	r3, [r3, #8]
 80854d0:	9301      	str	r3, [sp, #4]
 80854d2:	bd08      	pop	{r3, pc}
 80854d4:	0804019c 	.word	0x0804019c

080854d8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80854d8:	b508      	push	{r3, lr}
 80854da:	4b02      	ldr	r3, [pc, #8]	; (80854e4 <HAL_Delay_Microseconds+0xc>)
 80854dc:	681b      	ldr	r3, [r3, #0]
 80854de:	68db      	ldr	r3, [r3, #12]
 80854e0:	9301      	str	r3, [sp, #4]
 80854e2:	bd08      	pop	{r3, pc}
 80854e4:	0804019c 	.word	0x0804019c

080854e8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80854e8:	b508      	push	{r3, lr}
 80854ea:	4b02      	ldr	r3, [pc, #8]	; (80854f4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80854ec:	681b      	ldr	r3, [r3, #0]
 80854ee:	691b      	ldr	r3, [r3, #16]
 80854f0:	9301      	str	r3, [sp, #4]
 80854f2:	bd08      	pop	{r3, pc}
 80854f4:	0804019c 	.word	0x0804019c

080854f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80854f8:	b508      	push	{r3, lr}
 80854fa:	4b02      	ldr	r3, [pc, #8]	; (8085504 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80854fc:	681b      	ldr	r3, [r3, #0]
 80854fe:	695b      	ldr	r3, [r3, #20]
 8085500:	9301      	str	r3, [sp, #4]
 8085502:	bd08      	pop	{r3, pc}
 8085504:	0804019c 	.word	0x0804019c

08085508 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8085508:	b508      	push	{r3, lr}
 808550a:	4b02      	ldr	r3, [pc, #8]	; (8085514 <HAL_RTC_Get_UnixTime+0xc>)
 808550c:	681b      	ldr	r3, [r3, #0]
 808550e:	69db      	ldr	r3, [r3, #28]
 8085510:	9301      	str	r3, [sp, #4]
 8085512:	bd08      	pop	{r3, pc}
 8085514:	0804019c 	.word	0x0804019c

08085518 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8085518:	b508      	push	{r3, lr}
 808551a:	4b02      	ldr	r3, [pc, #8]	; (8085524 <HAL_RTC_Time_Is_Valid+0xc>)
 808551c:	681b      	ldr	r3, [r3, #0]
 808551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085520:	9301      	str	r3, [sp, #4]
 8085522:	bd08      	pop	{r3, pc}
 8085524:	0804019c 	.word	0x0804019c

08085528 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8085528:	b508      	push	{r3, lr}
 808552a:	4b02      	ldr	r3, [pc, #8]	; (8085534 <HAL_Core_System_Reset_Ex+0xc>)
 808552c:	681b      	ldr	r3, [r3, #0]
 808552e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085530:	9301      	str	r3, [sp, #4]
 8085532:	bd08      	pop	{r3, pc}
 8085534:	080401b8 	.word	0x080401b8

08085538 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8085538:	b508      	push	{r3, lr}
 808553a:	4b02      	ldr	r3, [pc, #8]	; (8085544 <os_thread_create+0xc>)
 808553c:	681b      	ldr	r3, [r3, #0]
 808553e:	685b      	ldr	r3, [r3, #4]
 8085540:	9301      	str	r3, [sp, #4]
 8085542:	bd08      	pop	{r3, pc}
 8085544:	080401d0 	.word	0x080401d0

08085548 <os_thread_cleanup>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8085548:	b508      	push	{r3, lr}
 808554a:	4b02      	ldr	r3, [pc, #8]	; (8085554 <os_thread_cleanup+0xc>)
 808554c:	681b      	ldr	r3, [r3, #0]
 808554e:	695b      	ldr	r3, [r3, #20]
 8085550:	9301      	str	r3, [sp, #4]
 8085552:	bd08      	pop	{r3, pc}
 8085554:	080401d0 	.word	0x080401d0

08085558 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8085558:	b508      	push	{r3, lr}
 808555a:	4b02      	ldr	r3, [pc, #8]	; (8085564 <os_mutex_recursive_create+0xc>)
 808555c:	681b      	ldr	r3, [r3, #0]
 808555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085560:	9301      	str	r3, [sp, #4]
 8085562:	bd08      	pop	{r3, pc}
 8085564:	080401d0 	.word	0x080401d0

08085568 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8085568:	b508      	push	{r3, lr}
 808556a:	4b02      	ldr	r3, [pc, #8]	; (8085574 <os_mutex_recursive_destroy+0xc>)
 808556c:	681b      	ldr	r3, [r3, #0]
 808556e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085570:	9301      	str	r3, [sp, #4]
 8085572:	bd08      	pop	{r3, pc}
 8085574:	080401d0 	.word	0x080401d0

08085578 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8085578:	b508      	push	{r3, lr}
 808557a:	4b02      	ldr	r3, [pc, #8]	; (8085584 <os_mutex_recursive_lock+0xc>)
 808557c:	681b      	ldr	r3, [r3, #0]
 808557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085580:	9301      	str	r3, [sp, #4]
 8085582:	bd08      	pop	{r3, pc}
 8085584:	080401d0 	.word	0x080401d0

08085588 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8085588:	b508      	push	{r3, lr}
 808558a:	4b02      	ldr	r3, [pc, #8]	; (8085594 <os_mutex_recursive_unlock+0xc>)
 808558c:	681b      	ldr	r3, [r3, #0]
 808558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085590:	9301      	str	r3, [sp, #4]
 8085592:	bd08      	pop	{r3, pc}
 8085594:	080401d0 	.word	0x080401d0

08085598 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8085598:	b508      	push	{r3, lr}
 808559a:	4b02      	ldr	r3, [pc, #8]	; (80855a4 <os_thread_exit+0xc>)
 808559c:	681b      	ldr	r3, [r3, #0]
 808559e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80855a0:	9301      	str	r3, [sp, #4]
 80855a2:	bd08      	pop	{r3, pc}
 80855a4:	080401d0 	.word	0x080401d0

080855a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80855a8:	b508      	push	{r3, lr}
 80855aa:	4b02      	ldr	r3, [pc, #8]	; (80855b4 <HAL_USART_Init+0xc>)
 80855ac:	681b      	ldr	r3, [r3, #0]
 80855ae:	699b      	ldr	r3, [r3, #24]
 80855b0:	9301      	str	r3, [sp, #4]
 80855b2:	bd08      	pop	{r3, pc}
 80855b4:	080401c4 	.word	0x080401c4

080855b8 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80855b8:	b508      	push	{r3, lr}
 80855ba:	4b02      	ldr	r3, [pc, #8]	; (80855c4 <HAL_USART_End+0xc>)
 80855bc:	681b      	ldr	r3, [r3, #0]
 80855be:	6a1b      	ldr	r3, [r3, #32]
 80855c0:	9301      	str	r3, [sp, #4]
 80855c2:	bd08      	pop	{r3, pc}
 80855c4:	080401c4 	.word	0x080401c4

080855c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80855c8:	b508      	push	{r3, lr}
 80855ca:	4b02      	ldr	r3, [pc, #8]	; (80855d4 <HAL_USART_Write_Data+0xc>)
 80855cc:	681b      	ldr	r3, [r3, #0]
 80855ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80855d0:	9301      	str	r3, [sp, #4]
 80855d2:	bd08      	pop	{r3, pc}
 80855d4:	080401c4 	.word	0x080401c4

080855d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80855d8:	b508      	push	{r3, lr}
 80855da:	4b02      	ldr	r3, [pc, #8]	; (80855e4 <HAL_USART_Available_Data+0xc>)
 80855dc:	681b      	ldr	r3, [r3, #0]
 80855de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80855e0:	9301      	str	r3, [sp, #4]
 80855e2:	bd08      	pop	{r3, pc}
 80855e4:	080401c4 	.word	0x080401c4

080855e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80855e8:	b508      	push	{r3, lr}
 80855ea:	4b02      	ldr	r3, [pc, #8]	; (80855f4 <HAL_USART_Read_Data+0xc>)
 80855ec:	681b      	ldr	r3, [r3, #0]
 80855ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80855f0:	9301      	str	r3, [sp, #4]
 80855f2:	bd08      	pop	{r3, pc}
 80855f4:	080401c4 	.word	0x080401c4

080855f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80855f8:	b508      	push	{r3, lr}
 80855fa:	4b02      	ldr	r3, [pc, #8]	; (8085604 <HAL_USART_Peek_Data+0xc>)
 80855fc:	681b      	ldr	r3, [r3, #0]
 80855fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085600:	9301      	str	r3, [sp, #4]
 8085602:	bd08      	pop	{r3, pc}
 8085604:	080401c4 	.word	0x080401c4

08085608 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8085608:	b508      	push	{r3, lr}
 808560a:	4b02      	ldr	r3, [pc, #8]	; (8085614 <HAL_USART_Flush_Data+0xc>)
 808560c:	681b      	ldr	r3, [r3, #0]
 808560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085610:	9301      	str	r3, [sp, #4]
 8085612:	bd08      	pop	{r3, pc}
 8085614:	080401c4 	.word	0x080401c4

08085618 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8085618:	b508      	push	{r3, lr}
 808561a:	4b02      	ldr	r3, [pc, #8]	; (8085624 <HAL_USART_Is_Enabled+0xc>)
 808561c:	681b      	ldr	r3, [r3, #0]
 808561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085620:	9301      	str	r3, [sp, #4]
 8085622:	bd08      	pop	{r3, pc}
 8085624:	080401c4 	.word	0x080401c4

08085628 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8085628:	b508      	push	{r3, lr}
 808562a:	4b02      	ldr	r3, [pc, #8]	; (8085634 <HAL_USART_Available_Data_For_Write+0xc>)
 808562c:	681b      	ldr	r3, [r3, #0]
 808562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085630:	9301      	str	r3, [sp, #4]
 8085632:	bd08      	pop	{r3, pc}
 8085634:	080401c4 	.word	0x080401c4

08085638 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8085638:	b508      	push	{r3, lr}
 808563a:	4b02      	ldr	r3, [pc, #8]	; (8085644 <HAL_USART_BeginConfig+0xc>)
 808563c:	681b      	ldr	r3, [r3, #0]
 808563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085640:	9301      	str	r3, [sp, #4]
 8085642:	bd08      	pop	{r3, pc}
 8085644:	080401c4 	.word	0x080401c4

08085648 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8085648:	b508      	push	{r3, lr}
 808564a:	4b02      	ldr	r3, [pc, #8]	; (8085654 <HAL_I2C_Begin+0xc>)
 808564c:	681b      	ldr	r3, [r3, #0]
 808564e:	68db      	ldr	r3, [r3, #12]
 8085650:	9301      	str	r3, [sp, #4]
 8085652:	bd08      	pop	{r3, pc}
 8085654:	080401ac 	.word	0x080401ac

08085658 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8085658:	b508      	push	{r3, lr}
 808565a:	4b02      	ldr	r3, [pc, #8]	; (8085664 <HAL_I2C_Begin_Transmission+0xc>)
 808565c:	681b      	ldr	r3, [r3, #0]
 808565e:	699b      	ldr	r3, [r3, #24]
 8085660:	9301      	str	r3, [sp, #4]
 8085662:	bd08      	pop	{r3, pc}
 8085664:	080401ac 	.word	0x080401ac

08085668 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8085668:	b508      	push	{r3, lr}
 808566a:	4b02      	ldr	r3, [pc, #8]	; (8085674 <HAL_I2C_End_Transmission+0xc>)
 808566c:	681b      	ldr	r3, [r3, #0]
 808566e:	69db      	ldr	r3, [r3, #28]
 8085670:	9301      	str	r3, [sp, #4]
 8085672:	bd08      	pop	{r3, pc}
 8085674:	080401ac 	.word	0x080401ac

08085678 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8085678:	b508      	push	{r3, lr}
 808567a:	4b02      	ldr	r3, [pc, #8]	; (8085684 <HAL_I2C_Write_Data+0xc>)
 808567c:	681b      	ldr	r3, [r3, #0]
 808567e:	6a1b      	ldr	r3, [r3, #32]
 8085680:	9301      	str	r3, [sp, #4]
 8085682:	bd08      	pop	{r3, pc}
 8085684:	080401ac 	.word	0x080401ac

08085688 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8085688:	b508      	push	{r3, lr}
 808568a:	4b02      	ldr	r3, [pc, #8]	; (8085694 <HAL_I2C_Available_Data+0xc>)
 808568c:	681b      	ldr	r3, [r3, #0]
 808568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085690:	9301      	str	r3, [sp, #4]
 8085692:	bd08      	pop	{r3, pc}
 8085694:	080401ac 	.word	0x080401ac

08085698 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8085698:	b508      	push	{r3, lr}
 808569a:	4b02      	ldr	r3, [pc, #8]	; (80856a4 <HAL_I2C_Read_Data+0xc>)
 808569c:	681b      	ldr	r3, [r3, #0]
 808569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80856a0:	9301      	str	r3, [sp, #4]
 80856a2:	bd08      	pop	{r3, pc}
 80856a4:	080401ac 	.word	0x080401ac

080856a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80856a8:	b508      	push	{r3, lr}
 80856aa:	4b02      	ldr	r3, [pc, #8]	; (80856b4 <HAL_I2C_Peek_Data+0xc>)
 80856ac:	681b      	ldr	r3, [r3, #0]
 80856ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80856b0:	9301      	str	r3, [sp, #4]
 80856b2:	bd08      	pop	{r3, pc}
 80856b4:	080401ac 	.word	0x080401ac

080856b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80856b8:	b508      	push	{r3, lr}
 80856ba:	4b02      	ldr	r3, [pc, #8]	; (80856c4 <HAL_I2C_Flush_Data+0xc>)
 80856bc:	681b      	ldr	r3, [r3, #0]
 80856be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80856c0:	9301      	str	r3, [sp, #4]
 80856c2:	bd08      	pop	{r3, pc}
 80856c4:	080401ac 	.word	0x080401ac

080856c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80856c8:	b508      	push	{r3, lr}
 80856ca:	4b02      	ldr	r3, [pc, #8]	; (80856d4 <HAL_I2C_Is_Enabled+0xc>)
 80856cc:	681b      	ldr	r3, [r3, #0]
 80856ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80856d0:	9301      	str	r3, [sp, #4]
 80856d2:	bd08      	pop	{r3, pc}
 80856d4:	080401ac 	.word	0x080401ac

080856d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80856d8:	b508      	push	{r3, lr}
 80856da:	4b02      	ldr	r3, [pc, #8]	; (80856e4 <HAL_I2C_Init+0xc>)
 80856dc:	681b      	ldr	r3, [r3, #0]
 80856de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80856e0:	9301      	str	r3, [sp, #4]
 80856e2:	bd08      	pop	{r3, pc}
 80856e4:	080401ac 	.word	0x080401ac

080856e8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80856e8:	b508      	push	{r3, lr}
 80856ea:	4b02      	ldr	r3, [pc, #8]	; (80856f4 <HAL_I2C_Acquire+0xc>)
 80856ec:	681b      	ldr	r3, [r3, #0]
 80856ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80856f0:	9301      	str	r3, [sp, #4]
 80856f2:	bd08      	pop	{r3, pc}
 80856f4:	080401ac 	.word	0x080401ac

080856f8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80856f8:	b508      	push	{r3, lr}
 80856fa:	4b02      	ldr	r3, [pc, #8]	; (8085704 <HAL_I2C_Release+0xc>)
 80856fc:	681b      	ldr	r3, [r3, #0]
 80856fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085700:	9301      	str	r3, [sp, #4]
 8085702:	bd08      	pop	{r3, pc}
 8085704:	080401ac 	.word	0x080401ac

08085708 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8085708:	b508      	push	{r3, lr}
 808570a:	4b02      	ldr	r3, [pc, #8]	; (8085714 <HAL_I2C_Request_Data_Ex+0xc>)
 808570c:	681b      	ldr	r3, [r3, #0]
 808570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085710:	9301      	str	r3, [sp, #4]
 8085712:	bd08      	pop	{r3, pc}
 8085714:	080401ac 	.word	0x080401ac

08085718 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8085718:	b508      	push	{r3, lr}
 808571a:	4b02      	ldr	r3, [pc, #8]	; (8085724 <socket_active_status+0xc>)
 808571c:	681b      	ldr	r3, [r3, #0]
 808571e:	681b      	ldr	r3, [r3, #0]
 8085720:	9301      	str	r3, [sp, #4]
 8085722:	bd08      	pop	{r3, pc}
 8085724:	08060024 	.word	0x08060024

08085728 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8085728:	b508      	push	{r3, lr}
 808572a:	4b02      	ldr	r3, [pc, #8]	; (8085734 <socket_handle_valid+0xc>)
 808572c:	681b      	ldr	r3, [r3, #0]
 808572e:	685b      	ldr	r3, [r3, #4]
 8085730:	9301      	str	r3, [sp, #4]
 8085732:	bd08      	pop	{r3, pc}
 8085734:	08060024 	.word	0x08060024

08085738 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8085738:	b508      	push	{r3, lr}
 808573a:	4b02      	ldr	r3, [pc, #8]	; (8085744 <socket_create+0xc>)
 808573c:	681b      	ldr	r3, [r3, #0]
 808573e:	689b      	ldr	r3, [r3, #8]
 8085740:	9301      	str	r3, [sp, #4]
 8085742:	bd08      	pop	{r3, pc}
 8085744:	08060024 	.word	0x08060024

08085748 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8085748:	b508      	push	{r3, lr}
 808574a:	4b02      	ldr	r3, [pc, #8]	; (8085754 <socket_connect+0xc>)
 808574c:	681b      	ldr	r3, [r3, #0]
 808574e:	68db      	ldr	r3, [r3, #12]
 8085750:	9301      	str	r3, [sp, #4]
 8085752:	bd08      	pop	{r3, pc}
 8085754:	08060024 	.word	0x08060024

08085758 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8085758:	b508      	push	{r3, lr}
 808575a:	4b02      	ldr	r3, [pc, #8]	; (8085764 <socket_receive+0xc>)
 808575c:	681b      	ldr	r3, [r3, #0]
 808575e:	691b      	ldr	r3, [r3, #16]
 8085760:	9301      	str	r3, [sp, #4]
 8085762:	bd08      	pop	{r3, pc}
 8085764:	08060024 	.word	0x08060024

08085768 <socket_receivefrom>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 8085768:	b508      	push	{r3, lr}
 808576a:	4b02      	ldr	r3, [pc, #8]	; (8085774 <socket_receivefrom+0xc>)
 808576c:	681b      	ldr	r3, [r3, #0]
 808576e:	695b      	ldr	r3, [r3, #20]
 8085770:	9301      	str	r3, [sp, #4]
 8085772:	bd08      	pop	{r3, pc}
 8085774:	08060024 	.word	0x08060024

08085778 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 8085778:	b508      	push	{r3, lr}
 808577a:	4b02      	ldr	r3, [pc, #8]	; (8085784 <socket_sendto+0xc>)
 808577c:	681b      	ldr	r3, [r3, #0]
 808577e:	69db      	ldr	r3, [r3, #28]
 8085780:	9301      	str	r3, [sp, #4]
 8085782:	bd08      	pop	{r3, pc}
 8085784:	08060024 	.word	0x08060024

08085788 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8085788:	b508      	push	{r3, lr}
 808578a:	4b02      	ldr	r3, [pc, #8]	; (8085794 <socket_close+0xc>)
 808578c:	681b      	ldr	r3, [r3, #0]
 808578e:	6a1b      	ldr	r3, [r3, #32]
 8085790:	9301      	str	r3, [sp, #4]
 8085792:	bd08      	pop	{r3, pc}
 8085794:	08060024 	.word	0x08060024

08085798 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8085798:	b508      	push	{r3, lr}
 808579a:	4b02      	ldr	r3, [pc, #8]	; (80857a4 <socket_handle_invalid+0xc>)
 808579c:	681b      	ldr	r3, [r3, #0]
 808579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80857a0:	9301      	str	r3, [sp, #4]
 80857a2:	bd08      	pop	{r3, pc}
 80857a4:	08060024 	.word	0x08060024

080857a8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80857a8:	b508      	push	{r3, lr}
 80857aa:	4b02      	ldr	r3, [pc, #8]	; (80857b4 <socket_send_ex+0xc>)
 80857ac:	681b      	ldr	r3, [r3, #0]
 80857ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80857b0:	9301      	str	r3, [sp, #4]
 80857b2:	bd08      	pop	{r3, pc}
 80857b4:	08060024 	.word	0x08060024

080857b8 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80857b8:	b508      	push	{r3, lr}
 80857ba:	4b02      	ldr	r3, [pc, #8]	; (80857c4 <HAL_NET_SetNetWatchDog+0xc>)
 80857bc:	681b      	ldr	r3, [r3, #0]
 80857be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80857c0:	9301      	str	r3, [sp, #4]
 80857c2:	bd08      	pop	{r3, pc}
 80857c4:	08060020 	.word	0x08060020

080857c8 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80857c8:	b508      	push	{r3, lr}
 80857ca:	4b02      	ldr	r3, [pc, #8]	; (80857d4 <inet_gethostbyname+0xc>)
 80857cc:	681b      	ldr	r3, [r3, #0]
 80857ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80857d0:	9301      	str	r3, [sp, #4]
 80857d2:	bd08      	pop	{r3, pc}
 80857d4:	08060020 	.word	0x08060020

080857d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80857d8:	b508      	push	{r3, lr}
 80857da:	4b02      	ldr	r3, [pc, #8]	; (80857e4 <HAL_USB_USART_Init+0xc>)
 80857dc:	681b      	ldr	r3, [r3, #0]
 80857de:	681b      	ldr	r3, [r3, #0]
 80857e0:	9301      	str	r3, [sp, #4]
 80857e2:	bd08      	pop	{r3, pc}
 80857e4:	0806001c 	.word	0x0806001c

080857e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80857e8:	b508      	push	{r3, lr}
 80857ea:	4b02      	ldr	r3, [pc, #8]	; (80857f4 <HAL_USB_USART_Begin+0xc>)
 80857ec:	681b      	ldr	r3, [r3, #0]
 80857ee:	685b      	ldr	r3, [r3, #4]
 80857f0:	9301      	str	r3, [sp, #4]
 80857f2:	bd08      	pop	{r3, pc}
 80857f4:	0806001c 	.word	0x0806001c

080857f8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80857f8:	b508      	push	{r3, lr}
 80857fa:	4b02      	ldr	r3, [pc, #8]	; (8085804 <HAL_USB_USART_End+0xc>)
 80857fc:	681b      	ldr	r3, [r3, #0]
 80857fe:	689b      	ldr	r3, [r3, #8]
 8085800:	9301      	str	r3, [sp, #4]
 8085802:	bd08      	pop	{r3, pc}
 8085804:	0806001c 	.word	0x0806001c

08085808 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8085808:	b508      	push	{r3, lr}
 808580a:	4b02      	ldr	r3, [pc, #8]	; (8085814 <HAL_USB_USART_Available_Data+0xc>)
 808580c:	681b      	ldr	r3, [r3, #0]
 808580e:	691b      	ldr	r3, [r3, #16]
 8085810:	9301      	str	r3, [sp, #4]
 8085812:	bd08      	pop	{r3, pc}
 8085814:	0806001c 	.word	0x0806001c

08085818 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8085818:	b508      	push	{r3, lr}
 808581a:	4b02      	ldr	r3, [pc, #8]	; (8085824 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808581c:	681b      	ldr	r3, [r3, #0]
 808581e:	695b      	ldr	r3, [r3, #20]
 8085820:	9301      	str	r3, [sp, #4]
 8085822:	bd08      	pop	{r3, pc}
 8085824:	0806001c 	.word	0x0806001c

08085828 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8085828:	b508      	push	{r3, lr}
 808582a:	4b02      	ldr	r3, [pc, #8]	; (8085834 <HAL_USB_USART_Receive_Data+0xc>)
 808582c:	681b      	ldr	r3, [r3, #0]
 808582e:	699b      	ldr	r3, [r3, #24]
 8085830:	9301      	str	r3, [sp, #4]
 8085832:	bd08      	pop	{r3, pc}
 8085834:	0806001c 	.word	0x0806001c

08085838 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8085838:	b508      	push	{r3, lr}
 808583a:	4b02      	ldr	r3, [pc, #8]	; (8085844 <HAL_USB_USART_Send_Data+0xc>)
 808583c:	681b      	ldr	r3, [r3, #0]
 808583e:	69db      	ldr	r3, [r3, #28]
 8085840:	9301      	str	r3, [sp, #4]
 8085842:	bd08      	pop	{r3, pc}
 8085844:	0806001c 	.word	0x0806001c

08085848 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8085848:	b508      	push	{r3, lr}
 808584a:	4b02      	ldr	r3, [pc, #8]	; (8085854 <HAL_USB_USART_Flush_Data+0xc>)
 808584c:	681b      	ldr	r3, [r3, #0]
 808584e:	6a1b      	ldr	r3, [r3, #32]
 8085850:	9301      	str	r3, [sp, #4]
 8085852:	bd08      	pop	{r3, pc}
 8085854:	0806001c 	.word	0x0806001c

08085858 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8085858:	b508      	push	{r3, lr}
 808585a:	4b02      	ldr	r3, [pc, #8]	; (8085864 <panic_+0xc>)
 808585c:	681b      	ldr	r3, [r3, #0]
 808585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085860:	9301      	str	r3, [sp, #4]
 8085862:	bd08      	pop	{r3, pc}
 8085864:	080201a0 	.word	0x080201a0

08085868 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8085868:	b508      	push	{r3, lr}
 808586a:	4b02      	ldr	r3, [pc, #8]	; (8085874 <log_message+0xc>)
 808586c:	681b      	ldr	r3, [r3, #0]
 808586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085870:	9301      	str	r3, [sp, #4]
 8085872:	bd08      	pop	{r3, pc}
 8085874:	080201a0 	.word	0x080201a0

08085878 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8085878:	b508      	push	{r3, lr}
 808587a:	4b02      	ldr	r3, [pc, #8]	; (8085884 <log_message_v+0xc>)
 808587c:	681b      	ldr	r3, [r3, #0]
 808587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085880:	9301      	str	r3, [sp, #4]
 8085882:	bd08      	pop	{r3, pc}
 8085884:	080201a0 	.word	0x080201a0

08085888 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8085888:	b508      	push	{r3, lr}
 808588a:	4b02      	ldr	r3, [pc, #8]	; (8085894 <log_level_name+0xc>)
 808588c:	681b      	ldr	r3, [r3, #0]
 808588e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085890:	9301      	str	r3, [sp, #4]
 8085892:	bd08      	pop	{r3, pc}
 8085894:	080201a0 	.word	0x080201a0

08085898 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8085898:	b508      	push	{r3, lr}
 808589a:	4b02      	ldr	r3, [pc, #8]	; (80858a4 <log_set_callbacks+0xc>)
 808589c:	681b      	ldr	r3, [r3, #0]
 808589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80858a0:	9301      	str	r3, [sp, #4]
 80858a2:	bd08      	pop	{r3, pc}
 80858a4:	080201a0 	.word	0x080201a0

080858a8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80858a8:	b508      	push	{r3, lr}
 80858aa:	4b02      	ldr	r3, [pc, #8]	; (80858b4 <system_mode+0xc>)
 80858ac:	681b      	ldr	r3, [r3, #0]
 80858ae:	681b      	ldr	r3, [r3, #0]
 80858b0:	9301      	str	r3, [sp, #4]
 80858b2:	bd08      	pop	{r3, pc}
 80858b4:	080401a4 	.word	0x080401a4

080858b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80858b8:	b508      	push	{r3, lr}
 80858ba:	4b02      	ldr	r3, [pc, #8]	; (80858c4 <set_system_mode+0xc>)
 80858bc:	681b      	ldr	r3, [r3, #0]
 80858be:	685b      	ldr	r3, [r3, #4]
 80858c0:	9301      	str	r3, [sp, #4]
 80858c2:	bd08      	pop	{r3, pc}
 80858c4:	080401a4 	.word	0x080401a4

080858c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80858c8:	b508      	push	{r3, lr}
 80858ca:	4b02      	ldr	r3, [pc, #8]	; (80858d4 <system_delay_ms+0xc>)
 80858cc:	681b      	ldr	r3, [r3, #0]
 80858ce:	695b      	ldr	r3, [r3, #20]
 80858d0:	9301      	str	r3, [sp, #4]
 80858d2:	bd08      	pop	{r3, pc}
 80858d4:	080401a4 	.word	0x080401a4

080858d8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80858d8:	b508      	push	{r3, lr}
 80858da:	4b02      	ldr	r3, [pc, #8]	; (80858e4 <system_sleep+0xc>)
 80858dc:	681b      	ldr	r3, [r3, #0]
 80858de:	699b      	ldr	r3, [r3, #24]
 80858e0:	9301      	str	r3, [sp, #4]
 80858e2:	bd08      	pop	{r3, pc}
 80858e4:	080401a4 	.word	0x080401a4

080858e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80858e8:	b508      	push	{r3, lr}
 80858ea:	4b02      	ldr	r3, [pc, #8]	; (80858f4 <application_thread_current+0xc>)
 80858ec:	681b      	ldr	r3, [r3, #0]
 80858ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80858f0:	9301      	str	r3, [sp, #4]
 80858f2:	bd08      	pop	{r3, pc}
 80858f4:	080401a4 	.word	0x080401a4

080858f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80858f8:	b508      	push	{r3, lr}
 80858fa:	4b02      	ldr	r3, [pc, #8]	; (8085904 <application_thread_invoke+0xc>)
 80858fc:	681b      	ldr	r3, [r3, #0]
 80858fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085900:	9301      	str	r3, [sp, #4]
 8085902:	bd08      	pop	{r3, pc}
 8085904:	080401a4 	.word	0x080401a4

08085908 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8085908:	b508      	push	{r3, lr}
 808590a:	4b02      	ldr	r3, [pc, #8]	; (8085914 <system_thread_get_state+0xc>)
 808590c:	681b      	ldr	r3, [r3, #0]
 808590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085910:	9301      	str	r3, [sp, #4]
 8085912:	bd08      	pop	{r3, pc}
 8085914:	080401a4 	.word	0x080401a4

08085918 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8085918:	b508      	push	{r3, lr}
 808591a:	4b03      	ldr	r3, [pc, #12]	; (8085928 <system_ctrl_set_app_request_handler+0x10>)
 808591c:	681b      	ldr	r3, [r3, #0]
 808591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8085922:	9301      	str	r3, [sp, #4]
 8085924:	bd08      	pop	{r3, pc}
 8085926:	0000      	.short	0x0000
 8085928:	080401a4 	.word	0x080401a4

0808592c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808592c:	b508      	push	{r3, lr}
 808592e:	4b03      	ldr	r3, [pc, #12]	; (808593c <system_ctrl_set_result+0x10>)
 8085930:	681b      	ldr	r3, [r3, #0]
 8085932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8085936:	9301      	str	r3, [sp, #4]
 8085938:	bd08      	pop	{r3, pc}
 808593a:	0000      	.short	0x0000
 808593c:	080401a4 	.word	0x080401a4

08085940 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 8085940:	b508      	push	{r3, lr}
 8085942:	4b03      	ldr	r3, [pc, #12]	; (8085950 <system_power_management_set_config+0x10>)
 8085944:	681b      	ldr	r3, [r3, #0]
 8085946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 808594a:	9301      	str	r3, [sp, #4]
 808594c:	bd08      	pop	{r3, pc}
 808594e:	0000      	.short	0x0000
 8085950:	080401a4 	.word	0x080401a4

08085954 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8085954:	b508      	push	{r3, lr}
 8085956:	4b02      	ldr	r3, [pc, #8]	; (8085960 <network_connect+0xc>)
 8085958:	681b      	ldr	r3, [r3, #0]
 808595a:	685b      	ldr	r3, [r3, #4]
 808595c:	9301      	str	r3, [sp, #4]
 808595e:	bd08      	pop	{r3, pc}
 8085960:	080401c8 	.word	0x080401c8

08085964 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8085964:	b508      	push	{r3, lr}
 8085966:	4b02      	ldr	r3, [pc, #8]	; (8085970 <network_connecting+0xc>)
 8085968:	681b      	ldr	r3, [r3, #0]
 808596a:	689b      	ldr	r3, [r3, #8]
 808596c:	9301      	str	r3, [sp, #4]
 808596e:	bd08      	pop	{r3, pc}
 8085970:	080401c8 	.word	0x080401c8

08085974 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8085974:	b508      	push	{r3, lr}
 8085976:	4b02      	ldr	r3, [pc, #8]	; (8085980 <network_disconnect+0xc>)
 8085978:	681b      	ldr	r3, [r3, #0]
 808597a:	68db      	ldr	r3, [r3, #12]
 808597c:	9301      	str	r3, [sp, #4]
 808597e:	bd08      	pop	{r3, pc}
 8085980:	080401c8 	.word	0x080401c8

08085984 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8085984:	b508      	push	{r3, lr}
 8085986:	4b02      	ldr	r3, [pc, #8]	; (8085990 <network_ready+0xc>)
 8085988:	681b      	ldr	r3, [r3, #0]
 808598a:	691b      	ldr	r3, [r3, #16]
 808598c:	9301      	str	r3, [sp, #4]
 808598e:	bd08      	pop	{r3, pc}
 8085990:	080401c8 	.word	0x080401c8

08085994 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8085994:	b508      	push	{r3, lr}
 8085996:	4b02      	ldr	r3, [pc, #8]	; (80859a0 <network_on+0xc>)
 8085998:	681b      	ldr	r3, [r3, #0]
 808599a:	695b      	ldr	r3, [r3, #20]
 808599c:	9301      	str	r3, [sp, #4]
 808599e:	bd08      	pop	{r3, pc}
 80859a0:	080401c8 	.word	0x080401c8

080859a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80859a4:	b508      	push	{r3, lr}
 80859a6:	4b02      	ldr	r3, [pc, #8]	; (80859b0 <network_off+0xc>)
 80859a8:	681b      	ldr	r3, [r3, #0]
 80859aa:	699b      	ldr	r3, [r3, #24]
 80859ac:	9301      	str	r3, [sp, #4]
 80859ae:	bd08      	pop	{r3, pc}
 80859b0:	080401c8 	.word	0x080401c8

080859b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80859b4:	b508      	push	{r3, lr}
 80859b6:	4b02      	ldr	r3, [pc, #8]	; (80859c0 <network_listen+0xc>)
 80859b8:	681b      	ldr	r3, [r3, #0]
 80859ba:	69db      	ldr	r3, [r3, #28]
 80859bc:	9301      	str	r3, [sp, #4]
 80859be:	bd08      	pop	{r3, pc}
 80859c0:	080401c8 	.word	0x080401c8

080859c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80859c4:	b508      	push	{r3, lr}
 80859c6:	4b02      	ldr	r3, [pc, #8]	; (80859d0 <network_listening+0xc>)
 80859c8:	681b      	ldr	r3, [r3, #0]
 80859ca:	6a1b      	ldr	r3, [r3, #32]
 80859cc:	9301      	str	r3, [sp, #4]
 80859ce:	bd08      	pop	{r3, pc}
 80859d0:	080401c8 	.word	0x080401c8

080859d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80859d4:	b508      	push	{r3, lr}
 80859d6:	4b02      	ldr	r3, [pc, #8]	; (80859e0 <network_set_listen_timeout+0xc>)
 80859d8:	681b      	ldr	r3, [r3, #0]
 80859da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80859dc:	9301      	str	r3, [sp, #4]
 80859de:	bd08      	pop	{r3, pc}
 80859e0:	080401c8 	.word	0x080401c8

080859e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80859e4:	b508      	push	{r3, lr}
 80859e6:	4b02      	ldr	r3, [pc, #8]	; (80859f0 <network_get_listen_timeout+0xc>)
 80859e8:	681b      	ldr	r3, [r3, #0]
 80859ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80859ec:	9301      	str	r3, [sp, #4]
 80859ee:	bd08      	pop	{r3, pc}
 80859f0:	080401c8 	.word	0x080401c8

080859f4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80859f4:	b508      	push	{r3, lr}
 80859f6:	4b02      	ldr	r3, [pc, #8]	; (8085a00 <spark_function+0xc>)
 80859f8:	681b      	ldr	r3, [r3, #0]
 80859fa:	685b      	ldr	r3, [r3, #4]
 80859fc:	9301      	str	r3, [sp, #4]
 80859fe:	bd08      	pop	{r3, pc}
 8085a00:	080401cc 	.word	0x080401cc

08085a04 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8085a04:	b508      	push	{r3, lr}
 8085a06:	4b02      	ldr	r3, [pc, #8]	; (8085a10 <spark_process+0xc>)
 8085a08:	681b      	ldr	r3, [r3, #0]
 8085a0a:	689b      	ldr	r3, [r3, #8]
 8085a0c:	9301      	str	r3, [sp, #4]
 8085a0e:	bd08      	pop	{r3, pc}
 8085a10:	080401cc 	.word	0x080401cc

08085a14 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8085a14:	b508      	push	{r3, lr}
 8085a16:	4b02      	ldr	r3, [pc, #8]	; (8085a20 <spark_cloud_flag_connected+0xc>)
 8085a18:	681b      	ldr	r3, [r3, #0]
 8085a1a:	695b      	ldr	r3, [r3, #20]
 8085a1c:	9301      	str	r3, [sp, #4]
 8085a1e:	bd08      	pop	{r3, pc}
 8085a20:	080401cc 	.word	0x080401cc

08085a24 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8085a24:	b508      	push	{r3, lr}
 8085a26:	4b02      	ldr	r3, [pc, #8]	; (8085a30 <spark_deviceID+0xc>)
 8085a28:	681b      	ldr	r3, [r3, #0]
 8085a2a:	69db      	ldr	r3, [r3, #28]
 8085a2c:	9301      	str	r3, [sp, #4]
 8085a2e:	bd08      	pop	{r3, pc}
 8085a30:	080401cc 	.word	0x080401cc

08085a34 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8085a34:	b508      	push	{r3, lr}
 8085a36:	4b02      	ldr	r3, [pc, #8]	; (8085a40 <spark_send_event+0xc>)
 8085a38:	681b      	ldr	r3, [r3, #0]
 8085a3a:	6a1b      	ldr	r3, [r3, #32]
 8085a3c:	9301      	str	r3, [sp, #4]
 8085a3e:	bd08      	pop	{r3, pc}
 8085a40:	080401cc 	.word	0x080401cc

08085a44 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8085a44:	b508      	push	{r3, lr}
 8085a46:	4b02      	ldr	r3, [pc, #8]	; (8085a50 <spark_sync_time_pending+0xc>)
 8085a48:	681b      	ldr	r3, [r3, #0]
 8085a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085a4c:	9301      	str	r3, [sp, #4]
 8085a4e:	bd08      	pop	{r3, pc}
 8085a50:	080401cc 	.word	0x080401cc

08085a54 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8085a54:	b508      	push	{r3, lr}
 8085a56:	4b02      	ldr	r3, [pc, #8]	; (8085a60 <spark_set_random_seed_from_cloud_handler+0xc>)
 8085a58:	681b      	ldr	r3, [r3, #0]
 8085a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085a5c:	9301      	str	r3, [sp, #4]
 8085a5e:	bd08      	pop	{r3, pc}
 8085a60:	080401cc 	.word	0x080401cc

08085a64 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8085a64:	b508      	push	{r3, lr}
 8085a66:	4b02      	ldr	r3, [pc, #8]	; (8085a70 <malloc+0xc>)
 8085a68:	681b      	ldr	r3, [r3, #0]
 8085a6a:	681b      	ldr	r3, [r3, #0]
 8085a6c:	9301      	str	r3, [sp, #4]
 8085a6e:	bd08      	pop	{r3, pc}
 8085a70:	080401a0 	.word	0x080401a0

08085a74 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8085a74:	b508      	push	{r3, lr}
 8085a76:	4b02      	ldr	r3, [pc, #8]	; (8085a80 <free+0xc>)
 8085a78:	681b      	ldr	r3, [r3, #0]
 8085a7a:	685b      	ldr	r3, [r3, #4]
 8085a7c:	9301      	str	r3, [sp, #4]
 8085a7e:	bd08      	pop	{r3, pc}
 8085a80:	080401a0 	.word	0x080401a0

08085a84 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8085a84:	b508      	push	{r3, lr}
 8085a86:	4b02      	ldr	r3, [pc, #8]	; (8085a90 <realloc+0xc>)
 8085a88:	681b      	ldr	r3, [r3, #0]
 8085a8a:	689b      	ldr	r3, [r3, #8]
 8085a8c:	9301      	str	r3, [sp, #4]
 8085a8e:	bd08      	pop	{r3, pc}
 8085a90:	080401a0 	.word	0x080401a0

08085a94 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8085a94:	b508      	push	{r3, lr}
 8085a96:	4b02      	ldr	r3, [pc, #8]	; (8085aa0 <sprintf+0xc>)
 8085a98:	681b      	ldr	r3, [r3, #0]
 8085a9a:	68db      	ldr	r3, [r3, #12]
 8085a9c:	9301      	str	r3, [sp, #4]
 8085a9e:	bd08      	pop	{r3, pc}
 8085aa0:	080401a0 	.word	0x080401a0

08085aa4 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8085aa4:	b508      	push	{r3, lr}
 8085aa6:	4b02      	ldr	r3, [pc, #8]	; (8085ab0 <siprintf+0xc>)
 8085aa8:	681b      	ldr	r3, [r3, #0]
 8085aaa:	691b      	ldr	r3, [r3, #16]
 8085aac:	9301      	str	r3, [sp, #4]
 8085aae:	bd08      	pop	{r3, pc}
 8085ab0:	080401a0 	.word	0x080401a0

08085ab4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8085ab4:	b508      	push	{r3, lr}
 8085ab6:	4b02      	ldr	r3, [pc, #8]	; (8085ac0 <siscanf+0xc>)
 8085ab8:	681b      	ldr	r3, [r3, #0]
 8085aba:	699b      	ldr	r3, [r3, #24]
 8085abc:	9301      	str	r3, [sp, #4]
 8085abe:	bd08      	pop	{r3, pc}
 8085ac0:	080401a0 	.word	0x080401a0

08085ac4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8085ac4:	b508      	push	{r3, lr}
 8085ac6:	4b02      	ldr	r3, [pc, #8]	; (8085ad0 <snprintf+0xc>)
 8085ac8:	681b      	ldr	r3, [r3, #0]
 8085aca:	69db      	ldr	r3, [r3, #28]
 8085acc:	9301      	str	r3, [sp, #4]
 8085ace:	bd08      	pop	{r3, pc}
 8085ad0:	080401a0 	.word	0x080401a0

08085ad4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8085ad4:	b508      	push	{r3, lr}
 8085ad6:	4b02      	ldr	r3, [pc, #8]	; (8085ae0 <sniprintf+0xc>)
 8085ad8:	681b      	ldr	r3, [r3, #0]
 8085ada:	6a1b      	ldr	r3, [r3, #32]
 8085adc:	9301      	str	r3, [sp, #4]
 8085ade:	bd08      	pop	{r3, pc}
 8085ae0:	080401a0 	.word	0x080401a0

08085ae4 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8085ae4:	b508      	push	{r3, lr}
 8085ae6:	4b02      	ldr	r3, [pc, #8]	; (8085af0 <vsnprintf+0xc>)
 8085ae8:	681b      	ldr	r3, [r3, #0]
 8085aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085aec:	9301      	str	r3, [sp, #4]
 8085aee:	bd08      	pop	{r3, pc}
 8085af0:	080401a0 	.word	0x080401a0

08085af4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8085af4:	b508      	push	{r3, lr}
 8085af6:	4b02      	ldr	r3, [pc, #8]	; (8085b00 <abort+0xc>)
 8085af8:	681b      	ldr	r3, [r3, #0]
 8085afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085afc:	9301      	str	r3, [sp, #4]
 8085afe:	bd08      	pop	{r3, pc}
 8085b00:	080401a0 	.word	0x080401a0

08085b04 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8085b04:	b508      	push	{r3, lr}
 8085b06:	4b02      	ldr	r3, [pc, #8]	; (8085b10 <_malloc_r+0xc>)
 8085b08:	681b      	ldr	r3, [r3, #0]
 8085b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085b0c:	9301      	str	r3, [sp, #4]
 8085b0e:	bd08      	pop	{r3, pc}
 8085b10:	080401a0 	.word	0x080401a0

08085b14 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8085b14:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b16:	f003 fe55 	bl	80897c4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8085b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8085b1e:	f003 b944 	b.w	8088daa <_ZN7TwoWire4lockEv>

08085b22 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8085b22:	b510      	push	{r4, lr}
 8085b24:	4604      	mov	r4, r0
    lock_(_lock)
 8085b26:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8085b28:	b109      	cbz	r1, 8085b2e <_ZN4PMICC1Eb+0xc>
        lock();
 8085b2a:	f7ff fff3 	bl	8085b14 <_ZN4PMIC4lockEv>
    }
}
 8085b2e:	4620      	mov	r0, r4
 8085b30:	bd10      	pop	{r4, pc}

08085b32 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8085b32:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b34:	f003 fe46 	bl	80897c4 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8085b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8085b3c:	f003 b93e 	b.w	8088dbc <_ZN7TwoWire6unlockEv>

08085b40 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8085b40:	b510      	push	{r4, lr}
{
    if (lock_) {
 8085b42:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8085b44:	4604      	mov	r4, r0
{
    if (lock_) {
 8085b46:	b10b      	cbz	r3, 8085b4c <_ZN4PMICD1Ev+0xc>
        unlock();
 8085b48:	f7ff fff3 	bl	8085b32 <_ZN4PMIC6unlockEv>
    }
}
 8085b4c:	4620      	mov	r0, r4
 8085b4e:	bd10      	pop	{r4, pc}

08085b50 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8085b50:	b510      	push	{r4, lr}
 8085b52:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8085b54:	6800      	ldr	r0, [r0, #0]
 8085b56:	f7ff ffec 	bl	8085b32 <_ZN4PMIC6unlockEv>
 8085b5a:	4620      	mov	r0, r4
 8085b5c:	bd10      	pop	{r4, pc}

08085b5e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8085b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085b60:	ac02      	add	r4, sp, #8
 8085b62:	460d      	mov	r5, r1
 8085b64:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8085b68:	f7ff ffd4 	bl	8085b14 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b6c:	f003 fe2a 	bl	80897c4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8085b70:	216b      	movs	r1, #107	; 0x6b
 8085b72:	f003 f90c 	bl	8088d8e <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b76:	f003 fe25 	bl	80897c4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8085b7a:	6803      	ldr	r3, [r0, #0]
 8085b7c:	4629      	mov	r1, r5
 8085b7e:	689b      	ldr	r3, [r3, #8]
 8085b80:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b82:	f003 fe1f 	bl	80897c4 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8085b86:	2101      	movs	r1, #1
 8085b88:	f003 f904 	bl	8088d94 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b8c:	f003 fe1a 	bl	80897c4 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8085b90:	2301      	movs	r3, #1
 8085b92:	461a      	mov	r2, r3
 8085b94:	216b      	movs	r1, #107	; 0x6b
 8085b96:	f003 f8e1 	bl	8088d5c <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085b9a:	f003 fe13 	bl	80897c4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8085b9e:	6803      	ldr	r3, [r0, #0]
 8085ba0:	695b      	ldr	r3, [r3, #20]
 8085ba2:	4798      	blx	r3
 8085ba4:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8085ba6:	4620      	mov	r0, r4
 8085ba8:	f7ff ffd2 	bl	8085b50 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8085bac:	b2e8      	uxtb	r0, r5
 8085bae:	b003      	add	sp, #12
 8085bb0:	bd30      	pop	{r4, r5, pc}

08085bb2 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8085bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085bb4:	ac02      	add	r4, sp, #8
 8085bb6:	4615      	mov	r5, r2
 8085bb8:	460e      	mov	r6, r1
 8085bba:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8085bbe:	f7ff ffa9 	bl	8085b14 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085bc2:	f003 fdff 	bl	80897c4 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8085bc6:	216b      	movs	r1, #107	; 0x6b
 8085bc8:	f003 f8e1 	bl	8088d8e <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085bcc:	f003 fdfa 	bl	80897c4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8085bd0:	6803      	ldr	r3, [r0, #0]
 8085bd2:	4631      	mov	r1, r6
 8085bd4:	689b      	ldr	r3, [r3, #8]
 8085bd6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085bd8:	f003 fdf4 	bl	80897c4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8085bdc:	6803      	ldr	r3, [r0, #0]
 8085bde:	4629      	mov	r1, r5
 8085be0:	689b      	ldr	r3, [r3, #8]
 8085be2:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085be4:	f003 fdee 	bl	80897c4 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8085be8:	2101      	movs	r1, #1
 8085bea:	f003 f8d3 	bl	8088d94 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8085bee:	4620      	mov	r0, r4
 8085bf0:	f7ff ffae 	bl	8085b50 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8085bf4:	b002      	add	sp, #8
 8085bf6:	bd70      	pop	{r4, r5, r6, pc}

08085bf8 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 8085bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085bfa:	4604      	mov	r4, r0
 8085bfc:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085bfe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085c00:	f7ff ff88 	bl	8085b14 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8085c04:	2100      	movs	r1, #0
 8085c06:	4620      	mov	r0, r4
 8085c08:	f7ff ffa9 	bl	8085b5e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085c0c:	f241 1358 	movw	r3, #4440	; 0x1158
 8085c10:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8085c12:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8085c16:	d05b      	beq.n	8085cd0 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8085c18:	d820      	bhi.n	8085c5c <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 8085c1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8085c1e:	429d      	cmp	r5, r3
 8085c20:	d04d      	beq.n	8085cbe <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8085c22:	d80c      	bhi.n	8085c3e <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8085c24:	f640 7378 	movw	r3, #3960	; 0xf78
 8085c28:	429d      	cmp	r5, r3
 8085c2a:	d042      	beq.n	8085cb2 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8085c2c:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8085c30:	429d      	cmp	r5, r3
 8085c32:	d041      	beq.n	8085cb8 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8085c34:	f640 7328 	movw	r3, #3880	; 0xf28
 8085c38:	429d      	cmp	r5, r3
 8085c3a:	d160      	bne.n	8085cfe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8085c3c:	e059      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8085c3e:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8085c42:	429d      	cmp	r5, r3
 8085c44:	d03e      	beq.n	8085cc4 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8085c46:	f241 1308 	movw	r3, #4360	; 0x1108
 8085c4a:	429d      	cmp	r5, r3
 8085c4c:	d03d      	beq.n	8085cca <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8085c4e:	f241 0368 	movw	r3, #4200	; 0x1068
 8085c52:	429d      	cmp	r5, r3
 8085c54:	d153      	bne.n	8085cfe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8085c56:	f042 0220 	orr.w	r2, r2, #32
 8085c5a:	e04a      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085c5c:	f241 2398 	movw	r3, #4760	; 0x1298
 8085c60:	429d      	cmp	r5, r3
 8085c62:	d03e      	beq.n	8085ce2 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8085c64:	d80e      	bhi.n	8085c84 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8085c66:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8085c6a:	429d      	cmp	r5, r3
 8085c6c:	d033      	beq.n	8085cd6 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8085c6e:	f241 2348 	movw	r3, #4680	; 0x1248
 8085c72:	429d      	cmp	r5, r3
 8085c74:	d032      	beq.n	8085cdc <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8085c76:	f241 13a8 	movw	r3, #4520	; 0x11a8
 8085c7a:	429d      	cmp	r5, r3
 8085c7c:	d13f      	bne.n	8085cfe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8085c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8085c82:	e036      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085c84:	f241 3338 	movw	r3, #4920	; 0x1338
 8085c88:	429d      	cmp	r5, r3
 8085c8a:	d02d      	beq.n	8085ce8 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8085c8c:	d806      	bhi.n	8085c9c <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8085c8e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8085c92:	429d      	cmp	r5, r3
 8085c94:	d133      	bne.n	8085cfe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8085c96:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8085c9a:	e02a      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085c9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8085ca0:	429d      	cmp	r5, r3
 8085ca2:	d024      	beq.n	8085cee <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8085ca4:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8085ca8:	429d      	cmp	r5, r3
 8085caa:	d128      	bne.n	8085cfe <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 8085cac:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8085cb0:	e01f      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8085cb2:	f042 0208 	orr.w	r2, r2, #8
 8085cb6:	e01c      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8085cb8:	f042 0210 	orr.w	r2, r2, #16
 8085cbc:	e019      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8085cbe:	f042 0218 	orr.w	r2, r2, #24
 8085cc2:	e016      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8085cc4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8085cc8:	e013      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 8085cca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8085cce:	e010      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8085cd0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8085cd4:	e00d      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8085cd6:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 8085cda:	e00a      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 8085cdc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8085ce0:	e007      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8085ce2:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8085ce6:	e004      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 8085ce8:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8085cec:	e001      	b.n	8085cf2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 8085cee:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8085cf2:	4620      	mov	r0, r4
 8085cf4:	2100      	movs	r1, #0
 8085cf6:	f7ff ff5c 	bl	8085bb2 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8085cfa:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8085cfc:	e000      	b.n	8085d00 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8085cfe:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8085d00:	a801      	add	r0, sp, #4
 8085d02:	f7ff ff25 	bl	8085b50 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8085d06:	4620      	mov	r0, r4
 8085d08:	b003      	add	sp, #12
 8085d0a:	bd30      	pop	{r4, r5, pc}

08085d0c <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8085d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8085d0e:	460c      	mov	r4, r1
 8085d10:	4617      	mov	r7, r2
 8085d12:	4605      	mov	r5, r0
 8085d14:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085d16:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085d18:	f7ff fefc 	bl	8085b14 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8085d1c:	2c00      	cmp	r4, #0
 8085d1e:	bf0c      	ite	eq
 8085d20:	2400      	moveq	r4, #0
 8085d22:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8085d24:	b117      	cbz	r7, 8085d2c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8085d26:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8085d2a:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8085d2c:	b10e      	cbz	r6, 8085d32 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8085d2e:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8085d32:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8085d36:	b10b      	cbz	r3, 8085d3c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8085d38:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8085d3c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8085d40:	b10b      	cbz	r3, 8085d46 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8085d42:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8085d46:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8085d4a:	b10b      	cbz	r3, 8085d50 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8085d4c:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8085d50:	2102      	movs	r1, #2
 8085d52:	4628      	mov	r0, r5
 8085d54:	f7ff ff03 	bl	8085b5e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8085d58:	f000 0201 	and.w	r2, r0, #1
 8085d5c:	4322      	orrs	r2, r4
 8085d5e:	2102      	movs	r1, #2
 8085d60:	4628      	mov	r0, r5
 8085d62:	f7ff ff26 	bl	8085bb2 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8085d66:	a801      	add	r0, sp, #4
 8085d68:	f7ff fef2 	bl	8085b50 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8085d6c:	2001      	movs	r0, #1
 8085d6e:	b003      	add	sp, #12
 8085d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085d72 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8085d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#endif // Wiring_Wire3
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
 8085d74:	2400      	movs	r4, #0
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8085d76:	4605      	mov	r5, r0
 8085d78:	460f      	mov	r7, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085d7a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085d7c:	f7ff feca 	bl	8085b14 <_ZN4PMIC4lockEv>
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8085d80:	4623      	mov	r3, r4
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
 8085d82:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
        uint32_t sum = baseOffset + (mask << bitsBaseShift);
 8085d86:	0118      	lsls	r0, r3, #4
 8085d88:	f500 605b 	add.w	r0, r0, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8085d8c:	1bc2      	subs	r2, r0, r7
 8085d8e:	2a00      	cmp	r2, #0
 8085d90:	bfb8      	it	lt
 8085d92:	4252      	neglt	r2, r2
        if (delta < bestDelta && sum <= value) {
 8085d94:	4296      	cmp	r6, r2
 8085d96:	dd03      	ble.n	8085da0 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8085d98:	4287      	cmp	r7, r0
 8085d9a:	bf24      	itt	cs
 8085d9c:	4616      	movcs	r6, r2
 8085d9e:	461c      	movcs	r4, r3
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8085da0:	3301      	adds	r3, #1
 8085da2:	2b40      	cmp	r3, #64	; 0x40
 8085da4:	d1ef      	bne.n	8085d86 <_ZN4PMIC16setChargeVoltageEt+0x14>

    const uint16_t baseValue = 3504;
    // Find closest matching charge voltage not larger than 'voltage'
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);

    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8085da6:	2104      	movs	r1, #4
 8085da8:	4628      	mov	r0, r5
 8085daa:	f7ff fed8 	bl	8085b5e <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8085dae:	f000 0003 	and.w	r0, r0, #3
 8085db2:	ea40 0284 	orr.w	r2, r0, r4, lsl #2

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8085db6:	b2d2      	uxtb	r2, r2
 8085db8:	2104      	movs	r1, #4
 8085dba:	4628      	mov	r0, r5
 8085dbc:	f7ff fef9 	bl	8085bb2 <_ZN4PMIC13writeRegisterEhh>
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8085dc0:	a801      	add	r0, sp, #4
 8085dc2:	f7ff fec5 	bl	8085b50 <_ZNSt10lock_guardI4PMICED1Ev>
    cvcr |= (currentCvcr & 0b11);

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);

    return true;
}
 8085dc6:	2001      	movs	r0, #1
 8085dc8:	b003      	add	sp, #12
 8085dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085dcc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8085dcc:	6800      	ldr	r0, [r0, #0]
 8085dce:	f7ff bbd3 	b.w	8085578 <os_mutex_recursive_lock>

08085dd2 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8085dd2:	6800      	ldr	r0, [r0, #0]
 8085dd4:	f7ff bbd8 	b.w	8085588 <os_mutex_recursive_unlock>

08085dd8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8085dd8:	b570      	push	{r4, r5, r6, lr}
 8085dda:	4604      	mov	r4, r0
 8085ddc:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8085dde:	2500      	movs	r5, #0
 8085de0:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8085de4:	f7ff fbb8 	bl	8085558 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8085de8:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 8085dea:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 8085dec:	f7ff fb34 	bl	8085458 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8085df0:	6065      	str	r5, [r4, #4]
}
 8085df2:	4620      	mov	r0, r4
 8085df4:	bd70      	pop	{r4, r5, r6, pc}

08085df6 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8085df6:	b538      	push	{r3, r4, r5, lr}
 8085df8:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085dfa:	f100 0408 	add.w	r4, r0, #8
 8085dfe:	4620      	mov	r0, r4
 8085e00:	f7ff ffe4 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8085e04:	7828      	ldrb	r0, [r5, #0]
 8085e06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8085e0a:	f7ff fb15 	bl	8085438 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8085e0e:	4620      	mov	r0, r4
 8085e10:	f7ff ffdf 	bl	8085dd2 <_ZN14RecursiveMutex6unlockEv>
 8085e14:	bd38      	pop	{r3, r4, r5, pc}

08085e16 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 8085e16:	b508      	push	{r3, lr}
 8085e18:	3008      	adds	r0, #8
 8085e1a:	f7ff ffda 	bl	8085dd2 <_ZN14RecursiveMutex6unlockEv>
 8085e1e:	bd08      	pop	{r3, pc}

08085e20 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085e20:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8085e22:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085e24:	6018      	str	r0, [r3, #0]
 8085e26:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8085e28:	6818      	ldr	r0, [r3, #0]
 8085e2a:	b2e5      	uxtb	r5, r4
 8085e2c:	4288      	cmp	r0, r1
 8085e2e:	d906      	bls.n	8085e3e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8085e30:	3401      	adds	r4, #1
 8085e32:	2c08      	cmp	r4, #8
 8085e34:	d002      	beq.n	8085e3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8085e36:	0840      	lsrs	r0, r0, #1
 8085e38:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8085e3a:	e7f5      	b.n	8085e28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8085e3c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8085e3e:	4b02      	ldr	r3, [pc, #8]	; (8085e48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8085e40:	5d5b      	ldrb	r3, [r3, r5]
 8085e42:	7013      	strb	r3, [r2, #0]
 8085e44:	bd30      	pop	{r4, r5, pc}
 8085e46:	bf00      	nop
 8085e48:	0808ed94 	.word	0x0808ed94

08085e4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8085e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085e50:	4680      	mov	r8, r0
 8085e52:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085e54:	3008      	adds	r0, #8
 8085e56:	460e      	mov	r6, r1
 8085e58:	f7ff ffb8 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 8085e5c:	f898 4000 	ldrb.w	r4, [r8]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8085e60:	2214      	movs	r2, #20
 8085e62:	2100      	movs	r1, #0
 8085e64:	a809      	add	r0, sp, #36	; 0x24
 8085e66:	f005 fa3a 	bl	808b2de <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8085e6a:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8085e6c:	4620      	mov	r0, r4
 8085e6e:	2200      	movs	r2, #0
 8085e70:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 8085e72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 8085e76:	f7ff faff 	bl	8085478 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 8085e7a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8085e7e:	b14c      	cbz	r4, 8085e94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8085e80:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8085e84:	b92d      	cbnz	r5, 8085e92 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8085e86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8085e88:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8085e8c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8085e90:	e003      	b.n	8085e9a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8085e92:	2400      	movs	r4, #0
 8085e94:	46a1      	mov	r9, r4
 8085e96:	4627      	mov	r7, r4
 8085e98:	2501      	movs	r5, #1
 8085e9a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8085e9c:	b10d      	cbz	r5, 8085ea2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8085e9e:	2b00      	cmp	r3, #0
 8085ea0:	d13f      	bne.n	8085f22 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 8085ea2:	429d      	cmp	r5, r3
 8085ea4:	d10b      	bne.n	8085ebe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 8085ea6:	68b2      	ldr	r2, [r6, #8]
 8085ea8:	42ba      	cmp	r2, r7
 8085eaa:	d108      	bne.n	8085ebe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8085eac:	f88d 9020 	strb.w	r9, [sp, #32]
 8085eb0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8085eb4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8085eb8:	89b2      	ldrh	r2, [r6, #12]
 8085eba:	4291      	cmp	r1, r2
 8085ebc:	d031      	beq.n	8085f22 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 8085ebe:	b13b      	cbz	r3, 8085ed0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8085ec0:	2300      	movs	r3, #0
 8085ec2:	f898 0000 	ldrb.w	r0, [r8]
 8085ec6:	9301      	str	r3, [sp, #4]
 8085ec8:	9300      	str	r3, [sp, #0]
 8085eca:	461a      	mov	r2, r3
 8085ecc:	2101      	movs	r1, #1
 8085ece:	e016      	b.n	8085efe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 8085ed0:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 8085ed4:	68b1      	ldr	r1, [r6, #8]
 8085ed6:	ab04      	add	r3, sp, #16
 8085ed8:	f10d 020f 	add.w	r2, sp, #15
 8085edc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8085ede:	f7ff ff9f 	bl	8085e20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 8085ee2:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8085ee4:	b105      	cbz	r5, 8085ee8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 8085ee6:	b9c9      	cbnz	r1, 8085f1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 8085ee8:	42a9      	cmp	r1, r5
 8085eea:	d00b      	beq.n	8085f04 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 8085eec:	2400      	movs	r4, #0
 8085eee:	9401      	str	r4, [sp, #4]
 8085ef0:	7b74      	ldrb	r4, [r6, #13]
 8085ef2:	7b33      	ldrb	r3, [r6, #12]
 8085ef4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8085ef8:	f898 0000 	ldrb.w	r0, [r8]
 8085efc:	9400      	str	r4, [sp, #0]
 8085efe:	f7ff fad3 	bl	80854a8 <HAL_SPI_Set_Settings>
 8085f02:	e00e      	b.n	8085f22 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 8085f04:	68b3      	ldr	r3, [r6, #8]
 8085f06:	42bb      	cmp	r3, r7
 8085f08:	d3f0      	bcc.n	8085eec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8085f0a:	f88d 9020 	strb.w	r9, [sp, #32]
 8085f0e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8085f12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8085f16:	89b3      	ldrh	r3, [r6, #12]
 8085f18:	429a      	cmp	r2, r3
 8085f1a:	d1e7      	bne.n	8085eec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 8085f1c:	9b04      	ldr	r3, [sp, #16]
 8085f1e:	42bb      	cmp	r3, r7
 8085f20:	d1e4      	bne.n	8085eec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 8085f22:	2000      	movs	r0, #0
 8085f24:	b00f      	add	sp, #60	; 0x3c
 8085f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08085f2a <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8085f2a:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 8085f2c:	7800      	ldrb	r0, [r0, #0]
 8085f2e:	f7ff fa8b 	bl	8085448 <HAL_SPI_Send_Receive_Data>
}
 8085f32:	b2c0      	uxtb	r0, r0
 8085f34:	bd08      	pop	{r3, pc}

08085f36 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8085f36:	b530      	push	{r4, r5, lr}
 8085f38:	b087      	sub	sp, #28
 8085f3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085f3c:	4604      	mov	r4, r0
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8085f3e:	7800      	ldrb	r0, [r0, #0]
 8085f40:	9500      	str	r5, [sp, #0]
 8085f42:	f7ff faa1 	bl	8085488 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
 8085f46:	b93d      	cbnz	r5, 8085f58 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8085f48:	a902      	add	r1, sp, #8
 8085f4a:	7820      	ldrb	r0, [r4, #0]
 8085f4c:	f7ff faa4 	bl	8085498 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
 8085f50:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8085f54:	07db      	lsls	r3, r3, #31
 8085f56:	d4f7      	bmi.n	8085f48 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
 8085f58:	b007      	add	sp, #28
 8085f5a:	bd30      	pop	{r4, r5, pc}

08085f5c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 8085f5c:	7800      	ldrb	r0, [r0, #0]
 8085f5e:	f7ff ba83 	b.w	8085468 <HAL_SPI_Is_Enabled>

08085f62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8085f62:	b510      	push	{r4, lr}
 8085f64:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8085f66:	6800      	ldr	r0, [r0, #0]
 8085f68:	b118      	cbz	r0, 8085f72 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8085f6a:	f7ff fd83 	bl	8085a74 <free>
            wakeupSource_ = nullptr;
 8085f6e:	2300      	movs	r3, #0
 8085f70:	6023      	str	r3, [r4, #0]
 8085f72:	bd10      	pop	{r4, pc}

08085f74 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085f74:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8085f76:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085f7a:	460d      	mov	r5, r1
        error_ = result.error_;
 8085f7c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8085f7e:	460b      	mov	r3, r1
 8085f80:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085f84:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8085f86:	f8c0 2006 	str.w	r2, [r0, #6]
 8085f8a:	889b      	ldrh	r3, [r3, #4]
 8085f8c:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8085f8e:	f7ff ffe8 	bl	8085f62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8085f92:	682b      	ldr	r3, [r5, #0]
 8085f94:	b113      	cbz	r3, 8085f9c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8085f96:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8085f98:	2300      	movs	r3, #0
 8085f9a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 8085f9c:	4620      	mov	r0, r4
 8085f9e:	bd38      	pop	{r3, r4, r5, pc}

08085fa0 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8085fa0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8085fa4:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8085fa6:	b90b      	cbnz	r3, 8085fac <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8085fa8:	680a      	ldr	r2, [r1, #0]
 8085faa:	b19a      	cbz	r2, 8085fd4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8085fac:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8085fae:	b15c      	cbz	r4, 8085fc8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8085fb0:	88a2      	ldrh	r2, [r4, #4]
 8085fb2:	2a01      	cmp	r2, #1
 8085fb4:	d003      	beq.n	8085fbe <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8085fb6:	2a04      	cmp	r2, #4
 8085fb8:	d106      	bne.n	8085fc8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8085fba:	2202      	movs	r2, #2
 8085fbc:	e005      	b.n	8085fca <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8085fbe:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8085fc0:	718a      	strb	r2, [r1, #6]
 8085fc2:	810b      	strh	r3, [r1, #8]
 8085fc4:	814c      	strh	r4, [r1, #10]
                    break;
 8085fc6:	e005      	b.n	8085fd4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8085fc8:	2204      	movs	r2, #4
 8085fca:	810b      	strh	r3, [r1, #8]
 8085fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085fd0:	718a      	strb	r2, [r1, #6]
 8085fd2:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8085fd4:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8085fd8:	6003      	str	r3, [r0, #0]
 8085fda:	888b      	ldrh	r3, [r1, #4]
 8085fdc:	8083      	strh	r3, [r0, #4]
    }
 8085fde:	bd10      	pop	{r4, pc}

08085fe0 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8085fe0:	4601      	mov	r1, r0
 8085fe2:	2200      	movs	r2, #0
 8085fe4:	208c      	movs	r0, #140	; 0x8c
 8085fe6:	f7ff ba9f 	b.w	8085528 <HAL_Core_System_Reset_Ex>

08085fea <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8085fea:	2000      	movs	r0, #0
 8085fec:	f7ff bff8 	b.w	8085fe0 <_ZN11SystemClass5resetEm>

08085ff0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8085ff0:	b530      	push	{r4, r5, lr}
 8085ff2:	4604      	mov	r4, r0
 8085ff4:	b085      	sub	sp, #20
 8085ff6:	4608      	mov	r0, r1
 8085ff8:	4611      	mov	r1, r2
 8085ffa:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8085ffc:	2300      	movs	r3, #0
 8085ffe:	f7ff fc6b 	bl	80858d8 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8086002:	2300      	movs	r3, #0
 8086004:	9301      	str	r3, [sp, #4]
 8086006:	f8ad 3008 	strh.w	r3, [sp, #8]
 808600a:	f88d 300a 	strb.w	r3, [sp, #10]
 808600e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8086012:	4d09      	ldr	r5, [pc, #36]	; (8086038 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8086014:	a901      	add	r1, sp, #4
 8086016:	f8ad 000c 	strh.w	r0, [sp, #12]
 808601a:	4628      	mov	r0, r5
 808601c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8086020:	f7ff ffa8 	bl	8085f74 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8086024:	a801      	add	r0, sp, #4
 8086026:	f7ff ff9c 	bl	8085f62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 808602a:	4620      	mov	r0, r4
 808602c:	4629      	mov	r1, r5
 808602e:	f7ff ffb7 	bl	8085fa0 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8086032:	4620      	mov	r0, r4
 8086034:	b005      	add	sp, #20
 8086036:	bd30      	pop	{r4, r5, pc}
 8086038:	200008f4 	.word	0x200008f4

0808603c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808603c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8086040:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8086042:	4c08      	ldr	r4, [pc, #32]	; (8086064 <_GLOBAL__sub_I_System+0x28>)
 8086044:	2000      	movs	r0, #0
 8086046:	6020      	str	r0, [r4, #0]
 8086048:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808604a:	71a0      	strb	r0, [r4, #6]
 808604c:	8120      	strh	r0, [r4, #8]
 808604e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086050:	f7ff fc32 	bl	80858b8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8086054:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8086056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 808605a:	4a03      	ldr	r2, [pc, #12]	; (8086068 <_GLOBAL__sub_I_System+0x2c>)
 808605c:	4903      	ldr	r1, [pc, #12]	; (808606c <_GLOBAL__sub_I_System+0x30>)
 808605e:	f003 bbd7 	b.w	8089810 <__aeabi_atexit>
 8086062:	bf00      	nop
 8086064:	200008f4 	.word	0x200008f4
 8086068:	20000144 	.word	0x20000144
 808606c:	080801ff 	.word	0x080801ff

08086070 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8086070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086072:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086074:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8086076:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 808607a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 808607c:	2201      	movs	r2, #1
 808607e:	f247 5330 	movw	r3, #30000	; 0x7530
 8086082:	4621      	mov	r1, r4
 8086084:	47a8      	blx	r5
}
 8086086:	b003      	add	sp, #12
 8086088:	bd30      	pop	{r4, r5, pc}

0808608a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 808608a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 808608c:	6803      	ldr	r3, [r0, #0]
 808608e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8086090:	f247 5330 	movw	r3, #30000	; 0x7530
 8086094:	46a4      	mov	ip, r4
}
 8086096:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086098:	4760      	bx	ip

0808609a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 808609a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808609c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 808609e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80860a0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80860a4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80860a6:	4621      	mov	r1, r4
 80860a8:	4613      	mov	r3, r2
 80860aa:	2201      	movs	r2, #1
 80860ac:	47a8      	blx	r5
}
 80860ae:	b003      	add	sp, #12
 80860b0:	bd30      	pop	{r4, r5, pc}

080860b2 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80860b2:	4770      	bx	lr

080860b4 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80860b4:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80860b6:	4903      	ldr	r1, [pc, #12]	; (80860c4 <_ZN9TCPClient8remoteIPEv+0x10>)
 80860b8:	6001      	str	r1, [r0, #0]
 80860ba:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80860be:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 80860c0:	4770      	bx	lr
 80860c2:	bf00      	nop
 80860c4:	0808f02c 	.word	0x0808f02c

080860c8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80860c8:	4770      	bx	lr

080860ca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80860ca:	2000      	movs	r0, #0
 80860cc:	4770      	bx	lr

080860ce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80860ce:	b510      	push	{r4, lr}
 80860d0:	4604      	mov	r4, r0
 80860d2:	2114      	movs	r1, #20
 80860d4:	f003 fbaa 	bl	808982c <_ZdlPvj>
 80860d8:	4620      	mov	r0, r4
 80860da:	bd10      	pop	{r4, pc}

080860dc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
 80860dc:	f7f9 bfe3 	b.w	80800a6 <_ZdlPv>

080860e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80860e0:	b510      	push	{r4, lr}
 80860e2:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80860e4:	6803      	ldr	r3, [r0, #0]
 80860e6:	689b      	ldr	r3, [r3, #8]
 80860e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80860ea:	68a3      	ldr	r3, [r4, #8]
 80860ec:	3b01      	subs	r3, #1
 80860ee:	60a3      	str	r3, [r4, #8]
 80860f0:	b92b      	cbnz	r3, 80860fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80860f2:	6823      	ldr	r3, [r4, #0]
 80860f4:	4620      	mov	r0, r4
        }
    }
 80860f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80860fa:	68db      	ldr	r3, [r3, #12]
 80860fc:	4718      	bx	r3
 80860fe:	bd10      	pop	{r4, pc}

08086100 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8086100:	b510      	push	{r4, lr}
 8086102:	6943      	ldr	r3, [r0, #20]
 8086104:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8086106:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808610a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 808610e:	429a      	cmp	r2, r3
 8086110:	d005      	beq.n	808611e <_ZN9TCPClient4peekEv+0x1e>
 8086112:	6962      	ldr	r2, [r4, #20]
 8086114:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8086118:	4413      	add	r3, r2
 808611a:	7918      	ldrb	r0, [r3, #4]
 808611c:	bd10      	pop	{r4, pc}
 808611e:	6803      	ldr	r3, [r0, #0]
 8086120:	691b      	ldr	r3, [r3, #16]
 8086122:	4798      	blx	r3
 8086124:	2800      	cmp	r0, #0
 8086126:	d1f4      	bne.n	8086112 <_ZN9TCPClient4peekEv+0x12>
 8086128:	f04f 30ff 	mov.w	r0, #4294967295
}
 808612c:	bd10      	pop	{r4, pc}

0808612e <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 808612e:	b510      	push	{r4, lr}
 8086130:	6943      	ldr	r3, [r0, #20]
 8086132:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8086134:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086138:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 808613c:	429a      	cmp	r2, r3
 808613e:	d008      	beq.n	8086152 <_ZN9TCPClient4readEv+0x24>
 8086140:	6962      	ldr	r2, [r4, #20]
 8086142:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8086146:	1c59      	adds	r1, r3, #1
 8086148:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 808614c:	4413      	add	r3, r2
 808614e:	7918      	ldrb	r0, [r3, #4]
 8086150:	bd10      	pop	{r4, pc}
 8086152:	6803      	ldr	r3, [r0, #0]
 8086154:	691b      	ldr	r3, [r3, #16]
 8086156:	4798      	blx	r3
 8086158:	2800      	cmp	r0, #0
 808615a:	d1f1      	bne.n	8086140 <_ZN9TCPClient4readEv+0x12>
 808615c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086160:	bd10      	pop	{r4, pc}

08086162 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086164:	6943      	ldr	r3, [r0, #20]
 8086166:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8086168:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808616c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086170:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8086172:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086174:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8086176:	d106      	bne.n	8086186 <_ZN9TCPClient4readEPhj+0x24>
 8086178:	6803      	ldr	r3, [r0, #0]
 808617a:	691b      	ldr	r3, [r3, #16]
 808617c:	4798      	blx	r3
 808617e:	b910      	cbnz	r0, 8086186 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8086180:	f04f 34ff 	mov.w	r4, #4294967295
 8086184:	e014      	b.n	80861b0 <_ZN9TCPClient4readEPhj+0x4e>
 8086186:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086188:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 808618a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 808618e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086192:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8086194:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8086196:	42bc      	cmp	r4, r7
 8086198:	bf28      	it	cs
 808619a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808619c:	3104      	adds	r1, #4
 808619e:	4622      	mov	r2, r4
 80861a0:	f005 f877 	bl	808b292 <memcpy>
 80861a4:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80861a6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80861aa:	4423      	add	r3, r4
 80861ac:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80861b0:	4620      	mov	r0, r4
 80861b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080861b4 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80861b4:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80861b6:	2300      	movs	r3, #0
 80861b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80861bc:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80861be:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80861c2:	4770      	bx	lr

080861c4 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80861c4:	b538      	push	{r3, r4, r5, lr}
 80861c6:	6942      	ldr	r2, [r0, #20]
 80861c8:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80861ca:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80861ce:	b11b      	cbz	r3, 80861d8 <_ZN9TCPClient9availableEv+0x14>
 80861d0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80861d4:	429a      	cmp	r2, r3
 80861d6:	d00c      	beq.n	80861f2 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80861d8:	6920      	ldr	r0, [r4, #16]
 80861da:	f002 fe53 	bl	8088e84 <_ZN5spark12NetworkClass4fromEm>
 80861de:	6803      	ldr	r3, [r0, #0]
 80861e0:	68db      	ldr	r3, [r3, #12]
 80861e2:	4798      	blx	r3
 80861e4:	b318      	cbz	r0, 808622e <_ZN9TCPClient9availableEv+0x6a>
 80861e6:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80861e8:	6818      	ldr	r0, [r3, #0]
 80861ea:	f7ff fa9d 	bl	8085728 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80861ee:	b918      	cbnz	r0, 80861f8 <_ZN9TCPClient9availableEv+0x34>
 80861f0:	e01d      	b.n	808622e <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80861f2:	f7ff ffdf 	bl	80861b4 <_ZN9TCPClient12flush_bufferEv>
 80861f6:	e7ef      	b.n	80861d8 <_ZN9TCPClient9availableEv+0x14>
 80861f8:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80861fa:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80861fe:	297f      	cmp	r1, #127	; 0x7f
 8086200:	d815      	bhi.n	808622e <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8086202:	1d05      	adds	r5, r0, #4
 8086204:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8086208:	2300      	movs	r3, #0
 808620a:	4429      	add	r1, r5
 808620c:	6800      	ldr	r0, [r0, #0]
 808620e:	f7ff faa3 	bl	8085758 <socket_receive>
            if (ret > 0)
 8086212:	2800      	cmp	r0, #0
 8086214:	dd0b      	ble.n	808622e <_ZN9TCPClient9availableEv+0x6a>
 8086216:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 8086218:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808621c:	b90a      	cbnz	r2, 8086222 <_ZN9TCPClient9availableEv+0x5e>
 808621e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8086222:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 8086224:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086228:	4418      	add	r0, r3
 808622a:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 808622e:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 8086230:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086234:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8086238:	1a18      	subs	r0, r3, r0
}
 808623a:	bd38      	pop	{r3, r4, r5, pc}

0808623c <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 808623c:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 808623e:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 8086240:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8086242:	6818      	ldr	r0, [r3, #0]
 8086244:	f7ff fa70 	bl	8085728 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8086248:	b118      	cbz	r0, 8086252 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 808624a:	6963      	ldr	r3, [r4, #20]
 808624c:	6818      	ldr	r0, [r3, #0]
 808624e:	f7ff fa9b 	bl	8085788 <socket_close>
 8086252:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8086254:	f7ff faa0 	bl	8085798 <socket_handle_invalid>
 8086258:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808625a:	6963      	ldr	r3, [r4, #20]
 808625c:	2200      	movs	r2, #0
 808625e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8086262:	4620      	mov	r0, r4
}
 8086264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8086268:	f7ff bfa4 	b.w	80861b4 <_ZN9TCPClient12flush_bufferEv>

0808626c <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 808626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086270:	461e      	mov	r6, r3
    stop();
 8086272:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086274:	b08a      	sub	sp, #40	; 0x28
    stop();
 8086276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086278:	4604      	mov	r4, r0
 808627a:	460d      	mov	r5, r1
 808627c:	4617      	mov	r7, r2
    stop();
 808627e:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 8086280:	4630      	mov	r0, r6
 8086282:	f002 fdff 	bl	8088e84 <_ZN5spark12NetworkClass4fromEm>
 8086286:	6803      	ldr	r3, [r0, #0]
 8086288:	68db      	ldr	r3, [r3, #12]
 808628a:	4798      	blx	r3
 808628c:	2800      	cmp	r0, #0
 808628e:	d050      	beq.n	8086332 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8086290:	9600      	str	r6, [sp, #0]
 8086292:	463b      	mov	r3, r7
 8086294:	2206      	movs	r2, #6
 8086296:	2101      	movs	r1, #1
 8086298:	2002      	movs	r0, #2
 808629a:	f8d4 8014 	ldr.w	r8, [r4, #20]
 808629e:	f7ff fa4b 	bl	8085738 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80862a2:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80862a4:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80862a8:	2600      	movs	r6, #0
 80862aa:	9302      	str	r3, [sp, #8]
 80862ac:	6963      	ldr	r3, [r4, #20]
 80862ae:	9603      	str	r6, [sp, #12]
 80862b0:	681b      	ldr	r3, [r3, #0]
 80862b2:	2001      	movs	r0, #1
 80862b4:	9301      	str	r3, [sp, #4]
 80862b6:	4b20      	ldr	r3, [pc, #128]	; (8086338 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 80862b8:	aa02      	add	r2, sp, #8
 80862ba:	9300      	str	r3, [sp, #0]
 80862bc:	491f      	ldr	r1, [pc, #124]	; (808633c <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 80862be:	4633      	mov	r3, r6
 80862c0:	f7ff fad2 	bl	8085868 <log_message>

          if (socket_handle_valid(d_->sock))
 80862c4:	6963      	ldr	r3, [r4, #20]
 80862c6:	6818      	ldr	r0, [r3, #0]
 80862c8:	f7ff fa2e 	bl	8085728 <socket_handle_valid>
 80862cc:	b388      	cbz	r0, 8086332 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
          {
            flush_buffer();
 80862ce:	4620      	mov	r0, r4
 80862d0:	f7ff ff70 	bl	80861b4 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80862d4:	2302      	movs	r3, #2
 80862d6:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80862da:	0a3b      	lsrs	r3, r7, #8
 80862dc:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80862e0:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80862e2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80862e6:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80862ea:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80862ec:	f88d 700b 	strb.w	r7, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80862f0:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80862f4:	796b      	ldrb	r3, [r5, #5]
 80862f6:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80862fa:	792b      	ldrb	r3, [r5, #4]
 80862fc:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086300:	f7ff fa5a 	bl	80857b8 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086304:	6963      	ldr	r3, [r4, #20]
 8086306:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086308:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 808630a:	a902      	add	r1, sp, #8
 808630c:	6818      	ldr	r0, [r3, #0]
 808630e:	f7ff fa1b 	bl	8085748 <socket_connect>
 8086312:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8086314:	4640      	mov	r0, r8
 8086316:	f7ff fa4f 	bl	80857b8 <HAL_NET_SetNetWatchDog>
 808631a:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 808631c:	686a      	ldr	r2, [r5, #4]
 808631e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8086322:	b12f      	cbz	r7, 8086330 <_ZN9TCPClient7connectE9IPAddresstm+0xc4>
            {
                stop();
 8086324:	6823      	ldr	r3, [r4, #0]
 8086326:	4620      	mov	r0, r4
 8086328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808632a:	4798      	blx	r3
 808632c:	4630      	mov	r0, r6
 808632e:	e000      	b.n	8086332 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8086330:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8086332:	b00a      	add	sp, #40	; 0x28
 8086334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086338:	0808ee0b 	.word	0x0808ee0b
 808633c:	0808ee04 	.word	0x0808ee04

08086340 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8086340:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086342:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8086344:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8086346:	6818      	ldr	r0, [r3, #0]
 8086348:	f7ff f9ee 	bl	8085728 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 808634c:	b908      	cbnz	r0, 8086352 <_ZN9TCPClient6statusEv+0x12>
 808634e:	2000      	movs	r0, #0
 8086350:	bd10      	pop	{r4, pc}
 8086352:	6920      	ldr	r0, [r4, #16]
 8086354:	f002 fd96 	bl	8088e84 <_ZN5spark12NetworkClass4fromEm>
 8086358:	6803      	ldr	r3, [r0, #0]
 808635a:	68db      	ldr	r3, [r3, #12]
 808635c:	4798      	blx	r3
 808635e:	2800      	cmp	r0, #0
 8086360:	d0f5      	beq.n	808634e <_ZN9TCPClient6statusEv+0xe>
 8086362:	6963      	ldr	r3, [r4, #20]
 8086364:	6818      	ldr	r0, [r3, #0]
 8086366:	f7ff f9d7 	bl	8085718 <socket_active_status>
 808636a:	fab0 f080 	clz	r0, r0
 808636e:	0940      	lsrs	r0, r0, #5
}
 8086370:	bd10      	pop	{r4, pc}

08086372 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 8086372:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 8086376:	2500      	movs	r5, #0
 8086378:	6045      	str	r5, [r0, #4]
 808637a:	4604      	mov	r4, r0
 808637c:	460e      	mov	r6, r1
 808637e:	4617      	mov	r7, r2
 8086380:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8086382:	f7ff ffdd 	bl	8086340 <_ZN9TCPClient6statusEv>
 8086386:	b160      	cbz	r0, 80863a2 <_ZN9TCPClient5writeEPKhjm+0x30>
 8086388:	6960      	ldr	r0, [r4, #20]
 808638a:	9501      	str	r5, [sp, #4]
 808638c:	f8cd 8000 	str.w	r8, [sp]
 8086390:	462b      	mov	r3, r5
 8086392:	463a      	mov	r2, r7
 8086394:	4631      	mov	r1, r6
 8086396:	6800      	ldr	r0, [r0, #0]
 8086398:	f7ff fa06 	bl	80857a8 <socket_send_ex>
    if (ret < 0) {
 808639c:	2800      	cmp	r0, #0
 808639e:	da03      	bge.n	80863a8 <_ZN9TCPClient5writeEPKhjm+0x36>
 80863a0:	e001      	b.n	80863a6 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80863a2:	f04f 30ff 	mov.w	r0, #4294967295
 80863a6:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80863a8:	b002      	add	sp, #8
 80863aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080863ae <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80863ae:	b538      	push	{r3, r4, r5, lr}
 80863b0:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80863b2:	f7ff ffc5 	bl	8086340 <_ZN9TCPClient6statusEv>
 80863b6:	bb00      	cbnz	r0, 80863fa <_ZN9TCPClient9connectedEv+0x4c>
 80863b8:	6963      	ldr	r3, [r4, #20]
 80863ba:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80863be:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80863c2:	4291      	cmp	r1, r2
 80863c4:	d119      	bne.n	80863fa <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80863c6:	6818      	ldr	r0, [r3, #0]
 80863c8:	f7ff f9ae 	bl	8085728 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80863cc:	b128      	cbz	r0, 80863da <_ZN9TCPClient9connectedEv+0x2c>
 80863ce:	6963      	ldr	r3, [r4, #20]
 80863d0:	6818      	ldr	r0, [r3, #0]
 80863d2:	f7ff f9a1 	bl	8085718 <socket_active_status>
 80863d6:	2801      	cmp	r0, #1
 80863d8:	d001      	beq.n	80863de <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80863da:	2500      	movs	r5, #0
 80863dc:	e00e      	b.n	80863fc <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80863de:	6823      	ldr	r3, [r4, #0]
 80863e0:	4620      	mov	r0, r4
 80863e2:	691b      	ldr	r3, [r3, #16]
 80863e4:	4798      	blx	r3
 80863e6:	2800      	cmp	r0, #0
 80863e8:	bf14      	ite	ne
 80863ea:	2501      	movne	r5, #1
 80863ec:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80863ee:	d105      	bne.n	80863fc <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80863f0:	6823      	ldr	r3, [r4, #0]
 80863f2:	4620      	mov	r0, r4
 80863f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80863f6:	4798      	blx	r3
 80863f8:	e000      	b.n	80863fc <_ZN9TCPClient9connectedEv+0x4e>
 80863fa:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80863fc:	4628      	mov	r0, r5
 80863fe:	bd38      	pop	{r3, r4, r5, pc}

08086400 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8086400:	b508      	push	{r3, lr}
   return (status()!=0);
 8086402:	f7ff ff9d 	bl	8086340 <_ZN9TCPClient6statusEv>
}
 8086406:	3000      	adds	r0, #0
 8086408:	bf18      	it	ne
 808640a:	2001      	movne	r0, #1
 808640c:	bd08      	pop	{r3, pc}

0808640e <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 808640e:	b510      	push	{r4, lr}
 8086410:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 8086412:	2300      	movs	r3, #0
 8086414:	6001      	str	r1, [r0, #0]
 8086416:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 808641a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 808641e:	3088      	adds	r0, #136	; 0x88
 8086420:	f002 f996 	bl	8088750 <_ZN9IPAddressC1Ev>
}
 8086424:	4620      	mov	r0, r4
 8086426:	bd10      	pop	{r4, pc}

08086428 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 808642c:	b570      	push	{r4, r5, r6, lr}
 808642e:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8086430:	4a14      	ldr	r2, [pc, #80]	; (8086484 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8086432:	2300      	movs	r3, #0
 8086434:	6043      	str	r3, [r0, #4]
 8086436:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8086438:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 808643a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 808643c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808643e:	2090      	movs	r0, #144	; 0x90
 8086440:	460e      	mov	r6, r1
 8086442:	f7f9 fe2c 	bl	808009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8086446:	4605      	mov	r5, r0
 8086448:	b110      	cbz	r0, 8086450 <_ZN9TCPClientC1Em+0x28>
 808644a:	4631      	mov	r1, r6
 808644c:	f7ff ffdf 	bl	808640e <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8086450:	2014      	movs	r0, #20
 8086452:	f7f9 fe24 	bl	808009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8086456:	4603      	mov	r3, r0
 8086458:	b128      	cbz	r0, 8086466 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808645a:	2201      	movs	r2, #1
 808645c:	6042      	str	r2, [r0, #4]
 808645e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8086460:	4a09      	ldr	r2, [pc, #36]	; (8086488 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8086462:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8086464:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8086466:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8086468:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808646a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808646c:	b128      	cbz	r0, 808647a <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808646e:	6843      	ldr	r3, [r0, #4]
 8086470:	3b01      	subs	r3, #1
 8086472:	6043      	str	r3, [r0, #4]
 8086474:	b90b      	cbnz	r3, 808647a <_ZN9TCPClientC1Em+0x52>
 8086476:	f7ff fe33 	bl	80860e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 808647a:	4620      	mov	r0, r4
 808647c:	f7ff fe9a 	bl	80861b4 <_ZN9TCPClient12flush_bufferEv>
}
 8086480:	4620      	mov	r0, r4
 8086482:	bd70      	pop	{r4, r5, r6, pc}
 8086484:	0808edc0 	.word	0x0808edc0
 8086488:	0808eda4 	.word	0x0808eda4

0808648c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 808648c:	b510      	push	{r4, lr}
 808648e:	4604      	mov	r4, r0
 8086490:	f7ff f982 	bl	8085798 <socket_handle_invalid>
 8086494:	4601      	mov	r1, r0
 8086496:	4620      	mov	r0, r4
 8086498:	f7ff ffc6 	bl	8086428 <_ZN9TCPClientC1Em>
{
}
 808649c:	4620      	mov	r0, r4
 808649e:	bd10      	pop	{r4, pc}

080864a0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80864a0:	b510      	push	{r4, lr}
 80864a2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80864a4:	6800      	ldr	r0, [r0, #0]
 80864a6:	f7ff f93f 	bl	8085728 <socket_handle_valid>
 80864aa:	b110      	cbz	r0, 80864b2 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80864ac:	6820      	ldr	r0, [r4, #0]
 80864ae:	f7ff f96b 	bl	8085788 <socket_close>
    }
}
 80864b2:	4620      	mov	r0, r4
 80864b4:	bd10      	pop	{r4, pc}

080864b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80864b6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80864b8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80864ba:	4620      	mov	r0, r4
 80864bc:	f7ff fff0 	bl	80864a0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80864c0:	b124      	cbz	r4, 80864cc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80864c2:	4620      	mov	r0, r4
 80864c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80864c8:	f7f9 bded 	b.w	80800a6 <_ZdlPv>
 80864cc:	bd10      	pop	{r4, pc}
	...

080864d0 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80864d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80864d4:	461e      	mov	r6, r3
    stop();
 80864d6:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80864d8:	b086      	sub	sp, #24
    stop();
 80864da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80864dc:	4605      	mov	r5, r0
 80864de:	460f      	mov	r7, r1
 80864e0:	4690      	mov	r8, r2
    stop();
 80864e2:	4798      	blx	r3
    if (Network.ready())
 80864e4:	4811      	ldr	r0, [pc, #68]	; (808652c <_ZN9TCPClient7connectEPKctm+0x5c>)
 80864e6:	f002 fc81 	bl	8088dec <_ZN5spark12NetworkClass5readyEv>
 80864ea:	b1d8      	cbz	r0, 8086524 <_ZN9TCPClient7connectEPKctm+0x54>
    {
        IPAddress ip_addr;
 80864ec:	a802      	add	r0, sp, #8
 80864ee:	f002 f92f 	bl	8088750 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80864f2:	4638      	mov	r0, r7
 80864f4:	f005 fc7e 	bl	808bdf4 <strlen>
 80864f8:	2400      	movs	r4, #0
 80864fa:	b281      	uxth	r1, r0
 80864fc:	9400      	str	r4, [sp, #0]
 80864fe:	4633      	mov	r3, r6
 8086500:	aa03      	add	r2, sp, #12
 8086502:	4638      	mov	r0, r7
 8086504:	f7ff f960 	bl	80857c8 <inet_gethostbyname>
 8086508:	b958      	cbnz	r0, 8086522 <_ZN9TCPClient7connectEPKctm+0x52>
            return connect(ip_addr, port, nif);
 808650a:	682b      	ldr	r3, [r5, #0]
 808650c:	4642      	mov	r2, r8
 808650e:	6a1c      	ldr	r4, [r3, #32]
 8086510:	4b07      	ldr	r3, [pc, #28]	; (8086530 <_ZN9TCPClient7connectEPKctm+0x60>)
 8086512:	a904      	add	r1, sp, #16
 8086514:	9304      	str	r3, [sp, #16]
 8086516:	9b03      	ldr	r3, [sp, #12]
 8086518:	4628      	mov	r0, r5
 808651a:	9305      	str	r3, [sp, #20]
 808651c:	4633      	mov	r3, r6
 808651e:	47a0      	blx	r4
 8086520:	e000      	b.n	8086524 <_ZN9TCPClient7connectEPKctm+0x54>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 8086522:	4620      	mov	r0, r4
}
 8086524:	b006      	add	sp, #24
 8086526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808652a:	bf00      	nop
 808652c:	20000ed4 	.word	0x20000ed4
 8086530:	0808f02c 	.word	0x0808f02c

08086534 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086534:	2300      	movs	r3, #0
 8086536:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8086538:	6043      	str	r3, [r0, #4]
	len = 0;
 808653a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808653c:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 808653e:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 8086540:	680c      	ldr	r4, [r1, #0]
 8086542:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 8086544:	684c      	ldr	r4, [r1, #4]
 8086546:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 8086548:	688c      	ldr	r4, [r1, #8]
 808654a:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 808654c:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 808654e:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 8086550:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 8086552:	bd10      	pop	{r4, pc}

08086554 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8086554:	b510      	push	{r4, lr}
 8086556:	4604      	mov	r4, r0
{
	free(buffer);
 8086558:	6800      	ldr	r0, [r0, #0]
 808655a:	f7ff fa8b 	bl	8085a74 <free>
}
 808655e:	4620      	mov	r0, r4
 8086560:	bd10      	pop	{r4, pc}

08086562 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8086562:	b510      	push	{r4, lr}
 8086564:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8086566:	6800      	ldr	r0, [r0, #0]
 8086568:	b108      	cbz	r0, 808656e <_ZN6String10invalidateEv+0xc>
 808656a:	f7ff fa83 	bl	8085a74 <free>
	buffer = NULL;
 808656e:	2300      	movs	r3, #0
 8086570:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8086572:	60a3      	str	r3, [r4, #8]
 8086574:	6063      	str	r3, [r4, #4]
 8086576:	bd10      	pop	{r4, pc}

08086578 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8086578:	b538      	push	{r3, r4, r5, lr}
 808657a:	4604      	mov	r4, r0
 808657c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808657e:	6800      	ldr	r0, [r0, #0]
 8086580:	3101      	adds	r1, #1
 8086582:	f7ff fa7f 	bl	8085a84 <realloc>
	if (newbuffer) {
 8086586:	b110      	cbz	r0, 808658e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8086588:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808658c:	2001      	movs	r0, #1
	}
	return 0;
}
 808658e:	bd38      	pop	{r3, r4, r5, pc}

08086590 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8086590:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8086592:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8086594:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8086596:	b113      	cbz	r3, 808659e <_ZN6String7reserveEj+0xe>
 8086598:	6843      	ldr	r3, [r0, #4]
 808659a:	428b      	cmp	r3, r1
 808659c:	d207      	bcs.n	80865ae <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808659e:	4620      	mov	r0, r4
 80865a0:	f7ff ffea 	bl	8086578 <_ZN6String12changeBufferEj>
 80865a4:	b120      	cbz	r0, 80865b0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80865a6:	68a3      	ldr	r3, [r4, #8]
 80865a8:	b90b      	cbnz	r3, 80865ae <_ZN6String7reserveEj+0x1e>
 80865aa:	6822      	ldr	r2, [r4, #0]
 80865ac:	7013      	strb	r3, [r2, #0]
 80865ae:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80865b0:	bd10      	pop	{r4, pc}

080865b2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80865b2:	b570      	push	{r4, r5, r6, lr}
 80865b4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80865b6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80865b8:	4604      	mov	r4, r0
 80865ba:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80865bc:	f7ff ffe8 	bl	8086590 <_ZN6String7reserveEj>
 80865c0:	b918      	cbnz	r0, 80865ca <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80865c2:	4620      	mov	r0, r4
 80865c4:	f7ff ffcd 	bl	8086562 <_ZN6String10invalidateEv>
		return *this;
 80865c8:	e009      	b.n	80865de <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80865ca:	462a      	mov	r2, r5
 80865cc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80865ce:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80865d0:	6820      	ldr	r0, [r4, #0]
 80865d2:	f004 fe5e 	bl	808b292 <memcpy>
	buffer[len] = 0;
 80865d6:	6822      	ldr	r2, [r4, #0]
 80865d8:	68a3      	ldr	r3, [r4, #8]
 80865da:	2100      	movs	r1, #0
 80865dc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80865de:	4620      	mov	r0, r4
 80865e0:	bd70      	pop	{r4, r5, r6, pc}

080865e2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80865e2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80865e4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80865e6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80865e8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80865ea:	6043      	str	r3, [r0, #4]
	len = 0;
 80865ec:	6083      	str	r3, [r0, #8]
	flags = 0;
 80865ee:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80865f0:	460d      	mov	r5, r1
 80865f2:	b139      	cbz	r1, 8086604 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80865f4:	4608      	mov	r0, r1
 80865f6:	f005 fbfd 	bl	808bdf4 <strlen>
 80865fa:	4629      	mov	r1, r5
 80865fc:	4602      	mov	r2, r0
 80865fe:	4620      	mov	r0, r4
 8086600:	f7ff ffd7 	bl	80865b2 <_ZN6String4copyEPKcj>
}
 8086604:	4620      	mov	r0, r4
 8086606:	bd38      	pop	{r3, r4, r5, pc}

08086608 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8086608:	b538      	push	{r3, r4, r5, lr}
 808660a:	4605      	mov	r5, r0
	if (buffer) {
 808660c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808660e:	460c      	mov	r4, r1
	if (buffer) {
 8086610:	b160      	cbz	r0, 808662c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8086612:	686a      	ldr	r2, [r5, #4]
 8086614:	688b      	ldr	r3, [r1, #8]
 8086616:	429a      	cmp	r2, r3
 8086618:	d306      	bcc.n	8086628 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808661a:	6809      	ldr	r1, [r1, #0]
 808661c:	f004 feb2 	bl	808b384 <strcpy>
			len = rhs.len;
 8086620:	68a3      	ldr	r3, [r4, #8]
 8086622:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8086624:	2300      	movs	r3, #0
 8086626:	e00a      	b.n	808663e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8086628:	f7ff fa24 	bl	8085a74 <free>
		}
	}
	buffer = rhs.buffer;
 808662c:	6823      	ldr	r3, [r4, #0]
 808662e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8086630:	6863      	ldr	r3, [r4, #4]
 8086632:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8086634:	68a3      	ldr	r3, [r4, #8]
 8086636:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8086638:	2300      	movs	r3, #0
 808663a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808663c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 808663e:	60a3      	str	r3, [r4, #8]
 8086640:	bd38      	pop	{r3, r4, r5, pc}

08086642 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8086642:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8086644:	b510      	push	{r4, lr}
 8086646:	460b      	mov	r3, r1
 8086648:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808664a:	d007      	beq.n	808665c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808664c:	6809      	ldr	r1, [r1, #0]
 808664e:	b119      	cbz	r1, 8086658 <_ZN6StringaSERKS_+0x16>
 8086650:	689a      	ldr	r2, [r3, #8]
 8086652:	f7ff ffae 	bl	80865b2 <_ZN6String4copyEPKcj>
 8086656:	e001      	b.n	808665c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8086658:	f7ff ff83 	bl	8086562 <_ZN6String10invalidateEv>

	return *this;
}
 808665c:	4620      	mov	r0, r4
 808665e:	bd10      	pop	{r4, pc}

08086660 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8086660:	b510      	push	{r4, lr}
 8086662:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086664:	2300      	movs	r3, #0
 8086666:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8086668:	6043      	str	r3, [r0, #4]
	len = 0;
 808666a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808666c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808666e:	f7ff ffe8 	bl	8086642 <_ZN6StringaSERKS_>
}
 8086672:	4620      	mov	r0, r4
 8086674:	bd10      	pop	{r4, pc}

08086676 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8086676:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8086678:	b510      	push	{r4, lr}
 808667a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808667c:	d001      	beq.n	8086682 <_ZN6StringaSEOS_+0xc>
 808667e:	f7ff ffc3 	bl	8086608 <_ZN6String4moveERS_>
	return *this;
}
 8086682:	4620      	mov	r0, r4
 8086684:	bd10      	pop	{r4, pc}

08086686 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8086686:	b570      	push	{r4, r5, r6, lr}
 8086688:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808668a:	460e      	mov	r6, r1
 808668c:	b909      	cbnz	r1, 8086692 <_ZN6String6concatEPKcj+0xc>
 808668e:	2000      	movs	r0, #0
 8086690:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8086692:	b16a      	cbz	r2, 80866b0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8086694:	6883      	ldr	r3, [r0, #8]
 8086696:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8086698:	4629      	mov	r1, r5
 808669a:	f7ff ff79 	bl	8086590 <_ZN6String7reserveEj>
 808669e:	2800      	cmp	r0, #0
 80866a0:	d0f5      	beq.n	808668e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80866a2:	6820      	ldr	r0, [r4, #0]
 80866a4:	68a3      	ldr	r3, [r4, #8]
 80866a6:	4631      	mov	r1, r6
 80866a8:	4418      	add	r0, r3
 80866aa:	f004 fe6b 	bl	808b384 <strcpy>
	len = newlen;
 80866ae:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80866b0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80866b2:	bd70      	pop	{r4, r5, r6, pc}

080866b4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80866b4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80866b6:	688a      	ldr	r2, [r1, #8]
 80866b8:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80866ba:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80866bc:	f7ff ffe3 	bl	8086686 <_ZN6String6concatEPKcj>
 80866c0:	b910      	cbnz	r0, 80866c8 <_ZplRK15StringSumHelperRK6String+0x14>
 80866c2:	4620      	mov	r0, r4
 80866c4:	f7ff ff4d 	bl	8086562 <_ZN6String10invalidateEv>
	return a;
}
 80866c8:	4620      	mov	r0, r4
 80866ca:	bd10      	pop	{r4, pc}

080866cc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80866cc:	b538      	push	{r3, r4, r5, lr}
 80866ce:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80866d0:	460d      	mov	r5, r1
 80866d2:	b141      	cbz	r1, 80866e6 <_ZplRK15StringSumHelperPKc+0x1a>
 80866d4:	4608      	mov	r0, r1
 80866d6:	f005 fb8d 	bl	808bdf4 <strlen>
 80866da:	4629      	mov	r1, r5
 80866dc:	4602      	mov	r2, r0
 80866de:	4620      	mov	r0, r4
 80866e0:	f7ff ffd1 	bl	8086686 <_ZN6String6concatEPKcj>
 80866e4:	b910      	cbnz	r0, 80866ec <_ZplRK15StringSumHelperPKc+0x20>
 80866e6:	4620      	mov	r0, r4
 80866e8:	f7ff ff3b 	bl	8086562 <_ZN6String10invalidateEv>
	return a;
}
 80866ec:	4620      	mov	r0, r4
 80866ee:	bd38      	pop	{r3, r4, r5, pc}

080866f0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80866f0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80866f2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80866f4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80866f6:	b912      	cbnz	r2, 80866fe <_ZNK6String6equalsEPKc+0xe>
 80866f8:	b919      	cbnz	r1, 8086702 <_ZNK6String6equalsEPKc+0x12>
 80866fa:	2001      	movs	r0, #1
 80866fc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80866fe:	b911      	cbnz	r1, 8086706 <_ZNK6String6equalsEPKc+0x16>
 8086700:	6803      	ldr	r3, [r0, #0]
 8086702:	7818      	ldrb	r0, [r3, #0]
 8086704:	e002      	b.n	808670c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8086706:	6800      	ldr	r0, [r0, #0]
 8086708:	f004 fe32 	bl	808b370 <strcmp>
 808670c:	fab0 f080 	clz	r0, r0
 8086710:	0940      	lsrs	r0, r0, #5
}
 8086712:	bd08      	pop	{r3, pc}

08086714 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 8086714:	6883      	ldr	r3, [r0, #8]
 8086716:	428b      	cmp	r3, r1
 8086718:	d901      	bls.n	808671e <_ZN6StringixEj+0xa>
 808671a:	6800      	ldr	r0, [r0, #0]
 808671c:	b918      	cbnz	r0, 8086726 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 808671e:	4803      	ldr	r0, [pc, #12]	; (808672c <_ZN6StringixEj+0x18>)
 8086720:	2300      	movs	r3, #0
 8086722:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 8086724:	4770      	bx	lr
	}
	return buffer[index];
 8086726:	4408      	add	r0, r1
}
 8086728:	4770      	bx	lr
 808672a:	bf00      	nop
 808672c:	20000900 	.word	0x20000900

08086730 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8086730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086732:	4606      	mov	r6, r0
 8086734:	460d      	mov	r5, r1
 8086736:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8086738:	2400      	movs	r4, #0
  while (size--) {
 808673a:	42bd      	cmp	r5, r7
 808673c:	d00c      	beq.n	8086758 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808673e:	6833      	ldr	r3, [r6, #0]
 8086740:	f815 1b01 	ldrb.w	r1, [r5], #1
 8086744:	689b      	ldr	r3, [r3, #8]
 8086746:	4630      	mov	r0, r6
 8086748:	4798      	blx	r3
     if (chunk>=0)
 808674a:	2800      	cmp	r0, #0
 808674c:	db01      	blt.n	8086752 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808674e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8086750:	e7f3      	b.n	808673a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8086752:	2c00      	cmp	r4, #0
 8086754:	bf08      	it	eq
 8086756:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8086758:	4620      	mov	r0, r4
 808675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808675c <_ZN5Print5printEPKc>:
 808675c:	b508      	push	{r3, lr}
 808675e:	f7fc f847 	bl	80827f0 <_ZN5Print5writeEPKc>
 8086762:	bd08      	pop	{r3, pc}

08086764 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8086764:	6803      	ldr	r3, [r0, #0]
 8086766:	689b      	ldr	r3, [r3, #8]
 8086768:	4718      	bx	r3

0808676a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 808676a:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808676c:	f7fc f840 	bl	80827f0 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 8086770:	bd08      	pop	{r3, pc}

08086772 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 8086772:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8086774:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8086776:	4605      	mov	r5, r0
  size_t n = print('\r');
 8086778:	f7ff fff4 	bl	8086764 <_ZN5Print5printEc>
  n += print('\n');
 808677c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808677e:	4604      	mov	r4, r0
  n += print('\n');
 8086780:	4628      	mov	r0, r5
 8086782:	f7ff ffef 	bl	8086764 <_ZN5Print5printEc>
  return n;
}
 8086786:	4420      	add	r0, r4
 8086788:	bd38      	pop	{r3, r4, r5, pc}

0808678a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808678a:	b538      	push	{r3, r4, r5, lr}
 808678c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808678e:	f7fc f82f 	bl	80827f0 <_ZN5Print5writeEPKc>
 8086792:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8086794:	4628      	mov	r0, r5
 8086796:	f7ff ffec 	bl	8086772 <_ZN5Print7printlnEv>
  return n;
}
 808679a:	4420      	add	r0, r4
 808679c:	bd38      	pop	{r3, r4, r5, pc}

0808679e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808679e:	2a01      	cmp	r2, #1
 80867a0:	bf98      	it	ls
 80867a2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80867a4:	b530      	push	{r4, r5, lr}
 80867a6:	460b      	mov	r3, r1
 80867a8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80867aa:	2100      	movs	r1, #0
 80867ac:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80867b0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80867b4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80867b8:	fb05 3312 	mls	r3, r5, r2, r3
 80867bc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80867be:	2b09      	cmp	r3, #9
 80867c0:	bf94      	ite	ls
 80867c2:	3330      	addls	r3, #48	; 0x30
 80867c4:	3337      	addhi	r3, #55	; 0x37
 80867c6:	b2db      	uxtb	r3, r3
 80867c8:	4621      	mov	r1, r4
 80867ca:	f804 3901 	strb.w	r3, [r4], #-1
 80867ce:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80867d0:	2d00      	cmp	r5, #0
 80867d2:	d1ef      	bne.n	80867b4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80867d4:	f7fc f80c 	bl	80827f0 <_ZN5Print5writeEPKc>
}
 80867d8:	b00b      	add	sp, #44	; 0x2c
 80867da:	bd30      	pop	{r4, r5, pc}

080867dc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80867dc:	b40c      	push	{r2, r3}
 80867de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80867e2:	b087      	sub	sp, #28
 80867e4:	af00      	add	r7, sp, #0
 80867e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80867ea:	f854 9b04 	ldr.w	r9, [r4], #4
 80867ee:	4605      	mov	r5, r0
 80867f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80867f2:	4623      	mov	r3, r4
 80867f4:	464a      	mov	r2, r9
 80867f6:	2114      	movs	r1, #20
 80867f8:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80867fa:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80867fc:	f7ff f972 	bl	8085ae4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8086800:	2813      	cmp	r0, #19
 8086802:	d805      	bhi.n	8086810 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086804:	1d39      	adds	r1, r7, #4
 8086806:	4628      	mov	r0, r5
 8086808:	f7fb fff2 	bl	80827f0 <_ZN5Print5writeEPKc>
 808680c:	4604      	mov	r4, r0
 808680e:	e013      	b.n	8086838 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8086810:	f100 0308 	add.w	r3, r0, #8
 8086814:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8086818:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808681a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808681e:	1c41      	adds	r1, r0, #1
 8086820:	4623      	mov	r3, r4
 8086822:	464a      	mov	r2, r9
 8086824:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8086826:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8086828:	f7ff f95c 	bl	8085ae4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808682c:	4669      	mov	r1, sp
 808682e:	4628      	mov	r0, r5
 8086830:	f7fb ffde 	bl	80827f0 <_ZN5Print5writeEPKc>
 8086834:	4604      	mov	r4, r0
 8086836:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8086838:	b11e      	cbz	r6, 8086842 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808683a:	4628      	mov	r0, r5
 808683c:	f7ff ff99 	bl	8086772 <_ZN5Print7printlnEv>
 8086840:	4404      	add	r4, r0
    return n;
}
 8086842:	4620      	mov	r0, r4
 8086844:	371c      	adds	r7, #28
 8086846:	46bd      	mov	sp, r7
 8086848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808684c:	b002      	add	sp, #8
 808684e:	4770      	bx	lr

08086850 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8086850:	6880      	ldr	r0, [r0, #8]
 8086852:	6803      	ldr	r3, [r0, #0]
 8086854:	68db      	ldr	r3, [r3, #12]
 8086856:	4718      	bx	r3

08086858 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 8086858:	4770      	bx	lr

0808685a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 808685a:	b119      	cbz	r1, 8086864 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 808685c:	680b      	ldr	r3, [r1, #0]
 808685e:	4608      	mov	r0, r1
 8086860:	685b      	ldr	r3, [r3, #4]
 8086862:	4718      	bx	r3
 8086864:	4770      	bx	lr

08086866 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8086866:	b119      	cbz	r1, 8086870 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 8086868:	680b      	ldr	r3, [r1, #0]
 808686a:	4608      	mov	r0, r1
 808686c:	685b      	ldr	r3, [r3, #4]
 808686e:	4718      	bx	r3
 8086870:	4770      	bx	lr

08086872 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 8086872:	4770      	bx	lr

08086874 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 8086874:	4770      	bx	lr

08086876 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 8086876:	4770      	bx	lr

08086878 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8086878:	b538      	push	{r3, r4, r5, lr}
 808687a:	4604      	mov	r4, r0
 808687c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 808687e:	6800      	ldr	r0, [r0, #0]
 8086880:	212e      	movs	r1, #46	; 0x2e
 8086882:	f004 fd6b 	bl	808b35c <strchrnul>
    size = s - category;
 8086886:	6823      	ldr	r3, [r4, #0]
 8086888:	1ac3      	subs	r3, r0, r3
 808688a:	602b      	str	r3, [r5, #0]
    if (size) {
 808688c:	b123      	cbz	r3, 8086898 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 808688e:	7803      	ldrb	r3, [r0, #0]
 8086890:	b103      	cbz	r3, 8086894 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 8086892:	3001      	adds	r0, #1
 8086894:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8086896:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 8086898:	4618      	mov	r0, r3
}
 808689a:	bd38      	pop	{r3, r4, r5, pc}

0808689c <_ZN5spark16JSONStreamWriterD0Ev>:
 808689c:	b510      	push	{r4, lr}
 808689e:	4604      	mov	r4, r0
 80868a0:	210c      	movs	r1, #12
 80868a2:	f002 ffc3 	bl	808982c <_ZdlPvj>
 80868a6:	4620      	mov	r0, r4
 80868a8:	bd10      	pop	{r4, pc}

080868aa <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80868aa:	b510      	push	{r4, lr}
 80868ac:	4604      	mov	r4, r0
 80868ae:	2104      	movs	r1, #4
 80868b0:	f002 ffbc 	bl	808982c <_ZdlPvj>
 80868b4:	4620      	mov	r0, r4
 80868b6:	bd10      	pop	{r4, pc}

080868b8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80868b8:	b510      	push	{r4, lr}
 80868ba:	4604      	mov	r4, r0
 80868bc:	2104      	movs	r1, #4
 80868be:	f002 ffb5 	bl	808982c <_ZdlPvj>
 80868c2:	4620      	mov	r0, r4
 80868c4:	bd10      	pop	{r4, pc}

080868c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80868c6:	b538      	push	{r3, r4, r5, lr}
 80868c8:	460c      	mov	r4, r1
 80868ca:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80868cc:	f001 fff2 	bl	80888b4 <_Z16_fetch_usbserialv>
 80868d0:	4284      	cmp	r4, r0
 80868d2:	d102      	bne.n	80868da <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80868d4:	f001 ffee 	bl	80888b4 <_Z16_fetch_usbserialv>
 80868d8:	e005      	b.n	80868e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 80868da:	f002 f827 	bl	808892c <_Z17_fetch_usbserial1v>
 80868de:	4284      	cmp	r4, r0
 80868e0:	d105      	bne.n	80868ee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 80868e2:	f002 f823 	bl	808892c <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80868e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 80868ea:	f001 bfc9 	b.w	8088880 <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 80868ee:	f002 f99b 	bl	8088c28 <_Z22__fetch_global_Serial1v>
 80868f2:	4284      	cmp	r4, r0
 80868f4:	d105      	bne.n	8086902 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 80868f6:	f002 f997 	bl	8088c28 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80868fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 80868fe:	f002 b98c 	b.w	8088c1a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 8086902:	4621      	mov	r1, r4
 8086904:	4628      	mov	r0, r5
 8086906:	f7ff ffae 	bl	8086866 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 808690a:	bd38      	pop	{r3, r4, r5, pc}

0808690c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 808690c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 808690e:	f004 fd2f 	bl	808b370 <strcmp>
}
 8086912:	fab0 f080 	clz	r0, r0
 8086916:	0940      	lsrs	r0, r0, #5
 8086918:	bd08      	pop	{r3, pc}

0808691a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808691a:	b538      	push	{r3, r4, r5, lr}
 808691c:	4605      	mov	r5, r0
    return value(val, strlen(val));
 808691e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8086920:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8086922:	f005 fa67 	bl	808bdf4 <strlen>
 8086926:	4621      	mov	r1, r4
 8086928:	4602      	mov	r2, r0
 808692a:	4628      	mov	r0, r5
}
 808692c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 8086930:	f002 bc31 	b.w	8089196 <_ZN5spark10JSONWriter5valueEPKcj>

08086934 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 8086934:	b570      	push	{r4, r5, r6, lr}
 8086936:	4604      	mov	r4, r0
    write(str, strlen(str));
 8086938:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 808693a:	460d      	mov	r5, r1
    write(str, strlen(str));
 808693c:	f005 fa5a 	bl	808bdf4 <strlen>
 8086940:	6823      	ldr	r3, [r4, #0]
 8086942:	4602      	mov	r2, r0
 8086944:	4629      	mov	r1, r5
 8086946:	4620      	mov	r0, r4
}
 8086948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 808694c:	68db      	ldr	r3, [r3, #12]
 808694e:	4718      	bx	r3

08086950 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 8086950:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 8086952:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 8086954:	ab02      	add	r3, sp, #8
 8086956:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 808695a:	68d4      	ldr	r4, [r2, #12]
 808695c:	4619      	mov	r1, r3
 808695e:	2201      	movs	r2, #1
 8086960:	47a0      	blx	r4
}
 8086962:	b002      	add	sp, #8
 8086964:	bd10      	pop	{r4, pc}
	...

08086968 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8086968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808696c:	6807      	ldr	r7, [r0, #0]
 808696e:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8086970:	463c      	mov	r4, r7
 8086972:	6845      	ldr	r5, [r0, #4]
 8086974:	4691      	mov	r9, r2
 8086976:	2214      	movs	r2, #20
 8086978:	4355      	muls	r5, r2
 808697a:	b085      	sub	sp, #20
 808697c:	9301      	str	r3, [sp, #4]
 808697e:	10ab      	asrs	r3, r5, #2
 8086980:	4d18      	ldr	r5, [pc, #96]	; (80869e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 8086982:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8086984:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8086986:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8086988:	2d00      	cmp	r5, #0
 808698a:	9303      	str	r3, [sp, #12]
 808698c:	dd23      	ble.n	80869d6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 808698e:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 8086990:	106e      	asrs	r6, r5, #1
 8086992:	fb03 f006 	mul.w	r0, r3, r6
 8086996:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 808699a:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 808699e:	464a      	mov	r2, r9
 80869a0:	45d1      	cmp	r9, sl
 80869a2:	bf28      	it	cs
 80869a4:	4652      	movcs	r2, sl
 80869a6:	4659      	mov	r1, fp
 80869a8:	5820      	ldr	r0, [r4, r0]
 80869aa:	f005 fa2b 	bl	808be04 <strncmp>
                if (cmp == 0) {
 80869ae:	9b03      	ldr	r3, [sp, #12]
 80869b0:	b948      	cbnz	r0, 80869c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 80869b2:	45d1      	cmp	r9, sl
 80869b4:	d103      	bne.n	80869be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80869b6:	9a01      	ldr	r2, [sp, #4]
 80869b8:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80869ba:	4635      	mov	r5, r6
 80869bc:	e7e4      	b.n	8086988 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 80869be:	bf8c      	ite	hi
 80869c0:	2001      	movhi	r0, #1
 80869c2:	2000      	movls	r0, #0
 80869c4:	e000      	b.n	80869c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 80869c6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80869c8:	2800      	cmp	r0, #0
 80869ca:	d0f6      	beq.n	80869ba <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80869cc:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 80869ce:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 80869d2:	3e01      	subs	r6, #1
 80869d4:	e7f1      	b.n	80869ba <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 80869d6:	1be4      	subs	r4, r4, r7
}
 80869d8:	4802      	ldr	r0, [pc, #8]	; (80869e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 80869da:	10a4      	asrs	r4, r4, #2
}
 80869dc:	4360      	muls	r0, r4
 80869de:	b005      	add	sp, #20
 80869e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80869e4:	cccccccd 	.word	0xcccccccd

080869e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80869e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 80869ea:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80869ec:	b085      	sub	sp, #20
 80869ee:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 80869f0:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 80869f2:	b313      	cbz	r3, 8086a3a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 80869f4:	b309      	cbz	r1, 8086a3a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80869f6:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80869f8:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80869fa:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80869fc:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8086a00:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 8086a04:	4639      	mov	r1, r7
 8086a06:	a801      	add	r0, sp, #4
 8086a08:	f7ff ff36 	bl	8086878 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8086a0c:	4601      	mov	r1, r0
 8086a0e:	b1a0      	cbz	r0, 8086a3a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 8086a10:	ab04      	add	r3, sp, #16
 8086a12:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 8086a16:	9a03      	ldr	r2, [sp, #12]
 8086a18:	4620      	mov	r0, r4
 8086a1a:	f7ff ffa5 	bl	8086968 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8086a1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8086a22:	b153      	cbz	r3, 8086a3a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 8086a24:	6823      	ldr	r3, [r4, #0]
 8086a26:	2414      	movs	r4, #20
 8086a28:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 8086a2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 8086a30:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 8086a32:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8086a34:	bfa8      	it	ge
 8086a36:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 8086a38:	e7e4      	b.n	8086a04 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 8086a3a:	4630      	mov	r0, r6
 8086a3c:	b005      	add	sp, #20
 8086a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086a40 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8086a40:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8086a42:	4c09      	ldr	r4, [pc, #36]	; (8086a68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 8086a44:	6823      	ldr	r3, [r4, #0]
 8086a46:	07db      	lsls	r3, r3, #31
 8086a48:	d40b      	bmi.n	8086a62 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 8086a4a:	4620      	mov	r0, r4
 8086a4c:	f7f9 fb3a 	bl	80800c4 <__cxa_guard_acquire>
 8086a50:	b138      	cbz	r0, 8086a62 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 8086a52:	4620      	mov	r0, r4
 8086a54:	f7f9 fb3b 	bl	80800ce <__cxa_guard_release>
 8086a58:	4a04      	ldr	r2, [pc, #16]	; (8086a6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 8086a5a:	4905      	ldr	r1, [pc, #20]	; (8086a70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8086a5c:	4805      	ldr	r0, [pc, #20]	; (8086a74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8086a5e:	f002 fed7 	bl	8089810 <__aeabi_atexit>
    return &factory;
}
 8086a62:	4804      	ldr	r0, [pc, #16]	; (8086a74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8086a64:	bd10      	pop	{r4, pc}
 8086a66:	bf00      	nop
 8086a68:	20000904 	.word	0x20000904
 8086a6c:	20000144 	.word	0x20000144
 8086a70:	08086875 	.word	0x08086875
 8086a74:	2000004c 	.word	0x2000004c

08086a78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8086a78:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8086a7a:	4c09      	ldr	r4, [pc, #36]	; (8086aa0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 8086a7c:	6823      	ldr	r3, [r4, #0]
 8086a7e:	07db      	lsls	r3, r3, #31
 8086a80:	d40b      	bmi.n	8086a9a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 8086a82:	4620      	mov	r0, r4
 8086a84:	f7f9 fb1e 	bl	80800c4 <__cxa_guard_acquire>
 8086a88:	b138      	cbz	r0, 8086a9a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 8086a8a:	4620      	mov	r0, r4
 8086a8c:	f7f9 fb1f 	bl	80800ce <__cxa_guard_release>
 8086a90:	4a04      	ldr	r2, [pc, #16]	; (8086aa4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8086a92:	4905      	ldr	r1, [pc, #20]	; (8086aa8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8086a94:	4805      	ldr	r0, [pc, #20]	; (8086aac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8086a96:	f002 febb 	bl	8089810 <__aeabi_atexit>
    return &factory;
}
 8086a9a:	4804      	ldr	r0, [pc, #16]	; (8086aac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8086a9c:	bd10      	pop	{r4, pc}
 8086a9e:	bf00      	nop
 8086aa0:	20000934 	.word	0x20000934
 8086aa4:	20000144 	.word	0x20000144
 8086aa8:	08086873 	.word	0x08086873
 8086aac:	20000048 	.word	0x20000048

08086ab0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8086ab0:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8086ab2:	2500      	movs	r5, #0
 8086ab4:	4604      	mov	r4, r0
 8086ab6:	6005      	str	r5, [r0, #0]
 8086ab8:	6045      	str	r5, [r0, #4]
 8086aba:	6085      	str	r5, [r0, #8]
 8086abc:	6105      	str	r5, [r0, #16]
 8086abe:	6145      	str	r5, [r0, #20]
 8086ac0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8086ac2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 8086ac6:	f7fe fd47 	bl	8085558 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8086aca:	f7ff ffb9 	bl	8086a40 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8086ace:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8086ad0:	f7ff ffd2 	bl	8086a78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8086ad4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8086ad6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 8086ad8:	4620      	mov	r0, r4
 8086ada:	bd38      	pop	{r3, r4, r5, pc}

08086adc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8086adc:	b510      	push	{r4, lr}
    static LogManager mgr;
 8086ade:	4c0a      	ldr	r4, [pc, #40]	; (8086b08 <_ZN5spark10LogManager8instanceEv+0x2c>)
 8086ae0:	6823      	ldr	r3, [r4, #0]
 8086ae2:	07db      	lsls	r3, r3, #31
 8086ae4:	d40e      	bmi.n	8086b04 <_ZN5spark10LogManager8instanceEv+0x28>
 8086ae6:	4620      	mov	r0, r4
 8086ae8:	f7f9 faec 	bl	80800c4 <__cxa_guard_acquire>
 8086aec:	b150      	cbz	r0, 8086b04 <_ZN5spark10LogManager8instanceEv+0x28>
 8086aee:	4807      	ldr	r0, [pc, #28]	; (8086b0c <_ZN5spark10LogManager8instanceEv+0x30>)
 8086af0:	f7ff ffde 	bl	8086ab0 <_ZN5spark10LogManagerC1Ev>
 8086af4:	4620      	mov	r0, r4
 8086af6:	f7f9 faea 	bl	80800ce <__cxa_guard_release>
 8086afa:	4a05      	ldr	r2, [pc, #20]	; (8086b10 <_ZN5spark10LogManager8instanceEv+0x34>)
 8086afc:	4905      	ldr	r1, [pc, #20]	; (8086b14 <_ZN5spark10LogManager8instanceEv+0x38>)
 8086afe:	4803      	ldr	r0, [pc, #12]	; (8086b0c <_ZN5spark10LogManager8instanceEv+0x30>)
 8086b00:	f002 fe86 	bl	8089810 <__aeabi_atexit>
    return &mgr;
}
 8086b04:	4801      	ldr	r0, [pc, #4]	; (8086b0c <_ZN5spark10LogManager8instanceEv+0x30>)
 8086b06:	bd10      	pop	{r4, pc}
 8086b08:	20000908 	.word	0x20000908
 8086b0c:	2000090c 	.word	0x2000090c
 8086b10:	20000144 	.word	0x20000144
 8086b14:	08086f75 	.word	0x08086f75

08086b18 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8086b18:	2300      	movs	r3, #0
 8086b1a:	4a02      	ldr	r2, [pc, #8]	; (8086b24 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8086b1c:	4902      	ldr	r1, [pc, #8]	; (8086b28 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8086b1e:	4803      	ldr	r0, [pc, #12]	; (8086b2c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8086b20:	f7fe beba 	b.w	8085898 <log_set_callbacks>
 8086b24:	08086e59 	.word	0x08086e59
 8086b28:	08086de9 	.word	0x08086de9
 8086b2c:	08086d71 	.word	0x08086d71

08086b30 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8086b30:	2300      	movs	r3, #0
 8086b32:	461a      	mov	r2, r3
 8086b34:	4619      	mov	r1, r3
 8086b36:	4618      	mov	r0, r3
 8086b38:	f7fe beae 	b.w	8085898 <log_set_callbacks>

08086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8086b3c:	680b      	ldr	r3, [r1, #0]
 8086b3e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8086b40:	b113      	cbz	r3, 8086b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8086b42:	685a      	ldr	r2, [r3, #4]
 8086b44:	3201      	adds	r2, #1
 8086b46:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8086b48:	4770      	bx	lr

08086b4a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8086b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086b4c:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 8086b4e:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086b50:	f851 3b04 	ldr.w	r3, [r1], #4
 8086b54:	ac02      	add	r4, sp, #8
 8086b56:	f844 3d08 	str.w	r3, [r4, #-8]!
 8086b5a:	a801      	add	r0, sp, #4
 8086b5c:	f7ff ffee 	bl	8086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8086b60:	4622      	mov	r2, r4
 8086b62:	4631      	mov	r1, r6
 8086b64:	4628      	mov	r0, r5
 8086b66:	f002 fb63 	bl	8089230 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8086b6a:	a801      	add	r0, sp, #4
 8086b6c:	f7f9 ffd8 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8086b70:	4628      	mov	r0, r5
 8086b72:	b002      	add	sp, #8
 8086b74:	bd70      	pop	{r4, r5, r6, pc}

08086b76 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8086b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086b78:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 8086b7a:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086b7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8086b80:	ac02      	add	r4, sp, #8
 8086b82:	f844 3d08 	str.w	r3, [r4, #-8]!
 8086b86:	a801      	add	r0, sp, #4
 8086b88:	f7ff ffd8 	bl	8086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8086b8c:	4622      	mov	r2, r4
 8086b8e:	4631      	mov	r1, r6
 8086b90:	4628      	mov	r0, r5
 8086b92:	f002 fb68 	bl	8089266 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8086b96:	a801      	add	r0, sp, #4
 8086b98:	f7f9 ffc2 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8086b9c:	4628      	mov	r0, r5
 8086b9e:	b002      	add	sp, #8
 8086ba0:	bd70      	pop	{r4, r5, r6, pc}

08086ba2 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
 8086ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086ba4:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 8086ba6:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086ba8:	f851 3b04 	ldr.w	r3, [r1], #4
 8086bac:	ac02      	add	r4, sp, #8
 8086bae:	f844 3d08 	str.w	r3, [r4, #-8]!
 8086bb2:	a801      	add	r0, sp, #4
 8086bb4:	f7ff ffc2 	bl	8086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8086bb8:	4622      	mov	r2, r4
 8086bba:	4631      	mov	r1, r6
 8086bbc:	4628      	mov	r0, r5
 8086bbe:	f002 fb0f 	bl	80891e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8086bc2:	a801      	add	r0, sp, #4
 8086bc4:	f7f9 ffac 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8086bc8:	4628      	mov	r0, r5
 8086bca:	b002      	add	sp, #8
 8086bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08086bd0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8086bd0:	b530      	push	{r4, r5, lr}
 8086bd2:	b08b      	sub	sp, #44	; 0x2c
 8086bd4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8086bd6:	4601      	mov	r1, r0
 8086bd8:	a804      	add	r0, sp, #16
 8086bda:	f7ff ffb6 	bl	8086b4a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 8086bde:	a804      	add	r0, sp, #16
 8086be0:	f002 fa1b 	bl	808901a <_ZN5spark18JSONObjectIterator4nextEv>
 8086be4:	b1e8      	cbz	r0, 8086c22 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 8086be6:	a904      	add	r1, sp, #16
 8086be8:	4668      	mov	r0, sp
 8086bea:	f7ff ffda 	bl	8086ba2 <_ZNK5spark18JSONObjectIterator4nameEv>
 8086bee:	490f      	ldr	r1, [pc, #60]	; (8086c2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 8086bf0:	9802      	ldr	r0, [sp, #8]
 8086bf2:	f7ff fe8b 	bl	808690c <_ZNK5spark10JSONStringeqEPKc.isra.7>
 8086bf6:	4604      	mov	r4, r0
 8086bf8:	b110      	cbz	r0, 8086c00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 8086bfa:	1c2c      	adds	r4, r5, #0
 8086bfc:	bf18      	it	ne
 8086bfe:	2401      	movne	r4, #1
 8086c00:	a801      	add	r0, sp, #4
 8086c02:	f7f9 ff8d 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086c06:	2c00      	cmp	r4, #0
 8086c08:	d0e9      	beq.n	8086bde <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 8086c0a:	a904      	add	r1, sp, #16
 8086c0c:	4668      	mov	r0, sp
 8086c0e:	f7ff ffb2 	bl	8086b76 <_ZNK5spark18JSONObjectIterator5valueEv>
 8086c12:	4668      	mov	r0, sp
 8086c14:	f002 f9e1 	bl	8088fda <_ZNK5spark9JSONValue5toIntEv>
 8086c18:	6028      	str	r0, [r5, #0]
 8086c1a:	a801      	add	r0, sp, #4
 8086c1c:	f7f9 ff80 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086c20:	e7dd      	b.n	8086bde <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 8086c22:	a805      	add	r0, sp, #20
 8086c24:	f7f9 ff7c 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 8086c28:	b00b      	add	sp, #44	; 0x2c
 8086c2a:	bd30      	pop	{r4, r5, pc}
 8086c2c:	0808ee50 	.word	0x0808ee50

08086c30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8086c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086c32:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 8086c34:	491a      	ldr	r1, [pc, #104]	; (8086ca0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8086c36:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8086c38:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 8086c3a:	f004 fb99 	bl	808b370 <strcmp>
 8086c3e:	b940      	cbnz	r0, 8086c52 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 8086c40:	f001 fe38 	bl	80888b4 <_Z16_fetch_usbserialv>
 8086c44:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8086c48:	f001 fe16 	bl	8088878 <_ZN9USBSerial5beginEl>
        return &Serial;
 8086c4c:	f001 fe32 	bl	80888b4 <_Z16_fetch_usbserialv>
 8086c50:	e023      	b.n	8086c9a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 8086c52:	4914      	ldr	r1, [pc, #80]	; (8086ca4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8086c54:	4620      	mov	r0, r4
 8086c56:	f004 fb8b 	bl	808b370 <strcmp>
 8086c5a:	b940      	cbnz	r0, 8086c6e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 8086c5c:	f001 fe66 	bl	808892c <_Z17_fetch_usbserial1v>
 8086c60:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8086c64:	f001 fe08 	bl	8088878 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8086c68:	f001 fe60 	bl	808892c <_Z17_fetch_usbserial1v>
 8086c6c:	e015      	b.n	8086c9a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 8086c6e:	490e      	ldr	r1, [pc, #56]	; (8086ca8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 8086c70:	4620      	mov	r0, r4
 8086c72:	f004 fb7d 	bl	808b370 <strcmp>
 8086c76:	b978      	cbnz	r0, 8086c98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8086c78:	a902      	add	r1, sp, #8
 8086c7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8086c7e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 8086c82:	4628      	mov	r0, r5
 8086c84:	f7ff ffa4 	bl	8086bd0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8086c88:	f001 ffce 	bl	8088c28 <_Z22__fetch_global_Serial1v>
 8086c8c:	9901      	ldr	r1, [sp, #4]
 8086c8e:	f001 ffc1 	bl	8088c14 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 8086c92:	f001 ffc9 	bl	8088c28 <_Z22__fetch_global_Serial1v>
 8086c96:	e000      	b.n	8086c9a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 8086c98:	2000      	movs	r0, #0
}
 8086c9a:	b003      	add	sp, #12
 8086c9c:	bd30      	pop	{r4, r5, pc}
 8086c9e:	bf00      	nop
 8086ca0:	0808ee55 	.word	0x0808ee55
 8086ca4:	0808ee5c 	.word	0x0808ee5c
 8086ca8:	0808ee5f 	.word	0x0808ee5f

08086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086cac:	b570      	push	{r4, r5, r6, lr}
 8086cae:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 8086cb0:	6804      	ldr	r4, [r0, #0]
 8086cb2:	6843      	ldr	r3, [r0, #4]
 8086cb4:	2614      	movs	r6, #20
 8086cb6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8086cba:	42a6      	cmp	r6, r4
 8086cbc:	d005      	beq.n	8086cca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 8086cbe:	f104 0008 	add.w	r0, r4, #8
 8086cc2:	f7ff fff3 	bl	8086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8086cc6:	3414      	adds	r4, #20
 8086cc8:	e7f7      	b.n	8086cba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8086cca:	6828      	ldr	r0, [r5, #0]
 8086ccc:	f7fe fed2 	bl	8085a74 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8086cd0:	4628      	mov	r0, r5
 8086cd2:	bd70      	pop	{r4, r5, r6, pc}

08086cd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086cd4:	b570      	push	{r4, r5, r6, lr}
 8086cd6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 8086cd8:	6804      	ldr	r4, [r0, #0]
 8086cda:	6843      	ldr	r3, [r0, #4]
 8086cdc:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8086ce0:	42a6      	cmp	r6, r4
 8086ce2:	d004      	beq.n	8086cee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8086ce4:	4620      	mov	r0, r4
 8086ce6:	f7ff fc35 	bl	8086554 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8086cea:	3410      	adds	r4, #16
 8086cec:	e7f8      	b.n	8086ce0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8086cee:	6828      	ldr	r0, [r5, #0]
 8086cf0:	f7fe fec0 	bl	8085a74 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8086cf4:	4628      	mov	r0, r5
 8086cf6:	bd70      	pop	{r4, r5, r6, pc}

08086cf8 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 8086cf8:	b510      	push	{r4, lr}
 8086cfa:	4604      	mov	r4, r0
 8086cfc:	300c      	adds	r0, #12
 8086cfe:	f7ff ffd5 	bl	8086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8086d02:	4620      	mov	r0, r4
 8086d04:	f7ff ffe6 	bl	8086cd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8086d08:	4620      	mov	r0, r4
 8086d0a:	bd10      	pop	{r4, pc}

08086d0c <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 8086d0c:	b510      	push	{r4, lr}
 8086d0e:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 8086d10:	4b03      	ldr	r3, [pc, #12]	; (8086d20 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 8086d12:	f840 3b04 	str.w	r3, [r0], #4
 8086d16:	f7ff ffef 	bl	8086cf8 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 8086d1a:	4620      	mov	r0, r4
 8086d1c:	bd10      	pop	{r4, pc}
 8086d1e:	bf00      	nop
 8086d20:	0808e1d4 	.word	0x0808e1d4

08086d24 <_ZN5spark16StreamLogHandlerD0Ev>:
 8086d24:	b510      	push	{r4, lr}
 8086d26:	4604      	mov	r4, r0
 8086d28:	f7ff fff0 	bl	8086d0c <_ZN5spark16StreamLogHandlerD1Ev>
 8086d2c:	4620      	mov	r0, r4
 8086d2e:	2124      	movs	r1, #36	; 0x24
 8086d30:	f002 fd7c 	bl	808982c <_ZdlPvj>
 8086d34:	4620      	mov	r0, r4
 8086d36:	bd10      	pop	{r4, pc}

08086d38 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 8086d38:	b510      	push	{r4, lr}
 8086d3a:	4604      	mov	r4, r0
 8086d3c:	4b02      	ldr	r3, [pc, #8]	; (8086d48 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8086d3e:	6003      	str	r3, [r0, #0]
 8086d40:	f7ff ffe4 	bl	8086d0c <_ZN5spark16StreamLogHandlerD1Ev>
 8086d44:	4620      	mov	r0, r4
 8086d46:	bd10      	pop	{r4, pc}
 8086d48:	0808ee40 	.word	0x0808ee40

08086d4c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8086d4c:	b510      	push	{r4, lr}
 8086d4e:	4604      	mov	r4, r0
 8086d50:	f7ff fff2 	bl	8086d38 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8086d54:	4620      	mov	r0, r4
 8086d56:	2124      	movs	r1, #36	; 0x24
 8086d58:	f002 fd68 	bl	808982c <_ZdlPvj>
 8086d5c:	4620      	mov	r0, r4
 8086d5e:	bd10      	pop	{r4, pc}

08086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8086d60:	b510      	push	{r4, lr}
 8086d62:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8086d64:	6803      	ldr	r3, [r0, #0]
 8086d66:	6818      	ldr	r0, [r3, #0]
 8086d68:	f7fe fc0e 	bl	8085588 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 8086d6c:	4620      	mov	r0, r4
 8086d6e:	bd10      	pop	{r4, pc}

08086d70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8086d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086d74:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8086d76:	4b1b      	ldr	r3, [pc, #108]	; (8086de4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 8086d78:	b085      	sub	sp, #20
 8086d7a:	685b      	ldr	r3, [r3, #4]
 8086d7c:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8086d82:	460e      	mov	r6, r1
 8086d84:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086d86:	bb53      	cbnz	r3, 8086dde <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 8086d88:	f7ff fea8 	bl	8086adc <_ZN5spark10LogManager8instanceEv>
 8086d8c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8086d8e:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086d90:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 8086d92:	f7ff f81b 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 8086d96:	7b23      	ldrb	r3, [r4, #12]
 8086d98:	b9f3      	cbnz	r3, 8086dd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8086d9a:	2301      	movs	r3, #1
 8086d9c:	7323      	strb	r3, [r4, #12]
 8086d9e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8086da0:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 8086da2:	b2f6      	uxtb	r6, r6
 8086da4:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 8086da8:	454d      	cmp	r5, r9
 8086daa:	d013      	beq.n	8086dd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 8086dac:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 8086db0:	4641      	mov	r1, r8
 8086db2:	1d38      	adds	r0, r7, #4
 8086db4:	f7ff fe18 	bl	80869e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8086db8:	4286      	cmp	r6, r0
 8086dba:	d3f5      	bcc.n	8086da8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 8086dbc:	683b      	ldr	r3, [r7, #0]
 8086dbe:	f8cd b000 	str.w	fp, [sp]
 8086dc2:	689b      	ldr	r3, [r3, #8]
 8086dc4:	4638      	mov	r0, r7
 8086dc6:	469e      	mov	lr, r3
 8086dc8:	4632      	mov	r2, r6
 8086dca:	4643      	mov	r3, r8
 8086dcc:	4651      	mov	r1, sl
 8086dce:	4677      	mov	r7, lr
 8086dd0:	47b8      	blx	r7
 8086dd2:	e7e9      	b.n	8086da8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8086dd4:	2300      	movs	r3, #0
 8086dd6:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 8086dd8:	a803      	add	r0, sp, #12
 8086dda:	f7ff ffc1 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8086dde:	b005      	add	sp, #20
 8086de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086de4:	e000ed00 	.word	0xe000ed00

08086de8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 8086de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086dec:	4699      	mov	r9, r3
 8086dee:	4b19      	ldr	r3, [pc, #100]	; (8086e54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 8086df0:	4607      	mov	r7, r0
 8086df2:	685b      	ldr	r3, [r3, #4]
 8086df4:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 8086dfa:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086dfc:	bb33      	cbnz	r3, 8086e4c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 8086dfe:	f7ff fe6d 	bl	8086adc <_ZN5spark10LogManager8instanceEv>
 8086e02:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8086e04:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086e06:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8086e08:	f7fe ffe0 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 8086e0c:	7b23      	ldrb	r3, [r4, #12]
 8086e0e:	b9d3      	cbnz	r3, 8086e46 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8086e10:	2301      	movs	r3, #1
 8086e12:	7323      	strb	r3, [r4, #12]
 8086e14:	6825      	ldr	r5, [r4, #0]
 8086e16:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 8086e18:	fa5f fb86 	uxtb.w	fp, r6
 8086e1c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 8086e20:	4555      	cmp	r5, sl
 8086e22:	d00e      	beq.n	8086e42 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 8086e24:	f855 6b04 	ldr.w	r6, [r5], #4
 8086e28:	4649      	mov	r1, r9
 8086e2a:	1d30      	adds	r0, r6, #4
 8086e2c:	f7ff fddc 	bl	80869e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8086e30:	4583      	cmp	fp, r0
 8086e32:	d3f5      	bcc.n	8086e20 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 8086e34:	6833      	ldr	r3, [r6, #0]
 8086e36:	4642      	mov	r2, r8
 8086e38:	68db      	ldr	r3, [r3, #12]
 8086e3a:	4639      	mov	r1, r7
 8086e3c:	4630      	mov	r0, r6
 8086e3e:	4798      	blx	r3
 8086e40:	e7ee      	b.n	8086e20 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8086e42:	2300      	movs	r3, #0
 8086e44:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 8086e46:	a801      	add	r0, sp, #4
 8086e48:	f7ff ff8a 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 8086e4c:	b003      	add	sp, #12
 8086e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086e52:	bf00      	nop
 8086e54:	e000ed00 	.word	0xe000ed00

08086e58 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8086e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8086e5c:	4b15      	ldr	r3, [pc, #84]	; (8086eb4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 8086e5e:	4604      	mov	r4, r0
 8086e60:	685b      	ldr	r3, [r3, #4]
 8086e62:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8086e68:	b9fb      	cbnz	r3, 8086eaa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 8086e6a:	f7ff fe37 	bl	8086adc <_ZN5spark10LogManager8instanceEv>
 8086e6e:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 8086e70:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086e72:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8086e74:	f7fe ffaa 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
 8086e78:	e896 00a0 	ldmia.w	r6, {r5, r7}
 8086e7c:	2646      	movs	r6, #70	; 0x46
 8086e7e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8086e82:	42af      	cmp	r7, r5
 8086e84:	d107      	bne.n	8086e96 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 8086e86:	a801      	add	r0, sp, #4
 8086e88:	f7ff ff6a 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 8086e8c:	42b4      	cmp	r4, r6
 8086e8e:	bfb4      	ite	lt
 8086e90:	2000      	movlt	r0, #0
 8086e92:	2001      	movge	r0, #1
 8086e94:	e00a      	b.n	8086eac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 8086e96:	f855 0b04 	ldr.w	r0, [r5], #4
 8086e9a:	4641      	mov	r1, r8
 8086e9c:	3004      	adds	r0, #4
 8086e9e:	f7ff fda3 	bl	80869e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8086ea2:	4286      	cmp	r6, r0
 8086ea4:	bfa8      	it	ge
 8086ea6:	4606      	movge	r6, r0
 8086ea8:	e7eb      	b.n	8086e82 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 8086eaa:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 8086eac:	b002      	add	sp, #8
 8086eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086eb2:	bf00      	nop
 8086eb4:	e000ed00 	.word	0xe000ed00

08086eb8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 8086eb8:	b570      	push	{r4, r5, r6, lr}
 8086eba:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 8086ebc:	6803      	ldr	r3, [r0, #0]
 8086ebe:	6842      	ldr	r2, [r0, #4]
 8086ec0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 8086ec4:	429a      	cmp	r2, r3
 8086ec6:	4618      	mov	r0, r3
 8086ec8:	d00d      	beq.n	8086ee6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 8086eca:	6806      	ldr	r6, [r0, #0]
 8086ecc:	680d      	ldr	r5, [r1, #0]
 8086ece:	3304      	adds	r3, #4
 8086ed0:	42ae      	cmp	r6, r5
 8086ed2:	d1f7      	bne.n	8086ec4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 8086ed4:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 8086ed6:	1a52      	subs	r2, r2, r1
 8086ed8:	f004 f9e6 	bl	808b2a8 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 8086edc:	6863      	ldr	r3, [r4, #4]
    return true;
 8086ede:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 8086ee0:	3b01      	subs	r3, #1
 8086ee2:	6063      	str	r3, [r4, #4]
    return true;
}
 8086ee4:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 8086ee6:	2000      	movs	r0, #0
 8086ee8:	bd70      	pop	{r4, r5, r6, pc}

08086eea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 8086eea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8086eec:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8086eee:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 8086ef0:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086ef2:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 8086ef4:	f7fe ff6a 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8086ef8:	a901      	add	r1, sp, #4
 8086efa:	4620      	mov	r0, r4
 8086efc:	f7ff ffdc 	bl	8086eb8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8086f00:	b920      	cbnz	r0, 8086f0c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 8086f02:	a803      	add	r0, sp, #12
 8086f04:	f7ff ff2c 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 8086f08:	b004      	add	sp, #16
 8086f0a:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8086f0c:	6863      	ldr	r3, [r4, #4]
 8086f0e:	2b00      	cmp	r3, #0
 8086f10:	d1f7      	bne.n	8086f02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 8086f12:	f7ff fe0d 	bl	8086b30 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 8086f16:	e7f4      	b.n	8086f02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

08086f18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 8086f18:	b570      	push	{r4, r5, r6, lr}
 8086f1a:	4604      	mov	r4, r0
 8086f1c:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8086f1e:	6943      	ldr	r3, [r0, #20]
 8086f20:	2618      	movs	r6, #24
 8086f22:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8086f26:	42ae      	cmp	r6, r5
 8086f28:	d015      	beq.n	8086f56 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8086f2a:	f105 0110 	add.w	r1, r5, #16
 8086f2e:	4620      	mov	r0, r4
 8086f30:	f7ff ffc2 	bl	8086eb8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8086f34:	6863      	ldr	r3, [r4, #4]
 8086f36:	b90b      	cbnz	r3, 8086f3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8086f38:	f7ff fdfa 	bl	8086b30 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 8086f3c:	69e0      	ldr	r0, [r4, #28]
 8086f3e:	6929      	ldr	r1, [r5, #16]
 8086f40:	6803      	ldr	r3, [r0, #0]
 8086f42:	68db      	ldr	r3, [r3, #12]
 8086f44:	4798      	blx	r3
        if (h.stream) {
 8086f46:	6969      	ldr	r1, [r5, #20]
 8086f48:	b119      	cbz	r1, 8086f52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8086f4a:	6a20      	ldr	r0, [r4, #32]
 8086f4c:	6803      	ldr	r3, [r0, #0]
 8086f4e:	68db      	ldr	r3, [r3, #12]
 8086f50:	4798      	blx	r3
 8086f52:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 8086f54:	e7e7      	b.n	8086f26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 8086f56:	6925      	ldr	r5, [r4, #16]
 8086f58:	6963      	ldr	r3, [r4, #20]
 8086f5a:	2618      	movs	r6, #24
 8086f5c:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8086f60:	42b5      	cmp	r5, r6
 8086f62:	d004      	beq.n	8086f6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 8086f64:	4628      	mov	r0, r5
 8086f66:	f7ff faf5 	bl	8086554 <_ZN6StringD1Ev>
 8086f6a:	3518      	adds	r5, #24
 8086f6c:	e7f8      	b.n	8086f60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 8086f6e:	2300      	movs	r3, #0
 8086f70:	6163      	str	r3, [r4, #20]
 8086f72:	bd70      	pop	{r4, r5, r6, pc}

08086f74 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 8086f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086f76:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086f78:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 8086f7a:	f7ff fdd9 	bl	8086b30 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 8086f7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8086f82:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 8086f86:	f7fe ff21 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 8086f8a:	4620      	mov	r0, r4
 8086f8c:	f7ff ffc4 	bl	8086f18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 8086f90:	4628      	mov	r0, r5
 8086f92:	f7ff fee5 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8086f96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8086f98:	b108      	cbz	r0, 8086f9e <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
 8086f9a:	f7fe fae5 	bl	8085568 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 8086f9e:	6925      	ldr	r5, [r4, #16]
 8086fa0:	6963      	ldr	r3, [r4, #20]
 8086fa2:	2618      	movs	r6, #24
 8086fa4:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8086fa8:	42b5      	cmp	r5, r6
 8086faa:	d004      	beq.n	8086fb6 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 8086fac:	4628      	mov	r0, r5
 8086fae:	f7ff fad1 	bl	8086554 <_ZN6StringD1Ev>
 8086fb2:	3518      	adds	r5, #24
 8086fb4:	e7f8      	b.n	8086fa8 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8086fb6:	6920      	ldr	r0, [r4, #16]
 8086fb8:	f7fe fd5c 	bl	8085a74 <free>
 8086fbc:	6820      	ldr	r0, [r4, #0]
 8086fbe:	f7fe fd59 	bl	8085a74 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 8086fc2:	4620      	mov	r0, r4
 8086fc4:	b002      	add	sp, #8
 8086fc6:	bd70      	pop	{r4, r5, r6, pc}

08086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086fc8:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8086fca:	680a      	ldr	r2, [r1, #0]
 8086fcc:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8086fce:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086fd0:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8086fd2:	684a      	ldr	r2, [r1, #4]
 8086fd4:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8086fd6:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086fd8:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 8086fda:	688a      	ldr	r2, [r1, #8]
 8086fdc:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086fde:	608b      	str	r3, [r1, #8]
 8086fe0:	4770      	bx	lr

08086fe2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8086fe2:	b510      	push	{r4, lr}
 8086fe4:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8086fe6:	2300      	movs	r3, #0
 8086fe8:	6003      	str	r3, [r0, #0]
 8086fea:	6043      	str	r3, [r0, #4]
 8086fec:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8086fee:	f7ff ffeb 	bl	8086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 8086ff2:	4620      	mov	r0, r4
 8086ff4:	bd10      	pop	{r4, pc}

08086ff6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 8086ff6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 8086ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086ffa:	4604      	mov	r4, r0
 8086ffc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8086ffe:	d925      	bls.n	808704c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 8087000:	4290      	cmp	r0, r2
 8087002:	d224      	bcs.n	808704e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 8087004:	1a55      	subs	r5, r2, r1
 8087006:	3d14      	subs	r5, #20
 8087008:	442c      	add	r4, r5
 808700a:	f1a1 0714 	sub.w	r7, r1, #20
 808700e:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8087012:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8087014:	f1a5 0308 	sub.w	r3, r5, #8
 8087018:	429f      	cmp	r7, r3
 808701a:	d037      	beq.n	808708c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 808701c:	b184      	cbz	r4, 8087040 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 808701e:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8087022:	4629      	mov	r1, r5
 8087024:	6023      	str	r3, [r4, #0]
 8087026:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 808702a:	f104 0008 	add.w	r0, r4, #8
 808702e:	80a3      	strh	r3, [r4, #4]
 8087030:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8087034:	60a6      	str	r6, [r4, #8]
 8087036:	80e3      	strh	r3, [r4, #6]
 8087038:	60e6      	str	r6, [r4, #12]
 808703a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 808703c:	f7ff ffc4 	bl	8086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 8087040:	4628      	mov	r0, r5
 8087042:	f7ff fe33 	bl	8086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8087046:	3c14      	subs	r4, #20
 8087048:	3d14      	subs	r5, #20
 808704a:	e7e3      	b.n	8087014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 808704c:	d01e      	beq.n	808708c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 808704e:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8087052:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8087054:	f1a5 0308 	sub.w	r3, r5, #8
 8087058:	429e      	cmp	r6, r3
 808705a:	d017      	beq.n	808708c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 808705c:	b184      	cbz	r4, 8087080 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 808705e:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8087062:	4629      	mov	r1, r5
 8087064:	6023      	str	r3, [r4, #0]
 8087066:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 808706a:	f104 0008 	add.w	r0, r4, #8
 808706e:	80a3      	strh	r3, [r4, #4]
 8087070:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8087074:	60a7      	str	r7, [r4, #8]
 8087076:	80e3      	strh	r3, [r4, #6]
 8087078:	60e7      	str	r7, [r4, #12]
 808707a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 808707c:	f7ff ffa4 	bl	8086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 8087080:	4628      	mov	r0, r5
 8087082:	f7ff fe13 	bl	8086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8087086:	3414      	adds	r4, #20
 8087088:	3514      	adds	r5, #20
 808708a:	e7e3      	b.n	8087054 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 808708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808708e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 808708e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8087090:	6845      	ldr	r5, [r0, #4]
 8087092:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8087094:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8087096:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8087098:	460e      	mov	r6, r1
 808709a:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808709c:	db0e      	blt.n	80870bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 808709e:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80870a0:	2d00      	cmp	r5, #0
 80870a2:	dd05      	ble.n	80870b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 80870a4:	00a9      	lsls	r1, r5, #2
 80870a6:	6800      	ldr	r0, [r0, #0]
 80870a8:	f7fe fcec 	bl	8085a84 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 80870ac:	b920      	cbnz	r0, 80870b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 80870ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80870b0:	6800      	ldr	r0, [r0, #0]
 80870b2:	f7fe fcdf 	bl	8085a74 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80870b6:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 80870b8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80870ba:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80870bc:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80870be:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80870c0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80870c4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80870c8:	1a52      	subs	r2, r2, r1
 80870ca:	1d08      	adds	r0, r1, #4
 80870cc:	f004 f8ec 	bl	808b2a8 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 80870d0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80870d4:	6863      	ldr	r3, [r4, #4]
 80870d6:	2001      	movs	r0, #1
 80870d8:	3301      	adds	r3, #1
 80870da:	6063      	str	r3, [r4, #4]
    return true;
}
 80870dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080870de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80870de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80870e0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80870e2:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80870e4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80870e6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80870e8:	f7fe fe70 	bl	8085dcc <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 80870ec:	6823      	ldr	r3, [r4, #0]
 80870ee:	6861      	ldr	r1, [r4, #4]
 80870f0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80870f4:	4283      	cmp	r3, r0
 80870f6:	461a      	mov	r2, r3
 80870f8:	d008      	beq.n	808710c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 80870fa:	6812      	ldr	r2, [r2, #0]
 80870fc:	3304      	adds	r3, #4
 80870fe:	42aa      	cmp	r2, r5
 8087100:	d1f8      	bne.n	80870f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 8087102:	a801      	add	r0, sp, #4
 8087104:	f7ff fe2c 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8087108:	2500      	movs	r5, #0
 808710a:	e00e      	b.n	808712a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 808710c:	462a      	mov	r2, r5
 808710e:	4620      	mov	r0, r4
 8087110:	f7ff ffbd 	bl	808708e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8087114:	4605      	mov	r5, r0
 8087116:	2800      	cmp	r0, #0
 8087118:	d0f3      	beq.n	8087102 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 808711a:	6863      	ldr	r3, [r4, #4]
 808711c:	2b01      	cmp	r3, #1
 808711e:	d101      	bne.n	8087124 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 8087120:	f7ff fcfa 	bl	8086b18 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 8087124:	a801      	add	r0, sp, #4
 8087126:	f7ff fe1b 	bl	8086d60 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 808712a:	4628      	mov	r0, r5
 808712c:	b003      	add	sp, #12
 808712e:	bd30      	pop	{r4, r5, pc}

08087130 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 8087130:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 8087132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087134:	4606      	mov	r6, r0
 8087136:	460c      	mov	r4, r1
 8087138:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 808713a:	d914      	bls.n	8087166 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 808713c:	4290      	cmp	r0, r2
 808713e:	d213      	bcs.n	8087168 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 8087140:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 8087144:	1a6c      	subs	r4, r5, r1
 8087146:	f1a1 0710 	sub.w	r7, r1, #16
 808714a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 808714c:	42af      	cmp	r7, r5
 808714e:	d018      	beq.n	8087182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8087150:	b11c      	cbz	r4, 808715a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8087152:	4629      	mov	r1, r5
 8087154:	4620      	mov	r0, r4
 8087156:	f7ff f9ed 	bl	8086534 <_ZN6StringC1EOS_>
                end->~T();
 808715a:	4628      	mov	r0, r5
 808715c:	f7ff f9fa 	bl	8086554 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8087160:	3d10      	subs	r5, #16
 8087162:	3c10      	subs	r4, #16
 8087164:	e7f2      	b.n	808714c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8087166:	d00c      	beq.n	8087182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8087168:	42ac      	cmp	r4, r5
 808716a:	d00a      	beq.n	8087182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 808716c:	b11e      	cbz	r6, 8087176 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 808716e:	4621      	mov	r1, r4
 8087170:	4630      	mov	r0, r6
 8087172:	f7ff f9df 	bl	8086534 <_ZN6StringC1EOS_>
                p->~T();
 8087176:	4620      	mov	r0, r4
 8087178:	f7ff f9ec 	bl	8086554 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 808717c:	3410      	adds	r4, #16
 808717e:	3610      	adds	r6, #16
 8087180:	e7f2      	b.n	8087168 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 8087182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 8087184:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 8087186:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 8087188:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 808718a:	dd0b      	ble.n	80871a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 808718c:	0130      	lsls	r0, r6, #4
 808718e:	f7fe fc69 	bl	8085a64 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 8087192:	4604      	mov	r4, r0
 8087194:	b170      	cbz	r0, 80871b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 8087196:	e895 0006 	ldmia.w	r5, {r1, r2}
 808719a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 808719e:	f7ff ffc7 	bl	8087130 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 80871a2:	e000      	b.n	80871a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80871a4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80871a6:	6828      	ldr	r0, [r5, #0]
 80871a8:	f7fe fc64 	bl	8085a74 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80871ac:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80871ae:	60ae      	str	r6, [r5, #8]
        return true;
 80871b0:	2001      	movs	r0, #1
 80871b2:	bd70      	pop	{r4, r5, r6, pc}
    }
 80871b4:	bd70      	pop	{r4, r5, r6, pc}

080871b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80871b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80871ba:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80871bc:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80871be:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80871c0:	b095      	sub	sp, #84	; 0x54
 80871c2:	6003      	str	r3, [r0, #0]
 80871c4:	6043      	str	r3, [r0, #4]
 80871c6:	6083      	str	r3, [r0, #8]
 80871c8:	60c3      	str	r3, [r0, #12]
 80871ca:	6103      	str	r3, [r0, #16]
 80871cc:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80871ce:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80871d0:	9102      	str	r1, [sp, #8]
 80871d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80871d6:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80871d8:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80871da:	9308      	str	r3, [sp, #32]
 80871dc:	9309      	str	r3, [sp, #36]	; 0x24
 80871de:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80871e0:	f340 809d 	ble.w	808731e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80871e4:	a808      	add	r0, sp, #32
 80871e6:	f7ff ffcd 	bl	8087184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80871ea:	2800      	cmp	r0, #0
 80871ec:	f040 8097 	bne.w	808731e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80871f0:	e08e      	b.n	8087310 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 80871f2:	4621      	mov	r1, r4
 80871f4:	a80b      	add	r0, sp, #44	; 0x2c
 80871f6:	f7ff f99d 	bl	8086534 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80871fa:	a90b      	add	r1, sp, #44	; 0x2c
 80871fc:	a80f      	add	r0, sp, #60	; 0x3c
 80871fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8087200:	f7ff f998 	bl	8086534 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8087204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8087206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087208:	4299      	cmp	r1, r3
 808720a:	f2c0 80ce 	blt.w	80873aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 808720e:	3101      	adds	r1, #1
 8087210:	a808      	add	r0, sp, #32
 8087212:	f7ff ffb7 	bl	8087184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8087216:	2800      	cmp	r0, #0
 8087218:	f040 80c7 	bne.w	80873aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 808721c:	a80f      	add	r0, sp, #60	; 0x3c
 808721e:	f7ff f999 	bl	8086554 <_ZN6StringD1Ev>
 8087222:	a80b      	add	r0, sp, #44	; 0x2c
 8087224:	f7ff f996 	bl	8086554 <_ZN6StringD1Ev>
 8087228:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 808722a:	42a7      	cmp	r7, r4
 808722c:	d1e1      	bne.n	80871f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808722e:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8087230:	46b1      	mov	r9, r6
 8087232:	960b      	str	r6, [sp, #44]	; 0x2c
 8087234:	960c      	str	r6, [sp, #48]	; 0x30
 8087236:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 8087238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808723a:	429e      	cmp	r6, r3
 808723c:	f280 80a8 	bge.w	8087390 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8087240:	9a08      	ldr	r2, [sp, #32]
 8087242:	0133      	lsls	r3, r6, #4
 8087244:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 8087246:	9306      	str	r3, [sp, #24]
        if (!category) {
 8087248:	2b00      	cmp	r3, #0
 808724a:	f000 809f 	beq.w	808738c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 808724e:	2314      	movs	r3, #20
 8087250:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8087252:	f8cd 901c 	str.w	r9, [sp, #28]
 8087256:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 8087258:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 808725a:	a907      	add	r1, sp, #28
 808725c:	a806      	add	r0, sp, #24
 808725e:	f7ff fb0b 	bl	8086878 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8087262:	4607      	mov	r7, r0
 8087264:	2800      	cmp	r0, #0
 8087266:	f000 8091 	beq.w	808738c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 808726a:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 808726c:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 808726e:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 8087272:	9a07      	ldr	r2, [sp, #28]
 8087274:	4620      	mov	r0, r4
 8087276:	f7ff fb77 	bl	8086968 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808727a:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 808727e:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8087280:	f1b8 0f00 	cmp.w	r8, #0
 8087284:	d153      	bne.n	808732e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 8087286:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 808728a:	970f      	str	r7, [sp, #60]	; 0x3c
 808728c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8087290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8087294:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8087298:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 808729c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80872a0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80872a4:	6867      	ldr	r7, [r4, #4]
 80872a6:	68a3      	ldr	r3, [r4, #8]
 80872a8:	429f      	cmp	r7, r3
 80872aa:	da4f      	bge.n	808734c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 80872ac:	9b00      	ldr	r3, [sp, #0]
 80872ae:	2214      	movs	r2, #20
 80872b0:	4353      	muls	r3, r2
 80872b2:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 80872b6:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80872b8:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 80872bc:	fb02 b201 	mla	r2, r2, r1, fp
 80872c0:	f107 0014 	add.w	r0, r7, #20
 80872c4:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80872c6:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 80872c8:	f7ff fe95 	bl	8086ff6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80872cc:	b1a7      	cbz	r7, 80872f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80872ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80872d0:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80872d2:	a911      	add	r1, sp, #68	; 0x44
 80872d4:	f84b 2003 	str.w	r2, [fp, r3]
 80872d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80872dc:	f107 0008 	add.w	r0, r7, #8
 80872e0:	80bb      	strh	r3, [r7, #4]
 80872e2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80872e6:	f8c7 9008 	str.w	r9, [r7, #8]
 80872ea:	80fb      	strh	r3, [r7, #6]
 80872ec:	f8c7 900c 	str.w	r9, [r7, #12]
 80872f0:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80872f4:	f7ff fe68 	bl	8086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 80872f8:	6863      	ldr	r3, [r4, #4]
 80872fa:	3301      	adds	r3, #1
 80872fc:	6063      	str	r3, [r4, #4]
 80872fe:	a811      	add	r0, sp, #68	; 0x44
 8087300:	f7ff fcd4 	bl	8086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8087304:	f1b8 0f00 	cmp.w	r8, #0
 8087308:	d011      	beq.n	808732e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 808730a:	a80b      	add	r0, sp, #44	; 0x2c
 808730c:	f7ff fcce 	bl	8086cac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8087310:	a808      	add	r0, sp, #32
 8087312:	f7ff fcdf 	bl	8086cd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 8087316:	4628      	mov	r0, r5
 8087318:	b015      	add	sp, #84	; 0x54
 808731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808731e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8087322:	f8da 3004 	ldr.w	r3, [sl, #4]
 8087326:	2714      	movs	r7, #20
 8087328:	fb07 4703 	mla	r7, r7, r3, r4
 808732c:	e77d      	b.n	808722a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 808732e:	6823      	ldr	r3, [r4, #0]
 8087330:	9a00      	ldr	r2, [sp, #0]
 8087332:	2414      	movs	r4, #20
 8087334:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 8087338:	9b06      	ldr	r3, [sp, #24]
 808733a:	781b      	ldrb	r3, [r3, #0]
 808733c:	bb23      	cbnz	r3, 8087388 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 808733e:	f8da 3000 	ldr.w	r3, [sl]
 8087342:	9a01      	ldr	r2, [sp, #4]
 8087344:	4413      	add	r3, r2
 8087346:	7c1b      	ldrb	r3, [r3, #16]
 8087348:	80e3      	strh	r3, [r4, #6]
 808734a:	e01d      	b.n	8087388 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808734c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 808734e:	2f00      	cmp	r7, #0
 8087350:	dd0f      	ble.n	8087372 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 8087352:	2314      	movs	r3, #20
 8087354:	fb03 f007 	mul.w	r0, r3, r7
 8087358:	9303      	str	r3, [sp, #12]
 808735a:	f7fe fb83 	bl	8085a64 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 808735e:	4683      	mov	fp, r0
 8087360:	b178      	cbz	r0, 8087382 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 8087362:	e894 0006 	ldmia.w	r4, {r1, r2}
 8087366:	9b03      	ldr	r3, [sp, #12]
 8087368:	fb03 1202 	mla	r2, r3, r2, r1
 808736c:	f7ff fe43 	bl	8086ff6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 8087370:	e000      	b.n	8087374 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 8087372:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8087374:	6820      	ldr	r0, [r4, #0]
 8087376:	f7fe fb7d 	bl	8085a74 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 808737a:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 808737e:	60a7      	str	r7, [r4, #8]
 8087380:	e794      	b.n	80872ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8087382:	f04f 0801 	mov.w	r8, #1
 8087386:	e7ba      	b.n	80872fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 8087388:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 808738a:	e766      	b.n	808725a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 808738c:	3601      	adds	r6, #1
 808738e:	e753      	b.n	8087238 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 8087390:	a908      	add	r1, sp, #32
 8087392:	4628      	mov	r0, r5
 8087394:	f7ff fe18 	bl	8086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 8087398:	a90b      	add	r1, sp, #44	; 0x2c
 808739a:	f105 000c 	add.w	r0, r5, #12
 808739e:	f7ff fe13 	bl	8086fc8 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 80873a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80873a6:	762b      	strb	r3, [r5, #24]
 80873a8:	e7af      	b.n	808730a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80873aa:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 80873ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80873ae:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80873b2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80873b6:	4631      	mov	r1, r6
 80873b8:	f106 0010 	add.w	r0, r6, #16
 80873bc:	f7ff feb8 	bl	8087130 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80873c0:	b11e      	cbz	r6, 80873ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 80873c2:	a90f      	add	r1, sp, #60	; 0x3c
 80873c4:	4630      	mov	r0, r6
 80873c6:	f7ff f8b5 	bl	8086534 <_ZN6StringC1EOS_>
    ++size_;
 80873ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80873cc:	3301      	adds	r3, #1
 80873ce:	9309      	str	r3, [sp, #36]	; 0x24
 80873d0:	e724      	b.n	808721c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

080873d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80873d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80873d6:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80873d8:	460e      	mov	r6, r1
 80873da:	4605      	mov	r5, r0
        filter_(level, filters) {
 80873dc:	4b08      	ldr	r3, [pc, #32]	; (8087400 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80873de:	4611      	mov	r1, r2
 80873e0:	f844 3b04 	str.w	r3, [r4], #4
 80873e4:	a801      	add	r0, sp, #4
 80873e6:	f7f9 ff4e 	bl	8081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80873ea:	aa01      	add	r2, sp, #4
 80873ec:	4631      	mov	r1, r6
 80873ee:	4620      	mov	r0, r4
 80873f0:	f7ff fee1 	bl	80871b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80873f4:	a801      	add	r0, sp, #4
 80873f6:	f7f9 ff05 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80873fa:	4628      	mov	r0, r5
 80873fc:	b004      	add	sp, #16
 80873fe:	bd70      	pop	{r4, r5, r6, pc}
 8087400:	0808e1d4 	.word	0x0808e1d4

08087404 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 8087404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087406:	460f      	mov	r7, r1
 8087408:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 808740a:	492b      	ldr	r1, [pc, #172]	; (80874b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 808740c:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 808740e:	4616      	mov	r6, r2
 8087410:	461d      	mov	r5, r3
 8087412:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8087414:	f003 ffac 	bl	808b370 <strcmp>
 8087418:	bb28      	cbnz	r0, 8087466 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 808741a:	2c00      	cmp	r4, #0
 808741c:	d049      	beq.n	80874b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 808741e:	4629      	mov	r1, r5
 8087420:	a801      	add	r0, sp, #4
 8087422:	f7ff fdde 	bl	8086fe2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8087426:	4925      	ldr	r1, [pc, #148]	; (80874bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 8087428:	2024      	movs	r0, #36	; 0x24
 808742a:	f002 fa03 	bl	8089834 <_ZnwjRKSt9nothrow_t>
 808742e:	4605      	mov	r5, r0
 8087430:	b1b8      	cbz	r0, 8087462 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 8087432:	a901      	add	r1, sp, #4
 8087434:	a804      	add	r0, sp, #16
 8087436:	f7ff fdd4 	bl	8086fe2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 808743a:	a904      	add	r1, sp, #16
 808743c:	a807      	add	r0, sp, #28
 808743e:	f7f9 ff22 	bl	8081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8087442:	aa07      	add	r2, sp, #28
 8087444:	4631      	mov	r1, r6
 8087446:	4628      	mov	r0, r5
 8087448:	f7ff ffc4 	bl	80873d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808744c:	a807      	add	r0, sp, #28
 808744e:	f7f9 fed9 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8087452:	4b1b      	ldr	r3, [pc, #108]	; (80874c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 8087454:	622c      	str	r4, [r5, #32]
 8087456:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 8087458:	a804      	add	r0, sp, #16
 808745a:	f7f9 fed3 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808745e:	4b19      	ldr	r3, [pc, #100]	; (80874c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 8087460:	602b      	str	r3, [r5, #0]
 8087462:	a801      	add	r0, sp, #4
 8087464:	e01f      	b.n	80874a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8087466:	4918      	ldr	r1, [pc, #96]	; (80874c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 8087468:	4638      	mov	r0, r7
 808746a:	f003 ff81 	bl	808b370 <strcmp>
 808746e:	b9f0      	cbnz	r0, 80874ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 8087470:	b1fc      	cbz	r4, 80874b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8087472:	4629      	mov	r1, r5
 8087474:	a804      	add	r0, sp, #16
 8087476:	f7ff fdb4 	bl	8086fe2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 808747a:	4910      	ldr	r1, [pc, #64]	; (80874bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 808747c:	2024      	movs	r0, #36	; 0x24
 808747e:	f002 f9d9 	bl	8089834 <_ZnwjRKSt9nothrow_t>
 8087482:	4605      	mov	r5, r0
 8087484:	b170      	cbz	r0, 80874a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 8087486:	a904      	add	r1, sp, #16
 8087488:	a807      	add	r0, sp, #28
 808748a:	f7f9 fefc 	bl	8081286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808748e:	aa07      	add	r2, sp, #28
 8087490:	4631      	mov	r1, r6
 8087492:	4628      	mov	r0, r5
 8087494:	f7ff ff9e 	bl	80873d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8087498:	a807      	add	r0, sp, #28
 808749a:	f7f9 feb3 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808749e:	4b08      	ldr	r3, [pc, #32]	; (80874c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80874a0:	622c      	str	r4, [r5, #32]
 80874a2:	602b      	str	r3, [r5, #0]
 80874a4:	a804      	add	r0, sp, #16
 80874a6:	f7f9 fead 	bl	8081204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80874aa:	4628      	mov	r0, r5
 80874ac:	e002      	b.n	80874b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 80874ae:	2000      	movs	r0, #0
 80874b0:	e000      	b.n	80874b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 80874b2:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 80874b4:	b00b      	add	sp, #44	; 0x2c
 80874b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80874b8:	0808eeb1 	.word	0x0808eeb1
 80874bc:	0808f14e 	.word	0x0808f14e
 80874c0:	0808ef30 	.word	0x0808ef30
 80874c4:	0808ee40 	.word	0x0808ee40
 80874c8:	0808eeb5 	.word	0x0808eeb5

080874cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80874cc:	4a01      	ldr	r2, [pc, #4]	; (80874d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80874ce:	4b02      	ldr	r3, [pc, #8]	; (80874d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80874d0:	601a      	str	r2, [r3, #0]
 80874d2:	4770      	bx	lr
 80874d4:	0808eec6 	.word	0x0808eec6
 80874d8:	20000938 	.word	0x20000938

080874dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80874dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80874e0:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80874e2:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80874e6:	4604      	mov	r4, r0
 80874e8:	460e      	mov	r6, r1
 80874ea:	4617      	mov	r7, r2
 80874ec:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80874ee:	f001 f9e1 	bl	80888b4 <_Z16_fetch_usbserialv>
 80874f2:	4581      	cmp	r9, r0
 80874f4:	d105      	bne.n	8087502 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
 80874f6:	485a      	ldr	r0, [pc, #360]	; (8087660 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80874f8:	f001 fc98 	bl	8088e2c <_ZN5spark12NetworkClass9listeningEv>
 80874fc:	2800      	cmp	r0, #0
 80874fe:	f040 80ac 	bne.w	808765a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 8087502:	792b      	ldrb	r3, [r5, #4]
 8087504:	071b      	lsls	r3, r3, #28
 8087506:	d505      	bpl.n	8087514 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8087508:	696b      	ldr	r3, [r5, #20]
 808750a:	4a56      	ldr	r2, [pc, #344]	; (8087664 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 808750c:	2100      	movs	r1, #0
 808750e:	6a20      	ldr	r0, [r4, #32]
 8087510:	f7ff f964 	bl	80867dc <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 8087514:	f1b8 0f00 	cmp.w	r8, #0
 8087518:	d00d      	beq.n	8087536 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
 808751a:	215b      	movs	r1, #91	; 0x5b
 808751c:	4620      	mov	r0, r4
 808751e:	f7ff fa17 	bl	8086950 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8087522:	4641      	mov	r1, r8
 8087524:	4620      	mov	r0, r4
 8087526:	f7ff fa05 	bl	8086934 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 808752a:	6823      	ldr	r3, [r4, #0]
 808752c:	2202      	movs	r2, #2
 808752e:	68db      	ldr	r3, [r3, #12]
 8087530:	494d      	ldr	r1, [pc, #308]	; (8087668 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8087532:	4620      	mov	r0, r4
 8087534:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 8087536:	792b      	ldrb	r3, [r5, #4]
 8087538:	07d9      	lsls	r1, r3, #31
 808753a:	d525      	bpl.n	8087588 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
 808753c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 8087540:	212f      	movs	r1, #47	; 0x2f
 8087542:	4640      	mov	r0, r8
 8087544:	f004 fc86 	bl	808be54 <strrchr>
    if (s1) {
 8087548:	b108      	cbz	r0, 808754e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
 808754a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 808754e:	4641      	mov	r1, r8
 8087550:	4620      	mov	r0, r4
 8087552:	f7ff f9ef 	bl	8086934 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8087556:	792b      	ldrb	r3, [r5, #4]
 8087558:	079a      	lsls	r2, r3, #30
 808755a:	d509      	bpl.n	8087570 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
 808755c:	213a      	movs	r1, #58	; 0x3a
 808755e:	4620      	mov	r0, r4
 8087560:	f7ff f9f6 	bl	8086950 <_ZN5spark16StreamLogHandler5writeEc>
 8087564:	68eb      	ldr	r3, [r5, #12]
 8087566:	4a41      	ldr	r2, [pc, #260]	; (808766c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8087568:	2100      	movs	r1, #0
 808756a:	6a20      	ldr	r0, [r4, #32]
 808756c:	f7ff f936 	bl	80867dc <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 8087570:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 8087572:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 8087574:	f013 0f04 	tst.w	r3, #4
 8087578:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 808757a:	bf18      	it	ne
 808757c:	493c      	ldrne	r1, [pc, #240]	; (8087670 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 808757e:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 8087580:	bf08      	it	eq
 8087582:	493c      	ldreq	r1, [pc, #240]	; (8087674 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8087584:	4620      	mov	r0, r4
 8087586:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 8087588:	792b      	ldrb	r3, [r5, #4]
 808758a:	075b      	lsls	r3, r3, #29
 808758c:	d518      	bpl.n	80875c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808758e:	6929      	ldr	r1, [r5, #16]
 8087590:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 8087592:	4613      	mov	r3, r2
 8087594:	f813 0b01 	ldrb.w	r0, [r3], #1
 8087598:	b138      	cbz	r0, 80875aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
 808759a:	2820      	cmp	r0, #32
 808759c:	d101      	bne.n	80875a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
 808759e:	4619      	mov	r1, r3
 80875a0:	e001      	b.n	80875a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
 80875a2:	2828      	cmp	r0, #40	; 0x28
 80875a4:	d001      	beq.n	80875aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80875a6:	461a      	mov	r2, r3
 80875a8:	e7f3      	b.n	8087592 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 80875aa:	6823      	ldr	r3, [r4, #0]
 80875ac:	1a52      	subs	r2, r2, r1
 80875ae:	68db      	ldr	r3, [r3, #12]
 80875b0:	4620      	mov	r0, r4
 80875b2:	4798      	blx	r3
        write("(): ", 4);
 80875b4:	6823      	ldr	r3, [r4, #0]
 80875b6:	2204      	movs	r2, #4
 80875b8:	68db      	ldr	r3, [r3, #12]
 80875ba:	492f      	ldr	r1, [pc, #188]	; (8087678 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80875bc:	4620      	mov	r0, r4
 80875be:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80875c0:	2100      	movs	r1, #0
 80875c2:	4638      	mov	r0, r7
 80875c4:	f7fe f960 	bl	8085888 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 80875c8:	4601      	mov	r1, r0
 80875ca:	4620      	mov	r0, r4
 80875cc:	f7ff f9b2 	bl	8086934 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80875d0:	6823      	ldr	r3, [r4, #0]
 80875d2:	2202      	movs	r2, #2
 80875d4:	68db      	ldr	r3, [r3, #12]
 80875d6:	4927      	ldr	r1, [pc, #156]	; (8087674 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80875d8:	4620      	mov	r0, r4
 80875da:	4798      	blx	r3
    // Message
    if (msg) {
 80875dc:	b11e      	cbz	r6, 80875e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
 80875de:	4631      	mov	r1, r6
 80875e0:	4620      	mov	r0, r4
 80875e2:	f7ff f9a7 	bl	8086934 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 80875e6:	792b      	ldrb	r3, [r5, #4]
 80875e8:	f013 0f30 	tst.w	r3, #48	; 0x30
 80875ec:	d02d      	beq.n	808764a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
 80875ee:	6823      	ldr	r3, [r4, #0]
 80875f0:	4620      	mov	r0, r4
 80875f2:	68db      	ldr	r3, [r3, #12]
 80875f4:	2202      	movs	r2, #2
 80875f6:	4921      	ldr	r1, [pc, #132]	; (808767c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80875f8:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 80875fa:	792b      	ldrb	r3, [r5, #4]
 80875fc:	06d8      	lsls	r0, r3, #27
 80875fe:	d50b      	bpl.n	8087618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
 8087600:	6823      	ldr	r3, [r4, #0]
 8087602:	2207      	movs	r2, #7
 8087604:	68db      	ldr	r3, [r3, #12]
 8087606:	491e      	ldr	r1, [pc, #120]	; (8087680 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8087608:	4620      	mov	r0, r4
 808760a:	4798      	blx	r3
 808760c:	69ab      	ldr	r3, [r5, #24]
 808760e:	4a1d      	ldr	r2, [pc, #116]	; (8087684 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
 8087610:	2100      	movs	r1, #0
 8087612:	6a20      	ldr	r0, [r4, #32]
 8087614:	f7ff f8e2 	bl	80867dc <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 8087618:	792b      	ldrb	r3, [r5, #4]
 808761a:	0699      	lsls	r1, r3, #26
 808761c:	d511      	bpl.n	8087642 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
 808761e:	06da      	lsls	r2, r3, #27
 8087620:	d505      	bpl.n	808762e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
 8087622:	6823      	ldr	r3, [r4, #0]
 8087624:	2202      	movs	r2, #2
 8087626:	68db      	ldr	r3, [r3, #12]
 8087628:	4911      	ldr	r1, [pc, #68]	; (8087670 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 808762a:	4620      	mov	r0, r4
 808762c:	4798      	blx	r3
            }
            write("details = ", 10);
 808762e:	6823      	ldr	r3, [r4, #0]
 8087630:	4915      	ldr	r1, [pc, #84]	; (8087688 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
 8087632:	4620      	mov	r0, r4
 8087634:	68db      	ldr	r3, [r3, #12]
 8087636:	220a      	movs	r2, #10
 8087638:	4798      	blx	r3
            write(attr.details);
 808763a:	69e9      	ldr	r1, [r5, #28]
 808763c:	4620      	mov	r0, r4
 808763e:	f7ff f979 	bl	8086934 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 8087642:	215d      	movs	r1, #93	; 0x5d
 8087644:	4620      	mov	r0, r4
 8087646:	f7ff f983 	bl	8086950 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 808764a:	6823      	ldr	r3, [r4, #0]
 808764c:	4620      	mov	r0, r4
}
 808764e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 8087652:	68db      	ldr	r3, [r3, #12]
 8087654:	2202      	movs	r2, #2
 8087656:	490d      	ldr	r1, [pc, #52]	; (808768c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
 8087658:	4718      	bx	r3
 808765a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808765e:	bf00      	nop
 8087660:	20000ed4 	.word	0x20000ed4
 8087664:	0808eeca 	.word	0x0808eeca
 8087668:	0808eed1 	.word	0x0808eed1
 808766c:	0808e335 	.word	0x0808e335
 8087670:	0808eed4 	.word	0x0808eed4
 8087674:	0808eed9 	.word	0x0808eed9
 8087678:	0808eed7 	.word	0x0808eed7
 808767c:	0808eedc 	.word	0x0808eedc
 8087680:	0808eedf 	.word	0x0808eedf
 8087684:	0808eee7 	.word	0x0808eee7
 8087688:	0808eeea 	.word	0x0808eeea
 808768c:	0808ec95 	.word	0x0808ec95

08087690 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8087690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8087694:	b085      	sub	sp, #20
 8087696:	f8d0 8020 	ldr.w	r8, [r0, #32]
 808769a:	4606      	mov	r6, r0
 808769c:	460f      	mov	r7, r1
 808769e:	4691      	mov	r9, r2
 80876a0:	461d      	mov	r5, r3
 80876a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
 80876a4:	f001 f906 	bl	80888b4 <_Z16_fetch_usbserialv>
 80876a8:	4580      	cmp	r8, r0
 80876aa:	d105      	bne.n	80876b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80876ac:	484a      	ldr	r0, [pc, #296]	; (80877d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 80876ae:	f001 fbbd 	bl	8088e2c <_ZN5spark12NetworkClass9listeningEv>
 80876b2:	2800      	cmp	r0, #0
 80876b4:	f040 808c 	bne.w	80877d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
 80876b8:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80876ba:	4a48      	ldr	r2, [pc, #288]	; (80877dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80876bc:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80876c0:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80876c2:	9201      	str	r2, [sp, #4]
 80876c4:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80876c6:	f88d 8008 	strb.w	r8, [sp, #8]
 80876ca:	f001 fcd0 	bl	808906e <_ZN5spark10JSONWriter11beginObjectEv>
 80876ce:	4641      	mov	r1, r8
 80876d0:	4648      	mov	r0, r9
 80876d2:	f7fe f8d9 	bl	8085888 <log_level_name>
 80876d6:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 80876d8:	4941      	ldr	r1, [pc, #260]	; (80877e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80876da:	2201      	movs	r2, #1
 80876dc:	a801      	add	r0, sp, #4
 80876de:	f001 fd4b 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 80876e2:	4641      	mov	r1, r8
 80876e4:	f7ff f919 	bl	808691a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 80876e8:	b13f      	cbz	r7, 80876fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80876ea:	493e      	ldr	r1, [pc, #248]	; (80877e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80876ec:	2201      	movs	r2, #1
 80876ee:	a801      	add	r0, sp, #4
 80876f0:	f001 fd42 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 80876f4:	4639      	mov	r1, r7
 80876f6:	f7ff f910 	bl	808691a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 80876fa:	b13d      	cbz	r5, 808770c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80876fc:	493a      	ldr	r1, [pc, #232]	; (80877e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80876fe:	2201      	movs	r2, #1
 8087700:	a801      	add	r0, sp, #4
 8087702:	f001 fd39 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 8087706:	4629      	mov	r1, r5
 8087708:	f7ff f907 	bl	808691a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 808770c:	7923      	ldrb	r3, [r4, #4]
 808770e:	07df      	lsls	r7, r3, #31
 8087710:	d50e      	bpl.n	8087730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8087712:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 8087714:	212f      	movs	r1, #47	; 0x2f
 8087716:	4628      	mov	r0, r5
 8087718:	f004 fb9c 	bl	808be54 <strrchr>
    if (s1) {
 808771c:	b100      	cbz	r0, 8087720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 808771e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 8087720:	4932      	ldr	r1, [pc, #200]	; (80877ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8087722:	2201      	movs	r2, #1
 8087724:	a801      	add	r0, sp, #4
 8087726:	f001 fd27 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 808772a:	4629      	mov	r1, r5
 808772c:	f7ff f8f5 	bl	808691a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 8087730:	7923      	ldrb	r3, [r4, #4]
 8087732:	079d      	lsls	r5, r3, #30
 8087734:	d507      	bpl.n	8087746 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8087736:	492e      	ldr	r1, [pc, #184]	; (80877f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8087738:	2202      	movs	r2, #2
 808773a:	a801      	add	r0, sp, #4
 808773c:	f001 fd1c 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 8087740:	68e1      	ldr	r1, [r4, #12]
 8087742:	f001 fca1 	bl	8089088 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 8087746:	7923      	ldrb	r3, [r4, #4]
 8087748:	0758      	lsls	r0, r3, #29
 808774a:	d516      	bpl.n	808777a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808774c:	6925      	ldr	r5, [r4, #16]
 808774e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 8087750:	463b      	mov	r3, r7
 8087752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8087756:	b13a      	cbz	r2, 8087768 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
 8087758:	2a20      	cmp	r2, #32
 808775a:	d101      	bne.n	8087760 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 808775c:	461d      	mov	r5, r3
 808775e:	e001      	b.n	8087764 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
 8087760:	2a28      	cmp	r2, #40	; 0x28
 8087762:	d001      	beq.n	8087768 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8087764:	461f      	mov	r7, r3
 8087766:	e7f3      	b.n	8087750 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 8087768:	2202      	movs	r2, #2
 808776a:	4922      	ldr	r1, [pc, #136]	; (80877f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 808776c:	a801      	add	r0, sp, #4
 808776e:	f001 fd03 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 8087772:	1b7a      	subs	r2, r7, r5
 8087774:	4629      	mov	r1, r5
 8087776:	f001 fd0e 	bl	8089196 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 808777a:	7923      	ldrb	r3, [r4, #4]
 808777c:	0719      	lsls	r1, r3, #28
 808777e:	d507      	bpl.n	8087790 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
 8087780:	491d      	ldr	r1, [pc, #116]	; (80877f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8087782:	2201      	movs	r2, #1
 8087784:	a801      	add	r0, sp, #4
 8087786:	f001 fcf7 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 808778a:	6961      	ldr	r1, [r4, #20]
 808778c:	f001 fc8e 	bl	80890ac <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 8087790:	7923      	ldrb	r3, [r4, #4]
 8087792:	06da      	lsls	r2, r3, #27
 8087794:	d508      	bpl.n	80877a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
 8087796:	2204      	movs	r2, #4
 8087798:	4918      	ldr	r1, [pc, #96]	; (80877fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 808779a:	eb0d 0002 	add.w	r0, sp, r2
 808779e:	f001 fceb 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 80877a2:	69a1      	ldr	r1, [r4, #24]
 80877a4:	f001 fc70 	bl	8089088 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80877a8:	7923      	ldrb	r3, [r4, #4]
 80877aa:	069b      	lsls	r3, r3, #26
 80877ac:	d507      	bpl.n	80877be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
 80877ae:	4914      	ldr	r1, [pc, #80]	; (8087800 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80877b0:	2206      	movs	r2, #6
 80877b2:	a801      	add	r0, sp, #4
 80877b4:	f001 fce0 	bl	8089178 <_ZN5spark10JSONWriter4nameEPKcj>
 80877b8:	69e1      	ldr	r1, [r4, #28]
 80877ba:	f7ff f8ae 	bl	808691a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80877be:	a801      	add	r0, sp, #4
 80877c0:	f001 fc3f 	bl	8089042 <_ZN5spark10JSONWriter9endObjectEv>
 80877c4:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80877c6:	2202      	movs	r2, #2
 80877c8:	6803      	ldr	r3, [r0, #0]
 80877ca:	490e      	ldr	r1, [pc, #56]	; (8087804 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80877cc:	68db      	ldr	r3, [r3, #12]
 80877ce:	4798      	blx	r3
}
 80877d0:	b005      	add	sp, #20
 80877d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80877d6:	bf00      	nop
 80877d8:	20000ed4 	.word	0x20000ed4
 80877dc:	0808ee28 	.word	0x0808ee28
 80877e0:	0808ee5a 	.word	0x0808ee5a
 80877e4:	0808ee70 	.word	0x0808ee70
 80877e8:	0808f456 	.word	0x0808f456
 80877ec:	0808e4a4 	.word	0x0808e4a4
 80877f0:	0808eef5 	.word	0x0808eef5
 80877f4:	0808eef8 	.word	0x0808eef8
 80877f8:	0808f4c4 	.word	0x0808f4c4
 80877fc:	0808eefb 	.word	0x0808eefb
 8087800:	0808ef00 	.word	0x0808ef00
 8087804:	0808ec95 	.word	0x0808ec95

08087808 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8087808:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808780a:	4b14      	ldr	r3, [pc, #80]	; (808785c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808780c:	4f14      	ldr	r7, [pc, #80]	; (8087860 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808780e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8087810:	4b14      	ldr	r3, [pc, #80]	; (8087864 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8087812:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8087814:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8087816:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8087818:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808781a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808781c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808781e:	d01b      	beq.n	8087858 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8087820:	a80a      	add	r0, sp, #40	; 0x28
 8087822:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8087826:	f003 fc29 	bl	808b07c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808782a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808782c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808782e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8087830:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8087834:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8087836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8087838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808783a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808783c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808783e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8087842:	4c09      	ldr	r4, [pc, #36]	; (8087868 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8087844:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8087848:	ad01      	add	r5, sp, #4
 808784a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808784c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808784e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8087852:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8087854:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8087858:	b00b      	add	sp, #44	; 0x2c
 808785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808785c:	2000096c 	.word	0x2000096c
 8087860:	20000968 	.word	0x20000968
 8087864:	20000964 	.word	0x20000964
 8087868:	2000093c 	.word	0x2000093c

0808786c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808786c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808786e:	2000      	movs	r0, #0
 8087870:	f7fe f8e8 	bl	8085a44 <spark_sync_time_pending>
 8087874:	b128      	cbz	r0, 8087882 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8087876:	f7fe f8cd 	bl	8085a14 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808787a:	f080 0001 	eor.w	r0, r0, #1
 808787e:	b2c0      	uxtb	r0, r0
 8087880:	bd08      	pop	{r3, pc}
 8087882:	2001      	movs	r0, #1
    }
 8087884:	bd08      	pop	{r3, pc}
	...

08087888 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8087888:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808788a:	4909      	ldr	r1, [pc, #36]	; (80878b0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808788c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808788e:	f003 f97b 	bl	808ab88 <__aeabi_fcmplt>
 8087892:	b960      	cbnz	r0, 80878ae <_ZN9TimeClass4zoneEf+0x26>
 8087894:	4907      	ldr	r1, [pc, #28]	; (80878b4 <_ZN9TimeClass4zoneEf+0x2c>)
 8087896:	4620      	mov	r0, r4
 8087898:	f003 f994 	bl	808abc4 <__aeabi_fcmpgt>
 808789c:	b938      	cbnz	r0, 80878ae <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808789e:	4906      	ldr	r1, [pc, #24]	; (80878b8 <_ZN9TimeClass4zoneEf+0x30>)
 80878a0:	4620      	mov	r0, r4
 80878a2:	f002 ffd3 	bl	808a84c <__aeabi_fmul>
 80878a6:	f003 f9ad 	bl	808ac04 <__aeabi_f2iz>
 80878aa:	4b04      	ldr	r3, [pc, #16]	; (80878bc <_ZN9TimeClass4zoneEf+0x34>)
 80878ac:	6018      	str	r0, [r3, #0]
 80878ae:	bd10      	pop	{r4, pc}
 80878b0:	c1400000 	.word	0xc1400000
 80878b4:	41600000 	.word	0x41600000
 80878b8:	45610000 	.word	0x45610000
 80878bc:	2000096c 	.word	0x2000096c

080878c0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80878c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80878c2:	4b0e      	ldr	r3, [pc, #56]	; (80878fc <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80878c4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80878c6:	681b      	ldr	r3, [r3, #0]
 80878c8:	a802      	add	r0, sp, #8
 80878ca:	4419      	add	r1, r3
 80878cc:	4b0c      	ldr	r3, [pc, #48]	; (8087900 <_ZN9TimeClass7timeStrEl+0x40>)
 80878ce:	681b      	ldr	r3, [r3, #0]
 80878d0:	4419      	add	r1, r3
 80878d2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80878d6:	f003 fbd1 	bl	808b07c <localtime>
        char* ascstr = asctime(calendar_time);
 80878da:	f003 fb81 	bl	808afe0 <asctime>
 80878de:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80878e0:	f004 fa88 	bl	808bdf4 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80878e4:	2300      	movs	r3, #0
 80878e6:	4428      	add	r0, r5
 80878e8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80878ec:	4629      	mov	r1, r5
 80878ee:	4620      	mov	r0, r4
 80878f0:	f7fe fe77 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80878f4:	4620      	mov	r0, r4
 80878f6:	b003      	add	sp, #12
 80878f8:	bd30      	pop	{r4, r5, pc}
 80878fa:	bf00      	nop
 80878fc:	2000096c 	.word	0x2000096c
 8087900:	20000964 	.word	0x20000964

08087904 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8087904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087908:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808790a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808790c:	4607      	mov	r7, r0
 808790e:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8087910:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8087912:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8087914:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8087916:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8087918:	f004 fa89 	bl	808be2e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808791c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808791e:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8087920:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8087924:	f004 fa66 	bl	808bdf4 <strlen>
 8087928:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808792a:	b925      	cbnz	r5, 8087936 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 808792c:	4924      	ldr	r1, [pc, #144]	; (80879c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 808792e:	a803      	add	r0, sp, #12
 8087930:	f003 fd28 	bl	808b384 <strcpy>
 8087934:	e013      	b.n	808795e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8087936:	213c      	movs	r1, #60	; 0x3c
 8087938:	fb95 f2f1 	sdiv	r2, r5, r1
 808793c:	2a00      	cmp	r2, #0
 808793e:	bfb8      	it	lt
 8087940:	4252      	neglt	r2, r2
 8087942:	fb92 f3f1 	sdiv	r3, r2, r1
 8087946:	fb01 2213 	mls	r2, r1, r3, r2
 808794a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808794e:	9200      	str	r2, [sp, #0]
 8087950:	fb95 f3f3 	sdiv	r3, r5, r3
 8087954:	4a1b      	ldr	r2, [pc, #108]	; (80879c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 8087956:	2110      	movs	r1, #16
 8087958:	a803      	add	r0, sp, #12
 808795a:	f7fe f8b3 	bl	8085ac4 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808795e:	4625      	mov	r5, r4
 8087960:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8087962:	f108 3aff 	add.w	sl, r8, #4294967295
 8087966:	45b2      	cmp	sl, r6
 8087968:	d91b      	bls.n	80879a2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808796a:	782b      	ldrb	r3, [r5, #0]
 808796c:	2b25      	cmp	r3, #37	; 0x25
 808796e:	d116      	bne.n	808799e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 8087970:	786b      	ldrb	r3, [r5, #1]
 8087972:	2b7a      	cmp	r3, #122	; 0x7a
 8087974:	d113      	bne.n	808799e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 8087976:	a803      	add	r0, sp, #12
 8087978:	f004 fa3c 	bl	808bdf4 <strlen>
 808797c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808797e:	4430      	add	r0, r6
 8087980:	ebc6 020a 	rsb	r2, r6, sl
 8087984:	1ca9      	adds	r1, r5, #2
 8087986:	4420      	add	r0, r4
 8087988:	f003 fc83 	bl	808b292 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808798c:	4642      	mov	r2, r8
 808798e:	a903      	add	r1, sp, #12
 8087990:	4628      	mov	r0, r5
 8087992:	f003 fc7e 	bl	808b292 <memcpy>
            len = strlen(format_str);
 8087996:	4620      	mov	r0, r4
 8087998:	f004 fa2c 	bl	808bdf4 <strlen>
 808799c:	4680      	mov	r8, r0
 808799e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80879a0:	e7de      	b.n	8087960 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80879a2:	464b      	mov	r3, r9
 80879a4:	4622      	mov	r2, r4
 80879a6:	2132      	movs	r1, #50	; 0x32
 80879a8:	a807      	add	r0, sp, #28
 80879aa:	f003 fd6f 	bl	808b48c <strftime>
    return String(buf);
 80879ae:	a907      	add	r1, sp, #28
 80879b0:	4638      	mov	r0, r7
 80879b2:	f7fe fe16 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80879b6:	4638      	mov	r0, r7
 80879b8:	b024      	add	sp, #144	; 0x90
 80879ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80879be:	bf00      	nop
 80879c0:	0808f64d 	.word	0x0808f64d
 80879c4:	0808ef70 	.word	0x0808ef70

080879c8 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80879c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80879ca:	4605      	mov	r5, r0
 80879cc:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80879ce:	461c      	mov	r4, r3
 80879d0:	b913      	cbnz	r3, 80879d8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80879d2:	4b12      	ldr	r3, [pc, #72]	; (8087a1c <_ZN9TimeClass6formatElPKc+0x54>)
 80879d4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80879d6:	b12c      	cbz	r4, 80879e4 <_ZN9TimeClass6formatElPKc+0x1c>
 80879d8:	4b11      	ldr	r3, [pc, #68]	; (8087a20 <_ZN9TimeClass6formatElPKc+0x58>)
 80879da:	4620      	mov	r0, r4
 80879dc:	6819      	ldr	r1, [r3, #0]
 80879de:	f003 fcc7 	bl	808b370 <strcmp>
 80879e2:	b920      	cbnz	r0, 80879ee <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80879e4:	9901      	ldr	r1, [sp, #4]
 80879e6:	4628      	mov	r0, r5
 80879e8:	f7ff ff6a 	bl	80878c0 <_ZN9TimeClass7timeStrEl>
 80879ec:	e013      	b.n	8087a16 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80879ee:	4f0d      	ldr	r7, [pc, #52]	; (8087a24 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80879f0:	9a01      	ldr	r2, [sp, #4]
 80879f2:	683b      	ldr	r3, [r7, #0]
 80879f4:	4e0c      	ldr	r6, [pc, #48]	; (8087a28 <_ZN9TimeClass6formatElPKc+0x60>)
 80879f6:	441a      	add	r2, r3
 80879f8:	6833      	ldr	r3, [r6, #0]
 80879fa:	a802      	add	r0, sp, #8
 80879fc:	4413      	add	r3, r2
 80879fe:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 8087a02:	f003 fb3b 	bl	808b07c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8087a06:	683a      	ldr	r2, [r7, #0]
 8087a08:	6833      	ldr	r3, [r6, #0]
 8087a0a:	4601      	mov	r1, r0
 8087a0c:	4413      	add	r3, r2
 8087a0e:	4628      	mov	r0, r5
 8087a10:	4622      	mov	r2, r4
 8087a12:	f7ff ff77 	bl	8087904 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 8087a16:	4628      	mov	r0, r5
 8087a18:	b003      	add	sp, #12
 8087a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087a1c:	20000960 	.word	0x20000960
 8087a20:	20000054 	.word	0x20000054
 8087a24:	2000096c 	.word	0x2000096c
 8087a28:	20000964 	.word	0x20000964

08087a2c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8087a2c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8087a2e:	2000      	movs	r0, #0
 8087a30:	f7fd fd72 	bl	8085518 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8087a34:	4604      	mov	r4, r0
 8087a36:	b968      	cbnz	r0, 8087a54 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8087a38:	f7fd ff36 	bl	80858a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8087a3c:	2801      	cmp	r0, #1
 8087a3e:	d10b      	bne.n	8087a58 <_ZN9TimeClass7isValidEv+0x2c>
 8087a40:	4620      	mov	r0, r4
 8087a42:	f7fd ff61 	bl	8085908 <system_thread_get_state>
 8087a46:	b938      	cbnz	r0, 8087a58 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8087a48:	f7ff ff10 	bl	808786c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8087a4c:	b930      	cbnz	r0, 8087a5c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8087a4e:	f7fd ffd9 	bl	8085a04 <spark_process>
 8087a52:	e7f9      	b.n	8087a48 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8087a54:	2001      	movs	r0, #1
 8087a56:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8087a58:	2000      	movs	r0, #0
 8087a5a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8087a5c:	f7ff ff06 	bl	808786c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8087a60:	2000      	movs	r0, #0
 8087a62:	f7fd fd59 	bl	8085518 <HAL_RTC_Time_Is_Valid>
 8087a66:	3000      	adds	r0, #0
 8087a68:	bf18      	it	ne
 8087a6a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8087a6c:	bd10      	pop	{r4, pc}

08087a6e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8087a6e:	b508      	push	{r3, lr}
    (void)isValid();
 8087a70:	f7ff ffdc 	bl	8087a2c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8087a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8087a78:	f7fd bd46 	b.w	8085508 <HAL_RTC_Get_UnixTime>

08087a7c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8087a7c:	b508      	push	{r3, lr}
	return hour(now());
 8087a7e:	f7ff fff6 	bl	8087a6e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8087a82:	f7ff fec1 	bl	8087808 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8087a86:	4b01      	ldr	r3, [pc, #4]	; (8087a8c <_ZN9TimeClass4hourEv+0x10>)
 8087a88:	6898      	ldr	r0, [r3, #8]
 8087a8a:	bd08      	pop	{r3, pc}
 8087a8c:	2000093c 	.word	0x2000093c

08087a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8087a90:	4b02      	ldr	r3, [pc, #8]	; (8087a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8087a92:	681a      	ldr	r2, [r3, #0]
 8087a94:	4b02      	ldr	r3, [pc, #8]	; (8087aa0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8087a96:	601a      	str	r2, [r3, #0]
 8087a98:	4770      	bx	lr
 8087a9a:	bf00      	nop
 8087a9c:	20000054 	.word	0x20000054
 8087aa0:	20000960 	.word	0x20000960

08087aa4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8087aa4:	2100      	movs	r1, #0
 8087aa6:	f7fd bf0f 	b.w	80858c8 <system_delay_ms>
	...

08087aac <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 8087aac:	b530      	push	{r4, r5, lr}
 8087aae:	685b      	ldr	r3, [r3, #4]
 8087ab0:	b085      	sub	sp, #20
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 8087ab2:	6804      	ldr	r4, [r0, #0]
 8087ab4:	9303      	str	r3, [sp, #12]
 8087ab6:	4d05      	ldr	r5, [pc, #20]	; (8087acc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x20>)
 8087ab8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8087abc:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8087abe:	9502      	str	r5, [sp, #8]
 8087ac0:	9300      	str	r3, [sp, #0]
 8087ac2:	ab02      	add	r3, sp, #8
 8087ac4:	47a0      	blx	r4
    }
 8087ac6:	b005      	add	sp, #20
 8087ac8:	bd30      	pop	{r4, r5, pc}
 8087aca:	bf00      	nop
 8087acc:	0808f02c 	.word	0x0808f02c

08087ad0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 8087ad0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 8087ad2:	6804      	ldr	r4, [r0, #0]
 8087ad4:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8087ad6:	46a4      	mov	ip, r4
    }
 8087ad8:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 8087ada:	4760      	bx	ip

08087adc <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 8087adc:	6803      	ldr	r3, [r0, #0]
 8087ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087ae0:	4718      	bx	r3
	...

08087ae4 <_ZN3UDP8remoteIPEv>:
 8087ae4:	4a02      	ldr	r2, [pc, #8]	; (8087af0 <_ZN3UDP8remoteIPEv+0xc>)
 8087ae6:	6002      	str	r2, [r0, #0]
 8087ae8:	6a0a      	ldr	r2, [r1, #32]
 8087aea:	6042      	str	r2, [r0, #4]
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 8087aec:	4770      	bx	lr
 8087aee:	bf00      	nop
 8087af0:	0808f02c 	.word	0x0808f02c

08087af4 <_ZN3UDP10remotePortEv>:
    virtual uint16_t remotePort() { return _remotePort; };
 8087af4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8087af6:	4770      	bx	lr

08087af8 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 8087af8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8087afa:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8087afc:	1a10      	subs	r0, r2, r0
 8087afe:	4770      	bx	lr

08087b00 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8087b00:	b530      	push	{r4, r5, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8087b02:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8087b04:	b085      	sub	sp, #20
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8087b06:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8087b08:	4b09      	ldr	r3, [pc, #36]	; (8087b30 <_ZN3UDP9endPacketEv+0x30>)
 8087b0a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8087b0c:	9302      	str	r3, [sp, #8]
 8087b0e:	6a03      	ldr	r3, [r0, #32]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8087b10:	4604      	mov	r4, r0
 8087b12:	9303      	str	r3, [sp, #12]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8087b14:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8087b16:	9300      	str	r3, [sp, #0]
 8087b18:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8087b1a:	ab02      	add	r3, sp, #8
 8087b1c:	47a8      	blx	r5
 8087b1e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 8087b20:	6823      	ldr	r3, [r4, #0]
 8087b22:	4620      	mov	r0, r4
 8087b24:	69db      	ldr	r3, [r3, #28]
 8087b26:	4798      	blx	r3
    return result;
}
 8087b28:	4628      	mov	r0, r5
 8087b2a:	b005      	add	sp, #20
 8087b2c:	bd30      	pop	{r4, r5, pc}
 8087b2e:	bf00      	nop
 8087b30:	0808f02c 	.word	0x0808f02c

08087b34 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 8087b34:	b513      	push	{r0, r1, r4, lr}
 8087b36:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 8087b38:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 8087b3a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 8087b3e:	68d4      	ldr	r4, [r2, #12]
 8087b40:	4619      	mov	r1, r3
 8087b42:	2201      	movs	r2, #1
 8087b44:	47a0      	blx	r4
}
 8087b46:	b002      	add	sp, #8
 8087b48:	bd10      	pop	{r4, pc}

08087b4a <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 8087b4a:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 8087b4c:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 8087b4e:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 8087b50:	691b      	ldr	r3, [r3, #16]
 8087b52:	4798      	blx	r3
 8087b54:	b128      	cbz	r0, 8087b62 <_ZN3UDP4readEv+0x18>
 8087b56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087b58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8087b5a:	1c59      	adds	r1, r3, #1
 8087b5c:	84e1      	strh	r1, [r4, #38]	; 0x26
 8087b5e:	5cd0      	ldrb	r0, [r2, r3]
 8087b60:	bd10      	pop	{r4, pc}
 8087b62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087b66:	bd10      	pop	{r4, pc}

08087b68 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 8087b68:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 8087b6a:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 8087b6c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 8087b6e:	691b      	ldr	r3, [r3, #16]
 8087b70:	4798      	blx	r3
 8087b72:	b118      	cbz	r0, 8087b7c <_ZN3UDP4peekEv+0x14>
 8087b74:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8087b78:	5cd0      	ldrb	r0, [r2, r3]
 8087b7a:	bd10      	pop	{r4, pc}
 8087b7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087b80:	bd10      	pop	{r4, pc}

08087b82 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 8087b82:	4770      	bx	lr

08087b84 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 8087b84:	4603      	mov	r3, r0
 8087b86:	4608      	mov	r0, r1
 8087b88:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 8087b8a:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    return p.write(_buffer+_offset, size);
 8087b8c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8087b8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8087b90:	6803      	ldr	r3, [r0, #0]
 8087b92:	1a52      	subs	r2, r2, r1
 8087b94:	68db      	ldr	r3, [r3, #12]
 8087b96:	4421      	add	r1, r4
}
 8087b98:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 8087b9a:	4718      	bx	r3

08087b9c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 8087b9c:	f1a0 0010 	sub.w	r0, r0, #16
 8087ba0:	f7ff bff0 	b.w	8087b84 <_ZNK3UDP7printToER5Print>

08087ba4 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8087ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087ba6:	4616      	mov	r6, r2
    stop();
 8087ba8:	6803      	ldr	r3, [r0, #0]
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8087baa:	4605      	mov	r5, r0
    stop();
 8087bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8087bae:	460f      	mov	r7, r1
    stop();
 8087bb0:	4798      	blx	r3

    bool bound = 0;
    if(Network.from(nif).ready())
 8087bb2:	4630      	mov	r0, r6
 8087bb4:	f001 f966 	bl	8088e84 <_ZN5spark12NetworkClass4fromEm>
 8087bb8:	6803      	ldr	r3, [r0, #0]
 8087bba:	68db      	ldr	r3, [r3, #12]
 8087bbc:	4798      	blx	r3
 8087bbe:	b1b8      	cbz	r0, 8087bf0 <_ZN3UDP5beginEtm+0x4c>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 8087bc0:	2102      	movs	r1, #2
 8087bc2:	463b      	mov	r3, r7
 8087bc4:	2211      	movs	r2, #17
 8087bc6:	4608      	mov	r0, r1
 8087bc8:	9600      	str	r6, [sp, #0]
 8087bca:	f7fd fdb5 	bl	8085738 <socket_create>
 8087bce:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 8087bd0:	f7fd fdaa 	bl	8085728 <socket_handle_valid>
 8087bd4:	4604      	mov	r4, r0
 8087bd6:	b130      	cbz	r0, 8087be6 <_ZN3UDP5beginEtm+0x42>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087bd8:	2300      	movs	r3, #0
 8087bda:	84eb      	strh	r3, [r5, #38]	; 0x26
  _total = 0;
 8087bdc:	852b      	strh	r3, [r5, #40]	; 0x28
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 8087bde:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 8087be0:	636e      	str	r6, [r5, #52]	; 0x34
            bound = true;
 8087be2:	2001      	movs	r0, #1
 8087be4:	e004      	b.n	8087bf0 <_ZN3UDP5beginEtm+0x4c>
        }
        else {
            stop();
 8087be6:	682b      	ldr	r3, [r5, #0]
 8087be8:	4628      	mov	r0, r5
 8087bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087bec:	4798      	blx	r3
            bound = false;
 8087bee:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 8087bf0:	b003      	add	sp, #12
 8087bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087bf4 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 8087bf4:	b538      	push	{r3, r4, r5, lr}
 8087bf6:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 8087bf8:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 8087bfa:	f7fd fdcd 	bl	8085798 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 8087bfe:	4285      	cmp	r5, r0
 8087c00:	d002      	beq.n	8087c08 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 8087c02:	6960      	ldr	r0, [r4, #20]
 8087c04:	f7fd fdc0 	bl	8085788 <socket_close>
    }
    _sock = socket_handle_invalid();
 8087c08:	f7fd fdc6 	bl	8085798 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087c0c:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 8087c0e:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087c10:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8087c12:	8523      	strh	r3, [r4, #40]	; 0x28
 8087c14:	bd38      	pop	{r3, r4, r5, pc}

08087c16 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 8087c16:	b530      	push	{r4, r5, lr}
 8087c18:	b087      	sub	sp, #28
 8087c1a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 8087c1e:	2502      	movs	r5, #2
 8087c20:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 8087c24:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8087c28:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8087c2a:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8087c2c:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8087c30:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 8087c34:	799c      	ldrb	r4, [r3, #6]
 8087c36:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8087c3a:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8087c3c:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8087c3e:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8087c42:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 8087c46:	2310      	movs	r3, #16
 8087c48:	9301      	str	r3, [sp, #4]
 8087c4a:	ab02      	add	r3, sp, #8
 8087c4c:	9300      	str	r3, [sp, #0]
 8087c4e:	6940      	ldr	r0, [r0, #20]
 8087c50:	2300      	movs	r3, #0
 8087c52:	f7fd fd91 	bl	8085778 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 8087c56:	b007      	add	sp, #28
 8087c58:	bd30      	pop	{r4, r5, pc}

08087c5a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8087c5a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8087c5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8087c5e:	4605      	mov	r5, r0
 8087c60:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8087c62:	b113      	cbz	r3, 8087c6a <_ZN3UDP5writeEPKhj+0x10>
 8087c64:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8087c66:	1a24      	subs	r4, r4, r0
 8087c68:	e000      	b.n	8087c6c <_ZN3UDP5writeEPKhj+0x12>
 8087c6a:	461c      	mov	r4, r3
 8087c6c:	4294      	cmp	r4, r2
 8087c6e:	bf28      	it	cs
 8087c70:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 8087c72:	4418      	add	r0, r3
 8087c74:	4622      	mov	r2, r4
 8087c76:	f003 fb0c 	bl	808b292 <memcpy>
    _offset += size;
 8087c7a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    return size;
}
 8087c7c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 8087c7e:	4423      	add	r3, r4
 8087c80:	84eb      	strh	r3, [r5, #38]	; 0x26
    return size;
}
 8087c82:	bd38      	pop	{r3, r4, r5, pc}

08087c84 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8087c84:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 8087c86:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8087c88:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 8087c8a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8087c8c:	460e      	mov	r6, r1
 8087c8e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 8087c90:	4798      	blx	r3
 8087c92:	b188      	cbz	r0, 8087cb8 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 8087c94:	6823      	ldr	r3, [r4, #0]
 8087c96:	4620      	mov	r0, r4
 8087c98:	691b      	ldr	r3, [r3, #16]
 8087c9a:	4798      	blx	r3
 8087c9c:	4285      	cmp	r5, r0
 8087c9e:	bfa8      	it	ge
 8087ca0:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 8087ca2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087ca4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8087ca6:	462a      	mov	r2, r5
 8087ca8:	4419      	add	r1, r3
 8087caa:	4630      	mov	r0, r6
 8087cac:	f003 faf1 	bl	808b292 <memcpy>
      _offset += read;
 8087cb0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087cb2:	442b      	add	r3, r5
 8087cb4:	84e3      	strh	r3, [r4, #38]	; 0x26
 8087cb6:	e001      	b.n	8087cbc <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 8087cb8:	f04f 35ff 	mov.w	r5, #4294967295
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 8087cbc:	4628      	mov	r0, r5
 8087cbe:	bd70      	pop	{r4, r5, r6, pc}

08087cc0 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 8087cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087cc2:	4604      	mov	r4, r0
 8087cc4:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8087cc6:	6b40      	ldr	r0, [r0, #52]	; 0x34
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 8087cc8:	460d      	mov	r5, r1
 8087cca:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8087ccc:	f001 f8da 	bl	8088e84 <_ZN5spark12NetworkClass4fromEm>
 8087cd0:	6803      	ldr	r3, [r0, #0]
 8087cd2:	68db      	ldr	r3, [r3, #12]
 8087cd4:	4798      	blx	r3
 8087cd6:	b310      	cbz	r0, 8087d1e <_ZN3UDP13receivePacketEPhjm+0x5e>
 8087cd8:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 8087cda:	f7fd fd5d 	bl	8085798 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8087cde:	4287      	cmp	r7, r0
 8087ce0:	d01d      	beq.n	8087d1e <_ZN3UDP13receivePacketEPhjm+0x5e>
 8087ce2:	b1e5      	cbz	r5, 8087d1e <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 8087ce4:	ab08      	add	r3, sp, #32
 8087ce6:	2210      	movs	r2, #16
 8087ce8:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 8087cec:	9301      	str	r3, [sp, #4]
 8087cee:	eb0d 0302 	add.w	r3, sp, r2
 8087cf2:	9300      	str	r3, [sp, #0]
 8087cf4:	4629      	mov	r1, r5
 8087cf6:	2300      	movs	r3, #0
 8087cf8:	4632      	mov	r2, r6
 8087cfa:	6960      	ldr	r0, [r4, #20]
 8087cfc:	f7fd fd34 	bl	8085768 <socket_receivefrom>
        if (ret >= 0)
 8087d00:	1e05      	subs	r5, r0, #0
 8087d02:	db0e      	blt.n	8087d22 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 8087d04:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8087d08:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 8087d0c:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 8087d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8087d12:	84a3      	strh	r3, [r4, #36]	; 0x24
            _remoteIP = &remoteSockAddr.sa_data[2];
 8087d14:	f104 001c 	add.w	r0, r4, #28
 8087d18:	f000 fd4c 	bl	80887b4 <_ZN9IPAddressaSEPKh>
 8087d1c:	e001      	b.n	8087d22 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 8087d1e:	f04f 35ff 	mov.w	r5, #4294967295
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 8087d22:	4628      	mov	r0, r5
 8087d24:	b009      	add	sp, #36	; 0x24
 8087d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087d28 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8087d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087d2a:	4605      	mov	r5, r0
 8087d2c:	b089      	sub	sp, #36	; 0x24
    if(Network.from(_nif).ready())
 8087d2e:	6b40      	ldr	r0, [r0, #52]	; 0x34

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8087d30:	460e      	mov	r6, r1
 8087d32:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 8087d34:	f001 f8a6 	bl	8088e84 <_ZN5spark12NetworkClass4fromEm>
 8087d38:	6803      	ldr	r3, [r0, #0]
 8087d3a:	68db      	ldr	r3, [r3, #12]
 8087d3c:	4798      	blx	r3
 8087d3e:	b1d8      	cbz	r0, 8087d78 <_ZN3UDP11beginPacketEPKct+0x50>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 8087d40:	4630      	mov	r0, r6
 8087d42:	f004 f857 	bl	808bdf4 <strlen>
 8087d46:	2400      	movs	r4, #0
 8087d48:	b281      	uxth	r1, r0
 8087d4a:	9400      	str	r4, [sp, #0]
 8087d4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8087d4e:	aa03      	add	r2, sp, #12
 8087d50:	4630      	mov	r0, r6
 8087d52:	f7fd fd39 	bl	80857c8 <inet_gethostbyname>
 8087d56:	b970      	cbnz	r0, 8087d76 <_ZN3UDP11beginPacketEPKct+0x4e>
        {
            IPAddress remote_addr(ip_addr);
 8087d58:	a903      	add	r1, sp, #12
 8087d5a:	a804      	add	r0, sp, #16
 8087d5c:	f000 fd00 	bl	8088760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8087d60:	4a06      	ldr	r2, [pc, #24]	; (8087d7c <_ZN3UDP11beginPacketEPKct+0x54>)
            return beginPacket(remote_addr, port);
 8087d62:	682b      	ldr	r3, [r5, #0]
 8087d64:	9206      	str	r2, [sp, #24]
 8087d66:	9a05      	ldr	r2, [sp, #20]
 8087d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087d6a:	9207      	str	r2, [sp, #28]
 8087d6c:	a906      	add	r1, sp, #24
 8087d6e:	463a      	mov	r2, r7
 8087d70:	4628      	mov	r0, r5
 8087d72:	4798      	blx	r3
 8087d74:	e000      	b.n	8087d78 <_ZN3UDP11beginPacketEPKct+0x50>
        }
    }
    return 0;
 8087d76:	4620      	mov	r0, r4
}
 8087d78:	b009      	add	sp, #36	; 0x24
 8087d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087d7c:	0808f02c 	.word	0x0808f02c

08087d80 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 8087d80:	b538      	push	{r3, r4, r5, lr}
 8087d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087d86:	6083      	str	r3, [r0, #8]
 8087d88:	4b0b      	ldr	r3, [pc, #44]	; (8087db8 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8087d8a:	2500      	movs	r5, #0
 8087d8c:	f103 0208 	add.w	r2, r3, #8
 8087d90:	336c      	adds	r3, #108	; 0x6c
 8087d92:	6002      	str	r2, [r0, #0]
 8087d94:	6103      	str	r3, [r0, #16]
 8087d96:	6045      	str	r5, [r0, #4]
 8087d98:	4604      	mov	r4, r0
 8087d9a:	f7fd fcfd 	bl	8085798 <socket_handle_invalid>
 8087d9e:	6160      	str	r0, [r4, #20]
 8087da0:	f104 001c 	add.w	r0, r4, #28
 8087da4:	f000 fcd4 	bl	8088750 <_ZN9IPAddressC1Ev>
 8087da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8087dac:	84e5      	strh	r5, [r4, #38]	; 0x26
 8087dae:	8525      	strh	r5, [r4, #40]	; 0x28
 8087db0:	62e5      	str	r5, [r4, #44]	; 0x2c
 8087db2:	6323      	str	r3, [r4, #48]	; 0x30
{
}
 8087db4:	4620      	mov	r0, r4
 8087db6:	bd38      	pop	{r3, r4, r5, pc}
 8087db8:	0808ef98 	.word	0x0808ef98

08087dbc <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8087dbc:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 8087dbe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8087dc2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 8087dc4:	b123      	cbz	r3, 8087dd0 <_ZN3UDP13releaseBufferEv+0x14>
 8087dc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8087dc8:	b110      	cbz	r0, 8087dd0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 8087dca:	2101      	movs	r1, #1
 8087dcc:	f001 fd2e 	bl	808982c <_ZdlPvj>
    }
    _buffer = NULL;
 8087dd0:	2300      	movs	r3, #0
 8087dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    _buffer_allocated = false;
 8087dd4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    _buffer_size = 0;
 8087dd8:	6323      	str	r3, [r4, #48]	; 0x30
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087dda:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8087ddc:	8523      	strh	r3, [r4, #40]	; 0x28
 8087dde:	bd10      	pop	{r4, pc}

08087de0 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 8087de0:	b570      	push	{r4, r5, r6, lr}
 8087de2:	4604      	mov	r4, r0
 8087de4:	4616      	mov	r6, r2
 8087de6:	460d      	mov	r5, r1
    releaseBuffer();
 8087de8:	f7ff ffe8 	bl	8087dbc <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 8087dec:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 8087dee:	62e6      	str	r6, [r4, #44]	; 0x2c
    _buffer_size = 0;
 8087df0:	6323      	str	r3, [r4, #48]	; 0x30
    if (!_buffer && buf_size) {         // requested allocation
 8087df2:	b93e      	cbnz	r6, 8087e04 <_ZN3UDP9setBufferEjPh+0x24>
 8087df4:	b135      	cbz	r5, 8087e04 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 8087df6:	4628      	mov	r0, r5
 8087df8:	f7f8 f953 	bl	80800a2 <_Znaj>
        _buffer_allocated = true;
 8087dfc:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 8087dfe:	62e0      	str	r0, [r4, #44]	; 0x2c
        _buffer_allocated = true;
 8087e00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
    if (_buffer) {
 8087e04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8087e06:	b103      	cbz	r3, 8087e0a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 8087e08:	6325      	str	r5, [r4, #48]	; 0x30
    }
    return _buffer_size;
 8087e0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8087e0c:	3000      	adds	r0, #0
 8087e0e:	bf18      	it	ne
 8087e10:	2001      	movne	r0, #1
 8087e12:	bd70      	pop	{r4, r5, r6, pc}

08087e14 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 8087e14:	b570      	push	{r4, r5, r6, lr}
 8087e16:	4615      	mov	r5, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 8087e18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 8087e1a:	4604      	mov	r4, r0
 8087e1c:	460e      	mov	r6, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 8087e1e:	b91a      	cbnz	r2, 8087e28 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 8087e20:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8087e22:	b109      	cbz	r1, 8087e28 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 8087e24:	f7ff ffdc 	bl	8087de0 <_ZN3UDP9setBufferEjPh>
 8087e28:	6873      	ldr	r3, [r6, #4]
    }

    _remoteIP = ip;
    _remotePort = port;
 8087e2a:	84a5      	strh	r5, [r4, #36]	; 0x24
 8087e2c:	6223      	str	r3, [r4, #32]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087e2e:	2300      	movs	r3, #0
 8087e30:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8087e32:	8523      	strh	r3, [r4, #40]	; 0x28

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 8087e34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8087e36:	bd70      	pop	{r4, r5, r6, pc}

08087e38 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8087e38:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 8087e3a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8087e3c:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 8087e3e:	b91a      	cbnz	r2, 8087e48 <_ZN3UDP11parsePacketEm+0x10>
 8087e40:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8087e42:	b109      	cbz	r1, 8087e48 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 8087e44:	f7ff ffcc 	bl	8087de0 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8087e48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8087e4a:	2300      	movs	r3, #0
 8087e4c:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8087e4e:	8523      	strh	r3, [r4, #40]	; 0x28
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8087e50:	b141      	cbz	r1, 8087e64 <_ZN3UDP11parsePacketEm+0x2c>
 8087e52:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8087e54:	b132      	cbz	r2, 8087e64 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 8087e56:	6820      	ldr	r0, [r4, #0]
 8087e58:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8087e5a:	4620      	mov	r0, r4
 8087e5c:	47a8      	blx	r5
        if (result>0) {
 8087e5e:	2800      	cmp	r0, #0
            _total = result;
 8087e60:	bfc8      	it	gt
 8087e62:	8520      	strhgt	r0, [r4, #40]	; 0x28
        }
    };
    return available();
 8087e64:	6823      	ldr	r3, [r4, #0]
 8087e66:	4620      	mov	r0, r4
}
 8087e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 8087e6c:	691b      	ldr	r3, [r3, #16]
 8087e6e:	4718      	bx	r3

08087e70 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8087e70:	b510      	push	{r4, lr}
 8087e72:	4604      	mov	r4, r0
 8087e74:	f7f8 f9fc 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
 8087e78:	4620      	mov	r0, r4
 8087e7a:	bd10      	pop	{r4, pc}

08087e7c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8087e7c:	b513      	push	{r0, r1, r4, lr}
 8087e7e:	460b      	mov	r3, r1
 8087e80:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087e82:	c803      	ldmia	r0, {r0, r1}
 8087e84:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8087e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8087e8c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8087e90:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8087e94:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8087e98:	b002      	add	sp, #8
 8087e9a:	bd10      	pop	{r4, pc}

08087e9c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087e9c:	4803      	ldr	r0, [pc, #12]	; (8087eac <_GLOBAL__sub_I_RGB+0x10>)
 8087e9e:	2300      	movs	r3, #0
 8087ea0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8087ea2:	4a03      	ldr	r2, [pc, #12]	; (8087eb0 <_GLOBAL__sub_I_RGB+0x14>)
 8087ea4:	4903      	ldr	r1, [pc, #12]	; (8087eb4 <_GLOBAL__sub_I_RGB+0x18>)
 8087ea6:	f001 bcb3 	b.w	8089810 <__aeabi_atexit>
 8087eaa:	bf00      	nop
 8087eac:	20000974 	.word	0x20000974
 8087eb0:	20000144 	.word	0x20000144
 8087eb4:	08087e71 	.word	0x08087e71

08087eb8 <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 8087eb8:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 8087eba:	0909      	lsrs	r1, r1, #4
 8087ebc:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8087ec0:	f002 fc70 	bl	808a7a4 <__aeabi_i2f>
 8087ec4:	4901      	ldr	r1, [pc, #4]	; (8087ecc <_ZN6detail9_getVCellEhh+0x14>)
 8087ec6:	f002 fd75 	bl	808a9b4 <__aeabi_fdiv>
	}
 8087eca:	bd08      	pop	{r3, pc}
 8087ecc:	44480000 	.word	0x44480000

08087ed0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8087ed0:	6800      	ldr	r0, [r0, #0]
 8087ed2:	f000 bf6a 	b.w	8088daa <_ZN7TwoWire4lockEv>

08087ed6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8087ed6:	b510      	push	{r4, lr}
 8087ed8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8087eda:	6001      	str	r1, [r0, #0]
 8087edc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8087ede:	b10a      	cbz	r2, 8087ee4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8087ee0:	f7ff fff6 	bl	8087ed0 <_ZN9FuelGauge4lockEv>
    }
}
 8087ee4:	4620      	mov	r0, r4
 8087ee6:	bd10      	pop	{r4, pc}

08087ee8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8087ee8:	b538      	push	{r3, r4, r5, lr}
 8087eea:	4604      	mov	r4, r0
 8087eec:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087eee:	f001 fc69 	bl	80897c4 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8087ef2:	462a      	mov	r2, r5
 8087ef4:	4601      	mov	r1, r0
 8087ef6:	4620      	mov	r0, r4
 8087ef8:	f7ff ffed 	bl	8087ed6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8087efc:	4620      	mov	r0, r4
 8087efe:	bd38      	pop	{r3, r4, r5, pc}

08087f00 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8087f00:	6800      	ldr	r0, [r0, #0]
 8087f02:	f000 bf5b 	b.w	8088dbc <_ZN7TwoWire6unlockEv>

08087f06 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8087f06:	b510      	push	{r4, lr}
{
    if (lock_) {
 8087f08:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8087f0a:	4604      	mov	r4, r0
{
    if (lock_) {
 8087f0c:	b10b      	cbz	r3, 8087f12 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8087f0e:	f7ff fff7 	bl	8087f00 <_ZN9FuelGauge6unlockEv>
    }
}
 8087f12:	4620      	mov	r0, r4
 8087f14:	bd10      	pop	{r4, pc}

08087f16 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8087f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087f18:	4604      	mov	r4, r0
 8087f1a:	460f      	mov	r7, r1
 8087f1c:	4616      	mov	r6, r2
 8087f1e:	461d      	mov	r5, r3
 8087f20:	f7ff ffd6 	bl	8087ed0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8087f24:	6820      	ldr	r0, [r4, #0]
 8087f26:	2136      	movs	r1, #54	; 0x36
 8087f28:	f000 ff31 	bl	8088d8e <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8087f2c:	6820      	ldr	r0, [r4, #0]
 8087f2e:	4639      	mov	r1, r7
 8087f30:	6803      	ldr	r3, [r0, #0]
 8087f32:	689b      	ldr	r3, [r3, #8]
 8087f34:	4798      	blx	r3
    i2c_.endTransmission(true);
 8087f36:	2101      	movs	r1, #1
 8087f38:	6820      	ldr	r0, [r4, #0]
 8087f3a:	f000 ff2b 	bl	8088d94 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8087f3e:	2202      	movs	r2, #2
 8087f40:	2136      	movs	r1, #54	; 0x36
 8087f42:	2301      	movs	r3, #1
 8087f44:	6820      	ldr	r0, [r4, #0]
 8087f46:	f000 ff09 	bl	8088d5c <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
 8087f4a:	6820      	ldr	r0, [r4, #0]
 8087f4c:	6803      	ldr	r3, [r0, #0]
 8087f4e:	695b      	ldr	r3, [r3, #20]
 8087f50:	4798      	blx	r3
 8087f52:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8087f54:	6820      	ldr	r0, [r4, #0]
 8087f56:	6803      	ldr	r3, [r0, #0]
 8087f58:	695b      	ldr	r3, [r3, #20]
 8087f5a:	4798      	blx	r3
 8087f5c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8087f5e:	4620      	mov	r0, r4
}
 8087f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8087f64:	f7ff bfcc 	b.w	8087f00 <_ZN9FuelGauge6unlockEv>

08087f68 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 8087f68:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 8087f6a:	2200      	movs	r2, #0
	byte LSB = 0;
 8087f6c:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 8087f6e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 8087f72:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 8087f76:	2102      	movs	r1, #2
 8087f78:	f10d 0206 	add.w	r2, sp, #6
 8087f7c:	f7ff ffcb 	bl	8087f16 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 8087f80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8087f84:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8087f88:	b003      	add	sp, #12
 8087f8a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 8087f8e:	f7ff bf93 	b.w	8087eb8 <_ZN6detail9_getVCellEhh>
	...

08087f94 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8087f94:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8087f96:	2200      	movs	r2, #0
	byte LSB = 0;
 8087f98:	ab02      	add	r3, sp, #8
 8087f9a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8087f9e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8087fa2:	2104      	movs	r1, #4
 8087fa4:	f10d 0206 	add.w	r2, sp, #6
 8087fa8:	f7ff ffb5 	bl	8087f16 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8087fac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8087fb0:	f001 ffa6 	bl	8089f00 <__aeabi_i2d>
 8087fb4:	2200      	movs	r2, #0
 8087fb6:	4b08      	ldr	r3, [pc, #32]	; (8087fd8 <_ZN9FuelGauge6getSoCEv+0x44>)
 8087fb8:	f002 f808 	bl	8089fcc <__aeabi_dmul>
 8087fbc:	f002 fae8 	bl	808a590 <__aeabi_d2f>
 8087fc0:	4604      	mov	r4, r0
 8087fc2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8087fc6:	f002 fbed 	bl	808a7a4 <__aeabi_i2f>
 8087fca:	4601      	mov	r1, r0
 8087fcc:	4620      	mov	r0, r4
 8087fce:	f002 fb35 	bl	808a63c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8087fd2:	b002      	add	sp, #8
 8087fd4:	bd10      	pop	{r4, pc}
 8087fd6:	bf00      	nop
 8087fd8:	3f700000 	.word	0x3f700000

08087fdc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8087fdc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8087fde:	4b18      	ldr	r3, [pc, #96]	; (8088040 <serialEventRun+0x64>)
 8087fe0:	b133      	cbz	r3, 8087ff0 <serialEventRun+0x14>
 8087fe2:	f000 fc67 	bl	80888b4 <_Z16_fetch_usbserialv>
 8087fe6:	6803      	ldr	r3, [r0, #0]
 8087fe8:	691b      	ldr	r3, [r3, #16]
 8087fea:	4798      	blx	r3
 8087fec:	2800      	cmp	r0, #0
 8087fee:	dc1e      	bgt.n	808802e <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8087ff0:	4b14      	ldr	r3, [pc, #80]	; (8088044 <serialEventRun+0x68>)
 8087ff2:	b133      	cbz	r3, 8088002 <serialEventRun+0x26>
 8087ff4:	f000 fe18 	bl	8088c28 <_Z22__fetch_global_Serial1v>
 8087ff8:	6803      	ldr	r3, [r0, #0]
 8087ffa:	691b      	ldr	r3, [r3, #16]
 8087ffc:	4798      	blx	r3
 8087ffe:	2800      	cmp	r0, #0
 8088000:	dc18      	bgt.n	8088034 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8088002:	4b11      	ldr	r3, [pc, #68]	; (8088048 <serialEventRun+0x6c>)
 8088004:	b10b      	cbz	r3, 808800a <serialEventRun+0x2e>
 8088006:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808800a:	4b10      	ldr	r3, [pc, #64]	; (808804c <serialEventRun+0x70>)
 808800c:	b10b      	cbz	r3, 8088012 <serialEventRun+0x36>
 808800e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8088012:	4b0f      	ldr	r3, [pc, #60]	; (8088050 <serialEventRun+0x74>)
 8088014:	b10b      	cbz	r3, 808801a <serialEventRun+0x3e>
 8088016:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808801a:	4b0e      	ldr	r3, [pc, #56]	; (8088054 <serialEventRun+0x78>)
 808801c:	b17b      	cbz	r3, 808803e <serialEventRun+0x62>
 808801e:	f000 fc85 	bl	808892c <_Z17_fetch_usbserial1v>
 8088022:	6803      	ldr	r3, [r0, #0]
 8088024:	691b      	ldr	r3, [r3, #16]
 8088026:	4798      	blx	r3
 8088028:	2800      	cmp	r0, #0
 808802a:	dc06      	bgt.n	808803a <serialEventRun+0x5e>
 808802c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808802e:	f3af 8000 	nop.w
 8088032:	e7dd      	b.n	8087ff0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8088034:	f3af 8000 	nop.w
 8088038:	e7e3      	b.n	8088002 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808803a:	f3af 8000 	nop.w
 808803e:	bd08      	pop	{r3, pc}
	...

08088058 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8088058:	b508      	push	{r3, lr}
	serialEventRun();
 808805a:	f7ff ffbf 	bl	8087fdc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808805e:	f7fd fa4b 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8088062:	4b01      	ldr	r3, [pc, #4]	; (8088068 <_post_loop+0x10>)
 8088064:	6018      	str	r0, [r3, #0]
 8088066:	bd08      	pop	{r3, pc}
 8088068:	20000edc 	.word	0x20000edc

0808806c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808806c:	4802      	ldr	r0, [pc, #8]	; (8088078 <_Z33system_initialize_user_backup_ramv+0xc>)
 808806e:	4a03      	ldr	r2, [pc, #12]	; (808807c <_Z33system_initialize_user_backup_ramv+0x10>)
 8088070:	4903      	ldr	r1, [pc, #12]	; (8088080 <_Z33system_initialize_user_backup_ramv+0x14>)
 8088072:	1a12      	subs	r2, r2, r0
 8088074:	f003 b90d 	b.w	808b292 <memcpy>
 8088078:	40024000 	.word	0x40024000
 808807c:	40024004 	.word	0x40024004
 8088080:	0808f838 	.word	0x0808f838

08088084 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8088084:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088086:	2300      	movs	r3, #0
 8088088:	9300      	str	r3, [sp, #0]
 808808a:	461a      	mov	r2, r3
 808808c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088090:	f7fd fc4c 	bl	808592c <system_ctrl_set_result>
}
 8088094:	b003      	add	sp, #12
 8088096:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808809c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808809c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808809e:	8843      	ldrh	r3, [r0, #2]
 80880a0:	2b0a      	cmp	r3, #10
 80880a2:	d008      	beq.n	80880b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80880a4:	2b50      	cmp	r3, #80	; 0x50
 80880a6:	d109      	bne.n	80880bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80880a8:	4b09      	ldr	r3, [pc, #36]	; (80880d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80880aa:	681b      	ldr	r3, [r3, #0]
 80880ac:	b13b      	cbz	r3, 80880be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80880ae:	b003      	add	sp, #12
 80880b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80880b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80880b6:	f7ff ffe5 	bl	8088084 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80880ba:	e006      	b.n	80880ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80880bc:	2300      	movs	r3, #0
 80880be:	9300      	str	r3, [sp, #0]
 80880c0:	461a      	mov	r2, r3
 80880c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80880c6:	f7fd fc31 	bl	808592c <system_ctrl_set_result>
        break;
    }
}
 80880ca:	b003      	add	sp, #12
 80880cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80880d0:	20000984 	.word	0x20000984

080880d4 <module_user_init_hook>:

void module_user_init_hook()
{
 80880d4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80880d6:	4c10      	ldr	r4, [pc, #64]	; (8088118 <module_user_init_hook+0x44>)
 80880d8:	4d10      	ldr	r5, [pc, #64]	; (808811c <module_user_init_hook+0x48>)
 80880da:	6823      	ldr	r3, [r4, #0]
 80880dc:	42ab      	cmp	r3, r5
 80880de:	4b10      	ldr	r3, [pc, #64]	; (8088120 <module_user_init_hook+0x4c>)
 80880e0:	bf0c      	ite	eq
 80880e2:	2201      	moveq	r2, #1
 80880e4:	2200      	movne	r2, #0
 80880e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80880e8:	d002      	beq.n	80880f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80880ea:	f7ff ffbf 	bl	808806c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80880ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80880f0:	f7fd f9e2 	bl	80854b8 <HAL_RNG_GetRandomNumber>
 80880f4:	4604      	mov	r4, r0
    srand(seed);
 80880f6:	f003 f8fb 	bl	808b2f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80880fa:	4b0a      	ldr	r3, [pc, #40]	; (8088124 <module_user_init_hook+0x50>)
 80880fc:	b113      	cbz	r3, 8088104 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80880fe:	4620      	mov	r0, r4
 8088100:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8088104:	2100      	movs	r1, #0
 8088106:	4807      	ldr	r0, [pc, #28]	; (8088124 <module_user_init_hook+0x50>)
 8088108:	f7fd fca4 	bl	8085a54 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808810c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8088110:	2100      	movs	r1, #0
 8088112:	4805      	ldr	r0, [pc, #20]	; (8088128 <module_user_init_hook+0x54>)
 8088114:	f7fd bc00 	b.w	8085918 <system_ctrl_set_app_request_handler>
 8088118:	40024000 	.word	0x40024000
 808811c:	9a271c1e 	.word	0x9a271c1e
 8088120:	20000988 	.word	0x20000988
 8088124:	00000000 	.word	0x00000000
 8088128:	0808809d 	.word	0x0808809d

0808812c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808812c:	4770      	bx	lr

0808812e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808812e:	2000      	movs	r0, #0
 8088130:	4770      	bx	lr

08088132 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088132:	b510      	push	{r4, lr}
 8088134:	4604      	mov	r4, r0
 8088136:	2110      	movs	r1, #16
 8088138:	f001 fb78 	bl	808982c <_ZdlPvj>
 808813c:	4620      	mov	r0, r4
 808813e:	bd10      	pop	{r4, pc}

08088140 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8088140:	b508      	push	{r3, lr}
      { delete this; }
 8088142:	b108      	cbz	r0, 8088148 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8088144:	f7ff fff5 	bl	8088132 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8088148:	bd08      	pop	{r3, pc}

0808814a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808814a:	2200      	movs	r2, #0
 808814c:	6002      	str	r2, [r0, #0]
 808814e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8088152:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8088154:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088156:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808815a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808815c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808815e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8088160:	680c      	ldr	r4, [r1, #0]
 8088162:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8088164:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8088166:	bd10      	pop	{r4, pc}

08088168 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8088168:	b510      	push	{r4, lr}
 808816a:	4604      	mov	r4, r0
    free((void*)msg_);
 808816c:	6800      	ldr	r0, [r0, #0]
 808816e:	f7fd fc81 	bl	8085a74 <free>
}
 8088172:	4620      	mov	r0, r4
 8088174:	bd10      	pop	{r4, pc}

08088176 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8088176:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8088178:	68c4      	ldr	r4, [r0, #12]
 808817a:	b1f4      	cbz	r4, 80881ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 808817c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808817e:	2b02      	cmp	r3, #2
 8088180:	d103      	bne.n	808818a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8088182:	f104 000c 	add.w	r0, r4, #12
 8088186:	f7ff ffef 	bl	8088168 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808818a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808818c:	b135      	cbz	r5, 808819c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808818e:	4628      	mov	r0, r5
 8088190:	f7f8 f86e 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
 8088194:	2110      	movs	r1, #16
 8088196:	4628      	mov	r0, r5
 8088198:	f001 fb48 	bl	808982c <_ZdlPvj>
 808819c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808819e:	b135      	cbz	r5, 80881ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80881a0:	4628      	mov	r0, r5
 80881a2:	f7f8 f865 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
 80881a6:	2110      	movs	r1, #16
 80881a8:	4628      	mov	r0, r5
 80881aa:	f001 fb3f 	bl	808982c <_ZdlPvj>
 80881ae:	4620      	mov	r0, r4
 80881b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80881b4:	2114      	movs	r1, #20
 80881b6:	f001 bb39 	b.w	808982c <_ZdlPvj>
 80881ba:	bd38      	pop	{r3, r4, r5, pc}

080881bc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80881bc:	b510      	push	{r4, lr}
 80881be:	b088      	sub	sp, #32
 80881c0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80881c2:	4668      	mov	r0, sp
 80881c4:	f7fe fa0d 	bl	80865e2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80881c8:	4669      	mov	r1, sp
 80881ca:	a804      	add	r0, sp, #16
 80881cc:	f7fe fa48 	bl	8086660 <_ZN6StringC1ERKS_>
 80881d0:	a804      	add	r0, sp, #16
 80881d2:	47a0      	blx	r4
 80881d4:	4604      	mov	r4, r0
 80881d6:	a804      	add	r0, sp, #16
 80881d8:	f7fe f9bc 	bl	8086554 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80881dc:	4668      	mov	r0, sp
 80881de:	f7fe f9b9 	bl	8086554 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80881e2:	4620      	mov	r0, r4
 80881e4:	b008      	add	sp, #32
 80881e6:	bd10      	pop	{r4, pc}

080881e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80881e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80881ea:	4607      	mov	r7, r0
 80881ec:	460e      	mov	r6, r1
 80881ee:	4615      	mov	r5, r2
 80881f0:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80881f2:	2410      	movs	r4, #16
 80881f4:	4622      	mov	r2, r4
 80881f6:	2100      	movs	r1, #0
 80881f8:	4668      	mov	r0, sp
 80881fa:	f003 f870 	bl	808b2de <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80881fe:	2200      	movs	r2, #0
 8088200:	4669      	mov	r1, sp
 8088202:	4610      	mov	r0, r2
         size = sizeof(*this);
 8088204:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8088208:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808820a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808820c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808820e:	f7fd fbf1 	bl	80859f4 <spark_function>
}
 8088212:	b005      	add	sp, #20
 8088214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088216 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8088216:	b513      	push	{r0, r1, r4, lr}
 8088218:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808821a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808821e:	2300      	movs	r3, #0
 8088220:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8088222:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8088224:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8088226:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088228:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808822a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808822c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808822e:	f7f8 fc77 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088232:	4620      	mov	r0, r4
 8088234:	b002      	add	sp, #8
 8088236:	bd10      	pop	{r4, pc}

08088238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8088238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808823a:	460c      	mov	r4, r1
 808823c:	4606      	mov	r6, r0
 808823e:	460f      	mov	r7, r1
 8088240:	f854 3b04 	ldr.w	r3, [r4], #4
 8088244:	ad02      	add	r5, sp, #8
 8088246:	f845 3d08 	str.w	r3, [r5, #-8]!
 808824a:	4621      	mov	r1, r4
 808824c:	a801      	add	r0, sp, #4
 808824e:	f7fe fc75 	bl	8086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8088252:	4629      	mov	r1, r5
 8088254:	4630      	mov	r0, r6
 8088256:	f7ff ffde 	bl	8088216 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808825a:	a801      	add	r0, sp, #4
 808825c:	f7f8 fc60 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088260:	4620      	mov	r0, r4
 8088262:	f7f8 fc5d 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8088266:	4638      	mov	r0, r7
 8088268:	2108      	movs	r1, #8
 808826a:	f001 fadf 	bl	808982c <_ZdlPvj>
        return p;
    }
 808826e:	4630      	mov	r0, r6
 8088270:	b003      	add	sp, #12
 8088272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8088274:	b538      	push	{r3, r4, r5, lr}
 8088276:	2300      	movs	r3, #0
 8088278:	4604      	mov	r4, r0
 808827a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808827c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808827e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088280:	f7f7 ff0d 	bl	808009e <_Znwj>
 8088284:	b128      	cbz	r0, 8088292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8088286:	2301      	movs	r3, #1
 8088288:	6043      	str	r3, [r0, #4]
 808828a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808828c:	4b02      	ldr	r3, [pc, #8]	; (8088298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808828e:	60c5      	str	r5, [r0, #12]
 8088290:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088292:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8088294:	4620      	mov	r0, r4
 8088296:	bd38      	pop	{r3, r4, r5, pc}
 8088298:	0808f010 	.word	0x0808f010

0808829c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808829c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808829e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80882a0:	b90a      	cbnz	r2, 80882a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80882a2:	f001 fb8f 	bl	80899c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80882a6:	68c3      	ldr	r3, [r0, #12]
    }
 80882a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80882ac:	4718      	bx	r3

080882ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80882ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80882b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80882b2:	f100 0110 	add.w	r1, r0, #16
 80882b6:	f7ff fff1 	bl	808829c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80882ba:	bd08      	pop	{r3, pc}

080882bc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80882bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80882be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80882c0:	b90a      	cbnz	r2, 80882c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80882c2:	f001 fb7f 	bl	80899c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80882c6:	68c3      	ldr	r3, [r0, #12]
    }
 80882c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80882cc:	4718      	bx	r3

080882ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80882ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80882d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80882d2:	f100 0110 	add.w	r1, r0, #16
 80882d6:	f7ff fff1 	bl	80882bc <_ZNKSt8functionIFvRKbEEclES1_>
 80882da:	bd08      	pop	{r3, pc}

080882dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80882dc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80882de:	2300      	movs	r3, #0
 80882e0:	6083      	str	r3, [r0, #8]
 80882e2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80882e4:	4604      	mov	r4, r0
 80882e6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80882e8:	b12b      	cbz	r3, 80882f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80882ea:	2202      	movs	r2, #2
 80882ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80882ee:	68eb      	ldr	r3, [r5, #12]
 80882f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80882f2:	68ab      	ldr	r3, [r5, #8]
 80882f4:	60a3      	str	r3, [r4, #8]
	}
    }
 80882f6:	4620      	mov	r0, r4
 80882f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080882fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80882fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80882fe:	b089      	sub	sp, #36	; 0x24
 8088300:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8088302:	4668      	mov	r0, sp
 8088304:	f7ff ff21 	bl	808814a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8088308:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808830c:	2300      	movs	r3, #0
 808830e:	f88d 3008 	strb.w	r3, [sp, #8]
 8088312:	e8d4 3f4f 	ldrexb	r3, [r4]
 8088316:	2b00      	cmp	r3, #0
 8088318:	d103      	bne.n	8088322 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808831a:	e8c4 2f41 	strexb	r1, r2, [r4]
 808831e:	2900      	cmp	r1, #0
 8088320:	d1f7      	bne.n	8088312 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8088322:	d002      	beq.n	808832a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8088324:	f88d 3008 	strb.w	r3, [sp, #8]
 8088328:	e063      	b.n	80883f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808832a:	f114 050c 	adds.w	r5, r4, #12
 808832e:	d003      	beq.n	8088338 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8088330:	4669      	mov	r1, sp
 8088332:	4628      	mov	r0, r5
 8088334:	f7ff ff09 	bl	808814a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8088338:	f3bf 8f5f 	dmb	sy
 808833c:	2301      	movs	r3, #1
 808833e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8088340:	f3bf 8f5f 	dmb	sy
 8088344:	f104 0308 	add.w	r3, r4, #8
 8088348:	2000      	movs	r0, #0
 808834a:	e853 6f00 	ldrex	r6, [r3]
 808834e:	e843 0200 	strex	r2, r0, [r3]
 8088352:	2a00      	cmp	r2, #0
 8088354:	d1f9      	bne.n	808834a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8088356:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808835a:	2e00      	cmp	r6, #0
 808835c:	d049      	beq.n	80883f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808835e:	f7fd fac3 	bl	80858e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8088362:	b120      	cbz	r0, 808836e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8088364:	4629      	mov	r1, r5
 8088366:	4630      	mov	r0, r6
 8088368:	f7ff ff98 	bl	808829c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808836c:	e03a      	b.n	80883e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808836e:	4631      	mov	r1, r6
 8088370:	a802      	add	r0, sp, #8
 8088372:	f7ff ffb3 	bl	80882dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8088376:	68e0      	ldr	r0, [r4, #12]
 8088378:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808837c:	b108      	cbz	r0, 8088382 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808837e:	f003 f809 	bl	808b394 <strdup>
 8088382:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088384:	2010      	movs	r0, #16
 8088386:	f8ad 501c 	strh.w	r5, [sp, #28]
 808838a:	f7f7 fe88 	bl	808009e <_Znwj>
 808838e:	4605      	mov	r5, r0
 8088390:	b1e8      	cbz	r0, 80883ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088392:	2700      	movs	r7, #0
 8088394:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088396:	2018      	movs	r0, #24
 8088398:	f7f7 fe81 	bl	808009e <_Znwj>
 808839c:	4604      	mov	r4, r0
 808839e:	b188      	cbz	r0, 80883c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80883a0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80883a2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80883a4:	a802      	add	r0, sp, #8
 80883a6:	f7ff fd69 	bl	8087e7c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80883aa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80883ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80883ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80883b0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80883b2:	9204      	str	r2, [sp, #16]
 80883b4:	68e2      	ldr	r2, [r4, #12]
 80883b6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80883b8:	60e3      	str	r3, [r4, #12]
 80883ba:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80883be:	9205      	str	r2, [sp, #20]
 80883c0:	f7ff fec3 	bl	808814a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80883c4:	4b0d      	ldr	r3, [pc, #52]	; (80883fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80883c6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80883c8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80883ca:	4b0d      	ldr	r3, [pc, #52]	; (8088400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80883cc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80883ce:	a806      	add	r0, sp, #24
 80883d0:	f7ff feca 	bl	8088168 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80883d4:	a802      	add	r0, sp, #8
 80883d6:	f7f7 ff4b 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80883da:	2200      	movs	r2, #0
 80883dc:	4629      	mov	r1, r5
 80883de:	4809      	ldr	r0, [pc, #36]	; (8088404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80883e0:	f7fd fa8a 	bl	80858f8 <application_thread_invoke>
 80883e4:	4630      	mov	r0, r6
 80883e6:	f7f7 ff43 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80883ea:	2110      	movs	r1, #16
 80883ec:	4630      	mov	r0, r6
 80883ee:	f001 fa1d 	bl	808982c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80883f2:	4668      	mov	r0, sp
 80883f4:	f7ff feb8 	bl	8088168 <_ZN8particle5ErrorD1Ev>
    }
 80883f8:	b009      	add	sp, #36	; 0x24
 80883fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80883fc:	080882af 	.word	0x080882af
 8088400:	08088525 	.word	0x08088525
 8088404:	08088c75 	.word	0x08088c75

08088408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8088408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808840c:	b08b      	sub	sp, #44	; 0x2c
 808840e:	4606      	mov	r6, r0
 8088410:	460f      	mov	r7, r1
 8088412:	4690      	mov	r8, r2
 8088414:	4699      	mov	r9, r3
 8088416:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808841a:	f7fd fafb 	bl	8085a14 <spark_cloud_flag_connected>
 808841e:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8088420:	4683      	mov	fp, r0
 8088422:	bb30      	cbnz	r0, 8088472 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8088424:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8088428:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808842a:	a905      	add	r1, sp, #20
 808842c:	4628      	mov	r0, r5
 808842e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8088432:	f7ff fe8a 	bl	808814a <_ZN8particle5ErrorC1EOS0_>
 8088436:	2014      	movs	r0, #20
 8088438:	f7f7 fe31 	bl	808009e <_Znwj>
 808843c:	4604      	mov	r4, r0
 808843e:	b158      	cbz	r0, 8088458 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8088440:	2302      	movs	r3, #2
 8088442:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8088444:	2301      	movs	r3, #1
 8088446:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8088448:	f8c0 b004 	str.w	fp, [r0, #4]
 808844c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8088450:	4629      	mov	r1, r5
 8088452:	300c      	adds	r0, #12
 8088454:	f7ff fe79 	bl	808814a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8088458:	4630      	mov	r0, r6
 808845a:	4621      	mov	r1, r4
 808845c:	f840 4b04 	str.w	r4, [r0], #4
 8088460:	f7ff ff08 	bl	8088274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8088464:	4628      	mov	r0, r5
 8088466:	f7ff fe7f 	bl	8088168 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808846a:	a805      	add	r0, sp, #20
 808846c:	f7ff fe7c 	bl	8088168 <_ZN8particle5ErrorD1Ev>
 8088470:	e052      	b.n	8088518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8088472:	2400      	movs	r4, #0
 8088474:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8088476:	2014      	movs	r0, #20
 8088478:	606c      	str	r4, [r5, #4]
 808847a:	60ac      	str	r4, [r5, #8]
 808847c:	9307      	str	r3, [sp, #28]
 808847e:	f7f7 fe0e 	bl	808009e <_Znwj>
 8088482:	4601      	mov	r1, r0
 8088484:	b118      	cbz	r0, 808848e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8088486:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8088488:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808848a:	6044      	str	r4, [r0, #4]
 808848c:	6084      	str	r4, [r0, #8]
 808848e:	a804      	add	r0, sp, #16
 8088490:	9103      	str	r1, [sp, #12]
 8088492:	f7ff feef 	bl	8088274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8088496:	4b22      	ldr	r3, [pc, #136]	; (8088520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8088498:	2008      	movs	r0, #8
 808849a:	9308      	str	r3, [sp, #32]
 808849c:	f7f7 fdff 	bl	808009e <_Znwj>
 80884a0:	4604      	mov	r4, r0
 80884a2:	b128      	cbz	r0, 80884b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80884a4:	9b03      	ldr	r3, [sp, #12]
 80884a6:	a904      	add	r1, sp, #16
 80884a8:	f840 3b04 	str.w	r3, [r0], #4
 80884ac:	f7fe fb46 	bl	8086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80884b0:	9500      	str	r5, [sp, #0]
 80884b2:	fa5f f38a 	uxtb.w	r3, sl
 80884b6:	464a      	mov	r2, r9
 80884b8:	4641      	mov	r1, r8
 80884ba:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80884bc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80884be:	f7fd fab9 	bl	8085a34 <spark_send_event>
 80884c2:	b920      	cbnz	r0, 80884ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80884c4:	9b03      	ldr	r3, [sp, #12]
 80884c6:	785b      	ldrb	r3, [r3, #1]
 80884c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80884cc:	b183      	cbz	r3, 80884f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80884ce:	9b03      	ldr	r3, [sp, #12]
 80884d0:	a904      	add	r1, sp, #16
 80884d2:	a806      	add	r0, sp, #24
 80884d4:	9305      	str	r3, [sp, #20]
 80884d6:	f7fe fb31 	bl	8086b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80884da:	a905      	add	r1, sp, #20
 80884dc:	4630      	mov	r0, r6
 80884de:	f7ff fe9a 	bl	8088216 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80884e2:	a806      	add	r0, sp, #24
 80884e4:	f7f8 fb1c 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80884e8:	a804      	add	r0, sp, #16
 80884ea:	f7f8 fb19 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80884ee:	e013      	b.n	8088518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80884f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80884f4:	a905      	add	r1, sp, #20
 80884f6:	a803      	add	r0, sp, #12
 80884f8:	9205      	str	r2, [sp, #20]
 80884fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80884fe:	f7ff fefd 	bl	80882fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8088502:	a805      	add	r0, sp, #20
 8088504:	f7ff fe30 	bl	8088168 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8088508:	a805      	add	r0, sp, #20
 808850a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808850c:	f7ff fe94 	bl	8088238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8088510:	a806      	add	r0, sp, #24
 8088512:	f7f8 fb05 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088516:	e7da      	b.n	80884ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8088518:	4630      	mov	r0, r6
 808851a:	b00b      	add	sp, #44	; 0x2c
 808851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088520:	08088695 	.word	0x08088695

08088524 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8088524:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8088526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088528:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808852a:	d006      	beq.n	808853a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808852c:	2a03      	cmp	r2, #3
 808852e:	d017      	beq.n	8088560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8088530:	2a01      	cmp	r2, #1
 8088532:	d122      	bne.n	808857a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088534:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8088536:	6003      	str	r3, [r0, #0]
	      break;
 8088538:	e01f      	b.n	808857a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808853a:	2018      	movs	r0, #24
 808853c:	680e      	ldr	r6, [r1, #0]
 808853e:	f7f7 fdae 	bl	808009e <_Znwj>
 8088542:	4605      	mov	r5, r0
 8088544:	b150      	cbz	r0, 808855c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8088546:	4631      	mov	r1, r6
 8088548:	f7ff fec8 	bl	80882dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808854c:	6930      	ldr	r0, [r6, #16]
 808854e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8088552:	b108      	cbz	r0, 8088558 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8088554:	f002 ff1e 	bl	808b394 <strdup>
 8088558:	6128      	str	r0, [r5, #16]
 808855a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808855c:	6025      	str	r5, [r4, #0]
 808855e:	e00c      	b.n	808857a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8088560:	6804      	ldr	r4, [r0, #0]
 8088562:	b154      	cbz	r4, 808857a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8088564:	f104 0010 	add.w	r0, r4, #16
 8088568:	f7ff fdfe 	bl	8088168 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808856c:	4620      	mov	r0, r4
 808856e:	f7f7 fe7f 	bl	8080270 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8088572:	2118      	movs	r1, #24
 8088574:	4620      	mov	r0, r4
 8088576:	f001 f959 	bl	808982c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808857a:	2000      	movs	r0, #0
 808857c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808857e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808857e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088580:	2300      	movs	r3, #0
 8088582:	6083      	str	r3, [r0, #8]
 8088584:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088586:	4604      	mov	r4, r0
 8088588:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808858a:	b12b      	cbz	r3, 8088598 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808858c:	2202      	movs	r2, #2
 808858e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088590:	68eb      	ldr	r3, [r5, #12]
 8088592:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088594:	68ab      	ldr	r3, [r5, #8]
 8088596:	60a3      	str	r3, [r4, #8]
	}
    }
 8088598:	4620      	mov	r0, r4
 808859a:	bd38      	pop	{r3, r4, r5, pc}

0808859c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808859c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808859e:	b570      	push	{r4, r5, r6, lr}
 80885a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80885a2:	d006      	beq.n	80885b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80885a4:	2a03      	cmp	r2, #3
 80885a6:	d011      	beq.n	80885cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80885a8:	2a01      	cmp	r2, #1
 80885aa:	d118      	bne.n	80885de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80885ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80885ae:	6003      	str	r3, [r0, #0]
	      break;
 80885b0:	e015      	b.n	80885de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80885b2:	2014      	movs	r0, #20
 80885b4:	680e      	ldr	r6, [r1, #0]
 80885b6:	f7f7 fd72 	bl	808009e <_Znwj>
 80885ba:	4605      	mov	r5, r0
 80885bc:	b120      	cbz	r0, 80885c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80885be:	4631      	mov	r1, r6
 80885c0:	f7ff ffdd 	bl	808857e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80885c4:	7c33      	ldrb	r3, [r6, #16]
 80885c6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80885c8:	6025      	str	r5, [r4, #0]
 80885ca:	e008      	b.n	80885de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80885cc:	6804      	ldr	r4, [r0, #0]
 80885ce:	b134      	cbz	r4, 80885de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80885d0:	4620      	mov	r0, r4
 80885d2:	f7f7 fe4d 	bl	8080270 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80885d6:	2114      	movs	r1, #20
 80885d8:	4620      	mov	r0, r4
 80885da:	f001 f927 	bl	808982c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80885de:	2000      	movs	r0, #0
 80885e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080885e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80885e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80885e6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80885e8:	f3bf 8f5f 	dmb	sy
 80885ec:	b087      	sub	sp, #28
 80885ee:	2300      	movs	r3, #0
 80885f0:	e850 6f00 	ldrex	r6, [r0]
 80885f4:	e840 3200 	strex	r2, r3, [r0]
 80885f8:	2a00      	cmp	r2, #0
 80885fa:	d1f9      	bne.n	80885f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80885fc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8088600:	2e00      	cmp	r6, #0
 8088602:	d03f      	beq.n	8088684 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8088604:	4618      	mov	r0, r3
 8088606:	f7fd f96f 	bl	80858e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808860a:	4607      	mov	r7, r0
 808860c:	b120      	cbz	r0, 8088618 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808860e:	4621      	mov	r1, r4
 8088610:	4630      	mov	r0, r6
 8088612:	f7ff fe53 	bl	80882bc <_ZNKSt8functionIFvRKbEEclES1_>
 8088616:	e02e      	b.n	8088676 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8088618:	4631      	mov	r1, r6
 808861a:	a801      	add	r0, sp, #4
 808861c:	f7ff ffaf 	bl	808857e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088620:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088622:	2010      	movs	r0, #16
 8088624:	f88d 3014 	strb.w	r3, [sp, #20]
 8088628:	f7f7 fd39 	bl	808009e <_Znwj>
 808862c:	4605      	mov	r5, r0
 808862e:	b1d0      	cbz	r0, 8088666 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088630:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088632:	2014      	movs	r0, #20
 8088634:	f7f7 fd33 	bl	808009e <_Znwj>
 8088638:	4604      	mov	r4, r0
 808863a:	b178      	cbz	r0, 808865c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808863c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808863e:	4601      	mov	r1, r0
 8088640:	a801      	add	r0, sp, #4
 8088642:	f7ff fc1b 	bl	8087e7c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088646:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8088648:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808864a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808864c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808864e:	9203      	str	r2, [sp, #12]
 8088650:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088652:	60e3      	str	r3, [r4, #12]
 8088654:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088658:	9204      	str	r2, [sp, #16]
 808865a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808865c:	4b0a      	ldr	r3, [pc, #40]	; (8088688 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808865e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088660:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8088662:	4b0a      	ldr	r3, [pc, #40]	; (808868c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8088664:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088666:	a801      	add	r0, sp, #4
 8088668:	f7f7 fe02 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808866c:	2200      	movs	r2, #0
 808866e:	4629      	mov	r1, r5
 8088670:	4807      	ldr	r0, [pc, #28]	; (8088690 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8088672:	f7fd f941 	bl	80858f8 <application_thread_invoke>
 8088676:	4630      	mov	r0, r6
 8088678:	f7f7 fdfa 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808867c:	2110      	movs	r1, #16
 808867e:	4630      	mov	r0, r6
 8088680:	f001 f8d4 	bl	808982c <_ZdlPvj>
        }
    }
 8088684:	b007      	add	sp, #28
 8088686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088688:	080882cf 	.word	0x080882cf
 808868c:	0808859d 	.word	0x0808859d
 8088690:	08088c75 	.word	0x08088c75

08088694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8088694:	b530      	push	{r4, r5, lr}
 8088696:	4604      	mov	r4, r0
 8088698:	b085      	sub	sp, #20
 808869a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808869c:	4668      	mov	r0, sp
 808869e:	4611      	mov	r1, r2
 80886a0:	f7ff fdca 	bl	8088238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80886a4:	b17c      	cbz	r4, 80886c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80886a6:	b224      	sxth	r4, r4
 80886a8:	4628      	mov	r0, r5
 80886aa:	b10d      	cbz	r5, 80886b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80886ac:	f002 fe72 	bl	808b394 <strdup>
 80886b0:	9002      	str	r0, [sp, #8]
 80886b2:	a902      	add	r1, sp, #8
 80886b4:	4668      	mov	r0, sp
 80886b6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80886ba:	f7ff fe1f 	bl	80882fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80886be:	a802      	add	r0, sp, #8
 80886c0:	f7ff fd52 	bl	8088168 <_ZN8particle5ErrorD1Ev>
 80886c4:	e01d      	b.n	8088702 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80886c6:	f04f 0201 	mov.w	r2, #1
 80886ca:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80886cc:	f88d 4008 	strb.w	r4, [sp, #8]
 80886d0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80886d4:	42a3      	cmp	r3, r4
 80886d6:	d103      	bne.n	80886e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80886d8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80886dc:	2900      	cmp	r1, #0
 80886de:	d1f7      	bne.n	80886d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80886e0:	d002      	beq.n	80886e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80886e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80886e6:	e00c      	b.n	8088702 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80886e8:	f110 010c 	adds.w	r1, r0, #12
 80886ec:	f04f 0301 	mov.w	r3, #1
 80886f0:	bf18      	it	ne
 80886f2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80886f4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80886f8:	3004      	adds	r0, #4
 80886fa:	f800 3c03 	strb.w	r3, [r0, #-3]
 80886fe:	f7ff ff71 	bl	80885e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8088702:	a801      	add	r0, sp, #4
 8088704:	f7f8 fa0c 	bl	8080b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8088708:	b005      	add	sp, #20
 808870a:	bd30      	pop	{r4, r5, pc}

0808870c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808870c:	4770      	bx	lr

0808870e <_ZN9IPAddressD0Ev>:
 808870e:	b510      	push	{r4, lr}
 8088710:	4604      	mov	r4, r0
 8088712:	2108      	movs	r1, #8
 8088714:	f001 f88a 	bl	808982c <_ZdlPvj>
 8088718:	4620      	mov	r0, r4
 808871a:	bd10      	pop	{r4, pc}

0808871c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808871e:	460f      	mov	r7, r1
 8088720:	f100 0608 	add.w	r6, r0, #8
 8088724:	1d05      	adds	r5, r0, #4
 8088726:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8088728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808872c:	220a      	movs	r2, #10
 808872e:	4638      	mov	r0, r7
 8088730:	f7fe f835 	bl	808679e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8088734:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8088736:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8088738:	d007      	beq.n	808874a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808873a:	2c00      	cmp	r4, #0
 808873c:	d0f4      	beq.n	8088728 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808873e:	212e      	movs	r1, #46	; 0x2e
 8088740:	4638      	mov	r0, r7
 8088742:	f7fe f80f 	bl	8086764 <_ZN5Print5printEc>
 8088746:	4404      	add	r4, r0
 8088748:	e7ee      	b.n	8088728 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808874a:	4620      	mov	r0, r4
 808874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088750 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8088750:	4a02      	ldr	r2, [pc, #8]	; (808875c <_ZN9IPAddressC1Ev+0xc>)
 8088752:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8088754:	2200      	movs	r2, #0
 8088756:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8088758:	4770      	bx	lr
 808875a:	bf00      	nop
 808875c:	0808f02c 	.word	0x0808f02c

08088760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8088760:	4a02      	ldr	r2, [pc, #8]	; (808876c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8088762:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8088764:	680a      	ldr	r2, [r1, #0]
 8088766:	6042      	str	r2, [r0, #4]
}
 8088768:	4770      	bx	lr
 808876a:	bf00      	nop
 808876c:	0808f02c 	.word	0x0808f02c

08088770 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8088770:	4a01      	ldr	r2, [pc, #4]	; (8088778 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8088772:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8088774:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8088776:	4770      	bx	lr
 8088778:	0808f02c 	.word	0x0808f02c

0808877c <_ZNK9IPAddresscvbEv>:
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
    } else {
        return false;
    }
#else
    return address.ipv4!=0;
 808877c:	6840      	ldr	r0, [r0, #4]
#endif
}
 808877e:	3000      	adds	r0, #0
 8088780:	bf18      	it	ne
 8088782:	2001      	movne	r0, #1
 8088784:	4770      	bx	lr

08088786 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8088786:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8088788:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808878c:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8088790:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8088794:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8088798:	6041      	str	r1, [r0, #4]
 808879a:	bd10      	pop	{r4, pc}

0808879c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808879c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808879e:	4d04      	ldr	r5, [pc, #16]	; (80887b0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80887a0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80887a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80887a6:	9500      	str	r5, [sp, #0]
 80887a8:	f7ff ffed 	bl	8088786 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80887ac:	b003      	add	sp, #12
 80887ae:	bd30      	pop	{r4, r5, pc}
 80887b0:	0808f02c 	.word	0x0808f02c

080887b4 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80887b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80887b6:	780d      	ldrb	r5, [r1, #0]
 80887b8:	788b      	ldrb	r3, [r1, #2]
 80887ba:	784a      	ldrb	r2, [r1, #1]
 80887bc:	78c9      	ldrb	r1, [r1, #3]
 80887be:	9100      	str	r1, [sp, #0]
 80887c0:	4629      	mov	r1, r5
 80887c2:	f7ff ffe0 	bl	8088786 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80887c6:	b003      	add	sp, #12
 80887c8:	bd30      	pop	{r4, r5, pc}

080887ca <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80887ca:	7441      	strb	r1, [r0, #17]
 80887cc:	4770      	bx	lr

080887ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80887ce:	4770      	bx	lr

080887d0 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80887d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80887d2:	2100      	movs	r1, #0
 80887d4:	7c00      	ldrb	r0, [r0, #16]
 80887d6:	f7fd f827 	bl	8085828 <HAL_USB_USART_Receive_Data>
}
 80887da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80887de:	bf28      	it	cs
 80887e0:	f04f 30ff 	movcs.w	r0, #4294967295
 80887e4:	bd08      	pop	{r3, pc}

080887e6 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80887e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80887e8:	2101      	movs	r1, #1
 80887ea:	7c00      	ldrb	r0, [r0, #16]
 80887ec:	f7fd f81c 	bl	8085828 <HAL_USB_USART_Receive_Data>
}
 80887f0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80887f4:	bf28      	it	cs
 80887f6:	f04f 30ff 	movcs.w	r0, #4294967295
 80887fa:	bd08      	pop	{r3, pc}

080887fc <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80887fc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80887fe:	7c00      	ldrb	r0, [r0, #16]
 8088800:	f7fd f80a 	bl	8085818 <HAL_USB_USART_Available_Data_For_Write>
}
 8088804:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088808:	bd08      	pop	{r3, pc}

0808880a <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808880a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808880c:	7c00      	ldrb	r0, [r0, #16]
 808880e:	f7fc fffb 	bl	8085808 <HAL_USB_USART_Available_Data>
}
 8088812:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088816:	bd08      	pop	{r3, pc}

08088818 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8088818:	7c00      	ldrb	r0, [r0, #16]
 808881a:	f7fd b815 	b.w	8085848 <HAL_USB_USART_Flush_Data>

0808881e <_ZN9USBSerialD0Ev>:
 808881e:	b510      	push	{r4, lr}
 8088820:	4604      	mov	r4, r0
 8088822:	2114      	movs	r1, #20
 8088824:	f001 f802 	bl	808982c <_ZdlPvj>
 8088828:	4620      	mov	r0, r4
 808882a:	bd10      	pop	{r4, pc}

0808882c <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808882c:	b538      	push	{r3, r4, r5, lr}
 808882e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8088830:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8088832:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8088834:	f7fc fff0 	bl	8085818 <HAL_USB_USART_Available_Data_For_Write>
 8088838:	2800      	cmp	r0, #0
 808883a:	dc01      	bgt.n	8088840 <_ZN9USBSerial5writeEh+0x14>
 808883c:	7c60      	ldrb	r0, [r4, #17]
 808883e:	b128      	cbz	r0, 808884c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8088840:	4629      	mov	r1, r5
 8088842:	7c20      	ldrb	r0, [r4, #16]
 8088844:	f7fc fff8 	bl	8085838 <HAL_USB_USART_Send_Data>
 8088848:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808884c:	bd38      	pop	{r3, r4, r5, pc}
	...

08088850 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8088850:	b510      	push	{r4, lr}
 8088852:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8088854:	2300      	movs	r3, #0
 8088856:	6063      	str	r3, [r4, #4]
 8088858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808885c:	60a3      	str	r3, [r4, #8]
 808885e:	4b05      	ldr	r3, [pc, #20]	; (8088874 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8088860:	4608      	mov	r0, r1
 8088862:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8088864:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8088866:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8088868:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808886a:	4611      	mov	r1, r2
 808886c:	f7fc ffb4 	bl	80857d8 <HAL_USB_USART_Init>
}
 8088870:	4620      	mov	r0, r4
 8088872:	bd10      	pop	{r4, pc}
 8088874:	0808f040 	.word	0x0808f040

08088878 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8088878:	2200      	movs	r2, #0
 808887a:	7c00      	ldrb	r0, [r0, #16]
 808887c:	f7fc bfb4 	b.w	80857e8 <HAL_USB_USART_Begin>

08088880 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 8088880:	7c00      	ldrb	r0, [r0, #16]
 8088882:	f7fc bfb9 	b.w	80857f8 <HAL_USB_USART_End>
	...

08088888 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8088888:	b510      	push	{r4, lr}
 808888a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808888c:	2214      	movs	r2, #20
 808888e:	2100      	movs	r1, #0
 8088890:	f002 fd25 	bl	808b2de <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8088894:	4b05      	ldr	r3, [pc, #20]	; (80888ac <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8088896:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8088898:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808889a:	4b05      	ldr	r3, [pc, #20]	; (80888b0 <_Z19acquireSerialBufferv+0x28>)
 808889c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808889e:	f240 1301 	movw	r3, #257	; 0x101
 80888a2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80888a4:	2381      	movs	r3, #129	; 0x81
 80888a6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80888a8:	bd10      	pop	{r4, pc}
 80888aa:	bf00      	nop
 80888ac:	20000a11 	.word	0x20000a11
 80888b0:	20000990 	.word	0x20000990

080888b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80888b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80888b6:	4d0e      	ldr	r5, [pc, #56]	; (80888f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80888b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80888ba:	a801      	add	r0, sp, #4
 80888bc:	f7ff ffe4 	bl	8088888 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80888c0:	6829      	ldr	r1, [r5, #0]
 80888c2:	f011 0401 	ands.w	r4, r1, #1
 80888c6:	d110      	bne.n	80888ea <_Z16_fetch_usbserialv+0x36>
 80888c8:	4628      	mov	r0, r5
 80888ca:	f7f7 fbfb 	bl	80800c4 <__cxa_guard_acquire>
 80888ce:	b160      	cbz	r0, 80888ea <_Z16_fetch_usbserialv+0x36>
 80888d0:	aa01      	add	r2, sp, #4
 80888d2:	4621      	mov	r1, r4
 80888d4:	4807      	ldr	r0, [pc, #28]	; (80888f4 <_Z16_fetch_usbserialv+0x40>)
 80888d6:	f7ff ffbb 	bl	8088850 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80888da:	4628      	mov	r0, r5
 80888dc:	f7f7 fbf7 	bl	80800ce <__cxa_guard_release>
 80888e0:	4a05      	ldr	r2, [pc, #20]	; (80888f8 <_Z16_fetch_usbserialv+0x44>)
 80888e2:	4906      	ldr	r1, [pc, #24]	; (80888fc <_Z16_fetch_usbserialv+0x48>)
 80888e4:	4803      	ldr	r0, [pc, #12]	; (80888f4 <_Z16_fetch_usbserialv+0x40>)
 80888e6:	f000 ff93 	bl	8089810 <__aeabi_atexit>
	return _usbserial;
}
 80888ea:	4802      	ldr	r0, [pc, #8]	; (80888f4 <_Z16_fetch_usbserialv+0x40>)
 80888ec:	b007      	add	sp, #28
 80888ee:	bd30      	pop	{r4, r5, pc}
 80888f0:	2000098c 	.word	0x2000098c
 80888f4:	20000b14 	.word	0x20000b14
 80888f8:	20000144 	.word	0x20000144
 80888fc:	080887cf 	.word	0x080887cf

08088900 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8088900:	b510      	push	{r4, lr}
 8088902:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8088904:	2214      	movs	r2, #20
 8088906:	2100      	movs	r1, #0
 8088908:	f002 fce9 	bl	808b2de <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808890c:	4b05      	ldr	r3, [pc, #20]	; (8088924 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808890e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8088910:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8088912:	4b05      	ldr	r3, [pc, #20]	; (8088928 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8088914:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8088916:	f240 1301 	movw	r3, #257	; 0x101
 808891a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808891c:	2381      	movs	r3, #129	; 0x81
 808891e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8088920:	bd10      	pop	{r4, pc}
 8088922:	bf00      	nop
 8088924:	20000bc4 	.word	0x20000bc4
 8088928:	20000b2c 	.word	0x20000b2c

0808892c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808892c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808892e:	4c0e      	ldr	r4, [pc, #56]	; (8088968 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8088930:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8088932:	a801      	add	r0, sp, #4
 8088934:	f7ff ffe4 	bl	8088900 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8088938:	6823      	ldr	r3, [r4, #0]
 808893a:	07db      	lsls	r3, r3, #31
 808893c:	d410      	bmi.n	8088960 <_Z17_fetch_usbserial1v+0x34>
 808893e:	4620      	mov	r0, r4
 8088940:	f7f7 fbc0 	bl	80800c4 <__cxa_guard_acquire>
 8088944:	b160      	cbz	r0, 8088960 <_Z17_fetch_usbserial1v+0x34>
 8088946:	aa01      	add	r2, sp, #4
 8088948:	2101      	movs	r1, #1
 808894a:	4808      	ldr	r0, [pc, #32]	; (808896c <_Z17_fetch_usbserial1v+0x40>)
 808894c:	f7ff ff80 	bl	8088850 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8088950:	4620      	mov	r0, r4
 8088952:	f7f7 fbbc 	bl	80800ce <__cxa_guard_release>
 8088956:	4a06      	ldr	r2, [pc, #24]	; (8088970 <_Z17_fetch_usbserial1v+0x44>)
 8088958:	4906      	ldr	r1, [pc, #24]	; (8088974 <_Z17_fetch_usbserial1v+0x48>)
 808895a:	4804      	ldr	r0, [pc, #16]	; (808896c <_Z17_fetch_usbserial1v+0x40>)
 808895c:	f000 ff58 	bl	8089810 <__aeabi_atexit>
  return _usbserial1;
}
 8088960:	4802      	ldr	r0, [pc, #8]	; (808896c <_Z17_fetch_usbserial1v+0x40>)
 8088962:	b006      	add	sp, #24
 8088964:	bd10      	pop	{r4, pc}
 8088966:	bf00      	nop
 8088968:	20000b28 	.word	0x20000b28
 808896c:	20000bb0 	.word	0x20000bb0
 8088970:	20000144 	.word	0x20000144
 8088974:	080887cf 	.word	0x080887cf

08088978 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8088978:	4700      	bx	r0

0808897a <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808897a:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 808897c:	b510      	push	{r4, lr}
 808897e:	b90a      	cbnz	r2, 8088984 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 8088980:	f001 f820 	bl	80899c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088984:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8088986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808898a:	4718      	bx	r3

0808898c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808898e:	461c      	mov	r4, r3
 8088990:	b085      	sub	sp, #20
 8088992:	460e      	mov	r6, r1
 8088994:	4617      	mov	r7, r2
 8088996:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 8088998:	f7fc fd36 	bl	8085408 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 808899c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 808899e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80889a0:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80889a4:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80889a6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80889aa:	bfb4      	ite	lt
 80889ac:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80889ae:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80889b2:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80889b4:	bfa4      	itt	ge
 80889b6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80889ba:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80889bc:	9300      	str	r3, [sp, #0]
 80889be:	4906      	ldr	r1, [pc, #24]	; (80889d8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 80889c0:	463b      	mov	r3, r7
 80889c2:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80889c4:	bfa8      	it	ge
 80889c6:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80889ca:	f7fc fd15 	bl	80853f8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80889ce:	fab0 f080 	clz	r0, r0
 80889d2:	0940      	lsrs	r0, r0, #5
 80889d4:	b005      	add	sp, #20
 80889d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80889d8:	08088979 	.word	0x08088979

080889dc <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 80889dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80889de:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80889e0:	f7fc fd12 	bl	8085408 <HAL_Interrupts_Detach>
 80889e4:	4607      	mov	r7, r0
 80889e6:	b968      	cbnz	r0, 8088a04 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 80889e8:	4d08      	ldr	r5, [pc, #32]	; (8088a0c <_Z15detachInterruptt+0x30>)
 80889ea:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80889ee:	b15c      	cbz	r4, 8088a08 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80889f0:	4620      	mov	r0, r4
 80889f2:	f7f7 fc3d 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80889f6:	2110      	movs	r1, #16
 80889f8:	4620      	mov	r0, r4
 80889fa:	f000 ff17 	bl	808982c <_ZdlPvj>
        handlers[pin] = nullptr;
 80889fe:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 8088a02:	e001      	b.n	8088a08 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 8088a04:	2000      	movs	r0, #0
 8088a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 8088a08:	2001      	movs	r0, #1
}
 8088a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088a0c:	20000cc8 	.word	0x20000cc8

08088a10 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088a10:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088a12:	2300      	movs	r3, #0
 8088a14:	6083      	str	r3, [r0, #8]
 8088a16:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088a18:	4604      	mov	r4, r0
 8088a1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8088a1c:	b12b      	cbz	r3, 8088a2a <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8088a1e:	2202      	movs	r2, #2
 8088a20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088a22:	68eb      	ldr	r3, [r5, #12]
 8088a24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088a26:	68ab      	ldr	r3, [r5, #8]
 8088a28:	60a3      	str	r3, [r4, #8]
	}
    }
 8088a2a:	4620      	mov	r0, r4
 8088a2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08088a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8088a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8088a32:	4b12      	ldr	r3, [pc, #72]	; (8088a7c <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8088a34:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8088a36:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8088a38:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8088a3a:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8088a3c:	f7f7 fb2f 	bl	808009e <_Znwj>
 8088a40:	4605      	mov	r5, r0
 8088a42:	b110      	cbz	r0, 8088a4a <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 8088a44:	4631      	mov	r1, r6
 8088a46:	f7ff ffe3 	bl	8088a10 <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 8088a4a:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8088a4c:	4620      	mov	r0, r4
 8088a4e:	aa02      	add	r2, sp, #8
 8088a50:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8088a52:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 8088a54:	9302      	str	r3, [sp, #8]
 8088a56:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8088a58:	f7fc fce6 	bl	8085428 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 8088a5c:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8088a5e:	1c05      	adds	r5, r0, #0
 8088a60:	bf18      	it	ne
 8088a62:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 8088a64:	b134      	cbz	r4, 8088a74 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088a66:	4620      	mov	r0, r4
 8088a68:	f7f7 fc02 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
 8088a6c:	2110      	movs	r1, #16
 8088a6e:	4620      	mov	r0, r4
 8088a70:	f000 fedc 	bl	808982c <_ZdlPvj>
    return ok;
}
 8088a74:	4628      	mov	r0, r5
 8088a76:	b004      	add	sp, #16
 8088a78:	bd70      	pop	{r4, r5, r6, pc}
 8088a7a:	bf00      	nop
 8088a7c:	0808897b 	.word	0x0808897b

08088a80 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8088a80:	2200      	movs	r2, #0
 8088a82:	4611      	mov	r1, r2
 8088a84:	6840      	ldr	r0, [r0, #4]
 8088a86:	f7fc bf7d 	b.w	8085984 <network_ready>

08088a8a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8088a8a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8088a8e:	2600      	movs	r6, #0
 8088a90:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8088a92:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088a94:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8088a96:	4688      	mov	r8, r1
 8088a98:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8088a9a:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088a9e:	f003 f9a9 	bl	808bdf4 <strlen>
 8088aa2:	9600      	str	r6, [sp, #0]
 8088aa4:	b281      	uxth	r1, r0
 8088aa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8088aaa:	4622      	mov	r2, r4
 8088aac:	4638      	mov	r0, r7
 8088aae:	f7fc fe8b 	bl	80857c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8088ab2:	b120      	cbz	r0, 8088abe <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8088ab4:	4631      	mov	r1, r6
 8088ab6:	4628      	mov	r0, r5
 8088ab8:	f7ff fe5a 	bl	8088770 <_ZN9IPAddressC1Em>
 8088abc:	e003      	b.n	8088ac6 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8088abe:	4621      	mov	r1, r4
 8088ac0:	4628      	mov	r0, r5
 8088ac2:	f7ff fe4d 	bl	8088760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8088ac6:	4628      	mov	r0, r5
 8088ac8:	b004      	add	sp, #16
 8088aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088ace <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8088ace:	2200      	movs	r2, #0
 8088ad0:	4611      	mov	r1, r2
 8088ad2:	6840      	ldr	r0, [r0, #4]
 8088ad4:	f7fc bf76 	b.w	80859c4 <network_listening>

08088ad8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8088ad8:	2200      	movs	r2, #0
 8088ada:	4611      	mov	r1, r2
 8088adc:	6840      	ldr	r0, [r0, #4]
 8088ade:	f7fc bf81 	b.w	80859e4 <network_get_listen_timeout>

08088ae2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8088ae2:	2200      	movs	r2, #0
 8088ae4:	6840      	ldr	r0, [r0, #4]
 8088ae6:	f7fc bf75 	b.w	80859d4 <network_set_listen_timeout>

08088aea <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8088aea:	2200      	movs	r2, #0
 8088aec:	f081 0101 	eor.w	r1, r1, #1
 8088af0:	6840      	ldr	r0, [r0, #4]
 8088af2:	f7fc bf5f 	b.w	80859b4 <network_listen>

08088af6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8088af6:	2300      	movs	r3, #0
 8088af8:	461a      	mov	r2, r3
 8088afa:	4619      	mov	r1, r3
 8088afc:	6840      	ldr	r0, [r0, #4]
 8088afe:	f7fc bf51 	b.w	80859a4 <network_off>

08088b02 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8088b02:	2300      	movs	r3, #0
 8088b04:	461a      	mov	r2, r3
 8088b06:	4619      	mov	r1, r3
 8088b08:	6840      	ldr	r0, [r0, #4]
 8088b0a:	f7fc bf43 	b.w	8085994 <network_on>

08088b0e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8088b0e:	2200      	movs	r2, #0
 8088b10:	4611      	mov	r1, r2
 8088b12:	6840      	ldr	r0, [r0, #4]
 8088b14:	f7fc bf26 	b.w	8085964 <network_connecting>

08088b18 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8088b18:	2200      	movs	r2, #0
 8088b1a:	2102      	movs	r1, #2
 8088b1c:	6840      	ldr	r0, [r0, #4]
 8088b1e:	f7fc bf29 	b.w	8085974 <network_disconnect>

08088b22 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8088b22:	2300      	movs	r3, #0
 8088b24:	461a      	mov	r2, r3
 8088b26:	6840      	ldr	r0, [r0, #4]
 8088b28:	f7fc bf14 	b.w	8085954 <network_connect>

08088b2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8088b2c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8088b2e:	4c08      	ldr	r4, [pc, #32]	; (8088b50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8088b30:	2528      	movs	r5, #40	; 0x28
 8088b32:	462a      	mov	r2, r5
 8088b34:	2100      	movs	r1, #0
 8088b36:	4620      	mov	r0, r4
 8088b38:	f002 fbd1 	bl	808b2de <memset>
        cid = -1;
 8088b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8088b40:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8088b42:	4b04      	ldr	r3, [pc, #16]	; (8088b54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8088b44:	2204      	movs	r2, #4
 8088b46:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8088b48:	4a03      	ldr	r2, [pc, #12]	; (8088b58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8088b4a:	8025      	strh	r5, [r4, #0]
 8088b4c:	601a      	str	r2, [r3, #0]
 8088b4e:	bd38      	pop	{r3, r4, r5, pc}
 8088b50:	20000d8c 	.word	0x20000d8c
 8088b54:	20000d84 	.word	0x20000d84
 8088b58:	0808f070 	.word	0x0808f070

08088b5c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8088b5c:	4770      	bx	lr

08088b5e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8088b5e:	7441      	strb	r1, [r0, #17]
 8088b60:	4770      	bx	lr

08088b62 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8088b62:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8088b64:	7c00      	ldrb	r0, [r0, #16]
 8088b66:	f7fc fd5f 	bl	8085628 <HAL_USART_Available_Data_For_Write>
}
 8088b6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088b6e:	bd08      	pop	{r3, pc}

08088b70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8088b70:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8088b72:	7c00      	ldrb	r0, [r0, #16]
 8088b74:	f7fc fd30 	bl	80855d8 <HAL_USART_Available_Data>
}
 8088b78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088b7c:	bd08      	pop	{r3, pc}

08088b7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8088b7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8088b80:	7c00      	ldrb	r0, [r0, #16]
 8088b82:	f7fc fd39 	bl	80855f8 <HAL_USART_Peek_Data>
}
 8088b86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8088b8a:	bf28      	it	cs
 8088b8c:	f04f 30ff 	movcs.w	r0, #4294967295
 8088b90:	bd08      	pop	{r3, pc}

08088b92 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8088b92:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8088b94:	7c00      	ldrb	r0, [r0, #16]
 8088b96:	f7fc fd27 	bl	80855e8 <HAL_USART_Read_Data>
}
 8088b9a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8088b9e:	bf28      	it	cs
 8088ba0:	f04f 30ff 	movcs.w	r0, #4294967295
 8088ba4:	bd08      	pop	{r3, pc}

08088ba6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8088ba6:	7c00      	ldrb	r0, [r0, #16]
 8088ba8:	f7fc bd2e 	b.w	8085608 <HAL_USART_Flush_Data>

08088bac <_ZN11USARTSerialD0Ev>:
 8088bac:	b510      	push	{r4, lr}
 8088bae:	4604      	mov	r4, r0
 8088bb0:	2114      	movs	r1, #20
 8088bb2:	f000 fe3b 	bl	808982c <_ZdlPvj>
 8088bb6:	4620      	mov	r0, r4
 8088bb8:	bd10      	pop	{r4, pc}

08088bba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8088bba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8088bbc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8088bbe:	4604      	mov	r4, r0
 8088bc0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8088bc2:	b925      	cbnz	r5, 8088bce <_ZN11USARTSerial5writeEh+0x14>
 8088bc4:	7c00      	ldrb	r0, [r0, #16]
 8088bc6:	f7fc fd2f 	bl	8085628 <HAL_USART_Available_Data_For_Write>
 8088bca:	2800      	cmp	r0, #0
 8088bcc:	dd05      	ble.n	8088bda <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8088bce:	4631      	mov	r1, r6
 8088bd0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8088bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8088bd6:	f7fc bcf7 	b.w	80855c8 <HAL_USART_Write_Data>
  }
  return 0;
}
 8088bda:	4628      	mov	r0, r5
 8088bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08088be0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8088be0:	b510      	push	{r4, lr}
 8088be2:	4604      	mov	r4, r0
 8088be4:	4608      	mov	r0, r1
 8088be6:	4611      	mov	r1, r2
 8088be8:	2200      	movs	r2, #0
 8088bea:	6062      	str	r2, [r4, #4]
 8088bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8088bf0:	60a2      	str	r2, [r4, #8]
 8088bf2:	4a05      	ldr	r2, [pc, #20]	; (8088c08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8088bf4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8088bf6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8088bf8:	2201      	movs	r2, #1
 8088bfa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8088bfc:	461a      	mov	r2, r3
 8088bfe:	f7fc fcd3 	bl	80855a8 <HAL_USART_Init>
}
 8088c02:	4620      	mov	r0, r4
 8088c04:	bd10      	pop	{r4, pc}
 8088c06:	bf00      	nop
 8088c08:	0808f0a4 	.word	0x0808f0a4

08088c0c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8088c0c:	2300      	movs	r3, #0
 8088c0e:	7c00      	ldrb	r0, [r0, #16]
 8088c10:	f7fc bd12 	b.w	8085638 <HAL_USART_BeginConfig>

08088c14 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8088c14:	2200      	movs	r2, #0
 8088c16:	f7ff bff9 	b.w	8088c0c <_ZN11USARTSerial5beginEmm>

08088c1a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 8088c1a:	7c00      	ldrb	r0, [r0, #16]
 8088c1c:	f7fc bccc 	b.w	80855b8 <HAL_USART_End>

08088c20 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8088c20:	7c00      	ldrb	r0, [r0, #16]
 8088c22:	f7fc bcf9 	b.w	8085618 <HAL_USART_Is_Enabled>
	...

08088c28 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8088c28:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8088c2a:	4d0c      	ldr	r5, [pc, #48]	; (8088c5c <_Z22__fetch_global_Serial1v+0x34>)
 8088c2c:	6829      	ldr	r1, [r5, #0]
 8088c2e:	f011 0401 	ands.w	r4, r1, #1
 8088c32:	d111      	bne.n	8088c58 <_Z22__fetch_global_Serial1v+0x30>
 8088c34:	4628      	mov	r0, r5
 8088c36:	f7f7 fa45 	bl	80800c4 <__cxa_guard_acquire>
 8088c3a:	b168      	cbz	r0, 8088c58 <_Z22__fetch_global_Serial1v+0x30>
 8088c3c:	4a08      	ldr	r2, [pc, #32]	; (8088c60 <_Z22__fetch_global_Serial1v+0x38>)
 8088c3e:	4621      	mov	r1, r4
 8088c40:	4b08      	ldr	r3, [pc, #32]	; (8088c64 <_Z22__fetch_global_Serial1v+0x3c>)
 8088c42:	4809      	ldr	r0, [pc, #36]	; (8088c68 <_Z22__fetch_global_Serial1v+0x40>)
 8088c44:	f7ff ffcc 	bl	8088be0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8088c48:	4628      	mov	r0, r5
 8088c4a:	f7f7 fa40 	bl	80800ce <__cxa_guard_release>
 8088c4e:	4a07      	ldr	r2, [pc, #28]	; (8088c6c <_Z22__fetch_global_Serial1v+0x44>)
 8088c50:	4907      	ldr	r1, [pc, #28]	; (8088c70 <_Z22__fetch_global_Serial1v+0x48>)
 8088c52:	4805      	ldr	r0, [pc, #20]	; (8088c68 <_Z22__fetch_global_Serial1v+0x40>)
 8088c54:	f000 fddc 	bl	8089810 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8088c58:	4803      	ldr	r0, [pc, #12]	; (8088c68 <_Z22__fetch_global_Serial1v+0x40>)
 8088c5a:	bd38      	pop	{r3, r4, r5, pc}
 8088c5c:	20000e4c 	.word	0x20000e4c
 8088c60:	20000e50 	.word	0x20000e50
 8088c64:	20000dc8 	.word	0x20000dc8
 8088c68:	20000db4 	.word	0x20000db4
 8088c6c:	20000144 	.word	0x20000144
 8088c70:	08088b5d 	.word	0x08088b5d

08088c74 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8088c74:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088c76:	6883      	ldr	r3, [r0, #8]
 8088c78:	4604      	mov	r4, r0
 8088c7a:	b90b      	cbnz	r3, 8088c80 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8088c7c:	f000 fea2 	bl	80899c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088c80:	68c3      	ldr	r3, [r0, #12]
 8088c82:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8088c84:	68a3      	ldr	r3, [r4, #8]
 8088c86:	b11b      	cbz	r3, 8088c90 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8088c88:	2203      	movs	r2, #3
 8088c8a:	4621      	mov	r1, r4
 8088c8c:	4620      	mov	r0, r4
 8088c8e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8088c90:	4620      	mov	r0, r4
}
 8088c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8088c96:	2110      	movs	r1, #16
 8088c98:	f000 bdc8 	b.w	808982c <_ZdlPvj>

08088c9c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8088c9c:	4770      	bx	lr

08088c9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8088c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088ca0:	4606      	mov	r6, r0
 8088ca2:	4615      	mov	r5, r2
 8088ca4:	460c      	mov	r4, r1
 8088ca6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8088ca8:	42bc      	cmp	r4, r7
 8088caa:	d006      	beq.n	8088cba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8088cac:	6833      	ldr	r3, [r6, #0]
 8088cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088cb2:	689b      	ldr	r3, [r3, #8]
 8088cb4:	4630      	mov	r0, r6
 8088cb6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8088cb8:	e7f6      	b.n	8088ca8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8088cba:	4628      	mov	r0, r5
 8088cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088cbe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8088cbe:	2200      	movs	r2, #0
 8088cc0:	7c00      	ldrb	r0, [r0, #16]
 8088cc2:	f7fc bcd9 	b.w	8085678 <HAL_I2C_Write_Data>

08088cc6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8088cc6:	2100      	movs	r1, #0
 8088cc8:	7c00      	ldrb	r0, [r0, #16]
 8088cca:	f7fc bcdd 	b.w	8085688 <HAL_I2C_Available_Data>

08088cce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8088cce:	2100      	movs	r1, #0
 8088cd0:	7c00      	ldrb	r0, [r0, #16]
 8088cd2:	f7fc bce1 	b.w	8085698 <HAL_I2C_Read_Data>

08088cd6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8088cd6:	2100      	movs	r1, #0
 8088cd8:	7c00      	ldrb	r0, [r0, #16]
 8088cda:	f7fc bce5 	b.w	80856a8 <HAL_I2C_Peek_Data>

08088cde <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8088cde:	2100      	movs	r1, #0
 8088ce0:	7c00      	ldrb	r0, [r0, #16]
 8088ce2:	f7fc bce9 	b.w	80856b8 <HAL_I2C_Flush_Data>

08088ce6 <_ZN7TwoWireD0Ev>:
 8088ce6:	b510      	push	{r4, lr}
 8088ce8:	4604      	mov	r4, r0
 8088cea:	2114      	movs	r1, #20
 8088cec:	f000 fd9e 	bl	808982c <_ZdlPvj>
 8088cf0:	4620      	mov	r0, r4
 8088cf2:	bd10      	pop	{r4, pc}

08088cf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8088cf4:	b510      	push	{r4, lr}
 8088cf6:	4604      	mov	r4, r0
 8088cf8:	2300      	movs	r3, #0
 8088cfa:	6063      	str	r3, [r4, #4]
 8088cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8088d00:	60a3      	str	r3, [r4, #8]
 8088d02:	4b04      	ldr	r3, [pc, #16]	; (8088d14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8088d04:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8088d06:	4608      	mov	r0, r1
 8088d08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8088d0a:	4611      	mov	r1, r2
 8088d0c:	f7fc fce4 	bl	80856d8 <HAL_I2C_Init>
}
 8088d10:	4620      	mov	r0, r4
 8088d12:	bd10      	pop	{r4, pc}
 8088d14:	0808f0d4 	.word	0x0808f0d4

08088d18 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8088d18:	2300      	movs	r3, #0
 8088d1a:	461a      	mov	r2, r3
 8088d1c:	4619      	mov	r1, r3
 8088d1e:	7c00      	ldrb	r0, [r0, #16]
 8088d20:	f7fc bc92 	b.w	8085648 <HAL_I2C_Begin>

08088d24 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8088d24:	b570      	push	{r4, r5, r6, lr}
 8088d26:	460c      	mov	r4, r1
 8088d28:	4606      	mov	r6, r0
 8088d2a:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 8088d2c:	2514      	movs	r5, #20
 8088d2e:	462a      	mov	r2, r5
 8088d30:	2100      	movs	r1, #0
 8088d32:	a801      	add	r0, sp, #4
 8088d34:	f002 fad3 	bl	808b2de <memset>
 8088d38:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 8088d3a:	2200      	movs	r2, #0
 8088d3c:	f88d 3008 	strb.w	r3, [sp, #8]
 8088d40:	6863      	ldr	r3, [r4, #4]
 8088d42:	a901      	add	r1, sp, #4
 8088d44:	9303      	str	r3, [sp, #12]
 8088d46:	68e3      	ldr	r3, [r4, #12]
 8088d48:	7c30      	ldrb	r0, [r6, #16]
 8088d4a:	9304      	str	r3, [sp, #16]
 8088d4c:	7a23      	ldrb	r3, [r4, #8]
 8088d4e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8088d52:	9305      	str	r3, [sp, #20]
 8088d54:	f7fc fcd8 	bl	8085708 <HAL_I2C_Request_Data_Ex>
}
 8088d58:	b006      	add	sp, #24
 8088d5a:	bd70      	pop	{r4, r5, r6, pc}

08088d5c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 8088d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8088d5e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088d60:	f88d 1000 	strb.w	r1, [sp]
 8088d64:	f04f 0164 	mov.w	r1, #100	; 0x64
 8088d68:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8088d6a:	bf18      	it	ne
 8088d6c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8088d6e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8088d70:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8088d72:	f88d 3008 	strb.w	r3, [sp, #8]
 8088d76:	f7ff ffd5 	bl	8088d24 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8088d7a:	b005      	add	sp, #20
 8088d7c:	f85d fb04 	ldr.w	pc, [sp], #4

08088d80 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 8088d80:	2301      	movs	r3, #1
 8088d82:	f7ff bfeb 	b.w	8088d5c <_ZN7TwoWire11requestFromEhjh>

08088d86 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8088d86:	2200      	movs	r2, #0
 8088d88:	7c00      	ldrb	r0, [r0, #16]
 8088d8a:	f7fc bc65 	b.w	8085658 <HAL_I2C_Begin_Transmission>

08088d8e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8088d8e:	b2c9      	uxtb	r1, r1
 8088d90:	f7ff bff9 	b.w	8088d86 <_ZN7TwoWire17beginTransmissionEh>

08088d94 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8088d94:	2200      	movs	r2, #0
 8088d96:	7c00      	ldrb	r0, [r0, #16]
 8088d98:	f7fc bc66 	b.w	8085668 <HAL_I2C_End_Transmission>

08088d9c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8088d9c:	2101      	movs	r1, #1
 8088d9e:	f7ff bff9 	b.w	8088d94 <_ZN7TwoWire15endTransmissionEh>

08088da2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8088da2:	2100      	movs	r1, #0
 8088da4:	7c00      	ldrb	r0, [r0, #16]
 8088da6:	f7fc bc8f 	b.w	80856c8 <HAL_I2C_Is_Enabled>

08088daa <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8088daa:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8088dac:	2100      	movs	r1, #0
 8088dae:	7c00      	ldrb	r0, [r0, #16]
 8088db0:	f7fc fc9a 	bl	80856e8 <HAL_I2C_Acquire>
}
 8088db4:	fab0 f080 	clz	r0, r0
 8088db8:	0940      	lsrs	r0, r0, #5
 8088dba:	bd08      	pop	{r3, pc}

08088dbc <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8088dbc:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8088dbe:	2100      	movs	r1, #0
 8088dc0:	7c00      	ldrb	r0, [r0, #16]
 8088dc2:	f7fc fc99 	bl	80856f8 <HAL_I2C_Release>
}
 8088dc6:	fab0 f080 	clz	r0, r0
 8088dca:	0940      	lsrs	r0, r0, #5
 8088dcc:	bd08      	pop	{r3, pc}

08088dce <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8088dce:	2300      	movs	r3, #0
 8088dd0:	461a      	mov	r2, r3
 8088dd2:	6840      	ldr	r0, [r0, #4]
 8088dd4:	f7fc bdbe 	b.w	8085954 <network_connect>

08088dd8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8088dd8:	2200      	movs	r2, #0
 8088dda:	2102      	movs	r1, #2
 8088ddc:	6840      	ldr	r0, [r0, #4]
 8088dde:	f7fc bdc9 	b.w	8085974 <network_disconnect>

08088de2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8088de2:	2200      	movs	r2, #0
 8088de4:	4611      	mov	r1, r2
 8088de6:	6840      	ldr	r0, [r0, #4]
 8088de8:	f7fc bdbc 	b.w	8085964 <network_connecting>

08088dec <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8088dec:	2200      	movs	r2, #0
 8088dee:	4611      	mov	r1, r2
 8088df0:	6840      	ldr	r0, [r0, #4]
 8088df2:	f7fc bdc7 	b.w	8085984 <network_ready>

08088df6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8088df6:	2300      	movs	r3, #0
 8088df8:	461a      	mov	r2, r3
 8088dfa:	4619      	mov	r1, r3
 8088dfc:	6840      	ldr	r0, [r0, #4]
 8088dfe:	f7fc bdc9 	b.w	8085994 <network_on>

08088e02 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8088e02:	2300      	movs	r3, #0
 8088e04:	461a      	mov	r2, r3
 8088e06:	4619      	mov	r1, r3
 8088e08:	6840      	ldr	r0, [r0, #4]
 8088e0a:	f7fc bdcb 	b.w	80859a4 <network_off>

08088e0e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8088e0e:	2200      	movs	r2, #0
 8088e10:	f081 0101 	eor.w	r1, r1, #1
 8088e14:	6840      	ldr	r0, [r0, #4]
 8088e16:	f7fc bdcd 	b.w	80859b4 <network_listen>

08088e1a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8088e1a:	2200      	movs	r2, #0
 8088e1c:	6840      	ldr	r0, [r0, #4]
 8088e1e:	f7fc bdd9 	b.w	80859d4 <network_set_listen_timeout>

08088e22 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8088e22:	2200      	movs	r2, #0
 8088e24:	4611      	mov	r1, r2
 8088e26:	6840      	ldr	r0, [r0, #4]
 8088e28:	f7fc bddc 	b.w	80859e4 <network_get_listen_timeout>

08088e2c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8088e2c:	2200      	movs	r2, #0
 8088e2e:	4611      	mov	r1, r2
 8088e30:	6840      	ldr	r0, [r0, #4]
 8088e32:	f7fc bdc7 	b.w	80859c4 <network_listening>
	...

08088e38 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8088e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088e3a:	4617      	mov	r7, r2
 8088e3c:	b087      	sub	sp, #28
 8088e3e:	4605      	mov	r5, r0
    IPAddress addr;
 8088e40:	a804      	add	r0, sp, #16
 8088e42:	f7ff fc85 	bl	8088750 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8088e46:	2600      	movs	r6, #0
 8088e48:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088e4a:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8088e4c:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088e50:	f002 ffd0 	bl	808bdf4 <strlen>
 8088e54:	4b0a      	ldr	r3, [pc, #40]	; (8088e80 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8088e56:	9600      	str	r6, [sp, #0]
 8088e58:	b281      	uxth	r1, r0
 8088e5a:	685b      	ldr	r3, [r3, #4]
 8088e5c:	4622      	mov	r2, r4
 8088e5e:	4638      	mov	r0, r7
 8088e60:	f7fc fcb2 	bl	80857c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8088e64:	b120      	cbz	r0, 8088e70 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8088e66:	4631      	mov	r1, r6
 8088e68:	4628      	mov	r0, r5
 8088e6a:	f7ff fc81 	bl	8088770 <_ZN9IPAddressC1Em>
 8088e6e:	e003      	b.n	8088e78 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8088e70:	4621      	mov	r1, r4
 8088e72:	4628      	mov	r0, r5
 8088e74:	f7ff fc74 	bl	8088760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8088e78:	4628      	mov	r0, r5
 8088e7a:	b007      	add	sp, #28
 8088e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088e7e:	bf00      	nop
 8088e80:	20000d84 	.word	0x20000d84

08088e84 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 8088e84:	4b03      	ldr	r3, [pc, #12]	; (8088e94 <_ZN5spark12NetworkClass4fromEm+0x10>)
 8088e86:	4a04      	ldr	r2, [pc, #16]	; (8088e98 <_ZN5spark12NetworkClass4fromEm+0x14>)
 8088e88:	2804      	cmp	r0, #4
 8088e8a:	bf0c      	ite	eq
 8088e8c:	4610      	moveq	r0, r2
 8088e8e:	4618      	movne	r0, r3
 8088e90:	4770      	bx	lr
 8088e92:	bf00      	nop
 8088e94:	20000ed4 	.word	0x20000ed4
 8088e98:	20000d84 	.word	0x20000d84

08088e9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8088e9c:	4b02      	ldr	r3, [pc, #8]	; (8088ea8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8088e9e:	4a03      	ldr	r2, [pc, #12]	; (8088eac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8088ea0:	601a      	str	r2, [r3, #0]
 8088ea2:	2200      	movs	r2, #0
 8088ea4:	605a      	str	r2, [r3, #4]
 8088ea6:	4770      	bx	lr
 8088ea8:	20000ed4 	.word	0x20000ed4
 8088eac:	0808f0fc 	.word	0x0808f0fc

08088eb0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 8088eb0:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 8088eb4:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 8088eb6:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8088eba:	4610      	mov	r0, r2
 8088ebc:	2901      	cmp	r1, #1
 8088ebe:	d104      	bne.n	8088eca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 8088ec0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8088ec4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8088ec8:	e004      	b.n	8088ed4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 8088eca:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8088ecc:	bf04      	itt	eq
 8088ece:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 8088ed2:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 8088ed4:	3b01      	subs	r3, #1
 8088ed6:	f102 0210 	add.w	r2, r2, #16
 8088eda:	d1ec      	bne.n	8088eb6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 8088edc:	4770      	bx	lr

08088ede <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8088ede:	b40e      	push	{r1, r2, r3}
 8088ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088ee4:	b087      	sub	sp, #28
 8088ee6:	af00      	add	r7, sp, #0
 8088ee8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8088eec:	f854 6b04 	ldr.w	r6, [r4], #4
 8088ef0:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8088ef2:	4623      	mov	r3, r4
 8088ef4:	4632      	mov	r2, r6
 8088ef6:	2110      	movs	r1, #16
 8088ef8:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 8088efc:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8088efe:	f7fc fdf1 	bl	8085ae4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8088f02:	280f      	cmp	r0, #15
 8088f04:	d916      	bls.n	8088f34 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 8088f06:	f100 0308 	add.w	r3, r0, #8
 8088f0a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8088f0e:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 8088f10:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8088f14:	4632      	mov	r2, r6
 8088f16:	1c41      	adds	r1, r0, #1
 8088f18:	4623      	mov	r3, r4
 8088f1a:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 8088f1c:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8088f1e:	f7fc fde1 	bl	8085ae4 <vsnprintf>
        va_end(args);
        if (n > 0) {
 8088f22:	1e02      	subs	r2, r0, #0
 8088f24:	dd04      	ble.n	8088f30 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 8088f26:	682b      	ldr	r3, [r5, #0]
 8088f28:	4669      	mov	r1, sp
 8088f2a:	689b      	ldr	r3, [r3, #8]
 8088f2c:	4628      	mov	r0, r5
 8088f2e:	4798      	blx	r3
 8088f30:	46c5      	mov	sp, r8
 8088f32:	e007      	b.n	8088f44 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 8088f34:	b130      	cbz	r0, 8088f44 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 8088f36:	682b      	ldr	r3, [r5, #0]
 8088f38:	4602      	mov	r2, r0
 8088f3a:	689b      	ldr	r3, [r3, #8]
 8088f3c:	f107 0108 	add.w	r1, r7, #8
 8088f40:	4628      	mov	r0, r5
 8088f42:	4798      	blx	r3
    }
}
 8088f44:	371c      	adds	r7, #28
 8088f46:	46bd      	mov	sp, r7
 8088f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8088f4c:	b003      	add	sp, #12
 8088f4e:	4770      	bx	lr

08088f50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8088f50:	b510      	push	{r4, lr}
 8088f52:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8088f54:	6803      	ldr	r3, [r0, #0]
 8088f56:	689b      	ldr	r3, [r3, #8]
 8088f58:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8088f5a:	68a3      	ldr	r3, [r4, #8]
 8088f5c:	3b01      	subs	r3, #1
 8088f5e:	60a3      	str	r3, [r4, #8]
 8088f60:	b92b      	cbnz	r3, 8088f6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 8088f62:	6823      	ldr	r3, [r4, #0]
 8088f64:	4620      	mov	r0, r4
        }
    }
 8088f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8088f6a:	68db      	ldr	r3, [r3, #12]
 8088f6c:	4718      	bx	r3
 8088f6e:	bd10      	pop	{r4, pc}

08088f70 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 8088f70:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 8088f72:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 8088f74:	ab02      	add	r3, sp, #8
 8088f76:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 8088f7a:	6894      	ldr	r4, [r2, #8]
 8088f7c:	4619      	mov	r1, r3
 8088f7e:	2201      	movs	r2, #1
 8088f80:	47a0      	blx	r4
}
 8088f82:	b002      	add	sp, #8
 8088f84:	bd10      	pop	{r4, pc}

08088f86 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 8088f86:	6883      	ldr	r3, [r0, #8]
 8088f88:	b1fb      	cbz	r3, 8088fca <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 8088f8a:	781a      	ldrb	r2, [r3, #0]
 8088f8c:	2a03      	cmp	r2, #3
 8088f8e:	d81a      	bhi.n	8088fc6 <_ZNK5spark9JSONValue4typeEv+0x40>
 8088f90:	e8df f002 	tbb	[pc, r2]
 8088f94:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 8088f98:	2005      	movs	r0, #5
 8088f9a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 8088f9c:	6802      	ldr	r2, [r0, #0]
 8088f9e:	685b      	ldr	r3, [r3, #4]
 8088fa0:	6852      	ldr	r2, [r2, #4]
 8088fa2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8088fa4:	282d      	cmp	r0, #45	; 0x2d
 8088fa6:	d014      	beq.n	8088fd2 <_ZNK5spark9JSONValue4typeEv+0x4c>
 8088fa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8088fac:	2b09      	cmp	r3, #9
 8088fae:	d910      	bls.n	8088fd2 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8088fb0:	2874      	cmp	r0, #116	; 0x74
 8088fb2:	d010      	beq.n	8088fd6 <_ZNK5spark9JSONValue4typeEv+0x50>
 8088fb4:	2866      	cmp	r0, #102	; 0x66
 8088fb6:	d00e      	beq.n	8088fd6 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 8088fb8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8088fbc:	4258      	negs	r0, r3
 8088fbe:	4158      	adcs	r0, r3
 8088fc0:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 8088fc2:	2006      	movs	r0, #6
 8088fc4:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 8088fc6:	2000      	movs	r0, #0
 8088fc8:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 8088fca:	4618      	mov	r0, r3
 8088fcc:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 8088fce:	2004      	movs	r0, #4
 8088fd0:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 8088fd2:	2003      	movs	r0, #3
 8088fd4:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 8088fd6:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 8088fd8:	4770      	bx	lr

08088fda <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 8088fda:	b510      	push	{r4, lr}
 8088fdc:	4604      	mov	r4, r0
    switch (type()) {
 8088fde:	f7ff ffd2 	bl	8088f86 <_ZNK5spark9JSONValue4typeEv>
 8088fe2:	2802      	cmp	r0, #2
 8088fe4:	d00d      	beq.n	8089002 <_ZNK5spark9JSONValue5toIntEv+0x28>
 8088fe6:	d316      	bcc.n	8089016 <_ZNK5spark9JSONValue5toIntEv+0x3c>
 8088fe8:	2804      	cmp	r0, #4
 8088fea:	d814      	bhi.n	8089016 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 8088fec:	6822      	ldr	r2, [r4, #0]
 8088fee:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 8088ff0:	6850      	ldr	r0, [r2, #4]
 8088ff2:	685b      	ldr	r3, [r3, #4]
 8088ff4:	220a      	movs	r2, #10
 8088ff6:	2100      	movs	r1, #0
 8088ff8:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 8088ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 8088ffe:	f003 be05 	b.w	808cc0c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 8089002:	6822      	ldr	r2, [r4, #0]
 8089004:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8089006:	6852      	ldr	r2, [r2, #4]
 8089008:	685b      	ldr	r3, [r3, #4]
 808900a:	5cd0      	ldrb	r0, [r2, r3]
 808900c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8089010:	4258      	negs	r0, r3
 8089012:	4158      	adcs	r0, r3
 8089014:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 8089016:	2000      	movs	r0, #0
    }
}
 8089018:	bd10      	pop	{r4, pc}

0808901a <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 808901a:	b510      	push	{r4, lr}
    if (!n_) {
 808901c:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 808901e:	4604      	mov	r4, r0
    if (!n_) {
 8089020:	b15b      	cbz	r3, 808903a <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 8089022:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 8089024:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 8089026:	60e0      	str	r0, [r4, #12]
    ++t_;
 8089028:	3010      	adds	r0, #16
 808902a:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 808902c:	6120      	str	r0, [r4, #16]
    --n_;
 808902e:	6163      	str	r3, [r4, #20]
    if (n_) {
 8089030:	b12b      	cbz	r3, 808903e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 8089032:	f7ff ff3d 	bl	8088eb0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8089036:	60a0      	str	r0, [r4, #8]
 8089038:	e001      	b.n	808903e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 808903a:	4618      	mov	r0, r3
 808903c:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 808903e:	2001      	movs	r0, #1
}
 8089040:	bd10      	pop	{r4, pc}

08089042 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 8089042:	b510      	push	{r4, lr}
 8089044:	4604      	mov	r4, r0
    write('}');
 8089046:	217d      	movs	r1, #125	; 0x7d
 8089048:	f7ff ff92 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808904c:	2301      	movs	r3, #1
 808904e:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8089050:	4620      	mov	r0, r4
 8089052:	bd10      	pop	{r4, pc}

08089054 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 8089054:	b508      	push	{r3, lr}
    switch (state_) {
 8089056:	7903      	ldrb	r3, [r0, #4]
 8089058:	2b01      	cmp	r3, #1
 808905a:	d002      	beq.n	8089062 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808905c:	2b02      	cmp	r3, #2
 808905e:	d002      	beq.n	8089066 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 8089060:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 8089062:	212c      	movs	r1, #44	; 0x2c
 8089064:	e000      	b.n	8089068 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 8089066:	213a      	movs	r1, #58	; 0x3a
 8089068:	f7ff ff82 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
 808906c:	bd08      	pop	{r3, pc}

0808906e <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 808906e:	b510      	push	{r4, lr}
 8089070:	4604      	mov	r4, r0
    writeSeparator();
 8089072:	f7ff ffef 	bl	8089054 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 8089076:	4620      	mov	r0, r4
 8089078:	217b      	movs	r1, #123	; 0x7b
 808907a:	f7ff ff79 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808907e:	2300      	movs	r3, #0
 8089080:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8089082:	4620      	mov	r0, r4
 8089084:	bd10      	pop	{r4, pc}
	...

08089088 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 8089088:	b538      	push	{r3, r4, r5, lr}
 808908a:	4604      	mov	r4, r0
 808908c:	460d      	mov	r5, r1
    writeSeparator();
 808908e:	f7ff ffe1 	bl	8089054 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 8089092:	6823      	ldr	r3, [r4, #0]
 8089094:	4620      	mov	r0, r4
 8089096:	68db      	ldr	r3, [r3, #12]
 8089098:	462a      	mov	r2, r5
 808909a:	4903      	ldr	r1, [pc, #12]	; (80890a8 <_ZN5spark10JSONWriter5valueEi+0x20>)
 808909c:	4798      	blx	r3
    state_ = NEXT;
 808909e:	2301      	movs	r3, #1
 80890a0:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80890a2:	4620      	mov	r0, r4
 80890a4:	bd38      	pop	{r3, r4, r5, pc}
 80890a6:	bf00      	nop
 80890a8:	0808e335 	.word	0x0808e335

080890ac <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80890ac:	b538      	push	{r3, r4, r5, lr}
 80890ae:	4604      	mov	r4, r0
 80890b0:	460d      	mov	r5, r1
    writeSeparator();
 80890b2:	f7ff ffcf 	bl	8089054 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80890b6:	6823      	ldr	r3, [r4, #0]
 80890b8:	4620      	mov	r0, r4
 80890ba:	68db      	ldr	r3, [r3, #12]
 80890bc:	462a      	mov	r2, r5
 80890be:	4903      	ldr	r1, [pc, #12]	; (80890cc <_ZN5spark10JSONWriter5valueEj+0x20>)
 80890c0:	4798      	blx	r3
    state_ = NEXT;
 80890c2:	2301      	movs	r3, #1
 80890c4:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80890c6:	4620      	mov	r0, r4
 80890c8:	bd38      	pop	{r3, r4, r5, pc}
 80890ca:	bf00      	nop
 80890cc:	0808f137 	.word	0x0808f137

080890d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80890d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80890d2:	460d      	mov	r5, r1
 80890d4:	4617      	mov	r7, r2
    write('"');
 80890d6:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80890d8:	4604      	mov	r4, r0
    write('"');
 80890da:	f7ff ff49 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
 80890de:	462a      	mov	r2, r5
    const char* const end = str + size;
 80890e0:	4629      	mov	r1, r5
 80890e2:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 80890e4:	42ba      	cmp	r2, r7
 80890e6:	d038      	beq.n	808915a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 80890e8:	4616      	mov	r6, r2
 80890ea:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80890ee:	2d22      	cmp	r5, #34	; 0x22
 80890f0:	d003      	beq.n	80890fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80890f2:	2d5c      	cmp	r5, #92	; 0x5c
 80890f4:	d001      	beq.n	80890fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80890f6:	2d1f      	cmp	r5, #31
 80890f8:	d82d      	bhi.n	8089156 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 80890fa:	6823      	ldr	r3, [r4, #0]
 80890fc:	1a52      	subs	r2, r2, r1
 80890fe:	689b      	ldr	r3, [r3, #8]
 8089100:	4620      	mov	r0, r4
 8089102:	4798      	blx	r3
            write('\\');
 8089104:	215c      	movs	r1, #92	; 0x5c
 8089106:	4620      	mov	r0, r4
 8089108:	f7ff ff32 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808910c:	2d0c      	cmp	r5, #12
 808910e:	d019      	beq.n	8089144 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 8089110:	d807      	bhi.n	8089122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 8089112:	2d09      	cmp	r5, #9
 8089114:	d00f      	beq.n	8089136 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 8089116:	2d0a      	cmp	r5, #10
 8089118:	d012      	beq.n	8089140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 808911a:	2d08      	cmp	r5, #8
 808911c:	d114      	bne.n	8089148 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808911e:	2162      	movs	r1, #98	; 0x62
 8089120:	e00a      	b.n	8089138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 8089122:	2d22      	cmp	r5, #34	; 0x22
 8089124:	d005      	beq.n	8089132 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 8089126:	2d5c      	cmp	r5, #92	; 0x5c
 8089128:	d003      	beq.n	8089132 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808912a:	2d0d      	cmp	r5, #13
 808912c:	d10c      	bne.n	8089148 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 808912e:	2172      	movs	r1, #114	; 0x72
 8089130:	e002      	b.n	8089138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 8089132:	4629      	mov	r1, r5
 8089134:	e000      	b.n	8089138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 8089136:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 8089138:	4620      	mov	r0, r4
 808913a:	f7ff ff19 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
                break;
 808913e:	e009      	b.n	8089154 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 8089140:	216e      	movs	r1, #110	; 0x6e
 8089142:	e7f9      	b.n	8089138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 8089144:	2166      	movs	r1, #102	; 0x66
 8089146:	e7f7      	b.n	8089138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 8089148:	6823      	ldr	r3, [r4, #0]
 808914a:	462a      	mov	r2, r5
 808914c:	68db      	ldr	r3, [r3, #12]
 808914e:	4909      	ldr	r1, [pc, #36]	; (8089174 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 8089150:	4620      	mov	r0, r4
 8089152:	4798      	blx	r3
                break;
            }
            str = s + 1;
 8089154:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 8089156:	4632      	mov	r2, r6
 8089158:	e7c4      	b.n	80890e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 808915a:	4291      	cmp	r1, r2
 808915c:	d004      	beq.n	8089168 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 808915e:	6823      	ldr	r3, [r4, #0]
 8089160:	1a52      	subs	r2, r2, r1
 8089162:	689d      	ldr	r5, [r3, #8]
 8089164:	4620      	mov	r0, r4
 8089166:	47a8      	blx	r5
    }
    write('"');
 8089168:	2122      	movs	r1, #34	; 0x22
 808916a:	4620      	mov	r0, r4
 808916c:	f7ff ff00 	bl	8088f70 <_ZN5spark10JSONWriter5writeEc>
 8089170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089172:	bf00      	nop
 8089174:	0808f148 	.word	0x0808f148

08089178 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 8089178:	b570      	push	{r4, r5, r6, lr}
 808917a:	4604      	mov	r4, r0
 808917c:	460d      	mov	r5, r1
 808917e:	4616      	mov	r6, r2
    writeSeparator();
 8089180:	f7ff ff68 	bl	8089054 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8089184:	4620      	mov	r0, r4
 8089186:	4632      	mov	r2, r6
 8089188:	4629      	mov	r1, r5
 808918a:	f7ff ffa1 	bl	80890d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808918e:	2302      	movs	r3, #2
 8089190:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8089192:	4620      	mov	r0, r4
 8089194:	bd70      	pop	{r4, r5, r6, pc}

08089196 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 8089196:	b570      	push	{r4, r5, r6, lr}
 8089198:	4604      	mov	r4, r0
 808919a:	460d      	mov	r5, r1
 808919c:	4616      	mov	r6, r2
    writeSeparator();
 808919e:	f7ff ff59 	bl	8089054 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80891a2:	4620      	mov	r0, r4
 80891a4:	4632      	mov	r2, r6
 80891a6:	4629      	mov	r1, r5
 80891a8:	f7ff ff92 	bl	80890d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80891ac:	2301      	movs	r3, #1
 80891ae:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80891b0:	4620      	mov	r0, r4
 80891b2:	bd70      	pop	{r4, r5, r6, pc}

080891b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80891b4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80891b6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 80891b8:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80891ba:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80891bc:	429c      	cmp	r4, r3
 80891be:	d00c      	beq.n	80891da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 80891c0:	b114      	cbz	r4, 80891c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80891c2:	6863      	ldr	r3, [r4, #4]
 80891c4:	3301      	adds	r3, #1
 80891c6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80891c8:	6828      	ldr	r0, [r5, #0]
 80891ca:	b128      	cbz	r0, 80891d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80891cc:	6843      	ldr	r3, [r0, #4]
 80891ce:	3b01      	subs	r3, #1
 80891d0:	6043      	str	r3, [r0, #4]
 80891d2:	b90b      	cbnz	r3, 80891d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 80891d4:	f7ff febc 	bl	8088f50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80891d8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 80891da:	4628      	mov	r0, r5
 80891dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080891e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80891e0:	b510      	push	{r4, lr}
 80891e2:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80891e4:	2300      	movs	r3, #0
 80891e6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80891e8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 80891ea:	4810      	ldr	r0, [pc, #64]	; (808922c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 80891ec:	60e3      	str	r3, [r4, #12]
 80891ee:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80891f0:	b1d1      	cbz	r1, 8089228 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 80891f2:	780b      	ldrb	r3, [r1, #0]
 80891f4:	2b03      	cmp	r3, #3
 80891f6:	d006      	beq.n	8089206 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 80891f8:	b9b3      	cbnz	r3, 8089228 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80891fa:	6813      	ldr	r3, [r2, #0]
 80891fc:	6858      	ldr	r0, [r3, #4]
 80891fe:	684b      	ldr	r3, [r1, #4]
 8089200:	5cc3      	ldrb	r3, [r0, r3]
 8089202:	2b6e      	cmp	r3, #110	; 0x6e
 8089204:	d008      	beq.n	8089218 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 8089206:	6813      	ldr	r3, [r2, #0]
 8089208:	6858      	ldr	r0, [r3, #4]
 808920a:	684b      	ldr	r3, [r1, #4]
 808920c:	4403      	add	r3, r0
 808920e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 8089210:	688b      	ldr	r3, [r1, #8]
 8089212:	6849      	ldr	r1, [r1, #4]
 8089214:	1a5b      	subs	r3, r3, r1
 8089216:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8089218:	4611      	mov	r1, r2
 808921a:	4620      	mov	r0, r4
 808921c:	f851 3b04 	ldr.w	r3, [r1], #4
 8089220:	f840 3b04 	str.w	r3, [r0], #4
 8089224:	f7ff ffc6 	bl	80891b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 8089228:	4620      	mov	r0, r4
 808922a:	bd10      	pop	{r4, pc}
 808922c:	0808ec97 	.word	0x0808ec97

08089230 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 8089230:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8089232:	b510      	push	{r4, lr}
 8089234:	4604      	mov	r4, r0
 8089236:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8089238:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 808923a:	6083      	str	r3, [r0, #8]
 808923c:	60c3      	str	r3, [r0, #12]
 808923e:	6103      	str	r3, [r0, #16]
 8089240:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 8089242:	b171      	cbz	r1, 8089262 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 8089244:	780b      	ldrb	r3, [r1, #0]
 8089246:	2b01      	cmp	r3, #1
 8089248:	d10b      	bne.n	8089262 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 808924a:	f101 0310 	add.w	r3, r1, #16
 808924e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 8089250:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8089252:	4611      	mov	r1, r2
 8089254:	6143      	str	r3, [r0, #20]
 8089256:	f851 3b04 	ldr.w	r3, [r1], #4
 808925a:	f840 3b04 	str.w	r3, [r0], #4
 808925e:	f7ff ffa9 	bl	80891b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 8089262:	4620      	mov	r0, r4
 8089264:	bd10      	pop	{r4, pc}

08089266 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 8089266:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8089268:	b510      	push	{r4, lr}
 808926a:	4604      	mov	r4, r0
 808926c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 808926e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 8089270:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 8089272:	b131      	cbz	r1, 8089282 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8089274:	4611      	mov	r1, r2
 8089276:	f851 3b04 	ldr.w	r3, [r1], #4
 808927a:	f840 3b04 	str.w	r3, [r0], #4
 808927e:	f7ff ff99 	bl	80891b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 8089282:	4620      	mov	r0, r4
 8089284:	bd10      	pop	{r4, pc}
	...

08089288 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8089288:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 808928a:	b530      	push	{r4, r5, lr}
 808928c:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 808928e:	b31a      	cbz	r2, 80892d8 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8089290:	4a17      	ldr	r2, [pc, #92]	; (80892f0 <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8089292:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8089294:	68d1      	ldr	r1, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8089296:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 808929a:	43c9      	mvns	r1, r1
 808929c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80892a0:	f1c1 0204 	rsb	r2, r1, #4
 80892a4:	b2d2      	uxtb	r2, r2
 80892a6:	fa05 f202 	lsl.w	r2, r5, r2
 80892aa:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80892ac:	220f      	movs	r2, #15
 80892ae:	410a      	asrs	r2, r1
 80892b0:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80892b2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80892b6:	400a      	ands	r2, r1
 80892b8:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
 80892ba:	0112      	lsls	r2, r2, #4
 80892bc:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80892be:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80892c2:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80892c4:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80892c6:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80892c8:	f003 031f 	and.w	r3, r3, #31
 80892cc:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80892d0:	4a08      	ldr	r2, [pc, #32]	; (80892f4 <NVIC_Init+0x6c>)
 80892d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80892d6:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80892d8:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80892da:	2101      	movs	r1, #1
 80892dc:	f003 031f 	and.w	r3, r3, #31
 80892e0:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80892e4:	4903      	ldr	r1, [pc, #12]	; (80892f4 <NVIC_Init+0x6c>)
 80892e6:	3220      	adds	r2, #32
 80892e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80892ec:	bd30      	pop	{r4, r5, pc}
 80892ee:	bf00      	nop
 80892f0:	e000ed00 	.word	0xe000ed00
 80892f4:	e000e100 	.word	0xe000e100

080892f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80892f8:	4b04      	ldr	r3, [pc, #16]	; (808930c <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80892fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80892fc:	b109      	cbz	r1, 8089302 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80892fe:	4310      	orrs	r0, r2
 8089300:	e001      	b.n	8089306 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8089302:	ea22 0000 	bic.w	r0, r2, r0
 8089306:	6418      	str	r0, [r3, #64]	; 0x40
 8089308:	4770      	bx	lr
 808930a:	bf00      	nop
 808930c:	40023800 	.word	0x40023800

08089310 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8089310:	4b04      	ldr	r3, [pc, #16]	; (8089324 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8089312:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8089314:	b109      	cbz	r1, 808931a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8089316:	4310      	orrs	r0, r2
 8089318:	e001      	b.n	808931e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 808931a:	ea22 0000 	bic.w	r0, r2, r0
 808931e:	6218      	str	r0, [r3, #32]
 8089320:	4770      	bx	lr
 8089322:	bf00      	nop
 8089324:	40023800 	.word	0x40023800

08089328 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8089328:	4b04      	ldr	r3, [pc, #16]	; (808933c <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 808932a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 808932c:	b109      	cbz	r1, 8089332 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 808932e:	4310      	orrs	r0, r2
 8089330:	e001      	b.n	8089336 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8089332:	ea22 0000 	bic.w	r0, r2, r0
 8089336:	6258      	str	r0, [r3, #36]	; 0x24
 8089338:	4770      	bx	lr
 808933a:	bf00      	nop
 808933c:	40023800 	.word	0x40023800

08089340 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8089340:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 8089342:	4b4d      	ldr	r3, [pc, #308]	; (8089478 <TIM_DeInit+0x138>)
 8089344:	4298      	cmp	r0, r3
 8089346:	d106      	bne.n	8089356 <TIM_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8089348:	2101      	movs	r1, #1
 808934a:	4608      	mov	r0, r1
 808934c:	f7ff ffec 	bl	8089328 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 8089350:	2100      	movs	r1, #0
 8089352:	2001      	movs	r0, #1
 8089354:	e044      	b.n	80893e0 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM2)
 8089356:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 808935a:	d106      	bne.n	808936a <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 808935c:	2101      	movs	r1, #1
 808935e:	4608      	mov	r0, r1
 8089360:	f7ff ffd6 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8089364:	2100      	movs	r1, #0
 8089366:	2001      	movs	r0, #1
 8089368:	e081      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM3)
 808936a:	4b44      	ldr	r3, [pc, #272]	; (808947c <TIM_DeInit+0x13c>)
 808936c:	4298      	cmp	r0, r3
 808936e:	d106      	bne.n	808937e <TIM_DeInit+0x3e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8089370:	2101      	movs	r1, #1
 8089372:	2002      	movs	r0, #2
 8089374:	f7ff ffcc 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8089378:	2100      	movs	r1, #0
 808937a:	2002      	movs	r0, #2
 808937c:	e077      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM4)
 808937e:	4b40      	ldr	r3, [pc, #256]	; (8089480 <TIM_DeInit+0x140>)
 8089380:	4298      	cmp	r0, r3
 8089382:	d106      	bne.n	8089392 <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8089384:	2101      	movs	r1, #1
 8089386:	2004      	movs	r0, #4
 8089388:	f7ff ffc2 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 808938c:	2100      	movs	r1, #0
 808938e:	2004      	movs	r0, #4
 8089390:	e06d      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM5)
 8089392:	4b3c      	ldr	r3, [pc, #240]	; (8089484 <TIM_DeInit+0x144>)
 8089394:	4298      	cmp	r0, r3
 8089396:	d106      	bne.n	80893a6 <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8089398:	2101      	movs	r1, #1
 808939a:	2008      	movs	r0, #8
 808939c:	f7ff ffb8 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80893a0:	2100      	movs	r1, #0
 80893a2:	2008      	movs	r0, #8
 80893a4:	e063      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM6)
 80893a6:	4b38      	ldr	r3, [pc, #224]	; (8089488 <TIM_DeInit+0x148>)
 80893a8:	4298      	cmp	r0, r3
 80893aa:	d106      	bne.n	80893ba <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80893ac:	2101      	movs	r1, #1
 80893ae:	2010      	movs	r0, #16
 80893b0:	f7ff ffae 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80893b4:	2100      	movs	r1, #0
 80893b6:	2010      	movs	r0, #16
 80893b8:	e059      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM7)
 80893ba:	4b34      	ldr	r3, [pc, #208]	; (808948c <TIM_DeInit+0x14c>)
 80893bc:	4298      	cmp	r0, r3
 80893be:	d106      	bne.n	80893ce <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80893c0:	2101      	movs	r1, #1
 80893c2:	2020      	movs	r0, #32
 80893c4:	f7ff ffa4 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80893c8:	2100      	movs	r1, #0
 80893ca:	2020      	movs	r0, #32
 80893cc:	e04f      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM8)
 80893ce:	4b30      	ldr	r3, [pc, #192]	; (8089490 <TIM_DeInit+0x150>)
 80893d0:	4298      	cmp	r0, r3
 80893d2:	d109      	bne.n	80893e8 <TIM_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80893d4:	2101      	movs	r1, #1
 80893d6:	2002      	movs	r0, #2
 80893d8:	f7ff ffa6 	bl	8089328 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80893dc:	2100      	movs	r1, #0
 80893de:	2002      	movs	r0, #2
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 80893e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM8)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80893e4:	f7ff bfa0 	b.w	8089328 <RCC_APB2PeriphResetCmd>
  }
  else if (TIMx == TIM9)
 80893e8:	4b2a      	ldr	r3, [pc, #168]	; (8089494 <TIM_DeInit+0x154>)
 80893ea:	4298      	cmp	r0, r3
 80893ec:	d108      	bne.n	8089400 <TIM_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80893ee:	2101      	movs	r1, #1
 80893f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80893f4:	f7ff ff98 	bl	8089328 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 80893f8:	2100      	movs	r1, #0
 80893fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80893fe:	e7ef      	b.n	80893e0 <TIM_DeInit+0xa0>
   }
  else if (TIMx == TIM10)
 8089400:	4b25      	ldr	r3, [pc, #148]	; (8089498 <TIM_DeInit+0x158>)
 8089402:	4298      	cmp	r0, r3
 8089404:	d108      	bne.n	8089418 <TIM_DeInit+0xd8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8089406:	2101      	movs	r1, #1
 8089408:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 808940c:	f7ff ff8c 	bl	8089328 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 8089410:	2100      	movs	r1, #0
 8089412:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8089416:	e7e3      	b.n	80893e0 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM11)
 8089418:	4b20      	ldr	r3, [pc, #128]	; (808949c <TIM_DeInit+0x15c>)
 808941a:	4298      	cmp	r0, r3
 808941c:	d108      	bne.n	8089430 <TIM_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 808941e:	2101      	movs	r1, #1
 8089420:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8089424:	f7ff ff80 	bl	8089328 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 8089428:	2100      	movs	r1, #0
 808942a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 808942e:	e7d7      	b.n	80893e0 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM12)
 8089430:	4b1b      	ldr	r3, [pc, #108]	; (80894a0 <TIM_DeInit+0x160>)
 8089432:	4298      	cmp	r0, r3
 8089434:	d106      	bne.n	8089444 <TIM_DeInit+0x104>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8089436:	2101      	movs	r1, #1
 8089438:	2040      	movs	r0, #64	; 0x40
 808943a:	f7ff ff69 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 808943e:	2100      	movs	r1, #0
 8089440:	2040      	movs	r0, #64	; 0x40
 8089442:	e014      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM13)
 8089444:	4b17      	ldr	r3, [pc, #92]	; (80894a4 <TIM_DeInit+0x164>)
 8089446:	4298      	cmp	r0, r3
 8089448:	d106      	bne.n	8089458 <TIM_DeInit+0x118>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 808944a:	2101      	movs	r1, #1
 808944c:	2080      	movs	r0, #128	; 0x80
 808944e:	f7ff ff5f 	bl	8089310 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 8089452:	2100      	movs	r1, #0
 8089454:	2080      	movs	r0, #128	; 0x80
 8089456:	e00a      	b.n	808946e <TIM_DeInit+0x12e>
  }
  else
  {
    if (TIMx == TIM14)
 8089458:	4b13      	ldr	r3, [pc, #76]	; (80894a8 <TIM_DeInit+0x168>)
 808945a:	4298      	cmp	r0, r3
 808945c:	d10b      	bne.n	8089476 <TIM_DeInit+0x136>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 808945e:	2101      	movs	r1, #1
 8089460:	f44f 7080 	mov.w	r0, #256	; 0x100
 8089464:	f7ff ff54 	bl	8089310 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8089468:	2100      	movs	r1, #0
 808946a:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 808946e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM14)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8089472:	f7ff bf4d 	b.w	8089310 <RCC_APB1PeriphResetCmd>
 8089476:	bd08      	pop	{r3, pc}
 8089478:	40010000 	.word	0x40010000
 808947c:	40000400 	.word	0x40000400
 8089480:	40000800 	.word	0x40000800
 8089484:	40000c00 	.word	0x40000c00
 8089488:	40001000 	.word	0x40001000
 808948c:	40001400 	.word	0x40001400
 8089490:	40010400 	.word	0x40010400
 8089494:	40014000 	.word	0x40014000
 8089498:	40014400 	.word	0x40014400
 808949c:	40014800 	.word	0x40014800
 80894a0:	40001800 	.word	0x40001800
 80894a4:	40001c00 	.word	0x40001c00
 80894a8:	40002000 	.word	0x40002000

080894ac <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80894ac:	4a1c      	ldr	r2, [pc, #112]	; (8089520 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80894ae:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80894b0:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80894b2:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80894b4:	d012      	beq.n	80894dc <TIM_TimeBaseInit+0x30>
 80894b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80894ba:	4290      	cmp	r0, r2
 80894bc:	d00e      	beq.n	80894dc <TIM_TimeBaseInit+0x30>
 80894be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80894c2:	d00b      	beq.n	80894dc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80894c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80894c8:	4290      	cmp	r0, r2
 80894ca:	d007      	beq.n	80894dc <TIM_TimeBaseInit+0x30>
 80894cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80894d0:	4290      	cmp	r0, r2
 80894d2:	d003      	beq.n	80894dc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5))
 80894d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80894d8:	4290      	cmp	r0, r2
 80894da:	d103      	bne.n	80894e4 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80894dc:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80894de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80894e2:	4313      	orrs	r3, r2
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 80894e4:	4a0f      	ldr	r2, [pc, #60]	; (8089524 <TIM_TimeBaseInit+0x78>)
 80894e6:	4290      	cmp	r0, r2
 80894e8:	d008      	beq.n	80894fc <TIM_TimeBaseInit+0x50>
 80894ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80894ee:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80894f0:	bf1f      	itttt	ne
 80894f2:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80894f6:	890a      	ldrhne	r2, [r1, #8]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80894f8:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80894fa:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80894fc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80894fe:	684b      	ldr	r3, [r1, #4]
 8089500:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8089502:	880b      	ldrh	r3, [r1, #0]
 8089504:	8503      	strh	r3, [r0, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8089506:	4b06      	ldr	r3, [pc, #24]	; (8089520 <TIM_TimeBaseInit+0x74>)
 8089508:	4298      	cmp	r0, r3
 808950a:	d003      	beq.n	8089514 <TIM_TimeBaseInit+0x68>
 808950c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8089510:	4298      	cmp	r0, r3
 8089512:	d101      	bne.n	8089518 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8089514:	7a8b      	ldrb	r3, [r1, #10]
 8089516:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8089518:	2301      	movs	r3, #1
 808951a:	8283      	strh	r3, [r0, #20]
 808951c:	4770      	bx	lr
 808951e:	bf00      	nop
 8089520:	40010000 	.word	0x40010000
 8089524:	40001000 	.word	0x40001000

08089528 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8089528:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 808952a:	b119      	cbz	r1, 8089534 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 808952c:	b29b      	uxth	r3, r3
 808952e:	f043 0301 	orr.w	r3, r3, #1
 8089532:	e003      	b.n	808953c <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8089534:	f023 0301 	bic.w	r3, r3, #1
 8089538:	041b      	lsls	r3, r3, #16
 808953a:	0c1b      	lsrs	r3, r3, #16
 808953c:	8003      	strh	r3, [r0, #0]
 808953e:	4770      	bx	lr

08089540 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8089540:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 8089542:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8089544:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 8089548:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 808954a:	d003      	beq.n	8089554 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 808954c:	4211      	tst	r1, r2
 808954e:	bf14      	ite	ne
 8089550:	2001      	movne	r0, #1
 8089552:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8089554:	4770      	bx	lr

08089556 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8089556:	43c9      	mvns	r1, r1
 8089558:	b289      	uxth	r1, r1
 808955a:	8201      	strh	r1, [r0, #16]
 808955c:	4770      	bx	lr

0808955e <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 808955e:	8983      	ldrh	r3, [r0, #12]
 8089560:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8089562:	b10a      	cbz	r2, 8089568 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 8089564:	4319      	orrs	r1, r3
 8089566:	e001      	b.n	808956c <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8089568:	ea23 0101 	bic.w	r1, r3, r1
 808956c:	8181      	strh	r1, [r0, #12]
 808956e:	4770      	bx	lr

08089570 <TIM_ITConfig>:
 8089570:	f7ff bff5 	b.w	808955e <TIM_DMACmd>

08089574 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8089574:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8089576:	4e1a      	ldr	r6, [pc, #104]	; (80895e0 <pinAvailable+0x6c>)
 8089578:	4604      	mov	r4, r0
 808957a:	6831      	ldr	r1, [r6, #0]
 808957c:	f011 0501 	ands.w	r5, r1, #1
 8089580:	d10f      	bne.n	80895a2 <pinAvailable+0x2e>
 8089582:	4630      	mov	r0, r6
 8089584:	f7f6 fd9e 	bl	80800c4 <__cxa_guard_acquire>
 8089588:	b158      	cbz	r0, 80895a2 <pinAvailable+0x2e>
 808958a:	4629      	mov	r1, r5
 808958c:	4815      	ldr	r0, [pc, #84]	; (80895e4 <pinAvailable+0x70>)
 808958e:	f7fc fc23 	bl	8085dd8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8089592:	4630      	mov	r0, r6
 8089594:	f7f6 fd9b 	bl	80800ce <__cxa_guard_release>
 8089598:	4a13      	ldr	r2, [pc, #76]	; (80895e8 <pinAvailable+0x74>)
 808959a:	4914      	ldr	r1, [pc, #80]	; (80895ec <pinAvailable+0x78>)
 808959c:	4811      	ldr	r0, [pc, #68]	; (80895e4 <pinAvailable+0x70>)
 808959e:	f000 f937 	bl	8089810 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80895a2:	4810      	ldr	r0, [pc, #64]	; (80895e4 <pinAvailable+0x70>)
 80895a4:	f7fc fcda 	bl	8085f5c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80895a8:	b128      	cbz	r0, 80895b6 <pinAvailable+0x42>
 80895aa:	f1a4 030d 	sub.w	r3, r4, #13
 80895ae:	2b02      	cmp	r3, #2
 80895b0:	d801      	bhi.n	80895b6 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80895b2:	2000      	movs	r0, #0
 80895b4:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80895b6:	f000 f8df 	bl	8089778 <_Z19__fetch_global_Wirev>
 80895ba:	f7ff fbf2 	bl	8088da2 <_ZN7TwoWire9isEnabledEv>
 80895be:	b108      	cbz	r0, 80895c4 <pinAvailable+0x50>
 80895c0:	2c01      	cmp	r4, #1
 80895c2:	d9f6      	bls.n	80895b2 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80895c4:	f7ff fb30 	bl	8088c28 <_Z22__fetch_global_Serial1v>
 80895c8:	f7ff fb2a 	bl	8088c20 <_ZN11USARTSerial9isEnabledEv>
 80895cc:	b118      	cbz	r0, 80895d6 <pinAvailable+0x62>
 80895ce:	f1a4 0312 	sub.w	r3, r4, #18
 80895d2:	2b01      	cmp	r3, #1
 80895d4:	d9ed      	bls.n	80895b2 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80895d6:	2c2e      	cmp	r4, #46	; 0x2e
 80895d8:	bf8c      	ite	hi
 80895da:	2000      	movhi	r0, #0
 80895dc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80895de:	bd70      	pop	{r4, r5, r6, pc}
 80895e0:	20000148 	.word	0x20000148
 80895e4:	2000014c 	.word	0x2000014c
 80895e8:	20000144 	.word	0x20000144
 80895ec:	080801cf 	.word	0x080801cf

080895f0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80895f0:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80895f2:	b538      	push	{r3, r4, r5, lr}
 80895f4:	4604      	mov	r4, r0
 80895f6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80895f8:	d80a      	bhi.n	8089610 <pinMode+0x20>
 80895fa:	29ff      	cmp	r1, #255	; 0xff
 80895fc:	d008      	beq.n	8089610 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80895fe:	f7ff ffb9 	bl	8089574 <pinAvailable>
 8089602:	b128      	cbz	r0, 8089610 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8089604:	4629      	mov	r1, r5
 8089606:	4620      	mov	r0, r4
}
 8089608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808960c:	f7fb bedc 	b.w	80853c8 <HAL_Pin_Mode>
 8089610:	bd38      	pop	{r3, r4, r5, pc}

08089612 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8089612:	b538      	push	{r3, r4, r5, lr}
 8089614:	4604      	mov	r4, r0
 8089616:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8089618:	f7fb fede 	bl	80853d8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808961c:	28ff      	cmp	r0, #255	; 0xff
 808961e:	d010      	beq.n	8089642 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8089620:	2806      	cmp	r0, #6
 8089622:	d804      	bhi.n	808962e <digitalWrite+0x1c>
 8089624:	234d      	movs	r3, #77	; 0x4d
 8089626:	fa23 f000 	lsr.w	r0, r3, r0
 808962a:	07c3      	lsls	r3, r0, #31
 808962c:	d409      	bmi.n	8089642 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808962e:	4620      	mov	r0, r4
 8089630:	f7ff ffa0 	bl	8089574 <pinAvailable>
 8089634:	b128      	cbz	r0, 8089642 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8089636:	4629      	mov	r1, r5
 8089638:	4620      	mov	r0, r4
}
 808963a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808963e:	f7fb bed3 	b.w	80853e8 <HAL_GPIO_Write>
 8089642:	bd38      	pop	{r3, r4, r5, pc}

08089644 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8089644:	b510      	push	{r4, lr}
 8089646:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8089648:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808964a:	bf9c      	itt	ls
 808964c:	340a      	addls	r4, #10
 808964e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8089650:	4620      	mov	r0, r4
 8089652:	f7ff ff8f 	bl	8089574 <pinAvailable>
 8089656:	b150      	cbz	r0, 808966e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8089658:	2103      	movs	r1, #3
 808965a:	4620      	mov	r0, r4
 808965c:	f7fb feac 	bl	80853b8 <HAL_Validate_Pin_Function>
 8089660:	2803      	cmp	r0, #3
 8089662:	d104      	bne.n	808966e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8089664:	4620      	mov	r0, r4
}
 8089666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808966a:	f7fb bed5 	b.w	8085418 <HAL_ADC_Read>
}
 808966e:	2000      	movs	r0, #0
 8089670:	bd10      	pop	{r4, pc}
	...

08089674 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8089674:	b530      	push	{r4, r5, lr}
 8089676:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8089678:	4d1b      	ldr	r5, [pc, #108]	; (80896e8 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 808967a:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 808967c:	6820      	ldr	r0, [r4, #0]
 808967e:	f7fb ff23 	bl	80854c8 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8089682:	f7fb ff39 	bl	80854f8 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8089686:	682b      	ldr	r3, [r5, #0]
 8089688:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 808968a:	1ac0      	subs	r0, r0, r3
 808968c:	4290      	cmp	r0, r2
 808968e:	d3f5      	bcc.n	808967c <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 8089690:	6823      	ldr	r3, [r4, #0]
 8089692:	b333      	cbz	r3, 80896e2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8089694:	68e3      	ldr	r3, [r4, #12]
 8089696:	b323      	cbz	r3, 80896e2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089698:	1d25      	adds	r5, r4, #4
 808969a:	6923      	ldr	r3, [r4, #16]
 808969c:	4628      	mov	r0, r5
 808969e:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80896a0:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80896a2:	a904      	add	r1, sp, #16
 80896a4:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80896a6:	9302      	str	r3, [sp, #8]
 80896a8:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80896aa:	f7fe fbe7 	bl	8087e7c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80896ae:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80896b0:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80896b2:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80896b4:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80896b6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80896b8:	9a07      	ldr	r2, [sp, #28]
 80896ba:	4629      	mov	r1, r5
 80896bc:	a804      	add	r0, sp, #16
 80896be:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80896c0:	9307      	str	r3, [sp, #28]
 80896c2:	f7fe fbdb 	bl	8087e7c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80896c6:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80896c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80896ca:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80896cc:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80896ce:	9206      	str	r2, [sp, #24]
 80896d0:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80896d2:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80896d4:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80896d6:	9207      	str	r2, [sp, #28]
 80896d8:	f7f6 fdca 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
 80896dc:	4668      	mov	r0, sp
 80896de:	f7f6 fdc7 	bl	8080270 <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80896e2:	b009      	add	sp, #36	; 0x24
 80896e4:	bd30      	pop	{r4, r5, pc}
 80896e6:	bf00      	nop
 80896e8:	20000edc 	.word	0x20000edc

080896ec <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80896ec:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80896ee:	f7ff ffc1 	bl	8089674 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80896f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80896f6:	2000      	movs	r0, #0
 80896f8:	f7fb bf26 	b.w	8085548 <os_thread_cleanup>

080896fc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80896fc:	b513      	push	{r0, r1, r4, lr}
 80896fe:	4c08      	ldr	r4, [pc, #32]	; (8089720 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8089700:	2300      	movs	r3, #0
 8089702:	461a      	mov	r2, r3
 8089704:	4619      	mov	r1, r3
 8089706:	9300      	str	r3, [sp, #0]
 8089708:	4620      	mov	r0, r4
 808970a:	f7ff f847 	bl	808879c <_ZN9IPAddressC1Ehhhh>
 808970e:	4620      	mov	r0, r4
 8089710:	4a04      	ldr	r2, [pc, #16]	; (8089724 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8089712:	4905      	ldr	r1, [pc, #20]	; (8089728 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8089714:	b002      	add	sp, #8
 8089716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808971a:	f000 b879 	b.w	8089810 <__aeabi_atexit>
 808971e:	bf00      	nop
 8089720:	20000ee0 	.word	0x20000ee0
 8089724:	20000144 	.word	0x20000144
 8089728:	0808870d 	.word	0x0808870d

0808972c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 808972c:	b570      	push	{r4, r5, r6, lr}
 808972e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8089730:	2514      	movs	r5, #20
 8089732:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089734:	4e09      	ldr	r6, [pc, #36]	; (808975c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8089736:	2100      	movs	r1, #0
 8089738:	f001 fdd1 	bl	808b2de <memset>
 808973c:	8025      	strh	r5, [r4, #0]
 808973e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089740:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8089742:	60a5      	str	r5, [r4, #8]
 8089744:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089746:	4628      	mov	r0, r5
 8089748:	f000 f872 	bl	8089830 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808974c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808974e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089750:	4628      	mov	r0, r5
 8089752:	f000 f86d 	bl	8089830 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8089756:	60e0      	str	r0, [r4, #12]

	return config;
}
 8089758:	4620      	mov	r0, r4
 808975a:	bd70      	pop	{r4, r5, r6, pc}
 808975c:	0808f14e 	.word	0x0808f14e

08089760 <_Z17acquireWireBufferv>:
 8089760:	b510      	push	{r4, lr}
 8089762:	4604      	mov	r4, r0
 8089764:	f7ff ffe2 	bl	808972c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8089768:	4620      	mov	r0, r4
 808976a:	bd10      	pop	{r4, pc}

0808976c <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 808976c:	b510      	push	{r4, lr}
 808976e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8089770:	f7ff ffdc 	bl	808972c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8089774:	4620      	mov	r0, r4
 8089776:	bd10      	pop	{r4, pc}

08089778 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8089778:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808977a:	4d0e      	ldr	r5, [pc, #56]	; (80897b4 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808977c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808977e:	6829      	ldr	r1, [r5, #0]
 8089780:	f011 0401 	ands.w	r4, r1, #1
 8089784:	d113      	bne.n	80897ae <_Z19__fetch_global_Wirev+0x36>
 8089786:	4628      	mov	r0, r5
 8089788:	f7f6 fc9c 	bl	80800c4 <__cxa_guard_acquire>
 808978c:	b178      	cbz	r0, 80897ae <_Z19__fetch_global_Wirev+0x36>
 808978e:	a801      	add	r0, sp, #4
 8089790:	f7ff ffe6 	bl	8089760 <_Z17acquireWireBufferv>
 8089794:	aa01      	add	r2, sp, #4
 8089796:	4621      	mov	r1, r4
 8089798:	4807      	ldr	r0, [pc, #28]	; (80897b8 <_Z19__fetch_global_Wirev+0x40>)
 808979a:	f7ff faab 	bl	8088cf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 808979e:	4628      	mov	r0, r5
 80897a0:	f7f6 fc95 	bl	80800ce <__cxa_guard_release>
 80897a4:	4a05      	ldr	r2, [pc, #20]	; (80897bc <_Z19__fetch_global_Wirev+0x44>)
 80897a6:	4906      	ldr	r1, [pc, #24]	; (80897c0 <_Z19__fetch_global_Wirev+0x48>)
 80897a8:	4803      	ldr	r0, [pc, #12]	; (80897b8 <_Z19__fetch_global_Wirev+0x40>)
 80897aa:	f000 f831 	bl	8089810 <__aeabi_atexit>
	return wire;
}
 80897ae:	4802      	ldr	r0, [pc, #8]	; (80897b8 <_Z19__fetch_global_Wirev+0x40>)
 80897b0:	b007      	add	sp, #28
 80897b2:	bd30      	pop	{r4, r5, pc}
 80897b4:	20000ee8 	.word	0x20000ee8
 80897b8:	20000f00 	.word	0x20000f00
 80897bc:	20000144 	.word	0x20000144
 80897c0:	08088c9d 	.word	0x08088c9d

080897c4 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80897c4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80897c6:	4c0e      	ldr	r4, [pc, #56]	; (8089800 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80897c8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80897ca:	6823      	ldr	r3, [r4, #0]
 80897cc:	07db      	lsls	r3, r3, #31
 80897ce:	d413      	bmi.n	80897f8 <_Z20__fetch_global_Wire3v+0x34>
 80897d0:	4620      	mov	r0, r4
 80897d2:	f7f6 fc77 	bl	80800c4 <__cxa_guard_acquire>
 80897d6:	b178      	cbz	r0, 80897f8 <_Z20__fetch_global_Wire3v+0x34>
 80897d8:	a801      	add	r0, sp, #4
 80897da:	f7ff ffc7 	bl	808976c <_Z18acquireWire3Bufferv>
 80897de:	aa01      	add	r2, sp, #4
 80897e0:	2102      	movs	r1, #2
 80897e2:	4808      	ldr	r0, [pc, #32]	; (8089804 <_Z20__fetch_global_Wire3v+0x40>)
 80897e4:	f7ff fa86 	bl	8088cf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80897e8:	4620      	mov	r0, r4
 80897ea:	f7f6 fc70 	bl	80800ce <__cxa_guard_release>
 80897ee:	4a06      	ldr	r2, [pc, #24]	; (8089808 <_Z20__fetch_global_Wire3v+0x44>)
 80897f0:	4906      	ldr	r1, [pc, #24]	; (808980c <_Z20__fetch_global_Wire3v+0x48>)
 80897f2:	4804      	ldr	r0, [pc, #16]	; (8089804 <_Z20__fetch_global_Wire3v+0x40>)
 80897f4:	f000 f80c 	bl	8089810 <__aeabi_atexit>
	return wire;
}
 80897f8:	4802      	ldr	r0, [pc, #8]	; (8089804 <_Z20__fetch_global_Wire3v+0x40>)
 80897fa:	b006      	add	sp, #24
 80897fc:	bd10      	pop	{r4, pc}
 80897fe:	bf00      	nop
 8089800:	20000f14 	.word	0x20000f14
 8089804:	20000eec 	.word	0x20000eec
 8089808:	20000144 	.word	0x20000144
 808980c:	08088c9d 	.word	0x08088c9d

08089810 <__aeabi_atexit>:
 8089810:	460b      	mov	r3, r1
 8089812:	4601      	mov	r1, r0
 8089814:	4618      	mov	r0, r3
 8089816:	f001 bc23 	b.w	808b060 <__cxa_atexit>
	...

0808981c <_ZSt15get_new_handlerv>:
 808981c:	4b02      	ldr	r3, [pc, #8]	; (8089828 <_ZSt15get_new_handlerv+0xc>)
 808981e:	6818      	ldr	r0, [r3, #0]
 8089820:	f3bf 8f5f 	dmb	sy
 8089824:	4770      	bx	lr
 8089826:	bf00      	nop
 8089828:	20000f18 	.word	0x20000f18

0808982c <_ZdlPvj>:
 808982c:	f7f6 bc3b 	b.w	80800a6 <_ZdlPv>

08089830 <_ZnajRKSt9nothrow_t>:
 8089830:	f000 b800 	b.w	8089834 <_ZnwjRKSt9nothrow_t>

08089834 <_ZnwjRKSt9nothrow_t>:
 8089834:	b510      	push	{r4, lr}
 8089836:	2800      	cmp	r0, #0
 8089838:	bf14      	ite	ne
 808983a:	4604      	movne	r4, r0
 808983c:	2401      	moveq	r4, #1
 808983e:	4620      	mov	r0, r4
 8089840:	f7fc f910 	bl	8085a64 <malloc>
 8089844:	b920      	cbnz	r0, 8089850 <_ZnwjRKSt9nothrow_t+0x1c>
 8089846:	f7ff ffe9 	bl	808981c <_ZSt15get_new_handlerv>
 808984a:	b108      	cbz	r0, 8089850 <_ZnwjRKSt9nothrow_t+0x1c>
 808984c:	4780      	blx	r0
 808984e:	e7f6      	b.n	808983e <_ZnwjRKSt9nothrow_t+0xa>
 8089850:	bd10      	pop	{r4, pc}

08089852 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8089852:	68c3      	ldr	r3, [r0, #12]
 8089854:	689a      	ldr	r2, [r3, #8]
 8089856:	60c2      	str	r2, [r0, #12]
 8089858:	b102      	cbz	r2, 808985c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 808985a:	6050      	str	r0, [r2, #4]
 808985c:	6842      	ldr	r2, [r0, #4]
 808985e:	605a      	str	r2, [r3, #4]
 8089860:	680a      	ldr	r2, [r1, #0]
 8089862:	4290      	cmp	r0, r2
 8089864:	d101      	bne.n	808986a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
 8089866:	600b      	str	r3, [r1, #0]
 8089868:	e005      	b.n	8089876 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
 808986a:	6842      	ldr	r2, [r0, #4]
 808986c:	6891      	ldr	r1, [r2, #8]
 808986e:	4288      	cmp	r0, r1
 8089870:	bf0c      	ite	eq
 8089872:	6093      	streq	r3, [r2, #8]
 8089874:	60d3      	strne	r3, [r2, #12]
 8089876:	6098      	str	r0, [r3, #8]
 8089878:	6043      	str	r3, [r0, #4]
 808987a:	4770      	bx	lr

0808987c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 808987c:	6883      	ldr	r3, [r0, #8]
 808987e:	68da      	ldr	r2, [r3, #12]
 8089880:	6082      	str	r2, [r0, #8]
 8089882:	b102      	cbz	r2, 8089886 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 8089884:	6050      	str	r0, [r2, #4]
 8089886:	6842      	ldr	r2, [r0, #4]
 8089888:	605a      	str	r2, [r3, #4]
 808988a:	680a      	ldr	r2, [r1, #0]
 808988c:	4290      	cmp	r0, r2
 808988e:	d101      	bne.n	8089894 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
 8089890:	600b      	str	r3, [r1, #0]
 8089892:	e005      	b.n	80898a0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
 8089894:	6842      	ldr	r2, [r0, #4]
 8089896:	68d1      	ldr	r1, [r2, #12]
 8089898:	4288      	cmp	r0, r1
 808989a:	bf0c      	ite	eq
 808989c:	60d3      	streq	r3, [r2, #12]
 808989e:	6093      	strne	r3, [r2, #8]
 80898a0:	60d8      	str	r0, [r3, #12]
 80898a2:	6043      	str	r3, [r0, #4]
 80898a4:	4770      	bx	lr

080898a6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80898a6:	7803      	ldrb	r3, [r0, #0]
 80898a8:	b92b      	cbnz	r3, 80898b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 80898aa:	6843      	ldr	r3, [r0, #4]
 80898ac:	685b      	ldr	r3, [r3, #4]
 80898ae:	4298      	cmp	r0, r3
 80898b0:	d101      	bne.n	80898b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 80898b2:	68c3      	ldr	r3, [r0, #12]
 80898b4:	e00c      	b.n	80898d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80898b6:	6883      	ldr	r3, [r0, #8]
 80898b8:	b11b      	cbz	r3, 80898c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
 80898ba:	68da      	ldr	r2, [r3, #12]
 80898bc:	b142      	cbz	r2, 80898d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80898be:	4613      	mov	r3, r2
 80898c0:	e7fb      	b.n	80898ba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 80898c2:	6843      	ldr	r3, [r0, #4]
 80898c4:	689a      	ldr	r2, [r3, #8]
 80898c6:	4282      	cmp	r2, r0
 80898c8:	d102      	bne.n	80898d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80898ca:	4618      	mov	r0, r3
 80898cc:	685b      	ldr	r3, [r3, #4]
 80898ce:	e7f9      	b.n	80898c4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
 80898d0:	4618      	mov	r0, r3
 80898d2:	4770      	bx	lr

080898d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80898d4:	68c3      	ldr	r3, [r0, #12]
 80898d6:	b123      	cbz	r3, 80898e2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80898d8:	4618      	mov	r0, r3
 80898da:	689b      	ldr	r3, [r3, #8]
 80898dc:	2b00      	cmp	r3, #0
 80898de:	d1fb      	bne.n	80898d8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80898e0:	e00a      	b.n	80898f8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 80898e2:	6843      	ldr	r3, [r0, #4]
 80898e4:	68da      	ldr	r2, [r3, #12]
 80898e6:	4282      	cmp	r2, r0
 80898e8:	d102      	bne.n	80898f0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80898ea:	4618      	mov	r0, r3
 80898ec:	685b      	ldr	r3, [r3, #4]
 80898ee:	e7f9      	b.n	80898e4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80898f0:	68c2      	ldr	r2, [r0, #12]
 80898f2:	4293      	cmp	r3, r2
 80898f4:	bf18      	it	ne
 80898f6:	4618      	movne	r0, r3
 80898f8:	4770      	bx	lr

080898fa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80898fa:	f7ff bfd4 	b.w	80898a6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080898fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80898fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089902:	461f      	mov	r7, r3
 8089904:	f103 0904 	add.w	r9, r3, #4
 8089908:	2300      	movs	r3, #0
 808990a:	460c      	mov	r4, r1
 808990c:	604a      	str	r2, [r1, #4]
 808990e:	608b      	str	r3, [r1, #8]
 8089910:	60cb      	str	r3, [r1, #12]
 8089912:	700b      	strb	r3, [r1, #0]
 8089914:	b168      	cbz	r0, 8089932 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
 8089916:	4297      	cmp	r7, r2
 8089918:	6091      	str	r1, [r2, #8]
 808991a:	d101      	bne.n	8089920 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 808991c:	6079      	str	r1, [r7, #4]
 808991e:	e00c      	b.n	808993a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
 8089920:	68bb      	ldr	r3, [r7, #8]
 8089922:	429a      	cmp	r2, r3
 8089924:	bf08      	it	eq
 8089926:	60b9      	streq	r1, [r7, #8]
 8089928:	f04f 0801 	mov.w	r8, #1
 808992c:	f04f 0a00 	mov.w	sl, #0
 8089930:	e017      	b.n	8089962 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8089932:	60d1      	str	r1, [r2, #12]
 8089934:	68fb      	ldr	r3, [r7, #12]
 8089936:	429a      	cmp	r2, r3
 8089938:	d1f6      	bne.n	8089928 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 808993a:	60fc      	str	r4, [r7, #12]
 808993c:	e7f4      	b.n	8089928 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 808993e:	6866      	ldr	r6, [r4, #4]
 8089940:	7832      	ldrb	r2, [r6, #0]
 8089942:	2a00      	cmp	r2, #0
 8089944:	d13a      	bne.n	80899bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 8089946:	6875      	ldr	r5, [r6, #4]
 8089948:	68ab      	ldr	r3, [r5, #8]
 808994a:	429e      	cmp	r6, r3
 808994c:	d11f      	bne.n	808998e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 808994e:	68eb      	ldr	r3, [r5, #12]
 8089950:	b15b      	cbz	r3, 808996a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8089952:	781a      	ldrb	r2, [r3, #0]
 8089954:	b94a      	cbnz	r2, 808996a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8089956:	f886 8000 	strb.w	r8, [r6]
 808995a:	f883 8000 	strb.w	r8, [r3]
 808995e:	702a      	strb	r2, [r5, #0]
 8089960:	462c      	mov	r4, r5
 8089962:	687b      	ldr	r3, [r7, #4]
 8089964:	429c      	cmp	r4, r3
 8089966:	d1ea      	bne.n	808993e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8089968:	e028      	b.n	80899bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 808996a:	68f3      	ldr	r3, [r6, #12]
 808996c:	429c      	cmp	r4, r3
 808996e:	d104      	bne.n	808997a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8089970:	4649      	mov	r1, r9
 8089972:	4630      	mov	r0, r6
 8089974:	f7ff ff6d 	bl	8089852 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8089978:	4634      	mov	r4, r6
 808997a:	6863      	ldr	r3, [r4, #4]
 808997c:	4649      	mov	r1, r9
 808997e:	f883 8000 	strb.w	r8, [r3]
 8089982:	4628      	mov	r0, r5
 8089984:	f885 a000 	strb.w	sl, [r5]
 8089988:	f7ff ff78 	bl	808987c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 808998c:	e014      	b.n	80899b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
 808998e:	b113      	cbz	r3, 8089996 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 8089990:	781a      	ldrb	r2, [r3, #0]
 8089992:	2a00      	cmp	r2, #0
 8089994:	d0df      	beq.n	8089956 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8089996:	68b3      	ldr	r3, [r6, #8]
 8089998:	429c      	cmp	r4, r3
 808999a:	d104      	bne.n	80899a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 808999c:	4649      	mov	r1, r9
 808999e:	4630      	mov	r0, r6
 80899a0:	f7ff ff6c 	bl	808987c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80899a4:	4634      	mov	r4, r6
 80899a6:	6863      	ldr	r3, [r4, #4]
 80899a8:	4649      	mov	r1, r9
 80899aa:	f883 8000 	strb.w	r8, [r3]
 80899ae:	4628      	mov	r0, r5
 80899b0:	f885 a000 	strb.w	sl, [r5]
 80899b4:	f7ff ff4d 	bl	8089852 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80899b8:	4625      	mov	r5, r4
 80899ba:	e7d1      	b.n	8089960 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
 80899bc:	2201      	movs	r2, #1
 80899be:	701a      	strb	r2, [r3, #0]
 80899c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080899c4 <_ZSt25__throw_bad_function_callv>:
 80899c4:	b508      	push	{r3, lr}
 80899c6:	f7fc f895 	bl	8085af4 <abort>
	...

080899cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80899cc:	4b18      	ldr	r3, [pc, #96]	; (8089a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80899ce:	681a      	ldr	r2, [r3, #0]
 80899d0:	07d1      	lsls	r1, r2, #31
 80899d2:	bf5c      	itt	pl
 80899d4:	2201      	movpl	r2, #1
 80899d6:	601a      	strpl	r2, [r3, #0]
 80899d8:	4b16      	ldr	r3, [pc, #88]	; (8089a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80899da:	681a      	ldr	r2, [r3, #0]
 80899dc:	07d2      	lsls	r2, r2, #31
 80899de:	bf5c      	itt	pl
 80899e0:	2201      	movpl	r2, #1
 80899e2:	601a      	strpl	r2, [r3, #0]
 80899e4:	4b14      	ldr	r3, [pc, #80]	; (8089a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80899e6:	681a      	ldr	r2, [r3, #0]
 80899e8:	07d0      	lsls	r0, r2, #31
 80899ea:	bf5c      	itt	pl
 80899ec:	2201      	movpl	r2, #1
 80899ee:	601a      	strpl	r2, [r3, #0]
 80899f0:	4b12      	ldr	r3, [pc, #72]	; (8089a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80899f2:	681a      	ldr	r2, [r3, #0]
 80899f4:	07d1      	lsls	r1, r2, #31
 80899f6:	bf5c      	itt	pl
 80899f8:	2201      	movpl	r2, #1
 80899fa:	601a      	strpl	r2, [r3, #0]
 80899fc:	4b10      	ldr	r3, [pc, #64]	; (8089a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80899fe:	681a      	ldr	r2, [r3, #0]
 8089a00:	07d2      	lsls	r2, r2, #31
 8089a02:	bf5c      	itt	pl
 8089a04:	2201      	movpl	r2, #1
 8089a06:	601a      	strpl	r2, [r3, #0]
 8089a08:	4b0e      	ldr	r3, [pc, #56]	; (8089a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8089a0a:	681a      	ldr	r2, [r3, #0]
 8089a0c:	07d0      	lsls	r0, r2, #31
 8089a0e:	bf5c      	itt	pl
 8089a10:	2201      	movpl	r2, #1
 8089a12:	601a      	strpl	r2, [r3, #0]
 8089a14:	4b0c      	ldr	r3, [pc, #48]	; (8089a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8089a16:	681a      	ldr	r2, [r3, #0]
 8089a18:	07d1      	lsls	r1, r2, #31
 8089a1a:	bf5c      	itt	pl
 8089a1c:	2201      	movpl	r2, #1
 8089a1e:	601a      	strpl	r2, [r3, #0]
 8089a20:	4b0a      	ldr	r3, [pc, #40]	; (8089a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8089a22:	681a      	ldr	r2, [r3, #0]
 8089a24:	07d2      	lsls	r2, r2, #31
 8089a26:	bf5c      	itt	pl
 8089a28:	2201      	movpl	r2, #1
 8089a2a:	601a      	strpl	r2, [r3, #0]
 8089a2c:	4770      	bx	lr
 8089a2e:	bf00      	nop
 8089a30:	20000f38 	.word	0x20000f38
 8089a34:	20000f34 	.word	0x20000f34
 8089a38:	20000f30 	.word	0x20000f30
 8089a3c:	20000f2c 	.word	0x20000f2c
 8089a40:	20000f28 	.word	0x20000f28
 8089a44:	20000f24 	.word	0x20000f24
 8089a48:	20000f20 	.word	0x20000f20
 8089a4c:	20000f1c 	.word	0x20000f1c

08089a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8089a50:	4b24      	ldr	r3, [pc, #144]	; (8089ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8089a52:	681a      	ldr	r2, [r3, #0]
 8089a54:	07d0      	lsls	r0, r2, #31
 8089a56:	bf5c      	itt	pl
 8089a58:	2201      	movpl	r2, #1
 8089a5a:	601a      	strpl	r2, [r3, #0]
 8089a5c:	4b22      	ldr	r3, [pc, #136]	; (8089ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8089a5e:	681a      	ldr	r2, [r3, #0]
 8089a60:	07d1      	lsls	r1, r2, #31
 8089a62:	bf5c      	itt	pl
 8089a64:	2201      	movpl	r2, #1
 8089a66:	601a      	strpl	r2, [r3, #0]
 8089a68:	4b20      	ldr	r3, [pc, #128]	; (8089aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8089a6a:	681a      	ldr	r2, [r3, #0]
 8089a6c:	07d2      	lsls	r2, r2, #31
 8089a6e:	bf5c      	itt	pl
 8089a70:	2201      	movpl	r2, #1
 8089a72:	601a      	strpl	r2, [r3, #0]
 8089a74:	4b1e      	ldr	r3, [pc, #120]	; (8089af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8089a76:	681a      	ldr	r2, [r3, #0]
 8089a78:	07d0      	lsls	r0, r2, #31
 8089a7a:	bf5c      	itt	pl
 8089a7c:	2201      	movpl	r2, #1
 8089a7e:	601a      	strpl	r2, [r3, #0]
 8089a80:	4b1c      	ldr	r3, [pc, #112]	; (8089af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8089a82:	681a      	ldr	r2, [r3, #0]
 8089a84:	07d1      	lsls	r1, r2, #31
 8089a86:	bf5c      	itt	pl
 8089a88:	2201      	movpl	r2, #1
 8089a8a:	601a      	strpl	r2, [r3, #0]
 8089a8c:	4b1a      	ldr	r3, [pc, #104]	; (8089af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8089a8e:	681a      	ldr	r2, [r3, #0]
 8089a90:	07d2      	lsls	r2, r2, #31
 8089a92:	bf5c      	itt	pl
 8089a94:	2201      	movpl	r2, #1
 8089a96:	601a      	strpl	r2, [r3, #0]
 8089a98:	4b18      	ldr	r3, [pc, #96]	; (8089afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8089a9a:	681a      	ldr	r2, [r3, #0]
 8089a9c:	07d0      	lsls	r0, r2, #31
 8089a9e:	bf5c      	itt	pl
 8089aa0:	2201      	movpl	r2, #1
 8089aa2:	601a      	strpl	r2, [r3, #0]
 8089aa4:	4b16      	ldr	r3, [pc, #88]	; (8089b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8089aa6:	681a      	ldr	r2, [r3, #0]
 8089aa8:	07d1      	lsls	r1, r2, #31
 8089aaa:	bf5c      	itt	pl
 8089aac:	2201      	movpl	r2, #1
 8089aae:	601a      	strpl	r2, [r3, #0]
 8089ab0:	4b14      	ldr	r3, [pc, #80]	; (8089b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8089ab2:	681a      	ldr	r2, [r3, #0]
 8089ab4:	07d2      	lsls	r2, r2, #31
 8089ab6:	bf5c      	itt	pl
 8089ab8:	2201      	movpl	r2, #1
 8089aba:	601a      	strpl	r2, [r3, #0]
 8089abc:	4b12      	ldr	r3, [pc, #72]	; (8089b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8089abe:	681a      	ldr	r2, [r3, #0]
 8089ac0:	07d0      	lsls	r0, r2, #31
 8089ac2:	bf5c      	itt	pl
 8089ac4:	2201      	movpl	r2, #1
 8089ac6:	601a      	strpl	r2, [r3, #0]
 8089ac8:	4b10      	ldr	r3, [pc, #64]	; (8089b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8089aca:	681a      	ldr	r2, [r3, #0]
 8089acc:	07d1      	lsls	r1, r2, #31
 8089ace:	bf5c      	itt	pl
 8089ad0:	2201      	movpl	r2, #1
 8089ad2:	601a      	strpl	r2, [r3, #0]
 8089ad4:	4b0e      	ldr	r3, [pc, #56]	; (8089b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8089ad6:	681a      	ldr	r2, [r3, #0]
 8089ad8:	07d2      	lsls	r2, r2, #31
 8089ada:	bf5c      	itt	pl
 8089adc:	2201      	movpl	r2, #1
 8089ade:	601a      	strpl	r2, [r3, #0]
 8089ae0:	4770      	bx	lr
 8089ae2:	bf00      	nop
 8089ae4:	20000f68 	.word	0x20000f68
 8089ae8:	20000f64 	.word	0x20000f64
 8089aec:	20000f60 	.word	0x20000f60
 8089af0:	20000f5c 	.word	0x20000f5c
 8089af4:	20000f58 	.word	0x20000f58
 8089af8:	20000f54 	.word	0x20000f54
 8089afc:	20000f50 	.word	0x20000f50
 8089b00:	20000f4c 	.word	0x20000f4c
 8089b04:	20000f48 	.word	0x20000f48
 8089b08:	20000f44 	.word	0x20000f44
 8089b0c:	20000f40 	.word	0x20000f40
 8089b10:	20000f3c 	.word	0x20000f3c

08089b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8089b14:	4b24      	ldr	r3, [pc, #144]	; (8089ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8089b16:	681a      	ldr	r2, [r3, #0]
 8089b18:	07d0      	lsls	r0, r2, #31
 8089b1a:	bf5c      	itt	pl
 8089b1c:	2201      	movpl	r2, #1
 8089b1e:	601a      	strpl	r2, [r3, #0]
 8089b20:	4b22      	ldr	r3, [pc, #136]	; (8089bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8089b22:	681a      	ldr	r2, [r3, #0]
 8089b24:	07d1      	lsls	r1, r2, #31
 8089b26:	bf5c      	itt	pl
 8089b28:	2201      	movpl	r2, #1
 8089b2a:	601a      	strpl	r2, [r3, #0]
 8089b2c:	4b20      	ldr	r3, [pc, #128]	; (8089bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8089b2e:	681a      	ldr	r2, [r3, #0]
 8089b30:	07d2      	lsls	r2, r2, #31
 8089b32:	bf5c      	itt	pl
 8089b34:	2201      	movpl	r2, #1
 8089b36:	601a      	strpl	r2, [r3, #0]
 8089b38:	4b1e      	ldr	r3, [pc, #120]	; (8089bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8089b3a:	681a      	ldr	r2, [r3, #0]
 8089b3c:	07d0      	lsls	r0, r2, #31
 8089b3e:	bf5c      	itt	pl
 8089b40:	2201      	movpl	r2, #1
 8089b42:	601a      	strpl	r2, [r3, #0]
 8089b44:	4b1c      	ldr	r3, [pc, #112]	; (8089bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8089b46:	681a      	ldr	r2, [r3, #0]
 8089b48:	07d1      	lsls	r1, r2, #31
 8089b4a:	bf5c      	itt	pl
 8089b4c:	2201      	movpl	r2, #1
 8089b4e:	601a      	strpl	r2, [r3, #0]
 8089b50:	4b1a      	ldr	r3, [pc, #104]	; (8089bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8089b52:	681a      	ldr	r2, [r3, #0]
 8089b54:	07d2      	lsls	r2, r2, #31
 8089b56:	bf5c      	itt	pl
 8089b58:	2201      	movpl	r2, #1
 8089b5a:	601a      	strpl	r2, [r3, #0]
 8089b5c:	4b18      	ldr	r3, [pc, #96]	; (8089bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8089b5e:	681a      	ldr	r2, [r3, #0]
 8089b60:	07d0      	lsls	r0, r2, #31
 8089b62:	bf5c      	itt	pl
 8089b64:	2201      	movpl	r2, #1
 8089b66:	601a      	strpl	r2, [r3, #0]
 8089b68:	4b16      	ldr	r3, [pc, #88]	; (8089bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8089b6a:	681a      	ldr	r2, [r3, #0]
 8089b6c:	07d1      	lsls	r1, r2, #31
 8089b6e:	bf5c      	itt	pl
 8089b70:	2201      	movpl	r2, #1
 8089b72:	601a      	strpl	r2, [r3, #0]
 8089b74:	4b14      	ldr	r3, [pc, #80]	; (8089bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8089b76:	681a      	ldr	r2, [r3, #0]
 8089b78:	07d2      	lsls	r2, r2, #31
 8089b7a:	bf5c      	itt	pl
 8089b7c:	2201      	movpl	r2, #1
 8089b7e:	601a      	strpl	r2, [r3, #0]
 8089b80:	4b12      	ldr	r3, [pc, #72]	; (8089bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8089b82:	681a      	ldr	r2, [r3, #0]
 8089b84:	07d0      	lsls	r0, r2, #31
 8089b86:	bf5c      	itt	pl
 8089b88:	2201      	movpl	r2, #1
 8089b8a:	601a      	strpl	r2, [r3, #0]
 8089b8c:	4b10      	ldr	r3, [pc, #64]	; (8089bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8089b8e:	681a      	ldr	r2, [r3, #0]
 8089b90:	07d1      	lsls	r1, r2, #31
 8089b92:	bf5c      	itt	pl
 8089b94:	2201      	movpl	r2, #1
 8089b96:	601a      	strpl	r2, [r3, #0]
 8089b98:	4b0e      	ldr	r3, [pc, #56]	; (8089bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8089b9a:	681a      	ldr	r2, [r3, #0]
 8089b9c:	07d2      	lsls	r2, r2, #31
 8089b9e:	bf5c      	itt	pl
 8089ba0:	2201      	movpl	r2, #1
 8089ba2:	601a      	strpl	r2, [r3, #0]
 8089ba4:	4770      	bx	lr
 8089ba6:	bf00      	nop
 8089ba8:	20000f98 	.word	0x20000f98
 8089bac:	20000f94 	.word	0x20000f94
 8089bb0:	20000f90 	.word	0x20000f90
 8089bb4:	20000f8c 	.word	0x20000f8c
 8089bb8:	20000f88 	.word	0x20000f88
 8089bbc:	20000f84 	.word	0x20000f84
 8089bc0:	20000f80 	.word	0x20000f80
 8089bc4:	20000f7c 	.word	0x20000f7c
 8089bc8:	20000f78 	.word	0x20000f78
 8089bcc:	20000f74 	.word	0x20000f74
 8089bd0:	20000f70 	.word	0x20000f70
 8089bd4:	20000f6c 	.word	0x20000f6c

08089bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8089bd8:	4b18      	ldr	r3, [pc, #96]	; (8089c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8089bda:	681a      	ldr	r2, [r3, #0]
 8089bdc:	07d1      	lsls	r1, r2, #31
 8089bde:	bf5c      	itt	pl
 8089be0:	2201      	movpl	r2, #1
 8089be2:	601a      	strpl	r2, [r3, #0]
 8089be4:	4b16      	ldr	r3, [pc, #88]	; (8089c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8089be6:	681a      	ldr	r2, [r3, #0]
 8089be8:	07d2      	lsls	r2, r2, #31
 8089bea:	bf5c      	itt	pl
 8089bec:	2201      	movpl	r2, #1
 8089bee:	601a      	strpl	r2, [r3, #0]
 8089bf0:	4b14      	ldr	r3, [pc, #80]	; (8089c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8089bf2:	681a      	ldr	r2, [r3, #0]
 8089bf4:	07d0      	lsls	r0, r2, #31
 8089bf6:	bf5c      	itt	pl
 8089bf8:	2201      	movpl	r2, #1
 8089bfa:	601a      	strpl	r2, [r3, #0]
 8089bfc:	4b12      	ldr	r3, [pc, #72]	; (8089c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8089bfe:	681a      	ldr	r2, [r3, #0]
 8089c00:	07d1      	lsls	r1, r2, #31
 8089c02:	bf5c      	itt	pl
 8089c04:	2201      	movpl	r2, #1
 8089c06:	601a      	strpl	r2, [r3, #0]
 8089c08:	4b10      	ldr	r3, [pc, #64]	; (8089c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8089c0a:	681a      	ldr	r2, [r3, #0]
 8089c0c:	07d2      	lsls	r2, r2, #31
 8089c0e:	bf5c      	itt	pl
 8089c10:	2201      	movpl	r2, #1
 8089c12:	601a      	strpl	r2, [r3, #0]
 8089c14:	4b0e      	ldr	r3, [pc, #56]	; (8089c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8089c16:	681a      	ldr	r2, [r3, #0]
 8089c18:	07d0      	lsls	r0, r2, #31
 8089c1a:	bf5c      	itt	pl
 8089c1c:	2201      	movpl	r2, #1
 8089c1e:	601a      	strpl	r2, [r3, #0]
 8089c20:	4b0c      	ldr	r3, [pc, #48]	; (8089c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8089c22:	681a      	ldr	r2, [r3, #0]
 8089c24:	07d1      	lsls	r1, r2, #31
 8089c26:	bf5c      	itt	pl
 8089c28:	2201      	movpl	r2, #1
 8089c2a:	601a      	strpl	r2, [r3, #0]
 8089c2c:	4b0a      	ldr	r3, [pc, #40]	; (8089c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8089c2e:	681a      	ldr	r2, [r3, #0]
 8089c30:	07d2      	lsls	r2, r2, #31
 8089c32:	bf5c      	itt	pl
 8089c34:	2201      	movpl	r2, #1
 8089c36:	601a      	strpl	r2, [r3, #0]
 8089c38:	4770      	bx	lr
 8089c3a:	bf00      	nop
 8089c3c:	20000fb8 	.word	0x20000fb8
 8089c40:	20000fb4 	.word	0x20000fb4
 8089c44:	20000fb0 	.word	0x20000fb0
 8089c48:	20000fac 	.word	0x20000fac
 8089c4c:	20000fa8 	.word	0x20000fa8
 8089c50:	20000fa4 	.word	0x20000fa4
 8089c54:	20000fa0 	.word	0x20000fa0
 8089c58:	20000f9c 	.word	0x20000f9c

08089c5c <__aeabi_drsub>:
 8089c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089c60:	e002      	b.n	8089c68 <__adddf3>
 8089c62:	bf00      	nop

08089c64 <__aeabi_dsub>:
 8089c64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089c68 <__adddf3>:
 8089c68:	b530      	push	{r4, r5, lr}
 8089c6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089c6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089c72:	ea94 0f05 	teq	r4, r5
 8089c76:	bf08      	it	eq
 8089c78:	ea90 0f02 	teqeq	r0, r2
 8089c7c:	bf1f      	itttt	ne
 8089c7e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089c82:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089c86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089c8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089c8e:	f000 80e2 	beq.w	8089e56 <__adddf3+0x1ee>
 8089c92:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089c96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089c9a:	bfb8      	it	lt
 8089c9c:	426d      	neglt	r5, r5
 8089c9e:	dd0c      	ble.n	8089cba <__adddf3+0x52>
 8089ca0:	442c      	add	r4, r5
 8089ca2:	ea80 0202 	eor.w	r2, r0, r2
 8089ca6:	ea81 0303 	eor.w	r3, r1, r3
 8089caa:	ea82 0000 	eor.w	r0, r2, r0
 8089cae:	ea83 0101 	eor.w	r1, r3, r1
 8089cb2:	ea80 0202 	eor.w	r2, r0, r2
 8089cb6:	ea81 0303 	eor.w	r3, r1, r3
 8089cba:	2d36      	cmp	r5, #54	; 0x36
 8089cbc:	bf88      	it	hi
 8089cbe:	bd30      	pophi	{r4, r5, pc}
 8089cc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089cc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089ccc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089cd0:	d002      	beq.n	8089cd8 <__adddf3+0x70>
 8089cd2:	4240      	negs	r0, r0
 8089cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089cd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089cdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089ce0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089ce4:	d002      	beq.n	8089cec <__adddf3+0x84>
 8089ce6:	4252      	negs	r2, r2
 8089ce8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089cec:	ea94 0f05 	teq	r4, r5
 8089cf0:	f000 80a7 	beq.w	8089e42 <__adddf3+0x1da>
 8089cf4:	f1a4 0401 	sub.w	r4, r4, #1
 8089cf8:	f1d5 0e20 	rsbs	lr, r5, #32
 8089cfc:	db0d      	blt.n	8089d1a <__adddf3+0xb2>
 8089cfe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089d02:	fa22 f205 	lsr.w	r2, r2, r5
 8089d06:	1880      	adds	r0, r0, r2
 8089d08:	f141 0100 	adc.w	r1, r1, #0
 8089d0c:	fa03 f20e 	lsl.w	r2, r3, lr
 8089d10:	1880      	adds	r0, r0, r2
 8089d12:	fa43 f305 	asr.w	r3, r3, r5
 8089d16:	4159      	adcs	r1, r3
 8089d18:	e00e      	b.n	8089d38 <__adddf3+0xd0>
 8089d1a:	f1a5 0520 	sub.w	r5, r5, #32
 8089d1e:	f10e 0e20 	add.w	lr, lr, #32
 8089d22:	2a01      	cmp	r2, #1
 8089d24:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089d28:	bf28      	it	cs
 8089d2a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089d2e:	fa43 f305 	asr.w	r3, r3, r5
 8089d32:	18c0      	adds	r0, r0, r3
 8089d34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089d38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089d3c:	d507      	bpl.n	8089d4e <__adddf3+0xe6>
 8089d3e:	f04f 0e00 	mov.w	lr, #0
 8089d42:	f1dc 0c00 	rsbs	ip, ip, #0
 8089d46:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089d4a:	eb6e 0101 	sbc.w	r1, lr, r1
 8089d4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089d52:	d31b      	bcc.n	8089d8c <__adddf3+0x124>
 8089d54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089d58:	d30c      	bcc.n	8089d74 <__adddf3+0x10c>
 8089d5a:	0849      	lsrs	r1, r1, #1
 8089d5c:	ea5f 0030 	movs.w	r0, r0, rrx
 8089d60:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089d64:	f104 0401 	add.w	r4, r4, #1
 8089d68:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089d6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089d70:	f080 809a 	bcs.w	8089ea8 <__adddf3+0x240>
 8089d74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089d78:	bf08      	it	eq
 8089d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089d7e:	f150 0000 	adcs.w	r0, r0, #0
 8089d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089d86:	ea41 0105 	orr.w	r1, r1, r5
 8089d8a:	bd30      	pop	{r4, r5, pc}
 8089d8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089d90:	4140      	adcs	r0, r0
 8089d92:	eb41 0101 	adc.w	r1, r1, r1
 8089d96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089d9a:	f1a4 0401 	sub.w	r4, r4, #1
 8089d9e:	d1e9      	bne.n	8089d74 <__adddf3+0x10c>
 8089da0:	f091 0f00 	teq	r1, #0
 8089da4:	bf04      	itt	eq
 8089da6:	4601      	moveq	r1, r0
 8089da8:	2000      	moveq	r0, #0
 8089daa:	fab1 f381 	clz	r3, r1
 8089dae:	bf08      	it	eq
 8089db0:	3320      	addeq	r3, #32
 8089db2:	f1a3 030b 	sub.w	r3, r3, #11
 8089db6:	f1b3 0220 	subs.w	r2, r3, #32
 8089dba:	da0c      	bge.n	8089dd6 <__adddf3+0x16e>
 8089dbc:	320c      	adds	r2, #12
 8089dbe:	dd08      	ble.n	8089dd2 <__adddf3+0x16a>
 8089dc0:	f102 0c14 	add.w	ip, r2, #20
 8089dc4:	f1c2 020c 	rsb	r2, r2, #12
 8089dc8:	fa01 f00c 	lsl.w	r0, r1, ip
 8089dcc:	fa21 f102 	lsr.w	r1, r1, r2
 8089dd0:	e00c      	b.n	8089dec <__adddf3+0x184>
 8089dd2:	f102 0214 	add.w	r2, r2, #20
 8089dd6:	bfd8      	it	le
 8089dd8:	f1c2 0c20 	rsble	ip, r2, #32
 8089ddc:	fa01 f102 	lsl.w	r1, r1, r2
 8089de0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089de4:	bfdc      	itt	le
 8089de6:	ea41 010c 	orrle.w	r1, r1, ip
 8089dea:	4090      	lslle	r0, r2
 8089dec:	1ae4      	subs	r4, r4, r3
 8089dee:	bfa2      	ittt	ge
 8089df0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089df4:	4329      	orrge	r1, r5
 8089df6:	bd30      	popge	{r4, r5, pc}
 8089df8:	ea6f 0404 	mvn.w	r4, r4
 8089dfc:	3c1f      	subs	r4, #31
 8089dfe:	da1c      	bge.n	8089e3a <__adddf3+0x1d2>
 8089e00:	340c      	adds	r4, #12
 8089e02:	dc0e      	bgt.n	8089e22 <__adddf3+0x1ba>
 8089e04:	f104 0414 	add.w	r4, r4, #20
 8089e08:	f1c4 0220 	rsb	r2, r4, #32
 8089e0c:	fa20 f004 	lsr.w	r0, r0, r4
 8089e10:	fa01 f302 	lsl.w	r3, r1, r2
 8089e14:	ea40 0003 	orr.w	r0, r0, r3
 8089e18:	fa21 f304 	lsr.w	r3, r1, r4
 8089e1c:	ea45 0103 	orr.w	r1, r5, r3
 8089e20:	bd30      	pop	{r4, r5, pc}
 8089e22:	f1c4 040c 	rsb	r4, r4, #12
 8089e26:	f1c4 0220 	rsb	r2, r4, #32
 8089e2a:	fa20 f002 	lsr.w	r0, r0, r2
 8089e2e:	fa01 f304 	lsl.w	r3, r1, r4
 8089e32:	ea40 0003 	orr.w	r0, r0, r3
 8089e36:	4629      	mov	r1, r5
 8089e38:	bd30      	pop	{r4, r5, pc}
 8089e3a:	fa21 f004 	lsr.w	r0, r1, r4
 8089e3e:	4629      	mov	r1, r5
 8089e40:	bd30      	pop	{r4, r5, pc}
 8089e42:	f094 0f00 	teq	r4, #0
 8089e46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089e4a:	bf06      	itte	eq
 8089e4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089e50:	3401      	addeq	r4, #1
 8089e52:	3d01      	subne	r5, #1
 8089e54:	e74e      	b.n	8089cf4 <__adddf3+0x8c>
 8089e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089e5a:	bf18      	it	ne
 8089e5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089e60:	d029      	beq.n	8089eb6 <__adddf3+0x24e>
 8089e62:	ea94 0f05 	teq	r4, r5
 8089e66:	bf08      	it	eq
 8089e68:	ea90 0f02 	teqeq	r0, r2
 8089e6c:	d005      	beq.n	8089e7a <__adddf3+0x212>
 8089e6e:	ea54 0c00 	orrs.w	ip, r4, r0
 8089e72:	bf04      	itt	eq
 8089e74:	4619      	moveq	r1, r3
 8089e76:	4610      	moveq	r0, r2
 8089e78:	bd30      	pop	{r4, r5, pc}
 8089e7a:	ea91 0f03 	teq	r1, r3
 8089e7e:	bf1e      	ittt	ne
 8089e80:	2100      	movne	r1, #0
 8089e82:	2000      	movne	r0, #0
 8089e84:	bd30      	popne	{r4, r5, pc}
 8089e86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089e8a:	d105      	bne.n	8089e98 <__adddf3+0x230>
 8089e8c:	0040      	lsls	r0, r0, #1
 8089e8e:	4149      	adcs	r1, r1
 8089e90:	bf28      	it	cs
 8089e92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089e96:	bd30      	pop	{r4, r5, pc}
 8089e98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089e9c:	bf3c      	itt	cc
 8089e9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089ea2:	bd30      	popcc	{r4, r5, pc}
 8089ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089ea8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089eac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089eb0:	f04f 0000 	mov.w	r0, #0
 8089eb4:	bd30      	pop	{r4, r5, pc}
 8089eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089eba:	bf1a      	itte	ne
 8089ebc:	4619      	movne	r1, r3
 8089ebe:	4610      	movne	r0, r2
 8089ec0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089ec4:	bf1c      	itt	ne
 8089ec6:	460b      	movne	r3, r1
 8089ec8:	4602      	movne	r2, r0
 8089eca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089ece:	bf06      	itte	eq
 8089ed0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089ed4:	ea91 0f03 	teqeq	r1, r3
 8089ed8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089edc:	bd30      	pop	{r4, r5, pc}
 8089ede:	bf00      	nop

08089ee0 <__aeabi_ui2d>:
 8089ee0:	f090 0f00 	teq	r0, #0
 8089ee4:	bf04      	itt	eq
 8089ee6:	2100      	moveq	r1, #0
 8089ee8:	4770      	bxeq	lr
 8089eea:	b530      	push	{r4, r5, lr}
 8089eec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089ef0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089ef4:	f04f 0500 	mov.w	r5, #0
 8089ef8:	f04f 0100 	mov.w	r1, #0
 8089efc:	e750      	b.n	8089da0 <__adddf3+0x138>
 8089efe:	bf00      	nop

08089f00 <__aeabi_i2d>:
 8089f00:	f090 0f00 	teq	r0, #0
 8089f04:	bf04      	itt	eq
 8089f06:	2100      	moveq	r1, #0
 8089f08:	4770      	bxeq	lr
 8089f0a:	b530      	push	{r4, r5, lr}
 8089f0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089f10:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089f14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089f18:	bf48      	it	mi
 8089f1a:	4240      	negmi	r0, r0
 8089f1c:	f04f 0100 	mov.w	r1, #0
 8089f20:	e73e      	b.n	8089da0 <__adddf3+0x138>
 8089f22:	bf00      	nop

08089f24 <__aeabi_f2d>:
 8089f24:	0042      	lsls	r2, r0, #1
 8089f26:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8089f2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8089f2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8089f32:	bf1f      	itttt	ne
 8089f34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8089f38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089f3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8089f40:	4770      	bxne	lr
 8089f42:	f092 0f00 	teq	r2, #0
 8089f46:	bf14      	ite	ne
 8089f48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089f4c:	4770      	bxeq	lr
 8089f4e:	b530      	push	{r4, r5, lr}
 8089f50:	f44f 7460 	mov.w	r4, #896	; 0x380
 8089f54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089f5c:	e720      	b.n	8089da0 <__adddf3+0x138>
 8089f5e:	bf00      	nop

08089f60 <__aeabi_ul2d>:
 8089f60:	ea50 0201 	orrs.w	r2, r0, r1
 8089f64:	bf08      	it	eq
 8089f66:	4770      	bxeq	lr
 8089f68:	b530      	push	{r4, r5, lr}
 8089f6a:	f04f 0500 	mov.w	r5, #0
 8089f6e:	e00a      	b.n	8089f86 <__aeabi_l2d+0x16>

08089f70 <__aeabi_l2d>:
 8089f70:	ea50 0201 	orrs.w	r2, r0, r1
 8089f74:	bf08      	it	eq
 8089f76:	4770      	bxeq	lr
 8089f78:	b530      	push	{r4, r5, lr}
 8089f7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089f7e:	d502      	bpl.n	8089f86 <__aeabi_l2d+0x16>
 8089f80:	4240      	negs	r0, r0
 8089f82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089f86:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089f8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089f8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089f92:	f43f aedc 	beq.w	8089d4e <__adddf3+0xe6>
 8089f96:	f04f 0203 	mov.w	r2, #3
 8089f9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089f9e:	bf18      	it	ne
 8089fa0:	3203      	addne	r2, #3
 8089fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089fa6:	bf18      	it	ne
 8089fa8:	3203      	addne	r2, #3
 8089faa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089fae:	f1c2 0320 	rsb	r3, r2, #32
 8089fb2:	fa00 fc03 	lsl.w	ip, r0, r3
 8089fb6:	fa20 f002 	lsr.w	r0, r0, r2
 8089fba:	fa01 fe03 	lsl.w	lr, r1, r3
 8089fbe:	ea40 000e 	orr.w	r0, r0, lr
 8089fc2:	fa21 f102 	lsr.w	r1, r1, r2
 8089fc6:	4414      	add	r4, r2
 8089fc8:	e6c1      	b.n	8089d4e <__adddf3+0xe6>
 8089fca:	bf00      	nop

08089fcc <__aeabi_dmul>:
 8089fcc:	b570      	push	{r4, r5, r6, lr}
 8089fce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089fd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089fd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089fda:	bf1d      	ittte	ne
 8089fdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089fe0:	ea94 0f0c 	teqne	r4, ip
 8089fe4:	ea95 0f0c 	teqne	r5, ip
 8089fe8:	f000 f8de 	bleq	808a1a8 <__aeabi_dmul+0x1dc>
 8089fec:	442c      	add	r4, r5
 8089fee:	ea81 0603 	eor.w	r6, r1, r3
 8089ff2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8089ff6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8089ffa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089ffe:	bf18      	it	ne
 808a000:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808a004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808a00c:	d038      	beq.n	808a080 <__aeabi_dmul+0xb4>
 808a00e:	fba0 ce02 	umull	ip, lr, r0, r2
 808a012:	f04f 0500 	mov.w	r5, #0
 808a016:	fbe1 e502 	umlal	lr, r5, r1, r2
 808a01a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808a01e:	fbe0 e503 	umlal	lr, r5, r0, r3
 808a022:	f04f 0600 	mov.w	r6, #0
 808a026:	fbe1 5603 	umlal	r5, r6, r1, r3
 808a02a:	f09c 0f00 	teq	ip, #0
 808a02e:	bf18      	it	ne
 808a030:	f04e 0e01 	orrne.w	lr, lr, #1
 808a034:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808a038:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808a03c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808a040:	d204      	bcs.n	808a04c <__aeabi_dmul+0x80>
 808a042:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808a046:	416d      	adcs	r5, r5
 808a048:	eb46 0606 	adc.w	r6, r6, r6
 808a04c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808a050:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808a054:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808a058:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808a05c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808a060:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a064:	bf88      	it	hi
 808a066:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a06a:	d81e      	bhi.n	808a0aa <__aeabi_dmul+0xde>
 808a06c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808a070:	bf08      	it	eq
 808a072:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808a076:	f150 0000 	adcs.w	r0, r0, #0
 808a07a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a07e:	bd70      	pop	{r4, r5, r6, pc}
 808a080:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808a084:	ea46 0101 	orr.w	r1, r6, r1
 808a088:	ea40 0002 	orr.w	r0, r0, r2
 808a08c:	ea81 0103 	eor.w	r1, r1, r3
 808a090:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808a094:	bfc2      	ittt	gt
 808a096:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a09a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a09e:	bd70      	popgt	{r4, r5, r6, pc}
 808a0a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a0a4:	f04f 0e00 	mov.w	lr, #0
 808a0a8:	3c01      	subs	r4, #1
 808a0aa:	f300 80ab 	bgt.w	808a204 <__aeabi_dmul+0x238>
 808a0ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808a0b2:	bfde      	ittt	le
 808a0b4:	2000      	movle	r0, #0
 808a0b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808a0ba:	bd70      	pople	{r4, r5, r6, pc}
 808a0bc:	f1c4 0400 	rsb	r4, r4, #0
 808a0c0:	3c20      	subs	r4, #32
 808a0c2:	da35      	bge.n	808a130 <__aeabi_dmul+0x164>
 808a0c4:	340c      	adds	r4, #12
 808a0c6:	dc1b      	bgt.n	808a100 <__aeabi_dmul+0x134>
 808a0c8:	f104 0414 	add.w	r4, r4, #20
 808a0cc:	f1c4 0520 	rsb	r5, r4, #32
 808a0d0:	fa00 f305 	lsl.w	r3, r0, r5
 808a0d4:	fa20 f004 	lsr.w	r0, r0, r4
 808a0d8:	fa01 f205 	lsl.w	r2, r1, r5
 808a0dc:	ea40 0002 	orr.w	r0, r0, r2
 808a0e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808a0e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808a0e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a0ec:	fa21 f604 	lsr.w	r6, r1, r4
 808a0f0:	eb42 0106 	adc.w	r1, r2, r6
 808a0f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a0f8:	bf08      	it	eq
 808a0fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a0fe:	bd70      	pop	{r4, r5, r6, pc}
 808a100:	f1c4 040c 	rsb	r4, r4, #12
 808a104:	f1c4 0520 	rsb	r5, r4, #32
 808a108:	fa00 f304 	lsl.w	r3, r0, r4
 808a10c:	fa20 f005 	lsr.w	r0, r0, r5
 808a110:	fa01 f204 	lsl.w	r2, r1, r4
 808a114:	ea40 0002 	orr.w	r0, r0, r2
 808a118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a11c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a120:	f141 0100 	adc.w	r1, r1, #0
 808a124:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a128:	bf08      	it	eq
 808a12a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a12e:	bd70      	pop	{r4, r5, r6, pc}
 808a130:	f1c4 0520 	rsb	r5, r4, #32
 808a134:	fa00 f205 	lsl.w	r2, r0, r5
 808a138:	ea4e 0e02 	orr.w	lr, lr, r2
 808a13c:	fa20 f304 	lsr.w	r3, r0, r4
 808a140:	fa01 f205 	lsl.w	r2, r1, r5
 808a144:	ea43 0302 	orr.w	r3, r3, r2
 808a148:	fa21 f004 	lsr.w	r0, r1, r4
 808a14c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a150:	fa21 f204 	lsr.w	r2, r1, r4
 808a154:	ea20 0002 	bic.w	r0, r0, r2
 808a158:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808a15c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a160:	bf08      	it	eq
 808a162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a166:	bd70      	pop	{r4, r5, r6, pc}
 808a168:	f094 0f00 	teq	r4, #0
 808a16c:	d10f      	bne.n	808a18e <__aeabi_dmul+0x1c2>
 808a16e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a172:	0040      	lsls	r0, r0, #1
 808a174:	eb41 0101 	adc.w	r1, r1, r1
 808a178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a17c:	bf08      	it	eq
 808a17e:	3c01      	subeq	r4, #1
 808a180:	d0f7      	beq.n	808a172 <__aeabi_dmul+0x1a6>
 808a182:	ea41 0106 	orr.w	r1, r1, r6
 808a186:	f095 0f00 	teq	r5, #0
 808a18a:	bf18      	it	ne
 808a18c:	4770      	bxne	lr
 808a18e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a192:	0052      	lsls	r2, r2, #1
 808a194:	eb43 0303 	adc.w	r3, r3, r3
 808a198:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a19c:	bf08      	it	eq
 808a19e:	3d01      	subeq	r5, #1
 808a1a0:	d0f7      	beq.n	808a192 <__aeabi_dmul+0x1c6>
 808a1a2:	ea43 0306 	orr.w	r3, r3, r6
 808a1a6:	4770      	bx	lr
 808a1a8:	ea94 0f0c 	teq	r4, ip
 808a1ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a1b0:	bf18      	it	ne
 808a1b2:	ea95 0f0c 	teqne	r5, ip
 808a1b6:	d00c      	beq.n	808a1d2 <__aeabi_dmul+0x206>
 808a1b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a1bc:	bf18      	it	ne
 808a1be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a1c2:	d1d1      	bne.n	808a168 <__aeabi_dmul+0x19c>
 808a1c4:	ea81 0103 	eor.w	r1, r1, r3
 808a1c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a1cc:	f04f 0000 	mov.w	r0, #0
 808a1d0:	bd70      	pop	{r4, r5, r6, pc}
 808a1d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a1d6:	bf06      	itte	eq
 808a1d8:	4610      	moveq	r0, r2
 808a1da:	4619      	moveq	r1, r3
 808a1dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a1e0:	d019      	beq.n	808a216 <__aeabi_dmul+0x24a>
 808a1e2:	ea94 0f0c 	teq	r4, ip
 808a1e6:	d102      	bne.n	808a1ee <__aeabi_dmul+0x222>
 808a1e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a1ec:	d113      	bne.n	808a216 <__aeabi_dmul+0x24a>
 808a1ee:	ea95 0f0c 	teq	r5, ip
 808a1f2:	d105      	bne.n	808a200 <__aeabi_dmul+0x234>
 808a1f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a1f8:	bf1c      	itt	ne
 808a1fa:	4610      	movne	r0, r2
 808a1fc:	4619      	movne	r1, r3
 808a1fe:	d10a      	bne.n	808a216 <__aeabi_dmul+0x24a>
 808a200:	ea81 0103 	eor.w	r1, r1, r3
 808a204:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a208:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a20c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a210:	f04f 0000 	mov.w	r0, #0
 808a214:	bd70      	pop	{r4, r5, r6, pc}
 808a216:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a21a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a21e:	bd70      	pop	{r4, r5, r6, pc}

0808a220 <__aeabi_ddiv>:
 808a220:	b570      	push	{r4, r5, r6, lr}
 808a222:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a226:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a22a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a22e:	bf1d      	ittte	ne
 808a230:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a234:	ea94 0f0c 	teqne	r4, ip
 808a238:	ea95 0f0c 	teqne	r5, ip
 808a23c:	f000 f8a7 	bleq	808a38e <__aeabi_ddiv+0x16e>
 808a240:	eba4 0405 	sub.w	r4, r4, r5
 808a244:	ea81 0e03 	eor.w	lr, r1, r3
 808a248:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a24c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a250:	f000 8088 	beq.w	808a364 <__aeabi_ddiv+0x144>
 808a254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a258:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a25c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a260:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a264:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a268:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a26c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a270:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a274:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a278:	429d      	cmp	r5, r3
 808a27a:	bf08      	it	eq
 808a27c:	4296      	cmpeq	r6, r2
 808a27e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a282:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a286:	d202      	bcs.n	808a28e <__aeabi_ddiv+0x6e>
 808a288:	085b      	lsrs	r3, r3, #1
 808a28a:	ea4f 0232 	mov.w	r2, r2, rrx
 808a28e:	1ab6      	subs	r6, r6, r2
 808a290:	eb65 0503 	sbc.w	r5, r5, r3
 808a294:	085b      	lsrs	r3, r3, #1
 808a296:	ea4f 0232 	mov.w	r2, r2, rrx
 808a29a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a29e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a2a2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a2a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a2aa:	bf22      	ittt	cs
 808a2ac:	1ab6      	subcs	r6, r6, r2
 808a2ae:	4675      	movcs	r5, lr
 808a2b0:	ea40 000c 	orrcs.w	r0, r0, ip
 808a2b4:	085b      	lsrs	r3, r3, #1
 808a2b6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a2ba:	ebb6 0e02 	subs.w	lr, r6, r2
 808a2be:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a2c2:	bf22      	ittt	cs
 808a2c4:	1ab6      	subcs	r6, r6, r2
 808a2c6:	4675      	movcs	r5, lr
 808a2c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a2cc:	085b      	lsrs	r3, r3, #1
 808a2ce:	ea4f 0232 	mov.w	r2, r2, rrx
 808a2d2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a2d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a2da:	bf22      	ittt	cs
 808a2dc:	1ab6      	subcs	r6, r6, r2
 808a2de:	4675      	movcs	r5, lr
 808a2e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a2e4:	085b      	lsrs	r3, r3, #1
 808a2e6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a2ea:	ebb6 0e02 	subs.w	lr, r6, r2
 808a2ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a2f2:	bf22      	ittt	cs
 808a2f4:	1ab6      	subcs	r6, r6, r2
 808a2f6:	4675      	movcs	r5, lr
 808a2f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a2fc:	ea55 0e06 	orrs.w	lr, r5, r6
 808a300:	d018      	beq.n	808a334 <__aeabi_ddiv+0x114>
 808a302:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a306:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a30a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a30e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a312:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a316:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a31a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a31e:	d1c0      	bne.n	808a2a2 <__aeabi_ddiv+0x82>
 808a320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a324:	d10b      	bne.n	808a33e <__aeabi_ddiv+0x11e>
 808a326:	ea41 0100 	orr.w	r1, r1, r0
 808a32a:	f04f 0000 	mov.w	r0, #0
 808a32e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a332:	e7b6      	b.n	808a2a2 <__aeabi_ddiv+0x82>
 808a334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a338:	bf04      	itt	eq
 808a33a:	4301      	orreq	r1, r0
 808a33c:	2000      	moveq	r0, #0
 808a33e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a342:	bf88      	it	hi
 808a344:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a348:	f63f aeaf 	bhi.w	808a0aa <__aeabi_dmul+0xde>
 808a34c:	ebb5 0c03 	subs.w	ip, r5, r3
 808a350:	bf04      	itt	eq
 808a352:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a35a:	f150 0000 	adcs.w	r0, r0, #0
 808a35e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a362:	bd70      	pop	{r4, r5, r6, pc}
 808a364:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a368:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a36c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a370:	bfc2      	ittt	gt
 808a372:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a37a:	bd70      	popgt	{r4, r5, r6, pc}
 808a37c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a380:	f04f 0e00 	mov.w	lr, #0
 808a384:	3c01      	subs	r4, #1
 808a386:	e690      	b.n	808a0aa <__aeabi_dmul+0xde>
 808a388:	ea45 0e06 	orr.w	lr, r5, r6
 808a38c:	e68d      	b.n	808a0aa <__aeabi_dmul+0xde>
 808a38e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a392:	ea94 0f0c 	teq	r4, ip
 808a396:	bf08      	it	eq
 808a398:	ea95 0f0c 	teqeq	r5, ip
 808a39c:	f43f af3b 	beq.w	808a216 <__aeabi_dmul+0x24a>
 808a3a0:	ea94 0f0c 	teq	r4, ip
 808a3a4:	d10a      	bne.n	808a3bc <__aeabi_ddiv+0x19c>
 808a3a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a3aa:	f47f af34 	bne.w	808a216 <__aeabi_dmul+0x24a>
 808a3ae:	ea95 0f0c 	teq	r5, ip
 808a3b2:	f47f af25 	bne.w	808a200 <__aeabi_dmul+0x234>
 808a3b6:	4610      	mov	r0, r2
 808a3b8:	4619      	mov	r1, r3
 808a3ba:	e72c      	b.n	808a216 <__aeabi_dmul+0x24a>
 808a3bc:	ea95 0f0c 	teq	r5, ip
 808a3c0:	d106      	bne.n	808a3d0 <__aeabi_ddiv+0x1b0>
 808a3c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a3c6:	f43f aefd 	beq.w	808a1c4 <__aeabi_dmul+0x1f8>
 808a3ca:	4610      	mov	r0, r2
 808a3cc:	4619      	mov	r1, r3
 808a3ce:	e722      	b.n	808a216 <__aeabi_dmul+0x24a>
 808a3d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a3d4:	bf18      	it	ne
 808a3d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a3da:	f47f aec5 	bne.w	808a168 <__aeabi_dmul+0x19c>
 808a3de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a3e2:	f47f af0d 	bne.w	808a200 <__aeabi_dmul+0x234>
 808a3e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a3ea:	f47f aeeb 	bne.w	808a1c4 <__aeabi_dmul+0x1f8>
 808a3ee:	e712      	b.n	808a216 <__aeabi_dmul+0x24a>

0808a3f0 <__gedf2>:
 808a3f0:	f04f 3cff 	mov.w	ip, #4294967295
 808a3f4:	e006      	b.n	808a404 <__cmpdf2+0x4>
 808a3f6:	bf00      	nop

0808a3f8 <__ledf2>:
 808a3f8:	f04f 0c01 	mov.w	ip, #1
 808a3fc:	e002      	b.n	808a404 <__cmpdf2+0x4>
 808a3fe:	bf00      	nop

0808a400 <__cmpdf2>:
 808a400:	f04f 0c01 	mov.w	ip, #1
 808a404:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a408:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a40c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a414:	bf18      	it	ne
 808a416:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a41a:	d01b      	beq.n	808a454 <__cmpdf2+0x54>
 808a41c:	b001      	add	sp, #4
 808a41e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a422:	bf0c      	ite	eq
 808a424:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a428:	ea91 0f03 	teqne	r1, r3
 808a42c:	bf02      	ittt	eq
 808a42e:	ea90 0f02 	teqeq	r0, r2
 808a432:	2000      	moveq	r0, #0
 808a434:	4770      	bxeq	lr
 808a436:	f110 0f00 	cmn.w	r0, #0
 808a43a:	ea91 0f03 	teq	r1, r3
 808a43e:	bf58      	it	pl
 808a440:	4299      	cmppl	r1, r3
 808a442:	bf08      	it	eq
 808a444:	4290      	cmpeq	r0, r2
 808a446:	bf2c      	ite	cs
 808a448:	17d8      	asrcs	r0, r3, #31
 808a44a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a44e:	f040 0001 	orr.w	r0, r0, #1
 808a452:	4770      	bx	lr
 808a454:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a45c:	d102      	bne.n	808a464 <__cmpdf2+0x64>
 808a45e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a462:	d107      	bne.n	808a474 <__cmpdf2+0x74>
 808a464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a468:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a46c:	d1d6      	bne.n	808a41c <__cmpdf2+0x1c>
 808a46e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a472:	d0d3      	beq.n	808a41c <__cmpdf2+0x1c>
 808a474:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a478:	4770      	bx	lr
 808a47a:	bf00      	nop

0808a47c <__aeabi_cdrcmple>:
 808a47c:	4684      	mov	ip, r0
 808a47e:	4610      	mov	r0, r2
 808a480:	4662      	mov	r2, ip
 808a482:	468c      	mov	ip, r1
 808a484:	4619      	mov	r1, r3
 808a486:	4663      	mov	r3, ip
 808a488:	e000      	b.n	808a48c <__aeabi_cdcmpeq>
 808a48a:	bf00      	nop

0808a48c <__aeabi_cdcmpeq>:
 808a48c:	b501      	push	{r0, lr}
 808a48e:	f7ff ffb7 	bl	808a400 <__cmpdf2>
 808a492:	2800      	cmp	r0, #0
 808a494:	bf48      	it	mi
 808a496:	f110 0f00 	cmnmi.w	r0, #0
 808a49a:	bd01      	pop	{r0, pc}

0808a49c <__aeabi_dcmpeq>:
 808a49c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a4a0:	f7ff fff4 	bl	808a48c <__aeabi_cdcmpeq>
 808a4a4:	bf0c      	ite	eq
 808a4a6:	2001      	moveq	r0, #1
 808a4a8:	2000      	movne	r0, #0
 808a4aa:	f85d fb08 	ldr.w	pc, [sp], #8
 808a4ae:	bf00      	nop

0808a4b0 <__aeabi_dcmplt>:
 808a4b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a4b4:	f7ff ffea 	bl	808a48c <__aeabi_cdcmpeq>
 808a4b8:	bf34      	ite	cc
 808a4ba:	2001      	movcc	r0, #1
 808a4bc:	2000      	movcs	r0, #0
 808a4be:	f85d fb08 	ldr.w	pc, [sp], #8
 808a4c2:	bf00      	nop

0808a4c4 <__aeabi_dcmple>:
 808a4c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a4c8:	f7ff ffe0 	bl	808a48c <__aeabi_cdcmpeq>
 808a4cc:	bf94      	ite	ls
 808a4ce:	2001      	movls	r0, #1
 808a4d0:	2000      	movhi	r0, #0
 808a4d2:	f85d fb08 	ldr.w	pc, [sp], #8
 808a4d6:	bf00      	nop

0808a4d8 <__aeabi_dcmpge>:
 808a4d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a4dc:	f7ff ffce 	bl	808a47c <__aeabi_cdrcmple>
 808a4e0:	bf94      	ite	ls
 808a4e2:	2001      	movls	r0, #1
 808a4e4:	2000      	movhi	r0, #0
 808a4e6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a4ea:	bf00      	nop

0808a4ec <__aeabi_dcmpgt>:
 808a4ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a4f0:	f7ff ffc4 	bl	808a47c <__aeabi_cdrcmple>
 808a4f4:	bf34      	ite	cc
 808a4f6:	2001      	movcc	r0, #1
 808a4f8:	2000      	movcs	r0, #0
 808a4fa:	f85d fb08 	ldr.w	pc, [sp], #8
 808a4fe:	bf00      	nop

0808a500 <__aeabi_d2iz>:
 808a500:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a504:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a508:	d215      	bcs.n	808a536 <__aeabi_d2iz+0x36>
 808a50a:	d511      	bpl.n	808a530 <__aeabi_d2iz+0x30>
 808a50c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a510:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a514:	d912      	bls.n	808a53c <__aeabi_d2iz+0x3c>
 808a516:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a51a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a51e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a526:	fa23 f002 	lsr.w	r0, r3, r2
 808a52a:	bf18      	it	ne
 808a52c:	4240      	negne	r0, r0
 808a52e:	4770      	bx	lr
 808a530:	f04f 0000 	mov.w	r0, #0
 808a534:	4770      	bx	lr
 808a536:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a53a:	d105      	bne.n	808a548 <__aeabi_d2iz+0x48>
 808a53c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a540:	bf08      	it	eq
 808a542:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a546:	4770      	bx	lr
 808a548:	f04f 0000 	mov.w	r0, #0
 808a54c:	4770      	bx	lr
 808a54e:	bf00      	nop

0808a550 <__aeabi_d2uiz>:
 808a550:	004a      	lsls	r2, r1, #1
 808a552:	d211      	bcs.n	808a578 <__aeabi_d2uiz+0x28>
 808a554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a558:	d211      	bcs.n	808a57e <__aeabi_d2uiz+0x2e>
 808a55a:	d50d      	bpl.n	808a578 <__aeabi_d2uiz+0x28>
 808a55c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a564:	d40e      	bmi.n	808a584 <__aeabi_d2uiz+0x34>
 808a566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a56a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a56e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a572:	fa23 f002 	lsr.w	r0, r3, r2
 808a576:	4770      	bx	lr
 808a578:	f04f 0000 	mov.w	r0, #0
 808a57c:	4770      	bx	lr
 808a57e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a582:	d102      	bne.n	808a58a <__aeabi_d2uiz+0x3a>
 808a584:	f04f 30ff 	mov.w	r0, #4294967295
 808a588:	4770      	bx	lr
 808a58a:	f04f 0000 	mov.w	r0, #0
 808a58e:	4770      	bx	lr

0808a590 <__aeabi_d2f>:
 808a590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a598:	bf24      	itt	cs
 808a59a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a59e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a5a2:	d90d      	bls.n	808a5c0 <__aeabi_d2f+0x30>
 808a5a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a5a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a5ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a5b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a5b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a5b8:	bf08      	it	eq
 808a5ba:	f020 0001 	biceq.w	r0, r0, #1
 808a5be:	4770      	bx	lr
 808a5c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a5c4:	d121      	bne.n	808a60a <__aeabi_d2f+0x7a>
 808a5c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a5ca:	bfbc      	itt	lt
 808a5cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a5d0:	4770      	bxlt	lr
 808a5d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a5d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a5da:	f1c2 0218 	rsb	r2, r2, #24
 808a5de:	f1c2 0c20 	rsb	ip, r2, #32
 808a5e2:	fa10 f30c 	lsls.w	r3, r0, ip
 808a5e6:	fa20 f002 	lsr.w	r0, r0, r2
 808a5ea:	bf18      	it	ne
 808a5ec:	f040 0001 	orrne.w	r0, r0, #1
 808a5f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a5f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a5f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a5fc:	ea40 000c 	orr.w	r0, r0, ip
 808a600:	fa23 f302 	lsr.w	r3, r3, r2
 808a604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a608:	e7cc      	b.n	808a5a4 <__aeabi_d2f+0x14>
 808a60a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a60e:	d107      	bne.n	808a620 <__aeabi_d2f+0x90>
 808a610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a614:	bf1e      	ittt	ne
 808a616:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a61a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a61e:	4770      	bxne	lr
 808a620:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a624:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a628:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a62c:	4770      	bx	lr
 808a62e:	bf00      	nop

0808a630 <__aeabi_frsub>:
 808a630:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a634:	e002      	b.n	808a63c <__addsf3>
 808a636:	bf00      	nop

0808a638 <__aeabi_fsub>:
 808a638:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a63c <__addsf3>:
 808a63c:	0042      	lsls	r2, r0, #1
 808a63e:	bf1f      	itttt	ne
 808a640:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a644:	ea92 0f03 	teqne	r2, r3
 808a648:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a64c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a650:	d06a      	beq.n	808a728 <__addsf3+0xec>
 808a652:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a656:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a65a:	bfc1      	itttt	gt
 808a65c:	18d2      	addgt	r2, r2, r3
 808a65e:	4041      	eorgt	r1, r0
 808a660:	4048      	eorgt	r0, r1
 808a662:	4041      	eorgt	r1, r0
 808a664:	bfb8      	it	lt
 808a666:	425b      	neglt	r3, r3
 808a668:	2b19      	cmp	r3, #25
 808a66a:	bf88      	it	hi
 808a66c:	4770      	bxhi	lr
 808a66e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a672:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a676:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a67a:	bf18      	it	ne
 808a67c:	4240      	negne	r0, r0
 808a67e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a682:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a686:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a68a:	bf18      	it	ne
 808a68c:	4249      	negne	r1, r1
 808a68e:	ea92 0f03 	teq	r2, r3
 808a692:	d03f      	beq.n	808a714 <__addsf3+0xd8>
 808a694:	f1a2 0201 	sub.w	r2, r2, #1
 808a698:	fa41 fc03 	asr.w	ip, r1, r3
 808a69c:	eb10 000c 	adds.w	r0, r0, ip
 808a6a0:	f1c3 0320 	rsb	r3, r3, #32
 808a6a4:	fa01 f103 	lsl.w	r1, r1, r3
 808a6a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a6ac:	d502      	bpl.n	808a6b4 <__addsf3+0x78>
 808a6ae:	4249      	negs	r1, r1
 808a6b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a6b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a6b8:	d313      	bcc.n	808a6e2 <__addsf3+0xa6>
 808a6ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a6be:	d306      	bcc.n	808a6ce <__addsf3+0x92>
 808a6c0:	0840      	lsrs	r0, r0, #1
 808a6c2:	ea4f 0131 	mov.w	r1, r1, rrx
 808a6c6:	f102 0201 	add.w	r2, r2, #1
 808a6ca:	2afe      	cmp	r2, #254	; 0xfe
 808a6cc:	d251      	bcs.n	808a772 <__addsf3+0x136>
 808a6ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a6d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a6d6:	bf08      	it	eq
 808a6d8:	f020 0001 	biceq.w	r0, r0, #1
 808a6dc:	ea40 0003 	orr.w	r0, r0, r3
 808a6e0:	4770      	bx	lr
 808a6e2:	0049      	lsls	r1, r1, #1
 808a6e4:	eb40 0000 	adc.w	r0, r0, r0
 808a6e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808a6ec:	f1a2 0201 	sub.w	r2, r2, #1
 808a6f0:	d1ed      	bne.n	808a6ce <__addsf3+0x92>
 808a6f2:	fab0 fc80 	clz	ip, r0
 808a6f6:	f1ac 0c08 	sub.w	ip, ip, #8
 808a6fa:	ebb2 020c 	subs.w	r2, r2, ip
 808a6fe:	fa00 f00c 	lsl.w	r0, r0, ip
 808a702:	bfaa      	itet	ge
 808a704:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a708:	4252      	neglt	r2, r2
 808a70a:	4318      	orrge	r0, r3
 808a70c:	bfbc      	itt	lt
 808a70e:	40d0      	lsrlt	r0, r2
 808a710:	4318      	orrlt	r0, r3
 808a712:	4770      	bx	lr
 808a714:	f092 0f00 	teq	r2, #0
 808a718:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a71c:	bf06      	itte	eq
 808a71e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a722:	3201      	addeq	r2, #1
 808a724:	3b01      	subne	r3, #1
 808a726:	e7b5      	b.n	808a694 <__addsf3+0x58>
 808a728:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a72c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a730:	bf18      	it	ne
 808a732:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a736:	d021      	beq.n	808a77c <__addsf3+0x140>
 808a738:	ea92 0f03 	teq	r2, r3
 808a73c:	d004      	beq.n	808a748 <__addsf3+0x10c>
 808a73e:	f092 0f00 	teq	r2, #0
 808a742:	bf08      	it	eq
 808a744:	4608      	moveq	r0, r1
 808a746:	4770      	bx	lr
 808a748:	ea90 0f01 	teq	r0, r1
 808a74c:	bf1c      	itt	ne
 808a74e:	2000      	movne	r0, #0
 808a750:	4770      	bxne	lr
 808a752:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a756:	d104      	bne.n	808a762 <__addsf3+0x126>
 808a758:	0040      	lsls	r0, r0, #1
 808a75a:	bf28      	it	cs
 808a75c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a760:	4770      	bx	lr
 808a762:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a766:	bf3c      	itt	cc
 808a768:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a76c:	4770      	bxcc	lr
 808a76e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a772:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a776:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a77a:	4770      	bx	lr
 808a77c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a780:	bf16      	itet	ne
 808a782:	4608      	movne	r0, r1
 808a784:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a788:	4601      	movne	r1, r0
 808a78a:	0242      	lsls	r2, r0, #9
 808a78c:	bf06      	itte	eq
 808a78e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a792:	ea90 0f01 	teqeq	r0, r1
 808a796:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a79a:	4770      	bx	lr

0808a79c <__aeabi_ui2f>:
 808a79c:	f04f 0300 	mov.w	r3, #0
 808a7a0:	e004      	b.n	808a7ac <__aeabi_i2f+0x8>
 808a7a2:	bf00      	nop

0808a7a4 <__aeabi_i2f>:
 808a7a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a7a8:	bf48      	it	mi
 808a7aa:	4240      	negmi	r0, r0
 808a7ac:	ea5f 0c00 	movs.w	ip, r0
 808a7b0:	bf08      	it	eq
 808a7b2:	4770      	bxeq	lr
 808a7b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a7b8:	4601      	mov	r1, r0
 808a7ba:	f04f 0000 	mov.w	r0, #0
 808a7be:	e01c      	b.n	808a7fa <__aeabi_l2f+0x2a>

0808a7c0 <__aeabi_ul2f>:
 808a7c0:	ea50 0201 	orrs.w	r2, r0, r1
 808a7c4:	bf08      	it	eq
 808a7c6:	4770      	bxeq	lr
 808a7c8:	f04f 0300 	mov.w	r3, #0
 808a7cc:	e00a      	b.n	808a7e4 <__aeabi_l2f+0x14>
 808a7ce:	bf00      	nop

0808a7d0 <__aeabi_l2f>:
 808a7d0:	ea50 0201 	orrs.w	r2, r0, r1
 808a7d4:	bf08      	it	eq
 808a7d6:	4770      	bxeq	lr
 808a7d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a7dc:	d502      	bpl.n	808a7e4 <__aeabi_l2f+0x14>
 808a7de:	4240      	negs	r0, r0
 808a7e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a7e4:	ea5f 0c01 	movs.w	ip, r1
 808a7e8:	bf02      	ittt	eq
 808a7ea:	4684      	moveq	ip, r0
 808a7ec:	4601      	moveq	r1, r0
 808a7ee:	2000      	moveq	r0, #0
 808a7f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a7f4:	bf08      	it	eq
 808a7f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a7fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a7fe:	fabc f28c 	clz	r2, ip
 808a802:	3a08      	subs	r2, #8
 808a804:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a808:	db10      	blt.n	808a82c <__aeabi_l2f+0x5c>
 808a80a:	fa01 fc02 	lsl.w	ip, r1, r2
 808a80e:	4463      	add	r3, ip
 808a810:	fa00 fc02 	lsl.w	ip, r0, r2
 808a814:	f1c2 0220 	rsb	r2, r2, #32
 808a818:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a81c:	fa20 f202 	lsr.w	r2, r0, r2
 808a820:	eb43 0002 	adc.w	r0, r3, r2
 808a824:	bf08      	it	eq
 808a826:	f020 0001 	biceq.w	r0, r0, #1
 808a82a:	4770      	bx	lr
 808a82c:	f102 0220 	add.w	r2, r2, #32
 808a830:	fa01 fc02 	lsl.w	ip, r1, r2
 808a834:	f1c2 0220 	rsb	r2, r2, #32
 808a838:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a83c:	fa21 f202 	lsr.w	r2, r1, r2
 808a840:	eb43 0002 	adc.w	r0, r3, r2
 808a844:	bf08      	it	eq
 808a846:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a84a:	4770      	bx	lr

0808a84c <__aeabi_fmul>:
 808a84c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a850:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a854:	bf1e      	ittt	ne
 808a856:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a85a:	ea92 0f0c 	teqne	r2, ip
 808a85e:	ea93 0f0c 	teqne	r3, ip
 808a862:	d06f      	beq.n	808a944 <__aeabi_fmul+0xf8>
 808a864:	441a      	add	r2, r3
 808a866:	ea80 0c01 	eor.w	ip, r0, r1
 808a86a:	0240      	lsls	r0, r0, #9
 808a86c:	bf18      	it	ne
 808a86e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a872:	d01e      	beq.n	808a8b2 <__aeabi_fmul+0x66>
 808a874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a878:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a87c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a880:	fba0 3101 	umull	r3, r1, r0, r1
 808a884:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a888:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a88c:	bf3e      	ittt	cc
 808a88e:	0049      	lslcc	r1, r1, #1
 808a890:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a894:	005b      	lslcc	r3, r3, #1
 808a896:	ea40 0001 	orr.w	r0, r0, r1
 808a89a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a89e:	2afd      	cmp	r2, #253	; 0xfd
 808a8a0:	d81d      	bhi.n	808a8de <__aeabi_fmul+0x92>
 808a8a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a8a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a8aa:	bf08      	it	eq
 808a8ac:	f020 0001 	biceq.w	r0, r0, #1
 808a8b0:	4770      	bx	lr
 808a8b2:	f090 0f00 	teq	r0, #0
 808a8b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a8ba:	bf08      	it	eq
 808a8bc:	0249      	lsleq	r1, r1, #9
 808a8be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a8c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a8c6:	3a7f      	subs	r2, #127	; 0x7f
 808a8c8:	bfc2      	ittt	gt
 808a8ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a8ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a8d2:	4770      	bxgt	lr
 808a8d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a8d8:	f04f 0300 	mov.w	r3, #0
 808a8dc:	3a01      	subs	r2, #1
 808a8de:	dc5d      	bgt.n	808a99c <__aeabi_fmul+0x150>
 808a8e0:	f112 0f19 	cmn.w	r2, #25
 808a8e4:	bfdc      	itt	le
 808a8e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a8ea:	4770      	bxle	lr
 808a8ec:	f1c2 0200 	rsb	r2, r2, #0
 808a8f0:	0041      	lsls	r1, r0, #1
 808a8f2:	fa21 f102 	lsr.w	r1, r1, r2
 808a8f6:	f1c2 0220 	rsb	r2, r2, #32
 808a8fa:	fa00 fc02 	lsl.w	ip, r0, r2
 808a8fe:	ea5f 0031 	movs.w	r0, r1, rrx
 808a902:	f140 0000 	adc.w	r0, r0, #0
 808a906:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a90a:	bf08      	it	eq
 808a90c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a910:	4770      	bx	lr
 808a912:	f092 0f00 	teq	r2, #0
 808a916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a91a:	bf02      	ittt	eq
 808a91c:	0040      	lsleq	r0, r0, #1
 808a91e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a922:	3a01      	subeq	r2, #1
 808a924:	d0f9      	beq.n	808a91a <__aeabi_fmul+0xce>
 808a926:	ea40 000c 	orr.w	r0, r0, ip
 808a92a:	f093 0f00 	teq	r3, #0
 808a92e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a932:	bf02      	ittt	eq
 808a934:	0049      	lsleq	r1, r1, #1
 808a936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a93a:	3b01      	subeq	r3, #1
 808a93c:	d0f9      	beq.n	808a932 <__aeabi_fmul+0xe6>
 808a93e:	ea41 010c 	orr.w	r1, r1, ip
 808a942:	e78f      	b.n	808a864 <__aeabi_fmul+0x18>
 808a944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a948:	ea92 0f0c 	teq	r2, ip
 808a94c:	bf18      	it	ne
 808a94e:	ea93 0f0c 	teqne	r3, ip
 808a952:	d00a      	beq.n	808a96a <__aeabi_fmul+0x11e>
 808a954:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a958:	bf18      	it	ne
 808a95a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a95e:	d1d8      	bne.n	808a912 <__aeabi_fmul+0xc6>
 808a960:	ea80 0001 	eor.w	r0, r0, r1
 808a964:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a968:	4770      	bx	lr
 808a96a:	f090 0f00 	teq	r0, #0
 808a96e:	bf17      	itett	ne
 808a970:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a974:	4608      	moveq	r0, r1
 808a976:	f091 0f00 	teqne	r1, #0
 808a97a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a97e:	d014      	beq.n	808a9aa <__aeabi_fmul+0x15e>
 808a980:	ea92 0f0c 	teq	r2, ip
 808a984:	d101      	bne.n	808a98a <__aeabi_fmul+0x13e>
 808a986:	0242      	lsls	r2, r0, #9
 808a988:	d10f      	bne.n	808a9aa <__aeabi_fmul+0x15e>
 808a98a:	ea93 0f0c 	teq	r3, ip
 808a98e:	d103      	bne.n	808a998 <__aeabi_fmul+0x14c>
 808a990:	024b      	lsls	r3, r1, #9
 808a992:	bf18      	it	ne
 808a994:	4608      	movne	r0, r1
 808a996:	d108      	bne.n	808a9aa <__aeabi_fmul+0x15e>
 808a998:	ea80 0001 	eor.w	r0, r0, r1
 808a99c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a9a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a9a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a9a8:	4770      	bx	lr
 808a9aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a9ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a9b2:	4770      	bx	lr

0808a9b4 <__aeabi_fdiv>:
 808a9b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a9b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a9bc:	bf1e      	ittt	ne
 808a9be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a9c2:	ea92 0f0c 	teqne	r2, ip
 808a9c6:	ea93 0f0c 	teqne	r3, ip
 808a9ca:	d069      	beq.n	808aaa0 <__aeabi_fdiv+0xec>
 808a9cc:	eba2 0203 	sub.w	r2, r2, r3
 808a9d0:	ea80 0c01 	eor.w	ip, r0, r1
 808a9d4:	0249      	lsls	r1, r1, #9
 808a9d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a9da:	d037      	beq.n	808aa4c <__aeabi_fdiv+0x98>
 808a9dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a9e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a9e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a9e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a9ec:	428b      	cmp	r3, r1
 808a9ee:	bf38      	it	cc
 808a9f0:	005b      	lslcc	r3, r3, #1
 808a9f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a9f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a9fa:	428b      	cmp	r3, r1
 808a9fc:	bf24      	itt	cs
 808a9fe:	1a5b      	subcs	r3, r3, r1
 808aa00:	ea40 000c 	orrcs.w	r0, r0, ip
 808aa04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808aa08:	bf24      	itt	cs
 808aa0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808aa0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808aa12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808aa16:	bf24      	itt	cs
 808aa18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808aa1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808aa20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808aa24:	bf24      	itt	cs
 808aa26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808aa2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808aa2e:	011b      	lsls	r3, r3, #4
 808aa30:	bf18      	it	ne
 808aa32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808aa36:	d1e0      	bne.n	808a9fa <__aeabi_fdiv+0x46>
 808aa38:	2afd      	cmp	r2, #253	; 0xfd
 808aa3a:	f63f af50 	bhi.w	808a8de <__aeabi_fmul+0x92>
 808aa3e:	428b      	cmp	r3, r1
 808aa40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808aa44:	bf08      	it	eq
 808aa46:	f020 0001 	biceq.w	r0, r0, #1
 808aa4a:	4770      	bx	lr
 808aa4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808aa50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808aa54:	327f      	adds	r2, #127	; 0x7f
 808aa56:	bfc2      	ittt	gt
 808aa58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808aa5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808aa60:	4770      	bxgt	lr
 808aa62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808aa66:	f04f 0300 	mov.w	r3, #0
 808aa6a:	3a01      	subs	r2, #1
 808aa6c:	e737      	b.n	808a8de <__aeabi_fmul+0x92>
 808aa6e:	f092 0f00 	teq	r2, #0
 808aa72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808aa76:	bf02      	ittt	eq
 808aa78:	0040      	lsleq	r0, r0, #1
 808aa7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808aa7e:	3a01      	subeq	r2, #1
 808aa80:	d0f9      	beq.n	808aa76 <__aeabi_fdiv+0xc2>
 808aa82:	ea40 000c 	orr.w	r0, r0, ip
 808aa86:	f093 0f00 	teq	r3, #0
 808aa8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808aa8e:	bf02      	ittt	eq
 808aa90:	0049      	lsleq	r1, r1, #1
 808aa92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808aa96:	3b01      	subeq	r3, #1
 808aa98:	d0f9      	beq.n	808aa8e <__aeabi_fdiv+0xda>
 808aa9a:	ea41 010c 	orr.w	r1, r1, ip
 808aa9e:	e795      	b.n	808a9cc <__aeabi_fdiv+0x18>
 808aaa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808aaa4:	ea92 0f0c 	teq	r2, ip
 808aaa8:	d108      	bne.n	808aabc <__aeabi_fdiv+0x108>
 808aaaa:	0242      	lsls	r2, r0, #9
 808aaac:	f47f af7d 	bne.w	808a9aa <__aeabi_fmul+0x15e>
 808aab0:	ea93 0f0c 	teq	r3, ip
 808aab4:	f47f af70 	bne.w	808a998 <__aeabi_fmul+0x14c>
 808aab8:	4608      	mov	r0, r1
 808aaba:	e776      	b.n	808a9aa <__aeabi_fmul+0x15e>
 808aabc:	ea93 0f0c 	teq	r3, ip
 808aac0:	d104      	bne.n	808aacc <__aeabi_fdiv+0x118>
 808aac2:	024b      	lsls	r3, r1, #9
 808aac4:	f43f af4c 	beq.w	808a960 <__aeabi_fmul+0x114>
 808aac8:	4608      	mov	r0, r1
 808aaca:	e76e      	b.n	808a9aa <__aeabi_fmul+0x15e>
 808aacc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808aad0:	bf18      	it	ne
 808aad2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808aad6:	d1ca      	bne.n	808aa6e <__aeabi_fdiv+0xba>
 808aad8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808aadc:	f47f af5c 	bne.w	808a998 <__aeabi_fmul+0x14c>
 808aae0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808aae4:	f47f af3c 	bne.w	808a960 <__aeabi_fmul+0x114>
 808aae8:	e75f      	b.n	808a9aa <__aeabi_fmul+0x15e>
 808aaea:	bf00      	nop

0808aaec <__gesf2>:
 808aaec:	f04f 3cff 	mov.w	ip, #4294967295
 808aaf0:	e006      	b.n	808ab00 <__cmpsf2+0x4>
 808aaf2:	bf00      	nop

0808aaf4 <__lesf2>:
 808aaf4:	f04f 0c01 	mov.w	ip, #1
 808aaf8:	e002      	b.n	808ab00 <__cmpsf2+0x4>
 808aafa:	bf00      	nop

0808aafc <__cmpsf2>:
 808aafc:	f04f 0c01 	mov.w	ip, #1
 808ab00:	f84d cd04 	str.w	ip, [sp, #-4]!
 808ab04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ab08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808ab0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ab10:	bf18      	it	ne
 808ab12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808ab16:	d011      	beq.n	808ab3c <__cmpsf2+0x40>
 808ab18:	b001      	add	sp, #4
 808ab1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808ab1e:	bf18      	it	ne
 808ab20:	ea90 0f01 	teqne	r0, r1
 808ab24:	bf58      	it	pl
 808ab26:	ebb2 0003 	subspl.w	r0, r2, r3
 808ab2a:	bf88      	it	hi
 808ab2c:	17c8      	asrhi	r0, r1, #31
 808ab2e:	bf38      	it	cc
 808ab30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808ab34:	bf18      	it	ne
 808ab36:	f040 0001 	orrne.w	r0, r0, #1
 808ab3a:	4770      	bx	lr
 808ab3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ab40:	d102      	bne.n	808ab48 <__cmpsf2+0x4c>
 808ab42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808ab46:	d105      	bne.n	808ab54 <__cmpsf2+0x58>
 808ab48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808ab4c:	d1e4      	bne.n	808ab18 <__cmpsf2+0x1c>
 808ab4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808ab52:	d0e1      	beq.n	808ab18 <__cmpsf2+0x1c>
 808ab54:	f85d 0b04 	ldr.w	r0, [sp], #4
 808ab58:	4770      	bx	lr
 808ab5a:	bf00      	nop

0808ab5c <__aeabi_cfrcmple>:
 808ab5c:	4684      	mov	ip, r0
 808ab5e:	4608      	mov	r0, r1
 808ab60:	4661      	mov	r1, ip
 808ab62:	e7ff      	b.n	808ab64 <__aeabi_cfcmpeq>

0808ab64 <__aeabi_cfcmpeq>:
 808ab64:	b50f      	push	{r0, r1, r2, r3, lr}
 808ab66:	f7ff ffc9 	bl	808aafc <__cmpsf2>
 808ab6a:	2800      	cmp	r0, #0
 808ab6c:	bf48      	it	mi
 808ab6e:	f110 0f00 	cmnmi.w	r0, #0
 808ab72:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808ab74 <__aeabi_fcmpeq>:
 808ab74:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ab78:	f7ff fff4 	bl	808ab64 <__aeabi_cfcmpeq>
 808ab7c:	bf0c      	ite	eq
 808ab7e:	2001      	moveq	r0, #1
 808ab80:	2000      	movne	r0, #0
 808ab82:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab86:	bf00      	nop

0808ab88 <__aeabi_fcmplt>:
 808ab88:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ab8c:	f7ff ffea 	bl	808ab64 <__aeabi_cfcmpeq>
 808ab90:	bf34      	ite	cc
 808ab92:	2001      	movcc	r0, #1
 808ab94:	2000      	movcs	r0, #0
 808ab96:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab9a:	bf00      	nop

0808ab9c <__aeabi_fcmple>:
 808ab9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aba0:	f7ff ffe0 	bl	808ab64 <__aeabi_cfcmpeq>
 808aba4:	bf94      	ite	ls
 808aba6:	2001      	movls	r0, #1
 808aba8:	2000      	movhi	r0, #0
 808abaa:	f85d fb08 	ldr.w	pc, [sp], #8
 808abae:	bf00      	nop

0808abb0 <__aeabi_fcmpge>:
 808abb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808abb4:	f7ff ffd2 	bl	808ab5c <__aeabi_cfrcmple>
 808abb8:	bf94      	ite	ls
 808abba:	2001      	movls	r0, #1
 808abbc:	2000      	movhi	r0, #0
 808abbe:	f85d fb08 	ldr.w	pc, [sp], #8
 808abc2:	bf00      	nop

0808abc4 <__aeabi_fcmpgt>:
 808abc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808abc8:	f7ff ffc8 	bl	808ab5c <__aeabi_cfrcmple>
 808abcc:	bf34      	ite	cc
 808abce:	2001      	movcc	r0, #1
 808abd0:	2000      	movcs	r0, #0
 808abd2:	f85d fb08 	ldr.w	pc, [sp], #8
 808abd6:	bf00      	nop

0808abd8 <__aeabi_fcmpun>:
 808abd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808abdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808abe0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808abe4:	d102      	bne.n	808abec <__aeabi_fcmpun+0x14>
 808abe6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808abea:	d108      	bne.n	808abfe <__aeabi_fcmpun+0x26>
 808abec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808abf0:	d102      	bne.n	808abf8 <__aeabi_fcmpun+0x20>
 808abf2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808abf6:	d102      	bne.n	808abfe <__aeabi_fcmpun+0x26>
 808abf8:	f04f 0000 	mov.w	r0, #0
 808abfc:	4770      	bx	lr
 808abfe:	f04f 0001 	mov.w	r0, #1
 808ac02:	4770      	bx	lr

0808ac04 <__aeabi_f2iz>:
 808ac04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ac08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808ac0c:	d30f      	bcc.n	808ac2e <__aeabi_f2iz+0x2a>
 808ac0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808ac12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808ac16:	d90d      	bls.n	808ac34 <__aeabi_f2iz+0x30>
 808ac18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808ac1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ac20:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808ac24:	fa23 f002 	lsr.w	r0, r3, r2
 808ac28:	bf18      	it	ne
 808ac2a:	4240      	negne	r0, r0
 808ac2c:	4770      	bx	lr
 808ac2e:	f04f 0000 	mov.w	r0, #0
 808ac32:	4770      	bx	lr
 808ac34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808ac38:	d101      	bne.n	808ac3e <__aeabi_f2iz+0x3a>
 808ac3a:	0242      	lsls	r2, r0, #9
 808ac3c:	d105      	bne.n	808ac4a <__aeabi_f2iz+0x46>
 808ac3e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808ac42:	bf08      	it	eq
 808ac44:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808ac48:	4770      	bx	lr
 808ac4a:	f04f 0000 	mov.w	r0, #0
 808ac4e:	4770      	bx	lr

0808ac50 <__aeabi_ldivmod>:
 808ac50:	b97b      	cbnz	r3, 808ac72 <__aeabi_ldivmod+0x22>
 808ac52:	b972      	cbnz	r2, 808ac72 <__aeabi_ldivmod+0x22>
 808ac54:	2900      	cmp	r1, #0
 808ac56:	bfbe      	ittt	lt
 808ac58:	2000      	movlt	r0, #0
 808ac5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808ac5e:	e006      	blt.n	808ac6e <__aeabi_ldivmod+0x1e>
 808ac60:	bf08      	it	eq
 808ac62:	2800      	cmpeq	r0, #0
 808ac64:	bf1c      	itt	ne
 808ac66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808ac6a:	f04f 30ff 	movne.w	r0, #4294967295
 808ac6e:	f000 b9b5 	b.w	808afdc <__aeabi_idiv0>
 808ac72:	f1ad 0c08 	sub.w	ip, sp, #8
 808ac76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808ac7a:	2900      	cmp	r1, #0
 808ac7c:	db09      	blt.n	808ac92 <__aeabi_ldivmod+0x42>
 808ac7e:	2b00      	cmp	r3, #0
 808ac80:	db1a      	blt.n	808acb8 <__aeabi_ldivmod+0x68>
 808ac82:	f000 f835 	bl	808acf0 <__udivmoddi4>
 808ac86:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ac8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ac8e:	b004      	add	sp, #16
 808ac90:	4770      	bx	lr
 808ac92:	4240      	negs	r0, r0
 808ac94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ac98:	2b00      	cmp	r3, #0
 808ac9a:	db1b      	blt.n	808acd4 <__aeabi_ldivmod+0x84>
 808ac9c:	f000 f828 	bl	808acf0 <__udivmoddi4>
 808aca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 808aca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808aca8:	b004      	add	sp, #16
 808acaa:	4240      	negs	r0, r0
 808acac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808acb0:	4252      	negs	r2, r2
 808acb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808acb6:	4770      	bx	lr
 808acb8:	4252      	negs	r2, r2
 808acba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808acbe:	f000 f817 	bl	808acf0 <__udivmoddi4>
 808acc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808acc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808acca:	b004      	add	sp, #16
 808accc:	4240      	negs	r0, r0
 808acce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808acd2:	4770      	bx	lr
 808acd4:	4252      	negs	r2, r2
 808acd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808acda:	f000 f809 	bl	808acf0 <__udivmoddi4>
 808acde:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ace2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ace6:	b004      	add	sp, #16
 808ace8:	4252      	negs	r2, r2
 808acea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808acee:	4770      	bx	lr

0808acf0 <__udivmoddi4>:
 808acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808acf4:	468c      	mov	ip, r1
 808acf6:	460c      	mov	r4, r1
 808acf8:	4605      	mov	r5, r0
 808acfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808acfc:	2b00      	cmp	r3, #0
 808acfe:	d14f      	bne.n	808ada0 <__udivmoddi4+0xb0>
 808ad00:	428a      	cmp	r2, r1
 808ad02:	4617      	mov	r7, r2
 808ad04:	d96b      	bls.n	808adde <__udivmoddi4+0xee>
 808ad06:	fab2 fe82 	clz	lr, r2
 808ad0a:	f1be 0f00 	cmp.w	lr, #0
 808ad0e:	d00b      	beq.n	808ad28 <__udivmoddi4+0x38>
 808ad10:	f1ce 0520 	rsb	r5, lr, #32
 808ad14:	fa20 f505 	lsr.w	r5, r0, r5
 808ad18:	fa01 f30e 	lsl.w	r3, r1, lr
 808ad1c:	ea45 0c03 	orr.w	ip, r5, r3
 808ad20:	fa02 f70e 	lsl.w	r7, r2, lr
 808ad24:	fa00 f50e 	lsl.w	r5, r0, lr
 808ad28:	0c39      	lsrs	r1, r7, #16
 808ad2a:	fbbc f0f1 	udiv	r0, ip, r1
 808ad2e:	b2ba      	uxth	r2, r7
 808ad30:	fb01 c310 	mls	r3, r1, r0, ip
 808ad34:	fb00 f802 	mul.w	r8, r0, r2
 808ad38:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ad3c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808ad40:	45a0      	cmp	r8, r4
 808ad42:	d909      	bls.n	808ad58 <__udivmoddi4+0x68>
 808ad44:	19e4      	adds	r4, r4, r7
 808ad46:	f100 33ff 	add.w	r3, r0, #4294967295
 808ad4a:	f080 8128 	bcs.w	808af9e <__udivmoddi4+0x2ae>
 808ad4e:	45a0      	cmp	r8, r4
 808ad50:	f240 8125 	bls.w	808af9e <__udivmoddi4+0x2ae>
 808ad54:	3802      	subs	r0, #2
 808ad56:	443c      	add	r4, r7
 808ad58:	ebc8 0404 	rsb	r4, r8, r4
 808ad5c:	fbb4 f3f1 	udiv	r3, r4, r1
 808ad60:	fb01 4c13 	mls	ip, r1, r3, r4
 808ad64:	fb03 f202 	mul.w	r2, r3, r2
 808ad68:	b2ac      	uxth	r4, r5
 808ad6a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808ad6e:	428a      	cmp	r2, r1
 808ad70:	d909      	bls.n	808ad86 <__udivmoddi4+0x96>
 808ad72:	19c9      	adds	r1, r1, r7
 808ad74:	f103 34ff 	add.w	r4, r3, #4294967295
 808ad78:	f080 810f 	bcs.w	808af9a <__udivmoddi4+0x2aa>
 808ad7c:	428a      	cmp	r2, r1
 808ad7e:	f240 810c 	bls.w	808af9a <__udivmoddi4+0x2aa>
 808ad82:	3b02      	subs	r3, #2
 808ad84:	4439      	add	r1, r7
 808ad86:	1a8a      	subs	r2, r1, r2
 808ad88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808ad8c:	2100      	movs	r1, #0
 808ad8e:	2e00      	cmp	r6, #0
 808ad90:	d063      	beq.n	808ae5a <__udivmoddi4+0x16a>
 808ad92:	fa22 f20e 	lsr.w	r2, r2, lr
 808ad96:	2300      	movs	r3, #0
 808ad98:	e886 000c 	stmia.w	r6, {r2, r3}
 808ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ada0:	428b      	cmp	r3, r1
 808ada2:	d907      	bls.n	808adb4 <__udivmoddi4+0xc4>
 808ada4:	2e00      	cmp	r6, #0
 808ada6:	d056      	beq.n	808ae56 <__udivmoddi4+0x166>
 808ada8:	2100      	movs	r1, #0
 808adaa:	e886 0011 	stmia.w	r6, {r0, r4}
 808adae:	4608      	mov	r0, r1
 808adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808adb4:	fab3 f183 	clz	r1, r3
 808adb8:	2900      	cmp	r1, #0
 808adba:	f040 8093 	bne.w	808aee4 <__udivmoddi4+0x1f4>
 808adbe:	42a3      	cmp	r3, r4
 808adc0:	d302      	bcc.n	808adc8 <__udivmoddi4+0xd8>
 808adc2:	4282      	cmp	r2, r0
 808adc4:	f200 80fe 	bhi.w	808afc4 <__udivmoddi4+0x2d4>
 808adc8:	1a85      	subs	r5, r0, r2
 808adca:	eb64 0303 	sbc.w	r3, r4, r3
 808adce:	469c      	mov	ip, r3
 808add0:	2001      	movs	r0, #1
 808add2:	2e00      	cmp	r6, #0
 808add4:	d041      	beq.n	808ae5a <__udivmoddi4+0x16a>
 808add6:	e886 1020 	stmia.w	r6, {r5, ip}
 808adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808adde:	b912      	cbnz	r2, 808ade6 <__udivmoddi4+0xf6>
 808ade0:	2701      	movs	r7, #1
 808ade2:	fbb7 f7f2 	udiv	r7, r7, r2
 808ade6:	fab7 fe87 	clz	lr, r7
 808adea:	f1be 0f00 	cmp.w	lr, #0
 808adee:	d136      	bne.n	808ae5e <__udivmoddi4+0x16e>
 808adf0:	1be4      	subs	r4, r4, r7
 808adf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808adf6:	fa1f f987 	uxth.w	r9, r7
 808adfa:	2101      	movs	r1, #1
 808adfc:	fbb4 f3f8 	udiv	r3, r4, r8
 808ae00:	fb08 4413 	mls	r4, r8, r3, r4
 808ae04:	fb09 f203 	mul.w	r2, r9, r3
 808ae08:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ae0c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808ae10:	42a2      	cmp	r2, r4
 808ae12:	d907      	bls.n	808ae24 <__udivmoddi4+0x134>
 808ae14:	19e4      	adds	r4, r4, r7
 808ae16:	f103 30ff 	add.w	r0, r3, #4294967295
 808ae1a:	d202      	bcs.n	808ae22 <__udivmoddi4+0x132>
 808ae1c:	42a2      	cmp	r2, r4
 808ae1e:	f200 80d3 	bhi.w	808afc8 <__udivmoddi4+0x2d8>
 808ae22:	4603      	mov	r3, r0
 808ae24:	1aa4      	subs	r4, r4, r2
 808ae26:	fbb4 f0f8 	udiv	r0, r4, r8
 808ae2a:	fb08 4810 	mls	r8, r8, r0, r4
 808ae2e:	fb09 f900 	mul.w	r9, r9, r0
 808ae32:	b2ac      	uxth	r4, r5
 808ae34:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808ae38:	4591      	cmp	r9, r2
 808ae3a:	d907      	bls.n	808ae4c <__udivmoddi4+0x15c>
 808ae3c:	19d2      	adds	r2, r2, r7
 808ae3e:	f100 34ff 	add.w	r4, r0, #4294967295
 808ae42:	d202      	bcs.n	808ae4a <__udivmoddi4+0x15a>
 808ae44:	4591      	cmp	r9, r2
 808ae46:	f200 80ba 	bhi.w	808afbe <__udivmoddi4+0x2ce>
 808ae4a:	4620      	mov	r0, r4
 808ae4c:	ebc9 0202 	rsb	r2, r9, r2
 808ae50:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808ae54:	e79b      	b.n	808ad8e <__udivmoddi4+0x9e>
 808ae56:	4631      	mov	r1, r6
 808ae58:	4630      	mov	r0, r6
 808ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ae5e:	fa07 f70e 	lsl.w	r7, r7, lr
 808ae62:	f1ce 0c20 	rsb	ip, lr, #32
 808ae66:	fa24 f30c 	lsr.w	r3, r4, ip
 808ae6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808ae6e:	fbb3 faf8 	udiv	sl, r3, r8
 808ae72:	fa1f f987 	uxth.w	r9, r7
 808ae76:	fb08 351a 	mls	r5, r8, sl, r3
 808ae7a:	fa20 fc0c 	lsr.w	ip, r0, ip
 808ae7e:	fa04 f40e 	lsl.w	r4, r4, lr
 808ae82:	fb0a fb09 	mul.w	fp, sl, r9
 808ae86:	ea4c 0c04 	orr.w	ip, ip, r4
 808ae8a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808ae8e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808ae92:	459b      	cmp	fp, r3
 808ae94:	fa00 f50e 	lsl.w	r5, r0, lr
 808ae98:	d90a      	bls.n	808aeb0 <__udivmoddi4+0x1c0>
 808ae9a:	19db      	adds	r3, r3, r7
 808ae9c:	f10a 32ff 	add.w	r2, sl, #4294967295
 808aea0:	f080 808b 	bcs.w	808afba <__udivmoddi4+0x2ca>
 808aea4:	459b      	cmp	fp, r3
 808aea6:	f240 8088 	bls.w	808afba <__udivmoddi4+0x2ca>
 808aeaa:	f1aa 0a02 	sub.w	sl, sl, #2
 808aeae:	443b      	add	r3, r7
 808aeb0:	ebcb 0303 	rsb	r3, fp, r3
 808aeb4:	fbb3 f0f8 	udiv	r0, r3, r8
 808aeb8:	fb08 3310 	mls	r3, r8, r0, r3
 808aebc:	fb00 f409 	mul.w	r4, r0, r9
 808aec0:	fa1f fc8c 	uxth.w	ip, ip
 808aec4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808aec8:	429c      	cmp	r4, r3
 808aeca:	d907      	bls.n	808aedc <__udivmoddi4+0x1ec>
 808aecc:	19db      	adds	r3, r3, r7
 808aece:	f100 32ff 	add.w	r2, r0, #4294967295
 808aed2:	d26e      	bcs.n	808afb2 <__udivmoddi4+0x2c2>
 808aed4:	429c      	cmp	r4, r3
 808aed6:	d96c      	bls.n	808afb2 <__udivmoddi4+0x2c2>
 808aed8:	3802      	subs	r0, #2
 808aeda:	443b      	add	r3, r7
 808aedc:	1b1c      	subs	r4, r3, r4
 808aede:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808aee2:	e78b      	b.n	808adfc <__udivmoddi4+0x10c>
 808aee4:	f1c1 0e20 	rsb	lr, r1, #32
 808aee8:	408b      	lsls	r3, r1
 808aeea:	fa22 fc0e 	lsr.w	ip, r2, lr
 808aeee:	ea4c 0c03 	orr.w	ip, ip, r3
 808aef2:	fa24 f70e 	lsr.w	r7, r4, lr
 808aef6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808aefa:	fbb7 faf9 	udiv	sl, r7, r9
 808aefe:	fa1f f38c 	uxth.w	r3, ip
 808af02:	fb09 771a 	mls	r7, r9, sl, r7
 808af06:	fa20 f80e 	lsr.w	r8, r0, lr
 808af0a:	408c      	lsls	r4, r1
 808af0c:	fb0a f503 	mul.w	r5, sl, r3
 808af10:	ea48 0404 	orr.w	r4, r8, r4
 808af14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808af18:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808af1c:	42bd      	cmp	r5, r7
 808af1e:	fa02 f201 	lsl.w	r2, r2, r1
 808af22:	fa00 fb01 	lsl.w	fp, r0, r1
 808af26:	d909      	bls.n	808af3c <__udivmoddi4+0x24c>
 808af28:	eb17 070c 	adds.w	r7, r7, ip
 808af2c:	f10a 30ff 	add.w	r0, sl, #4294967295
 808af30:	d241      	bcs.n	808afb6 <__udivmoddi4+0x2c6>
 808af32:	42bd      	cmp	r5, r7
 808af34:	d93f      	bls.n	808afb6 <__udivmoddi4+0x2c6>
 808af36:	f1aa 0a02 	sub.w	sl, sl, #2
 808af3a:	4467      	add	r7, ip
 808af3c:	1b7f      	subs	r7, r7, r5
 808af3e:	fbb7 f5f9 	udiv	r5, r7, r9
 808af42:	fb09 7715 	mls	r7, r9, r5, r7
 808af46:	fb05 f303 	mul.w	r3, r5, r3
 808af4a:	b2a4      	uxth	r4, r4
 808af4c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808af50:	42bb      	cmp	r3, r7
 808af52:	d908      	bls.n	808af66 <__udivmoddi4+0x276>
 808af54:	eb17 070c 	adds.w	r7, r7, ip
 808af58:	f105 30ff 	add.w	r0, r5, #4294967295
 808af5c:	d227      	bcs.n	808afae <__udivmoddi4+0x2be>
 808af5e:	42bb      	cmp	r3, r7
 808af60:	d925      	bls.n	808afae <__udivmoddi4+0x2be>
 808af62:	3d02      	subs	r5, #2
 808af64:	4467      	add	r7, ip
 808af66:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808af6a:	fba0 8902 	umull	r8, r9, r0, r2
 808af6e:	1aff      	subs	r7, r7, r3
 808af70:	454f      	cmp	r7, r9
 808af72:	4645      	mov	r5, r8
 808af74:	464c      	mov	r4, r9
 808af76:	d314      	bcc.n	808afa2 <__udivmoddi4+0x2b2>
 808af78:	d029      	beq.n	808afce <__udivmoddi4+0x2de>
 808af7a:	b366      	cbz	r6, 808afd6 <__udivmoddi4+0x2e6>
 808af7c:	ebbb 0305 	subs.w	r3, fp, r5
 808af80:	eb67 0704 	sbc.w	r7, r7, r4
 808af84:	fa07 fe0e 	lsl.w	lr, r7, lr
 808af88:	40cb      	lsrs	r3, r1
 808af8a:	40cf      	lsrs	r7, r1
 808af8c:	ea4e 0303 	orr.w	r3, lr, r3
 808af90:	e886 0088 	stmia.w	r6, {r3, r7}
 808af94:	2100      	movs	r1, #0
 808af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808af9a:	4623      	mov	r3, r4
 808af9c:	e6f3      	b.n	808ad86 <__udivmoddi4+0x96>
 808af9e:	4618      	mov	r0, r3
 808afa0:	e6da      	b.n	808ad58 <__udivmoddi4+0x68>
 808afa2:	ebb8 0502 	subs.w	r5, r8, r2
 808afa6:	eb69 040c 	sbc.w	r4, r9, ip
 808afaa:	3801      	subs	r0, #1
 808afac:	e7e5      	b.n	808af7a <__udivmoddi4+0x28a>
 808afae:	4605      	mov	r5, r0
 808afb0:	e7d9      	b.n	808af66 <__udivmoddi4+0x276>
 808afb2:	4610      	mov	r0, r2
 808afb4:	e792      	b.n	808aedc <__udivmoddi4+0x1ec>
 808afb6:	4682      	mov	sl, r0
 808afb8:	e7c0      	b.n	808af3c <__udivmoddi4+0x24c>
 808afba:	4692      	mov	sl, r2
 808afbc:	e778      	b.n	808aeb0 <__udivmoddi4+0x1c0>
 808afbe:	3802      	subs	r0, #2
 808afc0:	443a      	add	r2, r7
 808afc2:	e743      	b.n	808ae4c <__udivmoddi4+0x15c>
 808afc4:	4608      	mov	r0, r1
 808afc6:	e704      	b.n	808add2 <__udivmoddi4+0xe2>
 808afc8:	3b02      	subs	r3, #2
 808afca:	443c      	add	r4, r7
 808afcc:	e72a      	b.n	808ae24 <__udivmoddi4+0x134>
 808afce:	45c3      	cmp	fp, r8
 808afd0:	d3e7      	bcc.n	808afa2 <__udivmoddi4+0x2b2>
 808afd2:	463c      	mov	r4, r7
 808afd4:	e7d1      	b.n	808af7a <__udivmoddi4+0x28a>
 808afd6:	4631      	mov	r1, r6
 808afd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808afdc <__aeabi_idiv0>:
 808afdc:	4770      	bx	lr
 808afde:	bf00      	nop

0808afe0 <asctime>:
 808afe0:	4b09      	ldr	r3, [pc, #36]	; (808b008 <asctime+0x28>)
 808afe2:	b570      	push	{r4, r5, r6, lr}
 808afe4:	681c      	ldr	r4, [r3, #0]
 808afe6:	4606      	mov	r6, r0
 808afe8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808afea:	b93d      	cbnz	r5, 808affc <asctime+0x1c>
 808afec:	201a      	movs	r0, #26
 808afee:	f7fa fd39 	bl	8085a64 <malloc>
 808aff2:	221a      	movs	r2, #26
 808aff4:	6420      	str	r0, [r4, #64]	; 0x40
 808aff6:	4629      	mov	r1, r5
 808aff8:	f000 f971 	bl	808b2de <memset>
 808affc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808affe:	4630      	mov	r0, r6
 808b000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808b004:	f000 b802 	b.w	808b00c <asctime_r>
 808b008:	200000bc 	.word	0x200000bc

0808b00c <asctime_r>:
 808b00c:	b510      	push	{r4, lr}
 808b00e:	460c      	mov	r4, r1
 808b010:	6941      	ldr	r1, [r0, #20]
 808b012:	b086      	sub	sp, #24
 808b014:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808b018:	6903      	ldr	r3, [r0, #16]
 808b01a:	6982      	ldr	r2, [r0, #24]
 808b01c:	9104      	str	r1, [sp, #16]
 808b01e:	6801      	ldr	r1, [r0, #0]
 808b020:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808b024:	9103      	str	r1, [sp, #12]
 808b026:	6841      	ldr	r1, [r0, #4]
 808b028:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808b02c:	9102      	str	r1, [sp, #8]
 808b02e:	6881      	ldr	r1, [r0, #8]
 808b030:	9101      	str	r1, [sp, #4]
 808b032:	68c1      	ldr	r1, [r0, #12]
 808b034:	4620      	mov	r0, r4
 808b036:	9100      	str	r1, [sp, #0]
 808b038:	4904      	ldr	r1, [pc, #16]	; (808b04c <asctime_r+0x40>)
 808b03a:	440b      	add	r3, r1
 808b03c:	4904      	ldr	r1, [pc, #16]	; (808b050 <asctime_r+0x44>)
 808b03e:	440a      	add	r2, r1
 808b040:	4904      	ldr	r1, [pc, #16]	; (808b054 <asctime_r+0x48>)
 808b042:	f7fa fd2f 	bl	8085aa4 <siprintf>
 808b046:	4620      	mov	r0, r4
 808b048:	b006      	add	sp, #24
 808b04a:	bd10      	pop	{r4, pc}
 808b04c:	0808f164 	.word	0x0808f164
 808b050:	0808f14f 	.word	0x0808f14f
 808b054:	0808f188 	.word	0x0808f188

0808b058 <atof>:
 808b058:	2100      	movs	r1, #0
 808b05a:	f001 bd49 	b.w	808caf0 <strtod>
	...

0808b060 <__cxa_atexit>:
 808b060:	b510      	push	{r4, lr}
 808b062:	4c05      	ldr	r4, [pc, #20]	; (808b078 <__cxa_atexit+0x18>)
 808b064:	4613      	mov	r3, r2
 808b066:	b12c      	cbz	r4, 808b074 <__cxa_atexit+0x14>
 808b068:	460a      	mov	r2, r1
 808b06a:	4601      	mov	r1, r0
 808b06c:	2002      	movs	r0, #2
 808b06e:	f3af 8000 	nop.w
 808b072:	bd10      	pop	{r4, pc}
 808b074:	4620      	mov	r0, r4
 808b076:	bd10      	pop	{r4, pc}
 808b078:	00000000 	.word	0x00000000

0808b07c <localtime>:
 808b07c:	b538      	push	{r3, r4, r5, lr}
 808b07e:	4b07      	ldr	r3, [pc, #28]	; (808b09c <localtime+0x20>)
 808b080:	4605      	mov	r5, r0
 808b082:	681c      	ldr	r4, [r3, #0]
 808b084:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808b086:	b91b      	cbnz	r3, 808b090 <localtime+0x14>
 808b088:	2024      	movs	r0, #36	; 0x24
 808b08a:	f7fa fceb 	bl	8085a64 <malloc>
 808b08e:	63e0      	str	r0, [r4, #60]	; 0x3c
 808b090:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808b092:	4628      	mov	r0, r5
 808b094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808b098:	f000 b802 	b.w	808b0a0 <localtime_r>
 808b09c:	200000bc 	.word	0x200000bc

0808b0a0 <localtime_r>:
 808b0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b0a4:	460c      	mov	r4, r1
 808b0a6:	4680      	mov	r8, r0
 808b0a8:	f002 fbe8 	bl	808d87c <__gettzinfo>
 808b0ac:	4621      	mov	r1, r4
 808b0ae:	4607      	mov	r7, r0
 808b0b0:	4640      	mov	r0, r8
 808b0b2:	f002 fbe7 	bl	808d884 <gmtime_r>
 808b0b6:	6946      	ldr	r6, [r0, #20]
 808b0b8:	4604      	mov	r4, r0
 808b0ba:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808b0be:	07b3      	lsls	r3, r6, #30
 808b0c0:	d105      	bne.n	808b0ce <localtime_r+0x2e>
 808b0c2:	2264      	movs	r2, #100	; 0x64
 808b0c4:	fb96 f3f2 	sdiv	r3, r6, r2
 808b0c8:	fb02 6313 	mls	r3, r2, r3, r6
 808b0cc:	b94b      	cbnz	r3, 808b0e2 <localtime_r+0x42>
 808b0ce:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808b0d2:	fb96 f3f5 	sdiv	r3, r6, r5
 808b0d6:	fb05 6513 	mls	r5, r5, r3, r6
 808b0da:	fab5 f385 	clz	r3, r5
 808b0de:	095b      	lsrs	r3, r3, #5
 808b0e0:	e000      	b.n	808b0e4 <localtime_r+0x44>
 808b0e2:	2301      	movs	r3, #1
 808b0e4:	4a5f      	ldr	r2, [pc, #380]	; (808b264 <localtime_r+0x1c4>)
 808b0e6:	2530      	movs	r5, #48	; 0x30
 808b0e8:	fb05 2503 	mla	r5, r5, r3, r2
 808b0ec:	f001 fed8 	bl	808cea0 <__tz_lock>
 808b0f0:	f001 fed8 	bl	808cea4 <_tzset_unlocked>
 808b0f4:	4b5c      	ldr	r3, [pc, #368]	; (808b268 <localtime_r+0x1c8>)
 808b0f6:	681b      	ldr	r3, [r3, #0]
 808b0f8:	b1f3      	cbz	r3, 808b138 <localtime_r+0x98>
 808b0fa:	687b      	ldr	r3, [r7, #4]
 808b0fc:	429e      	cmp	r6, r3
 808b0fe:	d105      	bne.n	808b10c <localtime_r+0x6c>
 808b100:	6839      	ldr	r1, [r7, #0]
 808b102:	f8d8 3000 	ldr.w	r3, [r8]
 808b106:	69fa      	ldr	r2, [r7, #28]
 808b108:	b941      	cbnz	r1, 808b11c <localtime_r+0x7c>
 808b10a:	e00a      	b.n	808b122 <localtime_r+0x82>
 808b10c:	4630      	mov	r0, r6
 808b10e:	f001 fe1f 	bl	808cd50 <__tzcalc_limits>
 808b112:	2800      	cmp	r0, #0
 808b114:	d1f4      	bne.n	808b100 <localtime_r+0x60>
 808b116:	f04f 33ff 	mov.w	r3, #4294967295
 808b11a:	e00d      	b.n	808b138 <localtime_r+0x98>
 808b11c:	4293      	cmp	r3, r2
 808b11e:	db08      	blt.n	808b132 <localtime_r+0x92>
 808b120:	e001      	b.n	808b126 <localtime_r+0x86>
 808b122:	4293      	cmp	r3, r2
 808b124:	da07      	bge.n	808b136 <localtime_r+0x96>
 808b126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808b128:	4293      	cmp	r3, r2
 808b12a:	bfac      	ite	ge
 808b12c:	2300      	movge	r3, #0
 808b12e:	2301      	movlt	r3, #1
 808b130:	e002      	b.n	808b138 <localtime_r+0x98>
 808b132:	2300      	movs	r3, #0
 808b134:	e000      	b.n	808b138 <localtime_r+0x98>
 808b136:	2301      	movs	r3, #1
 808b138:	6223      	str	r3, [r4, #32]
 808b13a:	6a23      	ldr	r3, [r4, #32]
 808b13c:	203c      	movs	r0, #60	; 0x3c
 808b13e:	2b01      	cmp	r3, #1
 808b140:	bf0c      	ite	eq
 808b142:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808b144:	6a39      	ldrne	r1, [r7, #32]
 808b146:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808b14a:	fb91 f6f3 	sdiv	r6, r1, r3
 808b14e:	fb03 1316 	mls	r3, r3, r6, r1
 808b152:	fb93 f2f0 	sdiv	r2, r3, r0
 808b156:	fb00 3012 	mls	r0, r0, r2, r3
 808b15a:	6861      	ldr	r1, [r4, #4]
 808b15c:	6823      	ldr	r3, [r4, #0]
 808b15e:	1a89      	subs	r1, r1, r2
 808b160:	68a2      	ldr	r2, [r4, #8]
 808b162:	1a1b      	subs	r3, r3, r0
 808b164:	1b92      	subs	r2, r2, r6
 808b166:	2b3b      	cmp	r3, #59	; 0x3b
 808b168:	6023      	str	r3, [r4, #0]
 808b16a:	6061      	str	r1, [r4, #4]
 808b16c:	60a2      	str	r2, [r4, #8]
 808b16e:	dd03      	ble.n	808b178 <localtime_r+0xd8>
 808b170:	3101      	adds	r1, #1
 808b172:	6061      	str	r1, [r4, #4]
 808b174:	3b3c      	subs	r3, #60	; 0x3c
 808b176:	e004      	b.n	808b182 <localtime_r+0xe2>
 808b178:	2b00      	cmp	r3, #0
 808b17a:	da03      	bge.n	808b184 <localtime_r+0xe4>
 808b17c:	3901      	subs	r1, #1
 808b17e:	6061      	str	r1, [r4, #4]
 808b180:	333c      	adds	r3, #60	; 0x3c
 808b182:	6023      	str	r3, [r4, #0]
 808b184:	6863      	ldr	r3, [r4, #4]
 808b186:	2b3b      	cmp	r3, #59	; 0x3b
 808b188:	dd03      	ble.n	808b192 <localtime_r+0xf2>
 808b18a:	3201      	adds	r2, #1
 808b18c:	60a2      	str	r2, [r4, #8]
 808b18e:	3b3c      	subs	r3, #60	; 0x3c
 808b190:	e004      	b.n	808b19c <localtime_r+0xfc>
 808b192:	2b00      	cmp	r3, #0
 808b194:	da03      	bge.n	808b19e <localtime_r+0xfe>
 808b196:	3a01      	subs	r2, #1
 808b198:	60a2      	str	r2, [r4, #8]
 808b19a:	333c      	adds	r3, #60	; 0x3c
 808b19c:	6063      	str	r3, [r4, #4]
 808b19e:	68a3      	ldr	r3, [r4, #8]
 808b1a0:	2b17      	cmp	r3, #23
 808b1a2:	dd22      	ble.n	808b1ea <localtime_r+0x14a>
 808b1a4:	69e2      	ldr	r2, [r4, #28]
 808b1a6:	3b18      	subs	r3, #24
 808b1a8:	3201      	adds	r2, #1
 808b1aa:	61e2      	str	r2, [r4, #28]
 808b1ac:	69a2      	ldr	r2, [r4, #24]
 808b1ae:	60a3      	str	r3, [r4, #8]
 808b1b0:	3201      	adds	r2, #1
 808b1b2:	2a06      	cmp	r2, #6
 808b1b4:	bfc8      	it	gt
 808b1b6:	2200      	movgt	r2, #0
 808b1b8:	61a2      	str	r2, [r4, #24]
 808b1ba:	68e2      	ldr	r2, [r4, #12]
 808b1bc:	6923      	ldr	r3, [r4, #16]
 808b1be:	3201      	adds	r2, #1
 808b1c0:	60e2      	str	r2, [r4, #12]
 808b1c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808b1c6:	428a      	cmp	r2, r1
 808b1c8:	dd46      	ble.n	808b258 <localtime_r+0x1b8>
 808b1ca:	3301      	adds	r3, #1
 808b1cc:	2b0c      	cmp	r3, #12
 808b1ce:	bf08      	it	eq
 808b1d0:	6963      	ldreq	r3, [r4, #20]
 808b1d2:	eba2 0201 	sub.w	r2, r2, r1
 808b1d6:	60e2      	str	r2, [r4, #12]
 808b1d8:	bf05      	ittet	eq
 808b1da:	3301      	addeq	r3, #1
 808b1dc:	2200      	moveq	r2, #0
 808b1de:	6123      	strne	r3, [r4, #16]
 808b1e0:	6122      	streq	r2, [r4, #16]
 808b1e2:	bf04      	itt	eq
 808b1e4:	6163      	streq	r3, [r4, #20]
 808b1e6:	61e2      	streq	r2, [r4, #28]
 808b1e8:	e036      	b.n	808b258 <localtime_r+0x1b8>
 808b1ea:	2b00      	cmp	r3, #0
 808b1ec:	da34      	bge.n	808b258 <localtime_r+0x1b8>
 808b1ee:	69e2      	ldr	r2, [r4, #28]
 808b1f0:	3318      	adds	r3, #24
 808b1f2:	3a01      	subs	r2, #1
 808b1f4:	61e2      	str	r2, [r4, #28]
 808b1f6:	69a2      	ldr	r2, [r4, #24]
 808b1f8:	60a3      	str	r3, [r4, #8]
 808b1fa:	3a01      	subs	r2, #1
 808b1fc:	bf48      	it	mi
 808b1fe:	2206      	movmi	r2, #6
 808b200:	61a2      	str	r2, [r4, #24]
 808b202:	68e2      	ldr	r2, [r4, #12]
 808b204:	3a01      	subs	r2, #1
 808b206:	60e2      	str	r2, [r4, #12]
 808b208:	bb32      	cbnz	r2, 808b258 <localtime_r+0x1b8>
 808b20a:	6923      	ldr	r3, [r4, #16]
 808b20c:	3b01      	subs	r3, #1
 808b20e:	d401      	bmi.n	808b214 <localtime_r+0x174>
 808b210:	6123      	str	r3, [r4, #16]
 808b212:	e01d      	b.n	808b250 <localtime_r+0x1b0>
 808b214:	230b      	movs	r3, #11
 808b216:	6123      	str	r3, [r4, #16]
 808b218:	6963      	ldr	r3, [r4, #20]
 808b21a:	1e5a      	subs	r2, r3, #1
 808b21c:	f012 0f03 	tst.w	r2, #3
 808b220:	6162      	str	r2, [r4, #20]
 808b222:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808b226:	d105      	bne.n	808b234 <localtime_r+0x194>
 808b228:	2164      	movs	r1, #100	; 0x64
 808b22a:	fb93 f2f1 	sdiv	r2, r3, r1
 808b22e:	fb01 3212 	mls	r2, r1, r2, r3
 808b232:	b94a      	cbnz	r2, 808b248 <localtime_r+0x1a8>
 808b234:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808b238:	fb93 f2f1 	sdiv	r2, r3, r1
 808b23c:	fb01 3312 	mls	r3, r1, r2, r3
 808b240:	fab3 f383 	clz	r3, r3
 808b244:	095b      	lsrs	r3, r3, #5
 808b246:	e000      	b.n	808b24a <localtime_r+0x1aa>
 808b248:	2301      	movs	r3, #1
 808b24a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808b24e:	61e3      	str	r3, [r4, #28]
 808b250:	6923      	ldr	r3, [r4, #16]
 808b252:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808b256:	60e3      	str	r3, [r4, #12]
 808b258:	f001 fe23 	bl	808cea2 <__tz_unlock>
 808b25c:	4620      	mov	r0, r4
 808b25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b262:	bf00      	nop
 808b264:	0808f314 	.word	0x0808f314
 808b268:	200010d8 	.word	0x200010d8

0808b26c <_localeconv_r>:
 808b26c:	4800      	ldr	r0, [pc, #0]	; (808b270 <_localeconv_r+0x4>)
 808b26e:	4770      	bx	lr
 808b270:	200000c0 	.word	0x200000c0

0808b274 <memcmp>:
 808b274:	b510      	push	{r4, lr}
 808b276:	3901      	subs	r1, #1
 808b278:	4402      	add	r2, r0
 808b27a:	4290      	cmp	r0, r2
 808b27c:	d007      	beq.n	808b28e <memcmp+0x1a>
 808b27e:	f810 3b01 	ldrb.w	r3, [r0], #1
 808b282:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b286:	42a3      	cmp	r3, r4
 808b288:	d0f7      	beq.n	808b27a <memcmp+0x6>
 808b28a:	1b18      	subs	r0, r3, r4
 808b28c:	bd10      	pop	{r4, pc}
 808b28e:	2000      	movs	r0, #0
 808b290:	bd10      	pop	{r4, pc}

0808b292 <memcpy>:
 808b292:	b510      	push	{r4, lr}
 808b294:	1e43      	subs	r3, r0, #1
 808b296:	440a      	add	r2, r1
 808b298:	4291      	cmp	r1, r2
 808b29a:	d004      	beq.n	808b2a6 <memcpy+0x14>
 808b29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b2a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 808b2a4:	e7f8      	b.n	808b298 <memcpy+0x6>
 808b2a6:	bd10      	pop	{r4, pc}

0808b2a8 <memmove>:
 808b2a8:	4288      	cmp	r0, r1
 808b2aa:	b510      	push	{r4, lr}
 808b2ac:	eb01 0302 	add.w	r3, r1, r2
 808b2b0:	d801      	bhi.n	808b2b6 <memmove+0xe>
 808b2b2:	1e42      	subs	r2, r0, #1
 808b2b4:	e00b      	b.n	808b2ce <memmove+0x26>
 808b2b6:	4298      	cmp	r0, r3
 808b2b8:	d2fb      	bcs.n	808b2b2 <memmove+0xa>
 808b2ba:	1881      	adds	r1, r0, r2
 808b2bc:	1ad2      	subs	r2, r2, r3
 808b2be:	42d3      	cmn	r3, r2
 808b2c0:	d004      	beq.n	808b2cc <memmove+0x24>
 808b2c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808b2c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 808b2ca:	e7f8      	b.n	808b2be <memmove+0x16>
 808b2cc:	bd10      	pop	{r4, pc}
 808b2ce:	4299      	cmp	r1, r3
 808b2d0:	d004      	beq.n	808b2dc <memmove+0x34>
 808b2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b2d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 808b2da:	e7f8      	b.n	808b2ce <memmove+0x26>
 808b2dc:	bd10      	pop	{r4, pc}

0808b2de <memset>:
 808b2de:	4603      	mov	r3, r0
 808b2e0:	4402      	add	r2, r0
 808b2e2:	4293      	cmp	r3, r2
 808b2e4:	d002      	beq.n	808b2ec <memset+0xe>
 808b2e6:	f803 1b01 	strb.w	r1, [r3], #1
 808b2ea:	e7fa      	b.n	808b2e2 <memset+0x4>
 808b2ec:	4770      	bx	lr
	...

0808b2f0 <srand>:
 808b2f0:	b538      	push	{r3, r4, r5, lr}
 808b2f2:	4b12      	ldr	r3, [pc, #72]	; (808b33c <srand+0x4c>)
 808b2f4:	4605      	mov	r5, r0
 808b2f6:	681c      	ldr	r4, [r3, #0]
 808b2f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808b2fa:	b9d3      	cbnz	r3, 808b332 <srand+0x42>
 808b2fc:	2018      	movs	r0, #24
 808b2fe:	f7fa fbb1 	bl	8085a64 <malloc>
 808b302:	f243 330e 	movw	r3, #13070	; 0x330e
 808b306:	63a0      	str	r0, [r4, #56]	; 0x38
 808b308:	8003      	strh	r3, [r0, #0]
 808b30a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808b30e:	8043      	strh	r3, [r0, #2]
 808b310:	f241 2334 	movw	r3, #4660	; 0x1234
 808b314:	8083      	strh	r3, [r0, #4]
 808b316:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808b31a:	80c3      	strh	r3, [r0, #6]
 808b31c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808b320:	8103      	strh	r3, [r0, #8]
 808b322:	2305      	movs	r3, #5
 808b324:	8143      	strh	r3, [r0, #10]
 808b326:	230b      	movs	r3, #11
 808b328:	8183      	strh	r3, [r0, #12]
 808b32a:	2201      	movs	r2, #1
 808b32c:	2300      	movs	r3, #0
 808b32e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808b332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808b334:	2200      	movs	r2, #0
 808b336:	611d      	str	r5, [r3, #16]
 808b338:	615a      	str	r2, [r3, #20]
 808b33a:	bd38      	pop	{r3, r4, r5, pc}
 808b33c:	200000bc 	.word	0x200000bc

0808b340 <strchr>:
 808b340:	b2c9      	uxtb	r1, r1
 808b342:	4603      	mov	r3, r0
 808b344:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b348:	b11a      	cbz	r2, 808b352 <strchr+0x12>
 808b34a:	4291      	cmp	r1, r2
 808b34c:	d1f9      	bne.n	808b342 <strchr+0x2>
 808b34e:	4618      	mov	r0, r3
 808b350:	4770      	bx	lr
 808b352:	2900      	cmp	r1, #0
 808b354:	bf0c      	ite	eq
 808b356:	4618      	moveq	r0, r3
 808b358:	2000      	movne	r0, #0
 808b35a:	4770      	bx	lr

0808b35c <strchrnul>:
 808b35c:	b510      	push	{r4, lr}
 808b35e:	4604      	mov	r4, r0
 808b360:	f7ff ffee 	bl	808b340 <strchr>
 808b364:	b918      	cbnz	r0, 808b36e <strchrnul+0x12>
 808b366:	4620      	mov	r0, r4
 808b368:	f000 fd44 	bl	808bdf4 <strlen>
 808b36c:	4420      	add	r0, r4
 808b36e:	bd10      	pop	{r4, pc}

0808b370 <strcmp>:
 808b370:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b374:	f811 3b01 	ldrb.w	r3, [r1], #1
 808b378:	2a01      	cmp	r2, #1
 808b37a:	bf28      	it	cs
 808b37c:	429a      	cmpcs	r2, r3
 808b37e:	d0f7      	beq.n	808b370 <strcmp>
 808b380:	1ad0      	subs	r0, r2, r3
 808b382:	4770      	bx	lr

0808b384 <strcpy>:
 808b384:	4603      	mov	r3, r0
 808b386:	f811 2b01 	ldrb.w	r2, [r1], #1
 808b38a:	f803 2b01 	strb.w	r2, [r3], #1
 808b38e:	2a00      	cmp	r2, #0
 808b390:	d1f9      	bne.n	808b386 <strcpy+0x2>
 808b392:	4770      	bx	lr

0808b394 <strdup>:
 808b394:	4b02      	ldr	r3, [pc, #8]	; (808b3a0 <strdup+0xc>)
 808b396:	4601      	mov	r1, r0
 808b398:	6818      	ldr	r0, [r3, #0]
 808b39a:	f000 b803 	b.w	808b3a4 <_strdup_r>
 808b39e:	bf00      	nop
 808b3a0:	200000bc 	.word	0x200000bc

0808b3a4 <_strdup_r>:
 808b3a4:	b570      	push	{r4, r5, r6, lr}
 808b3a6:	4606      	mov	r6, r0
 808b3a8:	4608      	mov	r0, r1
 808b3aa:	460c      	mov	r4, r1
 808b3ac:	f000 fd22 	bl	808bdf4 <strlen>
 808b3b0:	1c45      	adds	r5, r0, #1
 808b3b2:	4629      	mov	r1, r5
 808b3b4:	4630      	mov	r0, r6
 808b3b6:	f7fa fba5 	bl	8085b04 <_malloc_r>
 808b3ba:	4606      	mov	r6, r0
 808b3bc:	b118      	cbz	r0, 808b3c6 <_strdup_r+0x22>
 808b3be:	462a      	mov	r2, r5
 808b3c0:	4621      	mov	r1, r4
 808b3c2:	f7ff ff66 	bl	808b292 <memcpy>
 808b3c6:	4630      	mov	r0, r6
 808b3c8:	bd70      	pop	{r4, r5, r6, pc}

0808b3ca <iso_year_adjust>:
 808b3ca:	6941      	ldr	r1, [r0, #20]
 808b3cc:	b510      	push	{r4, lr}
 808b3ce:	078b      	lsls	r3, r1, #30
 808b3d0:	d10c      	bne.n	808b3ec <iso_year_adjust+0x22>
 808b3d2:	f240 736c 	movw	r3, #1900	; 0x76c
 808b3d6:	2900      	cmp	r1, #0
 808b3d8:	bfa8      	it	ge
 808b3da:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808b3de:	440b      	add	r3, r1
 808b3e0:	2464      	movs	r4, #100	; 0x64
 808b3e2:	fb93 f2f4 	sdiv	r2, r3, r4
 808b3e6:	fb04 3312 	mls	r3, r4, r2, r3
 808b3ea:	b983      	cbnz	r3, 808b40e <iso_year_adjust+0x44>
 808b3ec:	f240 736c 	movw	r3, #1900	; 0x76c
 808b3f0:	2900      	cmp	r1, #0
 808b3f2:	bfa8      	it	ge
 808b3f4:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808b3f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808b3fc:	440b      	add	r3, r1
 808b3fe:	fb93 f1f2 	sdiv	r1, r3, r2
 808b402:	fb02 3311 	mls	r3, r2, r1, r3
 808b406:	fab3 f283 	clz	r2, r3
 808b40a:	0952      	lsrs	r2, r2, #5
 808b40c:	e000      	b.n	808b410 <iso_year_adjust+0x46>
 808b40e:	2201      	movs	r2, #1
 808b410:	6983      	ldr	r3, [r0, #24]
 808b412:	69c1      	ldr	r1, [r0, #28]
 808b414:	005b      	lsls	r3, r3, #1
 808b416:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808b41a:	4413      	add	r3, r2
 808b41c:	2b21      	cmp	r3, #33	; 0x21
 808b41e:	dc0e      	bgt.n	808b43e <iso_year_adjust+0x74>
 808b420:	2b20      	cmp	r3, #32
 808b422:	da2f      	bge.n	808b484 <iso_year_adjust+0xba>
 808b424:	2b0d      	cmp	r3, #13
 808b426:	dc02      	bgt.n	808b42e <iso_year_adjust+0x64>
 808b428:	2b0a      	cmp	r3, #10
 808b42a:	db05      	blt.n	808b438 <iso_year_adjust+0x6e>
 808b42c:	e02a      	b.n	808b484 <iso_year_adjust+0xba>
 808b42e:	2b10      	cmp	r3, #16
 808b430:	db26      	blt.n	808b480 <iso_year_adjust+0xb6>
 808b432:	2b11      	cmp	r3, #17
 808b434:	dd26      	ble.n	808b484 <iso_year_adjust+0xba>
 808b436:	3b1c      	subs	r3, #28
 808b438:	2b01      	cmp	r3, #1
 808b43a:	d923      	bls.n	808b484 <iso_year_adjust+0xba>
 808b43c:	e020      	b.n	808b480 <iso_year_adjust+0xb6>
 808b43e:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808b442:	4293      	cmp	r3, r2
 808b444:	dc0e      	bgt.n	808b464 <iso_year_adjust+0x9a>
 808b446:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808b44a:	4293      	cmp	r3, r2
 808b44c:	da16      	bge.n	808b47c <iso_year_adjust+0xb2>
 808b44e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808b452:	4293      	cmp	r3, r2
 808b454:	d012      	beq.n	808b47c <iso_year_adjust+0xb2>
 808b456:	db13      	blt.n	808b480 <iso_year_adjust+0xb6>
 808b458:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808b45c:	3b12      	subs	r3, #18
 808b45e:	2b02      	cmp	r3, #2
 808b460:	d90c      	bls.n	808b47c <iso_year_adjust+0xb2>
 808b462:	e00d      	b.n	808b480 <iso_year_adjust+0xb6>
 808b464:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808b468:	4293      	cmp	r3, r2
 808b46a:	d007      	beq.n	808b47c <iso_year_adjust+0xb2>
 808b46c:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808b470:	4293      	cmp	r3, r2
 808b472:	d003      	beq.n	808b47c <iso_year_adjust+0xb2>
 808b474:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808b478:	4293      	cmp	r3, r2
 808b47a:	d101      	bne.n	808b480 <iso_year_adjust+0xb6>
 808b47c:	2001      	movs	r0, #1
 808b47e:	bd10      	pop	{r4, pc}
 808b480:	2000      	movs	r0, #0
 808b482:	bd10      	pop	{r4, pc}
 808b484:	f04f 30ff 	mov.w	r0, #4294967295
 808b488:	bd10      	pop	{r4, pc}
	...

0808b48c <strftime>:
 808b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b490:	460e      	mov	r6, r1
 808b492:	b093      	sub	sp, #76	; 0x4c
 808b494:	461d      	mov	r5, r3
 808b496:	4607      	mov	r7, r0
 808b498:	4691      	mov	r9, r2
 808b49a:	f001 fc49 	bl	808cd30 <__get_current_time_locale>
 808b49e:	2300      	movs	r3, #0
 808b4a0:	9306      	str	r3, [sp, #24]
 808b4a2:	461c      	mov	r4, r3
 808b4a4:	1e73      	subs	r3, r6, #1
 808b4a6:	9003      	str	r0, [sp, #12]
 808b4a8:	9302      	str	r3, [sp, #8]
 808b4aa:	f899 3000 	ldrb.w	r3, [r9]
 808b4ae:	2b00      	cmp	r3, #0
 808b4b0:	f000 8492 	beq.w	808bdd8 <strftime+0x94c>
 808b4b4:	2b25      	cmp	r3, #37	; 0x25
 808b4b6:	d008      	beq.n	808b4ca <strftime+0x3e>
 808b4b8:	9a02      	ldr	r2, [sp, #8]
 808b4ba:	4294      	cmp	r4, r2
 808b4bc:	f080 8490 	bcs.w	808bde0 <strftime+0x954>
 808b4c0:	553b      	strb	r3, [r7, r4]
 808b4c2:	f109 0901 	add.w	r9, r9, #1
 808b4c6:	3401      	adds	r4, #1
 808b4c8:	e7ef      	b.n	808b4aa <strftime+0x1e>
 808b4ca:	f899 a001 	ldrb.w	sl, [r9, #1]
 808b4ce:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808b4d2:	d007      	beq.n	808b4e4 <strftime+0x58>
 808b4d4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b4d8:	d004      	beq.n	808b4e4 <strftime+0x58>
 808b4da:	f109 0901 	add.w	r9, r9, #1
 808b4de:	f04f 0a00 	mov.w	sl, #0
 808b4e2:	e001      	b.n	808b4e8 <strftime+0x5c>
 808b4e4:	f109 0902 	add.w	r9, r9, #2
 808b4e8:	f899 3000 	ldrb.w	r3, [r9]
 808b4ec:	3b31      	subs	r3, #49	; 0x31
 808b4ee:	2b08      	cmp	r3, #8
 808b4f0:	d808      	bhi.n	808b504 <strftime+0x78>
 808b4f2:	4648      	mov	r0, r9
 808b4f4:	220a      	movs	r2, #10
 808b4f6:	a90a      	add	r1, sp, #40	; 0x28
 808b4f8:	f001 fc10 	bl	808cd1c <strtoul>
 808b4fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808b500:	4680      	mov	r8, r0
 808b502:	e001      	b.n	808b508 <strftime+0x7c>
 808b504:	f04f 0800 	mov.w	r8, #0
 808b508:	f899 3000 	ldrb.w	r3, [r9]
 808b50c:	2b45      	cmp	r3, #69	; 0x45
 808b50e:	d001      	beq.n	808b514 <strftime+0x88>
 808b510:	2b4f      	cmp	r3, #79	; 0x4f
 808b512:	d101      	bne.n	808b518 <strftime+0x8c>
 808b514:	f109 0901 	add.w	r9, r9, #1
 808b518:	f899 0000 	ldrb.w	r0, [r9]
 808b51c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808b520:	2b55      	cmp	r3, #85	; 0x55
 808b522:	f200 845d 	bhi.w	808bde0 <strftime+0x954>
 808b526:	e8df f013 	tbh	[pc, r3, lsl #1]
 808b52a:	044a      	.short	0x044a
 808b52c:	045b045b 	.word	0x045b045b
 808b530:	045b045b 	.word	0x045b045b
 808b534:	045b045b 	.word	0x045b045b
 808b538:	045b045b 	.word	0x045b045b
 808b53c:	045b045b 	.word	0x045b045b
 808b540:	045b045b 	.word	0x045b045b
 808b544:	045b045b 	.word	0x045b045b
 808b548:	045b045b 	.word	0x045b045b
 808b54c:	045b045b 	.word	0x045b045b
 808b550:	045b045b 	.word	0x045b045b
 808b554:	045b045b 	.word	0x045b045b
 808b558:	045b045b 	.word	0x045b045b
 808b55c:	045b045b 	.word	0x045b045b
 808b560:	006f045b 	.word	0x006f045b
 808b564:	00d400a1 	.word	0x00d400a1
 808b568:	045b011a 	.word	0x045b011a
 808b56c:	01a0013f 	.word	0x01a0013f
 808b570:	022d0226 	.word	0x022d0226
 808b574:	045b045b 	.word	0x045b045b
 808b578:	0260045b 	.word	0x0260045b
 808b57c:	045b045b 	.word	0x045b045b
 808b580:	045b0268 	.word	0x045b0268
 808b584:	031c0296 	.word	0x031c0296
 808b588:	033a0324 	.word	0x033a0324
 808b58c:	03850342 	.word	0x03850342
 808b590:	039f00c6 	.word	0x039f00c6
 808b594:	045b041f 	.word	0x045b041f
 808b598:	045b045b 	.word	0x045b045b
 808b59c:	045b045b 	.word	0x045b045b
 808b5a0:	0056045b 	.word	0x0056045b
 808b5a4:	00ba0089 	.word	0x00ba0089
 808b5a8:	010c010c 	.word	0x010c010c
 808b5ac:	0171045b 	.word	0x0171045b
 808b5b0:	045b0089 	.word	0x045b0089
 808b5b4:	0226023d 	.word	0x0226023d
 808b5b8:	025d022d 	.word	0x025d022d
 808b5bc:	045b0262 	.word	0x045b0262
 808b5c0:	045b0268 	.word	0x045b0268
 808b5c4:	029b00be 	.word	0x029b00be
 808b5c8:	032d031e 	.word	0x032d031e
 808b5cc:	037e045b 	.word	0x037e045b
 808b5d0:	039100c2 	.word	0x039100c2
 808b5d4:	03e7      	.short	0x03e7
 808b5d6:	69ab      	ldr	r3, [r5, #24]
 808b5d8:	9a03      	ldr	r2, [sp, #12]
 808b5da:	3318      	adds	r3, #24
 808b5dc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b5e0:	4640      	mov	r0, r8
 808b5e2:	f000 fc07 	bl	808bdf4 <strlen>
 808b5e6:	f108 38ff 	add.w	r8, r8, #4294967295
 808b5ea:	193b      	adds	r3, r7, r4
 808b5ec:	4420      	add	r0, r4
 808b5ee:	4284      	cmp	r4, r0
 808b5f0:	f000 83eb 	beq.w	808bdca <strftime+0x93e>
 808b5f4:	9a02      	ldr	r2, [sp, #8]
 808b5f6:	4294      	cmp	r4, r2
 808b5f8:	f080 83f2 	bcs.w	808bde0 <strftime+0x954>
 808b5fc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b600:	3401      	adds	r4, #1
 808b602:	f803 2b01 	strb.w	r2, [r3], #1
 808b606:	e7f2      	b.n	808b5ee <strftime+0x162>
 808b608:	69ab      	ldr	r3, [r5, #24]
 808b60a:	9a03      	ldr	r2, [sp, #12]
 808b60c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808b610:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808b614:	4640      	mov	r0, r8
 808b616:	f000 fbed 	bl	808bdf4 <strlen>
 808b61a:	f108 38ff 	add.w	r8, r8, #4294967295
 808b61e:	193b      	adds	r3, r7, r4
 808b620:	4420      	add	r0, r4
 808b622:	4284      	cmp	r4, r0
 808b624:	f000 83d1 	beq.w	808bdca <strftime+0x93e>
 808b628:	9a02      	ldr	r2, [sp, #8]
 808b62a:	4294      	cmp	r4, r2
 808b62c:	f080 83d8 	bcs.w	808bde0 <strftime+0x954>
 808b630:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b634:	3401      	adds	r4, #1
 808b636:	f803 2b01 	strb.w	r2, [r3], #1
 808b63a:	e7f2      	b.n	808b622 <strftime+0x196>
 808b63c:	692b      	ldr	r3, [r5, #16]
 808b63e:	9a03      	ldr	r2, [sp, #12]
 808b640:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b644:	4640      	mov	r0, r8
 808b646:	f000 fbd5 	bl	808bdf4 <strlen>
 808b64a:	f108 38ff 	add.w	r8, r8, #4294967295
 808b64e:	193b      	adds	r3, r7, r4
 808b650:	4420      	add	r0, r4
 808b652:	4284      	cmp	r4, r0
 808b654:	f000 83b9 	beq.w	808bdca <strftime+0x93e>
 808b658:	9a02      	ldr	r2, [sp, #8]
 808b65a:	4294      	cmp	r4, r2
 808b65c:	f080 83c0 	bcs.w	808bde0 <strftime+0x954>
 808b660:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b664:	3401      	adds	r4, #1
 808b666:	f803 2b01 	strb.w	r2, [r3], #1
 808b66a:	e7f2      	b.n	808b652 <strftime+0x1c6>
 808b66c:	692b      	ldr	r3, [r5, #16]
 808b66e:	9a03      	ldr	r2, [sp, #12]
 808b670:	330c      	adds	r3, #12
 808b672:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b676:	4640      	mov	r0, r8
 808b678:	f000 fbbc 	bl	808bdf4 <strlen>
 808b67c:	f108 38ff 	add.w	r8, r8, #4294967295
 808b680:	193b      	adds	r3, r7, r4
 808b682:	4420      	add	r0, r4
 808b684:	4284      	cmp	r4, r0
 808b686:	f000 83a0 	beq.w	808bdca <strftime+0x93e>
 808b68a:	9a02      	ldr	r2, [sp, #8]
 808b68c:	4294      	cmp	r4, r2
 808b68e:	f080 83a7 	bcs.w	808bde0 <strftime+0x954>
 808b692:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b696:	3401      	adds	r4, #1
 808b698:	f803 2b01 	strb.w	r2, [r3], #1
 808b69c:	e7f2      	b.n	808b684 <strftime+0x1f8>
 808b69e:	9b03      	ldr	r3, [sp, #12]
 808b6a0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808b6a4:	e00a      	b.n	808b6bc <strftime+0x230>
 808b6a6:	9b03      	ldr	r3, [sp, #12]
 808b6a8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808b6ac:	e006      	b.n	808b6bc <strftime+0x230>
 808b6ae:	9b03      	ldr	r3, [sp, #12]
 808b6b0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808b6b4:	e002      	b.n	808b6bc <strftime+0x230>
 808b6b6:	9b03      	ldr	r3, [sp, #12]
 808b6b8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808b6bc:	4640      	mov	r0, r8
 808b6be:	f000 fb99 	bl	808bdf4 <strlen>
 808b6c2:	f898 3000 	ldrb.w	r3, [r8]
 808b6c6:	2b00      	cmp	r3, #0
 808b6c8:	f000 837f 	beq.w	808bdca <strftime+0x93e>
 808b6cc:	462b      	mov	r3, r5
 808b6ce:	4642      	mov	r2, r8
 808b6d0:	e093      	b.n	808b7fa <strftime+0x36e>
 808b6d2:	49b6      	ldr	r1, [pc, #728]	; (808b9ac <strftime+0x520>)
 808b6d4:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808b6d8:	458b      	cmp	fp, r1
 808b6da:	bfac      	ite	ge
 808b6dc:	2100      	movge	r1, #0
 808b6de:	2101      	movlt	r1, #1
 808b6e0:	f1bb 0f00 	cmp.w	fp, #0
 808b6e4:	db04      	blt.n	808b6f0 <strftime+0x264>
 808b6e6:	2064      	movs	r0, #100	; 0x64
 808b6e8:	fb9b f0f0 	sdiv	r0, fp, r0
 808b6ec:	3013      	adds	r0, #19
 808b6ee:	e008      	b.n	808b702 <strftime+0x276>
 808b6f0:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808b6f4:	9107      	str	r1, [sp, #28]
 808b6f6:	f001 fd5b 	bl	808d1b0 <abs>
 808b6fa:	2364      	movs	r3, #100	; 0x64
 808b6fc:	fb90 f0f3 	sdiv	r0, r0, r3
 808b700:	9907      	ldr	r1, [sp, #28]
 808b702:	f1ba 0f00 	cmp.w	sl, #0
 808b706:	d008      	beq.n	808b71a <strftime+0x28e>
 808b708:	2863      	cmp	r0, #99	; 0x63
 808b70a:	dd09      	ble.n	808b720 <strftime+0x294>
 808b70c:	4ba8      	ldr	r3, [pc, #672]	; (808b9b0 <strftime+0x524>)
 808b70e:	4aa9      	ldr	r2, [pc, #676]	; (808b9b4 <strftime+0x528>)
 808b710:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b714:	bf18      	it	ne
 808b716:	4613      	movne	r3, r2
 808b718:	e003      	b.n	808b722 <strftime+0x296>
 808b71a:	4ba6      	ldr	r3, [pc, #664]	; (808b9b4 <strftime+0x528>)
 808b71c:	4aa6      	ldr	r2, [pc, #664]	; (808b9b8 <strftime+0x52c>)
 808b71e:	e001      	b.n	808b724 <strftime+0x298>
 808b720:	4ba4      	ldr	r3, [pc, #656]	; (808b9b4 <strftime+0x528>)
 808b722:	4aa6      	ldr	r2, [pc, #664]	; (808b9bc <strftime+0x530>)
 808b724:	f1b8 0f01 	cmp.w	r8, #1
 808b728:	bf98      	it	ls
 808b72a:	f04f 0802 	movls.w	r8, #2
 808b72e:	ebc1 0108 	rsb	r1, r1, r8
 808b732:	9001      	str	r0, [sp, #4]
 808b734:	9100      	str	r1, [sp, #0]
 808b736:	489d      	ldr	r0, [pc, #628]	; (808b9ac <strftime+0x520>)
 808b738:	49a1      	ldr	r1, [pc, #644]	; (808b9c0 <strftime+0x534>)
 808b73a:	4583      	cmp	fp, r0
 808b73c:	bfb8      	it	lt
 808b73e:	460b      	movlt	r3, r1
 808b740:	e21d      	b.n	808bb7e <strftime+0x6f2>
 808b742:	4aa0      	ldr	r2, [pc, #640]	; (808b9c4 <strftime+0x538>)
 808b744:	49a0      	ldr	r1, [pc, #640]	; (808b9c8 <strftime+0x53c>)
 808b746:	68eb      	ldr	r3, [r5, #12]
 808b748:	2864      	cmp	r0, #100	; 0x64
 808b74a:	bf08      	it	eq
 808b74c:	460a      	moveq	r2, r1
 808b74e:	1b31      	subs	r1, r6, r4
 808b750:	1938      	adds	r0, r7, r4
 808b752:	f7fa f9bf 	bl	8085ad4 <sniprintf>
 808b756:	2800      	cmp	r0, #0
 808b758:	f280 8302 	bge.w	808bd60 <strftime+0x8d4>
 808b75c:	e340      	b.n	808bde0 <strftime+0x954>
 808b75e:	6968      	ldr	r0, [r5, #20]
 808b760:	692b      	ldr	r3, [r5, #16]
 808b762:	2800      	cmp	r0, #0
 808b764:	f103 0b01 	add.w	fp, r3, #1
 808b768:	eb07 0804 	add.w	r8, r7, r4
 808b76c:	ebc4 0a06 	rsb	sl, r4, r6
 808b770:	68eb      	ldr	r3, [r5, #12]
 808b772:	db05      	blt.n	808b780 <strftime+0x2f4>
 808b774:	2264      	movs	r2, #100	; 0x64
 808b776:	fb90 f1f2 	sdiv	r1, r0, r2
 808b77a:	fb02 0011 	mls	r0, r2, r1, r0
 808b77e:	e00a      	b.n	808b796 <strftime+0x30a>
 808b780:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b784:	9307      	str	r3, [sp, #28]
 808b786:	f001 fd13 	bl	808d1b0 <abs>
 808b78a:	2264      	movs	r2, #100	; 0x64
 808b78c:	fb90 f1f2 	sdiv	r1, r0, r2
 808b790:	fb01 0012 	mls	r0, r1, r2, r0
 808b794:	9b07      	ldr	r3, [sp, #28]
 808b796:	9001      	str	r0, [sp, #4]
 808b798:	9300      	str	r3, [sp, #0]
 808b79a:	4651      	mov	r1, sl
 808b79c:	465b      	mov	r3, fp
 808b79e:	4640      	mov	r0, r8
 808b7a0:	4a8a      	ldr	r2, [pc, #552]	; (808b9cc <strftime+0x540>)
 808b7a2:	f7fa f997 	bl	8085ad4 <sniprintf>
 808b7a6:	e7d6      	b.n	808b756 <strftime+0x2ca>
 808b7a8:	2325      	movs	r3, #37	; 0x25
 808b7aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808b7ae:	f1ba 0f00 	cmp.w	sl, #0
 808b7b2:	d007      	beq.n	808b7c4 <strftime+0x338>
 808b7b4:	f1b8 0f05 	cmp.w	r8, #5
 808b7b8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808b7bc:	bf98      	it	ls
 808b7be:	f04f 0806 	movls.w	r8, #6
 808b7c2:	e004      	b.n	808b7ce <strftime+0x342>
 808b7c4:	232b      	movs	r3, #43	; 0x2b
 808b7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808b7ca:	f04f 080a 	mov.w	r8, #10
 808b7ce:	f1b8 0306 	subs.w	r3, r8, #6
 808b7d2:	d102      	bne.n	808b7da <strftime+0x34e>
 808b7d4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b7d8:	e00a      	b.n	808b7f0 <strftime+0x364>
 808b7da:	4a7d      	ldr	r2, [pc, #500]	; (808b9d0 <strftime+0x544>)
 808b7dc:	211e      	movs	r1, #30
 808b7de:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b7e2:	f7fa f977 	bl	8085ad4 <sniprintf>
 808b7e6:	2800      	cmp	r0, #0
 808b7e8:	ddf4      	ble.n	808b7d4 <strftime+0x348>
 808b7ea:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808b7ee:	4418      	add	r0, r3
 808b7f0:	4978      	ldr	r1, [pc, #480]	; (808b9d4 <strftime+0x548>)
 808b7f2:	f7ff fdc7 	bl	808b384 <strcpy>
 808b7f6:	462b      	mov	r3, r5
 808b7f8:	aa0a      	add	r2, sp, #40	; 0x28
 808b7fa:	1b31      	subs	r1, r6, r4
 808b7fc:	1938      	adds	r0, r7, r4
 808b7fe:	f7ff fe45 	bl	808b48c <strftime>
 808b802:	2800      	cmp	r0, #0
 808b804:	f340 82ec 	ble.w	808bde0 <strftime+0x954>
 808b808:	4404      	add	r4, r0
 808b80a:	e2de      	b.n	808bdca <strftime+0x93e>
 808b80c:	4628      	mov	r0, r5
 808b80e:	f7ff fddc 	bl	808b3ca <iso_year_adjust>
 808b812:	4680      	mov	r8, r0
 808b814:	6968      	ldr	r0, [r5, #20]
 808b816:	2800      	cmp	r0, #0
 808b818:	db05      	blt.n	808b826 <strftime+0x39a>
 808b81a:	2264      	movs	r2, #100	; 0x64
 808b81c:	fb90 f1f2 	sdiv	r1, r0, r2
 808b820:	fb02 0011 	mls	r0, r2, r1, r0
 808b824:	e008      	b.n	808b838 <strftime+0x3ac>
 808b826:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b82a:	f001 fcc1 	bl	808d1b0 <abs>
 808b82e:	2264      	movs	r2, #100	; 0x64
 808b830:	fb90 f3f2 	sdiv	r3, r0, r2
 808b834:	fb03 0012 	mls	r0, r3, r2, r0
 808b838:	f1b8 0f00 	cmp.w	r8, #0
 808b83c:	da06      	bge.n	808b84c <strftime+0x3c0>
 808b83e:	696a      	ldr	r2, [r5, #20]
 808b840:	4b65      	ldr	r3, [pc, #404]	; (808b9d8 <strftime+0x54c>)
 808b842:	429a      	cmp	r2, r3
 808b844:	bfb8      	it	lt
 808b846:	f04f 0801 	movlt.w	r8, #1
 808b84a:	e006      	b.n	808b85a <strftime+0x3ce>
 808b84c:	d005      	beq.n	808b85a <strftime+0x3ce>
 808b84e:	696a      	ldr	r2, [r5, #20]
 808b850:	4b56      	ldr	r3, [pc, #344]	; (808b9ac <strftime+0x520>)
 808b852:	429a      	cmp	r2, r3
 808b854:	bfb8      	it	lt
 808b856:	f04f 38ff 	movlt.w	r8, #4294967295
 808b85a:	2364      	movs	r3, #100	; 0x64
 808b85c:	4440      	add	r0, r8
 808b85e:	fb90 f2f3 	sdiv	r2, r0, r3
 808b862:	fb03 0012 	mls	r0, r3, r2, r0
 808b866:	4418      	add	r0, r3
 808b868:	e1f8      	b.n	808bc5c <strftime+0x7d0>
 808b86a:	4b50      	ldr	r3, [pc, #320]	; (808b9ac <strftime+0x520>)
 808b86c:	6969      	ldr	r1, [r5, #20]
 808b86e:	4628      	mov	r0, r5
 808b870:	4299      	cmp	r1, r3
 808b872:	bfac      	ite	ge
 808b874:	2300      	movge	r3, #0
 808b876:	2301      	movlt	r3, #1
 808b878:	9108      	str	r1, [sp, #32]
 808b87a:	9307      	str	r3, [sp, #28]
 808b87c:	f7ff fda5 	bl	808b3ca <iso_year_adjust>
 808b880:	9908      	ldr	r1, [sp, #32]
 808b882:	4683      	mov	fp, r0
 808b884:	2900      	cmp	r1, #0
 808b886:	db04      	blt.n	808b892 <strftime+0x406>
 808b888:	2364      	movs	r3, #100	; 0x64
 808b88a:	fb91 f3f3 	sdiv	r3, r1, r3
 808b88e:	3313      	adds	r3, #19
 808b890:	e008      	b.n	808b8a4 <strftime+0x418>
 808b892:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808b896:	9108      	str	r1, [sp, #32]
 808b898:	f001 fc8a 	bl	808d1b0 <abs>
 808b89c:	2364      	movs	r3, #100	; 0x64
 808b89e:	fb90 f3f3 	sdiv	r3, r0, r3
 808b8a2:	9908      	ldr	r1, [sp, #32]
 808b8a4:	6968      	ldr	r0, [r5, #20]
 808b8a6:	2800      	cmp	r0, #0
 808b8a8:	db06      	blt.n	808b8b8 <strftime+0x42c>
 808b8aa:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b8ae:	fb90 fcfe 	sdiv	ip, r0, lr
 808b8b2:	fb0e 001c 	mls	r0, lr, ip, r0
 808b8b6:	e00d      	b.n	808b8d4 <strftime+0x448>
 808b8b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b8bc:	9109      	str	r1, [sp, #36]	; 0x24
 808b8be:	9308      	str	r3, [sp, #32]
 808b8c0:	f001 fc76 	bl	808d1b0 <abs>
 808b8c4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b8c8:	fb90 fcfe 	sdiv	ip, r0, lr
 808b8cc:	fb0c 001e 	mls	r0, ip, lr, r0
 808b8d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 808b8d2:	9b08      	ldr	r3, [sp, #32]
 808b8d4:	f1bb 0f00 	cmp.w	fp, #0
 808b8d8:	da08      	bge.n	808b8ec <strftime+0x460>
 808b8da:	6969      	ldr	r1, [r5, #20]
 808b8dc:	4a3e      	ldr	r2, [pc, #248]	; (808b9d8 <strftime+0x54c>)
 808b8de:	4291      	cmp	r1, r2
 808b8e0:	da0a      	bge.n	808b8f8 <strftime+0x46c>
 808b8e2:	f04f 0b01 	mov.w	fp, #1
 808b8e6:	f8cd b01c 	str.w	fp, [sp, #28]
 808b8ea:	e005      	b.n	808b8f8 <strftime+0x46c>
 808b8ec:	d004      	beq.n	808b8f8 <strftime+0x46c>
 808b8ee:	4a2f      	ldr	r2, [pc, #188]	; (808b9ac <strftime+0x520>)
 808b8f0:	4291      	cmp	r1, r2
 808b8f2:	bfb8      	it	lt
 808b8f4:	f04f 3bff 	movlt.w	fp, #4294967295
 808b8f8:	eb0b 0200 	add.w	r2, fp, r0
 808b8fc:	1c50      	adds	r0, r2, #1
 808b8fe:	d102      	bne.n	808b906 <strftime+0x47a>
 808b900:	3b01      	subs	r3, #1
 808b902:	2263      	movs	r2, #99	; 0x63
 808b904:	e003      	b.n	808b90e <strftime+0x482>
 808b906:	2a64      	cmp	r2, #100	; 0x64
 808b908:	bf04      	itt	eq
 808b90a:	3301      	addeq	r3, #1
 808b90c:	2200      	moveq	r2, #0
 808b90e:	2064      	movs	r0, #100	; 0x64
 808b910:	fb00 2303 	mla	r3, r0, r3, r2
 808b914:	9a07      	ldr	r2, [sp, #28]
 808b916:	b142      	cbz	r2, 808b92a <strftime+0x49e>
 808b918:	222d      	movs	r2, #45	; 0x2d
 808b91a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808b91e:	f1b8 0f00 	cmp.w	r8, #0
 808b922:	d013      	beq.n	808b94c <strftime+0x4c0>
 808b924:	f108 38ff 	add.w	r8, r8, #4294967295
 808b928:	e010      	b.n	808b94c <strftime+0x4c0>
 808b92a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b92e:	d110      	bne.n	808b952 <strftime+0x4c6>
 808b930:	f242 720f 	movw	r2, #9999	; 0x270f
 808b934:	4293      	cmp	r3, r2
 808b936:	d90c      	bls.n	808b952 <strftime+0x4c6>
 808b938:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808b93c:	f1b8 0f00 	cmp.w	r8, #0
 808b940:	d1f0      	bne.n	808b924 <strftime+0x498>
 808b942:	aa12      	add	r2, sp, #72	; 0x48
 808b944:	2125      	movs	r1, #37	; 0x25
 808b946:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808b94a:	e00a      	b.n	808b962 <strftime+0x4d6>
 808b94c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808b950:	e000      	b.n	808b954 <strftime+0x4c8>
 808b952:	aa0a      	add	r2, sp, #40	; 0x28
 808b954:	2125      	movs	r1, #37	; 0x25
 808b956:	7011      	strb	r1, [r2, #0]
 808b958:	f1ba 0f00 	cmp.w	sl, #0
 808b95c:	d101      	bne.n	808b962 <strftime+0x4d6>
 808b95e:	1c50      	adds	r0, r2, #1
 808b960:	e002      	b.n	808b968 <strftime+0x4dc>
 808b962:	2130      	movs	r1, #48	; 0x30
 808b964:	1c90      	adds	r0, r2, #2
 808b966:	7051      	strb	r1, [r2, #1]
 808b968:	491c      	ldr	r1, [pc, #112]	; (808b9dc <strftime+0x550>)
 808b96a:	9307      	str	r3, [sp, #28]
 808b96c:	f7ff fd0a 	bl	808b384 <strcpy>
 808b970:	9b07      	ldr	r3, [sp, #28]
 808b972:	9300      	str	r3, [sp, #0]
 808b974:	e1ac      	b.n	808bcd0 <strftime+0x844>
 808b976:	4a14      	ldr	r2, [pc, #80]	; (808b9c8 <strftime+0x53c>)
 808b978:	4912      	ldr	r1, [pc, #72]	; (808b9c4 <strftime+0x538>)
 808b97a:	68ab      	ldr	r3, [r5, #8]
 808b97c:	286b      	cmp	r0, #107	; 0x6b
 808b97e:	bf08      	it	eq
 808b980:	460a      	moveq	r2, r1
 808b982:	e6e4      	b.n	808b74e <strftime+0x2c2>
 808b984:	68a9      	ldr	r1, [r5, #8]
 808b986:	230c      	movs	r3, #12
 808b988:	b131      	cbz	r1, 808b998 <strftime+0x50c>
 808b98a:	4299      	cmp	r1, r3
 808b98c:	bf16      	itet	ne
 808b98e:	fb91 f2f3 	sdivne	r2, r1, r3
 808b992:	460b      	moveq	r3, r1
 808b994:	fb03 1312 	mlsne	r3, r3, r2, r1
 808b998:	4a0a      	ldr	r2, [pc, #40]	; (808b9c4 <strftime+0x538>)
 808b99a:	490b      	ldr	r1, [pc, #44]	; (808b9c8 <strftime+0x53c>)
 808b99c:	2849      	cmp	r0, #73	; 0x49
 808b99e:	bf08      	it	eq
 808b9a0:	460a      	moveq	r2, r1
 808b9a2:	e6d4      	b.n	808b74e <strftime+0x2c2>
 808b9a4:	69eb      	ldr	r3, [r5, #28]
 808b9a6:	4a0e      	ldr	r2, [pc, #56]	; (808b9e0 <strftime+0x554>)
 808b9a8:	3301      	adds	r3, #1
 808b9aa:	e6d0      	b.n	808b74e <strftime+0x2c2>
 808b9ac:	fffff894 	.word	0xfffff894
 808b9b0:	0808f383 	.word	0x0808f383
 808b9b4:	0808ec97 	.word	0x0808ec97
 808b9b8:	0808f374 	.word	0x0808f374
 808b9bc:	0808f37b 	.word	0x0808f37b
 808b9c0:	0808e75a 	.word	0x0808e75a
 808b9c4:	0808f385 	.word	0x0808f385
 808b9c8:	0808f393 	.word	0x0808f393
 808b9cc:	0808f389 	.word	0x0808f389
 808b9d0:	0808e5fd 	.word	0x0808e5fd
 808b9d4:	0808e330 	.word	0x0808e330
 808b9d8:	fffff895 	.word	0xfffff895
 808b9dc:	0808f398 	.word	0x0808f398
 808b9e0:	0808f39c 	.word	0x0808f39c
 808b9e4:	692b      	ldr	r3, [r5, #16]
 808b9e6:	3301      	adds	r3, #1
 808b9e8:	e13c      	b.n	808bc64 <strftime+0x7d8>
 808b9ea:	686b      	ldr	r3, [r5, #4]
 808b9ec:	e13a      	b.n	808bc64 <strftime+0x7d8>
 808b9ee:	9b02      	ldr	r3, [sp, #8]
 808b9f0:	429c      	cmp	r4, r3
 808b9f2:	f080 81f5 	bcs.w	808bde0 <strftime+0x954>
 808b9f6:	230a      	movs	r3, #10
 808b9f8:	e1e5      	b.n	808bdc6 <strftime+0x93a>
 808b9fa:	68ab      	ldr	r3, [r5, #8]
 808b9fc:	9a03      	ldr	r2, [sp, #12]
 808b9fe:	2b0b      	cmp	r3, #11
 808ba00:	bfcc      	ite	gt
 808ba02:	23a4      	movgt	r3, #164	; 0xa4
 808ba04:	23a0      	movle	r3, #160	; 0xa0
 808ba06:	4413      	add	r3, r2
 808ba08:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808ba0c:	4640      	mov	r0, r8
 808ba0e:	f000 f9f1 	bl	808bdf4 <strlen>
 808ba12:	4642      	mov	r2, r8
 808ba14:	4bb1      	ldr	r3, [pc, #708]	; (808bcdc <strftime+0x850>)
 808ba16:	1939      	adds	r1, r7, r4
 808ba18:	f8d3 e000 	ldr.w	lr, [r3]
 808ba1c:	4420      	add	r0, r4
 808ba1e:	4284      	cmp	r4, r0
 808ba20:	f000 81d3 	beq.w	808bdca <strftime+0x93e>
 808ba24:	9b02      	ldr	r3, [sp, #8]
 808ba26:	429c      	cmp	r4, r3
 808ba28:	f080 81da 	bcs.w	808bde0 <strftime+0x954>
 808ba2c:	f899 3000 	ldrb.w	r3, [r9]
 808ba30:	3401      	adds	r4, #1
 808ba32:	2b50      	cmp	r3, #80	; 0x50
 808ba34:	7813      	ldrb	r3, [r2, #0]
 808ba36:	d10a      	bne.n	808ba4e <strftime+0x5c2>
 808ba38:	eb0e 0c03 	add.w	ip, lr, r3
 808ba3c:	f89c c001 	ldrb.w	ip, [ip, #1]
 808ba40:	f00c 0c03 	and.w	ip, ip, #3
 808ba44:	f1bc 0f01 	cmp.w	ip, #1
 808ba48:	bf08      	it	eq
 808ba4a:	3320      	addeq	r3, #32
 808ba4c:	b2db      	uxtb	r3, r3
 808ba4e:	f801 3b01 	strb.w	r3, [r1], #1
 808ba52:	3201      	adds	r2, #1
 808ba54:	e7e3      	b.n	808ba1e <strftime+0x592>
 808ba56:	686b      	ldr	r3, [r5, #4]
 808ba58:	4aa1      	ldr	r2, [pc, #644]	; (808bce0 <strftime+0x854>)
 808ba5a:	9300      	str	r3, [sp, #0]
 808ba5c:	68ab      	ldr	r3, [r5, #8]
 808ba5e:	e139      	b.n	808bcd4 <strftime+0x848>
 808ba60:	6a2b      	ldr	r3, [r5, #32]
 808ba62:	2b00      	cmp	r3, #0
 808ba64:	db17      	blt.n	808ba96 <strftime+0x60a>
 808ba66:	f001 fa1b 	bl	808cea0 <__tz_lock>
 808ba6a:	9b06      	ldr	r3, [sp, #24]
 808ba6c:	b91b      	cbnz	r3, 808ba76 <strftime+0x5ea>
 808ba6e:	f001 fa19 	bl	808cea4 <_tzset_unlocked>
 808ba72:	2301      	movs	r3, #1
 808ba74:	9306      	str	r3, [sp, #24]
 808ba76:	f001 ff01 	bl	808d87c <__gettzinfo>
 808ba7a:	6a2b      	ldr	r3, [r5, #32]
 808ba7c:	221c      	movs	r2, #28
 808ba7e:	2b00      	cmp	r3, #0
 808ba80:	bfd4      	ite	le
 808ba82:	2300      	movle	r3, #0
 808ba84:	2301      	movgt	r3, #1
 808ba86:	fb02 0003 	mla	r0, r2, r3, r0
 808ba8a:	6a03      	ldr	r3, [r0, #32]
 808ba8c:	f1c3 0800 	rsb	r8, r3, #0
 808ba90:	f001 fa07 	bl	808cea2 <__tz_unlock>
 808ba94:	e001      	b.n	808ba9a <strftime+0x60e>
 808ba96:	f04f 0800 	mov.w	r8, #0
 808ba9a:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808ba9e:	ebc4 0c06 	rsb	ip, r4, r6
 808baa2:	4670      	mov	r0, lr
 808baa4:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808baa8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808baac:	f141 33ff 	adc.w	r3, r1, #4294967295
 808bab0:	2a00      	cmp	r2, #0
 808bab2:	f173 0b00 	sbcs.w	fp, r3, #0
 808bab6:	eb07 0a04 	add.w	sl, r7, r4
 808baba:	da03      	bge.n	808bac4 <strftime+0x638>
 808babc:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808bac0:	f141 33ff 	adc.w	r3, r1, #4294967295
 808bac4:	0891      	lsrs	r1, r2, #2
 808bac6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808baca:	109b      	asrs	r3, r3, #2
 808bacc:	9104      	str	r1, [sp, #16]
 808bace:	9305      	str	r3, [sp, #20]
 808bad0:	f10e 31ff 	add.w	r1, lr, #4294967295
 808bad4:	2364      	movs	r3, #100	; 0x64
 808bad6:	fb91 f1f3 	sdiv	r1, r1, r3
 808bada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808bade:	1a52      	subs	r2, r2, r1
 808bae0:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808bae4:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808bae8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808baec:	fb90 f1f1 	sdiv	r1, r0, r1
 808baf0:	1852      	adds	r2, r2, r1
 808baf2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808baf6:	f240 116d 	movw	r1, #365	; 0x16d
 808bafa:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808bafe:	fb01 fe0e 	mul.w	lr, r1, lr
 808bb02:	69e9      	ldr	r1, [r5, #28]
 808bb04:	eb12 020e 	adds.w	r2, r2, lr
 808bb08:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808bb0c:	1852      	adds	r2, r2, r1
 808bb0e:	f04f 0e18 	mov.w	lr, #24
 808bb12:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808bb16:	fba2 010e 	umull	r0, r1, r2, lr
 808bb1a:	fb0e 1103 	mla	r1, lr, r3, r1
 808bb1e:	68ab      	ldr	r3, [r5, #8]
 808bb20:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808bb24:	18c0      	adds	r0, r0, r3
 808bb26:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808bb2a:	fba0 230e 	umull	r2, r3, r0, lr
 808bb2e:	fb0e 3301 	mla	r3, lr, r1, r3
 808bb32:	6869      	ldr	r1, [r5, #4]
 808bb34:	1852      	adds	r2, r2, r1
 808bb36:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808bb3a:	fba2 010e 	umull	r0, r1, r2, lr
 808bb3e:	fb0e 1103 	mla	r1, lr, r3, r1
 808bb42:	682b      	ldr	r3, [r5, #0]
 808bb44:	4a67      	ldr	r2, [pc, #412]	; (808bce4 <strftime+0x858>)
 808bb46:	18c0      	adds	r0, r0, r3
 808bb48:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808bb4c:	ebb0 0008 	subs.w	r0, r0, r8
 808bb50:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808bb54:	e9cd 0100 	strd	r0, r1, [sp]
 808bb58:	4661      	mov	r1, ip
 808bb5a:	4650      	mov	r0, sl
 808bb5c:	f7f9 ffba 	bl	8085ad4 <sniprintf>
 808bb60:	e5f9      	b.n	808b756 <strftime+0x2ca>
 808bb62:	682b      	ldr	r3, [r5, #0]
 808bb64:	e07e      	b.n	808bc64 <strftime+0x7d8>
 808bb66:	9b02      	ldr	r3, [sp, #8]
 808bb68:	429c      	cmp	r4, r3
 808bb6a:	f080 8139 	bcs.w	808bde0 <strftime+0x954>
 808bb6e:	2309      	movs	r3, #9
 808bb70:	e129      	b.n	808bdc6 <strftime+0x93a>
 808bb72:	682b      	ldr	r3, [r5, #0]
 808bb74:	4a5c      	ldr	r2, [pc, #368]	; (808bce8 <strftime+0x85c>)
 808bb76:	9301      	str	r3, [sp, #4]
 808bb78:	686b      	ldr	r3, [r5, #4]
 808bb7a:	9300      	str	r3, [sp, #0]
 808bb7c:	68ab      	ldr	r3, [r5, #8]
 808bb7e:	1b31      	subs	r1, r6, r4
 808bb80:	1938      	adds	r0, r7, r4
 808bb82:	e60e      	b.n	808b7a2 <strftime+0x316>
 808bb84:	9b02      	ldr	r3, [sp, #8]
 808bb86:	429c      	cmp	r4, r3
 808bb88:	f080 812a 	bcs.w	808bde0 <strftime+0x954>
 808bb8c:	69ab      	ldr	r3, [r5, #24]
 808bb8e:	1c62      	adds	r2, r4, #1
 808bb90:	b90b      	cbnz	r3, 808bb96 <strftime+0x70a>
 808bb92:	2337      	movs	r3, #55	; 0x37
 808bb94:	e000      	b.n	808bb98 <strftime+0x70c>
 808bb96:	3330      	adds	r3, #48	; 0x30
 808bb98:	553b      	strb	r3, [r7, r4]
 808bb9a:	4614      	mov	r4, r2
 808bb9c:	e115      	b.n	808bdca <strftime+0x93e>
 808bb9e:	69eb      	ldr	r3, [r5, #28]
 808bba0:	69aa      	ldr	r2, [r5, #24]
 808bba2:	3307      	adds	r3, #7
 808bba4:	1a9b      	subs	r3, r3, r2
 808bba6:	2207      	movs	r2, #7
 808bba8:	fb93 f3f2 	sdiv	r3, r3, r2
 808bbac:	e05a      	b.n	808bc64 <strftime+0x7d8>
 808bbae:	4628      	mov	r0, r5
 808bbb0:	f7ff fc0b 	bl	808b3ca <iso_year_adjust>
 808bbb4:	69aa      	ldr	r2, [r5, #24]
 808bbb6:	b10a      	cbz	r2, 808bbbc <strftime+0x730>
 808bbb8:	1e53      	subs	r3, r2, #1
 808bbba:	e000      	b.n	808bbbe <strftime+0x732>
 808bbbc:	2306      	movs	r3, #6
 808bbbe:	2800      	cmp	r0, #0
 808bbc0:	dc2f      	bgt.n	808bc22 <strftime+0x796>
 808bbc2:	69ea      	ldr	r2, [r5, #28]
 808bbc4:	d101      	bne.n	808bbca <strftime+0x73e>
 808bbc6:	320a      	adds	r2, #10
 808bbc8:	e03b      	b.n	808bc42 <strftime+0x7b6>
 808bbca:	f240 716b 	movw	r1, #1899	; 0x76b
 808bbce:	1a9a      	subs	r2, r3, r2
 808bbd0:	696b      	ldr	r3, [r5, #20]
 808bbd2:	2b00      	cmp	r3, #0
 808bbd4:	bfb4      	ite	lt
 808bbd6:	4608      	movlt	r0, r1
 808bbd8:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808bbdc:	4418      	add	r0, r3
 808bbde:	0781      	lsls	r1, r0, #30
 808bbe0:	d107      	bne.n	808bbf2 <strftime+0x766>
 808bbe2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808bbe6:	4601      	mov	r1, r0
 808bbe8:	fb90 f0fe 	sdiv	r0, r0, lr
 808bbec:	fb0e 1110 	mls	r1, lr, r0, r1
 808bbf0:	b981      	cbnz	r1, 808bc14 <strftime+0x788>
 808bbf2:	f240 716b 	movw	r1, #1899	; 0x76b
 808bbf6:	2b00      	cmp	r3, #0
 808bbf8:	bfa8      	it	ge
 808bbfa:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808bbfe:	4419      	add	r1, r3
 808bc00:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808bc04:	fb91 f0f3 	sdiv	r0, r1, r3
 808bc08:	fb03 1110 	mls	r1, r3, r0, r1
 808bc0c:	fab1 f181 	clz	r1, r1
 808bc10:	0949      	lsrs	r1, r1, #5
 808bc12:	e000      	b.n	808bc16 <strftime+0x78a>
 808bc14:	2101      	movs	r1, #1
 808bc16:	1a52      	subs	r2, r2, r1
 808bc18:	2a05      	cmp	r2, #5
 808bc1a:	bfb4      	ite	lt
 808bc1c:	2335      	movlt	r3, #53	; 0x35
 808bc1e:	2334      	movge	r3, #52	; 0x34
 808bc20:	e020      	b.n	808bc64 <strftime+0x7d8>
 808bc22:	2301      	movs	r3, #1
 808bc24:	e01e      	b.n	808bc64 <strftime+0x7d8>
 808bc26:	9b02      	ldr	r3, [sp, #8]
 808bc28:	429c      	cmp	r4, r3
 808bc2a:	f080 80d9 	bcs.w	808bde0 <strftime+0x954>
 808bc2e:	69ab      	ldr	r3, [r5, #24]
 808bc30:	3330      	adds	r3, #48	; 0x30
 808bc32:	e0c8      	b.n	808bdc6 <strftime+0x93a>
 808bc34:	69aa      	ldr	r2, [r5, #24]
 808bc36:	b10a      	cbz	r2, 808bc3c <strftime+0x7b0>
 808bc38:	1e53      	subs	r3, r2, #1
 808bc3a:	e000      	b.n	808bc3e <strftime+0x7b2>
 808bc3c:	2306      	movs	r3, #6
 808bc3e:	69ea      	ldr	r2, [r5, #28]
 808bc40:	3207      	adds	r2, #7
 808bc42:	1ad2      	subs	r2, r2, r3
 808bc44:	2307      	movs	r3, #7
 808bc46:	fb92 f3f3 	sdiv	r3, r2, r3
 808bc4a:	e00b      	b.n	808bc64 <strftime+0x7d8>
 808bc4c:	6968      	ldr	r0, [r5, #20]
 808bc4e:	2800      	cmp	r0, #0
 808bc50:	da03      	bge.n	808bc5a <strftime+0x7ce>
 808bc52:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808bc56:	f001 faab 	bl	808d1b0 <abs>
 808bc5a:	2364      	movs	r3, #100	; 0x64
 808bc5c:	fb90 f2f3 	sdiv	r2, r0, r3
 808bc60:	fb02 0313 	mls	r3, r2, r3, r0
 808bc64:	4a21      	ldr	r2, [pc, #132]	; (808bcec <strftime+0x860>)
 808bc66:	e572      	b.n	808b74e <strftime+0x2c2>
 808bc68:	696b      	ldr	r3, [r5, #20]
 808bc6a:	4a21      	ldr	r2, [pc, #132]	; (808bcf0 <strftime+0x864>)
 808bc6c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808bc70:	4293      	cmp	r3, r2
 808bc72:	da05      	bge.n	808bc80 <strftime+0x7f4>
 808bc74:	232d      	movs	r3, #45	; 0x2d
 808bc76:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808bc7a:	f1cb 0b00 	rsb	fp, fp, #0
 808bc7e:	e008      	b.n	808bc92 <strftime+0x806>
 808bc80:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808bc84:	d10d      	bne.n	808bca2 <strftime+0x816>
 808bc86:	f242 730f 	movw	r3, #9999	; 0x270f
 808bc8a:	459b      	cmp	fp, r3
 808bc8c:	d911      	bls.n	808bcb2 <strftime+0x826>
 808bc8e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808bc92:	f1b8 0f00 	cmp.w	r8, #0
 808bc96:	d001      	beq.n	808bc9c <strftime+0x810>
 808bc98:	f108 38ff 	add.w	r8, r8, #4294967295
 808bc9c:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808bca0:	e000      	b.n	808bca4 <strftime+0x818>
 808bca2:	ab0a      	add	r3, sp, #40	; 0x28
 808bca4:	2225      	movs	r2, #37	; 0x25
 808bca6:	701a      	strb	r2, [r3, #0]
 808bca8:	f1ba 0f00 	cmp.w	sl, #0
 808bcac:	d108      	bne.n	808bcc0 <strftime+0x834>
 808bcae:	1c58      	adds	r0, r3, #1
 808bcb0:	e009      	b.n	808bcc6 <strftime+0x83a>
 808bcb2:	f1b8 0f00 	cmp.w	r8, #0
 808bcb6:	d1f4      	bne.n	808bca2 <strftime+0x816>
 808bcb8:	2325      	movs	r3, #37	; 0x25
 808bcba:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808bcbe:	ab0a      	add	r3, sp, #40	; 0x28
 808bcc0:	2230      	movs	r2, #48	; 0x30
 808bcc2:	1c98      	adds	r0, r3, #2
 808bcc4:	705a      	strb	r2, [r3, #1]
 808bcc6:	490b      	ldr	r1, [pc, #44]	; (808bcf4 <strftime+0x868>)
 808bcc8:	f7ff fb5c 	bl	808b384 <strcpy>
 808bccc:	f8cd b000 	str.w	fp, [sp]
 808bcd0:	4643      	mov	r3, r8
 808bcd2:	aa0a      	add	r2, sp, #40	; 0x28
 808bcd4:	1b31      	subs	r1, r6, r4
 808bcd6:	1938      	adds	r0, r7, r4
 808bcd8:	e03f      	b.n	808bd5a <strftime+0x8ce>
 808bcda:	bf00      	nop
 808bcdc:	20000058 	.word	0x20000058
 808bce0:	0808f3ab 	.word	0x0808f3ab
 808bce4:	0808f3a1 	.word	0x0808f3a1
 808bce8:	0808f3a6 	.word	0x0808f3a6
 808bcec:	0808f393 	.word	0x0808f393
 808bcf0:	fffff894 	.word	0xfffff894
 808bcf4:	0808f398 	.word	0x0808f398
 808bcf8:	6a2b      	ldr	r3, [r5, #32]
 808bcfa:	2b00      	cmp	r3, #0
 808bcfc:	db65      	blt.n	808bdca <strftime+0x93e>
 808bcfe:	f001 f8cf 	bl	808cea0 <__tz_lock>
 808bd02:	9b06      	ldr	r3, [sp, #24]
 808bd04:	b91b      	cbnz	r3, 808bd0e <strftime+0x882>
 808bd06:	f001 f8cd 	bl	808cea4 <_tzset_unlocked>
 808bd0a:	2301      	movs	r3, #1
 808bd0c:	9306      	str	r3, [sp, #24]
 808bd0e:	f001 fdb5 	bl	808d87c <__gettzinfo>
 808bd12:	6a2b      	ldr	r3, [r5, #32]
 808bd14:	221c      	movs	r2, #28
 808bd16:	2b00      	cmp	r3, #0
 808bd18:	bfd4      	ite	le
 808bd1a:	2300      	movle	r3, #0
 808bd1c:	2301      	movgt	r3, #1
 808bd1e:	fb02 0003 	mla	r0, r2, r3, r0
 808bd22:	6a03      	ldr	r3, [r0, #32]
 808bd24:	eb07 0a04 	add.w	sl, r7, r4
 808bd28:	f1c3 0800 	rsb	r8, r3, #0
 808bd2c:	f001 f8b9 	bl	808cea2 <__tz_unlock>
 808bd30:	233c      	movs	r3, #60	; 0x3c
 808bd32:	fb98 f0f3 	sdiv	r0, r8, r3
 808bd36:	9307      	str	r3, [sp, #28]
 808bd38:	f001 fe3a 	bl	808d9b0 <labs>
 808bd3c:	9b07      	ldr	r3, [sp, #28]
 808bd3e:	ebc4 0b06 	rsb	fp, r4, r6
 808bd42:	fb90 f2f3 	sdiv	r2, r0, r3
 808bd46:	fb02 0013 	mls	r0, r2, r3, r0
 808bd4a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bd4e:	9000      	str	r0, [sp, #0]
 808bd50:	fb98 f3f3 	sdiv	r3, r8, r3
 808bd54:	4659      	mov	r1, fp
 808bd56:	4650      	mov	r0, sl
 808bd58:	4a24      	ldr	r2, [pc, #144]	; (808bdec <strftime+0x960>)
 808bd5a:	f7f9 febb 	bl	8085ad4 <sniprintf>
 808bd5e:	e4fa      	b.n	808b756 <strftime+0x2ca>
 808bd60:	4404      	add	r4, r0
 808bd62:	42a6      	cmp	r6, r4
 808bd64:	d831      	bhi.n	808bdca <strftime+0x93e>
 808bd66:	e03b      	b.n	808bde0 <strftime+0x954>
 808bd68:	6a2b      	ldr	r3, [r5, #32]
 808bd6a:	2b00      	cmp	r3, #0
 808bd6c:	db2d      	blt.n	808bdca <strftime+0x93e>
 808bd6e:	f001 f897 	bl	808cea0 <__tz_lock>
 808bd72:	9b06      	ldr	r3, [sp, #24]
 808bd74:	b91b      	cbnz	r3, 808bd7e <strftime+0x8f2>
 808bd76:	f001 f895 	bl	808cea4 <_tzset_unlocked>
 808bd7a:	2301      	movs	r3, #1
 808bd7c:	9306      	str	r3, [sp, #24]
 808bd7e:	6a2b      	ldr	r3, [r5, #32]
 808bd80:	4a1b      	ldr	r2, [pc, #108]	; (808bdf0 <strftime+0x964>)
 808bd82:	2b00      	cmp	r3, #0
 808bd84:	bfd4      	ite	le
 808bd86:	2300      	movle	r3, #0
 808bd88:	2301      	movgt	r3, #1
 808bd8a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808bd8e:	4640      	mov	r0, r8
 808bd90:	f000 f830 	bl	808bdf4 <strlen>
 808bd94:	f108 38ff 	add.w	r8, r8, #4294967295
 808bd98:	193b      	adds	r3, r7, r4
 808bd9a:	4420      	add	r0, r4
 808bd9c:	4284      	cmp	r4, r0
 808bd9e:	d00b      	beq.n	808bdb8 <strftime+0x92c>
 808bda0:	9a02      	ldr	r2, [sp, #8]
 808bda2:	4294      	cmp	r4, r2
 808bda4:	d205      	bcs.n	808bdb2 <strftime+0x926>
 808bda6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808bdaa:	3401      	adds	r4, #1
 808bdac:	f803 2b01 	strb.w	r2, [r3], #1
 808bdb0:	e7f4      	b.n	808bd9c <strftime+0x910>
 808bdb2:	f001 f876 	bl	808cea2 <__tz_unlock>
 808bdb6:	e013      	b.n	808bde0 <strftime+0x954>
 808bdb8:	f001 f873 	bl	808cea2 <__tz_unlock>
 808bdbc:	e005      	b.n	808bdca <strftime+0x93e>
 808bdbe:	9b02      	ldr	r3, [sp, #8]
 808bdc0:	429c      	cmp	r4, r3
 808bdc2:	d20d      	bcs.n	808bde0 <strftime+0x954>
 808bdc4:	2325      	movs	r3, #37	; 0x25
 808bdc6:	553b      	strb	r3, [r7, r4]
 808bdc8:	3401      	adds	r4, #1
 808bdca:	f899 3000 	ldrb.w	r3, [r9]
 808bdce:	b11b      	cbz	r3, 808bdd8 <strftime+0x94c>
 808bdd0:	f109 0901 	add.w	r9, r9, #1
 808bdd4:	f7ff bb69 	b.w	808b4aa <strftime+0x1e>
 808bdd8:	b126      	cbz	r6, 808bde4 <strftime+0x958>
 808bdda:	2300      	movs	r3, #0
 808bddc:	553b      	strb	r3, [r7, r4]
 808bdde:	e001      	b.n	808bde4 <strftime+0x958>
 808bde0:	2000      	movs	r0, #0
 808bde2:	e000      	b.n	808bde6 <strftime+0x95a>
 808bde4:	4620      	mov	r0, r4
 808bde6:	b013      	add	sp, #76	; 0x4c
 808bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bdec:	0808f3b5 	.word	0x0808f3b5
 808bdf0:	200000f8 	.word	0x200000f8

0808bdf4 <strlen>:
 808bdf4:	4603      	mov	r3, r0
 808bdf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bdfa:	2a00      	cmp	r2, #0
 808bdfc:	d1fb      	bne.n	808bdf6 <strlen+0x2>
 808bdfe:	1a18      	subs	r0, r3, r0
 808be00:	3801      	subs	r0, #1
 808be02:	4770      	bx	lr

0808be04 <strncmp>:
 808be04:	b530      	push	{r4, r5, lr}
 808be06:	b182      	cbz	r2, 808be2a <strncmp+0x26>
 808be08:	1e45      	subs	r5, r0, #1
 808be0a:	3901      	subs	r1, #1
 808be0c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808be10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808be14:	42a3      	cmp	r3, r4
 808be16:	d106      	bne.n	808be26 <strncmp+0x22>
 808be18:	43ec      	mvns	r4, r5
 808be1a:	4414      	add	r4, r2
 808be1c:	42e0      	cmn	r0, r4
 808be1e:	d001      	beq.n	808be24 <strncmp+0x20>
 808be20:	2b00      	cmp	r3, #0
 808be22:	d1f3      	bne.n	808be0c <strncmp+0x8>
 808be24:	461c      	mov	r4, r3
 808be26:	1b18      	subs	r0, r3, r4
 808be28:	bd30      	pop	{r4, r5, pc}
 808be2a:	4610      	mov	r0, r2
 808be2c:	bd30      	pop	{r4, r5, pc}

0808be2e <strncpy>:
 808be2e:	4603      	mov	r3, r0
 808be30:	b510      	push	{r4, lr}
 808be32:	b142      	cbz	r2, 808be46 <strncpy+0x18>
 808be34:	f811 4b01 	ldrb.w	r4, [r1], #1
 808be38:	3a01      	subs	r2, #1
 808be3a:	f803 4b01 	strb.w	r4, [r3], #1
 808be3e:	2c00      	cmp	r4, #0
 808be40:	d1f7      	bne.n	808be32 <strncpy+0x4>
 808be42:	441a      	add	r2, r3
 808be44:	e000      	b.n	808be48 <strncpy+0x1a>
 808be46:	bd10      	pop	{r4, pc}
 808be48:	4293      	cmp	r3, r2
 808be4a:	d002      	beq.n	808be52 <strncpy+0x24>
 808be4c:	f803 4b01 	strb.w	r4, [r3], #1
 808be50:	e7fa      	b.n	808be48 <strncpy+0x1a>
 808be52:	bd10      	pop	{r4, pc}

0808be54 <strrchr>:
 808be54:	b538      	push	{r3, r4, r5, lr}
 808be56:	4603      	mov	r3, r0
 808be58:	460d      	mov	r5, r1
 808be5a:	b141      	cbz	r1, 808be6e <strrchr+0x1a>
 808be5c:	2400      	movs	r4, #0
 808be5e:	4629      	mov	r1, r5
 808be60:	4618      	mov	r0, r3
 808be62:	f7ff fa6d 	bl	808b340 <strchr>
 808be66:	b130      	cbz	r0, 808be76 <strrchr+0x22>
 808be68:	1c43      	adds	r3, r0, #1
 808be6a:	4604      	mov	r4, r0
 808be6c:	e7f7      	b.n	808be5e <strrchr+0xa>
 808be6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808be72:	f7ff ba65 	b.w	808b340 <strchr>
 808be76:	4620      	mov	r0, r4
 808be78:	bd38      	pop	{r3, r4, r5, pc}

0808be7a <strstr>:
 808be7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 808be7c:	7803      	ldrb	r3, [r0, #0]
 808be7e:	b963      	cbnz	r3, 808be9a <strstr+0x20>
 808be80:	780b      	ldrb	r3, [r1, #0]
 808be82:	2b00      	cmp	r3, #0
 808be84:	bf18      	it	ne
 808be86:	2000      	movne	r0, #0
 808be88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808be8a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808be8e:	b162      	cbz	r2, 808beaa <strstr+0x30>
 808be90:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808be94:	4630      	mov	r0, r6
 808be96:	4297      	cmp	r7, r2
 808be98:	d0f7      	beq.n	808be8a <strstr+0x10>
 808be9a:	4603      	mov	r3, r0
 808be9c:	1c46      	adds	r6, r0, #1
 808be9e:	7800      	ldrb	r0, [r0, #0]
 808bea0:	b110      	cbz	r0, 808bea8 <strstr+0x2e>
 808bea2:	1e4d      	subs	r5, r1, #1
 808bea4:	1e5c      	subs	r4, r3, #1
 808bea6:	e7f0      	b.n	808be8a <strstr+0x10>
 808bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808beaa:	4618      	mov	r0, r3
 808beac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808beae <sulp>:
 808beae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808beb2:	460f      	mov	r7, r1
 808beb4:	4690      	mov	r8, r2
 808beb6:	f002 f845 	bl	808df44 <__ulp>
 808beba:	4604      	mov	r4, r0
 808bebc:	460d      	mov	r5, r1
 808bebe:	f1b8 0f00 	cmp.w	r8, #0
 808bec2:	d011      	beq.n	808bee8 <sulp+0x3a>
 808bec4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808bec8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808becc:	2b00      	cmp	r3, #0
 808bece:	dd0b      	ble.n	808bee8 <sulp+0x3a>
 808bed0:	051b      	lsls	r3, r3, #20
 808bed2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808bed6:	2400      	movs	r4, #0
 808bed8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808bedc:	4622      	mov	r2, r4
 808bede:	462b      	mov	r3, r5
 808bee0:	f7fe f874 	bl	8089fcc <__aeabi_dmul>
 808bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808bee8:	4620      	mov	r0, r4
 808beea:	4629      	mov	r1, r5
 808beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808bef0 <_strtod_r>:
 808bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bef4:	4682      	mov	sl, r0
 808bef6:	460c      	mov	r4, r1
 808bef8:	b09d      	sub	sp, #116	; 0x74
 808befa:	2300      	movs	r3, #0
 808befc:	9213      	str	r2, [sp, #76]	; 0x4c
 808befe:	9318      	str	r3, [sp, #96]	; 0x60
 808bf00:	f04f 0800 	mov.w	r8, #0
 808bf04:	f04f 0900 	mov.w	r9, #0
 808bf08:	9117      	str	r1, [sp, #92]	; 0x5c
 808bf0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bf0c:	781a      	ldrb	r2, [r3, #0]
 808bf0e:	2a0d      	cmp	r2, #13
 808bf10:	d805      	bhi.n	808bf1e <_strtod_r+0x2e>
 808bf12:	2a09      	cmp	r2, #9
 808bf14:	d213      	bcs.n	808bf3e <_strtod_r+0x4e>
 808bf16:	2a00      	cmp	r2, #0
 808bf18:	f000 81ad 	beq.w	808c276 <_strtod_r+0x386>
 808bf1c:	e012      	b.n	808bf44 <_strtod_r+0x54>
 808bf1e:	2a2b      	cmp	r2, #43	; 0x2b
 808bf20:	d004      	beq.n	808bf2c <_strtod_r+0x3c>
 808bf22:	2a2d      	cmp	r2, #45	; 0x2d
 808bf24:	d004      	beq.n	808bf30 <_strtod_r+0x40>
 808bf26:	2a20      	cmp	r2, #32
 808bf28:	d10c      	bne.n	808bf44 <_strtod_r+0x54>
 808bf2a:	e008      	b.n	808bf3e <_strtod_r+0x4e>
 808bf2c:	2200      	movs	r2, #0
 808bf2e:	e000      	b.n	808bf32 <_strtod_r+0x42>
 808bf30:	2201      	movs	r2, #1
 808bf32:	920c      	str	r2, [sp, #48]	; 0x30
 808bf34:	1c5a      	adds	r2, r3, #1
 808bf36:	9217      	str	r2, [sp, #92]	; 0x5c
 808bf38:	785b      	ldrb	r3, [r3, #1]
 808bf3a:	b92b      	cbnz	r3, 808bf48 <_strtod_r+0x58>
 808bf3c:	e19b      	b.n	808c276 <_strtod_r+0x386>
 808bf3e:	3301      	adds	r3, #1
 808bf40:	9317      	str	r3, [sp, #92]	; 0x5c
 808bf42:	e7e2      	b.n	808bf0a <_strtod_r+0x1a>
 808bf44:	2300      	movs	r3, #0
 808bf46:	930c      	str	r3, [sp, #48]	; 0x30
 808bf48:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808bf4a:	782b      	ldrb	r3, [r5, #0]
 808bf4c:	2b30      	cmp	r3, #48	; 0x30
 808bf4e:	d15c      	bne.n	808c00a <_strtod_r+0x11a>
 808bf50:	786b      	ldrb	r3, [r5, #1]
 808bf52:	2b58      	cmp	r3, #88	; 0x58
 808bf54:	d001      	beq.n	808bf5a <_strtod_r+0x6a>
 808bf56:	2b78      	cmp	r3, #120	; 0x78
 808bf58:	d14c      	bne.n	808bff4 <_strtod_r+0x104>
 808bf5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808bf5c:	4aa8      	ldr	r2, [pc, #672]	; (808c200 <_strtod_r+0x310>)
 808bf5e:	9301      	str	r3, [sp, #4]
 808bf60:	ab18      	add	r3, sp, #96	; 0x60
 808bf62:	9300      	str	r3, [sp, #0]
 808bf64:	a917      	add	r1, sp, #92	; 0x5c
 808bf66:	ab19      	add	r3, sp, #100	; 0x64
 808bf68:	4650      	mov	r0, sl
 808bf6a:	f001 f970 	bl	808d24e <__gethex>
 808bf6e:	f010 0607 	ands.w	r6, r0, #7
 808bf72:	4604      	mov	r4, r0
 808bf74:	f000 8585 	beq.w	808ca82 <_strtod_r+0xb92>
 808bf78:	2e06      	cmp	r6, #6
 808bf7a:	d105      	bne.n	808bf88 <_strtod_r+0x98>
 808bf7c:	3501      	adds	r5, #1
 808bf7e:	2300      	movs	r3, #0
 808bf80:	9517      	str	r5, [sp, #92]	; 0x5c
 808bf82:	930c      	str	r3, [sp, #48]	; 0x30
 808bf84:	f000 bd7d 	b.w	808ca82 <_strtod_r+0xb92>
 808bf88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808bf8a:	b13a      	cbz	r2, 808bf9c <_strtod_r+0xac>
 808bf8c:	2135      	movs	r1, #53	; 0x35
 808bf8e:	a81a      	add	r0, sp, #104	; 0x68
 808bf90:	f002 f8bf 	bl	808e112 <__copybits>
 808bf94:	9918      	ldr	r1, [sp, #96]	; 0x60
 808bf96:	4650      	mov	r0, sl
 808bf98:	f001 fd43 	bl	808da22 <_Bfree>
 808bf9c:	2e06      	cmp	r6, #6
 808bf9e:	d822      	bhi.n	808bfe6 <_strtod_r+0xf6>
 808bfa0:	e8df f006 	tbb	[pc, r6]
 808bfa4:	18080d04 	.word	0x18080d04
 808bfa8:	0d1d      	.short	0x0d1d
 808bfaa:	04          	.byte	0x04
 808bfab:	00          	.byte	0x00
 808bfac:	f04f 0900 	mov.w	r9, #0
 808bfb0:	46c8      	mov	r8, r9
 808bfb2:	e018      	b.n	808bfe6 <_strtod_r+0xf6>
 808bfb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808bfb8:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808bfbc:	e013      	b.n	808bfe6 <_strtod_r+0xf6>
 808bfbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808bfc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808bfc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808bfc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808bfca:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808bfce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808bfd2:	e008      	b.n	808bfe6 <_strtod_r+0xf6>
 808bfd4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808c204 <_strtod_r+0x314>
 808bfd8:	f04f 0800 	mov.w	r8, #0
 808bfdc:	e003      	b.n	808bfe6 <_strtod_r+0xf6>
 808bfde:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808bfe2:	f04f 38ff 	mov.w	r8, #4294967295
 808bfe6:	0721      	lsls	r1, r4, #28
 808bfe8:	f140 854b 	bpl.w	808ca82 <_strtod_r+0xb92>
 808bfec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808bff0:	f000 bd47 	b.w	808ca82 <_strtod_r+0xb92>
 808bff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bff6:	1c5a      	adds	r2, r3, #1
 808bff8:	9217      	str	r2, [sp, #92]	; 0x5c
 808bffa:	785b      	ldrb	r3, [r3, #1]
 808bffc:	2b30      	cmp	r3, #48	; 0x30
 808bffe:	d0f9      	beq.n	808bff4 <_strtod_r+0x104>
 808c000:	2b00      	cmp	r3, #0
 808c002:	f000 853e 	beq.w	808ca82 <_strtod_r+0xb92>
 808c006:	2301      	movs	r3, #1
 808c008:	e000      	b.n	808c00c <_strtod_r+0x11c>
 808c00a:	2300      	movs	r3, #0
 808c00c:	9305      	str	r3, [sp, #20]
 808c00e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c010:	220a      	movs	r2, #10
 808c012:	9306      	str	r3, [sp, #24]
 808c014:	2300      	movs	r3, #0
 808c016:	469b      	mov	fp, r3
 808c018:	9302      	str	r3, [sp, #8]
 808c01a:	9304      	str	r3, [sp, #16]
 808c01c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808c01e:	782e      	ldrb	r6, [r5, #0]
 808c020:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808c024:	b2d9      	uxtb	r1, r3
 808c026:	2909      	cmp	r1, #9
 808c028:	d811      	bhi.n	808c04e <_strtod_r+0x15e>
 808c02a:	f1bb 0f08 	cmp.w	fp, #8
 808c02e:	bfd5      	itete	le
 808c030:	9904      	ldrle	r1, [sp, #16]
 808c032:	9902      	ldrgt	r1, [sp, #8]
 808c034:	fb02 3301 	mlale	r3, r2, r1, r3
 808c038:	fb02 3301 	mlagt	r3, r2, r1, r3
 808c03c:	f105 0501 	add.w	r5, r5, #1
 808c040:	bfd4      	ite	le
 808c042:	9304      	strle	r3, [sp, #16]
 808c044:	9302      	strgt	r3, [sp, #8]
 808c046:	f10b 0b01 	add.w	fp, fp, #1
 808c04a:	9517      	str	r5, [sp, #92]	; 0x5c
 808c04c:	e7e6      	b.n	808c01c <_strtod_r+0x12c>
 808c04e:	4650      	mov	r0, sl
 808c050:	f7ff f90c 	bl	808b26c <_localeconv_r>
 808c054:	6807      	ldr	r7, [r0, #0]
 808c056:	4650      	mov	r0, sl
 808c058:	f7ff f908 	bl	808b26c <_localeconv_r>
 808c05c:	6800      	ldr	r0, [r0, #0]
 808c05e:	f7ff fec9 	bl	808bdf4 <strlen>
 808c062:	4639      	mov	r1, r7
 808c064:	4602      	mov	r2, r0
 808c066:	4628      	mov	r0, r5
 808c068:	f7ff fecc 	bl	808be04 <strncmp>
 808c06c:	4607      	mov	r7, r0
 808c06e:	b128      	cbz	r0, 808c07c <_strtod_r+0x18c>
 808c070:	2000      	movs	r0, #0
 808c072:	4633      	mov	r3, r6
 808c074:	465d      	mov	r5, fp
 808c076:	4602      	mov	r2, r0
 808c078:	4601      	mov	r1, r0
 808c07a:	e05a      	b.n	808c132 <_strtod_r+0x242>
 808c07c:	4650      	mov	r0, sl
 808c07e:	f7ff f8f5 	bl	808b26c <_localeconv_r>
 808c082:	6800      	ldr	r0, [r0, #0]
 808c084:	f7ff feb6 	bl	808bdf4 <strlen>
 808c088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c08a:	181a      	adds	r2, r3, r0
 808c08c:	9217      	str	r2, [sp, #92]	; 0x5c
 808c08e:	5c1b      	ldrb	r3, [r3, r0]
 808c090:	f1bb 0f00 	cmp.w	fp, #0
 808c094:	d145      	bne.n	808c122 <_strtod_r+0x232>
 808c096:	4658      	mov	r0, fp
 808c098:	2b30      	cmp	r3, #48	; 0x30
 808c09a:	d105      	bne.n	808c0a8 <_strtod_r+0x1b8>
 808c09c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c09e:	3001      	adds	r0, #1
 808c0a0:	1c5a      	adds	r2, r3, #1
 808c0a2:	9217      	str	r2, [sp, #92]	; 0x5c
 808c0a4:	785b      	ldrb	r3, [r3, #1]
 808c0a6:	e7f7      	b.n	808c098 <_strtod_r+0x1a8>
 808c0a8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808c0ac:	2a08      	cmp	r2, #8
 808c0ae:	d846      	bhi.n	808c13e <_strtod_r+0x24e>
 808c0b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808c0b2:	9206      	str	r2, [sp, #24]
 808c0b4:	4602      	mov	r2, r0
 808c0b6:	2000      	movs	r0, #0
 808c0b8:	4605      	mov	r5, r0
 808c0ba:	3b30      	subs	r3, #48	; 0x30
 808c0bc:	f100 0101 	add.w	r1, r0, #1
 808c0c0:	d029      	beq.n	808c116 <_strtod_r+0x226>
 808c0c2:	440a      	add	r2, r1
 808c0c4:	4629      	mov	r1, r5
 808c0c6:	eb05 0c00 	add.w	ip, r5, r0
 808c0ca:	260a      	movs	r6, #10
 808c0cc:	4561      	cmp	r1, ip
 808c0ce:	d00f      	beq.n	808c0f0 <_strtod_r+0x200>
 808c0d0:	3101      	adds	r1, #1
 808c0d2:	f101 3eff 	add.w	lr, r1, #4294967295
 808c0d6:	f1be 0f08 	cmp.w	lr, #8
 808c0da:	dc03      	bgt.n	808c0e4 <_strtod_r+0x1f4>
 808c0dc:	9f04      	ldr	r7, [sp, #16]
 808c0de:	4377      	muls	r7, r6
 808c0e0:	9704      	str	r7, [sp, #16]
 808c0e2:	e7f3      	b.n	808c0cc <_strtod_r+0x1dc>
 808c0e4:	2910      	cmp	r1, #16
 808c0e6:	bfde      	ittt	le
 808c0e8:	9f02      	ldrle	r7, [sp, #8]
 808c0ea:	4377      	mulle	r7, r6
 808c0ec:	9702      	strle	r7, [sp, #8]
 808c0ee:	e7ed      	b.n	808c0cc <_strtod_r+0x1dc>
 808c0f0:	4428      	add	r0, r5
 808c0f2:	2808      	cmp	r0, #8
 808c0f4:	f100 0501 	add.w	r5, r0, #1
 808c0f8:	dc05      	bgt.n	808c106 <_strtod_r+0x216>
 808c0fa:	9804      	ldr	r0, [sp, #16]
 808c0fc:	210a      	movs	r1, #10
 808c0fe:	fb01 3300 	mla	r3, r1, r0, r3
 808c102:	9304      	str	r3, [sp, #16]
 808c104:	e006      	b.n	808c114 <_strtod_r+0x224>
 808c106:	2d10      	cmp	r5, #16
 808c108:	bfdf      	itttt	le
 808c10a:	9802      	ldrle	r0, [sp, #8]
 808c10c:	210a      	movle	r1, #10
 808c10e:	fb01 3300 	mlale	r3, r1, r0, r3
 808c112:	9302      	strle	r3, [sp, #8]
 808c114:	2100      	movs	r1, #0
 808c116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c118:	1c58      	adds	r0, r3, #1
 808c11a:	9017      	str	r0, [sp, #92]	; 0x5c
 808c11c:	785b      	ldrb	r3, [r3, #1]
 808c11e:	4608      	mov	r0, r1
 808c120:	e002      	b.n	808c128 <_strtod_r+0x238>
 808c122:	465d      	mov	r5, fp
 808c124:	4638      	mov	r0, r7
 808c126:	463a      	mov	r2, r7
 808c128:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808c12c:	2909      	cmp	r1, #9
 808c12e:	d9c4      	bls.n	808c0ba <_strtod_r+0x1ca>
 808c130:	2101      	movs	r1, #1
 808c132:	2b65      	cmp	r3, #101	; 0x65
 808c134:	d001      	beq.n	808c13a <_strtod_r+0x24a>
 808c136:	2b45      	cmp	r3, #69	; 0x45
 808c138:	d14f      	bne.n	808c1da <_strtod_r+0x2ea>
 808c13a:	b96d      	cbnz	r5, 808c158 <_strtod_r+0x268>
 808c13c:	e004      	b.n	808c148 <_strtod_r+0x258>
 808c13e:	2b65      	cmp	r3, #101	; 0x65
 808c140:	f040 84ad 	bne.w	808ca9e <_strtod_r+0xbae>
 808c144:	2200      	movs	r2, #0
 808c146:	2101      	movs	r1, #1
 808c148:	b928      	cbnz	r0, 808c156 <_strtod_r+0x266>
 808c14a:	9b05      	ldr	r3, [sp, #20]
 808c14c:	2b00      	cmp	r3, #0
 808c14e:	f000 8092 	beq.w	808c276 <_strtod_r+0x386>
 808c152:	4605      	mov	r5, r0
 808c154:	e000      	b.n	808c158 <_strtod_r+0x268>
 808c156:	2500      	movs	r5, #0
 808c158:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808c15a:	1c63      	adds	r3, r4, #1
 808c15c:	9317      	str	r3, [sp, #92]	; 0x5c
 808c15e:	7863      	ldrb	r3, [r4, #1]
 808c160:	2b2b      	cmp	r3, #43	; 0x2b
 808c162:	d006      	beq.n	808c172 <_strtod_r+0x282>
 808c164:	2b2d      	cmp	r3, #45	; 0x2d
 808c166:	d002      	beq.n	808c16e <_strtod_r+0x27e>
 808c168:	2600      	movs	r6, #0
 808c16a:	9603      	str	r6, [sp, #12]
 808c16c:	e006      	b.n	808c17c <_strtod_r+0x28c>
 808c16e:	2301      	movs	r3, #1
 808c170:	e000      	b.n	808c174 <_strtod_r+0x284>
 808c172:	2300      	movs	r3, #0
 808c174:	9303      	str	r3, [sp, #12]
 808c176:	1ca3      	adds	r3, r4, #2
 808c178:	9317      	str	r3, [sp, #92]	; 0x5c
 808c17a:	78a3      	ldrb	r3, [r4, #2]
 808c17c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808c180:	2e09      	cmp	r6, #9
 808c182:	d829      	bhi.n	808c1d8 <_strtod_r+0x2e8>
 808c184:	2b30      	cmp	r3, #48	; 0x30
 808c186:	d104      	bne.n	808c192 <_strtod_r+0x2a2>
 808c188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c18a:	1c5e      	adds	r6, r3, #1
 808c18c:	9617      	str	r6, [sp, #92]	; 0x5c
 808c18e:	785b      	ldrb	r3, [r3, #1]
 808c190:	e7f8      	b.n	808c184 <_strtod_r+0x294>
 808c192:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808c196:	2e08      	cmp	r6, #8
 808c198:	d81f      	bhi.n	808c1da <_strtod_r+0x2ea>
 808c19a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808c19e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c1a0:	461f      	mov	r7, r3
 808c1a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c1a4:	1c5e      	adds	r6, r3, #1
 808c1a6:	9617      	str	r6, [sp, #92]	; 0x5c
 808c1a8:	785b      	ldrb	r3, [r3, #1]
 808c1aa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808c1ae:	f1bc 0f09 	cmp.w	ip, #9
 808c1b2:	d805      	bhi.n	808c1c0 <_strtod_r+0x2d0>
 808c1b4:	260a      	movs	r6, #10
 808c1b6:	fb06 3e0e 	mla	lr, r6, lr, r3
 808c1ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808c1be:	e7f0      	b.n	808c1a2 <_strtod_r+0x2b2>
 808c1c0:	1bf6      	subs	r6, r6, r7
 808c1c2:	2e08      	cmp	r6, #8
 808c1c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808c1c8:	dc02      	bgt.n	808c1d0 <_strtod_r+0x2e0>
 808c1ca:	4576      	cmp	r6, lr
 808c1cc:	bfa8      	it	ge
 808c1ce:	4676      	movge	r6, lr
 808c1d0:	9f03      	ldr	r7, [sp, #12]
 808c1d2:	b11f      	cbz	r7, 808c1dc <_strtod_r+0x2ec>
 808c1d4:	4276      	negs	r6, r6
 808c1d6:	e001      	b.n	808c1dc <_strtod_r+0x2ec>
 808c1d8:	9417      	str	r4, [sp, #92]	; 0x5c
 808c1da:	2600      	movs	r6, #0
 808c1dc:	2d00      	cmp	r5, #0
 808c1de:	d152      	bne.n	808c286 <_strtod_r+0x396>
 808c1e0:	2800      	cmp	r0, #0
 808c1e2:	f040 844e 	bne.w	808ca82 <_strtod_r+0xb92>
 808c1e6:	9a05      	ldr	r2, [sp, #20]
 808c1e8:	2a00      	cmp	r2, #0
 808c1ea:	f040 844a 	bne.w	808ca82 <_strtod_r+0xb92>
 808c1ee:	2900      	cmp	r1, #0
 808c1f0:	d141      	bne.n	808c276 <_strtod_r+0x386>
 808c1f2:	2b4e      	cmp	r3, #78	; 0x4e
 808c1f4:	d020      	beq.n	808c238 <_strtod_r+0x348>
 808c1f6:	dc07      	bgt.n	808c208 <_strtod_r+0x318>
 808c1f8:	2b49      	cmp	r3, #73	; 0x49
 808c1fa:	d00a      	beq.n	808c212 <_strtod_r+0x322>
 808c1fc:	e03b      	b.n	808c276 <_strtod_r+0x386>
 808c1fe:	bf00      	nop
 808c200:	0808f3c4 	.word	0x0808f3c4
 808c204:	7ff00000 	.word	0x7ff00000
 808c208:	2b69      	cmp	r3, #105	; 0x69
 808c20a:	d002      	beq.n	808c212 <_strtod_r+0x322>
 808c20c:	2b6e      	cmp	r3, #110	; 0x6e
 808c20e:	d013      	beq.n	808c238 <_strtod_r+0x348>
 808c210:	e031      	b.n	808c276 <_strtod_r+0x386>
 808c212:	49aa      	ldr	r1, [pc, #680]	; (808c4bc <_strtod_r+0x5cc>)
 808c214:	a817      	add	r0, sp, #92	; 0x5c
 808c216:	f001 fa4b 	bl	808d6b0 <__match>
 808c21a:	b360      	cbz	r0, 808c276 <_strtod_r+0x386>
 808c21c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c21e:	49a8      	ldr	r1, [pc, #672]	; (808c4c0 <_strtod_r+0x5d0>)
 808c220:	3b01      	subs	r3, #1
 808c222:	a817      	add	r0, sp, #92	; 0x5c
 808c224:	9317      	str	r3, [sp, #92]	; 0x5c
 808c226:	f001 fa43 	bl	808d6b0 <__match>
 808c22a:	b910      	cbnz	r0, 808c232 <_strtod_r+0x342>
 808c22c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c22e:	3301      	adds	r3, #1
 808c230:	9317      	str	r3, [sp, #92]	; 0x5c
 808c232:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808c4dc <_strtod_r+0x5ec>
 808c236:	e01a      	b.n	808c26e <_strtod_r+0x37e>
 808c238:	49a2      	ldr	r1, [pc, #648]	; (808c4c4 <_strtod_r+0x5d4>)
 808c23a:	a817      	add	r0, sp, #92	; 0x5c
 808c23c:	f001 fa38 	bl	808d6b0 <__match>
 808c240:	b1c8      	cbz	r0, 808c276 <_strtod_r+0x386>
 808c242:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c244:	781b      	ldrb	r3, [r3, #0]
 808c246:	2b28      	cmp	r3, #40	; 0x28
 808c248:	d10f      	bne.n	808c26a <_strtod_r+0x37a>
 808c24a:	aa1a      	add	r2, sp, #104	; 0x68
 808c24c:	499e      	ldr	r1, [pc, #632]	; (808c4c8 <_strtod_r+0x5d8>)
 808c24e:	a817      	add	r0, sp, #92	; 0x5c
 808c250:	f001 fa41 	bl	808d6d6 <__hexnan>
 808c254:	2805      	cmp	r0, #5
 808c256:	d108      	bne.n	808c26a <_strtod_r+0x37a>
 808c258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c25a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808c25e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808c262:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808c266:	f000 bc0c 	b.w	808ca82 <_strtod_r+0xb92>
 808c26a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808c4e0 <_strtod_r+0x5f0>
 808c26e:	f04f 0800 	mov.w	r8, #0
 808c272:	f000 bc06 	b.w	808ca82 <_strtod_r+0xb92>
 808c276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c278:	9417      	str	r4, [sp, #92]	; 0x5c
 808c27a:	2b00      	cmp	r3, #0
 808c27c:	f000 840c 	beq.w	808ca98 <_strtod_r+0xba8>
 808c280:	2300      	movs	r3, #0
 808c282:	930c      	str	r3, [sp, #48]	; 0x30
 808c284:	e3ff      	b.n	808ca86 <_strtod_r+0xb96>
 808c286:	462c      	mov	r4, r5
 808c288:	f1bb 0f00 	cmp.w	fp, #0
 808c28c:	bf08      	it	eq
 808c28e:	46ab      	moveq	fp, r5
 808c290:	9804      	ldr	r0, [sp, #16]
 808c292:	2d10      	cmp	r5, #16
 808c294:	bfa8      	it	ge
 808c296:	2410      	movge	r4, #16
 808c298:	1ab7      	subs	r7, r6, r2
 808c29a:	f7fd fe21 	bl	8089ee0 <__aeabi_ui2d>
 808c29e:	2c09      	cmp	r4, #9
 808c2a0:	4680      	mov	r8, r0
 808c2a2:	4689      	mov	r9, r1
 808c2a4:	dd13      	ble.n	808c2ce <_strtod_r+0x3de>
 808c2a6:	4b89      	ldr	r3, [pc, #548]	; (808c4cc <_strtod_r+0x5dc>)
 808c2a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808c2ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808c2b0:	f7fd fe8c 	bl	8089fcc <__aeabi_dmul>
 808c2b4:	4680      	mov	r8, r0
 808c2b6:	9802      	ldr	r0, [sp, #8]
 808c2b8:	4689      	mov	r9, r1
 808c2ba:	f7fd fe11 	bl	8089ee0 <__aeabi_ui2d>
 808c2be:	4602      	mov	r2, r0
 808c2c0:	460b      	mov	r3, r1
 808c2c2:	4640      	mov	r0, r8
 808c2c4:	4649      	mov	r1, r9
 808c2c6:	f7fd fccf 	bl	8089c68 <__adddf3>
 808c2ca:	4680      	mov	r8, r0
 808c2cc:	4689      	mov	r9, r1
 808c2ce:	2d0f      	cmp	r5, #15
 808c2d0:	dc33      	bgt.n	808c33a <_strtod_r+0x44a>
 808c2d2:	2f00      	cmp	r7, #0
 808c2d4:	f000 83d5 	beq.w	808ca82 <_strtod_r+0xb92>
 808c2d8:	dd22      	ble.n	808c320 <_strtod_r+0x430>
 808c2da:	2f16      	cmp	r7, #22
 808c2dc:	dc07      	bgt.n	808c2ee <_strtod_r+0x3fe>
 808c2de:	4d7b      	ldr	r5, [pc, #492]	; (808c4cc <_strtod_r+0x5dc>)
 808c2e0:	4642      	mov	r2, r8
 808c2e2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808c2e6:	464b      	mov	r3, r9
 808c2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c2ec:	e013      	b.n	808c316 <_strtod_r+0x426>
 808c2ee:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808c2f2:	429f      	cmp	r7, r3
 808c2f4:	dc21      	bgt.n	808c33a <_strtod_r+0x44a>
 808c2f6:	4c75      	ldr	r4, [pc, #468]	; (808c4cc <_strtod_r+0x5dc>)
 808c2f8:	f1c5 050f 	rsb	r5, r5, #15
 808c2fc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808c300:	1b7d      	subs	r5, r7, r5
 808c302:	4642      	mov	r2, r8
 808c304:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c308:	464b      	mov	r3, r9
 808c30a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808c30e:	f7fd fe5d 	bl	8089fcc <__aeabi_dmul>
 808c312:	e9d4 2300 	ldrd	r2, r3, [r4]
 808c316:	f7fd fe59 	bl	8089fcc <__aeabi_dmul>
 808c31a:	4680      	mov	r8, r0
 808c31c:	4689      	mov	r9, r1
 808c31e:	e3b0      	b.n	808ca82 <_strtod_r+0xb92>
 808c320:	f117 0f16 	cmn.w	r7, #22
 808c324:	db09      	blt.n	808c33a <_strtod_r+0x44a>
 808c326:	4d69      	ldr	r5, [pc, #420]	; (808c4cc <_strtod_r+0x5dc>)
 808c328:	4640      	mov	r0, r8
 808c32a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c332:	4649      	mov	r1, r9
 808c334:	f7fd ff74 	bl	808a220 <__aeabi_ddiv>
 808c338:	e7ef      	b.n	808c31a <_strtod_r+0x42a>
 808c33a:	1b2c      	subs	r4, r5, r4
 808c33c:	443c      	add	r4, r7
 808c33e:	2c00      	cmp	r4, #0
 808c340:	dd5d      	ble.n	808c3fe <_strtod_r+0x50e>
 808c342:	f014 010f 	ands.w	r1, r4, #15
 808c346:	d00a      	beq.n	808c35e <_strtod_r+0x46e>
 808c348:	4b60      	ldr	r3, [pc, #384]	; (808c4cc <_strtod_r+0x5dc>)
 808c34a:	4642      	mov	r2, r8
 808c34c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808c350:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c354:	464b      	mov	r3, r9
 808c356:	f7fd fe39 	bl	8089fcc <__aeabi_dmul>
 808c35a:	4680      	mov	r8, r0
 808c35c:	4689      	mov	r9, r1
 808c35e:	f034 040f 	bics.w	r4, r4, #15
 808c362:	f000 80c1 	beq.w	808c4e8 <_strtod_r+0x5f8>
 808c366:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808c36a:	dd0f      	ble.n	808c38c <_strtod_r+0x49c>
 808c36c:	f04f 0b00 	mov.w	fp, #0
 808c370:	f8cd b008 	str.w	fp, [sp, #8]
 808c374:	f8cd b014 	str.w	fp, [sp, #20]
 808c378:	f8cd b010 	str.w	fp, [sp, #16]
 808c37c:	2322      	movs	r3, #34	; 0x22
 808c37e:	f8ca 3000 	str.w	r3, [sl]
 808c382:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808c4dc <_strtod_r+0x5ec>
 808c386:	f04f 0800 	mov.w	r8, #0
 808c38a:	e189      	b.n	808c6a0 <_strtod_r+0x7b0>
 808c38c:	4640      	mov	r0, r8
 808c38e:	4649      	mov	r1, r9
 808c390:	2300      	movs	r3, #0
 808c392:	4e4f      	ldr	r6, [pc, #316]	; (808c4d0 <_strtod_r+0x5e0>)
 808c394:	1124      	asrs	r4, r4, #4
 808c396:	9302      	str	r3, [sp, #8]
 808c398:	2c01      	cmp	r4, #1
 808c39a:	dd0c      	ble.n	808c3b6 <_strtod_r+0x4c6>
 808c39c:	07e2      	lsls	r2, r4, #31
 808c39e:	d504      	bpl.n	808c3aa <_strtod_r+0x4ba>
 808c3a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c3a4:	f7fd fe12 	bl	8089fcc <__aeabi_dmul>
 808c3a8:	2301      	movs	r3, #1
 808c3aa:	9a02      	ldr	r2, [sp, #8]
 808c3ac:	1064      	asrs	r4, r4, #1
 808c3ae:	3201      	adds	r2, #1
 808c3b0:	9202      	str	r2, [sp, #8]
 808c3b2:	3608      	adds	r6, #8
 808c3b4:	e7f0      	b.n	808c398 <_strtod_r+0x4a8>
 808c3b6:	b10b      	cbz	r3, 808c3bc <_strtod_r+0x4cc>
 808c3b8:	4680      	mov	r8, r0
 808c3ba:	4689      	mov	r9, r1
 808c3bc:	4b44      	ldr	r3, [pc, #272]	; (808c4d0 <_strtod_r+0x5e0>)
 808c3be:	9a02      	ldr	r2, [sp, #8]
 808c3c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c3c4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808c3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c3cc:	4642      	mov	r2, r8
 808c3ce:	464b      	mov	r3, r9
 808c3d0:	f7fd fdfc 	bl	8089fcc <__aeabi_dmul>
 808c3d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808c3d8:	4689      	mov	r9, r1
 808c3da:	460a      	mov	r2, r1
 808c3dc:	0d1b      	lsrs	r3, r3, #20
 808c3de:	493d      	ldr	r1, [pc, #244]	; (808c4d4 <_strtod_r+0x5e4>)
 808c3e0:	051b      	lsls	r3, r3, #20
 808c3e2:	428b      	cmp	r3, r1
 808c3e4:	4680      	mov	r8, r0
 808c3e6:	d8c1      	bhi.n	808c36c <_strtod_r+0x47c>
 808c3e8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808c3ec:	428b      	cmp	r3, r1
 808c3ee:	bf86      	itte	hi
 808c3f0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808c4e4 <_strtod_r+0x5f4>
 808c3f4:	f04f 38ff 	movhi.w	r8, #4294967295
 808c3f8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808c3fc:	e074      	b.n	808c4e8 <_strtod_r+0x5f8>
 808c3fe:	d073      	beq.n	808c4e8 <_strtod_r+0x5f8>
 808c400:	4264      	negs	r4, r4
 808c402:	f014 020f 	ands.w	r2, r4, #15
 808c406:	d00a      	beq.n	808c41e <_strtod_r+0x52e>
 808c408:	4b30      	ldr	r3, [pc, #192]	; (808c4cc <_strtod_r+0x5dc>)
 808c40a:	4640      	mov	r0, r8
 808c40c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808c410:	4649      	mov	r1, r9
 808c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c416:	f7fd ff03 	bl	808a220 <__aeabi_ddiv>
 808c41a:	4680      	mov	r8, r0
 808c41c:	4689      	mov	r9, r1
 808c41e:	1124      	asrs	r4, r4, #4
 808c420:	d062      	beq.n	808c4e8 <_strtod_r+0x5f8>
 808c422:	2c1f      	cmp	r4, #31
 808c424:	dd08      	ble.n	808c438 <_strtod_r+0x548>
 808c426:	f04f 0b00 	mov.w	fp, #0
 808c42a:	f8cd b008 	str.w	fp, [sp, #8]
 808c42e:	f8cd b014 	str.w	fp, [sp, #20]
 808c432:	f8cd b010 	str.w	fp, [sp, #16]
 808c436:	e12c      	b.n	808c692 <_strtod_r+0x7a2>
 808c438:	4640      	mov	r0, r8
 808c43a:	4649      	mov	r1, r9
 808c43c:	f014 0f10 	tst.w	r4, #16
 808c440:	bf0c      	ite	eq
 808c442:	2300      	moveq	r3, #0
 808c444:	236a      	movne	r3, #106	; 0x6a
 808c446:	4e24      	ldr	r6, [pc, #144]	; (808c4d8 <_strtod_r+0x5e8>)
 808c448:	9303      	str	r3, [sp, #12]
 808c44a:	2300      	movs	r3, #0
 808c44c:	2c00      	cmp	r4, #0
 808c44e:	dd09      	ble.n	808c464 <_strtod_r+0x574>
 808c450:	07e2      	lsls	r2, r4, #31
 808c452:	d504      	bpl.n	808c45e <_strtod_r+0x56e>
 808c454:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c458:	f7fd fdb8 	bl	8089fcc <__aeabi_dmul>
 808c45c:	2301      	movs	r3, #1
 808c45e:	1064      	asrs	r4, r4, #1
 808c460:	3608      	adds	r6, #8
 808c462:	e7f3      	b.n	808c44c <_strtod_r+0x55c>
 808c464:	b10b      	cbz	r3, 808c46a <_strtod_r+0x57a>
 808c466:	4680      	mov	r8, r0
 808c468:	4689      	mov	r9, r1
 808c46a:	9b03      	ldr	r3, [sp, #12]
 808c46c:	b1eb      	cbz	r3, 808c4aa <_strtod_r+0x5ba>
 808c46e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808c472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c476:	2b00      	cmp	r3, #0
 808c478:	4649      	mov	r1, r9
 808c47a:	dd16      	ble.n	808c4aa <_strtod_r+0x5ba>
 808c47c:	2b1f      	cmp	r3, #31
 808c47e:	dd0e      	ble.n	808c49e <_strtod_r+0x5ae>
 808c480:	2b34      	cmp	r3, #52	; 0x34
 808c482:	bfde      	ittt	le
 808c484:	3b20      	suble	r3, #32
 808c486:	f04f 32ff 	movle.w	r2, #4294967295
 808c48a:	fa02 f303 	lslle.w	r3, r2, r3
 808c48e:	f04f 0800 	mov.w	r8, #0
 808c492:	bfcc      	ite	gt
 808c494:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808c498:	ea03 0901 	andle.w	r9, r3, r1
 808c49c:	e005      	b.n	808c4aa <_strtod_r+0x5ba>
 808c49e:	f04f 32ff 	mov.w	r2, #4294967295
 808c4a2:	fa02 f303 	lsl.w	r3, r2, r3
 808c4a6:	ea03 0808 	and.w	r8, r3, r8
 808c4aa:	2200      	movs	r2, #0
 808c4ac:	2300      	movs	r3, #0
 808c4ae:	4640      	mov	r0, r8
 808c4b0:	4649      	mov	r1, r9
 808c4b2:	f7fd fff3 	bl	808a49c <__aeabi_dcmpeq>
 808c4b6:	2800      	cmp	r0, #0
 808c4b8:	d1b5      	bne.n	808c426 <_strtod_r+0x536>
 808c4ba:	e017      	b.n	808c4ec <_strtod_r+0x5fc>
 808c4bc:	0808f3d8 	.word	0x0808f3d8
 808c4c0:	0808f3db 	.word	0x0808f3db
 808c4c4:	0808f429 	.word	0x0808f429
 808c4c8:	0808f3e4 	.word	0x0808f3e4
 808c4cc:	0808f688 	.word	0x0808f688
 808c4d0:	0808f750 	.word	0x0808f750
 808c4d4:	7ca00000 	.word	0x7ca00000
 808c4d8:	0808f3f8 	.word	0x0808f3f8
 808c4dc:	7ff00000 	.word	0x7ff00000
 808c4e0:	fff80000 	.word	0xfff80000
 808c4e4:	7fefffff 	.word	0x7fefffff
 808c4e8:	2300      	movs	r3, #0
 808c4ea:	9303      	str	r3, [sp, #12]
 808c4ec:	9b04      	ldr	r3, [sp, #16]
 808c4ee:	465a      	mov	r2, fp
 808c4f0:	9300      	str	r3, [sp, #0]
 808c4f2:	9906      	ldr	r1, [sp, #24]
 808c4f4:	462b      	mov	r3, r5
 808c4f6:	4650      	mov	r0, sl
 808c4f8:	f001 fae5 	bl	808dac6 <__s2b>
 808c4fc:	9005      	str	r0, [sp, #20]
 808c4fe:	2800      	cmp	r0, #0
 808c500:	f43f af34 	beq.w	808c36c <_strtod_r+0x47c>
 808c504:	2f00      	cmp	r7, #0
 808c506:	f1c7 0300 	rsb	r3, r7, #0
 808c50a:	bfa8      	it	ge
 808c50c:	2300      	movge	r3, #0
 808c50e:	930d      	str	r3, [sp, #52]	; 0x34
 808c510:	f04f 0b00 	mov.w	fp, #0
 808c514:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808c518:	9312      	str	r3, [sp, #72]	; 0x48
 808c51a:	f8cd b008 	str.w	fp, [sp, #8]
 808c51e:	9b05      	ldr	r3, [sp, #20]
 808c520:	4650      	mov	r0, sl
 808c522:	6859      	ldr	r1, [r3, #4]
 808c524:	f001 fa48 	bl	808d9b8 <_Balloc>
 808c528:	9004      	str	r0, [sp, #16]
 808c52a:	2800      	cmp	r0, #0
 808c52c:	f43f af26 	beq.w	808c37c <_strtod_r+0x48c>
 808c530:	9b05      	ldr	r3, [sp, #20]
 808c532:	300c      	adds	r0, #12
 808c534:	691a      	ldr	r2, [r3, #16]
 808c536:	f103 010c 	add.w	r1, r3, #12
 808c53a:	3202      	adds	r2, #2
 808c53c:	0092      	lsls	r2, r2, #2
 808c53e:	f7fe fea8 	bl	808b292 <memcpy>
 808c542:	ab1a      	add	r3, sp, #104	; 0x68
 808c544:	9301      	str	r3, [sp, #4]
 808c546:	ab19      	add	r3, sp, #100	; 0x64
 808c548:	9300      	str	r3, [sp, #0]
 808c54a:	4642      	mov	r2, r8
 808c54c:	464b      	mov	r3, r9
 808c54e:	4650      	mov	r0, sl
 808c550:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808c554:	f001 fd67 	bl	808e026 <__d2b>
 808c558:	9018      	str	r0, [sp, #96]	; 0x60
 808c55a:	2800      	cmp	r0, #0
 808c55c:	f43f af0e 	beq.w	808c37c <_strtod_r+0x48c>
 808c560:	2101      	movs	r1, #1
 808c562:	4650      	mov	r0, sl
 808c564:	f001 fb3a 	bl	808dbdc <__i2b>
 808c568:	9002      	str	r0, [sp, #8]
 808c56a:	2800      	cmp	r0, #0
 808c56c:	f43f af06 	beq.w	808c37c <_strtod_r+0x48c>
 808c570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c572:	9903      	ldr	r1, [sp, #12]
 808c574:	2b00      	cmp	r3, #0
 808c576:	bfac      	ite	ge
 808c578:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808c57a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808c57c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808c57e:	bfac      	ite	ge
 808c580:	18d6      	addge	r6, r2, r3
 808c582:	1ad2      	sublt	r2, r2, r3
 808c584:	eba3 0301 	sub.w	r3, r3, r1
 808c588:	4423      	add	r3, r4
 808c58a:	49b1      	ldr	r1, [pc, #708]	; (808c850 <_strtod_r+0x960>)
 808c58c:	f103 33ff 	add.w	r3, r3, #4294967295
 808c590:	bfac      	ite	ge
 808c592:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808c594:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808c596:	428b      	cmp	r3, r1
 808c598:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808c59c:	f280 8085 	bge.w	808c6aa <_strtod_r+0x7ba>
 808c5a0:	1ac9      	subs	r1, r1, r3
 808c5a2:	291f      	cmp	r1, #31
 808c5a4:	bfc8      	it	gt
 808c5a6:	4dab      	ldrgt	r5, [pc, #684]	; (808c854 <_strtod_r+0x964>)
 808c5a8:	f04f 0701 	mov.w	r7, #1
 808c5ac:	bfd4      	ite	le
 808c5ae:	fa07 f301 	lslle.w	r3, r7, r1
 808c5b2:	1aed      	subgt	r5, r5, r3
 808c5b4:	eba4 0401 	sub.w	r4, r4, r1
 808c5b8:	bfd9      	ittee	le
 808c5ba:	9307      	strle	r3, [sp, #28]
 808c5bc:	2500      	movle	r5, #0
 808c5be:	fa07 f505 	lslgt.w	r5, r7, r5
 808c5c2:	9707      	strgt	r7, [sp, #28]
 808c5c4:	1937      	adds	r7, r6, r4
 808c5c6:	9b03      	ldr	r3, [sp, #12]
 808c5c8:	42be      	cmp	r6, r7
 808c5ca:	4414      	add	r4, r2
 808c5cc:	441c      	add	r4, r3
 808c5ce:	4633      	mov	r3, r6
 808c5d0:	bfa8      	it	ge
 808c5d2:	463b      	movge	r3, r7
 808c5d4:	42a3      	cmp	r3, r4
 808c5d6:	bfa8      	it	ge
 808c5d8:	4623      	movge	r3, r4
 808c5da:	2b00      	cmp	r3, #0
 808c5dc:	bfc2      	ittt	gt
 808c5de:	1aff      	subgt	r7, r7, r3
 808c5e0:	1ae4      	subgt	r4, r4, r3
 808c5e2:	1af6      	subgt	r6, r6, r3
 808c5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c5e6:	2b00      	cmp	r3, #0
 808c5e8:	d163      	bne.n	808c6b2 <_strtod_r+0x7c2>
 808c5ea:	2f00      	cmp	r7, #0
 808c5ec:	dc7a      	bgt.n	808c6e4 <_strtod_r+0x7f4>
 808c5ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808c5f0:	2b00      	cmp	r3, #0
 808c5f2:	f040 8081 	bne.w	808c6f8 <_strtod_r+0x808>
 808c5f6:	2c00      	cmp	r4, #0
 808c5f8:	f300 8088 	bgt.w	808c70c <_strtod_r+0x81c>
 808c5fc:	2e00      	cmp	r6, #0
 808c5fe:	f300 808f 	bgt.w	808c720 <_strtod_r+0x830>
 808c602:	9a04      	ldr	r2, [sp, #16]
 808c604:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c606:	4650      	mov	r0, sl
 808c608:	f001 fc3d 	bl	808de86 <__mdiff>
 808c60c:	4683      	mov	fp, r0
 808c60e:	2800      	cmp	r0, #0
 808c610:	f43f aeb4 	beq.w	808c37c <_strtod_r+0x48c>
 808c614:	68c3      	ldr	r3, [r0, #12]
 808c616:	2400      	movs	r4, #0
 808c618:	60c4      	str	r4, [r0, #12]
 808c61a:	9902      	ldr	r1, [sp, #8]
 808c61c:	9306      	str	r3, [sp, #24]
 808c61e:	f001 fc16 	bl	808de4e <__mcmp>
 808c622:	42a0      	cmp	r0, r4
 808c624:	f280 808b 	bge.w	808c73e <_strtod_r+0x84e>
 808c628:	9b06      	ldr	r3, [sp, #24]
 808c62a:	2b00      	cmp	r3, #0
 808c62c:	f040 8202 	bne.w	808ca34 <_strtod_r+0xb44>
 808c630:	f1b8 0f00 	cmp.w	r8, #0
 808c634:	f040 81fe 	bne.w	808ca34 <_strtod_r+0xb44>
 808c638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c63c:	2b00      	cmp	r3, #0
 808c63e:	f040 81f9 	bne.w	808ca34 <_strtod_r+0xb44>
 808c642:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c646:	0d1b      	lsrs	r3, r3, #20
 808c648:	051b      	lsls	r3, r3, #20
 808c64a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c64e:	f240 81f1 	bls.w	808ca34 <_strtod_r+0xb44>
 808c652:	f8db 3014 	ldr.w	r3, [fp, #20]
 808c656:	2b00      	cmp	r3, #0
 808c658:	d06c      	beq.n	808c734 <_strtod_r+0x844>
 808c65a:	4659      	mov	r1, fp
 808c65c:	2201      	movs	r2, #1
 808c65e:	4650      	mov	r0, sl
 808c660:	f001 fba4 	bl	808ddac <__lshift>
 808c664:	9902      	ldr	r1, [sp, #8]
 808c666:	4683      	mov	fp, r0
 808c668:	f001 fbf1 	bl	808de4e <__mcmp>
 808c66c:	2800      	cmp	r0, #0
 808c66e:	f340 81e1 	ble.w	808ca34 <_strtod_r+0xb44>
 808c672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c676:	9a03      	ldr	r2, [sp, #12]
 808c678:	0d1b      	lsrs	r3, r3, #20
 808c67a:	051b      	lsls	r3, r3, #20
 808c67c:	2a00      	cmp	r2, #0
 808c67e:	f000 808d 	beq.w	808c79c <_strtod_r+0x8ac>
 808c682:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c686:	f300 8089 	bgt.w	808c79c <_strtod_r+0x8ac>
 808c68a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808c68e:	f300 81d3 	bgt.w	808ca38 <_strtod_r+0xb48>
 808c692:	2322      	movs	r3, #34	; 0x22
 808c694:	f04f 0800 	mov.w	r8, #0
 808c698:	f04f 0900 	mov.w	r9, #0
 808c69c:	f8ca 3000 	str.w	r3, [sl]
 808c6a0:	9b05      	ldr	r3, [sp, #20]
 808c6a2:	2b00      	cmp	r3, #0
 808c6a4:	f040 81d9 	bne.w	808ca5a <_strtod_r+0xb6a>
 808c6a8:	e1eb      	b.n	808ca82 <_strtod_r+0xb92>
 808c6aa:	2301      	movs	r3, #1
 808c6ac:	2500      	movs	r5, #0
 808c6ae:	9307      	str	r3, [sp, #28]
 808c6b0:	e788      	b.n	808c5c4 <_strtod_r+0x6d4>
 808c6b2:	461a      	mov	r2, r3
 808c6b4:	9902      	ldr	r1, [sp, #8]
 808c6b6:	4650      	mov	r0, sl
 808c6b8:	f001 fb2a 	bl	808dd10 <__pow5mult>
 808c6bc:	9002      	str	r0, [sp, #8]
 808c6be:	2800      	cmp	r0, #0
 808c6c0:	f43f ae5c 	beq.w	808c37c <_strtod_r+0x48c>
 808c6c4:	4601      	mov	r1, r0
 808c6c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808c6c8:	4650      	mov	r0, sl
 808c6ca:	f001 fa90 	bl	808dbee <__multiply>
 808c6ce:	9006      	str	r0, [sp, #24]
 808c6d0:	2800      	cmp	r0, #0
 808c6d2:	f43f ae53 	beq.w	808c37c <_strtod_r+0x48c>
 808c6d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c6d8:	4650      	mov	r0, sl
 808c6da:	f001 f9a2 	bl	808da22 <_Bfree>
 808c6de:	9b06      	ldr	r3, [sp, #24]
 808c6e0:	9318      	str	r3, [sp, #96]	; 0x60
 808c6e2:	e782      	b.n	808c5ea <_strtod_r+0x6fa>
 808c6e4:	463a      	mov	r2, r7
 808c6e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c6e8:	4650      	mov	r0, sl
 808c6ea:	f001 fb5f 	bl	808ddac <__lshift>
 808c6ee:	9018      	str	r0, [sp, #96]	; 0x60
 808c6f0:	2800      	cmp	r0, #0
 808c6f2:	f47f af7c 	bne.w	808c5ee <_strtod_r+0x6fe>
 808c6f6:	e641      	b.n	808c37c <_strtod_r+0x48c>
 808c6f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808c6fa:	9904      	ldr	r1, [sp, #16]
 808c6fc:	4650      	mov	r0, sl
 808c6fe:	f001 fb07 	bl	808dd10 <__pow5mult>
 808c702:	9004      	str	r0, [sp, #16]
 808c704:	2800      	cmp	r0, #0
 808c706:	f47f af76 	bne.w	808c5f6 <_strtod_r+0x706>
 808c70a:	e637      	b.n	808c37c <_strtod_r+0x48c>
 808c70c:	4622      	mov	r2, r4
 808c70e:	9904      	ldr	r1, [sp, #16]
 808c710:	4650      	mov	r0, sl
 808c712:	f001 fb4b 	bl	808ddac <__lshift>
 808c716:	9004      	str	r0, [sp, #16]
 808c718:	2800      	cmp	r0, #0
 808c71a:	f47f af6f 	bne.w	808c5fc <_strtod_r+0x70c>
 808c71e:	e62d      	b.n	808c37c <_strtod_r+0x48c>
 808c720:	4632      	mov	r2, r6
 808c722:	9902      	ldr	r1, [sp, #8]
 808c724:	4650      	mov	r0, sl
 808c726:	f001 fb41 	bl	808ddac <__lshift>
 808c72a:	9002      	str	r0, [sp, #8]
 808c72c:	2800      	cmp	r0, #0
 808c72e:	f47f af68 	bne.w	808c602 <_strtod_r+0x712>
 808c732:	e623      	b.n	808c37c <_strtod_r+0x48c>
 808c734:	f8db 3010 	ldr.w	r3, [fp, #16]
 808c738:	2b01      	cmp	r3, #1
 808c73a:	dc8e      	bgt.n	808c65a <_strtod_r+0x76a>
 808c73c:	e17a      	b.n	808ca34 <_strtod_r+0xb44>
 808c73e:	d161      	bne.n	808c804 <_strtod_r+0x914>
 808c740:	9a06      	ldr	r2, [sp, #24]
 808c742:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c746:	b322      	cbz	r2, 808c792 <_strtod_r+0x8a2>
 808c748:	4943      	ldr	r1, [pc, #268]	; (808c858 <_strtod_r+0x968>)
 808c74a:	464a      	mov	r2, r9
 808c74c:	428b      	cmp	r3, r1
 808c74e:	d12e      	bne.n	808c7ae <_strtod_r+0x8be>
 808c750:	9b03      	ldr	r3, [sp, #12]
 808c752:	4641      	mov	r1, r8
 808c754:	b163      	cbz	r3, 808c770 <_strtod_r+0x880>
 808c756:	4b41      	ldr	r3, [pc, #260]	; (808c85c <_strtod_r+0x96c>)
 808c758:	4013      	ands	r3, r2
 808c75a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c75e:	d807      	bhi.n	808c770 <_strtod_r+0x880>
 808c760:	0d1b      	lsrs	r3, r3, #20
 808c762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c766:	f04f 30ff 	mov.w	r0, #4294967295
 808c76a:	fa00 f303 	lsl.w	r3, r0, r3
 808c76e:	e001      	b.n	808c774 <_strtod_r+0x884>
 808c770:	f04f 33ff 	mov.w	r3, #4294967295
 808c774:	428b      	cmp	r3, r1
 808c776:	d11a      	bne.n	808c7ae <_strtod_r+0x8be>
 808c778:	4939      	ldr	r1, [pc, #228]	; (808c860 <_strtod_r+0x970>)
 808c77a:	428a      	cmp	r2, r1
 808c77c:	d102      	bne.n	808c784 <_strtod_r+0x894>
 808c77e:	3301      	adds	r3, #1
 808c780:	f43f adfc 	beq.w	808c37c <_strtod_r+0x48c>
 808c784:	4b35      	ldr	r3, [pc, #212]	; (808c85c <_strtod_r+0x96c>)
 808c786:	f04f 0800 	mov.w	r8, #0
 808c78a:	4013      	ands	r3, r2
 808c78c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808c790:	e150      	b.n	808ca34 <_strtod_r+0xb44>
 808c792:	b963      	cbnz	r3, 808c7ae <_strtod_r+0x8be>
 808c794:	f1b8 0f00 	cmp.w	r8, #0
 808c798:	d109      	bne.n	808c7ae <_strtod_r+0x8be>
 808c79a:	e76a      	b.n	808c672 <_strtod_r+0x782>
 808c79c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808c7a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808c7a4:	f04f 38ff 	mov.w	r8, #4294967295
 808c7a8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808c7ac:	e142      	b.n	808ca34 <_strtod_r+0xb44>
 808c7ae:	b115      	cbz	r5, 808c7b6 <_strtod_r+0x8c6>
 808c7b0:	ea15 0f09 	tst.w	r5, r9
 808c7b4:	e002      	b.n	808c7bc <_strtod_r+0x8cc>
 808c7b6:	9b07      	ldr	r3, [sp, #28]
 808c7b8:	ea13 0f08 	tst.w	r3, r8
 808c7bc:	f000 813a 	beq.w	808ca34 <_strtod_r+0xb44>
 808c7c0:	9b06      	ldr	r3, [sp, #24]
 808c7c2:	9a03      	ldr	r2, [sp, #12]
 808c7c4:	4640      	mov	r0, r8
 808c7c6:	4649      	mov	r1, r9
 808c7c8:	b153      	cbz	r3, 808c7e0 <_strtod_r+0x8f0>
 808c7ca:	f7ff fb70 	bl	808beae <sulp>
 808c7ce:	4602      	mov	r2, r0
 808c7d0:	460b      	mov	r3, r1
 808c7d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c7d6:	f7fd fa47 	bl	8089c68 <__adddf3>
 808c7da:	4680      	mov	r8, r0
 808c7dc:	4689      	mov	r9, r1
 808c7de:	e129      	b.n	808ca34 <_strtod_r+0xb44>
 808c7e0:	f7ff fb65 	bl	808beae <sulp>
 808c7e4:	4602      	mov	r2, r0
 808c7e6:	460b      	mov	r3, r1
 808c7e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c7ec:	f7fd fa3a 	bl	8089c64 <__aeabi_dsub>
 808c7f0:	2200      	movs	r2, #0
 808c7f2:	2300      	movs	r3, #0
 808c7f4:	4680      	mov	r8, r0
 808c7f6:	4689      	mov	r9, r1
 808c7f8:	f7fd fe50 	bl	808a49c <__aeabi_dcmpeq>
 808c7fc:	2800      	cmp	r0, #0
 808c7fe:	f47f af48 	bne.w	808c692 <_strtod_r+0x7a2>
 808c802:	e117      	b.n	808ca34 <_strtod_r+0xb44>
 808c804:	9902      	ldr	r1, [sp, #8]
 808c806:	4658      	mov	r0, fp
 808c808:	f001 fc5b 	bl	808e0c2 <__ratio>
 808c80c:	2200      	movs	r2, #0
 808c80e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808c812:	4606      	mov	r6, r0
 808c814:	460f      	mov	r7, r1
 808c816:	f7fd fe55 	bl	808a4c4 <__aeabi_dcmple>
 808c81a:	2800      	cmp	r0, #0
 808c81c:	d03f      	beq.n	808c89e <_strtod_r+0x9ae>
 808c81e:	9b06      	ldr	r3, [sp, #24]
 808c820:	b113      	cbz	r3, 808c828 <_strtod_r+0x938>
 808c822:	2600      	movs	r6, #0
 808c824:	4f0f      	ldr	r7, [pc, #60]	; (808c864 <_strtod_r+0x974>)
 808c826:	e010      	b.n	808c84a <_strtod_r+0x95a>
 808c828:	f1b8 0f00 	cmp.w	r8, #0
 808c82c:	d103      	bne.n	808c836 <_strtod_r+0x946>
 808c82e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c832:	b93b      	cbnz	r3, 808c844 <_strtod_r+0x954>
 808c834:	e01a      	b.n	808c86c <_strtod_r+0x97c>
 808c836:	f1b8 0f01 	cmp.w	r8, #1
 808c83a:	d103      	bne.n	808c844 <_strtod_r+0x954>
 808c83c:	f1b9 0f00 	cmp.w	r9, #0
 808c840:	f43f af27 	beq.w	808c692 <_strtod_r+0x7a2>
 808c844:	4f08      	ldr	r7, [pc, #32]	; (808c868 <_strtod_r+0x978>)
 808c846:	2600      	movs	r6, #0
 808c848:	2400      	movs	r4, #0
 808c84a:	4d06      	ldr	r5, [pc, #24]	; (808c864 <_strtod_r+0x974>)
 808c84c:	e03c      	b.n	808c8c8 <_strtod_r+0x9d8>
 808c84e:	bf00      	nop
 808c850:	fffffc02 	.word	0xfffffc02
 808c854:	fffffbe2 	.word	0xfffffbe2
 808c858:	000fffff 	.word	0x000fffff
 808c85c:	7ff00000 	.word	0x7ff00000
 808c860:	7fefffff 	.word	0x7fefffff
 808c864:	3ff00000 	.word	0x3ff00000
 808c868:	bff00000 	.word	0xbff00000
 808c86c:	2200      	movs	r2, #0
 808c86e:	4b9a      	ldr	r3, [pc, #616]	; (808cad8 <_strtod_r+0xbe8>)
 808c870:	4630      	mov	r0, r6
 808c872:	4639      	mov	r1, r7
 808c874:	f7fd fe1c 	bl	808a4b0 <__aeabi_dcmplt>
 808c878:	b940      	cbnz	r0, 808c88c <_strtod_r+0x99c>
 808c87a:	2200      	movs	r2, #0
 808c87c:	4b97      	ldr	r3, [pc, #604]	; (808cadc <_strtod_r+0xbec>)
 808c87e:	4630      	mov	r0, r6
 808c880:	4639      	mov	r1, r7
 808c882:	f7fd fba3 	bl	8089fcc <__aeabi_dmul>
 808c886:	4604      	mov	r4, r0
 808c888:	460d      	mov	r5, r1
 808c88a:	e001      	b.n	808c890 <_strtod_r+0x9a0>
 808c88c:	9c06      	ldr	r4, [sp, #24]
 808c88e:	4d93      	ldr	r5, [pc, #588]	; (808cadc <_strtod_r+0xbec>)
 808c890:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808c894:	9414      	str	r4, [sp, #80]	; 0x50
 808c896:	9315      	str	r3, [sp, #84]	; 0x54
 808c898:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808c89c:	e014      	b.n	808c8c8 <_strtod_r+0x9d8>
 808c89e:	4b8f      	ldr	r3, [pc, #572]	; (808cadc <_strtod_r+0xbec>)
 808c8a0:	2200      	movs	r2, #0
 808c8a2:	4630      	mov	r0, r6
 808c8a4:	4639      	mov	r1, r7
 808c8a6:	f7fd fb91 	bl	8089fcc <__aeabi_dmul>
 808c8aa:	9b06      	ldr	r3, [sp, #24]
 808c8ac:	4604      	mov	r4, r0
 808c8ae:	460d      	mov	r5, r1
 808c8b0:	b923      	cbnz	r3, 808c8bc <_strtod_r+0x9cc>
 808c8b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c8b6:	900e      	str	r0, [sp, #56]	; 0x38
 808c8b8:	930f      	str	r3, [sp, #60]	; 0x3c
 808c8ba:	e003      	b.n	808c8c4 <_strtod_r+0x9d4>
 808c8bc:	4602      	mov	r2, r0
 808c8be:	460b      	mov	r3, r1
 808c8c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808c8c4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808c8c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c8cc:	0d1b      	lsrs	r3, r3, #20
 808c8ce:	051b      	lsls	r3, r3, #20
 808c8d0:	9307      	str	r3, [sp, #28]
 808c8d2:	9a07      	ldr	r2, [sp, #28]
 808c8d4:	4b82      	ldr	r3, [pc, #520]	; (808cae0 <_strtod_r+0xbf0>)
 808c8d6:	429a      	cmp	r2, r3
 808c8d8:	d12b      	bne.n	808c932 <_strtod_r+0xa42>
 808c8da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808c8de:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c8e2:	4640      	mov	r0, r8
 808c8e4:	4649      	mov	r1, r9
 808c8e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808c8ea:	f001 fb2b 	bl	808df44 <__ulp>
 808c8ee:	4602      	mov	r2, r0
 808c8f0:	460b      	mov	r3, r1
 808c8f2:	4630      	mov	r0, r6
 808c8f4:	4639      	mov	r1, r7
 808c8f6:	f7fd fb69 	bl	8089fcc <__aeabi_dmul>
 808c8fa:	4642      	mov	r2, r8
 808c8fc:	464b      	mov	r3, r9
 808c8fe:	f7fd f9b3 	bl	8089c68 <__adddf3>
 808c902:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808c906:	0d1b      	lsrs	r3, r3, #20
 808c908:	4a76      	ldr	r2, [pc, #472]	; (808cae4 <_strtod_r+0xbf4>)
 808c90a:	051b      	lsls	r3, r3, #20
 808c90c:	4293      	cmp	r3, r2
 808c90e:	4680      	mov	r8, r0
 808c910:	d90c      	bls.n	808c92c <_strtod_r+0xa3c>
 808c912:	4b75      	ldr	r3, [pc, #468]	; (808cae8 <_strtod_r+0xbf8>)
 808c914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808c916:	429a      	cmp	r2, r3
 808c918:	d103      	bne.n	808c922 <_strtod_r+0xa32>
 808c91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c91c:	3301      	adds	r3, #1
 808c91e:	f43f ad2d 	beq.w	808c37c <_strtod_r+0x48c>
 808c922:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808cae8 <_strtod_r+0xbf8>
 808c926:	f04f 38ff 	mov.w	r8, #4294967295
 808c92a:	e072      	b.n	808ca12 <_strtod_r+0xb22>
 808c92c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808c930:	e039      	b.n	808c9a6 <_strtod_r+0xab6>
 808c932:	9b03      	ldr	r3, [sp, #12]
 808c934:	b33b      	cbz	r3, 808c986 <_strtod_r+0xa96>
 808c936:	9b07      	ldr	r3, [sp, #28]
 808c938:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c93c:	d823      	bhi.n	808c986 <_strtod_r+0xa96>
 808c93e:	a35e      	add	r3, pc, #376	; (adr r3, 808cab8 <_strtod_r+0xbc8>)
 808c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c944:	4620      	mov	r0, r4
 808c946:	4629      	mov	r1, r5
 808c948:	f7fd fdbc 	bl	808a4c4 <__aeabi_dcmple>
 808c94c:	b1b8      	cbz	r0, 808c97e <_strtod_r+0xa8e>
 808c94e:	4629      	mov	r1, r5
 808c950:	4620      	mov	r0, r4
 808c952:	f7fd fdfd 	bl	808a550 <__aeabi_d2uiz>
 808c956:	2800      	cmp	r0, #0
 808c958:	bf08      	it	eq
 808c95a:	2001      	moveq	r0, #1
 808c95c:	f7fd fac0 	bl	8089ee0 <__aeabi_ui2d>
 808c960:	9b06      	ldr	r3, [sp, #24]
 808c962:	4604      	mov	r4, r0
 808c964:	460d      	mov	r5, r1
 808c966:	b923      	cbnz	r3, 808c972 <_strtod_r+0xa82>
 808c968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c96c:	9010      	str	r0, [sp, #64]	; 0x40
 808c96e:	9311      	str	r3, [sp, #68]	; 0x44
 808c970:	e003      	b.n	808c97a <_strtod_r+0xa8a>
 808c972:	4602      	mov	r2, r0
 808c974:	460b      	mov	r3, r1
 808c976:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808c97a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808c97e:	9a07      	ldr	r2, [sp, #28]
 808c980:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808c984:	1a9f      	subs	r7, r3, r2
 808c986:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c98a:	f001 fadb 	bl	808df44 <__ulp>
 808c98e:	4602      	mov	r2, r0
 808c990:	460b      	mov	r3, r1
 808c992:	4630      	mov	r0, r6
 808c994:	4639      	mov	r1, r7
 808c996:	f7fd fb19 	bl	8089fcc <__aeabi_dmul>
 808c99a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808c99e:	f7fd f963 	bl	8089c68 <__adddf3>
 808c9a2:	4680      	mov	r8, r0
 808c9a4:	4689      	mov	r9, r1
 808c9a6:	9b03      	ldr	r3, [sp, #12]
 808c9a8:	bb9b      	cbnz	r3, 808ca12 <_strtod_r+0xb22>
 808c9aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c9ae:	0d1b      	lsrs	r3, r3, #20
 808c9b0:	9a07      	ldr	r2, [sp, #28]
 808c9b2:	051b      	lsls	r3, r3, #20
 808c9b4:	429a      	cmp	r2, r3
 808c9b6:	464e      	mov	r6, r9
 808c9b8:	d12b      	bne.n	808ca12 <_strtod_r+0xb22>
 808c9ba:	4629      	mov	r1, r5
 808c9bc:	4620      	mov	r0, r4
 808c9be:	f7fd fd9f 	bl	808a500 <__aeabi_d2iz>
 808c9c2:	f7fd fa9d 	bl	8089f00 <__aeabi_i2d>
 808c9c6:	460b      	mov	r3, r1
 808c9c8:	4602      	mov	r2, r0
 808c9ca:	4629      	mov	r1, r5
 808c9cc:	4620      	mov	r0, r4
 808c9ce:	f7fd f949 	bl	8089c64 <__aeabi_dsub>
 808c9d2:	9b06      	ldr	r3, [sp, #24]
 808c9d4:	4604      	mov	r4, r0
 808c9d6:	460d      	mov	r5, r1
 808c9d8:	b92b      	cbnz	r3, 808c9e6 <_strtod_r+0xaf6>
 808c9da:	f1b8 0f00 	cmp.w	r8, #0
 808c9de:	d102      	bne.n	808c9e6 <_strtod_r+0xaf6>
 808c9e0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808c9e4:	b17e      	cbz	r6, 808ca06 <_strtod_r+0xb16>
 808c9e6:	a336      	add	r3, pc, #216	; (adr r3, 808cac0 <_strtod_r+0xbd0>)
 808c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c9ec:	4620      	mov	r0, r4
 808c9ee:	4629      	mov	r1, r5
 808c9f0:	f7fd fd5e 	bl	808a4b0 <__aeabi_dcmplt>
 808c9f4:	bb88      	cbnz	r0, 808ca5a <_strtod_r+0xb6a>
 808c9f6:	a334      	add	r3, pc, #208	; (adr r3, 808cac8 <_strtod_r+0xbd8>)
 808c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c9fc:	4620      	mov	r0, r4
 808c9fe:	4629      	mov	r1, r5
 808ca00:	f7fd fd74 	bl	808a4ec <__aeabi_dcmpgt>
 808ca04:	e004      	b.n	808ca10 <_strtod_r+0xb20>
 808ca06:	a332      	add	r3, pc, #200	; (adr r3, 808cad0 <_strtod_r+0xbe0>)
 808ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ca0c:	f7fd fd50 	bl	808a4b0 <__aeabi_dcmplt>
 808ca10:	bb18      	cbnz	r0, 808ca5a <_strtod_r+0xb6a>
 808ca12:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ca14:	4650      	mov	r0, sl
 808ca16:	f001 f804 	bl	808da22 <_Bfree>
 808ca1a:	9904      	ldr	r1, [sp, #16]
 808ca1c:	4650      	mov	r0, sl
 808ca1e:	f001 f800 	bl	808da22 <_Bfree>
 808ca22:	9902      	ldr	r1, [sp, #8]
 808ca24:	4650      	mov	r0, sl
 808ca26:	f000 fffc 	bl	808da22 <_Bfree>
 808ca2a:	4659      	mov	r1, fp
 808ca2c:	4650      	mov	r0, sl
 808ca2e:	f000 fff8 	bl	808da22 <_Bfree>
 808ca32:	e574      	b.n	808c51e <_strtod_r+0x62e>
 808ca34:	9b03      	ldr	r3, [sp, #12]
 808ca36:	b183      	cbz	r3, 808ca5a <_strtod_r+0xb6a>
 808ca38:	4b2c      	ldr	r3, [pc, #176]	; (808caec <_strtod_r+0xbfc>)
 808ca3a:	4640      	mov	r0, r8
 808ca3c:	930b      	str	r3, [sp, #44]	; 0x2c
 808ca3e:	2300      	movs	r3, #0
 808ca40:	930a      	str	r3, [sp, #40]	; 0x28
 808ca42:	4649      	mov	r1, r9
 808ca44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808ca48:	f7fd fac0 	bl	8089fcc <__aeabi_dmul>
 808ca4c:	4680      	mov	r8, r0
 808ca4e:	4689      	mov	r9, r1
 808ca50:	b919      	cbnz	r1, 808ca5a <_strtod_r+0xb6a>
 808ca52:	b910      	cbnz	r0, 808ca5a <_strtod_r+0xb6a>
 808ca54:	2322      	movs	r3, #34	; 0x22
 808ca56:	f8ca 3000 	str.w	r3, [sl]
 808ca5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ca5c:	4650      	mov	r0, sl
 808ca5e:	f000 ffe0 	bl	808da22 <_Bfree>
 808ca62:	9904      	ldr	r1, [sp, #16]
 808ca64:	4650      	mov	r0, sl
 808ca66:	f000 ffdc 	bl	808da22 <_Bfree>
 808ca6a:	9902      	ldr	r1, [sp, #8]
 808ca6c:	4650      	mov	r0, sl
 808ca6e:	f000 ffd8 	bl	808da22 <_Bfree>
 808ca72:	9905      	ldr	r1, [sp, #20]
 808ca74:	4650      	mov	r0, sl
 808ca76:	f000 ffd4 	bl	808da22 <_Bfree>
 808ca7a:	4659      	mov	r1, fp
 808ca7c:	4650      	mov	r0, sl
 808ca7e:	f000 ffd0 	bl	808da22 <_Bfree>
 808ca82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808ca84:	b113      	cbz	r3, 808ca8c <_strtod_r+0xb9c>
 808ca86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ca88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808ca8a:	6013      	str	r3, [r2, #0]
 808ca8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808ca8e:	b11b      	cbz	r3, 808ca98 <_strtod_r+0xba8>
 808ca90:	4642      	mov	r2, r8
 808ca92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808ca96:	e007      	b.n	808caa8 <_strtod_r+0xbb8>
 808ca98:	4642      	mov	r2, r8
 808ca9a:	464b      	mov	r3, r9
 808ca9c:	e004      	b.n	808caa8 <_strtod_r+0xbb8>
 808ca9e:	2500      	movs	r5, #0
 808caa0:	462a      	mov	r2, r5
 808caa2:	2101      	movs	r1, #1
 808caa4:	f7ff bb47 	b.w	808c136 <_strtod_r+0x246>
 808caa8:	4610      	mov	r0, r2
 808caaa:	4619      	mov	r1, r3
 808caac:	b01d      	add	sp, #116	; 0x74
 808caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cab2:	bf00      	nop
 808cab4:	f3af 8000 	nop.w
 808cab8:	ffc00000 	.word	0xffc00000
 808cabc:	41dfffff 	.word	0x41dfffff
 808cac0:	94a03595 	.word	0x94a03595
 808cac4:	3fdfffff 	.word	0x3fdfffff
 808cac8:	35afe535 	.word	0x35afe535
 808cacc:	3fe00000 	.word	0x3fe00000
 808cad0:	94a03595 	.word	0x94a03595
 808cad4:	3fcfffff 	.word	0x3fcfffff
 808cad8:	3ff00000 	.word	0x3ff00000
 808cadc:	3fe00000 	.word	0x3fe00000
 808cae0:	7fe00000 	.word	0x7fe00000
 808cae4:	7c9fffff 	.word	0x7c9fffff
 808cae8:	7fefffff 	.word	0x7fefffff
 808caec:	39500000 	.word	0x39500000

0808caf0 <strtod>:
 808caf0:	4b02      	ldr	r3, [pc, #8]	; (808cafc <strtod+0xc>)
 808caf2:	460a      	mov	r2, r1
 808caf4:	4601      	mov	r1, r0
 808caf6:	6818      	ldr	r0, [r3, #0]
 808caf8:	f7ff b9fa 	b.w	808bef0 <_strtod_r>
 808cafc:	200000bc 	.word	0x200000bc

0808cb00 <_strtol_r>:
 808cb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cb04:	460f      	mov	r7, r1
 808cb06:	4680      	mov	r8, r0
 808cb08:	483f      	ldr	r0, [pc, #252]	; (808cc08 <_strtol_r+0x108>)
 808cb0a:	f8d0 9000 	ldr.w	r9, [r0]
 808cb0e:	463d      	mov	r5, r7
 808cb10:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cb14:	eb09 0004 	add.w	r0, r9, r4
 808cb18:	7840      	ldrb	r0, [r0, #1]
 808cb1a:	f000 0008 	and.w	r0, r0, #8
 808cb1e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808cb22:	b108      	cbz	r0, 808cb28 <_strtol_r+0x28>
 808cb24:	462f      	mov	r7, r5
 808cb26:	e7f2      	b.n	808cb0e <_strtol_r+0xe>
 808cb28:	2c2d      	cmp	r4, #45	; 0x2d
 808cb2a:	d103      	bne.n	808cb34 <_strtol_r+0x34>
 808cb2c:	1cbd      	adds	r5, r7, #2
 808cb2e:	787c      	ldrb	r4, [r7, #1]
 808cb30:	2601      	movs	r6, #1
 808cb32:	e003      	b.n	808cb3c <_strtol_r+0x3c>
 808cb34:	2c2b      	cmp	r4, #43	; 0x2b
 808cb36:	bf04      	itt	eq
 808cb38:	787c      	ldrbeq	r4, [r7, #1]
 808cb3a:	1cbd      	addeq	r5, r7, #2
 808cb3c:	b113      	cbz	r3, 808cb44 <_strtol_r+0x44>
 808cb3e:	2b10      	cmp	r3, #16
 808cb40:	d10a      	bne.n	808cb58 <_strtol_r+0x58>
 808cb42:	e05b      	b.n	808cbfc <_strtol_r+0xfc>
 808cb44:	2c30      	cmp	r4, #48	; 0x30
 808cb46:	d157      	bne.n	808cbf8 <_strtol_r+0xf8>
 808cb48:	7828      	ldrb	r0, [r5, #0]
 808cb4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808cb4e:	2858      	cmp	r0, #88	; 0x58
 808cb50:	d14d      	bne.n	808cbee <_strtol_r+0xee>
 808cb52:	786c      	ldrb	r4, [r5, #1]
 808cb54:	2310      	movs	r3, #16
 808cb56:	3502      	adds	r5, #2
 808cb58:	2e00      	cmp	r6, #0
 808cb5a:	bf14      	ite	ne
 808cb5c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808cb60:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808cb64:	fbbc faf3 	udiv	sl, ip, r3
 808cb68:	2700      	movs	r7, #0
 808cb6a:	4638      	mov	r0, r7
 808cb6c:	fb03 cc1a 	mls	ip, r3, sl, ip
 808cb70:	eb09 0e04 	add.w	lr, r9, r4
 808cb74:	f89e e001 	ldrb.w	lr, [lr, #1]
 808cb78:	f01e 0f04 	tst.w	lr, #4
 808cb7c:	d001      	beq.n	808cb82 <_strtol_r+0x82>
 808cb7e:	3c30      	subs	r4, #48	; 0x30
 808cb80:	e00b      	b.n	808cb9a <_strtol_r+0x9a>
 808cb82:	f01e 0e03 	ands.w	lr, lr, #3
 808cb86:	d01b      	beq.n	808cbc0 <_strtol_r+0xc0>
 808cb88:	f1be 0f01 	cmp.w	lr, #1
 808cb8c:	bf0c      	ite	eq
 808cb8e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808cb92:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808cb96:	ebce 0404 	rsb	r4, lr, r4
 808cb9a:	42a3      	cmp	r3, r4
 808cb9c:	dd10      	ble.n	808cbc0 <_strtol_r+0xc0>
 808cb9e:	f1b7 3fff 	cmp.w	r7, #4294967295
 808cba2:	d00a      	beq.n	808cbba <_strtol_r+0xba>
 808cba4:	4550      	cmp	r0, sl
 808cba6:	d806      	bhi.n	808cbb6 <_strtol_r+0xb6>
 808cba8:	d101      	bne.n	808cbae <_strtol_r+0xae>
 808cbaa:	4564      	cmp	r4, ip
 808cbac:	dc03      	bgt.n	808cbb6 <_strtol_r+0xb6>
 808cbae:	fb03 4000 	mla	r0, r3, r0, r4
 808cbb2:	2701      	movs	r7, #1
 808cbb4:	e001      	b.n	808cbba <_strtol_r+0xba>
 808cbb6:	f04f 37ff 	mov.w	r7, #4294967295
 808cbba:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cbbe:	e7d7      	b.n	808cb70 <_strtol_r+0x70>
 808cbc0:	1c7b      	adds	r3, r7, #1
 808cbc2:	d10c      	bne.n	808cbde <_strtol_r+0xde>
 808cbc4:	2e00      	cmp	r6, #0
 808cbc6:	f04f 0322 	mov.w	r3, #34	; 0x22
 808cbca:	bf14      	ite	ne
 808cbcc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808cbd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808cbd4:	f8c8 3000 	str.w	r3, [r8]
 808cbd8:	b92a      	cbnz	r2, 808cbe6 <_strtol_r+0xe6>
 808cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cbde:	b106      	cbz	r6, 808cbe2 <_strtol_r+0xe2>
 808cbe0:	4240      	negs	r0, r0
 808cbe2:	b172      	cbz	r2, 808cc02 <_strtol_r+0x102>
 808cbe4:	b107      	cbz	r7, 808cbe8 <_strtol_r+0xe8>
 808cbe6:	1e69      	subs	r1, r5, #1
 808cbe8:	6011      	str	r1, [r2, #0]
 808cbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cbee:	2430      	movs	r4, #48	; 0x30
 808cbf0:	2b00      	cmp	r3, #0
 808cbf2:	d1b1      	bne.n	808cb58 <_strtol_r+0x58>
 808cbf4:	2308      	movs	r3, #8
 808cbf6:	e7af      	b.n	808cb58 <_strtol_r+0x58>
 808cbf8:	230a      	movs	r3, #10
 808cbfa:	e7ad      	b.n	808cb58 <_strtol_r+0x58>
 808cbfc:	2c30      	cmp	r4, #48	; 0x30
 808cbfe:	d0a3      	beq.n	808cb48 <_strtol_r+0x48>
 808cc00:	e7aa      	b.n	808cb58 <_strtol_r+0x58>
 808cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cc06:	bf00      	nop
 808cc08:	20000058 	.word	0x20000058

0808cc0c <strtol>:
 808cc0c:	4613      	mov	r3, r2
 808cc0e:	460a      	mov	r2, r1
 808cc10:	4601      	mov	r1, r0
 808cc12:	4802      	ldr	r0, [pc, #8]	; (808cc1c <strtol+0x10>)
 808cc14:	6800      	ldr	r0, [r0, #0]
 808cc16:	f7ff bf73 	b.w	808cb00 <_strtol_r>
 808cc1a:	bf00      	nop
 808cc1c:	200000bc 	.word	0x200000bc

0808cc20 <_strtoul_r>:
 808cc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cc24:	460e      	mov	r6, r1
 808cc26:	4680      	mov	r8, r0
 808cc28:	483b      	ldr	r0, [pc, #236]	; (808cd18 <_strtoul_r+0xf8>)
 808cc2a:	f8d0 9000 	ldr.w	r9, [r0]
 808cc2e:	4635      	mov	r5, r6
 808cc30:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cc34:	eb09 0004 	add.w	r0, r9, r4
 808cc38:	7840      	ldrb	r0, [r0, #1]
 808cc3a:	f000 0008 	and.w	r0, r0, #8
 808cc3e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808cc42:	b108      	cbz	r0, 808cc48 <_strtoul_r+0x28>
 808cc44:	462e      	mov	r6, r5
 808cc46:	e7f2      	b.n	808cc2e <_strtoul_r+0xe>
 808cc48:	2c2d      	cmp	r4, #45	; 0x2d
 808cc4a:	d103      	bne.n	808cc54 <_strtoul_r+0x34>
 808cc4c:	1cb5      	adds	r5, r6, #2
 808cc4e:	7874      	ldrb	r4, [r6, #1]
 808cc50:	2701      	movs	r7, #1
 808cc52:	e003      	b.n	808cc5c <_strtoul_r+0x3c>
 808cc54:	2c2b      	cmp	r4, #43	; 0x2b
 808cc56:	bf04      	itt	eq
 808cc58:	7874      	ldrbeq	r4, [r6, #1]
 808cc5a:	1cb5      	addeq	r5, r6, #2
 808cc5c:	b113      	cbz	r3, 808cc64 <_strtoul_r+0x44>
 808cc5e:	2b10      	cmp	r3, #16
 808cc60:	d10a      	bne.n	808cc78 <_strtoul_r+0x58>
 808cc62:	e053      	b.n	808cd0c <_strtoul_r+0xec>
 808cc64:	2c30      	cmp	r4, #48	; 0x30
 808cc66:	d14f      	bne.n	808cd08 <_strtoul_r+0xe8>
 808cc68:	7828      	ldrb	r0, [r5, #0]
 808cc6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808cc6e:	2858      	cmp	r0, #88	; 0x58
 808cc70:	d145      	bne.n	808ccfe <_strtoul_r+0xde>
 808cc72:	786c      	ldrb	r4, [r5, #1]
 808cc74:	2310      	movs	r3, #16
 808cc76:	3502      	adds	r5, #2
 808cc78:	f04f 3cff 	mov.w	ip, #4294967295
 808cc7c:	fbbc fcf3 	udiv	ip, ip, r3
 808cc80:	fb03 fa0c 	mul.w	sl, r3, ip
 808cc84:	2600      	movs	r6, #0
 808cc86:	ea6f 0a0a 	mvn.w	sl, sl
 808cc8a:	4630      	mov	r0, r6
 808cc8c:	eb09 0e04 	add.w	lr, r9, r4
 808cc90:	f89e e001 	ldrb.w	lr, [lr, #1]
 808cc94:	f01e 0f04 	tst.w	lr, #4
 808cc98:	d001      	beq.n	808cc9e <_strtoul_r+0x7e>
 808cc9a:	3c30      	subs	r4, #48	; 0x30
 808cc9c:	e00b      	b.n	808ccb6 <_strtoul_r+0x96>
 808cc9e:	f01e 0e03 	ands.w	lr, lr, #3
 808cca2:	d01a      	beq.n	808ccda <_strtoul_r+0xba>
 808cca4:	f1be 0f01 	cmp.w	lr, #1
 808cca8:	bf0c      	ite	eq
 808ccaa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808ccae:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808ccb2:	ebce 0404 	rsb	r4, lr, r4
 808ccb6:	42a3      	cmp	r3, r4
 808ccb8:	dd0f      	ble.n	808ccda <_strtoul_r+0xba>
 808ccba:	2e00      	cmp	r6, #0
 808ccbc:	db08      	blt.n	808ccd0 <_strtoul_r+0xb0>
 808ccbe:	4560      	cmp	r0, ip
 808ccc0:	d806      	bhi.n	808ccd0 <_strtoul_r+0xb0>
 808ccc2:	d101      	bne.n	808ccc8 <_strtoul_r+0xa8>
 808ccc4:	4554      	cmp	r4, sl
 808ccc6:	dc03      	bgt.n	808ccd0 <_strtoul_r+0xb0>
 808ccc8:	fb03 4000 	mla	r0, r3, r0, r4
 808cccc:	2601      	movs	r6, #1
 808ccce:	e001      	b.n	808ccd4 <_strtoul_r+0xb4>
 808ccd0:	f04f 36ff 	mov.w	r6, #4294967295
 808ccd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 808ccd8:	e7d8      	b.n	808cc8c <_strtoul_r+0x6c>
 808ccda:	2e00      	cmp	r6, #0
 808ccdc:	da07      	bge.n	808ccee <_strtoul_r+0xce>
 808ccde:	2322      	movs	r3, #34	; 0x22
 808cce0:	f8c8 3000 	str.w	r3, [r8]
 808cce4:	f04f 30ff 	mov.w	r0, #4294967295
 808cce8:	b92a      	cbnz	r2, 808ccf6 <_strtoul_r+0xd6>
 808ccea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ccee:	b107      	cbz	r7, 808ccf2 <_strtoul_r+0xd2>
 808ccf0:	4240      	negs	r0, r0
 808ccf2:	b172      	cbz	r2, 808cd12 <_strtoul_r+0xf2>
 808ccf4:	b106      	cbz	r6, 808ccf8 <_strtoul_r+0xd8>
 808ccf6:	1e69      	subs	r1, r5, #1
 808ccf8:	6011      	str	r1, [r2, #0]
 808ccfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ccfe:	2430      	movs	r4, #48	; 0x30
 808cd00:	2b00      	cmp	r3, #0
 808cd02:	d1b9      	bne.n	808cc78 <_strtoul_r+0x58>
 808cd04:	2308      	movs	r3, #8
 808cd06:	e7b7      	b.n	808cc78 <_strtoul_r+0x58>
 808cd08:	230a      	movs	r3, #10
 808cd0a:	e7b5      	b.n	808cc78 <_strtoul_r+0x58>
 808cd0c:	2c30      	cmp	r4, #48	; 0x30
 808cd0e:	d0ab      	beq.n	808cc68 <_strtoul_r+0x48>
 808cd10:	e7b2      	b.n	808cc78 <_strtoul_r+0x58>
 808cd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd16:	bf00      	nop
 808cd18:	20000058 	.word	0x20000058

0808cd1c <strtoul>:
 808cd1c:	4613      	mov	r3, r2
 808cd1e:	460a      	mov	r2, r1
 808cd20:	4601      	mov	r1, r0
 808cd22:	4802      	ldr	r0, [pc, #8]	; (808cd2c <strtoul+0x10>)
 808cd24:	6800      	ldr	r0, [r0, #0]
 808cd26:	f7ff bf7b 	b.w	808cc20 <_strtoul_r>
 808cd2a:	bf00      	nop
 808cd2c:	200000bc 	.word	0x200000bc

0808cd30 <__get_current_time_locale>:
 808cd30:	4b04      	ldr	r3, [pc, #16]	; (808cd44 <__get_current_time_locale+0x14>)
 808cd32:	4a05      	ldr	r2, [pc, #20]	; (808cd48 <__get_current_time_locale+0x18>)
 808cd34:	6818      	ldr	r0, [r3, #0]
 808cd36:	4b05      	ldr	r3, [pc, #20]	; (808cd4c <__get_current_time_locale+0x1c>)
 808cd38:	2800      	cmp	r0, #0
 808cd3a:	bf14      	ite	ne
 808cd3c:	4610      	movne	r0, r2
 808cd3e:	4618      	moveq	r0, r3
 808cd40:	4770      	bx	lr
 808cd42:	bf00      	nop
 808cd44:	20000fbc 	.word	0x20000fbc
 808cd48:	20000fc0 	.word	0x20000fc0
 808cd4c:	0808f550 	.word	0x0808f550

0808cd50 <__tzcalc_limits>:
 808cd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cd54:	4604      	mov	r4, r0
 808cd56:	f000 fd91 	bl	808d87c <__gettzinfo>
 808cd5a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808cd5e:	429c      	cmp	r4, r3
 808cd60:	f340 8096 	ble.w	808ce90 <__tzcalc_limits+0x140>
 808cd64:	f240 156d 	movw	r5, #365	; 0x16d
 808cd68:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808cd6c:	18e3      	adds	r3, r4, r3
 808cd6e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808cd72:	109b      	asrs	r3, r3, #2
 808cd74:	fb05 3502 	mla	r5, r5, r2, r3
 808cd78:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808cd7c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808cd80:	fb92 f3f3 	sdiv	r3, r2, r3
 808cd84:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808cd88:	442b      	add	r3, r5
 808cd8a:	18a5      	adds	r5, r4, r2
 808cd8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808cd90:	fb94 f7f2 	sdiv	r7, r4, r2
 808cd94:	fb95 f5f2 	sdiv	r5, r5, r2
 808cd98:	fb02 4717 	mls	r7, r2, r7, r4
 808cd9c:	441d      	add	r5, r3
 808cd9e:	2364      	movs	r3, #100	; 0x64
 808cda0:	fb94 f6f3 	sdiv	r6, r4, r3
 808cda4:	fab7 fe87 	clz	lr, r7
 808cda8:	4601      	mov	r1, r0
 808cdaa:	fb03 4616 	mls	r6, r3, r6, r4
 808cdae:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808cdb2:	9301      	str	r3, [sp, #4]
 808cdb4:	f004 0303 	and.w	r3, r4, #3
 808cdb8:	6044      	str	r4, [r0, #4]
 808cdba:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808cdbe:	9300      	str	r3, [sp, #0]
 808cdc0:	f04f 0c07 	mov.w	ip, #7
 808cdc4:	7a0b      	ldrb	r3, [r1, #8]
 808cdc6:	2b4a      	cmp	r3, #74	; 0x4a
 808cdc8:	d10e      	bne.n	808cde8 <__tzcalc_limits+0x98>
 808cdca:	694b      	ldr	r3, [r1, #20]
 808cdcc:	9a00      	ldr	r2, [sp, #0]
 808cdce:	18ec      	adds	r4, r5, r3
 808cdd0:	b902      	cbnz	r2, 808cdd4 <__tzcalc_limits+0x84>
 808cdd2:	b906      	cbnz	r6, 808cdd6 <__tzcalc_limits+0x86>
 808cdd4:	b927      	cbnz	r7, 808cde0 <__tzcalc_limits+0x90>
 808cdd6:	2b3b      	cmp	r3, #59	; 0x3b
 808cdd8:	bfd4      	ite	le
 808cdda:	2300      	movle	r3, #0
 808cddc:	2301      	movgt	r3, #1
 808cdde:	e000      	b.n	808cde2 <__tzcalc_limits+0x92>
 808cde0:	2300      	movs	r3, #0
 808cde2:	4423      	add	r3, r4
 808cde4:	3b01      	subs	r3, #1
 808cde6:	e03f      	b.n	808ce68 <__tzcalc_limits+0x118>
 808cde8:	2b44      	cmp	r3, #68	; 0x44
 808cdea:	d102      	bne.n	808cdf2 <__tzcalc_limits+0xa2>
 808cdec:	694b      	ldr	r3, [r1, #20]
 808cdee:	442b      	add	r3, r5
 808cdf0:	e03a      	b.n	808ce68 <__tzcalc_limits+0x118>
 808cdf2:	9b00      	ldr	r3, [sp, #0]
 808cdf4:	b92b      	cbnz	r3, 808ce02 <__tzcalc_limits+0xb2>
 808cdf6:	2e00      	cmp	r6, #0
 808cdf8:	bf0c      	ite	eq
 808cdfa:	46f0      	moveq	r8, lr
 808cdfc:	f04f 0801 	movne.w	r8, #1
 808ce00:	e000      	b.n	808ce04 <__tzcalc_limits+0xb4>
 808ce02:	46f0      	mov	r8, lr
 808ce04:	46a9      	mov	r9, r5
 808ce06:	4b24      	ldr	r3, [pc, #144]	; (808ce98 <__tzcalc_limits+0x148>)
 808ce08:	2230      	movs	r2, #48	; 0x30
 808ce0a:	fb02 3808 	mla	r8, r2, r8, r3
 808ce0e:	68cc      	ldr	r4, [r1, #12]
 808ce10:	f1a8 0a04 	sub.w	sl, r8, #4
 808ce14:	2301      	movs	r3, #1
 808ce16:	42a3      	cmp	r3, r4
 808ce18:	da04      	bge.n	808ce24 <__tzcalc_limits+0xd4>
 808ce1a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808ce1e:	3301      	adds	r3, #1
 808ce20:	44d9      	add	r9, fp
 808ce22:	e7f8      	b.n	808ce16 <__tzcalc_limits+0xc6>
 808ce24:	f109 0304 	add.w	r3, r9, #4
 808ce28:	fb93 fbfc 	sdiv	fp, r3, ip
 808ce2c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808ce30:	ebca 0a03 	rsb	sl, sl, r3
 808ce34:	694b      	ldr	r3, [r1, #20]
 808ce36:	2c01      	cmp	r4, #1
 808ce38:	bfb8      	it	lt
 808ce3a:	2401      	movlt	r4, #1
 808ce3c:	ebb3 0a0a 	subs.w	sl, r3, sl
 808ce40:	690b      	ldr	r3, [r1, #16]
 808ce42:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808ce46:	f103 33ff 	add.w	r3, r3, #4294967295
 808ce4a:	f104 34ff 	add.w	r4, r4, #4294967295
 808ce4e:	bf48      	it	mi
 808ce50:	f10a 0a07 	addmi.w	sl, sl, #7
 808ce54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808ce58:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808ce5c:	4453      	add	r3, sl
 808ce5e:	42a3      	cmp	r3, r4
 808ce60:	db01      	blt.n	808ce66 <__tzcalc_limits+0x116>
 808ce62:	3b07      	subs	r3, #7
 808ce64:	e7fb      	b.n	808ce5e <__tzcalc_limits+0x10e>
 808ce66:	444b      	add	r3, r9
 808ce68:	698c      	ldr	r4, [r1, #24]
 808ce6a:	4a0c      	ldr	r2, [pc, #48]	; (808ce9c <__tzcalc_limits+0x14c>)
 808ce6c:	fb02 4303 	mla	r3, r2, r3, r4
 808ce70:	6a0c      	ldr	r4, [r1, #32]
 808ce72:	4423      	add	r3, r4
 808ce74:	f841 3f1c 	str.w	r3, [r1, #28]!
 808ce78:	9b01      	ldr	r3, [sp, #4]
 808ce7a:	4299      	cmp	r1, r3
 808ce7c:	d1a2      	bne.n	808cdc4 <__tzcalc_limits+0x74>
 808ce7e:	69c3      	ldr	r3, [r0, #28]
 808ce80:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808ce82:	4293      	cmp	r3, r2
 808ce84:	bfac      	ite	ge
 808ce86:	2300      	movge	r3, #0
 808ce88:	2301      	movlt	r3, #1
 808ce8a:	6003      	str	r3, [r0, #0]
 808ce8c:	2001      	movs	r0, #1
 808ce8e:	e000      	b.n	808ce92 <__tzcalc_limits+0x142>
 808ce90:	2000      	movs	r0, #0
 808ce92:	b003      	add	sp, #12
 808ce94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ce98:	0808f314 	.word	0x0808f314
 808ce9c:	00015180 	.word	0x00015180

0808cea0 <__tz_lock>:
 808cea0:	4770      	bx	lr

0808cea2 <__tz_unlock>:
 808cea2:	4770      	bx	lr

0808cea4 <_tzset_unlocked>:
 808cea4:	4b01      	ldr	r3, [pc, #4]	; (808ceac <_tzset_unlocked+0x8>)
 808cea6:	6818      	ldr	r0, [r3, #0]
 808cea8:	f000 b802 	b.w	808ceb0 <_tzset_unlocked_r>
 808ceac:	200000bc 	.word	0x200000bc

0808ceb0 <_tzset_unlocked_r>:
 808ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ceb4:	b08d      	sub	sp, #52	; 0x34
 808ceb6:	4607      	mov	r7, r0
 808ceb8:	f000 fce0 	bl	808d87c <__gettzinfo>
 808cebc:	49b0      	ldr	r1, [pc, #704]	; (808d180 <_tzset_unlocked_r+0x2d0>)
 808cebe:	4604      	mov	r4, r0
 808cec0:	4638      	mov	r0, r7
 808cec2:	f000 fcd3 	bl	808d86c <_getenv_r>
 808cec6:	4eaf      	ldr	r6, [pc, #700]	; (808d184 <_tzset_unlocked_r+0x2d4>)
 808cec8:	4605      	mov	r5, r0
 808ceca:	b960      	cbnz	r0, 808cee6 <_tzset_unlocked_r+0x36>
 808cecc:	4bae      	ldr	r3, [pc, #696]	; (808d188 <_tzset_unlocked_r+0x2d8>)
 808cece:	4aaf      	ldr	r2, [pc, #700]	; (808d18c <_tzset_unlocked_r+0x2dc>)
 808ced0:	6018      	str	r0, [r3, #0]
 808ced2:	4baf      	ldr	r3, [pc, #700]	; (808d190 <_tzset_unlocked_r+0x2e0>)
 808ced4:	6018      	str	r0, [r3, #0]
 808ced6:	4baf      	ldr	r3, [pc, #700]	; (808d194 <_tzset_unlocked_r+0x2e4>)
 808ced8:	6830      	ldr	r0, [r6, #0]
 808ceda:	601a      	str	r2, [r3, #0]
 808cedc:	605a      	str	r2, [r3, #4]
 808cede:	f7f8 fdc9 	bl	8085a74 <free>
 808cee2:	6035      	str	r5, [r6, #0]
 808cee4:	e148      	b.n	808d178 <_tzset_unlocked_r+0x2c8>
 808cee6:	6831      	ldr	r1, [r6, #0]
 808cee8:	b979      	cbnz	r1, 808cf0a <_tzset_unlocked_r+0x5a>
 808ceea:	6830      	ldr	r0, [r6, #0]
 808ceec:	f7f8 fdc2 	bl	8085a74 <free>
 808cef0:	4628      	mov	r0, r5
 808cef2:	f7fe ff7f 	bl	808bdf4 <strlen>
 808cef6:	1c41      	adds	r1, r0, #1
 808cef8:	4638      	mov	r0, r7
 808cefa:	f7f8 fe03 	bl	8085b04 <_malloc_r>
 808cefe:	6030      	str	r0, [r6, #0]
 808cf00:	b148      	cbz	r0, 808cf16 <_tzset_unlocked_r+0x66>
 808cf02:	4629      	mov	r1, r5
 808cf04:	f7fe fa3e 	bl	808b384 <strcpy>
 808cf08:	e005      	b.n	808cf16 <_tzset_unlocked_r+0x66>
 808cf0a:	f7fe fa31 	bl	808b370 <strcmp>
 808cf0e:	2800      	cmp	r0, #0
 808cf10:	f000 8132 	beq.w	808d178 <_tzset_unlocked_r+0x2c8>
 808cf14:	e7e9      	b.n	808ceea <_tzset_unlocked_r+0x3a>
 808cf16:	782b      	ldrb	r3, [r5, #0]
 808cf18:	ae0a      	add	r6, sp, #40	; 0x28
 808cf1a:	2b3a      	cmp	r3, #58	; 0x3a
 808cf1c:	bf08      	it	eq
 808cf1e:	3501      	addeq	r5, #1
 808cf20:	4633      	mov	r3, r6
 808cf22:	4a9d      	ldr	r2, [pc, #628]	; (808d198 <_tzset_unlocked_r+0x2e8>)
 808cf24:	499d      	ldr	r1, [pc, #628]	; (808d19c <_tzset_unlocked_r+0x2ec>)
 808cf26:	4628      	mov	r0, r5
 808cf28:	f7f8 fdc4 	bl	8085ab4 <siscanf>
 808cf2c:	2800      	cmp	r0, #0
 808cf2e:	f340 8123 	ble.w	808d178 <_tzset_unlocked_r+0x2c8>
 808cf32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cf34:	18ef      	adds	r7, r5, r3
 808cf36:	5ceb      	ldrb	r3, [r5, r3]
 808cf38:	2b2d      	cmp	r3, #45	; 0x2d
 808cf3a:	d103      	bne.n	808cf44 <_tzset_unlocked_r+0x94>
 808cf3c:	3701      	adds	r7, #1
 808cf3e:	f04f 35ff 	mov.w	r5, #4294967295
 808cf42:	e003      	b.n	808cf4c <_tzset_unlocked_r+0x9c>
 808cf44:	2b2b      	cmp	r3, #43	; 0x2b
 808cf46:	bf08      	it	eq
 808cf48:	3701      	addeq	r7, #1
 808cf4a:	2501      	movs	r5, #1
 808cf4c:	f10d 0a20 	add.w	sl, sp, #32
 808cf50:	f10d 0b1e 	add.w	fp, sp, #30
 808cf54:	f04f 0800 	mov.w	r8, #0
 808cf58:	9603      	str	r6, [sp, #12]
 808cf5a:	f8cd a008 	str.w	sl, [sp, #8]
 808cf5e:	9601      	str	r6, [sp, #4]
 808cf60:	f8cd b000 	str.w	fp, [sp]
 808cf64:	4633      	mov	r3, r6
 808cf66:	aa07      	add	r2, sp, #28
 808cf68:	498d      	ldr	r1, [pc, #564]	; (808d1a0 <_tzset_unlocked_r+0x2f0>)
 808cf6a:	4638      	mov	r0, r7
 808cf6c:	f8ad 801e 	strh.w	r8, [sp, #30]
 808cf70:	f8ad 8020 	strh.w	r8, [sp, #32]
 808cf74:	f7f8 fd9e 	bl	8085ab4 <siscanf>
 808cf78:	4540      	cmp	r0, r8
 808cf7a:	f340 80fd 	ble.w	808d178 <_tzset_unlocked_r+0x2c8>
 808cf7e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808cf82:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808cf86:	213c      	movs	r1, #60	; 0x3c
 808cf88:	fb01 3302 	mla	r3, r1, r2, r3
 808cf8c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808cf90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808cf94:	fb01 3302 	mla	r3, r1, r2, r3
 808cf98:	435d      	muls	r5, r3
 808cf9a:	4b7f      	ldr	r3, [pc, #508]	; (808d198 <_tzset_unlocked_r+0x2e8>)
 808cf9c:	6225      	str	r5, [r4, #32]
 808cf9e:	4d7d      	ldr	r5, [pc, #500]	; (808d194 <_tzset_unlocked_r+0x2e4>)
 808cfa0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808d1ac <_tzset_unlocked_r+0x2fc>
 808cfa4:	602b      	str	r3, [r5, #0]
 808cfa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cfa8:	464a      	mov	r2, r9
 808cfaa:	441f      	add	r7, r3
 808cfac:	497b      	ldr	r1, [pc, #492]	; (808d19c <_tzset_unlocked_r+0x2ec>)
 808cfae:	4633      	mov	r3, r6
 808cfb0:	4638      	mov	r0, r7
 808cfb2:	f7f8 fd7f 	bl	8085ab4 <siscanf>
 808cfb6:	4540      	cmp	r0, r8
 808cfb8:	dc08      	bgt.n	808cfcc <_tzset_unlocked_r+0x11c>
 808cfba:	682b      	ldr	r3, [r5, #0]
 808cfbc:	6a22      	ldr	r2, [r4, #32]
 808cfbe:	606b      	str	r3, [r5, #4]
 808cfc0:	4b71      	ldr	r3, [pc, #452]	; (808d188 <_tzset_unlocked_r+0x2d8>)
 808cfc2:	601a      	str	r2, [r3, #0]
 808cfc4:	4b72      	ldr	r3, [pc, #456]	; (808d190 <_tzset_unlocked_r+0x2e0>)
 808cfc6:	f8c3 8000 	str.w	r8, [r3]
 808cfca:	e0d5      	b.n	808d178 <_tzset_unlocked_r+0x2c8>
 808cfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cfce:	f8c5 9004 	str.w	r9, [r5, #4]
 808cfd2:	18fd      	adds	r5, r7, r3
 808cfd4:	5cfb      	ldrb	r3, [r7, r3]
 808cfd6:	2b2d      	cmp	r3, #45	; 0x2d
 808cfd8:	d103      	bne.n	808cfe2 <_tzset_unlocked_r+0x132>
 808cfda:	3501      	adds	r5, #1
 808cfdc:	f04f 37ff 	mov.w	r7, #4294967295
 808cfe0:	e003      	b.n	808cfea <_tzset_unlocked_r+0x13a>
 808cfe2:	2b2b      	cmp	r3, #43	; 0x2b
 808cfe4:	bf08      	it	eq
 808cfe6:	3501      	addeq	r5, #1
 808cfe8:	2701      	movs	r7, #1
 808cfea:	2300      	movs	r3, #0
 808cfec:	f8ad 301c 	strh.w	r3, [sp, #28]
 808cff0:	f8ad 301e 	strh.w	r3, [sp, #30]
 808cff4:	f8ad 3020 	strh.w	r3, [sp, #32]
 808cff8:	930a      	str	r3, [sp, #40]	; 0x28
 808cffa:	9603      	str	r6, [sp, #12]
 808cffc:	f8cd a008 	str.w	sl, [sp, #8]
 808d000:	9601      	str	r6, [sp, #4]
 808d002:	f8cd b000 	str.w	fp, [sp]
 808d006:	4633      	mov	r3, r6
 808d008:	aa07      	add	r2, sp, #28
 808d00a:	4965      	ldr	r1, [pc, #404]	; (808d1a0 <_tzset_unlocked_r+0x2f0>)
 808d00c:	4628      	mov	r0, r5
 808d00e:	f7f8 fd51 	bl	8085ab4 <siscanf>
 808d012:	2800      	cmp	r0, #0
 808d014:	dc04      	bgt.n	808d020 <_tzset_unlocked_r+0x170>
 808d016:	6a23      	ldr	r3, [r4, #32]
 808d018:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808d01c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808d01e:	e00e      	b.n	808d03e <_tzset_unlocked_r+0x18e>
 808d020:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808d024:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808d028:	213c      	movs	r1, #60	; 0x3c
 808d02a:	fb01 3302 	mla	r3, r1, r2, r3
 808d02e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808d032:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808d036:	fb01 3302 	mla	r3, r1, r2, r3
 808d03a:	435f      	muls	r7, r3
 808d03c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808d03e:	4627      	mov	r7, r4
 808d040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d042:	f04f 0900 	mov.w	r9, #0
 808d046:	441d      	add	r5, r3
 808d048:	782b      	ldrb	r3, [r5, #0]
 808d04a:	2b2c      	cmp	r3, #44	; 0x2c
 808d04c:	bf08      	it	eq
 808d04e:	3501      	addeq	r5, #1
 808d050:	f895 8000 	ldrb.w	r8, [r5]
 808d054:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808d058:	d126      	bne.n	808d0a8 <_tzset_unlocked_r+0x1f8>
 808d05a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808d05e:	9302      	str	r3, [sp, #8]
 808d060:	ab09      	add	r3, sp, #36	; 0x24
 808d062:	9300      	str	r3, [sp, #0]
 808d064:	9603      	str	r6, [sp, #12]
 808d066:	9601      	str	r6, [sp, #4]
 808d068:	4633      	mov	r3, r6
 808d06a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808d06e:	494d      	ldr	r1, [pc, #308]	; (808d1a4 <_tzset_unlocked_r+0x2f4>)
 808d070:	4628      	mov	r0, r5
 808d072:	f7f8 fd1f 	bl	8085ab4 <siscanf>
 808d076:	2803      	cmp	r0, #3
 808d078:	d17e      	bne.n	808d178 <_tzset_unlocked_r+0x2c8>
 808d07a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808d07e:	1e4b      	subs	r3, r1, #1
 808d080:	2b0b      	cmp	r3, #11
 808d082:	d879      	bhi.n	808d178 <_tzset_unlocked_r+0x2c8>
 808d084:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808d088:	1e53      	subs	r3, r2, #1
 808d08a:	2b04      	cmp	r3, #4
 808d08c:	d874      	bhi.n	808d178 <_tzset_unlocked_r+0x2c8>
 808d08e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808d092:	2b06      	cmp	r3, #6
 808d094:	d870      	bhi.n	808d178 <_tzset_unlocked_r+0x2c8>
 808d096:	f887 8008 	strb.w	r8, [r7, #8]
 808d09a:	60f9      	str	r1, [r7, #12]
 808d09c:	613a      	str	r2, [r7, #16]
 808d09e:	617b      	str	r3, [r7, #20]
 808d0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d0a2:	eb05 0803 	add.w	r8, r5, r3
 808d0a6:	e02a      	b.n	808d0fe <_tzset_unlocked_r+0x24e>
 808d0a8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808d0ac:	bf06      	itte	eq
 808d0ae:	4643      	moveq	r3, r8
 808d0b0:	3501      	addeq	r5, #1
 808d0b2:	2344      	movne	r3, #68	; 0x44
 808d0b4:	220a      	movs	r2, #10
 808d0b6:	a90b      	add	r1, sp, #44	; 0x2c
 808d0b8:	4628      	mov	r0, r5
 808d0ba:	9305      	str	r3, [sp, #20]
 808d0bc:	f7ff fe2e 	bl	808cd1c <strtoul>
 808d0c0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808d0c4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808d0c8:	4545      	cmp	r5, r8
 808d0ca:	9b05      	ldr	r3, [sp, #20]
 808d0cc:	d114      	bne.n	808d0f8 <_tzset_unlocked_r+0x248>
 808d0ce:	234d      	movs	r3, #77	; 0x4d
 808d0d0:	f1b9 0f00 	cmp.w	r9, #0
 808d0d4:	d107      	bne.n	808d0e6 <_tzset_unlocked_r+0x236>
 808d0d6:	7223      	strb	r3, [r4, #8]
 808d0d8:	2303      	movs	r3, #3
 808d0da:	60e3      	str	r3, [r4, #12]
 808d0dc:	2302      	movs	r3, #2
 808d0de:	6123      	str	r3, [r4, #16]
 808d0e0:	f8c4 9014 	str.w	r9, [r4, #20]
 808d0e4:	e00b      	b.n	808d0fe <_tzset_unlocked_r+0x24e>
 808d0e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808d0ea:	230b      	movs	r3, #11
 808d0ec:	62a3      	str	r3, [r4, #40]	; 0x28
 808d0ee:	2301      	movs	r3, #1
 808d0f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 808d0f2:	2300      	movs	r3, #0
 808d0f4:	6323      	str	r3, [r4, #48]	; 0x30
 808d0f6:	e002      	b.n	808d0fe <_tzset_unlocked_r+0x24e>
 808d0f8:	b280      	uxth	r0, r0
 808d0fa:	723b      	strb	r3, [r7, #8]
 808d0fc:	6178      	str	r0, [r7, #20]
 808d0fe:	2302      	movs	r3, #2
 808d100:	f8ad 301c 	strh.w	r3, [sp, #28]
 808d104:	2300      	movs	r3, #0
 808d106:	f8ad 301e 	strh.w	r3, [sp, #30]
 808d10a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808d10e:	930a      	str	r3, [sp, #40]	; 0x28
 808d110:	f898 3000 	ldrb.w	r3, [r8]
 808d114:	2b2f      	cmp	r3, #47	; 0x2f
 808d116:	d10b      	bne.n	808d130 <_tzset_unlocked_r+0x280>
 808d118:	9603      	str	r6, [sp, #12]
 808d11a:	f8cd a008 	str.w	sl, [sp, #8]
 808d11e:	9601      	str	r6, [sp, #4]
 808d120:	f8cd b000 	str.w	fp, [sp]
 808d124:	4633      	mov	r3, r6
 808d126:	aa07      	add	r2, sp, #28
 808d128:	491f      	ldr	r1, [pc, #124]	; (808d1a8 <_tzset_unlocked_r+0x2f8>)
 808d12a:	4640      	mov	r0, r8
 808d12c:	f7f8 fcc2 	bl	8085ab4 <siscanf>
 808d130:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808d134:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808d138:	213c      	movs	r1, #60	; 0x3c
 808d13a:	fb01 3302 	mla	r3, r1, r2, r3
 808d13e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808d142:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808d146:	fb01 3302 	mla	r3, r1, r2, r3
 808d14a:	61bb      	str	r3, [r7, #24]
 808d14c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808d14e:	f109 0901 	add.w	r9, r9, #1
 808d152:	f1b9 0f02 	cmp.w	r9, #2
 808d156:	4445      	add	r5, r8
 808d158:	f107 071c 	add.w	r7, r7, #28
 808d15c:	f47f af74 	bne.w	808d048 <_tzset_unlocked_r+0x198>
 808d160:	6860      	ldr	r0, [r4, #4]
 808d162:	f7ff fdf5 	bl	808cd50 <__tzcalc_limits>
 808d166:	6a22      	ldr	r2, [r4, #32]
 808d168:	4b07      	ldr	r3, [pc, #28]	; (808d188 <_tzset_unlocked_r+0x2d8>)
 808d16a:	601a      	str	r2, [r3, #0]
 808d16c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808d16e:	1a9b      	subs	r3, r3, r2
 808d170:	4a07      	ldr	r2, [pc, #28]	; (808d190 <_tzset_unlocked_r+0x2e0>)
 808d172:	bf18      	it	ne
 808d174:	2301      	movne	r3, #1
 808d176:	6013      	str	r3, [r2, #0]
 808d178:	b00d      	add	sp, #52	; 0x34
 808d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d17e:	bf00      	nop
 808d180:	0808f64c 	.word	0x0808f64c
 808d184:	200010d4 	.word	0x200010d4
 808d188:	200010dc 	.word	0x200010dc
 808d18c:	0808f64f 	.word	0x0808f64f
 808d190:	200010d8 	.word	0x200010d8
 808d194:	200000f8 	.word	0x200000f8
 808d198:	200010c7 	.word	0x200010c7
 808d19c:	0808f653 	.word	0x0808f653
 808d1a0:	0808f676 	.word	0x0808f676
 808d1a4:	0808f662 	.word	0x0808f662
 808d1a8:	0808f675 	.word	0x0808f675
 808d1ac:	200010bc 	.word	0x200010bc

0808d1b0 <abs>:
 808d1b0:	2800      	cmp	r0, #0
 808d1b2:	bfb8      	it	lt
 808d1b4:	4240      	neglt	r0, r0
 808d1b6:	4770      	bx	lr

0808d1b8 <rshift>:
 808d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d1ba:	6906      	ldr	r6, [r0, #16]
 808d1bc:	114b      	asrs	r3, r1, #5
 808d1be:	42b3      	cmp	r3, r6
 808d1c0:	f100 0514 	add.w	r5, r0, #20
 808d1c4:	da27      	bge.n	808d216 <rshift+0x5e>
 808d1c6:	f011 011f 	ands.w	r1, r1, #31
 808d1ca:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808d1ce:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808d1d2:	d101      	bne.n	808d1d8 <rshift+0x20>
 808d1d4:	4629      	mov	r1, r5
 808d1d6:	e016      	b.n	808d206 <rshift+0x4e>
 808d1d8:	1d14      	adds	r4, r2, #4
 808d1da:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808d1de:	462b      	mov	r3, r5
 808d1e0:	f1c1 0e20 	rsb	lr, r1, #32
 808d1e4:	40ca      	lsrs	r2, r1
 808d1e6:	42b4      	cmp	r4, r6
 808d1e8:	d209      	bcs.n	808d1fe <rshift+0x46>
 808d1ea:	6827      	ldr	r7, [r4, #0]
 808d1ec:	fa07 f70e 	lsl.w	r7, r7, lr
 808d1f0:	433a      	orrs	r2, r7
 808d1f2:	f843 2b04 	str.w	r2, [r3], #4
 808d1f6:	f854 2b04 	ldr.w	r2, [r4], #4
 808d1fa:	40ca      	lsrs	r2, r1
 808d1fc:	e7f3      	b.n	808d1e6 <rshift+0x2e>
 808d1fe:	601a      	str	r2, [r3, #0]
 808d200:	b152      	cbz	r2, 808d218 <rshift+0x60>
 808d202:	3304      	adds	r3, #4
 808d204:	e008      	b.n	808d218 <rshift+0x60>
 808d206:	42b2      	cmp	r2, r6
 808d208:	460b      	mov	r3, r1
 808d20a:	d205      	bcs.n	808d218 <rshift+0x60>
 808d20c:	f852 3b04 	ldr.w	r3, [r2], #4
 808d210:	f841 3b04 	str.w	r3, [r1], #4
 808d214:	e7f7      	b.n	808d206 <rshift+0x4e>
 808d216:	462b      	mov	r3, r5
 808d218:	1b5b      	subs	r3, r3, r5
 808d21a:	109b      	asrs	r3, r3, #2
 808d21c:	6103      	str	r3, [r0, #16]
 808d21e:	b903      	cbnz	r3, 808d222 <rshift+0x6a>
 808d220:	6143      	str	r3, [r0, #20]
 808d222:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808d224 <__hexdig_fun>:
 808d224:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808d228:	2b09      	cmp	r3, #9
 808d22a:	d801      	bhi.n	808d230 <__hexdig_fun+0xc>
 808d22c:	3820      	subs	r0, #32
 808d22e:	e00a      	b.n	808d246 <__hexdig_fun+0x22>
 808d230:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808d234:	2b05      	cmp	r3, #5
 808d236:	d801      	bhi.n	808d23c <__hexdig_fun+0x18>
 808d238:	3847      	subs	r0, #71	; 0x47
 808d23a:	e004      	b.n	808d246 <__hexdig_fun+0x22>
 808d23c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808d240:	2b05      	cmp	r3, #5
 808d242:	d802      	bhi.n	808d24a <__hexdig_fun+0x26>
 808d244:	3827      	subs	r0, #39	; 0x27
 808d246:	b2c0      	uxtb	r0, r0
 808d248:	4770      	bx	lr
 808d24a:	2000      	movs	r0, #0
 808d24c:	4770      	bx	lr

0808d24e <__gethex>:
 808d24e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d252:	b08b      	sub	sp, #44	; 0x2c
 808d254:	468a      	mov	sl, r1
 808d256:	4690      	mov	r8, r2
 808d258:	9306      	str	r3, [sp, #24]
 808d25a:	9002      	str	r0, [sp, #8]
 808d25c:	f7fe f806 	bl	808b26c <_localeconv_r>
 808d260:	6803      	ldr	r3, [r0, #0]
 808d262:	f04f 0b00 	mov.w	fp, #0
 808d266:	4618      	mov	r0, r3
 808d268:	9303      	str	r3, [sp, #12]
 808d26a:	f7fe fdc3 	bl	808bdf4 <strlen>
 808d26e:	9b03      	ldr	r3, [sp, #12]
 808d270:	9001      	str	r0, [sp, #4]
 808d272:	4403      	add	r3, r0
 808d274:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808d278:	9307      	str	r3, [sp, #28]
 808d27a:	f8da 3000 	ldr.w	r3, [sl]
 808d27e:	3302      	adds	r3, #2
 808d280:	461f      	mov	r7, r3
 808d282:	f813 0b01 	ldrb.w	r0, [r3], #1
 808d286:	2830      	cmp	r0, #48	; 0x30
 808d288:	d102      	bne.n	808d290 <__gethex+0x42>
 808d28a:	f10b 0b01 	add.w	fp, fp, #1
 808d28e:	e7f7      	b.n	808d280 <__gethex+0x32>
 808d290:	f7ff ffc8 	bl	808d224 <__hexdig_fun>
 808d294:	4604      	mov	r4, r0
 808d296:	b9e0      	cbnz	r0, 808d2d2 <__gethex+0x84>
 808d298:	9a01      	ldr	r2, [sp, #4]
 808d29a:	9903      	ldr	r1, [sp, #12]
 808d29c:	4638      	mov	r0, r7
 808d29e:	f7fe fdb1 	bl	808be04 <strncmp>
 808d2a2:	2800      	cmp	r0, #0
 808d2a4:	d134      	bne.n	808d310 <__gethex+0xc2>
 808d2a6:	9b01      	ldr	r3, [sp, #4]
 808d2a8:	5cf8      	ldrb	r0, [r7, r3]
 808d2aa:	18fe      	adds	r6, r7, r3
 808d2ac:	f7ff ffba 	bl	808d224 <__hexdig_fun>
 808d2b0:	b380      	cbz	r0, 808d314 <__gethex+0xc6>
 808d2b2:	4633      	mov	r3, r6
 808d2b4:	7818      	ldrb	r0, [r3, #0]
 808d2b6:	461f      	mov	r7, r3
 808d2b8:	2830      	cmp	r0, #48	; 0x30
 808d2ba:	f103 0301 	add.w	r3, r3, #1
 808d2be:	d0f9      	beq.n	808d2b4 <__gethex+0x66>
 808d2c0:	f7ff ffb0 	bl	808d224 <__hexdig_fun>
 808d2c4:	fab0 f580 	clz	r5, r0
 808d2c8:	4634      	mov	r4, r6
 808d2ca:	096d      	lsrs	r5, r5, #5
 808d2cc:	f04f 0b01 	mov.w	fp, #1
 808d2d0:	e001      	b.n	808d2d6 <__gethex+0x88>
 808d2d2:	2500      	movs	r5, #0
 808d2d4:	462c      	mov	r4, r5
 808d2d6:	463a      	mov	r2, r7
 808d2d8:	4616      	mov	r6, r2
 808d2da:	7830      	ldrb	r0, [r6, #0]
 808d2dc:	3201      	adds	r2, #1
 808d2de:	f7ff ffa1 	bl	808d224 <__hexdig_fun>
 808d2e2:	2800      	cmp	r0, #0
 808d2e4:	d1f8      	bne.n	808d2d8 <__gethex+0x8a>
 808d2e6:	9a01      	ldr	r2, [sp, #4]
 808d2e8:	9903      	ldr	r1, [sp, #12]
 808d2ea:	4630      	mov	r0, r6
 808d2ec:	f7fe fd8a 	bl	808be04 <strncmp>
 808d2f0:	b950      	cbnz	r0, 808d308 <__gethex+0xba>
 808d2f2:	b954      	cbnz	r4, 808d30a <__gethex+0xbc>
 808d2f4:	9b01      	ldr	r3, [sp, #4]
 808d2f6:	18f4      	adds	r4, r6, r3
 808d2f8:	4622      	mov	r2, r4
 808d2fa:	4616      	mov	r6, r2
 808d2fc:	7830      	ldrb	r0, [r6, #0]
 808d2fe:	3201      	adds	r2, #1
 808d300:	f7ff ff90 	bl	808d224 <__hexdig_fun>
 808d304:	2800      	cmp	r0, #0
 808d306:	d1f8      	bne.n	808d2fa <__gethex+0xac>
 808d308:	b134      	cbz	r4, 808d318 <__gethex+0xca>
 808d30a:	1ba4      	subs	r4, r4, r6
 808d30c:	00a4      	lsls	r4, r4, #2
 808d30e:	e003      	b.n	808d318 <__gethex+0xca>
 808d310:	463e      	mov	r6, r7
 808d312:	e000      	b.n	808d316 <__gethex+0xc8>
 808d314:	4604      	mov	r4, r0
 808d316:	2501      	movs	r5, #1
 808d318:	7833      	ldrb	r3, [r6, #0]
 808d31a:	2b50      	cmp	r3, #80	; 0x50
 808d31c:	d001      	beq.n	808d322 <__gethex+0xd4>
 808d31e:	2b70      	cmp	r3, #112	; 0x70
 808d320:	d12a      	bne.n	808d378 <__gethex+0x12a>
 808d322:	7873      	ldrb	r3, [r6, #1]
 808d324:	2b2b      	cmp	r3, #43	; 0x2b
 808d326:	d008      	beq.n	808d33a <__gethex+0xec>
 808d328:	2b2d      	cmp	r3, #45	; 0x2d
 808d32a:	d003      	beq.n	808d334 <__gethex+0xe6>
 808d32c:	1c71      	adds	r1, r6, #1
 808d32e:	f04f 0900 	mov.w	r9, #0
 808d332:	e005      	b.n	808d340 <__gethex+0xf2>
 808d334:	f04f 0901 	mov.w	r9, #1
 808d338:	e001      	b.n	808d33e <__gethex+0xf0>
 808d33a:	f04f 0900 	mov.w	r9, #0
 808d33e:	1cb1      	adds	r1, r6, #2
 808d340:	7808      	ldrb	r0, [r1, #0]
 808d342:	f7ff ff6f 	bl	808d224 <__hexdig_fun>
 808d346:	1e43      	subs	r3, r0, #1
 808d348:	b2db      	uxtb	r3, r3
 808d34a:	2b18      	cmp	r3, #24
 808d34c:	d814      	bhi.n	808d378 <__gethex+0x12a>
 808d34e:	f1a0 0210 	sub.w	r2, r0, #16
 808d352:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808d356:	f7ff ff65 	bl	808d224 <__hexdig_fun>
 808d35a:	1e43      	subs	r3, r0, #1
 808d35c:	b2db      	uxtb	r3, r3
 808d35e:	2b18      	cmp	r3, #24
 808d360:	d804      	bhi.n	808d36c <__gethex+0x11e>
 808d362:	230a      	movs	r3, #10
 808d364:	fb03 0202 	mla	r2, r3, r2, r0
 808d368:	3a10      	subs	r2, #16
 808d36a:	e7f2      	b.n	808d352 <__gethex+0x104>
 808d36c:	f1b9 0f00 	cmp.w	r9, #0
 808d370:	d000      	beq.n	808d374 <__gethex+0x126>
 808d372:	4252      	negs	r2, r2
 808d374:	4414      	add	r4, r2
 808d376:	e000      	b.n	808d37a <__gethex+0x12c>
 808d378:	4631      	mov	r1, r6
 808d37a:	f8ca 1000 	str.w	r1, [sl]
 808d37e:	b12d      	cbz	r5, 808d38c <__gethex+0x13e>
 808d380:	f1bb 0f00 	cmp.w	fp, #0
 808d384:	bf14      	ite	ne
 808d386:	2000      	movne	r0, #0
 808d388:	2006      	moveq	r0, #6
 808d38a:	e17c      	b.n	808d686 <__gethex+0x438>
 808d38c:	4629      	mov	r1, r5
 808d38e:	1bf3      	subs	r3, r6, r7
 808d390:	3b01      	subs	r3, #1
 808d392:	2b07      	cmp	r3, #7
 808d394:	dd02      	ble.n	808d39c <__gethex+0x14e>
 808d396:	3101      	adds	r1, #1
 808d398:	105b      	asrs	r3, r3, #1
 808d39a:	e7fa      	b.n	808d392 <__gethex+0x144>
 808d39c:	9802      	ldr	r0, [sp, #8]
 808d39e:	f000 fb0b 	bl	808d9b8 <_Balloc>
 808d3a2:	f04f 0900 	mov.w	r9, #0
 808d3a6:	4605      	mov	r5, r0
 808d3a8:	46cb      	mov	fp, r9
 808d3aa:	9b01      	ldr	r3, [sp, #4]
 808d3ac:	f100 0a14 	add.w	sl, r0, #20
 808d3b0:	f1c3 0301 	rsb	r3, r3, #1
 808d3b4:	f8cd a010 	str.w	sl, [sp, #16]
 808d3b8:	9308      	str	r3, [sp, #32]
 808d3ba:	42b7      	cmp	r7, r6
 808d3bc:	d22f      	bcs.n	808d41e <__gethex+0x1d0>
 808d3be:	1e73      	subs	r3, r6, #1
 808d3c0:	9305      	str	r3, [sp, #20]
 808d3c2:	9a07      	ldr	r2, [sp, #28]
 808d3c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808d3c8:	4293      	cmp	r3, r2
 808d3ca:	d00b      	beq.n	808d3e4 <__gethex+0x196>
 808d3cc:	f1bb 0f20 	cmp.w	fp, #32
 808d3d0:	d116      	bne.n	808d400 <__gethex+0x1b2>
 808d3d2:	9b04      	ldr	r3, [sp, #16]
 808d3d4:	f8c3 9000 	str.w	r9, [r3]
 808d3d8:	3304      	adds	r3, #4
 808d3da:	f04f 0900 	mov.w	r9, #0
 808d3de:	9304      	str	r3, [sp, #16]
 808d3e0:	46cb      	mov	fp, r9
 808d3e2:	e00d      	b.n	808d400 <__gethex+0x1b2>
 808d3e4:	9b05      	ldr	r3, [sp, #20]
 808d3e6:	9a08      	ldr	r2, [sp, #32]
 808d3e8:	4413      	add	r3, r2
 808d3ea:	429f      	cmp	r7, r3
 808d3ec:	d8ee      	bhi.n	808d3cc <__gethex+0x17e>
 808d3ee:	4618      	mov	r0, r3
 808d3f0:	9a01      	ldr	r2, [sp, #4]
 808d3f2:	9903      	ldr	r1, [sp, #12]
 808d3f4:	9309      	str	r3, [sp, #36]	; 0x24
 808d3f6:	f7fe fd05 	bl	808be04 <strncmp>
 808d3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d3fc:	b168      	cbz	r0, 808d41a <__gethex+0x1cc>
 808d3fe:	e7e5      	b.n	808d3cc <__gethex+0x17e>
 808d400:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808d404:	f7ff ff0e 	bl	808d224 <__hexdig_fun>
 808d408:	f000 000f 	and.w	r0, r0, #15
 808d40c:	fa00 f00b 	lsl.w	r0, r0, fp
 808d410:	9b05      	ldr	r3, [sp, #20]
 808d412:	ea49 0900 	orr.w	r9, r9, r0
 808d416:	f10b 0b04 	add.w	fp, fp, #4
 808d41a:	461e      	mov	r6, r3
 808d41c:	e7cd      	b.n	808d3ba <__gethex+0x16c>
 808d41e:	9804      	ldr	r0, [sp, #16]
 808d420:	f840 9b04 	str.w	r9, [r0], #4
 808d424:	ebca 0000 	rsb	r0, sl, r0
 808d428:	1080      	asrs	r0, r0, #2
 808d42a:	6128      	str	r0, [r5, #16]
 808d42c:	0147      	lsls	r7, r0, #5
 808d42e:	4648      	mov	r0, r9
 808d430:	f000 fb87 	bl	808db42 <__hi0bits>
 808d434:	f8d8 6000 	ldr.w	r6, [r8]
 808d438:	1a38      	subs	r0, r7, r0
 808d43a:	42b0      	cmp	r0, r6
 808d43c:	dd26      	ble.n	808d48c <__gethex+0x23e>
 808d43e:	1b87      	subs	r7, r0, r6
 808d440:	4639      	mov	r1, r7
 808d442:	4628      	mov	r0, r5
 808d444:	f000 fe7f 	bl	808e146 <__any_on>
 808d448:	b1c8      	cbz	r0, 808d47e <__gethex+0x230>
 808d44a:	1e7b      	subs	r3, r7, #1
 808d44c:	1159      	asrs	r1, r3, #5
 808d44e:	f003 021f 	and.w	r2, r3, #31
 808d452:	f04f 0901 	mov.w	r9, #1
 808d456:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d45a:	fa09 f202 	lsl.w	r2, r9, r2
 808d45e:	420a      	tst	r2, r1
 808d460:	d00e      	beq.n	808d480 <__gethex+0x232>
 808d462:	454b      	cmp	r3, r9
 808d464:	dc02      	bgt.n	808d46c <__gethex+0x21e>
 808d466:	f04f 0902 	mov.w	r9, #2
 808d46a:	e009      	b.n	808d480 <__gethex+0x232>
 808d46c:	1eb9      	subs	r1, r7, #2
 808d46e:	4628      	mov	r0, r5
 808d470:	f000 fe69 	bl	808e146 <__any_on>
 808d474:	2800      	cmp	r0, #0
 808d476:	d0f6      	beq.n	808d466 <__gethex+0x218>
 808d478:	f04f 0903 	mov.w	r9, #3
 808d47c:	e000      	b.n	808d480 <__gethex+0x232>
 808d47e:	4681      	mov	r9, r0
 808d480:	4639      	mov	r1, r7
 808d482:	4628      	mov	r0, r5
 808d484:	f7ff fe98 	bl	808d1b8 <rshift>
 808d488:	443c      	add	r4, r7
 808d48a:	e00c      	b.n	808d4a6 <__gethex+0x258>
 808d48c:	da09      	bge.n	808d4a2 <__gethex+0x254>
 808d48e:	1a37      	subs	r7, r6, r0
 808d490:	4629      	mov	r1, r5
 808d492:	463a      	mov	r2, r7
 808d494:	9802      	ldr	r0, [sp, #8]
 808d496:	f000 fc89 	bl	808ddac <__lshift>
 808d49a:	4605      	mov	r5, r0
 808d49c:	1be4      	subs	r4, r4, r7
 808d49e:	f100 0a14 	add.w	sl, r0, #20
 808d4a2:	f04f 0900 	mov.w	r9, #0
 808d4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d4aa:	429c      	cmp	r4, r3
 808d4ac:	dd08      	ble.n	808d4c0 <__gethex+0x272>
 808d4ae:	9802      	ldr	r0, [sp, #8]
 808d4b0:	4629      	mov	r1, r5
 808d4b2:	f000 fab6 	bl	808da22 <_Bfree>
 808d4b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d4b8:	2300      	movs	r3, #0
 808d4ba:	6013      	str	r3, [r2, #0]
 808d4bc:	20a3      	movs	r0, #163	; 0xa3
 808d4be:	e0e2      	b.n	808d686 <__gethex+0x438>
 808d4c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808d4c4:	4284      	cmp	r4, r0
 808d4c6:	da53      	bge.n	808d570 <__gethex+0x322>
 808d4c8:	1b04      	subs	r4, r0, r4
 808d4ca:	42a6      	cmp	r6, r4
 808d4cc:	dc2e      	bgt.n	808d52c <__gethex+0x2de>
 808d4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d4d2:	2b02      	cmp	r3, #2
 808d4d4:	d01a      	beq.n	808d50c <__gethex+0x2be>
 808d4d6:	2b03      	cmp	r3, #3
 808d4d8:	d01c      	beq.n	808d514 <__gethex+0x2c6>
 808d4da:	2b01      	cmp	r3, #1
 808d4dc:	d11d      	bne.n	808d51a <__gethex+0x2cc>
 808d4de:	42a6      	cmp	r6, r4
 808d4e0:	d11b      	bne.n	808d51a <__gethex+0x2cc>
 808d4e2:	2e01      	cmp	r6, #1
 808d4e4:	dc0b      	bgt.n	808d4fe <__gethex+0x2b0>
 808d4e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808d4ea:	9a06      	ldr	r2, [sp, #24]
 808d4ec:	2062      	movs	r0, #98	; 0x62
 808d4ee:	6013      	str	r3, [r2, #0]
 808d4f0:	2301      	movs	r3, #1
 808d4f2:	612b      	str	r3, [r5, #16]
 808d4f4:	f8ca 3000 	str.w	r3, [sl]
 808d4f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d4fa:	601d      	str	r5, [r3, #0]
 808d4fc:	e0c3      	b.n	808d686 <__gethex+0x438>
 808d4fe:	1e71      	subs	r1, r6, #1
 808d500:	4628      	mov	r0, r5
 808d502:	f000 fe20 	bl	808e146 <__any_on>
 808d506:	2800      	cmp	r0, #0
 808d508:	d1ed      	bne.n	808d4e6 <__gethex+0x298>
 808d50a:	e006      	b.n	808d51a <__gethex+0x2cc>
 808d50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d50e:	2b00      	cmp	r3, #0
 808d510:	d0e9      	beq.n	808d4e6 <__gethex+0x298>
 808d512:	e002      	b.n	808d51a <__gethex+0x2cc>
 808d514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d516:	2b00      	cmp	r3, #0
 808d518:	d1e5      	bne.n	808d4e6 <__gethex+0x298>
 808d51a:	9802      	ldr	r0, [sp, #8]
 808d51c:	4629      	mov	r1, r5
 808d51e:	f000 fa80 	bl	808da22 <_Bfree>
 808d522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d524:	2300      	movs	r3, #0
 808d526:	6013      	str	r3, [r2, #0]
 808d528:	2050      	movs	r0, #80	; 0x50
 808d52a:	e0ac      	b.n	808d686 <__gethex+0x438>
 808d52c:	1e67      	subs	r7, r4, #1
 808d52e:	f1b9 0f00 	cmp.w	r9, #0
 808d532:	d106      	bne.n	808d542 <__gethex+0x2f4>
 808d534:	b13f      	cbz	r7, 808d546 <__gethex+0x2f8>
 808d536:	4639      	mov	r1, r7
 808d538:	4628      	mov	r0, r5
 808d53a:	f000 fe04 	bl	808e146 <__any_on>
 808d53e:	4681      	mov	r9, r0
 808d540:	e001      	b.n	808d546 <__gethex+0x2f8>
 808d542:	f04f 0901 	mov.w	r9, #1
 808d546:	117a      	asrs	r2, r7, #5
 808d548:	2301      	movs	r3, #1
 808d54a:	f007 071f 	and.w	r7, r7, #31
 808d54e:	fa03 f707 	lsl.w	r7, r3, r7
 808d552:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808d556:	4621      	mov	r1, r4
 808d558:	421f      	tst	r7, r3
 808d55a:	4628      	mov	r0, r5
 808d55c:	bf18      	it	ne
 808d55e:	f049 0902 	orrne.w	r9, r9, #2
 808d562:	1b36      	subs	r6, r6, r4
 808d564:	f7ff fe28 	bl	808d1b8 <rshift>
 808d568:	2702      	movs	r7, #2
 808d56a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808d56e:	e000      	b.n	808d572 <__gethex+0x324>
 808d570:	2701      	movs	r7, #1
 808d572:	f1b9 0f00 	cmp.w	r9, #0
 808d576:	f000 8081 	beq.w	808d67c <__gethex+0x42e>
 808d57a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d57e:	2b02      	cmp	r3, #2
 808d580:	d00e      	beq.n	808d5a0 <__gethex+0x352>
 808d582:	2b03      	cmp	r3, #3
 808d584:	d010      	beq.n	808d5a8 <__gethex+0x35a>
 808d586:	2b01      	cmp	r3, #1
 808d588:	d176      	bne.n	808d678 <__gethex+0x42a>
 808d58a:	f019 0f02 	tst.w	r9, #2
 808d58e:	d073      	beq.n	808d678 <__gethex+0x42a>
 808d590:	f8da 0000 	ldr.w	r0, [sl]
 808d594:	ea49 0900 	orr.w	r9, r9, r0
 808d598:	f019 0f01 	tst.w	r9, #1
 808d59c:	d107      	bne.n	808d5ae <__gethex+0x360>
 808d59e:	e06b      	b.n	808d678 <__gethex+0x42a>
 808d5a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d5a2:	f1c3 0301 	rsb	r3, r3, #1
 808d5a6:	9315      	str	r3, [sp, #84]	; 0x54
 808d5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d5aa:	2b00      	cmp	r3, #0
 808d5ac:	d064      	beq.n	808d678 <__gethex+0x42a>
 808d5ae:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808d5b2:	f105 0314 	add.w	r3, r5, #20
 808d5b6:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808d5ba:	eb03 0109 	add.w	r1, r3, r9
 808d5be:	2000      	movs	r0, #0
 808d5c0:	681a      	ldr	r2, [r3, #0]
 808d5c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 808d5c6:	d002      	beq.n	808d5ce <__gethex+0x380>
 808d5c8:	3201      	adds	r2, #1
 808d5ca:	601a      	str	r2, [r3, #0]
 808d5cc:	e020      	b.n	808d610 <__gethex+0x3c2>
 808d5ce:	f843 0b04 	str.w	r0, [r3], #4
 808d5d2:	4299      	cmp	r1, r3
 808d5d4:	d8f4      	bhi.n	808d5c0 <__gethex+0x372>
 808d5d6:	68ab      	ldr	r3, [r5, #8]
 808d5d8:	459a      	cmp	sl, r3
 808d5da:	db12      	blt.n	808d602 <__gethex+0x3b4>
 808d5dc:	6869      	ldr	r1, [r5, #4]
 808d5de:	9802      	ldr	r0, [sp, #8]
 808d5e0:	3101      	adds	r1, #1
 808d5e2:	f000 f9e9 	bl	808d9b8 <_Balloc>
 808d5e6:	4683      	mov	fp, r0
 808d5e8:	692a      	ldr	r2, [r5, #16]
 808d5ea:	f105 010c 	add.w	r1, r5, #12
 808d5ee:	3202      	adds	r2, #2
 808d5f0:	0092      	lsls	r2, r2, #2
 808d5f2:	300c      	adds	r0, #12
 808d5f4:	f7fd fe4d 	bl	808b292 <memcpy>
 808d5f8:	4629      	mov	r1, r5
 808d5fa:	9802      	ldr	r0, [sp, #8]
 808d5fc:	f000 fa11 	bl	808da22 <_Bfree>
 808d600:	465d      	mov	r5, fp
 808d602:	692b      	ldr	r3, [r5, #16]
 808d604:	1c5a      	adds	r2, r3, #1
 808d606:	612a      	str	r2, [r5, #16]
 808d608:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808d60c:	2201      	movs	r2, #1
 808d60e:	615a      	str	r2, [r3, #20]
 808d610:	2f02      	cmp	r7, #2
 808d612:	f105 0214 	add.w	r2, r5, #20
 808d616:	d111      	bne.n	808d63c <__gethex+0x3ee>
 808d618:	f8d8 3000 	ldr.w	r3, [r8]
 808d61c:	3b01      	subs	r3, #1
 808d61e:	429e      	cmp	r6, r3
 808d620:	d127      	bne.n	808d672 <__gethex+0x424>
 808d622:	1171      	asrs	r1, r6, #5
 808d624:	2301      	movs	r3, #1
 808d626:	f006 061f 	and.w	r6, r6, #31
 808d62a:	fa03 f606 	lsl.w	r6, r3, r6
 808d62e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808d632:	421e      	tst	r6, r3
 808d634:	bf0c      	ite	eq
 808d636:	2702      	moveq	r7, #2
 808d638:	2701      	movne	r7, #1
 808d63a:	e01a      	b.n	808d672 <__gethex+0x424>
 808d63c:	692b      	ldr	r3, [r5, #16]
 808d63e:	459a      	cmp	sl, r3
 808d640:	da0a      	bge.n	808d658 <__gethex+0x40a>
 808d642:	2101      	movs	r1, #1
 808d644:	4628      	mov	r0, r5
 808d646:	f7ff fdb7 	bl	808d1b8 <rshift>
 808d64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d64e:	3401      	adds	r4, #1
 808d650:	429c      	cmp	r4, r3
 808d652:	f73f af2c 	bgt.w	808d4ae <__gethex+0x260>
 808d656:	e00b      	b.n	808d670 <__gethex+0x422>
 808d658:	f016 061f 	ands.w	r6, r6, #31
 808d65c:	d008      	beq.n	808d670 <__gethex+0x422>
 808d65e:	4491      	add	r9, r2
 808d660:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808d664:	f000 fa6d 	bl	808db42 <__hi0bits>
 808d668:	f1c6 0620 	rsb	r6, r6, #32
 808d66c:	42b0      	cmp	r0, r6
 808d66e:	dbe8      	blt.n	808d642 <__gethex+0x3f4>
 808d670:	2701      	movs	r7, #1
 808d672:	f047 0720 	orr.w	r7, r7, #32
 808d676:	e001      	b.n	808d67c <__gethex+0x42e>
 808d678:	f047 0710 	orr.w	r7, r7, #16
 808d67c:	4638      	mov	r0, r7
 808d67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d680:	601d      	str	r5, [r3, #0]
 808d682:	9b06      	ldr	r3, [sp, #24]
 808d684:	601c      	str	r4, [r3, #0]
 808d686:	b00b      	add	sp, #44	; 0x2c
 808d688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d68c <L_shift>:
 808d68c:	f1c2 0208 	rsb	r2, r2, #8
 808d690:	0092      	lsls	r2, r2, #2
 808d692:	b570      	push	{r4, r5, r6, lr}
 808d694:	f1c2 0620 	rsb	r6, r2, #32
 808d698:	6843      	ldr	r3, [r0, #4]
 808d69a:	6805      	ldr	r5, [r0, #0]
 808d69c:	fa03 f406 	lsl.w	r4, r3, r6
 808d6a0:	432c      	orrs	r4, r5
 808d6a2:	40d3      	lsrs	r3, r2
 808d6a4:	6004      	str	r4, [r0, #0]
 808d6a6:	f840 3f04 	str.w	r3, [r0, #4]!
 808d6aa:	4288      	cmp	r0, r1
 808d6ac:	d3f4      	bcc.n	808d698 <L_shift+0xc>
 808d6ae:	bd70      	pop	{r4, r5, r6, pc}

0808d6b0 <__match>:
 808d6b0:	b530      	push	{r4, r5, lr}
 808d6b2:	6803      	ldr	r3, [r0, #0]
 808d6b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d6b8:	3301      	adds	r3, #1
 808d6ba:	b14c      	cbz	r4, 808d6d0 <__match+0x20>
 808d6bc:	781a      	ldrb	r2, [r3, #0]
 808d6be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808d6c2:	2d19      	cmp	r5, #25
 808d6c4:	bf98      	it	ls
 808d6c6:	3220      	addls	r2, #32
 808d6c8:	42a2      	cmp	r2, r4
 808d6ca:	d0f3      	beq.n	808d6b4 <__match+0x4>
 808d6cc:	2000      	movs	r0, #0
 808d6ce:	bd30      	pop	{r4, r5, pc}
 808d6d0:	6003      	str	r3, [r0, #0]
 808d6d2:	2001      	movs	r0, #1
 808d6d4:	bd30      	pop	{r4, r5, pc}

0808d6d6 <__hexnan>:
 808d6d6:	680b      	ldr	r3, [r1, #0]
 808d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d6dc:	115e      	asrs	r6, r3, #5
 808d6de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808d6e2:	f013 031f 	ands.w	r3, r3, #31
 808d6e6:	bf18      	it	ne
 808d6e8:	3604      	addne	r6, #4
 808d6ea:	1f35      	subs	r5, r6, #4
 808d6ec:	4617      	mov	r7, r2
 808d6ee:	2200      	movs	r2, #0
 808d6f0:	4682      	mov	sl, r0
 808d6f2:	46a8      	mov	r8, r5
 808d6f4:	462c      	mov	r4, r5
 808d6f6:	4691      	mov	r9, r2
 808d6f8:	b085      	sub	sp, #20
 808d6fa:	f8d0 b000 	ldr.w	fp, [r0]
 808d6fe:	9301      	str	r3, [sp, #4]
 808d700:	f846 2c04 	str.w	r2, [r6, #-4]
 808d704:	9200      	str	r2, [sp, #0]
 808d706:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808d70a:	2900      	cmp	r1, #0
 808d70c:	d03c      	beq.n	808d788 <__hexnan+0xb2>
 808d70e:	4608      	mov	r0, r1
 808d710:	9203      	str	r2, [sp, #12]
 808d712:	9102      	str	r1, [sp, #8]
 808d714:	f7ff fd86 	bl	808d224 <__hexdig_fun>
 808d718:	9a03      	ldr	r2, [sp, #12]
 808d71a:	bb00      	cbnz	r0, 808d75e <__hexnan+0x88>
 808d71c:	9902      	ldr	r1, [sp, #8]
 808d71e:	2920      	cmp	r1, #32
 808d720:	d816      	bhi.n	808d750 <__hexnan+0x7a>
 808d722:	9b00      	ldr	r3, [sp, #0]
 808d724:	4599      	cmp	r9, r3
 808d726:	ddee      	ble.n	808d706 <__hexnan+0x30>
 808d728:	4544      	cmp	r4, r8
 808d72a:	d205      	bcs.n	808d738 <__hexnan+0x62>
 808d72c:	2a07      	cmp	r2, #7
 808d72e:	dc03      	bgt.n	808d738 <__hexnan+0x62>
 808d730:	4641      	mov	r1, r8
 808d732:	4620      	mov	r0, r4
 808d734:	f7ff ffaa 	bl	808d68c <L_shift>
 808d738:	42bc      	cmp	r4, r7
 808d73a:	d923      	bls.n	808d784 <__hexnan+0xae>
 808d73c:	2300      	movs	r3, #0
 808d73e:	f1a4 0804 	sub.w	r8, r4, #4
 808d742:	f844 3c04 	str.w	r3, [r4, #-4]
 808d746:	f8cd 9000 	str.w	r9, [sp]
 808d74a:	4644      	mov	r4, r8
 808d74c:	461a      	mov	r2, r3
 808d74e:	e7da      	b.n	808d706 <__hexnan+0x30>
 808d750:	2929      	cmp	r1, #41	; 0x29
 808d752:	d148      	bne.n	808d7e6 <__hexnan+0x110>
 808d754:	f10b 0301 	add.w	r3, fp, #1
 808d758:	f8ca 3000 	str.w	r3, [sl]
 808d75c:	e014      	b.n	808d788 <__hexnan+0xb2>
 808d75e:	3201      	adds	r2, #1
 808d760:	2a08      	cmp	r2, #8
 808d762:	f109 0901 	add.w	r9, r9, #1
 808d766:	dd06      	ble.n	808d776 <__hexnan+0xa0>
 808d768:	42bc      	cmp	r4, r7
 808d76a:	d9cc      	bls.n	808d706 <__hexnan+0x30>
 808d76c:	2300      	movs	r3, #0
 808d76e:	f844 3c04 	str.w	r3, [r4, #-4]
 808d772:	2201      	movs	r2, #1
 808d774:	3c04      	subs	r4, #4
 808d776:	6821      	ldr	r1, [r4, #0]
 808d778:	f000 000f 	and.w	r0, r0, #15
 808d77c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808d780:	6020      	str	r0, [r4, #0]
 808d782:	e7c0      	b.n	808d706 <__hexnan+0x30>
 808d784:	2208      	movs	r2, #8
 808d786:	e7be      	b.n	808d706 <__hexnan+0x30>
 808d788:	f1b9 0f00 	cmp.w	r9, #0
 808d78c:	d02b      	beq.n	808d7e6 <__hexnan+0x110>
 808d78e:	4544      	cmp	r4, r8
 808d790:	d205      	bcs.n	808d79e <__hexnan+0xc8>
 808d792:	2a07      	cmp	r2, #7
 808d794:	dc03      	bgt.n	808d79e <__hexnan+0xc8>
 808d796:	4641      	mov	r1, r8
 808d798:	4620      	mov	r0, r4
 808d79a:	f7ff ff77 	bl	808d68c <L_shift>
 808d79e:	42bc      	cmp	r4, r7
 808d7a0:	d90c      	bls.n	808d7bc <__hexnan+0xe6>
 808d7a2:	463b      	mov	r3, r7
 808d7a4:	f854 2b04 	ldr.w	r2, [r4], #4
 808d7a8:	42a5      	cmp	r5, r4
 808d7aa:	f843 2b04 	str.w	r2, [r3], #4
 808d7ae:	d2f9      	bcs.n	808d7a4 <__hexnan+0xce>
 808d7b0:	2200      	movs	r2, #0
 808d7b2:	f843 2b04 	str.w	r2, [r3], #4
 808d7b6:	429d      	cmp	r5, r3
 808d7b8:	d2fb      	bcs.n	808d7b2 <__hexnan+0xdc>
 808d7ba:	e00b      	b.n	808d7d4 <__hexnan+0xfe>
 808d7bc:	9b01      	ldr	r3, [sp, #4]
 808d7be:	b14b      	cbz	r3, 808d7d4 <__hexnan+0xfe>
 808d7c0:	f1c3 0220 	rsb	r2, r3, #32
 808d7c4:	f04f 33ff 	mov.w	r3, #4294967295
 808d7c8:	40d3      	lsrs	r3, r2
 808d7ca:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808d7ce:	4013      	ands	r3, r2
 808d7d0:	f846 3c04 	str.w	r3, [r6, #-4]
 808d7d4:	682b      	ldr	r3, [r5, #0]
 808d7d6:	b943      	cbnz	r3, 808d7ea <__hexnan+0x114>
 808d7d8:	42bd      	cmp	r5, r7
 808d7da:	d102      	bne.n	808d7e2 <__hexnan+0x10c>
 808d7dc:	2301      	movs	r3, #1
 808d7de:	602b      	str	r3, [r5, #0]
 808d7e0:	e003      	b.n	808d7ea <__hexnan+0x114>
 808d7e2:	3d04      	subs	r5, #4
 808d7e4:	e7f6      	b.n	808d7d4 <__hexnan+0xfe>
 808d7e6:	2004      	movs	r0, #4
 808d7e8:	e000      	b.n	808d7ec <__hexnan+0x116>
 808d7ea:	2005      	movs	r0, #5
 808d7ec:	b005      	add	sp, #20
 808d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808d7f4 <_findenv_r>:
 808d7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d7f8:	4607      	mov	r7, r0
 808d7fa:	468b      	mov	fp, r1
 808d7fc:	4690      	mov	r8, r2
 808d7fe:	f000 fcd2 	bl	808e1a6 <__env_lock>
 808d802:	4b19      	ldr	r3, [pc, #100]	; (808d868 <_findenv_r+0x74>)
 808d804:	681d      	ldr	r5, [r3, #0]
 808d806:	469a      	mov	sl, r3
 808d808:	b13d      	cbz	r5, 808d81a <_findenv_r+0x26>
 808d80a:	465c      	mov	r4, fp
 808d80c:	4623      	mov	r3, r4
 808d80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d812:	b142      	cbz	r2, 808d826 <_findenv_r+0x32>
 808d814:	2a3d      	cmp	r2, #61	; 0x3d
 808d816:	461c      	mov	r4, r3
 808d818:	d1f8      	bne.n	808d80c <_findenv_r+0x18>
 808d81a:	4638      	mov	r0, r7
 808d81c:	f000 fcc4 	bl	808e1a8 <__env_unlock>
 808d820:	2000      	movs	r0, #0
 808d822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d826:	ebcb 0404 	rsb	r4, fp, r4
 808d82a:	46a9      	mov	r9, r5
 808d82c:	f859 0b04 	ldr.w	r0, [r9], #4
 808d830:	2800      	cmp	r0, #0
 808d832:	d0f2      	beq.n	808d81a <_findenv_r+0x26>
 808d834:	4622      	mov	r2, r4
 808d836:	4659      	mov	r1, fp
 808d838:	f7fe fae4 	bl	808be04 <strncmp>
 808d83c:	b988      	cbnz	r0, 808d862 <_findenv_r+0x6e>
 808d83e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808d842:	191e      	adds	r6, r3, r4
 808d844:	5d1b      	ldrb	r3, [r3, r4]
 808d846:	2b3d      	cmp	r3, #61	; 0x3d
 808d848:	d10b      	bne.n	808d862 <_findenv_r+0x6e>
 808d84a:	f8da 3000 	ldr.w	r3, [sl]
 808d84e:	4638      	mov	r0, r7
 808d850:	1aed      	subs	r5, r5, r3
 808d852:	10ad      	asrs	r5, r5, #2
 808d854:	f8c8 5000 	str.w	r5, [r8]
 808d858:	f000 fca6 	bl	808e1a8 <__env_unlock>
 808d85c:	1c70      	adds	r0, r6, #1
 808d85e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d862:	464d      	mov	r5, r9
 808d864:	e7e1      	b.n	808d82a <_findenv_r+0x36>
 808d866:	bf00      	nop
 808d868:	20000140 	.word	0x20000140

0808d86c <_getenv_r>:
 808d86c:	b507      	push	{r0, r1, r2, lr}
 808d86e:	aa01      	add	r2, sp, #4
 808d870:	f7ff ffc0 	bl	808d7f4 <_findenv_r>
 808d874:	b003      	add	sp, #12
 808d876:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808d87c <__gettzinfo>:
 808d87c:	4800      	ldr	r0, [pc, #0]	; (808d880 <__gettzinfo+0x4>)
 808d87e:	4770      	bx	lr
 808d880:	20000100 	.word	0x20000100

0808d884 <gmtime_r>:
 808d884:	6802      	ldr	r2, [r0, #0]
 808d886:	4b46      	ldr	r3, [pc, #280]	; (808d9a0 <gmtime_r+0x11c>)
 808d888:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d88a:	fb92 f4f3 	sdiv	r4, r2, r3
 808d88e:	fb03 2214 	mls	r2, r3, r4, r2
 808d892:	2a00      	cmp	r2, #0
 808d894:	bfbc      	itt	lt
 808d896:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808d89a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808d89e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808d8a2:	fb92 f3f0 	sdiv	r3, r2, r0
 808d8a6:	fb00 2213 	mls	r2, r0, r3, r2
 808d8aa:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808d8ae:	608b      	str	r3, [r1, #8]
 808d8b0:	fb92 f3f0 	sdiv	r3, r2, r0
 808d8b4:	fb00 2213 	mls	r2, r0, r3, r2
 808d8b8:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808d8bc:	bfac      	ite	ge
 808d8be:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808d8c2:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808d8c6:	604b      	str	r3, [r1, #4]
 808d8c8:	600a      	str	r2, [r1, #0]
 808d8ca:	2307      	movs	r3, #7
 808d8cc:	1ce2      	adds	r2, r4, #3
 808d8ce:	fb92 f3f3 	sdiv	r3, r2, r3
 808d8d2:	4d34      	ldr	r5, [pc, #208]	; (808d9a4 <gmtime_r+0x120>)
 808d8d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808d8d8:	fb94 f5f5 	sdiv	r5, r4, r5
 808d8dc:	1ad3      	subs	r3, r2, r3
 808d8de:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808d8e2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808d8e6:	618b      	str	r3, [r1, #24]
 808d8e8:	4b2f      	ldr	r3, [pc, #188]	; (808d9a8 <gmtime_r+0x124>)
 808d8ea:	4830      	ldr	r0, [pc, #192]	; (808d9ac <gmtime_r+0x128>)
 808d8ec:	fb03 4405 	mla	r4, r3, r5, r4
 808d8f0:	fbb4 f2f2 	udiv	r2, r4, r2
 808d8f4:	fbb4 f3f7 	udiv	r3, r4, r7
 808d8f8:	fbb4 f0f0 	udiv	r0, r4, r0
 808d8fc:	4422      	add	r2, r4
 808d8fe:	1ad2      	subs	r2, r2, r3
 808d900:	f648 6694 	movw	r6, #36500	; 0x8e94
 808d904:	1a13      	subs	r3, r2, r0
 808d906:	f240 126d 	movw	r2, #365	; 0x16d
 808d90a:	fbb3 f6f6 	udiv	r6, r3, r6
 808d90e:	fbb3 f0f2 	udiv	r0, r3, r2
 808d912:	fbb3 f3f7 	udiv	r3, r3, r7
 808d916:	4434      	add	r4, r6
 808d918:	1ae3      	subs	r3, r4, r3
 808d91a:	fb02 3310 	mls	r3, r2, r0, r3
 808d91e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808d922:	2499      	movs	r4, #153	; 0x99
 808d924:	3202      	adds	r2, #2
 808d926:	fbb2 f2f4 	udiv	r2, r2, r4
 808d92a:	4354      	muls	r4, r2
 808d92c:	1ca6      	adds	r6, r4, #2
 808d92e:	2405      	movs	r4, #5
 808d930:	fbb6 f4f4 	udiv	r4, r6, r4
 808d934:	2a0a      	cmp	r2, #10
 808d936:	bf34      	ite	cc
 808d938:	2602      	movcc	r6, #2
 808d93a:	f06f 0609 	mvncs.w	r6, #9
 808d93e:	4416      	add	r6, r2
 808d940:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d944:	fb02 0505 	mla	r5, r2, r5, r0
 808d948:	1c5f      	adds	r7, r3, #1
 808d94a:	2e01      	cmp	r6, #1
 808d94c:	bf98      	it	ls
 808d94e:	3501      	addls	r5, #1
 808d950:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808d954:	eba7 0704 	sub.w	r7, r7, r4
 808d958:	d302      	bcc.n	808d960 <gmtime_r+0xdc>
 808d95a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808d95e:	e014      	b.n	808d98a <gmtime_r+0x106>
 808d960:	0782      	lsls	r2, r0, #30
 808d962:	d105      	bne.n	808d970 <gmtime_r+0xec>
 808d964:	2464      	movs	r4, #100	; 0x64
 808d966:	fbb0 f2f4 	udiv	r2, r0, r4
 808d96a:	fb04 0212 	mls	r2, r4, r2, r0
 808d96e:	b94a      	cbnz	r2, 808d984 <gmtime_r+0x100>
 808d970:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d974:	fbb0 f4f2 	udiv	r4, r0, r2
 808d978:	fb02 0014 	mls	r0, r2, r4, r0
 808d97c:	fab0 f280 	clz	r2, r0
 808d980:	0952      	lsrs	r2, r2, #5
 808d982:	e000      	b.n	808d986 <gmtime_r+0x102>
 808d984:	2201      	movs	r2, #1
 808d986:	333b      	adds	r3, #59	; 0x3b
 808d988:	441a      	add	r2, r3
 808d98a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808d98e:	2300      	movs	r3, #0
 808d990:	61ca      	str	r2, [r1, #28]
 808d992:	614d      	str	r5, [r1, #20]
 808d994:	610e      	str	r6, [r1, #16]
 808d996:	60cf      	str	r7, [r1, #12]
 808d998:	620b      	str	r3, [r1, #32]
 808d99a:	4608      	mov	r0, r1
 808d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808d99e:	bf00      	nop
 808d9a0:	00015180 	.word	0x00015180
 808d9a4:	00023ab1 	.word	0x00023ab1
 808d9a8:	fffdc54f 	.word	0xfffdc54f
 808d9ac:	00023ab0 	.word	0x00023ab0

0808d9b0 <labs>:
 808d9b0:	2800      	cmp	r0, #0
 808d9b2:	bfb8      	it	lt
 808d9b4:	4240      	neglt	r0, r0
 808d9b6:	4770      	bx	lr

0808d9b8 <_Balloc>:
 808d9b8:	b570      	push	{r4, r5, r6, lr}
 808d9ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808d9bc:	4604      	mov	r4, r0
 808d9be:	460e      	mov	r6, r1
 808d9c0:	b93d      	cbnz	r5, 808d9d2 <_Balloc+0x1a>
 808d9c2:	2010      	movs	r0, #16
 808d9c4:	f7f8 f84e 	bl	8085a64 <malloc>
 808d9c8:	6260      	str	r0, [r4, #36]	; 0x24
 808d9ca:	6045      	str	r5, [r0, #4]
 808d9cc:	6085      	str	r5, [r0, #8]
 808d9ce:	6005      	str	r5, [r0, #0]
 808d9d0:	60c5      	str	r5, [r0, #12]
 808d9d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808d9d4:	68eb      	ldr	r3, [r5, #12]
 808d9d6:	b143      	cbz	r3, 808d9ea <_Balloc+0x32>
 808d9d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d9da:	68db      	ldr	r3, [r3, #12]
 808d9dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808d9e0:	b178      	cbz	r0, 808da02 <_Balloc+0x4a>
 808d9e2:	6802      	ldr	r2, [r0, #0]
 808d9e4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808d9e8:	e017      	b.n	808da1a <_Balloc+0x62>
 808d9ea:	2221      	movs	r2, #33	; 0x21
 808d9ec:	2104      	movs	r1, #4
 808d9ee:	4620      	mov	r0, r4
 808d9f0:	f000 fbcb 	bl	808e18a <_calloc_r>
 808d9f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d9f6:	60e8      	str	r0, [r5, #12]
 808d9f8:	68db      	ldr	r3, [r3, #12]
 808d9fa:	2b00      	cmp	r3, #0
 808d9fc:	d1ec      	bne.n	808d9d8 <_Balloc+0x20>
 808d9fe:	2000      	movs	r0, #0
 808da00:	bd70      	pop	{r4, r5, r6, pc}
 808da02:	2101      	movs	r1, #1
 808da04:	fa01 f506 	lsl.w	r5, r1, r6
 808da08:	1d6a      	adds	r2, r5, #5
 808da0a:	0092      	lsls	r2, r2, #2
 808da0c:	4620      	mov	r0, r4
 808da0e:	f000 fbbc 	bl	808e18a <_calloc_r>
 808da12:	2800      	cmp	r0, #0
 808da14:	d0f3      	beq.n	808d9fe <_Balloc+0x46>
 808da16:	6046      	str	r6, [r0, #4]
 808da18:	6085      	str	r5, [r0, #8]
 808da1a:	2300      	movs	r3, #0
 808da1c:	6103      	str	r3, [r0, #16]
 808da1e:	60c3      	str	r3, [r0, #12]
 808da20:	bd70      	pop	{r4, r5, r6, pc}

0808da22 <_Bfree>:
 808da22:	b570      	push	{r4, r5, r6, lr}
 808da24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808da26:	4606      	mov	r6, r0
 808da28:	460d      	mov	r5, r1
 808da2a:	b93c      	cbnz	r4, 808da3c <_Bfree+0x1a>
 808da2c:	2010      	movs	r0, #16
 808da2e:	f7f8 f819 	bl	8085a64 <malloc>
 808da32:	6270      	str	r0, [r6, #36]	; 0x24
 808da34:	6044      	str	r4, [r0, #4]
 808da36:	6084      	str	r4, [r0, #8]
 808da38:	6004      	str	r4, [r0, #0]
 808da3a:	60c4      	str	r4, [r0, #12]
 808da3c:	b13d      	cbz	r5, 808da4e <_Bfree+0x2c>
 808da3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808da40:	686a      	ldr	r2, [r5, #4]
 808da42:	68db      	ldr	r3, [r3, #12]
 808da44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808da48:	6029      	str	r1, [r5, #0]
 808da4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808da4e:	bd70      	pop	{r4, r5, r6, pc}

0808da50 <__multadd>:
 808da50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808da54:	4606      	mov	r6, r0
 808da56:	460c      	mov	r4, r1
 808da58:	690d      	ldr	r5, [r1, #16]
 808da5a:	461f      	mov	r7, r3
 808da5c:	f101 0e14 	add.w	lr, r1, #20
 808da60:	2300      	movs	r3, #0
 808da62:	f8de 0000 	ldr.w	r0, [lr]
 808da66:	3301      	adds	r3, #1
 808da68:	b281      	uxth	r1, r0
 808da6a:	fb02 7101 	mla	r1, r2, r1, r7
 808da6e:	0c00      	lsrs	r0, r0, #16
 808da70:	0c0f      	lsrs	r7, r1, #16
 808da72:	fb02 7000 	mla	r0, r2, r0, r7
 808da76:	b289      	uxth	r1, r1
 808da78:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808da7c:	429d      	cmp	r5, r3
 808da7e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808da82:	f84e 1b04 	str.w	r1, [lr], #4
 808da86:	dcec      	bgt.n	808da62 <__multadd+0x12>
 808da88:	b1d7      	cbz	r7, 808dac0 <__multadd+0x70>
 808da8a:	68a3      	ldr	r3, [r4, #8]
 808da8c:	429d      	cmp	r5, r3
 808da8e:	db12      	blt.n	808dab6 <__multadd+0x66>
 808da90:	6861      	ldr	r1, [r4, #4]
 808da92:	4630      	mov	r0, r6
 808da94:	3101      	adds	r1, #1
 808da96:	f7ff ff8f 	bl	808d9b8 <_Balloc>
 808da9a:	4680      	mov	r8, r0
 808da9c:	6922      	ldr	r2, [r4, #16]
 808da9e:	f104 010c 	add.w	r1, r4, #12
 808daa2:	3202      	adds	r2, #2
 808daa4:	0092      	lsls	r2, r2, #2
 808daa6:	300c      	adds	r0, #12
 808daa8:	f7fd fbf3 	bl	808b292 <memcpy>
 808daac:	4621      	mov	r1, r4
 808daae:	4630      	mov	r0, r6
 808dab0:	f7ff ffb7 	bl	808da22 <_Bfree>
 808dab4:	4644      	mov	r4, r8
 808dab6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808daba:	3501      	adds	r5, #1
 808dabc:	615f      	str	r7, [r3, #20]
 808dabe:	6125      	str	r5, [r4, #16]
 808dac0:	4620      	mov	r0, r4
 808dac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808dac6 <__s2b>:
 808dac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808daca:	4606      	mov	r6, r0
 808dacc:	4615      	mov	r5, r2
 808dace:	461f      	mov	r7, r3
 808dad0:	2209      	movs	r2, #9
 808dad2:	3308      	adds	r3, #8
 808dad4:	460c      	mov	r4, r1
 808dad6:	fb93 f3f2 	sdiv	r3, r3, r2
 808dada:	2100      	movs	r1, #0
 808dadc:	2201      	movs	r2, #1
 808dade:	429a      	cmp	r2, r3
 808dae0:	da02      	bge.n	808dae8 <__s2b+0x22>
 808dae2:	0052      	lsls	r2, r2, #1
 808dae4:	3101      	adds	r1, #1
 808dae6:	e7fa      	b.n	808dade <__s2b+0x18>
 808dae8:	4630      	mov	r0, r6
 808daea:	f7ff ff65 	bl	808d9b8 <_Balloc>
 808daee:	9b08      	ldr	r3, [sp, #32]
 808daf0:	2d09      	cmp	r5, #9
 808daf2:	6143      	str	r3, [r0, #20]
 808daf4:	f04f 0301 	mov.w	r3, #1
 808daf8:	6103      	str	r3, [r0, #16]
 808dafa:	dd11      	ble.n	808db20 <__s2b+0x5a>
 808dafc:	f104 0809 	add.w	r8, r4, #9
 808db00:	46c1      	mov	r9, r8
 808db02:	442c      	add	r4, r5
 808db04:	f819 3b01 	ldrb.w	r3, [r9], #1
 808db08:	4601      	mov	r1, r0
 808db0a:	3b30      	subs	r3, #48	; 0x30
 808db0c:	220a      	movs	r2, #10
 808db0e:	4630      	mov	r0, r6
 808db10:	f7ff ff9e 	bl	808da50 <__multadd>
 808db14:	45a1      	cmp	r9, r4
 808db16:	d1f5      	bne.n	808db04 <__s2b+0x3e>
 808db18:	eb08 0405 	add.w	r4, r8, r5
 808db1c:	3c08      	subs	r4, #8
 808db1e:	e001      	b.n	808db24 <__s2b+0x5e>
 808db20:	340a      	adds	r4, #10
 808db22:	2509      	movs	r5, #9
 808db24:	1b2d      	subs	r5, r5, r4
 808db26:	1963      	adds	r3, r4, r5
 808db28:	429f      	cmp	r7, r3
 808db2a:	dd08      	ble.n	808db3e <__s2b+0x78>
 808db2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 808db30:	4601      	mov	r1, r0
 808db32:	3b30      	subs	r3, #48	; 0x30
 808db34:	220a      	movs	r2, #10
 808db36:	4630      	mov	r0, r6
 808db38:	f7ff ff8a 	bl	808da50 <__multadd>
 808db3c:	e7f3      	b.n	808db26 <__s2b+0x60>
 808db3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808db42 <__hi0bits>:
 808db42:	0c03      	lsrs	r3, r0, #16
 808db44:	041b      	lsls	r3, r3, #16
 808db46:	b913      	cbnz	r3, 808db4e <__hi0bits+0xc>
 808db48:	0400      	lsls	r0, r0, #16
 808db4a:	2310      	movs	r3, #16
 808db4c:	e000      	b.n	808db50 <__hi0bits+0xe>
 808db4e:	2300      	movs	r3, #0
 808db50:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808db54:	bf04      	itt	eq
 808db56:	0200      	lsleq	r0, r0, #8
 808db58:	3308      	addeq	r3, #8
 808db5a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808db5e:	bf04      	itt	eq
 808db60:	0100      	lsleq	r0, r0, #4
 808db62:	3304      	addeq	r3, #4
 808db64:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808db68:	bf04      	itt	eq
 808db6a:	0080      	lsleq	r0, r0, #2
 808db6c:	3302      	addeq	r3, #2
 808db6e:	2800      	cmp	r0, #0
 808db70:	db03      	blt.n	808db7a <__hi0bits+0x38>
 808db72:	0042      	lsls	r2, r0, #1
 808db74:	d503      	bpl.n	808db7e <__hi0bits+0x3c>
 808db76:	1c58      	adds	r0, r3, #1
 808db78:	4770      	bx	lr
 808db7a:	4618      	mov	r0, r3
 808db7c:	4770      	bx	lr
 808db7e:	2020      	movs	r0, #32
 808db80:	4770      	bx	lr

0808db82 <__lo0bits>:
 808db82:	6803      	ldr	r3, [r0, #0]
 808db84:	f013 0207 	ands.w	r2, r3, #7
 808db88:	d00b      	beq.n	808dba2 <__lo0bits+0x20>
 808db8a:	07d9      	lsls	r1, r3, #31
 808db8c:	d422      	bmi.n	808dbd4 <__lo0bits+0x52>
 808db8e:	079a      	lsls	r2, r3, #30
 808db90:	bf4b      	itete	mi
 808db92:	085b      	lsrmi	r3, r3, #1
 808db94:	089b      	lsrpl	r3, r3, #2
 808db96:	6003      	strmi	r3, [r0, #0]
 808db98:	6003      	strpl	r3, [r0, #0]
 808db9a:	bf4c      	ite	mi
 808db9c:	2001      	movmi	r0, #1
 808db9e:	2002      	movpl	r0, #2
 808dba0:	4770      	bx	lr
 808dba2:	b299      	uxth	r1, r3
 808dba4:	b909      	cbnz	r1, 808dbaa <__lo0bits+0x28>
 808dba6:	0c1b      	lsrs	r3, r3, #16
 808dba8:	2210      	movs	r2, #16
 808dbaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 808dbae:	bf04      	itt	eq
 808dbb0:	0a1b      	lsreq	r3, r3, #8
 808dbb2:	3208      	addeq	r2, #8
 808dbb4:	0719      	lsls	r1, r3, #28
 808dbb6:	bf04      	itt	eq
 808dbb8:	091b      	lsreq	r3, r3, #4
 808dbba:	3204      	addeq	r2, #4
 808dbbc:	0799      	lsls	r1, r3, #30
 808dbbe:	bf04      	itt	eq
 808dbc0:	089b      	lsreq	r3, r3, #2
 808dbc2:	3202      	addeq	r2, #2
 808dbc4:	07d9      	lsls	r1, r3, #31
 808dbc6:	d402      	bmi.n	808dbce <__lo0bits+0x4c>
 808dbc8:	085b      	lsrs	r3, r3, #1
 808dbca:	d005      	beq.n	808dbd8 <__lo0bits+0x56>
 808dbcc:	3201      	adds	r2, #1
 808dbce:	6003      	str	r3, [r0, #0]
 808dbd0:	4610      	mov	r0, r2
 808dbd2:	4770      	bx	lr
 808dbd4:	2000      	movs	r0, #0
 808dbd6:	4770      	bx	lr
 808dbd8:	2020      	movs	r0, #32
 808dbda:	4770      	bx	lr

0808dbdc <__i2b>:
 808dbdc:	b510      	push	{r4, lr}
 808dbde:	460c      	mov	r4, r1
 808dbe0:	2101      	movs	r1, #1
 808dbe2:	f7ff fee9 	bl	808d9b8 <_Balloc>
 808dbe6:	2201      	movs	r2, #1
 808dbe8:	6144      	str	r4, [r0, #20]
 808dbea:	6102      	str	r2, [r0, #16]
 808dbec:	bd10      	pop	{r4, pc}

0808dbee <__multiply>:
 808dbee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dbf2:	4614      	mov	r4, r2
 808dbf4:	690a      	ldr	r2, [r1, #16]
 808dbf6:	6923      	ldr	r3, [r4, #16]
 808dbf8:	4688      	mov	r8, r1
 808dbfa:	429a      	cmp	r2, r3
 808dbfc:	bfbe      	ittt	lt
 808dbfe:	460b      	movlt	r3, r1
 808dc00:	46a0      	movlt	r8, r4
 808dc02:	461c      	movlt	r4, r3
 808dc04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808dc08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808dc0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808dc10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808dc14:	eb07 0609 	add.w	r6, r7, r9
 808dc18:	429e      	cmp	r6, r3
 808dc1a:	bfc8      	it	gt
 808dc1c:	3101      	addgt	r1, #1
 808dc1e:	f7ff fecb 	bl	808d9b8 <_Balloc>
 808dc22:	f100 0514 	add.w	r5, r0, #20
 808dc26:	462b      	mov	r3, r5
 808dc28:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808dc2c:	2200      	movs	r2, #0
 808dc2e:	4563      	cmp	r3, ip
 808dc30:	d202      	bcs.n	808dc38 <__multiply+0x4a>
 808dc32:	f843 2b04 	str.w	r2, [r3], #4
 808dc36:	e7fa      	b.n	808dc2e <__multiply+0x40>
 808dc38:	f104 0214 	add.w	r2, r4, #20
 808dc3c:	f108 0114 	add.w	r1, r8, #20
 808dc40:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808dc44:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808dc48:	9300      	str	r3, [sp, #0]
 808dc4a:	9b00      	ldr	r3, [sp, #0]
 808dc4c:	9201      	str	r2, [sp, #4]
 808dc4e:	4293      	cmp	r3, r2
 808dc50:	d957      	bls.n	808dd02 <__multiply+0x114>
 808dc52:	f8b2 b000 	ldrh.w	fp, [r2]
 808dc56:	f1bb 0f00 	cmp.w	fp, #0
 808dc5a:	d023      	beq.n	808dca4 <__multiply+0xb6>
 808dc5c:	4689      	mov	r9, r1
 808dc5e:	46ae      	mov	lr, r5
 808dc60:	f04f 0800 	mov.w	r8, #0
 808dc64:	f859 4b04 	ldr.w	r4, [r9], #4
 808dc68:	f8be a000 	ldrh.w	sl, [lr]
 808dc6c:	b2a3      	uxth	r3, r4
 808dc6e:	fb0b a303 	mla	r3, fp, r3, sl
 808dc72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808dc76:	f8de 4000 	ldr.w	r4, [lr]
 808dc7a:	4443      	add	r3, r8
 808dc7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808dc80:	fb0b 840a 	mla	r4, fp, sl, r8
 808dc84:	46f2      	mov	sl, lr
 808dc86:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808dc8a:	b29b      	uxth	r3, r3
 808dc8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808dc90:	454f      	cmp	r7, r9
 808dc92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808dc96:	f84a 3b04 	str.w	r3, [sl], #4
 808dc9a:	d901      	bls.n	808dca0 <__multiply+0xb2>
 808dc9c:	46d6      	mov	lr, sl
 808dc9e:	e7e1      	b.n	808dc64 <__multiply+0x76>
 808dca0:	f8ce 8004 	str.w	r8, [lr, #4]
 808dca4:	9b01      	ldr	r3, [sp, #4]
 808dca6:	3204      	adds	r2, #4
 808dca8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808dcac:	f1ba 0f00 	cmp.w	sl, #0
 808dcb0:	d021      	beq.n	808dcf6 <__multiply+0x108>
 808dcb2:	462c      	mov	r4, r5
 808dcb4:	4689      	mov	r9, r1
 808dcb6:	682b      	ldr	r3, [r5, #0]
 808dcb8:	f04f 0800 	mov.w	r8, #0
 808dcbc:	f8b9 e000 	ldrh.w	lr, [r9]
 808dcc0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808dcc4:	b29b      	uxth	r3, r3
 808dcc6:	fb0a be0e 	mla	lr, sl, lr, fp
 808dcca:	46a3      	mov	fp, r4
 808dccc:	44f0      	add	r8, lr
 808dcce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808dcd2:	f84b 3b04 	str.w	r3, [fp], #4
 808dcd6:	f859 3b04 	ldr.w	r3, [r9], #4
 808dcda:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808dcde:	0c1b      	lsrs	r3, r3, #16
 808dce0:	fb0a e303 	mla	r3, sl, r3, lr
 808dce4:	454f      	cmp	r7, r9
 808dce6:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808dcea:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808dcee:	d901      	bls.n	808dcf4 <__multiply+0x106>
 808dcf0:	465c      	mov	r4, fp
 808dcf2:	e7e3      	b.n	808dcbc <__multiply+0xce>
 808dcf4:	6063      	str	r3, [r4, #4]
 808dcf6:	3504      	adds	r5, #4
 808dcf8:	e7a7      	b.n	808dc4a <__multiply+0x5c>
 808dcfa:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808dcfe:	b913      	cbnz	r3, 808dd06 <__multiply+0x118>
 808dd00:	3e01      	subs	r6, #1
 808dd02:	2e00      	cmp	r6, #0
 808dd04:	dcf9      	bgt.n	808dcfa <__multiply+0x10c>
 808dd06:	6106      	str	r6, [r0, #16]
 808dd08:	b003      	add	sp, #12
 808dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808dd10 <__pow5mult>:
 808dd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808dd14:	4615      	mov	r5, r2
 808dd16:	f012 0203 	ands.w	r2, r2, #3
 808dd1a:	4606      	mov	r6, r0
 808dd1c:	460f      	mov	r7, r1
 808dd1e:	d007      	beq.n	808dd30 <__pow5mult+0x20>
 808dd20:	4c21      	ldr	r4, [pc, #132]	; (808dda8 <__pow5mult+0x98>)
 808dd22:	3a01      	subs	r2, #1
 808dd24:	2300      	movs	r3, #0
 808dd26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808dd2a:	f7ff fe91 	bl	808da50 <__multadd>
 808dd2e:	4607      	mov	r7, r0
 808dd30:	10ad      	asrs	r5, r5, #2
 808dd32:	d036      	beq.n	808dda2 <__pow5mult+0x92>
 808dd34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808dd36:	b93c      	cbnz	r4, 808dd48 <__pow5mult+0x38>
 808dd38:	2010      	movs	r0, #16
 808dd3a:	f7f7 fe93 	bl	8085a64 <malloc>
 808dd3e:	6270      	str	r0, [r6, #36]	; 0x24
 808dd40:	6044      	str	r4, [r0, #4]
 808dd42:	6084      	str	r4, [r0, #8]
 808dd44:	6004      	str	r4, [r0, #0]
 808dd46:	60c4      	str	r4, [r0, #12]
 808dd48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808dd4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808dd50:	b94c      	cbnz	r4, 808dd66 <__pow5mult+0x56>
 808dd52:	f240 2171 	movw	r1, #625	; 0x271
 808dd56:	4630      	mov	r0, r6
 808dd58:	f7ff ff40 	bl	808dbdc <__i2b>
 808dd5c:	4604      	mov	r4, r0
 808dd5e:	2300      	movs	r3, #0
 808dd60:	f8c8 0008 	str.w	r0, [r8, #8]
 808dd64:	6003      	str	r3, [r0, #0]
 808dd66:	f04f 0800 	mov.w	r8, #0
 808dd6a:	07eb      	lsls	r3, r5, #31
 808dd6c:	d50a      	bpl.n	808dd84 <__pow5mult+0x74>
 808dd6e:	4639      	mov	r1, r7
 808dd70:	4622      	mov	r2, r4
 808dd72:	4630      	mov	r0, r6
 808dd74:	f7ff ff3b 	bl	808dbee <__multiply>
 808dd78:	4681      	mov	r9, r0
 808dd7a:	4639      	mov	r1, r7
 808dd7c:	4630      	mov	r0, r6
 808dd7e:	f7ff fe50 	bl	808da22 <_Bfree>
 808dd82:	464f      	mov	r7, r9
 808dd84:	106d      	asrs	r5, r5, #1
 808dd86:	d00c      	beq.n	808dda2 <__pow5mult+0x92>
 808dd88:	6820      	ldr	r0, [r4, #0]
 808dd8a:	b108      	cbz	r0, 808dd90 <__pow5mult+0x80>
 808dd8c:	4604      	mov	r4, r0
 808dd8e:	e7ec      	b.n	808dd6a <__pow5mult+0x5a>
 808dd90:	4622      	mov	r2, r4
 808dd92:	4621      	mov	r1, r4
 808dd94:	4630      	mov	r0, r6
 808dd96:	f7ff ff2a 	bl	808dbee <__multiply>
 808dd9a:	6020      	str	r0, [r4, #0]
 808dd9c:	f8c0 8000 	str.w	r8, [r0]
 808dda0:	e7f4      	b.n	808dd8c <__pow5mult+0x7c>
 808dda2:	4638      	mov	r0, r7
 808dda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808dda8:	0808f778 	.word	0x0808f778

0808ddac <__lshift>:
 808ddac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ddb0:	460c      	mov	r4, r1
 808ddb2:	4607      	mov	r7, r0
 808ddb4:	4691      	mov	r9, r2
 808ddb6:	6926      	ldr	r6, [r4, #16]
 808ddb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808ddbc:	4456      	add	r6, sl
 808ddbe:	6849      	ldr	r1, [r1, #4]
 808ddc0:	68a3      	ldr	r3, [r4, #8]
 808ddc2:	1c75      	adds	r5, r6, #1
 808ddc4:	42ab      	cmp	r3, r5
 808ddc6:	da02      	bge.n	808ddce <__lshift+0x22>
 808ddc8:	3101      	adds	r1, #1
 808ddca:	005b      	lsls	r3, r3, #1
 808ddcc:	e7fa      	b.n	808ddc4 <__lshift+0x18>
 808ddce:	4638      	mov	r0, r7
 808ddd0:	f7ff fdf2 	bl	808d9b8 <_Balloc>
 808ddd4:	2300      	movs	r3, #0
 808ddd6:	4680      	mov	r8, r0
 808ddd8:	461a      	mov	r2, r3
 808ddda:	f100 0114 	add.w	r1, r0, #20
 808ddde:	4553      	cmp	r3, sl
 808dde0:	da03      	bge.n	808ddea <__lshift+0x3e>
 808dde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808dde6:	3301      	adds	r3, #1
 808dde8:	e7f9      	b.n	808ddde <__lshift+0x32>
 808ddea:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808ddee:	6920      	ldr	r0, [r4, #16]
 808ddf0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808ddf4:	f019 091f 	ands.w	r9, r9, #31
 808ddf8:	f104 0114 	add.w	r1, r4, #20
 808ddfc:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808de00:	d014      	beq.n	808de2c <__lshift+0x80>
 808de02:	f1c9 0c20 	rsb	ip, r9, #32
 808de06:	2200      	movs	r2, #0
 808de08:	6808      	ldr	r0, [r1, #0]
 808de0a:	469a      	mov	sl, r3
 808de0c:	fa00 f009 	lsl.w	r0, r0, r9
 808de10:	4302      	orrs	r2, r0
 808de12:	f843 2b04 	str.w	r2, [r3], #4
 808de16:	f851 2b04 	ldr.w	r2, [r1], #4
 808de1a:	458e      	cmp	lr, r1
 808de1c:	fa22 f20c 	lsr.w	r2, r2, ip
 808de20:	d8f2      	bhi.n	808de08 <__lshift+0x5c>
 808de22:	f8ca 2004 	str.w	r2, [sl, #4]
 808de26:	b142      	cbz	r2, 808de3a <__lshift+0x8e>
 808de28:	1cb5      	adds	r5, r6, #2
 808de2a:	e006      	b.n	808de3a <__lshift+0x8e>
 808de2c:	3b04      	subs	r3, #4
 808de2e:	f851 2b04 	ldr.w	r2, [r1], #4
 808de32:	458e      	cmp	lr, r1
 808de34:	f843 2f04 	str.w	r2, [r3, #4]!
 808de38:	d8f9      	bhi.n	808de2e <__lshift+0x82>
 808de3a:	3d01      	subs	r5, #1
 808de3c:	4638      	mov	r0, r7
 808de3e:	f8c8 5010 	str.w	r5, [r8, #16]
 808de42:	4621      	mov	r1, r4
 808de44:	f7ff fded 	bl	808da22 <_Bfree>
 808de48:	4640      	mov	r0, r8
 808de4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808de4e <__mcmp>:
 808de4e:	6903      	ldr	r3, [r0, #16]
 808de50:	690a      	ldr	r2, [r1, #16]
 808de52:	b510      	push	{r4, lr}
 808de54:	1a9b      	subs	r3, r3, r2
 808de56:	d111      	bne.n	808de7c <__mcmp+0x2e>
 808de58:	0092      	lsls	r2, r2, #2
 808de5a:	3014      	adds	r0, #20
 808de5c:	3114      	adds	r1, #20
 808de5e:	1883      	adds	r3, r0, r2
 808de60:	440a      	add	r2, r1
 808de62:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808de66:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808de6a:	428c      	cmp	r4, r1
 808de6c:	d002      	beq.n	808de74 <__mcmp+0x26>
 808de6e:	d307      	bcc.n	808de80 <__mcmp+0x32>
 808de70:	2001      	movs	r0, #1
 808de72:	bd10      	pop	{r4, pc}
 808de74:	4298      	cmp	r0, r3
 808de76:	d3f4      	bcc.n	808de62 <__mcmp+0x14>
 808de78:	2000      	movs	r0, #0
 808de7a:	bd10      	pop	{r4, pc}
 808de7c:	4618      	mov	r0, r3
 808de7e:	bd10      	pop	{r4, pc}
 808de80:	f04f 30ff 	mov.w	r0, #4294967295
 808de84:	bd10      	pop	{r4, pc}

0808de86 <__mdiff>:
 808de86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808de8a:	460c      	mov	r4, r1
 808de8c:	4607      	mov	r7, r0
 808de8e:	4611      	mov	r1, r2
 808de90:	4620      	mov	r0, r4
 808de92:	4615      	mov	r5, r2
 808de94:	f7ff ffdb 	bl	808de4e <__mcmp>
 808de98:	1e06      	subs	r6, r0, #0
 808de9a:	d108      	bne.n	808deae <__mdiff+0x28>
 808de9c:	4631      	mov	r1, r6
 808de9e:	4638      	mov	r0, r7
 808dea0:	f7ff fd8a 	bl	808d9b8 <_Balloc>
 808dea4:	2301      	movs	r3, #1
 808dea6:	6103      	str	r3, [r0, #16]
 808dea8:	6146      	str	r6, [r0, #20]
 808deaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808deae:	bfbc      	itt	lt
 808deb0:	4623      	movlt	r3, r4
 808deb2:	462c      	movlt	r4, r5
 808deb4:	4638      	mov	r0, r7
 808deb6:	6861      	ldr	r1, [r4, #4]
 808deb8:	bfba      	itte	lt
 808deba:	461d      	movlt	r5, r3
 808debc:	2601      	movlt	r6, #1
 808debe:	2600      	movge	r6, #0
 808dec0:	f7ff fd7a 	bl	808d9b8 <_Balloc>
 808dec4:	692b      	ldr	r3, [r5, #16]
 808dec6:	60c6      	str	r6, [r0, #12]
 808dec8:	6926      	ldr	r6, [r4, #16]
 808deca:	f105 0914 	add.w	r9, r5, #20
 808dece:	f104 0114 	add.w	r1, r4, #20
 808ded2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808ded6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808deda:	f100 0514 	add.w	r5, r0, #20
 808dede:	f04f 0c00 	mov.w	ip, #0
 808dee2:	f851 2b04 	ldr.w	r2, [r1], #4
 808dee6:	f859 4b04 	ldr.w	r4, [r9], #4
 808deea:	b293      	uxth	r3, r2
 808deec:	449c      	add	ip, r3
 808deee:	b2a3      	uxth	r3, r4
 808def0:	0c24      	lsrs	r4, r4, #16
 808def2:	ebc3 030c 	rsb	r3, r3, ip
 808def6:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808defa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808defe:	b29b      	uxth	r3, r3
 808df00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808df04:	45c8      	cmp	r8, r9
 808df06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808df0a:	468e      	mov	lr, r1
 808df0c:	f845 2b04 	str.w	r2, [r5], #4
 808df10:	d8e7      	bhi.n	808dee2 <__mdiff+0x5c>
 808df12:	45be      	cmp	lr, r7
 808df14:	d20e      	bcs.n	808df34 <__mdiff+0xae>
 808df16:	f85e 1b04 	ldr.w	r1, [lr], #4
 808df1a:	b28a      	uxth	r2, r1
 808df1c:	4462      	add	r2, ip
 808df1e:	1413      	asrs	r3, r2, #16
 808df20:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808df24:	b292      	uxth	r2, r2
 808df26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808df2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808df2e:	f845 2b04 	str.w	r2, [r5], #4
 808df32:	e7ee      	b.n	808df12 <__mdiff+0x8c>
 808df34:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808df38:	b90b      	cbnz	r3, 808df3e <__mdiff+0xb8>
 808df3a:	3e01      	subs	r6, #1
 808df3c:	e7fa      	b.n	808df34 <__mdiff+0xae>
 808df3e:	6106      	str	r6, [r0, #16]
 808df40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808df44 <__ulp>:
 808df44:	4b10      	ldr	r3, [pc, #64]	; (808df88 <__ulp+0x44>)
 808df46:	400b      	ands	r3, r1
 808df48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808df4c:	2b00      	cmp	r3, #0
 808df4e:	dd02      	ble.n	808df56 <__ulp+0x12>
 808df50:	2000      	movs	r0, #0
 808df52:	4619      	mov	r1, r3
 808df54:	4770      	bx	lr
 808df56:	425b      	negs	r3, r3
 808df58:	151b      	asrs	r3, r3, #20
 808df5a:	2b13      	cmp	r3, #19
 808df5c:	f04f 0000 	mov.w	r0, #0
 808df60:	f04f 0100 	mov.w	r1, #0
 808df64:	dc04      	bgt.n	808df70 <__ulp+0x2c>
 808df66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808df6a:	fa42 f103 	asr.w	r1, r2, r3
 808df6e:	4770      	bx	lr
 808df70:	3b14      	subs	r3, #20
 808df72:	2b1e      	cmp	r3, #30
 808df74:	f04f 0201 	mov.w	r2, #1
 808df78:	bfce      	itee	gt
 808df7a:	4613      	movgt	r3, r2
 808df7c:	f1c3 031f 	rsble	r3, r3, #31
 808df80:	fa02 f303 	lslle.w	r3, r2, r3
 808df84:	4618      	mov	r0, r3
 808df86:	4770      	bx	lr
 808df88:	7ff00000 	.word	0x7ff00000

0808df8c <__b2d>:
 808df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808df8e:	6905      	ldr	r5, [r0, #16]
 808df90:	f100 0614 	add.w	r6, r0, #20
 808df94:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808df98:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808df9c:	1f2f      	subs	r7, r5, #4
 808df9e:	4620      	mov	r0, r4
 808dfa0:	f7ff fdcf 	bl	808db42 <__hi0bits>
 808dfa4:	f1c0 0320 	rsb	r3, r0, #32
 808dfa8:	280a      	cmp	r0, #10
 808dfaa:	600b      	str	r3, [r1, #0]
 808dfac:	dc14      	bgt.n	808dfd8 <__b2d+0x4c>
 808dfae:	f1c0 0e0b 	rsb	lr, r0, #11
 808dfb2:	fa24 f10e 	lsr.w	r1, r4, lr
 808dfb6:	42be      	cmp	r6, r7
 808dfb8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808dfbc:	bf34      	ite	cc
 808dfbe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808dfc2:	2100      	movcs	r1, #0
 808dfc4:	3015      	adds	r0, #21
 808dfc6:	fa04 f000 	lsl.w	r0, r4, r0
 808dfca:	fa21 f10e 	lsr.w	r1, r1, lr
 808dfce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808dfd2:	ea40 0201 	orr.w	r2, r0, r1
 808dfd6:	e023      	b.n	808e020 <__b2d+0x94>
 808dfd8:	42be      	cmp	r6, r7
 808dfda:	bf3a      	itte	cc
 808dfdc:	f1a5 0708 	subcc.w	r7, r5, #8
 808dfe0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808dfe4:	2100      	movcs	r1, #0
 808dfe6:	380b      	subs	r0, #11
 808dfe8:	d015      	beq.n	808e016 <__b2d+0x8a>
 808dfea:	4084      	lsls	r4, r0
 808dfec:	f1c0 0520 	rsb	r5, r0, #32
 808dff0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808dff4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808dff8:	42b7      	cmp	r7, r6
 808dffa:	fa21 fe05 	lsr.w	lr, r1, r5
 808dffe:	ea44 030e 	orr.w	r3, r4, lr
 808e002:	bf8c      	ite	hi
 808e004:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808e008:	2400      	movls	r4, #0
 808e00a:	fa01 f000 	lsl.w	r0, r1, r0
 808e00e:	40ec      	lsrs	r4, r5
 808e010:	ea40 0204 	orr.w	r2, r0, r4
 808e014:	e004      	b.n	808e020 <__b2d+0x94>
 808e016:	460a      	mov	r2, r1
 808e018:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808e01c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808e020:	4610      	mov	r0, r2
 808e022:	4619      	mov	r1, r3
 808e024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808e026 <__d2b>:
 808e026:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808e02a:	461c      	mov	r4, r3
 808e02c:	2101      	movs	r1, #1
 808e02e:	4690      	mov	r8, r2
 808e030:	9e08      	ldr	r6, [sp, #32]
 808e032:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e034:	f7ff fcc0 	bl	808d9b8 <_Balloc>
 808e038:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808e03c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808e040:	4607      	mov	r7, r0
 808e042:	b10c      	cbz	r4, 808e048 <__d2b+0x22>
 808e044:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808e048:	9201      	str	r2, [sp, #4]
 808e04a:	f1b8 0f00 	cmp.w	r8, #0
 808e04e:	d019      	beq.n	808e084 <__d2b+0x5e>
 808e050:	a802      	add	r0, sp, #8
 808e052:	f840 8d08 	str.w	r8, [r0, #-8]!
 808e056:	f7ff fd94 	bl	808db82 <__lo0bits>
 808e05a:	9b00      	ldr	r3, [sp, #0]
 808e05c:	b148      	cbz	r0, 808e072 <__d2b+0x4c>
 808e05e:	9a01      	ldr	r2, [sp, #4]
 808e060:	f1c0 0120 	rsb	r1, r0, #32
 808e064:	fa02 f101 	lsl.w	r1, r2, r1
 808e068:	430b      	orrs	r3, r1
 808e06a:	40c2      	lsrs	r2, r0
 808e06c:	617b      	str	r3, [r7, #20]
 808e06e:	9201      	str	r2, [sp, #4]
 808e070:	e000      	b.n	808e074 <__d2b+0x4e>
 808e072:	617b      	str	r3, [r7, #20]
 808e074:	9b01      	ldr	r3, [sp, #4]
 808e076:	2b00      	cmp	r3, #0
 808e078:	bf14      	ite	ne
 808e07a:	2102      	movne	r1, #2
 808e07c:	2101      	moveq	r1, #1
 808e07e:	61bb      	str	r3, [r7, #24]
 808e080:	6139      	str	r1, [r7, #16]
 808e082:	e007      	b.n	808e094 <__d2b+0x6e>
 808e084:	a801      	add	r0, sp, #4
 808e086:	f7ff fd7c 	bl	808db82 <__lo0bits>
 808e08a:	9b01      	ldr	r3, [sp, #4]
 808e08c:	2101      	movs	r1, #1
 808e08e:	617b      	str	r3, [r7, #20]
 808e090:	6139      	str	r1, [r7, #16]
 808e092:	3020      	adds	r0, #32
 808e094:	b134      	cbz	r4, 808e0a4 <__d2b+0x7e>
 808e096:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808e09a:	4404      	add	r4, r0
 808e09c:	6034      	str	r4, [r6, #0]
 808e09e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808e0a2:	e009      	b.n	808e0b8 <__d2b+0x92>
 808e0a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808e0a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808e0ac:	6030      	str	r0, [r6, #0]
 808e0ae:	6918      	ldr	r0, [r3, #16]
 808e0b0:	f7ff fd47 	bl	808db42 <__hi0bits>
 808e0b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808e0b8:	6028      	str	r0, [r5, #0]
 808e0ba:	4638      	mov	r0, r7
 808e0bc:	b002      	add	sp, #8
 808e0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808e0c2 <__ratio>:
 808e0c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808e0c6:	4688      	mov	r8, r1
 808e0c8:	4669      	mov	r1, sp
 808e0ca:	4681      	mov	r9, r0
 808e0cc:	f7ff ff5e 	bl	808df8c <__b2d>
 808e0d0:	460d      	mov	r5, r1
 808e0d2:	4604      	mov	r4, r0
 808e0d4:	a901      	add	r1, sp, #4
 808e0d6:	4640      	mov	r0, r8
 808e0d8:	f7ff ff58 	bl	808df8c <__b2d>
 808e0dc:	460f      	mov	r7, r1
 808e0de:	4606      	mov	r6, r0
 808e0e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808e0e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808e0e8:	4620      	mov	r0, r4
 808e0ea:	1a9a      	subs	r2, r3, r2
 808e0ec:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808e0f0:	1ac9      	subs	r1, r1, r3
 808e0f2:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808e0f6:	2b00      	cmp	r3, #0
 808e0f8:	bfcc      	ite	gt
 808e0fa:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808e0fe:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808e102:	4632      	mov	r2, r6
 808e104:	463b      	mov	r3, r7
 808e106:	4629      	mov	r1, r5
 808e108:	f7fc f88a 	bl	808a220 <__aeabi_ddiv>
 808e10c:	b003      	add	sp, #12
 808e10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808e112 <__copybits>:
 808e112:	3901      	subs	r1, #1
 808e114:	b510      	push	{r4, lr}
 808e116:	1149      	asrs	r1, r1, #5
 808e118:	6914      	ldr	r4, [r2, #16]
 808e11a:	3101      	adds	r1, #1
 808e11c:	f102 0314 	add.w	r3, r2, #20
 808e120:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808e124:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808e128:	42a3      	cmp	r3, r4
 808e12a:	4602      	mov	r2, r0
 808e12c:	d204      	bcs.n	808e138 <__copybits+0x26>
 808e12e:	f853 2b04 	ldr.w	r2, [r3], #4
 808e132:	f840 2b04 	str.w	r2, [r0], #4
 808e136:	e7f7      	b.n	808e128 <__copybits+0x16>
 808e138:	2300      	movs	r3, #0
 808e13a:	428a      	cmp	r2, r1
 808e13c:	d202      	bcs.n	808e144 <__copybits+0x32>
 808e13e:	f842 3b04 	str.w	r3, [r2], #4
 808e142:	e7fa      	b.n	808e13a <__copybits+0x28>
 808e144:	bd10      	pop	{r4, pc}

0808e146 <__any_on>:
 808e146:	f100 0214 	add.w	r2, r0, #20
 808e14a:	6900      	ldr	r0, [r0, #16]
 808e14c:	114b      	asrs	r3, r1, #5
 808e14e:	4298      	cmp	r0, r3
 808e150:	b510      	push	{r4, lr}
 808e152:	db0c      	blt.n	808e16e <__any_on+0x28>
 808e154:	dd0c      	ble.n	808e170 <__any_on+0x2a>
 808e156:	f011 011f 	ands.w	r1, r1, #31
 808e15a:	d009      	beq.n	808e170 <__any_on+0x2a>
 808e15c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808e160:	fa24 f001 	lsr.w	r0, r4, r1
 808e164:	fa00 f101 	lsl.w	r1, r0, r1
 808e168:	428c      	cmp	r4, r1
 808e16a:	d10c      	bne.n	808e186 <__any_on+0x40>
 808e16c:	e000      	b.n	808e170 <__any_on+0x2a>
 808e16e:	4603      	mov	r3, r0
 808e170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808e174:	4293      	cmp	r3, r2
 808e176:	d904      	bls.n	808e182 <__any_on+0x3c>
 808e178:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808e17c:	2900      	cmp	r1, #0
 808e17e:	d0f9      	beq.n	808e174 <__any_on+0x2e>
 808e180:	e001      	b.n	808e186 <__any_on+0x40>
 808e182:	2000      	movs	r0, #0
 808e184:	bd10      	pop	{r4, pc}
 808e186:	2001      	movs	r0, #1
 808e188:	bd10      	pop	{r4, pc}

0808e18a <_calloc_r>:
 808e18a:	b538      	push	{r3, r4, r5, lr}
 808e18c:	fb02 f401 	mul.w	r4, r2, r1
 808e190:	4621      	mov	r1, r4
 808e192:	f7f7 fcb7 	bl	8085b04 <_malloc_r>
 808e196:	4605      	mov	r5, r0
 808e198:	b118      	cbz	r0, 808e1a2 <_calloc_r+0x18>
 808e19a:	4622      	mov	r2, r4
 808e19c:	2100      	movs	r1, #0
 808e19e:	f7fd f89e 	bl	808b2de <memset>
 808e1a2:	4628      	mov	r0, r5
 808e1a4:	bd38      	pop	{r3, r4, r5, pc}

0808e1a6 <__env_lock>:
 808e1a6:	4770      	bx	lr

0808e1a8 <__env_unlock>:
 808e1a8:	4770      	bx	lr

0808e1aa <link_code_end>:
	...

0808e1ac <dynalib_user>:
 808e1ac:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808e1bc:	0000 0000                                   ....

0808e1c0 <_ZTVN8particle13__SPISettingsE>:
	...
 808e1c8:	016d 0808                                   m...

0808e1cc <_ZTVN5spark10LogHandlerE>:
	...
 808e1dc:	00b1 0808 00d5 0808                         ........

0808e1e4 <_ZTVN5spark16SerialLogHandlerE>:
	...
 808e1ec:	0229 0808 025d 0808 74dd 0808 00d7 0808     )...]....t......

0808e1fc <_ZTC16ArduinoOutStream0_7ostream>:
 808e1fc:	0008 0000 0000 0000 0000 0000 00b1 0808     ................
 808e20c:	00b1 0808 00b1 0808 00b1 0808 00b1 0808     ................
 808e21c:	00b1 0808                                   ....

0808e220 <_ZTT16ArduinoOutStream>:
 808e220:	e234 0808 e208 0808                         4.......

0808e228 <_ZTV16ArduinoOutStream>:
 808e228:	0008 0000 0000 0000 0000 0000 00df 0808     ................
 808e238:	01df 0808 0101 0808 0105 0808 0109 0808     ................
 808e248:	010d 0808                                   ....

0808e24c <_ZTV6SdFile>:
	...
 808e254:	012d 0808 015d 0808 020f 0808 01c9 0808     -...]...........
 808e264:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
 808e274:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
 808e284:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
 808e294:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
 808e2a4:	2545 3e64 6100 7070 6477 0074 6164 6574     E%d>.appwdt.date
 808e2b4:	6974 656d 202c 7441 6d65 2c70 4820 4f32     time, Atemp, H2O
 808e2c4:	6574 706d 202c 7053 435f 2c20 4120 6f76     temp, Sp_C , Avo
 808e2d4:	746c 2c73 7220 6961 2c6e 6420 7065 6874     lts, rain, depth
 808e2e4:	695f 2c6e 6820 6d75 6469 202c 7041 6572     _in, humid, Apre
 808e2f4:	7373 7275 2c65 4820 4f32 7270 7365 7573     ssure, H2Opressu
 808e304:	6572 202c 6f53 2c43 7620 6c6f 7374 4e00     re, SoC, volts.N
 808e314:	206f 5900 7365 0020 6f6c 7473 742d 6d69     o .Yes .lost-tim
 808e324:	3065 3030 632e 7673 5f00 2500 2d59 6d25     e000.csv._.%Y-%m
 808e334:	252d 0064 6620 6c69 6e65 6d61 0065 6143     -%d. filename.Ca
 808e344:	656d 6172 4620 756f 646e 003a 6f4e 6320     mera Found:.No c
 808e354:	6d61 7265 2061 6f66 6e75 3f64 5300 616e     amera found?.Sna
 808e364:	2070 6e69 3120 322f 7320 6365 2e73 2e2e     p in 1/2 secs...
 808e374:	4600 6961 656c 2064 6f74 7320 616e 2170     .Failed to snap!
 808e384:	5000 6369 7574 6572 7420 6b61 6e65 0021     .Picture taken!.
 808e394:	6f6c 7473 742d 6d69 3065 3030 6a2e 6770     lost-time000.jpg
 808e3a4:	2500 2d59 6d25 252d 2d64 4825 252d 004d     .%Y-%m-%d-%H-%M.
 808e3b4:	6220 7479 2065 6d69 6761 2e65 0020 6d20      byte image. . m
 808e3c4:	2073 6c65 7061 6573 0064 7277 7469 2065     s elapsed.write 
 808e3d4:	7265 6f72 0072 6f4c 0067 4453 772d 6972     error.Log.SD-wri
 808e3e4:	6574 7720 726f 656b 2064 7461 2520 0073     te worked at %s.
 808e3f4:	4453 772d 6972 6574 4620 4941 454c 2044     SD-write FAILED 
 808e404:	7461 2520 0073 7250 7365 7573 6572 685f     at %s.Pressure_h
 808e414:	4150 4800 4f32 542d 6d65 5f70 0043 3248     PA.H2O-Temp_C.H2
 808e424:	5f4f 5068 0041 6544 7470 5f68 6e69 5600     O_hPA.Depth_in.V
 808e434:	6c6f 7374 5300 434f 5300 5f70 6f43 646e     olts.SOC.Sp_Cond
 808e444:	4100 762e 6c6f 7374 2c00 2520 3530 322e     .A.volts., %05.2
 808e454:	2c66 2520 3530 322e 2c66 2520 3630 312e     f, %05.2f, %06.1
 808e464:	2c66 2520 3530 332e 2c66 2520 3430 302e     f, %05.3f, %04.0
 808e474:	2c66 2520 3630 332e 2c66 2520 3530 322e     f, %06.3f, %05.2
 808e484:	2c66 2520 3630 312e 2c66 2520 3630 312e     f, %06.1f, %06.1
 808e494:	2c66 2520 3530 322e 2c66 2520 3430 322e     f, %05.2f, %04.2
 808e4a4:	0066 4c0a 7369 2074 666f 6620 6c69 7365     f..List of files
 808e4b4:	6f20 206e 6874 2065 4453 0a2e 2000 6874      on the SD... th
 808e4c4:	7369 6620 726f 6563 2073 6874 2065 6966     is forces the fi
 808e4d4:	656c 2073 6f74 6220 2065 7277 7469 6574     les to be writte
 808e4e4:	206e 6f74 5320 2044 3225 2069 696d 756e     n to SD %2i minu
 808e4f4:	6574 0073 6152 6e69 4100 7269 542d 6d65     tes.Rain.Air-Tem
 808e504:	5f70 0043 7548 696d 6964 7974 255f 6c00     p_C.Humidity_%.l
 808e514:	6e6f 0067 6e69 6420 6c65 7961 6954 656d     ong.in delayTime
 808e524:	5000 7261 6974 6c63 0065 6f63 6c75 2064     .Particle.could 
 808e534:	6f6e 2074 6966 646e 6220 656d 0031 624f     not find bme1.Ob
 808e544:	4469 746f 0073 6544 616c 0079 6e65 6964     iDots.Delay.endi
 808e554:	676e 7320 7465 7075 5300 7570 6e64 6b69     ng setup.Spudnik
 808e564:	302d 6238 4200 4642 2d46 324d 5958 4d7a     -08b.BBFF-M2XYzM
 808e574:	4849 786a 4976 4765 306a 5768 3837 6850     IHjxvIeGj0hW78Ph
 808e584:	7732 5145 7950 366c 5400 6568 6572 6920     2wEQPyl6.There i
 808e594:	2073 6c61 6572 6461 2079 6e61 6920 736e     s already an ins
 808e5a4:	6174 636e 2065 666f 5020 7261 6974 6c63     tance of Particl
 808e5b4:	5365 666f 5374 7265 6169 206c 7572 6e6e     eSoftSerial runn
 808e5c4:	6e69 2067 6e6f 7020 6e69 2073 5852 6425     ing on pins RX%d
 808e5d4:	2f20 5420 2558 0064 6c25 2075 6f6e 2074      / TX%d.%lu not 
 808e5e4:	7661 6961 616c 6c62 2165 5320 6c65 6365     available! Selec
 808e5f4:	6574 2064 6172 6574 2520 756c 0000 0000     ted rate %lu....

0808e604 <_ZL7btTable>:
 808e604:	e100 0000 0009 0000 0010 0000 9600 0000     ................
 808e614:	0018 0000 0018 0000 7a12 0000 001f 0000     .........z......
 808e624:	001f 0000 7080 0000 0025 0000 0021 0000     .....p..%...!...
 808e634:	4b00 0000 003d 0000 0033 0000 3840 0000     .K..=...3...@8..
 808e644:	005a 0000 0044 0000 2580 0000 008c 0000     Z...D....%......
 808e654:	0068 0000 12c0 0000 0127 0000 00d0 0000     h.......'.......
 808e664:	0960 0000 0262 0000 01a1 0000 04b0 0000     `...b...........
 808e674:	04ce 0000 0341 0000 0258 0000 09c4 0000     ....A...X.......
 808e684:	0683 0000 012c 0000 1388 0000 0d05 0000     ....,...........
	...
 808e6a0:	7441 6574 706d 6974 676e 7420 206f 6572     Attempting to re
 808e6b0:	6f63 6e6e 6365 0074 7254 6979 676e 7420     connect.Trying t
 808e6c0:	206f 6f63 6e6e 6365 2074 6f74 0020 2c20     o connect to . ,
 808e6d0:	6120 7474 6d65 7470 6e20 6d75 6562 3a72      attempt number:
 808e6e0:	0020 6974 656d 756f 2c74 6320 756f 646c      .timeout, could
 808e6f0:	6e20 746f 7220 6165 2064 6e61 2079 6572      not read any re
 808e700:	7073 6e6f 6573 6620 6f72 206d 6874 2065     sponse from the 
 808e710:	6f68 7473 5300 7265 6576 2772 2073 6572     host.Server's re
 808e720:	7073 6e6f 6573 003a 2d0a 2d2d 2d2d 2d2d     sponse:..-------
 808e730:	2d2d 002d 4f50 5453 4f00 004b 4c7c 7c56     ---.POST.OK.|LV|
 808e740:	5000 7961 6f6c 6461 6620 726f 7220 7165     .Payload for req
 808e750:	6575 7473 003a 2d0a 2d2d 002d 564c 4500     uest:..----.LV.E
 808e760:	5252 524f 6320 756f 646c 6e20 746f 6320     RROR could not c
 808e770:	6e6f 656e 7463 7420 206f 6874 2065 6573     onnect to the se
 808e780:	7672 7265 4300 756f 646c 6e20 746f 6320     rver.Could not c
 808e790:	6e6f 656e 7463 7420 206f 6874 2065 6f68     onnect to the ho
 808e7a0:	7473 0000                                   st..

0808e7a4 <_ZTV6UbiTCP>:
	...
 808e7ac:	3c31 0808 3add 0808 38e9 0808 6f59 2075     1<...:...8..You 
 808e7bc:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
 808e7cc:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
 808e7dc:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
 808e7ec:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
 808e7fc:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
 808e80c:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
 808e81c:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
 808e82c:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
 808e83c:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
 808e84c:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
 808e85c:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
 808e86c:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
 808e87c:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
 808e88c:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
 808e89c:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
 808e8ac:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
 808e8bc:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
 808e8cc:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
 808e8dc:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
 808e8ec:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
 808e8fc:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
 808e90c:	474e 205d 6c70 6165 6573 6320 6f68 736f     NG] please choos
 808e91c:	2065 2061 6964 6666 7265 6e65 2074 6c63     e a different cl
 808e92c:	756f 2064 7270 746f 636f 6c6f 6f20 2066     oud protocol of 
 808e93c:	654d 6873 6920 206e 6874 2065 6255 6469     Mesh in the Ubid
 808e94c:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
 808e95c:	575b 5241 494e 474e 205d 6f59 7275 6220     [WARNING] Your b
 808e96c:	616f 6472 6420 656f 2073 6f6e 2074 7573     oard does not su
 808e97c:	7070 726f 2074 6874 2065 656d 6873 7550     pport the meshPu
 808e98c:	6c62 7369 5468 556f 6962 6f64 7374 2928     blishToUbidots()
 808e99c:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808e9ac:	205d 6f59 7275 6220 616f 6472 6420 656f     ] Your board doe
 808e9bc:	2073 6f6e 2074 7573 7070 726f 2074 6874     s not support th
 808e9cc:	2065 656d 6873 6f4c 706f 2928 6d20 7465     e meshLoop() met
 808e9dc:	6f68 0064 575b 5241 494e 474e 205d 6f59     hod.[WARNING] Yo
 808e9ec:	7275 6220 616f 6472 6420 656f 2073 6f6e     ur board does no
 808e9fc:	2074 7573 7070 726f 2074 6874 2065 6573     t support the se
 808ea0c:	4374 6f6c 6475 7250 746f 636f 6c6f 2928     tCloudProtocol()
 808ea1c:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808ea2c:	205d 6854 2065 654d 6873 5020 6f72 6f74     ] The Mesh Proto
 808ea3c:	6f63 206c 7369 6e20 746f 7320 7075 6f70     col is not suppo
 808ea4c:	7472 6465 6920 206e 6874 7369 6420 7665     rted in this dev
 808ea5c:	6369 2065 6f66 2072 6573 646e 6e69 2067     ice for sending 
 808ea6c:	6164 6174 5b00 6157 6e72 6e69 5d67 5420     data.[Warning] T
 808ea7c:	206f 6572 7274 6569 6576 6420 7461 2c61     o retrieve data,
 808ea8c:	7020 656c 7361 2065 6573 2074 2061 6176      please set a va
 808ea9c:	696c 2064 6c63 756f 2064 7270 746f 636f     lid cloud protoc
 808eaac:	6c6f 6920 206e 6874 2065 6255 6469 746f     ol in the Ubidot
 808eabc:	2073 6f63 736e 7274 6375 6f74 0072 6f59     s constructor.Yo
 808eacc:	2075 7261 2065 6461 6964 676e 6d20 726f     u are adding mor
 808eadc:	2065 6874 6e61 7420 6568 6d20 7861 6d69     e than the maxim
 808eaec:	6d75 6f20 2066 6f63 736e 6365 7475 7669     um of consecutiv
 808eafc:	2065 656b 2d79 6176 756c 7365 7020 6961     e key-values pai
 808eb0c:	7372 2500 2573 3d73 7325 2500 2473 2500     rs.%s%s=%s.%s$.%
 808eb1c:	2273 7325 3a22 2522 2273 0000               s"%s":"%s"..

0808eb28 <_ZTV7UbiHTTP>:
	...
 808eb30:	4115 0808 4365 0808 3eef 0808 7441 6574     .A..eC...>..Atte
 808eb40:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
 808eb50:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
 808eb60:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
 808eb70:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
 808eb80:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
 808eb90:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
 808eba0:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
 808ebb0:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
 808ebc0:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
 808ebd0:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
 808ebe0:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
 808ebf0:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
 808ec00:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
 808ec10:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
 808ec20:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
 808ec30:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
 808ec40:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
 808ec50:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
 808ec60:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
 808ec70:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
 808ec80:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
 808ec90:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
 808eca0:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
 808ecb0:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

0808ecbe <_ZStL19piecewise_construct>:
 808ecbe:	5b00 6157 6e72 6e69 5d67 4320 756f 646c     .[Warning] Could
 808ecce:	6e20 746f 7320 6c6f 6576 4920 2050 6441      not solve IP Ad
 808ecde:	7264 7365 2073 666f 7420 6568 7220 6d65     dress of the rem
 808ecee:	746f 2065 6f68 7473 202c 6977 6874 7920     ote host, with y
 808ecfe:	756f 2072 4e44 2053 6573 7574 2e70 2020     our DNS setup.  
 808ed0e:	2020 2020 2020 2020 0a20 7355 6e69 2067              .Using 
 808ed1e:	6564 6166 6c75 2074 6e49 7564 7473 6972     default Industri
 808ed2e:	6c61 5520 6962 6f64 7374 4920 3a50 3120     al Ubidots IP: 1
 808ed3e:	3936 352e 2e35 3136 322e 3334 4500 5252     69.55.61.243.ERR
 808ed4e:	524f 7320 6e65 6964 676e 7620 6c61 6575     OR sending value
 808ed5e:	2073 6977 6874 5520 5044 0000 0000          s with UDP....

0808ed6c <_ZTV6UbiUDP>:
	...
 808ed74:	4a29 0808 49b9 0808 49c1 0808               )J...I...I..

0808ed80 <_ZTV11UbiParticle>:
	...
 808ed88:	4b6b 0808 4b09 0808 4b11 0808               kK...K...K..

0808ed94 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808ed94:	0800 1810 2820 3830                         .... (08

0808ed9c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 808eda4:	60c9 0808 60cf 0808 64b7 0808 60dd 0808     .`...`...d...`..
 808edb4:	60cb 0808                                   .`..

0808edb8 <_ZTV9TCPClient>:
	...
 808edc0:	38ed 0808 3921 0808 6071 0808 608b 0808     .8..!9..q`...`..
 808edd0:	61c5 0808 612f 0808 6101 0808 60b3 0808     .a../a...a...`..
 808ede0:	626d 0808 64d1 0808 6163 0808 623d 0808     mb...d..ca..=b..
 808edf0:	63af 0808 6401 0808 609b 0808 6373 0808     .c...d...`..sc..
 808ee00:	60b5 0808 6977 6972 676e 5400 5043 6c43     .`..wiring.TCPCl
 808ee10:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

0808ee20 <_ZTVN5spark16JSONStreamWriterE>:
	...
 808ee28:	6877 0808 689d 0808 6851 0808 8edf 0808     wh...h..Qh......

0808ee38 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 808ee40:	6d39 0808 6d4d 0808 7691 0808 6859 0808     9m..Mm...v..Yh..
 808ee50:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 808ee60:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
 808ee70:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
 808ee80:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
 808ee90:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
 808eea0:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
 808eeb0:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
 808eec0:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
 808eed0:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
 808eee0:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
 808eef0:	2073 203d 6c00 006e 6e66 6300 646f 0065     s = .ln.fn.code.
 808ef00:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 808ef10:	0065 6e69 6f66 7700 7261 006e 6170 696e     e.info.warn.pani
 808ef20:	0063 6c61 006c 0000                         c.all...

0808ef28 <_ZTVN5spark16StreamLogHandlerE>:
	...
 808ef30:	6d0d 0808 6d25 0808 74dd 0808 00d7 0808     .m..%m...t......

0808ef40 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 808ef48:	6875 0808 68ab 0808 7405 0808 685b 0808     uh...h...t..[h..

0808ef58 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 808ef60:	6873 0808 68b9 0808 6c31 0808 68c7 0808     sh...h..1l...h..
 808ef70:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
 808ef80:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 808ef90:	6373 6974 656d 0000                         sctime..

0808ef98 <_ZTV3UDP>:
	...
 808efa0:	4641 0808 4661 0808 7b35 0808 7c5b 0808     AF..aF..5{..[|..
 808efb0:	7af9 0808 7b4b 0808 7b69 0808 7b83 0808     .z..K{..i{...{..
 808efc0:	7ba5 0808 7bf5 0808 7c17 0808 7aad 0808     .{...{...|...z..
 808efd0:	7cc1 0808 7ad1 0808 7e15 0808 7d29 0808     .|...z...~..)}..
 808efe0:	7b01 0808 7e39 0808 7c85 0808 7add 0808     .{..9~...|...z..
 808eff0:	7ae5 0808 7af5 0808 7b85 0808 fff0 ffff     .z...z...{......
 808f000:	0000 0000 7b9d 0808                         .....{..

0808f008 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808f010:	812d 0808 8133 0808 8177 0808 8141 0808     -...3...w...A...
 808f020:	812f 0808                                   /...

0808f024 <_ZTV9IPAddress>:
	...
 808f02c:	871d 0808 870d 0808 870f 0808               ............

0808f038 <_ZTV9USBSerial>:
	...
 808f040:	87cf 0808 881f 0808 882d 0808 6731 0808     ........-...1g..
 808f050:	880b 0808 87d1 0808 87e7 0808 8819 0808     ................
 808f060:	87fd 0808 87cb 0808                         ........

0808f068 <_ZTVN5spark13CellularClassE>:
	...
 808f070:	8b23 0808 8b19 0808 8b0f 0808 8a81 0808     #...............
 808f080:	8b03 0808 8af7 0808 8aeb 0808 8ae3 0808     ................
 808f090:	8ad9 0808 8acf 0808 8a8b 0808               ............

0808f09c <_ZTV11USARTSerial>:
	...
 808f0a4:	8b5d 0808 8bad 0808 8bbb 0808 6731 0808     ]...........1g..
 808f0b4:	8b71 0808 8b93 0808 8b7f 0808 8ba7 0808     q...............
 808f0c4:	8b5f 0808 8b63 0808                         _...c...

0808f0cc <_ZTV7TwoWire>:
	...
 808f0d4:	8c9d 0808 8ce7 0808 8cbf 0808 8c9f 0808     ................
 808f0e4:	8cc7 0808 8ccf 0808 8cd7 0808 8cdf 0808     ................

0808f0f4 <_ZTVN5spark12NetworkClassE>:
	...
 808f0fc:	8dcf 0808 8dd9 0808 8de3 0808 8ded 0808     ................
 808f10c:	8df7 0808 8e03 0808 8e0f 0808 8e1b 0808     ................
 808f11c:	8e23 0808 8e2d 0808 8e39 0808 2e30 0030     #...-...9...0.0.
 808f12c:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
 808f13c:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
 808f14c:	0078                                        x.

0808f14e <_ZSt7nothrow>:
	...

0808f14f <day_name.4723>:
 808f14f:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808f15f:	6972 6153 4a74                                   riSat

0808f164 <mon_name.4724>:
 808f164:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808f174:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808f184:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808f194:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808f1a4:	6425 000a                                   %d..

0808f1a8 <_ctype_>:
 808f1a8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808f1b8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808f1c8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808f1d8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808f1e8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808f1f8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808f208:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808f218:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808f228:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808f2ac <__sf_fake_stdin>:
	...

0808f2cc <__sf_fake_stdout>:
	...

0808f2ec <__sf_fake_stderr>:
	...
 808f30c:	4f50 4953 0058 0000                         POSIX...

0808f314 <__month_lengths>:
 808f314:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808f324:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808f334:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808f344:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808f354:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808f364:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808f374:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808f384:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 808f394:	322e 0064 2a2e 0075 2e25 6433 2500 6c6c     .2d..*u.%.3d.%ll
 808f3a4:	0064 2e25 6432 253a 322e 3a64 2e25 6432     d.%.2d:%.2d:%.2d
 808f3b4:	2500 302b 6c33 2564 322e 646c 0000 0000     .%+03ld%.2ld....

0808f3c4 <fpi.5342>:
 808f3c4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808f3d4:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

0808f3e4 <fpinan.5378>:
 808f3e4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808f3f4:	0000 0000                                   ....

0808f3f8 <tinytens>:
 808f3f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808f408:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808f418:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 808f428:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 808f438:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 808f448:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 808f458:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 808f468:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 808f478:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 808f488:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 808f498:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 808f4a8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 808f4b8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 808f4c8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 808f4d8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 808f4e8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 808f4f8:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 808f508:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 808f518:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 808f528:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 808f538:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 808f548:	3a4d 5325 2520 0070                         M:%S %p.

0808f550 <_C_time_locale>:
 808f550:	f428 0808 f42c 0808 f430 0808 f434 0808     (...,...0...4...
 808f560:	f438 0808 f43c 0808 f440 0808 f444 0808     8...<...@...D...
 808f570:	f448 0808 f44c 0808 f450 0808 f454 0808     H...L...P...T...
 808f580:	f458 0808 f460 0808 f469 0808 f46f 0808     X...`...i...o...
 808f590:	f438 0808 f475 0808 f47a 0808 f47f 0808     8...u...z.......
 808f5a0:	f486 0808 f490 0808 f498 0808 f4a1 0808     ................
 808f5b0:	f4aa 0808 f4ae 0808 f4b2 0808 f4b6 0808     ................
 808f5c0:	f4ba 0808 f4be 0808 f4c2 0808 f4c6 0808     ................
 808f5d0:	f4cd 0808 f4d4 0808 f4dc 0808 f4e6 0808     ................
 808f5e0:	f4ef 0808 f4f6 0808 f4ff 0808 f508 0808     ................
 808f5f0:	f511 0808 f526 0808 f529 0808 f52c 0808     ....&...)...,...
 808f600:	f458 0808 f460 0808 f469 0808 f46f 0808     X...`...i...o...
 808f610:	f438 0808 f475 0808 f47a 0808 f47f 0808     8...u...z.......
 808f620:	f486 0808 f490 0808 f498 0808 f4a1 0808     ................
 808f630:	ee73 0808 f544 0808 ec97 0808 ec97 0808     s...D...........
 808f640:	ec97 0808 ec97 0808 ec97 0808 5a54 4700     ............TZ.G
 808f650:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808f660:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808f670:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808f680:	3a6e 6825 2575 006e                         n:%hu%n.

0808f688 <__mprec_tens>:
 808f688:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808f698:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808f6a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808f6b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808f6c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808f6d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808f6e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808f6f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808f708:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808f718:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808f728:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808f738:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808f748:	9db4 79d9 7843 44ea                         ...yCx.D

0808f750 <__mprec_bigtens>:
 808f750:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808f760:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808f770:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808f778 <p05.5385>:
 808f778:	0005 0000 0019 0000 007d 0000               ........}...

0808f784 <link_const_variable_data_end>:
 808f784:	080812ed 	.word	0x080812ed
 808f788:	0808177d 	.word	0x0808177d
 808f78c:	08081781 	.word	0x08081781
 808f790:	08081785 	.word	0x08081785
 808f794:	08081ea1 	.word	0x08081ea1
 808f798:	08081ea5 	.word	0x08081ea5
 808f79c:	08081f1f 	.word	0x08081f1f
 808f7a0:	08081f73 	.word	0x08081f73
 808f7a4:	080827ad 	.word	0x080827ad
 808f7a8:	080829f5 	.word	0x080829f5
 808f7ac:	080829f9 	.word	0x080829f9
 808f7b0:	08082d1d 	.word	0x08082d1d
 808f7b4:	08082d21 	.word	0x08082d21
 808f7b8:	08082d25 	.word	0x08082d25
 808f7bc:	0808325f 	.word	0x0808325f
 808f7c0:	08083263 	.word	0x08083263
 808f7c4:	08083267 	.word	0x08083267
 808f7c8:	0808330d 	.word	0x0808330d
 808f7cc:	08083899 	.word	0x08083899
 808f7d0:	080838e5 	.word	0x080838e5
 808f7d4:	08083cc9 	.word	0x08083cc9
 808f7d8:	08083e15 	.word	0x08083e15
 808f7dc:	08083eeb 	.word	0x08083eeb
 808f7e0:	08084539 	.word	0x08084539
 808f7e4:	0808494d 	.word	0x0808494d
 808f7e8:	080849a9 	.word	0x080849a9
 808f7ec:	08084ae1 	.word	0x08084ae1
 808f7f0:	08084bd3 	.word	0x08084bd3
 808f7f4:	0808504d 	.word	0x0808504d
 808f7f8:	080853a5 	.word	0x080853a5
 808f7fc:	0808603d 	.word	0x0808603d
 808f800:	080874cd 	.word	0x080874cd
 808f804:	08087a91 	.word	0x08087a91
 808f808:	08087e9d 	.word	0x08087e9d
 808f80c:	08088b2d 	.word	0x08088b2d
 808f810:	08088e9d 	.word	0x08088e9d
 808f814:	080896fd 	.word	0x080896fd
 808f818:	080899cd 	.word	0x080899cd
 808f81c:	08089a51 	.word	0x08089a51
 808f820:	08089b15 	.word	0x08089b15
 808f824:	08089bd9 	.word	0x08089bd9

0808f828 <link_constructors_end>:
	...
