
g:/tmp/test2/Spudnik-SD-Photo/target/1.5.2/electron/Spudnik-SD-Photo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e360  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  0808e380  0808e380  0001e380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  0808e388  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000140  20000000  0808e38c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f78  20000140  20000140  00040140  2**2
                  ALLOC
  7 .module_info_suffix 00000028  0808e4cc  0808e4cc  0003e4cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0808e4f4  0808e4f4  0003e4f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001fa2ac  00000000  00000000  0003e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002af9f  00000000  00000000  002387a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00030b1c  00000000  00000000  00263743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003c30  00000000  00000000  0029425f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006630  00000000  00000000  00297e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c5e9  00000000  00000000  0029e4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006b08f  00000000  00000000  002eaaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d06bc  00000000  00000000  00355b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0001157c  00000000  00000000  004261f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f009 ff4e 	bl	8089ed2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f009 ff53 	bl	8089ee8 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808e38c 	.word	0x0808e38c
 8080050:	20000140 	.word	0x20000140
 8080054:	20000140 	.word	0x20000140
 8080058:	200010b8 	.word	0x200010b8
 808005c:	200010b8 	.word	0x200010b8

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f007 f815 	bl	8087090 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808e2dc 	.word	0x0808e2dc
 8080088:	0808e380 	.word	0x0808e380

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 b92a 	b.w	80812e4 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fc85 	bl	80809a0 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f006 bfbb 	b.w	8087014 <_post_loop>

0808009e <_Znwj>:
 808009e:	f005 bc33 	b.w	8085908 <malloc>

080800a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80800a2:	f005 bc31 	b.w	8085908 <malloc>

080800a6 <_ZdlPv>:
 80800a6:	f005 bc37 	b.w	8085918 <free>

080800aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800aa:	f005 bc35 	b.w	8085918 <free>

080800ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800ae:	7800      	ldrb	r0, [r0, #0]
 80800b0:	fab0 f080 	clz	r0, r0
 80800b4:	0940      	lsrs	r0, r0, #5
 80800b6:	4770      	bx	lr

080800b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b8:	2301      	movs	r3, #1
 80800ba:	7003      	strb	r3, [r0, #0]
 80800bc:	4770      	bx	lr

080800be <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800be:	6803      	ldr	r3, [r0, #0]
 80800c0:	4718      	bx	r3

080800c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800c2:	2a01      	cmp	r2, #1
 80800c4:	d002      	beq.n	80800cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800c6:	2a02      	cmp	r2, #2
 80800c8:	d002      	beq.n	80800d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800ca:	e004      	b.n	80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800cc:	6001      	str	r1, [r0, #0]
	      break;
 80800ce:	e002      	b.n	80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800d0:	680b      	ldr	r3, [r1, #0]
 80800d2:	b100      	cbz	r0, 80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800d4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800d6:	2000      	movs	r0, #0
 80800d8:	4770      	bx	lr

080800da <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 80800da:	4770      	bx	lr

080800dc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80800dc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80800de:	2301      	movs	r3, #1
 80800e0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80800e2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80800e4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80800e6:	b10b      	cbz	r3, 80800ec <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80800e8:	68c0      	ldr	r0, [r0, #12]
 80800ea:	e006      	b.n	80800fa <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80800ec:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80800ee:	b128      	cbz	r0, 80800fc <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80800f0:	6883      	ldr	r3, [r0, #8]
 80800f2:	b90b      	cbnz	r3, 80800f8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80800f4:	f008 fa86 	bl	8088604 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80800f8:	68c3      	ldr	r3, [r0, #12]
 80800fa:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80800fc:	2301      	movs	r3, #1
 80800fe:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 8080100:	2000      	movs	r0, #0
    }
 8080102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 8080106:	f005 b9b3 	b.w	8085470 <os_thread_exit>

0808010a <_ZN6SdFileD0Ev>:
 808010a:	b510      	push	{r4, lr}
 808010c:	4604      	mov	r4, r0
 808010e:	212c      	movs	r1, #44	; 0x2c
 8080110:	f008 f9ac 	bl	808846c <_ZdlPvj>
 8080114:	4620      	mov	r0, r4
 8080116:	bd10      	pop	{r4, pc}

08080118 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080118:	3008      	adds	r0, #8
 808011a:	f002 b91d 	b.w	8082358 <_ZN7FatFile5writeEPKvj>
	...

08080120 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080122:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080124:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080126:	4608      	mov	r0, r1
 8080128:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 808012a:	b133      	cbz	r3, 808013a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 808012c:	b93d      	cbnz	r5, 808013e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 808012e:	490c      	ldr	r1, [pc, #48]	; (8080160 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080130:	b004      	add	sp, #16
 8080132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080136:	f006 ba53 	b.w	80865e0 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 808013a:	4b0a      	ldr	r3, [pc, #40]	; (8080164 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 808013c:	e000      	b.n	8080140 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 808013e:	4b0a      	ldr	r3, [pc, #40]	; (8080168 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080140:	7b16      	ldrb	r6, [r2, #12]
 8080142:	4c0a      	ldr	r4, [pc, #40]	; (808016c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080144:	490a      	ldr	r1, [pc, #40]	; (8080170 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080146:	7b52      	ldrb	r2, [r2, #13]
 8080148:	2e01      	cmp	r6, #1
 808014a:	bf08      	it	eq
 808014c:	4621      	moveq	r1, r4
 808014e:	9202      	str	r2, [sp, #8]
 8080150:	9101      	str	r1, [sp, #4]
 8080152:	9500      	str	r5, [sp, #0]
 8080154:	4a07      	ldr	r2, [pc, #28]	; (8080174 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 8080156:	2100      	movs	r1, #0
 8080158:	f006 fa82 	bl	8086660 <_ZN5Print11printf_implEbPKcz>
  }
 808015c:	b004      	add	sp, #16
 808015e:	bd70      	pop	{r4, r5, r6, pc}
 8080160:	0808cca5 	.word	0x0808cca5
 8080164:	0808d853 	.word	0x0808d853
 8080168:	0808cc94 	.word	0x0808cc94
 808016c:	0808cc9d 	.word	0x0808cc9d
 8080170:	0808cca1 	.word	0x0808cca1
 8080174:	0808ccbb 	.word	0x0808ccbb

08080178 <_Z15watchdogHandlerv>:
  // Do not attempt to Particle.publish(), use Cellular.command()
  // or similar functions. You can save data to a retained variable
  // here safetly so you know the watchdog triggered when you 
  // restart.
  // In 2.0.0 and later, RESET_NO_WAIT prevents notifying the cloud of a pending reset
  System.reset();
 8080178:	f005 be89 	b.w	8085e8e <_ZN11SystemClass5resetEv>

0808017c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 808017c:	b510      	push	{r4, lr}
 808017e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8080180:	6880      	ldr	r0, [r0, #8]
 8080182:	b108      	cbz	r0, 8080188 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8080184:	f005 f95c 	bl	8085440 <os_mutex_recursive_destroy>
 8080188:	4620      	mov	r0, r4
 808018a:	bd10      	pop	{r4, pc}

0808018c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808018c:	b510      	push	{r4, lr}
 808018e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080190:	6800      	ldr	r0, [r0, #0]
 8080192:	b108      	cbz	r0, 8080198 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080194:	f005 fbc0 	bl	8085918 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080198:	4620      	mov	r0, r4
 808019a:	bd10      	pop	{r4, pc}

0808019c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808019c:	b507      	push	{r0, r1, r2, lr}
 808019e:	ab02      	add	r3, sp, #8
 80801a0:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80801a4:	2201      	movs	r2, #1
 80801a6:	4619      	mov	r1, r3
 80801a8:	3008      	adds	r0, #8
 80801aa:	f002 f8d5 	bl	8082358 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80801ae:	b003      	add	sp, #12
 80801b0:	f85d fb04 	ldr.w	pc, [sp], #4

080801b4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80801b4:	2200      	movs	r2, #0
 80801b6:	4611      	mov	r1, r2
 80801b8:	6840      	ldr	r0, [r0, #4]
 80801ba:	f005 bb2d 	b.w	8085818 <network_ready>

080801be <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80801be:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80801c0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80801c2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80801c4:	b113      	cbz	r3, 80801cc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80801c6:	2203      	movs	r2, #3
 80801c8:	4601      	mov	r1, r0
 80801ca:	4798      	blx	r3
    }
 80801cc:	4620      	mov	r0, r4
 80801ce:	bd10      	pop	{r4, pc}

080801d0 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 80801d0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801d2:	f005 f8f5 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801d6:	4b01      	ldr	r3, [pc, #4]	; (80801dc <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 80801d8:	6018      	str	r0, [r3, #0]
 80801da:	bd08      	pop	{r3, pc}
 80801dc:	20000eb0 	.word	0x20000eb0

080801e0 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
	}
	ApplicationWatchdog(std::chrono::milliseconds ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80801e0:	b570      	push	{r4, r5, r6, lr}
 80801e2:	461d      	mov	r5, r3
 80801e4:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80801e6:	2300      	movs	r3, #0
 80801e8:	4604      	mov	r4, r0
 80801ea:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80801ec:	b122      	cbz	r2, 80801f8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80801ee:	4b27      	ldr	r3, [pc, #156]	; (808028c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80801f0:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80801f2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80801f4:	4b26      	ldr	r3, [pc, #152]	; (8080290 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 80801f6:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80801f8:	2300      	movs	r3, #0
 80801fa:	60e3      	str	r3, [r4, #12]
 80801fc:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80801fe:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080200:	b13b      	cbz	r3, 8080212 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080202:	2202      	movs	r2, #2
 8080204:	a902      	add	r1, sp, #8
 8080206:	1d20      	adds	r0, r4, #4
 8080208:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808020a:	9b05      	ldr	r3, [sp, #20]
 808020c:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 808020e:	9b04      	ldr	r3, [sp, #16]
 8080210:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 8080212:	4920      	ldr	r1, [pc, #128]	; (8080294 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb4>)
 8080214:	2014      	movs	r0, #20
 8080216:	f008 f92d 	bl	8088474 <_ZnwjRKSt9nothrow_t>
 808021a:	b130      	cbz	r0, 808022a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 808021c:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 808021e:	7403      	strb	r3, [r0, #16]
 8080220:	6003      	str	r3, [r0, #0]
 8080222:	6043      	str	r3, [r0, #4]
 8080224:	6083      	str	r3, [r0, #8]
 8080226:	60c3      	str	r3, [r0, #12]
 8080228:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808022a:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 808022c:	b1a0      	cbz	r0, 8080258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 808022e:	4b1a      	ldr	r3, [pc, #104]	; (8080298 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb8>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080230:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 8080232:	6083      	str	r3, [r0, #8]
 8080234:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080236:	4919      	ldr	r1, [pc, #100]	; (808029c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xbc>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 8080238:	60dc      	str	r4, [r3, #12]
 808023a:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808023c:	4b18      	ldr	r3, [pc, #96]	; (80802a0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xc0>)
 808023e:	e88d 0021 	stmia.w	sp, {r0, r5}
 8080242:	3004      	adds	r0, #4
 8080244:	f005 f8e4 	bl	8085410 <os_thread_create>
 8080248:	b930      	cbnz	r0, 8080258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 808024a:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 808024c:	7c1b      	ldrb	r3, [r3, #16]
 808024e:	b9a3      	cbnz	r3, 808027a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8080250:	2001      	movs	r0, #1
 8080252:	f005 f8a5 	bl	80853a0 <HAL_Delay_Milliseconds>
 8080256:	e7f8      	b.n	808024a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080258:	6965      	ldr	r5, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 808025a:	2300      	movs	r3, #0
 808025c:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 808025e:	b165      	cbz	r5, 808027a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 8080260:	682e      	ldr	r6, [r5, #0]
 8080262:	b136      	cbz	r6, 8080272 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x92>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080264:	4630      	mov	r0, r6
 8080266:	f7ff ffaa 	bl	80801be <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 808026a:	2110      	movs	r1, #16
 808026c:	4630      	mov	r0, r6
 808026e:	f008 f8fd 	bl	808846c <_ZdlPvj>
 8080272:	2114      	movs	r1, #20
 8080274:	4628      	mov	r0, r5
 8080276:	f008 f8f9 	bl	808846c <_ZdlPvj>
	{
		checkin();
 808027a:	f7ff ffa9 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
 808027e:	a802      	add	r0, sp, #8
 8080280:	f7ff ff9d 	bl	80801be <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 8080284:	4620      	mov	r0, r4
 8080286:	b006      	add	sp, #24
 8080288:	bd70      	pop	{r4, r5, r6, pc}
 808028a:	bf00      	nop
 808028c:	080800bf 	.word	0x080800bf
 8080290:	080800c3 	.word	0x080800c3
 8080294:	0808dc9c 	.word	0x0808dc9c
 8080298:	0808832d 	.word	0x0808832d
 808029c:	0808ccd9 	.word	0x0808ccd9
 80802a0:	080800dd 	.word	0x080800dd

080802a4 <_ZN7FatFile6existsEPKc>:
   * dirFile.exists("TOFIND.TXT") searches for "TOFIND.TXT" in  the directory
   * dirFile.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 80802a4:	b500      	push	{lr}
 80802a6:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80802a8:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 80802aa:	460a      	mov	r2, r1
 80802ac:	4601      	mov	r1, r0
 80802ae:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80802b0:	f88d 3004 	strb.w	r3, [sp, #4]
 80802b4:	f88d 3005 	strb.w	r3, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 80802b8:	f001 ffff 	bl	80822ba <_ZN7FatFile4openEPS_PKci>
  }
 80802bc:	b00b      	add	sp, #44	; 0x2c
 80802be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080802c4 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 80802c4:	4613      	mov	r3, r2
 80802c6:	460a      	mov	r2, r1
 80802c8:	4901      	ldr	r1, [pc, #4]	; (80802d0 <_ZN7FatFile4openEPKci+0xc>)
 80802ca:	6809      	ldr	r1, [r1, #0]
 80802cc:	f001 bff5 	b.w	80822ba <_ZN7FatFile4openEPS_PKci>
 80802d0:	20000740 	.word	0x20000740

080802d4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80802d4:	b530      	push	{r4, r5, lr}
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 80802d6:	4b1d      	ldr	r3, [pc, #116]	; (808034c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 80802d8:	b085      	sub	sp, #20
 80802da:	9300      	str	r3, [sp, #0]
 80802dc:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80802de:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 80802e2:	f88d 3004 	strb.w	r3, [sp, #4]
 80802e6:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80802e8:	4604      	mov	r4, r0
 80802ea:	9302      	str	r3, [sp, #8]
 80802ec:	7b13      	ldrb	r3, [r2, #12]
 80802ee:	f88d 300c 	strb.w	r3, [sp, #12]
 80802f2:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80802f4:	460a      	mov	r2, r1
 80802f6:	f88d 300d 	strb.w	r3, [sp, #13]
 80802fa:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 80802fe:	466b      	mov	r3, sp
 8080300:	4628      	mov	r0, r5
 8080302:	f002 fb6f 	bl	80829e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 8080306:	b1f0      	cbz	r0, 8080346 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 8080308:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 808030a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 808030e:	4628      	mov	r0, r5
 8080310:	f001 ffcc 	bl	80822ac <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080314:	2101      	movs	r1, #1
 8080316:	4620      	mov	r0, r4
 8080318:	f002 fa0d 	bl	8082736 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 808031c:	4601      	mov	r1, r0
 808031e:	b168      	cbz	r0, 808033c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 8080320:	4621      	mov	r1, r4
 8080322:	4628      	mov	r0, r5
 8080324:	f001 fded 	bl	8081f02 <_ZN7FatFile8openRootEP9FatVolume>
 8080328:	b168      	cbz	r0, 8080346 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 808032a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 808032e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080332:	bf16      	itet	ne
 8080334:	4b06      	ldrne	r3, [pc, #24]	; (8080350 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 8080336:	4618      	moveq	r0, r3
 8080338:	601d      	strne	r5, [r3, #0]
 808033a:	e005      	b.n	8080348 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 808033c:	4620      	mov	r0, r4
 808033e:	f002 f9fa 	bl	8082736 <_ZN9FatVolume4initEh>
 8080342:	2800      	cmp	r0, #0
 8080344:	d1ec      	bne.n	8080320 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 8080346:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 8080348:	b005      	add	sp, #20
 808034a:	bd30      	pop	{r4, r5, pc}
 808034c:	0808cc78 	.word	0x0808cc78
 8080350:	20000740 	.word	0x20000740

08080354 <_Z5Blinkv>:

//*******************************************************************************************
//------------------------------ Functions --------------------------------------------------
//
void Blink()
     {
 8080354:	b510      	push	{r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080356:	4c08      	ldr	r4, [pc, #32]	; (8080378 <_Z5Blinkv+0x24>)
 8080358:	2101      	movs	r1, #1
 808035a:	8820      	ldrh	r0, [r4, #0]
 808035c:	f007 ff79 	bl	8088252 <digitalWrite>
            delay(20);                   // Waits for a sec
 8080360:	2014      	movs	r0, #20
 8080362:	f006 fad9 	bl	8086918 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080366:	8820      	ldrh	r0, [r4, #0]
 8080368:	2100      	movs	r1, #0
 808036a:	f007 ff72 	bl	8088252 <digitalWrite>
            delay(5);
          }
     }
 808036e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(20);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
 8080372:	2005      	movs	r0, #5
 8080374:	f006 bad0 	b.w	8086918 <delay>
 8080378:	20000028 	.word	0x20000028

0808037c <_Z12LowBattBlinkv>:
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 808037c:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808037e:	4d0a      	ldr	r5, [pc, #40]	; (80803a8 <_Z12LowBattBlinkv+0x2c>)
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 8080380:	2402      	movs	r4, #2
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080382:	2101      	movs	r1, #1
 8080384:	8828      	ldrh	r0, [r5, #0]
 8080386:	f007 ff64 	bl	8088252 <digitalWrite>
            delay(2000);                   // Waits for a sec
 808038a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808038e:	f006 fac3 	bl	8086918 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080392:	2100      	movs	r1, #0
 8080394:	8828      	ldrh	r0, [r5, #0]
 8080396:	f007 ff5c 	bl	8088252 <digitalWrite>
            delay(2000);
 808039a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808039e:	f006 fabb 	bl	8086918 <delay>
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
          for (size_t i = 0; i < 2; i++)
 80803a2:	3c01      	subs	r4, #1
 80803a4:	d1ed      	bne.n	8080382 <_Z12LowBattBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(2000);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(2000);
          }
     }
 80803a6:	bd38      	pop	{r3, r4, r5, pc}
 80803a8:	20000028 	.word	0x20000028

080803ac <_Z15WeakSignalBlinkv>:

void WeakSignalBlink()
     {
 80803ac:	b570      	push	{r4, r5, r6, lr}
          for (size_t i = 0; i < 10; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803ae:	4e10      	ldr	r6, [pc, #64]	; (80803f0 <_Z15WeakSignalBlinkv+0x44>)
            delay(2000);
          }
     }

void WeakSignalBlink()
     {
 80803b0:	240a      	movs	r4, #10
          for (size_t i = 0; i < 10; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803b2:	2101      	movs	r1, #1
 80803b4:	8830      	ldrh	r0, [r6, #0]
 80803b6:	f007 ff4c 	bl	8088252 <digitalWrite>
            delay(150);                   // Waits for a sec
 80803ba:	2096      	movs	r0, #150	; 0x96
 80803bc:	f006 faac 	bl	8086918 <delay>
            digitalWrite(ledPin, LOW);    // Sets the LED off
 80803c0:	2100      	movs	r1, #0
 80803c2:	8830      	ldrh	r0, [r6, #0]
 80803c4:	f007 ff45 	bl	8088252 <digitalWrite>
            delay(150);
 80803c8:	2096      	movs	r0, #150	; 0x96
 80803ca:	f006 faa5 	bl	8086918 <delay>
          }
     }

void WeakSignalBlink()
     {
          for (size_t i = 0; i < 10; i++)
 80803ce:	3c01      	subs	r4, #1
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803d0:	4d07      	ldr	r5, [pc, #28]	; (80803f0 <_Z15WeakSignalBlinkv+0x44>)
          }
     }

void WeakSignalBlink()
     {
          for (size_t i = 0; i < 10; i++)
 80803d2:	d1ee      	bne.n	80803b2 <_Z15WeakSignalBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(150);                   // Waits for a sec
            digitalWrite(ledPin, LOW);    // Sets the LED off
            delay(150);
          }
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803d4:	2101      	movs	r1, #1
 80803d6:	8828      	ldrh	r0, [r5, #0]
 80803d8:	f007 ff3b 	bl	8088252 <digitalWrite>
            delay(550);                   // Waits for a sec
 80803dc:	f240 2026 	movw	r0, #550	; 0x226
 80803e0:	f006 fa9a 	bl	8086918 <delay>
            digitalWrite(ledPin, LOW);    // Sets the LED off
 80803e4:	4621      	mov	r1, r4
 80803e6:	8828      	ldrh	r0, [r5, #0]
     }
 80803e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            digitalWrite(ledPin, LOW);    // Sets the LED off
            delay(150);
          }
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(550);                   // Waits for a sec
            digitalWrite(ledPin, LOW);    // Sets the LED off
 80803ec:	f007 bf31 	b.w	8088252 <digitalWrite>
 80803f0:	20000028 	.word	0x20000028

080803f4 <_Z11UploadBlinkv>:
     }

void UploadBlink()
     {
 80803f4:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803f6:	4c11      	ldr	r4, [pc, #68]	; (808043c <_Z11UploadBlinkv+0x48>)
 80803f8:	2101      	movs	r1, #1
 80803fa:	8820      	ldrh	r0, [r4, #0]
 80803fc:	f007 ff29 	bl	8088252 <digitalWrite>
            delay(500);                   // Waits for a sec
 8080400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080404:	f006 fa88 	bl	8086918 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080408:	2100      	movs	r1, #0
 808040a:	8820      	ldrh	r0, [r4, #0]
 808040c:	f007 ff21 	bl	8088252 <digitalWrite>
            delay(1000);
 8080410:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080414:	f006 fa80 	bl	8086918 <delay>
 8080418:	2504      	movs	r5, #4
          }
          for (size_t i = 0; i < 4; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808041a:	2101      	movs	r1, #1
 808041c:	8820      	ldrh	r0, [r4, #0]
 808041e:	f007 ff18 	bl	8088252 <digitalWrite>
            delay(50);                   // Waits for a sec
 8080422:	2032      	movs	r0, #50	; 0x32
 8080424:	f006 fa78 	bl	8086918 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080428:	2100      	movs	r1, #0
 808042a:	8820      	ldrh	r0, [r4, #0]
 808042c:	f007 ff11 	bl	8088252 <digitalWrite>
            delay(50);
 8080430:	2032      	movs	r0, #50	; 0x32
 8080432:	f006 fa71 	bl	8086918 <delay>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(500);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(1000);
          }
          for (size_t i = 0; i < 4; i++)
 8080436:	3d01      	subs	r5, #1
 8080438:	d1ef      	bne.n	808041a <_Z11UploadBlinkv+0x26>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(50);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(50);
          }
     }
 808043a:	bd38      	pop	{r3, r4, r5, pc}
 808043c:	20000028 	.word	0x20000028

08080440 <_Z12checkBatteryff>:

     int checkBattery(float charge,float V)
       {
 8080440:	b537      	push	{r0, r1, r2, r4, r5, lr}
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 8080442:	491d      	ldr	r1, [pc, #116]	; (80804b8 <_Z12checkBatteryff+0x78>)
            delay(50);
          }
     }

     int checkBattery(float charge,float V)
       {
 8080444:	4605      	mov	r5, r0
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 8080446:	f009 f9dd 	bl	8089804 <__aeabi_fcmpgt>
 808044a:	b330      	cbz	r0, 808049a <_Z12checkBatteryff+0x5a>
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
 808044c:	491b      	ldr	r1, [pc, #108]	; (80804bc <_Z12checkBatteryff+0x7c>)
 808044e:	4628      	mov	r0, r5
 8080450:	f009 f9d8 	bl	8089804 <__aeabi_fcmpgt>
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 8080454:	491a      	ldr	r1, [pc, #104]	; (80804c0 <_Z12checkBatteryff+0x80>)
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 8080456:	2800      	cmp	r0, #0
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 8080458:	4628      	mov	r0, r5
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 808045a:	bf14      	ite	ne
 808045c:	f44f 7496 	movne.w	r4, #300	; 0x12c
 8080460:	f44f 7416 	moveq.w	r4, #600	; 0x258
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 8080464:	f009 f9ce 	bl	8089804 <__aeabi_fcmpgt>
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 8080468:	4916      	ldr	r1, [pc, #88]	; (80804c4 <_Z12checkBatteryff+0x84>)
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 808046a:	2800      	cmp	r0, #0
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 808046c:	4628      	mov	r0, r5
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 808046e:	bf18      	it	ne
 8080470:	2478      	movne	r4, #120	; 0x78
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 8080472:	f009 f9c7 	bl	8089804 <__aeabi_fcmpgt>
                                 if (charge>75 )   min = 60;     // 30 minutes
 8080476:	4914      	ldr	r1, [pc, #80]	; (80804c8 <_Z12checkBatteryff+0x88>)
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 8080478:	2800      	cmp	r0, #0
                                 if (charge>75 )   min = 60;     // 30 minutes
 808047a:	4628      	mov	r0, r5
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 808047c:	bf18      	it	ne
 808047e:	245a      	movne	r4, #90	; 0x5a
                                 if (charge>75 )   min = 60;     // 30 minutes
 8080480:	f009 f9c0 	bl	8089804 <__aeabi_fcmpgt>
                                     if (charge>80 )   min = 30;      // 15 minutes;
 8080484:	4911      	ldr	r1, [pc, #68]	; (80804cc <_Z12checkBatteryff+0x8c>)
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
                                 if (charge>75 )   min = 60;     // 30 minutes
 8080486:	2800      	cmp	r0, #0
                                     if (charge>80 )   min = 30;      // 15 minutes;
 8080488:	4628      	mov	r0, r5
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
                                 if (charge>75 )   min = 60;     // 30 minutes
 808048a:	bf18      	it	ne
 808048c:	243c      	movne	r4, #60	; 0x3c
                                     if (charge>80 )   min = 30;      // 15 minutes;
 808048e:	f009 f9b9 	bl	8089804 <__aeabi_fcmpgt>
 8080492:	2800      	cmp	r0, #0
 8080494:	bf18      	it	ne
 8080496:	241e      	movne	r4, #30
 8080498:	e00b      	b.n	80804b2 <_Z12checkBatteryff+0x72>
                else
                 { // if battery below 25%, don't even try to connect but go to sleep for 9 hours
                   min = 432000;   // sleep 5 days if battery very low
              //   sprintf(publishStr, "not connecting, sleeping for %2i min to charge battery ", min);
              //     Serial.println(publishStr);
                   LowBattBlink();
 808049a:	f7ff ff6f 	bl	808037c <_Z12LowBattBlinkv>
                   // could add code to collect data and write to SD card, or set flag to use later to skip connecting
                   //System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);
                  System.sleep(SLEEP_MODE_DEEP, sleepInterval * min);
 808049e:	4b0c      	ldr	r3, [pc, #48]	; (80804d0 <_Z12checkBatteryff+0x90>)
 80804a0:	4c0c      	ldr	r4, [pc, #48]	; (80804d4 <_Z12checkBatteryff+0x94>)
 80804a2:	681a      	ldr	r2, [r3, #0]
 80804a4:	4b0c      	ldr	r3, [pc, #48]	; (80804d8 <_Z12checkBatteryff+0x98>)
 80804a6:	4362      	muls	r2, r4
 80804a8:	681b      	ldr	r3, [r3, #0]
 80804aa:	2101      	movs	r1, #1
 80804ac:	4668      	mov	r0, sp
 80804ae:	f005 fcf1 	bl	8085e94 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
                 }
           return min;
       }  // end of checkBattery
 80804b2:	4620      	mov	r0, r4
 80804b4:	b003      	add	sp, #12
 80804b6:	bd30      	pop	{r4, r5, pc}
 80804b8:	41480000 	.word	0x41480000
 80804bc:	41c80000 	.word	0x41c80000
 80804c0:	42480000 	.word	0x42480000
 80804c4:	42820000 	.word	0x42820000
 80804c8:	42960000 	.word	0x42960000
 80804cc:	42a00000 	.word	0x42a00000
 80804d0:	2000002c 	.word	0x2000002c
 80804d4:	00069780 	.word	0x00069780
 80804d8:	200006ec 	.word	0x200006ec

080804dc <_Z12getMedianNumPii>:
   return averageVoltage;
  }  // end of getAvolts

// calculate a median for set of values in buffer
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
 80804dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80804de:	008b      	lsls	r3, r1, #2
 80804e0:	330a      	adds	r3, #10
 80804e2:	f023 0307 	bic.w	r3, r3, #7
 80804e6:	af00      	add	r7, sp, #0
 80804e8:	ebad 0d03 	sub.w	sp, sp, r3
 80804ec:	466b      	mov	r3, sp
 80804ee:	1e4a      	subs	r2, r1, #1
 80804f0:	2400      	movs	r4, #0
    for (byte i = 0; i<iFilterLen; i++)
 80804f2:	b2e5      	uxtb	r5, r4
 80804f4:	42a9      	cmp	r1, r5
 80804f6:	f104 0401 	add.w	r4, r4, #1
 80804fa:	dc01      	bgt.n	8080500 <_Z12getMedianNumPii+0x24>
 80804fc:	2400      	movs	r4, #0
 80804fe:	e010      	b.n	8080522 <_Z12getMedianNumPii+0x46>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
 8080500:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8080504:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
  }  // end of getAvolts

// calculate a median for set of values in buffer
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
 8080508:	e7f3      	b.n	80804f2 <_Z12getMedianNumPii+0x16>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
           {  if (bTab[i] > bTab[i + 1])
 808050a:	6806      	ldr	r6, [r0, #0]
 808050c:	f850 ef04 	ldr.w	lr, [r0, #4]!
 8080510:	3501      	adds	r5, #1
 8080512:	4576      	cmp	r6, lr
 8080514:	dd02      	ble.n	808051c <_Z12getMedianNumPii+0x40>
              {  bTemp = bTab[i];
                 bTab[i] = bTab[i + 1];
 8080516:	f840 ec04 	str.w	lr, [r0, #-4]
                 bTab[i + 1] = bTemp;
 808051a:	6006      	str	r6, [r0, #0]
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 808051c:	4565      	cmp	r5, ip
 808051e:	dbf4      	blt.n	808050a <_Z12getMedianNumPii+0x2e>
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
 8080520:	3401      	adds	r4, #1
 8080522:	4294      	cmp	r4, r2
 8080524:	da04      	bge.n	8080530 <_Z12getMedianNumPii+0x54>
 8080526:	4618      	mov	r0, r3
 8080528:	2500      	movs	r5, #0
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 808052a:	ebc4 0c02 	rsb	ip, r4, r2
 808052e:	e7f5      	b.n	808051c <_Z12getMedianNumPii+0x40>
                 bTab[i] = bTab[i + 1];
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
 8080530:	f011 0f01 	tst.w	r1, #1
 8080534:	f04f 0402 	mov.w	r4, #2
 8080538:	bf01      	itttt	eq
 808053a:	fb91 f1f4 	sdiveq	r1, r1, r4
 808053e:	eb03 0281 	addeq.w	r2, r3, r1, lsl #2
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080542:	f853 0021 	ldreq.w	r0, [r3, r1, lsl #2]
 8080546:	f852 3c04 	ldreq.w	r3, [r2, #-4]
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 808054a:	bf13      	iteet	ne
 808054c:	fb92 f2f4 	sdivne	r2, r2, r4
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080550:	18c0      	addeq	r0, r0, r3
 8080552:	fb90 f0f4 	sdiveq	r0, r0, r4
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 8080556:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
  return bTemp;
} //end getmedianNum
 808055a:	46bd      	mov	sp, r7
 808055c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080560 <_Z6getSpCv>:
  float getDepth ()
  ...
*/
// get SpC value from sensor
  float getSpC()
   {
 8080560:	b5f0      	push	{r4, r5, r6, r7, lr}
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080562:	4d43      	ldr	r5, [pc, #268]	; (8080670 <_Z6getSpCv+0x110>)
  float getDepth ()
  ...
*/
// get SpC value from sensor
  float getSpC()
   {
 8080564:	b0d1      	sub	sp, #324	; 0x144
      #define VREF 3.3      // analog reference voltage(Volt) of the ADC
      #define SCOUNT  40           // number of sample points to collect for averaging
      #define resolution 4095.0  // analog resolution of 4095 with Particle electron
      int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
 8080566:	2400      	movs	r4, #0
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080568:	8828      	ldrh	r0, [r5, #0]
 808056a:	f007 fe8b 	bl	8088284 <analogRead>
 808056e:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
           analogBufferIndex++;
 8080572:	3401      	adds	r4, #1
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
 8080574:	2032      	movs	r0, #50	; 0x32
 8080576:	f006 f9cf 	bl	8086918 <delay>
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 808057a:	2c28      	cmp	r4, #40	; 0x28
 808057c:	d1f4      	bne.n	8080568 <_Z6getSpCv+0x8>
 808057e:	2100      	movs	r1, #0
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
 8080580:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 8080584:	a828      	add	r0, sp, #160	; 0xa0
 8080586:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 808058a:	3101      	adds	r1, #1
 808058c:	2928      	cmp	r1, #40	; 0x28
 808058e:	d1f7      	bne.n	8080580 <_Z6getSpCv+0x20>
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 8080590:	f7ff ffa4 	bl	80804dc <_Z12getMedianNumPii>
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 8080594:	f008 ff26 	bl	80893e4 <__aeabi_i2f>
 8080598:	4936      	ldr	r1, [pc, #216]	; (8080674 <_Z6getSpCv+0x114>)
 808059a:	f008 ff77 	bl	808948c <__aeabi_fmul>
 808059e:	4936      	ldr	r1, [pc, #216]	; (8080678 <_Z6getSpCv+0x118>)
 80805a0:	f009 f828 	bl	80895f4 <__aeabi_fdiv>
 80805a4:	f008 fade 	bl	8088b64 <__aeabi_f2d>
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 80805a8:	a329      	add	r3, pc, #164	; (adr r3, 8080650 <_Z6getSpCv+0xf0>)
 80805aa:	e9d3 2300 	ldrd	r2, r3, [r3]
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 80805ae:	4604      	mov	r4, r0
 80805b0:	460d      	mov	r5, r1
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 80805b2:	f008 fb2b 	bl	8088c0c <__aeabi_dmul>
 80805b6:	4622      	mov	r2, r4
 80805b8:	462b      	mov	r3, r5
 80805ba:	f008 fb27 	bl	8088c0c <__aeabi_dmul>
 80805be:	4622      	mov	r2, r4
 80805c0:	462b      	mov	r3, r5
 80805c2:	f008 fb23 	bl	8088c0c <__aeabi_dmul>
 80805c6:	a324      	add	r3, pc, #144	; (adr r3, 8080658 <_Z6getSpCv+0xf8>)
 80805c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805cc:	4606      	mov	r6, r0
 80805ce:	460f      	mov	r7, r1
 80805d0:	4620      	mov	r0, r4
 80805d2:	4629      	mov	r1, r5
 80805d4:	f008 fb1a 	bl	8088c0c <__aeabi_dmul>
 80805d8:	4622      	mov	r2, r4
 80805da:	462b      	mov	r3, r5
 80805dc:	f008 fb16 	bl	8088c0c <__aeabi_dmul>
 80805e0:	4602      	mov	r2, r0
 80805e2:	460b      	mov	r3, r1
 80805e4:	4630      	mov	r0, r6
 80805e6:	4639      	mov	r1, r7
 80805e8:	f008 f95e 	bl	80888a8 <__adddf3>
 80805ec:	a31c      	add	r3, pc, #112	; (adr r3, 8080660 <_Z6getSpCv+0x100>)
 80805ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805f2:	4606      	mov	r6, r0
 80805f4:	460f      	mov	r7, r1
 80805f6:	4620      	mov	r0, r4
 80805f8:	4629      	mov	r1, r5
 80805fa:	f008 fb07 	bl	8088c0c <__aeabi_dmul>
 80805fe:	4602      	mov	r2, r0
 8080600:	460b      	mov	r3, r1
 8080602:	4630      	mov	r0, r6
 8080604:	4639      	mov	r1, r7
 8080606:	f008 f94f 	bl	80888a8 <__adddf3>
                                            //made more stable by the median filtering algorithm, and convert to voltage value
///      Serial.print(t2);   // temperature comes from a different sensor, outside this function.
///      Serial.println(" deg.C at start");
///      Serial.print("median analog reading= "); Serial.println(getMedianNum(analogBufferTemp,SCOUNT));
///      Serial.print("averageVoltage= "); Serial.println(averageVoltage);
      float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 808060a:	4b1c      	ldr	r3, [pc, #112]	; (808067c <_Z6getSpCv+0x11c>)
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 808060c:	4604      	mov	r4, r0
 808060e:	6818      	ldr	r0, [r3, #0]
 8080610:	460d      	mov	r5, r1
 8080612:	f008 faa7 	bl	8088b64 <__aeabi_f2d>
 8080616:	2200      	movs	r2, #0
 8080618:	4b19      	ldr	r3, [pc, #100]	; (8080680 <_Z6getSpCv+0x120>)
 808061a:	f008 f943 	bl	80888a4 <__aeabi_dsub>
 808061e:	a312      	add	r3, pc, #72	; (adr r3, 8080668 <_Z6getSpCv+0x108>)
 8080620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080624:	f008 faf2 	bl	8088c0c <__aeabi_dmul>
 8080628:	2200      	movs	r2, #0
 808062a:	4b16      	ldr	r3, [pc, #88]	; (8080684 <_Z6getSpCv+0x124>)
 808062c:	f008 f93c 	bl	80888a8 <__adddf3>
 8080630:	f008 fdce 	bl	80891d0 <__aeabi_d2f>
 8080634:	f008 fa96 	bl	8088b64 <__aeabi_f2d>
 8080638:	4602      	mov	r2, r0
 808063a:	460b      	mov	r3, r1
 808063c:	4620      	mov	r0, r4
 808063e:	4629      	mov	r1, r5
 8080640:	f008 fc0e 	bl	8088e60 <__aeabi_ddiv>
 8080644:	f008 fdc4 	bl	80891d0 <__aeabi_d2f>

    //  Serial.print("SpC Value: ");
    //  Serial.println(SpC,2);
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC
 8080648:	b051      	add	sp, #324	; 0x144
 808064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808064c:	f3af 8000 	nop.w
 8080650:	8f5c28f6 	.word	0x8f5c28f6
 8080654:	4032d5c2 	.word	0x4032d5c2
 8080658:	20c49ba6 	.word	0x20c49ba6
 808065c:	4038d2b0 	.word	0x4038d2b0
 8080660:	4fdf3b64 	.word	0x4fdf3b64
 8080664:	4083818d 	.word	0x4083818d
 8080668:	6a7ef9db 	.word	0x6a7ef9db
 808066c:	3f9374bc 	.word	0x3f9374bc
 8080670:	20000010 	.word	0x20000010
 8080674:	40533333 	.word	0x40533333
 8080678:	457ff000 	.word	0x457ff000
 808067c:	20000024 	.word	0x20000024
 8080680:	40390000 	.word	0x40390000
 8080684:	3ff00000 	.word	0x3ff00000

08080688 <_Z9getAvoltsv>:

// get averageVolts value from sensor.  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 8080688:	b530      	push	{r4, r5, lr}
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 808068a:	4d11      	ldr	r5, [pc, #68]	; (80806d0 <_Z9getAvoltsv+0x48>)
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC

// get averageVolts value from sensor.  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 808068c:	b0d1      	sub	sp, #324	; 0x144
     #define VREF 3.3      // analog reference voltage(Volt) of the ADC
     #define SCOUNT  40           // number of sample points to collect for averaging
     #define resolution 4095.0  // analog resolution of 4095 with Particle electron
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
 808068e:	2400      	movs	r4, #0
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080690:	8828      	ldrh	r0, [r5, #0]
 8080692:	f007 fdf7 	bl	8088284 <analogRead>
 8080696:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
          analogBufferIndex++;
 808069a:	3401      	adds	r4, #1
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
 808069c:	2032      	movs	r0, #50	; 0x32
 808069e:	f006 f93b 	bl	8086918 <delay>
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 80806a2:	2c28      	cmp	r4, #40	; 0x28
 80806a4:	d1f4      	bne.n	8080690 <_Z9getAvoltsv+0x8>
 80806a6:	2100      	movs	r1, #0
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
 80806a8:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 80806ac:	a828      	add	r0, sp, #160	; 0xa0
 80806ae:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
          analogBufferIndex++;
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 80806b2:	3101      	adds	r1, #1
 80806b4:	2928      	cmp	r1, #40	; 0x28
 80806b6:	d1f7      	bne.n	80806a8 <_Z9getAvoltsv+0x20>
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
        }
     averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 80806b8:	f7ff ff10 	bl	80804dc <_Z12getMedianNumPii>
             // remember particle board has analog resolution of 4095
             //made more stable by the median filtering algorithm, and convert to voltage value
   return averageVoltage;
 80806bc:	f008 fe92 	bl	80893e4 <__aeabi_i2f>
 80806c0:	4904      	ldr	r1, [pc, #16]	; (80806d4 <_Z9getAvoltsv+0x4c>)
 80806c2:	f008 fee3 	bl	808948c <__aeabi_fmul>
 80806c6:	4904      	ldr	r1, [pc, #16]	; (80806d8 <_Z9getAvoltsv+0x50>)
 80806c8:	f008 ff94 	bl	80895f4 <__aeabi_fdiv>
  }  // end of getAvolts
 80806cc:	b051      	add	sp, #324	; 0x144
 80806ce:	bd30      	pop	{r4, r5, pc}
 80806d0:	20000010 	.word	0x20000010
 80806d4:	40533333 	.word	0x40533333
 80806d8:	457ff000 	.word	0x457ff000

080806dc <_Z7waitSecm>:
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
    Particle.process();
}
 //  create a Delay using timer, safer than delay()
inline void waitSec(uint32_t seconds) {
 80806dc:	b570      	push	{r4, r5, r6, lr}
 80806de:	4606      	mov	r6, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80806e0:	f004 fe6e 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t sec = (millis()/1000); (millis()/1000) - sec < seconds; Particle.process());
 80806e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80806e8:	fbb0 f5f3 	udiv	r5, r0, r3
 80806ec:	461c      	mov	r4, r3
 80806ee:	f004 fe67 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
 80806f2:	fbb0 f0f4 	udiv	r0, r0, r4
 80806f6:	1b40      	subs	r0, r0, r5
 80806f8:	42b0      	cmp	r0, r6
 80806fa:	d204      	bcs.n	8080706 <_Z7waitSecm+0x2a>
		last_checkin = current_time();
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 80806fc:	f7ff fd68 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080700:	f005 f8ca 	bl	8085898 <spark_process>
 8080704:	e7f3      	b.n	80806ee <_Z7waitSecm+0x12>
 8080706:	bd70      	pop	{r4, r5, r6, pc}

08080708 <_Z11writeHeaderv>:
            }
    }
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
    {
 8080708:	b510      	push	{r4, lr}
        file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
 808070a:	4c05      	ldr	r4, [pc, #20]	; (8080720 <_Z11writeHeaderv+0x18>)
 808070c:	4905      	ldr	r1, [pc, #20]	; (8080724 <_Z11writeHeaderv+0x1c>)
 808070e:	4620      	mov	r0, r4
 8080710:	f005 ff6d 	bl	80865ee <_ZN5Print5printEPK19__FlashStringHelper>
        file.println();
 8080714:	4620      	mov	r0, r4
    }
 8080716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
    {
        file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
        file.println();
 808071a:	f005 bf6c 	b.w	80865f6 <_ZN5Print7printlnEv>
 808071e:	bf00      	nop
 8080720:	200006f0 	.word	0x200006f0
 8080724:	0808cce0 	.word	0x0808cce0

08080728 <_Z8setup_SDv>:
//  Edit writeHeader() and logData() for your requirements.
//-------------------------------------------------------------------------------
//setup the sd card

void setup_SD()
    {
 8080728:	b5f0      	push	{r4, r5, r6, r7, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 808072a:	4a53      	ldr	r2, [pc, #332]	; (8080878 <_Z8setup_SDv+0x150>)
 808072c:	b08d      	sub	sp, #52	; 0x34
 808072e:	4b53      	ldr	r3, [pc, #332]	; (808087c <_Z8setup_SDv+0x154>)
 8080730:	920a      	str	r2, [sp, #40]	; 0x28
 8080732:	2201      	movs	r2, #1
 8080734:	9308      	str	r3, [sp, #32]
 8080736:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 808073a:	2300      	movs	r3, #0
      //char works[3];
       if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sprintf(works,"No ");   }
 808073c:	aa08      	add	r2, sp, #32
 808073e:	210c      	movs	r1, #12
 8080740:	484f      	ldr	r0, [pc, #316]	; (8080880 <_Z8setup_SDv+0x158>)
 8080742:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8080746:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 808074a:	f7ff fdc3 	bl	80802d4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 808074e:	b908      	cbnz	r0, 8080754 <_Z8setup_SDv+0x2c>
 8080750:	494c      	ldr	r1, [pc, #304]	; (8080884 <_Z8setup_SDv+0x15c>)
 8080752:	e000      	b.n	8080756 <_Z8setup_SDv+0x2e>
          else { sprintf(works,"Yes "); }
 8080754:	494c      	ldr	r1, [pc, #304]	; (8080888 <_Z8setup_SDv+0x160>)
 8080756:	484d      	ldr	r0, [pc, #308]	; (808088c <_Z8setup_SDv+0x164>)
 8080758:	f009 fc0e 	bl	8089f78 <strcpy>
        Time.zone(-6);  // setup to CST time zone, which is part of the ISO8601 format        //**
 808075c:	484c      	ldr	r0, [pc, #304]	; (8080890 <_Z8setup_SDv+0x168>)
 808075e:	f005 ffd7 	bl	8086710 <_ZN9TimeClass4zoneEf>
        //if(Time.year() < 2020)

        ///  fileName = String("lost-time000.jpg");   
  
        if( Time.isValid())
 8080762:	f006 f8a7 	bl	80868b4 <_ZN9TimeClass7isValidEv>
 8080766:	4e4b      	ldr	r6, [pc, #300]	; (8080894 <_Z8setup_SDv+0x16c>)
 8080768:	b380      	cbz	r0, 80807cc <_Z8setup_SDv+0xa4>
        {
               fileName = String("lost-time000.csv");         
 808076a:	494b      	ldr	r1, [pc, #300]	; (8080898 <_Z8setup_SDv+0x170>)
 808076c:	a808      	add	r0, sp, #32
 808076e:	f005 fe7a 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>
 8080772:	a908      	add	r1, sp, #32
 8080774:	4630      	mov	r0, r6
 8080776:	f005 fec0 	bl	80864fa <_ZN6StringaSEOS_>
 808077a:	a808      	add	r0, sp, #32
 808077c:	f005 fe2c 	bl	80863d8 <_ZN6StringD1Ev>
               //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
 8080780:	2400      	movs	r4, #0
            fileName[9] = '0' + i/100;
            fileName[10] = '0' + i/10;
 8080782:	270a      	movs	r7, #10
        if( Time.isValid())
        {
               fileName = String("lost-time000.csv");         
               //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName[9] = '0' + i/100;
 8080784:	2109      	movs	r1, #9
 8080786:	4843      	ldr	r0, [pc, #268]	; (8080894 <_Z8setup_SDv+0x16c>)
 8080788:	f005 ff06 	bl	8086598 <_ZN6StringixEj>
 808078c:	2364      	movs	r3, #100	; 0x64
 808078e:	fb94 f3f3 	sdiv	r3, r4, r3
 8080792:	3330      	adds	r3, #48	; 0x30
 8080794:	7003      	strb	r3, [r0, #0]
            fileName[10] = '0' + i/10;
 8080796:	210a      	movs	r1, #10
 8080798:	483e      	ldr	r0, [pc, #248]	; (8080894 <_Z8setup_SDv+0x16c>)
 808079a:	f005 fefd 	bl	8086598 <_ZN6StringixEj>
 808079e:	fb94 f5f7 	sdiv	r5, r4, r7
 80807a2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80807a6:	7003      	strb	r3, [r0, #0]
            fileName[11] = '0' + i%10;
 80807a8:	210b      	movs	r1, #11
 80807aa:	483a      	ldr	r0, [pc, #232]	; (8080894 <_Z8setup_SDv+0x16c>)
 80807ac:	f005 fef4 	bl	8086598 <_ZN6StringixEj>
 80807b0:	fb07 4515 	mls	r5, r7, r5, r4
 80807b4:	3530      	adds	r5, #48	; 0x30
 80807b6:	7005      	strb	r5, [r0, #0]
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
 80807b8:	6831      	ldr	r1, [r6, #0]
 80807ba:	4838      	ldr	r0, [pc, #224]	; (808089c <_Z8setup_SDv+0x174>)
 80807bc:	f7ff fd72 	bl	80802a4 <_ZN7FatFile6existsEPKc>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 80807c0:	b368      	cbz	r0, 808081e <_Z8setup_SDv+0xf6>
  
        if( Time.isValid())
        {
               fileName = String("lost-time000.csv");         
               //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
 80807c2:	3401      	adds	r4, #1
 80807c4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80807c8:	d1dc      	bne.n	8080784 <_Z8setup_SDv+0x5c>
 80807ca:	e028      	b.n	808081e <_Z8setup_SDv+0xf6>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80807cc:	4934      	ldr	r1, [pc, #208]	; (80808a0 <_Z8setup_SDv+0x178>)
 80807ce:	4668      	mov	r0, sp
 80807d0:	f005 fe88 	bl	80864e4 <_ZN6StringC1ERKS_>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
          }
        }
          else
             fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%d") + ".csv");    //**
 80807d4:	4933      	ldr	r1, [pc, #204]	; (80808a4 <_Z8setup_SDv+0x17c>)
 80807d6:	4668      	mov	r0, sp
 80807d8:	f005 feba 	bl	8086550 <_ZplRK15StringSumHelperPKc>
 80807dc:	4604      	mov	r4, r0
 80807de:	f006 f88a 	bl	80868f6 <_ZN9TimeClass3nowEv>
 80807e2:	4b31      	ldr	r3, [pc, #196]	; (80808a8 <_Z8setup_SDv+0x180>)
 80807e4:	4602      	mov	r2, r0
 80807e6:	4931      	ldr	r1, [pc, #196]	; (80808ac <_Z8setup_SDv+0x184>)
 80807e8:	a804      	add	r0, sp, #16
 80807ea:	f006 f831 	bl	8086850 <_ZN9TimeClass6formatElPKc>
 80807ee:	a904      	add	r1, sp, #16
 80807f0:	4620      	mov	r0, r4
 80807f2:	f005 fea1 	bl	8086538 <_ZplRK15StringSumHelperRK6String>
 80807f6:	492e      	ldr	r1, [pc, #184]	; (80808b0 <_Z8setup_SDv+0x188>)
 80807f8:	f005 feaa 	bl	8086550 <_ZplRK15StringSumHelperPKc>
 80807fc:	4601      	mov	r1, r0
 80807fe:	a808      	add	r0, sp, #32
 8080800:	f005 fe70 	bl	80864e4 <_ZN6StringC1ERKS_>
 8080804:	a908      	add	r1, sp, #32
 8080806:	4630      	mov	r0, r6
 8080808:	f005 fe77 	bl	80864fa <_ZN6StringaSEOS_>
 808080c:	a808      	add	r0, sp, #32
 808080e:	f005 fde3 	bl	80863d8 <_ZN6StringD1Ev>
 8080812:	a804      	add	r0, sp, #16
 8080814:	f005 fde0 	bl	80863d8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080818:	4668      	mov	r0, sp
 808081a:	f005 fddd 	bl	80863d8 <_ZN6StringD1Ev>
        Serial.println(fileName + " filename");
 808081e:	f007 f823 	bl	8087868 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080822:	4c1c      	ldr	r4, [pc, #112]	; (8080894 <_Z8setup_SDv+0x16c>)
 8080824:	4605      	mov	r5, r0
 8080826:	4621      	mov	r1, r4
 8080828:	a808      	add	r0, sp, #32
 808082a:	f005 fe5b 	bl	80864e4 <_ZN6StringC1ERKS_>
 808082e:	4921      	ldr	r1, [pc, #132]	; (80808b4 <_Z8setup_SDv+0x18c>)
 8080830:	a808      	add	r0, sp, #32
 8080832:	f005 fe8d 	bl	8086550 <_ZplRK15StringSumHelperPKc>
 8080836:	6801      	ldr	r1, [r0, #0]
 8080838:	4628      	mov	r0, r5
 808083a:	f005 fee8 	bl	808660e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808083e:	a808      	add	r0, sp, #32
 8080840:	f005 fdca 	bl	80863d8 <_ZN6StringD1Ev>
        //if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sd.initErrorHalt();   }
        //sprintf(publishStr,
   ///     if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sprintf(works,"No ");   }
  ///      else { sprintf(works,"Yes "); }
        //sd.begin(chipSelect, SD_SCK_MHZ(20)); 
             Serial.println(works);
 8080844:	f007 f810 	bl	8087868 <_Z16_fetch_usbserialv>
 8080848:	4910      	ldr	r1, [pc, #64]	; (808088c <_Z8setup_SDv+0x164>)
 808084a:	f005 fee0 	bl	808660e <_ZN5Print7printlnEPKc>
 808084e:	6831      	ldr	r1, [r6, #0]
 8080850:	4812      	ldr	r0, [pc, #72]	; (808089c <_Z8setup_SDv+0x174>)
 8080852:	f7ff fd27 	bl	80802a4 <_ZN7FatFile6existsEPKc>
        if(sd.exists(fileName))
 8080856:	b128      	cbz	r0, 8080864 <_Z8setup_SDv+0x13c>
            {  file.open(fileName, O_WRONLY | O_APPEND);  }
 8080858:	2209      	movs	r2, #9
 808085a:	6821      	ldr	r1, [r4, #0]
 808085c:	4816      	ldr	r0, [pc, #88]	; (80808b8 <_Z8setup_SDv+0x190>)
 808085e:	f7ff fd31 	bl	80802c4 <_ZN7FatFile4openEPKci>
 8080862:	e007      	b.n	8080874 <_Z8setup_SDv+0x14c>
            else
            {
                file.open(fileName, O_WRONLY |O_CREAT | O_EXCL);
 8080864:	f640 2201 	movw	r2, #2561	; 0xa01
 8080868:	6821      	ldr	r1, [r4, #0]
 808086a:	4813      	ldr	r0, [pc, #76]	; (80808b8 <_Z8setup_SDv+0x190>)
 808086c:	f7ff fd2a 	bl	80802c4 <_ZN7FatFile4openEPKci>
                writeHeader();
 8080870:	f7ff ff4a 	bl	8080708 <_Z11writeHeaderv>
            }
    }
 8080874:	b00d      	add	sp, #52	; 0x34
 8080876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080878:	01c9c380 	.word	0x01c9c380
 808087c:	0808cc78 	.word	0x0808cc78
 8080880:	20000160 	.word	0x20000160
 8080884:	0808cd18 	.word	0x0808cd18
 8080888:	0808cd1c 	.word	0x0808cd1c
 808088c:	2000073a 	.word	0x2000073a
 8080890:	c0c00000 	.word	0xc0c00000
 8080894:	200005e4 	.word	0x200005e4
 8080898:	0808cd21 	.word	0x0808cd21
 808089c:	2000059c 	.word	0x2000059c
 80808a0:	200006cc 	.word	0x200006cc
 80808a4:	0808cd32 	.word	0x0808cd32
 80808a8:	0808cd34 	.word	0x0808cd34
 80808ac:	20000944 	.word	0x20000944
 80808b0:	0808cd2d 	.word	0x0808cd2d
 80808b4:	0808cd3a 	.word	0x0808cd3a
 80808b8:	200006f8 	.word	0x200006f8

080808bc <_Z7logDataPc>:
        file.println();
    }
//------------------------------------------------------------------------------
// Log a data record.
    void logData(char data[256])
    {
 80808bc:	b530      	push	{r4, r5, lr}
 80808be:	b085      	sub	sp, #20
 80808c0:	4605      	mov	r5, r0
        // Write data to file.
        time_t time = Time.now();
 80808c2:	f006 f818 	bl	80868f6 <_ZN9TimeClass3nowEv>
        ///  Time.zone(-6);  // setup a time zone, which is part of the ISO8601 format
        file.print(Time.format(time, TIME_FORMAT_ISO8601_FULL)); // e.g. 2004-01-10T08:22:04-06:00
 80808c6:	4b0e      	ldr	r3, [pc, #56]	; (8080900 <_Z7logDataPc+0x44>)
 80808c8:	4c0e      	ldr	r4, [pc, #56]	; (8080904 <_Z7logDataPc+0x48>)
 80808ca:	4602      	mov	r2, r0
 80808cc:	681b      	ldr	r3, [r3, #0]
 80808ce:	4668      	mov	r0, sp
 80808d0:	490d      	ldr	r1, [pc, #52]	; (8080908 <_Z7logDataPc+0x4c>)
 80808d2:	f005 ffbd 	bl	8086850 <_ZN9TimeClass6formatElPKc>
 80808d6:	9900      	ldr	r1, [sp, #0]
 80808d8:	4620      	mov	r0, r4
 80808da:	f005 fe81 	bl	80865e0 <_ZN5Print5printEPKc>
 80808de:	4668      	mov	r0, sp
 80808e0:	f005 fd7a 	bl	80863d8 <_ZN6StringD1Ev>

    //    Particle.publish("battery1", data, 60, PRIVATE);
        delay(500);
 80808e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80808e8:	f006 f816 	bl	8086918 <delay>
        file.print(data);
 80808ec:	4629      	mov	r1, r5
 80808ee:	4620      	mov	r0, r4
 80808f0:	f005 fe76 	bl	80865e0 <_ZN5Print5printEPKc>
        file.println();
 80808f4:	4620      	mov	r0, r4
 80808f6:	f005 fe7e 	bl	80865f6 <_ZN5Print7printlnEv>
    }
 80808fa:	b005      	add	sp, #20
 80808fc:	bd30      	pop	{r4, r5, pc}
 80808fe:	bf00      	nop
 8080900:	2000004c 	.word	0x2000004c
 8080904:	200006f0 	.word	0x200006f0
 8080908:	20000944 	.word	0x20000944

0808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808090c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808090e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080910:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080912:	b17c      	cbz	r4, 8080934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080914:	6863      	ldr	r3, [r4, #4]
 8080916:	3b01      	subs	r3, #1
 8080918:	6063      	str	r3, [r4, #4]
 808091a:	b95b      	cbnz	r3, 8080934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 808091c:	6823      	ldr	r3, [r4, #0]
 808091e:	4620      	mov	r0, r4
 8080920:	689b      	ldr	r3, [r3, #8]
 8080922:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080924:	68a3      	ldr	r3, [r4, #8]
 8080926:	3b01      	subs	r3, #1
 8080928:	60a3      	str	r3, [r4, #8]
 808092a:	b91b      	cbnz	r3, 8080934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808092c:	6823      	ldr	r3, [r4, #0]
 808092e:	4620      	mov	r0, r4
 8080930:	68db      	ldr	r3, [r3, #12]
 8080932:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080934:	4628      	mov	r0, r5
 8080936:	bd38      	pop	{r3, r4, r5, pc}

08080938 <_Z8close_SDv>:
//--------------------------------------------------------------------------------
//close down the SD card
void close_SD()
    {
 8080938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
         // Force data to SD and update the directory entry to avoid data loss.
     /// if (!file.sync() || file.getWriteError()) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 808093a:	4812      	ldr	r0, [pc, #72]	; (8080984 <_Z8close_SDv+0x4c>)
 808093c:	f001 fc80 	bl	8082240 <_ZN7FatFile4syncEv>
 8080940:	b960      	cbnz	r0, 808095c <_Z8close_SDv+0x24>
 8080942:	4b11      	ldr	r3, [pc, #68]	; (8080988 <_Z8close_SDv+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080944:	a802      	add	r0, sp, #8
 8080946:	781b      	ldrb	r3, [r3, #0]
 8080948:	4a10      	ldr	r2, [pc, #64]	; (808098c <_Z8close_SDv+0x54>)
 808094a:	f88d 3000 	strb.w	r3, [sp]
 808094e:	4910      	ldr	r1, [pc, #64]	; (8080990 <_Z8close_SDv+0x58>)
 8080950:	233c      	movs	r3, #60	; 0x3c
 8080952:	f006 fd37 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080956:	a803      	add	r0, sp, #12
 8080958:	f7ff ffd8 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 808095c:	4809      	ldr	r0, [pc, #36]	; (8080984 <_Z8close_SDv+0x4c>)
 808095e:	f001 fc6f 	bl	8082240 <_ZN7FatFile4syncEv>
        //  if (Serial.available()) {
        // Close file and stop.
        file.flush();
        file.close();
 8080962:	4808      	ldr	r0, [pc, #32]	; (8080984 <_Z8close_SDv+0x4c>)
 8080964:	f001 fca2 	bl	80822ac <_ZN7FatFile5closeEv>
           sprintf(publishStr, "SD-write worked: %s", works);
 8080968:	4a0a      	ldr	r2, [pc, #40]	; (8080994 <_Z8close_SDv+0x5c>)
 808096a:	490b      	ldr	r1, [pc, #44]	; (8080998 <_Z8close_SDv+0x60>)
 808096c:	480b      	ldr	r0, [pc, #44]	; (808099c <_Z8close_SDv+0x64>)
 808096e:	f004 ffe3 	bl	8085938 <sprintf>
      Serial.println((publishStr));
 8080972:	f006 ff79 	bl	8087868 <_Z16_fetch_usbserialv>
 8080976:	4909      	ldr	r1, [pc, #36]	; (808099c <_Z8close_SDv+0x64>)
 8080978:	f005 fe49 	bl	808660e <_ZN5Print7printlnEPKc>
    //    Particle.publish("Log", "SD_done", 60, PRIVATE);
        //    SysCall::halt();
    }
 808097c:	b005      	add	sp, #20
 808097e:	f85d fb04 	ldr.w	pc, [sp], #4
 8080982:	bf00      	nop
 8080984:	200006f8 	.word	0x200006f8
 8080988:	200006dc 	.word	0x200006dc
 808098c:	0808cd44 	.word	0x0808cd44
 8080990:	0808cd50 	.word	0x0808cd50
 8080994:	2000073a 	.word	0x2000073a
 8080998:	0808cd54 	.word	0x0808cd54
 808099c:	2000071c 	.word	0x2000071c

080809a0 <loop>:

 Serial.println("ending setup");
} // end setup()

//-----------LOOP
void loop() {  
 80809a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80809a4:	b0f1      	sub	sp, #452	; 0x1c4
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 80809a6:	2100      	movs	r1, #0
 80809a8:	a818      	add	r0, sp, #96	; 0x60
 80809aa:	f006 fa7b 	bl	8086ea4 <_ZN9FuelGaugeC1Eb>
  //  set the deep sleep timer based on the battery charge
  //--- get battery info
  float volts = fuel.getVCell();
 80809ae:	a818      	add	r0, sp, #96	; 0x60
 80809b0:	f006 fab8 	bl	8086f24 <_ZN9FuelGauge8getVCellEv>
 80809b4:	4604      	mov	r4, r0
  float SoC = -99;
  //SoC = System.batteryCharge();
  SoC = fuel.getSoC();
 80809b6:	a818      	add	r0, sp, #96	; 0x60
 80809b8:	f006 faca 	bl	8086f50 <_ZN9FuelGauge6getSoCEv>
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 80809bc:	4621      	mov	r1, r4
  //  set the deep sleep timer based on the battery charge
  //--- get battery info
  float volts = fuel.getVCell();
  float SoC = -99;
  //SoC = System.batteryCharge();
  SoC = fuel.getSoC();
 80809be:	9010      	str	r0, [sp, #64]	; 0x40
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 80809c0:	f7ff fd3e 	bl	8080440 <_Z12checkBatteryff>
 80809c4:	4bb4      	ldr	r3, [pc, #720]	; (8080c98 <loop+0x2f8>)
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 80809c6:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8080cac <loop+0x30c>
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 80809ca:	6018      	str	r0, [r3, #0]
 //minutes = 2;

  float rain = analogRead(RainPin);
 80809cc:	4bb3      	ldr	r3, [pc, #716]	; (8080c9c <loop+0x2fc>)
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 80809ce:	f04f 0902 	mov.w	r9, #2
                   }
    */
 minutes = checkBattery(SoC,volts);
 //minutes = 2;

  float rain = analogRead(RainPin);
 80809d2:	8818      	ldrh	r0, [r3, #0]
 80809d4:	f007 fc56 	bl	8088284 <analogRead>
 80809d8:	f008 fd04 	bl	80893e4 <__aeabi_i2f>
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 80809dc:	2100      	movs	r1, #0
                   }
    */
 minutes = checkBattery(SoC,volts);
 //minutes = 2;

  float rain = analogRead(RainPin);
 80809de:	4606      	mov	r6, r0
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 80809e0:	2018      	movs	r0, #24
 80809e2:	f007 fc36 	bl	8088252 <digitalWrite>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 80809e6:	20c8      	movs	r0, #200	; 0xc8
 80809e8:	f005 ff96 	bl	8086918 <delay>
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 80809ec:	48ac      	ldr	r0, [pc, #688]	; (8080ca0 <loop+0x300>)
 80809ee:	f004 f95f 	bl	8084cb0 <_ZN9CE_BME28015readTemperatureEv>
 80809f2:	f8ca 0000 	str.w	r0, [sl]
               h1 = bme1.readHumidity();
 80809f6:	48aa      	ldr	r0, [pc, #680]	; (8080ca0 <loop+0x300>)
 80809f8:	f004 fa54 	bl	8084ea4 <_ZN9CE_BME28012readHumidityEv>
 80809fc:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8080cc4 <loop+0x324>
               p1 = bme1.readPressure()/100.0;
 8080a00:	4fa8      	ldr	r7, [pc, #672]	; (8080ca4 <loop+0x304>)
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
               h1 = bme1.readHumidity();
 8080a02:	f8c8 0000 	str.w	r0, [r8]
               p1 = bme1.readPressure()/100.0;
 8080a06:	48a6      	ldr	r0, [pc, #664]	; (8080ca0 <loop+0x300>)
 8080a08:	f004 f97c 	bl	8084d04 <_ZN9CE_BME28012readPressureEv>
 8080a0c:	49a6      	ldr	r1, [pc, #664]	; (8080ca8 <loop+0x308>)
 8080a0e:	f008 fdf1 	bl	80895f4 <__aeabi_fdiv>
 8080a12:	6038      	str	r0, [r7, #0]
               delay(200);
 8080a14:	20c8      	movs	r0, #200	; 0xc8
 8080a16:	f005 ff7f 	bl	8086918 <delay>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8080a1e:	4da3      	ldr	r5, [pc, #652]	; (8080cac <loop+0x30c>)
 8080a20:	d1e4      	bne.n	80809ec <loop+0x4c>
               h1 = bme1.readHumidity();
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
 8080a22:	f8d7 9000 	ldr.w	r9, [r7]
 8080a26:	4649      	mov	r1, r9
 8080a28:	4648      	mov	r0, r9
 8080a2a:	f008 fef5 	bl	8089818 <__aeabi_fcmpun>
 8080a2e:	2800      	cmp	r0, #0
 8080a30:	f040 8260 	bne.w	8080ef4 <loop+0x554>
 8080a34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080a38:	4648      	mov	r0, r9
 8080a3a:	f008 fec5 	bl	80897c8 <__aeabi_fcmplt>
 8080a3e:	2800      	cmp	r0, #0
 8080a40:	f040 8258 	bne.w	8080ef4 <loop+0x554>
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080a44:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8080d0c <loop+0x36c>
 //minutes = 2;

  float rain = analogRead(RainPin);
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080a48:	f04f 0902 	mov.w	r9, #2
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080a4c:	4898      	ldr	r0, [pc, #608]	; (8080cb0 <loop+0x310>)
 8080a4e:	f004 f92f 	bl	8084cb0 <_ZN9CE_BME28015readTemperatureEv>
 8080a52:	f8ca 0000 	str.w	r0, [sl]
              p2 = bme2.readPressure()/100.0;
 8080a56:	4896      	ldr	r0, [pc, #600]	; (8080cb0 <loop+0x310>)
 8080a58:	f004 f954 	bl	8084d04 <_ZN9CE_BME28012readPressureEv>
 8080a5c:	4992      	ldr	r1, [pc, #584]	; (8080ca8 <loop+0x308>)
 8080a5e:	f008 fdc9 	bl	80895f4 <__aeabi_fdiv>
 8080a62:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8080cb8 <loop+0x318>
 8080a66:	f8c8 0000 	str.w	r0, [r8]
              delay(200);
 8080a6a:	20c8      	movs	r0, #200	; 0xc8
 8080a6c:	f005 ff54 	bl	8086918 <delay>
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080a70:	f1b9 0901 	subs.w	r9, r9, #1
 8080a74:	d1ea      	bne.n	8080a4c <loop+0xac>
              p2 = bme2.readPressure()/100.0;
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
 8080a76:	6839      	ldr	r1, [r7, #0]
 8080a78:	4608      	mov	r0, r1
 8080a7a:	f008 fecd 	bl	8089818 <__aeabi_fcmpun>
 8080a7e:	2800      	cmp	r0, #0
 8080a80:	f040 823e 	bne.w	8080f00 <loop+0x560>
 8080a84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080a88:	f8d8 0000 	ldr.w	r0, [r8]
 8080a8c:	f008 fe9c 	bl	80897c8 <__aeabi_fcmplt>
 8080a90:	2800      	cmp	r0, #0
 8080a92:	f040 8235 	bne.w	8080f00 <loop+0x560>
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080a96:	6828      	ldr	r0, [r5, #0]
 8080a98:	f008 f864 	bl	8088b64 <__aeabi_f2d>
 8080a9c:	a378      	add	r3, pc, #480	; (adr r3, 8080c80 <loop+0x2e0>)
 8080a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080aa2:	f007 feff 	bl	80888a4 <__aeabi_dsub>
 8080aa6:	f008 fb93 	bl	80891d0 <__aeabi_d2f>
        t2 = t2+t2_offset;
 8080aaa:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8080d0c <loop+0x36c>
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080aae:	6028      	str	r0, [r5, #0]
        t2 = t2+t2_offset;
 8080ab0:	f8d8 0000 	ldr.w	r0, [r8]
 8080ab4:	f008 f856 	bl	8088b64 <__aeabi_f2d>
 8080ab8:	a373      	add	r3, pc, #460	; (adr r3, 8080c88 <loop+0x2e8>)
 8080aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080abe:	f007 fef1 	bl	80888a4 <__aeabi_dsub>
 8080ac2:	f008 fb85 	bl	80891d0 <__aeabi_d2f>
 8080ac6:	f8c8 0000 	str.w	r0, [r8]

// ---- get WATER Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
 8080aca:	f7ff fd49 	bl	8080560 <_Z6getSpCv>
 8080ace:	4979      	ldr	r1, [pc, #484]	; (8080cb4 <loop+0x314>)
 8080ad0:	f008 fcdc 	bl	808948c <__aeabi_fmul>
 8080ad4:	4681      	mov	r9, r0
    float Avolts = getAvolts();
 8080ad6:	f7ff fdd7 	bl	8080688 <_Z9getAvoltsv>

 //  float depth = getDepth();  // read second depth sensor using function getDepth(). this is analog
        //don't need this without the vented analog depth sensor
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s
 8080ada:	2100      	movs	r1, #0
        t1 = t1+t1_offset;
        t2 = t2+t2_offset;

// ---- get WATER Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
    float Avolts = getAvolts();
 8080adc:	4682      	mov	sl, r0

 //  float depth = getDepth();  // read second depth sensor using function getDepth(). this is analog
        //don't need this without the vented analog depth sensor
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s
 8080ade:	2003      	movs	r0, #3
 8080ae0:	f007 fbb7 	bl	8088252 <digitalWrite>
                //  digitalWrite(D6, LOW);	// not needed because all digital sensors run off D3
 ///digitalWrite(B0, LOW);	// for the rain sensor
        digitalWrite(B1, LOW);     //for the TDS-Sp.C sensor
 8080ae4:	2100      	movs	r1, #0
 8080ae6:	2019      	movs	r0, #25
 8080ae8:	f007 fbb3 	bl	8088252 <digitalWrite>
///char context[90];
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);
  float depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8080aec:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8080ca4 <loop+0x304>
 8080af0:	4b71      	ldr	r3, [pc, #452]	; (8080cb8 <loop+0x318>)
 8080af2:	f8db 1000 	ldr.w	r1, [fp]
 8080af6:	6818      	ldr	r0, [r3, #0]
 8080af8:	f008 fbbe 	bl	8089278 <__aeabi_fsub>
 8080afc:	f008 f832 	bl	8088b64 <__aeabi_f2d>
 8080b00:	a363      	add	r3, pc, #396	; (adr r3, 8080c90 <loop+0x2f0>)
 8080b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b06:	f008 f881 	bl	8088c0c <__aeabi_dmul>
 8080b0a:	f008 fb61 	bl	80891d0 <__aeabi_d2f>
 8080b0e:	4607      	mov	r7, r0

  ubidots.add("Rain", rain);
 8080b10:	4632      	mov	r2, r6
 8080b12:	496a      	ldr	r1, [pc, #424]	; (8080cbc <loop+0x31c>)
 8080b14:	486a      	ldr	r0, [pc, #424]	; (8080cc0 <loop+0x320>)
 8080b16:	f003 f949 	bl	8083dac <_ZN7Ubidots3addEPcf>
	ubidots.add("Humidity_%", h1);
 8080b1a:	4b6a      	ldr	r3, [pc, #424]	; (8080cc4 <loop+0x324>)
 8080b1c:	496a      	ldr	r1, [pc, #424]	; (8080cc8 <loop+0x328>)
 8080b1e:	681a      	ldr	r2, [r3, #0]
 8080b20:	4867      	ldr	r0, [pc, #412]	; (8080cc0 <loop+0x320>)
 8080b22:	f003 f943 	bl	8083dac <_ZN7Ubidots3addEPcf>
	ubidots.add("Air-Temp_C", t1);
 8080b26:	682a      	ldr	r2, [r5, #0]
 8080b28:	4968      	ldr	r1, [pc, #416]	; (8080ccc <loop+0x32c>)
 8080b2a:	4865      	ldr	r0, [pc, #404]	; (8080cc0 <loop+0x320>)
 8080b2c:	f003 f93e 	bl	8083dac <_ZN7Ubidots3addEPcf>
  ubidots.add("Pressure_hPA", p1);
 8080b30:	f8db 2000 	ldr.w	r2, [fp]
 8080b34:	4966      	ldr	r1, [pc, #408]	; (8080cd0 <loop+0x330>)
 8080b36:	4862      	ldr	r0, [pc, #392]	; (8080cc0 <loop+0x320>)
 8080b38:	f003 f938 	bl	8083dac <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O-Temp_C", t2);
 8080b3c:	f8d8 2000 	ldr.w	r2, [r8]
 8080b40:	4964      	ldr	r1, [pc, #400]	; (8080cd4 <loop+0x334>)
 8080b42:	485f      	ldr	r0, [pc, #380]	; (8080cc0 <loop+0x320>)
 8080b44:	f003 f932 	bl	8083dac <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O_hPA", p2);
 8080b48:	4b5b      	ldr	r3, [pc, #364]	; (8080cb8 <loop+0x318>)
 8080b4a:	4963      	ldr	r1, [pc, #396]	; (8080cd8 <loop+0x338>)
 8080b4c:	681a      	ldr	r2, [r3, #0]
 8080b4e:	485c      	ldr	r0, [pc, #368]	; (8080cc0 <loop+0x320>)
 8080b50:	f003 f92c 	bl	8083dac <_ZN7Ubidots3addEPcf>
  ubidots.add("Depth_in", depth);
 8080b54:	463a      	mov	r2, r7
 8080b56:	4961      	ldr	r1, [pc, #388]	; (8080cdc <loop+0x33c>)
 8080b58:	4859      	ldr	r0, [pc, #356]	; (8080cc0 <loop+0x320>)
 8080b5a:	f003 f927 	bl	8083dac <_ZN7Ubidots3addEPcf>
    ubidots.add("Volts", volts);
 8080b5e:	4622      	mov	r2, r4
 8080b60:	495f      	ldr	r1, [pc, #380]	; (8080ce0 <loop+0x340>)
 8080b62:	4857      	ldr	r0, [pc, #348]	; (8080cc0 <loop+0x320>)
 8080b64:	f003 f922 	bl	8083dac <_ZN7Ubidots3addEPcf>
    ubidots.add("SOC", SoC);
 8080b68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8080b6a:	495e      	ldr	r1, [pc, #376]	; (8080ce4 <loop+0x344>)
 8080b6c:	4854      	ldr	r0, [pc, #336]	; (8080cc0 <loop+0x320>)
 8080b6e:	f003 f91d 	bl	8083dac <_ZN7Ubidots3addEPcf>
      //if (t2 > -99.0)   // if reading water temperature was successful, send temp and Sp_Cond to Ubidots
    ubidots.add("Sp_Cond", Sp_C);
 8080b72:	464a      	mov	r2, r9
 8080b74:	495c      	ldr	r1, [pc, #368]	; (8080ce8 <loop+0x348>)
 8080b76:	4852      	ldr	r0, [pc, #328]	; (8080cc0 <loop+0x320>)
 8080b78:	f003 f918 	bl	8083dac <_ZN7Ubidots3addEPcf>
    ubidots.add("A.volts", Avolts);
 8080b7c:	4652      	mov	r2, sl
 8080b7e:	495b      	ldr	r1, [pc, #364]	; (8080cec <loop+0x34c>)
 8080b80:	484f      	ldr	r0, [pc, #316]	; (8080cc0 <loop+0x320>)
 8080b82:	f003 f913 	bl	8083dac <_ZN7Ubidots3addEPcf>
  

//  could put some code here to write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %04.2f",
 8080b86:	4648      	mov	r0, r9
 8080b88:	f007 ffec 	bl	8088b64 <__aeabi_f2d>
 8080b8c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8080b90:	4650      	mov	r0, sl
 8080b92:	f007 ffe7 	bl	8088b64 <__aeabi_f2d>
 8080b96:	4682      	mov	sl, r0
 8080b98:	4630      	mov	r0, r6
 8080b9a:	468b      	mov	fp, r1
 8080b9c:	f007 ffe2 	bl	8088b64 <__aeabi_f2d>
 8080ba0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080ba4:	4638      	mov	r0, r7
 8080ba6:	f007 ffdd 	bl	8088b64 <__aeabi_f2d>
 8080baa:	4606      	mov	r6, r0
 8080bac:	9810      	ldr	r0, [sp, #64]	; 0x40
 8080bae:	460f      	mov	r7, r1
 8080bb0:	f007 ffd8 	bl	8088b64 <__aeabi_f2d>
 8080bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080bb8:	4620      	mov	r0, r4
 8080bba:	f007 ffd3 	bl	8088b64 <__aeabi_f2d>
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8080bbe:	4603      	mov	r3, r0
 8080bc0:	460c      	mov	r4, r1
 8080bc2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8080bc6:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8080bca:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 8080bce:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8080bd2:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8080bd6:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8080bda:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8080bde:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
 8080be2:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ubidots.add("A.volts", Avolts);
  

//  could put some code here to write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %04.2f",
 8080be6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8080bea:	f8d8 0000 	ldr.w	r0, [r8]
 8080bee:	f007 ffb9 	bl	8088b64 <__aeabi_f2d>
 8080bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080bf6:	6828      	ldr	r0, [r5, #0]
 8080bf8:	f007 ffb4 	bl	8088b64 <__aeabi_f2d>
 8080bfc:	4a3c      	ldr	r2, [pc, #240]	; (8080cf0 <loop+0x350>)
 8080bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8080c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080c06:	a830      	add	r0, sp, #192	; 0xc0
 8080c08:	f004 feae 	bl	8085968 <snprintf>
   
      logData(_json);
 8080c0c:	a830      	add	r0, sp, #192	; 0xc0
 8080c0e:	f7ff fe55 	bl	80808bc <_Z7logDataPc>
      delay(200);
 8080c12:	20c8      	movs	r0, #200	; 0xc8
 8080c14:	f005 fe80 	bl	8086918 <delay>
      close_SD();
 8080c18:	f7ff fe8e 	bl	8080938 <_Z8close_SDv>
      delay(200);
 8080c1c:	20c8      	movs	r0, #200	; 0xc8
 8080c1e:	f005 fe7b 	bl	8086918 <delay>
savePhoto();
*/
//cam.begin();
//--------------------------------------------------------------------------------
// Try to locate the camera
  if (cam.begin()) {
 8080c22:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8080c26:	4833      	ldr	r0, [pc, #204]	; (8080cf4 <loop+0x354>)
 8080c28:	f000 fd7a 	bl	8081720 <_ZN13camera_VC07065beginEt>
 8080c2c:	b118      	cbz	r0, 8080c36 <loop+0x296>
    Serial.println("Camera Found:");
 8080c2e:	f006 fe1b 	bl	8087868 <_Z16_fetch_usbserialv>
 8080c32:	4931      	ldr	r1, [pc, #196]	; (8080cf8 <loop+0x358>)
 8080c34:	e002      	b.n	8080c3c <loop+0x29c>
  } else {
    Serial.println("No camera found?");
 8080c36:	f006 fe17 	bl	8087868 <_Z16_fetch_usbserialv>
 8080c3a:	4930      	ldr	r1, [pc, #192]	; (8080cfc <loop+0x35c>)
 8080c3c:	f005 fce7 	bl	808660e <_ZN5Print7printlnEPKc>
     }
// Print out the camera version information (optional)
  char *reply = cam.getVersion();
 8080c40:	482c      	ldr	r0, [pc, #176]	; (8080cf4 <loop+0x354>)
 8080c42:	f000 fd11 	bl	8081668 <_ZN13camera_VC070610getVersionEv>
  if (reply == 0) {
 8080c46:	4604      	mov	r4, r0
 8080c48:	b918      	cbnz	r0, 8080c52 <loop+0x2b2>
    Serial.print("Failed to get version");
 8080c4a:	f006 fe0d 	bl	8087868 <_Z16_fetch_usbserialv>
 8080c4e:	492c      	ldr	r1, [pc, #176]	; (8080d00 <loop+0x360>)
 8080c50:	e002      	b.n	8080c58 <loop+0x2b8>
  } else {
  //  Serial.println("-----------------");
    Serial.print(reply);
 8080c52:	f006 fe09 	bl	8087868 <_Z16_fetch_usbserialv>
 8080c56:	4621      	mov	r1, r4
 8080c58:	f005 fcc2 	bl	80865e0 <_ZN5Print5printEPKc>
  //  Serial.println("-----------------");
  }
  
  Serial.println("Snap in 1 secs...");
 8080c5c:	f006 fe04 	bl	8087868 <_Z16_fetch_usbserialv>
 8080c60:	4928      	ldr	r1, [pc, #160]	; (8080d04 <loop+0x364>)
 8080c62:	f005 fcd4 	bl	808660e <_ZN5Print7printlnEPKc>
 delay(1000);
 8080c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080c6a:	f005 fe55 	bl	8086918 <delay>
  if (! cam.takePicture()) 
 8080c6e:	4821      	ldr	r0, [pc, #132]	; (8080cf4 <loop+0x354>)
 8080c70:	f000 fd76 	bl	8081760 <_ZN13camera_VC070611takePictureEv>
 8080c74:	2800      	cmp	r0, #0
 8080c76:	d14b      	bne.n	8080d10 <loop+0x370>
    Serial.println("Failed to snap!");
 8080c78:	f006 fdf6 	bl	8087868 <_Z16_fetch_usbserialv>
 8080c7c:	4922      	ldr	r1, [pc, #136]	; (8080d08 <loop+0x368>)
 8080c7e:	e04a      	b.n	8080d16 <loop+0x376>
 8080c80:	9999999a 	.word	0x9999999a
 8080c84:	3fe99999 	.word	0x3fe99999
 8080c88:	33333333 	.word	0x33333333
 8080c8c:	3fe33333 	.word	0x3fe33333
 8080c90:	3a14cec4 	.word	0x3a14cec4
 8080c94:	3fd9b1af 	.word	0x3fd9b1af
 8080c98:	2000001c 	.word	0x2000001c
 8080c9c:	20000014 	.word	0x20000014
 8080ca0:	200005f8 	.word	0x200005f8
 8080ca4:	20000000 	.word	0x20000000
 8080ca8:	42c80000 	.word	0x42c80000
 8080cac:	20000020 	.word	0x20000020
 8080cb0:	20000628 	.word	0x20000628
 8080cb4:	3fa00000 	.word	0x3fa00000
 8080cb8:	20000004 	.word	0x20000004
 8080cbc:	0808cd68 	.word	0x0808cd68
 8080cc0:	200006e0 	.word	0x200006e0
 8080cc4:	2000000c 	.word	0x2000000c
 8080cc8:	0808cd6d 	.word	0x0808cd6d
 8080ccc:	0808cd78 	.word	0x0808cd78
 8080cd0:	0808cd83 	.word	0x0808cd83
 8080cd4:	0808cd90 	.word	0x0808cd90
 8080cd8:	0808cd9b 	.word	0x0808cd9b
 8080cdc:	0808cda3 	.word	0x0808cda3
 8080ce0:	0808cdac 	.word	0x0808cdac
 8080ce4:	0808cdb2 	.word	0x0808cdb2
 8080ce8:	0808cdb6 	.word	0x0808cdb6
 8080cec:	0808cdbe 	.word	0x0808cdbe
 8080cf0:	0808cdc6 	.word	0x0808cdc6
 8080cf4:	20000658 	.word	0x20000658
 8080cf8:	0808ce07 	.word	0x0808ce07
 8080cfc:	0808ce15 	.word	0x0808ce15
 8080d00:	0808ce26 	.word	0x0808ce26
 8080d04:	0808ce3c 	.word	0x0808ce3c
 8080d08:	0808ce4e 	.word	0x0808ce4e
 8080d0c:	20000024 	.word	0x20000024
  else 
    Serial.println("Picture taken!");   
 8080d10:	f006 fdaa 	bl	8087868 <_Z16_fetch_usbserialv>
 8080d14:	499a      	ldr	r1, [pc, #616]	; (8080f80 <loop+0x5e0>)
 8080d16:	f005 fc7a 	bl	808660e <_ZN5Print7printlnEPKc>

 /// String hold;
//    if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sprintf(works,"No ");   }
//       else { sprintf(works,"Yes "); }
 // if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sd.initErrorHalt();    }
    if( Time.isValid()) 
 8080d1a:	f005 fdcb 	bl	80868b4 <_ZN9TimeClass7isValidEv>
 8080d1e:	b3a8      	cbz	r0, 8080d8c <loop+0x3ec>
        {
          fileName = String("lost-time000.jpg");   
 8080d20:	4998      	ldr	r1, [pc, #608]	; (8080f84 <loop+0x5e4>)
 8080d22:	a826      	add	r0, sp, #152	; 0x98
 8080d24:	f005 fb9f 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>
 8080d28:	a926      	add	r1, sp, #152	; 0x98
 8080d2a:	4897      	ldr	r0, [pc, #604]	; (8080f88 <loop+0x5e8>)
 8080d2c:	f005 fbe5 	bl	80864fa <_ZN6StringaSEOS_>
 8080d30:	a826      	add	r0, sp, #152	; 0x98
 8080d32:	f005 fb51 	bl	80863d8 <_ZN6StringD1Ev>
  //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName[9] = '0' + i/100;
 8080d36:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8080f88 <loop+0x5e8>
 // if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sd.initErrorHalt();    }
    if( Time.isValid()) 
        {
          fileName = String("lost-time000.jpg");   
  //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
 8080d3a:	2400      	movs	r4, #0
            fileName[9] = '0' + i/100;
            fileName[10] = '0' + i/10;
 8080d3c:	250a      	movs	r5, #10
    if( Time.isValid()) 
        {
          fileName = String("lost-time000.jpg");   
  //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName[9] = '0' + i/100;
 8080d3e:	2109      	movs	r1, #9
 8080d40:	4891      	ldr	r0, [pc, #580]	; (8080f88 <loop+0x5e8>)
 8080d42:	f005 fc29 	bl	8086598 <_ZN6StringixEj>
 8080d46:	2364      	movs	r3, #100	; 0x64
 8080d48:	fb94 f3f3 	sdiv	r3, r4, r3
 8080d4c:	3330      	adds	r3, #48	; 0x30
 8080d4e:	7003      	strb	r3, [r0, #0]
            fileName[10] = '0' + i/10;
 8080d50:	210a      	movs	r1, #10
 8080d52:	488d      	ldr	r0, [pc, #564]	; (8080f88 <loop+0x5e8>)
 8080d54:	f005 fc20 	bl	8086598 <_ZN6StringixEj>
 8080d58:	fb94 f9f5 	sdiv	r9, r4, r5
 8080d5c:	f109 0330 	add.w	r3, r9, #48	; 0x30
 8080d60:	7003      	strb	r3, [r0, #0]
            fileName[11] = '0' + i%10;
 8080d62:	210b      	movs	r1, #11
 8080d64:	4888      	ldr	r0, [pc, #544]	; (8080f88 <loop+0x5e8>)
 8080d66:	f005 fc17 	bl	8086598 <_ZN6StringixEj>
 8080d6a:	fb05 4919 	mls	r9, r5, r9, r4
 8080d6e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8080d72:	f880 9000 	strb.w	r9, [r0]
 8080d76:	f8d8 1000 	ldr.w	r1, [r8]
 8080d7a:	4884      	ldr	r0, [pc, #528]	; (8080f8c <loop+0x5ec>)
 8080d7c:	f7ff fa92 	bl	80802a4 <_ZN7FatFile6existsEPKc>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 8080d80:	b368      	cbz	r0, 8080dde <loop+0x43e>
 // if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sd.initErrorHalt();    }
    if( Time.isValid()) 
        {
          fileName = String("lost-time000.jpg");   
  //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
 8080d82:	3401      	adds	r4, #1
 8080d84:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8080d88:	d1d9      	bne.n	8080d3e <loop+0x39e>
 8080d8a:	e028      	b.n	8080dde <loop+0x43e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080d8c:	4980      	ldr	r1, [pc, #512]	; (8080f90 <loop+0x5f0>)
 8080d8e:	a81a      	add	r0, sp, #104	; 0x68
 8080d90:	f005 fba8 	bl	80864e4 <_ZN6StringC1ERKS_>
          }
          
        }
          else
          {
           fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%m-%d-%H-%M") + ".jpg");    
 8080d94:	497f      	ldr	r1, [pc, #508]	; (8080f94 <loop+0x5f4>)
 8080d96:	a81a      	add	r0, sp, #104	; 0x68
 8080d98:	f005 fbda 	bl	8086550 <_ZplRK15StringSumHelperPKc>
 8080d9c:	4604      	mov	r4, r0
 8080d9e:	f005 fdaa 	bl	80868f6 <_ZN9TimeClass3nowEv>
 8080da2:	4b7d      	ldr	r3, [pc, #500]	; (8080f98 <loop+0x5f8>)
 8080da4:	4602      	mov	r2, r0
 8080da6:	497d      	ldr	r1, [pc, #500]	; (8080f9c <loop+0x5fc>)
 8080da8:	a81e      	add	r0, sp, #120	; 0x78
 8080daa:	f005 fd51 	bl	8086850 <_ZN9TimeClass6formatElPKc>
 8080dae:	a91e      	add	r1, sp, #120	; 0x78
 8080db0:	4620      	mov	r0, r4
 8080db2:	f005 fbc1 	bl	8086538 <_ZplRK15StringSumHelperRK6String>
 8080db6:	497a      	ldr	r1, [pc, #488]	; (8080fa0 <loop+0x600>)
 8080db8:	f005 fbca 	bl	8086550 <_ZplRK15StringSumHelperPKc>
 8080dbc:	4601      	mov	r1, r0
 8080dbe:	a826      	add	r0, sp, #152	; 0x98
 8080dc0:	f005 fb90 	bl	80864e4 <_ZN6StringC1ERKS_>
 8080dc4:	a926      	add	r1, sp, #152	; 0x98
 8080dc6:	4870      	ldr	r0, [pc, #448]	; (8080f88 <loop+0x5e8>)
 8080dc8:	f005 fb97 	bl	80864fa <_ZN6StringaSEOS_>
 8080dcc:	a826      	add	r0, sp, #152	; 0x98
 8080dce:	f005 fb03 	bl	80863d8 <_ZN6StringD1Ev>
 8080dd2:	a81e      	add	r0, sp, #120	; 0x78
 8080dd4:	f005 fb00 	bl	80863d8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080dd8:	a81a      	add	r0, sp, #104	; 0x68
 8080dda:	f005 fafd 	bl	80863d8 <_ZN6StringD1Ev>
 8080dde:	4c6a      	ldr	r4, [pc, #424]	; (8080f88 <loop+0x5e8>)
          ///  strcpy(fileName, hold); 
          }

  // Open the file for writing
    file.open(fileName, FILE_WRITE);
 8080de0:	f244 2202 	movw	r2, #16898	; 0x4202
 8080de4:	6821      	ldr	r1, [r4, #0]
 8080de6:	486f      	ldr	r0, [pc, #444]	; (8080fa4 <loop+0x604>)
 8080de8:	f7ff fa6c 	bl	80802c4 <_ZN7FatFile4openEPKci>
  // Get the size of the image (frame) taken  
    uint16_t jpglen = cam.frameLength();
 8080dec:	486e      	ldr	r0, [pc, #440]	; (8080fa8 <loop+0x608>)
 8080dee:	f000 fcbc 	bl	808176a <_ZN13camera_VC070611frameLengthEv>
 8080df2:	b285      	uxth	r5, r0
    //Serial.print("Storing ");
    Serial.print(jpglen, DEC);
 8080df4:	f006 fd38 	bl	8087868 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080df8:	220a      	movs	r2, #10
 8080dfa:	4629      	mov	r1, r5
 8080dfc:	f005 fc11 	bl	8086622 <_ZN5Print11printNumberEmh>
    Serial.print(" byte image. ");
 8080e00:	f006 fd32 	bl	8087868 <_Z16_fetch_usbserialv>
 8080e04:	4969      	ldr	r1, [pc, #420]	; (8080fac <loop+0x60c>)
 8080e06:	f005 fbeb 	bl	80865e0 <_ZN5Print5printEPKc>
    Serial.println(fileName);
 8080e0a:	f006 fd2d 	bl	8087868 <_Z16_fetch_usbserialv>
 8080e0e:	6821      	ldr	r1, [r4, #0]
 8080e10:	f005 fbfd 	bl	808660e <_ZN5Print7printlnEPKc>
 8080e14:	f004 fad4 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>

    int32_t time = millis();
    pinMode(8, OUTPUT);
 8080e18:	2101      	movs	r1, #1
 8080e1a:	4604      	mov	r4, r0
 8080e1c:	2008      	movs	r0, #8
 8080e1e:	f007 fa07 	bl	8088230 <pinMode>
    // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
 8080e22:	f04f 0900 	mov.w	r9, #0
    while (jpglen > 0) {
 8080e26:	b1ed      	cbz	r5, 8080e64 <loop+0x4c4>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 8080e28:	46a8      	mov	r8, r5
 8080e2a:	2d40      	cmp	r5, #64	; 0x40
 8080e2c:	bfa8      	it	ge
 8080e2e:	f04f 0840 	movge.w	r8, #64	; 0x40
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
 8080e32:	fa5f f188 	uxtb.w	r1, r8
 8080e36:	485c      	ldr	r0, [pc, #368]	; (8080fa8 <loop+0x608>)
 8080e38:	f000 fcb3 	bl	80817a2 <_ZN13camera_VC070611readPictureEh>
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080e3c:	f109 0901 	add.w	r9, r9, #1
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
 8080e40:	4601      	mov	r1, r0
 8080e42:	4642      	mov	r2, r8
 8080e44:	485a      	ldr	r0, [pc, #360]	; (8080fb0 <loop+0x610>)
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080e46:	fa5f f989 	uxtb.w	r9, r9
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
 8080e4a:	f7ff f965 	bl	8080118 <_ZN9PrintFile5writeEPKhj>
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080e4e:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8080e52:	d903      	bls.n	8080e5c <loop+0x4bc>
      //  Serial.print('.');
        Blink();
 8080e54:	f7ff fa7e 	bl	8080354 <_Z5Blinkv>
        wCount = 0;
 8080e58:	f04f 0900 	mov.w	r9, #0
      }
      //Serial.print("Read ");  Serial.print(bytesToRead, DEC); Serial.println(" bytes");
      jpglen -= bytesToRead;
 8080e5c:	ebc8 0505 	rsb	r5, r8, r5
 8080e60:	b2ad      	uxth	r5, r5

    int32_t time = millis();
    pinMode(8, OUTPUT);
    // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
    while (jpglen > 0) {
 8080e62:	e7e0      	b.n	8080e26 <loop+0x486>
        wCount = 0;
      }
      //Serial.print("Read ");  Serial.print(bytesToRead, DEC); Serial.println(" bytes");
      jpglen -= bytesToRead;
    }
    file.close();
 8080e64:	484f      	ldr	r0, [pc, #316]	; (8080fa4 <loop+0x604>)
 8080e66:	f001 fa21 	bl	80822ac <_ZN7FatFile5closeEv>
 8080e6a:	f004 faa9 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
      time = millis() - time;
 8080e6e:	1b04      	subs	r4, r0, r4
    //Serial.println("done!");
    Serial.print(time); Serial.println(" ms elapsed");
 8080e70:	f006 fcfa 	bl	8087868 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8080e74:	2c00      	cmp	r4, #0
 8080e76:	4605      	mov	r5, r0
 8080e78:	da03      	bge.n	8080e82 <loop+0x4e2>
            t = print('-');
 8080e7a:	212d      	movs	r1, #45	; 0x2d
 8080e7c:	f005 fbb4 	bl	80865e8 <_ZN5Print5printEc>
            val = -n;
 8080e80:	4264      	negs	r4, r4
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080e82:	220a      	movs	r2, #10
 8080e84:	4621      	mov	r1, r4
 8080e86:	4628      	mov	r0, r5
 8080e88:	f005 fbcb 	bl	8086622 <_ZN5Print11printNumberEmh>
 8080e8c:	f006 fcec 	bl	8087868 <_Z16_fetch_usbserialv>
 8080e90:	4948      	ldr	r1, [pc, #288]	; (8080fb4 <loop+0x614>)
 8080e92:	f005 fbbc 	bl	808660e <_ZN5Print7printlnEPKc>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080e96:	4848      	ldr	r0, [pc, #288]	; (8080fb8 <loop+0x618>)
 8080e98:	2300      	movs	r3, #0
 8080e9a:	461a      	mov	r2, r3
 8080e9c:	4619      	mov	r1, r3
 8080e9e:	6840      	ldr	r0, [r0, #4]
 8080ea0:	f004 fca2 	bl	80857e8 <network_connect>
   Cellular.connect();   // this blocks further code execution (see reference) until connection
                          // when in SYSTEM_MODE(semi_automatic),
                          // unless SYSTEM_THREAD(ENABLED). I have SYSTEM_THREAD(ENABLED);
                          //  in any case, after 5 mins of not successfuly connecting the modem
                          // will give up and stop blocking code execution
   delay(500);
 8080ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080ea8:	f005 fd36 	bl	8086918 <delay>
///   Serial.println("done the Cellular.connect() command, Waiting for Cellular.ready");
      // If the cellular modem does not successfuly connect to the cellular network in
      // 2 mins then blink blue LED and write message to serial below.
      // Regardless of code, after 5 mins of not successfuly connecting the modem will give up.
      if (!waitFor(Cellular.ready, a_minute * 1.5))
 8080eac:	4b43      	ldr	r3, [pc, #268]	; (8080fbc <loop+0x61c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080eae:	f04f 0900 	mov.w	r9, #0
 8080eb2:	6818      	ldr	r0, [r3, #0]
 8080eb4:	f007 fe44 	bl	8088b40 <__aeabi_i2d>
 8080eb8:	2200      	movs	r2, #0
 8080eba:	4b41      	ldr	r3, [pc, #260]	; (8080fc0 <loop+0x620>)
 8080ebc:	f007 fea6 	bl	8088c0c <__aeabi_dmul>
 8080ec0:	f008 f966 	bl	8089190 <__aeabi_d2uiz>
 8080ec4:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080ec6:	2000      	movs	r0, #0
 8080ec8:	f004 fa92 	bl	80853f0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080ecc:	4680      	mov	r8, r0
 8080ece:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080ed0:	2000      	movs	r0, #0
 8080ed2:	f004 fa8d 	bl	80853f0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080ed6:	ebb0 0208 	subs.w	r2, r0, r8
 8080eda:	eb61 0309 	sbc.w	r3, r1, r9
 8080ede:	42ab      	cmp	r3, r5
 8080ee0:	bf08      	it	eq
 8080ee2:	42a2      	cmpeq	r2, r4
 8080ee4:	d212      	bcs.n	8080f0c <loop+0x56c>
            WeakSignalBlink();
            Serial.println("Difficulty connecting. Will try for 1 more min");
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080ee6:	4834      	ldr	r0, [pc, #208]	; (8080fb8 <loop+0x618>)
 8080ee8:	f7ff f964 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
 8080eec:	b970      	cbnz	r0, 8080f0c <loop+0x56c>
            spark_process();
 8080eee:	f004 fcd3 	bl	8085898 <spark_process>
 8080ef2:	e7ed      	b.n	8080ed0 <loop+0x530>
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
 8080ef4:	4b33      	ldr	r3, [pc, #204]	; (8080fc4 <loop+0x624>)
 8080ef6:	f8c8 3000 	str.w	r3, [r8]
 8080efa:	602b      	str	r3, [r5, #0]
 8080efc:	603b      	str	r3, [r7, #0]
 8080efe:	e5a1      	b.n	8080a44 <loop+0xa4>
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
 8080f00:	4b30      	ldr	r3, [pc, #192]	; (8080fc4 <loop+0x624>)
 8080f02:	4a31      	ldr	r2, [pc, #196]	; (8080fc8 <loop+0x628>)
 8080f04:	f8c8 3000 	str.w	r3, [r8]
 8080f08:	6013      	str	r3, [r2, #0]
 8080f0a:	e5c4      	b.n	8080a96 <loop+0xf6>
            WeakSignalBlink();
            Serial.println("Difficulty connecting. Will try for 1 more min");
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080f0c:	482a      	ldr	r0, [pc, #168]	; (8080fb8 <loop+0x618>)
 8080f0e:	f7ff f951 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
   delay(500);
///   Serial.println("done the Cellular.connect() command, Waiting for Cellular.ready");
      // If the cellular modem does not successfuly connect to the cellular network in
      // 2 mins then blink blue LED and write message to serial below.
      // Regardless of code, after 5 mins of not successfuly connecting the modem will give up.
      if (!waitFor(Cellular.ready, a_minute * 1.5))
 8080f12:	b980      	cbnz	r0, 8080f36 <loop+0x596>
         {
            WeakSignalBlink();
 8080f14:	f7ff fa4a 	bl	80803ac <_Z15WeakSignalBlinkv>
            delay(500);
 8080f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080f1c:	f005 fcfc 	bl	8086918 <delay>
            WeakSignalBlink();
 8080f20:	f7ff fa44 	bl	80803ac <_Z15WeakSignalBlinkv>
            Serial.println("Difficulty connecting. Will try for 1 more min");
 8080f24:	f006 fca0 	bl	8087868 <_Z16_fetch_usbserialv>
 8080f28:	4928      	ldr	r1, [pc, #160]	; (8080fcc <loop+0x62c>)
 8080f2a:	f005 fb70 	bl	808660e <_ZN5Print7printlnEPKc>
            delay(500);
 8080f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080f32:	f005 fcf1 	bl	8086918 <delay>
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080f36:	4b21      	ldr	r3, [pc, #132]	; (8080fbc <loop+0x61c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f38:	f04f 0900 	mov.w	r9, #0
 8080f3c:	6818      	ldr	r0, [r3, #0]
 8080f3e:	f007 fdff 	bl	8088b40 <__aeabi_i2d>
 8080f42:	2200      	movs	r2, #0
 8080f44:	4b22      	ldr	r3, [pc, #136]	; (8080fd0 <loop+0x630>)
 8080f46:	f007 fe61 	bl	8088c0c <__aeabi_dmul>
 8080f4a:	f008 f921 	bl	8089190 <__aeabi_d2uiz>
 8080f4e:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080f50:	2000      	movs	r0, #0
 8080f52:	f004 fa4d 	bl	80853f0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f56:	4680      	mov	r8, r0
 8080f58:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080f5a:	2000      	movs	r0, #0
 8080f5c:	f004 fa48 	bl	80853f0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f60:	ebb0 0208 	subs.w	r2, r0, r8
 8080f64:	eb61 0309 	sbc.w	r3, r1, r9
 8080f68:	42ab      	cmp	r3, r5
 8080f6a:	bf08      	it	eq
 8080f6c:	42a2      	cmpeq	r2, r4
 8080f6e:	d231      	bcs.n	8080fd4 <loop+0x634>
 8080f70:	4811      	ldr	r0, [pc, #68]	; (8080fb8 <loop+0x618>)
 8080f72:	f7ff f91f 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
 8080f76:	bb68      	cbnz	r0, 8080fd4 <loop+0x634>
            spark_process();
 8080f78:	f004 fc8e 	bl	8085898 <spark_process>
 8080f7c:	e7ed      	b.n	8080f5a <loop+0x5ba>
 8080f7e:	bf00      	nop
 8080f80:	0808ce5e 	.word	0x0808ce5e
 8080f84:	0808ce6d 	.word	0x0808ce6d
 8080f88:	200005e4 	.word	0x200005e4
 8080f8c:	2000059c 	.word	0x2000059c
 8080f90:	200006cc 	.word	0x200006cc
 8080f94:	0808cd32 	.word	0x0808cd32
 8080f98:	0808ce7e 	.word	0x0808ce7e
 8080f9c:	20000944 	.word	0x20000944
 8080fa0:	0808ce79 	.word	0x0808ce79
 8080fa4:	200006f8 	.word	0x200006f8
 8080fa8:	20000658 	.word	0x20000658
 8080fac:	0808ce8d 	.word	0x0808ce8d
 8080fb0:	200006f0 	.word	0x200006f0
 8080fb4:	0808ce9b 	.word	0x0808ce9b
 8080fb8:	20000d58 	.word	0x20000d58
 8080fbc:	20000008 	.word	0x20000008
 8080fc0:	3ff80000 	.word	0x3ff80000
 8080fc4:	c2c63333 	.word	0xc2c63333
 8080fc8:	20000024 	.word	0x20000024
 8080fcc:	0808cea7 	.word	0x0808cea7
 8080fd0:	3fe00000 	.word	0x3fe00000
 8080fd4:	4892      	ldr	r0, [pc, #584]	; (8081220 <loop+0x880>)
 8080fd6:	f7ff f8ed 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
 8080fda:	bb28      	cbnz	r0, 8081028 <loop+0x688>
         {
            WeakSignalBlink();
            delay(500);
            WeakSignalBlink();
            sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 8080fdc:	4c91      	ldr	r4, [pc, #580]	; (8081224 <loop+0x884>)
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
         {
            WeakSignalBlink();
 8080fde:	f7ff f9e5 	bl	80803ac <_Z15WeakSignalBlinkv>
            delay(500);
 8080fe2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080fe6:	f005 fc97 	bl	8086918 <delay>
            WeakSignalBlink();
 8080fea:	f7ff f9df 	bl	80803ac <_Z15WeakSignalBlinkv>
            sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 8080fee:	6822      	ldr	r2, [r4, #0]
 8080ff0:	498d      	ldr	r1, [pc, #564]	; (8081228 <loop+0x888>)
 8080ff2:	488e      	ldr	r0, [pc, #568]	; (808122c <loop+0x88c>)
 8080ff4:	f004 fca0 	bl	8085938 <sprintf>
           Serial.print("Difficulty connecting sleeping");   Serial.println(publishStr);
 8080ff8:	f006 fc36 	bl	8087868 <_Z16_fetch_usbserialv>
 8080ffc:	498c      	ldr	r1, [pc, #560]	; (8081230 <loop+0x890>)
 8080ffe:	f005 faef 	bl	80865e0 <_ZN5Print5printEPKc>
 8081002:	f006 fc31 	bl	8087868 <_Z16_fetch_usbserialv>
 8081006:	4989      	ldr	r1, [pc, #548]	; (808122c <loop+0x88c>)
 8081008:	f005 fb01 	bl	808660e <_ZN5Print7printlnEPKc>
            delay(500);
 808100c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081010:	f005 fc82 	bl	8086918 <delay>
            //System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval*minutes);
            System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);
 8081014:	4b87      	ldr	r3, [pc, #540]	; (8081234 <loop+0x894>)
 8081016:	6821      	ldr	r1, [r4, #0]
 8081018:	681a      	ldr	r2, [r3, #0]
 808101a:	4b87      	ldr	r3, [pc, #540]	; (8081238 <loop+0x898>)
 808101c:	434a      	muls	r2, r1
 808101e:	681b      	ldr	r3, [r3, #0]
 8081020:	2101      	movs	r1, #1
 8081022:	a826      	add	r0, sp, #152	; 0x98
 8081024:	f004 ff36 	bl	8085e94 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8081028:	4c84      	ldr	r4, [pc, #528]	; (808123c <loop+0x89c>)
            // if can't connect for a second time, go to deep sleep for
            // for "minutes" minutes and on wake the program starts from the beginning
          }
   Serial.println("passed the Cellular.ready test");
 808102a:	f006 fc1d 	bl	8087868 <_Z16_fetch_usbserialv>
 808102e:	4984      	ldr	r1, [pc, #528]	; (8081240 <loop+0x8a0>)
 8081030:	f005 faed 	bl	808660e <_ZN5Print7printlnEPKc>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8081034:	f004 fc38 	bl	80858a8 <spark_cloud_flag_connect>
///     readyForOTA(5000);  // 5 second delay with call to Particle.process() to allow time for OTA flashing
     //delay(1000);

  /// if(Particle.connected()) { wDog.checkin();  } // resets the ApplicationWatchdog count if connected
///   if(Particle.connected()) {  
      wd->checkin();  
 8081038:	f7ff f8ca 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
 808103c:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808103e:	4a81      	ldr	r2, [pc, #516]	; (8081244 <loop+0x8a4>)
 8081040:	4981      	ldr	r1, [pc, #516]	; (8081248 <loop+0x8a8>)
 8081042:	f88d 3000 	strb.w	r3, [sp]
 8081046:	a826      	add	r0, sp, #152	; 0x98
 8081048:	233c      	movs	r3, #60	; 0x3c
 808104a:	f006 f9bb 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808104e:	a827      	add	r0, sp, #156	; 0x9c
 8081050:	f7ff fc5c 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("particle", "connected",60,PRIVATE);
      Serial.println("connected");
 8081054:	f006 fc08 	bl	8087868 <_Z16_fetch_usbserialv>
 8081058:	497a      	ldr	r1, [pc, #488]	; (8081244 <loop+0x8a4>)
 808105a:	f005 fad8 	bl	808660e <_ZN5Print7printlnEPKc>
// send data that is already in ubidots list
// add data to list of items to be sent to Ubidots. Max of 10 items in que. Limit set in include file ubidots.h


// ---- get cell signal strength & quality
      CellularSignal sig = Cellular.RSSI();  //this may hang up the system if no connection.
 808105e:	4970      	ldr	r1, [pc, #448]	; (8081220 <loop+0x880>)
 8081060:	a826      	add	r0, sp, #152	; 0x98
 8081062:	f006 fd39 	bl	8087ad8 <_ZN5spark13CellularClass4RSSIEv>
                                              //So this line has been moved to after the if Cellular.ready statement
      ubidots.add("CellQual", sig.qual); //value location will show up as Ubidots "context"
 8081066:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8081068:	f008 f9bc 	bl	80893e4 <__aeabi_i2f>
 808106c:	4977      	ldr	r1, [pc, #476]	; (808124c <loop+0x8ac>)
 808106e:	4602      	mov	r2, r0
 8081070:	4877      	ldr	r0, [pc, #476]	; (8081250 <loop+0x8b0>)
 8081072:	f002 fe9b 	bl	8083dac <_ZN7Ubidots3addEPcf>
      ubidots.add("CellStren", sig.rssi);
 8081076:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8081078:	f008 f9b4 	bl	80893e4 <__aeabi_i2f>
 808107c:	4975      	ldr	r1, [pc, #468]	; (8081254 <loop+0x8b4>)
 808107e:	4602      	mov	r2, r0
 8081080:	4873      	ldr	r0, [pc, #460]	; (8081250 <loop+0x8b0>)
 8081082:	f002 fe93 	bl	8083dac <_ZN7Ubidots3addEPcf>
//
//  send the rest of the data to Ubidots
      ubidots.send(DATA_SOURCE_NAME,DATA_SOURCE_NAME); // Send rest of the data to your Ubidots account.
 8081086:	4a74      	ldr	r2, [pc, #464]	; (8081258 <loop+0x8b8>)
 8081088:	4871      	ldr	r0, [pc, #452]	; (8081250 <loop+0x8b0>)
 808108a:	4611      	mov	r1, r2
 808108c:	f002 fe97 	bl	8083dbe <_ZN7Ubidots4sendEPKcS1_>
                //2020-01-12 modified UbiConstants.h to allow for sending up to 15 variables
                  // but unibots doesn't seem to accept well more than 14 for a device
            //        ubidots.sendAll();
    //readyForOTA(5000); //wait 5 seconds
    //delay(100000);
    waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds
 8081090:	2005      	movs	r0, #5
 8081092:	f7ff fb23 	bl	80806dc <_Z7waitSecm>

    UploadBlink();
 8081096:	f7ff f9ad 	bl	80803f4 <_Z11UploadBlinkv>
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
 808109a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    //readyForOTA(5000); //wait 5 seconds
    //delay(100000);
    waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds

    UploadBlink();
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
 808109e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8081290 <loop+0x8f0>
 80810a2:	4d6e      	ldr	r5, [pc, #440]	; (808125c <loop+0x8bc>)
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
 80810a4:	f8d8 0000 	ldr.w	r0, [r8]
 80810a8:	f007 fd5c 	bl	8088b64 <__aeabi_f2d>
 80810ac:	4b6c      	ldr	r3, [pc, #432]	; (8081260 <loop+0x8c0>)
 80810ae:	2200      	movs	r2, #0
 80810b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80810b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80810b8:	a355      	add	r3, pc, #340	; (adr r3, 8081210 <loop+0x870>)
 80810ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80810be:	4969      	ldr	r1, [pc, #420]	; (8081264 <loop+0x8c4>)
 80810c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80810c4:	a354      	add	r3, pc, #336	; (adr r3, 8081218 <loop+0x878>)
 80810c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80810ca:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80810ce:	e9cd 2300 	strd	r2, r3, [sp]
 80810d2:	4856      	ldr	r0, [pc, #344]	; (808122c <loop+0x88c>)
 80810d4:	4a64      	ldr	r2, [pc, #400]	; (8081268 <loop+0x8c8>)
 80810d6:	f004 fc2f 	bl	8085938 <sprintf>
 80810da:	7823      	ldrb	r3, [r4, #0]
 80810dc:	4a53      	ldr	r2, [pc, #332]	; (808122c <loop+0x88c>)
 80810de:	f88d 3000 	strb.w	r3, [sp]
 80810e2:	6829      	ldr	r1, [r5, #0]
 80810e4:	233c      	movs	r3, #60	; 0x3c
 80810e6:	a81e      	add	r0, sp, #120	; 0x78
 80810e8:	f006 f96c 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80810ec:	a81f      	add	r0, sp, #124	; 0x7c
 80810ee:	f7ff fc0d 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
 80810f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80810f6:	f005 fc0f 	bl	8086918 <delay>
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 80810fa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80810fe:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8081102:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8081106:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 808110a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 808110e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8081112:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8081116:	e9cd 2308 	strd	r2, r3, [sp, #32]
 808111a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808111e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081122:	f8d8 0000 	ldr.w	r0, [r8]
 8081126:	f007 fd1d 	bl	8088b64 <__aeabi_f2d>
 808112a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
 808112e:	4b4f      	ldr	r3, [pc, #316]	; (808126c <loop+0x8cc>)
   ///   delay(500);
   ///   close_SD();

      Serial.println("finished uploading");
// send warning message to particle console
       sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 8081130:	4e4f      	ldr	r6, [pc, #316]	; (8081270 <loop+0x8d0>)
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8081132:	6818      	ldr	r0, [r3, #0]
 8081134:	f007 fd16 	bl	8088b64 <__aeabi_f2d>
 8081138:	4a4e      	ldr	r2, [pc, #312]	; (8081274 <loop+0x8d4>)
 808113a:	e9cd 0100 	strd	r0, r1, [sp]
 808113e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081142:	a830      	add	r0, sp, #192	; 0xc0
 8081144:	f004 fc10 	bl	8085968 <snprintf>
 8081148:	7823      	ldrb	r3, [r4, #0]
 808114a:	aa30      	add	r2, sp, #192	; 0xc0
 808114c:	494a      	ldr	r1, [pc, #296]	; (8081278 <loop+0x8d8>)
 808114e:	f88d 3000 	strb.w	r3, [sp]
 8081152:	a81e      	add	r0, sp, #120	; 0x78
 8081154:	233c      	movs	r3, #60	; 0x3c
 8081156:	f006 f935 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808115a:	a81f      	add	r0, sp, #124	; 0x7c
 808115c:	f7ff fbd6 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("data", _json, PRIVATE);
delay(500);
 8081160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081164:	f005 fbd8 	bl	8086918 <delay>
  //      sprintf(_json, ", %06.2f, %03.2f", fuel.getVCell(), fuel.getSoC());
   ///   logData(_json);
   ///   delay(500);
   ///   close_SD();

      Serial.println("finished uploading");
 8081168:	f006 fb7e 	bl	8087868 <_Z16_fetch_usbserialv>
 808116c:	4943      	ldr	r1, [pc, #268]	; (808127c <loop+0x8dc>)
 808116e:	f005 fa4e 	bl	808660e <_ZN5Print7printlnEPKc>
// send warning message to particle console
       sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 8081172:	6832      	ldr	r2, [r6, #0]
 8081174:	4942      	ldr	r1, [pc, #264]	; (8081280 <loop+0x8e0>)
 8081176:	482d      	ldr	r0, [pc, #180]	; (808122c <loop+0x88c>)
 8081178:	f004 fbde 	bl	8085938 <sprintf>
 808117c:	7823      	ldrb	r3, [r4, #0]
 808117e:	4a2b      	ldr	r2, [pc, #172]	; (808122c <loop+0x88c>)
 8081180:	f88d 3000 	strb.w	r3, [sp]
 8081184:	6829      	ldr	r1, [r5, #0]
 8081186:	233c      	movs	r3, #60	; 0x3c
 8081188:	a81e      	add	r0, sp, #120	; 0x78
 808118a:	f006 f91b 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808118e:	a81f      	add	r0, sp, #124	; 0x7c
 8081190:	f7ff fbbc 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr,60,PRIVATE);
      waitSec(seconds);  //wait seconds
 8081194:	6830      	ldr	r0, [r6, #0]
 8081196:	f7ff faa1 	bl	80806dc <_Z7waitSecm>
 808119a:	f004 f911 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
 808119e:	4606      	mov	r6, r0
 80811a0:	f004 f90e 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
} //end getmedianNum

inline void waitMS(uint32_t timeout)   // function to delay the system thread for the timeout period
{ // timeout == 0 waits forever
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
 80811a4:	1b80      	subs	r0, r0, r6
 80811a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80811aa:	d204      	bcs.n	80811b6 <loop+0x816>
 80811ac:	f7ff f810 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80811b0:	f004 fb72 	bl	8085898 <spark_process>
 80811b4:	e7f4      	b.n	80811a0 <loop+0x800>
         sprintf(publishStr, "sleeping %2i minutes", minutes+1);
       }
  else {
    */
  // send message to particle console
       sprintf(publishStr, "sleeping %2i minutes", minutes);
 80811b6:	4e1b      	ldr	r6, [pc, #108]	; (8081224 <loop+0x884>)
 80811b8:	4932      	ldr	r1, [pc, #200]	; (8081284 <loop+0x8e4>)
 80811ba:	6832      	ldr	r2, [r6, #0]
 80811bc:	481b      	ldr	r0, [pc, #108]	; (808122c <loop+0x88c>)
 80811be:	f004 fbbb 	bl	8085938 <sprintf>
       sprintf(event_name, " %s_on_%s", unit_name.c_str(), code_name);
 80811c2:	682a      	ldr	r2, [r5, #0]
 80811c4:	4b30      	ldr	r3, [pc, #192]	; (8081288 <loop+0x8e8>)
 80811c6:	4931      	ldr	r1, [pc, #196]	; (808128c <loop+0x8ec>)
 80811c8:	a81e      	add	r0, sp, #120	; 0x78
 80811ca:	f004 fbb5 	bl	8085938 <sprintf>
 80811ce:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80811d0:	a91e      	add	r1, sp, #120	; 0x78
 80811d2:	4a16      	ldr	r2, [pc, #88]	; (808122c <loop+0x88c>)
 80811d4:	f88d 3000 	strb.w	r3, [sp]
 80811d8:	a81a      	add	r0, sp, #104	; 0x68
 80811da:	233c      	movs	r3, #60	; 0x3c
 80811dc:	f006 f8f2 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80811e0:	a81b      	add	r0, sp, #108	; 0x6c
 80811e2:	f7ff fb93 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish(event_name, publishStr,60,PRIVATE);
      waitSec(2); //wait 2 more seconds
 80811e6:	2002      	movs	r0, #2
 80811e8:	f7ff fa78 	bl	80806dc <_Z7waitSecm>
// Go to sleep for the amount of time determined by the battery charge
  // for sleep modes see:https://community.particle.io/t/choosing-an-electron-sleep-mode/41822?u=colemanjj
     System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);   //keeps SOC meter running
 80811ec:	4b11      	ldr	r3, [pc, #68]	; (8081234 <loop+0x894>)
 80811ee:	6831      	ldr	r1, [r6, #0]
 80811f0:	681a      	ldr	r2, [r3, #0]
 80811f2:	4b11      	ldr	r3, [pc, #68]	; (8081238 <loop+0x898>)
 80811f4:	434a      	muls	r2, r1
 80811f6:	681b      	ldr	r3, [r3, #0]
 80811f8:	2101      	movs	r1, #1
 80811fa:	a81a      	add	r0, sp, #104	; 0x68
 80811fc:	f004 fe4a 	bl	8085e94 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>

//-----------LOOP
void loop() {  
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 8081200:	a818      	add	r0, sp, #96	; 0x60
 8081202:	f005 fe5e 	bl	8086ec2 <_ZN9FuelGaugeD1Ev>
    // System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);  // shuts down SOC meter
    // SLEEP_MODE_DEEP = 161 μA
    // SLEEP_MODE_SOFTPOWEROFF = 110 μA


} // end loop()
 8081206:	b071      	add	sp, #452	; 0x1c4
 8081208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808120c:	f3af 8000 	nop.w
 8081210:	33333333 	.word	0x33333333
 8081214:	bfe33333 	.word	0xbfe33333
 8081218:	9999999a 	.word	0x9999999a
 808121c:	bfe99999 	.word	0xbfe99999
 8081220:	20000d58 	.word	0x20000d58
 8081224:	2000001c 	.word	0x2000001c
 8081228:	0808ced6 	.word	0x0808ced6
 808122c:	2000071c 	.word	0x2000071c
 8081230:	0808cf09 	.word	0x0808cf09
 8081234:	2000002c 	.word	0x2000002c
 8081238:	200006ec 	.word	0x200006ec
 808123c:	200006dc 	.word	0x200006dc
 8081240:	0808cf28 	.word	0x0808cf28
 8081244:	0808cf47 	.word	0x0808cf47
 8081248:	0808cf51 	.word	0x0808cf51
 808124c:	0808cf5a 	.word	0x0808cf5a
 8081250:	200006e0 	.word	0x200006e0
 8081254:	0808cf63 	.word	0x0808cf63
 8081258:	0808cf6d 	.word	0x0808cf6d
 808125c:	200006cc 	.word	0x200006cc
 8081260:	3ff40000 	.word	0x3ff40000
 8081264:	0808cf79 	.word	0x0808cf79
 8081268:	2000073a 	.word	0x2000073a
 808126c:	20000020 	.word	0x20000020
 8081270:	20000018 	.word	0x20000018
 8081274:	0808cfea 	.word	0x0808cfea
 8081278:	0808d628 	.word	0x0808d628
 808127c:	0808d074 	.word	0x0808d074
 8081280:	0808d087 	.word	0x0808d087
 8081284:	0808d0ab 	.word	0x0808d0ab
 8081288:	0808d0c0 	.word	0x0808d0c0
 808128c:	0808d0d1 	.word	0x0808d0d1
 8081290:	20000024 	.word	0x20000024

08081294 <_Z9delayTime6String>:
  // In 2.0.0 and later, RESET_NO_WAIT prevents notifying the cloud of a pending reset
  System.reset();
    }

int delayTime(String delay)
  { if(delay == "long")
 8081294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081296:	490e      	ldr	r1, [pc, #56]	; (80812d0 <_Z9delayTime6String+0x3c>)
 8081298:	f005 f96c 	bl	8086574 <_ZNK6String6equalsEPKc>
 808129c:	4b0d      	ldr	r3, [pc, #52]	; (80812d4 <_Z9delayTime6String+0x40>)
 808129e:	b180      	cbz	r0, 80812c2 <_Z9delayTime6String+0x2e>
      {seconds=120;   // creat enough delay time to flash the unit
 80812a0:	2278      	movs	r2, #120	; 0x78
 80812a2:	601a      	str	r2, [r3, #0]
 80812a4:	4b0c      	ldr	r3, [pc, #48]	; (80812d8 <_Z9delayTime6String+0x44>)
 80812a6:	4a0d      	ldr	r2, [pc, #52]	; (80812dc <_Z9delayTime6String+0x48>)
 80812a8:	781b      	ldrb	r3, [r3, #0]
 80812aa:	490d      	ldr	r1, [pc, #52]	; (80812e0 <_Z9delayTime6String+0x4c>)
 80812ac:	f88d 3000 	strb.w	r3, [sp]
 80812b0:	a802      	add	r0, sp, #8
 80812b2:	233c      	movs	r3, #60	; 0x3c
 80812b4:	f006 f886 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80812b8:	a803      	add	r0, sp, #12
 80812ba:	f7ff fb27 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
 80812be:	2001      	movs	r0, #1
 80812c0:	e003      	b.n	80812ca <_Z9delayTime6String+0x36>
    else 
      {seconds=5; return -1; }
 80812c2:	2205      	movs	r2, #5
 80812c4:	601a      	str	r2, [r3, #0]
 80812c6:	f04f 30ff 	mov.w	r0, #4294967295
  }
 80812ca:	b005      	add	sp, #20
 80812cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80812d0:	0808d0db 	.word	0x0808d0db
 80812d4:	20000018 	.word	0x20000018
 80812d8:	200006dc 	.word	0x200006dc
 80812dc:	0808d0e0 	.word	0x0808d0e0
 80812e0:	0808d0ed 	.word	0x0808d0ed

080812e4 <setup>:
  // reset the system after 15 min if the application is stuck.  set as an escape from some hangup.
    // watchDog is petted after cell connection estsblished
 //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
 80812e4:	b510      	push	{r4, lr}
 80812e6:	b088      	sub	sp, #32
     Serial.begin(9600);
 80812e8:	f006 fabe 	bl	8087868 <_Z16_fetch_usbserialv>
 80812ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80812f0:	f006 faa0 	bl	8087834 <_ZN9USBSerial5beginEl>
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 80812f4:	2018      	movs	r0, #24
 80812f6:	f7fe fed2 	bl	808009e <_Znwj>
 80812fa:	4604      	mov	r4, r0
 80812fc:	b128      	cbz	r0, 808130a <setup+0x26>
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
    ApplicationWatchdog(std::chrono::milliseconds ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}
 80812fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8081302:	4a39      	ldr	r2, [pc, #228]	; (80813e8 <setup+0x104>)
 8081304:	4939      	ldr	r1, [pc, #228]	; (80813ec <setup+0x108>)
 8081306:	f7fe ff6b 	bl	80801e0 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 808130a:	4b39      	ldr	r3, [pc, #228]	; (80813f0 <setup+0x10c>)
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 808130c:	2101      	movs	r1, #1
 //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
     Serial.begin(9600);
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 808130e:	601c      	str	r4, [r3, #0]
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 8081310:	4b38      	ldr	r3, [pc, #224]	; (80813f4 <setup+0x110>)
 8081312:	8818      	ldrh	r0, [r3, #0]
 8081314:	f006 ff8c 	bl	8088230 <pinMode>
// create power on digital pins for stable power supply AND so that sensors are shut down
  // when processor is shut down
	pinMode(D3, OUTPUT);     // power for the all digital sensors
 8081318:	2101      	movs	r1, #1
 808131a:	2003      	movs	r0, #3
 808131c:	f006 ff88 	bl	8088230 <pinMode>
	digitalWrite(D3, HIGH);
 8081320:	2101      	movs	r1, #1
 8081322:	2003      	movs	r0, #3
 8081324:	f006 ff95 	bl	8088252 <digitalWrite>
                              //activate the Electron internal pullup resistor but also have a 4.7Kohm pullup on the board
//	pinMode(D6, OUTPUT);     // power for 2nd analog sensor nt needed because TDS powered off B1
//	digitalWrite(D6, HIGH);

	pinMode(B0, OUTPUT);     // power for analog rain sensor
 8081328:	2101      	movs	r1, #1
 808132a:	2018      	movs	r0, #24
 808132c:	f006 ff80 	bl	8088230 <pinMode>
	digitalWrite(B0, HIGH);	//
 8081330:	2101      	movs	r1, #1
 8081332:	2018      	movs	r0, #24
 8081334:	f006 ff8d 	bl	8088252 <digitalWrite>
  pinMode(B1, OUTPUT);     // power for analog TDS sensor
 8081338:	2101      	movs	r1, #1
 808133a:	2019      	movs	r0, #25
 808133c:	f006 ff78 	bl	8088230 <pinMode>
  digitalWrite(B1, HIGH);	//
 8081340:	2101      	movs	r1, #1
 8081342:	2019      	movs	r0, #25
 8081344:	f006 ff85 	bl	8088252 <digitalWrite>
	delay(500);   // delay to give time for power to turn on, don't know if this is needed
 8081348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808134c:	f005 fae4 	bl	8086918 <delay>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 8081350:	2100      	movs	r1, #0
 8081352:	a805      	add	r0, sp, #20
 8081354:	f004 fb37 	bl	80859c6 <_ZN4PMICC1Eb>
    // from spark_wiring_power.cpp
     @ https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_power.cpp
     This will be overridden if the input voltage drops out and comes back though (with something like a solar cell)
     and it will be set back to the default 900mA level. To counteract that you could set it in a Software Timer every 60 seconds or so.
    *******************************************************************************/
 pmic.setChargeCurrent(0, 0, 1, 0, 0, 0);      // Set charging current to 1024mA (512 + 512 offset)    //???????? is this good idea?
 8081358:	2200      	movs	r2, #0
 808135a:	4611      	mov	r1, r2
 808135c:	9202      	str	r2, [sp, #8]
 808135e:	9201      	str	r2, [sp, #4]
 8081360:	9200      	str	r2, [sp, #0]
 8081362:	2301      	movs	r3, #1
 8081364:	a805      	add	r0, sp, #20
 8081366:	f004 fc23 	bl	8085bb0 <_ZN4PMIC16setChargeCurrentEbbbbbb>
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
    */
 // Set the lowest input voltage to 4.84 volts. This keeps the solar panel from operating below 4.84 volts.
 pmic.setInputVoltageLimit(4840);  //  taken from code suggested by RyanB in the https://community.particle.io forum
 808136a:	f241 21e8 	movw	r1, #4840	; 0x12e8
 808136e:	a805      	add	r0, sp, #20
 8081370:	f004 fb94 	bl	8085a9c <_ZN4PMIC20setInputVoltageLimitEt>
                    5000
                    5080
  * Return         : 0 Error, 1 Success
 *******************************************************************************/
 //pmic.setChargeVoltage(4512);  // for sealed lead-acit (SLA) battery. may not be implemented in spark_wiring_power.cpp
 pmic.setChargeVoltage(4208); // set upper limit on charge voltage. this limits the
 8081374:	f241 0170 	movw	r1, #4208	; 0x1070
 8081378:	a805      	add	r0, sp, #20
 808137a:	f004 fc4c 	bl	8085c16 <_ZN4PMIC16setChargeVoltageEt>
  *******************************************************************************
   bool PMIC::setChargeVoltage(uint16_t voltage) {.......................
 *******************************************************************************/

 // setup two BME280s
    if (!bme1.begin(0x77)) // the air sensor BME280 for temp, humidity, pressure
 808137e:	2177      	movs	r1, #119	; 0x77
 8081380:	481d      	ldr	r0, [pc, #116]	; (80813f8 <setup+0x114>)
 8081382:	f003 fc76 	bl	8084c72 <_ZN9CE_BME2805beginEh>
 8081386:	b960      	cbnz	r0, 80813a2 <setup+0xbe>
 8081388:	4b1c      	ldr	r3, [pc, #112]	; (80813fc <setup+0x118>)
 808138a:	a806      	add	r0, sp, #24
 808138c:	781b      	ldrb	r3, [r3, #0]
 808138e:	4a1c      	ldr	r2, [pc, #112]	; (8081400 <setup+0x11c>)
 8081390:	f88d 3000 	strb.w	r3, [sp]
 8081394:	491b      	ldr	r1, [pc, #108]	; (8081404 <setup+0x120>)
 8081396:	233c      	movs	r3, #60	; 0x3c
 8081398:	f006 f814 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808139c:	a807      	add	r0, sp, #28
 808139e:	f7ff fab5 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///      Serial.println("Could not find 1st valid BME280 sensor, check wiring!");
      Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
        //  while (1);  // original code had this but seems like an endless loop if the BME is not detected.
      }
    if (!bme2.begin(0x76))  // the water depth sensor in oil made from a BME280. Temp and pressure
 80813a2:	2176      	movs	r1, #118	; 0x76
 80813a4:	4818      	ldr	r0, [pc, #96]	; (8081408 <setup+0x124>)
 80813a6:	f003 fc64 	bl	8084c72 <_ZN9CE_BME2805beginEh>
 80813aa:	b960      	cbnz	r0, 80813c6 <setup+0xe2>
 80813ac:	4b13      	ldr	r3, [pc, #76]	; (80813fc <setup+0x118>)
 80813ae:	a806      	add	r0, sp, #24
 80813b0:	781b      	ldrb	r3, [r3, #0]
 80813b2:	4a13      	ldr	r2, [pc, #76]	; (8081400 <setup+0x11c>)
 80813b4:	f88d 3000 	strb.w	r3, [sp]
 80813b8:	4912      	ldr	r1, [pc, #72]	; (8081404 <setup+0x120>)
 80813ba:	233c      	movs	r3, #60	; 0x3c
 80813bc:	f006 f802 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80813c0:	a807      	add	r0, sp, #28
 80813c2:	f7ff faa3 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///        Serial.println("Could not find 2nd valid BME280 sensor, check wiring!");
        Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
      }

 setup_SD();
 80813c6:	f7ff f9af 	bl	8080728 <_Z8setup_SDv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80813ca:	4a10      	ldr	r2, [pc, #64]	; (808140c <setup+0x128>)
 80813cc:	4910      	ldr	r1, [pc, #64]	; (8081410 <setup+0x12c>)
 80813ce:	4811      	ldr	r0, [pc, #68]	; (8081414 <setup+0x130>)
 80813d0:	f005 fee8 	bl	80871a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  // register a Particle cloud Function
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
 80813d4:	f006 fa48 	bl	8087868 <_Z16_fetch_usbserialv>
 80813d8:	490f      	ldr	r1, [pc, #60]	; (8081418 <setup+0x134>)
 80813da:	f005 f918 	bl	808660e <_ZN5Print7printlnEPKc>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 80813de:	a805      	add	r0, sp, #20
 80813e0:	f004 fb00 	bl	80859e4 <_ZN4PMICD1Ev>
 setup_SD();
  // register a Particle cloud Function
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
} // end setup()
 80813e4:	b008      	add	sp, #32
 80813e6:	bd10      	pop	{r4, pc}
 80813e8:	08080179 	.word	0x08080179
 80813ec:	000927c0 	.word	0x000927c0
 80813f0:	200005f4 	.word	0x200005f4
 80813f4:	20000028 	.word	0x20000028
 80813f8:	200005f8 	.word	0x200005f8
 80813fc:	200006dc 	.word	0x200006dc
 8081400:	0808d0f6 	.word	0x0808d0f6
 8081404:	0808d10a 	.word	0x0808d10a
 8081408:	20000628 	.word	0x20000628
 808140c:	0808d112 	.word	0x0808d112
 8081410:	08081295 	.word	0x08081295
 8081414:	08087179 	.word	0x08087179
 8081418:	0808d118 	.word	0x0808d118

0808141c <_GLOBAL__sub_I_fileName>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808141c:	4b3f      	ldr	r3, [pc, #252]	; (808151c <_GLOBAL__sub_I_fileName+0x100>)
      {seconds=120;   // creat enough delay time to flash the unit
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
    else 
      {seconds=5; return -1; }
  }
 808141e:	b570      	push	{r4, r5, r6, lr}
 8081420:	2400      	movs	r4, #0
 8081422:	601c      	str	r4, [r3, #0]
 8081424:	4b3e      	ldr	r3, [pc, #248]	; (8081520 <_GLOBAL__sub_I_fileName+0x104>)
 8081426:	2501      	movs	r5, #1
 8081428:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808142a:	f003 ff29 	bl	8085280 <HAL_Pin_Map>
#include <SPI.h>        //**
#include <SdFat.h>      //**
// SD chip select pin.  Be sure to disable any other SPI devices such as Enet.
const uint8_t chipSelect = SS;  //**
// create filename as a global variable for use in several functions
String fileName ;       //**
 808142e:	493d      	ldr	r1, [pc, #244]	; (8081524 <_GLOBAL__sub_I_fileName+0x108>)
 8081430:	483d      	ldr	r0, [pc, #244]	; (8081528 <_GLOBAL__sub_I_fileName+0x10c>)
 8081432:	f005 f818 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8081436:	4e3d      	ldr	r6, [pc, #244]	; (808152c <_GLOBAL__sub_I_fileName+0x110>)
 8081438:	4a3d      	ldr	r2, [pc, #244]	; (8081530 <_GLOBAL__sub_I_fileName+0x114>)
 808143a:	493e      	ldr	r1, [pc, #248]	; (8081534 <_GLOBAL__sub_I_fileName+0x118>)
 808143c:	483a      	ldr	r0, [pc, #232]	; (8081528 <_GLOBAL__sub_I_fileName+0x10c>)
 808143e:	f007 f807 	bl	8088450 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8081442:	4b3d      	ldr	r3, [pc, #244]	; (8081538 <_GLOBAL__sub_I_fileName+0x11c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8081444:	2264      	movs	r2, #100	; 0x64
 8081446:	6831      	ldr	r1, [r6, #0]
 8081448:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 808144c:	4a3b      	ldr	r2, [pc, #236]	; (808153c <_GLOBAL__sub_I_fileName+0x120>)
 808144e:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
 8081452:	400d      	ands	r5, r1
 8081454:	71dc      	strb	r4, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081456:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 808145a:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 808145e:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 8081462:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 8081466:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 808146a:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 808146e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 8081472:	461c      	mov	r4, r3
 8081474:	d10f      	bne.n	8081496 <_GLOBAL__sub_I_fileName+0x7a>
 8081476:	4630      	mov	r0, r6
 8081478:	f7fe fe19 	bl	80800ae <__cxa_guard_acquire>
 808147c:	b158      	cbz	r0, 8081496 <_GLOBAL__sub_I_fileName+0x7a>
 808147e:	4629      	mov	r1, r5
 8081480:	482f      	ldr	r0, [pc, #188]	; (8081540 <_GLOBAL__sub_I_fileName+0x124>)
 8081482:	f004 fbfb 	bl	8085c7c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081486:	4630      	mov	r0, r6
 8081488:	f7fe fe16 	bl	80800b8 <__cxa_guard_release>
 808148c:	4a28      	ldr	r2, [pc, #160]	; (8081530 <_GLOBAL__sub_I_fileName+0x114>)
 808148e:	492d      	ldr	r1, [pc, #180]	; (8081544 <_GLOBAL__sub_I_fileName+0x128>)
 8081490:	482b      	ldr	r0, [pc, #172]	; (8081540 <_GLOBAL__sub_I_fileName+0x124>)
 8081492:	f006 ffdd 	bl	8088450 <__aeabi_atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 8081496:	4b2a      	ldr	r3, [pc, #168]	; (8081540 <_GLOBAL__sub_I_fileName+0x124>)
 8081498:	482b      	ldr	r0, [pc, #172]	; (8081548 <_GLOBAL__sub_I_fileName+0x12c>)
 808149a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 808149e:	2400      	movs	r4, #0
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 80814a0:	4b2a      	ldr	r3, [pc, #168]	; (808154c <_GLOBAL__sub_I_fileName+0x130>)
// File system object.
SdFat sd;               //**
// identify a Logging file.
SdFile file;            //**
 80814a2:	4a23      	ldr	r2, [pc, #140]	; (8081530 <_GLOBAL__sub_I_fileName+0x114>)
 80814a4:	492a      	ldr	r1, [pc, #168]	; (8081550 <_GLOBAL__sub_I_fileName+0x134>)
 80814a6:	7204      	strb	r4, [r0, #8]
 80814a8:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80814aa:	6044      	str	r4, [r0, #4]
 80814ac:	6003      	str	r3, [r0, #0]
 80814ae:	f006 ffcf 	bl	8088450 <__aeabi_atexit>
// Error messages stored in flash.
#define error(msg) sd.errorHalt(F(msg))
// for camera-------------------------------
#include "camera_VC0706.h"
camera_VC0706 cam(&Serial1);
 80814b2:	f006 fbc5 	bl	8087c40 <_Z22__fetch_global_Serial1v>
 80814b6:	4601      	mov	r1, r0
 80814b8:	4826      	ldr	r0, [pc, #152]	; (8081554 <_GLOBAL__sub_I_fileName+0x138>)
 80814ba:	f000 f868 	bl	808158e <_ZN13camera_VC0706C1EP11USARTSerial>
#include "sensitive_definitions.h"  // this file contains ubidots token definition
                               // e.g.  #define your_token ""  // Put here your Ubidots TOKEN
// for the temp. humidity, pressure BME280 sensor
#include <CE_BME280.h>
// Create two BME280 instances
CE_BME280 bme1; // I2C  for air temp. pressure, humidity
 80814be:	4826      	ldr	r0, [pc, #152]	; (8081558 <_GLOBAL__sub_I_fileName+0x13c>)
 80814c0:	f003 faf5 	bl	8084aae <_ZN9CE_BME280C1Ev>
CE_BME280 bme2; // I2C   for WATER temp. & pressure
 80814c4:	4825      	ldr	r0, [pc, #148]	; (808155c <_GLOBAL__sub_I_fileName+0x140>)
 80814c6:	f003 faf2 	bl	8084aae <_ZN9CE_BME280C1Ev>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80814ca:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80814ce:	4d24      	ldr	r5, [pc, #144]	; (8081560 <_GLOBAL__sub_I_fileName+0x144>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80814d0:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80814d2:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80814d4:	602c      	str	r4, [r5, #0]
 80814d6:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80814d8:	71ac      	strb	r4, [r5, #6]
 80814da:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80814dc:	f004 f938 	bl	8085750 <set_system_mode>

#include <Adafruit_DHT_Particle.h>  // air and humidity sensor.   includes "isnan()" function

#include <Ubidots.h>   // using here Ubidots=3.1.4
//SYSTEM_MODE(AUTOMATIC); 
SYSTEM_MODE(SEMI_AUTOMATIC);   // was set at semi_automatic but I could not flash remotely, tried automatic then set back to semi-automatic
 80814e0:	4a13      	ldr	r2, [pc, #76]	; (8081530 <_GLOBAL__sub_I_fileName+0x114>)
 80814e2:	4920      	ldr	r1, [pc, #128]	; (8081564 <_GLOBAL__sub_I_fileName+0x148>)
 80814e4:	4628      	mov	r0, r5
 80814e6:	f006 ffb3 	bl	8088450 <__aeabi_atexit>
//The only main difference between SEMI_AUTOMATIC mode and AUTOMATIC mode is that for semi-automatic
    // Particle.connect() is not called at the beginning of your code;  With semi-automatic you must call Particle.connect() yourself
SYSTEM_THREAD(ENABLED);       // seems to make the checking for connection routine work, keep an eye on this ****
 80814ea:	4621      	mov	r1, r4
 80814ec:	2001      	movs	r0, #1
 80814ee:	f004 f947 	bl	8085780 <system_thread_set_state>
//#define your_token "xyz..."  // for privacy, the Ubidots token is defined in the included .h file as "your_token"
#define DATA_SOURCE_NAME "Spudnik-08b"
//#define unit_name "Spudnik-08b"
String unit_name = "Spudnik-08b";
 80814f2:	491d      	ldr	r1, [pc, #116]	; (8081568 <_GLOBAL__sub_I_fileName+0x14c>)
 80814f4:	481d      	ldr	r0, [pc, #116]	; (808156c <_GLOBAL__sub_I_fileName+0x150>)
 80814f6:	f004 ffb6 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>
 80814fa:	4a0d      	ldr	r2, [pc, #52]	; (8081530 <_GLOBAL__sub_I_fileName+0x114>)
 80814fc:	490d      	ldr	r1, [pc, #52]	; (8081534 <_GLOBAL__sub_I_fileName+0x118>)
 80814fe:	481b      	ldr	r0, [pc, #108]	; (808156c <_GLOBAL__sub_I_fileName+0x150>)
 8081500:	f006 ffa6 	bl	8088450 <__aeabi_atexit>
#define code_name "particlesolar30c"

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 8081504:	2201      	movs	r2, #1
 8081506:	491a      	ldr	r1, [pc, #104]	; (8081570 <_GLOBAL__sub_I_fileName+0x154>)
 8081508:	481a      	ldr	r0, [pc, #104]	; (8081574 <_GLOBAL__sub_I_fileName+0x158>)
 808150a:	f002 fc1f 	bl	8083d4c <_ZN7UbidotsC1EPc11IotProtocol>
      {seconds=120;   // creat enough delay time to flash the unit
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
    else 
      {seconds=5; return -1; }
  }
 808150e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String unit_name = "Spudnik-08b";
#define code_name "particlesolar30c"

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 8081512:	4a07      	ldr	r2, [pc, #28]	; (8081530 <_GLOBAL__sub_I_fileName+0x114>)
 8081514:	4918      	ldr	r1, [pc, #96]	; (8081578 <_GLOBAL__sub_I_fileName+0x15c>)
 8081516:	4817      	ldr	r0, [pc, #92]	; (8081574 <_GLOBAL__sub_I_fileName+0x158>)
 8081518:	f006 bf9a 	b.w	8088450 <__aeabi_atexit>
 808151c:	200006ec 	.word	0x200006ec
 8081520:	200006dc 	.word	0x200006dc
 8081524:	0808d853 	.word	0x0808d853
 8081528:	200005e4 	.word	0x200005e4
 808152c:	20000144 	.word	0x20000144
 8081530:	20000140 	.word	0x20000140
 8081534:	080863d9 	.word	0x080863d9
 8081538:	20000160 	.word	0x20000160
 808153c:	0808cc78 	.word	0x0808cc78
 8081540:	20000148 	.word	0x20000148
 8081544:	0808017d 	.word	0x0808017d
 8081548:	200006f0 	.word	0x200006f0
 808154c:	0808cc84 	.word	0x0808cc84
 8081550:	080800db 	.word	0x080800db
 8081554:	20000658 	.word	0x20000658
 8081558:	200005f8 	.word	0x200005f8
 808155c:	20000628 	.word	0x20000628
 8081560:	20000154 	.word	0x20000154
 8081564:	0808018d 	.word	0x0808018d
 8081568:	0808cf6d 	.word	0x0808cf6d
 808156c:	200006cc 	.word	0x200006cc
 8081570:	0808d125 	.word	0x0808d125
 8081574:	200006e0 	.word	0x200006e0
 8081578:	08083d69 	.word	0x08083d69

0808157c <_ZN13camera_VC070611common_initEv>:
#include "camera_VC0706.h"

void camera_VC0706::common_init(void) {
	swSerial  = NULL;
 808157c:	2300      	movs	r3, #0
 808157e:	66c3      	str	r3, [r0, #108]	; 0x6c
	hwSerial  = NULL;
 8081580:	6703      	str	r3, [r0, #112]	; 0x70
	frameptr  = 0;
 8081582:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	bufferLen = 0;
 8081586:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
	serialNum = 0;
 808158a:	7003      	strb	r3, [r0, #0]
 808158c:	4770      	bx	lr

0808158e <_ZN13camera_VC0706C1EP11USARTSerial>:
#endif
	common_init();  // Set everything to common state, then...
	swSerial = ser; // ...override swSerial with value passed.
}

camera_VC0706::camera_VC0706(HardwareSerial *ser) {
 808158e:	b508      	push	{r3, lr}
	common_init();  // Set everything to common state, then...
 8081590:	f7ff fff4 	bl	808157c <_ZN13camera_VC070611common_initEv>
	hwSerial = ser; // ...override hwSerial with value passed.
 8081594:	6701      	str	r1, [r0, #112]	; 0x70
}
 8081596:	bd08      	pop	{r3, pc}

08081598 <_ZN13camera_VC070611sendCommandEhPhh>:
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8081598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808159c:	4606      	mov	r6, r0
	if(swSerial) {
 808159e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 80815a0:	4688      	mov	r8, r1
 80815a2:	4617      	mov	r7, r2
 80815a4:	1e54      	subs	r4, r2, #1
 80815a6:	1e5d      	subs	r5, r3, #1
	if(swSerial) {
 80815a8:	b1b8      	cbz	r0, 80815da <_ZN13camera_VC070611sendCommandEhPhh+0x42>
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
 80815aa:	6803      	ldr	r3, [r0, #0]
 80815ac:	2156      	movs	r1, #86	; 0x56
 80815ae:	689b      	ldr	r3, [r3, #8]
 80815b0:	4798      	blx	r3
		swSerial->write((byte)serialNum);
 80815b2:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80815b4:	7831      	ldrb	r1, [r6, #0]
 80815b6:	6803      	ldr	r3, [r0, #0]
 80815b8:	443d      	add	r5, r7
 80815ba:	689b      	ldr	r3, [r3, #8]
 80815bc:	4798      	blx	r3
		swSerial->write((byte)cmd);
 80815be:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80815c0:	4641      	mov	r1, r8
 80815c2:	6803      	ldr	r3, [r0, #0]
 80815c4:	689b      	ldr	r3, [r3, #8]
 80815c6:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 80815c8:	42a5      	cmp	r5, r4
 80815ca:	d01f      	beq.n	808160c <_ZN13camera_VC070611sendCommandEhPhh+0x74>
			swSerial->write((byte)args[i]);
 80815cc:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80815ce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80815d2:	6803      	ldr	r3, [r0, #0]
 80815d4:	689b      	ldr	r3, [r3, #8]
 80815d6:	4798      	blx	r3
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
		swSerial->write((byte)serialNum);
		swSerial->write((byte)cmd);

		for (uint8_t i=0; i<argn; i++) {
 80815d8:	e7f6      	b.n	80815c8 <_ZN13camera_VC070611sendCommandEhPhh+0x30>
			//Serial.print(args[i], HEX);
		}
#endif
	} else {
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
 80815da:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80815dc:	2156      	movs	r1, #86	; 0x56
 80815de:	6803      	ldr	r3, [r0, #0]
 80815e0:	443d      	add	r5, r7
 80815e2:	689b      	ldr	r3, [r3, #8]
 80815e4:	4798      	blx	r3
		hwSerial->write((byte)serialNum);
 80815e6:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80815e8:	7831      	ldrb	r1, [r6, #0]
 80815ea:	6803      	ldr	r3, [r0, #0]
 80815ec:	689b      	ldr	r3, [r3, #8]
 80815ee:	4798      	blx	r3
		hwSerial->write((byte)cmd);
 80815f0:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80815f2:	4641      	mov	r1, r8
 80815f4:	6803      	ldr	r3, [r0, #0]
 80815f6:	689b      	ldr	r3, [r3, #8]
 80815f8:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 80815fa:	42ac      	cmp	r4, r5
 80815fc:	d006      	beq.n	808160c <_ZN13camera_VC070611sendCommandEhPhh+0x74>
			hwSerial->write((byte)args[i]);
 80815fe:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8081600:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8081604:	6803      	ldr	r3, [r0, #0]
 8081606:	689b      	ldr	r3, [r3, #8]
 8081608:	4798      	blx	r3
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
		hwSerial->write((byte)serialNum);
		hwSerial->write((byte)cmd);

		for (uint8_t i=0; i<argn; i++) {
 808160a:	e7f6      	b.n	80815fa <_ZN13camera_VC070611sendCommandEhPhh+0x62>
 808160c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081610 <_ZN13camera_VC070612readResponseEhh>:
		}
#endif
	}
}

uint8_t camera_VC0706::readResponse(uint8_t numbytes, uint8_t timeout) {
 8081610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081612:	4605      	mov	r5, r0
 8081614:	460e      	mov	r6, r1
 8081616:	4617      	mov	r7, r2
	uint8_t counter = 0;
	bufferLen = 0;
 8081618:	2400      	movs	r4, #0
 808161a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
 808161e:	42bc      	cmp	r4, r7
 8081620:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
 8081624:	d01f      	beq.n	8081666 <_ZN13camera_VC070612readResponseEhh+0x56>
 8081626:	42b0      	cmp	r0, r6
 8081628:	d01d      	beq.n	8081666 <_ZN13camera_VC070612readResponseEhh+0x56>
		avail = swSerial ? swSerial->available() : hwSerial->available();
 808162a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 808162c:	b900      	cbnz	r0, 8081630 <_ZN13camera_VC070612readResponseEhh+0x20>
 808162e:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081630:	6803      	ldr	r3, [r0, #0]
 8081632:	691b      	ldr	r3, [r3, #16]
 8081634:	4798      	blx	r3
		if (avail <= 0) {
 8081636:	2800      	cmp	r0, #0
 8081638:	dc05      	bgt.n	8081646 <_ZN13camera_VC070612readResponseEhh+0x36>
			delay(1);
 808163a:	2001      	movs	r0, #1
			counter++;
 808163c:	3401      	adds	r4, #1
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
		avail = swSerial ? swSerial->available() : hwSerial->available();
		if (avail <= 0) {
			delay(1);
 808163e:	f005 f96b 	bl	8086918 <delay>
			counter++;
 8081642:	b2e4      	uxtb	r4, r4
			continue;
 8081644:	e7eb      	b.n	808161e <_ZN13camera_VC070612readResponseEhh+0xe>
		}
		counter = 0;
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
 8081646:	f895 4066 	ldrb.w	r4, [r5, #102]	; 0x66
 808164a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 808164c:	1c63      	adds	r3, r4, #1
 808164e:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
 8081652:	b900      	cbnz	r0, 8081656 <_ZN13camera_VC070612readResponseEhh+0x46>
 8081654:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081656:	6803      	ldr	r3, [r0, #0]
 8081658:	695b      	ldr	r3, [r3, #20]
 808165a:	4798      	blx	r3
 808165c:	192b      	adds	r3, r5, r4
 808165e:	b2c0      	uxtb	r0, r0
 8081660:	7058      	strb	r0, [r3, #1]
		if (avail <= 0) {
			delay(1);
			counter++;
			continue;
		}
		counter = 0;
 8081662:	2400      	movs	r4, #0
 8081664:	e7db      	b.n	808161e <_ZN13camera_VC070612readResponseEhh+0xe>
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
	}
	return bufferLen;
}
 8081666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081668 <_ZN13camera_VC070610getVersionEv>:

	return runCommand(VC0706_DOWNSIZE_CTRL, args, 2, 5);
}

/***************** other high level commands */
char * camera_VC0706::getVersion(void) {
 8081668:	b513      	push	{r0, r1, r4, lr}
 808166a:	4604      	mov	r4, r0
	uint8_t args[] = {0x01};
 808166c:	aa02      	add	r2, sp, #8
 808166e:	2301      	movs	r3, #1
 8081670:	f802 3d04 	strb.w	r3, [r2, #-4]!

	sendCommand(VC0706_GEN_VERSION, args, 1);
 8081674:	2111      	movs	r1, #17
 8081676:	f7ff ff8f 	bl	8081598 <_ZN13camera_VC070611sendCommandEhPhh>
	// get reply
	if (!readResponse(CAMERABUFFSIZ, 200))
 808167a:	22c8      	movs	r2, #200	; 0xc8
 808167c:	2164      	movs	r1, #100	; 0x64
 808167e:	4620      	mov	r0, r4
 8081680:	f7ff ffc6 	bl	8081610 <_ZN13camera_VC070612readResponseEhh>
 8081684:	b128      	cbz	r0, 8081692 <_ZN13camera_VC070610getVersionEv+0x2a>
		return 0;
	camerabuff[bufferLen] = 0;  // end it!
 8081686:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 808168a:	2200      	movs	r2, #0
 808168c:	4423      	add	r3, r4
 808168e:	705a      	strb	r2, [r3, #1]
	return (char *)camerabuff;  // return it!
 8081690:	1c60      	adds	r0, r4, #1
}
 8081692:	b002      	add	sp, #8
 8081694:	bd10      	pop	{r4, pc}

08081696 <_ZN13camera_VC070614verifyResponseEh>:
	}
	return bufferLen;
}

boolean camera_VC0706::verifyResponse(uint8_t command) {
	if ((camerabuff[0] != 0x76) ||
 8081696:	7843      	ldrb	r3, [r0, #1]
 8081698:	2b76      	cmp	r3, #118	; 0x76
 808169a:	d10b      	bne.n	80816b4 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 808169c:	7882      	ldrb	r2, [r0, #2]
 808169e:	7803      	ldrb	r3, [r0, #0]
 80816a0:	429a      	cmp	r2, r3
 80816a2:	d107      	bne.n	80816b4 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[1] != serialNum) ||
 80816a4:	78c3      	ldrb	r3, [r0, #3]
 80816a6:	428b      	cmp	r3, r1
 80816a8:	d104      	bne.n	80816b4 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[2] != command) ||
 80816aa:	7900      	ldrb	r0, [r0, #4]
 80816ac:	fab0 f080 	clz	r0, r0
 80816b0:	0940      	lsrs	r0, r0, #5
 80816b2:	4770      	bx	lr
	        (camerabuff[3] != 0x0))
		return false;
 80816b4:	2000      	movs	r0, #0
	return true;

}
 80816b6:	4770      	bx	lr

080816b8 <_ZN13camera_VC070610runCommandEhPhhhb>:
	return camerabuff;
}

/**************** low level commands */
boolean camera_VC0706::runCommand(uint8_t cmd, uint8_t *args, uint8_t argn,
                                  uint8_t resplen, boolean flushflag) {
 80816b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80816bc:	4698      	mov	r8, r3
 80816be:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80816c2:	4604      	mov	r4, r0
 80816c4:	460d      	mov	r5, r1
 80816c6:	4617      	mov	r7, r2
 80816c8:	f89d 6018 	ldrb.w	r6, [sp, #24]
	// flush out anything in the buffer?
	if (flushflag) {
 80816cc:	b11b      	cbz	r3, 80816d6 <_ZN13camera_VC070610runCommandEhPhhhb+0x1e>
		readResponse(100, 10);
 80816ce:	220a      	movs	r2, #10
 80816d0:	2164      	movs	r1, #100	; 0x64
 80816d2:	f7ff ff9d 	bl	8081610 <_ZN13camera_VC070612readResponseEhh>
	}

	sendCommand(cmd, args, argn);
 80816d6:	4643      	mov	r3, r8
 80816d8:	463a      	mov	r2, r7
 80816da:	4629      	mov	r1, r5
 80816dc:	4620      	mov	r0, r4
 80816de:	f7ff ff5b 	bl	8081598 <_ZN13camera_VC070611sendCommandEhPhh>
	if (readResponse(resplen, 200) != resplen)
 80816e2:	22c8      	movs	r2, #200	; 0xc8
 80816e4:	4631      	mov	r1, r6
 80816e6:	4620      	mov	r0, r4
 80816e8:	f7ff ff92 	bl	8081610 <_ZN13camera_VC070612readResponseEhh>
 80816ec:	4286      	cmp	r6, r0
 80816ee:	d105      	bne.n	80816fc <_ZN13camera_VC070610runCommandEhPhhhb+0x44>
		return false;
	if (! verifyResponse(cmd))
 80816f0:	4629      	mov	r1, r5
 80816f2:	4620      	mov	r0, r4
		return false;
	return true;
}
 80816f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}

	sendCommand(cmd, args, argn);
	if (readResponse(resplen, 200) != resplen)
		return false;
	if (! verifyResponse(cmd))
 80816f8:	f7ff bfcd 	b.w	8081696 <_ZN13camera_VC070614verifyResponseEh>
		return false;
	return true;
}
 80816fc:	2000      	movs	r0, #0
 80816fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081702 <_ZN13camera_VC07065resetEv>:
	if(swSerial) swSerial->begin(baud);
	else         hwSerial->begin(baud);
	return reset();
}

boolean camera_VC0706::reset() {
 8081702:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x0};
 8081704:	2300      	movs	r3, #0
 8081706:	aa04      	add	r2, sp, #16
 8081708:	f802 3d04 	strb.w	r3, [r2, #-4]!

	return runCommand(VC0706_RESET, args, 1, 5);
 808170c:	2105      	movs	r1, #5
 808170e:	2301      	movs	r3, #1
 8081710:	e88d 000a 	stmia.w	sp, {r1, r3}
 8081714:	2126      	movs	r1, #38	; 0x26
 8081716:	f7ff ffcf 	bl	80816b8 <_ZN13camera_VC070610runCommandEhPhhhb>
}
 808171a:	b005      	add	sp, #20
 808171c:	f85d fb04 	ldr.w	pc, [sp], #4

08081720 <_ZN13camera_VC07065beginEt>:
camera_VC0706::camera_VC0706(HardwareSerial *ser) {
	common_init();  // Set everything to common state, then...
	hwSerial = ser; // ...override hwSerial with value passed.
}

boolean camera_VC0706::begin(uint16_t baud) {
 8081720:	b510      	push	{r4, lr}
 8081722:	4604      	mov	r4, r0
	if(swSerial) swSerial->begin(baud);
 8081724:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8081726:	b110      	cbz	r0, 808172e <_ZN13camera_VC07065beginEt+0xe>
 8081728:	f001 fe40 	bl	80833ac <_ZN18ParticleSoftSerial5beginEm>
 808172c:	e002      	b.n	8081734 <_ZN13camera_VC07065beginEt+0x14>
	else         hwSerial->begin(baud);
 808172e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8081730:	f006 fa80 	bl	8087c34 <_ZN11USARTSerial5beginEm>
	return reset();
 8081734:	4620      	mov	r0, r4
}
 8081736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

boolean camera_VC0706::begin(uint16_t baud) {
	if(swSerial) swSerial->begin(baud);
	else         hwSerial->begin(baud);
	return reset();
 808173a:	f7ff bfe2 	b.w	8081702 <_ZN13camera_VC07065resetEv>

0808173e <_ZN13camera_VC070619cameraFrameBuffCtrlEh>:
boolean camera_VC0706::TVoff() {
	uint8_t args[] = {0x1, 0x0};
	return runCommand(VC0706_TVOUT_CTRL, args, sizeof(args), 5);
}

boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
 808173e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x1, command};
 8081740:	2301      	movs	r3, #1
 8081742:	f88d 300c 	strb.w	r3, [sp, #12]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 8081746:	9301      	str	r3, [sp, #4]
 8081748:	2305      	movs	r3, #5
	uint8_t args[] = {0x1, 0x0};
	return runCommand(VC0706_TVOUT_CTRL, args, sizeof(args), 5);
}

boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
 808174a:	f88d 100d 	strb.w	r1, [sp, #13]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 808174e:	9300      	str	r3, [sp, #0]
 8081750:	aa03      	add	r2, sp, #12
 8081752:	2302      	movs	r3, #2
 8081754:	2136      	movs	r1, #54	; 0x36
 8081756:	f7ff ffaf 	bl	80816b8 <_ZN13camera_VC070610runCommandEhPhhhb>
}
 808175a:	b005      	add	sp, #20
 808175c:	f85d fb04 	ldr.w	pc, [sp], #4

08081760 <_ZN13camera_VC070611takePictureEv>:
	return true;
}


boolean camera_VC0706::takePicture() {
	frameptr = 0;
 8081760:	2100      	movs	r1, #0
 8081762:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
	return cameraFrameBuffCtrl(VC0706_STOPCURRENTFRAME);
 8081766:	f7ff bfea 	b.w	808173e <_ZN13camera_VC070619cameraFrameBuffCtrlEh>

0808176a <_ZN13camera_VC070611frameLengthEv>:
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
 808176a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x01, 0x00};
 808176c:	2301      	movs	r3, #1
 808176e:	2200      	movs	r2, #0
 8081770:	f88d 300c 	strb.w	r3, [sp, #12]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 8081774:	9301      	str	r3, [sp, #4]
 8081776:	2309      	movs	r3, #9
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
	uint8_t args[] = {0x01, 0x00};
 8081778:	f88d 200d 	strb.w	r2, [sp, #13]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 808177c:	9300      	str	r3, [sp, #0]
 808177e:	aa03      	add	r2, sp, #12
 8081780:	2302      	movs	r3, #2
 8081782:	2134      	movs	r1, #52	; 0x34
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
 8081784:	4604      	mov	r4, r0
	uint8_t args[] = {0x01, 0x00};
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 8081786:	f7ff ff97 	bl	80816b8 <_ZN13camera_VC070610runCommandEhPhhhb>
 808178a:	b140      	cbz	r0, 808179e <_ZN13camera_VC070611frameLengthEv+0x34>
 808178c:	88e3      	ldrh	r3, [r4, #6]
	uint32_t len;
	len = camerabuff[5];
	len <<= 8;
	len |= camerabuff[6];
	len <<= 8;
	len |= camerabuff[7];
 808178e:	7a20      	ldrb	r0, [r4, #8]
 8081790:	ba5b      	rev16	r3, r3
 8081792:	b29b      	uxth	r3, r3
 8081794:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	len <<= 8;
	len |= camerabuff[8];
 8081798:	7a63      	ldrb	r3, [r4, #9]
 808179a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8

	return len;
}
 808179e:	b004      	add	sp, #16
 80817a0:	bd10      	pop	{r4, pc}

080817a2 <_ZN13camera_VC070611readPictureEh>:
uint8_t camera_VC0706::available(void) {
	return bufferLen;
}


uint8_t * camera_VC0706::readPicture(uint8_t n) {
 80817a2:	b570      	push	{r4, r5, r6, lr}
 80817a4:	4604      	mov	r4, r0
 80817a6:	460d      	mov	r5, r1
 80817a8:	b086      	sub	sp, #24
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 80817aa:	220d      	movs	r2, #13
 80817ac:	2100      	movs	r1, #0
 80817ae:	a802      	add	r0, sp, #8
 80817b0:	f008 fb9a 	bl	8089ee8 <memset>
 80817b4:	230c      	movs	r3, #12
 80817b6:	f88d 3008 	strb.w	r3, [sp, #8]
}


uint8_t * camera_VC0706::readPicture(uint8_t n) {
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
 80817ba:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 80817be:	260a      	movs	r6, #10
 80817c0:	121a      	asrs	r2, r3, #8
 80817c2:	f88d 200d 	strb.w	r2, [sp, #13]
 80817c6:	f88d 300e 	strb.w	r3, [sp, #14]

	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 80817ca:	2205      	movs	r2, #5
 80817cc:	2300      	movs	r3, #0
 80817ce:	e88d 000c 	stmia.w	sp, {r2, r3}
 80817d2:	2132      	movs	r1, #50	; 0x32
 80817d4:	230d      	movs	r3, #13
 80817d6:	aa02      	add	r2, sp, #8
 80817d8:	4620      	mov	r0, r4
uint8_t * camera_VC0706::readPicture(uint8_t n) {
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 80817da:	f88d 600a 	strb.w	r6, [sp, #10]
 80817de:	f88d 6014 	strb.w	r6, [sp, #20]
 80817e2:	f88d 5012 	strb.w	r5, [sp, #18]

	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 80817e6:	f7ff ff67 	bl	80816b8 <_ZN13camera_VC070610runCommandEhPhhhb>
 80817ea:	b908      	cbnz	r0, 80817f0 <_ZN13camera_VC070611readPictureEh+0x4e>
		return 0;
 80817ec:	2000      	movs	r0, #0
 80817ee:	e00d      	b.n	808180c <_ZN13camera_VC070611readPictureEh+0x6a>


	// read into the buffer PACKETLEN!
	if (readResponse(n+5, CAMERADELAY) == 0)
 80817f0:	1d69      	adds	r1, r5, #5
 80817f2:	4632      	mov	r2, r6
 80817f4:	b2c9      	uxtb	r1, r1
 80817f6:	4620      	mov	r0, r4
 80817f8:	f7ff ff0a 	bl	8081610 <_ZN13camera_VC070612readResponseEhh>
 80817fc:	2800      	cmp	r0, #0
 80817fe:	d0f5      	beq.n	80817ec <_ZN13camera_VC070611readPictureEh+0x4a>
		return 0;


	frameptr += n;
 8081800:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68

	return camerabuff;
 8081804:	1c60      	adds	r0, r4, #1
	// read into the buffer PACKETLEN!
	if (readResponse(n+5, CAMERADELAY) == 0)
		return 0;


	frameptr += n;
 8081806:	4429      	add	r1, r5
 8081808:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68

	return camerabuff;
}
 808180c:	b006      	add	sp, #24
 808180e:	bd70      	pop	{r4, r5, r6, pc}

08081810 <_GLOBAL__sub_I__ZN13camera_VC070611common_initEv>:
 8081810:	f003 bd36 	b.w	8085280 <HAL_Pin_Map>

08081814 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8081814:	f003 bd34 	b.w	8085280 <HAL_Pin_Map>

08081818 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8081818:	f003 bd32 	b.w	8085280 <HAL_Pin_Map>

0808181c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 808181c:	b510      	push	{r4, lr}
 808181e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081820:	3024      	adds	r0, #36	; 0x24
 8081822:	f000 fe79 	bl	8082518 <_ZN8FatCache4syncEv>
 8081826:	b128      	cbz	r0, 8081834 <_ZN9FatVolume9cacheSyncEv+0x18>
 8081828:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 808182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081830:	f000 be72 	b.w	8082518 <_ZN8FatCache4syncEv>
  }
 8081834:	bd10      	pop	{r4, pc}

08081836 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8081836:	1e41      	subs	r1, r0, #1
 8081838:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 808183c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808183e:	0843      	lsrs	r3, r0, #1
 8081840:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8081844:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8081848:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808184a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808184c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081850:	d1f5      	bne.n	808183e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8081852:	4770      	bx	lr

08081854 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8081854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8081858:	7803      	ldrb	r3, [r0, #0]
 808185a:	1c44      	adds	r4, r0, #1
 808185c:	2b20      	cmp	r3, #32
 808185e:	d101      	bne.n	8081864 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8081860:	4620      	mov	r0, r4
 8081862:	e7f9      	b.n	8081858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8081864:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081866:	4f70      	ldr	r7, [pc, #448]	; (8081a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8081868:	6088      	str	r0, [r1, #8]
 808186a:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 808186c:	462e      	mov	r6, r5
 808186e:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8081872:	b30b      	cbz	r3, 80818b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8081874:	2b2f      	cmp	r3, #47	; 0x2f
 8081876:	d101      	bne.n	808187c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8081878:	1903      	adds	r3, r0, r4
 808187a:	e017      	b.n	80818ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808187c:	2b5c      	cmp	r3, #92	; 0x5c
 808187e:	d102      	bne.n	8081886 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8081880:	2000      	movs	r0, #0
 8081882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081886:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808188a:	b2e4      	uxtb	r4, r4
 808188c:	2c1d      	cmp	r4, #29
 808188e:	d803      	bhi.n	8081898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8081890:	fa27 f404 	lsr.w	r4, r7, r4
 8081894:	07e4      	lsls	r4, r4, #31
 8081896:	d4f3      	bmi.n	8081880 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8081898:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 808189c:	2c3c      	cmp	r4, #60	; 0x3c
 808189e:	d0ef      	beq.n	8081880 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80818a0:	3b20      	subs	r3, #32
 80818a2:	2b5e      	cmp	r3, #94	; 0x5e
 80818a4:	d9e1      	bls.n	808186a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80818a6:	e7eb      	b.n	8081880 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80818a8:	2d2f      	cmp	r5, #47	; 0x2f
 80818aa:	d105      	bne.n	80818b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80818ac:	461e      	mov	r6, r3
 80818ae:	f813 5b01 	ldrb.w	r5, [r3], #1
 80818b2:	2d20      	cmp	r5, #32
 80818b4:	d1f8      	bne.n	80818a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80818b6:	e7f9      	b.n	80818ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80818b8:	6016      	str	r6, [r2, #0]
 80818ba:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80818bc:	4298      	cmp	r0, r3
 80818be:	ebc0 0803 	rsb	r8, r0, r3
 80818c2:	d009      	beq.n	80818d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80818c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80818c8:	2a2e      	cmp	r2, #46	; 0x2e
 80818ca:	d0f7      	beq.n	80818bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80818cc:	2a20      	cmp	r2, #32
 80818ce:	d0f5      	beq.n	80818bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80818d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80818d4:	dcd4      	bgt.n	8081880 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80818d6:	e001      	b.n	80818dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80818d8:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80818dc:	f8c1 8004 	str.w	r8, [r1, #4]
 80818e0:	f101 030c 	add.w	r3, r1, #12
 80818e4:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80818e8:	2420      	movs	r4, #32
 80818ea:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80818ee:	4293      	cmp	r3, r2
 80818f0:	d1fb      	bne.n	80818ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80818f2:	4603      	mov	r3, r0
 80818f4:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80818f6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80818fa:	2c2e      	cmp	r4, #46	; 0x2e
 80818fc:	d0fa      	beq.n	80818f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 80818fe:	2c20      	cmp	r4, #32
 8081900:	d0f8      	beq.n	80818f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8081902:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8081906:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808190a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808190c:	1c73      	adds	r3, r6, #1
 808190e:	d107      	bne.n	8081920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8081910:	2700      	movs	r7, #0
 8081912:	f04f 0e07 	mov.w	lr, #7
 8081916:	463d      	mov	r5, r7
 8081918:	46ba      	mov	sl, r7
 808191a:	f04f 0908 	mov.w	r9, #8
 808191e:	e009      	b.n	8081934 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8081920:	5d83      	ldrb	r3, [r0, r6]
 8081922:	2b2e      	cmp	r3, #46	; 0x2e
 8081924:	d0f4      	beq.n	8081910 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8081926:	3e01      	subs	r6, #1
 8081928:	e7f0      	b.n	808190c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808192a:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 808192c:	2b20      	cmp	r3, #32
 808192e:	d104      	bne.n	808193a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8081930:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8081932:	3201      	adds	r2, #1
 8081934:	4542      	cmp	r2, r8
 8081936:	dbf8      	blt.n	808192a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8081938:	e04b      	b.n	80819d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808193a:	2b2e      	cmp	r3, #46	; 0x2e
 808193c:	d102      	bne.n	8081944 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 808193e:	42b2      	cmp	r2, r6
 8081940:	d1f6      	bne.n	8081930 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8081942:	e003      	b.n	808194c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8081944:	2b22      	cmp	r3, #34	; 0x22
 8081946:	d017      	beq.n	8081978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8081948:	2b7c      	cmp	r3, #124	; 0x7c
 808194a:	d015      	beq.n	8081978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808194c:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8081950:	f1bc 0f05 	cmp.w	ip, #5
 8081954:	d801      	bhi.n	808195a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8081956:	2b2d      	cmp	r3, #45	; 0x2d
 8081958:	d10e      	bne.n	8081978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808195a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 808195e:	f1bc 0f05 	cmp.w	ip, #5
 8081962:	d909      	bls.n	8081978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8081964:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8081968:	f1bc 0f02 	cmp.w	ip, #2
 808196c:	d904      	bls.n	8081978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 808196e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8081972:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8081976:	d902      	bls.n	808197e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8081978:	42b2      	cmp	r2, r6
 808197a:	d10e      	bne.n	808199a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 808197c:	e049      	b.n	8081a12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808197e:	42b2      	cmp	r2, r6
 8081980:	d047      	beq.n	8081a12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8081982:	4575      	cmp	r5, lr
 8081984:	d821      	bhi.n	80819ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8081986:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 808198a:	f1bc 0f19 	cmp.w	ip, #25
 808198e:	d808      	bhi.n	80819a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8081990:	3b20      	subs	r3, #32
 8081992:	b2db      	uxtb	r3, r3
        lc |= bit;
 8081994:	ea49 0707 	orr.w	r7, r9, r7
 8081998:	e00a      	b.n	80819b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808199a:	4575      	cmp	r5, lr
 808199c:	d815      	bhi.n	80819ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 808199e:	2400      	movs	r4, #0
      c = '_';
 80819a0:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80819a2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80819a6:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80819aa:	bf98      	it	ls
 80819ac:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80819b0:	f105 0c01 	add.w	ip, r5, #1
 80819b4:	fa5f fc8c 	uxtb.w	ip, ip
 80819b8:	440d      	add	r5, r1
      if (i < 7) {
 80819ba:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80819be:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80819c0:	d801      	bhi.n	80819c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80819c2:	f881 c00c 	strb.w	ip, [r1, #12]
 80819c6:	4665      	mov	r5, ip
 80819c8:	e7b3      	b.n	8081932 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80819ca:	f1be 0f0a 	cmp.w	lr, #10
 80819ce:	d117      	bne.n	8081a00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80819d0:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80819d2:	7b4b      	ldrb	r3, [r1, #13]
 80819d4:	2b20      	cmp	r3, #32
 80819d6:	f43f af53 	beq.w	8081880 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80819da:	b13c      	cbz	r4, 80819ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80819dc:	ea1a 0f07 	tst.w	sl, r7
 80819e0:	bf18      	it	ne
 80819e2:	2702      	movne	r7, #2
 80819e4:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80819e6:	2001      	movs	r0, #1
 80819e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 80819ec:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80819ee:	2001      	movs	r0, #1
 80819f0:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80819f2:	4419      	add	r1, r3
 80819f4:	237e      	movs	r3, #126	; 0x7e
 80819f6:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80819f8:	2331      	movs	r3, #49	; 0x31
 80819fa:	738b      	strb	r3, [r1, #14]
 80819fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8081a00:	42b2      	cmp	r2, r6
 8081a02:	dce5      	bgt.n	80819d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8081a04:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8081a06:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081a0a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081a0c:	f04f 0910 	mov.w	r9, #16
 8081a10:	e78e      	b.n	8081930 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8081a12:	f1be 0f0a 	cmp.w	lr, #10
 8081a16:	d0db      	beq.n	80819d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8081a18:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8081a1a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081a1e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081a20:	f04f 0910 	mov.w	r9, #16
 8081a24:	e785      	b.n	8081932 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8081a26:	bf00      	nop
 8081a28:	31000101 	.word	0x31000101

08081a2c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8081a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081a30:	4606      	mov	r6, r0
 8081a32:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8081a34:	f891 900c 	ldrb.w	r9, [r1, #12]
 8081a38:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8081a3a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8081a3c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8081a40:	6869      	ldr	r1, [r5, #4]
 8081a42:	68aa      	ldr	r2, [r5, #8]
 8081a44:	1863      	adds	r3, r4, r1
 8081a46:	b29b      	uxth	r3, r3
 8081a48:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8081a4a:	4291      	cmp	r1, r2
 8081a4c:	d006      	beq.n	8081a5c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8081a4e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8081a52:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8081a56:	4043      	eors	r3, r0
 8081a58:	b29b      	uxth	r3, r3
 8081a5a:	e7f6      	b.n	8081a4a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8081a5c:	f1b9 0f03 	cmp.w	r9, #3
 8081a60:	bf28      	it	cs
 8081a62:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081a66:	f109 0204 	add.w	r2, r9, #4
 8081a6a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8081a6c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081a70:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081a72:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081a74:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081a76:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081a78:	bf94      	ite	ls
 8081a7a:	3130      	addls	r1, #48	; 0x30
 8081a7c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081a7e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081a80:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8081a82:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081a86:	d3f1      	bcc.n	8081a6c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8081a88:	eb05 0309 	add.w	r3, r5, r9
 8081a8c:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8081a8e:	2100      	movs	r1, #0
 8081a90:	4630      	mov	r0, r6
 8081a92:	f000 fb1e 	bl	80820d2 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8081a96:	2101      	movs	r1, #1
 8081a98:	4630      	mov	r0, r6
 8081a9a:	f000 fafd 	bl	8082098 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8081a9e:	4601      	mov	r1, r0
 8081aa0:	b928      	cbnz	r0, 8081aae <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8081aa2:	7870      	ldrb	r0, [r6, #1]
 8081aa4:	fab0 f080 	clz	r0, r0
 8081aa8:	0940      	lsrs	r0, r0, #5
 8081aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8081aae:	7803      	ldrb	r3, [r0, #0]
 8081ab0:	b14b      	cbz	r3, 8081ac6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8081ab2:	7ac3      	ldrb	r3, [r0, #11]
 8081ab4:	071b      	lsls	r3, r3, #28
 8081ab6:	d4ee      	bmi.n	8081a96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8081ab8:	220b      	movs	r2, #11
 8081aba:	4640      	mov	r0, r8
 8081abc:	f008 f9fa 	bl	8089eb4 <memcmp>
 8081ac0:	2800      	cmp	r0, #0
 8081ac2:	d1e8      	bne.n	8081a96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8081ac4:	e002      	b.n	8081acc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8081ac6:	2001      	movs	r0, #1
 8081ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081acc:	3401      	adds	r4, #1
 8081ace:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8081ad0:	2c64      	cmp	r4, #100	; 0x64
 8081ad2:	d1b5      	bne.n	8081a40 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8081ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08081ad8 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081adc:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081ade:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081ae0:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081ae2:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081ae6:	9005      	str	r0, [sp, #20]
 8081ae8:	460e      	mov	r6, r1
 8081aea:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081aec:	d101      	bne.n	8081af2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8081aee:	2000      	movs	r0, #0
 8081af0:	e1a0      	b.n	8081e34 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081af2:	9b05      	ldr	r3, [sp, #20]
 8081af4:	781b      	ldrb	r3, [r3, #0]
 8081af6:	2b00      	cmp	r3, #0
 8081af8:	d1f9      	bne.n	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8081afa:	6853      	ldr	r3, [r2, #4]
 8081afc:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081afe:	7813      	ldrb	r3, [r2, #0]
 8081b00:	079b      	lsls	r3, r3, #30
 8081b02:	f000 818d 	beq.w	8081e20 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 8081b06:	9b02      	ldr	r3, [sp, #8]
 8081b08:	270d      	movs	r7, #13
 8081b0a:	330c      	adds	r3, #12
 8081b0c:	fbb3 f7f7 	udiv	r7, r3, r7
 8081b10:	3701      	adds	r7, #1
 8081b12:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8081b14:	f04f 0800 	mov.w	r8, #0
 8081b18:	2100      	movs	r1, #0
 8081b1a:	4630      	mov	r0, r6
 8081b1c:	f000 fad9 	bl	80820d2 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8081b20:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8081b22:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8081b24:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081b26:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8081b2a:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8081b2e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081b32:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081b34:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8081b36:	2101      	movs	r1, #1
 8081b38:	4630      	mov	r0, r6
 8081b3a:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081b3c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8081b40:	f000 faaa 	bl	8082098 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8081b44:	9b07      	ldr	r3, [sp, #28]
 8081b46:	b920      	cbnz	r0, 8081b52 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 8081b48:	7873      	ldrb	r3, [r6, #1]
 8081b4a:	2b00      	cmp	r3, #0
 8081b4c:	f000 8090 	beq.w	8081c70 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8081b50:	e7cd      	b.n	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8081b52:	7802      	ldrb	r2, [r0, #0]
 8081b54:	2ae5      	cmp	r2, #229	; 0xe5
 8081b56:	d000      	beq.n	8081b5a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8081b58:	b942      	cbnz	r2, 8081b6c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081b5a:	2c00      	cmp	r4, #0
 8081b5c:	bf08      	it	eq
 8081b5e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8081b60:	42bc      	cmp	r4, r7
        freeFound++;
 8081b62:	bf3c      	itt	cc
 8081b64:	3401      	addcc	r4, #1
 8081b66:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8081b68:	b922      	cbnz	r2, 8081b74 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 8081b6a:	e081      	b.n	8081c70 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8081b6c:	42bc      	cmp	r4, r7
 8081b6e:	bf38      	it	cc
 8081b70:	2400      	movcc	r4, #0
 8081b72:	e003      	b.n	8081b7c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8081b74:	2ae5      	cmp	r2, #229	; 0xe5
 8081b76:	d101      	bne.n	8081b7c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8081b78:	2500      	movs	r5, #0
 8081b7a:	e7db      	b.n	8081b34 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8081b7c:	2a2e      	cmp	r2, #46	; 0x2e
 8081b7e:	d0fb      	beq.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081b80:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8081b82:	290f      	cmp	r1, #15
 8081b84:	d152      	bne.n	8081c2c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8081b86:	b93d      	cbnz	r5, 8081b98 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8081b88:	0651      	lsls	r1, r2, #25
 8081b8a:	d5d3      	bpl.n	8081b34 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8081b8c:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8081b8e:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 8081b92:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8081b94:	462b      	mov	r3, r5
 8081b96:	e007      	b.n	8081ba8 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8081b98:	3b01      	subs	r3, #1
 8081b9a:	b2db      	uxtb	r3, r3
 8081b9c:	429a      	cmp	r2, r3
 8081b9e:	d1eb      	bne.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081ba0:	7b42      	ldrb	r2, [r0, #13]
 8081ba2:	9903      	ldr	r1, [sp, #12]
 8081ba4:	4291      	cmp	r1, r2
 8081ba6:	d1e7      	bne.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8081ba8:	1e5a      	subs	r2, r3, #1
 8081baa:	f04f 0c0d 	mov.w	ip, #13
 8081bae:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8081bb2:	9a02      	ldr	r2, [sp, #8]
 8081bb4:	4562      	cmp	r2, ip
 8081bb6:	d9df      	bls.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081bb8:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8081bbc:	f1be 0f04 	cmp.w	lr, #4
 8081bc0:	fa5f f28e 	uxtb.w	r2, lr
 8081bc4:	d804      	bhi.n	8081bd0 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 8081bc6:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8081bca:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8081bce:	e00c      	b.n	8081bea <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081bd0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081bd2:	bf95      	itete	ls
 8081bd4:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081bd8:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081bdc:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081be0:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081be4:	bf94      	ite	ls
 8081be6:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081be8:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8081bea:	9902      	ldr	r1, [sp, #8]
 8081bec:	4561      	cmp	r1, ip
 8081bee:	d103      	bne.n	8081bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8081bf0:	2a00      	cmp	r2, #0
 8081bf2:	bf18      	it	ne
 8081bf4:	2500      	movne	r5, #0
 8081bf6:	e79d      	b.n	8081b34 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081bf8:	2aff      	cmp	r2, #255	; 0xff
 8081bfa:	d8bd      	bhi.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081bfc:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081bfe:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8081c02:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081c04:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081c08:	bf98      	it	ls
 8081c0a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081c0c:	f811 100c 	ldrb.w	r1, [r1, ip]
 8081c10:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081c14:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8081c18:	bf98      	it	ls
 8081c1a:	b2d2      	uxtbls	r2, r2
 8081c1c:	f1bc 0f19 	cmp.w	ip, #25
 8081c20:	bf9c      	itt	ls
 8081c22:	3120      	addls	r1, #32
 8081c24:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081c26:	4291      	cmp	r1, r2
 8081c28:	d1a6      	bne.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081c2a:	e0fb      	b.n	8081e24 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081c2c:	0709      	lsls	r1, r1, #28
 8081c2e:	d4a3      	bmi.n	8081b78 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8081c30:	b14d      	cbz	r5, 8081c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8081c32:	2b01      	cmp	r3, #1
 8081c34:	f47f af5b 	bne.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081c38:	f7ff fdfd 	bl	8081836 <_ZN7FatFile11lfnChecksumEPh>
 8081c3c:	9b03      	ldr	r3, [sp, #12]
 8081c3e:	4283      	cmp	r3, r0
 8081c40:	f47f af55 	bne.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081c44:	e00f      	b.n	8081c66 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081c46:	220b      	movs	r2, #11
 8081c48:	9906      	ldr	r1, [sp, #24]
 8081c4a:	9307      	str	r3, [sp, #28]
 8081c4c:	f008 f932 	bl	8089eb4 <memcmp>
 8081c50:	9b07      	ldr	r3, [sp, #28]
 8081c52:	2800      	cmp	r0, #0
 8081c54:	f47f af6e 	bne.w	8081b34 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8081c58:	f899 2000 	ldrb.w	r2, [r9]
 8081c5c:	07d2      	lsls	r2, r2, #31
 8081c5e:	d502      	bpl.n	8081c66 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8081c60:	2201      	movs	r2, #1
 8081c62:	9204      	str	r2, [sp, #16]
 8081c64:	e766      	b.n	8081b34 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8081c66:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8081c6a:	f000 80d1 	beq.w	8081e10 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 8081c6e:	e73e      	b.n	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8081c70:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8081c74:	f43f af3b 	beq.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081c78:	f00b 0303 	and.w	r3, fp, #3
 8081c7c:	3b01      	subs	r3, #1
 8081c7e:	2b01      	cmp	r3, #1
 8081c80:	f63f af35 	bhi.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8081c84:	2c00      	cmp	r4, #0
 8081c86:	bf08      	it	eq
 8081c88:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8081c8a:	42bc      	cmp	r4, r7
 8081c8c:	d302      	bcc.n	8081c94 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8081c8e:	9b04      	ldr	r3, [sp, #16]
 8081c90:	b9cb      	cbnz	r3, 8081cc6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 8081c92:	e01f      	b.n	8081cd4 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8081c94:	2100      	movs	r1, #0
 8081c96:	4630      	mov	r0, r6
 8081c98:	f000 f9fe 	bl	8082098 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8081c9c:	b910      	cbnz	r0, 8081ca4 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 8081c9e:	7873      	ldrb	r3, [r6, #1]
 8081ca0:	b15b      	cbz	r3, 8081cba <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 8081ca2:	e724      	b.n	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8081ca4:	3401      	adds	r4, #1
 8081ca6:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8081ca8:	e7ef      	b.n	8081c8a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 8081caa:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8081cac:	791b      	ldrb	r3, [r3, #4]
 8081cae:	2b01      	cmp	r3, #1
 8081cb0:	d8ed      	bhi.n	8081c8e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 8081cb2:	3410      	adds	r4, #16
 8081cb4:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8081cb6:	42a7      	cmp	r7, r4
 8081cb8:	d9e9      	bls.n	8081c8e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8081cba:	4630      	mov	r0, r6
 8081cbc:	f000 f8d2 	bl	8081e64 <_ZN7FatFile13addDirClusterEv>
 8081cc0:	2800      	cmp	r0, #0
 8081cc2:	d1f2      	bne.n	8081caa <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 8081cc4:	e713      	b.n	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8081cc6:	4649      	mov	r1, r9
 8081cc8:	4630      	mov	r0, r6
 8081cca:	f7ff feaf 	bl	8081a2c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8081cce:	2800      	cmp	r0, #0
 8081cd0:	f43f af0d 	beq.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8081cd4:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8081cd8:	4630      	mov	r0, r6
 8081cda:	f000 f9fa 	bl	80820d2 <_ZN7FatFile7seekSetEm>
 8081cde:	2800      	cmp	r0, #0
 8081ce0:	f43f af05 	beq.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8081ce4:	1e7d      	subs	r5, r7, #1
 8081ce6:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8081ce8:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8081cea:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8081cee:	f04f 080f 	mov.w	r8, #15
 8081cf2:	e041      	b.n	8081d78 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8081cf4:	2100      	movs	r1, #0
 8081cf6:	4630      	mov	r0, r6
 8081cf8:	f000 f9ce 	bl	8082098 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081cfc:	4607      	mov	r7, r0
 8081cfe:	2800      	cmp	r0, #0
 8081d00:	f43f aef5 	beq.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8081d04:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081d06:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8081d08:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081d0c:	f043 0301 	orr.w	r3, r3, #1
 8081d10:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8081d14:	bf14      	ite	ne
 8081d16:	4622      	movne	r2, r4
 8081d18:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8081d1c:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8081d1e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8081d22:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8081d26:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081d2a:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081d2c:	f7ff fd83 	bl	8081836 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081d30:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081d32:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8081d34:	f887 a01a 	strb.w	sl, [r7, #26]
 8081d38:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081d3c:	f002 021f 	and.w	r2, r2, #31
 8081d40:	230d      	movs	r3, #13
 8081d42:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8081d44:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081d48:	435a      	muls	r2, r3
 8081d4a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081d4c:	9902      	ldr	r1, [sp, #8]
 8081d4e:	4291      	cmp	r1, r2
 8081d50:	d915      	bls.n	8081d7e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8081d52:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8081d56:	2b04      	cmp	r3, #4
 8081d58:	fa5f fc83 	uxtb.w	ip, r3
 8081d5c:	f103 0001 	add.w	r0, r3, #1
 8081d60:	d813      	bhi.n	8081d8a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 8081d62:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8081d66:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8081d6a:	280d      	cmp	r0, #13
 8081d6c:	f102 0201 	add.w	r2, r2, #1
 8081d70:	4603      	mov	r3, r0
 8081d72:	d1eb      	bne.n	8081d4c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8081d74:	3c01      	subs	r4, #1
 8081d76:	b2e4      	uxtb	r4, r4
 8081d78:	2c00      	cmp	r4, #0
 8081d7a:	d1bb      	bne.n	8081cf4 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 8081d7c:	e00e      	b.n	8081d9c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081d7e:	bf14      	ite	ne
 8081d80:	f04f 31ff 	movne.w	r1, #4294967295
 8081d84:	2100      	moveq	r1, #0
 8081d86:	b289      	uxth	r1, r1
 8081d88:	e7e5      	b.n	8081d56 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081d8a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8081d8e:	bf94      	ite	ls
 8081d90:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8081d94:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8081d98:	8099      	strh	r1, [r3, #4]
 8081d9a:	e7e6      	b.n	8081d6a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8081d9c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8081d9e:	4621      	mov	r1, r4
 8081da0:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8081da2:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8081da6:	f000 f977 	bl	8082098 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8081daa:	4607      	mov	r7, r0
 8081dac:	2800      	cmp	r0, #0
 8081dae:	f43f ae9e 	beq.w	8081aee <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8081db2:	2220      	movs	r2, #32
 8081db4:	4621      	mov	r1, r4
 8081db6:	f008 f897 	bl	8089ee8 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8081dba:	464b      	mov	r3, r9
 8081dbc:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8081dc0:	603a      	str	r2, [r7, #0]
 8081dc2:	685a      	ldr	r2, [r3, #4]
 8081dc4:	607a      	str	r2, [r7, #4]
 8081dc6:	891a      	ldrh	r2, [r3, #8]
 8081dc8:	813a      	strh	r2, [r7, #8]
 8081dca:	7a9b      	ldrb	r3, [r3, #10]
 8081dcc:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8081dce:	f899 3000 	ldrb.w	r3, [r9]
 8081dd2:	f003 0318 	and.w	r3, r3, #24
 8081dd6:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8081dd8:	4b18      	ldr	r3, [pc, #96]	; (8081e3c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 8081dda:	681b      	ldr	r3, [r3, #0]
 8081ddc:	b12b      	cbz	r3, 8081dea <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8081dde:	f107 010e 	add.w	r1, r7, #14
 8081de2:	f107 0010 	add.w	r0, r7, #16
 8081de6:	4798      	blx	r3
 8081de8:	e006      	b.n	8081df8 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8081dea:	2321      	movs	r3, #33	; 0x21
 8081dec:	743b      	strb	r3, [r7, #16]
 8081dee:	2328      	movs	r3, #40	; 0x28
 8081df0:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8081df2:	2308      	movs	r3, #8
 8081df4:	73bc      	strb	r4, [r7, #14]
 8081df6:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8081df8:	8a3b      	ldrh	r3, [r7, #16]
 8081dfa:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8081dfc:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8081dfe:	89fb      	ldrh	r3, [r7, #14]
 8081e00:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8081e02:	68b2      	ldr	r2, [r6, #8]
 8081e04:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081e08:	f043 0301 	orr.w	r3, r3, #1
 8081e0c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8081e10:	9500      	str	r5, [sp, #0]
 8081e12:	465b      	mov	r3, fp
 8081e14:	4652      	mov	r2, sl
 8081e16:	4631      	mov	r1, r6
 8081e18:	9805      	ldr	r0, [sp, #20]
 8081e1a:	f000 f9a3 	bl	8082164 <_ZN7FatFile15openCachedEntryEPS_tih>
 8081e1e:	e009      	b.n	8081e34 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081e20:	2701      	movs	r7, #1
 8081e22:	e677      	b.n	8081b14 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8081e24:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8081e28:	f1be 0f0d 	cmp.w	lr, #13
 8081e2c:	f43f ae82 	beq.w	8081b34 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081e30:	46d4      	mov	ip, sl
 8081e32:	e6c3      	b.n	8081bbc <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8081e34:	b009      	add	sp, #36	; 0x24
 8081e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081e3a:	bf00      	nop
 8081e3c:	20000744 	.word	0x20000744

08081e40 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081e40:	f003 ba1e 	b.w	8085280 <HAL_Pin_Map>

08081e44 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8081e44:	f003 ba1c 	b.w	8085280 <HAL_Pin_Map>

08081e48 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8081e48:	f003 ba1a 	b.w	8085280 <HAL_Pin_Map>

08081e4c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8081e4c:	f003 ba18 	b.w	8085280 <HAL_Pin_Map>

08081e50 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081e50:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081e52:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081e56:	f043 0304 	orr.w	r3, r3, #4
 8081e5a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081e5c:	6901      	ldr	r1, [r0, #16]
 8081e5e:	6880      	ldr	r0, [r0, #8]
 8081e60:	f000 bc10 	b.w	8082684 <_ZN9FatVolume15allocateClusterEmPm>

08081e64 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081e68:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081e6a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081e6c:	f003 0320 	and.w	r3, r3, #32
 8081e70:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8081e74:	b10b      	cbz	r3, 8081e7a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8081e76:	2600      	movs	r6, #0
 8081e78:	e02e      	b.n	8081ed8 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8081e7a:	6942      	ldr	r2, [r0, #20]
 8081e7c:	4b18      	ldr	r3, [pc, #96]	; (8081ee0 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8081e7e:	429a      	cmp	r2, r3
 8081e80:	d8f9      	bhi.n	8081e76 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8081e82:	f7ff ffe5 	bl	8081e50 <_ZN7FatFile10addClusterEv>
 8081e86:	4606      	mov	r6, r0
 8081e88:	2800      	cmp	r0, #0
 8081e8a:	d0f4      	beq.n	8081e76 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 8081e8c:	6921      	ldr	r1, [r4, #16]
 8081e8e:	68a0      	ldr	r0, [r4, #8]
 8081e90:	f000 fb8d 	bl	80825ae <_ZNK9FatVolume17clusterFirstBlockEm>
 8081e94:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081e96:	68a0      	ldr	r0, [r4, #8]
 8081e98:	2205      	movs	r2, #5
 8081e9a:	4639      	mov	r1, r7
 8081e9c:	3024      	adds	r0, #36	; 0x24
 8081e9e:	f000 fb62 	bl	8082566 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8081ea2:	4680      	mov	r8, r0
 8081ea4:	2800      	cmp	r0, #0
 8081ea6:	d0e6      	beq.n	8081e76 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8081ea8:	4629      	mov	r1, r5
 8081eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081eae:	f008 f81b 	bl	8089ee8 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8081eb2:	2501      	movs	r5, #1
 8081eb4:	68a3      	ldr	r3, [r4, #8]
 8081eb6:	791a      	ldrb	r2, [r3, #4]
 8081eb8:	42aa      	cmp	r2, r5
 8081eba:	d909      	bls.n	8081ed0 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8081ebc:	4642      	mov	r2, r8
 8081ebe:	19e9      	adds	r1, r5, r7
 8081ec0:	6818      	ldr	r0, [r3, #0]
 8081ec2:	f000 fecd 	bl	8082c60 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8081ec6:	2800      	cmp	r0, #0
 8081ec8:	d0d5      	beq.n	8081e76 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8081eca:	3501      	adds	r5, #1
 8081ecc:	b2ed      	uxtb	r5, r5
 8081ece:	e7f1      	b.n	8081eb4 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8081ed0:	6963      	ldr	r3, [r4, #20]
 8081ed2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8081ed6:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8081ed8:	4630      	mov	r0, r6
 8081eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081ede:	bf00      	nop
 8081ee0:	001ffdff 	.word	0x001ffdff

08081ee4 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8081ee4:	b510      	push	{r4, lr}
 8081ee6:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081ee8:	6880      	ldr	r0, [r0, #8]
 8081eea:	460a      	mov	r2, r1
 8081eec:	3024      	adds	r0, #36	; 0x24
 8081eee:	69a1      	ldr	r1, [r4, #24]
 8081ef0:	f000 fb39 	bl	8082566 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8081ef4:	b120      	cbz	r0, 8081f00 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8081ef6:	88a3      	ldrh	r3, [r4, #4]
 8081ef8:	f003 030f 	and.w	r3, r3, #15
 8081efc:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8081f00:	bd10      	pop	{r4, pc}

08081f02 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8081f02:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8081f04:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8081f06:	4605      	mov	r5, r0
 8081f08:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8081f0a:	b984      	cbnz	r4, 8081f2e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8081f0c:	2224      	movs	r2, #36	; 0x24
 8081f0e:	4621      	mov	r1, r4
 8081f10:	f007 ffea 	bl	8089ee8 <memset>

  m_vol = vol;
 8081f14:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8081f16:	79f3      	ldrb	r3, [r6, #7]
 8081f18:	2b10      	cmp	r3, #16
 8081f1a:	d003      	beq.n	8081f24 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8081f1c:	2b20      	cmp	r3, #32
 8081f1e:	d106      	bne.n	8081f2e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081f20:	2340      	movs	r3, #64	; 0x40
 8081f22:	e000      	b.n	8081f26 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8081f24:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8081f26:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081f28:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8081f2a:	70a8      	strb	r0, [r5, #2]
 8081f2c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8081f2e:	2000      	movs	r0, #0
 8081f30:	bd70      	pop	{r4, r5, r6, pc}

08081f32 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8081f32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081f36:	7803      	ldrb	r3, [r0, #0]
 8081f38:	4604      	mov	r4, r0
 8081f3a:	4689      	mov	r9, r1
 8081f3c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8081f3e:	b14b      	cbz	r3, 8081f54 <_ZN7FatFile4readEPvj+0x22>
 8081f40:	7882      	ldrb	r2, [r0, #2]
 8081f42:	07d1      	lsls	r1, r2, #31
 8081f44:	d506      	bpl.n	8081f54 <_ZN7FatFile4readEPvj+0x22>
 8081f46:	e00c      	b.n	8081f62 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081f48:	465a      	mov	r2, fp
 8081f4a:	6921      	ldr	r1, [r4, #16]
 8081f4c:	f000 fb35 	bl	80825ba <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081f50:	2800      	cmp	r0, #0
 8081f52:	da3d      	bge.n	8081fd0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081f54:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081f56:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081f5a:	f043 0302 	orr.w	r3, r3, #2
 8081f5e:	7063      	strb	r3, [r4, #1]
  return -1;
 8081f60:	e097      	b.n	8082092 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8081f62:	071a      	lsls	r2, r3, #28
 8081f64:	d503      	bpl.n	8081f6e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8081f66:	69e3      	ldr	r3, [r4, #28]
 8081f68:	6962      	ldr	r2, [r4, #20]
 8081f6a:	1a9b      	subs	r3, r3, r2
 8081f6c:	e007      	b.n	8081f7e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081f6e:	069a      	lsls	r2, r3, #26
 8081f70:	d508      	bpl.n	8081f84 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8081f72:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8081f74:	891a      	ldrh	r2, [r3, #8]
 8081f76:	6963      	ldr	r3, [r4, #20]
 8081f78:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8081f7c:	b29b      	uxth	r3, r3
 8081f7e:	429d      	cmp	r5, r3
 8081f80:	bf28      	it	cs
 8081f82:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8081f84:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8081f86:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081f8a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081f8e:	2e00      	cmp	r6, #0
 8081f90:	d035      	beq.n	8081ffe <_ZN7FatFile4readEPvj+0xcc>
 8081f92:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081f94:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8081f96:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081f9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8081f9e:	68a0      	ldr	r0, [r4, #8]
 8081fa0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8081fa4:	d002      	beq.n	8081fac <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8081fa6:	6a03      	ldr	r3, [r0, #32]
 8081fa8:	4419      	add	r1, r3
 8081faa:	e01d      	b.n	8081fe8 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081fac:	f890 8005 	ldrb.w	r8, [r0, #5]
 8081fb0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8081fb4:	f1ba 0f00 	cmp.w	sl, #0
 8081fb8:	d110      	bne.n	8081fdc <_ZN7FatFile4readEPvj+0xaa>
 8081fba:	f1b8 0f00 	cmp.w	r8, #0
 8081fbe:	d10d      	bne.n	8081fdc <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8081fc0:	2b00      	cmp	r3, #0
 8081fc2:	d1c1      	bne.n	8081f48 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081fc4:	0653      	lsls	r3, r2, #25
 8081fc6:	bf4c      	ite	mi
 8081fc8:	6a03      	ldrmi	r3, [r0, #32]
 8081fca:	6a23      	ldrpl	r3, [r4, #32]
 8081fcc:	6123      	str	r3, [r4, #16]
 8081fce:	e005      	b.n	8081fdc <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8081fd0:	d104      	bne.n	8081fdc <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8081fd2:	7823      	ldrb	r3, [r4, #0]
 8081fd4:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081fd8:	d111      	bne.n	8081ffe <_ZN7FatFile4readEPvj+0xcc>
 8081fda:	e7bb      	b.n	8081f54 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8081fdc:	6921      	ldr	r1, [r4, #16]
 8081fde:	68a0      	ldr	r0, [r4, #8]
 8081fe0:	f000 fae5 	bl	80825ae <_ZNK9FatVolume17clusterFirstBlockEm>
 8081fe4:	eb08 0100 	add.w	r1, r8, r0
 8081fe8:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8081fea:	f1ba 0f00 	cmp.w	sl, #0
 8081fee:	d135      	bne.n	808205c <_ZN7FatFile4readEPvj+0x12a>
 8081ff0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081ff4:	d332      	bcc.n	808205c <_ZN7FatFile4readEPvj+0x12a>
 8081ff6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8081ff8:	4299      	cmp	r1, r3
 8081ffa:	d102      	bne.n	8082002 <_ZN7FatFile4readEPvj+0xd0>
 8081ffc:	e02e      	b.n	808205c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8081ffe:	1ba8      	subs	r0, r5, r6
 8082000:	e047      	b.n	8082092 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8082002:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082006:	d31b      	bcc.n	8082040 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8082008:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 808200a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 808200e:	0697      	lsls	r7, r2, #26
 8082010:	d406      	bmi.n	8082020 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 8082012:	7902      	ldrb	r2, [r0, #4]
 8082014:	ebc8 0202 	rsb	r2, r8, r2
 8082018:	b2d2      	uxtb	r2, r2
 808201a:	4592      	cmp	sl, r2
 808201c:	bf28      	it	cs
 808201e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082020:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8082022:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082026:	d207      	bcs.n	8082038 <_ZN7FatFile4readEPvj+0x106>
 8082028:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 808202a:	4653      	mov	r3, sl
 808202c:	464a      	mov	r2, r9
 808202e:	6800      	ldr	r0, [r0, #0]
 8082030:	f000 fdd4 	bl	8082bdc <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8082034:	b960      	cbnz	r0, 8082050 <_ZN7FatFile4readEPvj+0x11e>
 8082036:	e78d      	b.n	8081f54 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082038:	4453      	add	r3, sl
 808203a:	4299      	cmp	r1, r3
 808203c:	d321      	bcc.n	8082082 <_ZN7FatFile4readEPvj+0x150>
 808203e:	e7f3      	b.n	8082028 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8082040:	464a      	mov	r2, r9
 8082042:	6800      	ldr	r0, [r0, #0]
 8082044:	f000 fd82 	bl	8082b4c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8082048:	2800      	cmp	r0, #0
 808204a:	d083      	beq.n	8081f54 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 808204c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8082050:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8082052:	44b9      	add	r9, r7
    m_curPosition += n;
 8082054:	443b      	add	r3, r7
 8082056:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8082058:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808205a:	e798      	b.n	8081f8e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808205c:	2200      	movs	r2, #0
 808205e:	3024      	adds	r0, #36	; 0x24
 8082060:	f000 fa81 	bl	8082566 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8082064:	2800      	cmp	r0, #0
 8082066:	f43f af75 	beq.w	8081f54 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808206a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 808206e:	42b7      	cmp	r7, r6
 8082070:	bf28      	it	cs
 8082072:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8082074:	eb00 010a 	add.w	r1, r0, sl
 8082078:	463a      	mov	r2, r7
 808207a:	4648      	mov	r0, r9
 808207c:	f007 ff29 	bl	8089ed2 <memcpy>
 8082080:	e7e6      	b.n	8082050 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8082082:	3024      	adds	r0, #36	; 0x24
 8082084:	9101      	str	r1, [sp, #4]
 8082086:	f000 fa47 	bl	8082518 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 808208a:	9901      	ldr	r1, [sp, #4]
 808208c:	2800      	cmp	r0, #0
 808208e:	d1cb      	bne.n	8082028 <_ZN7FatFile4readEPvj+0xf6>
 8082090:	e760      	b.n	8081f54 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8082092:	b003      	add	sp, #12
 8082094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082098 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8082098:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808209a:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808209c:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808209e:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80820a2:	b105      	cbz	r5, 80820a6 <_ZN7FatFile12readDirCacheEb+0xe>
 80820a4:	b969      	cbnz	r1, 80820c2 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80820a6:	2201      	movs	r2, #1
 80820a8:	f10d 0107 	add.w	r1, sp, #7
 80820ac:	4620      	mov	r0, r4
 80820ae:	f7ff ff40 	bl	8081f32 <_ZN7FatFile4readEPvj>
 80820b2:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80820b4:	2801      	cmp	r0, #1
 80820b6:	d001      	beq.n	80820bc <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80820b8:	2000      	movs	r0, #0
 80820ba:	e008      	b.n	80820ce <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80820bc:	6963      	ldr	r3, [r4, #20]
 80820be:	331f      	adds	r3, #31
 80820c0:	e000      	b.n	80820c4 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80820c2:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80820c4:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80820c6:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80820c8:	3030      	adds	r0, #48	; 0x30
 80820ca:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80820ce:	b003      	add	sp, #12
 80820d0:	bd30      	pop	{r4, r5, pc}

080820d2 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80820d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80820d6:	460e      	mov	r6, r1
 80820d8:	7801      	ldrb	r1, [r0, #0]
 80820da:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80820dc:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80820de:	2900      	cmp	r1, #0
 80820e0:	d039      	beq.n	8082156 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80820e2:	6945      	ldr	r5, [r0, #20]
 80820e4:	42b5      	cmp	r5, r6
 80820e6:	d03a      	beq.n	808215e <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80820e8:	b90e      	cbnz	r6, 80820ee <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80820ea:	6106      	str	r6, [r0, #16]
    goto done;
 80820ec:	e031      	b.n	8082152 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80820ee:	070b      	lsls	r3, r1, #28
 80820f0:	d503      	bpl.n	80820fa <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80820f2:	69c3      	ldr	r3, [r0, #28]
 80820f4:	429e      	cmp	r6, r3
 80820f6:	d82e      	bhi.n	8082156 <_ZN7FatFile7seekSetEm+0x84>
 80820f8:	e007      	b.n	808210a <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80820fa:	0688      	lsls	r0, r1, #26
 80820fc:	d505      	bpl.n	808210a <_ZN7FatFile7seekSetEm+0x38>
 80820fe:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8082100:	891b      	ldrh	r3, [r3, #8]
 8082102:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8082106:	d826      	bhi.n	8082156 <_ZN7FatFile7seekSetEm+0x84>
 8082108:	e023      	b.n	8082152 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808210a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808210e:	1e6a      	subs	r2, r5, #1
 8082110:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8082114:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8082118:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808211a:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808211c:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 808211e:	429a      	cmp	r2, r3
 8082120:	d800      	bhi.n	8082124 <_ZN7FatFile7seekSetEm+0x52>
 8082122:	b94d      	cbnz	r5, 8082138 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8082124:	064a      	lsls	r2, r1, #25
 8082126:	bf4c      	ite	mi
 8082128:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 808212c:	6a22      	ldrpl	r2, [r4, #32]
 808212e:	6122      	str	r2, [r4, #16]
 8082130:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8082132:	f104 0810 	add.w	r8, r4, #16
 8082136:	e00a      	b.n	808214e <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8082138:	1a9b      	subs	r3, r3, r2
 808213a:	e7f9      	b.n	8082130 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808213c:	4642      	mov	r2, r8
 808213e:	6921      	ldr	r1, [r4, #16]
 8082140:	68a0      	ldr	r0, [r4, #8]
 8082142:	f000 fa3a 	bl	80825ba <_ZN9FatVolume6fatGetEmPm>
 8082146:	2800      	cmp	r0, #0
 8082148:	f105 35ff 	add.w	r5, r5, #4294967295
 808214c:	dd03      	ble.n	8082156 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 808214e:	2d00      	cmp	r5, #0
 8082150:	d1f4      	bne.n	808213c <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8082152:	6166      	str	r6, [r4, #20]
 8082154:	e003      	b.n	808215e <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8082156:	6127      	str	r7, [r4, #16]
  return false;
 8082158:	2000      	movs	r0, #0
 808215a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 808215e:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8082160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082164 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8082164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082166:	460f      	mov	r7, r1
 8082168:	4604      	mov	r4, r0
 808216a:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808216c:	2100      	movs	r1, #0
 808216e:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8082170:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8082172:	f007 feb9 	bl	8089ee8 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8082176:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8082178:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808217a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 808217c:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808217e:	f005 020f 	and.w	r2, r5, #15
 8082182:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8082186:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8082188:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808218a:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 808218c:	7acb      	ldrb	r3, [r1, #11]
 808218e:	071d      	lsls	r5, r3, #28
 8082190:	d44c      	bmi.n	808222c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8082192:	1883      	adds	r3, r0, r2
 8082194:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8082198:	f003 0317 	and.w	r3, r3, #23
 808219c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808219e:	7ac9      	ldrb	r1, [r1, #11]
 80821a0:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 80821a4:	bf04      	itt	eq
 80821a6:	f043 0308 	orreq.w	r3, r3, #8
 80821aa:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 80821ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80821b0:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 80821b2:	f006 0303 	and.w	r3, r6, #3
 80821b6:	2b01      	cmp	r3, #1
 80821b8:	d009      	beq.n	80821ce <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 80821ba:	2b02      	cmp	r3, #2
 80821bc:	d005      	beq.n	80821ca <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 80821be:	2b00      	cmp	r3, #0
 80821c0:	d134      	bne.n	808222c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 80821c2:	0571      	lsls	r1, r6, #21
 80821c4:	d432      	bmi.n	808222c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 80821c6:	2301      	movs	r3, #1
 80821c8:	e002      	b.n	80821d0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 80821ca:	2303      	movs	r3, #3
 80821cc:	e000      	b.n	80821d0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 80821ce:	2302      	movs	r3, #2
 80821d0:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 80821d2:	78a1      	ldrb	r1, [r4, #2]
 80821d4:	078b      	lsls	r3, r1, #30
 80821d6:	d503      	bpl.n	80821e0 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 80821d8:	7823      	ldrb	r3, [r4, #0]
 80821da:	f013 0f11 	tst.w	r3, #17
 80821de:	d125      	bne.n	808222c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 80821e0:	b24b      	sxtb	r3, r1
 80821e2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80821e6:	f006 0108 	and.w	r1, r6, #8
 80821ea:	bf14      	ite	ne
 80821ec:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 80821f0:	2700      	moveq	r7, #0
 80821f2:	4319      	orrs	r1, r3
 80821f4:	4339      	orrs	r1, r7
 80821f6:	70a1      	strb	r1, [r4, #2]
 80821f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80821fa:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 80821fc:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80821fe:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8082202:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8082206:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8082208:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 808220c:	d504      	bpl.n	8082218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808220e:	b181      	cbz	r1, 8082232 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8082210:	f000 fa73 	bl	80826fa <_ZN9FatVolume9freeChainEm>
 8082214:	b968      	cbnz	r0, 8082232 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8082216:	e009      	b.n	808222c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8082218:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808221a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 808221c:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808221e:	0473      	lsls	r3, r6, #17
 8082220:	d50c      	bpl.n	808223c <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8082222:	69e1      	ldr	r1, [r4, #28]
 8082224:	4620      	mov	r0, r4
 8082226:	f7ff ff54 	bl	80820d2 <_ZN7FatFile7seekSetEm>
 808222a:	b938      	cbnz	r0, 808223c <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808222c:	2000      	movs	r0, #0
 808222e:	7020      	strb	r0, [r4, #0]
  return false;
 8082230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8082232:	78a3      	ldrb	r3, [r4, #2]
 8082234:	f043 0304 	orr.w	r3, r3, #4
 8082238:	70a3      	strb	r3, [r4, #2]
 808223a:	e7f0      	b.n	808221e <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 808223c:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 808223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082240 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8082240:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8082242:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8082244:	4604      	mov	r4, r0
  if (!isOpen()) {
 8082246:	b90b      	cbnz	r3, 808224c <_ZN7FatFile4syncEv+0xc>
    return true;
 8082248:	2001      	movs	r0, #1
 808224a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 808224c:	7883      	ldrb	r3, [r0, #2]
 808224e:	075a      	lsls	r2, r3, #29
 8082250:	d523      	bpl.n	808229a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8082252:	2101      	movs	r1, #1
 8082254:	f7ff fe46 	bl	8081ee4 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8082258:	4605      	mov	r5, r0
 808225a:	b928      	cbnz	r0, 8082268 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808225c:	7863      	ldrb	r3, [r4, #1]
  return false;
 808225e:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8082260:	f043 0301 	orr.w	r3, r3, #1
 8082264:	7063      	strb	r3, [r4, #1]
 8082266:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8082268:	7803      	ldrb	r3, [r0, #0]
 808226a:	2be5      	cmp	r3, #229	; 0xe5
 808226c:	d0f6      	beq.n	808225c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 808226e:	7823      	ldrb	r3, [r4, #0]
 8082270:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8082272:	bf44      	itt	mi
 8082274:	69e3      	ldrmi	r3, [r4, #28]
 8082276:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8082278:	8c23      	ldrh	r3, [r4, #32]
 808227a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808227c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808227e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8082280:	4b09      	ldr	r3, [pc, #36]	; (80822a8 <_ZN7FatFile4syncEv+0x68>)
 8082282:	681b      	ldr	r3, [r3, #0]
 8082284:	b12b      	cbz	r3, 8082292 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8082286:	f100 0116 	add.w	r1, r0, #22
 808228a:	3018      	adds	r0, #24
 808228c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 808228e:	8b2b      	ldrh	r3, [r5, #24]
 8082290:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8082292:	78a3      	ldrb	r3, [r4, #2]
 8082294:	f023 0304 	bic.w	r3, r3, #4
 8082298:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 808229a:	68a0      	ldr	r0, [r4, #8]
 808229c:	f7ff fabe 	bl	808181c <_ZN9FatVolume9cacheSyncEv>
 80822a0:	2800      	cmp	r0, #0
 80822a2:	d0db      	beq.n	808225c <_ZN7FatFile4syncEv+0x1c>
 80822a4:	e7d0      	b.n	8082248 <_ZN7FatFile4syncEv+0x8>
 80822a6:	bf00      	nop
 80822a8:	20000744 	.word	0x20000744

080822ac <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 80822ac:	b510      	push	{r4, lr}
 80822ae:	4604      	mov	r4, r0
  bool rtn = sync();
 80822b0:	f7ff ffc6 	bl	8082240 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80822b4:	2300      	movs	r3, #0
 80822b6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80822b8:	bd10      	pop	{r4, pc}

080822ba <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80822ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80822bc:	461f      	mov	r7, r3
 80822be:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80822c0:	2300      	movs	r3, #0
 80822c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80822c6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80822ca:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80822cc:	4606      	mov	r6, r0
 80822ce:	460c      	mov	r4, r1
 80822d0:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80822d2:	b10b      	cbz	r3, 80822d8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80822d4:	2000      	movs	r0, #0
 80822d6:	e03d      	b.n	8082354 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80822d8:	780b      	ldrb	r3, [r1, #0]
 80822da:	f013 0f70 	tst.w	r3, #112	; 0x70
 80822de:	d0f9      	beq.n	80822d4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80822e0:	7813      	ldrb	r3, [r2, #0]
 80822e2:	2b2f      	cmp	r3, #47	; 0x2f
 80822e4:	d112      	bne.n	808230c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 80822e6:	9b01      	ldr	r3, [sp, #4]
 80822e8:	781a      	ldrb	r2, [r3, #0]
 80822ea:	2a2f      	cmp	r2, #47	; 0x2f
 80822ec:	d102      	bne.n	80822f4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 80822ee:	3301      	adds	r3, #1
 80822f0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 80822f2:	e7f8      	b.n	80822e6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 80822f4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 80822f6:	b91a      	cbnz	r2, 8082300 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 80822f8:	4630      	mov	r0, r6
 80822fa:	f7ff fe02 	bl	8081f02 <_ZN7FatFile8openRootEP9FatVolume>
 80822fe:	e029      	b.n	8082354 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8082300:	a809      	add	r0, sp, #36	; 0x24
 8082302:	f7ff fdfe 	bl	8081f02 <_ZN7FatFile8openRootEP9FatVolume>
 8082306:	2800      	cmp	r0, #0
 8082308:	d0e4      	beq.n	80822d4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 808230a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 808230c:	aa01      	add	r2, sp, #4
 808230e:	a903      	add	r1, sp, #12
 8082310:	9801      	ldr	r0, [sp, #4]
 8082312:	f7ff fa9f 	bl	8081854 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8082316:	2800      	cmp	r0, #0
 8082318:	d0dc      	beq.n	80822d4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 808231a:	9b01      	ldr	r3, [sp, #4]
 808231c:	781b      	ldrb	r3, [r3, #0]
 808231e:	b19b      	cbz	r3, 8082348 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8082320:	2300      	movs	r3, #0
 8082322:	aa03      	add	r2, sp, #12
 8082324:	4621      	mov	r1, r4
 8082326:	4630      	mov	r0, r6
 8082328:	f7ff fbd6 	bl	8081ad8 <_ZN7FatFile4openEPS_P7fname_ti>
 808232c:	2800      	cmp	r0, #0
 808232e:	d0d1      	beq.n	80822d4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082330:	4635      	mov	r5, r6
 8082332:	ac09      	add	r4, sp, #36	; 0x24
 8082334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808233a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808233c:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808233e:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082340:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8082342:	f7ff ffb3 	bl	80822ac <_ZN7FatFile5closeEv>
 8082346:	e7e0      	b.n	808230a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8082348:	463b      	mov	r3, r7
 808234a:	aa03      	add	r2, sp, #12
 808234c:	4621      	mov	r1, r4
 808234e:	4630      	mov	r0, r6
 8082350:	f7ff fbc2 	bl	8081ad8 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 8082354:	b013      	add	sp, #76	; 0x4c
 8082356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082358 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 808235c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808235e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082360:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082362:	4604      	mov	r4, r0
 8082364:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082366:	d508      	bpl.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
 8082368:	7883      	ldrb	r3, [r0, #2]
 808236a:	079a      	lsls	r2, r3, #30
 808236c:	d505      	bpl.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 808236e:	071b      	lsls	r3, r3, #28
 8082370:	d50b      	bpl.n	808238a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8082372:	69e1      	ldr	r1, [r4, #28]
 8082374:	f7ff fead 	bl	80820d2 <_ZN7FatFile7seekSetEm>
 8082378:	b938      	cbnz	r0, 808238a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808237a:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808237c:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8082380:	f043 0301 	orr.w	r3, r3, #1
 8082384:	7063      	strb	r3, [r4, #1]
  return -1;
 8082386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 808238a:	6963      	ldr	r3, [r4, #20]
 808238c:	43db      	mvns	r3, r3
 808238e:	4598      	cmp	r8, r3
 8082390:	d8f3      	bhi.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
 8082392:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082394:	f04f 0a00 	mov.w	sl, #0
 8082398:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808239a:	2e00      	cmp	r6, #0
 808239c:	d07f      	beq.n	808249e <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 808239e:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80823a0:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80823a4:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80823a6:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 80823aa:	d11c      	bne.n	80823e6 <_ZN7FatFile5writeEPKvj+0x8e>
 80823ac:	b9df      	cbnz	r7, 80823e6 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 80823ae:	6921      	ldr	r1, [r4, #16]
 80823b0:	b171      	cbz	r1, 80823d0 <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80823b2:	f104 0210 	add.w	r2, r4, #16
 80823b6:	f000 f900 	bl	80825ba <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80823ba:	2800      	cmp	r0, #0
 80823bc:	dbdd      	blt.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80823be:	f040 808d 	bne.w	80824dc <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 80823c2:	4620      	mov	r0, r4
 80823c4:	f7ff fd44 	bl	8081e50 <_ZN7FatFile10addClusterEv>
 80823c8:	2800      	cmp	r0, #0
 80823ca:	f040 8087 	bne.w	80824dc <_ZN7FatFile5writeEPKvj+0x184>
 80823ce:	e7d4      	b.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80823d0:	6a23      	ldr	r3, [r4, #32]
 80823d2:	b93b      	cbnz	r3, 80823e4 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 80823d4:	4620      	mov	r0, r4
 80823d6:	f7ff fd3b 	bl	8081e50 <_ZN7FatFile10addClusterEv>
 80823da:	2800      	cmp	r0, #0
 80823dc:	d0cd      	beq.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80823de:	6923      	ldr	r3, [r4, #16]
 80823e0:	6223      	str	r3, [r4, #32]
 80823e2:	e000      	b.n	80823e6 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 80823e4:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80823e6:	6921      	ldr	r1, [r4, #16]
 80823e8:	68a0      	ldr	r0, [r4, #8]
 80823ea:	f000 f8e0 	bl	80825ae <_ZNK9FatVolume17clusterFirstBlockEm>
 80823ee:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80823f0:	b917      	cbnz	r7, 80823f8 <_ZN7FatFile5writeEPKvj+0xa0>
 80823f2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80823f6:	d221      	bcs.n	808243c <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80823f8:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 80823fc:	42b5      	cmp	r5, r6
 80823fe:	bf28      	it	cs
 8082400:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8082402:	b937      	cbnz	r7, 8082412 <_ZN7FatFile5writeEPKvj+0xba>
 8082404:	6963      	ldr	r3, [r4, #20]
 8082406:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8082408:	4293      	cmp	r3, r2
 808240a:	bf34      	ite	cc
 808240c:	2201      	movcc	r2, #1
 808240e:	2205      	movcs	r2, #5
 8082410:	e000      	b.n	8082414 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8082412:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082414:	68a0      	ldr	r0, [r4, #8]
 8082416:	3024      	adds	r0, #36	; 0x24
 8082418:	f000 f8a5 	bl	8082566 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808241c:	2800      	cmp	r0, #0
 808241e:	d0ac      	beq.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082420:	4438      	add	r0, r7
 8082422:	462a      	mov	r2, r5
 8082424:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8082426:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082428:	f007 fd53 	bl	8089ed2 <memcpy>
      if (512 == (n + blockOffset)) {
 808242c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8082430:	d12f      	bne.n	8082492 <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8082432:	68a0      	ldr	r0, [r4, #8]
 8082434:	3024      	adds	r0, #36	; 0x24
 8082436:	f000 f86f 	bl	8082518 <_ZN8FatCache4syncEv>
 808243a:	e016      	b.n	808246a <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808243c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082440:	68a0      	ldr	r0, [r4, #8]
 8082442:	d314      	bcc.n	808246e <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 8082444:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 8082446:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 8082448:	1b52      	subs	r2, r2, r5
 808244a:	b2d2      	uxtb	r2, r2
 808244c:	4293      	cmp	r3, r2
 808244e:	bf28      	it	cs
 8082450:	4613      	movcs	r3, r2
 8082452:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 8082454:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082456:	4291      	cmp	r1, r2
 8082458:	d302      	bcc.n	8082460 <_ZN7FatFile5writeEPKvj+0x108>
 808245a:	441a      	add	r2, r3
 808245c:	4291      	cmp	r1, r2
 808245e:	d337      	bcc.n	80824d0 <_ZN7FatFile5writeEPKvj+0x178>
 8082460:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 8082462:	464a      	mov	r2, r9
 8082464:	6838      	ldr	r0, [r7, #0]
 8082466:	f000 fc6d 	bl	8082d44 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 808246a:	b990      	cbnz	r0, 8082492 <_ZN7FatFile5writeEPKvj+0x13a>
 808246c:	e785      	b.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 808246e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082470:	464a      	mov	r2, r9
 8082472:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082474:	bf02      	ittt	eq
 8082476:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808247a:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 808247e:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8082480:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082482:	6818      	ldr	r0, [r3, #0]
 8082484:	f000 fbec 	bl	8082c60 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8082488:	2800      	cmp	r0, #0
 808248a:	f43f af76 	beq.w	808237a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 808248e:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8082492:	6963      	ldr	r3, [r4, #20]
    src += n;
 8082494:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8082496:	442b      	add	r3, r5
 8082498:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 808249a:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808249c:	e77c      	b.n	8082398 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 808249e:	69e2      	ldr	r2, [r4, #28]
 80824a0:	4293      	cmp	r3, r2
 80824a2:	d901      	bls.n	80824a8 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80824a4:	61e3      	str	r3, [r4, #28]
 80824a6:	e002      	b.n	80824ae <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80824a8:	4b0f      	ldr	r3, [pc, #60]	; (80824e8 <_ZN7FatFile5writeEPKvj+0x190>)
 80824aa:	681b      	ldr	r3, [r3, #0]
 80824ac:	b11b      	cbz	r3, 80824b6 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80824ae:	78a3      	ldrb	r3, [r4, #2]
 80824b0:	f043 0304 	orr.w	r3, r3, #4
 80824b4:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 80824b6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80824ba:	2b00      	cmp	r3, #0
 80824bc:	db02      	blt.n	80824c4 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80824be:	4640      	mov	r0, r8
 80824c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 80824c4:	4620      	mov	r0, r4
 80824c6:	f7ff febb 	bl	8082240 <_ZN7FatFile4syncEv>
 80824ca:	2800      	cmp	r0, #0
 80824cc:	d1f7      	bne.n	80824be <_ZN7FatFile5writeEPKvj+0x166>
 80824ce:	e754      	b.n	808237a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80824d0:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80824d4:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80824d8:	62c2      	str	r2, [r0, #44]	; 0x2c
 80824da:	e7c1      	b.n	8082460 <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80824dc:	6921      	ldr	r1, [r4, #16]
 80824de:	68a0      	ldr	r0, [r4, #8]
 80824e0:	f000 f865 	bl	80825ae <_ZNK9FatVolume17clusterFirstBlockEm>
 80824e4:	4601      	mov	r1, r0
 80824e6:	e784      	b.n	80823f2 <_ZN7FatFile5writeEPKvj+0x9a>
 80824e8:	20000744 	.word	0x20000744

080824ec <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80824ec:	f002 bec8 	b.w	8085280 <HAL_Pin_Map>

080824f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80824f0:	b570      	push	{r4, r5, r6, lr}
 80824f2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80824f4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80824f6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80824f8:	b149      	cbz	r1, 808250e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80824fa:	f008 fa75 	bl	808a9e8 <strlen>
 80824fe:	682b      	ldr	r3, [r5, #0]
 8082500:	4602      	mov	r2, r0
 8082502:	4621      	mov	r1, r4
 8082504:	4628      	mov	r0, r5
    }
 8082506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808250a:	68db      	ldr	r3, [r3, #12]
 808250c:	4718      	bx	r3
    }
 808250e:	bd70      	pop	{r4, r5, r6, pc}

08082510 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8082510:	f002 beb6 	b.w	8085280 <HAL_Pin_Map>

08082514 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8082514:	f002 beb4 	b.w	8085280 <HAL_Pin_Map>

08082518 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082518:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808251a:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808251c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808251e:	07da      	lsls	r2, r3, #31
 8082520:	d51e      	bpl.n	8082560 <_ZN8FatCache4syncEv+0x48>
 8082522:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8082524:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082528:	6881      	ldr	r1, [r0, #8]
 808252a:	4632      	mov	r2, r6
 808252c:	6818      	ldr	r0, [r3, #0]
 808252e:	f000 fb97 	bl	8082c60 <_ZN9SdSpiCard10writeBlockEmPKh>
 8082532:	4605      	mov	r5, r0
 8082534:	b908      	cbnz	r0, 808253a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8082536:	2500      	movs	r5, #0
 8082538:	e013      	b.n	8082562 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808253a:	7823      	ldrb	r3, [r4, #0]
 808253c:	079b      	lsls	r3, r3, #30
 808253e:	d404      	bmi.n	808254a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8082540:	7823      	ldrb	r3, [r4, #0]
 8082542:	f023 0301 	bic.w	r3, r3, #1
 8082546:	7023      	strb	r3, [r4, #0]
 8082548:	e00b      	b.n	8082562 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 808254a:	6863      	ldr	r3, [r4, #4]
 808254c:	68a0      	ldr	r0, [r4, #8]
 808254e:	6919      	ldr	r1, [r3, #16]
 8082550:	4632      	mov	r2, r6
 8082552:	4401      	add	r1, r0
 8082554:	6818      	ldr	r0, [r3, #0]
 8082556:	f000 fb83 	bl	8082c60 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808255a:	2800      	cmp	r0, #0
 808255c:	d1f0      	bne.n	8082540 <_ZN8FatCache4syncEv+0x28>
 808255e:	e7ea      	b.n	8082536 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8082560:	2501      	movs	r5, #1

fail:
  return false;
}
 8082562:	4628      	mov	r0, r5
 8082564:	bd70      	pop	{r4, r5, r6, pc}

08082566 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082566:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8082568:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808256a:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 808256c:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808256e:	460e      	mov	r6, r1
 8082570:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8082572:	d014      	beq.n	808259e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8082574:	f7ff ffd0 	bl	8082518 <_ZN8FatCache4syncEv>
 8082578:	b908      	cbnz	r0, 808257e <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 808257a:	2000      	movs	r0, #0
 808257c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 808257e:	076b      	lsls	r3, r5, #29
 8082580:	d503      	bpl.n	808258a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8082582:	2300      	movs	r3, #0
 8082584:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8082586:	60a6      	str	r6, [r4, #8]
 8082588:	e009      	b.n	808259e <_ZN8FatCache4readEmh+0x38>
 808258a:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 808258c:	f104 020c 	add.w	r2, r4, #12
 8082590:	4631      	mov	r1, r6
 8082592:	6818      	ldr	r0, [r3, #0]
 8082594:	f000 fada 	bl	8082b4c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8082598:	2800      	cmp	r0, #0
 808259a:	d1f2      	bne.n	8082582 <_ZN8FatCache4readEmh+0x1c>
 808259c:	e7ed      	b.n	808257a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 808259e:	4620      	mov	r0, r4
 80825a0:	7823      	ldrb	r3, [r4, #0]
 80825a2:	f005 0503 	and.w	r5, r5, #3
 80825a6:	431d      	orrs	r5, r3
 80825a8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 80825ac:	bd70      	pop	{r4, r5, r6, pc}

080825ae <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80825ae:	7983      	ldrb	r3, [r0, #6]
 80825b0:	3902      	subs	r1, #2
 80825b2:	6940      	ldr	r0, [r0, #20]
 80825b4:	4099      	lsls	r1, r3
}
 80825b6:	4408      	add	r0, r1
 80825b8:	4770      	bx	lr

080825ba <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80825ba:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80825bc:	b570      	push	{r4, r5, r6, lr}
 80825be:	4605      	mov	r5, r0
 80825c0:	460c      	mov	r4, r1
 80825c2:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80825c4:	d802      	bhi.n	80825cc <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80825c6:	f04f 30ff 	mov.w	r0, #4294967295
 80825ca:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80825cc:	69c3      	ldr	r3, [r0, #28]
 80825ce:	4299      	cmp	r1, r3
 80825d0:	d8f9      	bhi.n	80825c6 <_ZN9FatVolume6fatGetEmPm+0xc>
 80825d2:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80825d4:	2b20      	cmp	r3, #32
 80825d6:	d110      	bne.n	80825fa <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80825d8:	6981      	ldr	r1, [r0, #24]
 80825da:	2202      	movs	r2, #2
 80825dc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80825e0:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80825e4:	f7ff ffbf 	bl	8082566 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80825e8:	2800      	cmp	r0, #0
 80825ea:	d0ec      	beq.n	80825c6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80825ec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80825f0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80825f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 80825f8:	e00f      	b.n	808261a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 80825fa:	2b10      	cmp	r3, #16
 80825fc:	d1e3      	bne.n	80825c6 <_ZN9FatVolume6fatGetEmPm+0xc>
 80825fe:	6983      	ldr	r3, [r0, #24]
 8082600:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082604:	2202      	movs	r2, #2
 8082606:	4419      	add	r1, r3
 8082608:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808260c:	f7ff ffab 	bl	8082566 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082610:	2800      	cmp	r0, #0
 8082612:	d0d8      	beq.n	80825c6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8082614:	b2e4      	uxtb	r4, r4
 8082616:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 808261a:	69ea      	ldr	r2, [r5, #28]
 808261c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 808261e:	bf9a      	itte	ls
 8082620:	6033      	strls	r3, [r6, #0]
  return 1;
 8082622:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8082624:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8082626:	bd70      	pop	{r4, r5, r6, pc}

08082628 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082628:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808262a:	b538      	push	{r3, r4, r5, lr}
 808262c:	460c      	mov	r4, r1
 808262e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082630:	d801      	bhi.n	8082636 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8082632:	2000      	movs	r0, #0
 8082634:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082636:	69c3      	ldr	r3, [r0, #28]
 8082638:	4299      	cmp	r1, r3
 808263a:	d8fa      	bhi.n	8082632 <_ZN9FatVolume6fatPutEmm+0xa>
 808263c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 808263e:	2b20      	cmp	r3, #32
 8082640:	d10e      	bne.n	8082660 <_ZN9FatVolume6fatPutEmm+0x38>
 8082642:	6981      	ldr	r1, [r0, #24]
 8082644:	2203      	movs	r2, #3
 8082646:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 808264a:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808264e:	f7ff ff8a 	bl	8082566 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8082652:	2800      	cmp	r0, #0
 8082654:	d0ed      	beq.n	8082632 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8082656:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808265a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 808265e:	e00f      	b.n	8082680 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8082660:	2b10      	cmp	r3, #16
 8082662:	d1e6      	bne.n	8082632 <_ZN9FatVolume6fatPutEmm+0xa>
 8082664:	6983      	ldr	r3, [r0, #24]
 8082666:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808266a:	2203      	movs	r2, #3
 808266c:	4419      	add	r1, r3
 808266e:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082672:	f7ff ff78 	bl	8082566 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8082676:	2800      	cmp	r0, #0
 8082678:	d0db      	beq.n	8082632 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 808267a:	b2e4      	uxtb	r4, r4
 808267c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8082680:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8082682:	bd38      	pop	{r3, r4, r5, pc}

08082684 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082688:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808268a:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 808268c:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808268e:	460e      	mov	r6, r1
 8082690:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082692:	d207      	bcs.n	80826a4 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 8082694:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 8082696:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 8082698:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 808269a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 808269c:	429c      	cmp	r4, r3
 808269e:	d903      	bls.n	80826a8 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 80826a0:	b9cf      	cbnz	r7, 80826d6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 80826a2:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 80826a4:	2701      	movs	r7, #1
 80826a6:	e7f7      	b.n	8082698 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 80826a8:	42a6      	cmp	r6, r4
 80826aa:	d014      	beq.n	80826d6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80826ac:	aa01      	add	r2, sp, #4
 80826ae:	4621      	mov	r1, r4
 80826b0:	4628      	mov	r0, r5
 80826b2:	f7ff ff82 	bl	80825ba <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80826b6:	2800      	cmp	r0, #0
 80826b8:	db0d      	blt.n	80826d6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80826ba:	d0ed      	beq.n	8082698 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80826bc:	9b01      	ldr	r3, [sp, #4]
 80826be:	2b00      	cmp	r3, #0
 80826c0:	d1ea      	bne.n	8082698 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 80826c2:	b107      	cbz	r7, 80826c6 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 80826c4:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80826c6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80826ca:	4621      	mov	r1, r4
 80826cc:	4628      	mov	r0, r5
 80826ce:	f7ff ffab 	bl	8082628 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 80826d2:	4607      	mov	r7, r0
 80826d4:	b908      	cbnz	r0, 80826da <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80826d6:	2700      	movs	r7, #0
 80826d8:	e00b      	b.n	80826f2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80826da:	b916      	cbnz	r6, 80826e2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 80826dc:	f8c8 4000 	str.w	r4, [r8]
  return true;
 80826e0:	e007      	b.n	80826f2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 80826e2:	4622      	mov	r2, r4
 80826e4:	4631      	mov	r1, r6
 80826e6:	4628      	mov	r0, r5
 80826e8:	f7ff ff9e 	bl	8082628 <_ZN9FatVolume6fatPutEmm>
 80826ec:	2800      	cmp	r0, #0
 80826ee:	d1f5      	bne.n	80826dc <_ZN9FatVolume15allocateClusterEmPm+0x58>
 80826f0:	e7f1      	b.n	80826d6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 80826f2:	4638      	mov	r0, r7
 80826f4:	b002      	add	sp, #8
 80826f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080826fa <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 80826fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80826fc:	4605      	mov	r5, r0
 80826fe:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8082700:	aa01      	add	r2, sp, #4
 8082702:	4621      	mov	r1, r4
 8082704:	4628      	mov	r0, r5
 8082706:	f7ff ff58 	bl	80825ba <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808270a:	1e06      	subs	r6, r0, #0
 808270c:	da01      	bge.n	8082712 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 808270e:	2000      	movs	r0, #0
 8082710:	e00f      	b.n	8082732 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8082712:	2200      	movs	r2, #0
 8082714:	4621      	mov	r1, r4
 8082716:	4628      	mov	r0, r5
 8082718:	f7ff ff86 	bl	8082628 <_ZN9FatVolume6fatPutEmm>
 808271c:	2800      	cmp	r0, #0
 808271e:	d0f6      	beq.n	808270e <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8082720:	68eb      	ldr	r3, [r5, #12]
 8082722:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 8082724:	bf9c      	itt	ls
 8082726:	f104 34ff 	addls.w	r4, r4, #4294967295
 808272a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 808272c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 808272e:	2e00      	cmp	r6, #0
 8082730:	d1e6      	bne.n	8082700 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8082732:	b002      	add	sp, #8
 8082734:	bd70      	pop	{r4, r5, r6, pc}

08082736 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8082736:	b570      	push	{r4, r5, r6, lr}
 8082738:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 808273a:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 808273c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 808273e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082740:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8082744:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8082746:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082748:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808274a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 808274e:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082750:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082754:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 8082758:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 808275c:	b1a1      	cbz	r1, 8082788 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 808275e:	2904      	cmp	r1, #4
 8082760:	d85d      	bhi.n	808281e <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082762:	4611      	mov	r1, r2
 8082764:	3024      	adds	r0, #36	; 0x24
 8082766:	f7ff fefe 	bl	8082566 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 808276a:	2800      	cmp	r0, #0
 808276c:	d057      	beq.n	808281e <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 808276e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8082772:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8082776:	065b      	lsls	r3, r3, #25
 8082778:	d151      	bne.n	808281e <_ZN9FatVolume4initEh+0xe8>
 808277a:	351b      	adds	r5, #27
 808277c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8082780:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8082784:	2d00      	cmp	r5, #0
 8082786:	d04a      	beq.n	808281e <_ZN9FatVolume4initEh+0xe8>
 8082788:	2200      	movs	r2, #0
 808278a:	4629      	mov	r1, r5
 808278c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8082790:	f7ff fee9 	bl	8082566 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8082794:	2800      	cmp	r0, #0
 8082796:	d042      	beq.n	808281e <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8082798:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 808279c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80827a0:	d13d      	bne.n	808281e <_ZN9FatVolume4initEh+0xe8>
 80827a2:	7c03      	ldrb	r3, [r0, #16]
 80827a4:	2b02      	cmp	r3, #2
 80827a6:	d13a      	bne.n	808281e <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 80827a8:	89c3      	ldrh	r3, [r0, #14]
 80827aa:	2b00      	cmp	r3, #0
 80827ac:	d037      	beq.n	808281e <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80827ae:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80827b0:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80827b2:	1e4b      	subs	r3, r1, #1
 80827b4:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80827b6:	2300      	movs	r3, #0
 80827b8:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80827ba:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80827bc:	2301      	movs	r3, #1
 80827be:	428b      	cmp	r3, r1
 80827c0:	d007      	beq.n	80827d2 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 80827c2:	3e01      	subs	r6, #1
 80827c4:	d02b      	beq.n	808281e <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80827c6:	79a2      	ldrb	r2, [r4, #6]
 80827c8:	005b      	lsls	r3, r3, #1
 80827ca:	3201      	adds	r2, #1
 80827cc:	b2db      	uxtb	r3, r3
 80827ce:	71a2      	strb	r2, [r4, #6]
 80827d0:	e7f5      	b.n	80827be <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80827d2:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80827d4:	b902      	cbnz	r2, 80827d8 <_ZN9FatVolume4initEh+0xa2>
 80827d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80827d8:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80827da:	89c6      	ldrh	r6, [r0, #14]
 80827dc:	442e      	add	r6, r5
 80827de:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80827e0:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80827e4:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80827e8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80827ea:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80827ec:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 80827f0:	0152      	lsls	r2, r2, #5
 80827f2:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80827f6:	eb01 2262 	add.w	r2, r1, r2, asr #9
 80827fa:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 80827fc:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8082800:	b903      	cbnz	r3, 8082804 <_ZN9FatVolume4initEh+0xce>
 8082802:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8082804:	1aad      	subs	r5, r5, r2
 8082806:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8082808:	79a5      	ldrb	r5, [r4, #6]
 808280a:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 808280e:	1c6b      	adds	r3, r5, #1
 8082810:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8082812:	f640 73f4 	movw	r3, #4084	; 0xff4
 8082816:	429d      	cmp	r5, r3
 8082818:	d803      	bhi.n	8082822 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 808281a:	230c      	movs	r3, #12
 808281c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 808281e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8082820:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8082822:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8082826:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082828:	bf89      	itett	hi
 808282a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 808282c:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 808282e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8082830:	2320      	movhi	r3, #32
 8082832:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8082834:	2001      	movs	r0, #1

fail:
  return false;
}
 8082836:	bd70      	pop	{r4, r5, r6, pc}

08082838 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8082838:	f002 bd22 	b.w	8085280 <HAL_Pin_Map>

0808283c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 808283c:	f002 bd20 	b.w	8085280 <HAL_Pin_Map>

08082840 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8082840:	f002 bd1e 	b.w	8085280 <HAL_Pin_Map>

08082844 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 8082844:	b570      	push	{r4, r5, r6, lr}
 8082846:	460e      	mov	r6, r1
 8082848:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 808284a:	f002 fdb1 	bl	80853b0 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 808284e:	4c0c      	ldr	r4, [pc, #48]	; (8082880 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8082850:	6823      	ldr	r3, [r4, #0]
 8082852:	1ac0      	subs	r0, r0, r3
 8082854:	4b0b      	ldr	r3, [pc, #44]	; (8082884 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 8082856:	4298      	cmp	r0, r3
 8082858:	d908      	bls.n	808286c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808285a:	f002 fdb1 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808285e:	4b0a      	ldr	r3, [pc, #40]	; (8082888 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8082860:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8082862:	f003 f819 	bl	8085898 <spark_process>
 8082866:	f002 fda3 	bl	80853b0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 808286a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808286c:	f002 fda8 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 8082870:	b280      	uxth	r0, r0
 8082872:	1b80      	subs	r0, r0, r6
}
 8082874:	42a8      	cmp	r0, r5
 8082876:	bfd4      	ite	le
 8082878:	2000      	movle	r0, #0
 808287a:	2001      	movgt	r0, #1
 808287c:	bd70      	pop	{r4, r5, r6, pc}
 808287e:	bf00      	nop
 8082880:	20000748 	.word	0x20000748
 8082884:	000186a0 	.word	0x000186a0
 8082888:	20000eb0 	.word	0x20000eb0

0808288c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 808288c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 808288e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8082890:	4604      	mov	r4, r0
  if (!m_spiActive) {
 8082892:	b94d      	cbnz	r5, 80828a8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 8082894:	6840      	ldr	r0, [r0, #4]
 8082896:	f000 fa7d 	bl	8082d94 <_ZN14SdSpiAltDriver8activateEv>
 808289a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 808289c:	4629      	mov	r1, r5
 808289e:	7d18      	ldrb	r0, [r3, #20]
 80828a0:	f005 fcd7 	bl	8088252 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80828a4:	2301      	movs	r3, #1
 80828a6:	7223      	strb	r3, [r4, #8]
 80828a8:	bd38      	pop	{r3, r4, r5, pc}

080828aa <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80828aa:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80828ac:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80828ae:	4604      	mov	r4, r0
  if (m_spiActive) {
 80828b0:	b16b      	cbz	r3, 80828ce <_ZN9SdSpiCard7spiStopEv+0x24>
 80828b2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 80828b4:	2101      	movs	r1, #1
 80828b6:	7d18      	ldrb	r0, [r3, #20]
 80828b8:	f005 fccb 	bl	8088252 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80828bc:	21ff      	movs	r1, #255	; 0xff
 80828be:	6860      	ldr	r0, [r4, #4]
 80828c0:	f000 fa9a 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 80828c4:	6860      	ldr	r0, [r4, #4]
 80828c6:	f000 fa79 	bl	8082dbc <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 80828ca:	2300      	movs	r3, #0
 80828cc:	7223      	strb	r3, [r4, #8]
 80828ce:	bd10      	pop	{r4, pc}

080828d0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80828d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80828d2:	4604      	mov	r4, r0
 80828d4:	460d      	mov	r5, r1
 80828d6:	4616      	mov	r6, r2
 80828d8:	f002 fd72 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80828dc:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80828de:	6860      	ldr	r0, [r4, #4]
 80828e0:	f000 fa6f 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 80828e4:	28ff      	cmp	r0, #255	; 0xff
 80828e6:	7260      	strb	r0, [r4, #9]
 80828e8:	d109      	bne.n	80828fe <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80828ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80828ee:	4639      	mov	r1, r7
 80828f0:	4620      	mov	r0, r4
 80828f2:	f7ff ffa7 	bl	8082844 <_ZN9SdSpiCard10isTimedOutEtt>
 80828f6:	2800      	cmp	r0, #0
 80828f8:	d0f1      	beq.n	80828de <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80828fa:	2355      	movs	r3, #85	; 0x55
 80828fc:	e00b      	b.n	8082916 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 80828fe:	28fe      	cmp	r0, #254	; 0xfe
 8082900:	d001      	beq.n	8082906 <_ZN9SdSpiCard8readDataEPhj+0x36>
 8082902:	2350      	movs	r3, #80	; 0x50
 8082904:	e007      	b.n	8082916 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 8082906:	4632      	mov	r2, r6
 8082908:	4629      	mov	r1, r5
 808290a:	6860      	ldr	r0, [r4, #4]
 808290c:	f000 fa5e 	bl	8082dcc <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8082910:	7260      	strb	r0, [r4, #9]
 8082912:	b130      	cbz	r0, 8082922 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082914:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 8082916:	4620      	mov	r0, r4
 8082918:	7023      	strb	r3, [r4, #0]
 808291a:	f7ff ffc6 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 808291e:	2000      	movs	r0, #0
}
 8082920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082922:	6860      	ldr	r0, [r4, #4]
 8082924:	f000 fa4d 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 8082928:	6860      	ldr	r0, [r4, #4]
 808292a:	f000 fa4a 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 808292e:	2001      	movs	r0, #1
 8082930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082932 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 8082932:	b570      	push	{r4, r5, r6, lr}
 8082934:	4604      	mov	r4, r0
 8082936:	460e      	mov	r6, r1
 8082938:	f002 fd42 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
 808293c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 808293e:	4632      	mov	r2, r6
 8082940:	4629      	mov	r1, r5
 8082942:	4620      	mov	r0, r4
 8082944:	f7ff ff7e 	bl	8082844 <_ZN9SdSpiCard10isTimedOutEtt>
 8082948:	b930      	cbnz	r0, 8082958 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 808294a:	6860      	ldr	r0, [r4, #4]
 808294c:	f000 fa39 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 8082950:	28ff      	cmp	r0, #255	; 0xff
 8082952:	d1f4      	bne.n	808293e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 8082954:	2001      	movs	r0, #1
 8082956:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 8082958:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 808295a:	bd70      	pop	{r4, r5, r6, pc}

0808295c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808295c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 808295e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082960:	4604      	mov	r4, r0
 8082962:	460d      	mov	r5, r1
 8082964:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 8082966:	b90b      	cbnz	r3, 808296c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 8082968:	f7ff ff90 	bl	808288c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 808296c:	b125      	cbz	r5, 8082978 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 808296e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8082972:	4620      	mov	r0, r4
 8082974:	f7ff ffdd 	bl	8082932 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082978:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 808297c:	6860      	ldr	r0, [r4, #4]
 808297e:	f000 fa3b 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
 8082982:	f10d 0607 	add.w	r6, sp, #7
 8082986:	f10d 0703 	add.w	r7, sp, #3
 808298a:	f816 1901 	ldrb.w	r1, [r6], #-1
 808298e:	6860      	ldr	r0, [r4, #4]
 8082990:	f000 fa32 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 8082994:	42be      	cmp	r6, r7
 8082996:	d1f8      	bne.n	808298a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8082998:	2d00      	cmp	r5, #0
 808299a:	bf0c      	ite	eq
 808299c:	2195      	moveq	r1, #149	; 0x95
 808299e:	2187      	movne	r1, #135	; 0x87
 80829a0:	6860      	ldr	r0, [r4, #4]
 80829a2:	f000 fa29 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80829a6:	6860      	ldr	r0, [r4, #4]
 80829a8:	f000 fa0b 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 80829ac:	250b      	movs	r5, #11
 80829ae:	6860      	ldr	r0, [r4, #4]
 80829b0:	f000 fa07 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80829b4:	0603      	lsls	r3, r0, #24
 80829b6:	7260      	strb	r0, [r4, #9]
 80829b8:	d503      	bpl.n	80829c2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 80829ba:	3d01      	subs	r5, #1
 80829bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80829c0:	d1f5      	bne.n	80829ae <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 80829c2:	b003      	add	sp, #12
 80829c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080829c6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80829c6:	b570      	push	{r4, r5, r6, lr}
 80829c8:	4604      	mov	r4, r0
 80829ca:	460d      	mov	r5, r1
 80829cc:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80829ce:	2137      	movs	r1, #55	; 0x37
 80829d0:	2200      	movs	r2, #0
 80829d2:	f7ff ffc3 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80829d6:	4632      	mov	r2, r6
 80829d8:	4629      	mov	r1, r5
 80829da:	4620      	mov	r0, r4
  }
 80829dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 80829e0:	f7ff bfbc 	b.w	808295c <_ZN9SdSpiCard11cardCommandEhm>

080829e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80829e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80829e8:	2500      	movs	r5, #0
 80829ea:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80829ec:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 80829ee:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 80829f0:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80829f2:	4604      	mov	r4, r0
 80829f4:	4690      	mov	r8, r2
 80829f6:	461e      	mov	r6, r3
 80829f8:	f002 fce2 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 80829fc:	4641      	mov	r1, r8
 80829fe:	4607      	mov	r7, r0
 8082a00:	6860      	ldr	r0, [r4, #4]
 8082a02:	f000 f9cb 	bl	8082d9c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 8082a06:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8082a08:	4a4f      	ldr	r2, [pc, #316]	; (8082b48 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 8082a0a:	f04f 0801 	mov.w	r8, #1
 8082a0e:	721d      	strb	r5, [r3, #8]
 8082a10:	60da      	str	r2, [r3, #12]
 8082a12:	745d      	strb	r5, [r3, #17]
 8082a14:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 8082a18:	4620      	mov	r0, r4
 8082a1a:	f7ff ff37 	bl	808288c <_ZN9SdSpiCard8spiStartEv>
 8082a1e:	6863      	ldr	r3, [r4, #4]
 8082a20:	4641      	mov	r1, r8
 8082a22:	7d18      	ldrb	r0, [r3, #20]
 8082a24:	f005 fc15 	bl	8088252 <digitalWrite>
 8082a28:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082a2a:	21ff      	movs	r1, #255	; 0xff
 8082a2c:	6860      	ldr	r0, [r4, #4]
 8082a2e:	3d01      	subs	r5, #1
 8082a30:	f000 f9e2 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 8082a34:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082a38:	d1f7      	bne.n	8082a2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 8082a3a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8082a3c:	4629      	mov	r1, r5
 8082a3e:	7d18      	ldrb	r0, [r3, #20]
 8082a40:	f005 fc07 	bl	8088252 <digitalWrite>
 8082a44:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 8082a46:	2200      	movs	r2, #0
 8082a48:	4611      	mov	r1, r2
 8082a4a:	4620      	mov	r0, r4
 8082a4c:	f7ff ff86 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082a50:	2801      	cmp	r0, #1
 8082a52:	4680      	mov	r8, r0
 8082a54:	d012      	beq.n	8082a7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 8082a56:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 8082a58:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082a5c:	d101      	bne.n	8082a62 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082a5e:	2320      	movs	r3, #32
 8082a60:	e057      	b.n	8082b12 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082a62:	21fd      	movs	r1, #253	; 0xfd
 8082a64:	6860      	ldr	r0, [r4, #4]
 8082a66:	f000 f9c7 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
 8082a6a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082a6e:	6860      	ldr	r0, [r4, #4]
 8082a70:	f000 f9a7 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 8082a74:	f1b8 0801 	subs.w	r8, r8, #1
 8082a78:	d1f9      	bne.n	8082a6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 8082a7a:	e7e4      	b.n	8082a46 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8082a7c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8082a80:	2108      	movs	r1, #8
 8082a82:	4620      	mov	r0, r4
 8082a84:	f7ff ff6a 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082a88:	2805      	cmp	r0, #5
 8082a8a:	d102      	bne.n	8082a92 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8082a8c:	f884 800a 	strb.w	r8, [r4, #10]
 8082a90:	e00f      	b.n	8082ab2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 8082a92:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082a94:	6860      	ldr	r0, [r4, #4]
 8082a96:	f000 f994 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 8082a9a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8082a9c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8082aa0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8082aa2:	d1f7      	bne.n	8082a94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8082aa4:	28aa      	cmp	r0, #170	; 0xaa
 8082aa6:	d102      	bne.n	8082aae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8082aa8:	2302      	movs	r3, #2
 8082aaa:	72a3      	strb	r3, [r4, #10]
 8082aac:	e001      	b.n	8082ab2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082aae:	2325      	movs	r3, #37	; 0x25
 8082ab0:	e02f      	b.n	8082b12 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8082ab2:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8082ab4:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8082ab6:	2b02      	cmp	r3, #2
 8082ab8:	bf0c      	ite	eq
 8082aba:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8082abe:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8082ac0:	462a      	mov	r2, r5
 8082ac2:	2129      	movs	r1, #41	; 0x29
 8082ac4:	4620      	mov	r0, r4
 8082ac6:	f7ff ff7e 	bl	80829c6 <_ZN9SdSpiCard8cardAcmdEhm>
 8082aca:	4602      	mov	r2, r0
 8082acc:	b148      	cbz	r0, 8082ae2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8082ace:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8082ad2:	4639      	mov	r1, r7
 8082ad4:	4620      	mov	r0, r4
 8082ad6:	f7ff feb5 	bl	8082844 <_ZN9SdSpiCard10isTimedOutEtt>
 8082ada:	2800      	cmp	r0, #0
 8082adc:	d0f0      	beq.n	8082ac0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8082ade:	2343      	movs	r3, #67	; 0x43
 8082ae0:	e017      	b.n	8082b12 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8082ae2:	7aa3      	ldrb	r3, [r4, #10]
 8082ae4:	2b02      	cmp	r3, #2
 8082ae6:	d00e      	beq.n	8082b06 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 8082ae8:	4620      	mov	r0, r4
 8082aea:	f7ff fede 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 8082aee:	6863      	ldr	r3, [r4, #4]
 8082af0:	68b0      	ldr	r0, [r6, #8]
 8082af2:	7934      	ldrb	r4, [r6, #4]
 8082af4:	7b31      	ldrb	r1, [r6, #12]
 8082af6:	7b72      	ldrb	r2, [r6, #13]
 8082af8:	60d8      	str	r0, [r3, #12]
 8082afa:	721c      	strb	r4, [r3, #8]
 8082afc:	7419      	strb	r1, [r3, #16]
 8082afe:	745a      	strb	r2, [r3, #17]
  return true;
 8082b00:	2001      	movs	r0, #1
 8082b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8082b06:	213a      	movs	r1, #58	; 0x3a
 8082b08:	4620      	mov	r0, r4
 8082b0a:	f7ff ff27 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082b0e:	b138      	cbz	r0, 8082b20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8082b10:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 8082b12:	4620      	mov	r0, r4
 8082b14:	7023      	strb	r3, [r4, #0]
 8082b16:	f7ff fec8 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082b1a:	2000      	movs	r0, #0
}
 8082b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082b20:	6860      	ldr	r0, [r4, #4]
 8082b22:	f000 f94e 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8082b26:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8082b2a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8082b2c:	bf04      	itt	eq
 8082b2e:	2303      	moveq	r3, #3
 8082b30:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082b32:	6860      	ldr	r0, [r4, #4]
 8082b34:	f000 f945 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 8082b38:	6860      	ldr	r0, [r4, #4]
 8082b3a:	f000 f942 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 8082b3e:	6860      	ldr	r0, [r4, #4]
 8082b40:	f000 f93f 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 8082b44:	e7d0      	b.n	8082ae8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 8082b46:	bf00      	nop
 8082b48:	0003d090 	.word	0x0003d090

08082b4c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082b4c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082b4e:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082b50:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082b52:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082b54:	bf18      	it	ne
 8082b56:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8082b58:	460a      	mov	r2, r1
 8082b5a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082b5c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8082b5e:	f7ff fefd 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082b62:	b110      	cbz	r0, 8082b6a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082b64:	2330      	movs	r3, #48	; 0x30
 8082b66:	7023      	strb	r3, [r4, #0]
 8082b68:	e00b      	b.n	8082b82 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8082b6a:	4629      	mov	r1, r5
 8082b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082b70:	4620      	mov	r0, r4
 8082b72:	f7ff fead 	bl	80828d0 <_ZN9SdSpiCard8readDataEPhj>
 8082b76:	4605      	mov	r5, r0
 8082b78:	b118      	cbz	r0, 8082b82 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 8082b7a:	4620      	mov	r0, r4
 8082b7c:	f7ff fe95 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return true;
 8082b80:	e003      	b.n	8082b8a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 8082b82:	4620      	mov	r0, r4
 8082b84:	f7ff fe91 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082b88:	2500      	movs	r5, #0
}
 8082b8a:	4628      	mov	r0, r5
 8082b8c:	bd38      	pop	{r3, r4, r5, pc}

08082b8e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082b8e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8082b90:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082b92:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8082b94:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082b96:	bf18      	it	ne
 8082b98:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8082b9a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082b9c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8082b9e:	f7ff fedd 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082ba2:	b130      	cbz	r0, 8082bb2 <_ZN9SdSpiCard9readStartEm+0x24>
 8082ba4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 8082ba6:	4620      	mov	r0, r4
 8082ba8:	7023      	strb	r3, [r4, #0]
 8082baa:	f7ff fe7e 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082bae:	2000      	movs	r0, #0
 8082bb0:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 8082bb2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082bb4:	bd10      	pop	{r4, pc}

08082bb6 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8082bb6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8082bb8:	2200      	movs	r2, #0
 8082bba:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8082bbc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8082bbe:	f7ff fecd 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082bc2:	b130      	cbz	r0, 8082bd2 <_ZN9SdSpiCard8readStopEv+0x1c>
 8082bc4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 8082bc6:	4620      	mov	r0, r4
 8082bc8:	7023      	strb	r3, [r4, #0]
 8082bca:	f7ff fe6e 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082bce:	2000      	movs	r0, #0
 8082bd0:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 8082bd2:	4620      	mov	r0, r4
 8082bd4:	f7ff fe69 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return true;
 8082bd8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082bda:	bd10      	pop	{r4, pc}

08082bdc <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8082bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082bde:	4605      	mov	r5, r0
 8082be0:	4616      	mov	r6, r2
 8082be2:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8082be4:	f7ff ffd3 	bl	8082b8e <_ZN9SdSpiCard9readStartEm>
 8082be8:	b198      	cbz	r0, 8082c12 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8082bea:	2400      	movs	r4, #0
 8082bec:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8082bee:	429f      	cmp	r7, r3
 8082bf0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8082bf4:	d908      	bls.n	8082c08 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8082bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082bfa:	4628      	mov	r0, r5
 8082bfc:	f7ff fe68 	bl	80828d0 <_ZN9SdSpiCard8readDataEPhj>
 8082c00:	3401      	adds	r4, #1
 8082c02:	2800      	cmp	r0, #0
 8082c04:	d1f2      	bne.n	8082bec <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8082c06:	e004      	b.n	8082c12 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8082c08:	4628      	mov	r0, r5
}
 8082c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8082c0e:	f7ff bfd2 	b.w	8082bb6 <_ZN9SdSpiCard8readStopEv>
}
 8082c12:	2000      	movs	r0, #0
 8082c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082c16 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8082c16:	b538      	push	{r3, r4, r5, lr}
 8082c18:	4604      	mov	r4, r0
 8082c1a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082c1c:	6840      	ldr	r0, [r0, #4]
 8082c1e:	f000 f8eb 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 8082c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082c26:	4629      	mov	r1, r5
 8082c28:	6860      	ldr	r0, [r4, #4]
 8082c2a:	f000 f8e9 	bl	8082e00 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082c2e:	21ff      	movs	r1, #255	; 0xff
 8082c30:	6860      	ldr	r0, [r4, #4]
 8082c32:	f000 f8e1 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
 8082c36:	21ff      	movs	r1, #255	; 0xff
 8082c38:	6860      	ldr	r0, [r4, #4]
 8082c3a:	f000 f8dd 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082c3e:	6860      	ldr	r0, [r4, #4]
 8082c40:	f000 f8bf 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 8082c44:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8082c46:	f000 001f 	and.w	r0, r0, #31
 8082c4a:	2805      	cmp	r0, #5
 8082c4c:	d006      	beq.n	8082c5c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082c4e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 8082c50:	4620      	mov	r0, r4
 8082c52:	7023      	strb	r3, [r4, #0]
 8082c54:	f7ff fe29 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082c58:	2000      	movs	r0, #0
 8082c5a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8082c5c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082c5e:	bd38      	pop	{r3, r4, r5, pc}

08082c60 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8082c60:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082c62:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8082c64:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082c66:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082c68:	bf18      	it	ne
 8082c6a:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8082c6c:	460a      	mov	r2, r1
 8082c6e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8082c70:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8082c72:	f7ff fe73 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082c76:	4606      	mov	r6, r0
 8082c78:	b108      	cbz	r0, 8082c7e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8082c7a:	2332      	movs	r3, #50	; 0x32
 8082c7c:	e01d      	b.n	8082cba <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8082c7e:	462a      	mov	r2, r5
 8082c80:	21fe      	movs	r1, #254	; 0xfe
 8082c82:	4620      	mov	r0, r4
 8082c84:	f7ff ffc7 	bl	8082c16 <_ZN9SdSpiCard9writeDataEhPKh>
 8082c88:	b1c0      	cbz	r0, 8082cbc <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082c8a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8082c8e:	4620      	mov	r0, r4
 8082c90:	f7ff fe4f 	bl	8082932 <_ZN9SdSpiCard11waitNotBusyEt>
 8082c94:	4605      	mov	r5, r0
 8082c96:	b908      	cbnz	r0, 8082c9c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 8082c98:	235a      	movs	r3, #90	; 0x5a
 8082c9a:	e00e      	b.n	8082cba <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 8082c9c:	4632      	mov	r2, r6
 8082c9e:	210d      	movs	r1, #13
 8082ca0:	4620      	mov	r0, r4
 8082ca2:	f7ff fe5b 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082ca6:	b938      	cbnz	r0, 8082cb8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082ca8:	6860      	ldr	r0, [r4, #4]
 8082caa:	f000 f88a 	bl	8082dc2 <_ZN14SdSpiAltDriver7receiveEv>
 8082cae:	b918      	cbnz	r0, 8082cb8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 8082cb0:	4620      	mov	r0, r4
 8082cb2:	f7ff fdfa 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return true;
 8082cb6:	e005      	b.n	8082cc4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082cb8:	2329      	movs	r3, #41	; 0x29
 8082cba:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 8082cbc:	4620      	mov	r0, r4
 8082cbe:	f7ff fdf4 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082cc2:	2500      	movs	r5, #0
}
 8082cc4:	4628      	mov	r0, r5
 8082cc6:	bd70      	pop	{r4, r5, r6, pc}

08082cc8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8082cc8:	b538      	push	{r3, r4, r5, lr}
 8082cca:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082ccc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8082cd0:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082cd2:	f7ff fe2e 	bl	8082932 <_ZN9SdSpiCard11waitNotBusyEt>
 8082cd6:	b910      	cbnz	r0, 8082cde <_ZN9SdSpiCard9writeDataEPKh+0x16>
 8082cd8:	235b      	movs	r3, #91	; 0x5b
 8082cda:	7023      	strb	r3, [r4, #0]
 8082cdc:	e005      	b.n	8082cea <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8082cde:	462a      	mov	r2, r5
 8082ce0:	21fc      	movs	r1, #252	; 0xfc
 8082ce2:	4620      	mov	r0, r4
 8082ce4:	f7ff ff97 	bl	8082c16 <_ZN9SdSpiCard9writeDataEhPKh>
 8082ce8:	b918      	cbnz	r0, 8082cf2 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 8082cea:	4620      	mov	r0, r4
 8082cec:	f7ff fddd 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082cf0:	2000      	movs	r0, #0
}
 8082cf2:	bd38      	pop	{r3, r4, r5, pc}

08082cf4 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082cf4:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082cf6:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082cf8:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082cfa:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082cfc:	bf18      	it	ne
 8082cfe:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082d00:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082d02:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082d04:	f7ff fe2a 	bl	808295c <_ZN9SdSpiCard11cardCommandEhm>
 8082d08:	b130      	cbz	r0, 8082d18 <_ZN9SdSpiCard10writeStartEm+0x24>
 8082d0a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 8082d0c:	4620      	mov	r0, r4
 8082d0e:	7023      	strb	r3, [r4, #0]
 8082d10:	f7ff fdcb 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082d14:	2000      	movs	r0, #0
 8082d16:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8082d18:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082d1a:	bd10      	pop	{r4, pc}

08082d1c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082d1c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082d1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082d22:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082d24:	f7ff fe05 	bl	8082932 <_ZN9SdSpiCard11waitNotBusyEt>
 8082d28:	4605      	mov	r5, r0
 8082d2a:	b120      	cbz	r0, 8082d36 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082d2c:	21fd      	movs	r1, #253	; 0xfd
 8082d2e:	6860      	ldr	r0, [r4, #4]
 8082d30:	f000 f862 	bl	8082df8 <_ZN14SdSpiAltDriver4sendEh>
 8082d34:	e001      	b.n	8082d3a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082d36:	2356      	movs	r3, #86	; 0x56
 8082d38:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 8082d3a:	4620      	mov	r0, r4
 8082d3c:	f7ff fdb5 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8082d40:	4628      	mov	r0, r5
 8082d42:	bd38      	pop	{r3, r4, r5, pc}

08082d44 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8082d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082d46:	4605      	mov	r5, r0
 8082d48:	4616      	mov	r6, r2
 8082d4a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 8082d4c:	f7ff ffd2 	bl	8082cf4 <_ZN9SdSpiCard10writeStartEm>
 8082d50:	b170      	cbz	r0, 8082d70 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 8082d52:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082d54:	42bc      	cmp	r4, r7
 8082d56:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8082d5a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082d5c:	d004      	beq.n	8082d68 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 8082d5e:	f7ff ffb3 	bl	8082cc8 <_ZN9SdSpiCard9writeDataEPKh>
 8082d62:	b128      	cbz	r0, 8082d70 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082d64:	3401      	adds	r4, #1
 8082d66:	e7f5      	b.n	8082d54 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 8082d68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8082d6c:	f7ff bfd6 	b.w	8082d1c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 8082d70:	4628      	mov	r0, r5
 8082d72:	f7ff fd9a 	bl	80828aa <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8082d76:	2000      	movs	r0, #0
 8082d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082d7a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 8082d7a:	f002 ba81 	b.w	8085280 <HAL_Pin_Map>

08082d7e <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 8082d7e:	f002 ba7f 	b.w	8085280 <HAL_Pin_Map>

08082d82 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 8082d82:	f002 ba7d 	b.w	8085280 <HAL_Pin_Map>
	...

08082d88 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8082d88:	4b01      	ldr	r3, [pc, #4]	; (8082d90 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8082d8a:	2201      	movs	r2, #1
 8082d8c:	701a      	strb	r2, [r3, #0]
 8082d8e:	4770      	bx	lr
 8082d90:	2000074c 	.word	0x2000074c

08082d94 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 8082d94:	1d01      	adds	r1, r0, #4
 8082d96:	6800      	ldr	r0, [r0, #0]
 8082d98:	f002 bfaa 	b.w	8085cf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

08082d9c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 8082d9c:	b510      	push	{r4, lr}
 8082d9e:	4604      	mov	r4, r0
  m_csPin = csPin;
 8082da0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 8082da2:	6800      	ldr	r0, [r0, #0]
 8082da4:	f002 ff79 	bl	8085c9a <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 8082da8:	7d20      	ldrb	r0, [r4, #20]
 8082daa:	2101      	movs	r1, #1
 8082dac:	f005 fa40 	bl	8088230 <pinMode>
  digitalWrite(m_csPin, HIGH);
 8082db0:	7d20      	ldrb	r0, [r4, #20]
 8082db2:	2101      	movs	r1, #1
}
 8082db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 8082db8:	f005 ba4b 	b.w	8088252 <digitalWrite>

08082dbc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8082dbc:	6800      	ldr	r0, [r0, #0]
 8082dbe:	f002 bf7c 	b.w	8085cba <_ZN8SPIClass14endTransactionEv>

08082dc2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 8082dc2:	21ff      	movs	r1, #255	; 0xff
 8082dc4:	6800      	ldr	r0, [r0, #0]
 8082dc6:	f003 b802 	b.w	8085dce <_ZN8SPIClass8transferEh>
	...

08082dcc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8082dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082dce:	4b08      	ldr	r3, [pc, #32]	; (8082df0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082dd0:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082dd2:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082dd4:	4c07      	ldr	r4, [pc, #28]	; (8082df4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082dd6:	4613      	mov	r3, r2
 8082dd8:	6800      	ldr	r0, [r0, #0]
 8082dda:	460a      	mov	r2, r1
 8082ddc:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082dde:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082de0:	f002 fffb 	bl	8085dda <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8082de4:	7823      	ldrb	r3, [r4, #0]
 8082de6:	2b00      	cmp	r3, #0
 8082de8:	d0fc      	beq.n	8082de4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 8082dea:	2000      	movs	r0, #0
 8082dec:	b003      	add	sp, #12
 8082dee:	bd30      	pop	{r4, r5, pc}
 8082df0:	08082d89 	.word	0x08082d89
 8082df4:	2000074c 	.word	0x2000074c

08082df8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 8082df8:	6800      	ldr	r0, [r0, #0]
 8082dfa:	f002 bfe8 	b.w	8085dce <_ZN8SPIClass8transferEh>
	...

08082e00 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8082e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082e02:	4b07      	ldr	r3, [pc, #28]	; (8082e20 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082e04:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082e06:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082e08:	4c06      	ldr	r4, [pc, #24]	; (8082e24 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082e0a:	4613      	mov	r3, r2
 8082e0c:	6800      	ldr	r0, [r0, #0]
 8082e0e:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082e10:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082e12:	f002 ffe2 	bl	8085dda <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8082e16:	7823      	ldrb	r3, [r4, #0]
 8082e18:	2b00      	cmp	r3, #0
 8082e1a:	d0fc      	beq.n	8082e16 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8082e1c:	b003      	add	sp, #12
 8082e1e:	bd30      	pop	{r4, r5, pc}
 8082e20:	08082d89 	.word	0x08082d89
 8082e24:	2000074c 	.word	0x2000074c

08082e28 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 8082e28:	f002 ba2a 	b.w	8085280 <HAL_Pin_Map>

08082e2c <_ZN18ParticleSoftSerial10rxTimerISREv>:
    detachInterrupt(_rxPin);
  }
}

void ParticleSoftSerial::rxTimerISR(void)
{
 8082e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  static uint8_t parityErr = (_parity & 0x01);
 8082e2e:	4c3c      	ldr	r4, [pc, #240]	; (8082f20 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf4>)
 8082e30:	6823      	ldr	r3, [r4, #0]
 8082e32:	07d9      	lsls	r1, r3, #31
 8082e34:	d40c      	bmi.n	8082e50 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 8082e36:	4620      	mov	r0, r4
 8082e38:	f7fd f939 	bl	80800ae <__cxa_guard_acquire>
 8082e3c:	b140      	cbz	r0, 8082e50 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 8082e3e:	4b39      	ldr	r3, [pc, #228]	; (8082f24 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8082e40:	4a39      	ldr	r2, [pc, #228]	; (8082f28 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8082e42:	781b      	ldrb	r3, [r3, #0]
 8082e44:	4620      	mov	r0, r4
 8082e46:	f003 0301 	and.w	r3, r3, #1
 8082e4a:	7013      	strb	r3, [r2, #0]
 8082e4c:	f7fd f934 	bl	80800b8 <__cxa_guard_release>
  uint8_t bit;

  if (_rxBitPos <= PSS_STARTBIT) return;
 8082e50:	4c36      	ldr	r4, [pc, #216]	; (8082f2c <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 8082e52:	7823      	ldrb	r3, [r4, #0]
 8082e54:	061a      	lsls	r2, r3, #24
 8082e56:	d461      	bmi.n	8082f1c <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
  _PSS_DEBUG_HIGH(_debugPin);
  
  if (_rxBitPos == PSS_DATA) // after start bit go for normal bit length
 8082e58:	7825      	ldrb	r5, [r4, #0]
 8082e5a:	4e32      	ldr	r6, [pc, #200]	; (8082f24 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8082e5c:	b26d      	sxtb	r5, r5
 8082e5e:	b975      	cbnz	r5, 8082e7e <_ZN18ParticleSoftSerial10rxTimerISREv+0x52>
  {
    rxTimer.resetPeriod_SIT(_usBitLength, uSec);
 8082e60:	4b33      	ldr	r3, [pc, #204]	; (8082f30 <_ZN18ParticleSoftSerial10rxTimerISREv+0x104>)
 8082e62:	462a      	mov	r2, r5
 8082e64:	6819      	ldr	r1, [r3, #0]
 8082e66:	4833      	ldr	r0, [pc, #204]	; (8082f34 <_ZN18ParticleSoftSerial10rxTimerISREv+0x108>)
 8082e68:	f002 f9dc 	bl	8085224 <_ZN13IntervalTimer15resetPeriod_SITEmb>

    parityErr = (_parity & 0x01);
 8082e6c:	7833      	ldrb	r3, [r6, #0]
 8082e6e:	4a2e      	ldr	r2, [pc, #184]	; (8082f28 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8082e70:	f003 0301 	and.w	r3, r3, #1
 8082e74:	7013      	strb	r3, [r2, #0]
    _rxBuffer[_rxBufferHead] = 0;
 8082e76:	4b30      	ldr	r3, [pc, #192]	; (8082f38 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 8082e78:	4a30      	ldr	r2, [pc, #192]	; (8082f3c <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8082e7a:	781b      	ldrb	r3, [r3, #0]
 8082e7c:	54d5      	strb	r5, [r2, r3]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8082e7e:	4b30      	ldr	r3, [pc, #192]	; (8082f40 <_ZN18ParticleSoftSerial10rxTimerISREv+0x114>)
 8082e80:	4a30      	ldr	r2, [pc, #192]	; (8082f44 <_ZN18ParticleSoftSerial10rxTimerISREv+0x118>)
 8082e82:	8818      	ldrh	r0, [r3, #0]
 8082e84:	231c      	movs	r3, #28
 8082e86:	4343      	muls	r3, r0
 8082e88:	6812      	ldr	r2, [r2, #0]
 8082e8a:	18d1      	adds	r1, r2, r3
 8082e8c:	58d3      	ldr	r3, [r2, r3]
 8082e8e:	888a      	ldrh	r2, [r1, #4]
 8082e90:	691b      	ldr	r3, [r3, #16]
  bit = pinReadFast(_rxPin);
#ifdef _PSS_DEBUG
  b[_rxBitPos+1] = bit;
  usLast[_rxBitPos+1] = micros();
#endif
  if (_rxBitPos <= _dataBits)
 8082e92:	492d      	ldr	r1, [pc, #180]	; (8082f48 <_ZN18ParticleSoftSerial10rxTimerISREv+0x11c>)
 8082e94:	421a      	tst	r2, r3
 8082e96:	7823      	ldrb	r3, [r4, #0]
 8082e98:	780d      	ldrb	r5, [r1, #0]
 8082e9a:	b25b      	sxtb	r3, r3
 8082e9c:	bf14      	ite	ne
 8082e9e:	2201      	movne	r2, #1
 8082ea0:	2200      	moveq	r2, #0
 8082ea2:	42ab      	cmp	r3, r5
 8082ea4:	dc0d      	bgt.n	8082ec2 <_ZN18ParticleSoftSerial10rxTimerISREv+0x96>
  {
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
 8082ea6:	4b21      	ldr	r3, [pc, #132]	; (8082f2c <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 8082ea8:	4923      	ldr	r1, [pc, #140]	; (8082f38 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 8082eaa:	781b      	ldrb	r3, [r3, #0]
 8082eac:	7809      	ldrb	r1, [r1, #0]
 8082eae:	4f23      	ldr	r7, [pc, #140]	; (8082f3c <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8082eb0:	b2c9      	uxtb	r1, r1
 8082eb2:	f817 e001 	ldrb.w	lr, [r7, r1]
 8082eb6:	b25b      	sxtb	r3, r3
 8082eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8082ebc:	ea4e 0303 	orr.w	r3, lr, r3
 8082ec0:	547b      	strb	r3, [r7, r1]
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
 8082ec2:	7833      	ldrb	r3, [r6, #0]
 8082ec4:	06db      	lsls	r3, r3, #27
 8082ec6:	d503      	bpl.n	8082ed0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
 8082ec8:	7823      	ldrb	r3, [r4, #0]
 8082eca:	b25b      	sxtb	r3, r3
 8082ecc:	429d      	cmp	r5, r3
 8082ece:	da20      	bge.n	8082f12 <_ZN18ParticleSoftSerial10rxTimerISREv+0xe6>
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
  }  
  
  if (++_rxBitPos >= _totalBits)
 8082ed0:	7823      	ldrb	r3, [r4, #0]
 8082ed2:	4a1e      	ldr	r2, [pc, #120]	; (8082f4c <_ZN18ParticleSoftSerial10rxTimerISREv+0x120>)
 8082ed4:	3301      	adds	r3, #1
 8082ed6:	7812      	ldrb	r2, [r2, #0]
 8082ed8:	b25b      	sxtb	r3, r3
 8082eda:	4293      	cmp	r3, r2
 8082edc:	7023      	strb	r3, [r4, #0]
 8082ede:	db1d      	blt.n	8082f1c <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
  {
    if (parityErr)
 8082ee0:	4b11      	ldr	r3, [pc, #68]	; (8082f28 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8082ee2:	4a15      	ldr	r2, [pc, #84]	; (8082f38 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 8082ee4:	781b      	ldrb	r3, [r3, #0]
 8082ee6:	b123      	cbz	r3, 8082ef2 <_ZN18ParticleSoftSerial10rxTimerISREv+0xc6>
    {
      _rxBuffer[_rxBufferHead] = 0xFF;
 8082ee8:	7813      	ldrb	r3, [r2, #0]
 8082eea:	4a14      	ldr	r2, [pc, #80]	; (8082f3c <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8082eec:	21ff      	movs	r1, #255	; 0xff
 8082eee:	54d1      	strb	r1, [r2, r3]
 8082ef0:	e004      	b.n	8082efc <_ZN18ParticleSoftSerial10rxTimerISREv+0xd0>
    }
    else
    {
      _rxBufferHead = (_rxBufferHead + 1) % _PSS_BUFF_SIZE;
 8082ef2:	7813      	ldrb	r3, [r2, #0]
 8082ef4:	3301      	adds	r3, #1
 8082ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8082efa:	7013      	strb	r3, [r2, #0]
    }
    _rxBitPos = PSS_INACTIVE;
 8082efc:	23fe      	movs	r3, #254	; 0xfe
 8082efe:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
 8082f00:	2300      	movs	r3, #0
 8082f02:	9300      	str	r3, [sp, #0]
 8082f04:	2202      	movs	r2, #2
 8082f06:	f04f 33ff 	mov.w	r3, #4294967295
 8082f0a:	4911      	ldr	r1, [pc, #68]	; (8082f50 <_ZN18ParticleSoftSerial10rxTimerISREv+0x124>)
 8082f0c:	f004 fd18 	bl	8087940 <_Z15attachInterrupttPFvvE13InterruptModeah>
 8082f10:	e004      	b.n	8082f1c <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
 8082f12:	4b05      	ldr	r3, [pc, #20]	; (8082f28 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8082f14:	7819      	ldrb	r1, [r3, #0]
 8082f16:	404a      	eors	r2, r1
 8082f18:	701a      	strb	r2, [r3, #0]
 8082f1a:	e7d9      	b.n	8082ed0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
    _rxBitPos = PSS_INACTIVE;
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
  }
  _PSS_DEBUG_LOW(_debugPin);
}
 8082f1c:	b003      	add	sp, #12
 8082f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082f20:	20000758 	.word	0x20000758
 8082f24:	200007b1 	.word	0x200007b1
 8082f28:	2000075c 	.word	0x2000075c
 8082f2c:	20000040 	.word	0x20000040
 8082f30:	20000034 	.word	0x20000034
 8082f34:	20000800 	.word	0x20000800
 8082f38:	200007bc 	.word	0x200007bc
 8082f3c:	2000075d 	.word	0x2000075d
 8082f40:	20000048 	.word	0x20000048
 8082f44:	200007b8 	.word	0x200007b8
 8082f48:	2000003f 	.word	0x2000003f
 8082f4c:	20000030 	.word	0x20000030
 8082f50:	08082f61 	.word	0x08082f61

08082f54 <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 8082f54:	b510      	push	{r4, lr}
 8082f56:	4604      	mov	r4, r0
 8082f58:	f002 f95a 	bl	8085210 <_ZN13IntervalTimer3endEv>
 8082f5c:	4620      	mov	r0, r4
 8082f5e:	bd10      	pop	{r4, pc}

08082f60 <_ZN18ParticleSoftSerial8rxPinISREv>:
  volatile uint32_t usLast[12];
  volatile uint8_t  b[12];
#endif

void ParticleSoftSerial::rxPinISR(void)
{ // start bit triggers read after 1.5 bits lengths (= middle of first data bit)
 8082f60:	b510      	push	{r4, lr}
  if (_rxBitPos <= PSS_STARTBIT)
 8082f62:	4c09      	ldr	r4, [pc, #36]	; (8082f88 <_ZN18ParticleSoftSerial8rxPinISREv+0x28>)
 8082f64:	7823      	ldrb	r3, [r4, #0]
 8082f66:	061b      	lsls	r3, r3, #24
 8082f68:	d50d      	bpl.n	8082f86 <_ZN18ParticleSoftSerial8rxPinISREv+0x26>
#ifdef _PSS_DEBUG
    usLast[0] = micros();
    b[0] = HIGH;
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
 8082f6a:	4b08      	ldr	r3, [pc, #32]	; (8082f8c <_ZN18ParticleSoftSerial8rxPinISREv+0x2c>)
 8082f6c:	4808      	ldr	r0, [pc, #32]	; (8082f90 <_ZN18ParticleSoftSerial8rxPinISREv+0x30>)
 8082f6e:	6819      	ldr	r1, [r3, #0]
 8082f70:	2200      	movs	r2, #0
 8082f72:	f002 f957 	bl	8085224 <_ZN13IntervalTimer15resetPeriod_SITEmb>
    _rxBitPos = PSS_DATA;
 8082f76:	2300      	movs	r3, #0
 8082f78:	7023      	strb	r3, [r4, #0]
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 8082f7a:	4b06      	ldr	r3, [pc, #24]	; (8082f94 <_ZN18ParticleSoftSerial8rxPinISREv+0x34>)
  }
}
 8082f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
    _rxBitPos = PSS_DATA;
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 8082f80:	8818      	ldrh	r0, [r3, #0]
 8082f82:	f004 bd05 	b.w	8087990 <_Z15detachInterruptt>
 8082f86:	bd10      	pop	{r4, pc}
 8082f88:	20000040 	.word	0x20000040
 8082f8c:	20000038 	.word	0x20000038
 8082f90:	20000800 	.word	0x20000800
 8082f94:	20000048 	.word	0x20000048

08082f98 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8082f98:	b40e      	push	{r1, r2, r3}
 8082f9a:	b500      	push	{lr}
 8082f9c:	b08c      	sub	sp, #48	; 0x30
 8082f9e:	aa0d      	add	r2, sp, #52	; 0x34
 8082fa0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8082fa4:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8082fa6:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8082faa:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8082fac:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8082fae:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8082fb0:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8082fb2:	aa04      	add	r2, sp, #16
 8082fb4:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8082fb6:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8082fb8:	f002 fbba 	bl	8085730 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8082fbc:	b00c      	add	sp, #48	; 0x30
 8082fbe:	f85d eb04 	ldr.w	lr, [sp], #4
 8082fc2:	b003      	add	sp, #12
 8082fc4:	4770      	bx	lr
	...

08082fc8 <_ZN13IntervalTimerC1Ev>:
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8082fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8082fca:	223b      	movs	r2, #59	; 0x3b
 8082fcc:	8042      	strh	r2, [r0, #2]
 8082fce:	f247 522f 	movw	r2, #29999	; 0x752f
 8082fd2:	8082      	strh	r2, [r0, #4]
 8082fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082fd8:	80c2      	strh	r2, [r0, #6]
	status = TIMER_OFF;

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8082fda:	4a25      	ldr	r2, [pc, #148]	; (8083070 <_ZN13IntervalTimerC1Ev+0xa8>)
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8082fdc:	2300      	movs	r3, #0
 8082fde:	7003      	strb	r3, [r0, #0]
	status = TIMER_OFF;
 8082fe0:	7203      	strb	r3, [r0, #8]

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8082fe2:	7013      	strb	r3, [r2, #0]
 8082fe4:	7053      	strb	r3, [r2, #1]
 8082fe6:	7093      	strb	r3, [r2, #2]
 8082fe8:	70d3      	strb	r3, [r2, #3]
 8082fea:	7113      	strb	r3, [r2, #4]
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8082fec:	7803      	ldrb	r3, [r0, #0]
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8082fee:	4604      	mov	r4, r0
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8082ff0:	2b00      	cmp	r3, #0
 8082ff2:	d13a      	bne.n	808306a <_ZN13IntervalTimerC1Ev+0xa2>
		sysIntSetupDone = true;
 8082ff4:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082ff6:	4e1f      	ldr	r6, [pc, #124]	; (8083074 <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 8082ff8:	4d1f      	ldr	r5, [pc, #124]	; (8083078 <_ZN13IntervalTimerC1Ev+0xb0>)
 8082ffa:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8082ffc:	4b1f      	ldr	r3, [pc, #124]	; (808307c <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 8082ffe:	4669      	mov	r1, sp
 8083000:	2013      	movs	r0, #19
 8083002:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083004:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083006:	9502      	str	r5, [sp, #8]
 8083008:	f004 fcec 	bl	80879e4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808300c:	4668      	mov	r0, sp
 808300e:	f7fd f8d6 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083012:	4b1b      	ldr	r3, [pc, #108]	; (8083080 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 8083014:	4669      	mov	r1, sp
 8083016:	201a      	movs	r0, #26
 8083018:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808301a:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808301c:	9502      	str	r5, [sp, #8]
 808301e:	f004 fce1 	bl	80879e4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083022:	4668      	mov	r0, sp
 8083024:	f7fd f8cb 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083028:	4b16      	ldr	r3, [pc, #88]	; (8083084 <_ZN13IntervalTimerC1Ev+0xbc>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 808302a:	4669      	mov	r1, sp
 808302c:	2021      	movs	r0, #33	; 0x21
 808302e:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083030:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083032:	9502      	str	r5, [sp, #8]
 8083034:	f004 fcd6 	bl	80879e4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083038:	4668      	mov	r0, sp
 808303a:	f7fd f8c0 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808303e:	4b12      	ldr	r3, [pc, #72]	; (8083088 <_ZN13IntervalTimerC1Ev+0xc0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 8083040:	4669      	mov	r1, sp
 8083042:	2024      	movs	r0, #36	; 0x24
 8083044:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083046:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083048:	9502      	str	r5, [sp, #8]
 808304a:	f004 fccb 	bl	80879e4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808304e:	4668      	mov	r0, sp
 8083050:	f7fd f8b5 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083054:	4b0d      	ldr	r3, [pc, #52]	; (808308c <_ZN13IntervalTimerC1Ev+0xc4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 8083056:	4669      	mov	r1, sp
 8083058:	2026      	movs	r0, #38	; 0x26
 808305a:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808305c:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808305e:	9502      	str	r5, [sp, #8]
 8083060:	f004 fcc0 	bl	80879e4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083064:	4668      	mov	r0, sp
 8083066:	f7fd f8aa 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	}
#endif

    }
 808306a:	4620      	mov	r0, r4
 808306c:	b004      	add	sp, #16
 808306e:	bd70      	pop	{r4, r5, r6, pc}
 8083070:	2000091c 	.word	0x2000091c
 8083074:	080800bf 	.word	0x080800bf
 8083078:	080800c3 	.word	0x080800c3
 808307c:	08084f29 	.word	0x08084f29
 8083080:	08084f51 	.word	0x08084f51
 8083084:	08084f79 	.word	0x08084f79
 8083088:	08084fa1 	.word	0x08084fa1
 808308c:	08084fc9 	.word	0x08084fc9

08083090 <_ZN18ParticleSoftSerial9prepareRXEv>:
  end();
  pss = NULL;
}

void ParticleSoftSerial::prepareRX(void)
{
 8083090:	b513      	push	{r0, r1, r4, lr}
  pinMode(_rxPin, INPUT_PULLUP);
 8083092:	4c11      	ldr	r4, [pc, #68]	; (80830d8 <_ZN18ParticleSoftSerial9prepareRXEv+0x48>)
 8083094:	2102      	movs	r1, #2
 8083096:	8820      	ldrh	r0, [r4, #0]
 8083098:	f005 f8ca 	bl	8088230 <pinMode>

  _rxBitPos = PSS_INACTIVE;
 808309c:	4b0f      	ldr	r3, [pc, #60]	; (80830dc <_ZN18ParticleSoftSerial9prepareRXEv+0x4c>)
 808309e:	22fe      	movs	r2, #254	; 0xfe
 80830a0:	701a      	strb	r2, [r3, #0]
  rxTimer.begin(rxTimerISR, _usBitLength, uSec, _rxTimId);
 80830a2:	4b0f      	ldr	r3, [pc, #60]	; (80830e0 <_ZN18ParticleSoftSerial9prepareRXEv+0x50>)
 80830a4:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 80830a6:	2a09      	cmp	r2, #9
 80830a8:	d90a      	bls.n	80830c0 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 80830aa:	480e      	ldr	r0, [pc, #56]	; (80830e4 <_ZN18ParticleSoftSerial9prepareRXEv+0x54>)
 80830ac:	88c3      	ldrh	r3, [r0, #6]
 80830ae:	429a      	cmp	r2, r3
 80830b0:	d806      	bhi.n	80830c0 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 80830b2:	4b0d      	ldr	r3, [pc, #52]	; (80830e8 <_ZN18ParticleSoftSerial9prepareRXEv+0x58>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 80830b4:	490d      	ldr	r1, [pc, #52]	; (80830ec <_ZN18ParticleSoftSerial9prepareRXEv+0x5c>)
 80830b6:	781b      	ldrb	r3, [r3, #0]
 80830b8:	9300      	str	r3, [sp, #0]
 80830ba:	2300      	movs	r3, #0
 80830bc:	f002 f872 	bl	80851a4 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage

  // prepare for FALLING edge of start bit 
  attachInterrupt(_rxPin, rxPinISR, FALLING);
 80830c0:	2300      	movs	r3, #0
 80830c2:	9300      	str	r3, [sp, #0]
 80830c4:	8820      	ldrh	r0, [r4, #0]
 80830c6:	f04f 33ff 	mov.w	r3, #4294967295
 80830ca:	2202      	movs	r2, #2
 80830cc:	4908      	ldr	r1, [pc, #32]	; (80830f0 <_ZN18ParticleSoftSerial9prepareRXEv+0x60>)
 80830ce:	f004 fc37 	bl	8087940 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80830d2:	b002      	add	sp, #8
 80830d4:	bd10      	pop	{r4, pc}
 80830d6:	bf00      	nop
 80830d8:	20000048 	.word	0x20000048
 80830dc:	20000040 	.word	0x20000040
 80830e0:	20000034 	.word	0x20000034
 80830e4:	20000800 	.word	0x20000800
 80830e8:	2000003d 	.word	0x2000003d
 80830ec:	08082e2d 	.word	0x08082e2d
 80830f0:	08082f61 	.word	0x08082f61

080830f4 <_ZN18ParticleSoftSerial10txTimerISREv>:
  }
  _PSS_DEBUG_LOW(_debugPin);
}

void ParticleSoftSerial::txTimerISR(void)
{
 80830f4:	b538      	push	{r3, r4, r5, lr}
  static uint8_t parity = (_parity & 0x01);
 80830f6:	4c56      	ldr	r4, [pc, #344]	; (8083250 <_ZN18ParticleSoftSerial10txTimerISREv+0x15c>)
 80830f8:	6823      	ldr	r3, [r4, #0]
 80830fa:	07db      	lsls	r3, r3, #31
 80830fc:	d40c      	bmi.n	8083118 <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 80830fe:	4620      	mov	r0, r4
 8083100:	f7fc ffd5 	bl	80800ae <__cxa_guard_acquire>
 8083104:	b140      	cbz	r0, 8083118 <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 8083106:	4b53      	ldr	r3, [pc, #332]	; (8083254 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8083108:	4a53      	ldr	r2, [pc, #332]	; (8083258 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 808310a:	781b      	ldrb	r3, [r3, #0]
 808310c:	4620      	mov	r0, r4
 808310e:	f003 0301 	and.w	r3, r3, #1
 8083112:	7013      	strb	r3, [r2, #0]
 8083114:	f7fc ffd0 	bl	80800b8 <__cxa_guard_release>

  if(_txBitPos < PSS_STARTBIT) return;
 8083118:	4c50      	ldr	r4, [pc, #320]	; (808325c <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 808311a:	7823      	ldrb	r3, [r4, #0]
 808311c:	b25b      	sxtb	r3, r3
 808311e:	3301      	adds	r3, #1
 8083120:	f2c0 8094 	blt.w	808324c <_ZN18ParticleSoftSerial10txTimerISREv+0x158>

  if(_txBitPos == PSS_STARTBIT)                                 // produce StartBit
 8083124:	7823      	ldrb	r3, [r4, #0]
 8083126:	4d4e      	ldr	r5, [pc, #312]	; (8083260 <_ZN18ParticleSoftSerial10txTimerISREv+0x16c>)
 8083128:	2bff      	cmp	r3, #255	; 0xff
 808312a:	d115      	bne.n	8083158 <_ZN18ParticleSoftSerial10txTimerISREv+0x64>
  {
    txTimer.resetPeriod_SIT(_usBitLength, uSec);
 808312c:	4b4d      	ldr	r3, [pc, #308]	; (8083264 <_ZN18ParticleSoftSerial10txTimerISREv+0x170>)
 808312e:	2200      	movs	r2, #0
 8083130:	6819      	ldr	r1, [r3, #0]
 8083132:	484d      	ldr	r0, [pc, #308]	; (8083268 <_ZN18ParticleSoftSerial10txTimerISREv+0x174>)
 8083134:	f002 f876 	bl	8085224 <_ZN13IntervalTimer15resetPeriod_SITEmb>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8083138:	4b4c      	ldr	r3, [pc, #304]	; (808326c <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 808313a:	881a      	ldrh	r2, [r3, #0]
 808313c:	231c      	movs	r3, #28
 808313e:	4353      	muls	r3, r2
 8083140:	4a4b      	ldr	r2, [pc, #300]	; (8083270 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8083142:	6812      	ldr	r2, [r2, #0]
 8083144:	18d1      	adds	r1, r2, r3
 8083146:	58d3      	ldr	r3, [r2, r3]
 8083148:	888a      	ldrh	r2, [r1, #4]
 808314a:	835a      	strh	r2, [r3, #26]
    pinResetFast(_txPin);
    parity = (_parity & 0x01);
 808314c:	4b41      	ldr	r3, [pc, #260]	; (8083254 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 808314e:	4a42      	ldr	r2, [pc, #264]	; (8083258 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083150:	781b      	ldrb	r3, [r3, #0]
 8083152:	f003 0301 	and.w	r3, r3, #1
 8083156:	e020      	b.n	808319a <_ZN18ParticleSoftSerial10txTimerISREv+0xa6>
  }
  else if(PSS_DATA <= _txBitPos && _txBitPos < _dataBits)       // send data bits
 8083158:	7823      	ldrb	r3, [r4, #0]
 808315a:	4a46      	ldr	r2, [pc, #280]	; (8083274 <_ZN18ParticleSoftSerial10txTimerISREv+0x180>)
 808315c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8083160:	d13d      	bne.n	80831de <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
 8083162:	7823      	ldrb	r3, [r4, #0]
 8083164:	7811      	ldrb	r1, [r2, #0]
 8083166:	b25b      	sxtb	r3, r3
 8083168:	428b      	cmp	r3, r1
 808316a:	da38      	bge.n	80831de <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
  {
    if ((_txBuffer[_txBufferTail] >> _txBitPos) & 0x01)
 808316c:	7829      	ldrb	r1, [r5, #0]
 808316e:	7823      	ldrb	r3, [r4, #0]
 8083170:	b25a      	sxtb	r2, r3
 8083172:	4b41      	ldr	r3, [pc, #260]	; (8083278 <_ZN18ParticleSoftSerial10txTimerISREv+0x184>)
 8083174:	5c5b      	ldrb	r3, [r3, r1]
 8083176:	4113      	asrs	r3, r2
 8083178:	f013 0f01 	tst.w	r3, #1
 808317c:	4a3c      	ldr	r2, [pc, #240]	; (8083270 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 808317e:	4b3b      	ldr	r3, [pc, #236]	; (808326c <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8083180:	d00d      	beq.n	808319e <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8083182:	8819      	ldrh	r1, [r3, #0]
 8083184:	231c      	movs	r3, #28
 8083186:	434b      	muls	r3, r1
 8083188:	6812      	ldr	r2, [r2, #0]
 808318a:	18d1      	adds	r1, r2, r3
 808318c:	58d3      	ldr	r3, [r2, r3]
 808318e:	888a      	ldrh	r2, [r1, #4]
 8083190:	831a      	strh	r2, [r3, #24]
    {
      pinSetFast(_txPin);
      parity ^= 0x01;                                           // keep track of the parity
 8083192:	4a31      	ldr	r2, [pc, #196]	; (8083258 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083194:	7813      	ldrb	r3, [r2, #0]
 8083196:	f083 0301 	eor.w	r3, r3, #1
 808319a:	7013      	strb	r3, [r2, #0]
 808319c:	e007      	b.n	80831ae <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808319e:	8819      	ldrh	r1, [r3, #0]
 80831a0:	231c      	movs	r3, #28
 80831a2:	434b      	muls	r3, r1
 80831a4:	6812      	ldr	r2, [r2, #0]
 80831a6:	18d1      	adds	r1, r2, r3
 80831a8:	58d3      	ldr	r3, [r2, r3]
 80831aa:	888a      	ldrh	r2, [r1, #4]
 80831ac:	835a      	strh	r2, [r3, #26]
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
    _txBitPos = PSS_INACTIVE;
  }
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
 80831ae:	4b33      	ldr	r3, [pc, #204]	; (808327c <_ZN18ParticleSoftSerial10txTimerISREv+0x188>)
 80831b0:	782a      	ldrb	r2, [r5, #0]
 80831b2:	781b      	ldrb	r3, [r3, #0]
 80831b4:	429a      	cmp	r2, r3
 80831b6:	d10d      	bne.n	80831d4 <_ZN18ParticleSoftSerial10txTimerISREv+0xe0>
  {
    _txBitPos = PSS_INACTIVE;
 80831b8:	23fe      	movs	r3, #254	; 0xfe
 80831ba:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 80831bc:	4b30      	ldr	r3, [pc, #192]	; (8083280 <_ZN18ParticleSoftSerial10txTimerISREv+0x18c>)
 80831be:	781b      	ldrb	r3, [r3, #0]
 80831c0:	2b00      	cmp	r3, #0
 80831c2:	d043      	beq.n	808324c <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
 80831c4:	4b2f      	ldr	r3, [pc, #188]	; (8083284 <_ZN18ParticleSoftSerial10txTimerISREv+0x190>)
 80831c6:	6818      	ldr	r0, [r3, #0]
 80831c8:	2800      	cmp	r0, #0
 80831ca:	d03f      	beq.n	808324c <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
  }
  else
  {
    _txBitPos++;
  }
}
 80831cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
  {
    _txBitPos = PSS_INACTIVE;
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 80831d0:	f7ff bf5e 	b.w	8083090 <_ZN18ParticleSoftSerial9prepareRXEv>
  }
  else
  {
    _txBitPos++;
 80831d4:	7823      	ldrb	r3, [r4, #0]
 80831d6:	3301      	adds	r3, #1
 80831d8:	b25b      	sxtb	r3, r3
 80831da:	7023      	strb	r3, [r4, #0]
 80831dc:	bd38      	pop	{r3, r4, r5, pc}
    else
    {
      pinResetFast(_txPin);
    }
  }
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
 80831de:	4b1d      	ldr	r3, [pc, #116]	; (8083254 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 80831e0:	781b      	ldrb	r3, [r3, #0]
 80831e2:	b123      	cbz	r3, 80831ee <_ZN18ParticleSoftSerial10txTimerISREv+0xfa>
 80831e4:	7823      	ldrb	r3, [r4, #0]
 80831e6:	7811      	ldrb	r1, [r2, #0]
 80831e8:	b25b      	sxtb	r3, r3
 80831ea:	428b      	cmp	r3, r1
 80831ec:	d011      	beq.n	8083212 <_ZN18ParticleSoftSerial10txTimerISREv+0x11e>
    else
    {
      pinResetFast(_txPin);
    }
  }
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
 80831ee:	7823      	ldrb	r3, [r4, #0]
 80831f0:	7812      	ldrb	r2, [r2, #0]
 80831f2:	b25b      	sxtb	r3, r3
 80831f4:	429a      	cmp	r2, r3
 80831f6:	4a24      	ldr	r2, [pc, #144]	; (8083288 <_ZN18ParticleSoftSerial10txTimerISREv+0x194>)
 80831f8:	dc1a      	bgt.n	8083230 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
 80831fa:	4b18      	ldr	r3, [pc, #96]	; (808325c <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 80831fc:	7811      	ldrb	r1, [r2, #0]
 80831fe:	781b      	ldrb	r3, [r3, #0]
 8083200:	b25b      	sxtb	r3, r3
 8083202:	428b      	cmp	r3, r1
 8083204:	da14      	bge.n	8083230 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8083206:	4b19      	ldr	r3, [pc, #100]	; (808326c <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8083208:	881a      	ldrh	r2, [r3, #0]
 808320a:	231c      	movs	r3, #28
 808320c:	4353      	muls	r3, r2
 808320e:	4a18      	ldr	r2, [pc, #96]	; (8083270 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8083210:	e008      	b.n	8083224 <_ZN18ParticleSoftSerial10txTimerISREv+0x130>
      pinResetFast(_txPin);
    }
  }
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
  {
    if (parity)
 8083212:	4b11      	ldr	r3, [pc, #68]	; (8083258 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8083214:	4a16      	ldr	r2, [pc, #88]	; (8083270 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8083216:	7819      	ldrb	r1, [r3, #0]
 8083218:	4b14      	ldr	r3, [pc, #80]	; (808326c <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 808321a:	2900      	cmp	r1, #0
 808321c:	d0bf      	beq.n	808319e <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
 808321e:	8819      	ldrh	r1, [r3, #0]
 8083220:	231c      	movs	r3, #28
 8083222:	434b      	muls	r3, r1
 8083224:	6812      	ldr	r2, [r2, #0]
 8083226:	18d1      	adds	r1, r2, r3
 8083228:	58d3      	ldr	r3, [r2, r3]
 808322a:	888a      	ldrh	r2, [r1, #4]
 808322c:	831a      	strh	r2, [r3, #24]
 808322e:	e7be      	b.n	80831ae <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  }
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
  {
      pinSetFast(_txPin);
  }
  else if(_txBitPos >= _totalBits)
 8083230:	7823      	ldrb	r3, [r4, #0]
 8083232:	7812      	ldrb	r2, [r2, #0]
 8083234:	b25b      	sxtb	r3, r3
 8083236:	4293      	cmp	r3, r2
 8083238:	dbb9      	blt.n	80831ae <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 808323a:	782b      	ldrb	r3, [r5, #0]
    _txBitPos = PSS_INACTIVE;
 808323c:	22fe      	movs	r2, #254	; 0xfe
  {
      pinSetFast(_txPin);
  }
  else if(_txBitPos >= _totalBits)
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 808323e:	3301      	adds	r3, #1
 8083240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8083244:	702b      	strb	r3, [r5, #0]
    _txBitPos = PSS_INACTIVE;
 8083246:	4b05      	ldr	r3, [pc, #20]	; (808325c <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8083248:	701a      	strb	r2, [r3, #0]
 808324a:	e7b0      	b.n	80831ae <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
 808324c:	bd38      	pop	{r3, r4, r5, pc}
 808324e:	bf00      	nop
 8083250:	20000750 	.word	0x20000750
 8083254:	200007b1 	.word	0x200007b1
 8083258:	20000754 	.word	0x20000754
 808325c:	2000003c 	.word	0x2000003c
 8083260:	200007b0 	.word	0x200007b0
 8083264:	20000034 	.word	0x20000034
 8083268:	200007a0 	.word	0x200007a0
 808326c:	20000044 	.word	0x20000044
 8083270:	200007b8 	.word	0x200007b8
 8083274:	2000003f 	.word	0x2000003f
 8083278:	200007bd 	.word	0x200007bd
 808327c:	20000810 	.word	0x20000810
 8083280:	2000079d 	.word	0x2000079d
 8083284:	200007b4 	.word	0x200007b4
 8083288:	20000030 	.word	0x20000030

0808328c <_ZN18ParticleSoftSerial9prepareTXEv>:
  // prepare for FALLING edge of start bit 
  attachInterrupt(_rxPin, rxPinISR, FALLING);
}

void ParticleSoftSerial::prepareTX(void)
{
 808328c:	b513      	push	{r0, r1, r4, lr}
  pinMode(_txPin, OUTPUT);
 808328e:	4c11      	ldr	r4, [pc, #68]	; (80832d4 <_ZN18ParticleSoftSerial9prepareTXEv+0x48>)
 8083290:	2101      	movs	r1, #1
 8083292:	8820      	ldrh	r0, [r4, #0]
 8083294:	f004 ffcc 	bl	8088230 <pinMode>
 8083298:	8822      	ldrh	r2, [r4, #0]
 808329a:	231c      	movs	r3, #28
 808329c:	4353      	muls	r3, r2
 808329e:	4a0e      	ldr	r2, [pc, #56]	; (80832d8 <_ZN18ParticleSoftSerial9prepareTXEv+0x4c>)
 80832a0:	6812      	ldr	r2, [r2, #0]
 80832a2:	18d1      	adds	r1, r2, r3
 80832a4:	58d3      	ldr	r3, [r2, r3]
 80832a6:	888a      	ldrh	r2, [r1, #4]
 80832a8:	831a      	strh	r2, [r3, #24]
  pinSetFast(_txPin);

  _txBitPos = PSS_INACTIVE;
 80832aa:	4b0c      	ldr	r3, [pc, #48]	; (80832dc <_ZN18ParticleSoftSerial9prepareTXEv+0x50>)
 80832ac:	22fe      	movs	r2, #254	; 0xfe
 80832ae:	701a      	strb	r2, [r3, #0]
  txTimer.begin(txTimerISR, _usBitLength, uSec, _txTimId);
 80832b0:	4b0b      	ldr	r3, [pc, #44]	; (80832e0 <_ZN18ParticleSoftSerial9prepareTXEv+0x54>)
 80832b2:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 80832b4:	2a09      	cmp	r2, #9
 80832b6:	d90a      	bls.n	80832ce <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 80832b8:	480a      	ldr	r0, [pc, #40]	; (80832e4 <_ZN18ParticleSoftSerial9prepareTXEv+0x58>)
 80832ba:	88c3      	ldrh	r3, [r0, #6]
 80832bc:	429a      	cmp	r2, r3
 80832be:	d806      	bhi.n	80832ce <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 80832c0:	4b09      	ldr	r3, [pc, #36]	; (80832e8 <_ZN18ParticleSoftSerial9prepareTXEv+0x5c>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 80832c2:	490a      	ldr	r1, [pc, #40]	; (80832ec <_ZN18ParticleSoftSerial9prepareTXEv+0x60>)
 80832c4:	781b      	ldrb	r3, [r3, #0]
 80832c6:	9300      	str	r3, [sp, #0]
 80832c8:	2300      	movs	r3, #0
 80832ca:	f001 ff6b 	bl	80851a4 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  //txTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage
}
 80832ce:	b002      	add	sp, #8
 80832d0:	bd10      	pop	{r4, pc}
 80832d2:	bf00      	nop
 80832d4:	20000044 	.word	0x20000044
 80832d8:	200007b8 	.word	0x200007b8
 80832dc:	2000003c 	.word	0x2000003c
 80832e0:	20000034 	.word	0x20000034
 80832e4:	200007a0 	.word	0x200007a0
 80832e8:	2000003e 	.word	0x2000003e
 80832ec:	080830f5 	.word	0x080830f5

080832f0 <_ZN18ParticleSoftSerial5beginEmm>:

void ParticleSoftSerial::begin(unsigned long baud, uint32_t config)
{
  _PSS_DEBUG_PIN(_debugPin);

  if (config & SERIAL_DATA_BITS_9)
 80832f0:	f012 0f10 	tst.w	r2, #16
{
  begin(baud, SERIAL_8N1);
}

void ParticleSoftSerial::begin(unsigned long baud, uint32_t config)
{
 80832f4:	b538      	push	{r3, r4, r5, lr}
 80832f6:	4605      	mov	r5, r0
 80832f8:	4b23      	ldr	r3, [pc, #140]	; (8083388 <_ZN18ParticleSoftSerial5beginEmm+0x98>)
  _PSS_DEBUG_PIN(_debugPin);

  if (config & SERIAL_DATA_BITS_9)
 80832fa:	d001      	beq.n	8083300 <_ZN18ParticleSoftSerial5beginEmm+0x10>
  {
    _dataBits = 9;
 80832fc:	2009      	movs	r0, #9
 80832fe:	e003      	b.n	8083308 <_ZN18ParticleSoftSerial5beginEmm+0x18>
  }
  else if (config & SERIAL_DATA_BITS_7)
 8083300:	0690      	lsls	r0, r2, #26
  {
    _dataBits = 7;
 8083302:	bf4c      	ite	mi
 8083304:	2007      	movmi	r0, #7
  }
  else
  {
    _dataBits = 8;
 8083306:	2008      	movpl	r0, #8
 8083308:	7018      	strb	r0, [r3, #0]
  }
  
  if (config & SERIAL_STOP_BITS_2)
  {
    _totalBits = _dataBits + 2;
 808330a:	781b      	ldrb	r3, [r3, #0]
  else
  {
    _dataBits = 8;
  }
  
  if (config & SERIAL_STOP_BITS_2)
 808330c:	f012 0f01 	tst.w	r2, #1
 8083310:	481e      	ldr	r0, [pc, #120]	; (808338c <_ZN18ParticleSoftSerial5beginEmm+0x9c>)
  {
    _totalBits = _dataBits + 2;
 8083312:	bf14      	ite	ne
 8083314:	3302      	addne	r3, #2
  }
  else
  {
    _totalBits = _dataBits + 1;
 8083316:	3301      	addeq	r3, #1
  }

  if (config & SERIAL_PARITY)
 8083318:	f012 040c 	ands.w	r4, r2, #12
  {
    _totalBits = _dataBits + 2;
  }
  else
  {
    _totalBits = _dataBits + 1;
 808331c:	7003      	strb	r3, [r0, #0]
 808331e:	4b1c      	ldr	r3, [pc, #112]	; (8083390 <_ZN18ParticleSoftSerial5beginEmm+0xa0>)
  }

  if (config & SERIAL_PARITY)
 8083320:	d009      	beq.n	8083336 <_ZN18ParticleSoftSerial5beginEmm+0x46>
  {
    _parity = (config & SERIAL_PARITY_ODD) ? 0x11 : 0x10;
 8083322:	f012 0f08 	tst.w	r2, #8
 8083326:	bf14      	ite	ne
 8083328:	2211      	movne	r2, #17
 808332a:	2210      	moveq	r2, #16
 808332c:	701a      	strb	r2, [r3, #0]
    _totalBits++;
 808332e:	7803      	ldrb	r3, [r0, #0]
 8083330:	3301      	adds	r3, #1
 8083332:	7003      	strb	r3, [r0, #0]
 8083334:	e000      	b.n	8083338 <_ZN18ParticleSoftSerial5beginEmm+0x48>
  }
  else
  {
    _parity = 0;
 8083336:	701c      	strb	r4, [r3, #0]
  }
    
  for (int i=0; btTable[i].baudrate > 0; i++)
 8083338:	4a16      	ldr	r2, [pc, #88]	; (8083394 <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 808333a:	2400      	movs	r4, #0
 808333c:	200c      	movs	r0, #12
 808333e:	fb00 f304 	mul.w	r3, r0, r4
 8083342:	589b      	ldr	r3, [r3, r2]
 8083344:	b1a3      	cbz	r3, 8083370 <_ZN18ParticleSoftSerial5beginEmm+0x80>
  {
    if (btTable[i].baudrate <= baud)
 8083346:	428b      	cmp	r3, r1
 8083348:	d810      	bhi.n	808336c <_ZN18ParticleSoftSerial5beginEmm+0x7c>
    {
#if (SYSTEM_VERSION >= 0x00060000)
      if (btTable[i].baudrate != baud)
 808334a:	d004      	beq.n	8083356 <_ZN18ParticleSoftSerial5beginEmm+0x66>
      {
        Log.info("%lu not available! Selected rate %lu", baud, btTable[i].baudrate);
 808334c:	460a      	mov	r2, r1
 808334e:	4812      	ldr	r0, [pc, #72]	; (8083398 <_ZN18ParticleSoftSerial5beginEmm+0xa8>)
 8083350:	4912      	ldr	r1, [pc, #72]	; (808339c <_ZN18ParticleSoftSerial5beginEmm+0xac>)
 8083352:	f7ff fe21 	bl	8082f98 <_ZNK5spark6Logger4infoEPKcz>
      }
#endif
      _usStartBit  = btTable[i].usStartBit;
 8083356:	4a0f      	ldr	r2, [pc, #60]	; (8083394 <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 8083358:	230c      	movs	r3, #12
 808335a:	fb03 2404 	mla	r4, r3, r4, r2
 808335e:	4b10      	ldr	r3, [pc, #64]	; (80833a0 <_ZN18ParticleSoftSerial5beginEmm+0xb0>)
 8083360:	6862      	ldr	r2, [r4, #4]
 8083362:	601a      	str	r2, [r3, #0]
      _usBitLength = btTable[i].usBitLength;
 8083364:	68a2      	ldr	r2, [r4, #8]
 8083366:	4b0f      	ldr	r3, [pc, #60]	; (80833a4 <_ZN18ParticleSoftSerial5beginEmm+0xb4>)
 8083368:	601a      	str	r2, [r3, #0]

      break;
 808336a:	e001      	b.n	8083370 <_ZN18ParticleSoftSerial5beginEmm+0x80>
  else
  {
    _parity = 0;
  }
    
  for (int i=0; btTable[i].baudrate > 0; i++)
 808336c:	3401      	adds	r4, #1
 808336e:	e7e6      	b.n	808333e <_ZN18ParticleSoftSerial5beginEmm+0x4e>

      break;
    }
  }

  if (!_halfduplex)
 8083370:	4b0d      	ldr	r3, [pc, #52]	; (80833a8 <_ZN18ParticleSoftSerial5beginEmm+0xb8>)
 8083372:	781b      	ldrb	r3, [r3, #0]
 8083374:	b913      	cbnz	r3, 808337c <_ZN18ParticleSoftSerial5beginEmm+0x8c>
  { // since in halfduplex mode the pin starts off as RX pin
    prepareTX();
 8083376:	4628      	mov	r0, r5
 8083378:	f7ff ff88 	bl	808328c <_ZN18ParticleSoftSerial9prepareTXEv>
  }
  prepareRX();
 808337c:	4628      	mov	r0, r5
}
 808337e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (!_halfduplex)
  { // since in halfduplex mode the pin starts off as RX pin
    prepareTX();
  }
  prepareRX();
 8083382:	f7ff be85 	b.w	8083090 <_ZN18ParticleSoftSerial9prepareRXEv>
 8083386:	bf00      	nop
 8083388:	2000003f 	.word	0x2000003f
 808338c:	20000030 	.word	0x20000030
 8083390:	200007b1 	.word	0x200007b1
 8083394:	0808d1c0 	.word	0x0808d1c0
 8083398:	20000934 	.word	0x20000934
 808339c:	0808d198 	.word	0x0808d198
 80833a0:	20000038 	.word	0x20000038
 80833a4:	20000034 	.word	0x20000034
 80833a8:	2000079d 	.word	0x2000079d

080833ac <_ZN18ParticleSoftSerial5beginEm>:
  //txTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage
}

void ParticleSoftSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80833ac:	2200      	movs	r2, #0
 80833ae:	f7ff bf9f 	b.w	80832f0 <_ZN18ParticleSoftSerial5beginEmm>
	...

080833b4 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
  }
  else
  {
    _txBitPos++;
  }
}
 80833b4:	b570      	push	{r4, r5, r6, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80833b6:	f001 ff63 	bl	8085280 <HAL_Pin_Map>
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 80833ba:	4c0c      	ldr	r4, [pc, #48]	; (80833ec <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 80833bc:	4b0c      	ldr	r3, [pc, #48]	; (80833f0 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
 80833be:	4e0d      	ldr	r6, [pc, #52]	; (80833f4 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x40>)
 80833c0:	6018      	str	r0, [r3, #0]
 80833c2:	4d0d      	ldr	r5, [pc, #52]	; (80833f8 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x44>)
 80833c4:	4620      	mov	r0, r4
 80833c6:	f7ff fdff 	bl	8082fc8 <_ZN13IntervalTimerC1Ev>
 80833ca:	4620      	mov	r0, r4
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 80833cc:	4c0b      	ldr	r4, [pc, #44]	; (80833fc <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x48>)
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 80833ce:	4632      	mov	r2, r6
 80833d0:	4629      	mov	r1, r5
 80833d2:	f005 f83d 	bl	8088450 <__aeabi_atexit>
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 80833d6:	4620      	mov	r0, r4
 80833d8:	f7ff fdf6 	bl	8082fc8 <_ZN13IntervalTimerC1Ev>
 80833dc:	4632      	mov	r2, r6
 80833de:	4629      	mov	r1, r5
 80833e0:	4620      	mov	r0, r4
  }
  else
  {
    _txBitPos++;
  }
}
 80833e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 80833e6:	f005 b833 	b.w	8088450 <__aeabi_atexit>
 80833ea:	bf00      	nop
 80833ec:	20000800 	.word	0x20000800
 80833f0:	200007b8 	.word	0x200007b8
 80833f4:	20000140 	.word	0x20000140
 80833f8:	08082f55 	.word	0x08082f55
 80833fc:	200007a0 	.word	0x200007a0

08083400 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 8083400:	f001 bf3e 	b.w	8085280 <HAL_Pin_Map>

08083404 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 8083404:	7501      	strb	r1, [r0, #20]
 8083406:	4770      	bx	lr

08083408 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 8083408:	b538      	push	{r3, r4, r5, lr}
 808340a:	4b0b      	ldr	r3, [pc, #44]	; (8083438 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808340c:	6984      	ldr	r4, [r0, #24]
 808340e:	4605      	mov	r5, r0
 8083410:	6003      	str	r3, [r0, #0]
 8083412:	b17c      	cbz	r4, 8083434 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083414:	6863      	ldr	r3, [r4, #4]
 8083416:	3b01      	subs	r3, #1
 8083418:	6063      	str	r3, [r4, #4]
 808341a:	b95b      	cbnz	r3, 8083434 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 808341c:	6823      	ldr	r3, [r4, #0]
 808341e:	4620      	mov	r0, r4
 8083420:	689b      	ldr	r3, [r3, #8]
 8083422:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083424:	68a3      	ldr	r3, [r4, #8]
 8083426:	3b01      	subs	r3, #1
 8083428:	60a3      	str	r3, [r4, #8]
 808342a:	b91b      	cbnz	r3, 8083434 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 808342c:	6823      	ldr	r3, [r4, #0]
 808342e:	4620      	mov	r0, r4
 8083430:	68db      	ldr	r3, [r3, #12]
 8083432:	4798      	blx	r3
 8083434:	4628      	mov	r0, r5
 8083436:	bd38      	pop	{r3, r4, r5, pc}
 8083438:	0808d97c 	.word	0x0808d97c

0808343c <_ZN9TCPClientD0Ev>:
 808343c:	b510      	push	{r4, lr}
 808343e:	4604      	mov	r4, r0
 8083440:	f7ff ffe2 	bl	8083408 <_ZN9TCPClientD1Ev>
 8083444:	4620      	mov	r0, r4
 8083446:	211c      	movs	r1, #28
 8083448:	f005 f810 	bl	808846c <_ZdlPvj>
 808344c:	4620      	mov	r0, r4
 808344e:	bd10      	pop	{r4, pc}

08083450 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
 8083450:	b530      	push	{r4, r5, lr}
               const char* token) {
 8083452:	4d06      	ldr	r5, [pc, #24]	; (808346c <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
  _host = host;
  _user_agent = user_agent;
 8083454:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
 8083456:	6005      	str	r5, [r0, #0]
 8083458:	2500      	movs	r5, #0
 808345a:	7505      	strb	r5, [r0, #20]
 808345c:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 8083460:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
 8083462:	6185      	str	r5, [r0, #24]
  _host = host;
 8083464:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8083466:	60c3      	str	r3, [r0, #12]
  _port = port;
 8083468:	6102      	str	r2, [r0, #16]
}
 808346a:	bd30      	pop	{r4, r5, pc}
 808346c:	0808d368 	.word	0x0808d368

08083470 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
 8083470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083474:	460d      	mov	r5, r1
 8083476:	4617      	mov	r7, r2
 8083478:	4606      	mov	r6, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
 808347a:	f004 f9f5 	bl	8087868 <_Z16_fetch_usbserialv>
 808347e:	491c      	ldr	r1, [pc, #112]	; (80834f0 <_ZN6UbiTCP9reconnectEPKci+0x80>)
 8083480:	f003 f8c5 	bl	808660e <_ZN5Print7printlnEPKc>
 8083484:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8083486:	481b      	ldr	r0, [pc, #108]	; (80834f4 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8083488:	f002 feac 	bl	80861e4 <_ZN9TCPClient6statusEv>
 808348c:	bb68      	cbnz	r0, 80834ea <_ZN6UbiTCP9reconnectEPKci+0x7a>
 808348e:	2c05      	cmp	r4, #5
 8083490:	d101      	bne.n	8083496 <_ZN6UbiTCP9reconnectEPKci+0x26>
 8083492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
 8083496:	7d33      	ldrb	r3, [r6, #20]
 8083498:	b1c3      	cbz	r3, 80834cc <_ZN6UbiTCP9reconnectEPKci+0x5c>
      Serial.print("Trying to connect to ");
 808349a:	f004 f9e5 	bl	8087868 <_Z16_fetch_usbserialv>
 808349e:	4916      	ldr	r1, [pc, #88]	; (80834f8 <_ZN6UbiTCP9reconnectEPKci+0x88>)
 80834a0:	f003 f89e 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(host);
 80834a4:	f004 f9e0 	bl	8087868 <_Z16_fetch_usbserialv>
 80834a8:	4629      	mov	r1, r5
 80834aa:	f003 f899 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 80834ae:	f004 f9db 	bl	8087868 <_Z16_fetch_usbserialv>
 80834b2:	4912      	ldr	r1, [pc, #72]	; (80834fc <_ZN6UbiTCP9reconnectEPKci+0x8c>)
 80834b4:	f003 f894 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 80834b8:	f004 f9d6 	bl	8087868 <_Z16_fetch_usbserialv>
 80834bc:	4680      	mov	r8, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80834be:	220a      	movs	r2, #10
 80834c0:	4621      	mov	r1, r4
 80834c2:	f003 f8ae 	bl	8086622 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80834c6:	4640      	mov	r0, r8
 80834c8:	f003 f895 	bl	80865f6 <_ZN5Print7printlnEv>
    }
    _client_tcp_ubi.stop();
 80834cc:	4809      	ldr	r0, [pc, #36]	; (80834f4 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 80834ce:	f002 fe07 	bl	80860e0 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
 80834d2:	2300      	movs	r3, #0
 80834d4:	b2ba      	uxth	r2, r7
 80834d6:	4629      	mov	r1, r5
 80834d8:	4806      	ldr	r0, [pc, #24]	; (80834f4 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 80834da:	f002 ff4b 	bl	8086374 <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
 80834de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80834e2:	f003 fa19 	bl	8086918 <delay>
 80834e6:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
 80834e8:	e7cd      	b.n	8083486 <_ZN6UbiTCP9reconnectEPKci+0x16>
 80834ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80834ee:	bf00      	nop
 80834f0:	0808d25c 	.word	0x0808d25c
 80834f4:	20000814 	.word	0x20000814
 80834f8:	0808d274 	.word	0x0808d274
 80834fc:	0808d28a 	.word	0x0808d28a

08083500 <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
 8083500:	b570      	push	{r4, r5, r6, lr}
 8083502:	4605      	mov	r5, r0
  int timeout = 0;
 8083504:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
 8083506:	480d      	ldr	r0, [pc, #52]	; (808353c <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
 8083508:	f002 fdae 	bl	8086068 <_ZN9TCPClient9availableEv>
 808350c:	4606      	mov	r6, r0
 808350e:	b910      	cbnz	r0, 8083516 <_ZN6UbiTCP16waitServerAnswerEv+0x16>
 8083510:	69ab      	ldr	r3, [r5, #24]
 8083512:	429c      	cmp	r4, r3
 8083514:	db01      	blt.n	808351a <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
 8083516:	2001      	movs	r0, #1
 8083518:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
 808351a:	2001      	movs	r0, #1
 808351c:	f003 f9fc 	bl	8086918 <delay>
    if (timeout > _timeout - 1) {
 8083520:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
 8083522:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
 8083524:	429c      	cmp	r4, r3
 8083526:	dbee      	blt.n	8083506 <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
 8083528:	7d28      	ldrb	r0, [r5, #20]
 808352a:	b130      	cbz	r0, 808353a <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
 808352c:	f004 f99c 	bl	8087868 <_Z16_fetch_usbserialv>
 8083530:	4903      	ldr	r1, [pc, #12]	; (8083540 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
 8083532:	f003 f86c 	bl	808660e <_ZN5Print7printlnEPKc>
 8083536:	4630      	mov	r0, r6
 8083538:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
 808353a:	bd70      	pop	{r4, r5, r6, pc}
 808353c:	20000814 	.word	0x20000814
 8083540:	0808d29e 	.word	0x0808d29e

08083544 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8083544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
 8083548:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 808354a:	4606      	mov	r6, r0
 808354c:	4688      	mov	r8, r1
 808354e:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
 8083550:	b14b      	cbz	r3, 8083566 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
 8083552:	f004 f989 	bl	8087868 <_Z16_fetch_usbserialv>
 8083556:	4921      	ldr	r1, [pc, #132]	; (80835dc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x98>)
 8083558:	f003 f859 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 808355c:	f004 f984 	bl	8087868 <_Z16_fetch_usbserialv>
 8083560:	491f      	ldr	r1, [pc, #124]	; (80835e0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x9c>)
 8083562:	f003 f854 	bl	808660e <_ZN5Print7printlnEPKc>
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
 8083566:	f240 29bb 	movw	r9, #699	; 0x2bb
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 808356a:	2400      	movs	r4, #0
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
 808356c:	481d      	ldr	r0, [pc, #116]	; (80835e4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 808356e:	f002 fd7b 	bl	8086068 <_ZN9TCPClient9availableEv>
 8083572:	b178      	cbz	r0, 8083594 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
 8083574:	481b      	ldr	r0, [pc, #108]	; (80835e4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8083576:	f002 fd2c 	bl	8085fd2 <_ZN9TCPClient4readEv>
    if (_debug) {
 808357a:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
 808357c:	b2c7      	uxtb	r7, r0
    if (_debug) {
 808357e:	b12b      	cbz	r3, 808358c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
 8083580:	f004 f972 	bl	8087868 <_Z16_fetch_usbserialv>
 8083584:	6803      	ldr	r3, [r0, #0]
 8083586:	4639      	mov	r1, r7
 8083588:	689b      	ldr	r3, [r3, #8]
 808358a:	4798      	blx	r3
    }
    response[j] = c;
 808358c:	552f      	strb	r7, [r5, r4]
    j++;
 808358e:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
 8083590:	454c      	cmp	r4, r9
 8083592:	d1eb      	bne.n	808356c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
 8083594:	7d33      	ldrb	r3, [r6, #20]
 8083596:	b123      	cbz	r3, 80835a2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
 8083598:	f004 f966 	bl	8087868 <_Z16_fetch_usbserialv>
 808359c:	4912      	ldr	r1, [pc, #72]	; (80835e8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>)
 808359e:	f003 f836 	bl	808660e <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
 80835a2:	2300      	movs	r3, #0
 80835a4:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
 80835a6:	4b11      	ldr	r3, [pc, #68]	; (80835ec <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa8>)
 80835a8:	4598      	cmp	r8, r3
 80835aa:	d108      	bne.n	80835be <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7a>
    char* pch = strstr(response, "OK");
 80835ac:	4910      	ldr	r1, [pc, #64]	; (80835f0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
 80835ae:	4628      	mov	r0, r5
 80835b0:	f007 fa4a 	bl	808aa48 <strstr>
    if (pch != NULL) {
 80835b4:	b178      	cbz	r0, 80835d6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
      result = 1;
 80835b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80835ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
 80835be:	217c      	movs	r1, #124	; 0x7c
 80835c0:	4628      	mov	r0, r5
 80835c2:	f006 fcc1 	bl	8089f48 <strchr>
  if (pch != NULL) {
 80835c6:	b130      	cbz	r0, 80835d6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
    result = atof(pch + 1);
 80835c8:	3001      	adds	r0, #1
 80835ca:	f006 fb65 	bl	8089c98 <atof>
 80835ce:	f005 fdff 	bl	80891d0 <__aeabi_d2f>
 80835d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
 80835d6:	4807      	ldr	r0, [pc, #28]	; (80835f4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
 80835d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80835dc:	0808d2e5 	.word	0x0808d2e5
 80835e0:	0808d2d1 	.word	0x0808d2d1
 80835e4:	20000814 	.word	0x20000814
 80835e8:	0808d2e4 	.word	0x0808d2e4
 80835ec:	0808d2f0 	.word	0x0808d2f0
 80835f0:	0808d2f5 	.word	0x0808d2f5
 80835f4:	cda2425f 	.word	0xcda2425f

080835f8 <_ZN6UbiTCP3getEPKcS1_>:

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
 80835f8:	b570      	push	{r4, r5, r6, lr}
 80835fa:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 80835fc:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
 80835fe:	460e      	mov	r6, r1
 8083600:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083602:	6841      	ldr	r1, [r0, #4]
 8083604:	f242 3234 	movw	r2, #9012	; 0x2334
 8083608:	4845      	ldr	r0, [pc, #276]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 808360a:	f002 feb3 	bl	8086374 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 808360e:	4620      	mov	r0, r4
 8083610:	f242 3234 	movw	r2, #9012	; 0x2334
 8083614:	6861      	ldr	r1, [r4, #4]
 8083616:	f7ff ff2b 	bl	8083470 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
 808361a:	4841      	ldr	r0, [pc, #260]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 808361c:	f002 fe19 	bl	8086252 <_ZN9TCPClient9connectedEv>
 8083620:	2800      	cmp	r0, #0
 8083622:	d074      	beq.n	808370e <_ZN6UbiTCP3getEPKcS1_+0x116>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
 8083624:	68a1      	ldr	r1, [r4, #8]
 8083626:	483e      	ldr	r0, [pc, #248]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083628:	f002 ffda 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
 808362c:	493d      	ldr	r1, [pc, #244]	; (8083724 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 808362e:	483c      	ldr	r0, [pc, #240]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083630:	f002 ffd6 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
 8083634:	68e1      	ldr	r1, [r4, #12]
 8083636:	483a      	ldr	r0, [pc, #232]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083638:	f002 ffd2 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
 808363c:	493a      	ldr	r1, [pc, #232]	; (8083728 <_ZN6UbiTCP3getEPKcS1_+0x130>)
 808363e:	4838      	ldr	r0, [pc, #224]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083640:	f002 ffce 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
 8083644:	4631      	mov	r1, r6
 8083646:	4836      	ldr	r0, [pc, #216]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083648:	f002 ffca 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
 808364c:	4937      	ldr	r1, [pc, #220]	; (808372c <_ZN6UbiTCP3getEPKcS1_+0x134>)
 808364e:	4834      	ldr	r0, [pc, #208]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083650:	f002 ffc6 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
 8083654:	4629      	mov	r1, r5
 8083656:	4832      	ldr	r0, [pc, #200]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083658:	f002 ffc2 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
 808365c:	4934      	ldr	r1, [pc, #208]	; (8083730 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 808365e:	4830      	ldr	r0, [pc, #192]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083660:	f002 ffbe 	bl	80865e0 <_ZN5Print5printEPKc>

    if (_debug) {
 8083664:	7d23      	ldrb	r3, [r4, #20]
 8083666:	b3b3      	cbz	r3, 80836d6 <_ZN6UbiTCP3getEPKcS1_+0xde>
      Serial.println("----");
 8083668:	f004 f8fe 	bl	8087868 <_Z16_fetch_usbserialv>
 808366c:	4931      	ldr	r1, [pc, #196]	; (8083734 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
 808366e:	f002 ffce 	bl	808660e <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
 8083672:	f004 f8f9 	bl	8087868 <_Z16_fetch_usbserialv>
 8083676:	4930      	ldr	r1, [pc, #192]	; (8083738 <_ZN6UbiTCP3getEPKcS1_+0x140>)
 8083678:	f002 ffc9 	bl	808660e <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
 808367c:	f004 f8f4 	bl	8087868 <_Z16_fetch_usbserialv>
 8083680:	68a1      	ldr	r1, [r4, #8]
 8083682:	f002 ffad 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
 8083686:	f004 f8ef 	bl	8087868 <_Z16_fetch_usbserialv>
 808368a:	4926      	ldr	r1, [pc, #152]	; (8083724 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 808368c:	f002 ffa8 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8083690:	f004 f8ea 	bl	8087868 <_Z16_fetch_usbserialv>
 8083694:	68e1      	ldr	r1, [r4, #12]
 8083696:	f002 ffa3 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("|");
 808369a:	f004 f8e5 	bl	8087868 <_Z16_fetch_usbserialv>
 808369e:	4922      	ldr	r1, [pc, #136]	; (8083728 <_ZN6UbiTCP3getEPKcS1_+0x130>)
 80836a0:	f002 ff9e 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 80836a4:	f004 f8e0 	bl	8087868 <_Z16_fetch_usbserialv>
 80836a8:	4631      	mov	r1, r6
 80836aa:	f002 ff99 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(":");
 80836ae:	f004 f8db 	bl	8087868 <_Z16_fetch_usbserialv>
 80836b2:	491e      	ldr	r1, [pc, #120]	; (808372c <_ZN6UbiTCP3getEPKcS1_+0x134>)
 80836b4:	f002 ff94 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 80836b8:	f004 f8d6 	bl	8087868 <_Z16_fetch_usbserialv>
 80836bc:	4629      	mov	r1, r5
 80836be:	f002 ff8f 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("|end");
 80836c2:	f004 f8d1 	bl	8087868 <_Z16_fetch_usbserialv>
 80836c6:	491a      	ldr	r1, [pc, #104]	; (8083730 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 80836c8:	f002 ff8a 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.println("\n----");
 80836cc:	f004 f8cc 	bl	8087868 <_Z16_fetch_usbserialv>
 80836d0:	491a      	ldr	r1, [pc, #104]	; (808373c <_ZN6UbiTCP3getEPKcS1_+0x144>)
 80836d2:	f002 ff9c 	bl	808660e <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
 80836d6:	4620      	mov	r0, r4
 80836d8:	f7ff ff12 	bl	8083500 <_ZN6UbiTCP16waitServerAnswerEv>
 80836dc:	b920      	cbnz	r0, 80836e8 <_ZN6UbiTCP3getEPKcS1_+0xf0>
      _client_tcp_ubi.stop();
 80836de:	4810      	ldr	r0, [pc, #64]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80836e0:	f002 fcfe 	bl	80860e0 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 80836e4:	4816      	ldr	r0, [pc, #88]	; (8083740 <_ZN6UbiTCP3getEPKcS1_+0x148>)
 80836e6:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80836e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80836ec:	f002 f90c 	bl	8085908 <malloc>
    float value = parseTCPAnswer("LV", response);
 80836f0:	4914      	ldr	r1, [pc, #80]	; (8083744 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
 80836f2:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80836f4:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
 80836f6:	4620      	mov	r0, r4
 80836f8:	f7ff ff24 	bl	8083544 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 80836fc:	4604      	mov	r4, r0
    _client_tcp_ubi.stop();
 80836fe:	4808      	ldr	r0, [pc, #32]	; (8083720 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8083700:	f002 fcee 	bl	80860e0 <_ZN9TCPClient4stopEv>
    free(response);
 8083704:	4628      	mov	r0, r5
 8083706:	f002 f907 	bl	8085918 <free>
    return value;
 808370a:	4620      	mov	r0, r4
 808370c:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (_debug) {
 808370e:	7d23      	ldrb	r3, [r4, #20]
 8083710:	2b00      	cmp	r3, #0
 8083712:	d0e4      	beq.n	80836de <_ZN6UbiTCP3getEPKcS1_+0xe6>
    Serial.println("ERROR could not connect to the server");
 8083714:	f004 f8a8 	bl	8087868 <_Z16_fetch_usbserialv>
 8083718:	490b      	ldr	r1, [pc, #44]	; (8083748 <_ZN6UbiTCP3getEPKcS1_+0x150>)
 808371a:	f002 ff78 	bl	808660e <_ZN5Print7printlnEPKc>
 808371e:	e7de      	b.n	80836de <_ZN6UbiTCP3getEPKcS1_+0xe6>
 8083720:	20000814 	.word	0x20000814
 8083724:	0808d2f8 	.word	0x0808d2f8
 8083728:	0808d2fb 	.word	0x0808d2fb
 808372c:	0808d454 	.word	0x0808d454
 8083730:	0808d492 	.word	0x0808d492
 8083734:	0808d313 	.word	0x0808d313
 8083738:	0808d2fd 	.word	0x0808d2fd
 808373c:	0808d312 	.word	0x0808d312
 8083740:	cda2425f 	.word	0xcda2425f
 8083744:	0808d318 	.word	0x0808d318
 8083748:	0808d31b 	.word	0x0808d31b

0808374c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
 808374c:	b570      	push	{r4, r5, r6, lr}
 808374e:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083750:	6841      	ldr	r1, [r0, #4]
 8083752:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
 8083756:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8083758:	481e      	ldr	r0, [pc, #120]	; (80837d4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 808375a:	2300      	movs	r3, #0
 808375c:	f002 fe0a 	bl	8086374 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 8083760:	4620      	mov	r0, r4
 8083762:	f242 3234 	movw	r2, #9012	; 0x2334
 8083766:	6861      	ldr	r1, [r4, #4]
 8083768:	f7ff fe82 	bl	8083470 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
 808376c:	4819      	ldr	r0, [pc, #100]	; (80837d4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 808376e:	f002 fd70 	bl	8086252 <_ZN9TCPClient9connectedEv>
 8083772:	b320      	cbz	r0, 80837be <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x72>
    _client_tcp_ubi.print(payload);
 8083774:	4629      	mov	r1, r5
 8083776:	4817      	ldr	r0, [pc, #92]	; (80837d4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083778:	f002 ff32 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
 808377c:	4620      	mov	r0, r4
 808377e:	f7ff febf 	bl	8083500 <_ZN6UbiTCP16waitServerAnswerEv>
 8083782:	4605      	mov	r5, r0
 8083784:	b920      	cbnz	r0, 8083790 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x44>
    _client_tcp_ubi.stop();
 8083786:	4813      	ldr	r0, [pc, #76]	; (80837d4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8083788:	f002 fcaa 	bl	80860e0 <_ZN9TCPClient4stopEv>
    return false;
 808378c:	2500      	movs	r5, #0
 808378e:	e01f      	b.n	80837d0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
 8083790:	2064      	movs	r0, #100	; 0x64
 8083792:	f002 f8b9 	bl	8085908 <malloc>

  float value = parseTCPAnswer("POST", response);
 8083796:	4910      	ldr	r1, [pc, #64]	; (80837d8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>)
 8083798:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
 808379a:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
 808379c:	4620      	mov	r0, r4
 808379e:	f7ff fed1 	bl	8083544 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 80837a2:	4604      	mov	r4, r0
  free(response);
 80837a4:	4630      	mov	r0, r6
 80837a6:	f002 f8b7 	bl	8085918 <free>
  if (value != ERROR_VALUE) {
 80837aa:	490c      	ldr	r1, [pc, #48]	; (80837dc <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x90>)
 80837ac:	4620      	mov	r0, r4
 80837ae:	f006 f801 	bl	80897b4 <__aeabi_fcmpeq>
 80837b2:	2800      	cmp	r0, #0
 80837b4:	d1e7      	bne.n	8083786 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    _client_tcp_ubi.stop();
 80837b6:	4807      	ldr	r0, [pc, #28]	; (80837d4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 80837b8:	f002 fc92 	bl	80860e0 <_ZN9TCPClient4stopEv>
 80837bc:	e008      	b.n	80837d0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
 80837be:	7d23      	ldrb	r3, [r4, #20]
 80837c0:	2b00      	cmp	r3, #0
 80837c2:	d0e0      	beq.n	8083786 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
      Serial.println("Could not connect to the host");
 80837c4:	f004 f850 	bl	8087868 <_Z16_fetch_usbserialv>
 80837c8:	4905      	ldr	r1, [pc, #20]	; (80837e0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
 80837ca:	f002 ff20 	bl	808660e <_ZN5Print7printlnEPKc>
 80837ce:	e7da      	b.n	8083786 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
 80837d0:	4628      	mov	r0, r5
 80837d2:	bd70      	pop	{r4, r5, r6, pc}
 80837d4:	20000814 	.word	0x20000814
 80837d8:	0808d2f0 	.word	0x0808d2f0
 80837dc:	cda2425f 	.word	0xcda2425f
 80837e0:	0808d341 	.word	0x0808d341

080837e4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 80837e4:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
 80837e6:	4c06      	ldr	r4, [pc, #24]	; (8083800 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
 80837e8:	f001 fd4a 	bl	8085280 <HAL_Pin_Map>
 80837ec:	4620      	mov	r0, r4
 80837ee:	f002 fd9f 	bl	8086330 <_ZN9TCPClientC1Ev>
 80837f2:	4620      	mov	r0, r4
 80837f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80837f8:	4a02      	ldr	r2, [pc, #8]	; (8083804 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
 80837fa:	4903      	ldr	r1, [pc, #12]	; (8083808 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
 80837fc:	f004 be28 	b.w	8088450 <__aeabi_atexit>
 8083800:	20000814 	.word	0x20000814
 8083804:	20000140 	.word	0x20000140
 8083808:	08083409 	.word	0x08083409

0808380c <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
 808380c:	b510      	push	{r4, lr}
 808380e:	4604      	mov	r4, r0
  delete[] _default_device_label;
 8083810:	6800      	ldr	r0, [r0, #0]
 8083812:	b108      	cbz	r0, 8083818 <_ZN18UbiProtocolHandlerD1Ev+0xc>
 8083814:	f7fc fc49 	bl	80800aa <_ZdaPv>

  free(_dots);
 8083818:	68e0      	ldr	r0, [r4, #12]
 808381a:	f002 f87d 	bl	8085918 <free>
  delete _ubiProtocol;
 808381e:	6860      	ldr	r0, [r4, #4]
 8083820:	2104      	movs	r1, #4
 8083822:	f004 fe23 	bl	808846c <_ZdlPvj>
}
 8083826:	4620      	mov	r0, r4
 8083828:	bd10      	pop	{r4, pc}
	...

0808382c <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
 808382c:	b570      	push	{r4, r5, r6, lr}
 808382e:	4604      	mov	r4, r0
  _dirty = true;
 8083830:	2001      	movs	r0, #1
  (_dots + _current_value)->variable_label = variable_label;
 8083832:	f994 5010 	ldrsb.w	r5, [r4, #16]
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
  _dirty = true;
 8083836:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
 8083838:	2014      	movs	r0, #20
 808383a:	4345      	muls	r5, r0
 808383c:	68e6      	ldr	r6, [r4, #12]
 808383e:	5171      	str	r1, [r6, r5]
  (_dots + _current_value)->dot_value = value;
 8083840:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8083844:	68e5      	ldr	r5, [r4, #12]
 8083846:	fb00 5101 	mla	r1, r0, r1, r5
 808384a:	608a      	str	r2, [r1, #8]
  (_dots + _current_value)->dot_context = context;
 808384c:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8083850:	68e1      	ldr	r1, [r4, #12]
 8083852:	fb00 1202 	mla	r2, r0, r2, r1
 8083856:	6053      	str	r3, [r2, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
 8083858:	f994 3010 	ldrsb.w	r3, [r4, #16]
 808385c:	68e2      	ldr	r2, [r4, #12]
 808385e:	fb00 2303 	mla	r3, r0, r3, r2
 8083862:	9a04      	ldr	r2, [sp, #16]
 8083864:	60da      	str	r2, [r3, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
 8083866:	f994 3010 	ldrsb.w	r3, [r4, #16]
 808386a:	68e2      	ldr	r2, [r4, #12]
 808386c:	fb00 2003 	mla	r0, r0, r3, r2
 8083870:	9b05      	ldr	r3, [sp, #20]
 8083872:	6103      	str	r3, [r0, #16]
  _current_value++;
 8083874:	7c23      	ldrb	r3, [r4, #16]
 8083876:	3301      	adds	r3, #1
 8083878:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
 808387a:	2b0f      	cmp	r3, #15
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
 808387c:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
 808387e:	dd08      	ble.n	8083892 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x66>
    if (_debug) {
 8083880:	7ca3      	ldrb	r3, [r4, #18]
 8083882:	b123      	cbz	r3, 808388e <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x62>
      Serial.println(
 8083884:	f003 fff0 	bl	8087868 <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
 8083888:	4902      	ldr	r1, [pc, #8]	; (8083894 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x68>)
 808388a:	f002 fec0 	bl	808660e <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
 808388e:	230f      	movs	r3, #15
 8083890:	7423      	strb	r3, [r4, #16]
 8083892:	bd70      	pop	{r4, r5, r6, pc}
 8083894:	0808d374 	.word	0x0808d374

08083898 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 8083898:	b530      	push	{r4, r5, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 808389a:	4610      	mov	r0, r2
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 808389c:	b087      	sub	sp, #28
 808389e:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 80838a0:	f005 f960 	bl	8088b64 <__aeabi_f2d>
 80838a4:	ad01      	add	r5, sp, #4
 80838a6:	4602      	mov	r2, r0
 80838a8:	460b      	mov	r3, r1
 80838aa:	4628      	mov	r0, r5
 80838ac:	4909      	ldr	r1, [pc, #36]	; (80838d4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x3c>)
 80838ae:	f002 f843 	bl	8085938 <sprintf>
 80838b2:	2200      	movs	r2, #0
  uint8_t j = 0;
  uint8_t k = 0;
 80838b4:	4613      	mov	r3, r2
  while (j < 20) {
    if (temp_arr[j] != ' ') {
 80838b6:	5ca9      	ldrb	r1, [r5, r2]
 80838b8:	2920      	cmp	r1, #32
 80838ba:	d005      	beq.n	80838c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
      str_value[k] = temp_arr[j];
 80838bc:	54e1      	strb	r1, [r4, r3]
      k++;
 80838be:	3301      	adds	r3, #1
 80838c0:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
 80838c2:	b909      	cbnz	r1, 80838c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
      str_value[k] = temp_arr[j];
 80838c4:	54e1      	strb	r1, [r4, r3]
      break;
 80838c6:	e002      	b.n	80838ce <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
 80838c8:	3201      	adds	r2, #1
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
 80838ca:	2a14      	cmp	r2, #20
 80838cc:	d1f3      	bne.n	80838b6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x1e>
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
 80838ce:	b007      	add	sp, #28
 80838d0:	bd30      	pop	{r4, r5, pc}
 80838d2:	bf00      	nop
 80838d4:	0808d3f7 	.word	0x0808d3f7

080838d8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
 * @payload [Mandatory] char payload pointer to store the built structure.
 * @timestamp_global [Optional] If set, it will be used for any dot without
 * timestamp.
 */

void UbiProtocolHandler::buildHttpPayload(char* payload) {
 80838d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80838dc:	460c      	mov	r4, r1
 80838de:	b088      	sub	sp, #32
 80838e0:	4605      	mov	r5, r0
  /* Builds the payload */
  sprintf(payload, "{");
 80838e2:	4947      	ldr	r1, [pc, #284]	; (8083a00 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x128>)
 80838e4:	4620      	mov	r0, r4
 80838e6:	f006 fb47 	bl	8089f78 <strcpy>

  for (uint8_t i = 0; i < _current_value;) {
 80838ea:	2700      	movs	r7, #0
 80838ec:	f995 3010 	ldrsb.w	r3, [r5, #16]
 80838f0:	429f      	cmp	r7, r3
 80838f2:	da66      	bge.n	80839c2 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xea>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
 80838f4:	2614      	movs	r6, #20
 80838f6:	437e      	muls	r6, r7
 80838f8:	68eb      	ldr	r3, [r5, #12]
 80838fa:	f10d 080c 	add.w	r8, sp, #12
 80838fe:	4433      	add	r3, r6
 8083900:	689a      	ldr	r2, [r3, #8]
 8083902:	4641      	mov	r1, r8
 8083904:	4628      	mov	r0, r5
 8083906:	f7ff ffc7 	bl	8083898 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
 808390a:	68eb      	ldr	r3, [r5, #12]
            (_dots + i)->variable_label, str_value);
 808390c:	f8cd 8000 	str.w	r8, [sp]
 8083910:	599b      	ldr	r3, [r3, r6]
 8083912:	4622      	mov	r2, r4
 8083914:	493b      	ldr	r1, [pc, #236]	; (8083a04 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x12c>)
 8083916:	4620      	mov	r0, r4
 8083918:	f002 f80e 	bl	8085938 <sprintf>

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 808391c:	68eb      	ldr	r3, [r5, #12]
 808391e:	4433      	add	r3, r6
 8083920:	68db      	ldr	r3, [r3, #12]
 8083922:	b36b      	cbz	r3, 8083980 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa8>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
              (_dots + i)->dot_timestamp_seconds);
 8083924:	4622      	mov	r2, r4
 8083926:	4938      	ldr	r1, [pc, #224]	; (8083a08 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x130>)
 8083928:	4620      	mov	r0, r4
 808392a:	f002 f805 	bl	8085938 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 808392e:	68eb      	ldr	r3, [r5, #12]
 8083930:	4433      	add	r3, r6
 8083932:	691b      	ldr	r3, [r3, #16]
 8083934:	b1fb      	cbz	r3, 8083976 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x9e>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 8083936:	200a      	movs	r0, #10
 8083938:	fb93 f1f0 	sdiv	r1, r3, r0
 808393c:	2264      	movs	r2, #100	; 0x64
 808393e:	fb93 f2f2 	sdiv	r2, r3, r2
 8083942:	fb91 fcf0 	sdiv	ip, r1, r0
 8083946:	fb92 fef0 	sdiv	lr, r2, r0
 808394a:	fb00 1c1c 	mls	ip, r0, ip, r1
 808394e:	fb00 3111 	mls	r1, r0, r1, r3
 8083952:	fb00 221e 	mls	r2, r0, lr, r2
 8083956:	b2c9      	uxtb	r1, r1
 8083958:	9100      	str	r1, [sp, #0]
 808395a:	fa5f f38c 	uxtb.w	r3, ip
 808395e:	b2d2      	uxtb	r2, r2
 8083960:	492a      	ldr	r1, [pc, #168]	; (8083a0c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
 8083962:	a802      	add	r0, sp, #8
 8083964:	f001 ffe8 	bl	8085938 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 8083968:	ab02      	add	r3, sp, #8
 808396a:	4622      	mov	r2, r4
 808396c:	4928      	ldr	r1, [pc, #160]	; (8083a10 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
 808396e:	4620      	mov	r0, r4
 8083970:	f001 ffe2 	bl	8085938 <sprintf>
 8083974:	e004      	b.n	8083980 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa8>
      } else {
        sprintf(payload, "%s000", payload);
 8083976:	4622      	mov	r2, r4
 8083978:	4926      	ldr	r1, [pc, #152]	; (8083a14 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
 808397a:	4620      	mov	r0, r4
 808397c:	f001 ffdc 	bl	8085938 <sprintf>
      }
    }

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
 8083980:	68eb      	ldr	r3, [r5, #12]
 8083982:	441e      	add	r6, r3
 8083984:	6873      	ldr	r3, [r6, #4]
 8083986:	b123      	cbz	r3, 8083992 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xba>
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
 8083988:	4622      	mov	r2, r4
 808398a:	4923      	ldr	r1, [pc, #140]	; (8083a18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
 808398c:	4620      	mov	r0, r4
 808398e:	f001 ffd3 	bl	8085938 <sprintf>
    }

    sprintf(payload, "%s}", payload);
 8083992:	4622      	mov	r2, r4
 8083994:	4921      	ldr	r1, [pc, #132]	; (8083a1c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 8083996:	4620      	mov	r0, r4
 8083998:	f001 ffce 	bl	8085938 <sprintf>
    i++;
 808399c:	3701      	adds	r7, #1

    if (i < _current_value) {
 808399e:	f995 3010 	ldrsb.w	r3, [r5, #16]
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
    }

    sprintf(payload, "%s}", payload);
    i++;
 80839a2:	b2ff      	uxtb	r7, r7

    if (i < _current_value) {
 80839a4:	429f      	cmp	r7, r3
      sprintf(payload, "%s,", payload);
 80839a6:	4622      	mov	r2, r4
    }

    sprintf(payload, "%s}", payload);
    i++;

    if (i < _current_value) {
 80839a8:	da04      	bge.n	80839b4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xdc>
      sprintf(payload, "%s,", payload);
 80839aa:	491d      	ldr	r1, [pc, #116]	; (8083a20 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
 80839ac:	4620      	mov	r0, r4
 80839ae:	f001 ffc3 	bl	8085938 <sprintf>
 80839b2:	e79b      	b.n	80838ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
    } else {
      sprintf(payload, "%s}", payload);
 80839b4:	4919      	ldr	r1, [pc, #100]	; (8083a1c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 80839b6:	4620      	mov	r0, r4
 80839b8:	f001 ffbe 	bl	8085938 <sprintf>
      _current_value = 0;
 80839bc:	2300      	movs	r3, #0
 80839be:	742b      	strb	r3, [r5, #16]

void UbiProtocolHandler::buildHttpPayload(char* payload) {
  /* Builds the payload */
  sprintf(payload, "{");

  for (uint8_t i = 0; i < _current_value;) {
 80839c0:	e794      	b.n	80838ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
      sprintf(payload, "%s}", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
 80839c2:	7cab      	ldrb	r3, [r5, #18]
 80839c4:	b1c3      	cbz	r3, 80839f8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x120>
    Serial.println("----------");
 80839c6:	f003 ff4f 	bl	8087868 <_Z16_fetch_usbserialv>
 80839ca:	4916      	ldr	r1, [pc, #88]	; (8083a24 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 80839cc:	f002 fe1f 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 80839d0:	f003 ff4a 	bl	8087868 <_Z16_fetch_usbserialv>
 80839d4:	4914      	ldr	r1, [pc, #80]	; (8083a28 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
 80839d6:	f002 fe1a 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 80839da:	f003 ff45 	bl	8087868 <_Z16_fetch_usbserialv>
 80839de:	4621      	mov	r1, r4
 80839e0:	f002 fe15 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 80839e4:	f003 ff40 	bl	8087868 <_Z16_fetch_usbserialv>
 80839e8:	490e      	ldr	r1, [pc, #56]	; (8083a24 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 80839ea:	f002 fe10 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("");
 80839ee:	f003 ff3b 	bl	8087868 <_Z16_fetch_usbserialv>
 80839f2:	490e      	ldr	r1, [pc, #56]	; (8083a2c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
 80839f4:	f002 fe0b 	bl	808660e <_ZN5Print7printlnEPKc>
  }
}
 80839f8:	b008      	add	sp, #32
 80839fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80839fe:	bf00      	nop
 8083a00:	0808d3fc 	.word	0x0808d3fc
 8083a04:	0808d3fe 	.word	0x0808d3fe
 8083a08:	0808d411 	.word	0x0808d411
 8083a0c:	0808d424 	.word	0x0808d424
 8083a10:	0808d42b 	.word	0x0808d42b
 8083a14:	0808d430 	.word	0x0808d430
 8083a18:	0808d436 	.word	0x0808d436
 8083a1c:	0808d445 	.word	0x0808d445
 8083a20:	0808d449 	.word	0x0808d449
 8083a24:	0808d2e5 	.word	0x0808d2e5
 8083a28:	0808d44d 	.word	0x0808d44d
 8083a2c:	0808d853 	.word	0x0808d853

08083a30 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
 8083a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083a34:	460c      	mov	r4, r1
 8083a36:	4605      	mov	r5, r0
 8083a38:	461f      	mov	r7, r3
 8083a3a:	4616      	mov	r6, r2
 8083a3c:	b088      	sub	sp, #32
  sprintf(payload, "");
 8083a3e:	494d      	ldr	r1, [pc, #308]	; (8083b74 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>)
 8083a40:	4620      	mov	r0, r4
 8083a42:	f006 fa99 	bl	8089f78 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
 8083a46:	68ab      	ldr	r3, [r5, #8]
 8083a48:	4a4b      	ldr	r2, [pc, #300]	; (8083b78 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x148>)
 8083a4a:	494c      	ldr	r1, [pc, #304]	; (8083b7c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
 8083a4c:	4620      	mov	r0, r4
 8083a4e:	f001 ff73 	bl	8085938 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
 8083a52:	9700      	str	r7, [sp, #0]
 8083a54:	4633      	mov	r3, r6
 8083a56:	4622      	mov	r2, r4
 8083a58:	4949      	ldr	r1, [pc, #292]	; (8083b80 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
 8083a5a:	4620      	mov	r0, r4
 8083a5c:	f001 ff6c 	bl	8085938 <sprintf>

  sprintf(payload, "%s=>", payload);
 8083a60:	4622      	mov	r2, r4
 8083a62:	4948      	ldr	r1, [pc, #288]	; (8083b84 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
 8083a64:	4620      	mov	r0, r4
 8083a66:	f001 ff67 	bl	8085938 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
 8083a6a:	2700      	movs	r7, #0
 8083a6c:	f995 3010 	ldrsb.w	r3, [r5, #16]
 8083a70:	429f      	cmp	r7, r3
 8083a72:	da60      	bge.n	8083b36 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x106>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
 8083a74:	2614      	movs	r6, #20
 8083a76:	437e      	muls	r6, r7
 8083a78:	68eb      	ldr	r3, [r5, #12]
 8083a7a:	f10d 080c 	add.w	r8, sp, #12
 8083a7e:	4433      	add	r3, r6
 8083a80:	689a      	ldr	r2, [r3, #8]
 8083a82:	4641      	mov	r1, r8
 8083a84:	4628      	mov	r0, r5
 8083a86:	f7ff ff07 	bl	8083898 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
 8083a8a:	68eb      	ldr	r3, [r5, #12]
            str_value);
 8083a8c:	f8cd 8000 	str.w	r8, [sp]
 8083a90:	599b      	ldr	r3, [r3, r6]
 8083a92:	4622      	mov	r2, r4
 8083a94:	493a      	ldr	r1, [pc, #232]	; (8083b80 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
 8083a96:	4620      	mov	r0, r4
 8083a98:	f001 ff4e 	bl	8085938 <sprintf>

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
 8083a9c:	68eb      	ldr	r3, [r5, #12]
 8083a9e:	4433      	add	r3, r6
 8083aa0:	685b      	ldr	r3, [r3, #4]
 8083aa2:	b123      	cbz	r3, 8083aae <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x7e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
 8083aa4:	4622      	mov	r2, r4
 8083aa6:	4938      	ldr	r1, [pc, #224]	; (8083b88 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
 8083aa8:	4620      	mov	r0, r4
 8083aaa:	f001 ff45 	bl	8085938 <sprintf>
    }

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 8083aae:	68eb      	ldr	r3, [r5, #12]
 8083ab0:	4433      	add	r3, r6
 8083ab2:	68db      	ldr	r3, [r3, #12]
 8083ab4:	b363      	cbz	r3, 8083b10 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe0>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
 8083ab6:	4622      	mov	r2, r4
 8083ab8:	4934      	ldr	r1, [pc, #208]	; (8083b8c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
 8083aba:	4620      	mov	r0, r4
 8083abc:	f001 ff3c 	bl	8085938 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 8083ac0:	68eb      	ldr	r3, [r5, #12]
 8083ac2:	441e      	add	r6, r3
 8083ac4:	6936      	ldr	r6, [r6, #16]
 8083ac6:	b1f6      	cbz	r6, 8083b06 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xd6>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 8083ac8:	200a      	movs	r0, #10
 8083aca:	fb96 f1f0 	sdiv	r1, r6, r0
 8083ace:	2264      	movs	r2, #100	; 0x64
 8083ad0:	fb96 f2f2 	sdiv	r2, r6, r2
 8083ad4:	fb91 f3f0 	sdiv	r3, r1, r0
 8083ad8:	fb92 fef0 	sdiv	lr, r2, r0
 8083adc:	fb00 1313 	mls	r3, r0, r3, r1
 8083ae0:	fb00 6111 	mls	r1, r0, r1, r6
 8083ae4:	fb00 221e 	mls	r2, r0, lr, r2
 8083ae8:	b2c9      	uxtb	r1, r1
 8083aea:	9100      	str	r1, [sp, #0]
 8083aec:	b2db      	uxtb	r3, r3
 8083aee:	b2d2      	uxtb	r2, r2
 8083af0:	4927      	ldr	r1, [pc, #156]	; (8083b90 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
 8083af2:	a802      	add	r0, sp, #8
 8083af4:	f001 ff20 	bl	8085938 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 8083af8:	ab02      	add	r3, sp, #8
 8083afa:	4622      	mov	r2, r4
 8083afc:	4925      	ldr	r1, [pc, #148]	; (8083b94 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
 8083afe:	4620      	mov	r0, r4
 8083b00:	f001 ff1a 	bl	8085938 <sprintf>
 8083b04:	e004      	b.n	8083b10 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe0>
      } else {
        sprintf(payload, "%s000", payload);
 8083b06:	4622      	mov	r2, r4
 8083b08:	4923      	ldr	r1, [pc, #140]	; (8083b98 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
 8083b0a:	4620      	mov	r0, r4
 8083b0c:	f001 ff14 	bl	8085938 <sprintf>
      }
    }

    i++;
 8083b10:	3701      	adds	r7, #1

    if (i < _current_value) {
 8083b12:	f995 3010 	ldrsb.w	r3, [r5, #16]
      } else {
        sprintf(payload, "%s000", payload);
      }
    }

    i++;
 8083b16:	b2ff      	uxtb	r7, r7

    if (i < _current_value) {
 8083b18:	429f      	cmp	r7, r3
      sprintf(payload, "%s,", payload);
 8083b1a:	4622      	mov	r2, r4
      }
    }

    i++;

    if (i < _current_value) {
 8083b1c:	da04      	bge.n	8083b28 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xf8>
      sprintf(payload, "%s,", payload);
 8083b1e:	491f      	ldr	r1, [pc, #124]	; (8083b9c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
 8083b20:	4620      	mov	r0, r4
 8083b22:	f001 ff09 	bl	8085938 <sprintf>
 8083b26:	e7a1      	b.n	8083a6c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
    } else {
      sprintf(payload, "%s|end", payload);
 8083b28:	491d      	ldr	r1, [pc, #116]	; (8083ba0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
 8083b2a:	4620      	mov	r0, r4
 8083b2c:	f001 ff04 	bl	8085938 <sprintf>
      _current_value = 0;
 8083b30:	2300      	movs	r3, #0
 8083b32:	742b      	strb	r3, [r5, #16]
  sprintf(payload, "");
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);

  sprintf(payload, "%s=>", payload);
  for (uint8_t i = 0; i < _current_value;) {
 8083b34:	e79a      	b.n	8083a6c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
      sprintf(payload, "%s|end", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
 8083b36:	7cab      	ldrb	r3, [r5, #18]
 8083b38:	b1c3      	cbz	r3, 8083b6c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x13c>
    Serial.println("----------");
 8083b3a:	f003 fe95 	bl	8087868 <_Z16_fetch_usbserialv>
 8083b3e:	4919      	ldr	r1, [pc, #100]	; (8083ba4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 8083b40:	f002 fd65 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 8083b44:	f003 fe90 	bl	8087868 <_Z16_fetch_usbserialv>
 8083b48:	4917      	ldr	r1, [pc, #92]	; (8083ba8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
 8083b4a:	f002 fd60 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 8083b4e:	f003 fe8b 	bl	8087868 <_Z16_fetch_usbserialv>
 8083b52:	4621      	mov	r1, r4
 8083b54:	f002 fd5b 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 8083b58:	f003 fe86 	bl	8087868 <_Z16_fetch_usbserialv>
 8083b5c:	4911      	ldr	r1, [pc, #68]	; (8083ba4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 8083b5e:	f002 fd56 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("");
 8083b62:	f003 fe81 	bl	8087868 <_Z16_fetch_usbserialv>
 8083b66:	4903      	ldr	r1, [pc, #12]	; (8083b74 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>)
 8083b68:	f002 fd51 	bl	808660e <_ZN5Print7printlnEPKc>
  }
}
 8083b6c:	b008      	add	sp, #32
 8083b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083b72:	bf00      	nop
 8083b74:	0808d853 	.word	0x0808d853
 8083b78:	0808d456 	.word	0x0808d456
 8083b7c:	0808d46a 	.word	0x0808d46a
 8083b80:	0808d476 	.word	0x0808d476
 8083b84:	0808d47e 	.word	0x0808d47e
 8083b88:	0808d483 	.word	0x0808d483
 8083b8c:	0808d489 	.word	0x0808d489
 8083b90:	0808d424 	.word	0x0808d424
 8083b94:	0808d42b 	.word	0x0808d42b
 8083b98:	0808d430 	.word	0x0808d430
 8083b9c:	0808d449 	.word	0x0808d449
 8083ba0:	0808d490 	.word	0x0808d490
 8083ba4:	0808d2e5 	.word	0x0808d2e5
 8083ba8:	0808d44d 	.word	0x0808d44d

08083bac <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
 8083bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8083bb0:	4604      	mov	r4, r0
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8083bb2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
 8083bb6:	461f      	mov	r7, r3
 8083bb8:	460e      	mov	r6, r1
 8083bba:	4690      	mov	r8, r2
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8083bbc:	f001 fea4 	bl	8085908 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 8083bc0:	7ce3      	ldrb	r3, [r4, #19]
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8083bc2:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 8083bc4:	3b01      	subs	r3, #1
 8083bc6:	2b01      	cmp	r3, #1
 8083bc8:	d806      	bhi.n	8083bd8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2c>
    buildTcpPayload(payload, device_label, device_name);
 8083bca:	4601      	mov	r1, r0
 8083bcc:	4643      	mov	r3, r8
 8083bce:	4632      	mov	r2, r6
 8083bd0:	4620      	mov	r0, r4
 8083bd2:	f7ff ff2d 	bl	8083a30 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
 8083bd6:	e003      	b.n	8083be0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x34>
  } else {
    buildHttpPayload(payload);
 8083bd8:	4601      	mov	r1, r0
 8083bda:	4620      	mov	r0, r4
 8083bdc:	f7ff fe7c 	bl	80838d8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
  }

  // Sends data
  if (_debug) {
 8083be0:	7ca3      	ldrb	r3, [r4, #18]
 8083be2:	b123      	cbz	r3, 8083bee <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x42>
    Serial.println("Sending data...");
 8083be4:	f003 fe40 	bl	8087868 <_Z16_fetch_usbserialv>
 8083be8:	490d      	ldr	r1, [pc, #52]	; (8083c20 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x74>)
 8083bea:	f002 fd10 	bl	808660e <_ZN5Print7printlnEPKc>
  }

  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
 8083bee:	6860      	ldr	r0, [r4, #4]
 8083bf0:	4631      	mov	r1, r6
 8083bf2:	6803      	ldr	r3, [r0, #0]
 8083bf4:	9700      	str	r7, [sp, #0]
 8083bf6:	4642      	mov	r2, r8
 8083bf8:	f8d3 9000 	ldr.w	r9, [r3]
 8083bfc:	462b      	mov	r3, r5
 8083bfe:	47c8      	blx	r9
 8083c00:	4606      	mov	r6, r0
  free(payload);
 8083c02:	4628      	mov	r0, r5
 8083c04:	f001 fe88 	bl	8085918 <free>
  delete flags;
 8083c08:	2101      	movs	r1, #1
 8083c0a:	4638      	mov	r0, r7
 8083c0c:	f004 fc2e 	bl	808846c <_ZdlPvj>
 8083c10:	2300      	movs	r3, #0
  if (result) {
 8083c12:	b106      	cbz	r6, 8083c16 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6a>
    _dirty = false;
 8083c14:	7463      	strb	r3, [r4, #17]
    _current_value = 0;
  }

  _current_value = 0;
  return result;
}
 8083c16:	4630      	mov	r0, r6
  if (result) {
    _dirty = false;
    _current_value = 0;
  }

  _current_value = 0;
 8083c18:	7423      	strb	r3, [r4, #16]
  return result;
}
 8083c1a:	b003      	add	sp, #12
 8083c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083c20:	0808d497 	.word	0x0808d497

08083c24 <_ZN18UbiProtocolHandler4sendEPKcS1_>:
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
 8083c24:	b570      	push	{r4, r5, r6, lr}
 8083c26:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
 8083c28:	2001      	movs	r0, #1
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
 8083c2a:	460d      	mov	r5, r1
 8083c2c:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
 8083c2e:	f7fc fa36 	bl	808009e <_Znwj>
 8083c32:	4603      	mov	r3, r0
 8083c34:	b110      	cbz	r0, 8083c3c <_ZN18UbiProtocolHandler4sendEPKcS1_+0x18>
 8083c36:	4a05      	ldr	r2, [pc, #20]	; (8083c4c <_ZN18UbiProtocolHandler4sendEPKcS1_+0x28>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8083c38:	7812      	ldrb	r2, [r2, #0]
 8083c3a:	7002      	strb	r2, [r0, #0]
  return send(device_label, device_name, flags);
 8083c3c:	4632      	mov	r2, r6
 8083c3e:	4629      	mov	r1, r5
 8083c40:	4620      	mov	r0, r4
}
 8083c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
 8083c46:	f7ff bfb1 	b.w	8083bac <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>
 8083c4a:	bf00      	nop
 8083c4c:	20000830 	.word	0x20000830

08083c50 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8083c50:	b570      	push	{r4, r5, r6, lr}
 8083c52:	4606      	mov	r6, r0
 8083c54:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8083c56:	b184      	cbz	r4, 8083c7a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
 8083c58:	68e1      	ldr	r1, [r4, #12]
 8083c5a:	4630      	mov	r0, r6
 8083c5c:	f7ff fff8 	bl	8083c50 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8083c60:	69e3      	ldr	r3, [r4, #28]
 8083c62:	68a5      	ldr	r5, [r4, #8]
 8083c64:	b123      	cbz	r3, 8083c70 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8083c66:	f104 0114 	add.w	r1, r4, #20
 8083c6a:	2203      	movs	r2, #3
 8083c6c:	4608      	mov	r0, r1
 8083c6e:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8083c70:	4620      	mov	r0, r4
 8083c72:	f7fc fa18 	bl	80800a6 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 8083c76:	462c      	mov	r4, r5
 8083c78:	e7ed      	b.n	8083c56 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
 8083c7a:	bd70      	pop	{r4, r5, r6, pc}

08083c7c <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
 8083c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083c7e:	b08d      	sub	sp, #52	; 0x34
 8083c80:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 8083c82:	a801      	add	r0, sp, #4
 8083c84:	460d      	mov	r5, r1
 8083c86:	4617      	mov	r7, r2
 8083c88:	461e      	mov	r6, r3
 8083c8a:	f001 fe1d 	bl	80858c8 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
 8083c8e:	9803      	ldr	r0, [sp, #12]
 8083c90:	3001      	adds	r0, #1
 8083c92:	f7fc fa06 	bl	80800a2 <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
 8083c96:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
 8083c98:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
 8083c9a:	f006 f96d 	bl	8089f78 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
 8083c9e:	462a      	mov	r2, r5
 8083ca0:	4633      	mov	r3, r6
 8083ca2:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
 8083ca4:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
 8083ca6:	a805      	add	r0, sp, #20
 8083ca8:	f000 fd6a 	bl	8084780 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
 8083cac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8083cb0:	f001 fe2a 	bl	8085908 <malloc>
 8083cb4:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
 8083cb6:	a805      	add	r0, sp, #20
 8083cb8:	f000 fc72 	bl	80845a0 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
 8083cbc:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
 8083cbe:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
 8083cc0:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
 8083cc2:	9908      	ldr	r1, [sp, #32]
 8083cc4:	a806      	add	r0, sp, #24
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
 8083cc6:	60a5      	str	r5, [r4, #8]
 8083cc8:	f7ff ffc2 	bl	8083c50 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
 8083ccc:	a801      	add	r0, sp, #4
 8083cce:	f002 fb83 	bl	80863d8 <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
 8083cd2:	b00d      	add	sp, #52	; 0x34
 8083cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083cd6 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
 8083cd6:	b538      	push	{r3, r4, r5, lr}
 8083cd8:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
 8083cda:	2500      	movs	r5, #0
 8083cdc:	7405      	strb	r5, [r0, #16]
 8083cde:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
 8083ce0:	f7ff ffcc 	bl	8083c7c <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
 8083ce4:	4620      	mov	r0, r4
 8083ce6:	bd38      	pop	{r3, r4, r5, pc}

08083ce8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8083ce8:	4b02      	ldr	r3, [pc, #8]	; (8083cf4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
 8083cea:	2200      	movs	r2, #0
 8083cec:	701a      	strb	r2, [r3, #0]
 8083cee:	f001 bac7 	b.w	8085280 <HAL_Pin_Map>
 8083cf2:	bf00      	nop
 8083cf4:	20000830 	.word	0x20000830

08083cf8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 8083cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083cfc:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8083cfe:	2078      	movs	r0, #120	; 0x78
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
 8083d00:	7223      	strb	r3, [r4, #8]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 8083d02:	461f      	mov	r7, r3
 8083d04:	460d      	mov	r5, r1
 8083d06:	4616      	mov	r6, r2
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8083d08:	f001 fdfe 	bl	8085908 <malloc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8083d0c:	7a23      	ldrb	r3, [r4, #8]
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8083d0e:	6060      	str	r0, [r4, #4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8083d10:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 8083d12:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8083d16:	d00c      	beq.n	8083d32 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x3a>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 8083d18:	f7fc f9c1 	bl	808009e <_Znwj>
 8083d1c:	4680      	mov	r8, r0
 8083d1e:	b120      	cbz	r0, 8083d2a <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x32>
 8083d20:	463b      	mov	r3, r7
 8083d22:	4632      	mov	r2, r6
 8083d24:	4629      	mov	r1, r5
 8083d26:	f7ff ffd6 	bl	8083cd6 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 8083d2a:	f8c4 8000 	str.w	r8, [r4]
 8083d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
 8083d32:	f7fc f9b4 	bl	808009e <_Znwj>
 8083d36:	4607      	mov	r7, r0
 8083d38:	b120      	cbz	r0, 8083d44 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x4c>
 8083d3a:	2301      	movs	r3, #1
 8083d3c:	4632      	mov	r2, r6
 8083d3e:	4629      	mov	r1, r5
 8083d40:	f7ff ffc9 	bl	8083cd6 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 8083d44:	6027      	str	r7, [r4, #0]
 8083d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08083d4c <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
 8083d4c:	b510      	push	{r4, lr}
 8083d4e:	4604      	mov	r4, r0
 8083d50:	2300      	movs	r3, #0
 8083d52:	7243      	strb	r3, [r0, #9]
 8083d54:	7283      	strb	r3, [r0, #10]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
 8083d56:	4613      	mov	r3, r2
 8083d58:	4a02      	ldr	r2, [pc, #8]	; (8083d64 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
 8083d5a:	f7ff ffcd 	bl	8083cf8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
 8083d5e:	4620      	mov	r0, r4
 8083d60:	bd10      	pop	{r4, pc}
 8083d62:	bf00      	nop
 8083d64:	0808d4a7 	.word	0x0808d4a7

08083d68 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
 8083d68:	b538      	push	{r3, r4, r5, lr}
 8083d6a:	4604      	mov	r4, r0
  free(_context);
 8083d6c:	6840      	ldr	r0, [r0, #4]
 8083d6e:	f001 fdd3 	bl	8085918 <free>
  delete _protocolMesh;
#elif PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
 8083d72:	6825      	ldr	r5, [r4, #0]
 8083d74:	b135      	cbz	r5, 8083d84 <_ZN7UbidotsD1Ev+0x1c>
 8083d76:	4628      	mov	r0, r5
 8083d78:	f7ff fd48 	bl	808380c <_ZN18UbiProtocolHandlerD1Ev>
 8083d7c:	2114      	movs	r1, #20
 8083d7e:	4628      	mov	r0, r5
 8083d80:	f004 fb74 	bl	808846c <_ZdlPvj>
#endif
}
 8083d84:	4620      	mov	r0, r4
 8083d86:	bd38      	pop	{r3, r4, r5, pc}

08083d88 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
 8083d88:	b570      	push	{r4, r5, r6, lr}
  }

#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8083d8a:	7a06      	ldrb	r6, [r0, #8]
 8083d8c:	2e04      	cmp	r6, #4
 8083d8e:	d004      	beq.n	8083d9a <_ZN7Ubidots3addEPcfS0_mj+0x12>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 8083d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
 8083d94:	6800      	ldr	r0, [r0, #0]
 8083d96:	f7ff bd49 	b.w	808382c <_ZN18UbiProtocolHandler3addEPcfS0_mj>
  } else {
    Serial.println(
 8083d9a:	f003 fd65 	bl	8087868 <_Z16_fetch_usbserialv>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 8083d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
  } else {
    Serial.println(
        "[WARNING] please choose a different cloud protocol of Mesh in the "
        "Ubidots constructor");
 8083da2:	4901      	ldr	r1, [pc, #4]	; (8083da8 <_ZN7Ubidots3addEPcfS0_mj+0x20>)
 8083da4:	f002 bc33 	b.w	808660e <_ZN5Print7printlnEPKc>
 8083da8:	0808d4c2 	.word	0x0808d4c2

08083dac <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
 8083dac:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
 8083dae:	2300      	movs	r3, #0
 8083db0:	9301      	str	r3, [sp, #4]
 8083db2:	9300      	str	r3, [sp, #0]
 8083db4:	f7ff ffe8 	bl	8083d88 <_ZN7Ubidots3addEPcfS0_mj>
}
 8083db8:	b003      	add	sp, #12
 8083dba:	f85d fb04 	ldr.w	pc, [sp], #4

08083dbe <_ZN7Ubidots4sendEPKcS1_>:
bool Ubidots::send(const char* device_label, const char* device_name) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, device_name);
 8083dbe:	6800      	ldr	r0, [r0, #0]
 8083dc0:	f7ff bf30 	b.w	8083c24 <_ZN18UbiProtocolHandler4sendEPKcS1_>

08083dc4 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
 8083dc4:	f001 ba5c 	b.w	8085280 <HAL_Pin_Map>

08083dc8 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

 8083dc8:	7501      	strb	r1, [r0, #20]
 8083dca:	4770      	bx	lr

08083dcc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
 8083dcc:	b570      	push	{r4, r5, r6, lr}
 8083dce:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
 8083dd0:	2014      	movs	r0, #20
 8083dd2:	f001 fd99 	bl	8085908 <malloc>
 8083dd6:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
 8083dd8:	2014      	movs	r0, #20
 8083dda:	f001 fd95 	bl	8085908 <malloc>
 8083dde:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
 8083de0:	4620      	mov	r0, r4
 8083de2:	f006 fe01 	bl	808a9e8 <strlen>
 8083de6:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
 8083de8:	2300      	movs	r3, #0
 8083dea:	3802      	subs	r0, #2
 8083dec:	4298      	cmp	r0, r3
 8083dee:	dd17      	ble.n	8083e20 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
 8083df0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8083df4:	290d      	cmp	r1, #13
 8083df6:	d111      	bne.n	8083e1c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083df8:	7811      	ldrb	r1, [r2, #0]
 8083dfa:	290a      	cmp	r1, #10
 8083dfc:	d10e      	bne.n	8083e1c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083dfe:	7851      	ldrb	r1, [r2, #1]
 8083e00:	290d      	cmp	r1, #13
 8083e02:	d10b      	bne.n	8083e1c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083e04:	7891      	ldrb	r1, [r2, #2]
 8083e06:	290a      	cmp	r1, #10
 8083e08:	d108      	bne.n	8083e1c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
 8083e0a:	1d19      	adds	r1, r3, #4
 8083e0c:	2214      	movs	r2, #20
 8083e0e:	4421      	add	r1, r4
 8083e10:	4630      	mov	r0, r6
 8083e12:	f006 fe06 	bl	808aa22 <strncpy>
        parsed[20] = '\0';
 8083e16:	2300      	movs	r3, #0
 8083e18:	7533      	strb	r3, [r6, #20]
 8083e1a:	e001      	b.n	8083e20 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
 8083e1c:	3301      	adds	r3, #1
 8083e1e:	e7e5      	b.n	8083dec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
 8083e20:	210a      	movs	r1, #10
 8083e22:	4630      	mov	r0, r6
 8083e24:	f006 f890 	bl	8089f48 <strchr>
    if (pch == NULL) {
 8083e28:	4604      	mov	r4, r0
 8083e2a:	b1e8      	cbz	r0, 8083e68 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
 8083e2c:	210a      	movs	r1, #10
 8083e2e:	3001      	adds	r0, #1
 8083e30:	f006 f88a 	bl	8089f48 <strchr>

    if (pch2 == NULL) {
 8083e34:	b1c0      	cbz	r0, 8083e68 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
 8083e36:	4621      	mov	r1, r4
 8083e38:	4628      	mov	r0, r5
 8083e3a:	f006 f89d 	bl	8089f78 <strcpy>
    dst[strlen(dst) - 1] = '\0';
 8083e3e:	4628      	mov	r0, r5
 8083e40:	f006 fdd2 	bl	808a9e8 <strlen>
 8083e44:	2300      	movs	r3, #0
 8083e46:	4428      	add	r0, r5
 8083e48:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
 8083e4c:	4628      	mov	r0, r5
 8083e4e:	f005 ff23 	bl	8089c98 <atof>
 8083e52:	f005 f9bd 	bl	80891d0 <__aeabi_d2f>
 8083e56:	4604      	mov	r4, r0

    free(dst);
 8083e58:	4628      	mov	r0, r5
 8083e5a:	f001 fd5d 	bl	8085918 <free>
    free(parsed);
 8083e5e:	4630      	mov	r0, r6
 8083e60:	f001 fd5a 	bl	8085918 <free>
    return result;
 8083e64:	4620      	mov	r0, r4
 8083e66:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
 8083e68:	4800      	ldr	r0, [pc, #0]	; (8083e6c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa0>)
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
 8083e6a:	bd70      	pop	{r4, r5, r6, pc}
 8083e6c:	cda2425f 	.word	0xcda2425f

08083e70 <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
 8083e70:	b530      	push	{r4, r5, lr}
                 const char* token) {
 8083e72:	4d07      	ldr	r5, [pc, #28]	; (8083e90 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
  _host = host;
  _user_agent = user_agent;
 8083e74:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
 8083e76:	6005      	str	r5, [r0, #0]
 8083e78:	2500      	movs	r5, #0
 8083e7a:	7505      	strb	r5, [r0, #20]
 8083e7c:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 8083e80:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
 8083e82:	6185      	str	r5, [r0, #24]
 8083e84:	2505      	movs	r5, #5
 8083e86:	7705      	strb	r5, [r0, #28]
  _host = host;
 8083e88:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8083e8a:	60c3      	str	r3, [r0, #12]
  _port = port;
 8083e8c:	6102      	str	r2, [r0, #16]
}
 8083e8e:	bd30      	pop	{r4, r5, pc}
 8083e90:	0808d6ec 	.word	0x0808d6ec

08083e94 <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
 8083e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8083e98:	4605      	mov	r5, r0
 8083e9a:	460f      	mov	r7, r1
 8083e9c:	4690      	mov	r8, r2
 8083e9e:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 8083ea0:	481d      	ldr	r0, [pc, #116]	; (8083f18 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 8083ea2:	b2e6      	uxtb	r6, r4
 8083ea4:	f002 f9d5 	bl	8086252 <_ZN9TCPClient9connectedEv>
 8083ea8:	bb98      	cbnz	r0, 8083f12 <_ZN7UbiHTTP9reconnectEPKci+0x7e>
 8083eaa:	7f2b      	ldrb	r3, [r5, #28]
 8083eac:	42b3      	cmp	r3, r6
 8083eae:	d801      	bhi.n	8083eb4 <_ZN7UbiHTTP9reconnectEPKci+0x20>
 8083eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (_debug) {
 8083eb4:	7d2b      	ldrb	r3, [r5, #20]
 8083eb6:	b1c3      	cbz	r3, 8083eea <_ZN7UbiHTTP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
 8083eb8:	f003 fcd6 	bl	8087868 <_Z16_fetch_usbserialv>
 8083ebc:	4917      	ldr	r1, [pc, #92]	; (8083f1c <_ZN7UbiHTTP9reconnectEPKci+0x88>)
 8083ebe:	f002 fb8f 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(host);
 8083ec2:	f003 fcd1 	bl	8087868 <_Z16_fetch_usbserialv>
 8083ec6:	4639      	mov	r1, r7
 8083ec8:	f002 fb8a 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 8083ecc:	f003 fccc 	bl	8087868 <_Z16_fetch_usbserialv>
 8083ed0:	4913      	ldr	r1, [pc, #76]	; (8083f20 <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
 8083ed2:	f002 fb85 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 8083ed6:	f003 fcc7 	bl	8087868 <_Z16_fetch_usbserialv>
 8083eda:	4681      	mov	r9, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8083edc:	220a      	movs	r2, #10
 8083ede:	4631      	mov	r1, r6
 8083ee0:	f002 fb9f 	bl	8086622 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8083ee4:	4648      	mov	r0, r9
 8083ee6:	f002 fb86 	bl	80865f6 <_ZN5Print7printlnEv>
    }
    _client_http_ubi.connect(host, port);
 8083eea:	2300      	movs	r3, #0
 8083eec:	fa1f f288 	uxth.w	r2, r8
 8083ef0:	4639      	mov	r1, r7
 8083ef2:	4809      	ldr	r0, [pc, #36]	; (8083f18 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 8083ef4:	f002 fa3e 	bl	8086374 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
 8083ef8:	7d2b      	ldrb	r3, [r5, #20]
 8083efa:	b123      	cbz	r3, 8083f06 <_ZN7UbiHTTP9reconnectEPKci+0x72>
      Serial.println("Attempt finished");
 8083efc:	f003 fcb4 	bl	8087868 <_Z16_fetch_usbserialv>
 8083f00:	4908      	ldr	r1, [pc, #32]	; (8083f24 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
 8083f02:	f002 fb84 	bl	808660e <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
 8083f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8083f0a:	f002 fd05 	bl	8086918 <delay>
 8083f0e:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 8083f10:	e7c6      	b.n	8083ea0 <_ZN7UbiHTTP9reconnectEPKci+0xc>
 8083f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083f16:	bf00      	nop
 8083f18:	20000834 	.word	0x20000834
 8083f1c:	0808d274 	.word	0x0808d274
 8083f20:	0808d28a 	.word	0x0808d28a
 8083f24:	0808d6f8 	.word	0x0808d6f8

08083f28 <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
 8083f28:	b570      	push	{r4, r5, r6, lr}
 8083f2a:	1e4d      	subs	r5, r1, #1
 8083f2c:	4606      	mov	r6, r0
 8083f2e:	462b      	mov	r3, r5
 8083f30:	460c      	mov	r4, r1
 8083f32:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
 8083f36:	2100      	movs	r1, #0
 8083f38:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
 8083f3c:	4293      	cmp	r3, r2
 8083f3e:	d1fb      	bne.n	8083f38 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
 8083f40:	7d33      	ldrb	r3, [r6, #20]
 8083f42:	b14b      	cbz	r3, 8083f58 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
 8083f44:	f003 fc90 	bl	8087868 <_Z16_fetch_usbserialv>
 8083f48:	4913      	ldr	r1, [pc, #76]	; (8083f98 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
 8083f4a:	f002 fb60 	bl	808660e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8083f4e:	f003 fc8b 	bl	8087868 <_Z16_fetch_usbserialv>
 8083f52:	4912      	ldr	r1, [pc, #72]	; (8083f9c <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
 8083f54:	f002 fb5b 	bl	808660e <_ZN5Print7printlnEPKc>
 8083f58:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
 8083f5c:	4810      	ldr	r0, [pc, #64]	; (8083fa0 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 8083f5e:	f002 f883 	bl	8086068 <_ZN9TCPClient9availableEv>
 8083f62:	b940      	cbnz	r0, 8083f76 <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
 8083f64:	7d33      	ldrb	r3, [r6, #20]
 8083f66:	b1b3      	cbz	r3, 8083f96 <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
 8083f68:	f003 fc7e 	bl	8087868 <_Z16_fetch_usbserialv>
  }
}
 8083f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
 8083f70:	490c      	ldr	r1, [pc, #48]	; (8083fa4 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
 8083f72:	f002 bb4c 	b.w	808660e <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
 8083f76:	480a      	ldr	r0, [pc, #40]	; (8083fa0 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 8083f78:	f002 f82b 	bl	8085fd2 <_ZN9TCPClient4readEv>
 8083f7c:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
 8083f80:	7d33      	ldrb	r3, [r6, #20]
 8083f82:	b12b      	cbz	r3, 8083f90 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
 8083f84:	f003 fc70 	bl	8087868 <_Z16_fetch_usbserialv>
 8083f88:	6803      	ldr	r3, [r0, #0]
 8083f8a:	7829      	ldrb	r1, [r5, #0]
 8083f8c:	689b      	ldr	r3, [r3, #8]
 8083f8e:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
 8083f90:	42a5      	cmp	r5, r4
 8083f92:	d1e3      	bne.n	8083f5c <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
 8083f94:	e7e6      	b.n	8083f64 <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
 8083f96:	bd70      	pop	{r4, r5, r6, pc}
 8083f98:	0808d2e5 	.word	0x0808d2e5
 8083f9c:	0808d2d1 	.word	0x0808d2d1
 8083fa0:	20000834 	.word	0x20000834
 8083fa4:	0808d2e4 	.word	0x0808d2e4

08083fa8 <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
 8083fa8:	b570      	push	{r4, r5, r6, lr}
 8083faa:	4605      	mov	r5, r0
  int timeout = 0;
 8083fac:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
 8083fae:	480d      	ldr	r0, [pc, #52]	; (8083fe4 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
 8083fb0:	f002 f85a 	bl	8086068 <_ZN9TCPClient9availableEv>
 8083fb4:	4606      	mov	r6, r0
 8083fb6:	b910      	cbnz	r0, 8083fbe <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
 8083fb8:	69ab      	ldr	r3, [r5, #24]
 8083fba:	429c      	cmp	r4, r3
 8083fbc:	db01      	blt.n	8083fc2 <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
 8083fbe:	2001      	movs	r0, #1
 8083fc0:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
 8083fc2:	2001      	movs	r0, #1
 8083fc4:	f002 fca8 	bl	8086918 <delay>
    if (timeout > _timeout - 1) {
 8083fc8:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
 8083fca:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
 8083fcc:	429c      	cmp	r4, r3
 8083fce:	dbee      	blt.n	8083fae <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
 8083fd0:	7d28      	ldrb	r0, [r5, #20]
 8083fd2:	b130      	cbz	r0, 8083fe2 <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
 8083fd4:	f003 fc48 	bl	8087868 <_Z16_fetch_usbserialv>
 8083fd8:	4903      	ldr	r1, [pc, #12]	; (8083fe8 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
 8083fda:	f002 fb18 	bl	808660e <_ZN5Print7printlnEPKc>
 8083fde:	4630      	mov	r0, r6
 8083fe0:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
 8083fe2:	bd70      	pop	{r4, r5, r6, pc}
 8083fe4:	20000834 	.word	0x20000834
 8083fe8:	0808d29e 	.word	0x0808d29e

08083fec <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
 8083fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083fee:	460f      	mov	r7, r1
  reconnect(_host, _port);
 8083ff0:	6902      	ldr	r2, [r0, #16]
 8083ff2:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
 8083ff4:	4604      	mov	r4, r0
 8083ff6:	461e      	mov	r6, r3
  reconnect(_host, _port);
 8083ff8:	f7ff ff4c 	bl	8083e94 <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
 8083ffc:	4880      	ldr	r0, [pc, #512]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083ffe:	f002 f928 	bl	8086252 <_ZN9TCPClient9connectedEv>
 8084002:	4605      	mov	r5, r0
 8084004:	2800      	cmp	r0, #0
 8084006:	f000 80ec 	beq.w	80841e2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
 808400a:	497e      	ldr	r1, [pc, #504]	; (8084204 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 808400c:	487c      	ldr	r0, [pc, #496]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808400e:	f002 fae7 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 8084012:	4639      	mov	r1, r7
 8084014:	487a      	ldr	r0, [pc, #488]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084016:	f002 fae3 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
 808401a:	497b      	ldr	r1, [pc, #492]	; (8084208 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 808401c:	4878      	ldr	r0, [pc, #480]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808401e:	f002 fadf 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
 8084022:	497a      	ldr	r1, [pc, #488]	; (808420c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 8084024:	4876      	ldr	r0, [pc, #472]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084026:	f002 fadb 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
 808402a:	6861      	ldr	r1, [r4, #4]
 808402c:	4874      	ldr	r0, [pc, #464]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808402e:	f002 fad7 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084032:	4977      	ldr	r1, [pc, #476]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084034:	4872      	ldr	r0, [pc, #456]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084036:	f002 fad3 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
 808403a:	4976      	ldr	r1, [pc, #472]	; (8084214 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 808403c:	4870      	ldr	r0, [pc, #448]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808403e:	f002 facf 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 8084042:	68a1      	ldr	r1, [r4, #8]
 8084044:	486e      	ldr	r0, [pc, #440]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084046:	f002 facb 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 808404a:	4971      	ldr	r1, [pc, #452]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808404c:	486c      	ldr	r0, [pc, #432]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808404e:	f002 fac7 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
 8084052:	4971      	ldr	r1, [pc, #452]	; (8084218 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 8084054:	486a      	ldr	r0, [pc, #424]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084056:	f002 fac3 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 808405a:	68e1      	ldr	r1, [r4, #12]
 808405c:	4868      	ldr	r0, [pc, #416]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808405e:	f002 fabf 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084062:	496b      	ldr	r1, [pc, #428]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084064:	4866      	ldr	r0, [pc, #408]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084066:	f002 fabb 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
 808406a:	496c      	ldr	r1, [pc, #432]	; (808421c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 808406c:	4864      	ldr	r0, [pc, #400]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808406e:	f002 fab7 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
 8084072:	496b      	ldr	r1, [pc, #428]	; (8084220 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 8084074:	4862      	ldr	r0, [pc, #392]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084076:	f002 fab3 	bl	80865e0 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
 808407a:	4630      	mov	r0, r6
 808407c:	f006 fcb4 	bl	808a9e8 <strlen>
 8084080:	4605      	mov	r5, r0
    _client_http_ubi.print(F("Content-Length: "));
 8084082:	4968      	ldr	r1, [pc, #416]	; (8084224 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 8084084:	485e      	ldr	r0, [pc, #376]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084086:	f002 faab 	bl	80865e0 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 808408a:	2d00      	cmp	r5, #0
 808408c:	da05      	bge.n	808409a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
 808408e:	212d      	movs	r1, #45	; 0x2d
 8084090:	485b      	ldr	r0, [pc, #364]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084092:	f002 faa9 	bl	80865e8 <_ZN5Print5printEc>
            val = -n;
 8084096:	4269      	negs	r1, r5
 8084098:	e000      	b.n	808409c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 808409a:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808409c:	220a      	movs	r2, #10
 808409e:	4858      	ldr	r0, [pc, #352]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80840a0:	f002 fabf 	bl	8086622 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(content_length);
    _client_http_ubi.print(F("\r\n\r\n"));
 80840a4:	4960      	ldr	r1, [pc, #384]	; (8084228 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80840a6:	4856      	ldr	r0, [pc, #344]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80840a8:	f002 fa9a 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
 80840ac:	4631      	mov	r1, r6
 80840ae:	4854      	ldr	r0, [pc, #336]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80840b0:	f002 fa96 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 80840b4:	4956      	ldr	r1, [pc, #344]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80840b6:	4852      	ldr	r0, [pc, #328]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80840b8:	f002 fa92 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
 80840bc:	4850      	ldr	r0, [pc, #320]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80840be:	f001 ff4a 	bl	8085f56 <_ZN9TCPClient5flushEv>

    if (_debug) {
 80840c2:	7d23      	ldrb	r3, [r4, #20]
 80840c4:	2b00      	cmp	r3, #0
 80840c6:	d071      	beq.n	80841ac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
      Serial.println(F("Making request to Ubidots:\n"));
 80840c8:	f003 fbce 	bl	8087868 <_Z16_fetch_usbserialv>
 80840cc:	4957      	ldr	r1, [pc, #348]	; (808422c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
 80840ce:	f002 fa9e 	bl	808660e <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
 80840d2:	f003 fbc9 	bl	8087868 <_Z16_fetch_usbserialv>
 80840d6:	494b      	ldr	r1, [pc, #300]	; (8084204 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 80840d8:	f002 fa82 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 80840dc:	f003 fbc4 	bl	8087868 <_Z16_fetch_usbserialv>
 80840e0:	4639      	mov	r1, r7
 80840e2:	f002 fa7d 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 80840e6:	f003 fbbf 	bl	8087868 <_Z16_fetch_usbserialv>
 80840ea:	4947      	ldr	r1, [pc, #284]	; (8084208 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 80840ec:	f002 fa78 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 80840f0:	f003 fbba 	bl	8087868 <_Z16_fetch_usbserialv>
 80840f4:	4945      	ldr	r1, [pc, #276]	; (808420c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 80840f6:	f002 fa73 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(_host);
 80840fa:	f003 fbb5 	bl	8087868 <_Z16_fetch_usbserialv>
 80840fe:	6861      	ldr	r1, [r4, #4]
 8084100:	f002 fa6e 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084104:	f003 fbb0 	bl	8087868 <_Z16_fetch_usbserialv>
 8084108:	4941      	ldr	r1, [pc, #260]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808410a:	f002 fa69 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 808410e:	f003 fbab 	bl	8087868 <_Z16_fetch_usbserialv>
 8084112:	4940      	ldr	r1, [pc, #256]	; (8084214 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 8084114:	f002 fa64 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 8084118:	f003 fba6 	bl	8087868 <_Z16_fetch_usbserialv>
 808411c:	68a1      	ldr	r1, [r4, #8]
 808411e:	f002 fa5f 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084122:	f003 fba1 	bl	8087868 <_Z16_fetch_usbserialv>
 8084126:	493a      	ldr	r1, [pc, #232]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084128:	f002 fa5a 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 808412c:	f003 fb9c 	bl	8087868 <_Z16_fetch_usbserialv>
 8084130:	4939      	ldr	r1, [pc, #228]	; (8084218 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 8084132:	f002 fa55 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8084136:	f003 fb97 	bl	8087868 <_Z16_fetch_usbserialv>
 808413a:	68e1      	ldr	r1, [r4, #12]
 808413c:	f002 fa50 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084140:	f003 fb92 	bl	8087868 <_Z16_fetch_usbserialv>
 8084144:	4932      	ldr	r1, [pc, #200]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084146:	f002 fa4b 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
 808414a:	f003 fb8d 	bl	8087868 <_Z16_fetch_usbserialv>
 808414e:	4933      	ldr	r1, [pc, #204]	; (808421c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 8084150:	f002 fa46 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
 8084154:	f003 fb88 	bl	8087868 <_Z16_fetch_usbserialv>
 8084158:	4931      	ldr	r1, [pc, #196]	; (8084220 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 808415a:	f002 fa41 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
 808415e:	f003 fb83 	bl	8087868 <_Z16_fetch_usbserialv>
 8084162:	4930      	ldr	r1, [pc, #192]	; (8084224 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 8084164:	f002 fa3c 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(content_length);
 8084168:	f003 fb7e 	bl	8087868 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 808416c:	2d00      	cmp	r5, #0
 808416e:	4607      	mov	r7, r0
 8084170:	da03      	bge.n	808417a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
 8084172:	212d      	movs	r1, #45	; 0x2d
 8084174:	f002 fa38 	bl	80865e8 <_ZN5Print5printEc>
            val = -n;
 8084178:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808417a:	220a      	movs	r2, #10
 808417c:	4629      	mov	r1, r5
 808417e:	4638      	mov	r0, r7
 8084180:	f002 fa4f 	bl	8086622 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
 8084184:	f003 fb70 	bl	8087868 <_Z16_fetch_usbserialv>
 8084188:	4927      	ldr	r1, [pc, #156]	; (8084228 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 808418a:	f002 fa29 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(payload);
 808418e:	f003 fb6b 	bl	8087868 <_Z16_fetch_usbserialv>
 8084192:	4631      	mov	r1, r6
 8084194:	f002 fa24 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084198:	f003 fb66 	bl	8087868 <_Z16_fetch_usbserialv>
 808419c:	491c      	ldr	r1, [pc, #112]	; (8084210 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808419e:	f002 fa1f 	bl	80865e0 <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
 80841a2:	f003 fb61 	bl	8087868 <_Z16_fetch_usbserialv>
 80841a6:	4922      	ldr	r1, [pc, #136]	; (8084230 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
 80841a8:	f002 fa31 	bl	808660e <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
 80841ac:	4620      	mov	r0, r4
 80841ae:	f7ff fefb 	bl	8083fa8 <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
 80841b2:	7d23      	ldrb	r3, [r4, #20]
 80841b4:	b90b      	cbnz	r3, 80841ba <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
 80841b6:	2401      	movs	r4, #1
 80841b8:	e01d      	b.n	80841f6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
 80841ba:	f003 fb55 	bl	8087868 <_Z16_fetch_usbserialv>
 80841be:	491d      	ldr	r1, [pc, #116]	; (8084234 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
 80841c0:	f002 fa25 	bl	808660e <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
 80841c4:	480e      	ldr	r0, [pc, #56]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841c6:	f001 ff4f 	bl	8086068 <_ZN9TCPClient9availableEv>
 80841ca:	2800      	cmp	r0, #0
 80841cc:	d0f3      	beq.n	80841b6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
        char c = _client_http_ubi.read();
 80841ce:	480c      	ldr	r0, [pc, #48]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841d0:	f001 feff 	bl	8085fd2 <_ZN9TCPClient4readEv>
 80841d4:	4604      	mov	r4, r0
        Serial.print(c);
 80841d6:	f003 fb47 	bl	8087868 <_Z16_fetch_usbserialv>
 80841da:	b2e1      	uxtb	r1, r4
 80841dc:	f002 fa04 	bl	80865e8 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
 80841e0:	e7f0      	b.n	80841c4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
    }

    result = true;

  } else {
    if (_debug) {
 80841e2:	7d23      	ldrb	r3, [r4, #20]
 80841e4:	b133      	cbz	r3, 80841f4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
      Serial.println("Could not send data to ubidots using HTTP");
 80841e6:	f003 fb3f 	bl	8087868 <_Z16_fetch_usbserialv>
 80841ea:	4913      	ldr	r1, [pc, #76]	; (8084238 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
 80841ec:	f002 fa0f 	bl	808660e <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
 80841f0:	462c      	mov	r4, r5
 80841f2:	e000      	b.n	80841f6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
 80841f4:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
 80841f6:	4802      	ldr	r0, [pc, #8]	; (8084200 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80841f8:	f001 ff72 	bl	80860e0 <_ZN9TCPClient4stopEv>
  return result;
}
 80841fc:	4620      	mov	r0, r4
 80841fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084200:	20000834 	.word	0x20000834
 8084204:	0808d709 	.word	0x0808d709
 8084208:	0808d721 	.word	0x0808d721
 808420c:	0808d72d 	.word	0x0808d72d
 8084210:	0808d851 	.word	0x0808d851
 8084214:	0808d734 	.word	0x0808d734
 8084218:	0808d741 	.word	0x0808d741
 808421c:	0808d750 	.word	0x0808d750
 8084220:	0808d764 	.word	0x0808d764
 8084224:	0808d785 	.word	0x0808d785
 8084228:	0808d84f 	.word	0x0808d84f
 808422c:	0808d796 	.word	0x0808d796
 8084230:	0808d7b2 	.word	0x0808d7b2
 8084234:	0808d7d0 	.word	0x0808d7d0
 8084238:	0808d7ec 	.word	0x0808d7ec

0808423c <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
 808423c:	b570      	push	{r4, r5, r6, lr}
 808423e:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 8084240:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
 8084242:	460e      	mov	r6, r1
 8084244:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 8084246:	6841      	ldr	r1, [r0, #4]
 8084248:	2250      	movs	r2, #80	; 0x50
 808424a:	4865      	ldr	r0, [pc, #404]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808424c:	f002 f892 	bl	8086374 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
 8084250:	4620      	mov	r0, r4
 8084252:	2250      	movs	r2, #80	; 0x50
 8084254:	6861      	ldr	r1, [r4, #4]
 8084256:	f7ff fe1d 	bl	8083e94 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
 808425a:	4861      	ldr	r0, [pc, #388]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808425c:	f001 fff9 	bl	8086252 <_ZN9TCPClient9connectedEv>
 8084260:	2800      	cmp	r0, #0
 8084262:	f000 80b2 	beq.w	80843ca <_ZN7UbiHTTP3getEPKcS1_+0x18e>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
 8084266:	495f      	ldr	r1, [pc, #380]	; (80843e4 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 8084268:	485d      	ldr	r0, [pc, #372]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808426a:	f002 f9b9 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 808426e:	4631      	mov	r1, r6
 8084270:	485b      	ldr	r0, [pc, #364]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084272:	f002 f9b5 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
 8084276:	495c      	ldr	r1, [pc, #368]	; (80843e8 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8084278:	4859      	ldr	r0, [pc, #356]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808427a:	f002 f9b1 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
 808427e:	4629      	mov	r1, r5
 8084280:	4857      	ldr	r0, [pc, #348]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084282:	f002 f9ad 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
 8084286:	4959      	ldr	r1, [pc, #356]	; (80843ec <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 8084288:	4855      	ldr	r0, [pc, #340]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808428a:	f002 f9a9 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
 808428e:	4958      	ldr	r1, [pc, #352]	; (80843f0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 8084290:	4853      	ldr	r0, [pc, #332]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084292:	f002 f9a5 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
 8084296:	4957      	ldr	r1, [pc, #348]	; (80843f4 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8084298:	4851      	ldr	r0, [pc, #324]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808429a:	f002 f9a1 	bl	80865e0 <_ZN5Print5printEPKc>
 808429e:	220a      	movs	r2, #10
 80842a0:	2150      	movs	r1, #80	; 0x50
 80842a2:	484f      	ldr	r0, [pc, #316]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842a4:	f002 f9bd 	bl	8086622 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
    _client_http_ubi.print("\r\n");
 80842a8:	4953      	ldr	r1, [pc, #332]	; (80843f8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80842aa:	484d      	ldr	r0, [pc, #308]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842ac:	f002 f998 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
 80842b0:	4952      	ldr	r1, [pc, #328]	; (80843fc <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 80842b2:	484b      	ldr	r0, [pc, #300]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842b4:	f002 f994 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 80842b8:	68a1      	ldr	r1, [r4, #8]
 80842ba:	4849      	ldr	r0, [pc, #292]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842bc:	f002 f990 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 80842c0:	494d      	ldr	r1, [pc, #308]	; (80843f8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80842c2:	4847      	ldr	r0, [pc, #284]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842c4:	f002 f98c 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
 80842c8:	494d      	ldr	r1, [pc, #308]	; (8084400 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 80842ca:	4845      	ldr	r0, [pc, #276]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842cc:	f002 f988 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 80842d0:	68e1      	ldr	r1, [r4, #12]
 80842d2:	4843      	ldr	r0, [pc, #268]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842d4:	f002 f984 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 80842d8:	4947      	ldr	r1, [pc, #284]	; (80843f8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80842da:	4841      	ldr	r0, [pc, #260]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842dc:	f002 f980 	bl	80865e0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
 80842e0:	4948      	ldr	r1, [pc, #288]	; (8084404 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 80842e2:	483f      	ldr	r0, [pc, #252]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80842e4:	f002 f97c 	bl	80865e0 <_ZN5Print5printEPKc>

    if (_debug) {
 80842e8:	7d23      	ldrb	r3, [r4, #20]
 80842ea:	2b00      	cmp	r3, #0
 80842ec:	d050      	beq.n	8084390 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
 80842ee:	f003 fabb 	bl	8087868 <_Z16_fetch_usbserialv>
 80842f2:	493c      	ldr	r1, [pc, #240]	; (80843e4 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 80842f4:	f002 f974 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 80842f8:	f003 fab6 	bl	8087868 <_Z16_fetch_usbserialv>
 80842fc:	4631      	mov	r1, r6
 80842fe:	f002 f96f 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("/");
 8084302:	f003 fab1 	bl	8087868 <_Z16_fetch_usbserialv>
 8084306:	4938      	ldr	r1, [pc, #224]	; (80843e8 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8084308:	f002 f96a 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 808430c:	f003 faac 	bl	8087868 <_Z16_fetch_usbserialv>
 8084310:	4629      	mov	r1, r5
 8084312:	f002 f965 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("/lv");
 8084316:	f003 faa7 	bl	8087868 <_Z16_fetch_usbserialv>
 808431a:	4934      	ldr	r1, [pc, #208]	; (80843ec <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 808431c:	f002 f960 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 8084320:	f003 faa2 	bl	8087868 <_Z16_fetch_usbserialv>
 8084324:	4932      	ldr	r1, [pc, #200]	; (80843f0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 8084326:	f002 f95b 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 808432a:	f003 fa9d 	bl	8087868 <_Z16_fetch_usbserialv>
 808432e:	4931      	ldr	r1, [pc, #196]	; (80843f4 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8084330:	f002 f956 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
 8084334:	f003 fa98 	bl	8087868 <_Z16_fetch_usbserialv>
 8084338:	220a      	movs	r2, #10
 808433a:	2150      	movs	r1, #80	; 0x50
 808433c:	f002 f971 	bl	8086622 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
 8084340:	f003 fa92 	bl	8087868 <_Z16_fetch_usbserialv>
 8084344:	492c      	ldr	r1, [pc, #176]	; (80843f8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084346:	f002 f94b 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 808434a:	f003 fa8d 	bl	8087868 <_Z16_fetch_usbserialv>
 808434e:	492b      	ldr	r1, [pc, #172]	; (80843fc <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 8084350:	f002 f946 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 8084354:	f003 fa88 	bl	8087868 <_Z16_fetch_usbserialv>
 8084358:	68a1      	ldr	r1, [r4, #8]
 808435a:	f002 f941 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 808435e:	f003 fa83 	bl	8087868 <_Z16_fetch_usbserialv>
 8084362:	4925      	ldr	r1, [pc, #148]	; (80843f8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084364:	f002 f93c 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 8084368:	f003 fa7e 	bl	8087868 <_Z16_fetch_usbserialv>
 808436c:	4924      	ldr	r1, [pc, #144]	; (8084400 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 808436e:	f002 f937 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8084372:	f003 fa79 	bl	8087868 <_Z16_fetch_usbserialv>
 8084376:	68e1      	ldr	r1, [r4, #12]
 8084378:	f002 f932 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 808437c:	f003 fa74 	bl	8087868 <_Z16_fetch_usbserialv>
 8084380:	491d      	ldr	r1, [pc, #116]	; (80843f8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084382:	f002 f92d 	bl	80865e0 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
 8084386:	f003 fa6f 	bl	8087868 <_Z16_fetch_usbserialv>
 808438a:	491e      	ldr	r1, [pc, #120]	; (8084404 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 808438c:	f002 f928 	bl	80865e0 <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
 8084390:	4620      	mov	r0, r4
 8084392:	f7ff fe09 	bl	8083fa8 <_ZN7UbiHTTP16waitServerAnswerEv>
 8084396:	b920      	cbnz	r0, 80843a2 <_ZN7UbiHTTP3getEPKcS1_+0x166>
      _client_http_ubi.stop();
 8084398:	4811      	ldr	r0, [pc, #68]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808439a:	f001 fea1 	bl	80860e0 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 808439e:	4c1a      	ldr	r4, [pc, #104]	; (8084408 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
 80843a0:	e01c      	b.n	80843dc <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80843a2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80843a6:	f001 faaf 	bl	8085908 <malloc>
 80843aa:	4605      	mov	r5, r0
    readServerAnswer(response);
 80843ac:	4601      	mov	r1, r0
 80843ae:	4620      	mov	r0, r4
 80843b0:	f7ff fdba 	bl	8083f28 <_ZN7UbiHTTP16readServerAnswerEPc>
 80843b4:	4628      	mov	r0, r5
 80843b6:	f7ff fd09 	bl	8083dcc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>
 80843ba:	4604      	mov	r4, r0

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
 80843bc:	4808      	ldr	r0, [pc, #32]	; (80843e0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80843be:	f001 fe8f 	bl	80860e0 <_ZN9TCPClient4stopEv>
    free(response);
 80843c2:	4628      	mov	r0, r5
 80843c4:	f001 faa8 	bl	8085918 <free>
 80843c8:	e008      	b.n	80843dc <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
    return value;
  }

  if (_debug) {
 80843ca:	7d23      	ldrb	r3, [r4, #20]
 80843cc:	2b00      	cmp	r3, #0
 80843ce:	d0e3      	beq.n	8084398 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
 80843d0:	f003 fa4a 	bl	8087868 <_Z16_fetch_usbserialv>
 80843d4:	490d      	ldr	r1, [pc, #52]	; (808440c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
 80843d6:	f002 f91a 	bl	808660e <_ZN5Print7printlnEPKc>
 80843da:	e7dd      	b.n	8084398 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
 80843dc:	4620      	mov	r0, r4
 80843de:	bd70      	pop	{r4, r5, r6, pc}
 80843e0:	20000834 	.word	0x20000834
 80843e4:	0808d816 	.word	0x0808d816
 80843e8:	0808d82b 	.word	0x0808d82b
 80843ec:	0808d82d 	.word	0x0808d82d
 80843f0:	0808d721 	.word	0x0808d721
 80843f4:	0808d72d 	.word	0x0808d72d
 80843f8:	0808d851 	.word	0x0808d851
 80843fc:	0808d734 	.word	0x0808d734
 8084400:	0808d741 	.word	0x0808d741
 8084404:	0808d831 	.word	0x0808d831
 8084408:	cda2425f 	.word	0xcda2425f
 808440c:	0808d854 	.word	0x0808d854

08084410 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

 8084410:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
 8084412:	4c06      	ldr	r4, [pc, #24]	; (808442c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
 8084414:	f000 ff34 	bl	8085280 <HAL_Pin_Map>
 8084418:	4620      	mov	r0, r4
 808441a:	f001 ff89 	bl	8086330 <_ZN9TCPClientC1Ev>
 808441e:	4620      	mov	r0, r4
 8084420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084424:	4a02      	ldr	r2, [pc, #8]	; (8084430 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
 8084426:	4903      	ldr	r1, [pc, #12]	; (8084434 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
 8084428:	f004 b812 	b.w	8088450 <__aeabi_atexit>
 808442c:	20000834 	.word	0x20000834
 8084430:	20000140 	.word	0x20000140
 8084434:	08083409 	.word	0x08083409

08084438 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
 8084438:	6803      	ldr	r3, [r0, #0]
 808443a:	4718      	bx	r3

0808443c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808443c:	2a01      	cmp	r2, #1
 808443e:	d002      	beq.n	8084446 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 8084440:	2a02      	cmp	r2, #2
 8084442:	d002      	beq.n	808444a <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
 8084444:	e004      	b.n	8084450 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8084446:	6001      	str	r1, [r0, #0]
	      break;
 8084448:	e002      	b.n	8084450 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808444a:	680b      	ldr	r3, [r1, #0]
 808444c:	b100      	cbz	r0, 8084450 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
 808444e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8084450:	2000      	movs	r0, #0
 8084452:	4770      	bx	lr

08084454 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
 8084454:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8084456:	201c      	movs	r0, #28
 8084458:	f7fb fe21 	bl	808009e <_Znwj>
 808445c:	4604      	mov	r4, r0
 808445e:	b148      	cbz	r0, 8084474 <_Z10builderTcpv+0x20>
 8084460:	4b06      	ldr	r3, [pc, #24]	; (808447c <_Z10builderTcpv+0x28>)
 8084462:	4907      	ldr	r1, [pc, #28]	; (8084480 <_Z10builderTcpv+0x2c>)
 8084464:	681b      	ldr	r3, [r3, #0]
 8084466:	f242 3234 	movw	r2, #9012	; 0x2334
 808446a:	9300      	str	r3, [sp, #0]
 808446c:	6809      	ldr	r1, [r1, #0]
 808446e:	4b05      	ldr	r3, [pc, #20]	; (8084484 <_Z10builderTcpv+0x30>)
 8084470:	f7fe ffee 	bl	8083450 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
 8084474:	4620      	mov	r0, r4
 8084476:	b002      	add	sp, #8
 8084478:	bd10      	pop	{r4, pc}
 808447a:	bf00      	nop
 808447c:	20000888 	.word	0x20000888
 8084480:	2000088c 	.word	0x2000088c
 8084484:	0808d456 	.word	0x0808d456

08084488 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
 8084488:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
 808448a:	2020      	movs	r0, #32
 808448c:	f7fb fe07 	bl	808009e <_Znwj>
 8084490:	4604      	mov	r4, r0
 8084492:	b140      	cbz	r0, 80844a6 <_Z11builderHttpv+0x1e>
 8084494:	4b05      	ldr	r3, [pc, #20]	; (80844ac <_Z11builderHttpv+0x24>)
 8084496:	4906      	ldr	r1, [pc, #24]	; (80844b0 <_Z11builderHttpv+0x28>)
 8084498:	681b      	ldr	r3, [r3, #0]
 808449a:	2250      	movs	r2, #80	; 0x50
 808449c:	9300      	str	r3, [sp, #0]
 808449e:	6809      	ldr	r1, [r1, #0]
 80844a0:	4b04      	ldr	r3, [pc, #16]	; (80844b4 <_Z11builderHttpv+0x2c>)
 80844a2:	f7ff fce5 	bl	8083e70 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
 80844a6:	4620      	mov	r0, r4
 80844a8:	b002      	add	sp, #8
 80844aa:	bd10      	pop	{r4, pc}
 80844ac:	20000888 	.word	0x20000888
 80844b0:	2000088c 	.word	0x2000088c
 80844b4:	0808d456 	.word	0x0808d456

080844b8 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
 80844b8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 80844ba:	201c      	movs	r0, #28
 80844bc:	f7fb fdef 	bl	808009e <_Znwj>
 80844c0:	4604      	mov	r4, r0
 80844c2:	b148      	cbz	r0, 80844d8 <_Z10builderUdpv+0x20>
 80844c4:	4b06      	ldr	r3, [pc, #24]	; (80844e0 <_Z10builderUdpv+0x28>)
 80844c6:	4907      	ldr	r1, [pc, #28]	; (80844e4 <_Z10builderUdpv+0x2c>)
 80844c8:	681b      	ldr	r3, [r3, #0]
 80844ca:	f242 3234 	movw	r2, #9012	; 0x2334
 80844ce:	9300      	str	r3, [sp, #0]
 80844d0:	6809      	ldr	r1, [r1, #0]
 80844d2:	4b05      	ldr	r3, [pc, #20]	; (80844e8 <_Z10builderUdpv+0x30>)
 80844d4:	f000 f9e2 	bl	808489c <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
 80844d8:	4620      	mov	r0, r4
 80844da:	b002      	add	sp, #8
 80844dc:	bd10      	pop	{r4, pc}
 80844de:	bf00      	nop
 80844e0:	20000888 	.word	0x20000888
 80844e4:	2000088c 	.word	0x2000088c
 80844e8:	0808d456 	.word	0x0808d456

080844ec <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
 80844ec:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
 80844ee:	2014      	movs	r0, #20
 80844f0:	f7fb fdd5 	bl	808009e <_Znwj>
 80844f4:	4604      	mov	r4, r0
 80844f6:	b140      	cbz	r0, 808450a <_Z15builderParticlev+0x1e>
 80844f8:	4b05      	ldr	r3, [pc, #20]	; (8084510 <_Z15builderParticlev+0x24>)
 80844fa:	4906      	ldr	r1, [pc, #24]	; (8084514 <_Z15builderParticlev+0x28>)
 80844fc:	681b      	ldr	r3, [r3, #0]
 80844fe:	9300      	str	r3, [sp, #0]
 8084500:	2300      	movs	r3, #0
 8084502:	461a      	mov	r2, r3
 8084504:	6809      	ldr	r1, [r1, #0]
 8084506:	f000 fa71 	bl	80849ec <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
 808450a:	4620      	mov	r0, r4
 808450c:	b002      	add	sp, #8
 808450e:	bd10      	pop	{r4, pc}
 8084510:	20000888 	.word	0x20000888
 8084514:	2000088c 	.word	0x2000088c

08084518 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 8084518:	b510      	push	{r4, lr}
 808451a:	4604      	mov	r4, r0
 808451c:	4b05      	ldr	r3, [pc, #20]	; (8084534 <_ZN3UDPD1Ev+0x1c>)
 808451e:	6003      	str	r3, [r0, #0]
 8084520:	3364      	adds	r3, #100	; 0x64
 8084522:	6103      	str	r3, [r0, #16]
 8084524:	f002 faa0 	bl	8086a68 <_ZN3UDP4stopEv>
 8084528:	4620      	mov	r0, r4
 808452a:	f002 fb81 	bl	8086c30 <_ZN3UDP13releaseBufferEv>
 808452e:	4620      	mov	r0, r4
 8084530:	bd10      	pop	{r4, pc}
 8084532:	bf00      	nop
 8084534:	0808dae0 	.word	0x0808dae0

08084538 <_ZN3UDPD0Ev>:
 8084538:	b510      	push	{r4, lr}
 808453a:	4604      	mov	r4, r0
 808453c:	f7ff ffec 	bl	8084518 <_ZN3UDPD1Ev>
 8084540:	4620      	mov	r0, r4
 8084542:	213c      	movs	r1, #60	; 0x3c
 8084544:	f003 ff92 	bl	808846c <_ZdlPvj>
 8084548:	4620      	mov	r0, r4
 808454a:	bd10      	pop	{r4, pc}

0808454c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 808454c:	b510      	push	{r4, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808454e:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8084550:	b086      	sub	sp, #24
 8084552:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084554:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8084556:	b121      	cbz	r1, 8084562 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084558:	4b0f      	ldr	r3, [pc, #60]	; (8084598 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808455a:	9102      	str	r1, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808455c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808455e:	4b0f      	ldr	r3, [pc, #60]	; (808459c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
 8084560:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084562:	ab02      	add	r3, sp, #8
 8084564:	e893 0003 	ldmia.w	r3, {r0, r1}
 8084568:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808456c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8084570:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8084574:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084578:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 808457a:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808457e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8084580:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084582:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8084584:	9104      	str	r1, [sp, #16]
 8084586:	68e1      	ldr	r1, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084588:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 808458a:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808458c:	9105      	str	r1, [sp, #20]
 808458e:	f7fb fe16 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 8084592:	4620      	mov	r0, r4
 8084594:	b006      	add	sp, #24
 8084596:	bd10      	pop	{r4, pc}
 8084598:	08084439 	.word	0x08084439
 808459c:	0808443d 	.word	0x0808443d

080845a0 <_ZN10UbiBuilder7builderEv>:
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 80845a0:	f100 0108 	add.w	r1, r0, #8
 80845a4:	460b      	mov	r3, r1
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
 80845a6:	b570      	push	{r4, r5, r6, lr}
 80845a8:	68c2      	ldr	r2, [r0, #12]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 80845aa:	b14a      	cbz	r2, 80845c0 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80845ac:	7804      	ldrb	r4, [r0, #0]
 80845ae:	7c15      	ldrb	r5, [r2, #16]
 80845b0:	42a5      	cmp	r5, r4
 80845b2:	bf3a      	itte	cc
 80845b4:	68d4      	ldrcc	r4, [r2, #12]
 80845b6:	461a      	movcc	r2, r3
 80845b8:	6894      	ldrcs	r4, [r2, #8]
 80845ba:	4613      	mov	r3, r2
 80845bc:	4622      	mov	r2, r4
 80845be:	e7f4      	b.n	80845aa <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80845c0:	4299      	cmp	r1, r3
 80845c2:	d004      	beq.n	80845ce <_ZN10UbiBuilder7builderEv+0x2e>
 80845c4:	7800      	ldrb	r0, [r0, #0]
 80845c6:	7c1a      	ldrb	r2, [r3, #16]
 80845c8:	4290      	cmp	r0, r2
 80845ca:	bf38      	it	cc
 80845cc:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80845ce:	69da      	ldr	r2, [r3, #28]
 80845d0:	b90a      	cbnz	r2, 80845d6 <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
 80845d2:	f004 f817 	bl	8088604 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80845d6:	6a1a      	ldr	r2, [r3, #32]
 80845d8:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
 80845dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80845e0:	4710      	bx	r2

080845e2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80845e2:	b570      	push	{r4, r5, r6, lr}
 80845e4:	4604      	mov	r4, r0
 80845e6:	688b      	ldr	r3, [r1, #8]
 80845e8:	4616      	mov	r6, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 80845ea:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
 80845ec:	2201      	movs	r2, #1
      while (__x != 0)
 80845ee:	b153      	cbz	r3, 8084606 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x24>
 80845f0:	7830      	ldrb	r0, [r6, #0]
 80845f2:	7c1a      	ldrb	r2, [r3, #16]
 80845f4:	461d      	mov	r5, r3
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 80845f6:	4290      	cmp	r0, r2
 80845f8:	bf35      	itete	cc
 80845fa:	6898      	ldrcc	r0, [r3, #8]
 80845fc:	68d8      	ldrcs	r0, [r3, #12]
 80845fe:	2201      	movcc	r2, #1
 8084600:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084602:	4603      	mov	r3, r0
 8084604:	e7f3      	b.n	80845ee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
 8084606:	b132      	cbz	r2, 8084616 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
	{
	  if (__j == begin())
 8084608:	68ca      	ldr	r2, [r1, #12]
 808460a:	4295      	cmp	r5, r2
 808460c:	d00a      	beq.n	8084624 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x42>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 808460e:	4628      	mov	r0, r5
 8084610:	f003 ff93 	bl	808853a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8084614:	e000      	b.n	8084618 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
 8084616:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8084618:	7833      	ldrb	r3, [r6, #0]
 808461a:	7c02      	ldrb	r2, [r0, #16]
 808461c:	429a      	cmp	r2, r3
 808461e:	f04f 0300 	mov.w	r3, #0
 8084622:	d202      	bcs.n	808462a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x48>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8084624:	e884 0028 	stmia.w	r4, {r3, r5}
 8084628:	e001      	b.n	808462e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4c>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
 808462a:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 808462e:	4620      	mov	r0, r4
 8084630:	bd70      	pop	{r4, r5, r6, pc}

08084632 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084632:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8084636:	461f      	mov	r7, r3
 8084638:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808463a:	2024      	movs	r0, #36	; 0x24
 808463c:	460c      	mov	r4, r1
 808463e:	f7fb fd2e 	bl	808009e <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8084642:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8084644:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8084648:	bf18      	it	ne
 808464a:	781b      	ldrbne	r3, [r3, #0]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 808464c:	f106 0704 	add.w	r7, r6, #4
 8084650:	bf1e      	ittt	ne
 8084652:	7403      	strbne	r3, [r0, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084654:	2300      	movne	r3, #0
 8084656:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
 8084658:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 808465a:	4605      	mov	r5, r0
 808465c:	d108      	bne.n	8084670 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
 808465e:	6973      	ldr	r3, [r6, #20]
 8084660:	2b00      	cmp	r3, #0
 8084662:	d05c      	beq.n	808471e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8084664:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
 8084666:	7c03      	ldrb	r3, [r0, #16]
 8084668:	7c0a      	ldrb	r2, [r1, #16]
 808466a:	429a      	cmp	r2, r3
 808466c:	d33a      	bcc.n	80846e4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
 808466e:	e056      	b.n	808471e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
 8084670:	f890 9010 	ldrb.w	r9, [r0, #16]
 8084674:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8084676:	4599      	cmp	r9, r3
 8084678:	d217      	bcs.n	80846aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
 808467a:	68f3      	ldr	r3, [r6, #12]
 808467c:	4620      	mov	r0, r4
 808467e:	42a3      	cmp	r3, r4
 8084680:	d011      	beq.n	80846a6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 8084682:	f003 ff5a 	bl	808853a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8084686:	7c03      	ldrb	r3, [r0, #16]
 8084688:	454b      	cmp	r3, r9
 808468a:	d205      	bcs.n	8084698 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
 808468c:	68c3      	ldr	r3, [r0, #12]
 808468e:	2b00      	cmp	r3, #0
 8084690:	bf14      	ite	ne
 8084692:	4620      	movne	r0, r4
 8084694:	2400      	moveq	r4, #0
 8084696:	e006      	b.n	80846a6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 8084698:	4668      	mov	r0, sp
 808469a:	4642      	mov	r2, r8
 808469c:	4631      	mov	r1, r6
 808469e:	f7ff ffa0 	bl	80845e2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 80846a2:	9c00      	ldr	r4, [sp, #0]
 80846a4:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 80846a6:	4601      	mov	r1, r0
 80846a8:	e01a      	b.n	80846e0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80846aa:	d92f      	bls.n	808470c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
 80846ac:	6933      	ldr	r3, [r6, #16]
 80846ae:	42a3      	cmp	r3, r4
 80846b0:	d013      	beq.n	80846da <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
 80846b2:	4620      	mov	r0, r4
 80846b4:	f003 ff2e 	bl	8088514 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80846b8:	7c03      	ldrb	r3, [r0, #16]
 80846ba:	454b      	cmp	r3, r9
 80846bc:	d905      	bls.n	80846ca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
 80846be:	68e3      	ldr	r3, [r4, #12]
 80846c0:	2b00      	cmp	r3, #0
 80846c2:	bf14      	ite	ne
 80846c4:	4604      	movne	r4, r0
 80846c6:	2000      	moveq	r0, #0
 80846c8:	e008      	b.n	80846dc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 80846ca:	4668      	mov	r0, sp
 80846cc:	4642      	mov	r2, r8
 80846ce:	4631      	mov	r1, r6
 80846d0:	f7ff ff87 	bl	80845e2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 80846d4:	e89d 0011 	ldmia.w	sp, {r0, r4}
 80846d8:	e000      	b.n	80846dc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
 80846da:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 80846dc:	4621      	mov	r1, r4
 80846de:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
 80846e0:	b1a1      	cbz	r1, 808470c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
 80846e2:	b944      	cbnz	r4, 80846f6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 80846e4:	428f      	cmp	r7, r1
 80846e6:	d006      	beq.n	80846f6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 80846e8:	7c08      	ldrb	r0, [r1, #16]
 80846ea:	7c2b      	ldrb	r3, [r5, #16]
 80846ec:	4283      	cmp	r3, r0
 80846ee:	bf2c      	ite	cs
 80846f0:	2000      	movcs	r0, #0
 80846f2:	2001      	movcc	r0, #1
 80846f4:	e000      	b.n	80846f8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
 80846f6:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80846f8:	463b      	mov	r3, r7
 80846fa:	460a      	mov	r2, r1
 80846fc:	4629      	mov	r1, r5
 80846fe:	f003 ff1e 	bl	808853e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 8084702:	6973      	ldr	r3, [r6, #20]
 8084704:	4628      	mov	r0, r5
 8084706:	3301      	adds	r3, #1
 8084708:	6173      	str	r3, [r6, #20]
 808470a:	e010      	b.n	808472e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808470c:	f105 0014 	add.w	r0, r5, #20
 8084710:	f7fb fd55 	bl	80801be <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8084714:	4628      	mov	r0, r5
 8084716:	f7fb fcc6 	bl	80800a6 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
 808471a:	4620      	mov	r0, r4
 808471c:	e007      	b.n	808472e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
 808471e:	4631      	mov	r1, r6
 8084720:	4642      	mov	r2, r8
 8084722:	4668      	mov	r0, sp
 8084724:	f7ff ff5d 	bl	80845e2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8084728:	9c00      	ldr	r4, [sp, #0]
 808472a:	9901      	ldr	r1, [sp, #4]
 808472c:	e7d8      	b.n	80846e0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 808472e:	b003      	add	sp, #12
 8084730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08084734 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8084734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8084736:	1d04      	adds	r4, r0, #4
 8084738:	460a      	mov	r2, r1
 808473a:	4621      	mov	r1, r4
 808473c:	6883      	ldr	r3, [r0, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 808473e:	b14b      	cbz	r3, 8084754 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8084740:	7815      	ldrb	r5, [r2, #0]
 8084742:	7c1e      	ldrb	r6, [r3, #16]
 8084744:	42ae      	cmp	r6, r5
 8084746:	bf3a      	itte	cc
 8084748:	68dd      	ldrcc	r5, [r3, #12]
 808474a:	460b      	movcc	r3, r1
 808474c:	689d      	ldrcs	r5, [r3, #8]
 808474e:	4619      	mov	r1, r3
 8084750:	462b      	mov	r3, r5
 8084752:	e7f4      	b.n	808473e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8084754:	428c      	cmp	r4, r1
 8084756:	d003      	beq.n	8084760 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
 8084758:	7814      	ldrb	r4, [r2, #0]
 808475a:	7c0b      	ldrb	r3, [r1, #16]
 808475c:	429c      	cmp	r4, r3
 808475e:	d208      	bcs.n	8084772 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8084760:	ab04      	add	r3, sp, #16
 8084762:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8084766:	aa02      	add	r2, sp, #8
 8084768:	9200      	str	r2, [sp, #0]
 808476a:	4a04      	ldr	r2, [pc, #16]	; (808477c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
 808476c:	f7ff ff61 	bl	8084632 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8084770:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
 8084772:	f101 0014 	add.w	r0, r1, #20
      }
 8084776:	b004      	add	sp, #16
 8084778:	bd70      	pop	{r4, r5, r6, pc}
 808477a:	bf00      	nop
 808477c:	0808d87a 	.word	0x0808d87a

08084780 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
 8084780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8084784:	4604      	mov	r4, r0
 8084786:	461d      	mov	r5, r3
 8084788:	4689      	mov	r9, r1
 808478a:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 808478c:	2100      	movs	r1, #0
 808478e:	2210      	movs	r2, #16
 8084790:	3008      	adds	r0, #8
 8084792:	f005 fba9 	bl	8089ee8 <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
  command_list[UBI_TCP] = &builderTcp;
 8084796:	2301      	movs	r3, #1
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
 8084798:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
 808479a:	ad02      	add	r5, sp, #8
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 808479c:	f104 0208 	add.w	r2, r4, #8
 80847a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80847a4:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 80847a6:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 80847a8:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
 80847aa:	6162      	str	r2, [r4, #20]
 80847ac:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 80847ae:	61a7      	str	r7, [r4, #24]
 80847b0:	4630      	mov	r0, r6
 80847b2:	f7ff ffbf 	bl	8084734 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 80847b6:	4915      	ldr	r1, [pc, #84]	; (808480c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
 80847b8:	f7ff fec8 	bl	808454c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
 80847bc:	4629      	mov	r1, r5
 80847be:	4630      	mov	r0, r6
 80847c0:	f88d 7007 	strb.w	r7, [sp, #7]
 80847c4:	f7ff ffb6 	bl	8084734 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 80847c8:	4911      	ldr	r1, [pc, #68]	; (8084810 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
 80847ca:	f7ff febf 	bl	808454c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
 80847ce:	2302      	movs	r3, #2
 80847d0:	4629      	mov	r1, r5
 80847d2:	4630      	mov	r0, r6
 80847d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80847d8:	f7ff ffac 	bl	8084734 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 80847dc:	490d      	ldr	r1, [pc, #52]	; (8084814 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
 80847de:	f7ff feb5 	bl	808454c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
 80847e2:	2303      	movs	r3, #3
 80847e4:	4629      	mov	r1, r5
 80847e6:	4630      	mov	r0, r6
 80847e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80847ec:	f7ff ffa2 	bl	8084734 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 80847f0:	4909      	ldr	r1, [pc, #36]	; (8084818 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
 80847f2:	f7ff feab 	bl	808454c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
  _token = token;
}
 80847f6:	4620      	mov	r0, r4
  _iot_protocol = iot_protocol;
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
 80847f8:	4b08      	ldr	r3, [pc, #32]	; (808481c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
 80847fa:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
 80847fe:	4b08      	ldr	r3, [pc, #32]	; (8084820 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
 8084800:	f8c3 8000 	str.w	r8, [r3]
}
 8084804:	b003      	add	sp, #12
 8084806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808480a:	bf00      	nop
 808480c:	08084455 	.word	0x08084455
 8084810:	08084489 	.word	0x08084489
 8084814:	080844b9 	.word	0x080844b9
 8084818:	080844ed 	.word	0x080844ed
 808481c:	2000088c 	.word	0x2000088c
 8084820:	20000888 	.word	0x20000888

08084824 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
 8084824:	b570      	push	{r4, r5, r6, lr}
 8084826:	4d10      	ldr	r5, [pc, #64]	; (8084868 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
 8084828:	f000 fd2a 	bl	8085280 <HAL_Pin_Map>
 808482c:	4c0f      	ldr	r4, [pc, #60]	; (808486c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
 808482e:	4e10      	ldr	r6, [pc, #64]	; (8084870 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
 8084830:	4628      	mov	r0, r5
 8084832:	f001 fd7d 	bl	8086330 <_ZN9TCPClientC1Ev>
 8084836:	4628      	mov	r0, r5
 8084838:	4d0e      	ldr	r5, [pc, #56]	; (8084874 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
 808483a:	4622      	mov	r2, r4
 808483c:	4631      	mov	r1, r6
 808483e:	f003 fe07 	bl	8088450 <__aeabi_atexit>
 8084842:	4628      	mov	r0, r5
 8084844:	f001 fd74 	bl	8086330 <_ZN9TCPClientC1Ev>
 8084848:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
 808484a:	4d0b      	ldr	r5, [pc, #44]	; (8084878 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
 808484c:	4622      	mov	r2, r4
 808484e:	4631      	mov	r1, r6
 8084850:	f003 fdfe 	bl	8088450 <__aeabi_atexit>
 8084854:	4628      	mov	r0, r5
 8084856:	f002 f9cd 	bl	8086bf4 <_ZN3UDPC1Ev>
 808485a:	4622      	mov	r2, r4
 808485c:	4628      	mov	r0, r5
 808485e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084862:	4906      	ldr	r1, [pc, #24]	; (808487c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
 8084864:	f003 bdf4 	b.w	8088450 <__aeabi_atexit>
 8084868:	2000086c 	.word	0x2000086c
 808486c:	20000140 	.word	0x20000140
 8084870:	08083409 	.word	0x08083409
 8084874:	20000850 	.word	0x20000850
 8084878:	20000890 	.word	0x20000890
 808487c:	08084519 	.word	0x08084519

08084880 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
 8084880:	b508      	push	{r3, lr}
 8084882:	f000 fcfd 	bl	8085280 <HAL_Pin_Map>
 8084886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808488a:	f000 bd99 	b.w	80853c0 <HAL_Timer_Get_Milli_Seconds>
	...

08084890 <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
 8084890:	4800      	ldr	r0, [pc, #0]	; (8084894 <_ZN6UbiUDP3getEPKcS1_+0x4>)
 8084892:	4770      	bx	lr
 8084894:	cda2425f 	.word	0xcda2425f

08084898 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
 8084898:	7501      	strb	r1, [r0, #20]
 808489a:	4770      	bx	lr

0808489c <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
 808489c:	b530      	push	{r4, r5, lr}
               const char *token) {
 808489e:	4d06      	ldr	r5, [pc, #24]	; (80848b8 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
  _host = host;
  _user_agent = user_agent;
 80848a0:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
 80848a2:	6005      	str	r5, [r0, #0]
 80848a4:	2500      	movs	r5, #0
 80848a6:	7505      	strb	r5, [r0, #20]
 80848a8:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 80848ac:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
 80848ae:	6185      	str	r5, [r0, #24]
  _host = host;
 80848b0:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 80848b2:	60c3      	str	r3, [r0, #12]
  _port = port;
 80848b4:	6102      	str	r2, [r0, #16]
}
 80848b6:	bd30      	pop	{r4, r5, pc}
 80848b8:	0808d930 	.word	0x0808d930

080848bc <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 80848bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
#elif (PLATFORM_ID == 13 || PLATFORM_ID == 10)  // Boron(13), Electron(10)
  return Cellular.resolve(_host);
 80848be:	684f      	ldr	r7, [r1, #4]

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 80848c0:	b085      	sub	sp, #20
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80848c2:	2600      	movs	r6, #0
 80848c4:	ac04      	add	r4, sp, #16
 80848c6:	4605      	mov	r5, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80848c8:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80848ca:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80848ce:	f006 f88b 	bl	808a9e8 <strlen>
 80848d2:	4b0a      	ldr	r3, [pc, #40]	; (80848fc <_ZN6UbiUDP11getServerIpEv+0x40>)
 80848d4:	9600      	str	r6, [sp, #0]
 80848d6:	b281      	uxth	r1, r0
 80848d8:	685b      	ldr	r3, [r3, #4]
 80848da:	4622      	mov	r2, r4
 80848dc:	4638      	mov	r0, r7
 80848de:	f000 fed7 	bl	8085690 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80848e2:	b120      	cbz	r0, 80848ee <_ZN6UbiUDP11getServerIpEv+0x32>
 80848e4:	4631      	mov	r1, r6
 80848e6:	4628      	mov	r0, r5
 80848e8:	f002 ff20 	bl	808772c <_ZN9IPAddressC1Em>
 80848ec:	e003      	b.n	80848f6 <_ZN6UbiUDP11getServerIpEv+0x3a>
 80848ee:	4621      	mov	r1, r4
 80848f0:	4628      	mov	r0, r5
 80848f2:	f002 ff13 	bl	808771c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 80848f6:	4628      	mov	r0, r5
 80848f8:	b005      	add	sp, #20
 80848fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80848fc:	20000d58 	.word	0x20000d58

08084900 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 8084900:	b530      	push	{r4, r5, lr}
 8084902:	b087      	sub	sp, #28
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084904:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 8084906:	4604      	mov	r4, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084908:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 808490a:	461d      	mov	r5, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 808490c:	f7ff ffd6 	bl	80848bc <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 8084910:	a802      	add	r0, sp, #8
 8084912:	f002 ff11 	bl	8087738 <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
 8084916:	b980      	cbnz	r0, 808493a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    if (_debug) {
 8084918:	7d23      	ldrb	r3, [r4, #20]
 808491a:	b123      	cbz	r3, 8084926 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
 808491c:	f002 ffa4 	bl	8087868 <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
 8084920:	4921      	ldr	r1, [pc, #132]	; (80849a8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa8>)
 8084922:	f001 fe74 	bl	808660e <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
 8084926:	23f3      	movs	r3, #243	; 0xf3
 8084928:	9300      	str	r3, [sp, #0]
 808492a:	2237      	movs	r2, #55	; 0x37
 808492c:	233d      	movs	r3, #61	; 0x3d
 808492e:	21a9      	movs	r1, #169	; 0xa9
 8084930:	a804      	add	r0, sp, #16
 8084932:	f002 ff11 	bl	8087758 <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8084936:	9b05      	ldr	r3, [sp, #20]
 8084938:	9303      	str	r3, [sp, #12]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
 808493a:	2200      	movs	r2, #0
 808493c:	f240 21bd 	movw	r1, #701	; 0x2bd
 8084940:	481a      	ldr	r0, [pc, #104]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084942:	f002 f987 	bl	8086c54 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
 8084946:	2200      	movs	r2, #0
 8084948:	f242 3134 	movw	r1, #9012	; 0x2334
 808494c:	4817      	ldr	r0, [pc, #92]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 808494e:	f002 f863 	bl	8086a18 <_ZN3UDP5beginEtm>
 8084952:	4b17      	ldr	r3, [pc, #92]	; (80849b0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb0>)
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8084954:	f242 3234 	movw	r2, #9012	; 0x2334
 8084958:	9304      	str	r3, [sp, #16]
 808495a:	9b03      	ldr	r3, [sp, #12]
 808495c:	a904      	add	r1, sp, #16
 808495e:	4813      	ldr	r0, [pc, #76]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084960:	9305      	str	r3, [sp, #20]
 8084962:	f002 f991 	bl	8086c88 <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 8084966:	b168      	cbz	r0, 8084984 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8084968:	b165      	cbz	r5, 8084984 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
      return write((const uint8_t *)str, strlen(str));
 808496a:	4628      	mov	r0, r5
 808496c:	f006 f83c 	bl	808a9e8 <strlen>
 8084970:	4629      	mov	r1, r5
 8084972:	4602      	mov	r2, r0
 8084974:	480d      	ldr	r0, [pc, #52]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084976:	f002 f8aa 	bl	8086ace <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 808497a:	b118      	cbz	r0, 8084984 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 808497c:	480b      	ldr	r0, [pc, #44]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 808497e:	f001 fff9 	bl	8086974 <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8084982:	b958      	cbnz	r0, 808499c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
 8084984:	7d23      	ldrb	r3, [r4, #20]
 8084986:	b123      	cbz	r3, 8084992 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x92>
      Serial.println("ERROR sending values with UDP");
 8084988:	f002 ff6e 	bl	8087868 <_Z16_fetch_usbserialv>
 808498c:	4909      	ldr	r1, [pc, #36]	; (80849b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 808498e:	f001 fe3e 	bl	808660e <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
 8084992:	4806      	ldr	r0, [pc, #24]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084994:	f002 f868 	bl	8086a68 <_ZN3UDP4stopEv>
    return false;
 8084998:	2000      	movs	r0, #0
 808499a:	e003      	b.n	80849a4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa4>
  }

  _client_udp_ubi.stop();
 808499c:	4803      	ldr	r0, [pc, #12]	; (80849ac <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 808499e:	f002 f863 	bl	8086a68 <_ZN3UDP4stopEv>
  return true;
 80849a2:	2001      	movs	r0, #1
}
 80849a4:	b007      	add	sp, #28
 80849a6:	bd30      	pop	{r4, r5, pc}
 80849a8:	0808d87b 	.word	0x0808d87b
 80849ac:	200008cc 	.word	0x200008cc
 80849b0:	0808dba0 	.word	0x0808dba0
 80849b4:	0808d907 	.word	0x0808d907

080849b8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 80849b8:	b510      	push	{r4, lr}
 80849ba:	4c06      	ldr	r4, [pc, #24]	; (80849d4 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
 80849bc:	f000 fc60 	bl	8085280 <HAL_Pin_Map>
 80849c0:	4620      	mov	r0, r4
 80849c2:	f002 f917 	bl	8086bf4 <_ZN3UDPC1Ev>
 80849c6:	4620      	mov	r0, r4
 80849c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80849cc:	4a02      	ldr	r2, [pc, #8]	; (80849d8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
 80849ce:	4903      	ldr	r1, [pc, #12]	; (80849dc <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
 80849d0:	f003 bd3e 	b.w	8088450 <__aeabi_atexit>
 80849d4:	200008cc 	.word	0x200008cc
 80849d8:	20000140 	.word	0x20000140
 80849dc:	08084519 	.word	0x08084519

080849e0 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
 80849e0:	4800      	ldr	r0, [pc, #0]	; (80849e4 <_ZN11UbiParticle3getEPKcS1_+0x4>)
 80849e2:	4770      	bx	lr
 80849e4:	cda2425f 	.word	0xcda2425f

080849e8 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
 80849e8:	7401      	strb	r1, [r0, #16]
 80849ea:	4770      	bx	lr

080849ec <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
 80849ec:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
 80849ee:	4c04      	ldr	r4, [pc, #16]	; (8084a00 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
  _host = host;
  _user_agent = user_agent;
 80849f0:	6083      	str	r3, [r0, #8]
  _token = token;
 80849f2:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
 80849f4:	6004      	str	r4, [r0, #0]
 80849f6:	2400      	movs	r4, #0
 80849f8:	7404      	strb	r4, [r0, #16]
  _host = host;
 80849fa:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 80849fc:	60c3      	str	r3, [r0, #12]
}
 80849fe:	bd10      	pop	{r4, pc}
 8084a00:	0808d944 	.word	0x0808d944

08084a04 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8084a04:	b570      	push	{r4, r5, r6, lr}
 8084a06:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8084a08:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8084a0a:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8084a0c:	f000 fec0 	bl	8085790 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 8084a10:	b908      	cbnz	r0, 8084a16 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
 8084a12:	2000      	movs	r0, #0
 8084a14:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
 8084a16:	2c00      	cmp	r4, #0
 8084a18:	dd03      	ble.n	8084a22 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
 8084a1a:	f000 fcd1 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
 8084a1e:	4605      	mov	r5, r0
 8084a20:	e000      	b.n	8084a24 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 8084a22:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8084a24:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8084a26:	b93b      	cbnz	r3, 8084a38 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
 8084a28:	2c00      	cmp	r4, #0
 8084a2a:	dd07      	ble.n	8084a3c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8084a2c:	f000 fcc8 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
 8084a30:	1b40      	subs	r0, r0, r5
 8084a32:	42a0      	cmp	r0, r4
 8084a34:	d302      	bcc.n	8084a3c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8084a36:	e7ec      	b.n	8084a12 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
 8084a38:	2001      	movs	r0, #1
 8084a3a:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 8084a3c:	f000 ff2c 	bl	8085898 <spark_process>
 8084a40:	e7f0      	b.n	8084a24 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

08084a42 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
 8084a42:	b530      	push	{r4, r5, lr}
 8084a44:	b085      	sub	sp, #20
 8084a46:	461a      	mov	r2, r3
 8084a48:	9b08      	ldr	r3, [sp, #32]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8084a4a:	a802      	add	r0, sp, #8
 8084a4c:	781b      	ldrb	r3, [r3, #0]
 8084a4e:	f88d 3000 	strb.w	r3, [sp]
 8084a52:	233c      	movs	r3, #60	; 0x3c
 8084a54:	f002 fcb6 	bl	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8084a58:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
 8084a5a:	2100      	movs	r1, #0
 8084a5c:	4620      	mov	r0, r4
 8084a5e:	f7ff ffd1 	bl	8084a04 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
 8084a62:	7863      	ldrb	r3, [r4, #1]
 8084a64:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
 8084a68:	b133      	cbz	r3, 8084a78 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
 8084a6a:	2100      	movs	r1, #0
 8084a6c:	4620      	mov	r0, r4
 8084a6e:	f7ff ffc9 	bl	8084a04 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8084a72:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
 8084a74:	2b01      	cmp	r3, #1
 8084a76:	d013      	beq.n	8084aa0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
 8084a78:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8084a7a:	9c03      	ldr	r4, [sp, #12]
 8084a7c:	b194      	cbz	r4, 8084aa4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8084a7e:	6863      	ldr	r3, [r4, #4]
 8084a80:	3b01      	subs	r3, #1
 8084a82:	6063      	str	r3, [r4, #4]
 8084a84:	b973      	cbnz	r3, 8084aa4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
 8084a86:	6823      	ldr	r3, [r4, #0]
 8084a88:	4620      	mov	r0, r4
 8084a8a:	689b      	ldr	r3, [r3, #8]
 8084a8c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8084a8e:	68a3      	ldr	r3, [r4, #8]
 8084a90:	3b01      	subs	r3, #1
 8084a92:	60a3      	str	r3, [r4, #8]
 8084a94:	b933      	cbnz	r3, 8084aa4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
 8084a96:	6823      	ldr	r3, [r4, #0]
 8084a98:	4620      	mov	r0, r4
 8084a9a:	68db      	ldr	r3, [r3, #12]
 8084a9c:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
 8084a9e:	e001      	b.n	8084aa4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
 8084aa0:	7b25      	ldrb	r5, [r4, #12]
 8084aa2:	e7ea      	b.n	8084a7a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
 8084aa4:	4628      	mov	r0, r5
 8084aa6:	b005      	add	sp, #20
 8084aa8:	bd30      	pop	{r4, r5, pc}

08084aaa <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
 8084aaa:	f000 bbe9 	b.w	8085280 <HAL_Pin_Map>

08084aae <_ZN9CE_BME280C1Ev>:
 ***************************************************************************/



CE_BME280::CE_BME280()
{}
 8084aae:	4770      	bx	lr

08084ab0 <_ZN9CE_BME2806write8Ehh>:
/*!
    @brief  Writes an 8 bit value over I2C/SPI
*/
/**************************************************************************/
void CE_BME280::write8(byte reg, byte value)
{
 8084ab0:	b570      	push	{r4, r5, r6, lr}
 8084ab2:	4606      	mov	r6, r0
 8084ab4:	4614      	mov	r4, r2
 8084ab6:	460d      	mov	r5, r1
    Wire.beginTransmission((uint8_t)_i2caddr);
 8084ab8:	f003 fc7e 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084abc:	7831      	ldrb	r1, [r6, #0]
 8084abe:	f003 f96e 	bl	8087d9e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8084ac2:	f003 fc79 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084ac6:	6803      	ldr	r3, [r0, #0]
 8084ac8:	4629      	mov	r1, r5
 8084aca:	689b      	ldr	r3, [r3, #8]
 8084acc:	4798      	blx	r3
    Wire.write((uint8_t)value);
 8084ace:	f003 fc73 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084ad2:	6803      	ldr	r3, [r0, #0]
 8084ad4:	4621      	mov	r1, r4
 8084ad6:	689b      	ldr	r3, [r3, #8]
 8084ad8:	4798      	blx	r3
    Wire.endTransmission();
 8084ada:	f003 fc6d 	bl	80883b8 <_Z19__fetch_global_Wirev>
}
 8084ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void CE_BME280::write8(byte reg, byte value)
{
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 8084ae2:	f003 b967 	b.w	8087db4 <_ZN7TwoWire15endTransmissionEv>

08084ae6 <_ZN9CE_BME2805read8Eh>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t CE_BME280::read8(byte reg)
{
 8084ae6:	b538      	push	{r3, r4, r5, lr}
 8084ae8:	4604      	mov	r4, r0
 8084aea:	460d      	mov	r5, r1
  uint8_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 8084aec:	f003 fc64 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084af0:	7821      	ldrb	r1, [r4, #0]
 8084af2:	f003 f954 	bl	8087d9e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8084af6:	f003 fc5f 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084afa:	6803      	ldr	r3, [r0, #0]
 8084afc:	4629      	mov	r1, r5
 8084afe:	689b      	ldr	r3, [r3, #8]
 8084b00:	4798      	blx	r3
    Wire.endTransmission();
 8084b02:	f003 fc59 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b06:	f003 f955 	bl	8087db4 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
 8084b0a:	f003 fc55 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b0e:	7821      	ldrb	r1, [r4, #0]
 8084b10:	2201      	movs	r2, #1
 8084b12:	f003 f941 	bl	8087d98 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 8084b16:	f003 fc4f 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b1a:	6803      	ldr	r3, [r0, #0]
 8084b1c:	695b      	ldr	r3, [r3, #20]
 8084b1e:	4798      	blx	r3
 8084b20:	4604      	mov	r4, r0
    Wire.endTransmission();
 8084b22:	f003 fc49 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b26:	f003 f945 	bl	8087db4 <_ZN7TwoWire15endTransmissionEv>
 
  return value;
}
 8084b2a:	b2e0      	uxtb	r0, r4
 8084b2c:	bd38      	pop	{r3, r4, r5, pc}

08084b2e <_ZN9CE_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C
*/
/**************************************************************************/
uint16_t CE_BME280::read16(byte reg)
{
 8084b2e:	b538      	push	{r3, r4, r5, lr}
 8084b30:	4604      	mov	r4, r0
 8084b32:	460d      	mov	r5, r1
  uint16_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 8084b34:	f003 fc40 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b38:	7821      	ldrb	r1, [r4, #0]
 8084b3a:	f003 f930 	bl	8087d9e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8084b3e:	f003 fc3b 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b42:	6803      	ldr	r3, [r0, #0]
 8084b44:	4629      	mov	r1, r5
 8084b46:	689b      	ldr	r3, [r3, #8]
 8084b48:	4798      	blx	r3
    Wire.endTransmission();
 8084b4a:	f003 fc35 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b4e:	f003 f931 	bl	8087db4 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
 8084b52:	f003 fc31 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b56:	7821      	ldrb	r1, [r4, #0]
 8084b58:	2202      	movs	r2, #2
 8084b5a:	f003 f91d 	bl	8087d98 <_ZN7TwoWire11requestFromEhj>
    value = (Wire.read() << 8) | Wire.read();
 8084b5e:	f003 fc2b 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b62:	6803      	ldr	r3, [r0, #0]
 8084b64:	695b      	ldr	r3, [r3, #20]
 8084b66:	4798      	blx	r3
 8084b68:	4605      	mov	r5, r0
 8084b6a:	f003 fc25 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b6e:	6803      	ldr	r3, [r0, #0]
 8084b70:	695b      	ldr	r3, [r3, #20]
 8084b72:	4798      	blx	r3
 8084b74:	4604      	mov	r4, r0
    Wire.endTransmission();
 8084b76:	f003 fc1f 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084b7a:	f003 f91b 	bl	8087db4 <_ZN7TwoWire15endTransmissionEv>
  

  return value;
 8084b7e:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
}
 8084b82:	b280      	uxth	r0, r0
 8084b84:	bd38      	pop	{r3, r4, r5, pc}

08084b86 <_ZN9CE_BME2809read16_LEEh>:

uint16_t CE_BME280::read16_LE(byte reg) {
 8084b86:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 8084b88:	f7ff ffd1 	bl	8084b2e <_ZN9CE_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 8084b8c:	ba40      	rev16	r0, r0

}
 8084b8e:	b280      	uxth	r0, r0
 8084b90:	bd08      	pop	{r3, pc}

08084b92 <_ZN9CE_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 8084b92:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 8084b94:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 8084b96:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 8084b98:	f7ff fff5 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084b9c:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 8084b9e:	81a0      	strh	r0, [r4, #12]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084ba0:	4620      	mov	r0, r4
 8084ba2:	f7ff fff0 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084ba6:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 8084ba8:	81e0      	strh	r0, [r4, #14]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084baa:	4620      	mov	r0, r4
 8084bac:	f7ff ffeb 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 8084bb0:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 8084bb2:	8220      	strh	r0, [r4, #16]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 8084bb4:	4620      	mov	r0, r4
 8084bb6:	f7ff ffe6 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bba:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 8084bbc:	8260      	strh	r0, [r4, #18]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bbe:	4620      	mov	r0, r4
 8084bc0:	f7ff ffe1 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084bc4:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 8084bc6:	82a0      	strh	r0, [r4, #20]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bc8:	4620      	mov	r0, r4
 8084bca:	f7ff ffdc 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084bce:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 8084bd0:	82e0      	strh	r0, [r4, #22]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bd2:	4620      	mov	r0, r4
 8084bd4:	f7ff ffd7 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084bd8:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 8084bda:	8320      	strh	r0, [r4, #24]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bdc:	4620      	mov	r0, r4
 8084bde:	f7ff ffd2 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084be2:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 8084be4:	8360      	strh	r0, [r4, #26]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084be6:	4620      	mov	r0, r4
 8084be8:	f7ff ffcd 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084bec:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 8084bee:	83a0      	strh	r0, [r4, #28]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bf0:	4620      	mov	r0, r4
 8084bf2:	f7ff ffc8 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084bf6:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 8084bf8:	83e0      	strh	r0, [r4, #30]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084bfa:	4620      	mov	r0, r4
 8084bfc:	f7ff ffc3 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
 8084c00:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 8084c02:	8420      	strh	r0, [r4, #32]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084c04:	4620      	mov	r0, r4
 8084c06:	f7ff ffbe 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8084c0a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 8084c0c:	8460      	strh	r0, [r4, #34]	; 0x22

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8084c0e:	4620      	mov	r0, r4
 8084c10:	f7ff ff69 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084c14:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8084c16:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084c1a:	4620      	mov	r0, r4
 8084c1c:	f7ff ffb3 	bl	8084b86 <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8084c20:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 8084c22:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8084c24:	4620      	mov	r0, r4
 8084c26:	f7ff ff5e 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 8084c2a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8084c2c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 8084c30:	4620      	mov	r0, r4
 8084c32:	f7ff ff58 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
 8084c36:	21e5      	movs	r1, #229	; 0xe5
 8084c38:	4605      	mov	r5, r0
 8084c3a:	4620      	mov	r0, r4
 8084c3c:	f7ff ff53 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
 8084c40:	f000 000f 	and.w	r0, r0, #15
 8084c44:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8084c48:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 8084c4a:	21e6      	movs	r1, #230	; 0xe6
 8084c4c:	4620      	mov	r0, r4
 8084c4e:	f7ff ff4a 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
 8084c52:	21e5      	movs	r1, #229	; 0xe5
 8084c54:	4605      	mov	r5, r0
 8084c56:	4620      	mov	r0, r4
 8084c58:	f7ff ff45 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
 8084c5c:	1100      	asrs	r0, r0, #4
 8084c5e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8084c62:	85a0      	strh	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 8084c64:	21e7      	movs	r1, #231	; 0xe7
 8084c66:	4620      	mov	r0, r4
 8084c68:	f7ff ff3d 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
 8084c6c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8084c70:	bd38      	pop	{r3, r4, r5, pc}

08084c72 <_ZN9CE_BME2805beginEh>:


CE_BME280::CE_BME280()
{}

bool CE_BME280::begin(uint8_t a) {
 8084c72:	b510      	push	{r4, lr}
 8084c74:	4604      	mov	r4, r0
  _i2caddr = a;
 8084c76:	7001      	strb	r1, [r0, #0]

  Wire.begin();
 8084c78:	f003 fb9e 	bl	80883b8 <_Z19__fetch_global_Wirev>
 8084c7c:	f003 f858 	bl	8087d30 <_ZN7TwoWire5beginEv>

  if (read8(BME280_REGISTER_CHIPID) != 0x60)
 8084c80:	21d0      	movs	r1, #208	; 0xd0
 8084c82:	4620      	mov	r0, r4
 8084c84:	f7ff ff2f 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
 8084c88:	2860      	cmp	r0, #96	; 0x60
 8084c8a:	d10e      	bne.n	8084caa <_ZN9CE_BME2805beginEh+0x38>
    return false;

  readCoefficients();
 8084c8c:	4620      	mov	r0, r4
 8084c8e:	f7ff ff80 	bl	8084b92 <_ZN9CE_BME28016readCoefficientsEv>
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
 8084c92:	4620      	mov	r0, r4
 8084c94:	2203      	movs	r2, #3
 8084c96:	21f2      	movs	r1, #242	; 0xf2
 8084c98:	f7ff ff0a 	bl	8084ab0 <_ZN9CE_BME2806write8Ehh>
  write8(BME280_REGISTER_CONTROL, 0x3F);
 8084c9c:	4620      	mov	r0, r4
 8084c9e:	223f      	movs	r2, #63	; 0x3f
 8084ca0:	21f4      	movs	r1, #244	; 0xf4
 8084ca2:	f7ff ff05 	bl	8084ab0 <_ZN9CE_BME2806write8Ehh>
  return true;
 8084ca6:	2001      	movs	r0, #1
 8084ca8:	bd10      	pop	{r4, pc}
  _i2caddr = a;

  Wire.begin();

  if (read8(BME280_REGISTER_CHIPID) != 0x60)
    return false;
 8084caa:	2000      	movs	r0, #0

  readCoefficients();
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
  write8(BME280_REGISTER_CONTROL, 0x3F);
  return true;
}
 8084cac:	bd10      	pop	{r4, pc}
	...

08084cb0 <_ZN9CE_BME28015readTemperatureEv>:
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 8084cb0:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 8084cb2:	21fa      	movs	r1, #250	; 0xfa
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 8084cb4:	4604      	mov	r4, r0
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 8084cb6:	f7ff ff3a 	bl	8084b2e <_ZN9CE_BME2806read16Eh>
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8084cba:	21fc      	movs	r1, #252	; 0xfc
float CE_BME280::readTemperature(void)
{
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
  adc_T <<= 8;
 8084cbc:	0205      	lsls	r5, r0, #8
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8084cbe:	4620      	mov	r0, r4
 8084cc0:	f7ff ff11 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
  adc_T >>= 4;

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 8084cc4:	89a2      	ldrh	r2, [r4, #12]
{
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8084cc6:	4328      	orrs	r0, r5

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
	   ((int32_t)_bme280_calib.dig_T2)) >> 11;

  var2  = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
	     ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 8084cc8:	ebc2 2320 	rsb	r3, r2, r0, asr #8
	   ((int32_t)_bme280_calib.dig_T3)) >> 14;

  t_fine = var1 + var2;
 8084ccc:	435b      	muls	r3, r3
 8084cce:	0052      	lsls	r2, r2, #1
 8084cd0:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8084cd4:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8084cd8:	131b      	asrs	r3, r3, #12
 8084cda:	4350      	muls	r0, r2
 8084cdc:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8084ce0:	4353      	muls	r3, r2
 8084ce2:	139b      	asrs	r3, r3, #14
 8084ce4:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 8084ce8:	60a0      	str	r0, [r4, #8]

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;
 8084cea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8084cee:	3080      	adds	r0, #128	; 0x80
 8084cf0:	1200      	asrs	r0, r0, #8
 8084cf2:	f004 fb77 	bl	80893e4 <__aeabi_i2f>
 8084cf6:	4902      	ldr	r1, [pc, #8]	; (8084d00 <_ZN9CE_BME28015readTemperatureEv+0x50>)
 8084cf8:	f004 fc7c 	bl	80895f4 <__aeabi_fdiv>
}
 8084cfc:	bd38      	pop	{r3, r4, r5, pc}
 8084cfe:	bf00      	nop
 8084d00:	42c80000 	.word	0x42c80000

08084d04 <_ZN9CE_BME28012readPressureEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 8084d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8084d08:	21f7      	movs	r1, #247	; 0xf7
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 8084d0a:	4606      	mov	r6, r0
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8084d0c:	f7ff ff0f 	bl	8084b2e <_ZN9CE_BME2806read16Eh>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084d10:	21f9      	movs	r1, #249	; 0xf9
*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8084d12:	4607      	mov	r7, r0
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084d14:	4630      	mov	r0, r6
 8084d16:	f7ff fee6 	bl	8084ae6 <_ZN9CE_BME2805read8Eh>
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 8084d1a:	68b4      	ldr	r4, [r6, #8]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084d1c:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 8084d20:	17e5      	asrs	r5, r4, #31
 8084d22:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 8084d26:	f145 35ff 	adc.w	r5, r5, #4294967295
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8084d2a:	fba4 8904 	umull	r8, r9, r4, r4
 8084d2e:	fb04 f305 	mul.w	r3, r4, r5
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084d32:	fb02 f105 	mul.w	r1, r2, r5
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8084d36:	eb09 0943 	add.w	r9, r9, r3, lsl #1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084d3a:	17d3      	asrs	r3, r2, #31
 8084d3c:	fb04 1103 	mla	r1, r4, r3, r1
 8084d40:	fba2 2304 	umull	r2, r3, r2, r4
 8084d44:	440b      	add	r3, r1
 8084d46:	0319      	lsls	r1, r3, #12
 8084d48:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084d4c:	4686      	mov	lr, r0
  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084d4e:	0310      	lsls	r0, r2, #12
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 8084d50:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8084d54:	fb02 fc09 	mul.w	ip, r2, r9
 8084d58:	17d3      	asrs	r3, r2, #31
 8084d5a:	fb08 cc03 	mla	ip, r8, r3, ip
 8084d5e:	fba2 2308 	umull	r2, r3, r2, r8
 8084d62:	4463      	add	r3, ip
 8084d64:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8084d68:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 8084d6c:	eb1a 0a00 	adds.w	sl, sl, r0
 8084d70:	8a72      	ldrh	r2, [r6, #18]
 8084d72:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8084d76:	eb4b 0b01 	adc.w	fp, fp, r1
 8084d7a:	f11a 0000 	adds.w	r0, sl, #0
 8084d7e:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 8084d82:	fba0 ab02 	umull	sl, fp, r0, r2
 8084d86:	fb02 bb01 	mla	fp, r2, r1, fp
 8084d8a:	ea4f 026b 	mov.w	r2, fp, asr #1
 8084d8e:	ea4f 73eb 	mov.w	r3, fp, asr #31

  if (var1 == 0) {
 8084d92:	ea52 0103 	orrs.w	r1, r2, r3
 8084d96:	f000 8082 	beq.w	8084e9e <_ZN9CE_BME28012readPressureEv+0x19a>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8084d9a:	f9b6 a01c 	ldrsh.w	sl, [r6, #28]
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084d9e:	ea4e 2707 	orr.w	r7, lr, r7, lsl #8
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8084da2:	fb0a f109 	mul.w	r1, sl, r9
 8084da6:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8084daa:	fb08 110b 	mla	r1, r8, fp, r1
 8084dae:	fbaa 8908 	umull	r8, r9, sl, r8
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8084db2:	f9b6 a01a 	ldrsh.w	sl, [r6, #26]
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8084db6:	4489      	add	r9, r1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8084db8:	fb0a f105 	mul.w	r1, sl, r5
 8084dbc:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8084dc0:	fb04 110b 	mla	r1, r4, fp, r1
 8084dc4:	fbaa 4504 	umull	r4, r5, sl, r4
 8084dc8:	440d      	add	r5, r1
 8084dca:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 8084dce:	ea4f 4a44 	mov.w	sl, r4, lsl #17

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 8084dd2:	113f      	asrs	r7, r7, #4
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8084dd4:	eb1a 0a08 	adds.w	sl, sl, r8

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 8084dd8:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8084ddc:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 8084de0:	eb4b 0b09 	adc.w	fp, fp, r9

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 8084de4:	ea4f 79e7 	mov.w	r9, r7, asr #31
 8084de8:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 8084dec:	ea45 0557 	orr.w	r5, r5, r7, lsr #1
 8084df0:	07fc      	lsls	r4, r7, #31
 8084df2:	f640 4735 	movw	r7, #3125	; 0xc35
 8084df6:	f9b6 0018 	ldrsh.w	r0, [r6, #24]
 8084dfa:	f04f 0800 	mov.w	r8, #0
 8084dfe:	eb18 080a 	adds.w	r8, r8, sl
 8084e02:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8084e06:	eb49 090b 	adc.w	r9, r9, fp
 8084e0a:	ebb4 0408 	subs.w	r4, r4, r8
 8084e0e:	fba4 0107 	umull	r0, r1, r4, r7
 8084e12:	eb65 0509 	sbc.w	r5, r5, r9
 8084e16:	fb07 1105 	mla	r1, r7, r5, r1
 8084e1a:	f004 fd39 	bl	8089890 <__aeabi_ldivmod>
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084e1e:	f9b6 2022 	ldrsh.w	r2, [r6, #34]	; 0x22
  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8084e22:	134c      	asrs	r4, r1, #13
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084e24:	fb02 f704 	mul.w	r7, r2, r4
  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8084e28:	0b45      	lsrs	r5, r0, #13
 8084e2a:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084e2e:	17d3      	asrs	r3, r2, #31
 8084e30:	fb05 7703 	mla	r7, r5, r3, r7
 8084e34:	fba2 2305 	umull	r2, r3, r2, r5
 8084e38:	4354      	muls	r4, r2
 8084e3a:	443b      	add	r3, r7
 8084e3c:	fb05 4403 	mla	r4, r5, r3, r4
 8084e40:	fba2 2305 	umull	r2, r3, r2, r5
 8084e44:	4423      	add	r3, r4
 8084e46:	0e54      	lsrs	r4, r2, #25
 8084e48:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 8084e4c:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8084e50:	1824      	adds	r4, r4, r0
 8084e52:	ea4f 6563 	mov.w	r5, r3, asr #25
 8084e56:	414d      	adcs	r5, r1
 8084e58:	4351      	muls	r1, r2
 8084e5a:	17d3      	asrs	r3, r2, #31
 8084e5c:	fb00 1303 	mla	r3, r0, r3, r1
 8084e60:	fba2 0100 	umull	r0, r1, r2, r0
 8084e64:	4419      	add	r1, r3
 8084e66:	0cc2      	lsrs	r2, r0, #19
 8084e68:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8084e6c:	1912      	adds	r2, r2, r4
  return (float)p/256;
 8084e6e:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084e72:	ea4f 43e1 	mov.w	r3, r1, asr #19
 8084e76:	416b      	adcs	r3, r5
 8084e78:	0a10      	lsrs	r0, r2, #8
  return (float)p/256;
 8084e7a:	17e5      	asrs	r5, r4, #31
 8084e7c:	0122      	lsls	r2, r4, #4
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084e7e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8084e82:	1219      	asrs	r1, r3, #8
  return (float)p/256;
 8084e84:	012b      	lsls	r3, r5, #4
 8084e86:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8084e8a:	1880      	adds	r0, r0, r2
 8084e8c:	4159      	adcs	r1, r3
 8084e8e:	f004 fabf 	bl	8089410 <__aeabi_l2f>
 8084e92:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8084e96:	f004 faf9 	bl	808948c <__aeabi_fmul>
 8084e9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
 8084e9e:	2000      	movs	r0, #0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
  return (float)p/256;
}
 8084ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08084ea4 <_ZN9CE_BME28012readHumidityEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readHumidity(void) {
 8084ea4:	b510      	push	{r4, lr}
 8084ea6:	4604      	mov	r4, r0

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 8084ea8:	21fd      	movs	r1, #253	; 0xfd
 8084eaa:	f7ff fe40 	bl	8084b2e <_ZN9CE_BME2806read16Eh>
  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8084eae:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 8084eb2:	68a2      	ldr	r2, [r4, #8]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8084eb4:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 8084eb8:	051b      	lsls	r3, r3, #20

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 8084eba:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8084ebe:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
 8084ec2:	fb02 0011 	mls	r0, r2, r1, r0
 8084ec6:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8084eca:	13d8      	asrs	r0, r3, #15
	       (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
		    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
		  ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 8084ecc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8084ed0:	f994 102e 	ldrsb.w	r1, [r4, #46]	; 0x2e
 8084ed4:	4353      	muls	r3, r2
 8084ed6:	434a      	muls	r2, r1
 8084ed8:	12db      	asrs	r3, r3, #11
 8084eda:	1292      	asrs	r2, r2, #10
 8084edc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8084ee0:	4353      	muls	r3, r2
 8084ee2:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 8084ee6:	129b      	asrs	r3, r3, #10
 8084ee8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8084eec:	4353      	muls	r3, r2
 8084eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8084ef2:	139b      	asrs	r3, r3, #14
 8084ef4:	4343      	muls	r3, r0

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8084ef6:	13d8      	asrs	r0, r3, #15
			     ((int32_t)_bme280_calib.dig_H1)) >> 4));
 8084ef8:	4340      	muls	r0, r0
 8084efa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8084efe:	11c0      	asrs	r0, r0, #7
 8084f00:	4350      	muls	r0, r2
 8084f02:	eba3 1020 	sub.w	r0, r3, r0, asr #4

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8084f06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
  float h = (v_x1_u32r>>12);
  return  h / 1024.0;
 8084f0a:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8084f0e:	bfa8      	it	ge
 8084f10:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 8084f14:	1300      	asrs	r0, r0, #12
 8084f16:	f004 fa65 	bl	80893e4 <__aeabi_i2f>
 8084f1a:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8084f1e:	f004 fab5 	bl	808948c <__aeabi_fmul>
}
 8084f22:	bd10      	pop	{r4, pc}

08084f24 <_GLOBAL__sub_I__ZN9CE_BME280C2Ev>:
 8084f24:	f000 b9ac 	b.w	8085280 <HAL_Pin_Map>

08084f28 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 8084f28:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8084f2a:	2101      	movs	r1, #1
 8084f2c:	4806      	ldr	r0, [pc, #24]	; (8084f48 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8084f2e:	f003 f927 	bl	8088180 <TIM_GetITStatus>
 8084f32:	b140      	cbz	r0, 8084f46 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8084f34:	2101      	movs	r1, #1
 8084f36:	4804      	ldr	r0, [pc, #16]	; (8084f48 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8084f38:	f003 f92d 	bl	8088196 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 8084f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM3_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[0]();
 8084f40:	4b02      	ldr	r3, [pc, #8]	; (8084f4c <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 8084f42:	681b      	ldr	r3, [r3, #0]
 8084f44:	4718      	bx	r3
 8084f46:	bd10      	pop	{r4, pc}
 8084f48:	40000400 	.word	0x40000400
 8084f4c:	20000908 	.word	0x20000908

08084f50 <Wiring_TIM4_Interrupt_Handler_override>:
	}
}

void Wiring_TIM4_Interrupt_Handler_override()
{
 8084f50:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 8084f52:	2101      	movs	r1, #1
 8084f54:	4806      	ldr	r0, [pc, #24]	; (8084f70 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8084f56:	f003 f913 	bl	8088180 <TIM_GetITStatus>
 8084f5a:	b140      	cbz	r0, 8084f6e <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8084f5c:	2101      	movs	r1, #1
 8084f5e:	4804      	ldr	r0, [pc, #16]	; (8084f70 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8084f60:	f003 f919 	bl	8088196 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 8084f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM4_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[1]();
 8084f68:	4b02      	ldr	r3, [pc, #8]	; (8084f74 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 8084f6a:	685b      	ldr	r3, [r3, #4]
 8084f6c:	4718      	bx	r3
 8084f6e:	bd10      	pop	{r4, pc}
 8084f70:	40000800 	.word	0x40000800
 8084f74:	20000908 	.word	0x20000908

08084f78 <Wiring_TIM5_Interrupt_Handler_override>:
	}
}

void Wiring_TIM5_Interrupt_Handler_override()
{
 8084f78:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 8084f7a:	2101      	movs	r1, #1
 8084f7c:	4806      	ldr	r0, [pc, #24]	; (8084f98 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8084f7e:	f003 f8ff 	bl	8088180 <TIM_GetITStatus>
 8084f82:	b140      	cbz	r0, 8084f96 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8084f84:	2101      	movs	r1, #1
 8084f86:	4804      	ldr	r0, [pc, #16]	; (8084f98 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8084f88:	f003 f905 	bl	8088196 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 8084f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM5_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[2]();
 8084f90:	4b02      	ldr	r3, [pc, #8]	; (8084f9c <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 8084f92:	689b      	ldr	r3, [r3, #8]
 8084f94:	4718      	bx	r3
 8084f96:	bd10      	pop	{r4, pc}
 8084f98:	40000c00 	.word	0x40000c00
 8084f9c:	20000908 	.word	0x20000908

08084fa0 <Wiring_TIM6_Interrupt_Handler_override>:
	}
}

void Wiring_TIM6_Interrupt_Handler_override()
{
 8084fa0:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 8084fa2:	2101      	movs	r1, #1
 8084fa4:	4806      	ldr	r0, [pc, #24]	; (8084fc0 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8084fa6:	f003 f8eb 	bl	8088180 <TIM_GetITStatus>
 8084faa:	b140      	cbz	r0, 8084fbe <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8084fac:	2101      	movs	r1, #1
 8084fae:	4804      	ldr	r0, [pc, #16]	; (8084fc0 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8084fb0:	f003 f8f1 	bl	8088196 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 8084fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM6_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[3]();
 8084fb8:	4b02      	ldr	r3, [pc, #8]	; (8084fc4 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 8084fba:	68db      	ldr	r3, [r3, #12]
 8084fbc:	4718      	bx	r3
 8084fbe:	bd10      	pop	{r4, pc}
 8084fc0:	40001000 	.word	0x40001000
 8084fc4:	20000908 	.word	0x20000908

08084fc8 <Wiring_TIM7_Interrupt_Handler_override>:
	}
}

void Wiring_TIM7_Interrupt_Handler_override()
{
 8084fc8:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8084fca:	2101      	movs	r1, #1
 8084fcc:	4806      	ldr	r0, [pc, #24]	; (8084fe8 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8084fce:	f003 f8d7 	bl	8088180 <TIM_GetITStatus>
 8084fd2:	b140      	cbz	r0, 8084fe6 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8084fd4:	2101      	movs	r1, #1
 8084fd6:	4804      	ldr	r0, [pc, #16]	; (8084fe8 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8084fd8:	f003 f8dd 	bl	8088196 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 8084fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM7_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[4]();
 8084fe0:	4b02      	ldr	r3, [pc, #8]	; (8084fec <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 8084fe2:	691b      	ldr	r3, [r3, #16]
 8084fe4:	4718      	bx	r3
 8084fe6:	bd10      	pop	{r4, pc}
 8084fe8:	40001400 	.word	0x40001400
 8084fec:	20000908 	.word	0x20000908

08084ff0 <_ZN13IntervalTimer9start_SITEmb>:

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 8084ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8084ff2:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 8084ff4:	b085      	sub	sp, #20
 8084ff6:	4605      	mov	r5, r0
 8084ff8:	460f      	mov	r7, r1
 8084ffa:	4616      	mov	r6, r2
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8084ffc:	2b04      	cmp	r3, #4
 8084ffe:	d830      	bhi.n	8085062 <_ZN13IntervalTimer9start_SITEmb+0x72>
 8085000:	e8df f003 	tbb	[pc, r3]
 8085004:	1e150c03 	.word	0x1e150c03
 8085008:	27          	.byte	0x27
 8085009:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 808500a:	2101      	movs	r1, #1
 808500c:	2002      	movs	r0, #2
 808500e:	f002 ff93 	bl	8087f38 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085012:	231d      	movs	r3, #29
 8085014:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM3;
 8085018:	4c29      	ldr	r4, [pc, #164]	; (80850c0 <_ZN13IntervalTimer9start_SITEmb+0xd0>)
		break;
 808501a:	e022      	b.n	8085062 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 1:		// TIM4
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 808501c:	2101      	movs	r1, #1
 808501e:	2004      	movs	r0, #4
 8085020:	f002 ff8a 	bl	8087f38 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8085024:	231e      	movs	r3, #30
 8085026:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM4;
 808502a:	4c26      	ldr	r4, [pc, #152]	; (80850c4 <_ZN13IntervalTimer9start_SITEmb+0xd4>)
		break;
 808502c:	e019      	b.n	8085062 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 2:		// TIM5
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 808502e:	2101      	movs	r1, #1
 8085030:	2008      	movs	r0, #8
 8085032:	f002 ff81 	bl	8087f38 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8085036:	2332      	movs	r3, #50	; 0x32
 8085038:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM5;
 808503c:	4c22      	ldr	r4, [pc, #136]	; (80850c8 <_ZN13IntervalTimer9start_SITEmb+0xd8>)
		break;
 808503e:	e010      	b.n	8085062 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 3:		// TIM6
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8085040:	2101      	movs	r1, #1
 8085042:	2010      	movs	r0, #16
 8085044:	f002 ff78 	bl	8087f38 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085048:	2336      	movs	r3, #54	; 0x36
 808504a:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM6;
 808504e:	4c1f      	ldr	r4, [pc, #124]	; (80850cc <_ZN13IntervalTimer9start_SITEmb+0xdc>)
		break;
 8085050:	e007      	b.n	8085062 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8085052:	2101      	movs	r1, #1
 8085054:	2020      	movs	r0, #32
 8085056:	f002 ff6f 	bl	8087f38 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
		TIMx = TIM7;
 808505a:	4c1d      	ldr	r4, [pc, #116]	; (80850d0 <_ZN13IntervalTimer9start_SITEmb+0xe0>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 808505c:	2337      	movs	r3, #55	; 0x37
 808505e:	f88d 3000 	strb.w	r3, [sp]
		break;
#endif
	}
	
	// Initialize Timer
	switch (scale) {
 8085062:	b11e      	cbz	r6, 808506c <_ZN13IntervalTimer9start_SITEmb+0x7c>
 8085064:	2e01      	cmp	r6, #1
 8085066:	d101      	bne.n	808506c <_ZN13IntervalTimer9start_SITEmb+0x7c>
		case uSec:
			prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
			break;
		case hmSec:
			prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 8085068:	88ae      	ldrh	r6, [r5, #4]
			break;
 808506a:	e000      	b.n	808506e <_ZN13IntervalTimer9start_SITEmb+0x7e>
		default:
			prescaler = SIT_PRESCALERu;
 808506c:	886e      	ldrh	r6, [r5, #2]
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 808506e:	7a6a      	ldrb	r2, [r5, #9]
 8085070:	68e9      	ldr	r1, [r5, #12]
 8085072:	4b18      	ldr	r3, [pc, #96]	; (80850d4 <_ZN13IntervalTimer9start_SITEmb+0xe4>)

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8085074:	2501      	movs	r5, #1
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 8085076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
 808507a:	4668      	mov	r0, sp

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
 808507c:	230a      	movs	r3, #10
 808507e:	f88d 3001 	strb.w	r3, [sp, #1]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8085082:	f88d 5002 	strb.w	r5, [sp, #2]
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8085086:	f88d 5003 	strb.w	r5, [sp, #3]
    	NVIC_Init(&nvicStructure);
 808508a:	f002 ff1d 	bl	8087ec8 <NVIC_Init>
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 808508e:	2300      	movs	r3, #0
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 8085090:	a901      	add	r1, sp, #4
 8085092:	4620      	mov	r0, r4
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8085094:	f8ad 3006 	strh.w	r3, [sp, #6]
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8085098:	f8ad 300c 	strh.w	r3, [sp, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 808509c:	f88d 300e 	strb.w	r3, [sp, #14]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
 80850a0:	f8ad 6004 	strh.w	r6, [sp, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = Period;
 80850a4:	9702      	str	r7, [sp, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80850a6:	f003 f821 	bl	80880ec <TIM_TimeBaseInit>
	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 80850aa:	462a      	mov	r2, r5
 80850ac:	4629      	mov	r1, r5
 80850ae:	4620      	mov	r0, r4
 80850b0:	f003 f87e 	bl	80881b0 <TIM_ITConfig>
	TIM_Cmd(TIMx, ENABLE);
 80850b4:	4629      	mov	r1, r5
 80850b6:	4620      	mov	r0, r4
 80850b8:	f003 f856 	bl	8088168 <TIM_Cmd>
}
 80850bc:	b005      	add	sp, #20
 80850be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80850c0:	40000400 	.word	0x40000400
 80850c4:	40000800 	.word	0x40000800
 80850c8:	40000c00 	.word	0x40000c00
 80850cc:	40001000 	.word	0x40001000
 80850d0:	40001400 	.word	0x40001400
 80850d4:	20000908 	.word	0x20000908

080850d8 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>:
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 80850d8:	2b04      	cmp	r3, #4
// enables the SIT clock if not already enabled, then checks to
// see if any SITs are available for use. if one is available,
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {
 80850da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80850dc:	4606      	mov	r6, r0
 80850de:	460f      	mov	r7, r1
 80850e0:	4696      	mov	lr, r2
 80850e2:	461c      	mov	r4, r3
 80850e4:	4d0e      	ldr	r5, [pc, #56]	; (8085120 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 80850e6:	d911      	bls.n	808510c <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x34>
 80850e8:	2400      	movs	r4, #0
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 80850ea:	5d2a      	ldrb	r2, [r5, r4]
 80850ec:	b2e3      	uxtb	r3, r4
 80850ee:	b94a      	cbnz	r2, 8085104 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x2c>
				SIT_id = tid;
 80850f0:	7273      	strb	r3, [r6, #9]
				start_SIT(Period, scale);
 80850f2:	4630      	mov	r0, r6
 80850f4:	4672      	mov	r2, lr
 80850f6:	4639      	mov	r1, r7
 80850f8:	f7ff ff7a 	bl	8084ff0 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 80850fc:	4b08      	ldr	r3, [pc, #32]	; (8085120 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)
 80850fe:	2001      	movs	r0, #1
 8085100:	5518      	strb	r0, [r3, r4]
 8085102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085104:	3401      	adds	r4, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 8085106:	2c05      	cmp	r4, #5
 8085108:	d1ef      	bne.n	80850ea <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x12>
 808510a:	e007      	b.n	808511c <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
		if (!SIT_used[id]) {
 808510c:	5ceb      	ldrb	r3, [r5, r3]
 808510e:	b92b      	cbnz	r3, 808511c <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
			SIT_id = id;
 8085110:	7244      	strb	r4, [r0, #9]
			start_SIT(Period, scale);
 8085112:	f7ff ff6d 	bl	8084ff0 <_ZN13IntervalTimer9start_SITEmb>
			SIT_used[id] = true;
 8085116:	2001      	movs	r0, #1
 8085118:	5528      	strb	r0, [r5, r4]
			return true;
 808511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	
	// Specified or no auto-allocate SIT available
	return false;
 808511c:	2000      	movs	r0, #0
}
 808511e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085120:	2000091c 	.word	0x2000091c

08085124 <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 8085124:	b573      	push	{r0, r1, r4, r5, r6, lr}
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8085126:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 8085128:	4606      	mov	r6, r0
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 808512a:	2b04      	cmp	r3, #4
 808512c:	d81c      	bhi.n	8085168 <_ZN13IntervalTimer8stop_SITEv+0x44>
 808512e:	e8df f003 	tbb	[pc, r3]
 8085132:	0803      	.short	0x0803
 8085134:	120d      	.short	0x120d
 8085136:	17          	.byte	0x17
 8085137:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085138:	231d      	movs	r3, #29
 808513a:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM3;
 808513e:	4c13      	ldr	r4, [pc, #76]	; (808518c <_ZN13IntervalTimer8stop_SITEv+0x68>)
		break;
 8085140:	e012      	b.n	8085168 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 1:		// TIM4
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8085142:	231e      	movs	r3, #30
 8085144:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM4;
 8085148:	4c11      	ldr	r4, [pc, #68]	; (8085190 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
		break;
 808514a:	e00d      	b.n	8085168 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 2:		// TIM5
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 808514c:	2332      	movs	r3, #50	; 0x32
 808514e:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM5;
 8085152:	4c10      	ldr	r4, [pc, #64]	; (8085194 <_ZN13IntervalTimer8stop_SITEv+0x70>)
		break;
 8085154:	e008      	b.n	8085168 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085156:	2336      	movs	r3, #54	; 0x36
 8085158:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM6;
 808515c:	4c0e      	ldr	r4, [pc, #56]	; (8085198 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		break;
 808515e:	e003      	b.n	8085168 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085160:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 8085162:	4c0e      	ldr	r4, [pc, #56]	; (808519c <_ZN13IntervalTimer8stop_SITEv+0x78>)
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085164:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM7;
		break;
#endif
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
 8085168:	2100      	movs	r1, #0
 808516a:	4620      	mov	r0, r4
 808516c:	f002 fffc 	bl	8088168 <TIM_Cmd>
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8085170:	2500      	movs	r5, #0
    NVIC_Init(&nvicStructure);
 8085172:	a801      	add	r0, sp, #4
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8085174:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&nvicStructure);
 8085178:	f002 fea6 	bl	8087ec8 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 808517c:	4620      	mov	r0, r4
 808517e:	f002 feff 	bl	8087f80 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 8085182:	7a73      	ldrb	r3, [r6, #9]
 8085184:	4a06      	ldr	r2, [pc, #24]	; (80851a0 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 8085186:	54d5      	strb	r5, [r2, r3]
}
 8085188:	b002      	add	sp, #8
 808518a:	bd70      	pop	{r4, r5, r6, pc}
 808518c:	40000400 	.word	0x40000400
 8085190:	40000800 	.word	0x40000800
 8085194:	40000c00 	.word	0x40000c00
 8085198:	40001000 	.word	0x40001000
 808519c:	40001400 	.word	0x40001400
 80851a0:	2000091c 	.word	0x2000091c

080851a4 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>:
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 80851a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80851a8:	461f      	mov	r7, r3

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 80851aa:	7a03      	ldrb	r3, [r0, #8]
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 80851ac:	4604      	mov	r4, r0
 80851ae:	4688      	mov	r8, r1
 80851b0:	4616      	mov	r6, r2
 80851b2:	f89d 5018 	ldrb.w	r5, [sp, #24]

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 80851b6:	b11b      	cbz	r3, 80851c0 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x1c>
		stop_SIT();
 80851b8:	f7ff ffb4 	bl	8085124 <_ZN13IntervalTimer8stop_SITEv>
		status = TIMER_OFF;
 80851bc:	2300      	movs	r3, #0
 80851be:	7223      	strb	r3, [r4, #8]
	}
	// store callback pointer
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 80851c0:	2d04      	cmp	r5, #4
	if (status == TIMER_SIT) {
		stop_SIT();
		status = TIMER_OFF;
	}
	// store callback pointer
	myISRcallback = isrCallback;
 80851c2:	f8c4 800c 	str.w	r8, [r4, #12]

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 80851c6:	d810      	bhi.n	80851ea <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x46>
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
 80851c8:	462b      	mov	r3, r5
 80851ca:	463a      	mov	r2, r7
 80851cc:	4631      	mov	r1, r6
 80851ce:	4620      	mov	r0, r4
 80851d0:	f7ff ff82 	bl	80850d8 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>
 80851d4:	b120      	cbz	r0, 80851e0 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3c>
 80851d6:	2301      	movs	r3, #1
 80851d8:	e003      	b.n	80851e2 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 80851da:	3501      	adds	r5, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 80851dc:	2d05      	cmp	r5, #5
 80851de:	d106      	bne.n	80851ee <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x4a>
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
		else status = TIMER_OFF;
 80851e0:	2300      	movs	r3, #0
 80851e2:	7223      	strb	r3, [r4, #8]

	// check for success and return
	if (status != TIMER_OFF) return true;
	return false;

}
 80851e4:	7a20      	ldrb	r0, [r4, #8]
 80851e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 80851ea:	4b08      	ldr	r3, [pc, #32]	; (808520c <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 80851ec:	2500      	movs	r5, #0
 80851ee:	5ce9      	ldrb	r1, [r5, r3]
 80851f0:	b2ea      	uxtb	r2, r5
 80851f2:	2900      	cmp	r1, #0
 80851f4:	d1f1      	bne.n	80851da <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x36>
				SIT_id = tid;
 80851f6:	7262      	strb	r2, [r4, #9]
				start_SIT(Period, scale);
 80851f8:	4631      	mov	r1, r6
 80851fa:	463a      	mov	r2, r7
 80851fc:	4620      	mov	r0, r4
 80851fe:	f7ff fef7 	bl	8084ff0 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 8085202:	4a02      	ldr	r2, [pc, #8]	; (808520c <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 8085204:	2301      	movs	r3, #1
 8085206:	5553      	strb	r3, [r2, r5]
 8085208:	e7eb      	b.n	80851e2 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 808520a:	bf00      	nop
 808520c:	2000091c 	.word	0x2000091c

08085210 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
	if (status == TIMER_SIT) stop_SIT();
 8085210:	7a03      	ldrb	r3, [r0, #8]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
 8085212:	b510      	push	{r4, lr}
 8085214:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 8085216:	b10b      	cbz	r3, 808521c <_ZN13IntervalTimer3endEv+0xc>
 8085218:	f7ff ff84 	bl	8085124 <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 808521c:	2300      	movs	r3, #0
 808521e:	7223      	strb	r3, [r4, #8]
 8085220:	bd10      	pop	{r4, pc}
	...

08085224 <_ZN13IntervalTimer15resetPeriod_SITEmb>:
// ------------------------------------------------------------
// Set new period for the SIT without
// removing the SIT.
// ------------------------------------------------------------
void IntervalTimer::resetPeriod_SIT(intPeriod newPeriod, bool scale)
{
 8085224:	b510      	push	{r4, lr}
	//TIM_TimeBaseInitTypeDef timerInitStructure;
	TIM_TypeDef* TIMx;
	intPeriod prescaler;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8085226:	7a44      	ldrb	r4, [r0, #9]
 8085228:	2c04      	cmp	r4, #4
 808522a:	d80d      	bhi.n	8085248 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 808522c:	e8df f004 	tbb	[pc, r4]
 8085230:	09070503 	.word	0x09070503
 8085234:	0b          	.byte	0x0b
 8085235:	00          	.byte	0x00
	case 2:		// TIM4
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		TIMx = TIM3;
 8085236:	4b0c      	ldr	r3, [pc, #48]	; (8085268 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x44>)
 8085238:	e006      	b.n	8085248 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
		break;
	case 1:		// TIM4
		TIMx = TIM4;
 808523a:	4b0c      	ldr	r3, [pc, #48]	; (808526c <_ZN13IntervalTimer15resetPeriod_SITEmb+0x48>)
		break;
 808523c:	e004      	b.n	8085248 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 2:		// TIM5
		TIMx = TIM5;
 808523e:	4b0c      	ldr	r3, [pc, #48]	; (8085270 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x4c>)
		break;
 8085240:	e002      	b.n	8085248 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 3:		// TIM6
		TIMx = TIM6;
 8085242:	4b0c      	ldr	r3, [pc, #48]	; (8085274 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x50>)
		break;
 8085244:	e000      	b.n	8085248 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 4:		// TIM7
		TIMx = TIM7;
 8085246:	4b0c      	ldr	r3, [pc, #48]	; (8085278 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x54>)
		break;
#endif
	}

	switch (scale) {
 8085248:	b11a      	cbz	r2, 8085252 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
 808524a:	2a01      	cmp	r2, #1
 808524c:	d101      	bne.n	8085252 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
	case uSec:
		prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
		break;
	case hmSec:
		prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 808524e:	8882      	ldrh	r2, [r0, #4]
		break;
 8085250:	e000      	b.n	8085254 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x30>
	default:
		scale = uSec;				// Default to microseconds
		prescaler = SIT_PRESCALERu;
 8085252:	8842      	ldrh	r2, [r0, #2]
		break;
	}

	TIMx->ARR = newPeriod;
 8085254:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIMx->PSC = prescaler;
 8085256:	b292      	uxth	r2, r2
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8085258:	2101      	movs	r1, #1
		prescaler = SIT_PRESCALERu;
		break;
	}

	TIMx->ARR = newPeriod;
	TIMx->PSC = prescaler;
 808525a:	851a      	strh	r2, [r3, #40]	; 0x28
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 808525c:	8299      	strh	r1, [r3, #20]
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 808525e:	4618      	mov	r0, r3
}
 8085260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	TIMx->ARR = newPeriod;
	TIMx->PSC = prescaler;
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 8085264:	f002 bf97 	b.w	8088196 <TIM_ClearITPendingBit>
 8085268:	40000400 	.word	0x40000400
 808526c:	40000800 	.word	0x40000800
 8085270:	40000c00 	.word	0x40000c00
 8085274:	40001000 	.word	0x40001000
 8085278:	40001400 	.word	0x40001400

0808527c <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 808527c:	f000 b800 	b.w	8085280 <HAL_Pin_Map>

08085280 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8085280:	b508      	push	{r3, lr}
 8085282:	4b02      	ldr	r3, [pc, #8]	; (808528c <HAL_Pin_Map+0xc>)
 8085284:	681b      	ldr	r3, [r3, #0]
 8085286:	681b      	ldr	r3, [r3, #0]
 8085288:	9301      	str	r3, [sp, #4]
 808528a:	bd08      	pop	{r3, pc}
 808528c:	080401b0 	.word	0x080401b0

08085290 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8085290:	b508      	push	{r3, lr}
 8085292:	4b02      	ldr	r3, [pc, #8]	; (808529c <HAL_Validate_Pin_Function+0xc>)
 8085294:	681b      	ldr	r3, [r3, #0]
 8085296:	685b      	ldr	r3, [r3, #4]
 8085298:	9301      	str	r3, [sp, #4]
 808529a:	bd08      	pop	{r3, pc}
 808529c:	080401b0 	.word	0x080401b0

080852a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80852a0:	b508      	push	{r3, lr}
 80852a2:	4b02      	ldr	r3, [pc, #8]	; (80852ac <HAL_Pin_Mode+0xc>)
 80852a4:	681b      	ldr	r3, [r3, #0]
 80852a6:	689b      	ldr	r3, [r3, #8]
 80852a8:	9301      	str	r3, [sp, #4]
 80852aa:	bd08      	pop	{r3, pc}
 80852ac:	080401b0 	.word	0x080401b0

080852b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80852b0:	b508      	push	{r3, lr}
 80852b2:	4b02      	ldr	r3, [pc, #8]	; (80852bc <HAL_Get_Pin_Mode+0xc>)
 80852b4:	681b      	ldr	r3, [r3, #0]
 80852b6:	68db      	ldr	r3, [r3, #12]
 80852b8:	9301      	str	r3, [sp, #4]
 80852ba:	bd08      	pop	{r3, pc}
 80852bc:	080401b0 	.word	0x080401b0

080852c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80852c0:	b508      	push	{r3, lr}
 80852c2:	4b02      	ldr	r3, [pc, #8]	; (80852cc <HAL_GPIO_Write+0xc>)
 80852c4:	681b      	ldr	r3, [r3, #0]
 80852c6:	691b      	ldr	r3, [r3, #16]
 80852c8:	9301      	str	r3, [sp, #4]
 80852ca:	bd08      	pop	{r3, pc}
 80852cc:	080401b0 	.word	0x080401b0

080852d0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80852d0:	b508      	push	{r3, lr}
 80852d2:	4b02      	ldr	r3, [pc, #8]	; (80852dc <HAL_Interrupts_Attach+0xc>)
 80852d4:	681b      	ldr	r3, [r3, #0]
 80852d6:	699b      	ldr	r3, [r3, #24]
 80852d8:	9301      	str	r3, [sp, #4]
 80852da:	bd08      	pop	{r3, pc}
 80852dc:	080401b0 	.word	0x080401b0

080852e0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80852e0:	b508      	push	{r3, lr}
 80852e2:	4b02      	ldr	r3, [pc, #8]	; (80852ec <HAL_Interrupts_Detach+0xc>)
 80852e4:	681b      	ldr	r3, [r3, #0]
 80852e6:	69db      	ldr	r3, [r3, #28]
 80852e8:	9301      	str	r3, [sp, #4]
 80852ea:	bd08      	pop	{r3, pc}
 80852ec:	080401b0 	.word	0x080401b0

080852f0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80852f0:	b508      	push	{r3, lr}
 80852f2:	4b02      	ldr	r3, [pc, #8]	; (80852fc <HAL_ADC_Read+0xc>)
 80852f4:	681b      	ldr	r3, [r3, #0]
 80852f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80852f8:	9301      	str	r3, [sp, #4]
 80852fa:	bd08      	pop	{r3, pc}
 80852fc:	080401b0 	.word	0x080401b0

08085300 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 8085300:	b508      	push	{r3, lr}
 8085302:	4b02      	ldr	r3, [pc, #8]	; (808530c <HAL_Set_System_Interrupt_Handler+0xc>)
 8085304:	681b      	ldr	r3, [r3, #0]
 8085306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085308:	9301      	str	r3, [sp, #4]
 808530a:	bd08      	pop	{r3, pc}
 808530c:	080401b0 	.word	0x080401b0

08085310 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8085310:	b508      	push	{r3, lr}
 8085312:	4b02      	ldr	r3, [pc, #8]	; (808531c <HAL_SPI_Begin+0xc>)
 8085314:	681b      	ldr	r3, [r3, #0]
 8085316:	681b      	ldr	r3, [r3, #0]
 8085318:	9301      	str	r3, [sp, #4]
 808531a:	bd08      	pop	{r3, pc}
 808531c:	080401b4 	.word	0x080401b4

08085320 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8085320:	b508      	push	{r3, lr}
 8085322:	4b02      	ldr	r3, [pc, #8]	; (808532c <HAL_SPI_Send_Receive_Data+0xc>)
 8085324:	681b      	ldr	r3, [r3, #0]
 8085326:	695b      	ldr	r3, [r3, #20]
 8085328:	9301      	str	r3, [sp, #4]
 808532a:	bd08      	pop	{r3, pc}
 808532c:	080401b4 	.word	0x080401b4

08085330 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8085330:	b508      	push	{r3, lr}
 8085332:	4b02      	ldr	r3, [pc, #8]	; (808533c <HAL_SPI_Init+0xc>)
 8085334:	681b      	ldr	r3, [r3, #0]
 8085336:	69db      	ldr	r3, [r3, #28]
 8085338:	9301      	str	r3, [sp, #4]
 808533a:	bd08      	pop	{r3, pc}
 808533c:	080401b4 	.word	0x080401b4

08085340 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8085340:	b508      	push	{r3, lr}
 8085342:	4b02      	ldr	r3, [pc, #8]	; (808534c <HAL_SPI_Is_Enabled+0xc>)
 8085344:	681b      	ldr	r3, [r3, #0]
 8085346:	6a1b      	ldr	r3, [r3, #32]
 8085348:	9301      	str	r3, [sp, #4]
 808534a:	bd08      	pop	{r3, pc}
 808534c:	080401b4 	.word	0x080401b4

08085350 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8085350:	b508      	push	{r3, lr}
 8085352:	4b02      	ldr	r3, [pc, #8]	; (808535c <HAL_SPI_Info+0xc>)
 8085354:	681b      	ldr	r3, [r3, #0]
 8085356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085358:	9301      	str	r3, [sp, #4]
 808535a:	bd08      	pop	{r3, pc}
 808535c:	080401b4 	.word	0x080401b4

08085360 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8085360:	b508      	push	{r3, lr}
 8085362:	4b02      	ldr	r3, [pc, #8]	; (808536c <HAL_SPI_DMA_Transfer+0xc>)
 8085364:	681b      	ldr	r3, [r3, #0]
 8085366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085368:	9301      	str	r3, [sp, #4]
 808536a:	bd08      	pop	{r3, pc}
 808536c:	080401b4 	.word	0x080401b4

08085370 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8085370:	b508      	push	{r3, lr}
 8085372:	4b02      	ldr	r3, [pc, #8]	; (808537c <HAL_SPI_DMA_Transfer_Status+0xc>)
 8085374:	681b      	ldr	r3, [r3, #0]
 8085376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085378:	9301      	str	r3, [sp, #4]
 808537a:	bd08      	pop	{r3, pc}
 808537c:	080401b4 	.word	0x080401b4

08085380 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8085380:	b508      	push	{r3, lr}
 8085382:	4b02      	ldr	r3, [pc, #8]	; (808538c <HAL_SPI_Set_Settings+0xc>)
 8085384:	681b      	ldr	r3, [r3, #0]
 8085386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085388:	9301      	str	r3, [sp, #4]
 808538a:	bd08      	pop	{r3, pc}
 808538c:	080401b4 	.word	0x080401b4

08085390 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8085390:	b508      	push	{r3, lr}
 8085392:	4b02      	ldr	r3, [pc, #8]	; (808539c <HAL_RNG_GetRandomNumber+0xc>)
 8085394:	681b      	ldr	r3, [r3, #0]
 8085396:	685b      	ldr	r3, [r3, #4]
 8085398:	9301      	str	r3, [sp, #4]
 808539a:	bd08      	pop	{r3, pc}
 808539c:	0804019c 	.word	0x0804019c

080853a0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80853a0:	b508      	push	{r3, lr}
 80853a2:	4b02      	ldr	r3, [pc, #8]	; (80853ac <HAL_Delay_Milliseconds+0xc>)
 80853a4:	681b      	ldr	r3, [r3, #0]
 80853a6:	689b      	ldr	r3, [r3, #8]
 80853a8:	9301      	str	r3, [sp, #4]
 80853aa:	bd08      	pop	{r3, pc}
 80853ac:	0804019c 	.word	0x0804019c

080853b0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80853b0:	b508      	push	{r3, lr}
 80853b2:	4b02      	ldr	r3, [pc, #8]	; (80853bc <HAL_Timer_Get_Micro_Seconds+0xc>)
 80853b4:	681b      	ldr	r3, [r3, #0]
 80853b6:	691b      	ldr	r3, [r3, #16]
 80853b8:	9301      	str	r3, [sp, #4]
 80853ba:	bd08      	pop	{r3, pc}
 80853bc:	0804019c 	.word	0x0804019c

080853c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80853c0:	b508      	push	{r3, lr}
 80853c2:	4b02      	ldr	r3, [pc, #8]	; (80853cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80853c4:	681b      	ldr	r3, [r3, #0]
 80853c6:	695b      	ldr	r3, [r3, #20]
 80853c8:	9301      	str	r3, [sp, #4]
 80853ca:	bd08      	pop	{r3, pc}
 80853cc:	0804019c 	.word	0x0804019c

080853d0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80853d0:	b508      	push	{r3, lr}
 80853d2:	4b02      	ldr	r3, [pc, #8]	; (80853dc <HAL_RTC_Get_UnixTime+0xc>)
 80853d4:	681b      	ldr	r3, [r3, #0]
 80853d6:	69db      	ldr	r3, [r3, #28]
 80853d8:	9301      	str	r3, [sp, #4]
 80853da:	bd08      	pop	{r3, pc}
 80853dc:	0804019c 	.word	0x0804019c

080853e0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80853e0:	b508      	push	{r3, lr}
 80853e2:	4b02      	ldr	r3, [pc, #8]	; (80853ec <HAL_RTC_Time_Is_Valid+0xc>)
 80853e4:	681b      	ldr	r3, [r3, #0]
 80853e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80853e8:	9301      	str	r3, [sp, #4]
 80853ea:	bd08      	pop	{r3, pc}
 80853ec:	0804019c 	.word	0x0804019c

080853f0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80853f0:	b508      	push	{r3, lr}
 80853f2:	4b02      	ldr	r3, [pc, #8]	; (80853fc <hal_timer_millis+0xc>)
 80853f4:	681b      	ldr	r3, [r3, #0]
 80853f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80853f8:	9301      	str	r3, [sp, #4]
 80853fa:	bd08      	pop	{r3, pc}
 80853fc:	0804019c 	.word	0x0804019c

08085400 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8085400:	b508      	push	{r3, lr}
 8085402:	4b02      	ldr	r3, [pc, #8]	; (808540c <HAL_Core_System_Reset_Ex+0xc>)
 8085404:	681b      	ldr	r3, [r3, #0]
 8085406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085408:	9301      	str	r3, [sp, #4]
 808540a:	bd08      	pop	{r3, pc}
 808540c:	080401b8 	.word	0x080401b8

08085410 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8085410:	b508      	push	{r3, lr}
 8085412:	4b02      	ldr	r3, [pc, #8]	; (808541c <os_thread_create+0xc>)
 8085414:	681b      	ldr	r3, [r3, #0]
 8085416:	685b      	ldr	r3, [r3, #4]
 8085418:	9301      	str	r3, [sp, #4]
 808541a:	bd08      	pop	{r3, pc}
 808541c:	080401d0 	.word	0x080401d0

08085420 <os_thread_cleanup>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8085420:	b508      	push	{r3, lr}
 8085422:	4b02      	ldr	r3, [pc, #8]	; (808542c <os_thread_cleanup+0xc>)
 8085424:	681b      	ldr	r3, [r3, #0]
 8085426:	695b      	ldr	r3, [r3, #20]
 8085428:	9301      	str	r3, [sp, #4]
 808542a:	bd08      	pop	{r3, pc}
 808542c:	080401d0 	.word	0x080401d0

08085430 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8085430:	b508      	push	{r3, lr}
 8085432:	4b02      	ldr	r3, [pc, #8]	; (808543c <os_mutex_recursive_create+0xc>)
 8085434:	681b      	ldr	r3, [r3, #0]
 8085436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085438:	9301      	str	r3, [sp, #4]
 808543a:	bd08      	pop	{r3, pc}
 808543c:	080401d0 	.word	0x080401d0

08085440 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8085440:	b508      	push	{r3, lr}
 8085442:	4b02      	ldr	r3, [pc, #8]	; (808544c <os_mutex_recursive_destroy+0xc>)
 8085444:	681b      	ldr	r3, [r3, #0]
 8085446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085448:	9301      	str	r3, [sp, #4]
 808544a:	bd08      	pop	{r3, pc}
 808544c:	080401d0 	.word	0x080401d0

08085450 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8085450:	b508      	push	{r3, lr}
 8085452:	4b02      	ldr	r3, [pc, #8]	; (808545c <os_mutex_recursive_lock+0xc>)
 8085454:	681b      	ldr	r3, [r3, #0]
 8085456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085458:	9301      	str	r3, [sp, #4]
 808545a:	bd08      	pop	{r3, pc}
 808545c:	080401d0 	.word	0x080401d0

08085460 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8085460:	b508      	push	{r3, lr}
 8085462:	4b02      	ldr	r3, [pc, #8]	; (808546c <os_mutex_recursive_unlock+0xc>)
 8085464:	681b      	ldr	r3, [r3, #0]
 8085466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085468:	9301      	str	r3, [sp, #4]
 808546a:	bd08      	pop	{r3, pc}
 808546c:	080401d0 	.word	0x080401d0

08085470 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8085470:	b508      	push	{r3, lr}
 8085472:	4b02      	ldr	r3, [pc, #8]	; (808547c <os_thread_exit+0xc>)
 8085474:	681b      	ldr	r3, [r3, #0]
 8085476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085478:	9301      	str	r3, [sp, #4]
 808547a:	bd08      	pop	{r3, pc}
 808547c:	080401d0 	.word	0x080401d0

08085480 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8085480:	b508      	push	{r3, lr}
 8085482:	4b02      	ldr	r3, [pc, #8]	; (808548c <HAL_USART_Init+0xc>)
 8085484:	681b      	ldr	r3, [r3, #0]
 8085486:	699b      	ldr	r3, [r3, #24]
 8085488:	9301      	str	r3, [sp, #4]
 808548a:	bd08      	pop	{r3, pc}
 808548c:	080401c4 	.word	0x080401c4

08085490 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8085490:	b508      	push	{r3, lr}
 8085492:	4b02      	ldr	r3, [pc, #8]	; (808549c <HAL_USART_Write_Data+0xc>)
 8085494:	681b      	ldr	r3, [r3, #0]
 8085496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085498:	9301      	str	r3, [sp, #4]
 808549a:	bd08      	pop	{r3, pc}
 808549c:	080401c4 	.word	0x080401c4

080854a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80854a0:	b508      	push	{r3, lr}
 80854a2:	4b02      	ldr	r3, [pc, #8]	; (80854ac <HAL_USART_Available_Data+0xc>)
 80854a4:	681b      	ldr	r3, [r3, #0]
 80854a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80854a8:	9301      	str	r3, [sp, #4]
 80854aa:	bd08      	pop	{r3, pc}
 80854ac:	080401c4 	.word	0x080401c4

080854b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80854b0:	b508      	push	{r3, lr}
 80854b2:	4b02      	ldr	r3, [pc, #8]	; (80854bc <HAL_USART_Read_Data+0xc>)
 80854b4:	681b      	ldr	r3, [r3, #0]
 80854b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80854b8:	9301      	str	r3, [sp, #4]
 80854ba:	bd08      	pop	{r3, pc}
 80854bc:	080401c4 	.word	0x080401c4

080854c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80854c0:	b508      	push	{r3, lr}
 80854c2:	4b02      	ldr	r3, [pc, #8]	; (80854cc <HAL_USART_Peek_Data+0xc>)
 80854c4:	681b      	ldr	r3, [r3, #0]
 80854c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80854c8:	9301      	str	r3, [sp, #4]
 80854ca:	bd08      	pop	{r3, pc}
 80854cc:	080401c4 	.word	0x080401c4

080854d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80854d0:	b508      	push	{r3, lr}
 80854d2:	4b02      	ldr	r3, [pc, #8]	; (80854dc <HAL_USART_Flush_Data+0xc>)
 80854d4:	681b      	ldr	r3, [r3, #0]
 80854d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80854d8:	9301      	str	r3, [sp, #4]
 80854da:	bd08      	pop	{r3, pc}
 80854dc:	080401c4 	.word	0x080401c4

080854e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80854e0:	b508      	push	{r3, lr}
 80854e2:	4b02      	ldr	r3, [pc, #8]	; (80854ec <HAL_USART_Is_Enabled+0xc>)
 80854e4:	681b      	ldr	r3, [r3, #0]
 80854e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80854e8:	9301      	str	r3, [sp, #4]
 80854ea:	bd08      	pop	{r3, pc}
 80854ec:	080401c4 	.word	0x080401c4

080854f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80854f0:	b508      	push	{r3, lr}
 80854f2:	4b02      	ldr	r3, [pc, #8]	; (80854fc <HAL_USART_Available_Data_For_Write+0xc>)
 80854f4:	681b      	ldr	r3, [r3, #0]
 80854f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80854f8:	9301      	str	r3, [sp, #4]
 80854fa:	bd08      	pop	{r3, pc}
 80854fc:	080401c4 	.word	0x080401c4

08085500 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8085500:	b508      	push	{r3, lr}
 8085502:	4b02      	ldr	r3, [pc, #8]	; (808550c <HAL_USART_BeginConfig+0xc>)
 8085504:	681b      	ldr	r3, [r3, #0]
 8085506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085508:	9301      	str	r3, [sp, #4]
 808550a:	bd08      	pop	{r3, pc}
 808550c:	080401c4 	.word	0x080401c4

08085510 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8085510:	b508      	push	{r3, lr}
 8085512:	4b02      	ldr	r3, [pc, #8]	; (808551c <HAL_I2C_Begin+0xc>)
 8085514:	681b      	ldr	r3, [r3, #0]
 8085516:	68db      	ldr	r3, [r3, #12]
 8085518:	9301      	str	r3, [sp, #4]
 808551a:	bd08      	pop	{r3, pc}
 808551c:	080401ac 	.word	0x080401ac

08085520 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8085520:	b508      	push	{r3, lr}
 8085522:	4b02      	ldr	r3, [pc, #8]	; (808552c <HAL_I2C_Begin_Transmission+0xc>)
 8085524:	681b      	ldr	r3, [r3, #0]
 8085526:	699b      	ldr	r3, [r3, #24]
 8085528:	9301      	str	r3, [sp, #4]
 808552a:	bd08      	pop	{r3, pc}
 808552c:	080401ac 	.word	0x080401ac

08085530 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8085530:	b508      	push	{r3, lr}
 8085532:	4b02      	ldr	r3, [pc, #8]	; (808553c <HAL_I2C_End_Transmission+0xc>)
 8085534:	681b      	ldr	r3, [r3, #0]
 8085536:	69db      	ldr	r3, [r3, #28]
 8085538:	9301      	str	r3, [sp, #4]
 808553a:	bd08      	pop	{r3, pc}
 808553c:	080401ac 	.word	0x080401ac

08085540 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8085540:	b508      	push	{r3, lr}
 8085542:	4b02      	ldr	r3, [pc, #8]	; (808554c <HAL_I2C_Write_Data+0xc>)
 8085544:	681b      	ldr	r3, [r3, #0]
 8085546:	6a1b      	ldr	r3, [r3, #32]
 8085548:	9301      	str	r3, [sp, #4]
 808554a:	bd08      	pop	{r3, pc}
 808554c:	080401ac 	.word	0x080401ac

08085550 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8085550:	b508      	push	{r3, lr}
 8085552:	4b02      	ldr	r3, [pc, #8]	; (808555c <HAL_I2C_Available_Data+0xc>)
 8085554:	681b      	ldr	r3, [r3, #0]
 8085556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085558:	9301      	str	r3, [sp, #4]
 808555a:	bd08      	pop	{r3, pc}
 808555c:	080401ac 	.word	0x080401ac

08085560 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8085560:	b508      	push	{r3, lr}
 8085562:	4b02      	ldr	r3, [pc, #8]	; (808556c <HAL_I2C_Read_Data+0xc>)
 8085564:	681b      	ldr	r3, [r3, #0]
 8085566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085568:	9301      	str	r3, [sp, #4]
 808556a:	bd08      	pop	{r3, pc}
 808556c:	080401ac 	.word	0x080401ac

08085570 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8085570:	b508      	push	{r3, lr}
 8085572:	4b02      	ldr	r3, [pc, #8]	; (808557c <HAL_I2C_Peek_Data+0xc>)
 8085574:	681b      	ldr	r3, [r3, #0]
 8085576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085578:	9301      	str	r3, [sp, #4]
 808557a:	bd08      	pop	{r3, pc}
 808557c:	080401ac 	.word	0x080401ac

08085580 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8085580:	b508      	push	{r3, lr}
 8085582:	4b02      	ldr	r3, [pc, #8]	; (808558c <HAL_I2C_Flush_Data+0xc>)
 8085584:	681b      	ldr	r3, [r3, #0]
 8085586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085588:	9301      	str	r3, [sp, #4]
 808558a:	bd08      	pop	{r3, pc}
 808558c:	080401ac 	.word	0x080401ac

08085590 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8085590:	b508      	push	{r3, lr}
 8085592:	4b02      	ldr	r3, [pc, #8]	; (808559c <HAL_I2C_Is_Enabled+0xc>)
 8085594:	681b      	ldr	r3, [r3, #0]
 8085596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085598:	9301      	str	r3, [sp, #4]
 808559a:	bd08      	pop	{r3, pc}
 808559c:	080401ac 	.word	0x080401ac

080855a0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80855a0:	b508      	push	{r3, lr}
 80855a2:	4b02      	ldr	r3, [pc, #8]	; (80855ac <HAL_I2C_Init+0xc>)
 80855a4:	681b      	ldr	r3, [r3, #0]
 80855a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80855a8:	9301      	str	r3, [sp, #4]
 80855aa:	bd08      	pop	{r3, pc}
 80855ac:	080401ac 	.word	0x080401ac

080855b0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80855b0:	b508      	push	{r3, lr}
 80855b2:	4b02      	ldr	r3, [pc, #8]	; (80855bc <HAL_I2C_Acquire+0xc>)
 80855b4:	681b      	ldr	r3, [r3, #0]
 80855b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80855b8:	9301      	str	r3, [sp, #4]
 80855ba:	bd08      	pop	{r3, pc}
 80855bc:	080401ac 	.word	0x080401ac

080855c0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80855c0:	b508      	push	{r3, lr}
 80855c2:	4b02      	ldr	r3, [pc, #8]	; (80855cc <HAL_I2C_Release+0xc>)
 80855c4:	681b      	ldr	r3, [r3, #0]
 80855c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80855c8:	9301      	str	r3, [sp, #4]
 80855ca:	bd08      	pop	{r3, pc}
 80855cc:	080401ac 	.word	0x080401ac

080855d0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80855d0:	b508      	push	{r3, lr}
 80855d2:	4b02      	ldr	r3, [pc, #8]	; (80855dc <HAL_I2C_Request_Data_Ex+0xc>)
 80855d4:	681b      	ldr	r3, [r3, #0]
 80855d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80855d8:	9301      	str	r3, [sp, #4]
 80855da:	bd08      	pop	{r3, pc}
 80855dc:	080401ac 	.word	0x080401ac

080855e0 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80855e0:	b508      	push	{r3, lr}
 80855e2:	4b02      	ldr	r3, [pc, #8]	; (80855ec <socket_active_status+0xc>)
 80855e4:	681b      	ldr	r3, [r3, #0]
 80855e6:	681b      	ldr	r3, [r3, #0]
 80855e8:	9301      	str	r3, [sp, #4]
 80855ea:	bd08      	pop	{r3, pc}
 80855ec:	08060024 	.word	0x08060024

080855f0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80855f0:	b508      	push	{r3, lr}
 80855f2:	4b02      	ldr	r3, [pc, #8]	; (80855fc <socket_handle_valid+0xc>)
 80855f4:	681b      	ldr	r3, [r3, #0]
 80855f6:	685b      	ldr	r3, [r3, #4]
 80855f8:	9301      	str	r3, [sp, #4]
 80855fa:	bd08      	pop	{r3, pc}
 80855fc:	08060024 	.word	0x08060024

08085600 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8085600:	b508      	push	{r3, lr}
 8085602:	4b02      	ldr	r3, [pc, #8]	; (808560c <socket_create+0xc>)
 8085604:	681b      	ldr	r3, [r3, #0]
 8085606:	689b      	ldr	r3, [r3, #8]
 8085608:	9301      	str	r3, [sp, #4]
 808560a:	bd08      	pop	{r3, pc}
 808560c:	08060024 	.word	0x08060024

08085610 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8085610:	b508      	push	{r3, lr}
 8085612:	4b02      	ldr	r3, [pc, #8]	; (808561c <socket_connect+0xc>)
 8085614:	681b      	ldr	r3, [r3, #0]
 8085616:	68db      	ldr	r3, [r3, #12]
 8085618:	9301      	str	r3, [sp, #4]
 808561a:	bd08      	pop	{r3, pc}
 808561c:	08060024 	.word	0x08060024

08085620 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8085620:	b508      	push	{r3, lr}
 8085622:	4b02      	ldr	r3, [pc, #8]	; (808562c <socket_receive+0xc>)
 8085624:	681b      	ldr	r3, [r3, #0]
 8085626:	691b      	ldr	r3, [r3, #16]
 8085628:	9301      	str	r3, [sp, #4]
 808562a:	bd08      	pop	{r3, pc}
 808562c:	08060024 	.word	0x08060024

08085630 <socket_receivefrom>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 8085630:	b508      	push	{r3, lr}
 8085632:	4b02      	ldr	r3, [pc, #8]	; (808563c <socket_receivefrom+0xc>)
 8085634:	681b      	ldr	r3, [r3, #0]
 8085636:	695b      	ldr	r3, [r3, #20]
 8085638:	9301      	str	r3, [sp, #4]
 808563a:	bd08      	pop	{r3, pc}
 808563c:	08060024 	.word	0x08060024

08085640 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 8085640:	b508      	push	{r3, lr}
 8085642:	4b02      	ldr	r3, [pc, #8]	; (808564c <socket_sendto+0xc>)
 8085644:	681b      	ldr	r3, [r3, #0]
 8085646:	69db      	ldr	r3, [r3, #28]
 8085648:	9301      	str	r3, [sp, #4]
 808564a:	bd08      	pop	{r3, pc}
 808564c:	08060024 	.word	0x08060024

08085650 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8085650:	b508      	push	{r3, lr}
 8085652:	4b02      	ldr	r3, [pc, #8]	; (808565c <socket_close+0xc>)
 8085654:	681b      	ldr	r3, [r3, #0]
 8085656:	6a1b      	ldr	r3, [r3, #32]
 8085658:	9301      	str	r3, [sp, #4]
 808565a:	bd08      	pop	{r3, pc}
 808565c:	08060024 	.word	0x08060024

08085660 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8085660:	b508      	push	{r3, lr}
 8085662:	4b02      	ldr	r3, [pc, #8]	; (808566c <socket_handle_invalid+0xc>)
 8085664:	681b      	ldr	r3, [r3, #0]
 8085666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085668:	9301      	str	r3, [sp, #4]
 808566a:	bd08      	pop	{r3, pc}
 808566c:	08060024 	.word	0x08060024

08085670 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 8085670:	b508      	push	{r3, lr}
 8085672:	4b02      	ldr	r3, [pc, #8]	; (808567c <socket_send_ex+0xc>)
 8085674:	681b      	ldr	r3, [r3, #0]
 8085676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085678:	9301      	str	r3, [sp, #4]
 808567a:	bd08      	pop	{r3, pc}
 808567c:	08060024 	.word	0x08060024

08085680 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 8085680:	b508      	push	{r3, lr}
 8085682:	4b02      	ldr	r3, [pc, #8]	; (808568c <HAL_NET_SetNetWatchDog+0xc>)
 8085684:	681b      	ldr	r3, [r3, #0]
 8085686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085688:	9301      	str	r3, [sp, #4]
 808568a:	bd08      	pop	{r3, pc}
 808568c:	08060020 	.word	0x08060020

08085690 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8085690:	b508      	push	{r3, lr}
 8085692:	4b02      	ldr	r3, [pc, #8]	; (808569c <inet_gethostbyname+0xc>)
 8085694:	681b      	ldr	r3, [r3, #0]
 8085696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085698:	9301      	str	r3, [sp, #4]
 808569a:	bd08      	pop	{r3, pc}
 808569c:	08060020 	.word	0x08060020

080856a0 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 80856a0:	b508      	push	{r3, lr}
 80856a2:	4b02      	ldr	r3, [pc, #8]	; (80856ac <cellular_signal+0xc>)
 80856a4:	681b      	ldr	r3, [r3, #0]
 80856a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80856a8:	9301      	str	r3, [sp, #4]
 80856aa:	bd08      	pop	{r3, pc}
 80856ac:	08060020 	.word	0x08060020

080856b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80856b0:	b508      	push	{r3, lr}
 80856b2:	4b02      	ldr	r3, [pc, #8]	; (80856bc <HAL_USB_USART_Init+0xc>)
 80856b4:	681b      	ldr	r3, [r3, #0]
 80856b6:	681b      	ldr	r3, [r3, #0]
 80856b8:	9301      	str	r3, [sp, #4]
 80856ba:	bd08      	pop	{r3, pc}
 80856bc:	0806001c 	.word	0x0806001c

080856c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80856c0:	b508      	push	{r3, lr}
 80856c2:	4b02      	ldr	r3, [pc, #8]	; (80856cc <HAL_USB_USART_Begin+0xc>)
 80856c4:	681b      	ldr	r3, [r3, #0]
 80856c6:	685b      	ldr	r3, [r3, #4]
 80856c8:	9301      	str	r3, [sp, #4]
 80856ca:	bd08      	pop	{r3, pc}
 80856cc:	0806001c 	.word	0x0806001c

080856d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80856d0:	b508      	push	{r3, lr}
 80856d2:	4b02      	ldr	r3, [pc, #8]	; (80856dc <HAL_USB_USART_Available_Data+0xc>)
 80856d4:	681b      	ldr	r3, [r3, #0]
 80856d6:	691b      	ldr	r3, [r3, #16]
 80856d8:	9301      	str	r3, [sp, #4]
 80856da:	bd08      	pop	{r3, pc}
 80856dc:	0806001c 	.word	0x0806001c

080856e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80856e0:	b508      	push	{r3, lr}
 80856e2:	4b02      	ldr	r3, [pc, #8]	; (80856ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80856e4:	681b      	ldr	r3, [r3, #0]
 80856e6:	695b      	ldr	r3, [r3, #20]
 80856e8:	9301      	str	r3, [sp, #4]
 80856ea:	bd08      	pop	{r3, pc}
 80856ec:	0806001c 	.word	0x0806001c

080856f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80856f0:	b508      	push	{r3, lr}
 80856f2:	4b02      	ldr	r3, [pc, #8]	; (80856fc <HAL_USB_USART_Receive_Data+0xc>)
 80856f4:	681b      	ldr	r3, [r3, #0]
 80856f6:	699b      	ldr	r3, [r3, #24]
 80856f8:	9301      	str	r3, [sp, #4]
 80856fa:	bd08      	pop	{r3, pc}
 80856fc:	0806001c 	.word	0x0806001c

08085700 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8085700:	b508      	push	{r3, lr}
 8085702:	4b02      	ldr	r3, [pc, #8]	; (808570c <HAL_USB_USART_Send_Data+0xc>)
 8085704:	681b      	ldr	r3, [r3, #0]
 8085706:	69db      	ldr	r3, [r3, #28]
 8085708:	9301      	str	r3, [sp, #4]
 808570a:	bd08      	pop	{r3, pc}
 808570c:	0806001c 	.word	0x0806001c

08085710 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8085710:	b508      	push	{r3, lr}
 8085712:	4b02      	ldr	r3, [pc, #8]	; (808571c <HAL_USB_USART_Flush_Data+0xc>)
 8085714:	681b      	ldr	r3, [r3, #0]
 8085716:	6a1b      	ldr	r3, [r3, #32]
 8085718:	9301      	str	r3, [sp, #4]
 808571a:	bd08      	pop	{r3, pc}
 808571c:	0806001c 	.word	0x0806001c

08085720 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8085720:	b508      	push	{r3, lr}
 8085722:	4b02      	ldr	r3, [pc, #8]	; (808572c <log_message+0xc>)
 8085724:	681b      	ldr	r3, [r3, #0]
 8085726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085728:	9301      	str	r3, [sp, #4]
 808572a:	bd08      	pop	{r3, pc}
 808572c:	080201a0 	.word	0x080201a0

08085730 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8085730:	b508      	push	{r3, lr}
 8085732:	4b02      	ldr	r3, [pc, #8]	; (808573c <log_message_v+0xc>)
 8085734:	681b      	ldr	r3, [r3, #0]
 8085736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085738:	9301      	str	r3, [sp, #4]
 808573a:	bd08      	pop	{r3, pc}
 808573c:	080201a0 	.word	0x080201a0

08085740 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8085740:	b508      	push	{r3, lr}
 8085742:	4b02      	ldr	r3, [pc, #8]	; (808574c <system_mode+0xc>)
 8085744:	681b      	ldr	r3, [r3, #0]
 8085746:	681b      	ldr	r3, [r3, #0]
 8085748:	9301      	str	r3, [sp, #4]
 808574a:	bd08      	pop	{r3, pc}
 808574c:	080401a4 	.word	0x080401a4

08085750 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8085750:	b508      	push	{r3, lr}
 8085752:	4b02      	ldr	r3, [pc, #8]	; (808575c <set_system_mode+0xc>)
 8085754:	681b      	ldr	r3, [r3, #0]
 8085756:	685b      	ldr	r3, [r3, #4]
 8085758:	9301      	str	r3, [sp, #4]
 808575a:	bd08      	pop	{r3, pc}
 808575c:	080401a4 	.word	0x080401a4

08085760 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8085760:	b508      	push	{r3, lr}
 8085762:	4b02      	ldr	r3, [pc, #8]	; (808576c <system_delay_ms+0xc>)
 8085764:	681b      	ldr	r3, [r3, #0]
 8085766:	695b      	ldr	r3, [r3, #20]
 8085768:	9301      	str	r3, [sp, #4]
 808576a:	bd08      	pop	{r3, pc}
 808576c:	080401a4 	.word	0x080401a4

08085770 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8085770:	b508      	push	{r3, lr}
 8085772:	4b02      	ldr	r3, [pc, #8]	; (808577c <system_sleep+0xc>)
 8085774:	681b      	ldr	r3, [r3, #0]
 8085776:	699b      	ldr	r3, [r3, #24]
 8085778:	9301      	str	r3, [sp, #4]
 808577a:	bd08      	pop	{r3, pc}
 808577c:	080401a4 	.word	0x080401a4

08085780 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8085780:	b508      	push	{r3, lr}
 8085782:	4b02      	ldr	r3, [pc, #8]	; (808578c <system_thread_set_state+0xc>)
 8085784:	681b      	ldr	r3, [r3, #0]
 8085786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085788:	9301      	str	r3, [sp, #4]
 808578a:	bd08      	pop	{r3, pc}
 808578c:	080401a4 	.word	0x080401a4

08085790 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8085790:	b508      	push	{r3, lr}
 8085792:	4b02      	ldr	r3, [pc, #8]	; (808579c <application_thread_current+0xc>)
 8085794:	681b      	ldr	r3, [r3, #0]
 8085796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085798:	9301      	str	r3, [sp, #4]
 808579a:	bd08      	pop	{r3, pc}
 808579c:	080401a4 	.word	0x080401a4

080857a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80857a0:	b508      	push	{r3, lr}
 80857a2:	4b02      	ldr	r3, [pc, #8]	; (80857ac <application_thread_invoke+0xc>)
 80857a4:	681b      	ldr	r3, [r3, #0]
 80857a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80857a8:	9301      	str	r3, [sp, #4]
 80857aa:	bd08      	pop	{r3, pc}
 80857ac:	080401a4 	.word	0x080401a4

080857b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80857b0:	b508      	push	{r3, lr}
 80857b2:	4b02      	ldr	r3, [pc, #8]	; (80857bc <system_thread_get_state+0xc>)
 80857b4:	681b      	ldr	r3, [r3, #0]
 80857b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80857b8:	9301      	str	r3, [sp, #4]
 80857ba:	bd08      	pop	{r3, pc}
 80857bc:	080401a4 	.word	0x080401a4

080857c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80857c0:	b508      	push	{r3, lr}
 80857c2:	4b03      	ldr	r3, [pc, #12]	; (80857d0 <system_ctrl_set_app_request_handler+0x10>)
 80857c4:	681b      	ldr	r3, [r3, #0]
 80857c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80857ca:	9301      	str	r3, [sp, #4]
 80857cc:	bd08      	pop	{r3, pc}
 80857ce:	0000      	.short	0x0000
 80857d0:	080401a4 	.word	0x080401a4

080857d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80857d4:	b508      	push	{r3, lr}
 80857d6:	4b03      	ldr	r3, [pc, #12]	; (80857e4 <system_ctrl_set_result+0x10>)
 80857d8:	681b      	ldr	r3, [r3, #0]
 80857da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80857de:	9301      	str	r3, [sp, #4]
 80857e0:	bd08      	pop	{r3, pc}
 80857e2:	0000      	.short	0x0000
 80857e4:	080401a4 	.word	0x080401a4

080857e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80857e8:	b508      	push	{r3, lr}
 80857ea:	4b02      	ldr	r3, [pc, #8]	; (80857f4 <network_connect+0xc>)
 80857ec:	681b      	ldr	r3, [r3, #0]
 80857ee:	685b      	ldr	r3, [r3, #4]
 80857f0:	9301      	str	r3, [sp, #4]
 80857f2:	bd08      	pop	{r3, pc}
 80857f4:	080401c8 	.word	0x080401c8

080857f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80857f8:	b508      	push	{r3, lr}
 80857fa:	4b02      	ldr	r3, [pc, #8]	; (8085804 <network_connecting+0xc>)
 80857fc:	681b      	ldr	r3, [r3, #0]
 80857fe:	689b      	ldr	r3, [r3, #8]
 8085800:	9301      	str	r3, [sp, #4]
 8085802:	bd08      	pop	{r3, pc}
 8085804:	080401c8 	.word	0x080401c8

08085808 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8085808:	b508      	push	{r3, lr}
 808580a:	4b02      	ldr	r3, [pc, #8]	; (8085814 <network_disconnect+0xc>)
 808580c:	681b      	ldr	r3, [r3, #0]
 808580e:	68db      	ldr	r3, [r3, #12]
 8085810:	9301      	str	r3, [sp, #4]
 8085812:	bd08      	pop	{r3, pc}
 8085814:	080401c8 	.word	0x080401c8

08085818 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8085818:	b508      	push	{r3, lr}
 808581a:	4b02      	ldr	r3, [pc, #8]	; (8085824 <network_ready+0xc>)
 808581c:	681b      	ldr	r3, [r3, #0]
 808581e:	691b      	ldr	r3, [r3, #16]
 8085820:	9301      	str	r3, [sp, #4]
 8085822:	bd08      	pop	{r3, pc}
 8085824:	080401c8 	.word	0x080401c8

08085828 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8085828:	b508      	push	{r3, lr}
 808582a:	4b02      	ldr	r3, [pc, #8]	; (8085834 <network_on+0xc>)
 808582c:	681b      	ldr	r3, [r3, #0]
 808582e:	695b      	ldr	r3, [r3, #20]
 8085830:	9301      	str	r3, [sp, #4]
 8085832:	bd08      	pop	{r3, pc}
 8085834:	080401c8 	.word	0x080401c8

08085838 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8085838:	b508      	push	{r3, lr}
 808583a:	4b02      	ldr	r3, [pc, #8]	; (8085844 <network_off+0xc>)
 808583c:	681b      	ldr	r3, [r3, #0]
 808583e:	699b      	ldr	r3, [r3, #24]
 8085840:	9301      	str	r3, [sp, #4]
 8085842:	bd08      	pop	{r3, pc}
 8085844:	080401c8 	.word	0x080401c8

08085848 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8085848:	b508      	push	{r3, lr}
 808584a:	4b02      	ldr	r3, [pc, #8]	; (8085854 <network_listen+0xc>)
 808584c:	681b      	ldr	r3, [r3, #0]
 808584e:	69db      	ldr	r3, [r3, #28]
 8085850:	9301      	str	r3, [sp, #4]
 8085852:	bd08      	pop	{r3, pc}
 8085854:	080401c8 	.word	0x080401c8

08085858 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8085858:	b508      	push	{r3, lr}
 808585a:	4b02      	ldr	r3, [pc, #8]	; (8085864 <network_listening+0xc>)
 808585c:	681b      	ldr	r3, [r3, #0]
 808585e:	6a1b      	ldr	r3, [r3, #32]
 8085860:	9301      	str	r3, [sp, #4]
 8085862:	bd08      	pop	{r3, pc}
 8085864:	080401c8 	.word	0x080401c8

08085868 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8085868:	b508      	push	{r3, lr}
 808586a:	4b02      	ldr	r3, [pc, #8]	; (8085874 <network_set_listen_timeout+0xc>)
 808586c:	681b      	ldr	r3, [r3, #0]
 808586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085870:	9301      	str	r3, [sp, #4]
 8085872:	bd08      	pop	{r3, pc}
 8085874:	080401c8 	.word	0x080401c8

08085878 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8085878:	b508      	push	{r3, lr}
 808587a:	4b02      	ldr	r3, [pc, #8]	; (8085884 <network_get_listen_timeout+0xc>)
 808587c:	681b      	ldr	r3, [r3, #0]
 808587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085880:	9301      	str	r3, [sp, #4]
 8085882:	bd08      	pop	{r3, pc}
 8085884:	080401c8 	.word	0x080401c8

08085888 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8085888:	b508      	push	{r3, lr}
 808588a:	4b02      	ldr	r3, [pc, #8]	; (8085894 <spark_function+0xc>)
 808588c:	681b      	ldr	r3, [r3, #0]
 808588e:	685b      	ldr	r3, [r3, #4]
 8085890:	9301      	str	r3, [sp, #4]
 8085892:	bd08      	pop	{r3, pc}
 8085894:	080401cc 	.word	0x080401cc

08085898 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8085898:	b508      	push	{r3, lr}
 808589a:	4b02      	ldr	r3, [pc, #8]	; (80858a4 <spark_process+0xc>)
 808589c:	681b      	ldr	r3, [r3, #0]
 808589e:	689b      	ldr	r3, [r3, #8]
 80858a0:	9301      	str	r3, [sp, #4]
 80858a2:	bd08      	pop	{r3, pc}
 80858a4:	080401cc 	.word	0x080401cc

080858a8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80858a8:	b508      	push	{r3, lr}
 80858aa:	4b02      	ldr	r3, [pc, #8]	; (80858b4 <spark_cloud_flag_connect+0xc>)
 80858ac:	681b      	ldr	r3, [r3, #0]
 80858ae:	68db      	ldr	r3, [r3, #12]
 80858b0:	9301      	str	r3, [sp, #4]
 80858b2:	bd08      	pop	{r3, pc}
 80858b4:	080401cc 	.word	0x080401cc

080858b8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80858b8:	b508      	push	{r3, lr}
 80858ba:	4b02      	ldr	r3, [pc, #8]	; (80858c4 <spark_cloud_flag_connected+0xc>)
 80858bc:	681b      	ldr	r3, [r3, #0]
 80858be:	695b      	ldr	r3, [r3, #20]
 80858c0:	9301      	str	r3, [sp, #4]
 80858c2:	bd08      	pop	{r3, pc}
 80858c4:	080401cc 	.word	0x080401cc

080858c8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80858c8:	b508      	push	{r3, lr}
 80858ca:	4b02      	ldr	r3, [pc, #8]	; (80858d4 <spark_deviceID+0xc>)
 80858cc:	681b      	ldr	r3, [r3, #0]
 80858ce:	69db      	ldr	r3, [r3, #28]
 80858d0:	9301      	str	r3, [sp, #4]
 80858d2:	bd08      	pop	{r3, pc}
 80858d4:	080401cc 	.word	0x080401cc

080858d8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80858d8:	b508      	push	{r3, lr}
 80858da:	4b02      	ldr	r3, [pc, #8]	; (80858e4 <spark_send_event+0xc>)
 80858dc:	681b      	ldr	r3, [r3, #0]
 80858de:	6a1b      	ldr	r3, [r3, #32]
 80858e0:	9301      	str	r3, [sp, #4]
 80858e2:	bd08      	pop	{r3, pc}
 80858e4:	080401cc 	.word	0x080401cc

080858e8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80858e8:	b508      	push	{r3, lr}
 80858ea:	4b02      	ldr	r3, [pc, #8]	; (80858f4 <spark_sync_time_pending+0xc>)
 80858ec:	681b      	ldr	r3, [r3, #0]
 80858ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80858f0:	9301      	str	r3, [sp, #4]
 80858f2:	bd08      	pop	{r3, pc}
 80858f4:	080401cc 	.word	0x080401cc

080858f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80858f8:	b508      	push	{r3, lr}
 80858fa:	4b02      	ldr	r3, [pc, #8]	; (8085904 <spark_set_random_seed_from_cloud_handler+0xc>)
 80858fc:	681b      	ldr	r3, [r3, #0]
 80858fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085900:	9301      	str	r3, [sp, #4]
 8085902:	bd08      	pop	{r3, pc}
 8085904:	080401cc 	.word	0x080401cc

08085908 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8085908:	b508      	push	{r3, lr}
 808590a:	4b02      	ldr	r3, [pc, #8]	; (8085914 <malloc+0xc>)
 808590c:	681b      	ldr	r3, [r3, #0]
 808590e:	681b      	ldr	r3, [r3, #0]
 8085910:	9301      	str	r3, [sp, #4]
 8085912:	bd08      	pop	{r3, pc}
 8085914:	080401a0 	.word	0x080401a0

08085918 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8085918:	b508      	push	{r3, lr}
 808591a:	4b02      	ldr	r3, [pc, #8]	; (8085924 <free+0xc>)
 808591c:	681b      	ldr	r3, [r3, #0]
 808591e:	685b      	ldr	r3, [r3, #4]
 8085920:	9301      	str	r3, [sp, #4]
 8085922:	bd08      	pop	{r3, pc}
 8085924:	080401a0 	.word	0x080401a0

08085928 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8085928:	b508      	push	{r3, lr}
 808592a:	4b02      	ldr	r3, [pc, #8]	; (8085934 <realloc+0xc>)
 808592c:	681b      	ldr	r3, [r3, #0]
 808592e:	689b      	ldr	r3, [r3, #8]
 8085930:	9301      	str	r3, [sp, #4]
 8085932:	bd08      	pop	{r3, pc}
 8085934:	080401a0 	.word	0x080401a0

08085938 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8085938:	b508      	push	{r3, lr}
 808593a:	4b02      	ldr	r3, [pc, #8]	; (8085944 <sprintf+0xc>)
 808593c:	681b      	ldr	r3, [r3, #0]
 808593e:	68db      	ldr	r3, [r3, #12]
 8085940:	9301      	str	r3, [sp, #4]
 8085942:	bd08      	pop	{r3, pc}
 8085944:	080401a0 	.word	0x080401a0

08085948 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8085948:	b508      	push	{r3, lr}
 808594a:	4b02      	ldr	r3, [pc, #8]	; (8085954 <siprintf+0xc>)
 808594c:	681b      	ldr	r3, [r3, #0]
 808594e:	691b      	ldr	r3, [r3, #16]
 8085950:	9301      	str	r3, [sp, #4]
 8085952:	bd08      	pop	{r3, pc}
 8085954:	080401a0 	.word	0x080401a0

08085958 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8085958:	b508      	push	{r3, lr}
 808595a:	4b02      	ldr	r3, [pc, #8]	; (8085964 <siscanf+0xc>)
 808595c:	681b      	ldr	r3, [r3, #0]
 808595e:	699b      	ldr	r3, [r3, #24]
 8085960:	9301      	str	r3, [sp, #4]
 8085962:	bd08      	pop	{r3, pc}
 8085964:	080401a0 	.word	0x080401a0

08085968 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8085968:	b508      	push	{r3, lr}
 808596a:	4b02      	ldr	r3, [pc, #8]	; (8085974 <snprintf+0xc>)
 808596c:	681b      	ldr	r3, [r3, #0]
 808596e:	69db      	ldr	r3, [r3, #28]
 8085970:	9301      	str	r3, [sp, #4]
 8085972:	bd08      	pop	{r3, pc}
 8085974:	080401a0 	.word	0x080401a0

08085978 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8085978:	b508      	push	{r3, lr}
 808597a:	4b02      	ldr	r3, [pc, #8]	; (8085984 <sniprintf+0xc>)
 808597c:	681b      	ldr	r3, [r3, #0]
 808597e:	6a1b      	ldr	r3, [r3, #32]
 8085980:	9301      	str	r3, [sp, #4]
 8085982:	bd08      	pop	{r3, pc}
 8085984:	080401a0 	.word	0x080401a0

08085988 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8085988:	b508      	push	{r3, lr}
 808598a:	4b02      	ldr	r3, [pc, #8]	; (8085994 <vsnprintf+0xc>)
 808598c:	681b      	ldr	r3, [r3, #0]
 808598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085990:	9301      	str	r3, [sp, #4]
 8085992:	bd08      	pop	{r3, pc}
 8085994:	080401a0 	.word	0x080401a0

08085998 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8085998:	b508      	push	{r3, lr}
 808599a:	4b02      	ldr	r3, [pc, #8]	; (80859a4 <abort+0xc>)
 808599c:	681b      	ldr	r3, [r3, #0]
 808599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80859a0:	9301      	str	r3, [sp, #4]
 80859a2:	bd08      	pop	{r3, pc}
 80859a4:	080401a0 	.word	0x080401a0

080859a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80859a8:	b508      	push	{r3, lr}
 80859aa:	4b02      	ldr	r3, [pc, #8]	; (80859b4 <_malloc_r+0xc>)
 80859ac:	681b      	ldr	r3, [r3, #0]
 80859ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80859b0:	9301      	str	r3, [sp, #4]
 80859b2:	bd08      	pop	{r3, pc}
 80859b4:	080401a0 	.word	0x080401a0

080859b8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80859b8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859ba:	f002 fd23 	bl	8088404 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80859be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80859c2:	f002 b9fe 	b.w	8087dc2 <_ZN7TwoWire4lockEv>

080859c6 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80859c6:	b510      	push	{r4, lr}
 80859c8:	4604      	mov	r4, r0
    lock_(_lock)
 80859ca:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80859cc:	b109      	cbz	r1, 80859d2 <_ZN4PMICC1Eb+0xc>
        lock();
 80859ce:	f7ff fff3 	bl	80859b8 <_ZN4PMIC4lockEv>
    }
}
 80859d2:	4620      	mov	r0, r4
 80859d4:	bd10      	pop	{r4, pc}

080859d6 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 80859d6:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859d8:	f002 fd14 	bl	8088404 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 80859dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 80859e0:	f002 b9f8 	b.w	8087dd4 <_ZN7TwoWire6unlockEv>

080859e4 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80859e4:	b510      	push	{r4, lr}
{
    if (lock_) {
 80859e6:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80859e8:	4604      	mov	r4, r0
{
    if (lock_) {
 80859ea:	b10b      	cbz	r3, 80859f0 <_ZN4PMICD1Ev+0xc>
        unlock();
 80859ec:	f7ff fff3 	bl	80859d6 <_ZN4PMIC6unlockEv>
    }
}
 80859f0:	4620      	mov	r0, r4
 80859f2:	bd10      	pop	{r4, pc}

080859f4 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80859f4:	b510      	push	{r4, lr}
 80859f6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80859f8:	6800      	ldr	r0, [r0, #0]
 80859fa:	f7ff ffec 	bl	80859d6 <_ZN4PMIC6unlockEv>
 80859fe:	4620      	mov	r0, r4
 8085a00:	bd10      	pop	{r4, pc}

08085a02 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8085a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085a04:	ac02      	add	r4, sp, #8
 8085a06:	460d      	mov	r5, r1
 8085a08:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8085a0c:	f7ff ffd4 	bl	80859b8 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a10:	f002 fcf8 	bl	8088404 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8085a14:	216b      	movs	r1, #107	; 0x6b
 8085a16:	f002 f9c6 	bl	8087da6 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a1a:	f002 fcf3 	bl	8088404 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8085a1e:	6803      	ldr	r3, [r0, #0]
 8085a20:	4629      	mov	r1, r5
 8085a22:	689b      	ldr	r3, [r3, #8]
 8085a24:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a26:	f002 fced 	bl	8088404 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8085a2a:	2101      	movs	r1, #1
 8085a2c:	f002 f9be 	bl	8087dac <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a30:	f002 fce8 	bl	8088404 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8085a34:	2301      	movs	r3, #1
 8085a36:	461a      	mov	r2, r3
 8085a38:	216b      	movs	r1, #107	; 0x6b
 8085a3a:	f002 f99b 	bl	8087d74 <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a3e:	f002 fce1 	bl	8088404 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8085a42:	6803      	ldr	r3, [r0, #0]
 8085a44:	695b      	ldr	r3, [r3, #20]
 8085a46:	4798      	blx	r3
 8085a48:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8085a4a:	4620      	mov	r0, r4
 8085a4c:	f7ff ffd2 	bl	80859f4 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8085a50:	b2e8      	uxtb	r0, r5
 8085a52:	b003      	add	sp, #12
 8085a54:	bd30      	pop	{r4, r5, pc}

08085a56 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8085a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085a58:	ac02      	add	r4, sp, #8
 8085a5a:	4615      	mov	r5, r2
 8085a5c:	460e      	mov	r6, r1
 8085a5e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8085a62:	f7ff ffa9 	bl	80859b8 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a66:	f002 fccd 	bl	8088404 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8085a6a:	216b      	movs	r1, #107	; 0x6b
 8085a6c:	f002 f99b 	bl	8087da6 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a70:	f002 fcc8 	bl	8088404 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8085a74:	6803      	ldr	r3, [r0, #0]
 8085a76:	4631      	mov	r1, r6
 8085a78:	689b      	ldr	r3, [r3, #8]
 8085a7a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a7c:	f002 fcc2 	bl	8088404 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8085a80:	6803      	ldr	r3, [r0, #0]
 8085a82:	4629      	mov	r1, r5
 8085a84:	689b      	ldr	r3, [r3, #8]
 8085a86:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a88:	f002 fcbc 	bl	8088404 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8085a8c:	2101      	movs	r1, #1
 8085a8e:	f002 f98d 	bl	8087dac <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8085a92:	4620      	mov	r0, r4
 8085a94:	f7ff ffae 	bl	80859f4 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8085a98:	b002      	add	sp, #8
 8085a9a:	bd70      	pop	{r4, r5, r6, pc}

08085a9c <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 8085a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085a9e:	4604      	mov	r4, r0
 8085aa0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085aa2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085aa4:	f7ff ff88 	bl	80859b8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8085aa8:	2100      	movs	r1, #0
 8085aaa:	4620      	mov	r0, r4
 8085aac:	f7ff ffa9 	bl	8085a02 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085ab0:	f241 1358 	movw	r3, #4440	; 0x1158
 8085ab4:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8085ab6:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8085aba:	d05b      	beq.n	8085b74 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8085abc:	d820      	bhi.n	8085b00 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 8085abe:	f241 0318 	movw	r3, #4120	; 0x1018
 8085ac2:	429d      	cmp	r5, r3
 8085ac4:	d04d      	beq.n	8085b62 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8085ac6:	d80c      	bhi.n	8085ae2 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8085ac8:	f640 7378 	movw	r3, #3960	; 0xf78
 8085acc:	429d      	cmp	r5, r3
 8085ace:	d042      	beq.n	8085b56 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8085ad0:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8085ad4:	429d      	cmp	r5, r3
 8085ad6:	d041      	beq.n	8085b5c <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8085ad8:	f640 7328 	movw	r3, #3880	; 0xf28
 8085adc:	429d      	cmp	r5, r3
 8085ade:	d160      	bne.n	8085ba2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8085ae0:	e059      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8085ae2:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8085ae6:	429d      	cmp	r5, r3
 8085ae8:	d03e      	beq.n	8085b68 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8085aea:	f241 1308 	movw	r3, #4360	; 0x1108
 8085aee:	429d      	cmp	r5, r3
 8085af0:	d03d      	beq.n	8085b6e <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8085af2:	f241 0368 	movw	r3, #4200	; 0x1068
 8085af6:	429d      	cmp	r5, r3
 8085af8:	d153      	bne.n	8085ba2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8085afa:	f042 0220 	orr.w	r2, r2, #32
 8085afe:	e04a      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085b00:	f241 2398 	movw	r3, #4760	; 0x1298
 8085b04:	429d      	cmp	r5, r3
 8085b06:	d03e      	beq.n	8085b86 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8085b08:	d80e      	bhi.n	8085b28 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8085b0a:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8085b0e:	429d      	cmp	r5, r3
 8085b10:	d033      	beq.n	8085b7a <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8085b12:	f241 2348 	movw	r3, #4680	; 0x1248
 8085b16:	429d      	cmp	r5, r3
 8085b18:	d032      	beq.n	8085b80 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8085b1a:	f241 13a8 	movw	r3, #4520	; 0x11a8
 8085b1e:	429d      	cmp	r5, r3
 8085b20:	d13f      	bne.n	8085ba2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8085b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8085b26:	e036      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085b28:	f241 3338 	movw	r3, #4920	; 0x1338
 8085b2c:	429d      	cmp	r5, r3
 8085b2e:	d02d      	beq.n	8085b8c <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8085b30:	d806      	bhi.n	8085b40 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8085b32:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8085b36:	429d      	cmp	r5, r3
 8085b38:	d133      	bne.n	8085ba2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8085b3a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8085b3e:	e02a      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8085b44:	429d      	cmp	r5, r3
 8085b46:	d024      	beq.n	8085b92 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8085b48:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8085b4c:	429d      	cmp	r5, r3
 8085b4e:	d128      	bne.n	8085ba2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 8085b50:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8085b54:	e01f      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8085b56:	f042 0208 	orr.w	r2, r2, #8
 8085b5a:	e01c      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8085b5c:	f042 0210 	orr.w	r2, r2, #16
 8085b60:	e019      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8085b62:	f042 0218 	orr.w	r2, r2, #24
 8085b66:	e016      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8085b68:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8085b6c:	e013      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 8085b6e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8085b72:	e010      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8085b74:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8085b78:	e00d      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8085b7a:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 8085b7e:	e00a      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 8085b80:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8085b84:	e007      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8085b86:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8085b8a:	e004      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 8085b8c:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8085b90:	e001      	b.n	8085b96 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 8085b92:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8085b96:	4620      	mov	r0, r4
 8085b98:	2100      	movs	r1, #0
 8085b9a:	f7ff ff5c 	bl	8085a56 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8085b9e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8085ba0:	e000      	b.n	8085ba4 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8085ba2:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8085ba4:	a801      	add	r0, sp, #4
 8085ba6:	f7ff ff25 	bl	80859f4 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8085baa:	4620      	mov	r0, r4
 8085bac:	b003      	add	sp, #12
 8085bae:	bd30      	pop	{r4, r5, pc}

08085bb0 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8085bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8085bb2:	460c      	mov	r4, r1
 8085bb4:	4617      	mov	r7, r2
 8085bb6:	4605      	mov	r5, r0
 8085bb8:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085bba:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085bbc:	f7ff fefc 	bl	80859b8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8085bc0:	2c00      	cmp	r4, #0
 8085bc2:	bf0c      	ite	eq
 8085bc4:	2400      	moveq	r4, #0
 8085bc6:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8085bc8:	b117      	cbz	r7, 8085bd0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8085bca:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8085bce:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8085bd0:	b10e      	cbz	r6, 8085bd6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8085bd2:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8085bd6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8085bda:	b10b      	cbz	r3, 8085be0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8085bdc:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8085be0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8085be4:	b10b      	cbz	r3, 8085bea <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8085be6:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8085bea:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8085bee:	b10b      	cbz	r3, 8085bf4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8085bf0:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8085bf4:	2102      	movs	r1, #2
 8085bf6:	4628      	mov	r0, r5
 8085bf8:	f7ff ff03 	bl	8085a02 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8085bfc:	f000 0201 	and.w	r2, r0, #1
 8085c00:	4322      	orrs	r2, r4
 8085c02:	2102      	movs	r1, #2
 8085c04:	4628      	mov	r0, r5
 8085c06:	f7ff ff26 	bl	8085a56 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8085c0a:	a801      	add	r0, sp, #4
 8085c0c:	f7ff fef2 	bl	80859f4 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8085c10:	2001      	movs	r0, #1
 8085c12:	b003      	add	sp, #12
 8085c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085c16 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8085c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#endif // Wiring_Wire3
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
 8085c18:	2400      	movs	r4, #0
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8085c1a:	4605      	mov	r5, r0
 8085c1c:	460f      	mov	r7, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085c1e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085c20:	f7ff feca 	bl	80859b8 <_ZN4PMIC4lockEv>
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8085c24:	4623      	mov	r3, r4
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
 8085c26:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
        uint32_t sum = baseOffset + (mask << bitsBaseShift);
 8085c2a:	0118      	lsls	r0, r3, #4
 8085c2c:	f500 605b 	add.w	r0, r0, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8085c30:	1bc2      	subs	r2, r0, r7
 8085c32:	2a00      	cmp	r2, #0
 8085c34:	bfb8      	it	lt
 8085c36:	4252      	neglt	r2, r2
        if (delta < bestDelta && sum <= value) {
 8085c38:	4296      	cmp	r6, r2
 8085c3a:	dd03      	ble.n	8085c44 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8085c3c:	4287      	cmp	r7, r0
 8085c3e:	bf24      	itt	cs
 8085c40:	4616      	movcs	r6, r2
 8085c42:	461c      	movcs	r4, r3
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8085c44:	3301      	adds	r3, #1
 8085c46:	2b40      	cmp	r3, #64	; 0x40
 8085c48:	d1ef      	bne.n	8085c2a <_ZN4PMIC16setChargeVoltageEt+0x14>

    const uint16_t baseValue = 3504;
    // Find closest matching charge voltage not larger than 'voltage'
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);

    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8085c4a:	2104      	movs	r1, #4
 8085c4c:	4628      	mov	r0, r5
 8085c4e:	f7ff fed8 	bl	8085a02 <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8085c52:	f000 0003 	and.w	r0, r0, #3
 8085c56:	ea40 0284 	orr.w	r2, r0, r4, lsl #2

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8085c5a:	b2d2      	uxtb	r2, r2
 8085c5c:	2104      	movs	r1, #4
 8085c5e:	4628      	mov	r0, r5
 8085c60:	f7ff fef9 	bl	8085a56 <_ZN4PMIC13writeRegisterEhh>
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8085c64:	a801      	add	r0, sp, #4
 8085c66:	f7ff fec5 	bl	80859f4 <_ZNSt10lock_guardI4PMICED1Ev>
    cvcr |= (currentCvcr & 0b11);

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);

    return true;
}
 8085c6a:	2001      	movs	r0, #1
 8085c6c:	b003      	add	sp, #12
 8085c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085c70 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8085c70:	6800      	ldr	r0, [r0, #0]
 8085c72:	f7ff bbed 	b.w	8085450 <os_mutex_recursive_lock>

08085c76 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8085c76:	6800      	ldr	r0, [r0, #0]
 8085c78:	f7ff bbf2 	b.w	8085460 <os_mutex_recursive_unlock>

08085c7c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8085c7c:	b570      	push	{r4, r5, r6, lr}
 8085c7e:	4604      	mov	r4, r0
 8085c80:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8085c82:	2500      	movs	r5, #0
 8085c84:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8085c88:	f7ff fbd2 	bl	8085430 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8085c8c:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 8085c8e:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 8085c90:	f7ff fb4e 	bl	8085330 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8085c94:	6065      	str	r5, [r4, #4]
}
 8085c96:	4620      	mov	r0, r4
 8085c98:	bd70      	pop	{r4, r5, r6, pc}

08085c9a <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8085c9a:	b538      	push	{r3, r4, r5, lr}
 8085c9c:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085c9e:	f100 0408 	add.w	r4, r0, #8
 8085ca2:	4620      	mov	r0, r4
 8085ca4:	f7ff ffe4 	bl	8085c70 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8085ca8:	7828      	ldrb	r0, [r5, #0]
 8085caa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8085cae:	f7ff fb2f 	bl	8085310 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8085cb2:	4620      	mov	r0, r4
 8085cb4:	f7ff ffdf 	bl	8085c76 <_ZN14RecursiveMutex6unlockEv>
 8085cb8:	bd38      	pop	{r3, r4, r5, pc}

08085cba <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 8085cba:	b508      	push	{r3, lr}
 8085cbc:	3008      	adds	r0, #8
 8085cbe:	f7ff ffda 	bl	8085c76 <_ZN14RecursiveMutex6unlockEv>
 8085cc2:	bd08      	pop	{r3, pc}

08085cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085cc4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8085cc6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085cc8:	6018      	str	r0, [r3, #0]
 8085cca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8085ccc:	6818      	ldr	r0, [r3, #0]
 8085cce:	b2e5      	uxtb	r5, r4
 8085cd0:	4288      	cmp	r0, r1
 8085cd2:	d906      	bls.n	8085ce2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8085cd4:	3401      	adds	r4, #1
 8085cd6:	2c08      	cmp	r4, #8
 8085cd8:	d002      	beq.n	8085ce0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8085cda:	0840      	lsrs	r0, r0, #1
 8085cdc:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8085cde:	e7f5      	b.n	8085ccc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8085ce0:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8085ce2:	4b02      	ldr	r3, [pc, #8]	; (8085cec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8085ce4:	5d5b      	ldrb	r3, [r3, r5]
 8085ce6:	7013      	strb	r3, [r2, #0]
 8085ce8:	bd30      	pop	{r4, r5, pc}
 8085cea:	bf00      	nop
 8085cec:	0808d950 	.word	0x0808d950

08085cf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8085cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085cf4:	4680      	mov	r8, r0
 8085cf6:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085cf8:	3008      	adds	r0, #8
 8085cfa:	460e      	mov	r6, r1
 8085cfc:	f7ff ffb8 	bl	8085c70 <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 8085d00:	f898 4000 	ldrb.w	r4, [r8]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8085d04:	2214      	movs	r2, #20
 8085d06:	2100      	movs	r1, #0
 8085d08:	a809      	add	r0, sp, #36	; 0x24
 8085d0a:	f004 f8ed 	bl	8089ee8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8085d0e:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8085d10:	4620      	mov	r0, r4
 8085d12:	2200      	movs	r2, #0
 8085d14:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 8085d16:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 8085d1a:	f7ff fb19 	bl	8085350 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 8085d1e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8085d22:	b14c      	cbz	r4, 8085d38 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8085d24:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8085d28:	b92d      	cbnz	r5, 8085d36 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8085d2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8085d2c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8085d30:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8085d34:	e003      	b.n	8085d3e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8085d36:	2400      	movs	r4, #0
 8085d38:	46a1      	mov	r9, r4
 8085d3a:	4627      	mov	r7, r4
 8085d3c:	2501      	movs	r5, #1
 8085d3e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8085d40:	b10d      	cbz	r5, 8085d46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8085d42:	2b00      	cmp	r3, #0
 8085d44:	d13f      	bne.n	8085dc6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 8085d46:	429d      	cmp	r5, r3
 8085d48:	d10b      	bne.n	8085d62 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 8085d4a:	68b2      	ldr	r2, [r6, #8]
 8085d4c:	42ba      	cmp	r2, r7
 8085d4e:	d108      	bne.n	8085d62 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8085d50:	f88d 9020 	strb.w	r9, [sp, #32]
 8085d54:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8085d58:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8085d5c:	89b2      	ldrh	r2, [r6, #12]
 8085d5e:	4291      	cmp	r1, r2
 8085d60:	d031      	beq.n	8085dc6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 8085d62:	b13b      	cbz	r3, 8085d74 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8085d64:	2300      	movs	r3, #0
 8085d66:	f898 0000 	ldrb.w	r0, [r8]
 8085d6a:	9301      	str	r3, [sp, #4]
 8085d6c:	9300      	str	r3, [sp, #0]
 8085d6e:	461a      	mov	r2, r3
 8085d70:	2101      	movs	r1, #1
 8085d72:	e016      	b.n	8085da2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 8085d74:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 8085d78:	68b1      	ldr	r1, [r6, #8]
 8085d7a:	ab04      	add	r3, sp, #16
 8085d7c:	f10d 020f 	add.w	r2, sp, #15
 8085d80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8085d82:	f7ff ff9f 	bl	8085cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 8085d86:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8085d88:	b105      	cbz	r5, 8085d8c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 8085d8a:	b9c9      	cbnz	r1, 8085dc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 8085d8c:	42a9      	cmp	r1, r5
 8085d8e:	d00b      	beq.n	8085da8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 8085d90:	2400      	movs	r4, #0
 8085d92:	9401      	str	r4, [sp, #4]
 8085d94:	7b74      	ldrb	r4, [r6, #13]
 8085d96:	7b33      	ldrb	r3, [r6, #12]
 8085d98:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8085d9c:	f898 0000 	ldrb.w	r0, [r8]
 8085da0:	9400      	str	r4, [sp, #0]
 8085da2:	f7ff faed 	bl	8085380 <HAL_SPI_Set_Settings>
 8085da6:	e00e      	b.n	8085dc6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 8085da8:	68b3      	ldr	r3, [r6, #8]
 8085daa:	42bb      	cmp	r3, r7
 8085dac:	d3f0      	bcc.n	8085d90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8085dae:	f88d 9020 	strb.w	r9, [sp, #32]
 8085db2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8085db6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8085dba:	89b3      	ldrh	r3, [r6, #12]
 8085dbc:	429a      	cmp	r2, r3
 8085dbe:	d1e7      	bne.n	8085d90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 8085dc0:	9b04      	ldr	r3, [sp, #16]
 8085dc2:	42bb      	cmp	r3, r7
 8085dc4:	d1e4      	bne.n	8085d90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 8085dc6:	2000      	movs	r0, #0
 8085dc8:	b00f      	add	sp, #60	; 0x3c
 8085dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08085dce <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8085dce:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 8085dd0:	7800      	ldrb	r0, [r0, #0]
 8085dd2:	f7ff faa5 	bl	8085320 <HAL_SPI_Send_Receive_Data>
}
 8085dd6:	b2c0      	uxtb	r0, r0
 8085dd8:	bd08      	pop	{r3, pc}

08085dda <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8085dda:	b530      	push	{r4, r5, lr}
 8085ddc:	b087      	sub	sp, #28
 8085dde:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085de0:	4604      	mov	r4, r0
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8085de2:	7800      	ldrb	r0, [r0, #0]
 8085de4:	9500      	str	r5, [sp, #0]
 8085de6:	f7ff fabb 	bl	8085360 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
 8085dea:	b93d      	cbnz	r5, 8085dfc <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8085dec:	a902      	add	r1, sp, #8
 8085dee:	7820      	ldrb	r0, [r4, #0]
 8085df0:	f7ff fabe 	bl	8085370 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
 8085df4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8085df8:	07db      	lsls	r3, r3, #31
 8085dfa:	d4f7      	bmi.n	8085dec <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
 8085dfc:	b007      	add	sp, #28
 8085dfe:	bd30      	pop	{r4, r5, pc}

08085e00 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 8085e00:	7800      	ldrb	r0, [r0, #0]
 8085e02:	f7ff ba9d 	b.w	8085340 <HAL_SPI_Is_Enabled>

08085e06 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8085e06:	b510      	push	{r4, lr}
 8085e08:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8085e0a:	6800      	ldr	r0, [r0, #0]
 8085e0c:	b118      	cbz	r0, 8085e16 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8085e0e:	f7ff fd83 	bl	8085918 <free>
            wakeupSource_ = nullptr;
 8085e12:	2300      	movs	r3, #0
 8085e14:	6023      	str	r3, [r4, #0]
 8085e16:	bd10      	pop	{r4, pc}

08085e18 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085e18:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8085e1a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085e1e:	460d      	mov	r5, r1
        error_ = result.error_;
 8085e20:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8085e22:	460b      	mov	r3, r1
 8085e24:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085e28:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8085e2a:	f8c0 2006 	str.w	r2, [r0, #6]
 8085e2e:	889b      	ldrh	r3, [r3, #4]
 8085e30:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8085e32:	f7ff ffe8 	bl	8085e06 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8085e36:	682b      	ldr	r3, [r5, #0]
 8085e38:	b113      	cbz	r3, 8085e40 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8085e3a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8085e3c:	2300      	movs	r3, #0
 8085e3e:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 8085e40:	4620      	mov	r0, r4
 8085e42:	bd38      	pop	{r3, r4, r5, pc}

08085e44 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8085e44:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8085e48:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8085e4a:	b90b      	cbnz	r3, 8085e50 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8085e4c:	680a      	ldr	r2, [r1, #0]
 8085e4e:	b19a      	cbz	r2, 8085e78 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8085e50:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8085e52:	b15c      	cbz	r4, 8085e6c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8085e54:	88a2      	ldrh	r2, [r4, #4]
 8085e56:	2a01      	cmp	r2, #1
 8085e58:	d003      	beq.n	8085e62 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8085e5a:	2a04      	cmp	r2, #4
 8085e5c:	d106      	bne.n	8085e6c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8085e5e:	2202      	movs	r2, #2
 8085e60:	e005      	b.n	8085e6e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8085e62:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8085e64:	718a      	strb	r2, [r1, #6]
 8085e66:	810b      	strh	r3, [r1, #8]
 8085e68:	814c      	strh	r4, [r1, #10]
                    break;
 8085e6a:	e005      	b.n	8085e78 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8085e6c:	2204      	movs	r2, #4
 8085e6e:	810b      	strh	r3, [r1, #8]
 8085e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085e74:	718a      	strb	r2, [r1, #6]
 8085e76:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8085e78:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8085e7c:	6003      	str	r3, [r0, #0]
 8085e7e:	888b      	ldrh	r3, [r1, #4]
 8085e80:	8083      	strh	r3, [r0, #4]
    }
 8085e82:	bd10      	pop	{r4, pc}

08085e84 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8085e84:	4601      	mov	r1, r0
 8085e86:	2200      	movs	r2, #0
 8085e88:	208c      	movs	r0, #140	; 0x8c
 8085e8a:	f7ff bab9 	b.w	8085400 <HAL_Core_System_Reset_Ex>

08085e8e <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8085e8e:	2000      	movs	r0, #0
 8085e90:	f7ff bff8 	b.w	8085e84 <_ZN11SystemClass5resetEm>

08085e94 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8085e94:	b530      	push	{r4, r5, lr}
 8085e96:	4604      	mov	r4, r0
 8085e98:	b085      	sub	sp, #20
 8085e9a:	4608      	mov	r0, r1
 8085e9c:	4611      	mov	r1, r2
 8085e9e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8085ea0:	2300      	movs	r3, #0
 8085ea2:	f7ff fc65 	bl	8085770 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8085ea6:	2300      	movs	r3, #0
 8085ea8:	9301      	str	r3, [sp, #4]
 8085eaa:	f8ad 3008 	strh.w	r3, [sp, #8]
 8085eae:	f88d 300a 	strb.w	r3, [sp, #10]
 8085eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8085eb6:	4d09      	ldr	r5, [pc, #36]	; (8085edc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8085eb8:	a901      	add	r1, sp, #4
 8085eba:	f8ad 000c 	strh.w	r0, [sp, #12]
 8085ebe:	4628      	mov	r0, r5
 8085ec0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8085ec4:	f7ff ffa8 	bl	8085e18 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8085ec8:	a801      	add	r0, sp, #4
 8085eca:	f7ff ff9c 	bl	8085e06 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8085ece:	4620      	mov	r0, r4
 8085ed0:	4629      	mov	r1, r5
 8085ed2:	f7ff ffb7 	bl	8085e44 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8085ed6:	4620      	mov	r0, r4
 8085ed8:	b005      	add	sp, #20
 8085eda:	bd30      	pop	{r4, r5, pc}
 8085edc:	20000924 	.word	0x20000924

08085ee0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8085ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8085ee4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8085ee6:	4c08      	ldr	r4, [pc, #32]	; (8085f08 <_GLOBAL__sub_I_System+0x28>)
 8085ee8:	2000      	movs	r0, #0
 8085eea:	6020      	str	r0, [r4, #0]
 8085eec:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8085eee:	71a0      	strb	r0, [r4, #6]
 8085ef0:	8120      	strh	r0, [r4, #8]
 8085ef2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8085ef4:	f7ff fc2c 	bl	8085750 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8085ef8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8085efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8085efe:	4a03      	ldr	r2, [pc, #12]	; (8085f0c <_GLOBAL__sub_I_System+0x2c>)
 8085f00:	4903      	ldr	r1, [pc, #12]	; (8085f10 <_GLOBAL__sub_I_System+0x30>)
 8085f02:	f002 baa5 	b.w	8088450 <__aeabi_atexit>
 8085f06:	bf00      	nop
 8085f08:	20000924 	.word	0x20000924
 8085f0c:	20000140 	.word	0x20000140
 8085f10:	0808018d 	.word	0x0808018d

08085f14 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8085f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f16:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085f18:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8085f1a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085f1e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8085f20:	2201      	movs	r2, #1
 8085f22:	f247 5330 	movw	r3, #30000	; 0x7530
 8085f26:	4621      	mov	r1, r4
 8085f28:	47a8      	blx	r5
}
 8085f2a:	b003      	add	sp, #12
 8085f2c:	bd30      	pop	{r4, r5, pc}

08085f2e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8085f2e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085f30:	6803      	ldr	r3, [r0, #0]
 8085f32:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8085f34:	f247 5330 	movw	r3, #30000	; 0x7530
 8085f38:	46a4      	mov	ip, r4
}
 8085f3a:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085f3c:	4760      	bx	ip

08085f3e <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8085f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f40:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 8085f42:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8085f44:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 8085f48:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8085f4a:	4621      	mov	r1, r4
 8085f4c:	4613      	mov	r3, r2
 8085f4e:	2201      	movs	r2, #1
 8085f50:	47a8      	blx	r5
}
 8085f52:	b003      	add	sp, #12
 8085f54:	bd30      	pop	{r4, r5, pc}

08085f56 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8085f56:	4770      	bx	lr

08085f58 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8085f58:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8085f5a:	4903      	ldr	r1, [pc, #12]	; (8085f68 <_ZN9TCPClient8remoteIPEv+0x10>)
 8085f5c:	6001      	str	r1, [r0, #0]
 8085f5e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8085f62:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8085f64:	4770      	bx	lr
 8085f66:	bf00      	nop
 8085f68:	0808dba0 	.word	0x0808dba0

08085f6c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8085f6c:	4770      	bx	lr

08085f6e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8085f6e:	2000      	movs	r0, #0
 8085f70:	4770      	bx	lr

08085f72 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8085f72:	b510      	push	{r4, lr}
 8085f74:	4604      	mov	r4, r0
 8085f76:	2114      	movs	r1, #20
 8085f78:	f002 fa78 	bl	808846c <_ZdlPvj>
 8085f7c:	4620      	mov	r0, r4
 8085f7e:	bd10      	pop	{r4, pc}

08085f80 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
 8085f80:	f7fa b891 	b.w	80800a6 <_ZdlPv>

08085f84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8085f84:	b510      	push	{r4, lr}
 8085f86:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8085f88:	6803      	ldr	r3, [r0, #0]
 8085f8a:	689b      	ldr	r3, [r3, #8]
 8085f8c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8085f8e:	68a3      	ldr	r3, [r4, #8]
 8085f90:	3b01      	subs	r3, #1
 8085f92:	60a3      	str	r3, [r4, #8]
 8085f94:	b92b      	cbnz	r3, 8085fa2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 8085f96:	6823      	ldr	r3, [r4, #0]
 8085f98:	4620      	mov	r0, r4
        }
    }
 8085f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8085f9e:	68db      	ldr	r3, [r3, #12]
 8085fa0:	4718      	bx	r3
 8085fa2:	bd10      	pop	{r4, pc}

08085fa4 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8085fa4:	b510      	push	{r4, lr}
 8085fa6:	6943      	ldr	r3, [r0, #20]
 8085fa8:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8085faa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8085fae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8085fb2:	429a      	cmp	r2, r3
 8085fb4:	d005      	beq.n	8085fc2 <_ZN9TCPClient4peekEv+0x1e>
 8085fb6:	6962      	ldr	r2, [r4, #20]
 8085fb8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8085fbc:	4413      	add	r3, r2
 8085fbe:	7918      	ldrb	r0, [r3, #4]
 8085fc0:	bd10      	pop	{r4, pc}
 8085fc2:	6803      	ldr	r3, [r0, #0]
 8085fc4:	691b      	ldr	r3, [r3, #16]
 8085fc6:	4798      	blx	r3
 8085fc8:	2800      	cmp	r0, #0
 8085fca:	d1f4      	bne.n	8085fb6 <_ZN9TCPClient4peekEv+0x12>
 8085fcc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8085fd0:	bd10      	pop	{r4, pc}

08085fd2 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 8085fd2:	b510      	push	{r4, lr}
 8085fd4:	6943      	ldr	r3, [r0, #20]
 8085fd6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8085fd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8085fdc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8085fe0:	429a      	cmp	r2, r3
 8085fe2:	d008      	beq.n	8085ff6 <_ZN9TCPClient4readEv+0x24>
 8085fe4:	6962      	ldr	r2, [r4, #20]
 8085fe6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8085fea:	1c59      	adds	r1, r3, #1
 8085fec:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8085ff0:	4413      	add	r3, r2
 8085ff2:	7918      	ldrb	r0, [r3, #4]
 8085ff4:	bd10      	pop	{r4, pc}
 8085ff6:	6803      	ldr	r3, [r0, #0]
 8085ff8:	691b      	ldr	r3, [r3, #16]
 8085ffa:	4798      	blx	r3
 8085ffc:	2800      	cmp	r0, #0
 8085ffe:	d1f1      	bne.n	8085fe4 <_ZN9TCPClient4readEv+0x12>
 8086000:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086004:	bd10      	pop	{r4, pc}

08086006 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086008:	6943      	ldr	r3, [r0, #20]
 808600a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 808600c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086010:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086014:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8086016:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8086018:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 808601a:	d106      	bne.n	808602a <_ZN9TCPClient4readEPhj+0x24>
 808601c:	6803      	ldr	r3, [r0, #0]
 808601e:	691b      	ldr	r3, [r3, #16]
 8086020:	4798      	blx	r3
 8086022:	b910      	cbnz	r0, 808602a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8086024:	f04f 34ff 	mov.w	r4, #4294967295
 8086028:	e014      	b.n	8086054 <_ZN9TCPClient4readEPhj+0x4e>
 808602a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808602c:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 808602e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8086032:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086036:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8086038:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 808603a:	42bc      	cmp	r4, r7
 808603c:	bf28      	it	cs
 808603e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086040:	3104      	adds	r1, #4
 8086042:	4622      	mov	r2, r4
 8086044:	f003 ff45 	bl	8089ed2 <memcpy>
 8086048:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 808604a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 808604e:	4423      	add	r3, r4
 8086050:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8086054:	4620      	mov	r0, r4
 8086056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086058 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8086058:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 808605a:	2300      	movs	r3, #0
 808605c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8086060:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8086062:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8086066:	4770      	bx	lr

08086068 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8086068:	b538      	push	{r3, r4, r5, lr}
 808606a:	6942      	ldr	r2, [r0, #20]
 808606c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 808606e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086072:	b11b      	cbz	r3, 808607c <_ZN9TCPClient9availableEv+0x14>
 8086074:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8086078:	429a      	cmp	r2, r3
 808607a:	d00c      	beq.n	8086096 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 808607c:	6920      	ldr	r0, [r4, #16]
 808607e:	f001 ff0d 	bl	8087e9c <_ZN5spark12NetworkClass4fromEm>
 8086082:	6803      	ldr	r3, [r0, #0]
 8086084:	68db      	ldr	r3, [r3, #12]
 8086086:	4798      	blx	r3
 8086088:	b318      	cbz	r0, 80860d2 <_ZN9TCPClient9availableEv+0x6a>
 808608a:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808608c:	6818      	ldr	r0, [r3, #0]
 808608e:	f7ff faaf 	bl	80855f0 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8086092:	b918      	cbnz	r0, 808609c <_ZN9TCPClient9availableEv+0x34>
 8086094:	e01d      	b.n	80860d2 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8086096:	f7ff ffdf 	bl	8086058 <_ZN9TCPClient12flush_bufferEv>
 808609a:	e7ef      	b.n	808607c <_ZN9TCPClient9availableEv+0x14>
 808609c:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 808609e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80860a2:	297f      	cmp	r1, #127	; 0x7f
 80860a4:	d815      	bhi.n	80860d2 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80860a6:	1d05      	adds	r5, r0, #4
 80860a8:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80860ac:	2300      	movs	r3, #0
 80860ae:	4429      	add	r1, r5
 80860b0:	6800      	ldr	r0, [r0, #0]
 80860b2:	f7ff fab5 	bl	8085620 <socket_receive>
            if (ret > 0)
 80860b6:	2800      	cmp	r0, #0
 80860b8:	dd0b      	ble.n	80860d2 <_ZN9TCPClient9availableEv+0x6a>
 80860ba:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80860bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80860c0:	b90a      	cbnz	r2, 80860c6 <_ZN9TCPClient9availableEv+0x5e>
 80860c2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80860c6:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80860c8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80860cc:	4418      	add	r0, r3
 80860ce:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80860d2:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80860d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80860d8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80860dc:	1a18      	subs	r0, r3, r0
}
 80860de:	bd38      	pop	{r3, r4, r5, pc}

080860e0 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80860e0:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80860e2:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80860e4:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80860e6:	6818      	ldr	r0, [r3, #0]
 80860e8:	f7ff fa82 	bl	80855f0 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80860ec:	b118      	cbz	r0, 80860f6 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80860ee:	6963      	ldr	r3, [r4, #20]
 80860f0:	6818      	ldr	r0, [r3, #0]
 80860f2:	f7ff faad 	bl	8085650 <socket_close>
 80860f6:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80860f8:	f7ff fab2 	bl	8085660 <socket_handle_invalid>
 80860fc:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80860fe:	6963      	ldr	r3, [r4, #20]
 8086100:	2200      	movs	r2, #0
 8086102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8086106:	4620      	mov	r0, r4
}
 8086108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 808610c:	f7ff bfa4 	b.w	8086058 <_ZN9TCPClient12flush_bufferEv>

08086110 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086114:	461e      	mov	r6, r3
    stop();
 8086116:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8086118:	b08a      	sub	sp, #40	; 0x28
    stop();
 808611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 808611c:	4604      	mov	r4, r0
 808611e:	460d      	mov	r5, r1
 8086120:	4617      	mov	r7, r2
    stop();
 8086122:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 8086124:	4630      	mov	r0, r6
 8086126:	f001 feb9 	bl	8087e9c <_ZN5spark12NetworkClass4fromEm>
 808612a:	6803      	ldr	r3, [r0, #0]
 808612c:	68db      	ldr	r3, [r3, #12]
 808612e:	4798      	blx	r3
 8086130:	2800      	cmp	r0, #0
 8086132:	d050      	beq.n	80861d6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8086134:	9600      	str	r6, [sp, #0]
 8086136:	463b      	mov	r3, r7
 8086138:	2206      	movs	r2, #6
 808613a:	2101      	movs	r1, #1
 808613c:	2002      	movs	r0, #2
 808613e:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8086142:	f7ff fa5d 	bl	8085600 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 8086146:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8086148:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 808614c:	2600      	movs	r6, #0
 808614e:	9302      	str	r3, [sp, #8]
 8086150:	6963      	ldr	r3, [r4, #20]
 8086152:	9603      	str	r6, [sp, #12]
 8086154:	681b      	ldr	r3, [r3, #0]
 8086156:	2001      	movs	r0, #1
 8086158:	9301      	str	r3, [sp, #4]
 808615a:	4b20      	ldr	r3, [pc, #128]	; (80861dc <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 808615c:	aa02      	add	r2, sp, #8
 808615e:	9300      	str	r3, [sp, #0]
 8086160:	491f      	ldr	r1, [pc, #124]	; (80861e0 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 8086162:	4633      	mov	r3, r6
 8086164:	f7ff fadc 	bl	8085720 <log_message>

          if (socket_handle_valid(d_->sock))
 8086168:	6963      	ldr	r3, [r4, #20]
 808616a:	6818      	ldr	r0, [r3, #0]
 808616c:	f7ff fa40 	bl	80855f0 <socket_handle_valid>
 8086170:	b388      	cbz	r0, 80861d6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
          {
            flush_buffer();
 8086172:	4620      	mov	r0, r4
 8086174:	f7ff ff70 	bl	8086058 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8086178:	2302      	movs	r3, #2
 808617a:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 808617e:	0a3b      	lsrs	r3, r7, #8
 8086180:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8086184:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086186:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 808618a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 808618e:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8086190:	f88d 700b 	strb.w	r7, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8086194:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8086198:	796b      	ldrb	r3, [r5, #5]
 808619a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 808619e:	792b      	ldrb	r3, [r5, #4]
 80861a0:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80861a4:	f7ff fa6c 	bl	8085680 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80861a8:	6963      	ldr	r3, [r4, #20]
 80861aa:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80861ac:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80861ae:	a902      	add	r1, sp, #8
 80861b0:	6818      	ldr	r0, [r3, #0]
 80861b2:	f7ff fa2d 	bl	8085610 <socket_connect>
 80861b6:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80861b8:	4640      	mov	r0, r8
 80861ba:	f7ff fa61 	bl	8085680 <HAL_NET_SetNetWatchDog>
 80861be:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80861c0:	686a      	ldr	r2, [r5, #4]
 80861c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 80861c6:	b12f      	cbz	r7, 80861d4 <_ZN9TCPClient7connectE9IPAddresstm+0xc4>
            {
                stop();
 80861c8:	6823      	ldr	r3, [r4, #0]
 80861ca:	4620      	mov	r0, r4
 80861cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80861ce:	4798      	blx	r3
 80861d0:	4630      	mov	r0, r6
 80861d2:	e000      	b.n	80861d6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80861d4:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80861d6:	b00a      	add	sp, #40	; 0x28
 80861d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80861dc:	0808d9c7 	.word	0x0808d9c7
 80861e0:	0808d9c0 	.word	0x0808d9c0

080861e4 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80861e4:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80861e6:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80861e8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80861ea:	6818      	ldr	r0, [r3, #0]
 80861ec:	f7ff fa00 	bl	80855f0 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80861f0:	b908      	cbnz	r0, 80861f6 <_ZN9TCPClient6statusEv+0x12>
 80861f2:	2000      	movs	r0, #0
 80861f4:	bd10      	pop	{r4, pc}
 80861f6:	6920      	ldr	r0, [r4, #16]
 80861f8:	f001 fe50 	bl	8087e9c <_ZN5spark12NetworkClass4fromEm>
 80861fc:	6803      	ldr	r3, [r0, #0]
 80861fe:	68db      	ldr	r3, [r3, #12]
 8086200:	4798      	blx	r3
 8086202:	2800      	cmp	r0, #0
 8086204:	d0f5      	beq.n	80861f2 <_ZN9TCPClient6statusEv+0xe>
 8086206:	6963      	ldr	r3, [r4, #20]
 8086208:	6818      	ldr	r0, [r3, #0]
 808620a:	f7ff f9e9 	bl	80855e0 <socket_active_status>
 808620e:	fab0 f080 	clz	r0, r0
 8086212:	0940      	lsrs	r0, r0, #5
}
 8086214:	bd10      	pop	{r4, pc}

08086216 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 8086216:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 808621a:	2500      	movs	r5, #0
 808621c:	6045      	str	r5, [r0, #4]
 808621e:	4604      	mov	r4, r0
 8086220:	460e      	mov	r6, r1
 8086222:	4617      	mov	r7, r2
 8086224:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8086226:	f7ff ffdd 	bl	80861e4 <_ZN9TCPClient6statusEv>
 808622a:	b160      	cbz	r0, 8086246 <_ZN9TCPClient5writeEPKhjm+0x30>
 808622c:	6960      	ldr	r0, [r4, #20]
 808622e:	9501      	str	r5, [sp, #4]
 8086230:	f8cd 8000 	str.w	r8, [sp]
 8086234:	462b      	mov	r3, r5
 8086236:	463a      	mov	r2, r7
 8086238:	4631      	mov	r1, r6
 808623a:	6800      	ldr	r0, [r0, #0]
 808623c:	f7ff fa18 	bl	8085670 <socket_send_ex>
    if (ret < 0) {
 8086240:	2800      	cmp	r0, #0
 8086242:	da03      	bge.n	808624c <_ZN9TCPClient5writeEPKhjm+0x36>
 8086244:	e001      	b.n	808624a <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8086246:	f04f 30ff 	mov.w	r0, #4294967295
 808624a:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 808624c:	b002      	add	sp, #8
 808624e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086252 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8086252:	b538      	push	{r3, r4, r5, lr}
 8086254:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8086256:	f7ff ffc5 	bl	80861e4 <_ZN9TCPClient6statusEv>
 808625a:	bb00      	cbnz	r0, 808629e <_ZN9TCPClient9connectedEv+0x4c>
 808625c:	6963      	ldr	r3, [r4, #20]
 808625e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8086262:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8086266:	4291      	cmp	r1, r2
 8086268:	d119      	bne.n	808629e <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808626a:	6818      	ldr	r0, [r3, #0]
 808626c:	f7ff f9c0 	bl	80855f0 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8086270:	b128      	cbz	r0, 808627e <_ZN9TCPClient9connectedEv+0x2c>
 8086272:	6963      	ldr	r3, [r4, #20]
 8086274:	6818      	ldr	r0, [r3, #0]
 8086276:	f7ff f9b3 	bl	80855e0 <socket_active_status>
 808627a:	2801      	cmp	r0, #1
 808627c:	d001      	beq.n	8086282 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 808627e:	2500      	movs	r5, #0
 8086280:	e00e      	b.n	80862a0 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8086282:	6823      	ldr	r3, [r4, #0]
 8086284:	4620      	mov	r0, r4
 8086286:	691b      	ldr	r3, [r3, #16]
 8086288:	4798      	blx	r3
 808628a:	2800      	cmp	r0, #0
 808628c:	bf14      	ite	ne
 808628e:	2501      	movne	r5, #1
 8086290:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8086292:	d105      	bne.n	80862a0 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 8086294:	6823      	ldr	r3, [r4, #0]
 8086296:	4620      	mov	r0, r4
 8086298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808629a:	4798      	blx	r3
 808629c:	e000      	b.n	80862a0 <_ZN9TCPClient9connectedEv+0x4e>
 808629e:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80862a0:	4628      	mov	r0, r5
 80862a2:	bd38      	pop	{r3, r4, r5, pc}

080862a4 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80862a4:	b508      	push	{r3, lr}
   return (status()!=0);
 80862a6:	f7ff ff9d 	bl	80861e4 <_ZN9TCPClient6statusEv>
}
 80862aa:	3000      	adds	r0, #0
 80862ac:	bf18      	it	ne
 80862ae:	2001      	movne	r0, #1
 80862b0:	bd08      	pop	{r3, pc}

080862b2 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80862b2:	b510      	push	{r4, lr}
 80862b4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80862b6:	2300      	movs	r3, #0
 80862b8:	6001      	str	r1, [r0, #0]
 80862ba:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80862be:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80862c2:	3088      	adds	r0, #136	; 0x88
 80862c4:	f001 fa22 	bl	808770c <_ZN9IPAddressC1Ev>
}
 80862c8:	4620      	mov	r0, r4
 80862ca:	bd10      	pop	{r4, pc}

080862cc <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80862cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80862d0:	b570      	push	{r4, r5, r6, lr}
 80862d2:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80862d4:	4a14      	ldr	r2, [pc, #80]	; (8086328 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80862d6:	2300      	movs	r3, #0
 80862d8:	6043      	str	r3, [r0, #4]
 80862da:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80862dc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80862de:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80862e0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80862e2:	2090      	movs	r0, #144	; 0x90
 80862e4:	460e      	mov	r6, r1
 80862e6:	f7f9 feda 	bl	808009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80862ea:	4605      	mov	r5, r0
 80862ec:	b110      	cbz	r0, 80862f4 <_ZN9TCPClientC1Em+0x28>
 80862ee:	4631      	mov	r1, r6
 80862f0:	f7ff ffdf 	bl	80862b2 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80862f4:	2014      	movs	r0, #20
 80862f6:	f7f9 fed2 	bl	808009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80862fa:	4603      	mov	r3, r0
 80862fc:	b128      	cbz	r0, 808630a <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80862fe:	2201      	movs	r2, #1
 8086300:	6042      	str	r2, [r0, #4]
 8086302:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8086304:	4a09      	ldr	r2, [pc, #36]	; (808632c <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8086306:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8086308:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808630a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 808630c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808630e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8086310:	b128      	cbz	r0, 808631e <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8086312:	6843      	ldr	r3, [r0, #4]
 8086314:	3b01      	subs	r3, #1
 8086316:	6043      	str	r3, [r0, #4]
 8086318:	b90b      	cbnz	r3, 808631e <_ZN9TCPClientC1Em+0x52>
 808631a:	f7ff fe33 	bl	8085f84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 808631e:	4620      	mov	r0, r4
 8086320:	f7ff fe9a 	bl	8086058 <_ZN9TCPClient12flush_bufferEv>
}
 8086324:	4620      	mov	r0, r4
 8086326:	bd70      	pop	{r4, r5, r6, pc}
 8086328:	0808d97c 	.word	0x0808d97c
 808632c:	0808d960 	.word	0x0808d960

08086330 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8086330:	b510      	push	{r4, lr}
 8086332:	4604      	mov	r4, r0
 8086334:	f7ff f994 	bl	8085660 <socket_handle_invalid>
 8086338:	4601      	mov	r1, r0
 808633a:	4620      	mov	r0, r4
 808633c:	f7ff ffc6 	bl	80862cc <_ZN9TCPClientC1Em>
{
}
 8086340:	4620      	mov	r0, r4
 8086342:	bd10      	pop	{r4, pc}

08086344 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 8086344:	b510      	push	{r4, lr}
 8086346:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 8086348:	6800      	ldr	r0, [r0, #0]
 808634a:	f7ff f951 	bl	80855f0 <socket_handle_valid>
 808634e:	b110      	cbz	r0, 8086356 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 8086350:	6820      	ldr	r0, [r4, #0]
 8086352:	f7ff f97d 	bl	8085650 <socket_close>
    }
}
 8086356:	4620      	mov	r0, r4
 8086358:	bd10      	pop	{r4, pc}

0808635a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 808635a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 808635c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 808635e:	4620      	mov	r0, r4
 8086360:	f7ff fff0 	bl	8086344 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 8086364:	b124      	cbz	r4, 8086370 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8086366:	4620      	mov	r0, r4
 8086368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808636c:	f7f9 be9b 	b.w	80800a6 <_ZdlPv>
 8086370:	bd10      	pop	{r4, pc}
	...

08086374 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8086374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086378:	461e      	mov	r6, r3
    stop();
 808637a:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808637c:	b086      	sub	sp, #24
    stop();
 808637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8086380:	4605      	mov	r5, r0
 8086382:	460f      	mov	r7, r1
 8086384:	4690      	mov	r8, r2
    stop();
 8086386:	4798      	blx	r3
    if (Network.ready())
 8086388:	4811      	ldr	r0, [pc, #68]	; (80863d0 <_ZN9TCPClient7connectEPKctm+0x5c>)
 808638a:	f001 fd3b 	bl	8087e04 <_ZN5spark12NetworkClass5readyEv>
 808638e:	b1d8      	cbz	r0, 80863c8 <_ZN9TCPClient7connectEPKctm+0x54>
    {
        IPAddress ip_addr;
 8086390:	a802      	add	r0, sp, #8
 8086392:	f001 f9bb 	bl	808770c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 8086396:	4638      	mov	r0, r7
 8086398:	f004 fb26 	bl	808a9e8 <strlen>
 808639c:	2400      	movs	r4, #0
 808639e:	b281      	uxth	r1, r0
 80863a0:	9400      	str	r4, [sp, #0]
 80863a2:	4633      	mov	r3, r6
 80863a4:	aa03      	add	r2, sp, #12
 80863a6:	4638      	mov	r0, r7
 80863a8:	f7ff f972 	bl	8085690 <inet_gethostbyname>
 80863ac:	b958      	cbnz	r0, 80863c6 <_ZN9TCPClient7connectEPKctm+0x52>
            return connect(ip_addr, port, nif);
 80863ae:	682b      	ldr	r3, [r5, #0]
 80863b0:	4642      	mov	r2, r8
 80863b2:	6a1c      	ldr	r4, [r3, #32]
 80863b4:	4b07      	ldr	r3, [pc, #28]	; (80863d4 <_ZN9TCPClient7connectEPKctm+0x60>)
 80863b6:	a904      	add	r1, sp, #16
 80863b8:	9304      	str	r3, [sp, #16]
 80863ba:	9b03      	ldr	r3, [sp, #12]
 80863bc:	4628      	mov	r0, r5
 80863be:	9305      	str	r3, [sp, #20]
 80863c0:	4633      	mov	r3, r6
 80863c2:	47a0      	blx	r4
 80863c4:	e000      	b.n	80863c8 <_ZN9TCPClient7connectEPKctm+0x54>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80863c6:	4620      	mov	r0, r4
}
 80863c8:	b006      	add	sp, #24
 80863ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80863ce:	bf00      	nop
 80863d0:	20000ea8 	.word	0x20000ea8
 80863d4:	0808dba0 	.word	0x0808dba0

080863d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80863d8:	b510      	push	{r4, lr}
 80863da:	4604      	mov	r4, r0
{
	free(buffer);
 80863dc:	6800      	ldr	r0, [r0, #0]
 80863de:	f7ff fa9b 	bl	8085918 <free>
}
 80863e2:	4620      	mov	r0, r4
 80863e4:	bd10      	pop	{r4, pc}

080863e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80863e6:	b510      	push	{r4, lr}
 80863e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80863ea:	6800      	ldr	r0, [r0, #0]
 80863ec:	b108      	cbz	r0, 80863f2 <_ZN6String10invalidateEv+0xc>
 80863ee:	f7ff fa93 	bl	8085918 <free>
	buffer = NULL;
 80863f2:	2300      	movs	r3, #0
 80863f4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80863f6:	60a3      	str	r3, [r4, #8]
 80863f8:	6063      	str	r3, [r4, #4]
 80863fa:	bd10      	pop	{r4, pc}

080863fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80863fc:	b538      	push	{r3, r4, r5, lr}
 80863fe:	4604      	mov	r4, r0
 8086400:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8086402:	6800      	ldr	r0, [r0, #0]
 8086404:	3101      	adds	r1, #1
 8086406:	f7ff fa8f 	bl	8085928 <realloc>
	if (newbuffer) {
 808640a:	b110      	cbz	r0, 8086412 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808640c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8086410:	2001      	movs	r0, #1
	}
	return 0;
}
 8086412:	bd38      	pop	{r3, r4, r5, pc}

08086414 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8086414:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8086416:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8086418:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808641a:	b113      	cbz	r3, 8086422 <_ZN6String7reserveEj+0xe>
 808641c:	6843      	ldr	r3, [r0, #4]
 808641e:	428b      	cmp	r3, r1
 8086420:	d207      	bcs.n	8086432 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8086422:	4620      	mov	r0, r4
 8086424:	f7ff ffea 	bl	80863fc <_ZN6String12changeBufferEj>
 8086428:	b120      	cbz	r0, 8086434 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808642a:	68a3      	ldr	r3, [r4, #8]
 808642c:	b90b      	cbnz	r3, 8086432 <_ZN6String7reserveEj+0x1e>
 808642e:	6822      	ldr	r2, [r4, #0]
 8086430:	7013      	strb	r3, [r2, #0]
 8086432:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8086434:	bd10      	pop	{r4, pc}

08086436 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8086436:	b570      	push	{r4, r5, r6, lr}
 8086438:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808643a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808643c:	4604      	mov	r4, r0
 808643e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8086440:	f7ff ffe8 	bl	8086414 <_ZN6String7reserveEj>
 8086444:	b918      	cbnz	r0, 808644e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8086446:	4620      	mov	r0, r4
 8086448:	f7ff ffcd 	bl	80863e6 <_ZN6String10invalidateEv>
		return *this;
 808644c:	e009      	b.n	8086462 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808644e:	462a      	mov	r2, r5
 8086450:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8086452:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8086454:	6820      	ldr	r0, [r4, #0]
 8086456:	f003 fd3c 	bl	8089ed2 <memcpy>
	buffer[len] = 0;
 808645a:	6822      	ldr	r2, [r4, #0]
 808645c:	68a3      	ldr	r3, [r4, #8]
 808645e:	2100      	movs	r1, #0
 8086460:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8086462:	4620      	mov	r0, r4
 8086464:	bd70      	pop	{r4, r5, r6, pc}

08086466 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8086466:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086468:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808646a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808646c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808646e:	6043      	str	r3, [r0, #4]
	len = 0;
 8086470:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086472:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8086474:	460d      	mov	r5, r1
 8086476:	b139      	cbz	r1, 8086488 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8086478:	4608      	mov	r0, r1
 808647a:	f004 fab5 	bl	808a9e8 <strlen>
 808647e:	4629      	mov	r1, r5
 8086480:	4602      	mov	r2, r0
 8086482:	4620      	mov	r0, r4
 8086484:	f7ff ffd7 	bl	8086436 <_ZN6String4copyEPKcj>
}
 8086488:	4620      	mov	r0, r4
 808648a:	bd38      	pop	{r3, r4, r5, pc}

0808648c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808648c:	b538      	push	{r3, r4, r5, lr}
 808648e:	4605      	mov	r5, r0
	if (buffer) {
 8086490:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8086492:	460c      	mov	r4, r1
	if (buffer) {
 8086494:	b160      	cbz	r0, 80864b0 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8086496:	686a      	ldr	r2, [r5, #4]
 8086498:	688b      	ldr	r3, [r1, #8]
 808649a:	429a      	cmp	r2, r3
 808649c:	d306      	bcc.n	80864ac <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808649e:	6809      	ldr	r1, [r1, #0]
 80864a0:	f003 fd6a 	bl	8089f78 <strcpy>
			len = rhs.len;
 80864a4:	68a3      	ldr	r3, [r4, #8]
 80864a6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80864a8:	2300      	movs	r3, #0
 80864aa:	e00a      	b.n	80864c2 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80864ac:	f7ff fa34 	bl	8085918 <free>
		}
	}
	buffer = rhs.buffer;
 80864b0:	6823      	ldr	r3, [r4, #0]
 80864b2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80864b4:	6863      	ldr	r3, [r4, #4]
 80864b6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80864b8:	68a3      	ldr	r3, [r4, #8]
 80864ba:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80864bc:	2300      	movs	r3, #0
 80864be:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80864c0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80864c2:	60a3      	str	r3, [r4, #8]
 80864c4:	bd38      	pop	{r3, r4, r5, pc}

080864c6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80864c6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80864c8:	b510      	push	{r4, lr}
 80864ca:	460b      	mov	r3, r1
 80864cc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80864ce:	d007      	beq.n	80864e0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80864d0:	6809      	ldr	r1, [r1, #0]
 80864d2:	b119      	cbz	r1, 80864dc <_ZN6StringaSERKS_+0x16>
 80864d4:	689a      	ldr	r2, [r3, #8]
 80864d6:	f7ff ffae 	bl	8086436 <_ZN6String4copyEPKcj>
 80864da:	e001      	b.n	80864e0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80864dc:	f7ff ff83 	bl	80863e6 <_ZN6String10invalidateEv>

	return *this;
}
 80864e0:	4620      	mov	r0, r4
 80864e2:	bd10      	pop	{r4, pc}

080864e4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80864e4:	b510      	push	{r4, lr}
 80864e6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80864e8:	2300      	movs	r3, #0
 80864ea:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80864ec:	6043      	str	r3, [r0, #4]
	len = 0;
 80864ee:	6083      	str	r3, [r0, #8]
	flags = 0;
 80864f0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80864f2:	f7ff ffe8 	bl	80864c6 <_ZN6StringaSERKS_>
}
 80864f6:	4620      	mov	r0, r4
 80864f8:	bd10      	pop	{r4, pc}

080864fa <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80864fa:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80864fc:	b510      	push	{r4, lr}
 80864fe:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8086500:	d001      	beq.n	8086506 <_ZN6StringaSEOS_+0xc>
 8086502:	f7ff ffc3 	bl	808648c <_ZN6String4moveERS_>
	return *this;
}
 8086506:	4620      	mov	r0, r4
 8086508:	bd10      	pop	{r4, pc}

0808650a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808650a:	b570      	push	{r4, r5, r6, lr}
 808650c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808650e:	460e      	mov	r6, r1
 8086510:	b909      	cbnz	r1, 8086516 <_ZN6String6concatEPKcj+0xc>
 8086512:	2000      	movs	r0, #0
 8086514:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8086516:	b16a      	cbz	r2, 8086534 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8086518:	6883      	ldr	r3, [r0, #8]
 808651a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808651c:	4629      	mov	r1, r5
 808651e:	f7ff ff79 	bl	8086414 <_ZN6String7reserveEj>
 8086522:	2800      	cmp	r0, #0
 8086524:	d0f5      	beq.n	8086512 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8086526:	6820      	ldr	r0, [r4, #0]
 8086528:	68a3      	ldr	r3, [r4, #8]
 808652a:	4631      	mov	r1, r6
 808652c:	4418      	add	r0, r3
 808652e:	f003 fd23 	bl	8089f78 <strcpy>
	len = newlen;
 8086532:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8086534:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8086536:	bd70      	pop	{r4, r5, r6, pc}

08086538 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8086538:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808653a:	688a      	ldr	r2, [r1, #8]
 808653c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808653e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8086540:	f7ff ffe3 	bl	808650a <_ZN6String6concatEPKcj>
 8086544:	b910      	cbnz	r0, 808654c <_ZplRK15StringSumHelperRK6String+0x14>
 8086546:	4620      	mov	r0, r4
 8086548:	f7ff ff4d 	bl	80863e6 <_ZN6String10invalidateEv>
	return a;
}
 808654c:	4620      	mov	r0, r4
 808654e:	bd10      	pop	{r4, pc}

08086550 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8086550:	b538      	push	{r3, r4, r5, lr}
 8086552:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8086554:	460d      	mov	r5, r1
 8086556:	b141      	cbz	r1, 808656a <_ZplRK15StringSumHelperPKc+0x1a>
 8086558:	4608      	mov	r0, r1
 808655a:	f004 fa45 	bl	808a9e8 <strlen>
 808655e:	4629      	mov	r1, r5
 8086560:	4602      	mov	r2, r0
 8086562:	4620      	mov	r0, r4
 8086564:	f7ff ffd1 	bl	808650a <_ZN6String6concatEPKcj>
 8086568:	b910      	cbnz	r0, 8086570 <_ZplRK15StringSumHelperPKc+0x20>
 808656a:	4620      	mov	r0, r4
 808656c:	f7ff ff3b 	bl	80863e6 <_ZN6String10invalidateEv>
	return a;
}
 8086570:	4620      	mov	r0, r4
 8086572:	bd38      	pop	{r3, r4, r5, pc}

08086574 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086574:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8086576:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086578:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808657a:	b912      	cbnz	r2, 8086582 <_ZNK6String6equalsEPKc+0xe>
 808657c:	b919      	cbnz	r1, 8086586 <_ZNK6String6equalsEPKc+0x12>
 808657e:	2001      	movs	r0, #1
 8086580:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8086582:	b911      	cbnz	r1, 808658a <_ZNK6String6equalsEPKc+0x16>
 8086584:	6803      	ldr	r3, [r0, #0]
 8086586:	7818      	ldrb	r0, [r3, #0]
 8086588:	e002      	b.n	8086590 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808658a:	6800      	ldr	r0, [r0, #0]
 808658c:	f003 fcea 	bl	8089f64 <strcmp>
 8086590:	fab0 f080 	clz	r0, r0
 8086594:	0940      	lsrs	r0, r0, #5
}
 8086596:	bd08      	pop	{r3, pc}

08086598 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 8086598:	6883      	ldr	r3, [r0, #8]
 808659a:	428b      	cmp	r3, r1
 808659c:	d901      	bls.n	80865a2 <_ZN6StringixEj+0xa>
 808659e:	6800      	ldr	r0, [r0, #0]
 80865a0:	b918      	cbnz	r0, 80865aa <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 80865a2:	4803      	ldr	r0, [pc, #12]	; (80865b0 <_ZN6StringixEj+0x18>)
 80865a4:	2300      	movs	r3, #0
 80865a6:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 80865a8:	4770      	bx	lr
	}
	return buffer[index];
 80865aa:	4408      	add	r0, r1
}
 80865ac:	4770      	bx	lr
 80865ae:	bf00      	nop
 80865b0:	20000930 	.word	0x20000930

080865b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80865b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80865b6:	4606      	mov	r6, r0
 80865b8:	460d      	mov	r5, r1
 80865ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80865bc:	2400      	movs	r4, #0
  while (size--) {
 80865be:	42bd      	cmp	r5, r7
 80865c0:	d00c      	beq.n	80865dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80865c2:	6833      	ldr	r3, [r6, #0]
 80865c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80865c8:	689b      	ldr	r3, [r3, #8]
 80865ca:	4630      	mov	r0, r6
 80865cc:	4798      	blx	r3
     if (chunk>=0)
 80865ce:	2800      	cmp	r0, #0
 80865d0:	db01      	blt.n	80865d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80865d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80865d4:	e7f3      	b.n	80865be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80865d6:	2c00      	cmp	r4, #0
 80865d8:	bf08      	it	eq
 80865da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80865dc:	4620      	mov	r0, r4
 80865de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080865e0 <_ZN5Print5printEPKc>:
 80865e0:	b508      	push	{r3, lr}
 80865e2:	f7fb ff85 	bl	80824f0 <_ZN5Print5writeEPKc>
 80865e6:	bd08      	pop	{r3, pc}

080865e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80865e8:	6803      	ldr	r3, [r0, #0]
 80865ea:	689b      	ldr	r3, [r3, #8]
 80865ec:	4718      	bx	r3

080865ee <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 80865ee:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80865f0:	f7fb ff7e 	bl	80824f0 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 80865f4:	bd08      	pop	{r3, pc}

080865f6 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 80865f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80865f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80865fa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80865fc:	f7ff fff4 	bl	80865e8 <_ZN5Print5printEc>
  n += print('\n');
 8086600:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8086602:	4604      	mov	r4, r0
  n += print('\n');
 8086604:	4628      	mov	r0, r5
 8086606:	f7ff ffef 	bl	80865e8 <_ZN5Print5printEc>
  return n;
}
 808660a:	4420      	add	r0, r4
 808660c:	bd38      	pop	{r3, r4, r5, pc}

0808660e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808660e:	b538      	push	{r3, r4, r5, lr}
 8086610:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086612:	f7fb ff6d 	bl	80824f0 <_ZN5Print5writeEPKc>
 8086616:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8086618:	4628      	mov	r0, r5
 808661a:	f7ff ffec 	bl	80865f6 <_ZN5Print7printlnEv>
  return n;
}
 808661e:	4420      	add	r0, r4
 8086620:	bd38      	pop	{r3, r4, r5, pc}

08086622 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8086622:	2a01      	cmp	r2, #1
 8086624:	bf98      	it	ls
 8086626:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8086628:	b530      	push	{r4, r5, lr}
 808662a:	460b      	mov	r3, r1
 808662c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808662e:	2100      	movs	r1, #0
 8086630:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8086634:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8086638:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 808663c:	fb05 3312 	mls	r3, r5, r2, r3
 8086640:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8086642:	2b09      	cmp	r3, #9
 8086644:	bf94      	ite	ls
 8086646:	3330      	addls	r3, #48	; 0x30
 8086648:	3337      	addhi	r3, #55	; 0x37
 808664a:	b2db      	uxtb	r3, r3
 808664c:	4621      	mov	r1, r4
 808664e:	f804 3901 	strb.w	r3, [r4], #-1
 8086652:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8086654:	2d00      	cmp	r5, #0
 8086656:	d1ef      	bne.n	8086638 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8086658:	f7fb ff4a 	bl	80824f0 <_ZN5Print5writeEPKc>
}
 808665c:	b00b      	add	sp, #44	; 0x2c
 808665e:	bd30      	pop	{r4, r5, pc}

08086660 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8086660:	b40c      	push	{r2, r3}
 8086662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086666:	b087      	sub	sp, #28
 8086668:	af00      	add	r7, sp, #0
 808666a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808666e:	f854 9b04 	ldr.w	r9, [r4], #4
 8086672:	4605      	mov	r5, r0
 8086674:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8086676:	4623      	mov	r3, r4
 8086678:	464a      	mov	r2, r9
 808667a:	2114      	movs	r1, #20
 808667c:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808667e:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8086680:	f7ff f982 	bl	8085988 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8086684:	2813      	cmp	r0, #19
 8086686:	d805      	bhi.n	8086694 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086688:	1d39      	adds	r1, r7, #4
 808668a:	4628      	mov	r0, r5
 808668c:	f7fb ff30 	bl	80824f0 <_ZN5Print5writeEPKc>
 8086690:	4604      	mov	r4, r0
 8086692:	e013      	b.n	80866bc <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8086694:	f100 0308 	add.w	r3, r0, #8
 8086698:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808669c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808669e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80866a2:	1c41      	adds	r1, r0, #1
 80866a4:	4623      	mov	r3, r4
 80866a6:	464a      	mov	r2, r9
 80866a8:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80866aa:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80866ac:	f7ff f96c 	bl	8085988 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80866b0:	4669      	mov	r1, sp
 80866b2:	4628      	mov	r0, r5
 80866b4:	f7fb ff1c 	bl	80824f0 <_ZN5Print5writeEPKc>
 80866b8:	4604      	mov	r4, r0
 80866ba:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80866bc:	b11e      	cbz	r6, 80866c6 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80866be:	4628      	mov	r0, r5
 80866c0:	f7ff ff99 	bl	80865f6 <_ZN5Print7printlnEv>
 80866c4:	4404      	add	r4, r0
    return n;
}
 80866c6:	4620      	mov	r0, r4
 80866c8:	371c      	adds	r7, #28
 80866ca:	46bd      	mov	sp, r7
 80866cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80866d0:	b002      	add	sp, #8
 80866d2:	4770      	bx	lr

080866d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80866d4:	680b      	ldr	r3, [r1, #0]
 80866d6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80866d8:	b113      	cbz	r3, 80866e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80866da:	685a      	ldr	r2, [r3, #4]
 80866dc:	3201      	adds	r2, #1
 80866de:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80866e0:	4770      	bx	lr
	...

080866e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80866e4:	4a01      	ldr	r2, [pc, #4]	; (80866ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80866e6:	4b02      	ldr	r3, [pc, #8]	; (80866f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80866e8:	601a      	str	r2, [r3, #0]
 80866ea:	4770      	bx	lr
 80866ec:	0808da51 	.word	0x0808da51
 80866f0:	20000934 	.word	0x20000934

080866f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80866f4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80866f6:	2000      	movs	r0, #0
 80866f8:	f7ff f8f6 	bl	80858e8 <spark_sync_time_pending>
 80866fc:	b128      	cbz	r0, 808670a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80866fe:	f7ff f8db 	bl	80858b8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086702:	f080 0001 	eor.w	r0, r0, #1
 8086706:	b2c0      	uxtb	r0, r0
 8086708:	bd08      	pop	{r3, pc}
 808670a:	2001      	movs	r0, #1
    }
 808670c:	bd08      	pop	{r3, pc}
	...

08086710 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8086710:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8086712:	4909      	ldr	r1, [pc, #36]	; (8086738 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8086714:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8086716:	f003 f857 	bl	80897c8 <__aeabi_fcmplt>
 808671a:	b960      	cbnz	r0, 8086736 <_ZN9TimeClass4zoneEf+0x26>
 808671c:	4907      	ldr	r1, [pc, #28]	; (808673c <_ZN9TimeClass4zoneEf+0x2c>)
 808671e:	4620      	mov	r0, r4
 8086720:	f003 f870 	bl	8089804 <__aeabi_fcmpgt>
 8086724:	b938      	cbnz	r0, 8086736 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8086726:	4906      	ldr	r1, [pc, #24]	; (8086740 <_ZN9TimeClass4zoneEf+0x30>)
 8086728:	4620      	mov	r0, r4
 808672a:	f002 feaf 	bl	808948c <__aeabi_fmul>
 808672e:	f003 f889 	bl	8089844 <__aeabi_f2iz>
 8086732:	4b04      	ldr	r3, [pc, #16]	; (8086744 <_ZN9TimeClass4zoneEf+0x34>)
 8086734:	6018      	str	r0, [r3, #0]
 8086736:	bd10      	pop	{r4, pc}
 8086738:	c1400000 	.word	0xc1400000
 808673c:	41600000 	.word	0x41600000
 8086740:	45610000 	.word	0x45610000
 8086744:	20000940 	.word	0x20000940

08086748 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8086748:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808674a:	4b0e      	ldr	r3, [pc, #56]	; (8086784 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808674c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808674e:	681b      	ldr	r3, [r3, #0]
 8086750:	a802      	add	r0, sp, #8
 8086752:	4419      	add	r1, r3
 8086754:	4b0c      	ldr	r3, [pc, #48]	; (8086788 <_ZN9TimeClass7timeStrEl+0x40>)
 8086756:	681b      	ldr	r3, [r3, #0]
 8086758:	4419      	add	r1, r3
 808675a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808675e:	f003 faad 	bl	8089cbc <localtime>
        char* ascstr = asctime(calendar_time);
 8086762:	f003 fa5d 	bl	8089c20 <asctime>
 8086766:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8086768:	f004 f93e 	bl	808a9e8 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808676c:	2300      	movs	r3, #0
 808676e:	4428      	add	r0, r5
 8086770:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8086774:	4629      	mov	r1, r5
 8086776:	4620      	mov	r0, r4
 8086778:	f7ff fe75 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808677c:	4620      	mov	r0, r4
 808677e:	b003      	add	sp, #12
 8086780:	bd30      	pop	{r4, r5, pc}
 8086782:	bf00      	nop
 8086784:	20000940 	.word	0x20000940
 8086788:	2000093c 	.word	0x2000093c

0808678c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086790:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086792:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086794:	4607      	mov	r7, r0
 8086796:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086798:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808679a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808679c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808679e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80867a0:	f004 f93f 	bl	808aa22 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80867a4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80867a6:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80867a8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80867ac:	f004 f91c 	bl	808a9e8 <strlen>
 80867b0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80867b2:	b925      	cbnz	r5, 80867be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 80867b4:	4924      	ldr	r1, [pc, #144]	; (8086848 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 80867b6:	a803      	add	r0, sp, #12
 80867b8:	f003 fbde 	bl	8089f78 <strcpy>
 80867bc:	e013      	b.n	80867e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80867be:	213c      	movs	r1, #60	; 0x3c
 80867c0:	fb95 f2f1 	sdiv	r2, r5, r1
 80867c4:	2a00      	cmp	r2, #0
 80867c6:	bfb8      	it	lt
 80867c8:	4252      	neglt	r2, r2
 80867ca:	fb92 f3f1 	sdiv	r3, r2, r1
 80867ce:	fb01 2213 	mls	r2, r1, r3, r2
 80867d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80867d6:	9200      	str	r2, [sp, #0]
 80867d8:	fb95 f3f3 	sdiv	r3, r5, r3
 80867dc:	4a1b      	ldr	r2, [pc, #108]	; (808684c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 80867de:	2110      	movs	r1, #16
 80867e0:	a803      	add	r0, sp, #12
 80867e2:	f7ff f8c1 	bl	8085968 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80867e6:	4625      	mov	r5, r4
 80867e8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80867ea:	f108 3aff 	add.w	sl, r8, #4294967295
 80867ee:	45b2      	cmp	sl, r6
 80867f0:	d91b      	bls.n	808682a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80867f2:	782b      	ldrb	r3, [r5, #0]
 80867f4:	2b25      	cmp	r3, #37	; 0x25
 80867f6:	d116      	bne.n	8086826 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 80867f8:	786b      	ldrb	r3, [r5, #1]
 80867fa:	2b7a      	cmp	r3, #122	; 0x7a
 80867fc:	d113      	bne.n	8086826 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 80867fe:	a803      	add	r0, sp, #12
 8086800:	f004 f8f2 	bl	808a9e8 <strlen>
 8086804:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8086806:	4430      	add	r0, r6
 8086808:	ebc6 020a 	rsb	r2, r6, sl
 808680c:	1ca9      	adds	r1, r5, #2
 808680e:	4420      	add	r0, r4
 8086810:	f003 fb5f 	bl	8089ed2 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8086814:	4642      	mov	r2, r8
 8086816:	a903      	add	r1, sp, #12
 8086818:	4628      	mov	r0, r5
 808681a:	f003 fb5a 	bl	8089ed2 <memcpy>
            len = strlen(format_str);
 808681e:	4620      	mov	r0, r4
 8086820:	f004 f8e2 	bl	808a9e8 <strlen>
 8086824:	4680      	mov	r8, r0
 8086826:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8086828:	e7de      	b.n	80867e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808682a:	464b      	mov	r3, r9
 808682c:	4622      	mov	r2, r4
 808682e:	2132      	movs	r1, #50	; 0x32
 8086830:	a807      	add	r0, sp, #28
 8086832:	f003 fc25 	bl	808a080 <strftime>
    return String(buf);
 8086836:	a907      	add	r1, sp, #28
 8086838:	4638      	mov	r0, r7
 808683a:	f7ff fe14 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808683e:	4638      	mov	r0, r7
 8086840:	b024      	add	sp, #144	; 0x90
 8086842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086846:	bf00      	nop
 8086848:	0808e1a5 	.word	0x0808e1a5
 808684c:	0808dab1 	.word	0x0808dab1

08086850 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8086850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8086852:	4605      	mov	r5, r0
 8086854:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 8086856:	461c      	mov	r4, r3
 8086858:	b913      	cbnz	r3, 8086860 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808685a:	4b12      	ldr	r3, [pc, #72]	; (80868a4 <_ZN9TimeClass6formatElPKc+0x54>)
 808685c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808685e:	b12c      	cbz	r4, 808686c <_ZN9TimeClass6formatElPKc+0x1c>
 8086860:	4b11      	ldr	r3, [pc, #68]	; (80868a8 <_ZN9TimeClass6formatElPKc+0x58>)
 8086862:	4620      	mov	r0, r4
 8086864:	6819      	ldr	r1, [r3, #0]
 8086866:	f003 fb7d 	bl	8089f64 <strcmp>
 808686a:	b920      	cbnz	r0, 8086876 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808686c:	9901      	ldr	r1, [sp, #4]
 808686e:	4628      	mov	r0, r5
 8086870:	f7ff ff6a 	bl	8086748 <_ZN9TimeClass7timeStrEl>
 8086874:	e013      	b.n	808689e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8086876:	4f0d      	ldr	r7, [pc, #52]	; (80868ac <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8086878:	9a01      	ldr	r2, [sp, #4]
 808687a:	683b      	ldr	r3, [r7, #0]
 808687c:	4e0c      	ldr	r6, [pc, #48]	; (80868b0 <_ZN9TimeClass6formatElPKc+0x60>)
 808687e:	441a      	add	r2, r3
 8086880:	6833      	ldr	r3, [r6, #0]
 8086882:	a802      	add	r0, sp, #8
 8086884:	4413      	add	r3, r2
 8086886:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808688a:	f003 fa17 	bl	8089cbc <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808688e:	683a      	ldr	r2, [r7, #0]
 8086890:	6833      	ldr	r3, [r6, #0]
 8086892:	4601      	mov	r1, r0
 8086894:	4413      	add	r3, r2
 8086896:	4628      	mov	r0, r5
 8086898:	4622      	mov	r2, r4
 808689a:	f7ff ff77 	bl	808678c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808689e:	4628      	mov	r0, r5
 80868a0:	b003      	add	sp, #12
 80868a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80868a4:	20000938 	.word	0x20000938
 80868a8:	20000050 	.word	0x20000050
 80868ac:	20000940 	.word	0x20000940
 80868b0:	2000093c 	.word	0x2000093c

080868b4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80868b4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80868b6:	2000      	movs	r0, #0
 80868b8:	f7fe fd92 	bl	80853e0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80868bc:	4604      	mov	r4, r0
 80868be:	b968      	cbnz	r0, 80868dc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80868c0:	f7fe ff3e 	bl	8085740 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80868c4:	2801      	cmp	r0, #1
 80868c6:	d10b      	bne.n	80868e0 <_ZN9TimeClass7isValidEv+0x2c>
 80868c8:	4620      	mov	r0, r4
 80868ca:	f7fe ff71 	bl	80857b0 <system_thread_get_state>
 80868ce:	b938      	cbnz	r0, 80868e0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80868d0:	f7ff ff10 	bl	80866f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80868d4:	b930      	cbnz	r0, 80868e4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80868d6:	f7fe ffdf 	bl	8085898 <spark_process>
 80868da:	e7f9      	b.n	80868d0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80868dc:	2001      	movs	r0, #1
 80868de:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80868e0:	2000      	movs	r0, #0
 80868e2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80868e4:	f7ff ff06 	bl	80866f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80868e8:	2000      	movs	r0, #0
 80868ea:	f7fe fd79 	bl	80853e0 <HAL_RTC_Time_Is_Valid>
 80868ee:	3000      	adds	r0, #0
 80868f0:	bf18      	it	ne
 80868f2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80868f4:	bd10      	pop	{r4, pc}

080868f6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80868f6:	b508      	push	{r3, lr}
    (void)isValid();
 80868f8:	f7ff ffdc 	bl	80868b4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80868fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8086900:	f7fe bd66 	b.w	80853d0 <HAL_RTC_Get_UnixTime>

08086904 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8086904:	4b02      	ldr	r3, [pc, #8]	; (8086910 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8086906:	681a      	ldr	r2, [r3, #0]
 8086908:	4b02      	ldr	r3, [pc, #8]	; (8086914 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808690a:	601a      	str	r2, [r3, #0]
 808690c:	4770      	bx	lr
 808690e:	bf00      	nop
 8086910:	20000050 	.word	0x20000050
 8086914:	20000938 	.word	0x20000938

08086918 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8086918:	2100      	movs	r1, #0
 808691a:	f7fe bf21 	b.w	8085760 <system_delay_ms>
	...

08086920 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 8086920:	b530      	push	{r4, r5, lr}
 8086922:	685b      	ldr	r3, [r3, #4]
 8086924:	b085      	sub	sp, #20
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 8086926:	6804      	ldr	r4, [r0, #0]
 8086928:	9303      	str	r3, [sp, #12]
 808692a:	4d05      	ldr	r5, [pc, #20]	; (8086940 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x20>)
 808692c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8086930:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8086932:	9502      	str	r5, [sp, #8]
 8086934:	9300      	str	r3, [sp, #0]
 8086936:	ab02      	add	r3, sp, #8
 8086938:	47a0      	blx	r4
    }
 808693a:	b005      	add	sp, #20
 808693c:	bd30      	pop	{r4, r5, pc}
 808693e:	bf00      	nop
 8086940:	0808dba0 	.word	0x0808dba0

08086944 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 8086944:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 8086946:	6804      	ldr	r4, [r0, #0]
 8086948:	6b24      	ldr	r4, [r4, #48]	; 0x30
 808694a:	46a4      	mov	ip, r4
    }
 808694c:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 808694e:	4760      	bx	ip

08086950 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 8086950:	6803      	ldr	r3, [r0, #0]
 8086952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8086954:	4718      	bx	r3
	...

08086958 <_ZN3UDP8remoteIPEv>:
 8086958:	4a02      	ldr	r2, [pc, #8]	; (8086964 <_ZN3UDP8remoteIPEv+0xc>)
 808695a:	6002      	str	r2, [r0, #0]
 808695c:	6a0a      	ldr	r2, [r1, #32]
 808695e:	6042      	str	r2, [r0, #4]
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 8086960:	4770      	bx	lr
 8086962:	bf00      	nop
 8086964:	0808dba0 	.word	0x0808dba0

08086968 <_ZN3UDP10remotePortEv>:
    virtual uint16_t remotePort() { return _remotePort; };
 8086968:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 808696a:	4770      	bx	lr

0808696c <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 808696c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 808696e:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8086970:	1a10      	subs	r0, r2, r0
 8086972:	4770      	bx	lr

08086974 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086974:	b530      	push	{r4, r5, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086976:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086978:	b085      	sub	sp, #20
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 808697a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 808697c:	4b09      	ldr	r3, [pc, #36]	; (80869a4 <_ZN3UDP9endPacketEv+0x30>)
 808697e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8086980:	9302      	str	r3, [sp, #8]
 8086982:	6a03      	ldr	r3, [r0, #32]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086984:	4604      	mov	r4, r0
 8086986:	9303      	str	r3, [sp, #12]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086988:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 808698a:	9300      	str	r3, [sp, #0]
 808698c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 808698e:	ab02      	add	r3, sp, #8
 8086990:	47a8      	blx	r5
 8086992:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 8086994:	6823      	ldr	r3, [r4, #0]
 8086996:	4620      	mov	r0, r4
 8086998:	69db      	ldr	r3, [r3, #28]
 808699a:	4798      	blx	r3
    return result;
}
 808699c:	4628      	mov	r0, r5
 808699e:	b005      	add	sp, #20
 80869a0:	bd30      	pop	{r4, r5, pc}
 80869a2:	bf00      	nop
 80869a4:	0808dba0 	.word	0x0808dba0

080869a8 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80869a8:	b513      	push	{r0, r1, r4, lr}
 80869aa:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80869ac:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80869ae:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80869b2:	68d4      	ldr	r4, [r2, #12]
 80869b4:	4619      	mov	r1, r3
 80869b6:	2201      	movs	r2, #1
 80869b8:	47a0      	blx	r4
}
 80869ba:	b002      	add	sp, #8
 80869bc:	bd10      	pop	{r4, pc}

080869be <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80869be:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80869c0:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80869c2:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80869c4:	691b      	ldr	r3, [r3, #16]
 80869c6:	4798      	blx	r3
 80869c8:	b128      	cbz	r0, 80869d6 <_ZN3UDP4readEv+0x18>
 80869ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80869cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80869ce:	1c59      	adds	r1, r3, #1
 80869d0:	84e1      	strh	r1, [r4, #38]	; 0x26
 80869d2:	5cd0      	ldrb	r0, [r2, r3]
 80869d4:	bd10      	pop	{r4, pc}
 80869d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80869da:	bd10      	pop	{r4, pc}

080869dc <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80869dc:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80869de:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80869e0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80869e2:	691b      	ldr	r3, [r3, #16]
 80869e4:	4798      	blx	r3
 80869e6:	b118      	cbz	r0, 80869f0 <_ZN3UDP4peekEv+0x14>
 80869e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80869ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80869ec:	5cd0      	ldrb	r0, [r2, r3]
 80869ee:	bd10      	pop	{r4, pc}
 80869f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80869f4:	bd10      	pop	{r4, pc}

080869f6 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80869f6:	4770      	bx	lr

080869f8 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80869f8:	4603      	mov	r3, r0
 80869fa:	4608      	mov	r0, r1
 80869fc:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80869fe:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    return p.write(_buffer+_offset, size);
 8086a00:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8086a02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8086a04:	6803      	ldr	r3, [r0, #0]
 8086a06:	1a52      	subs	r2, r2, r1
 8086a08:	68db      	ldr	r3, [r3, #12]
 8086a0a:	4421      	add	r1, r4
}
 8086a0c:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 8086a0e:	4718      	bx	r3

08086a10 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 8086a10:	f1a0 0010 	sub.w	r0, r0, #16
 8086a14:	f7ff bff0 	b.w	80869f8 <_ZNK3UDP7printToER5Print>

08086a18 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8086a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8086a1a:	4616      	mov	r6, r2
    stop();
 8086a1c:	6803      	ldr	r3, [r0, #0]
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8086a1e:	4605      	mov	r5, r0
    stop();
 8086a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 8086a22:	460f      	mov	r7, r1
    stop();
 8086a24:	4798      	blx	r3

    bool bound = 0;
    if(Network.from(nif).ready())
 8086a26:	4630      	mov	r0, r6
 8086a28:	f001 fa38 	bl	8087e9c <_ZN5spark12NetworkClass4fromEm>
 8086a2c:	6803      	ldr	r3, [r0, #0]
 8086a2e:	68db      	ldr	r3, [r3, #12]
 8086a30:	4798      	blx	r3
 8086a32:	b1b8      	cbz	r0, 8086a64 <_ZN3UDP5beginEtm+0x4c>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 8086a34:	2102      	movs	r1, #2
 8086a36:	463b      	mov	r3, r7
 8086a38:	2211      	movs	r2, #17
 8086a3a:	4608      	mov	r0, r1
 8086a3c:	9600      	str	r6, [sp, #0]
 8086a3e:	f7fe fddf 	bl	8085600 <socket_create>
 8086a42:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 8086a44:	f7fe fdd4 	bl	80855f0 <socket_handle_valid>
 8086a48:	4604      	mov	r4, r0
 8086a4a:	b130      	cbz	r0, 8086a5a <_ZN3UDP5beginEtm+0x42>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086a4c:	2300      	movs	r3, #0
 8086a4e:	84eb      	strh	r3, [r5, #38]	; 0x26
  _total = 0;
 8086a50:	852b      	strh	r3, [r5, #40]	; 0x28
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 8086a52:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 8086a54:	636e      	str	r6, [r5, #52]	; 0x34
            bound = true;
 8086a56:	2001      	movs	r0, #1
 8086a58:	e004      	b.n	8086a64 <_ZN3UDP5beginEtm+0x4c>
        }
        else {
            stop();
 8086a5a:	682b      	ldr	r3, [r5, #0]
 8086a5c:	4628      	mov	r0, r5
 8086a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086a60:	4798      	blx	r3
            bound = false;
 8086a62:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 8086a64:	b003      	add	sp, #12
 8086a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086a68 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 8086a68:	b538      	push	{r3, r4, r5, lr}
 8086a6a:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 8086a6c:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 8086a6e:	f7fe fdf7 	bl	8085660 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 8086a72:	4285      	cmp	r5, r0
 8086a74:	d002      	beq.n	8086a7c <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 8086a76:	6960      	ldr	r0, [r4, #20]
 8086a78:	f7fe fdea 	bl	8085650 <socket_close>
    }
    _sock = socket_handle_invalid();
 8086a7c:	f7fe fdf0 	bl	8085660 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086a80:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 8086a82:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086a84:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086a86:	8523      	strh	r3, [r4, #40]	; 0x28
 8086a88:	bd38      	pop	{r3, r4, r5, pc}

08086a8a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 8086a8a:	b530      	push	{r4, r5, lr}
 8086a8c:	b087      	sub	sp, #28
 8086a8e:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 8086a92:	2502      	movs	r5, #2
 8086a94:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 8086a98:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8086a9c:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8086a9e:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8086aa0:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8086aa4:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 8086aa8:	799c      	ldrb	r4, [r3, #6]
 8086aaa:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8086aae:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8086ab0:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8086ab2:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8086ab6:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 8086aba:	2310      	movs	r3, #16
 8086abc:	9301      	str	r3, [sp, #4]
 8086abe:	ab02      	add	r3, sp, #8
 8086ac0:	9300      	str	r3, [sp, #0]
 8086ac2:	6940      	ldr	r0, [r0, #20]
 8086ac4:	2300      	movs	r3, #0
 8086ac6:	f7fe fdbb 	bl	8085640 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 8086aca:	b007      	add	sp, #28
 8086acc:	bd30      	pop	{r4, r5, pc}

08086ace <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8086ace:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8086ad0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8086ad2:	4605      	mov	r5, r0
 8086ad4:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8086ad6:	b113      	cbz	r3, 8086ade <_ZN3UDP5writeEPKhj+0x10>
 8086ad8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8086ada:	1a24      	subs	r4, r4, r0
 8086adc:	e000      	b.n	8086ae0 <_ZN3UDP5writeEPKhj+0x12>
 8086ade:	461c      	mov	r4, r3
 8086ae0:	4294      	cmp	r4, r2
 8086ae2:	bf28      	it	cs
 8086ae4:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 8086ae6:	4418      	add	r0, r3
 8086ae8:	4622      	mov	r2, r4
 8086aea:	f003 f9f2 	bl	8089ed2 <memcpy>
    _offset += size;
 8086aee:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    return size;
}
 8086af0:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 8086af2:	4423      	add	r3, r4
 8086af4:	84eb      	strh	r3, [r5, #38]	; 0x26
    return size;
}
 8086af6:	bd38      	pop	{r3, r4, r5, pc}

08086af8 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8086af8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 8086afa:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8086afc:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 8086afe:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8086b00:	460e      	mov	r6, r1
 8086b02:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 8086b04:	4798      	blx	r3
 8086b06:	b188      	cbz	r0, 8086b2c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 8086b08:	6823      	ldr	r3, [r4, #0]
 8086b0a:	4620      	mov	r0, r4
 8086b0c:	691b      	ldr	r3, [r3, #16]
 8086b0e:	4798      	blx	r3
 8086b10:	4285      	cmp	r5, r0
 8086b12:	bfa8      	it	ge
 8086b14:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 8086b16:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8086b18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8086b1a:	462a      	mov	r2, r5
 8086b1c:	4419      	add	r1, r3
 8086b1e:	4630      	mov	r0, r6
 8086b20:	f003 f9d7 	bl	8089ed2 <memcpy>
      _offset += read;
 8086b24:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8086b26:	442b      	add	r3, r5
 8086b28:	84e3      	strh	r3, [r4, #38]	; 0x26
 8086b2a:	e001      	b.n	8086b30 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 8086b2c:	f04f 35ff 	mov.w	r5, #4294967295
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 8086b30:	4628      	mov	r0, r5
 8086b32:	bd70      	pop	{r4, r5, r6, pc}

08086b34 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 8086b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086b36:	4604      	mov	r4, r0
 8086b38:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8086b3a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 8086b3c:	460d      	mov	r5, r1
 8086b3e:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8086b40:	f001 f9ac 	bl	8087e9c <_ZN5spark12NetworkClass4fromEm>
 8086b44:	6803      	ldr	r3, [r0, #0]
 8086b46:	68db      	ldr	r3, [r3, #12]
 8086b48:	4798      	blx	r3
 8086b4a:	b310      	cbz	r0, 8086b92 <_ZN3UDP13receivePacketEPhjm+0x5e>
 8086b4c:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 8086b4e:	f7fe fd87 	bl	8085660 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8086b52:	4287      	cmp	r7, r0
 8086b54:	d01d      	beq.n	8086b92 <_ZN3UDP13receivePacketEPhjm+0x5e>
 8086b56:	b1e5      	cbz	r5, 8086b92 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 8086b58:	ab08      	add	r3, sp, #32
 8086b5a:	2210      	movs	r2, #16
 8086b5c:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 8086b60:	9301      	str	r3, [sp, #4]
 8086b62:	eb0d 0302 	add.w	r3, sp, r2
 8086b66:	9300      	str	r3, [sp, #0]
 8086b68:	4629      	mov	r1, r5
 8086b6a:	2300      	movs	r3, #0
 8086b6c:	4632      	mov	r2, r6
 8086b6e:	6960      	ldr	r0, [r4, #20]
 8086b70:	f7fe fd5e 	bl	8085630 <socket_receivefrom>
        if (ret >= 0)
 8086b74:	1e05      	subs	r5, r0, #0
 8086b76:	db0e      	blt.n	8086b96 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 8086b78:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8086b7c:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 8086b80:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 8086b82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8086b86:	84a3      	strh	r3, [r4, #36]	; 0x24
            _remoteIP = &remoteSockAddr.sa_data[2];
 8086b88:	f104 001c 	add.w	r0, r4, #28
 8086b8c:	f000 fdf0 	bl	8087770 <_ZN9IPAddressaSEPKh>
 8086b90:	e001      	b.n	8086b96 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 8086b92:	f04f 35ff 	mov.w	r5, #4294967295
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 8086b96:	4628      	mov	r0, r5
 8086b98:	b009      	add	sp, #36	; 0x24
 8086b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086b9c <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8086b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086b9e:	4605      	mov	r5, r0
 8086ba0:	b089      	sub	sp, #36	; 0x24
    if(Network.from(_nif).ready())
 8086ba2:	6b40      	ldr	r0, [r0, #52]	; 0x34

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8086ba4:	460e      	mov	r6, r1
 8086ba6:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 8086ba8:	f001 f978 	bl	8087e9c <_ZN5spark12NetworkClass4fromEm>
 8086bac:	6803      	ldr	r3, [r0, #0]
 8086bae:	68db      	ldr	r3, [r3, #12]
 8086bb0:	4798      	blx	r3
 8086bb2:	b1d8      	cbz	r0, 8086bec <_ZN3UDP11beginPacketEPKct+0x50>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 8086bb4:	4630      	mov	r0, r6
 8086bb6:	f003 ff17 	bl	808a9e8 <strlen>
 8086bba:	2400      	movs	r4, #0
 8086bbc:	b281      	uxth	r1, r0
 8086bbe:	9400      	str	r4, [sp, #0]
 8086bc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8086bc2:	aa03      	add	r2, sp, #12
 8086bc4:	4630      	mov	r0, r6
 8086bc6:	f7fe fd63 	bl	8085690 <inet_gethostbyname>
 8086bca:	b970      	cbnz	r0, 8086bea <_ZN3UDP11beginPacketEPKct+0x4e>
        {
            IPAddress remote_addr(ip_addr);
 8086bcc:	a903      	add	r1, sp, #12
 8086bce:	a804      	add	r0, sp, #16
 8086bd0:	f000 fda4 	bl	808771c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8086bd4:	4a06      	ldr	r2, [pc, #24]	; (8086bf0 <_ZN3UDP11beginPacketEPKct+0x54>)
            return beginPacket(remote_addr, port);
 8086bd6:	682b      	ldr	r3, [r5, #0]
 8086bd8:	9206      	str	r2, [sp, #24]
 8086bda:	9a05      	ldr	r2, [sp, #20]
 8086bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086bde:	9207      	str	r2, [sp, #28]
 8086be0:	a906      	add	r1, sp, #24
 8086be2:	463a      	mov	r2, r7
 8086be4:	4628      	mov	r0, r5
 8086be6:	4798      	blx	r3
 8086be8:	e000      	b.n	8086bec <_ZN3UDP11beginPacketEPKct+0x50>
        }
    }
    return 0;
 8086bea:	4620      	mov	r0, r4
}
 8086bec:	b009      	add	sp, #36	; 0x24
 8086bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086bf0:	0808dba0 	.word	0x0808dba0

08086bf4 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 8086bf4:	b538      	push	{r3, r4, r5, lr}
 8086bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086bfa:	6083      	str	r3, [r0, #8]
 8086bfc:	4b0b      	ldr	r3, [pc, #44]	; (8086c2c <_ZN3UDPC1Ev+0x38>)
 8086bfe:	2500      	movs	r5, #0
 8086c00:	f103 0208 	add.w	r2, r3, #8
 8086c04:	336c      	adds	r3, #108	; 0x6c
 8086c06:	6002      	str	r2, [r0, #0]
 8086c08:	6103      	str	r3, [r0, #16]
 8086c0a:	6045      	str	r5, [r0, #4]
 8086c0c:	4604      	mov	r4, r0
 8086c0e:	f7fe fd27 	bl	8085660 <socket_handle_invalid>
 8086c12:	6160      	str	r0, [r4, #20]
 8086c14:	f104 001c 	add.w	r0, r4, #28
 8086c18:	f000 fd78 	bl	808770c <_ZN9IPAddressC1Ev>
 8086c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8086c20:	84e5      	strh	r5, [r4, #38]	; 0x26
 8086c22:	8525      	strh	r5, [r4, #40]	; 0x28
 8086c24:	62e5      	str	r5, [r4, #44]	; 0x2c
 8086c26:	6323      	str	r3, [r4, #48]	; 0x30
{
}
 8086c28:	4620      	mov	r0, r4
 8086c2a:	bd38      	pop	{r3, r4, r5, pc}
 8086c2c:	0808dad8 	.word	0x0808dad8

08086c30 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8086c30:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 8086c32:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8086c36:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 8086c38:	b123      	cbz	r3, 8086c44 <_ZN3UDP13releaseBufferEv+0x14>
 8086c3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8086c3c:	b110      	cbz	r0, 8086c44 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 8086c3e:	2101      	movs	r1, #1
 8086c40:	f001 fc14 	bl	808846c <_ZdlPvj>
    }
    _buffer = NULL;
 8086c44:	2300      	movs	r3, #0
 8086c46:	62e3      	str	r3, [r4, #44]	; 0x2c
    _buffer_allocated = false;
 8086c48:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    _buffer_size = 0;
 8086c4c:	6323      	str	r3, [r4, #48]	; 0x30
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086c4e:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086c50:	8523      	strh	r3, [r4, #40]	; 0x28
 8086c52:	bd10      	pop	{r4, pc}

08086c54 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 8086c54:	b570      	push	{r4, r5, r6, lr}
 8086c56:	4604      	mov	r4, r0
 8086c58:	4616      	mov	r6, r2
 8086c5a:	460d      	mov	r5, r1
    releaseBuffer();
 8086c5c:	f7ff ffe8 	bl	8086c30 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 8086c60:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 8086c62:	62e6      	str	r6, [r4, #44]	; 0x2c
    _buffer_size = 0;
 8086c64:	6323      	str	r3, [r4, #48]	; 0x30
    if (!_buffer && buf_size) {         // requested allocation
 8086c66:	b93e      	cbnz	r6, 8086c78 <_ZN3UDP9setBufferEjPh+0x24>
 8086c68:	b135      	cbz	r5, 8086c78 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 8086c6a:	4628      	mov	r0, r5
 8086c6c:	f7f9 fa19 	bl	80800a2 <_Znaj>
        _buffer_allocated = true;
 8086c70:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 8086c72:	62e0      	str	r0, [r4, #44]	; 0x2c
        _buffer_allocated = true;
 8086c74:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
    if (_buffer) {
 8086c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8086c7a:	b103      	cbz	r3, 8086c7e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 8086c7c:	6325      	str	r5, [r4, #48]	; 0x30
    }
    return _buffer_size;
 8086c7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8086c80:	3000      	adds	r0, #0
 8086c82:	bf18      	it	ne
 8086c84:	2001      	movne	r0, #1
 8086c86:	bd70      	pop	{r4, r5, r6, pc}

08086c88 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 8086c88:	b570      	push	{r4, r5, r6, lr}
 8086c8a:	4615      	mov	r5, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 8086c8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 8086c8e:	4604      	mov	r4, r0
 8086c90:	460e      	mov	r6, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 8086c92:	b91a      	cbnz	r2, 8086c9c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 8086c94:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8086c96:	b109      	cbz	r1, 8086c9c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 8086c98:	f7ff ffdc 	bl	8086c54 <_ZN3UDP9setBufferEjPh>
 8086c9c:	6873      	ldr	r3, [r6, #4]
    }

    _remoteIP = ip;
    _remotePort = port;
 8086c9e:	84a5      	strh	r5, [r4, #36]	; 0x24
 8086ca0:	6223      	str	r3, [r4, #32]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086ca2:	2300      	movs	r3, #0
 8086ca4:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086ca6:	8523      	strh	r3, [r4, #40]	; 0x28

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 8086ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8086caa:	bd70      	pop	{r4, r5, r6, pc}

08086cac <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8086cac:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 8086cae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8086cb0:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 8086cb2:	b91a      	cbnz	r2, 8086cbc <_ZN3UDP11parsePacketEm+0x10>
 8086cb4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8086cb6:	b109      	cbz	r1, 8086cbc <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 8086cb8:	f7ff ffcc 	bl	8086c54 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8086cbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086cbe:	2300      	movs	r3, #0
 8086cc0:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086cc2:	8523      	strh	r3, [r4, #40]	; 0x28
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8086cc4:	b141      	cbz	r1, 8086cd8 <_ZN3UDP11parsePacketEm+0x2c>
 8086cc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8086cc8:	b132      	cbz	r2, 8086cd8 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 8086cca:	6820      	ldr	r0, [r4, #0]
 8086ccc:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8086cce:	4620      	mov	r0, r4
 8086cd0:	47a8      	blx	r5
        if (result>0) {
 8086cd2:	2800      	cmp	r0, #0
            _total = result;
 8086cd4:	bfc8      	it	gt
 8086cd6:	8520      	strhgt	r0, [r4, #40]	; 0x28
        }
    };
    return available();
 8086cd8:	6823      	ldr	r3, [r4, #0]
 8086cda:	4620      	mov	r0, r4
}
 8086cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 8086ce0:	691b      	ldr	r3, [r3, #16]
 8086ce2:	4718      	bx	r3

08086ce4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8086ce4:	b510      	push	{r4, lr}
 8086ce6:	4604      	mov	r4, r0
 8086ce8:	f7f9 fa69 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 8086cec:	4620      	mov	r0, r4
 8086cee:	bd10      	pop	{r4, pc}

08086cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8086cf0:	b513      	push	{r0, r1, r4, lr}
 8086cf2:	460b      	mov	r3, r1
 8086cf4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086cf6:	c803      	ldmia	r0, {r0, r1}
 8086cf8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8086cfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8086d00:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8086d04:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8086d08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8086d0c:	b002      	add	sp, #8
 8086d0e:	bd10      	pop	{r4, pc}

08086d10 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086d10:	4803      	ldr	r0, [pc, #12]	; (8086d20 <_GLOBAL__sub_I_RGB+0x10>)
 8086d12:	2300      	movs	r3, #0
 8086d14:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086d16:	4a03      	ldr	r2, [pc, #12]	; (8086d24 <_GLOBAL__sub_I_RGB+0x14>)
 8086d18:	4903      	ldr	r1, [pc, #12]	; (8086d28 <_GLOBAL__sub_I_RGB+0x18>)
 8086d1a:	f001 bb99 	b.w	8088450 <__aeabi_atexit>
 8086d1e:	bf00      	nop
 8086d20:	20000948 	.word	0x20000948
 8086d24:	20000140 	.word	0x20000140
 8086d28:	08086ce5 	.word	0x08086ce5

08086d2c <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8086d2c:	4770      	bx	lr

08086d2e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8086d2e:	7d00      	ldrb	r0, [r0, #20]
 8086d30:	4770      	bx	lr
	...

08086d34 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8086d34:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8086d36:	7d03      	ldrb	r3, [r0, #20]
 8086d38:	b11b      	cbz	r3, 8086d42 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8086d3a:	6980      	ldr	r0, [r0, #24]
 8086d3c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8086d40:	d101      	bne.n	8086d46 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8086d42:	2000      	movs	r0, #0
 8086d44:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8086d46:	f002 fb4d 	bl	80893e4 <__aeabi_i2f>
 8086d4a:	4902      	ldr	r1, [pc, #8]	; (8086d54 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8086d4c:	f002 fc52 	bl	80895f4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8086d50:	bd08      	pop	{r3, pc}
 8086d52:	bf00      	nop
 8086d54:	42c80000 	.word	0x42c80000

08086d58 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8086d58:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8086d5a:	7d03      	ldrb	r3, [r0, #20]
 8086d5c:	b11b      	cbz	r3, 8086d66 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8086d5e:	6a00      	ldr	r0, [r0, #32]
 8086d60:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8086d64:	d101      	bne.n	8086d6a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8086d66:	2000      	movs	r0, #0
 8086d68:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8086d6a:	f002 fb3b 	bl	80893e4 <__aeabi_i2f>
 8086d6e:	4902      	ldr	r1, [pc, #8]	; (8086d78 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8086d70:	f002 fc40 	bl	80895f4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8086d74:	bd08      	pop	{r3, pc}
 8086d76:	bf00      	nop
 8086d78:	42c80000 	.word	0x42c80000

08086d7c <_ZN14CellularSignalD0Ev>:
 8086d7c:	b510      	push	{r4, lr}
 8086d7e:	4604      	mov	r4, r0
 8086d80:	2128      	movs	r1, #40	; 0x28
 8086d82:	f001 fb73 	bl	808846c <_ZdlPvj>
 8086d86:	4620      	mov	r0, r4
 8086d88:	bd10      	pop	{r4, pc}
	...

08086d8c <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8086d8c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8086d8e:	7d03      	ldrb	r3, [r0, #20]
 8086d90:	b15b      	cbz	r3, 8086daa <_ZNK14CellularSignal10getQualityEv+0x1e>
 8086d92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8086d94:	2800      	cmp	r0, #0
 8086d96:	db08      	blt.n	8086daa <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8086d98:	f002 fb24 	bl	80893e4 <__aeabi_i2f>
 8086d9c:	4904      	ldr	r1, [pc, #16]	; (8086db0 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8086d9e:	f002 fc29 	bl	80895f4 <__aeabi_fdiv>
 8086da2:	4904      	ldr	r1, [pc, #16]	; (8086db4 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8086da4:	f002 fb72 	bl	808948c <__aeabi_fmul>
 8086da8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8086daa:	4803      	ldr	r0, [pc, #12]	; (8086db8 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8086dac:	bd08      	pop	{r3, pc}
 8086dae:	bf00      	nop
 8086db0:	477fff00 	.word	0x477fff00
 8086db4:	42c80000 	.word	0x42c80000
 8086db8:	bf800000 	.word	0xbf800000

08086dbc <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8086dbc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8086dbe:	7d03      	ldrb	r3, [r0, #20]
 8086dc0:	b15b      	cbz	r3, 8086dda <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8086dc2:	69c0      	ldr	r0, [r0, #28]
 8086dc4:	2800      	cmp	r0, #0
 8086dc6:	db08      	blt.n	8086dda <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8086dc8:	f002 fb0c 	bl	80893e4 <__aeabi_i2f>
 8086dcc:	4904      	ldr	r1, [pc, #16]	; (8086de0 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8086dce:	f002 fc11 	bl	80895f4 <__aeabi_fdiv>
 8086dd2:	4904      	ldr	r1, [pc, #16]	; (8086de4 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8086dd4:	f002 fb5a 	bl	808948c <__aeabi_fmul>
 8086dd8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8086dda:	4803      	ldr	r0, [pc, #12]	; (8086de8 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8086ddc:	bd08      	pop	{r3, pc}
 8086dde:	bf00      	nop
 8086de0:	477fff00 	.word	0x477fff00
 8086de4:	42c80000 	.word	0x42c80000
 8086de8:	bf800000 	.word	0xbf800000

08086dec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8086dec:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8086dee:	460d      	mov	r5, r1
 8086df0:	f100 0410 	add.w	r4, r0, #16
 8086df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8086df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8086df8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8086dfc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8086e00:	2001      	movs	r0, #1
 8086e02:	bd30      	pop	{r4, r5, pc}

08086e04 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 8086e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086e08:	4607      	mov	r7, r0
 8086e0a:	460c      	mov	r4, r1
{
    if (base == 0) {
 8086e0c:	4615      	mov	r5, r2
 8086e0e:	b92a      	cbnz	r2, 8086e1c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 8086e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 8086e14:	6803      	ldr	r3, [r0, #0]
 8086e16:	b2c9      	uxtb	r1, r1
 8086e18:	689b      	ldr	r3, [r3, #8]
 8086e1a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8086e1c:	2900      	cmp	r1, #0
 8086e1e:	da07      	bge.n	8086e30 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 8086e20:	2a0a      	cmp	r2, #10
 8086e22:	d105      	bne.n	8086e30 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 8086e24:	212d      	movs	r1, #45	; 0x2d
 8086e26:	f7ff fbdf 	bl	80865e8 <_ZN5Print5printEc>
            val = -n;
 8086e2a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8086e2c:	4606      	mov	r6, r0
            val = -n;
 8086e2e:	e001      	b.n	8086e34 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 8086e30:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8086e32:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8086e34:	b2ea      	uxtb	r2, r5
 8086e36:	4638      	mov	r0, r7
 8086e38:	f7ff fbf3 	bl	8086622 <_ZN5Print11printNumberEmh>
    }
}
 8086e3c:	4430      	add	r0, r6
 8086e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086e42 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
 8086e42:	b570      	push	{r4, r5, r6, lr}
 8086e44:	460d      	mov	r5, r1
 8086e46:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8086e48:	220a      	movs	r2, #10
 8086e4a:	6881      	ldr	r1, [r0, #8]
 8086e4c:	4628      	mov	r0, r5
 8086e4e:	f7ff ffd9 	bl	8086e04 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
 8086e52:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8086e54:	4604      	mov	r4, r0
    n += p.print(',');
 8086e56:	4628      	mov	r0, r5
 8086e58:	f7ff fbc6 	bl	80865e8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8086e5c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8086e5e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8086e60:	68f1      	ldr	r1, [r6, #12]
 8086e62:	4628      	mov	r0, r5
 8086e64:	f7ff ffce 	bl	8086e04 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
 8086e68:	4420      	add	r0, r4
 8086e6a:	bd70      	pop	{r4, r5, r6, pc}

08086e6c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8086e6c:	f1a0 0004 	sub.w	r0, r0, #4
 8086e70:	f7ff bfe7 	b.w	8086e42 <_ZNK14CellularSignal7printToER5Print>

08086e74 <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 8086e74:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 8086e76:	0909      	lsrs	r1, r1, #4
 8086e78:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086e7c:	f002 fab2 	bl	80893e4 <__aeabi_i2f>
 8086e80:	4901      	ldr	r1, [pc, #4]	; (8086e88 <_ZN6detail9_getVCellEhh+0x14>)
 8086e82:	f002 fbb7 	bl	80895f4 <__aeabi_fdiv>
	}
 8086e86:	bd08      	pop	{r3, pc}
 8086e88:	44480000 	.word	0x44480000

08086e8c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8086e8c:	6800      	ldr	r0, [r0, #0]
 8086e8e:	f000 bf98 	b.w	8087dc2 <_ZN7TwoWire4lockEv>

08086e92 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8086e92:	b510      	push	{r4, lr}
 8086e94:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8086e96:	6001      	str	r1, [r0, #0]
 8086e98:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8086e9a:	b10a      	cbz	r2, 8086ea0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8086e9c:	f7ff fff6 	bl	8086e8c <_ZN9FuelGauge4lockEv>
    }
}
 8086ea0:	4620      	mov	r0, r4
 8086ea2:	bd10      	pop	{r4, pc}

08086ea4 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8086ea4:	b538      	push	{r3, r4, r5, lr}
 8086ea6:	4604      	mov	r4, r0
 8086ea8:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086eaa:	f001 faab 	bl	8088404 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8086eae:	462a      	mov	r2, r5
 8086eb0:	4601      	mov	r1, r0
 8086eb2:	4620      	mov	r0, r4
 8086eb4:	f7ff ffed 	bl	8086e92 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8086eb8:	4620      	mov	r0, r4
 8086eba:	bd38      	pop	{r3, r4, r5, pc}

08086ebc <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8086ebc:	6800      	ldr	r0, [r0, #0]
 8086ebe:	f000 bf89 	b.w	8087dd4 <_ZN7TwoWire6unlockEv>

08086ec2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8086ec2:	b510      	push	{r4, lr}
{
    if (lock_) {
 8086ec4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8086ec6:	4604      	mov	r4, r0
{
    if (lock_) {
 8086ec8:	b10b      	cbz	r3, 8086ece <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8086eca:	f7ff fff7 	bl	8086ebc <_ZN9FuelGauge6unlockEv>
    }
}
 8086ece:	4620      	mov	r0, r4
 8086ed0:	bd10      	pop	{r4, pc}

08086ed2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8086ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086ed4:	4604      	mov	r4, r0
 8086ed6:	460f      	mov	r7, r1
 8086ed8:	4616      	mov	r6, r2
 8086eda:	461d      	mov	r5, r3
 8086edc:	f7ff ffd6 	bl	8086e8c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8086ee0:	6820      	ldr	r0, [r4, #0]
 8086ee2:	2136      	movs	r1, #54	; 0x36
 8086ee4:	f000 ff5f 	bl	8087da6 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8086ee8:	6820      	ldr	r0, [r4, #0]
 8086eea:	4639      	mov	r1, r7
 8086eec:	6803      	ldr	r3, [r0, #0]
 8086eee:	689b      	ldr	r3, [r3, #8]
 8086ef0:	4798      	blx	r3
    i2c_.endTransmission(true);
 8086ef2:	2101      	movs	r1, #1
 8086ef4:	6820      	ldr	r0, [r4, #0]
 8086ef6:	f000 ff59 	bl	8087dac <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8086efa:	2202      	movs	r2, #2
 8086efc:	2136      	movs	r1, #54	; 0x36
 8086efe:	2301      	movs	r3, #1
 8086f00:	6820      	ldr	r0, [r4, #0]
 8086f02:	f000 ff37 	bl	8087d74 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
 8086f06:	6820      	ldr	r0, [r4, #0]
 8086f08:	6803      	ldr	r3, [r0, #0]
 8086f0a:	695b      	ldr	r3, [r3, #20]
 8086f0c:	4798      	blx	r3
 8086f0e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8086f10:	6820      	ldr	r0, [r4, #0]
 8086f12:	6803      	ldr	r3, [r0, #0]
 8086f14:	695b      	ldr	r3, [r3, #20]
 8086f16:	4798      	blx	r3
 8086f18:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8086f1a:	4620      	mov	r0, r4
}
 8086f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8086f20:	f7ff bfcc 	b.w	8086ebc <_ZN9FuelGauge6unlockEv>

08086f24 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 8086f24:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 8086f26:	2200      	movs	r2, #0
	byte LSB = 0;
 8086f28:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 8086f2a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 8086f2e:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 8086f32:	2102      	movs	r1, #2
 8086f34:	f10d 0206 	add.w	r2, sp, #6
 8086f38:	f7ff ffcb 	bl	8086ed2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 8086f3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086f40:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086f44:	b003      	add	sp, #12
 8086f46:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 8086f4a:	f7ff bf93 	b.w	8086e74 <_ZN6detail9_getVCellEhh>
	...

08086f50 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8086f50:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8086f52:	2200      	movs	r2, #0
	byte LSB = 0;
 8086f54:	ab02      	add	r3, sp, #8
 8086f56:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8086f5a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8086f5e:	2104      	movs	r1, #4
 8086f60:	f10d 0206 	add.w	r2, sp, #6
 8086f64:	f7ff ffb5 	bl	8086ed2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8086f68:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086f6c:	f001 fde8 	bl	8088b40 <__aeabi_i2d>
 8086f70:	2200      	movs	r2, #0
 8086f72:	4b08      	ldr	r3, [pc, #32]	; (8086f94 <_ZN9FuelGauge6getSoCEv+0x44>)
 8086f74:	f001 fe4a 	bl	8088c0c <__aeabi_dmul>
 8086f78:	f002 f92a 	bl	80891d0 <__aeabi_d2f>
 8086f7c:	4604      	mov	r4, r0
 8086f7e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8086f82:	f002 fa2f 	bl	80893e4 <__aeabi_i2f>
 8086f86:	4601      	mov	r1, r0
 8086f88:	4620      	mov	r0, r4
 8086f8a:	f002 f977 	bl	808927c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8086f8e:	b002      	add	sp, #8
 8086f90:	bd10      	pop	{r4, pc}
 8086f92:	bf00      	nop
 8086f94:	3f700000 	.word	0x3f700000

08086f98 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8086f98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8086f9a:	4b18      	ldr	r3, [pc, #96]	; (8086ffc <serialEventRun+0x64>)
 8086f9c:	b133      	cbz	r3, 8086fac <serialEventRun+0x14>
 8086f9e:	f000 fc63 	bl	8087868 <_Z16_fetch_usbserialv>
 8086fa2:	6803      	ldr	r3, [r0, #0]
 8086fa4:	691b      	ldr	r3, [r3, #16]
 8086fa6:	4798      	blx	r3
 8086fa8:	2800      	cmp	r0, #0
 8086faa:	dc1e      	bgt.n	8086fea <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8086fac:	4b14      	ldr	r3, [pc, #80]	; (8087000 <serialEventRun+0x68>)
 8086fae:	b133      	cbz	r3, 8086fbe <serialEventRun+0x26>
 8086fb0:	f000 fe46 	bl	8087c40 <_Z22__fetch_global_Serial1v>
 8086fb4:	6803      	ldr	r3, [r0, #0]
 8086fb6:	691b      	ldr	r3, [r3, #16]
 8086fb8:	4798      	blx	r3
 8086fba:	2800      	cmp	r0, #0
 8086fbc:	dc18      	bgt.n	8086ff0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8086fbe:	4b11      	ldr	r3, [pc, #68]	; (8087004 <serialEventRun+0x6c>)
 8086fc0:	b10b      	cbz	r3, 8086fc6 <serialEventRun+0x2e>
 8086fc2:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8086fc6:	4b10      	ldr	r3, [pc, #64]	; (8087008 <serialEventRun+0x70>)
 8086fc8:	b10b      	cbz	r3, 8086fce <serialEventRun+0x36>
 8086fca:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8086fce:	4b0f      	ldr	r3, [pc, #60]	; (808700c <serialEventRun+0x74>)
 8086fd0:	b10b      	cbz	r3, 8086fd6 <serialEventRun+0x3e>
 8086fd2:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8086fd6:	4b0e      	ldr	r3, [pc, #56]	; (8087010 <serialEventRun+0x78>)
 8086fd8:	b17b      	cbz	r3, 8086ffa <serialEventRun+0x62>
 8086fda:	f000 fc81 	bl	80878e0 <_Z17_fetch_usbserial1v>
 8086fde:	6803      	ldr	r3, [r0, #0]
 8086fe0:	691b      	ldr	r3, [r3, #16]
 8086fe2:	4798      	blx	r3
 8086fe4:	2800      	cmp	r0, #0
 8086fe6:	dc06      	bgt.n	8086ff6 <serialEventRun+0x5e>
 8086fe8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8086fea:	f3af 8000 	nop.w
 8086fee:	e7dd      	b.n	8086fac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8086ff0:	f3af 8000 	nop.w
 8086ff4:	e7e3      	b.n	8086fbe <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8086ff6:	f3af 8000 	nop.w
 8086ffa:	bd08      	pop	{r3, pc}
	...

08087014 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8087014:	b508      	push	{r3, lr}
	serialEventRun();
 8087016:	f7ff ffbf 	bl	8086f98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808701a:	f7fe f9d1 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808701e:	4b01      	ldr	r3, [pc, #4]	; (8087024 <_post_loop+0x10>)
 8087020:	6018      	str	r0, [r3, #0]
 8087022:	bd08      	pop	{r3, pc}
 8087024:	20000eb0 	.word	0x20000eb0

08087028 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8087028:	4802      	ldr	r0, [pc, #8]	; (8087034 <_Z33system_initialize_user_backup_ramv+0xc>)
 808702a:	4a03      	ldr	r2, [pc, #12]	; (8087038 <_Z33system_initialize_user_backup_ramv+0x10>)
 808702c:	4903      	ldr	r1, [pc, #12]	; (808703c <_Z33system_initialize_user_backup_ramv+0x14>)
 808702e:	1a12      	subs	r2, r2, r0
 8087030:	f002 bf4f 	b.w	8089ed2 <memcpy>
 8087034:	40024000 	.word	0x40024000
 8087038:	40024004 	.word	0x40024004
 808703c:	0808e388 	.word	0x0808e388

08087040 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8087040:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8087042:	2300      	movs	r3, #0
 8087044:	9300      	str	r3, [sp, #0]
 8087046:	461a      	mov	r2, r3
 8087048:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808704c:	f7fe fbc2 	bl	80857d4 <system_ctrl_set_result>
}
 8087050:	b003      	add	sp, #12
 8087052:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08087058 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8087058:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808705a:	8843      	ldrh	r3, [r0, #2]
 808705c:	2b0a      	cmp	r3, #10
 808705e:	d008      	beq.n	8087072 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8087060:	2b50      	cmp	r3, #80	; 0x50
 8087062:	d109      	bne.n	8087078 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8087064:	4b09      	ldr	r3, [pc, #36]	; (808708c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8087066:	681b      	ldr	r3, [r3, #0]
 8087068:	b13b      	cbz	r3, 808707a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808706a:	b003      	add	sp, #12
 808706c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8087070:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8087072:	f7ff ffe5 	bl	8087040 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8087076:	e006      	b.n	8087086 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8087078:	2300      	movs	r3, #0
 808707a:	9300      	str	r3, [sp, #0]
 808707c:	461a      	mov	r2, r3
 808707e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8087082:	f7fe fba7 	bl	80857d4 <system_ctrl_set_result>
        break;
    }
}
 8087086:	b003      	add	sp, #12
 8087088:	f85d fb04 	ldr.w	pc, [sp], #4
 808708c:	20000958 	.word	0x20000958

08087090 <module_user_init_hook>:

void module_user_init_hook()
{
 8087090:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8087092:	4c10      	ldr	r4, [pc, #64]	; (80870d4 <module_user_init_hook+0x44>)
 8087094:	4d10      	ldr	r5, [pc, #64]	; (80870d8 <module_user_init_hook+0x48>)
 8087096:	6823      	ldr	r3, [r4, #0]
 8087098:	42ab      	cmp	r3, r5
 808709a:	4b10      	ldr	r3, [pc, #64]	; (80870dc <module_user_init_hook+0x4c>)
 808709c:	bf0c      	ite	eq
 808709e:	2201      	moveq	r2, #1
 80870a0:	2200      	movne	r2, #0
 80870a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80870a4:	d002      	beq.n	80870ac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80870a6:	f7ff ffbf 	bl	8087028 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80870aa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80870ac:	f7fe f970 	bl	8085390 <HAL_RNG_GetRandomNumber>
 80870b0:	4604      	mov	r4, r0
    srand(seed);
 80870b2:	f002 ff21 	bl	8089ef8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80870b6:	4b0a      	ldr	r3, [pc, #40]	; (80870e0 <module_user_init_hook+0x50>)
 80870b8:	b113      	cbz	r3, 80870c0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80870ba:	4620      	mov	r0, r4
 80870bc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80870c0:	2100      	movs	r1, #0
 80870c2:	4807      	ldr	r0, [pc, #28]	; (80870e0 <module_user_init_hook+0x50>)
 80870c4:	f7fe fc18 	bl	80858f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80870c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80870cc:	2100      	movs	r1, #0
 80870ce:	4805      	ldr	r0, [pc, #20]	; (80870e4 <module_user_init_hook+0x54>)
 80870d0:	f7fe bb76 	b.w	80857c0 <system_ctrl_set_app_request_handler>
 80870d4:	40024000 	.word	0x40024000
 80870d8:	9a271c1e 	.word	0x9a271c1e
 80870dc:	2000095c 	.word	0x2000095c
 80870e0:	00000000 	.word	0x00000000
 80870e4:	08087059 	.word	0x08087059

080870e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80870e8:	4770      	bx	lr

080870ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80870ea:	2000      	movs	r0, #0
 80870ec:	4770      	bx	lr

080870ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80870ee:	b510      	push	{r4, lr}
 80870f0:	4604      	mov	r4, r0
 80870f2:	2110      	movs	r1, #16
 80870f4:	f001 f9ba 	bl	808846c <_ZdlPvj>
 80870f8:	4620      	mov	r0, r4
 80870fa:	bd10      	pop	{r4, pc}

080870fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80870fc:	b508      	push	{r3, lr}
      { delete this; }
 80870fe:	b108      	cbz	r0, 8087104 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8087100:	f7ff fff5 	bl	80870ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8087104:	bd08      	pop	{r3, pc}

08087106 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8087106:	2200      	movs	r2, #0
 8087108:	6002      	str	r2, [r0, #0]
 808710a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808710e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8087110:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8087112:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8087116:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8087118:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808711a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 808711c:	680c      	ldr	r4, [r1, #0]
 808711e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8087120:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8087122:	bd10      	pop	{r4, pc}

08087124 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8087124:	b510      	push	{r4, lr}
 8087126:	4604      	mov	r4, r0
    free((void*)msg_);
 8087128:	6800      	ldr	r0, [r0, #0]
 808712a:	f7fe fbf5 	bl	8085918 <free>
}
 808712e:	4620      	mov	r0, r4
 8087130:	bd10      	pop	{r4, pc}

08087132 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8087132:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8087134:	68c4      	ldr	r4, [r0, #12]
 8087136:	b1f4      	cbz	r4, 8087176 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 8087138:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808713a:	2b02      	cmp	r3, #2
 808713c:	d103      	bne.n	8087146 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808713e:	f104 000c 	add.w	r0, r4, #12
 8087142:	f7ff ffef 	bl	8087124 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8087146:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8087148:	b135      	cbz	r5, 8087158 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808714a:	4628      	mov	r0, r5
 808714c:	f7f9 f837 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 8087150:	2110      	movs	r1, #16
 8087152:	4628      	mov	r0, r5
 8087154:	f001 f98a 	bl	808846c <_ZdlPvj>
 8087158:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808715a:	b135      	cbz	r5, 808716a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808715c:	4628      	mov	r0, r5
 808715e:	f7f9 f82e 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 8087162:	2110      	movs	r1, #16
 8087164:	4628      	mov	r0, r5
 8087166:	f001 f981 	bl	808846c <_ZdlPvj>
 808716a:	4620      	mov	r0, r4
 808716c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087170:	2114      	movs	r1, #20
 8087172:	f001 b97b 	b.w	808846c <_ZdlPvj>
 8087176:	bd38      	pop	{r3, r4, r5, pc}

08087178 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8087178:	b510      	push	{r4, lr}
 808717a:	b088      	sub	sp, #32
 808717c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808717e:	4668      	mov	r0, sp
 8087180:	f7ff f971 	bl	8086466 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8087184:	4669      	mov	r1, sp
 8087186:	a804      	add	r0, sp, #16
 8087188:	f7ff f9ac 	bl	80864e4 <_ZN6StringC1ERKS_>
 808718c:	a804      	add	r0, sp, #16
 808718e:	47a0      	blx	r4
 8087190:	4604      	mov	r4, r0
 8087192:	a804      	add	r0, sp, #16
 8087194:	f7ff f920 	bl	80863d8 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8087198:	4668      	mov	r0, sp
 808719a:	f7ff f91d 	bl	80863d8 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808719e:	4620      	mov	r0, r4
 80871a0:	b008      	add	sp, #32
 80871a2:	bd10      	pop	{r4, pc}

080871a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80871a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80871a6:	4607      	mov	r7, r0
 80871a8:	460e      	mov	r6, r1
 80871aa:	4615      	mov	r5, r2
 80871ac:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80871ae:	2410      	movs	r4, #16
 80871b0:	4622      	mov	r2, r4
 80871b2:	2100      	movs	r1, #0
 80871b4:	4668      	mov	r0, sp
 80871b6:	f002 fe97 	bl	8089ee8 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80871ba:	2200      	movs	r2, #0
 80871bc:	4669      	mov	r1, sp
 80871be:	4610      	mov	r0, r2
         size = sizeof(*this);
 80871c0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80871c4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80871c6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80871c8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80871ca:	f7fe fb5d 	bl	8085888 <spark_function>
}
 80871ce:	b005      	add	sp, #20
 80871d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080871d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80871d2:	b513      	push	{r0, r1, r4, lr}
 80871d4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80871d6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80871da:	2300      	movs	r3, #0
 80871dc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80871de:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80871e0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80871e2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80871e4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80871e6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80871e8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80871ea:	f7f9 fb8f 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80871ee:	4620      	mov	r0, r4
 80871f0:	b002      	add	sp, #8
 80871f2:	bd10      	pop	{r4, pc}

080871f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80871f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80871f6:	460c      	mov	r4, r1
 80871f8:	4606      	mov	r6, r0
 80871fa:	460f      	mov	r7, r1
 80871fc:	f854 3b04 	ldr.w	r3, [r4], #4
 8087200:	ad02      	add	r5, sp, #8
 8087202:	f845 3d08 	str.w	r3, [r5, #-8]!
 8087206:	4621      	mov	r1, r4
 8087208:	a801      	add	r0, sp, #4
 808720a:	f7ff fa63 	bl	80866d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808720e:	4629      	mov	r1, r5
 8087210:	4630      	mov	r0, r6
 8087212:	f7ff ffde 	bl	80871d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8087216:	a801      	add	r0, sp, #4
 8087218:	f7f9 fb78 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808721c:	4620      	mov	r0, r4
 808721e:	f7f9 fb75 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8087222:	4638      	mov	r0, r7
 8087224:	2108      	movs	r1, #8
 8087226:	f001 f921 	bl	808846c <_ZdlPvj>
        return p;
    }
 808722a:	4630      	mov	r0, r6
 808722c:	b003      	add	sp, #12
 808722e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8087230:	b538      	push	{r3, r4, r5, lr}
 8087232:	2300      	movs	r3, #0
 8087234:	4604      	mov	r4, r0
 8087236:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087238:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808723a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808723c:	f7f8 ff2f 	bl	808009e <_Znwj>
 8087240:	b128      	cbz	r0, 808724e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8087242:	2301      	movs	r3, #1
 8087244:	6043      	str	r3, [r0, #4]
 8087246:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8087248:	4b02      	ldr	r3, [pc, #8]	; (8087254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808724a:	60c5      	str	r5, [r0, #12]
 808724c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808724e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8087250:	4620      	mov	r0, r4
 8087252:	bd38      	pop	{r3, r4, r5, pc}
 8087254:	0808db84 	.word	0x0808db84

08087258 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087258:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808725a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808725c:	b90a      	cbnz	r2, 8087262 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808725e:	f001 f9d1 	bl	8088604 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087262:	68c3      	ldr	r3, [r0, #12]
    }
 8087264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087268:	4718      	bx	r3

0808726a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808726a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808726c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808726e:	f100 0110 	add.w	r1, r0, #16
 8087272:	f7ff fff1 	bl	8087258 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8087276:	bd08      	pop	{r3, pc}

08087278 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087278:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808727a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808727c:	b90a      	cbnz	r2, 8087282 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808727e:	f001 f9c1 	bl	8088604 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087282:	68c3      	ldr	r3, [r0, #12]
    }
 8087284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087288:	4718      	bx	r3

0808728a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808728a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808728c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808728e:	f100 0110 	add.w	r1, r0, #16
 8087292:	f7ff fff1 	bl	8087278 <_ZNKSt8functionIFvRKbEEclES1_>
 8087296:	bd08      	pop	{r3, pc}

08087298 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087298:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808729a:	2300      	movs	r3, #0
 808729c:	6083      	str	r3, [r0, #8]
 808729e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80872a0:	4604      	mov	r4, r0
 80872a2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80872a4:	b12b      	cbz	r3, 80872b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80872a6:	2202      	movs	r2, #2
 80872a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80872aa:	68eb      	ldr	r3, [r5, #12]
 80872ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80872ae:	68ab      	ldr	r3, [r5, #8]
 80872b0:	60a3      	str	r3, [r4, #8]
	}
    }
 80872b2:	4620      	mov	r0, r4
 80872b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080872b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80872b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80872ba:	b089      	sub	sp, #36	; 0x24
 80872bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80872be:	4668      	mov	r0, sp
 80872c0:	f7ff ff21 	bl	8087106 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80872c4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80872c8:	2300      	movs	r3, #0
 80872ca:	f88d 3008 	strb.w	r3, [sp, #8]
 80872ce:	e8d4 3f4f 	ldrexb	r3, [r4]
 80872d2:	2b00      	cmp	r3, #0
 80872d4:	d103      	bne.n	80872de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80872d6:	e8c4 2f41 	strexb	r1, r2, [r4]
 80872da:	2900      	cmp	r1, #0
 80872dc:	d1f7      	bne.n	80872ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80872de:	d002      	beq.n	80872e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80872e0:	f88d 3008 	strb.w	r3, [sp, #8]
 80872e4:	e063      	b.n	80873ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80872e6:	f114 050c 	adds.w	r5, r4, #12
 80872ea:	d003      	beq.n	80872f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80872ec:	4669      	mov	r1, sp
 80872ee:	4628      	mov	r0, r5
 80872f0:	f7ff ff09 	bl	8087106 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80872f4:	f3bf 8f5f 	dmb	sy
 80872f8:	2301      	movs	r3, #1
 80872fa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80872fc:	f3bf 8f5f 	dmb	sy
 8087300:	f104 0308 	add.w	r3, r4, #8
 8087304:	2000      	movs	r0, #0
 8087306:	e853 6f00 	ldrex	r6, [r3]
 808730a:	e843 0200 	strex	r2, r0, [r3]
 808730e:	2a00      	cmp	r2, #0
 8087310:	d1f9      	bne.n	8087306 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8087312:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8087316:	2e00      	cmp	r6, #0
 8087318:	d049      	beq.n	80873ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808731a:	f7fe fa39 	bl	8085790 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808731e:	b120      	cbz	r0, 808732a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8087320:	4629      	mov	r1, r5
 8087322:	4630      	mov	r0, r6
 8087324:	f7ff ff98 	bl	8087258 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8087328:	e03a      	b.n	80873a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808732a:	4631      	mov	r1, r6
 808732c:	a802      	add	r0, sp, #8
 808732e:	f7ff ffb3 	bl	8087298 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8087332:	68e0      	ldr	r0, [r4, #12]
 8087334:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8087338:	b108      	cbz	r0, 808733e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808733a:	f002 fe25 	bl	8089f88 <strdup>
 808733e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8087340:	2010      	movs	r0, #16
 8087342:	f8ad 501c 	strh.w	r5, [sp, #28]
 8087346:	f7f8 feaa 	bl	808009e <_Znwj>
 808734a:	4605      	mov	r5, r0
 808734c:	b1e8      	cbz	r0, 808738a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808734e:	2700      	movs	r7, #0
 8087350:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087352:	2018      	movs	r0, #24
 8087354:	f7f8 fea3 	bl	808009e <_Znwj>
 8087358:	4604      	mov	r4, r0
 808735a:	b188      	cbz	r0, 8087380 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808735c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808735e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8087360:	a802      	add	r0, sp, #8
 8087362:	f7ff fcc5 	bl	8086cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087366:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8087368:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808736a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808736c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808736e:	9204      	str	r2, [sp, #16]
 8087370:	68e2      	ldr	r2, [r4, #12]
 8087372:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8087374:	60e3      	str	r3, [r4, #12]
 8087376:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808737a:	9205      	str	r2, [sp, #20]
 808737c:	f7ff fec3 	bl	8087106 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087380:	4b0d      	ldr	r3, [pc, #52]	; (80873b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087382:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087384:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8087386:	4b0d      	ldr	r3, [pc, #52]	; (80873bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8087388:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808738a:	a806      	add	r0, sp, #24
 808738c:	f7ff feca 	bl	8087124 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087390:	a802      	add	r0, sp, #8
 8087392:	f7f8 ff14 	bl	80801be <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087396:	2200      	movs	r2, #0
 8087398:	4629      	mov	r1, r5
 808739a:	4809      	ldr	r0, [pc, #36]	; (80873c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 808739c:	f7fe fa00 	bl	80857a0 <application_thread_invoke>
 80873a0:	4630      	mov	r0, r6
 80873a2:	f7f8 ff0c 	bl	80801be <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80873a6:	2110      	movs	r1, #16
 80873a8:	4630      	mov	r0, r6
 80873aa:	f001 f85f 	bl	808846c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80873ae:	4668      	mov	r0, sp
 80873b0:	f7ff feb8 	bl	8087124 <_ZN8particle5ErrorD1Ev>
    }
 80873b4:	b009      	add	sp, #36	; 0x24
 80873b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80873b8:	0808726b 	.word	0x0808726b
 80873bc:	080874e1 	.word	0x080874e1
 80873c0:	08087c8d 	.word	0x08087c8d

080873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80873c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80873c8:	b08b      	sub	sp, #44	; 0x2c
 80873ca:	4606      	mov	r6, r0
 80873cc:	460f      	mov	r7, r1
 80873ce:	4690      	mov	r8, r2
 80873d0:	4699      	mov	r9, r3
 80873d2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80873d6:	f7fe fa6f 	bl	80858b8 <spark_cloud_flag_connected>
 80873da:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80873dc:	4683      	mov	fp, r0
 80873de:	bb30      	cbnz	r0, 808742e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80873e0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80873e4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80873e6:	a905      	add	r1, sp, #20
 80873e8:	4628      	mov	r0, r5
 80873ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80873ee:	f7ff fe8a 	bl	8087106 <_ZN8particle5ErrorC1EOS0_>
 80873f2:	2014      	movs	r0, #20
 80873f4:	f7f8 fe53 	bl	808009e <_Znwj>
 80873f8:	4604      	mov	r4, r0
 80873fa:	b158      	cbz	r0, 8087414 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80873fc:	2302      	movs	r3, #2
 80873fe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8087400:	2301      	movs	r3, #1
 8087402:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8087404:	f8c0 b004 	str.w	fp, [r0, #4]
 8087408:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 808740c:	4629      	mov	r1, r5
 808740e:	300c      	adds	r0, #12
 8087410:	f7ff fe79 	bl	8087106 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8087414:	4630      	mov	r0, r6
 8087416:	4621      	mov	r1, r4
 8087418:	f840 4b04 	str.w	r4, [r0], #4
 808741c:	f7ff ff08 	bl	8087230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8087420:	4628      	mov	r0, r5
 8087422:	f7ff fe7f 	bl	8087124 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8087426:	a805      	add	r0, sp, #20
 8087428:	f7ff fe7c 	bl	8087124 <_ZN8particle5ErrorD1Ev>
 808742c:	e052      	b.n	80874d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808742e:	2400      	movs	r4, #0
 8087430:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8087432:	2014      	movs	r0, #20
 8087434:	606c      	str	r4, [r5, #4]
 8087436:	60ac      	str	r4, [r5, #8]
 8087438:	9307      	str	r3, [sp, #28]
 808743a:	f7f8 fe30 	bl	808009e <_Znwj>
 808743e:	4601      	mov	r1, r0
 8087440:	b118      	cbz	r0, 808744a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8087442:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8087444:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8087446:	6044      	str	r4, [r0, #4]
 8087448:	6084      	str	r4, [r0, #8]
 808744a:	a804      	add	r0, sp, #16
 808744c:	9103      	str	r1, [sp, #12]
 808744e:	f7ff feef 	bl	8087230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8087452:	4b22      	ldr	r3, [pc, #136]	; (80874dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8087454:	2008      	movs	r0, #8
 8087456:	9308      	str	r3, [sp, #32]
 8087458:	f7f8 fe21 	bl	808009e <_Znwj>
 808745c:	4604      	mov	r4, r0
 808745e:	b128      	cbz	r0, 808746c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8087460:	9b03      	ldr	r3, [sp, #12]
 8087462:	a904      	add	r1, sp, #16
 8087464:	f840 3b04 	str.w	r3, [r0], #4
 8087468:	f7ff f934 	bl	80866d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808746c:	9500      	str	r5, [sp, #0]
 808746e:	fa5f f38a 	uxtb.w	r3, sl
 8087472:	464a      	mov	r2, r9
 8087474:	4641      	mov	r1, r8
 8087476:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8087478:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808747a:	f7fe fa2d 	bl	80858d8 <spark_send_event>
 808747e:	b920      	cbnz	r0, 808748a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8087480:	9b03      	ldr	r3, [sp, #12]
 8087482:	785b      	ldrb	r3, [r3, #1]
 8087484:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8087488:	b183      	cbz	r3, 80874ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808748a:	9b03      	ldr	r3, [sp, #12]
 808748c:	a904      	add	r1, sp, #16
 808748e:	a806      	add	r0, sp, #24
 8087490:	9305      	str	r3, [sp, #20]
 8087492:	f7ff f91f 	bl	80866d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8087496:	a905      	add	r1, sp, #20
 8087498:	4630      	mov	r0, r6
 808749a:	f7ff fe9a 	bl	80871d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808749e:	a806      	add	r0, sp, #24
 80874a0:	f7f9 fa34 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80874a4:	a804      	add	r0, sp, #16
 80874a6:	f7f9 fa31 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80874aa:	e013      	b.n	80874d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80874ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80874b0:	a905      	add	r1, sp, #20
 80874b2:	a803      	add	r0, sp, #12
 80874b4:	9205      	str	r2, [sp, #20]
 80874b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80874ba:	f7ff fefd 	bl	80872b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80874be:	a805      	add	r0, sp, #20
 80874c0:	f7ff fe30 	bl	8087124 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80874c4:	a805      	add	r0, sp, #20
 80874c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80874c8:	f7ff fe94 	bl	80871f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80874cc:	a806      	add	r0, sp, #24
 80874ce:	f7f9 fa1d 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80874d2:	e7da      	b.n	808748a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80874d4:	4630      	mov	r0, r6
 80874d6:	b00b      	add	sp, #44	; 0x2c
 80874d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80874dc:	08087651 	.word	0x08087651

080874e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80874e0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80874e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80874e4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80874e6:	d006      	beq.n	80874f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80874e8:	2a03      	cmp	r2, #3
 80874ea:	d017      	beq.n	808751c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80874ec:	2a01      	cmp	r2, #1
 80874ee:	d122      	bne.n	8087536 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80874f0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80874f2:	6003      	str	r3, [r0, #0]
	      break;
 80874f4:	e01f      	b.n	8087536 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80874f6:	2018      	movs	r0, #24
 80874f8:	680e      	ldr	r6, [r1, #0]
 80874fa:	f7f8 fdd0 	bl	808009e <_Znwj>
 80874fe:	4605      	mov	r5, r0
 8087500:	b150      	cbz	r0, 8087518 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8087502:	4631      	mov	r1, r6
 8087504:	f7ff fec8 	bl	8087298 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8087508:	6930      	ldr	r0, [r6, #16]
 808750a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808750e:	b108      	cbz	r0, 8087514 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8087510:	f002 fd3a 	bl	8089f88 <strdup>
 8087514:	6128      	str	r0, [r5, #16]
 8087516:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087518:	6025      	str	r5, [r4, #0]
 808751a:	e00c      	b.n	8087536 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808751c:	6804      	ldr	r4, [r0, #0]
 808751e:	b154      	cbz	r4, 8087536 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8087520:	f104 0010 	add.w	r0, r4, #16
 8087524:	f7ff fdfe 	bl	8087124 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087528:	4620      	mov	r0, r4
 808752a:	f7f8 fe48 	bl	80801be <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808752e:	2118      	movs	r1, #24
 8087530:	4620      	mov	r0, r4
 8087532:	f000 ff9b 	bl	808846c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8087536:	2000      	movs	r0, #0
 8087538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808753a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808753a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808753c:	2300      	movs	r3, #0
 808753e:	6083      	str	r3, [r0, #8]
 8087540:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087542:	4604      	mov	r4, r0
 8087544:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8087546:	b12b      	cbz	r3, 8087554 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087548:	2202      	movs	r2, #2
 808754a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808754c:	68eb      	ldr	r3, [r5, #12]
 808754e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087550:	68ab      	ldr	r3, [r5, #8]
 8087552:	60a3      	str	r3, [r4, #8]
	}
    }
 8087554:	4620      	mov	r0, r4
 8087556:	bd38      	pop	{r3, r4, r5, pc}

08087558 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8087558:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808755a:	b570      	push	{r4, r5, r6, lr}
 808755c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808755e:	d006      	beq.n	808756e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8087560:	2a03      	cmp	r2, #3
 8087562:	d011      	beq.n	8087588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8087564:	2a01      	cmp	r2, #1
 8087566:	d118      	bne.n	808759a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8087568:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808756a:	6003      	str	r3, [r0, #0]
	      break;
 808756c:	e015      	b.n	808759a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808756e:	2014      	movs	r0, #20
 8087570:	680e      	ldr	r6, [r1, #0]
 8087572:	f7f8 fd94 	bl	808009e <_Znwj>
 8087576:	4605      	mov	r5, r0
 8087578:	b120      	cbz	r0, 8087584 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808757a:	4631      	mov	r1, r6
 808757c:	f7ff ffdd 	bl	808753a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8087580:	7c33      	ldrb	r3, [r6, #16]
 8087582:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087584:	6025      	str	r5, [r4, #0]
 8087586:	e008      	b.n	808759a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087588:	6804      	ldr	r4, [r0, #0]
 808758a:	b134      	cbz	r4, 808759a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808758c:	4620      	mov	r0, r4
 808758e:	f7f8 fe16 	bl	80801be <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087592:	2114      	movs	r1, #20
 8087594:	4620      	mov	r0, r4
 8087596:	f000 ff69 	bl	808846c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808759a:	2000      	movs	r0, #0
 808759c:	bd70      	pop	{r4, r5, r6, pc}
	...

080875a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80875a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80875a2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80875a4:	f3bf 8f5f 	dmb	sy
 80875a8:	b087      	sub	sp, #28
 80875aa:	2300      	movs	r3, #0
 80875ac:	e850 6f00 	ldrex	r6, [r0]
 80875b0:	e840 3200 	strex	r2, r3, [r0]
 80875b4:	2a00      	cmp	r2, #0
 80875b6:	d1f9      	bne.n	80875ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80875b8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80875bc:	2e00      	cmp	r6, #0
 80875be:	d03f      	beq.n	8087640 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80875c0:	4618      	mov	r0, r3
 80875c2:	f7fe f8e5 	bl	8085790 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80875c6:	4607      	mov	r7, r0
 80875c8:	b120      	cbz	r0, 80875d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80875ca:	4621      	mov	r1, r4
 80875cc:	4630      	mov	r0, r6
 80875ce:	f7ff fe53 	bl	8087278 <_ZNKSt8functionIFvRKbEEclES1_>
 80875d2:	e02e      	b.n	8087632 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80875d4:	4631      	mov	r1, r6
 80875d6:	a801      	add	r0, sp, #4
 80875d8:	f7ff ffaf 	bl	808753a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80875dc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80875de:	2010      	movs	r0, #16
 80875e0:	f88d 3014 	strb.w	r3, [sp, #20]
 80875e4:	f7f8 fd5b 	bl	808009e <_Znwj>
 80875e8:	4605      	mov	r5, r0
 80875ea:	b1d0      	cbz	r0, 8087622 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80875ec:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80875ee:	2014      	movs	r0, #20
 80875f0:	f7f8 fd55 	bl	808009e <_Znwj>
 80875f4:	4604      	mov	r4, r0
 80875f6:	b178      	cbz	r0, 8087618 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80875f8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80875fa:	4601      	mov	r1, r0
 80875fc:	a801      	add	r0, sp, #4
 80875fe:	f7ff fb77 	bl	8086cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087602:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8087604:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8087606:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087608:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808760a:	9203      	str	r2, [sp, #12]
 808760c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808760e:	60e3      	str	r3, [r4, #12]
 8087610:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8087614:	9204      	str	r2, [sp, #16]
 8087616:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087618:	4b0a      	ldr	r3, [pc, #40]	; (8087644 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808761a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808761c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808761e:	4b0a      	ldr	r3, [pc, #40]	; (8087648 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8087620:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087622:	a801      	add	r0, sp, #4
 8087624:	f7f8 fdcb 	bl	80801be <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087628:	2200      	movs	r2, #0
 808762a:	4629      	mov	r1, r5
 808762c:	4807      	ldr	r0, [pc, #28]	; (808764c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808762e:	f7fe f8b7 	bl	80857a0 <application_thread_invoke>
 8087632:	4630      	mov	r0, r6
 8087634:	f7f8 fdc3 	bl	80801be <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8087638:	2110      	movs	r1, #16
 808763a:	4630      	mov	r0, r6
 808763c:	f000 ff16 	bl	808846c <_ZdlPvj>
        }
    }
 8087640:	b007      	add	sp, #28
 8087642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087644:	0808728b 	.word	0x0808728b
 8087648:	08087559 	.word	0x08087559
 808764c:	08087c8d 	.word	0x08087c8d

08087650 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8087650:	b530      	push	{r4, r5, lr}
 8087652:	4604      	mov	r4, r0
 8087654:	b085      	sub	sp, #20
 8087656:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8087658:	4668      	mov	r0, sp
 808765a:	4611      	mov	r1, r2
 808765c:	f7ff fdca 	bl	80871f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8087660:	b17c      	cbz	r4, 8087682 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8087662:	b224      	sxth	r4, r4
 8087664:	4628      	mov	r0, r5
 8087666:	b10d      	cbz	r5, 808766c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8087668:	f002 fc8e 	bl	8089f88 <strdup>
 808766c:	9002      	str	r0, [sp, #8]
 808766e:	a902      	add	r1, sp, #8
 8087670:	4668      	mov	r0, sp
 8087672:	f8ad 400c 	strh.w	r4, [sp, #12]
 8087676:	f7ff fe1f 	bl	80872b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808767a:	a802      	add	r0, sp, #8
 808767c:	f7ff fd52 	bl	8087124 <_ZN8particle5ErrorD1Ev>
 8087680:	e01d      	b.n	80876be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8087682:	f04f 0201 	mov.w	r2, #1
 8087686:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8087688:	f88d 4008 	strb.w	r4, [sp, #8]
 808768c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8087690:	42a3      	cmp	r3, r4
 8087692:	d103      	bne.n	808769c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8087694:	e8c0 2f41 	strexb	r1, r2, [r0]
 8087698:	2900      	cmp	r1, #0
 808769a:	d1f7      	bne.n	808768c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808769c:	d002      	beq.n	80876a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808769e:	f88d 3008 	strb.w	r3, [sp, #8]
 80876a2:	e00c      	b.n	80876be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80876a4:	f110 010c 	adds.w	r1, r0, #12
 80876a8:	f04f 0301 	mov.w	r3, #1
 80876ac:	bf18      	it	ne
 80876ae:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80876b0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80876b4:	3004      	adds	r0, #4
 80876b6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80876ba:	f7ff ff71 	bl	80875a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80876be:	a801      	add	r0, sp, #4
 80876c0:	f7f9 f924 	bl	808090c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80876c4:	b005      	add	sp, #20
 80876c6:	bd30      	pop	{r4, r5, pc}

080876c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80876c8:	4770      	bx	lr

080876ca <_ZN9IPAddressD0Ev>:
 80876ca:	b510      	push	{r4, lr}
 80876cc:	4604      	mov	r4, r0
 80876ce:	2108      	movs	r1, #8
 80876d0:	f000 fecc 	bl	808846c <_ZdlPvj>
 80876d4:	4620      	mov	r0, r4
 80876d6:	bd10      	pop	{r4, pc}

080876d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80876d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80876da:	460f      	mov	r7, r1
 80876dc:	f100 0608 	add.w	r6, r0, #8
 80876e0:	1d05      	adds	r5, r0, #4
 80876e2:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80876e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80876e8:	220a      	movs	r2, #10
 80876ea:	4638      	mov	r0, r7
 80876ec:	f7fe ff99 	bl	8086622 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80876f0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80876f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80876f4:	d007      	beq.n	8087706 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80876f6:	2c00      	cmp	r4, #0
 80876f8:	d0f4      	beq.n	80876e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80876fa:	212e      	movs	r1, #46	; 0x2e
 80876fc:	4638      	mov	r0, r7
 80876fe:	f7fe ff73 	bl	80865e8 <_ZN5Print5printEc>
 8087702:	4404      	add	r4, r0
 8087704:	e7ee      	b.n	80876e4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8087706:	4620      	mov	r0, r4
 8087708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808770c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808770c:	4a02      	ldr	r2, [pc, #8]	; (8087718 <_ZN9IPAddressC1Ev+0xc>)
 808770e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8087710:	2200      	movs	r2, #0
 8087712:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8087714:	4770      	bx	lr
 8087716:	bf00      	nop
 8087718:	0808dba0 	.word	0x0808dba0

0808771c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808771c:	4a02      	ldr	r2, [pc, #8]	; (8087728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808771e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8087720:	680a      	ldr	r2, [r1, #0]
 8087722:	6042      	str	r2, [r0, #4]
}
 8087724:	4770      	bx	lr
 8087726:	bf00      	nop
 8087728:	0808dba0 	.word	0x0808dba0

0808772c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808772c:	4a01      	ldr	r2, [pc, #4]	; (8087734 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808772e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8087730:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8087732:	4770      	bx	lr
 8087734:	0808dba0 	.word	0x0808dba0

08087738 <_ZNK9IPAddresscvbEv>:
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
    } else {
        return false;
    }
#else
    return address.ipv4!=0;
 8087738:	6840      	ldr	r0, [r0, #4]
#endif
}
 808773a:	3000      	adds	r0, #0
 808773c:	bf18      	it	ne
 808773e:	2001      	movne	r0, #1
 8087740:	4770      	bx	lr

08087742 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8087742:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8087744:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8087748:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808774c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8087750:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8087754:	6041      	str	r1, [r0, #4]
 8087756:	bd10      	pop	{r4, pc}

08087758 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8087758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808775a:	4d04      	ldr	r5, [pc, #16]	; (808776c <_ZN9IPAddressC1Ehhhh+0x14>)
 808775c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808775e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8087762:	9500      	str	r5, [sp, #0]
 8087764:	f7ff ffed 	bl	8087742 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8087768:	b003      	add	sp, #12
 808776a:	bd30      	pop	{r4, r5, pc}
 808776c:	0808dba0 	.word	0x0808dba0

08087770 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 8087770:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 8087772:	780d      	ldrb	r5, [r1, #0]
 8087774:	788b      	ldrb	r3, [r1, #2]
 8087776:	784a      	ldrb	r2, [r1, #1]
 8087778:	78c9      	ldrb	r1, [r1, #3]
 808777a:	9100      	str	r1, [sp, #0]
 808777c:	4629      	mov	r1, r5
 808777e:	f7ff ffe0 	bl	8087742 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 8087782:	b003      	add	sp, #12
 8087784:	bd30      	pop	{r4, r5, pc}

08087786 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087786:	7441      	strb	r1, [r0, #17]
 8087788:	4770      	bx	lr

0808778a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808778a:	4770      	bx	lr

0808778c <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808778c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808778e:	2100      	movs	r1, #0
 8087790:	7c00      	ldrb	r0, [r0, #16]
 8087792:	f7fd ffad 	bl	80856f0 <HAL_USB_USART_Receive_Data>
}
 8087796:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808779a:	bf28      	it	cs
 808779c:	f04f 30ff 	movcs.w	r0, #4294967295
 80877a0:	bd08      	pop	{r3, pc}

080877a2 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80877a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80877a4:	2101      	movs	r1, #1
 80877a6:	7c00      	ldrb	r0, [r0, #16]
 80877a8:	f7fd ffa2 	bl	80856f0 <HAL_USB_USART_Receive_Data>
}
 80877ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80877b0:	bf28      	it	cs
 80877b2:	f04f 30ff 	movcs.w	r0, #4294967295
 80877b6:	bd08      	pop	{r3, pc}

080877b8 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80877b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80877ba:	7c00      	ldrb	r0, [r0, #16]
 80877bc:	f7fd ff90 	bl	80856e0 <HAL_USB_USART_Available_Data_For_Write>
}
 80877c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80877c4:	bd08      	pop	{r3, pc}

080877c6 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80877c6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80877c8:	7c00      	ldrb	r0, [r0, #16]
 80877ca:	f7fd ff81 	bl	80856d0 <HAL_USB_USART_Available_Data>
}
 80877ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80877d2:	bd08      	pop	{r3, pc}

080877d4 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80877d4:	7c00      	ldrb	r0, [r0, #16]
 80877d6:	f7fd bf9b 	b.w	8085710 <HAL_USB_USART_Flush_Data>

080877da <_ZN9USBSerialD0Ev>:
 80877da:	b510      	push	{r4, lr}
 80877dc:	4604      	mov	r4, r0
 80877de:	2114      	movs	r1, #20
 80877e0:	f000 fe44 	bl	808846c <_ZdlPvj>
 80877e4:	4620      	mov	r0, r4
 80877e6:	bd10      	pop	{r4, pc}

080877e8 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80877e8:	b538      	push	{r3, r4, r5, lr}
 80877ea:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80877ec:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80877ee:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80877f0:	f7fd ff76 	bl	80856e0 <HAL_USB_USART_Available_Data_For_Write>
 80877f4:	2800      	cmp	r0, #0
 80877f6:	dc01      	bgt.n	80877fc <_ZN9USBSerial5writeEh+0x14>
 80877f8:	7c60      	ldrb	r0, [r4, #17]
 80877fa:	b128      	cbz	r0, 8087808 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80877fc:	4629      	mov	r1, r5
 80877fe:	7c20      	ldrb	r0, [r4, #16]
 8087800:	f7fd ff7e 	bl	8085700 <HAL_USB_USART_Send_Data>
 8087804:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8087808:	bd38      	pop	{r3, r4, r5, pc}
	...

0808780c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808780c:	b510      	push	{r4, lr}
 808780e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8087810:	2300      	movs	r3, #0
 8087812:	6063      	str	r3, [r4, #4]
 8087814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087818:	60a3      	str	r3, [r4, #8]
 808781a:	4b05      	ldr	r3, [pc, #20]	; (8087830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808781c:	4608      	mov	r0, r1
 808781e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8087820:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8087822:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8087824:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8087826:	4611      	mov	r1, r2
 8087828:	f7fd ff42 	bl	80856b0 <HAL_USB_USART_Init>
}
 808782c:	4620      	mov	r0, r4
 808782e:	bd10      	pop	{r4, pc}
 8087830:	0808dbb4 	.word	0x0808dbb4

08087834 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8087834:	2200      	movs	r2, #0
 8087836:	7c00      	ldrb	r0, [r0, #16]
 8087838:	f7fd bf42 	b.w	80856c0 <HAL_USB_USART_Begin>

0808783c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808783c:	b510      	push	{r4, lr}
 808783e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087840:	2214      	movs	r2, #20
 8087842:	2100      	movs	r1, #0
 8087844:	f002 fb50 	bl	8089ee8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8087848:	4b05      	ldr	r3, [pc, #20]	; (8087860 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808784a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808784c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808784e:	4b05      	ldr	r3, [pc, #20]	; (8087864 <_Z19acquireSerialBufferv+0x28>)
 8087850:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8087852:	f240 1301 	movw	r3, #257	; 0x101
 8087856:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8087858:	2381      	movs	r3, #129	; 0x81
 808785a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808785c:	bd10      	pop	{r4, pc}
 808785e:	bf00      	nop
 8087860:	200009e5 	.word	0x200009e5
 8087864:	20000964 	.word	0x20000964

08087868 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8087868:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808786a:	4d0e      	ldr	r5, [pc, #56]	; (80878a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808786c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808786e:	a801      	add	r0, sp, #4
 8087870:	f7ff ffe4 	bl	808783c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8087874:	6829      	ldr	r1, [r5, #0]
 8087876:	f011 0401 	ands.w	r4, r1, #1
 808787a:	d110      	bne.n	808789e <_Z16_fetch_usbserialv+0x36>
 808787c:	4628      	mov	r0, r5
 808787e:	f7f8 fc16 	bl	80800ae <__cxa_guard_acquire>
 8087882:	b160      	cbz	r0, 808789e <_Z16_fetch_usbserialv+0x36>
 8087884:	aa01      	add	r2, sp, #4
 8087886:	4621      	mov	r1, r4
 8087888:	4807      	ldr	r0, [pc, #28]	; (80878a8 <_Z16_fetch_usbserialv+0x40>)
 808788a:	f7ff ffbf 	bl	808780c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808788e:	4628      	mov	r0, r5
 8087890:	f7f8 fc12 	bl	80800b8 <__cxa_guard_release>
 8087894:	4a05      	ldr	r2, [pc, #20]	; (80878ac <_Z16_fetch_usbserialv+0x44>)
 8087896:	4906      	ldr	r1, [pc, #24]	; (80878b0 <_Z16_fetch_usbserialv+0x48>)
 8087898:	4803      	ldr	r0, [pc, #12]	; (80878a8 <_Z16_fetch_usbserialv+0x40>)
 808789a:	f000 fdd9 	bl	8088450 <__aeabi_atexit>
	return _usbserial;
}
 808789e:	4802      	ldr	r0, [pc, #8]	; (80878a8 <_Z16_fetch_usbserialv+0x40>)
 80878a0:	b007      	add	sp, #28
 80878a2:	bd30      	pop	{r4, r5, pc}
 80878a4:	20000960 	.word	0x20000960
 80878a8:	20000ae8 	.word	0x20000ae8
 80878ac:	20000140 	.word	0x20000140
 80878b0:	0808778b 	.word	0x0808778b

080878b4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80878b4:	b510      	push	{r4, lr}
 80878b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80878b8:	2214      	movs	r2, #20
 80878ba:	2100      	movs	r1, #0
 80878bc:	f002 fb14 	bl	8089ee8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80878c0:	4b05      	ldr	r3, [pc, #20]	; (80878d8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80878c2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80878c4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80878c6:	4b05      	ldr	r3, [pc, #20]	; (80878dc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80878c8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80878ca:	f240 1301 	movw	r3, #257	; 0x101
 80878ce:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80878d0:	2381      	movs	r3, #129	; 0x81
 80878d2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80878d4:	bd10      	pop	{r4, pc}
 80878d6:	bf00      	nop
 80878d8:	20000b98 	.word	0x20000b98
 80878dc:	20000b00 	.word	0x20000b00

080878e0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80878e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80878e2:	4c0e      	ldr	r4, [pc, #56]	; (808791c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80878e4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80878e6:	a801      	add	r0, sp, #4
 80878e8:	f7ff ffe4 	bl	80878b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80878ec:	6823      	ldr	r3, [r4, #0]
 80878ee:	07db      	lsls	r3, r3, #31
 80878f0:	d410      	bmi.n	8087914 <_Z17_fetch_usbserial1v+0x34>
 80878f2:	4620      	mov	r0, r4
 80878f4:	f7f8 fbdb 	bl	80800ae <__cxa_guard_acquire>
 80878f8:	b160      	cbz	r0, 8087914 <_Z17_fetch_usbserial1v+0x34>
 80878fa:	aa01      	add	r2, sp, #4
 80878fc:	2101      	movs	r1, #1
 80878fe:	4808      	ldr	r0, [pc, #32]	; (8087920 <_Z17_fetch_usbserial1v+0x40>)
 8087900:	f7ff ff84 	bl	808780c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8087904:	4620      	mov	r0, r4
 8087906:	f7f8 fbd7 	bl	80800b8 <__cxa_guard_release>
 808790a:	4a06      	ldr	r2, [pc, #24]	; (8087924 <_Z17_fetch_usbserial1v+0x44>)
 808790c:	4906      	ldr	r1, [pc, #24]	; (8087928 <_Z17_fetch_usbserial1v+0x48>)
 808790e:	4804      	ldr	r0, [pc, #16]	; (8087920 <_Z17_fetch_usbserial1v+0x40>)
 8087910:	f000 fd9e 	bl	8088450 <__aeabi_atexit>
  return _usbserial1;
}
 8087914:	4802      	ldr	r0, [pc, #8]	; (8087920 <_Z17_fetch_usbserial1v+0x40>)
 8087916:	b006      	add	sp, #24
 8087918:	bd10      	pop	{r4, pc}
 808791a:	bf00      	nop
 808791c:	20000afc 	.word	0x20000afc
 8087920:	20000b84 	.word	0x20000b84
 8087924:	20000140 	.word	0x20000140
 8087928:	0808778b 	.word	0x0808778b

0808792c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808792c:	4700      	bx	r0

0808792e <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808792e:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 8087930:	b510      	push	{r4, lr}
 8087932:	b90a      	cbnz	r2, 8087938 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 8087934:	f000 fe66 	bl	8088604 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087938:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 808793a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808793e:	4718      	bx	r3

08087940 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8087940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087942:	461c      	mov	r4, r3
 8087944:	b085      	sub	sp, #20
 8087946:	460e      	mov	r6, r1
 8087948:	4617      	mov	r7, r2
 808794a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 808794c:	f7fd fcc8 	bl	80852e0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 8087950:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8087952:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8087954:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8087958:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808795a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 808795e:	bfb4      	ite	lt
 8087960:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8087962:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087966:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8087968:	bfa4      	itt	ge
 808796a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 808796e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087970:	9300      	str	r3, [sp, #0]
 8087972:	4906      	ldr	r1, [pc, #24]	; (808798c <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8087974:	463b      	mov	r3, r7
 8087976:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8087978:	bfa8      	it	ge
 808797a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808797e:	f7fd fca7 	bl	80852d0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8087982:	fab0 f080 	clz	r0, r0
 8087986:	0940      	lsrs	r0, r0, #5
 8087988:	b005      	add	sp, #20
 808798a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808798c:	0808792d 	.word	0x0808792d

08087990 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8087990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087992:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8087994:	f7fd fca4 	bl	80852e0 <HAL_Interrupts_Detach>
 8087998:	4607      	mov	r7, r0
 808799a:	b968      	cbnz	r0, 80879b8 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 808799c:	4d08      	ldr	r5, [pc, #32]	; (80879c0 <_Z15detachInterruptt+0x30>)
 808799e:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80879a2:	b15c      	cbz	r4, 80879bc <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80879a4:	4620      	mov	r0, r4
 80879a6:	f7f8 fc0a 	bl	80801be <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80879aa:	2110      	movs	r1, #16
 80879ac:	4620      	mov	r0, r4
 80879ae:	f000 fd5d 	bl	808846c <_ZdlPvj>
        handlers[pin] = nullptr;
 80879b2:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 80879b6:	e001      	b.n	80879bc <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 80879b8:	2000      	movs	r0, #0
 80879ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 80879bc:	2001      	movs	r0, #1
}
 80879be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80879c0:	20000c9c 	.word	0x20000c9c

080879c4 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80879c4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80879c6:	2300      	movs	r3, #0
 80879c8:	6083      	str	r3, [r0, #8]
 80879ca:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80879cc:	4604      	mov	r4, r0
 80879ce:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80879d0:	b12b      	cbz	r3, 80879de <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80879d2:	2202      	movs	r2, #2
 80879d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80879d6:	68eb      	ldr	r3, [r5, #12]
 80879d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80879da:	68ab      	ldr	r3, [r5, #8]
 80879dc:	60a3      	str	r3, [r4, #8]
	}
    }
 80879de:	4620      	mov	r0, r4
 80879e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080879e4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80879e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80879e6:	4b12      	ldr	r3, [pc, #72]	; (8087a30 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80879e8:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80879ea:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80879ec:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80879ee:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80879f0:	f7f8 fb55 	bl	808009e <_Znwj>
 80879f4:	4605      	mov	r5, r0
 80879f6:	b110      	cbz	r0, 80879fe <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 80879f8:	4631      	mov	r1, r6
 80879fa:	f7ff ffe3 	bl	80879c4 <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 80879fe:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8087a00:	4620      	mov	r0, r4
 8087a02:	aa02      	add	r2, sp, #8
 8087a04:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8087a06:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 8087a08:	9302      	str	r3, [sp, #8]
 8087a0a:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8087a0c:	f7fd fc78 	bl	8085300 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 8087a10:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8087a12:	1c05      	adds	r5, r0, #0
 8087a14:	bf18      	it	ne
 8087a16:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 8087a18:	b134      	cbz	r4, 8087a28 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087a1a:	4620      	mov	r0, r4
 8087a1c:	f7f8 fbcf 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 8087a20:	2110      	movs	r1, #16
 8087a22:	4620      	mov	r0, r4
 8087a24:	f000 fd22 	bl	808846c <_ZdlPvj>
    return ok;
}
 8087a28:	4628      	mov	r0, r5
 8087a2a:	b004      	add	sp, #16
 8087a2c:	bd70      	pop	{r4, r5, r6, pc}
 8087a2e:	bf00      	nop
 8087a30:	0808792f 	.word	0x0808792f

08087a34 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8087a34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8087a38:	2600      	movs	r6, #0
 8087a3a:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8087a3c:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087a3e:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8087a40:	4688      	mov	r8, r1
 8087a42:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8087a44:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087a48:	f002 ffce 	bl	808a9e8 <strlen>
 8087a4c:	9600      	str	r6, [sp, #0]
 8087a4e:	b281      	uxth	r1, r0
 8087a50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8087a54:	4622      	mov	r2, r4
 8087a56:	4638      	mov	r0, r7
 8087a58:	f7fd fe1a 	bl	8085690 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087a5c:	b120      	cbz	r0, 8087a68 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8087a5e:	4631      	mov	r1, r6
 8087a60:	4628      	mov	r0, r5
 8087a62:	f7ff fe63 	bl	808772c <_ZN9IPAddressC1Em>
 8087a66:	e003      	b.n	8087a70 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8087a68:	4621      	mov	r1, r4
 8087a6a:	4628      	mov	r0, r5
 8087a6c:	f7ff fe56 	bl	808771c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8087a70:	4628      	mov	r0, r5
 8087a72:	b004      	add	sp, #16
 8087a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087a78 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8087a78:	2200      	movs	r2, #0
 8087a7a:	4611      	mov	r1, r2
 8087a7c:	6840      	ldr	r0, [r0, #4]
 8087a7e:	f7fd beeb 	b.w	8085858 <network_listening>

08087a82 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8087a82:	2200      	movs	r2, #0
 8087a84:	4611      	mov	r1, r2
 8087a86:	6840      	ldr	r0, [r0, #4]
 8087a88:	f7fd bef6 	b.w	8085878 <network_get_listen_timeout>

08087a8c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8087a8c:	2200      	movs	r2, #0
 8087a8e:	6840      	ldr	r0, [r0, #4]
 8087a90:	f7fd beea 	b.w	8085868 <network_set_listen_timeout>

08087a94 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8087a94:	2200      	movs	r2, #0
 8087a96:	f081 0101 	eor.w	r1, r1, #1
 8087a9a:	6840      	ldr	r0, [r0, #4]
 8087a9c:	f7fd bed4 	b.w	8085848 <network_listen>

08087aa0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8087aa0:	2300      	movs	r3, #0
 8087aa2:	461a      	mov	r2, r3
 8087aa4:	4619      	mov	r1, r3
 8087aa6:	6840      	ldr	r0, [r0, #4]
 8087aa8:	f7fd bec6 	b.w	8085838 <network_off>

08087aac <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8087aac:	2300      	movs	r3, #0
 8087aae:	461a      	mov	r2, r3
 8087ab0:	4619      	mov	r1, r3
 8087ab2:	6840      	ldr	r0, [r0, #4]
 8087ab4:	f7fd beb8 	b.w	8085828 <network_on>

08087ab8 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8087ab8:	2200      	movs	r2, #0
 8087aba:	4611      	mov	r1, r2
 8087abc:	6840      	ldr	r0, [r0, #4]
 8087abe:	f7fd be9b 	b.w	80857f8 <network_connecting>

08087ac2 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8087ac2:	2200      	movs	r2, #0
 8087ac4:	2102      	movs	r1, #2
 8087ac6:	6840      	ldr	r0, [r0, #4]
 8087ac8:	f7fd be9e 	b.w	8085808 <network_disconnect>

08087acc <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8087acc:	2300      	movs	r3, #0
 8087ace:	461a      	mov	r2, r3
 8087ad0:	6840      	ldr	r0, [r0, #4]
 8087ad2:	f7fd be89 	b.w	80857e8 <network_connect>
	...

08087ad8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8087ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087ada:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8087adc:	4b1a      	ldr	r3, [pc, #104]	; (8087b48 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8087ade:	2500      	movs	r5, #0
 8087ae0:	6003      	str	r3, [r0, #0]
 8087ae2:	2618      	movs	r6, #24
 8087ae4:	3328      	adds	r3, #40	; 0x28
 8087ae6:	b089      	sub	sp, #36	; 0x24
 8087ae8:	6043      	str	r3, [r0, #4]
 8087aea:	6085      	str	r5, [r0, #8]
 8087aec:	60c5      	str	r5, [r0, #12]
 8087aee:	4632      	mov	r2, r6
 8087af0:	4629      	mov	r1, r5
 8087af2:	4604      	mov	r4, r0
 8087af4:	3010      	adds	r0, #16
 8087af6:	f002 f9f7 	bl	8089ee8 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8087afa:	462a      	mov	r2, r5
 8087afc:	4629      	mov	r1, r5
 8087afe:	6878      	ldr	r0, [r7, #4]
 8087b00:	f7fd fe8a 	bl	8085818 <network_ready>
 8087b04:	b908      	cbnz	r0, 8087b0a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8087b06:	60a0      	str	r0, [r4, #8]
            return sig;
 8087b08:	e01b      	b.n	8087b42 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8087b0a:	4629      	mov	r1, r5
 8087b0c:	4632      	mov	r2, r6
 8087b0e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8087b10:	9500      	str	r5, [sp, #0]
 8087b12:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8087b14:	f002 f9e8 	bl	8089ee8 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8087b18:	a902      	add	r1, sp, #8
 8087b1a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8087b1c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8087b20:	f7fd fdbe 	bl	80856a0 <cellular_signal>
 8087b24:	b110      	cbz	r0, 8087b2c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8087b26:	2301      	movs	r3, #1
 8087b28:	60a3      	str	r3, [r4, #8]
            return sig;
 8087b2a:	e00a      	b.n	8087b42 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8087b2c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8087b2e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8087b30:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8087b32:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8087b34:	b90b      	cbnz	r3, 8087b3a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8087b36:	2302      	movs	r3, #2
 8087b38:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8087b3a:	a902      	add	r1, sp, #8
 8087b3c:	4620      	mov	r0, r4
 8087b3e:	f7ff f955 	bl	8086dec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8087b42:	4620      	mov	r0, r4
 8087b44:	b009      	add	sp, #36	; 0x24
 8087b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087b48:	0808db50 	.word	0x0808db50

08087b4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8087b4c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8087b4e:	4c08      	ldr	r4, [pc, #32]	; (8087b70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8087b50:	2528      	movs	r5, #40	; 0x28
 8087b52:	462a      	mov	r2, r5
 8087b54:	2100      	movs	r1, #0
 8087b56:	4620      	mov	r0, r4
 8087b58:	f002 f9c6 	bl	8089ee8 <memset>
        cid = -1;
 8087b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8087b60:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8087b62:	4b04      	ldr	r3, [pc, #16]	; (8087b74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8087b64:	2204      	movs	r2, #4
 8087b66:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8087b68:	4a03      	ldr	r2, [pc, #12]	; (8087b78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8087b6a:	8025      	strh	r5, [r4, #0]
 8087b6c:	601a      	str	r2, [r3, #0]
 8087b6e:	bd38      	pop	{r3, r4, r5, pc}
 8087b70:	20000d60 	.word	0x20000d60
 8087b74:	20000d58 	.word	0x20000d58
 8087b78:	0808dbe4 	.word	0x0808dbe4

08087b7c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8087b7c:	4770      	bx	lr

08087b7e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087b7e:	7441      	strb	r1, [r0, #17]
 8087b80:	4770      	bx	lr

08087b82 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8087b82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8087b84:	7c00      	ldrb	r0, [r0, #16]
 8087b86:	f7fd fcb3 	bl	80854f0 <HAL_USART_Available_Data_For_Write>
}
 8087b8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087b8e:	bd08      	pop	{r3, pc}

08087b90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8087b90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8087b92:	7c00      	ldrb	r0, [r0, #16]
 8087b94:	f7fd fc84 	bl	80854a0 <HAL_USART_Available_Data>
}
 8087b98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087b9c:	bd08      	pop	{r3, pc}

08087b9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8087b9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8087ba0:	7c00      	ldrb	r0, [r0, #16]
 8087ba2:	f7fd fc8d 	bl	80854c0 <HAL_USART_Peek_Data>
}
 8087ba6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087baa:	bf28      	it	cs
 8087bac:	f04f 30ff 	movcs.w	r0, #4294967295
 8087bb0:	bd08      	pop	{r3, pc}

08087bb2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8087bb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8087bb4:	7c00      	ldrb	r0, [r0, #16]
 8087bb6:	f7fd fc7b 	bl	80854b0 <HAL_USART_Read_Data>
}
 8087bba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087bbe:	bf28      	it	cs
 8087bc0:	f04f 30ff 	movcs.w	r0, #4294967295
 8087bc4:	bd08      	pop	{r3, pc}

08087bc6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8087bc6:	7c00      	ldrb	r0, [r0, #16]
 8087bc8:	f7fd bc82 	b.w	80854d0 <HAL_USART_Flush_Data>

08087bcc <_ZN11USARTSerialD0Ev>:
 8087bcc:	b510      	push	{r4, lr}
 8087bce:	4604      	mov	r4, r0
 8087bd0:	2114      	movs	r1, #20
 8087bd2:	f000 fc4b 	bl	808846c <_ZdlPvj>
 8087bd6:	4620      	mov	r0, r4
 8087bd8:	bd10      	pop	{r4, pc}

08087bda <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087bda:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8087bdc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8087bde:	4604      	mov	r4, r0
 8087be0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8087be2:	b925      	cbnz	r5, 8087bee <_ZN11USARTSerial5writeEh+0x14>
 8087be4:	7c00      	ldrb	r0, [r0, #16]
 8087be6:	f7fd fc83 	bl	80854f0 <HAL_USART_Available_Data_For_Write>
 8087bea:	2800      	cmp	r0, #0
 8087bec:	dd05      	ble.n	8087bfa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8087bee:	4631      	mov	r1, r6
 8087bf0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8087bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8087bf6:	f7fd bc4b 	b.w	8085490 <HAL_USART_Write_Data>
  }
  return 0;
}
 8087bfa:	4628      	mov	r0, r5
 8087bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08087c00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8087c00:	b510      	push	{r4, lr}
 8087c02:	4604      	mov	r4, r0
 8087c04:	4608      	mov	r0, r1
 8087c06:	4611      	mov	r1, r2
 8087c08:	2200      	movs	r2, #0
 8087c0a:	6062      	str	r2, [r4, #4]
 8087c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087c10:	60a2      	str	r2, [r4, #8]
 8087c12:	4a05      	ldr	r2, [pc, #20]	; (8087c28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8087c14:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8087c16:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8087c18:	2201      	movs	r2, #1
 8087c1a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8087c1c:	461a      	mov	r2, r3
 8087c1e:	f7fd fc2f 	bl	8085480 <HAL_USART_Init>
}
 8087c22:	4620      	mov	r0, r4
 8087c24:	bd10      	pop	{r4, pc}
 8087c26:	bf00      	nop
 8087c28:	0808dc18 	.word	0x0808dc18

08087c2c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8087c2c:	2300      	movs	r3, #0
 8087c2e:	7c00      	ldrb	r0, [r0, #16]
 8087c30:	f7fd bc66 	b.w	8085500 <HAL_USART_BeginConfig>

08087c34 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8087c34:	2200      	movs	r2, #0
 8087c36:	f7ff bff9 	b.w	8087c2c <_ZN11USARTSerial5beginEmm>

08087c3a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8087c3a:	7c00      	ldrb	r0, [r0, #16]
 8087c3c:	f7fd bc50 	b.w	80854e0 <HAL_USART_Is_Enabled>

08087c40 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8087c40:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8087c42:	4d0c      	ldr	r5, [pc, #48]	; (8087c74 <_Z22__fetch_global_Serial1v+0x34>)
 8087c44:	6829      	ldr	r1, [r5, #0]
 8087c46:	f011 0401 	ands.w	r4, r1, #1
 8087c4a:	d111      	bne.n	8087c70 <_Z22__fetch_global_Serial1v+0x30>
 8087c4c:	4628      	mov	r0, r5
 8087c4e:	f7f8 fa2e 	bl	80800ae <__cxa_guard_acquire>
 8087c52:	b168      	cbz	r0, 8087c70 <_Z22__fetch_global_Serial1v+0x30>
 8087c54:	4a08      	ldr	r2, [pc, #32]	; (8087c78 <_Z22__fetch_global_Serial1v+0x38>)
 8087c56:	4621      	mov	r1, r4
 8087c58:	4b08      	ldr	r3, [pc, #32]	; (8087c7c <_Z22__fetch_global_Serial1v+0x3c>)
 8087c5a:	4809      	ldr	r0, [pc, #36]	; (8087c80 <_Z22__fetch_global_Serial1v+0x40>)
 8087c5c:	f7ff ffd0 	bl	8087c00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8087c60:	4628      	mov	r0, r5
 8087c62:	f7f8 fa29 	bl	80800b8 <__cxa_guard_release>
 8087c66:	4a07      	ldr	r2, [pc, #28]	; (8087c84 <_Z22__fetch_global_Serial1v+0x44>)
 8087c68:	4907      	ldr	r1, [pc, #28]	; (8087c88 <_Z22__fetch_global_Serial1v+0x48>)
 8087c6a:	4805      	ldr	r0, [pc, #20]	; (8087c80 <_Z22__fetch_global_Serial1v+0x40>)
 8087c6c:	f000 fbf0 	bl	8088450 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8087c70:	4803      	ldr	r0, [pc, #12]	; (8087c80 <_Z22__fetch_global_Serial1v+0x40>)
 8087c72:	bd38      	pop	{r3, r4, r5, pc}
 8087c74:	20000e20 	.word	0x20000e20
 8087c78:	20000e24 	.word	0x20000e24
 8087c7c:	20000d9c 	.word	0x20000d9c
 8087c80:	20000d88 	.word	0x20000d88
 8087c84:	20000140 	.word	0x20000140
 8087c88:	08087b7d 	.word	0x08087b7d

08087c8c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8087c8c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087c8e:	6883      	ldr	r3, [r0, #8]
 8087c90:	4604      	mov	r4, r0
 8087c92:	b90b      	cbnz	r3, 8087c98 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087c94:	f000 fcb6 	bl	8088604 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087c98:	68c3      	ldr	r3, [r0, #12]
 8087c9a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8087c9c:	68a3      	ldr	r3, [r4, #8]
 8087c9e:	b11b      	cbz	r3, 8087ca8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087ca0:	2203      	movs	r2, #3
 8087ca2:	4621      	mov	r1, r4
 8087ca4:	4620      	mov	r0, r4
 8087ca6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087ca8:	4620      	mov	r0, r4
}
 8087caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087cae:	2110      	movs	r1, #16
 8087cb0:	f000 bbdc 	b.w	808846c <_ZdlPvj>

08087cb4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8087cb4:	4770      	bx	lr

08087cb6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8087cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087cb8:	4606      	mov	r6, r0
 8087cba:	4615      	mov	r5, r2
 8087cbc:	460c      	mov	r4, r1
 8087cbe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087cc0:	42bc      	cmp	r4, r7
 8087cc2:	d006      	beq.n	8087cd2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087cc4:	6833      	ldr	r3, [r6, #0]
 8087cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8087cca:	689b      	ldr	r3, [r3, #8]
 8087ccc:	4630      	mov	r0, r6
 8087cce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087cd0:	e7f6      	b.n	8087cc0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8087cd2:	4628      	mov	r0, r5
 8087cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087cd6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8087cd6:	2200      	movs	r2, #0
 8087cd8:	7c00      	ldrb	r0, [r0, #16]
 8087cda:	f7fd bc31 	b.w	8085540 <HAL_I2C_Write_Data>

08087cde <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8087cde:	2100      	movs	r1, #0
 8087ce0:	7c00      	ldrb	r0, [r0, #16]
 8087ce2:	f7fd bc35 	b.w	8085550 <HAL_I2C_Available_Data>

08087ce6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8087ce6:	2100      	movs	r1, #0
 8087ce8:	7c00      	ldrb	r0, [r0, #16]
 8087cea:	f7fd bc39 	b.w	8085560 <HAL_I2C_Read_Data>

08087cee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8087cee:	2100      	movs	r1, #0
 8087cf0:	7c00      	ldrb	r0, [r0, #16]
 8087cf2:	f7fd bc3d 	b.w	8085570 <HAL_I2C_Peek_Data>

08087cf6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8087cf6:	2100      	movs	r1, #0
 8087cf8:	7c00      	ldrb	r0, [r0, #16]
 8087cfa:	f7fd bc41 	b.w	8085580 <HAL_I2C_Flush_Data>

08087cfe <_ZN7TwoWireD0Ev>:
 8087cfe:	b510      	push	{r4, lr}
 8087d00:	4604      	mov	r4, r0
 8087d02:	2114      	movs	r1, #20
 8087d04:	f000 fbb2 	bl	808846c <_ZdlPvj>
 8087d08:	4620      	mov	r0, r4
 8087d0a:	bd10      	pop	{r4, pc}

08087d0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8087d0c:	b510      	push	{r4, lr}
 8087d0e:	4604      	mov	r4, r0
 8087d10:	2300      	movs	r3, #0
 8087d12:	6063      	str	r3, [r4, #4]
 8087d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087d18:	60a3      	str	r3, [r4, #8]
 8087d1a:	4b04      	ldr	r3, [pc, #16]	; (8087d2c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8087d1c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8087d1e:	4608      	mov	r0, r1
 8087d20:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8087d22:	4611      	mov	r1, r2
 8087d24:	f7fd fc3c 	bl	80855a0 <HAL_I2C_Init>
}
 8087d28:	4620      	mov	r0, r4
 8087d2a:	bd10      	pop	{r4, pc}
 8087d2c:	0808dc48 	.word	0x0808dc48

08087d30 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8087d30:	2300      	movs	r3, #0
 8087d32:	461a      	mov	r2, r3
 8087d34:	4619      	mov	r1, r3
 8087d36:	7c00      	ldrb	r0, [r0, #16]
 8087d38:	f7fd bbea 	b.w	8085510 <HAL_I2C_Begin>

08087d3c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8087d3c:	b570      	push	{r4, r5, r6, lr}
 8087d3e:	460c      	mov	r4, r1
 8087d40:	4606      	mov	r6, r0
 8087d42:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 8087d44:	2514      	movs	r5, #20
 8087d46:	462a      	mov	r2, r5
 8087d48:	2100      	movs	r1, #0
 8087d4a:	a801      	add	r0, sp, #4
 8087d4c:	f002 f8cc 	bl	8089ee8 <memset>
 8087d50:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 8087d52:	2200      	movs	r2, #0
 8087d54:	f88d 3008 	strb.w	r3, [sp, #8]
 8087d58:	6863      	ldr	r3, [r4, #4]
 8087d5a:	a901      	add	r1, sp, #4
 8087d5c:	9303      	str	r3, [sp, #12]
 8087d5e:	68e3      	ldr	r3, [r4, #12]
 8087d60:	7c30      	ldrb	r0, [r6, #16]
 8087d62:	9304      	str	r3, [sp, #16]
 8087d64:	7a23      	ldrb	r3, [r4, #8]
 8087d66:	f8ad 5004 	strh.w	r5, [sp, #4]
 8087d6a:	9305      	str	r3, [sp, #20]
 8087d6c:	f7fd fc30 	bl	80855d0 <HAL_I2C_Request_Data_Ex>
}
 8087d70:	b006      	add	sp, #24
 8087d72:	bd70      	pop	{r4, r5, r6, pc}

08087d74 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 8087d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087d76:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087d78:	f88d 1000 	strb.w	r1, [sp]
 8087d7c:	f04f 0164 	mov.w	r1, #100	; 0x64
 8087d80:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087d82:	bf18      	it	ne
 8087d84:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8087d86:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8087d88:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087d8a:	f88d 3008 	strb.w	r3, [sp, #8]
 8087d8e:	f7ff ffd5 	bl	8087d3c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8087d92:	b005      	add	sp, #20
 8087d94:	f85d fb04 	ldr.w	pc, [sp], #4

08087d98 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 8087d98:	2301      	movs	r3, #1
 8087d9a:	f7ff bfeb 	b.w	8087d74 <_ZN7TwoWire11requestFromEhjh>

08087d9e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8087d9e:	2200      	movs	r2, #0
 8087da0:	7c00      	ldrb	r0, [r0, #16]
 8087da2:	f7fd bbbd 	b.w	8085520 <HAL_I2C_Begin_Transmission>

08087da6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8087da6:	b2c9      	uxtb	r1, r1
 8087da8:	f7ff bff9 	b.w	8087d9e <_ZN7TwoWire17beginTransmissionEh>

08087dac <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8087dac:	2200      	movs	r2, #0
 8087dae:	7c00      	ldrb	r0, [r0, #16]
 8087db0:	f7fd bbbe 	b.w	8085530 <HAL_I2C_End_Transmission>

08087db4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8087db4:	2101      	movs	r1, #1
 8087db6:	f7ff bff9 	b.w	8087dac <_ZN7TwoWire15endTransmissionEh>

08087dba <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8087dba:	2100      	movs	r1, #0
 8087dbc:	7c00      	ldrb	r0, [r0, #16]
 8087dbe:	f7fd bbe7 	b.w	8085590 <HAL_I2C_Is_Enabled>

08087dc2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8087dc2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8087dc4:	2100      	movs	r1, #0
 8087dc6:	7c00      	ldrb	r0, [r0, #16]
 8087dc8:	f7fd fbf2 	bl	80855b0 <HAL_I2C_Acquire>
}
 8087dcc:	fab0 f080 	clz	r0, r0
 8087dd0:	0940      	lsrs	r0, r0, #5
 8087dd2:	bd08      	pop	{r3, pc}

08087dd4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8087dd4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8087dd6:	2100      	movs	r1, #0
 8087dd8:	7c00      	ldrb	r0, [r0, #16]
 8087dda:	f7fd fbf1 	bl	80855c0 <HAL_I2C_Release>
}
 8087dde:	fab0 f080 	clz	r0, r0
 8087de2:	0940      	lsrs	r0, r0, #5
 8087de4:	bd08      	pop	{r3, pc}

08087de6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8087de6:	2300      	movs	r3, #0
 8087de8:	461a      	mov	r2, r3
 8087dea:	6840      	ldr	r0, [r0, #4]
 8087dec:	f7fd bcfc 	b.w	80857e8 <network_connect>

08087df0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8087df0:	2200      	movs	r2, #0
 8087df2:	2102      	movs	r1, #2
 8087df4:	6840      	ldr	r0, [r0, #4]
 8087df6:	f7fd bd07 	b.w	8085808 <network_disconnect>

08087dfa <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8087dfa:	2200      	movs	r2, #0
 8087dfc:	4611      	mov	r1, r2
 8087dfe:	6840      	ldr	r0, [r0, #4]
 8087e00:	f7fd bcfa 	b.w	80857f8 <network_connecting>

08087e04 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8087e04:	2200      	movs	r2, #0
 8087e06:	4611      	mov	r1, r2
 8087e08:	6840      	ldr	r0, [r0, #4]
 8087e0a:	f7fd bd05 	b.w	8085818 <network_ready>

08087e0e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8087e0e:	2300      	movs	r3, #0
 8087e10:	461a      	mov	r2, r3
 8087e12:	4619      	mov	r1, r3
 8087e14:	6840      	ldr	r0, [r0, #4]
 8087e16:	f7fd bd07 	b.w	8085828 <network_on>

08087e1a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8087e1a:	2300      	movs	r3, #0
 8087e1c:	461a      	mov	r2, r3
 8087e1e:	4619      	mov	r1, r3
 8087e20:	6840      	ldr	r0, [r0, #4]
 8087e22:	f7fd bd09 	b.w	8085838 <network_off>

08087e26 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8087e26:	2200      	movs	r2, #0
 8087e28:	f081 0101 	eor.w	r1, r1, #1
 8087e2c:	6840      	ldr	r0, [r0, #4]
 8087e2e:	f7fd bd0b 	b.w	8085848 <network_listen>

08087e32 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8087e32:	2200      	movs	r2, #0
 8087e34:	6840      	ldr	r0, [r0, #4]
 8087e36:	f7fd bd17 	b.w	8085868 <network_set_listen_timeout>

08087e3a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8087e3a:	2200      	movs	r2, #0
 8087e3c:	4611      	mov	r1, r2
 8087e3e:	6840      	ldr	r0, [r0, #4]
 8087e40:	f7fd bd1a 	b.w	8085878 <network_get_listen_timeout>

08087e44 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8087e44:	2200      	movs	r2, #0
 8087e46:	4611      	mov	r1, r2
 8087e48:	6840      	ldr	r0, [r0, #4]
 8087e4a:	f7fd bd05 	b.w	8085858 <network_listening>
	...

08087e50 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8087e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087e52:	4617      	mov	r7, r2
 8087e54:	b087      	sub	sp, #28
 8087e56:	4605      	mov	r5, r0
    IPAddress addr;
 8087e58:	a804      	add	r0, sp, #16
 8087e5a:	f7ff fc57 	bl	808770c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8087e5e:	2600      	movs	r6, #0
 8087e60:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087e62:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8087e64:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087e68:	f002 fdbe 	bl	808a9e8 <strlen>
 8087e6c:	4b0a      	ldr	r3, [pc, #40]	; (8087e98 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8087e6e:	9600      	str	r6, [sp, #0]
 8087e70:	b281      	uxth	r1, r0
 8087e72:	685b      	ldr	r3, [r3, #4]
 8087e74:	4622      	mov	r2, r4
 8087e76:	4638      	mov	r0, r7
 8087e78:	f7fd fc0a 	bl	8085690 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087e7c:	b120      	cbz	r0, 8087e88 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087e7e:	4631      	mov	r1, r6
 8087e80:	4628      	mov	r0, r5
 8087e82:	f7ff fc53 	bl	808772c <_ZN9IPAddressC1Em>
 8087e86:	e003      	b.n	8087e90 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8087e88:	4621      	mov	r1, r4
 8087e8a:	4628      	mov	r0, r5
 8087e8c:	f7ff fc46 	bl	808771c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8087e90:	4628      	mov	r0, r5
 8087e92:	b007      	add	sp, #28
 8087e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087e96:	bf00      	nop
 8087e98:	20000d58 	.word	0x20000d58

08087e9c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 8087e9c:	4b03      	ldr	r3, [pc, #12]	; (8087eac <_ZN5spark12NetworkClass4fromEm+0x10>)
 8087e9e:	4a04      	ldr	r2, [pc, #16]	; (8087eb0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 8087ea0:	2804      	cmp	r0, #4
 8087ea2:	bf0c      	ite	eq
 8087ea4:	4610      	moveq	r0, r2
 8087ea6:	4618      	movne	r0, r3
 8087ea8:	4770      	bx	lr
 8087eaa:	bf00      	nop
 8087eac:	20000ea8 	.word	0x20000ea8
 8087eb0:	20000d58 	.word	0x20000d58

08087eb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087eb4:	4b02      	ldr	r3, [pc, #8]	; (8087ec0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087eb6:	4a03      	ldr	r2, [pc, #12]	; (8087ec4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087eb8:	601a      	str	r2, [r3, #0]
 8087eba:	2200      	movs	r2, #0
 8087ebc:	605a      	str	r2, [r3, #4]
 8087ebe:	4770      	bx	lr
 8087ec0:	20000ea8 	.word	0x20000ea8
 8087ec4:	0808dc70 	.word	0x0808dc70

08087ec8 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8087ec8:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8087eca:	b530      	push	{r4, r5, lr}
 8087ecc:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8087ece:	b31a      	cbz	r2, 8087f18 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8087ed0:	4a17      	ldr	r2, [pc, #92]	; (8087f30 <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8087ed2:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8087ed4:	68d1      	ldr	r1, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8087ed6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8087eda:	43c9      	mvns	r1, r1
 8087edc:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8087ee0:	f1c1 0204 	rsb	r2, r1, #4
 8087ee4:	b2d2      	uxtb	r2, r2
 8087ee6:	fa05 f202 	lsl.w	r2, r5, r2
 8087eea:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8087eec:	220f      	movs	r2, #15
 8087eee:	410a      	asrs	r2, r1
 8087ef0:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8087ef2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8087ef6:	400a      	ands	r2, r1
 8087ef8:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
 8087efa:	0112      	lsls	r2, r2, #4
 8087efc:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8087efe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087f02:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8087f04:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087f06:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8087f08:	f003 031f 	and.w	r3, r3, #31
 8087f0c:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087f10:	4a08      	ldr	r2, [pc, #32]	; (8087f34 <NVIC_Init+0x6c>)
 8087f12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8087f16:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087f18:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8087f1a:	2101      	movs	r1, #1
 8087f1c:	f003 031f 	and.w	r3, r3, #31
 8087f20:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087f24:	4903      	ldr	r1, [pc, #12]	; (8087f34 <NVIC_Init+0x6c>)
 8087f26:	3220      	adds	r2, #32
 8087f28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8087f2c:	bd30      	pop	{r4, r5, pc}
 8087f2e:	bf00      	nop
 8087f30:	e000ed00 	.word	0xe000ed00
 8087f34:	e000e100 	.word	0xe000e100

08087f38 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8087f38:	4b04      	ldr	r3, [pc, #16]	; (8087f4c <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8087f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8087f3c:	b109      	cbz	r1, 8087f42 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8087f3e:	4310      	orrs	r0, r2
 8087f40:	e001      	b.n	8087f46 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8087f42:	ea22 0000 	bic.w	r0, r2, r0
 8087f46:	6418      	str	r0, [r3, #64]	; 0x40
 8087f48:	4770      	bx	lr
 8087f4a:	bf00      	nop
 8087f4c:	40023800 	.word	0x40023800

08087f50 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8087f50:	4b04      	ldr	r3, [pc, #16]	; (8087f64 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8087f52:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8087f54:	b109      	cbz	r1, 8087f5a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8087f56:	4310      	orrs	r0, r2
 8087f58:	e001      	b.n	8087f5e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8087f5a:	ea22 0000 	bic.w	r0, r2, r0
 8087f5e:	6218      	str	r0, [r3, #32]
 8087f60:	4770      	bx	lr
 8087f62:	bf00      	nop
 8087f64:	40023800 	.word	0x40023800

08087f68 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8087f68:	4b04      	ldr	r3, [pc, #16]	; (8087f7c <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8087f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8087f6c:	b109      	cbz	r1, 8087f72 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8087f6e:	4310      	orrs	r0, r2
 8087f70:	e001      	b.n	8087f76 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8087f72:	ea22 0000 	bic.w	r0, r2, r0
 8087f76:	6258      	str	r0, [r3, #36]	; 0x24
 8087f78:	4770      	bx	lr
 8087f7a:	bf00      	nop
 8087f7c:	40023800 	.word	0x40023800

08087f80 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8087f80:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 8087f82:	4b4d      	ldr	r3, [pc, #308]	; (80880b8 <TIM_DeInit+0x138>)
 8087f84:	4298      	cmp	r0, r3
 8087f86:	d106      	bne.n	8087f96 <TIM_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8087f88:	2101      	movs	r1, #1
 8087f8a:	4608      	mov	r0, r1
 8087f8c:	f7ff ffec 	bl	8087f68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 8087f90:	2100      	movs	r1, #0
 8087f92:	2001      	movs	r0, #1
 8087f94:	e044      	b.n	8088020 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM2)
 8087f96:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8087f9a:	d106      	bne.n	8087faa <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8087f9c:	2101      	movs	r1, #1
 8087f9e:	4608      	mov	r0, r1
 8087fa0:	f7ff ffd6 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8087fa4:	2100      	movs	r1, #0
 8087fa6:	2001      	movs	r0, #1
 8087fa8:	e081      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM3)
 8087faa:	4b44      	ldr	r3, [pc, #272]	; (80880bc <TIM_DeInit+0x13c>)
 8087fac:	4298      	cmp	r0, r3
 8087fae:	d106      	bne.n	8087fbe <TIM_DeInit+0x3e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8087fb0:	2101      	movs	r1, #1
 8087fb2:	2002      	movs	r0, #2
 8087fb4:	f7ff ffcc 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8087fb8:	2100      	movs	r1, #0
 8087fba:	2002      	movs	r0, #2
 8087fbc:	e077      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM4)
 8087fbe:	4b40      	ldr	r3, [pc, #256]	; (80880c0 <TIM_DeInit+0x140>)
 8087fc0:	4298      	cmp	r0, r3
 8087fc2:	d106      	bne.n	8087fd2 <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8087fc4:	2101      	movs	r1, #1
 8087fc6:	2004      	movs	r0, #4
 8087fc8:	f7ff ffc2 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8087fcc:	2100      	movs	r1, #0
 8087fce:	2004      	movs	r0, #4
 8087fd0:	e06d      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM5)
 8087fd2:	4b3c      	ldr	r3, [pc, #240]	; (80880c4 <TIM_DeInit+0x144>)
 8087fd4:	4298      	cmp	r0, r3
 8087fd6:	d106      	bne.n	8087fe6 <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8087fd8:	2101      	movs	r1, #1
 8087fda:	2008      	movs	r0, #8
 8087fdc:	f7ff ffb8 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8087fe0:	2100      	movs	r1, #0
 8087fe2:	2008      	movs	r0, #8
 8087fe4:	e063      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM6)
 8087fe6:	4b38      	ldr	r3, [pc, #224]	; (80880c8 <TIM_DeInit+0x148>)
 8087fe8:	4298      	cmp	r0, r3
 8087fea:	d106      	bne.n	8087ffa <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8087fec:	2101      	movs	r1, #1
 8087fee:	2010      	movs	r0, #16
 8087ff0:	f7ff ffae 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8087ff4:	2100      	movs	r1, #0
 8087ff6:	2010      	movs	r0, #16
 8087ff8:	e059      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM7)
 8087ffa:	4b34      	ldr	r3, [pc, #208]	; (80880cc <TIM_DeInit+0x14c>)
 8087ffc:	4298      	cmp	r0, r3
 8087ffe:	d106      	bne.n	808800e <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8088000:	2101      	movs	r1, #1
 8088002:	2020      	movs	r0, #32
 8088004:	f7ff ffa4 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8088008:	2100      	movs	r1, #0
 808800a:	2020      	movs	r0, #32
 808800c:	e04f      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM8)
 808800e:	4b30      	ldr	r3, [pc, #192]	; (80880d0 <TIM_DeInit+0x150>)
 8088010:	4298      	cmp	r0, r3
 8088012:	d109      	bne.n	8088028 <TIM_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8088014:	2101      	movs	r1, #1
 8088016:	2002      	movs	r0, #2
 8088018:	f7ff ffa6 	bl	8087f68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 808801c:	2100      	movs	r1, #0
 808801e:	2002      	movs	r0, #2
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 8088020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM8)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8088024:	f7ff bfa0 	b.w	8087f68 <RCC_APB2PeriphResetCmd>
  }
  else if (TIMx == TIM9)
 8088028:	4b2a      	ldr	r3, [pc, #168]	; (80880d4 <TIM_DeInit+0x154>)
 808802a:	4298      	cmp	r0, r3
 808802c:	d108      	bne.n	8088040 <TIM_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 808802e:	2101      	movs	r1, #1
 8088030:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8088034:	f7ff ff98 	bl	8087f68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 8088038:	2100      	movs	r1, #0
 808803a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 808803e:	e7ef      	b.n	8088020 <TIM_DeInit+0xa0>
   }
  else if (TIMx == TIM10)
 8088040:	4b25      	ldr	r3, [pc, #148]	; (80880d8 <TIM_DeInit+0x158>)
 8088042:	4298      	cmp	r0, r3
 8088044:	d108      	bne.n	8088058 <TIM_DeInit+0xd8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8088046:	2101      	movs	r1, #1
 8088048:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 808804c:	f7ff ff8c 	bl	8087f68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 8088050:	2100      	movs	r1, #0
 8088052:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8088056:	e7e3      	b.n	8088020 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM11)
 8088058:	4b20      	ldr	r3, [pc, #128]	; (80880dc <TIM_DeInit+0x15c>)
 808805a:	4298      	cmp	r0, r3
 808805c:	d108      	bne.n	8088070 <TIM_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 808805e:	2101      	movs	r1, #1
 8088060:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8088064:	f7ff ff80 	bl	8087f68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 8088068:	2100      	movs	r1, #0
 808806a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 808806e:	e7d7      	b.n	8088020 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM12)
 8088070:	4b1b      	ldr	r3, [pc, #108]	; (80880e0 <TIM_DeInit+0x160>)
 8088072:	4298      	cmp	r0, r3
 8088074:	d106      	bne.n	8088084 <TIM_DeInit+0x104>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8088076:	2101      	movs	r1, #1
 8088078:	2040      	movs	r0, #64	; 0x40
 808807a:	f7ff ff69 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 808807e:	2100      	movs	r1, #0
 8088080:	2040      	movs	r0, #64	; 0x40
 8088082:	e014      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM13)
 8088084:	4b17      	ldr	r3, [pc, #92]	; (80880e4 <TIM_DeInit+0x164>)
 8088086:	4298      	cmp	r0, r3
 8088088:	d106      	bne.n	8088098 <TIM_DeInit+0x118>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 808808a:	2101      	movs	r1, #1
 808808c:	2080      	movs	r0, #128	; 0x80
 808808e:	f7ff ff5f 	bl	8087f50 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 8088092:	2100      	movs	r1, #0
 8088094:	2080      	movs	r0, #128	; 0x80
 8088096:	e00a      	b.n	80880ae <TIM_DeInit+0x12e>
  }
  else
  {
    if (TIMx == TIM14)
 8088098:	4b13      	ldr	r3, [pc, #76]	; (80880e8 <TIM_DeInit+0x168>)
 808809a:	4298      	cmp	r0, r3
 808809c:	d10b      	bne.n	80880b6 <TIM_DeInit+0x136>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 808809e:	2101      	movs	r1, #1
 80880a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80880a4:	f7ff ff54 	bl	8087f50 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 80880a8:	2100      	movs	r1, #0
 80880aa:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 80880ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM14)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 80880b2:	f7ff bf4d 	b.w	8087f50 <RCC_APB1PeriphResetCmd>
 80880b6:	bd08      	pop	{r3, pc}
 80880b8:	40010000 	.word	0x40010000
 80880bc:	40000400 	.word	0x40000400
 80880c0:	40000800 	.word	0x40000800
 80880c4:	40000c00 	.word	0x40000c00
 80880c8:	40001000 	.word	0x40001000
 80880cc:	40001400 	.word	0x40001400
 80880d0:	40010400 	.word	0x40010400
 80880d4:	40014000 	.word	0x40014000
 80880d8:	40014400 	.word	0x40014400
 80880dc:	40014800 	.word	0x40014800
 80880e0:	40001800 	.word	0x40001800
 80880e4:	40001c00 	.word	0x40001c00
 80880e8:	40002000 	.word	0x40002000

080880ec <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80880ec:	4a1c      	ldr	r2, [pc, #112]	; (8088160 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80880ee:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80880f0:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80880f2:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80880f4:	d012      	beq.n	808811c <TIM_TimeBaseInit+0x30>
 80880f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80880fa:	4290      	cmp	r0, r2
 80880fc:	d00e      	beq.n	808811c <TIM_TimeBaseInit+0x30>
 80880fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8088102:	d00b      	beq.n	808811c <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8088104:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8088108:	4290      	cmp	r0, r2
 808810a:	d007      	beq.n	808811c <TIM_TimeBaseInit+0x30>
 808810c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088110:	4290      	cmp	r0, r2
 8088112:	d003      	beq.n	808811c <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5))
 8088114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088118:	4290      	cmp	r0, r2
 808811a:	d103      	bne.n	8088124 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 808811c:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 808811e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8088122:	4313      	orrs	r3, r2
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 8088124:	4a0f      	ldr	r2, [pc, #60]	; (8088164 <TIM_TimeBaseInit+0x78>)
 8088126:	4290      	cmp	r0, r2
 8088128:	d008      	beq.n	808813c <TIM_TimeBaseInit+0x50>
 808812a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 808812e:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8088130:	bf1f      	itttt	ne
 8088132:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8088136:	890a      	ldrhne	r2, [r1, #8]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8088138:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 808813a:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 808813c:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 808813e:	684b      	ldr	r3, [r1, #4]
 8088140:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8088142:	880b      	ldrh	r3, [r1, #0]
 8088144:	8503      	strh	r3, [r0, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8088146:	4b06      	ldr	r3, [pc, #24]	; (8088160 <TIM_TimeBaseInit+0x74>)
 8088148:	4298      	cmp	r0, r3
 808814a:	d003      	beq.n	8088154 <TIM_TimeBaseInit+0x68>
 808814c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8088150:	4298      	cmp	r0, r3
 8088152:	d101      	bne.n	8088158 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8088154:	7a8b      	ldrb	r3, [r1, #10]
 8088156:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8088158:	2301      	movs	r3, #1
 808815a:	8283      	strh	r3, [r0, #20]
 808815c:	4770      	bx	lr
 808815e:	bf00      	nop
 8088160:	40010000 	.word	0x40010000
 8088164:	40001000 	.word	0x40001000

08088168 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8088168:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 808816a:	b119      	cbz	r1, 8088174 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 808816c:	b29b      	uxth	r3, r3
 808816e:	f043 0301 	orr.w	r3, r3, #1
 8088172:	e003      	b.n	808817c <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8088174:	f023 0301 	bic.w	r3, r3, #1
 8088178:	041b      	lsls	r3, r3, #16
 808817a:	0c1b      	lsrs	r3, r3, #16
 808817c:	8003      	strh	r3, [r0, #0]
 808817e:	4770      	bx	lr

08088180 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8088180:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 8088182:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8088184:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 8088188:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 808818a:	d003      	beq.n	8088194 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 808818c:	4211      	tst	r1, r2
 808818e:	bf14      	ite	ne
 8088190:	2001      	movne	r0, #1
 8088192:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8088194:	4770      	bx	lr

08088196 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8088196:	43c9      	mvns	r1, r1
 8088198:	b289      	uxth	r1, r1
 808819a:	8201      	strh	r1, [r0, #16]
 808819c:	4770      	bx	lr

0808819e <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 808819e:	8983      	ldrh	r3, [r0, #12]
 80881a0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80881a2:	b10a      	cbz	r2, 80881a8 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 80881a4:	4319      	orrs	r1, r3
 80881a6:	e001      	b.n	80881ac <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80881a8:	ea23 0101 	bic.w	r1, r3, r1
 80881ac:	8181      	strh	r1, [r0, #12]
 80881ae:	4770      	bx	lr

080881b0 <TIM_ITConfig>:
 80881b0:	f7ff bff5 	b.w	808819e <TIM_DMACmd>

080881b4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80881b4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80881b6:	4e1a      	ldr	r6, [pc, #104]	; (8088220 <pinAvailable+0x6c>)
 80881b8:	4604      	mov	r4, r0
 80881ba:	6831      	ldr	r1, [r6, #0]
 80881bc:	f011 0501 	ands.w	r5, r1, #1
 80881c0:	d10f      	bne.n	80881e2 <pinAvailable+0x2e>
 80881c2:	4630      	mov	r0, r6
 80881c4:	f7f7 ff73 	bl	80800ae <__cxa_guard_acquire>
 80881c8:	b158      	cbz	r0, 80881e2 <pinAvailable+0x2e>
 80881ca:	4629      	mov	r1, r5
 80881cc:	4815      	ldr	r0, [pc, #84]	; (8088224 <pinAvailable+0x70>)
 80881ce:	f7fd fd55 	bl	8085c7c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80881d2:	4630      	mov	r0, r6
 80881d4:	f7f7 ff70 	bl	80800b8 <__cxa_guard_release>
 80881d8:	4a13      	ldr	r2, [pc, #76]	; (8088228 <pinAvailable+0x74>)
 80881da:	4914      	ldr	r1, [pc, #80]	; (808822c <pinAvailable+0x78>)
 80881dc:	4811      	ldr	r0, [pc, #68]	; (8088224 <pinAvailable+0x70>)
 80881de:	f000 f937 	bl	8088450 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80881e2:	4810      	ldr	r0, [pc, #64]	; (8088224 <pinAvailable+0x70>)
 80881e4:	f7fd fe0c 	bl	8085e00 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80881e8:	b128      	cbz	r0, 80881f6 <pinAvailable+0x42>
 80881ea:	f1a4 030d 	sub.w	r3, r4, #13
 80881ee:	2b02      	cmp	r3, #2
 80881f0:	d801      	bhi.n	80881f6 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80881f2:	2000      	movs	r0, #0
 80881f4:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80881f6:	f000 f8df 	bl	80883b8 <_Z19__fetch_global_Wirev>
 80881fa:	f7ff fdde 	bl	8087dba <_ZN7TwoWire9isEnabledEv>
 80881fe:	b108      	cbz	r0, 8088204 <pinAvailable+0x50>
 8088200:	2c01      	cmp	r4, #1
 8088202:	d9f6      	bls.n	80881f2 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8088204:	f7ff fd1c 	bl	8087c40 <_Z22__fetch_global_Serial1v>
 8088208:	f7ff fd17 	bl	8087c3a <_ZN11USARTSerial9isEnabledEv>
 808820c:	b118      	cbz	r0, 8088216 <pinAvailable+0x62>
 808820e:	f1a4 0312 	sub.w	r3, r4, #18
 8088212:	2b01      	cmp	r3, #1
 8088214:	d9ed      	bls.n	80881f2 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8088216:	2c2e      	cmp	r4, #46	; 0x2e
 8088218:	bf8c      	ite	hi
 808821a:	2000      	movhi	r0, #0
 808821c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808821e:	bd70      	pop	{r4, r5, r6, pc}
 8088220:	20000144 	.word	0x20000144
 8088224:	20000148 	.word	0x20000148
 8088228:	20000140 	.word	0x20000140
 808822c:	0808017d 	.word	0x0808017d

08088230 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088230:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8088232:	b538      	push	{r3, r4, r5, lr}
 8088234:	4604      	mov	r4, r0
 8088236:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088238:	d80a      	bhi.n	8088250 <pinMode+0x20>
 808823a:	29ff      	cmp	r1, #255	; 0xff
 808823c:	d008      	beq.n	8088250 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808823e:	f7ff ffb9 	bl	80881b4 <pinAvailable>
 8088242:	b128      	cbz	r0, 8088250 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8088244:	4629      	mov	r1, r5
 8088246:	4620      	mov	r0, r4
}
 8088248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808824c:	f7fd b828 	b.w	80852a0 <HAL_Pin_Mode>
 8088250:	bd38      	pop	{r3, r4, r5, pc}

08088252 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8088252:	b538      	push	{r3, r4, r5, lr}
 8088254:	4604      	mov	r4, r0
 8088256:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8088258:	f7fd f82a 	bl	80852b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808825c:	28ff      	cmp	r0, #255	; 0xff
 808825e:	d010      	beq.n	8088282 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8088260:	2806      	cmp	r0, #6
 8088262:	d804      	bhi.n	808826e <digitalWrite+0x1c>
 8088264:	234d      	movs	r3, #77	; 0x4d
 8088266:	fa23 f000 	lsr.w	r0, r3, r0
 808826a:	07c3      	lsls	r3, r0, #31
 808826c:	d409      	bmi.n	8088282 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808826e:	4620      	mov	r0, r4
 8088270:	f7ff ffa0 	bl	80881b4 <pinAvailable>
 8088274:	b128      	cbz	r0, 8088282 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8088276:	4629      	mov	r1, r5
 8088278:	4620      	mov	r0, r4
}
 808827a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808827e:	f7fd b81f 	b.w	80852c0 <HAL_GPIO_Write>
 8088282:	bd38      	pop	{r3, r4, r5, pc}

08088284 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8088284:	b510      	push	{r4, lr}
 8088286:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8088288:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808828a:	bf9c      	itt	ls
 808828c:	340a      	addls	r4, #10
 808828e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8088290:	4620      	mov	r0, r4
 8088292:	f7ff ff8f 	bl	80881b4 <pinAvailable>
 8088296:	b150      	cbz	r0, 80882ae <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8088298:	2103      	movs	r1, #3
 808829a:	4620      	mov	r0, r4
 808829c:	f7fc fff8 	bl	8085290 <HAL_Validate_Pin_Function>
 80882a0:	2803      	cmp	r0, #3
 80882a2:	d104      	bne.n	80882ae <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80882a4:	4620      	mov	r0, r4
}
 80882a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80882aa:	f7fd b821 	b.w	80852f0 <HAL_ADC_Read>
}
 80882ae:	2000      	movs	r0, #0
 80882b0:	bd10      	pop	{r4, pc}
	...

080882b4 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80882b4:	b530      	push	{r4, r5, lr}
 80882b6:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80882b8:	4d1b      	ldr	r5, [pc, #108]	; (8088328 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80882ba:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 80882bc:	6820      	ldr	r0, [r4, #0]
 80882be:	f7fd f86f 	bl	80853a0 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80882c2:	f7fd f87d 	bl	80853c0 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80882c6:	682b      	ldr	r3, [r5, #0]
 80882c8:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 80882ca:	1ac0      	subs	r0, r0, r3
 80882cc:	4290      	cmp	r0, r2
 80882ce:	d3f5      	bcc.n	80882bc <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 80882d0:	6823      	ldr	r3, [r4, #0]
 80882d2:	b333      	cbz	r3, 8088322 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 80882d4:	68e3      	ldr	r3, [r4, #12]
 80882d6:	b323      	cbz	r3, 8088322 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80882d8:	1d25      	adds	r5, r4, #4
 80882da:	6923      	ldr	r3, [r4, #16]
 80882dc:	4628      	mov	r0, r5
 80882de:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80882e0:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80882e2:	a904      	add	r1, sp, #16
 80882e4:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80882e6:	9302      	str	r3, [sp, #8]
 80882e8:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80882ea:	f7fe fd01 	bl	8086cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80882ee:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80882f0:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80882f2:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80882f4:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80882f6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80882f8:	9a07      	ldr	r2, [sp, #28]
 80882fa:	4629      	mov	r1, r5
 80882fc:	a804      	add	r0, sp, #16
 80882fe:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088300:	9307      	str	r3, [sp, #28]
 8088302:	f7fe fcf5 	bl	8086cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088306:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088308:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808830a:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808830c:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808830e:	9206      	str	r2, [sp, #24]
 8088310:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088312:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8088314:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088316:	9207      	str	r2, [sp, #28]
 8088318:	f7f7 ff51 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 808831c:	4668      	mov	r0, sp
 808831e:	f7f7 ff4e 	bl	80801be <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 8088322:	b009      	add	sp, #36	; 0x24
 8088324:	bd30      	pop	{r4, r5, pc}
 8088326:	bf00      	nop
 8088328:	20000eb0 	.word	0x20000eb0

0808832c <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 808832c:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 808832e:	f7ff ffc1 	bl	80882b4 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 8088332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 8088336:	2000      	movs	r0, #0
 8088338:	f7fd b872 	b.w	8085420 <os_thread_cleanup>

0808833c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808833c:	b513      	push	{r0, r1, r4, lr}
 808833e:	4c08      	ldr	r4, [pc, #32]	; (8088360 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8088340:	2300      	movs	r3, #0
 8088342:	461a      	mov	r2, r3
 8088344:	4619      	mov	r1, r3
 8088346:	9300      	str	r3, [sp, #0]
 8088348:	4620      	mov	r0, r4
 808834a:	f7ff fa05 	bl	8087758 <_ZN9IPAddressC1Ehhhh>
 808834e:	4620      	mov	r0, r4
 8088350:	4a04      	ldr	r2, [pc, #16]	; (8088364 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8088352:	4905      	ldr	r1, [pc, #20]	; (8088368 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8088354:	b002      	add	sp, #8
 8088356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808835a:	f000 b879 	b.w	8088450 <__aeabi_atexit>
 808835e:	bf00      	nop
 8088360:	20000eb4 	.word	0x20000eb4
 8088364:	20000140 	.word	0x20000140
 8088368:	080876c9 	.word	0x080876c9

0808836c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 808836c:	b570      	push	{r4, r5, r6, lr}
 808836e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088370:	2514      	movs	r5, #20
 8088372:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088374:	4e09      	ldr	r6, [pc, #36]	; (808839c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088376:	2100      	movs	r1, #0
 8088378:	f001 fdb6 	bl	8089ee8 <memset>
 808837c:	8025      	strh	r5, [r4, #0]
 808837e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088380:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088382:	60a5      	str	r5, [r4, #8]
 8088384:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088386:	4628      	mov	r0, r5
 8088388:	f000 f872 	bl	8088470 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808838c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808838e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088390:	4628      	mov	r0, r5
 8088392:	f000 f86d 	bl	8088470 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088396:	60e0      	str	r0, [r4, #12]

	return config;
}
 8088398:	4620      	mov	r0, r4
 808839a:	bd70      	pop	{r4, r5, r6, pc}
 808839c:	0808dc9c 	.word	0x0808dc9c

080883a0 <_Z17acquireWireBufferv>:
 80883a0:	b510      	push	{r4, lr}
 80883a2:	4604      	mov	r4, r0
 80883a4:	f7ff ffe2 	bl	808836c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 80883a8:	4620      	mov	r0, r4
 80883aa:	bd10      	pop	{r4, pc}

080883ac <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 80883ac:	b510      	push	{r4, lr}
 80883ae:	4604      	mov	r4, r0
	return defaultWireConfig();
 80883b0:	f7ff ffdc 	bl	808836c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 80883b4:	4620      	mov	r0, r4
 80883b6:	bd10      	pop	{r4, pc}

080883b8 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 80883b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80883ba:	4d0e      	ldr	r5, [pc, #56]	; (80883f4 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80883bc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80883be:	6829      	ldr	r1, [r5, #0]
 80883c0:	f011 0401 	ands.w	r4, r1, #1
 80883c4:	d113      	bne.n	80883ee <_Z19__fetch_global_Wirev+0x36>
 80883c6:	4628      	mov	r0, r5
 80883c8:	f7f7 fe71 	bl	80800ae <__cxa_guard_acquire>
 80883cc:	b178      	cbz	r0, 80883ee <_Z19__fetch_global_Wirev+0x36>
 80883ce:	a801      	add	r0, sp, #4
 80883d0:	f7ff ffe6 	bl	80883a0 <_Z17acquireWireBufferv>
 80883d4:	aa01      	add	r2, sp, #4
 80883d6:	4621      	mov	r1, r4
 80883d8:	4807      	ldr	r0, [pc, #28]	; (80883f8 <_Z19__fetch_global_Wirev+0x40>)
 80883da:	f7ff fc97 	bl	8087d0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80883de:	4628      	mov	r0, r5
 80883e0:	f7f7 fe6a 	bl	80800b8 <__cxa_guard_release>
 80883e4:	4a05      	ldr	r2, [pc, #20]	; (80883fc <_Z19__fetch_global_Wirev+0x44>)
 80883e6:	4906      	ldr	r1, [pc, #24]	; (8088400 <_Z19__fetch_global_Wirev+0x48>)
 80883e8:	4803      	ldr	r0, [pc, #12]	; (80883f8 <_Z19__fetch_global_Wirev+0x40>)
 80883ea:	f000 f831 	bl	8088450 <__aeabi_atexit>
	return wire;
}
 80883ee:	4802      	ldr	r0, [pc, #8]	; (80883f8 <_Z19__fetch_global_Wirev+0x40>)
 80883f0:	b007      	add	sp, #28
 80883f2:	bd30      	pop	{r4, r5, pc}
 80883f4:	20000ebc 	.word	0x20000ebc
 80883f8:	20000ed4 	.word	0x20000ed4
 80883fc:	20000140 	.word	0x20000140
 8088400:	08087cb5 	.word	0x08087cb5

08088404 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8088404:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8088406:	4c0e      	ldr	r4, [pc, #56]	; (8088440 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8088408:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808840a:	6823      	ldr	r3, [r4, #0]
 808840c:	07db      	lsls	r3, r3, #31
 808840e:	d413      	bmi.n	8088438 <_Z20__fetch_global_Wire3v+0x34>
 8088410:	4620      	mov	r0, r4
 8088412:	f7f7 fe4c 	bl	80800ae <__cxa_guard_acquire>
 8088416:	b178      	cbz	r0, 8088438 <_Z20__fetch_global_Wire3v+0x34>
 8088418:	a801      	add	r0, sp, #4
 808841a:	f7ff ffc7 	bl	80883ac <_Z18acquireWire3Bufferv>
 808841e:	aa01      	add	r2, sp, #4
 8088420:	2102      	movs	r1, #2
 8088422:	4808      	ldr	r0, [pc, #32]	; (8088444 <_Z20__fetch_global_Wire3v+0x40>)
 8088424:	f7ff fc72 	bl	8087d0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8088428:	4620      	mov	r0, r4
 808842a:	f7f7 fe45 	bl	80800b8 <__cxa_guard_release>
 808842e:	4a06      	ldr	r2, [pc, #24]	; (8088448 <_Z20__fetch_global_Wire3v+0x44>)
 8088430:	4906      	ldr	r1, [pc, #24]	; (808844c <_Z20__fetch_global_Wire3v+0x48>)
 8088432:	4804      	ldr	r0, [pc, #16]	; (8088444 <_Z20__fetch_global_Wire3v+0x40>)
 8088434:	f000 f80c 	bl	8088450 <__aeabi_atexit>
	return wire;
}
 8088438:	4802      	ldr	r0, [pc, #8]	; (8088444 <_Z20__fetch_global_Wire3v+0x40>)
 808843a:	b006      	add	sp, #24
 808843c:	bd10      	pop	{r4, pc}
 808843e:	bf00      	nop
 8088440:	20000ee8 	.word	0x20000ee8
 8088444:	20000ec0 	.word	0x20000ec0
 8088448:	20000140 	.word	0x20000140
 808844c:	08087cb5 	.word	0x08087cb5

08088450 <__aeabi_atexit>:
 8088450:	460b      	mov	r3, r1
 8088452:	4601      	mov	r1, r0
 8088454:	4618      	mov	r0, r3
 8088456:	f001 bc23 	b.w	8089ca0 <__cxa_atexit>
	...

0808845c <_ZSt15get_new_handlerv>:
 808845c:	4b02      	ldr	r3, [pc, #8]	; (8088468 <_ZSt15get_new_handlerv+0xc>)
 808845e:	6818      	ldr	r0, [r3, #0]
 8088460:	f3bf 8f5f 	dmb	sy
 8088464:	4770      	bx	lr
 8088466:	bf00      	nop
 8088468:	20000eec 	.word	0x20000eec

0808846c <_ZdlPvj>:
 808846c:	f7f7 be1b 	b.w	80800a6 <_ZdlPv>

08088470 <_ZnajRKSt9nothrow_t>:
 8088470:	f000 b800 	b.w	8088474 <_ZnwjRKSt9nothrow_t>

08088474 <_ZnwjRKSt9nothrow_t>:
 8088474:	b510      	push	{r4, lr}
 8088476:	2800      	cmp	r0, #0
 8088478:	bf14      	ite	ne
 808847a:	4604      	movne	r4, r0
 808847c:	2401      	moveq	r4, #1
 808847e:	4620      	mov	r0, r4
 8088480:	f7fd fa42 	bl	8085908 <malloc>
 8088484:	b920      	cbnz	r0, 8088490 <_ZnwjRKSt9nothrow_t+0x1c>
 8088486:	f7ff ffe9 	bl	808845c <_ZSt15get_new_handlerv>
 808848a:	b108      	cbz	r0, 8088490 <_ZnwjRKSt9nothrow_t+0x1c>
 808848c:	4780      	blx	r0
 808848e:	e7f6      	b.n	808847e <_ZnwjRKSt9nothrow_t+0xa>
 8088490:	bd10      	pop	{r4, pc}

08088492 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8088492:	68c3      	ldr	r3, [r0, #12]
 8088494:	689a      	ldr	r2, [r3, #8]
 8088496:	60c2      	str	r2, [r0, #12]
 8088498:	b102      	cbz	r2, 808849c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 808849a:	6050      	str	r0, [r2, #4]
 808849c:	6842      	ldr	r2, [r0, #4]
 808849e:	605a      	str	r2, [r3, #4]
 80884a0:	680a      	ldr	r2, [r1, #0]
 80884a2:	4290      	cmp	r0, r2
 80884a4:	d101      	bne.n	80884aa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
 80884a6:	600b      	str	r3, [r1, #0]
 80884a8:	e005      	b.n	80884b6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
 80884aa:	6842      	ldr	r2, [r0, #4]
 80884ac:	6891      	ldr	r1, [r2, #8]
 80884ae:	4288      	cmp	r0, r1
 80884b0:	bf0c      	ite	eq
 80884b2:	6093      	streq	r3, [r2, #8]
 80884b4:	60d3      	strne	r3, [r2, #12]
 80884b6:	6098      	str	r0, [r3, #8]
 80884b8:	6043      	str	r3, [r0, #4]
 80884ba:	4770      	bx	lr

080884bc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80884bc:	6883      	ldr	r3, [r0, #8]
 80884be:	68da      	ldr	r2, [r3, #12]
 80884c0:	6082      	str	r2, [r0, #8]
 80884c2:	b102      	cbz	r2, 80884c6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 80884c4:	6050      	str	r0, [r2, #4]
 80884c6:	6842      	ldr	r2, [r0, #4]
 80884c8:	605a      	str	r2, [r3, #4]
 80884ca:	680a      	ldr	r2, [r1, #0]
 80884cc:	4290      	cmp	r0, r2
 80884ce:	d101      	bne.n	80884d4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
 80884d0:	600b      	str	r3, [r1, #0]
 80884d2:	e005      	b.n	80884e0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
 80884d4:	6842      	ldr	r2, [r0, #4]
 80884d6:	68d1      	ldr	r1, [r2, #12]
 80884d8:	4288      	cmp	r0, r1
 80884da:	bf0c      	ite	eq
 80884dc:	60d3      	streq	r3, [r2, #12]
 80884de:	6093      	strne	r3, [r2, #8]
 80884e0:	60d8      	str	r0, [r3, #12]
 80884e2:	6043      	str	r3, [r0, #4]
 80884e4:	4770      	bx	lr

080884e6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80884e6:	7803      	ldrb	r3, [r0, #0]
 80884e8:	b92b      	cbnz	r3, 80884f6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 80884ea:	6843      	ldr	r3, [r0, #4]
 80884ec:	685b      	ldr	r3, [r3, #4]
 80884ee:	4298      	cmp	r0, r3
 80884f0:	d101      	bne.n	80884f6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 80884f2:	68c3      	ldr	r3, [r0, #12]
 80884f4:	e00c      	b.n	8088510 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80884f6:	6883      	ldr	r3, [r0, #8]
 80884f8:	b11b      	cbz	r3, 8088502 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
 80884fa:	68da      	ldr	r2, [r3, #12]
 80884fc:	b142      	cbz	r2, 8088510 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80884fe:	4613      	mov	r3, r2
 8088500:	e7fb      	b.n	80884fa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 8088502:	6843      	ldr	r3, [r0, #4]
 8088504:	689a      	ldr	r2, [r3, #8]
 8088506:	4282      	cmp	r2, r0
 8088508:	d102      	bne.n	8088510 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 808850a:	4618      	mov	r0, r3
 808850c:	685b      	ldr	r3, [r3, #4]
 808850e:	e7f9      	b.n	8088504 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
 8088510:	4618      	mov	r0, r3
 8088512:	4770      	bx	lr

08088514 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8088514:	68c3      	ldr	r3, [r0, #12]
 8088516:	b123      	cbz	r3, 8088522 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8088518:	4618      	mov	r0, r3
 808851a:	689b      	ldr	r3, [r3, #8]
 808851c:	2b00      	cmp	r3, #0
 808851e:	d1fb      	bne.n	8088518 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8088520:	e00a      	b.n	8088538 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 8088522:	6843      	ldr	r3, [r0, #4]
 8088524:	68da      	ldr	r2, [r3, #12]
 8088526:	4282      	cmp	r2, r0
 8088528:	d102      	bne.n	8088530 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 808852a:	4618      	mov	r0, r3
 808852c:	685b      	ldr	r3, [r3, #4]
 808852e:	e7f9      	b.n	8088524 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8088530:	68c2      	ldr	r2, [r0, #12]
 8088532:	4293      	cmp	r3, r2
 8088534:	bf18      	it	ne
 8088536:	4618      	movne	r0, r3
 8088538:	4770      	bx	lr

0808853a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 808853a:	f7ff bfd4 	b.w	80884e6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0808853e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 808853e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088542:	461f      	mov	r7, r3
 8088544:	f103 0904 	add.w	r9, r3, #4
 8088548:	2300      	movs	r3, #0
 808854a:	460c      	mov	r4, r1
 808854c:	604a      	str	r2, [r1, #4]
 808854e:	608b      	str	r3, [r1, #8]
 8088550:	60cb      	str	r3, [r1, #12]
 8088552:	700b      	strb	r3, [r1, #0]
 8088554:	b168      	cbz	r0, 8088572 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
 8088556:	4297      	cmp	r7, r2
 8088558:	6091      	str	r1, [r2, #8]
 808855a:	d101      	bne.n	8088560 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 808855c:	6079      	str	r1, [r7, #4]
 808855e:	e00c      	b.n	808857a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
 8088560:	68bb      	ldr	r3, [r7, #8]
 8088562:	429a      	cmp	r2, r3
 8088564:	bf08      	it	eq
 8088566:	60b9      	streq	r1, [r7, #8]
 8088568:	f04f 0801 	mov.w	r8, #1
 808856c:	f04f 0a00 	mov.w	sl, #0
 8088570:	e017      	b.n	80885a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8088572:	60d1      	str	r1, [r2, #12]
 8088574:	68fb      	ldr	r3, [r7, #12]
 8088576:	429a      	cmp	r2, r3
 8088578:	d1f6      	bne.n	8088568 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 808857a:	60fc      	str	r4, [r7, #12]
 808857c:	e7f4      	b.n	8088568 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 808857e:	6866      	ldr	r6, [r4, #4]
 8088580:	7832      	ldrb	r2, [r6, #0]
 8088582:	2a00      	cmp	r2, #0
 8088584:	d13a      	bne.n	80885fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 8088586:	6875      	ldr	r5, [r6, #4]
 8088588:	68ab      	ldr	r3, [r5, #8]
 808858a:	429e      	cmp	r6, r3
 808858c:	d11f      	bne.n	80885ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 808858e:	68eb      	ldr	r3, [r5, #12]
 8088590:	b15b      	cbz	r3, 80885aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8088592:	781a      	ldrb	r2, [r3, #0]
 8088594:	b94a      	cbnz	r2, 80885aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8088596:	f886 8000 	strb.w	r8, [r6]
 808859a:	f883 8000 	strb.w	r8, [r3]
 808859e:	702a      	strb	r2, [r5, #0]
 80885a0:	462c      	mov	r4, r5
 80885a2:	687b      	ldr	r3, [r7, #4]
 80885a4:	429c      	cmp	r4, r3
 80885a6:	d1ea      	bne.n	808857e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 80885a8:	e028      	b.n	80885fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 80885aa:	68f3      	ldr	r3, [r6, #12]
 80885ac:	429c      	cmp	r4, r3
 80885ae:	d104      	bne.n	80885ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 80885b0:	4649      	mov	r1, r9
 80885b2:	4630      	mov	r0, r6
 80885b4:	f7ff ff6d 	bl	8088492 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80885b8:	4634      	mov	r4, r6
 80885ba:	6863      	ldr	r3, [r4, #4]
 80885bc:	4649      	mov	r1, r9
 80885be:	f883 8000 	strb.w	r8, [r3]
 80885c2:	4628      	mov	r0, r5
 80885c4:	f885 a000 	strb.w	sl, [r5]
 80885c8:	f7ff ff78 	bl	80884bc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80885cc:	e014      	b.n	80885f8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
 80885ce:	b113      	cbz	r3, 80885d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 80885d0:	781a      	ldrb	r2, [r3, #0]
 80885d2:	2a00      	cmp	r2, #0
 80885d4:	d0df      	beq.n	8088596 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 80885d6:	68b3      	ldr	r3, [r6, #8]
 80885d8:	429c      	cmp	r4, r3
 80885da:	d104      	bne.n	80885e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 80885dc:	4649      	mov	r1, r9
 80885de:	4630      	mov	r0, r6
 80885e0:	f7ff ff6c 	bl	80884bc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80885e4:	4634      	mov	r4, r6
 80885e6:	6863      	ldr	r3, [r4, #4]
 80885e8:	4649      	mov	r1, r9
 80885ea:	f883 8000 	strb.w	r8, [r3]
 80885ee:	4628      	mov	r0, r5
 80885f0:	f885 a000 	strb.w	sl, [r5]
 80885f4:	f7ff ff4d 	bl	8088492 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80885f8:	4625      	mov	r5, r4
 80885fa:	e7d1      	b.n	80885a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
 80885fc:	2201      	movs	r2, #1
 80885fe:	701a      	strb	r2, [r3, #0]
 8088600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08088604 <_ZSt25__throw_bad_function_callv>:
 8088604:	b508      	push	{r3, lr}
 8088606:	f7fd f9c7 	bl	8085998 <abort>
	...

0808860c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808860c:	4b18      	ldr	r3, [pc, #96]	; (8088670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808860e:	681a      	ldr	r2, [r3, #0]
 8088610:	07d1      	lsls	r1, r2, #31
 8088612:	bf5c      	itt	pl
 8088614:	2201      	movpl	r2, #1
 8088616:	601a      	strpl	r2, [r3, #0]
 8088618:	4b16      	ldr	r3, [pc, #88]	; (8088674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808861a:	681a      	ldr	r2, [r3, #0]
 808861c:	07d2      	lsls	r2, r2, #31
 808861e:	bf5c      	itt	pl
 8088620:	2201      	movpl	r2, #1
 8088622:	601a      	strpl	r2, [r3, #0]
 8088624:	4b14      	ldr	r3, [pc, #80]	; (8088678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8088626:	681a      	ldr	r2, [r3, #0]
 8088628:	07d0      	lsls	r0, r2, #31
 808862a:	bf5c      	itt	pl
 808862c:	2201      	movpl	r2, #1
 808862e:	601a      	strpl	r2, [r3, #0]
 8088630:	4b12      	ldr	r3, [pc, #72]	; (808867c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8088632:	681a      	ldr	r2, [r3, #0]
 8088634:	07d1      	lsls	r1, r2, #31
 8088636:	bf5c      	itt	pl
 8088638:	2201      	movpl	r2, #1
 808863a:	601a      	strpl	r2, [r3, #0]
 808863c:	4b10      	ldr	r3, [pc, #64]	; (8088680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808863e:	681a      	ldr	r2, [r3, #0]
 8088640:	07d2      	lsls	r2, r2, #31
 8088642:	bf5c      	itt	pl
 8088644:	2201      	movpl	r2, #1
 8088646:	601a      	strpl	r2, [r3, #0]
 8088648:	4b0e      	ldr	r3, [pc, #56]	; (8088684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808864a:	681a      	ldr	r2, [r3, #0]
 808864c:	07d0      	lsls	r0, r2, #31
 808864e:	bf5c      	itt	pl
 8088650:	2201      	movpl	r2, #1
 8088652:	601a      	strpl	r2, [r3, #0]
 8088654:	4b0c      	ldr	r3, [pc, #48]	; (8088688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8088656:	681a      	ldr	r2, [r3, #0]
 8088658:	07d1      	lsls	r1, r2, #31
 808865a:	bf5c      	itt	pl
 808865c:	2201      	movpl	r2, #1
 808865e:	601a      	strpl	r2, [r3, #0]
 8088660:	4b0a      	ldr	r3, [pc, #40]	; (808868c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8088662:	681a      	ldr	r2, [r3, #0]
 8088664:	07d2      	lsls	r2, r2, #31
 8088666:	bf5c      	itt	pl
 8088668:	2201      	movpl	r2, #1
 808866a:	601a      	strpl	r2, [r3, #0]
 808866c:	4770      	bx	lr
 808866e:	bf00      	nop
 8088670:	20000f0c 	.word	0x20000f0c
 8088674:	20000f08 	.word	0x20000f08
 8088678:	20000f04 	.word	0x20000f04
 808867c:	20000f00 	.word	0x20000f00
 8088680:	20000efc 	.word	0x20000efc
 8088684:	20000ef8 	.word	0x20000ef8
 8088688:	20000ef4 	.word	0x20000ef4
 808868c:	20000ef0 	.word	0x20000ef0

08088690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8088690:	4b24      	ldr	r3, [pc, #144]	; (8088724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8088692:	681a      	ldr	r2, [r3, #0]
 8088694:	07d0      	lsls	r0, r2, #31
 8088696:	bf5c      	itt	pl
 8088698:	2201      	movpl	r2, #1
 808869a:	601a      	strpl	r2, [r3, #0]
 808869c:	4b22      	ldr	r3, [pc, #136]	; (8088728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808869e:	681a      	ldr	r2, [r3, #0]
 80886a0:	07d1      	lsls	r1, r2, #31
 80886a2:	bf5c      	itt	pl
 80886a4:	2201      	movpl	r2, #1
 80886a6:	601a      	strpl	r2, [r3, #0]
 80886a8:	4b20      	ldr	r3, [pc, #128]	; (808872c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80886aa:	681a      	ldr	r2, [r3, #0]
 80886ac:	07d2      	lsls	r2, r2, #31
 80886ae:	bf5c      	itt	pl
 80886b0:	2201      	movpl	r2, #1
 80886b2:	601a      	strpl	r2, [r3, #0]
 80886b4:	4b1e      	ldr	r3, [pc, #120]	; (8088730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80886b6:	681a      	ldr	r2, [r3, #0]
 80886b8:	07d0      	lsls	r0, r2, #31
 80886ba:	bf5c      	itt	pl
 80886bc:	2201      	movpl	r2, #1
 80886be:	601a      	strpl	r2, [r3, #0]
 80886c0:	4b1c      	ldr	r3, [pc, #112]	; (8088734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80886c2:	681a      	ldr	r2, [r3, #0]
 80886c4:	07d1      	lsls	r1, r2, #31
 80886c6:	bf5c      	itt	pl
 80886c8:	2201      	movpl	r2, #1
 80886ca:	601a      	strpl	r2, [r3, #0]
 80886cc:	4b1a      	ldr	r3, [pc, #104]	; (8088738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80886ce:	681a      	ldr	r2, [r3, #0]
 80886d0:	07d2      	lsls	r2, r2, #31
 80886d2:	bf5c      	itt	pl
 80886d4:	2201      	movpl	r2, #1
 80886d6:	601a      	strpl	r2, [r3, #0]
 80886d8:	4b18      	ldr	r3, [pc, #96]	; (808873c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80886da:	681a      	ldr	r2, [r3, #0]
 80886dc:	07d0      	lsls	r0, r2, #31
 80886de:	bf5c      	itt	pl
 80886e0:	2201      	movpl	r2, #1
 80886e2:	601a      	strpl	r2, [r3, #0]
 80886e4:	4b16      	ldr	r3, [pc, #88]	; (8088740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80886e6:	681a      	ldr	r2, [r3, #0]
 80886e8:	07d1      	lsls	r1, r2, #31
 80886ea:	bf5c      	itt	pl
 80886ec:	2201      	movpl	r2, #1
 80886ee:	601a      	strpl	r2, [r3, #0]
 80886f0:	4b14      	ldr	r3, [pc, #80]	; (8088744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80886f2:	681a      	ldr	r2, [r3, #0]
 80886f4:	07d2      	lsls	r2, r2, #31
 80886f6:	bf5c      	itt	pl
 80886f8:	2201      	movpl	r2, #1
 80886fa:	601a      	strpl	r2, [r3, #0]
 80886fc:	4b12      	ldr	r3, [pc, #72]	; (8088748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80886fe:	681a      	ldr	r2, [r3, #0]
 8088700:	07d0      	lsls	r0, r2, #31
 8088702:	bf5c      	itt	pl
 8088704:	2201      	movpl	r2, #1
 8088706:	601a      	strpl	r2, [r3, #0]
 8088708:	4b10      	ldr	r3, [pc, #64]	; (808874c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808870a:	681a      	ldr	r2, [r3, #0]
 808870c:	07d1      	lsls	r1, r2, #31
 808870e:	bf5c      	itt	pl
 8088710:	2201      	movpl	r2, #1
 8088712:	601a      	strpl	r2, [r3, #0]
 8088714:	4b0e      	ldr	r3, [pc, #56]	; (8088750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8088716:	681a      	ldr	r2, [r3, #0]
 8088718:	07d2      	lsls	r2, r2, #31
 808871a:	bf5c      	itt	pl
 808871c:	2201      	movpl	r2, #1
 808871e:	601a      	strpl	r2, [r3, #0]
 8088720:	4770      	bx	lr
 8088722:	bf00      	nop
 8088724:	20000f3c 	.word	0x20000f3c
 8088728:	20000f38 	.word	0x20000f38
 808872c:	20000f34 	.word	0x20000f34
 8088730:	20000f30 	.word	0x20000f30
 8088734:	20000f2c 	.word	0x20000f2c
 8088738:	20000f28 	.word	0x20000f28
 808873c:	20000f24 	.word	0x20000f24
 8088740:	20000f20 	.word	0x20000f20
 8088744:	20000f1c 	.word	0x20000f1c
 8088748:	20000f18 	.word	0x20000f18
 808874c:	20000f14 	.word	0x20000f14
 8088750:	20000f10 	.word	0x20000f10

08088754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8088754:	4b24      	ldr	r3, [pc, #144]	; (80887e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8088756:	681a      	ldr	r2, [r3, #0]
 8088758:	07d0      	lsls	r0, r2, #31
 808875a:	bf5c      	itt	pl
 808875c:	2201      	movpl	r2, #1
 808875e:	601a      	strpl	r2, [r3, #0]
 8088760:	4b22      	ldr	r3, [pc, #136]	; (80887ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8088762:	681a      	ldr	r2, [r3, #0]
 8088764:	07d1      	lsls	r1, r2, #31
 8088766:	bf5c      	itt	pl
 8088768:	2201      	movpl	r2, #1
 808876a:	601a      	strpl	r2, [r3, #0]
 808876c:	4b20      	ldr	r3, [pc, #128]	; (80887f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808876e:	681a      	ldr	r2, [r3, #0]
 8088770:	07d2      	lsls	r2, r2, #31
 8088772:	bf5c      	itt	pl
 8088774:	2201      	movpl	r2, #1
 8088776:	601a      	strpl	r2, [r3, #0]
 8088778:	4b1e      	ldr	r3, [pc, #120]	; (80887f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808877a:	681a      	ldr	r2, [r3, #0]
 808877c:	07d0      	lsls	r0, r2, #31
 808877e:	bf5c      	itt	pl
 8088780:	2201      	movpl	r2, #1
 8088782:	601a      	strpl	r2, [r3, #0]
 8088784:	4b1c      	ldr	r3, [pc, #112]	; (80887f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8088786:	681a      	ldr	r2, [r3, #0]
 8088788:	07d1      	lsls	r1, r2, #31
 808878a:	bf5c      	itt	pl
 808878c:	2201      	movpl	r2, #1
 808878e:	601a      	strpl	r2, [r3, #0]
 8088790:	4b1a      	ldr	r3, [pc, #104]	; (80887fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8088792:	681a      	ldr	r2, [r3, #0]
 8088794:	07d2      	lsls	r2, r2, #31
 8088796:	bf5c      	itt	pl
 8088798:	2201      	movpl	r2, #1
 808879a:	601a      	strpl	r2, [r3, #0]
 808879c:	4b18      	ldr	r3, [pc, #96]	; (8088800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808879e:	681a      	ldr	r2, [r3, #0]
 80887a0:	07d0      	lsls	r0, r2, #31
 80887a2:	bf5c      	itt	pl
 80887a4:	2201      	movpl	r2, #1
 80887a6:	601a      	strpl	r2, [r3, #0]
 80887a8:	4b16      	ldr	r3, [pc, #88]	; (8088804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80887aa:	681a      	ldr	r2, [r3, #0]
 80887ac:	07d1      	lsls	r1, r2, #31
 80887ae:	bf5c      	itt	pl
 80887b0:	2201      	movpl	r2, #1
 80887b2:	601a      	strpl	r2, [r3, #0]
 80887b4:	4b14      	ldr	r3, [pc, #80]	; (8088808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80887b6:	681a      	ldr	r2, [r3, #0]
 80887b8:	07d2      	lsls	r2, r2, #31
 80887ba:	bf5c      	itt	pl
 80887bc:	2201      	movpl	r2, #1
 80887be:	601a      	strpl	r2, [r3, #0]
 80887c0:	4b12      	ldr	r3, [pc, #72]	; (808880c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80887c2:	681a      	ldr	r2, [r3, #0]
 80887c4:	07d0      	lsls	r0, r2, #31
 80887c6:	bf5c      	itt	pl
 80887c8:	2201      	movpl	r2, #1
 80887ca:	601a      	strpl	r2, [r3, #0]
 80887cc:	4b10      	ldr	r3, [pc, #64]	; (8088810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80887ce:	681a      	ldr	r2, [r3, #0]
 80887d0:	07d1      	lsls	r1, r2, #31
 80887d2:	bf5c      	itt	pl
 80887d4:	2201      	movpl	r2, #1
 80887d6:	601a      	strpl	r2, [r3, #0]
 80887d8:	4b0e      	ldr	r3, [pc, #56]	; (8088814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80887da:	681a      	ldr	r2, [r3, #0]
 80887dc:	07d2      	lsls	r2, r2, #31
 80887de:	bf5c      	itt	pl
 80887e0:	2201      	movpl	r2, #1
 80887e2:	601a      	strpl	r2, [r3, #0]
 80887e4:	4770      	bx	lr
 80887e6:	bf00      	nop
 80887e8:	20000f6c 	.word	0x20000f6c
 80887ec:	20000f68 	.word	0x20000f68
 80887f0:	20000f64 	.word	0x20000f64
 80887f4:	20000f60 	.word	0x20000f60
 80887f8:	20000f5c 	.word	0x20000f5c
 80887fc:	20000f58 	.word	0x20000f58
 8088800:	20000f54 	.word	0x20000f54
 8088804:	20000f50 	.word	0x20000f50
 8088808:	20000f4c 	.word	0x20000f4c
 808880c:	20000f48 	.word	0x20000f48
 8088810:	20000f44 	.word	0x20000f44
 8088814:	20000f40 	.word	0x20000f40

08088818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8088818:	4b18      	ldr	r3, [pc, #96]	; (808887c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808881a:	681a      	ldr	r2, [r3, #0]
 808881c:	07d1      	lsls	r1, r2, #31
 808881e:	bf5c      	itt	pl
 8088820:	2201      	movpl	r2, #1
 8088822:	601a      	strpl	r2, [r3, #0]
 8088824:	4b16      	ldr	r3, [pc, #88]	; (8088880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8088826:	681a      	ldr	r2, [r3, #0]
 8088828:	07d2      	lsls	r2, r2, #31
 808882a:	bf5c      	itt	pl
 808882c:	2201      	movpl	r2, #1
 808882e:	601a      	strpl	r2, [r3, #0]
 8088830:	4b14      	ldr	r3, [pc, #80]	; (8088884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8088832:	681a      	ldr	r2, [r3, #0]
 8088834:	07d0      	lsls	r0, r2, #31
 8088836:	bf5c      	itt	pl
 8088838:	2201      	movpl	r2, #1
 808883a:	601a      	strpl	r2, [r3, #0]
 808883c:	4b12      	ldr	r3, [pc, #72]	; (8088888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808883e:	681a      	ldr	r2, [r3, #0]
 8088840:	07d1      	lsls	r1, r2, #31
 8088842:	bf5c      	itt	pl
 8088844:	2201      	movpl	r2, #1
 8088846:	601a      	strpl	r2, [r3, #0]
 8088848:	4b10      	ldr	r3, [pc, #64]	; (808888c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808884a:	681a      	ldr	r2, [r3, #0]
 808884c:	07d2      	lsls	r2, r2, #31
 808884e:	bf5c      	itt	pl
 8088850:	2201      	movpl	r2, #1
 8088852:	601a      	strpl	r2, [r3, #0]
 8088854:	4b0e      	ldr	r3, [pc, #56]	; (8088890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8088856:	681a      	ldr	r2, [r3, #0]
 8088858:	07d0      	lsls	r0, r2, #31
 808885a:	bf5c      	itt	pl
 808885c:	2201      	movpl	r2, #1
 808885e:	601a      	strpl	r2, [r3, #0]
 8088860:	4b0c      	ldr	r3, [pc, #48]	; (8088894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8088862:	681a      	ldr	r2, [r3, #0]
 8088864:	07d1      	lsls	r1, r2, #31
 8088866:	bf5c      	itt	pl
 8088868:	2201      	movpl	r2, #1
 808886a:	601a      	strpl	r2, [r3, #0]
 808886c:	4b0a      	ldr	r3, [pc, #40]	; (8088898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808886e:	681a      	ldr	r2, [r3, #0]
 8088870:	07d2      	lsls	r2, r2, #31
 8088872:	bf5c      	itt	pl
 8088874:	2201      	movpl	r2, #1
 8088876:	601a      	strpl	r2, [r3, #0]
 8088878:	4770      	bx	lr
 808887a:	bf00      	nop
 808887c:	20000f8c 	.word	0x20000f8c
 8088880:	20000f88 	.word	0x20000f88
 8088884:	20000f84 	.word	0x20000f84
 8088888:	20000f80 	.word	0x20000f80
 808888c:	20000f7c 	.word	0x20000f7c
 8088890:	20000f78 	.word	0x20000f78
 8088894:	20000f74 	.word	0x20000f74
 8088898:	20000f70 	.word	0x20000f70

0808889c <__aeabi_drsub>:
 808889c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80888a0:	e002      	b.n	80888a8 <__adddf3>
 80888a2:	bf00      	nop

080888a4 <__aeabi_dsub>:
 80888a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080888a8 <__adddf3>:
 80888a8:	b530      	push	{r4, r5, lr}
 80888aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80888ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80888b2:	ea94 0f05 	teq	r4, r5
 80888b6:	bf08      	it	eq
 80888b8:	ea90 0f02 	teqeq	r0, r2
 80888bc:	bf1f      	itttt	ne
 80888be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80888c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80888c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80888ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80888ce:	f000 80e2 	beq.w	8088a96 <__adddf3+0x1ee>
 80888d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80888d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80888da:	bfb8      	it	lt
 80888dc:	426d      	neglt	r5, r5
 80888de:	dd0c      	ble.n	80888fa <__adddf3+0x52>
 80888e0:	442c      	add	r4, r5
 80888e2:	ea80 0202 	eor.w	r2, r0, r2
 80888e6:	ea81 0303 	eor.w	r3, r1, r3
 80888ea:	ea82 0000 	eor.w	r0, r2, r0
 80888ee:	ea83 0101 	eor.w	r1, r3, r1
 80888f2:	ea80 0202 	eor.w	r2, r0, r2
 80888f6:	ea81 0303 	eor.w	r3, r1, r3
 80888fa:	2d36      	cmp	r5, #54	; 0x36
 80888fc:	bf88      	it	hi
 80888fe:	bd30      	pophi	{r4, r5, pc}
 8088900:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8088904:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8088908:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808890c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8088910:	d002      	beq.n	8088918 <__adddf3+0x70>
 8088912:	4240      	negs	r0, r0
 8088914:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088918:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808891c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088920:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8088924:	d002      	beq.n	808892c <__adddf3+0x84>
 8088926:	4252      	negs	r2, r2
 8088928:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808892c:	ea94 0f05 	teq	r4, r5
 8088930:	f000 80a7 	beq.w	8088a82 <__adddf3+0x1da>
 8088934:	f1a4 0401 	sub.w	r4, r4, #1
 8088938:	f1d5 0e20 	rsbs	lr, r5, #32
 808893c:	db0d      	blt.n	808895a <__adddf3+0xb2>
 808893e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8088942:	fa22 f205 	lsr.w	r2, r2, r5
 8088946:	1880      	adds	r0, r0, r2
 8088948:	f141 0100 	adc.w	r1, r1, #0
 808894c:	fa03 f20e 	lsl.w	r2, r3, lr
 8088950:	1880      	adds	r0, r0, r2
 8088952:	fa43 f305 	asr.w	r3, r3, r5
 8088956:	4159      	adcs	r1, r3
 8088958:	e00e      	b.n	8088978 <__adddf3+0xd0>
 808895a:	f1a5 0520 	sub.w	r5, r5, #32
 808895e:	f10e 0e20 	add.w	lr, lr, #32
 8088962:	2a01      	cmp	r2, #1
 8088964:	fa03 fc0e 	lsl.w	ip, r3, lr
 8088968:	bf28      	it	cs
 808896a:	f04c 0c02 	orrcs.w	ip, ip, #2
 808896e:	fa43 f305 	asr.w	r3, r3, r5
 8088972:	18c0      	adds	r0, r0, r3
 8088974:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8088978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808897c:	d507      	bpl.n	808898e <__adddf3+0xe6>
 808897e:	f04f 0e00 	mov.w	lr, #0
 8088982:	f1dc 0c00 	rsbs	ip, ip, #0
 8088986:	eb7e 0000 	sbcs.w	r0, lr, r0
 808898a:	eb6e 0101 	sbc.w	r1, lr, r1
 808898e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8088992:	d31b      	bcc.n	80889cc <__adddf3+0x124>
 8088994:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8088998:	d30c      	bcc.n	80889b4 <__adddf3+0x10c>
 808899a:	0849      	lsrs	r1, r1, #1
 808899c:	ea5f 0030 	movs.w	r0, r0, rrx
 80889a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80889a4:	f104 0401 	add.w	r4, r4, #1
 80889a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80889ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80889b0:	f080 809a 	bcs.w	8088ae8 <__adddf3+0x240>
 80889b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80889b8:	bf08      	it	eq
 80889ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80889be:	f150 0000 	adcs.w	r0, r0, #0
 80889c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80889c6:	ea41 0105 	orr.w	r1, r1, r5
 80889ca:	bd30      	pop	{r4, r5, pc}
 80889cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80889d0:	4140      	adcs	r0, r0
 80889d2:	eb41 0101 	adc.w	r1, r1, r1
 80889d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80889da:	f1a4 0401 	sub.w	r4, r4, #1
 80889de:	d1e9      	bne.n	80889b4 <__adddf3+0x10c>
 80889e0:	f091 0f00 	teq	r1, #0
 80889e4:	bf04      	itt	eq
 80889e6:	4601      	moveq	r1, r0
 80889e8:	2000      	moveq	r0, #0
 80889ea:	fab1 f381 	clz	r3, r1
 80889ee:	bf08      	it	eq
 80889f0:	3320      	addeq	r3, #32
 80889f2:	f1a3 030b 	sub.w	r3, r3, #11
 80889f6:	f1b3 0220 	subs.w	r2, r3, #32
 80889fa:	da0c      	bge.n	8088a16 <__adddf3+0x16e>
 80889fc:	320c      	adds	r2, #12
 80889fe:	dd08      	ble.n	8088a12 <__adddf3+0x16a>
 8088a00:	f102 0c14 	add.w	ip, r2, #20
 8088a04:	f1c2 020c 	rsb	r2, r2, #12
 8088a08:	fa01 f00c 	lsl.w	r0, r1, ip
 8088a0c:	fa21 f102 	lsr.w	r1, r1, r2
 8088a10:	e00c      	b.n	8088a2c <__adddf3+0x184>
 8088a12:	f102 0214 	add.w	r2, r2, #20
 8088a16:	bfd8      	it	le
 8088a18:	f1c2 0c20 	rsble	ip, r2, #32
 8088a1c:	fa01 f102 	lsl.w	r1, r1, r2
 8088a20:	fa20 fc0c 	lsr.w	ip, r0, ip
 8088a24:	bfdc      	itt	le
 8088a26:	ea41 010c 	orrle.w	r1, r1, ip
 8088a2a:	4090      	lslle	r0, r2
 8088a2c:	1ae4      	subs	r4, r4, r3
 8088a2e:	bfa2      	ittt	ge
 8088a30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8088a34:	4329      	orrge	r1, r5
 8088a36:	bd30      	popge	{r4, r5, pc}
 8088a38:	ea6f 0404 	mvn.w	r4, r4
 8088a3c:	3c1f      	subs	r4, #31
 8088a3e:	da1c      	bge.n	8088a7a <__adddf3+0x1d2>
 8088a40:	340c      	adds	r4, #12
 8088a42:	dc0e      	bgt.n	8088a62 <__adddf3+0x1ba>
 8088a44:	f104 0414 	add.w	r4, r4, #20
 8088a48:	f1c4 0220 	rsb	r2, r4, #32
 8088a4c:	fa20 f004 	lsr.w	r0, r0, r4
 8088a50:	fa01 f302 	lsl.w	r3, r1, r2
 8088a54:	ea40 0003 	orr.w	r0, r0, r3
 8088a58:	fa21 f304 	lsr.w	r3, r1, r4
 8088a5c:	ea45 0103 	orr.w	r1, r5, r3
 8088a60:	bd30      	pop	{r4, r5, pc}
 8088a62:	f1c4 040c 	rsb	r4, r4, #12
 8088a66:	f1c4 0220 	rsb	r2, r4, #32
 8088a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8088a6e:	fa01 f304 	lsl.w	r3, r1, r4
 8088a72:	ea40 0003 	orr.w	r0, r0, r3
 8088a76:	4629      	mov	r1, r5
 8088a78:	bd30      	pop	{r4, r5, pc}
 8088a7a:	fa21 f004 	lsr.w	r0, r1, r4
 8088a7e:	4629      	mov	r1, r5
 8088a80:	bd30      	pop	{r4, r5, pc}
 8088a82:	f094 0f00 	teq	r4, #0
 8088a86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8088a8a:	bf06      	itte	eq
 8088a8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8088a90:	3401      	addeq	r4, #1
 8088a92:	3d01      	subne	r5, #1
 8088a94:	e74e      	b.n	8088934 <__adddf3+0x8c>
 8088a96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088a9a:	bf18      	it	ne
 8088a9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8088aa0:	d029      	beq.n	8088af6 <__adddf3+0x24e>
 8088aa2:	ea94 0f05 	teq	r4, r5
 8088aa6:	bf08      	it	eq
 8088aa8:	ea90 0f02 	teqeq	r0, r2
 8088aac:	d005      	beq.n	8088aba <__adddf3+0x212>
 8088aae:	ea54 0c00 	orrs.w	ip, r4, r0
 8088ab2:	bf04      	itt	eq
 8088ab4:	4619      	moveq	r1, r3
 8088ab6:	4610      	moveq	r0, r2
 8088ab8:	bd30      	pop	{r4, r5, pc}
 8088aba:	ea91 0f03 	teq	r1, r3
 8088abe:	bf1e      	ittt	ne
 8088ac0:	2100      	movne	r1, #0
 8088ac2:	2000      	movne	r0, #0
 8088ac4:	bd30      	popne	{r4, r5, pc}
 8088ac6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8088aca:	d105      	bne.n	8088ad8 <__adddf3+0x230>
 8088acc:	0040      	lsls	r0, r0, #1
 8088ace:	4149      	adcs	r1, r1
 8088ad0:	bf28      	it	cs
 8088ad2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8088ad6:	bd30      	pop	{r4, r5, pc}
 8088ad8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8088adc:	bf3c      	itt	cc
 8088ade:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8088ae2:	bd30      	popcc	{r4, r5, pc}
 8088ae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088ae8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8088aec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088af0:	f04f 0000 	mov.w	r0, #0
 8088af4:	bd30      	pop	{r4, r5, pc}
 8088af6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088afa:	bf1a      	itte	ne
 8088afc:	4619      	movne	r1, r3
 8088afe:	4610      	movne	r0, r2
 8088b00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8088b04:	bf1c      	itt	ne
 8088b06:	460b      	movne	r3, r1
 8088b08:	4602      	movne	r2, r0
 8088b0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088b0e:	bf06      	itte	eq
 8088b10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8088b14:	ea91 0f03 	teqeq	r1, r3
 8088b18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8088b1c:	bd30      	pop	{r4, r5, pc}
 8088b1e:	bf00      	nop

08088b20 <__aeabi_ui2d>:
 8088b20:	f090 0f00 	teq	r0, #0
 8088b24:	bf04      	itt	eq
 8088b26:	2100      	moveq	r1, #0
 8088b28:	4770      	bxeq	lr
 8088b2a:	b530      	push	{r4, r5, lr}
 8088b2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088b30:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088b34:	f04f 0500 	mov.w	r5, #0
 8088b38:	f04f 0100 	mov.w	r1, #0
 8088b3c:	e750      	b.n	80889e0 <__adddf3+0x138>
 8088b3e:	bf00      	nop

08088b40 <__aeabi_i2d>:
 8088b40:	f090 0f00 	teq	r0, #0
 8088b44:	bf04      	itt	eq
 8088b46:	2100      	moveq	r1, #0
 8088b48:	4770      	bxeq	lr
 8088b4a:	b530      	push	{r4, r5, lr}
 8088b4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088b50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088b54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8088b58:	bf48      	it	mi
 8088b5a:	4240      	negmi	r0, r0
 8088b5c:	f04f 0100 	mov.w	r1, #0
 8088b60:	e73e      	b.n	80889e0 <__adddf3+0x138>
 8088b62:	bf00      	nop

08088b64 <__aeabi_f2d>:
 8088b64:	0042      	lsls	r2, r0, #1
 8088b66:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8088b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8088b6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8088b72:	bf1f      	itttt	ne
 8088b74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8088b78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088b7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8088b80:	4770      	bxne	lr
 8088b82:	f092 0f00 	teq	r2, #0
 8088b86:	bf14      	ite	ne
 8088b88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088b8c:	4770      	bxeq	lr
 8088b8e:	b530      	push	{r4, r5, lr}
 8088b90:	f44f 7460 	mov.w	r4, #896	; 0x380
 8088b94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088b98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088b9c:	e720      	b.n	80889e0 <__adddf3+0x138>
 8088b9e:	bf00      	nop

08088ba0 <__aeabi_ul2d>:
 8088ba0:	ea50 0201 	orrs.w	r2, r0, r1
 8088ba4:	bf08      	it	eq
 8088ba6:	4770      	bxeq	lr
 8088ba8:	b530      	push	{r4, r5, lr}
 8088baa:	f04f 0500 	mov.w	r5, #0
 8088bae:	e00a      	b.n	8088bc6 <__aeabi_l2d+0x16>

08088bb0 <__aeabi_l2d>:
 8088bb0:	ea50 0201 	orrs.w	r2, r0, r1
 8088bb4:	bf08      	it	eq
 8088bb6:	4770      	bxeq	lr
 8088bb8:	b530      	push	{r4, r5, lr}
 8088bba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8088bbe:	d502      	bpl.n	8088bc6 <__aeabi_l2d+0x16>
 8088bc0:	4240      	negs	r0, r0
 8088bc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088bc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088bca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088bce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8088bd2:	f43f aedc 	beq.w	808898e <__adddf3+0xe6>
 8088bd6:	f04f 0203 	mov.w	r2, #3
 8088bda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088bde:	bf18      	it	ne
 8088be0:	3203      	addne	r2, #3
 8088be2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088be6:	bf18      	it	ne
 8088be8:	3203      	addne	r2, #3
 8088bea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8088bee:	f1c2 0320 	rsb	r3, r2, #32
 8088bf2:	fa00 fc03 	lsl.w	ip, r0, r3
 8088bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8088bfa:	fa01 fe03 	lsl.w	lr, r1, r3
 8088bfe:	ea40 000e 	orr.w	r0, r0, lr
 8088c02:	fa21 f102 	lsr.w	r1, r1, r2
 8088c06:	4414      	add	r4, r2
 8088c08:	e6c1      	b.n	808898e <__adddf3+0xe6>
 8088c0a:	bf00      	nop

08088c0c <__aeabi_dmul>:
 8088c0c:	b570      	push	{r4, r5, r6, lr}
 8088c0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088c12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088c16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088c1a:	bf1d      	ittte	ne
 8088c1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8088c20:	ea94 0f0c 	teqne	r4, ip
 8088c24:	ea95 0f0c 	teqne	r5, ip
 8088c28:	f000 f8de 	bleq	8088de8 <__aeabi_dmul+0x1dc>
 8088c2c:	442c      	add	r4, r5
 8088c2e:	ea81 0603 	eor.w	r6, r1, r3
 8088c32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8088c36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8088c3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8088c3e:	bf18      	it	ne
 8088c40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8088c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8088c4c:	d038      	beq.n	8088cc0 <__aeabi_dmul+0xb4>
 8088c4e:	fba0 ce02 	umull	ip, lr, r0, r2
 8088c52:	f04f 0500 	mov.w	r5, #0
 8088c56:	fbe1 e502 	umlal	lr, r5, r1, r2
 8088c5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8088c5e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8088c62:	f04f 0600 	mov.w	r6, #0
 8088c66:	fbe1 5603 	umlal	r5, r6, r1, r3
 8088c6a:	f09c 0f00 	teq	ip, #0
 8088c6e:	bf18      	it	ne
 8088c70:	f04e 0e01 	orrne.w	lr, lr, #1
 8088c74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8088c78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8088c7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8088c80:	d204      	bcs.n	8088c8c <__aeabi_dmul+0x80>
 8088c82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8088c86:	416d      	adcs	r5, r5
 8088c88:	eb46 0606 	adc.w	r6, r6, r6
 8088c8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8088c90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8088c94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8088c98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8088c9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8088ca0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8088ca4:	bf88      	it	hi
 8088ca6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088caa:	d81e      	bhi.n	8088cea <__aeabi_dmul+0xde>
 8088cac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8088cb0:	bf08      	it	eq
 8088cb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8088cb6:	f150 0000 	adcs.w	r0, r0, #0
 8088cba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8088cbe:	bd70      	pop	{r4, r5, r6, pc}
 8088cc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8088cc4:	ea46 0101 	orr.w	r1, r6, r1
 8088cc8:	ea40 0002 	orr.w	r0, r0, r2
 8088ccc:	ea81 0103 	eor.w	r1, r1, r3
 8088cd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8088cd4:	bfc2      	ittt	gt
 8088cd6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088cda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088cde:	bd70      	popgt	{r4, r5, r6, pc}
 8088ce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088ce4:	f04f 0e00 	mov.w	lr, #0
 8088ce8:	3c01      	subs	r4, #1
 8088cea:	f300 80ab 	bgt.w	8088e44 <__aeabi_dmul+0x238>
 8088cee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8088cf2:	bfde      	ittt	le
 8088cf4:	2000      	movle	r0, #0
 8088cf6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8088cfa:	bd70      	pople	{r4, r5, r6, pc}
 8088cfc:	f1c4 0400 	rsb	r4, r4, #0
 8088d00:	3c20      	subs	r4, #32
 8088d02:	da35      	bge.n	8088d70 <__aeabi_dmul+0x164>
 8088d04:	340c      	adds	r4, #12
 8088d06:	dc1b      	bgt.n	8088d40 <__aeabi_dmul+0x134>
 8088d08:	f104 0414 	add.w	r4, r4, #20
 8088d0c:	f1c4 0520 	rsb	r5, r4, #32
 8088d10:	fa00 f305 	lsl.w	r3, r0, r5
 8088d14:	fa20 f004 	lsr.w	r0, r0, r4
 8088d18:	fa01 f205 	lsl.w	r2, r1, r5
 8088d1c:	ea40 0002 	orr.w	r0, r0, r2
 8088d20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8088d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088d28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088d2c:	fa21 f604 	lsr.w	r6, r1, r4
 8088d30:	eb42 0106 	adc.w	r1, r2, r6
 8088d34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088d38:	bf08      	it	eq
 8088d3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088d3e:	bd70      	pop	{r4, r5, r6, pc}
 8088d40:	f1c4 040c 	rsb	r4, r4, #12
 8088d44:	f1c4 0520 	rsb	r5, r4, #32
 8088d48:	fa00 f304 	lsl.w	r3, r0, r4
 8088d4c:	fa20 f005 	lsr.w	r0, r0, r5
 8088d50:	fa01 f204 	lsl.w	r2, r1, r4
 8088d54:	ea40 0002 	orr.w	r0, r0, r2
 8088d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088d5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088d60:	f141 0100 	adc.w	r1, r1, #0
 8088d64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088d68:	bf08      	it	eq
 8088d6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088d6e:	bd70      	pop	{r4, r5, r6, pc}
 8088d70:	f1c4 0520 	rsb	r5, r4, #32
 8088d74:	fa00 f205 	lsl.w	r2, r0, r5
 8088d78:	ea4e 0e02 	orr.w	lr, lr, r2
 8088d7c:	fa20 f304 	lsr.w	r3, r0, r4
 8088d80:	fa01 f205 	lsl.w	r2, r1, r5
 8088d84:	ea43 0302 	orr.w	r3, r3, r2
 8088d88:	fa21 f004 	lsr.w	r0, r1, r4
 8088d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088d90:	fa21 f204 	lsr.w	r2, r1, r4
 8088d94:	ea20 0002 	bic.w	r0, r0, r2
 8088d98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8088d9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088da0:	bf08      	it	eq
 8088da2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088da6:	bd70      	pop	{r4, r5, r6, pc}
 8088da8:	f094 0f00 	teq	r4, #0
 8088dac:	d10f      	bne.n	8088dce <__aeabi_dmul+0x1c2>
 8088dae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8088db2:	0040      	lsls	r0, r0, #1
 8088db4:	eb41 0101 	adc.w	r1, r1, r1
 8088db8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088dbc:	bf08      	it	eq
 8088dbe:	3c01      	subeq	r4, #1
 8088dc0:	d0f7      	beq.n	8088db2 <__aeabi_dmul+0x1a6>
 8088dc2:	ea41 0106 	orr.w	r1, r1, r6
 8088dc6:	f095 0f00 	teq	r5, #0
 8088dca:	bf18      	it	ne
 8088dcc:	4770      	bxne	lr
 8088dce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8088dd2:	0052      	lsls	r2, r2, #1
 8088dd4:	eb43 0303 	adc.w	r3, r3, r3
 8088dd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8088ddc:	bf08      	it	eq
 8088dde:	3d01      	subeq	r5, #1
 8088de0:	d0f7      	beq.n	8088dd2 <__aeabi_dmul+0x1c6>
 8088de2:	ea43 0306 	orr.w	r3, r3, r6
 8088de6:	4770      	bx	lr
 8088de8:	ea94 0f0c 	teq	r4, ip
 8088dec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8088df0:	bf18      	it	ne
 8088df2:	ea95 0f0c 	teqne	r5, ip
 8088df6:	d00c      	beq.n	8088e12 <__aeabi_dmul+0x206>
 8088df8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088dfc:	bf18      	it	ne
 8088dfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088e02:	d1d1      	bne.n	8088da8 <__aeabi_dmul+0x19c>
 8088e04:	ea81 0103 	eor.w	r1, r1, r3
 8088e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088e0c:	f04f 0000 	mov.w	r0, #0
 8088e10:	bd70      	pop	{r4, r5, r6, pc}
 8088e12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088e16:	bf06      	itte	eq
 8088e18:	4610      	moveq	r0, r2
 8088e1a:	4619      	moveq	r1, r3
 8088e1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088e20:	d019      	beq.n	8088e56 <__aeabi_dmul+0x24a>
 8088e22:	ea94 0f0c 	teq	r4, ip
 8088e26:	d102      	bne.n	8088e2e <__aeabi_dmul+0x222>
 8088e28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8088e2c:	d113      	bne.n	8088e56 <__aeabi_dmul+0x24a>
 8088e2e:	ea95 0f0c 	teq	r5, ip
 8088e32:	d105      	bne.n	8088e40 <__aeabi_dmul+0x234>
 8088e34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8088e38:	bf1c      	itt	ne
 8088e3a:	4610      	movne	r0, r2
 8088e3c:	4619      	movne	r1, r3
 8088e3e:	d10a      	bne.n	8088e56 <__aeabi_dmul+0x24a>
 8088e40:	ea81 0103 	eor.w	r1, r1, r3
 8088e44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088e48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088e4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088e50:	f04f 0000 	mov.w	r0, #0
 8088e54:	bd70      	pop	{r4, r5, r6, pc}
 8088e56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088e5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8088e5e:	bd70      	pop	{r4, r5, r6, pc}

08088e60 <__aeabi_ddiv>:
 8088e60:	b570      	push	{r4, r5, r6, lr}
 8088e62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088e66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088e6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088e6e:	bf1d      	ittte	ne
 8088e70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8088e74:	ea94 0f0c 	teqne	r4, ip
 8088e78:	ea95 0f0c 	teqne	r5, ip
 8088e7c:	f000 f8a7 	bleq	8088fce <__aeabi_ddiv+0x16e>
 8088e80:	eba4 0405 	sub.w	r4, r4, r5
 8088e84:	ea81 0e03 	eor.w	lr, r1, r3
 8088e88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088e8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8088e90:	f000 8088 	beq.w	8088fa4 <__aeabi_ddiv+0x144>
 8088e94:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088e98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8088e9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8088ea0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8088ea4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8088ea8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8088eac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8088eb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8088eb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8088eb8:	429d      	cmp	r5, r3
 8088eba:	bf08      	it	eq
 8088ebc:	4296      	cmpeq	r6, r2
 8088ebe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8088ec2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8088ec6:	d202      	bcs.n	8088ece <__aeabi_ddiv+0x6e>
 8088ec8:	085b      	lsrs	r3, r3, #1
 8088eca:	ea4f 0232 	mov.w	r2, r2, rrx
 8088ece:	1ab6      	subs	r6, r6, r2
 8088ed0:	eb65 0503 	sbc.w	r5, r5, r3
 8088ed4:	085b      	lsrs	r3, r3, #1
 8088ed6:	ea4f 0232 	mov.w	r2, r2, rrx
 8088eda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8088ede:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8088ee2:	ebb6 0e02 	subs.w	lr, r6, r2
 8088ee6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088eea:	bf22      	ittt	cs
 8088eec:	1ab6      	subcs	r6, r6, r2
 8088eee:	4675      	movcs	r5, lr
 8088ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8088ef4:	085b      	lsrs	r3, r3, #1
 8088ef6:	ea4f 0232 	mov.w	r2, r2, rrx
 8088efa:	ebb6 0e02 	subs.w	lr, r6, r2
 8088efe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088f02:	bf22      	ittt	cs
 8088f04:	1ab6      	subcs	r6, r6, r2
 8088f06:	4675      	movcs	r5, lr
 8088f08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088f0c:	085b      	lsrs	r3, r3, #1
 8088f0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8088f12:	ebb6 0e02 	subs.w	lr, r6, r2
 8088f16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088f1a:	bf22      	ittt	cs
 8088f1c:	1ab6      	subcs	r6, r6, r2
 8088f1e:	4675      	movcs	r5, lr
 8088f20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088f24:	085b      	lsrs	r3, r3, #1
 8088f26:	ea4f 0232 	mov.w	r2, r2, rrx
 8088f2a:	ebb6 0e02 	subs.w	lr, r6, r2
 8088f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088f32:	bf22      	ittt	cs
 8088f34:	1ab6      	subcs	r6, r6, r2
 8088f36:	4675      	movcs	r5, lr
 8088f38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088f3c:	ea55 0e06 	orrs.w	lr, r5, r6
 8088f40:	d018      	beq.n	8088f74 <__aeabi_ddiv+0x114>
 8088f42:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8088f46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8088f4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8088f4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8088f52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8088f56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8088f5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8088f5e:	d1c0      	bne.n	8088ee2 <__aeabi_ddiv+0x82>
 8088f60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088f64:	d10b      	bne.n	8088f7e <__aeabi_ddiv+0x11e>
 8088f66:	ea41 0100 	orr.w	r1, r1, r0
 8088f6a:	f04f 0000 	mov.w	r0, #0
 8088f6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8088f72:	e7b6      	b.n	8088ee2 <__aeabi_ddiv+0x82>
 8088f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088f78:	bf04      	itt	eq
 8088f7a:	4301      	orreq	r1, r0
 8088f7c:	2000      	moveq	r0, #0
 8088f7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8088f82:	bf88      	it	hi
 8088f84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088f88:	f63f aeaf 	bhi.w	8088cea <__aeabi_dmul+0xde>
 8088f8c:	ebb5 0c03 	subs.w	ip, r5, r3
 8088f90:	bf04      	itt	eq
 8088f92:	ebb6 0c02 	subseq.w	ip, r6, r2
 8088f96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8088f9a:	f150 0000 	adcs.w	r0, r0, #0
 8088f9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8088fa2:	bd70      	pop	{r4, r5, r6, pc}
 8088fa4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8088fa8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8088fac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8088fb0:	bfc2      	ittt	gt
 8088fb2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088fb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088fba:	bd70      	popgt	{r4, r5, r6, pc}
 8088fbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088fc0:	f04f 0e00 	mov.w	lr, #0
 8088fc4:	3c01      	subs	r4, #1
 8088fc6:	e690      	b.n	8088cea <__aeabi_dmul+0xde>
 8088fc8:	ea45 0e06 	orr.w	lr, r5, r6
 8088fcc:	e68d      	b.n	8088cea <__aeabi_dmul+0xde>
 8088fce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8088fd2:	ea94 0f0c 	teq	r4, ip
 8088fd6:	bf08      	it	eq
 8088fd8:	ea95 0f0c 	teqeq	r5, ip
 8088fdc:	f43f af3b 	beq.w	8088e56 <__aeabi_dmul+0x24a>
 8088fe0:	ea94 0f0c 	teq	r4, ip
 8088fe4:	d10a      	bne.n	8088ffc <__aeabi_ddiv+0x19c>
 8088fe6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088fea:	f47f af34 	bne.w	8088e56 <__aeabi_dmul+0x24a>
 8088fee:	ea95 0f0c 	teq	r5, ip
 8088ff2:	f47f af25 	bne.w	8088e40 <__aeabi_dmul+0x234>
 8088ff6:	4610      	mov	r0, r2
 8088ff8:	4619      	mov	r1, r3
 8088ffa:	e72c      	b.n	8088e56 <__aeabi_dmul+0x24a>
 8088ffc:	ea95 0f0c 	teq	r5, ip
 8089000:	d106      	bne.n	8089010 <__aeabi_ddiv+0x1b0>
 8089002:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8089006:	f43f aefd 	beq.w	8088e04 <__aeabi_dmul+0x1f8>
 808900a:	4610      	mov	r0, r2
 808900c:	4619      	mov	r1, r3
 808900e:	e722      	b.n	8088e56 <__aeabi_dmul+0x24a>
 8089010:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089014:	bf18      	it	ne
 8089016:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808901a:	f47f aec5 	bne.w	8088da8 <__aeabi_dmul+0x19c>
 808901e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8089022:	f47f af0d 	bne.w	8088e40 <__aeabi_dmul+0x234>
 8089026:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808902a:	f47f aeeb 	bne.w	8088e04 <__aeabi_dmul+0x1f8>
 808902e:	e712      	b.n	8088e56 <__aeabi_dmul+0x24a>

08089030 <__gedf2>:
 8089030:	f04f 3cff 	mov.w	ip, #4294967295
 8089034:	e006      	b.n	8089044 <__cmpdf2+0x4>
 8089036:	bf00      	nop

08089038 <__ledf2>:
 8089038:	f04f 0c01 	mov.w	ip, #1
 808903c:	e002      	b.n	8089044 <__cmpdf2+0x4>
 808903e:	bf00      	nop

08089040 <__cmpdf2>:
 8089040:	f04f 0c01 	mov.w	ip, #1
 8089044:	f84d cd04 	str.w	ip, [sp, #-4]!
 8089048:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808904c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089050:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8089054:	bf18      	it	ne
 8089056:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808905a:	d01b      	beq.n	8089094 <__cmpdf2+0x54>
 808905c:	b001      	add	sp, #4
 808905e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8089062:	bf0c      	ite	eq
 8089064:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8089068:	ea91 0f03 	teqne	r1, r3
 808906c:	bf02      	ittt	eq
 808906e:	ea90 0f02 	teqeq	r0, r2
 8089072:	2000      	moveq	r0, #0
 8089074:	4770      	bxeq	lr
 8089076:	f110 0f00 	cmn.w	r0, #0
 808907a:	ea91 0f03 	teq	r1, r3
 808907e:	bf58      	it	pl
 8089080:	4299      	cmppl	r1, r3
 8089082:	bf08      	it	eq
 8089084:	4290      	cmpeq	r0, r2
 8089086:	bf2c      	ite	cs
 8089088:	17d8      	asrcs	r0, r3, #31
 808908a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808908e:	f040 0001 	orr.w	r0, r0, #1
 8089092:	4770      	bx	lr
 8089094:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8089098:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808909c:	d102      	bne.n	80890a4 <__cmpdf2+0x64>
 808909e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80890a2:	d107      	bne.n	80890b4 <__cmpdf2+0x74>
 80890a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80890a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80890ac:	d1d6      	bne.n	808905c <__cmpdf2+0x1c>
 80890ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80890b2:	d0d3      	beq.n	808905c <__cmpdf2+0x1c>
 80890b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80890b8:	4770      	bx	lr
 80890ba:	bf00      	nop

080890bc <__aeabi_cdrcmple>:
 80890bc:	4684      	mov	ip, r0
 80890be:	4610      	mov	r0, r2
 80890c0:	4662      	mov	r2, ip
 80890c2:	468c      	mov	ip, r1
 80890c4:	4619      	mov	r1, r3
 80890c6:	4663      	mov	r3, ip
 80890c8:	e000      	b.n	80890cc <__aeabi_cdcmpeq>
 80890ca:	bf00      	nop

080890cc <__aeabi_cdcmpeq>:
 80890cc:	b501      	push	{r0, lr}
 80890ce:	f7ff ffb7 	bl	8089040 <__cmpdf2>
 80890d2:	2800      	cmp	r0, #0
 80890d4:	bf48      	it	mi
 80890d6:	f110 0f00 	cmnmi.w	r0, #0
 80890da:	bd01      	pop	{r0, pc}

080890dc <__aeabi_dcmpeq>:
 80890dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890e0:	f7ff fff4 	bl	80890cc <__aeabi_cdcmpeq>
 80890e4:	bf0c      	ite	eq
 80890e6:	2001      	moveq	r0, #1
 80890e8:	2000      	movne	r0, #0
 80890ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80890ee:	bf00      	nop

080890f0 <__aeabi_dcmplt>:
 80890f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890f4:	f7ff ffea 	bl	80890cc <__aeabi_cdcmpeq>
 80890f8:	bf34      	ite	cc
 80890fa:	2001      	movcc	r0, #1
 80890fc:	2000      	movcs	r0, #0
 80890fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8089102:	bf00      	nop

08089104 <__aeabi_dcmple>:
 8089104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089108:	f7ff ffe0 	bl	80890cc <__aeabi_cdcmpeq>
 808910c:	bf94      	ite	ls
 808910e:	2001      	movls	r0, #1
 8089110:	2000      	movhi	r0, #0
 8089112:	f85d fb08 	ldr.w	pc, [sp], #8
 8089116:	bf00      	nop

08089118 <__aeabi_dcmpge>:
 8089118:	f84d ed08 	str.w	lr, [sp, #-8]!
 808911c:	f7ff ffce 	bl	80890bc <__aeabi_cdrcmple>
 8089120:	bf94      	ite	ls
 8089122:	2001      	movls	r0, #1
 8089124:	2000      	movhi	r0, #0
 8089126:	f85d fb08 	ldr.w	pc, [sp], #8
 808912a:	bf00      	nop

0808912c <__aeabi_dcmpgt>:
 808912c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089130:	f7ff ffc4 	bl	80890bc <__aeabi_cdrcmple>
 8089134:	bf34      	ite	cc
 8089136:	2001      	movcc	r0, #1
 8089138:	2000      	movcs	r0, #0
 808913a:	f85d fb08 	ldr.w	pc, [sp], #8
 808913e:	bf00      	nop

08089140 <__aeabi_d2iz>:
 8089140:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8089144:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8089148:	d215      	bcs.n	8089176 <__aeabi_d2iz+0x36>
 808914a:	d511      	bpl.n	8089170 <__aeabi_d2iz+0x30>
 808914c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8089150:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8089154:	d912      	bls.n	808917c <__aeabi_d2iz+0x3c>
 8089156:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808915a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808915e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8089162:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089166:	fa23 f002 	lsr.w	r0, r3, r2
 808916a:	bf18      	it	ne
 808916c:	4240      	negne	r0, r0
 808916e:	4770      	bx	lr
 8089170:	f04f 0000 	mov.w	r0, #0
 8089174:	4770      	bx	lr
 8089176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808917a:	d105      	bne.n	8089188 <__aeabi_d2iz+0x48>
 808917c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8089180:	bf08      	it	eq
 8089182:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089186:	4770      	bx	lr
 8089188:	f04f 0000 	mov.w	r0, #0
 808918c:	4770      	bx	lr
 808918e:	bf00      	nop

08089190 <__aeabi_d2uiz>:
 8089190:	004a      	lsls	r2, r1, #1
 8089192:	d211      	bcs.n	80891b8 <__aeabi_d2uiz+0x28>
 8089194:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8089198:	d211      	bcs.n	80891be <__aeabi_d2uiz+0x2e>
 808919a:	d50d      	bpl.n	80891b8 <__aeabi_d2uiz+0x28>
 808919c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80891a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80891a4:	d40e      	bmi.n	80891c4 <__aeabi_d2uiz+0x34>
 80891a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80891aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80891ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80891b2:	fa23 f002 	lsr.w	r0, r3, r2
 80891b6:	4770      	bx	lr
 80891b8:	f04f 0000 	mov.w	r0, #0
 80891bc:	4770      	bx	lr
 80891be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80891c2:	d102      	bne.n	80891ca <__aeabi_d2uiz+0x3a>
 80891c4:	f04f 30ff 	mov.w	r0, #4294967295
 80891c8:	4770      	bx	lr
 80891ca:	f04f 0000 	mov.w	r0, #0
 80891ce:	4770      	bx	lr

080891d0 <__aeabi_d2f>:
 80891d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80891d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80891d8:	bf24      	itt	cs
 80891da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80891de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80891e2:	d90d      	bls.n	8089200 <__aeabi_d2f+0x30>
 80891e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80891e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80891ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80891f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80891f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80891f8:	bf08      	it	eq
 80891fa:	f020 0001 	biceq.w	r0, r0, #1
 80891fe:	4770      	bx	lr
 8089200:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8089204:	d121      	bne.n	808924a <__aeabi_d2f+0x7a>
 8089206:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808920a:	bfbc      	itt	lt
 808920c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8089210:	4770      	bxlt	lr
 8089212:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089216:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808921a:	f1c2 0218 	rsb	r2, r2, #24
 808921e:	f1c2 0c20 	rsb	ip, r2, #32
 8089222:	fa10 f30c 	lsls.w	r3, r0, ip
 8089226:	fa20 f002 	lsr.w	r0, r0, r2
 808922a:	bf18      	it	ne
 808922c:	f040 0001 	orrne.w	r0, r0, #1
 8089230:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8089234:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8089238:	fa03 fc0c 	lsl.w	ip, r3, ip
 808923c:	ea40 000c 	orr.w	r0, r0, ip
 8089240:	fa23 f302 	lsr.w	r3, r3, r2
 8089244:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8089248:	e7cc      	b.n	80891e4 <__aeabi_d2f+0x14>
 808924a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808924e:	d107      	bne.n	8089260 <__aeabi_d2f+0x90>
 8089250:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8089254:	bf1e      	ittt	ne
 8089256:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808925a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808925e:	4770      	bxne	lr
 8089260:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8089264:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8089268:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808926c:	4770      	bx	lr
 808926e:	bf00      	nop

08089270 <__aeabi_frsub>:
 8089270:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8089274:	e002      	b.n	808927c <__addsf3>
 8089276:	bf00      	nop

08089278 <__aeabi_fsub>:
 8089278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808927c <__addsf3>:
 808927c:	0042      	lsls	r2, r0, #1
 808927e:	bf1f      	itttt	ne
 8089280:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8089284:	ea92 0f03 	teqne	r2, r3
 8089288:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808928c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089290:	d06a      	beq.n	8089368 <__addsf3+0xec>
 8089292:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8089296:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808929a:	bfc1      	itttt	gt
 808929c:	18d2      	addgt	r2, r2, r3
 808929e:	4041      	eorgt	r1, r0
 80892a0:	4048      	eorgt	r0, r1
 80892a2:	4041      	eorgt	r1, r0
 80892a4:	bfb8      	it	lt
 80892a6:	425b      	neglt	r3, r3
 80892a8:	2b19      	cmp	r3, #25
 80892aa:	bf88      	it	hi
 80892ac:	4770      	bxhi	lr
 80892ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80892b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80892b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80892ba:	bf18      	it	ne
 80892bc:	4240      	negne	r0, r0
 80892be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80892c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80892c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80892ca:	bf18      	it	ne
 80892cc:	4249      	negne	r1, r1
 80892ce:	ea92 0f03 	teq	r2, r3
 80892d2:	d03f      	beq.n	8089354 <__addsf3+0xd8>
 80892d4:	f1a2 0201 	sub.w	r2, r2, #1
 80892d8:	fa41 fc03 	asr.w	ip, r1, r3
 80892dc:	eb10 000c 	adds.w	r0, r0, ip
 80892e0:	f1c3 0320 	rsb	r3, r3, #32
 80892e4:	fa01 f103 	lsl.w	r1, r1, r3
 80892e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80892ec:	d502      	bpl.n	80892f4 <__addsf3+0x78>
 80892ee:	4249      	negs	r1, r1
 80892f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80892f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80892f8:	d313      	bcc.n	8089322 <__addsf3+0xa6>
 80892fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80892fe:	d306      	bcc.n	808930e <__addsf3+0x92>
 8089300:	0840      	lsrs	r0, r0, #1
 8089302:	ea4f 0131 	mov.w	r1, r1, rrx
 8089306:	f102 0201 	add.w	r2, r2, #1
 808930a:	2afe      	cmp	r2, #254	; 0xfe
 808930c:	d251      	bcs.n	80893b2 <__addsf3+0x136>
 808930e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8089312:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8089316:	bf08      	it	eq
 8089318:	f020 0001 	biceq.w	r0, r0, #1
 808931c:	ea40 0003 	orr.w	r0, r0, r3
 8089320:	4770      	bx	lr
 8089322:	0049      	lsls	r1, r1, #1
 8089324:	eb40 0000 	adc.w	r0, r0, r0
 8089328:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808932c:	f1a2 0201 	sub.w	r2, r2, #1
 8089330:	d1ed      	bne.n	808930e <__addsf3+0x92>
 8089332:	fab0 fc80 	clz	ip, r0
 8089336:	f1ac 0c08 	sub.w	ip, ip, #8
 808933a:	ebb2 020c 	subs.w	r2, r2, ip
 808933e:	fa00 f00c 	lsl.w	r0, r0, ip
 8089342:	bfaa      	itet	ge
 8089344:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8089348:	4252      	neglt	r2, r2
 808934a:	4318      	orrge	r0, r3
 808934c:	bfbc      	itt	lt
 808934e:	40d0      	lsrlt	r0, r2
 8089350:	4318      	orrlt	r0, r3
 8089352:	4770      	bx	lr
 8089354:	f092 0f00 	teq	r2, #0
 8089358:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808935c:	bf06      	itte	eq
 808935e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8089362:	3201      	addeq	r2, #1
 8089364:	3b01      	subne	r3, #1
 8089366:	e7b5      	b.n	80892d4 <__addsf3+0x58>
 8089368:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808936c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089370:	bf18      	it	ne
 8089372:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089376:	d021      	beq.n	80893bc <__addsf3+0x140>
 8089378:	ea92 0f03 	teq	r2, r3
 808937c:	d004      	beq.n	8089388 <__addsf3+0x10c>
 808937e:	f092 0f00 	teq	r2, #0
 8089382:	bf08      	it	eq
 8089384:	4608      	moveq	r0, r1
 8089386:	4770      	bx	lr
 8089388:	ea90 0f01 	teq	r0, r1
 808938c:	bf1c      	itt	ne
 808938e:	2000      	movne	r0, #0
 8089390:	4770      	bxne	lr
 8089392:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8089396:	d104      	bne.n	80893a2 <__addsf3+0x126>
 8089398:	0040      	lsls	r0, r0, #1
 808939a:	bf28      	it	cs
 808939c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80893a0:	4770      	bx	lr
 80893a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80893a6:	bf3c      	itt	cc
 80893a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80893ac:	4770      	bxcc	lr
 80893ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80893b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80893b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80893ba:	4770      	bx	lr
 80893bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80893c0:	bf16      	itet	ne
 80893c2:	4608      	movne	r0, r1
 80893c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80893c8:	4601      	movne	r1, r0
 80893ca:	0242      	lsls	r2, r0, #9
 80893cc:	bf06      	itte	eq
 80893ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80893d2:	ea90 0f01 	teqeq	r0, r1
 80893d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80893da:	4770      	bx	lr

080893dc <__aeabi_ui2f>:
 80893dc:	f04f 0300 	mov.w	r3, #0
 80893e0:	e004      	b.n	80893ec <__aeabi_i2f+0x8>
 80893e2:	bf00      	nop

080893e4 <__aeabi_i2f>:
 80893e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80893e8:	bf48      	it	mi
 80893ea:	4240      	negmi	r0, r0
 80893ec:	ea5f 0c00 	movs.w	ip, r0
 80893f0:	bf08      	it	eq
 80893f2:	4770      	bxeq	lr
 80893f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80893f8:	4601      	mov	r1, r0
 80893fa:	f04f 0000 	mov.w	r0, #0
 80893fe:	e01c      	b.n	808943a <__aeabi_l2f+0x2a>

08089400 <__aeabi_ul2f>:
 8089400:	ea50 0201 	orrs.w	r2, r0, r1
 8089404:	bf08      	it	eq
 8089406:	4770      	bxeq	lr
 8089408:	f04f 0300 	mov.w	r3, #0
 808940c:	e00a      	b.n	8089424 <__aeabi_l2f+0x14>
 808940e:	bf00      	nop

08089410 <__aeabi_l2f>:
 8089410:	ea50 0201 	orrs.w	r2, r0, r1
 8089414:	bf08      	it	eq
 8089416:	4770      	bxeq	lr
 8089418:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808941c:	d502      	bpl.n	8089424 <__aeabi_l2f+0x14>
 808941e:	4240      	negs	r0, r0
 8089420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089424:	ea5f 0c01 	movs.w	ip, r1
 8089428:	bf02      	ittt	eq
 808942a:	4684      	moveq	ip, r0
 808942c:	4601      	moveq	r1, r0
 808942e:	2000      	moveq	r0, #0
 8089430:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8089434:	bf08      	it	eq
 8089436:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808943a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808943e:	fabc f28c 	clz	r2, ip
 8089442:	3a08      	subs	r2, #8
 8089444:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8089448:	db10      	blt.n	808946c <__aeabi_l2f+0x5c>
 808944a:	fa01 fc02 	lsl.w	ip, r1, r2
 808944e:	4463      	add	r3, ip
 8089450:	fa00 fc02 	lsl.w	ip, r0, r2
 8089454:	f1c2 0220 	rsb	r2, r2, #32
 8089458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808945c:	fa20 f202 	lsr.w	r2, r0, r2
 8089460:	eb43 0002 	adc.w	r0, r3, r2
 8089464:	bf08      	it	eq
 8089466:	f020 0001 	biceq.w	r0, r0, #1
 808946a:	4770      	bx	lr
 808946c:	f102 0220 	add.w	r2, r2, #32
 8089470:	fa01 fc02 	lsl.w	ip, r1, r2
 8089474:	f1c2 0220 	rsb	r2, r2, #32
 8089478:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808947c:	fa21 f202 	lsr.w	r2, r1, r2
 8089480:	eb43 0002 	adc.w	r0, r3, r2
 8089484:	bf08      	it	eq
 8089486:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808948a:	4770      	bx	lr

0808948c <__aeabi_fmul>:
 808948c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089490:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8089494:	bf1e      	ittt	ne
 8089496:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808949a:	ea92 0f0c 	teqne	r2, ip
 808949e:	ea93 0f0c 	teqne	r3, ip
 80894a2:	d06f      	beq.n	8089584 <__aeabi_fmul+0xf8>
 80894a4:	441a      	add	r2, r3
 80894a6:	ea80 0c01 	eor.w	ip, r0, r1
 80894aa:	0240      	lsls	r0, r0, #9
 80894ac:	bf18      	it	ne
 80894ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80894b2:	d01e      	beq.n	80894f2 <__aeabi_fmul+0x66>
 80894b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80894b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80894bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80894c0:	fba0 3101 	umull	r3, r1, r0, r1
 80894c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80894c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80894cc:	bf3e      	ittt	cc
 80894ce:	0049      	lslcc	r1, r1, #1
 80894d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80894d4:	005b      	lslcc	r3, r3, #1
 80894d6:	ea40 0001 	orr.w	r0, r0, r1
 80894da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80894de:	2afd      	cmp	r2, #253	; 0xfd
 80894e0:	d81d      	bhi.n	808951e <__aeabi_fmul+0x92>
 80894e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80894e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80894ea:	bf08      	it	eq
 80894ec:	f020 0001 	biceq.w	r0, r0, #1
 80894f0:	4770      	bx	lr
 80894f2:	f090 0f00 	teq	r0, #0
 80894f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80894fa:	bf08      	it	eq
 80894fc:	0249      	lsleq	r1, r1, #9
 80894fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8089502:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8089506:	3a7f      	subs	r2, #127	; 0x7f
 8089508:	bfc2      	ittt	gt
 808950a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808950e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8089512:	4770      	bxgt	lr
 8089514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089518:	f04f 0300 	mov.w	r3, #0
 808951c:	3a01      	subs	r2, #1
 808951e:	dc5d      	bgt.n	80895dc <__aeabi_fmul+0x150>
 8089520:	f112 0f19 	cmn.w	r2, #25
 8089524:	bfdc      	itt	le
 8089526:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808952a:	4770      	bxle	lr
 808952c:	f1c2 0200 	rsb	r2, r2, #0
 8089530:	0041      	lsls	r1, r0, #1
 8089532:	fa21 f102 	lsr.w	r1, r1, r2
 8089536:	f1c2 0220 	rsb	r2, r2, #32
 808953a:	fa00 fc02 	lsl.w	ip, r0, r2
 808953e:	ea5f 0031 	movs.w	r0, r1, rrx
 8089542:	f140 0000 	adc.w	r0, r0, #0
 8089546:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808954a:	bf08      	it	eq
 808954c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8089550:	4770      	bx	lr
 8089552:	f092 0f00 	teq	r2, #0
 8089556:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808955a:	bf02      	ittt	eq
 808955c:	0040      	lsleq	r0, r0, #1
 808955e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8089562:	3a01      	subeq	r2, #1
 8089564:	d0f9      	beq.n	808955a <__aeabi_fmul+0xce>
 8089566:	ea40 000c 	orr.w	r0, r0, ip
 808956a:	f093 0f00 	teq	r3, #0
 808956e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089572:	bf02      	ittt	eq
 8089574:	0049      	lsleq	r1, r1, #1
 8089576:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808957a:	3b01      	subeq	r3, #1
 808957c:	d0f9      	beq.n	8089572 <__aeabi_fmul+0xe6>
 808957e:	ea41 010c 	orr.w	r1, r1, ip
 8089582:	e78f      	b.n	80894a4 <__aeabi_fmul+0x18>
 8089584:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8089588:	ea92 0f0c 	teq	r2, ip
 808958c:	bf18      	it	ne
 808958e:	ea93 0f0c 	teqne	r3, ip
 8089592:	d00a      	beq.n	80895aa <__aeabi_fmul+0x11e>
 8089594:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8089598:	bf18      	it	ne
 808959a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808959e:	d1d8      	bne.n	8089552 <__aeabi_fmul+0xc6>
 80895a0:	ea80 0001 	eor.w	r0, r0, r1
 80895a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80895a8:	4770      	bx	lr
 80895aa:	f090 0f00 	teq	r0, #0
 80895ae:	bf17      	itett	ne
 80895b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80895b4:	4608      	moveq	r0, r1
 80895b6:	f091 0f00 	teqne	r1, #0
 80895ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80895be:	d014      	beq.n	80895ea <__aeabi_fmul+0x15e>
 80895c0:	ea92 0f0c 	teq	r2, ip
 80895c4:	d101      	bne.n	80895ca <__aeabi_fmul+0x13e>
 80895c6:	0242      	lsls	r2, r0, #9
 80895c8:	d10f      	bne.n	80895ea <__aeabi_fmul+0x15e>
 80895ca:	ea93 0f0c 	teq	r3, ip
 80895ce:	d103      	bne.n	80895d8 <__aeabi_fmul+0x14c>
 80895d0:	024b      	lsls	r3, r1, #9
 80895d2:	bf18      	it	ne
 80895d4:	4608      	movne	r0, r1
 80895d6:	d108      	bne.n	80895ea <__aeabi_fmul+0x15e>
 80895d8:	ea80 0001 	eor.w	r0, r0, r1
 80895dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80895e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80895e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80895e8:	4770      	bx	lr
 80895ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80895ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80895f2:	4770      	bx	lr

080895f4 <__aeabi_fdiv>:
 80895f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80895f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80895fc:	bf1e      	ittt	ne
 80895fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8089602:	ea92 0f0c 	teqne	r2, ip
 8089606:	ea93 0f0c 	teqne	r3, ip
 808960a:	d069      	beq.n	80896e0 <__aeabi_fdiv+0xec>
 808960c:	eba2 0203 	sub.w	r2, r2, r3
 8089610:	ea80 0c01 	eor.w	ip, r0, r1
 8089614:	0249      	lsls	r1, r1, #9
 8089616:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808961a:	d037      	beq.n	808968c <__aeabi_fdiv+0x98>
 808961c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8089620:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8089624:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8089628:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808962c:	428b      	cmp	r3, r1
 808962e:	bf38      	it	cc
 8089630:	005b      	lslcc	r3, r3, #1
 8089632:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8089636:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808963a:	428b      	cmp	r3, r1
 808963c:	bf24      	itt	cs
 808963e:	1a5b      	subcs	r3, r3, r1
 8089640:	ea40 000c 	orrcs.w	r0, r0, ip
 8089644:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8089648:	bf24      	itt	cs
 808964a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808964e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8089652:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8089656:	bf24      	itt	cs
 8089658:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808965c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8089660:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8089664:	bf24      	itt	cs
 8089666:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808966a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808966e:	011b      	lsls	r3, r3, #4
 8089670:	bf18      	it	ne
 8089672:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8089676:	d1e0      	bne.n	808963a <__aeabi_fdiv+0x46>
 8089678:	2afd      	cmp	r2, #253	; 0xfd
 808967a:	f63f af50 	bhi.w	808951e <__aeabi_fmul+0x92>
 808967e:	428b      	cmp	r3, r1
 8089680:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8089684:	bf08      	it	eq
 8089686:	f020 0001 	biceq.w	r0, r0, #1
 808968a:	4770      	bx	lr
 808968c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8089690:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8089694:	327f      	adds	r2, #127	; 0x7f
 8089696:	bfc2      	ittt	gt
 8089698:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808969c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80896a0:	4770      	bxgt	lr
 80896a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80896a6:	f04f 0300 	mov.w	r3, #0
 80896aa:	3a01      	subs	r2, #1
 80896ac:	e737      	b.n	808951e <__aeabi_fmul+0x92>
 80896ae:	f092 0f00 	teq	r2, #0
 80896b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80896b6:	bf02      	ittt	eq
 80896b8:	0040      	lsleq	r0, r0, #1
 80896ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80896be:	3a01      	subeq	r2, #1
 80896c0:	d0f9      	beq.n	80896b6 <__aeabi_fdiv+0xc2>
 80896c2:	ea40 000c 	orr.w	r0, r0, ip
 80896c6:	f093 0f00 	teq	r3, #0
 80896ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80896ce:	bf02      	ittt	eq
 80896d0:	0049      	lsleq	r1, r1, #1
 80896d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80896d6:	3b01      	subeq	r3, #1
 80896d8:	d0f9      	beq.n	80896ce <__aeabi_fdiv+0xda>
 80896da:	ea41 010c 	orr.w	r1, r1, ip
 80896de:	e795      	b.n	808960c <__aeabi_fdiv+0x18>
 80896e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80896e4:	ea92 0f0c 	teq	r2, ip
 80896e8:	d108      	bne.n	80896fc <__aeabi_fdiv+0x108>
 80896ea:	0242      	lsls	r2, r0, #9
 80896ec:	f47f af7d 	bne.w	80895ea <__aeabi_fmul+0x15e>
 80896f0:	ea93 0f0c 	teq	r3, ip
 80896f4:	f47f af70 	bne.w	80895d8 <__aeabi_fmul+0x14c>
 80896f8:	4608      	mov	r0, r1
 80896fa:	e776      	b.n	80895ea <__aeabi_fmul+0x15e>
 80896fc:	ea93 0f0c 	teq	r3, ip
 8089700:	d104      	bne.n	808970c <__aeabi_fdiv+0x118>
 8089702:	024b      	lsls	r3, r1, #9
 8089704:	f43f af4c 	beq.w	80895a0 <__aeabi_fmul+0x114>
 8089708:	4608      	mov	r0, r1
 808970a:	e76e      	b.n	80895ea <__aeabi_fmul+0x15e>
 808970c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8089710:	bf18      	it	ne
 8089712:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8089716:	d1ca      	bne.n	80896ae <__aeabi_fdiv+0xba>
 8089718:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808971c:	f47f af5c 	bne.w	80895d8 <__aeabi_fmul+0x14c>
 8089720:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8089724:	f47f af3c 	bne.w	80895a0 <__aeabi_fmul+0x114>
 8089728:	e75f      	b.n	80895ea <__aeabi_fmul+0x15e>
 808972a:	bf00      	nop

0808972c <__gesf2>:
 808972c:	f04f 3cff 	mov.w	ip, #4294967295
 8089730:	e006      	b.n	8089740 <__cmpsf2+0x4>
 8089732:	bf00      	nop

08089734 <__lesf2>:
 8089734:	f04f 0c01 	mov.w	ip, #1
 8089738:	e002      	b.n	8089740 <__cmpsf2+0x4>
 808973a:	bf00      	nop

0808973c <__cmpsf2>:
 808973c:	f04f 0c01 	mov.w	ip, #1
 8089740:	f84d cd04 	str.w	ip, [sp, #-4]!
 8089744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8089748:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808974c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089750:	bf18      	it	ne
 8089752:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089756:	d011      	beq.n	808977c <__cmpsf2+0x40>
 8089758:	b001      	add	sp, #4
 808975a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808975e:	bf18      	it	ne
 8089760:	ea90 0f01 	teqne	r0, r1
 8089764:	bf58      	it	pl
 8089766:	ebb2 0003 	subspl.w	r0, r2, r3
 808976a:	bf88      	it	hi
 808976c:	17c8      	asrhi	r0, r1, #31
 808976e:	bf38      	it	cc
 8089770:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8089774:	bf18      	it	ne
 8089776:	f040 0001 	orrne.w	r0, r0, #1
 808977a:	4770      	bx	lr
 808977c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089780:	d102      	bne.n	8089788 <__cmpsf2+0x4c>
 8089782:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8089786:	d105      	bne.n	8089794 <__cmpsf2+0x58>
 8089788:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808978c:	d1e4      	bne.n	8089758 <__cmpsf2+0x1c>
 808978e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8089792:	d0e1      	beq.n	8089758 <__cmpsf2+0x1c>
 8089794:	f85d 0b04 	ldr.w	r0, [sp], #4
 8089798:	4770      	bx	lr
 808979a:	bf00      	nop

0808979c <__aeabi_cfrcmple>:
 808979c:	4684      	mov	ip, r0
 808979e:	4608      	mov	r0, r1
 80897a0:	4661      	mov	r1, ip
 80897a2:	e7ff      	b.n	80897a4 <__aeabi_cfcmpeq>

080897a4 <__aeabi_cfcmpeq>:
 80897a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80897a6:	f7ff ffc9 	bl	808973c <__cmpsf2>
 80897aa:	2800      	cmp	r0, #0
 80897ac:	bf48      	it	mi
 80897ae:	f110 0f00 	cmnmi.w	r0, #0
 80897b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080897b4 <__aeabi_fcmpeq>:
 80897b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80897b8:	f7ff fff4 	bl	80897a4 <__aeabi_cfcmpeq>
 80897bc:	bf0c      	ite	eq
 80897be:	2001      	moveq	r0, #1
 80897c0:	2000      	movne	r0, #0
 80897c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80897c6:	bf00      	nop

080897c8 <__aeabi_fcmplt>:
 80897c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80897cc:	f7ff ffea 	bl	80897a4 <__aeabi_cfcmpeq>
 80897d0:	bf34      	ite	cc
 80897d2:	2001      	movcc	r0, #1
 80897d4:	2000      	movcs	r0, #0
 80897d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80897da:	bf00      	nop

080897dc <__aeabi_fcmple>:
 80897dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80897e0:	f7ff ffe0 	bl	80897a4 <__aeabi_cfcmpeq>
 80897e4:	bf94      	ite	ls
 80897e6:	2001      	movls	r0, #1
 80897e8:	2000      	movhi	r0, #0
 80897ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80897ee:	bf00      	nop

080897f0 <__aeabi_fcmpge>:
 80897f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80897f4:	f7ff ffd2 	bl	808979c <__aeabi_cfrcmple>
 80897f8:	bf94      	ite	ls
 80897fa:	2001      	movls	r0, #1
 80897fc:	2000      	movhi	r0, #0
 80897fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8089802:	bf00      	nop

08089804 <__aeabi_fcmpgt>:
 8089804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089808:	f7ff ffc8 	bl	808979c <__aeabi_cfrcmple>
 808980c:	bf34      	ite	cc
 808980e:	2001      	movcc	r0, #1
 8089810:	2000      	movcs	r0, #0
 8089812:	f85d fb08 	ldr.w	pc, [sp], #8
 8089816:	bf00      	nop

08089818 <__aeabi_fcmpun>:
 8089818:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808981c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8089820:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089824:	d102      	bne.n	808982c <__aeabi_fcmpun+0x14>
 8089826:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808982a:	d108      	bne.n	808983e <__aeabi_fcmpun+0x26>
 808982c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8089830:	d102      	bne.n	8089838 <__aeabi_fcmpun+0x20>
 8089832:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8089836:	d102      	bne.n	808983e <__aeabi_fcmpun+0x26>
 8089838:	f04f 0000 	mov.w	r0, #0
 808983c:	4770      	bx	lr
 808983e:	f04f 0001 	mov.w	r0, #1
 8089842:	4770      	bx	lr

08089844 <__aeabi_f2iz>:
 8089844:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8089848:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808984c:	d30f      	bcc.n	808986e <__aeabi_f2iz+0x2a>
 808984e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8089852:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8089856:	d90d      	bls.n	8089874 <__aeabi_f2iz+0x30>
 8089858:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808985c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8089860:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8089864:	fa23 f002 	lsr.w	r0, r3, r2
 8089868:	bf18      	it	ne
 808986a:	4240      	negne	r0, r0
 808986c:	4770      	bx	lr
 808986e:	f04f 0000 	mov.w	r0, #0
 8089872:	4770      	bx	lr
 8089874:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8089878:	d101      	bne.n	808987e <__aeabi_f2iz+0x3a>
 808987a:	0242      	lsls	r2, r0, #9
 808987c:	d105      	bne.n	808988a <__aeabi_f2iz+0x46>
 808987e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8089882:	bf08      	it	eq
 8089884:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089888:	4770      	bx	lr
 808988a:	f04f 0000 	mov.w	r0, #0
 808988e:	4770      	bx	lr

08089890 <__aeabi_ldivmod>:
 8089890:	b97b      	cbnz	r3, 80898b2 <__aeabi_ldivmod+0x22>
 8089892:	b972      	cbnz	r2, 80898b2 <__aeabi_ldivmod+0x22>
 8089894:	2900      	cmp	r1, #0
 8089896:	bfbe      	ittt	lt
 8089898:	2000      	movlt	r0, #0
 808989a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808989e:	e006      	blt.n	80898ae <__aeabi_ldivmod+0x1e>
 80898a0:	bf08      	it	eq
 80898a2:	2800      	cmpeq	r0, #0
 80898a4:	bf1c      	itt	ne
 80898a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80898aa:	f04f 30ff 	movne.w	r0, #4294967295
 80898ae:	f000 b9b5 	b.w	8089c1c <__aeabi_idiv0>
 80898b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80898b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80898ba:	2900      	cmp	r1, #0
 80898bc:	db09      	blt.n	80898d2 <__aeabi_ldivmod+0x42>
 80898be:	2b00      	cmp	r3, #0
 80898c0:	db1a      	blt.n	80898f8 <__aeabi_ldivmod+0x68>
 80898c2:	f000 f835 	bl	8089930 <__udivmoddi4>
 80898c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80898ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80898ce:	b004      	add	sp, #16
 80898d0:	4770      	bx	lr
 80898d2:	4240      	negs	r0, r0
 80898d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80898d8:	2b00      	cmp	r3, #0
 80898da:	db1b      	blt.n	8089914 <__aeabi_ldivmod+0x84>
 80898dc:	f000 f828 	bl	8089930 <__udivmoddi4>
 80898e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80898e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80898e8:	b004      	add	sp, #16
 80898ea:	4240      	negs	r0, r0
 80898ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80898f0:	4252      	negs	r2, r2
 80898f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80898f6:	4770      	bx	lr
 80898f8:	4252      	negs	r2, r2
 80898fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80898fe:	f000 f817 	bl	8089930 <__udivmoddi4>
 8089902:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808990a:	b004      	add	sp, #16
 808990c:	4240      	negs	r0, r0
 808990e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089912:	4770      	bx	lr
 8089914:	4252      	negs	r2, r2
 8089916:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808991a:	f000 f809 	bl	8089930 <__udivmoddi4>
 808991e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089926:	b004      	add	sp, #16
 8089928:	4252      	negs	r2, r2
 808992a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808992e:	4770      	bx	lr

08089930 <__udivmoddi4>:
 8089930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089934:	468c      	mov	ip, r1
 8089936:	460c      	mov	r4, r1
 8089938:	4605      	mov	r5, r0
 808993a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808993c:	2b00      	cmp	r3, #0
 808993e:	d14f      	bne.n	80899e0 <__udivmoddi4+0xb0>
 8089940:	428a      	cmp	r2, r1
 8089942:	4617      	mov	r7, r2
 8089944:	d96b      	bls.n	8089a1e <__udivmoddi4+0xee>
 8089946:	fab2 fe82 	clz	lr, r2
 808994a:	f1be 0f00 	cmp.w	lr, #0
 808994e:	d00b      	beq.n	8089968 <__udivmoddi4+0x38>
 8089950:	f1ce 0520 	rsb	r5, lr, #32
 8089954:	fa20 f505 	lsr.w	r5, r0, r5
 8089958:	fa01 f30e 	lsl.w	r3, r1, lr
 808995c:	ea45 0c03 	orr.w	ip, r5, r3
 8089960:	fa02 f70e 	lsl.w	r7, r2, lr
 8089964:	fa00 f50e 	lsl.w	r5, r0, lr
 8089968:	0c39      	lsrs	r1, r7, #16
 808996a:	fbbc f0f1 	udiv	r0, ip, r1
 808996e:	b2ba      	uxth	r2, r7
 8089970:	fb01 c310 	mls	r3, r1, r0, ip
 8089974:	fb00 f802 	mul.w	r8, r0, r2
 8089978:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808997c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8089980:	45a0      	cmp	r8, r4
 8089982:	d909      	bls.n	8089998 <__udivmoddi4+0x68>
 8089984:	19e4      	adds	r4, r4, r7
 8089986:	f100 33ff 	add.w	r3, r0, #4294967295
 808998a:	f080 8128 	bcs.w	8089bde <__udivmoddi4+0x2ae>
 808998e:	45a0      	cmp	r8, r4
 8089990:	f240 8125 	bls.w	8089bde <__udivmoddi4+0x2ae>
 8089994:	3802      	subs	r0, #2
 8089996:	443c      	add	r4, r7
 8089998:	ebc8 0404 	rsb	r4, r8, r4
 808999c:	fbb4 f3f1 	udiv	r3, r4, r1
 80899a0:	fb01 4c13 	mls	ip, r1, r3, r4
 80899a4:	fb03 f202 	mul.w	r2, r3, r2
 80899a8:	b2ac      	uxth	r4, r5
 80899aa:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80899ae:	428a      	cmp	r2, r1
 80899b0:	d909      	bls.n	80899c6 <__udivmoddi4+0x96>
 80899b2:	19c9      	adds	r1, r1, r7
 80899b4:	f103 34ff 	add.w	r4, r3, #4294967295
 80899b8:	f080 810f 	bcs.w	8089bda <__udivmoddi4+0x2aa>
 80899bc:	428a      	cmp	r2, r1
 80899be:	f240 810c 	bls.w	8089bda <__udivmoddi4+0x2aa>
 80899c2:	3b02      	subs	r3, #2
 80899c4:	4439      	add	r1, r7
 80899c6:	1a8a      	subs	r2, r1, r2
 80899c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80899cc:	2100      	movs	r1, #0
 80899ce:	2e00      	cmp	r6, #0
 80899d0:	d063      	beq.n	8089a9a <__udivmoddi4+0x16a>
 80899d2:	fa22 f20e 	lsr.w	r2, r2, lr
 80899d6:	2300      	movs	r3, #0
 80899d8:	e886 000c 	stmia.w	r6, {r2, r3}
 80899dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80899e0:	428b      	cmp	r3, r1
 80899e2:	d907      	bls.n	80899f4 <__udivmoddi4+0xc4>
 80899e4:	2e00      	cmp	r6, #0
 80899e6:	d056      	beq.n	8089a96 <__udivmoddi4+0x166>
 80899e8:	2100      	movs	r1, #0
 80899ea:	e886 0011 	stmia.w	r6, {r0, r4}
 80899ee:	4608      	mov	r0, r1
 80899f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80899f4:	fab3 f183 	clz	r1, r3
 80899f8:	2900      	cmp	r1, #0
 80899fa:	f040 8093 	bne.w	8089b24 <__udivmoddi4+0x1f4>
 80899fe:	42a3      	cmp	r3, r4
 8089a00:	d302      	bcc.n	8089a08 <__udivmoddi4+0xd8>
 8089a02:	4282      	cmp	r2, r0
 8089a04:	f200 80fe 	bhi.w	8089c04 <__udivmoddi4+0x2d4>
 8089a08:	1a85      	subs	r5, r0, r2
 8089a0a:	eb64 0303 	sbc.w	r3, r4, r3
 8089a0e:	469c      	mov	ip, r3
 8089a10:	2001      	movs	r0, #1
 8089a12:	2e00      	cmp	r6, #0
 8089a14:	d041      	beq.n	8089a9a <__udivmoddi4+0x16a>
 8089a16:	e886 1020 	stmia.w	r6, {r5, ip}
 8089a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a1e:	b912      	cbnz	r2, 8089a26 <__udivmoddi4+0xf6>
 8089a20:	2701      	movs	r7, #1
 8089a22:	fbb7 f7f2 	udiv	r7, r7, r2
 8089a26:	fab7 fe87 	clz	lr, r7
 8089a2a:	f1be 0f00 	cmp.w	lr, #0
 8089a2e:	d136      	bne.n	8089a9e <__udivmoddi4+0x16e>
 8089a30:	1be4      	subs	r4, r4, r7
 8089a32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8089a36:	fa1f f987 	uxth.w	r9, r7
 8089a3a:	2101      	movs	r1, #1
 8089a3c:	fbb4 f3f8 	udiv	r3, r4, r8
 8089a40:	fb08 4413 	mls	r4, r8, r3, r4
 8089a44:	fb09 f203 	mul.w	r2, r9, r3
 8089a48:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8089a4c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8089a50:	42a2      	cmp	r2, r4
 8089a52:	d907      	bls.n	8089a64 <__udivmoddi4+0x134>
 8089a54:	19e4      	adds	r4, r4, r7
 8089a56:	f103 30ff 	add.w	r0, r3, #4294967295
 8089a5a:	d202      	bcs.n	8089a62 <__udivmoddi4+0x132>
 8089a5c:	42a2      	cmp	r2, r4
 8089a5e:	f200 80d3 	bhi.w	8089c08 <__udivmoddi4+0x2d8>
 8089a62:	4603      	mov	r3, r0
 8089a64:	1aa4      	subs	r4, r4, r2
 8089a66:	fbb4 f0f8 	udiv	r0, r4, r8
 8089a6a:	fb08 4810 	mls	r8, r8, r0, r4
 8089a6e:	fb09 f900 	mul.w	r9, r9, r0
 8089a72:	b2ac      	uxth	r4, r5
 8089a74:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8089a78:	4591      	cmp	r9, r2
 8089a7a:	d907      	bls.n	8089a8c <__udivmoddi4+0x15c>
 8089a7c:	19d2      	adds	r2, r2, r7
 8089a7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8089a82:	d202      	bcs.n	8089a8a <__udivmoddi4+0x15a>
 8089a84:	4591      	cmp	r9, r2
 8089a86:	f200 80ba 	bhi.w	8089bfe <__udivmoddi4+0x2ce>
 8089a8a:	4620      	mov	r0, r4
 8089a8c:	ebc9 0202 	rsb	r2, r9, r2
 8089a90:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8089a94:	e79b      	b.n	80899ce <__udivmoddi4+0x9e>
 8089a96:	4631      	mov	r1, r6
 8089a98:	4630      	mov	r0, r6
 8089a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a9e:	fa07 f70e 	lsl.w	r7, r7, lr
 8089aa2:	f1ce 0c20 	rsb	ip, lr, #32
 8089aa6:	fa24 f30c 	lsr.w	r3, r4, ip
 8089aaa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8089aae:	fbb3 faf8 	udiv	sl, r3, r8
 8089ab2:	fa1f f987 	uxth.w	r9, r7
 8089ab6:	fb08 351a 	mls	r5, r8, sl, r3
 8089aba:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089abe:	fa04 f40e 	lsl.w	r4, r4, lr
 8089ac2:	fb0a fb09 	mul.w	fp, sl, r9
 8089ac6:	ea4c 0c04 	orr.w	ip, ip, r4
 8089aca:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8089ace:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8089ad2:	459b      	cmp	fp, r3
 8089ad4:	fa00 f50e 	lsl.w	r5, r0, lr
 8089ad8:	d90a      	bls.n	8089af0 <__udivmoddi4+0x1c0>
 8089ada:	19db      	adds	r3, r3, r7
 8089adc:	f10a 32ff 	add.w	r2, sl, #4294967295
 8089ae0:	f080 808b 	bcs.w	8089bfa <__udivmoddi4+0x2ca>
 8089ae4:	459b      	cmp	fp, r3
 8089ae6:	f240 8088 	bls.w	8089bfa <__udivmoddi4+0x2ca>
 8089aea:	f1aa 0a02 	sub.w	sl, sl, #2
 8089aee:	443b      	add	r3, r7
 8089af0:	ebcb 0303 	rsb	r3, fp, r3
 8089af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8089af8:	fb08 3310 	mls	r3, r8, r0, r3
 8089afc:	fb00 f409 	mul.w	r4, r0, r9
 8089b00:	fa1f fc8c 	uxth.w	ip, ip
 8089b04:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8089b08:	429c      	cmp	r4, r3
 8089b0a:	d907      	bls.n	8089b1c <__udivmoddi4+0x1ec>
 8089b0c:	19db      	adds	r3, r3, r7
 8089b0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8089b12:	d26e      	bcs.n	8089bf2 <__udivmoddi4+0x2c2>
 8089b14:	429c      	cmp	r4, r3
 8089b16:	d96c      	bls.n	8089bf2 <__udivmoddi4+0x2c2>
 8089b18:	3802      	subs	r0, #2
 8089b1a:	443b      	add	r3, r7
 8089b1c:	1b1c      	subs	r4, r3, r4
 8089b1e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8089b22:	e78b      	b.n	8089a3c <__udivmoddi4+0x10c>
 8089b24:	f1c1 0e20 	rsb	lr, r1, #32
 8089b28:	408b      	lsls	r3, r1
 8089b2a:	fa22 fc0e 	lsr.w	ip, r2, lr
 8089b2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8089b32:	fa24 f70e 	lsr.w	r7, r4, lr
 8089b36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8089b3a:	fbb7 faf9 	udiv	sl, r7, r9
 8089b3e:	fa1f f38c 	uxth.w	r3, ip
 8089b42:	fb09 771a 	mls	r7, r9, sl, r7
 8089b46:	fa20 f80e 	lsr.w	r8, r0, lr
 8089b4a:	408c      	lsls	r4, r1
 8089b4c:	fb0a f503 	mul.w	r5, sl, r3
 8089b50:	ea48 0404 	orr.w	r4, r8, r4
 8089b54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8089b58:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8089b5c:	42bd      	cmp	r5, r7
 8089b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8089b62:	fa00 fb01 	lsl.w	fp, r0, r1
 8089b66:	d909      	bls.n	8089b7c <__udivmoddi4+0x24c>
 8089b68:	eb17 070c 	adds.w	r7, r7, ip
 8089b6c:	f10a 30ff 	add.w	r0, sl, #4294967295
 8089b70:	d241      	bcs.n	8089bf6 <__udivmoddi4+0x2c6>
 8089b72:	42bd      	cmp	r5, r7
 8089b74:	d93f      	bls.n	8089bf6 <__udivmoddi4+0x2c6>
 8089b76:	f1aa 0a02 	sub.w	sl, sl, #2
 8089b7a:	4467      	add	r7, ip
 8089b7c:	1b7f      	subs	r7, r7, r5
 8089b7e:	fbb7 f5f9 	udiv	r5, r7, r9
 8089b82:	fb09 7715 	mls	r7, r9, r5, r7
 8089b86:	fb05 f303 	mul.w	r3, r5, r3
 8089b8a:	b2a4      	uxth	r4, r4
 8089b8c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8089b90:	42bb      	cmp	r3, r7
 8089b92:	d908      	bls.n	8089ba6 <__udivmoddi4+0x276>
 8089b94:	eb17 070c 	adds.w	r7, r7, ip
 8089b98:	f105 30ff 	add.w	r0, r5, #4294967295
 8089b9c:	d227      	bcs.n	8089bee <__udivmoddi4+0x2be>
 8089b9e:	42bb      	cmp	r3, r7
 8089ba0:	d925      	bls.n	8089bee <__udivmoddi4+0x2be>
 8089ba2:	3d02      	subs	r5, #2
 8089ba4:	4467      	add	r7, ip
 8089ba6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8089baa:	fba0 8902 	umull	r8, r9, r0, r2
 8089bae:	1aff      	subs	r7, r7, r3
 8089bb0:	454f      	cmp	r7, r9
 8089bb2:	4645      	mov	r5, r8
 8089bb4:	464c      	mov	r4, r9
 8089bb6:	d314      	bcc.n	8089be2 <__udivmoddi4+0x2b2>
 8089bb8:	d029      	beq.n	8089c0e <__udivmoddi4+0x2de>
 8089bba:	b366      	cbz	r6, 8089c16 <__udivmoddi4+0x2e6>
 8089bbc:	ebbb 0305 	subs.w	r3, fp, r5
 8089bc0:	eb67 0704 	sbc.w	r7, r7, r4
 8089bc4:	fa07 fe0e 	lsl.w	lr, r7, lr
 8089bc8:	40cb      	lsrs	r3, r1
 8089bca:	40cf      	lsrs	r7, r1
 8089bcc:	ea4e 0303 	orr.w	r3, lr, r3
 8089bd0:	e886 0088 	stmia.w	r6, {r3, r7}
 8089bd4:	2100      	movs	r1, #0
 8089bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089bda:	4623      	mov	r3, r4
 8089bdc:	e6f3      	b.n	80899c6 <__udivmoddi4+0x96>
 8089bde:	4618      	mov	r0, r3
 8089be0:	e6da      	b.n	8089998 <__udivmoddi4+0x68>
 8089be2:	ebb8 0502 	subs.w	r5, r8, r2
 8089be6:	eb69 040c 	sbc.w	r4, r9, ip
 8089bea:	3801      	subs	r0, #1
 8089bec:	e7e5      	b.n	8089bba <__udivmoddi4+0x28a>
 8089bee:	4605      	mov	r5, r0
 8089bf0:	e7d9      	b.n	8089ba6 <__udivmoddi4+0x276>
 8089bf2:	4610      	mov	r0, r2
 8089bf4:	e792      	b.n	8089b1c <__udivmoddi4+0x1ec>
 8089bf6:	4682      	mov	sl, r0
 8089bf8:	e7c0      	b.n	8089b7c <__udivmoddi4+0x24c>
 8089bfa:	4692      	mov	sl, r2
 8089bfc:	e778      	b.n	8089af0 <__udivmoddi4+0x1c0>
 8089bfe:	3802      	subs	r0, #2
 8089c00:	443a      	add	r2, r7
 8089c02:	e743      	b.n	8089a8c <__udivmoddi4+0x15c>
 8089c04:	4608      	mov	r0, r1
 8089c06:	e704      	b.n	8089a12 <__udivmoddi4+0xe2>
 8089c08:	3b02      	subs	r3, #2
 8089c0a:	443c      	add	r4, r7
 8089c0c:	e72a      	b.n	8089a64 <__udivmoddi4+0x134>
 8089c0e:	45c3      	cmp	fp, r8
 8089c10:	d3e7      	bcc.n	8089be2 <__udivmoddi4+0x2b2>
 8089c12:	463c      	mov	r4, r7
 8089c14:	e7d1      	b.n	8089bba <__udivmoddi4+0x28a>
 8089c16:	4631      	mov	r1, r6
 8089c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08089c1c <__aeabi_idiv0>:
 8089c1c:	4770      	bx	lr
 8089c1e:	bf00      	nop

08089c20 <asctime>:
 8089c20:	4b09      	ldr	r3, [pc, #36]	; (8089c48 <asctime+0x28>)
 8089c22:	b570      	push	{r4, r5, r6, lr}
 8089c24:	681c      	ldr	r4, [r3, #0]
 8089c26:	4606      	mov	r6, r0
 8089c28:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8089c2a:	b93d      	cbnz	r5, 8089c3c <asctime+0x1c>
 8089c2c:	201a      	movs	r0, #26
 8089c2e:	f7fb fe6b 	bl	8085908 <malloc>
 8089c32:	221a      	movs	r2, #26
 8089c34:	6420      	str	r0, [r4, #64]	; 0x40
 8089c36:	4629      	mov	r1, r5
 8089c38:	f000 f956 	bl	8089ee8 <memset>
 8089c3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8089c3e:	4630      	mov	r0, r6
 8089c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8089c44:	f000 b802 	b.w	8089c4c <asctime_r>
 8089c48:	200000b8 	.word	0x200000b8

08089c4c <asctime_r>:
 8089c4c:	b510      	push	{r4, lr}
 8089c4e:	460c      	mov	r4, r1
 8089c50:	6941      	ldr	r1, [r0, #20]
 8089c52:	b086      	sub	sp, #24
 8089c54:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8089c58:	6903      	ldr	r3, [r0, #16]
 8089c5a:	6982      	ldr	r2, [r0, #24]
 8089c5c:	9104      	str	r1, [sp, #16]
 8089c5e:	6801      	ldr	r1, [r0, #0]
 8089c60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8089c64:	9103      	str	r1, [sp, #12]
 8089c66:	6841      	ldr	r1, [r0, #4]
 8089c68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8089c6c:	9102      	str	r1, [sp, #8]
 8089c6e:	6881      	ldr	r1, [r0, #8]
 8089c70:	9101      	str	r1, [sp, #4]
 8089c72:	68c1      	ldr	r1, [r0, #12]
 8089c74:	4620      	mov	r0, r4
 8089c76:	9100      	str	r1, [sp, #0]
 8089c78:	4904      	ldr	r1, [pc, #16]	; (8089c8c <asctime_r+0x40>)
 8089c7a:	440b      	add	r3, r1
 8089c7c:	4904      	ldr	r1, [pc, #16]	; (8089c90 <asctime_r+0x44>)
 8089c7e:	440a      	add	r2, r1
 8089c80:	4904      	ldr	r1, [pc, #16]	; (8089c94 <asctime_r+0x48>)
 8089c82:	f7fb fe61 	bl	8085948 <siprintf>
 8089c86:	4620      	mov	r0, r4
 8089c88:	b006      	add	sp, #24
 8089c8a:	bd10      	pop	{r4, pc}
 8089c8c:	0808dcb2 	.word	0x0808dcb2
 8089c90:	0808dc9d 	.word	0x0808dc9d
 8089c94:	0808dcd6 	.word	0x0808dcd6

08089c98 <atof>:
 8089c98:	2100      	movs	r1, #0
 8089c9a:	f001 bd11 	b.w	808b6c0 <strtod>
	...

08089ca0 <__cxa_atexit>:
 8089ca0:	b510      	push	{r4, lr}
 8089ca2:	4c05      	ldr	r4, [pc, #20]	; (8089cb8 <__cxa_atexit+0x18>)
 8089ca4:	4613      	mov	r3, r2
 8089ca6:	b12c      	cbz	r4, 8089cb4 <__cxa_atexit+0x14>
 8089ca8:	460a      	mov	r2, r1
 8089caa:	4601      	mov	r1, r0
 8089cac:	2002      	movs	r0, #2
 8089cae:	f3af 8000 	nop.w
 8089cb2:	bd10      	pop	{r4, pc}
 8089cb4:	4620      	mov	r0, r4
 8089cb6:	bd10      	pop	{r4, pc}
 8089cb8:	00000000 	.word	0x00000000

08089cbc <localtime>:
 8089cbc:	b538      	push	{r3, r4, r5, lr}
 8089cbe:	4b07      	ldr	r3, [pc, #28]	; (8089cdc <localtime+0x20>)
 8089cc0:	4605      	mov	r5, r0
 8089cc2:	681c      	ldr	r4, [r3, #0]
 8089cc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8089cc6:	b91b      	cbnz	r3, 8089cd0 <localtime+0x14>
 8089cc8:	2024      	movs	r0, #36	; 0x24
 8089cca:	f7fb fe1d 	bl	8085908 <malloc>
 8089cce:	63e0      	str	r0, [r4, #60]	; 0x3c
 8089cd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8089cd2:	4628      	mov	r0, r5
 8089cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089cd8:	f000 b802 	b.w	8089ce0 <localtime_r>
 8089cdc:	200000b8 	.word	0x200000b8

08089ce0 <localtime_r>:
 8089ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089ce4:	460c      	mov	r4, r1
 8089ce6:	4680      	mov	r8, r0
 8089ce8:	f002 fb20 	bl	808c32c <__gettzinfo>
 8089cec:	4621      	mov	r1, r4
 8089cee:	4607      	mov	r7, r0
 8089cf0:	4640      	mov	r0, r8
 8089cf2:	f002 fb1f 	bl	808c334 <gmtime_r>
 8089cf6:	6946      	ldr	r6, [r0, #20]
 8089cf8:	4604      	mov	r4, r0
 8089cfa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8089cfe:	07b3      	lsls	r3, r6, #30
 8089d00:	d105      	bne.n	8089d0e <localtime_r+0x2e>
 8089d02:	2264      	movs	r2, #100	; 0x64
 8089d04:	fb96 f3f2 	sdiv	r3, r6, r2
 8089d08:	fb02 6313 	mls	r3, r2, r3, r6
 8089d0c:	b94b      	cbnz	r3, 8089d22 <localtime_r+0x42>
 8089d0e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8089d12:	fb96 f3f5 	sdiv	r3, r6, r5
 8089d16:	fb05 6513 	mls	r5, r5, r3, r6
 8089d1a:	fab5 f385 	clz	r3, r5
 8089d1e:	095b      	lsrs	r3, r3, #5
 8089d20:	e000      	b.n	8089d24 <localtime_r+0x44>
 8089d22:	2301      	movs	r3, #1
 8089d24:	4a5f      	ldr	r2, [pc, #380]	; (8089ea4 <localtime_r+0x1c4>)
 8089d26:	2530      	movs	r5, #48	; 0x30
 8089d28:	fb05 2503 	mla	r5, r5, r3, r2
 8089d2c:	f001 fe10 	bl	808b950 <__tz_lock>
 8089d30:	f001 fe10 	bl	808b954 <_tzset_unlocked>
 8089d34:	4b5c      	ldr	r3, [pc, #368]	; (8089ea8 <localtime_r+0x1c8>)
 8089d36:	681b      	ldr	r3, [r3, #0]
 8089d38:	b1f3      	cbz	r3, 8089d78 <localtime_r+0x98>
 8089d3a:	687b      	ldr	r3, [r7, #4]
 8089d3c:	429e      	cmp	r6, r3
 8089d3e:	d105      	bne.n	8089d4c <localtime_r+0x6c>
 8089d40:	6839      	ldr	r1, [r7, #0]
 8089d42:	f8d8 3000 	ldr.w	r3, [r8]
 8089d46:	69fa      	ldr	r2, [r7, #28]
 8089d48:	b941      	cbnz	r1, 8089d5c <localtime_r+0x7c>
 8089d4a:	e00a      	b.n	8089d62 <localtime_r+0x82>
 8089d4c:	4630      	mov	r0, r6
 8089d4e:	f001 fd57 	bl	808b800 <__tzcalc_limits>
 8089d52:	2800      	cmp	r0, #0
 8089d54:	d1f4      	bne.n	8089d40 <localtime_r+0x60>
 8089d56:	f04f 33ff 	mov.w	r3, #4294967295
 8089d5a:	e00d      	b.n	8089d78 <localtime_r+0x98>
 8089d5c:	4293      	cmp	r3, r2
 8089d5e:	db08      	blt.n	8089d72 <localtime_r+0x92>
 8089d60:	e001      	b.n	8089d66 <localtime_r+0x86>
 8089d62:	4293      	cmp	r3, r2
 8089d64:	da07      	bge.n	8089d76 <localtime_r+0x96>
 8089d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8089d68:	4293      	cmp	r3, r2
 8089d6a:	bfac      	ite	ge
 8089d6c:	2300      	movge	r3, #0
 8089d6e:	2301      	movlt	r3, #1
 8089d70:	e002      	b.n	8089d78 <localtime_r+0x98>
 8089d72:	2300      	movs	r3, #0
 8089d74:	e000      	b.n	8089d78 <localtime_r+0x98>
 8089d76:	2301      	movs	r3, #1
 8089d78:	6223      	str	r3, [r4, #32]
 8089d7a:	6a23      	ldr	r3, [r4, #32]
 8089d7c:	203c      	movs	r0, #60	; 0x3c
 8089d7e:	2b01      	cmp	r3, #1
 8089d80:	bf0c      	ite	eq
 8089d82:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8089d84:	6a39      	ldrne	r1, [r7, #32]
 8089d86:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8089d8a:	fb91 f6f3 	sdiv	r6, r1, r3
 8089d8e:	fb03 1316 	mls	r3, r3, r6, r1
 8089d92:	fb93 f2f0 	sdiv	r2, r3, r0
 8089d96:	fb00 3012 	mls	r0, r0, r2, r3
 8089d9a:	6861      	ldr	r1, [r4, #4]
 8089d9c:	6823      	ldr	r3, [r4, #0]
 8089d9e:	1a89      	subs	r1, r1, r2
 8089da0:	68a2      	ldr	r2, [r4, #8]
 8089da2:	1a1b      	subs	r3, r3, r0
 8089da4:	1b92      	subs	r2, r2, r6
 8089da6:	2b3b      	cmp	r3, #59	; 0x3b
 8089da8:	6023      	str	r3, [r4, #0]
 8089daa:	6061      	str	r1, [r4, #4]
 8089dac:	60a2      	str	r2, [r4, #8]
 8089dae:	dd03      	ble.n	8089db8 <localtime_r+0xd8>
 8089db0:	3101      	adds	r1, #1
 8089db2:	6061      	str	r1, [r4, #4]
 8089db4:	3b3c      	subs	r3, #60	; 0x3c
 8089db6:	e004      	b.n	8089dc2 <localtime_r+0xe2>
 8089db8:	2b00      	cmp	r3, #0
 8089dba:	da03      	bge.n	8089dc4 <localtime_r+0xe4>
 8089dbc:	3901      	subs	r1, #1
 8089dbe:	6061      	str	r1, [r4, #4]
 8089dc0:	333c      	adds	r3, #60	; 0x3c
 8089dc2:	6023      	str	r3, [r4, #0]
 8089dc4:	6863      	ldr	r3, [r4, #4]
 8089dc6:	2b3b      	cmp	r3, #59	; 0x3b
 8089dc8:	dd03      	ble.n	8089dd2 <localtime_r+0xf2>
 8089dca:	3201      	adds	r2, #1
 8089dcc:	60a2      	str	r2, [r4, #8]
 8089dce:	3b3c      	subs	r3, #60	; 0x3c
 8089dd0:	e004      	b.n	8089ddc <localtime_r+0xfc>
 8089dd2:	2b00      	cmp	r3, #0
 8089dd4:	da03      	bge.n	8089dde <localtime_r+0xfe>
 8089dd6:	3a01      	subs	r2, #1
 8089dd8:	60a2      	str	r2, [r4, #8]
 8089dda:	333c      	adds	r3, #60	; 0x3c
 8089ddc:	6063      	str	r3, [r4, #4]
 8089dde:	68a3      	ldr	r3, [r4, #8]
 8089de0:	2b17      	cmp	r3, #23
 8089de2:	dd22      	ble.n	8089e2a <localtime_r+0x14a>
 8089de4:	69e2      	ldr	r2, [r4, #28]
 8089de6:	3b18      	subs	r3, #24
 8089de8:	3201      	adds	r2, #1
 8089dea:	61e2      	str	r2, [r4, #28]
 8089dec:	69a2      	ldr	r2, [r4, #24]
 8089dee:	60a3      	str	r3, [r4, #8]
 8089df0:	3201      	adds	r2, #1
 8089df2:	2a06      	cmp	r2, #6
 8089df4:	bfc8      	it	gt
 8089df6:	2200      	movgt	r2, #0
 8089df8:	61a2      	str	r2, [r4, #24]
 8089dfa:	68e2      	ldr	r2, [r4, #12]
 8089dfc:	6923      	ldr	r3, [r4, #16]
 8089dfe:	3201      	adds	r2, #1
 8089e00:	60e2      	str	r2, [r4, #12]
 8089e02:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8089e06:	428a      	cmp	r2, r1
 8089e08:	dd46      	ble.n	8089e98 <localtime_r+0x1b8>
 8089e0a:	3301      	adds	r3, #1
 8089e0c:	2b0c      	cmp	r3, #12
 8089e0e:	bf08      	it	eq
 8089e10:	6963      	ldreq	r3, [r4, #20]
 8089e12:	eba2 0201 	sub.w	r2, r2, r1
 8089e16:	60e2      	str	r2, [r4, #12]
 8089e18:	bf05      	ittet	eq
 8089e1a:	3301      	addeq	r3, #1
 8089e1c:	2200      	moveq	r2, #0
 8089e1e:	6123      	strne	r3, [r4, #16]
 8089e20:	6122      	streq	r2, [r4, #16]
 8089e22:	bf04      	itt	eq
 8089e24:	6163      	streq	r3, [r4, #20]
 8089e26:	61e2      	streq	r2, [r4, #28]
 8089e28:	e036      	b.n	8089e98 <localtime_r+0x1b8>
 8089e2a:	2b00      	cmp	r3, #0
 8089e2c:	da34      	bge.n	8089e98 <localtime_r+0x1b8>
 8089e2e:	69e2      	ldr	r2, [r4, #28]
 8089e30:	3318      	adds	r3, #24
 8089e32:	3a01      	subs	r2, #1
 8089e34:	61e2      	str	r2, [r4, #28]
 8089e36:	69a2      	ldr	r2, [r4, #24]
 8089e38:	60a3      	str	r3, [r4, #8]
 8089e3a:	3a01      	subs	r2, #1
 8089e3c:	bf48      	it	mi
 8089e3e:	2206      	movmi	r2, #6
 8089e40:	61a2      	str	r2, [r4, #24]
 8089e42:	68e2      	ldr	r2, [r4, #12]
 8089e44:	3a01      	subs	r2, #1
 8089e46:	60e2      	str	r2, [r4, #12]
 8089e48:	bb32      	cbnz	r2, 8089e98 <localtime_r+0x1b8>
 8089e4a:	6923      	ldr	r3, [r4, #16]
 8089e4c:	3b01      	subs	r3, #1
 8089e4e:	d401      	bmi.n	8089e54 <localtime_r+0x174>
 8089e50:	6123      	str	r3, [r4, #16]
 8089e52:	e01d      	b.n	8089e90 <localtime_r+0x1b0>
 8089e54:	230b      	movs	r3, #11
 8089e56:	6123      	str	r3, [r4, #16]
 8089e58:	6963      	ldr	r3, [r4, #20]
 8089e5a:	1e5a      	subs	r2, r3, #1
 8089e5c:	f012 0f03 	tst.w	r2, #3
 8089e60:	6162      	str	r2, [r4, #20]
 8089e62:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8089e66:	d105      	bne.n	8089e74 <localtime_r+0x194>
 8089e68:	2164      	movs	r1, #100	; 0x64
 8089e6a:	fb93 f2f1 	sdiv	r2, r3, r1
 8089e6e:	fb01 3212 	mls	r2, r1, r2, r3
 8089e72:	b94a      	cbnz	r2, 8089e88 <localtime_r+0x1a8>
 8089e74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8089e78:	fb93 f2f1 	sdiv	r2, r3, r1
 8089e7c:	fb01 3312 	mls	r3, r1, r2, r3
 8089e80:	fab3 f383 	clz	r3, r3
 8089e84:	095b      	lsrs	r3, r3, #5
 8089e86:	e000      	b.n	8089e8a <localtime_r+0x1aa>
 8089e88:	2301      	movs	r3, #1
 8089e8a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8089e8e:	61e3      	str	r3, [r4, #28]
 8089e90:	6923      	ldr	r3, [r4, #16]
 8089e92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8089e96:	60e3      	str	r3, [r4, #12]
 8089e98:	f001 fd5b 	bl	808b952 <__tz_unlock>
 8089e9c:	4620      	mov	r0, r4
 8089e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8089ea2:	bf00      	nop
 8089ea4:	0808de60 	.word	0x0808de60
 8089ea8:	200010ac 	.word	0x200010ac

08089eac <_localeconv_r>:
 8089eac:	4800      	ldr	r0, [pc, #0]	; (8089eb0 <_localeconv_r+0x4>)
 8089eae:	4770      	bx	lr
 8089eb0:	200000bc 	.word	0x200000bc

08089eb4 <memcmp>:
 8089eb4:	b510      	push	{r4, lr}
 8089eb6:	3901      	subs	r1, #1
 8089eb8:	4402      	add	r2, r0
 8089eba:	4290      	cmp	r0, r2
 8089ebc:	d007      	beq.n	8089ece <memcmp+0x1a>
 8089ebe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8089ec2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8089ec6:	42a3      	cmp	r3, r4
 8089ec8:	d0f7      	beq.n	8089eba <memcmp+0x6>
 8089eca:	1b18      	subs	r0, r3, r4
 8089ecc:	bd10      	pop	{r4, pc}
 8089ece:	2000      	movs	r0, #0
 8089ed0:	bd10      	pop	{r4, pc}

08089ed2 <memcpy>:
 8089ed2:	b510      	push	{r4, lr}
 8089ed4:	1e43      	subs	r3, r0, #1
 8089ed6:	440a      	add	r2, r1
 8089ed8:	4291      	cmp	r1, r2
 8089eda:	d004      	beq.n	8089ee6 <memcpy+0x14>
 8089edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8089ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8089ee4:	e7f8      	b.n	8089ed8 <memcpy+0x6>
 8089ee6:	bd10      	pop	{r4, pc}

08089ee8 <memset>:
 8089ee8:	4603      	mov	r3, r0
 8089eea:	4402      	add	r2, r0
 8089eec:	4293      	cmp	r3, r2
 8089eee:	d002      	beq.n	8089ef6 <memset+0xe>
 8089ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8089ef4:	e7fa      	b.n	8089eec <memset+0x4>
 8089ef6:	4770      	bx	lr

08089ef8 <srand>:
 8089ef8:	b538      	push	{r3, r4, r5, lr}
 8089efa:	4b12      	ldr	r3, [pc, #72]	; (8089f44 <srand+0x4c>)
 8089efc:	4605      	mov	r5, r0
 8089efe:	681c      	ldr	r4, [r3, #0]
 8089f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089f02:	b9d3      	cbnz	r3, 8089f3a <srand+0x42>
 8089f04:	2018      	movs	r0, #24
 8089f06:	f7fb fcff 	bl	8085908 <malloc>
 8089f0a:	f243 330e 	movw	r3, #13070	; 0x330e
 8089f0e:	63a0      	str	r0, [r4, #56]	; 0x38
 8089f10:	8003      	strh	r3, [r0, #0]
 8089f12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8089f16:	8043      	strh	r3, [r0, #2]
 8089f18:	f241 2334 	movw	r3, #4660	; 0x1234
 8089f1c:	8083      	strh	r3, [r0, #4]
 8089f1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8089f22:	80c3      	strh	r3, [r0, #6]
 8089f24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8089f28:	8103      	strh	r3, [r0, #8]
 8089f2a:	2305      	movs	r3, #5
 8089f2c:	8143      	strh	r3, [r0, #10]
 8089f2e:	230b      	movs	r3, #11
 8089f30:	8183      	strh	r3, [r0, #12]
 8089f32:	2201      	movs	r2, #1
 8089f34:	2300      	movs	r3, #0
 8089f36:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8089f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089f3c:	2200      	movs	r2, #0
 8089f3e:	611d      	str	r5, [r3, #16]
 8089f40:	615a      	str	r2, [r3, #20]
 8089f42:	bd38      	pop	{r3, r4, r5, pc}
 8089f44:	200000b8 	.word	0x200000b8

08089f48 <strchr>:
 8089f48:	b2c9      	uxtb	r1, r1
 8089f4a:	4603      	mov	r3, r0
 8089f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8089f50:	b11a      	cbz	r2, 8089f5a <strchr+0x12>
 8089f52:	4291      	cmp	r1, r2
 8089f54:	d1f9      	bne.n	8089f4a <strchr+0x2>
 8089f56:	4618      	mov	r0, r3
 8089f58:	4770      	bx	lr
 8089f5a:	2900      	cmp	r1, #0
 8089f5c:	bf0c      	ite	eq
 8089f5e:	4618      	moveq	r0, r3
 8089f60:	2000      	movne	r0, #0
 8089f62:	4770      	bx	lr

08089f64 <strcmp>:
 8089f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8089f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8089f6c:	2a01      	cmp	r2, #1
 8089f6e:	bf28      	it	cs
 8089f70:	429a      	cmpcs	r2, r3
 8089f72:	d0f7      	beq.n	8089f64 <strcmp>
 8089f74:	1ad0      	subs	r0, r2, r3
 8089f76:	4770      	bx	lr

08089f78 <strcpy>:
 8089f78:	4603      	mov	r3, r0
 8089f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8089f7e:	f803 2b01 	strb.w	r2, [r3], #1
 8089f82:	2a00      	cmp	r2, #0
 8089f84:	d1f9      	bne.n	8089f7a <strcpy+0x2>
 8089f86:	4770      	bx	lr

08089f88 <strdup>:
 8089f88:	4b02      	ldr	r3, [pc, #8]	; (8089f94 <strdup+0xc>)
 8089f8a:	4601      	mov	r1, r0
 8089f8c:	6818      	ldr	r0, [r3, #0]
 8089f8e:	f000 b803 	b.w	8089f98 <_strdup_r>
 8089f92:	bf00      	nop
 8089f94:	200000b8 	.word	0x200000b8

08089f98 <_strdup_r>:
 8089f98:	b570      	push	{r4, r5, r6, lr}
 8089f9a:	4606      	mov	r6, r0
 8089f9c:	4608      	mov	r0, r1
 8089f9e:	460c      	mov	r4, r1
 8089fa0:	f000 fd22 	bl	808a9e8 <strlen>
 8089fa4:	1c45      	adds	r5, r0, #1
 8089fa6:	4629      	mov	r1, r5
 8089fa8:	4630      	mov	r0, r6
 8089faa:	f7fb fcfd 	bl	80859a8 <_malloc_r>
 8089fae:	4606      	mov	r6, r0
 8089fb0:	b118      	cbz	r0, 8089fba <_strdup_r+0x22>
 8089fb2:	462a      	mov	r2, r5
 8089fb4:	4621      	mov	r1, r4
 8089fb6:	f7ff ff8c 	bl	8089ed2 <memcpy>
 8089fba:	4630      	mov	r0, r6
 8089fbc:	bd70      	pop	{r4, r5, r6, pc}

08089fbe <iso_year_adjust>:
 8089fbe:	6941      	ldr	r1, [r0, #20]
 8089fc0:	b510      	push	{r4, lr}
 8089fc2:	078b      	lsls	r3, r1, #30
 8089fc4:	d10c      	bne.n	8089fe0 <iso_year_adjust+0x22>
 8089fc6:	f240 736c 	movw	r3, #1900	; 0x76c
 8089fca:	2900      	cmp	r1, #0
 8089fcc:	bfa8      	it	ge
 8089fce:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8089fd2:	440b      	add	r3, r1
 8089fd4:	2464      	movs	r4, #100	; 0x64
 8089fd6:	fb93 f2f4 	sdiv	r2, r3, r4
 8089fda:	fb04 3312 	mls	r3, r4, r2, r3
 8089fde:	b983      	cbnz	r3, 808a002 <iso_year_adjust+0x44>
 8089fe0:	f240 736c 	movw	r3, #1900	; 0x76c
 8089fe4:	2900      	cmp	r1, #0
 8089fe6:	bfa8      	it	ge
 8089fe8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8089fec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8089ff0:	440b      	add	r3, r1
 8089ff2:	fb93 f1f2 	sdiv	r1, r3, r2
 8089ff6:	fb02 3311 	mls	r3, r2, r1, r3
 8089ffa:	fab3 f283 	clz	r2, r3
 8089ffe:	0952      	lsrs	r2, r2, #5
 808a000:	e000      	b.n	808a004 <iso_year_adjust+0x46>
 808a002:	2201      	movs	r2, #1
 808a004:	6983      	ldr	r3, [r0, #24]
 808a006:	69c1      	ldr	r1, [r0, #28]
 808a008:	005b      	lsls	r3, r3, #1
 808a00a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808a00e:	4413      	add	r3, r2
 808a010:	2b21      	cmp	r3, #33	; 0x21
 808a012:	dc0e      	bgt.n	808a032 <iso_year_adjust+0x74>
 808a014:	2b20      	cmp	r3, #32
 808a016:	da2f      	bge.n	808a078 <iso_year_adjust+0xba>
 808a018:	2b0d      	cmp	r3, #13
 808a01a:	dc02      	bgt.n	808a022 <iso_year_adjust+0x64>
 808a01c:	2b0a      	cmp	r3, #10
 808a01e:	db05      	blt.n	808a02c <iso_year_adjust+0x6e>
 808a020:	e02a      	b.n	808a078 <iso_year_adjust+0xba>
 808a022:	2b10      	cmp	r3, #16
 808a024:	db26      	blt.n	808a074 <iso_year_adjust+0xb6>
 808a026:	2b11      	cmp	r3, #17
 808a028:	dd26      	ble.n	808a078 <iso_year_adjust+0xba>
 808a02a:	3b1c      	subs	r3, #28
 808a02c:	2b01      	cmp	r3, #1
 808a02e:	d923      	bls.n	808a078 <iso_year_adjust+0xba>
 808a030:	e020      	b.n	808a074 <iso_year_adjust+0xb6>
 808a032:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808a036:	4293      	cmp	r3, r2
 808a038:	dc0e      	bgt.n	808a058 <iso_year_adjust+0x9a>
 808a03a:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808a03e:	4293      	cmp	r3, r2
 808a040:	da16      	bge.n	808a070 <iso_year_adjust+0xb2>
 808a042:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808a046:	4293      	cmp	r3, r2
 808a048:	d012      	beq.n	808a070 <iso_year_adjust+0xb2>
 808a04a:	db13      	blt.n	808a074 <iso_year_adjust+0xb6>
 808a04c:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808a050:	3b12      	subs	r3, #18
 808a052:	2b02      	cmp	r3, #2
 808a054:	d90c      	bls.n	808a070 <iso_year_adjust+0xb2>
 808a056:	e00d      	b.n	808a074 <iso_year_adjust+0xb6>
 808a058:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808a05c:	4293      	cmp	r3, r2
 808a05e:	d007      	beq.n	808a070 <iso_year_adjust+0xb2>
 808a060:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808a064:	4293      	cmp	r3, r2
 808a066:	d003      	beq.n	808a070 <iso_year_adjust+0xb2>
 808a068:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808a06c:	4293      	cmp	r3, r2
 808a06e:	d101      	bne.n	808a074 <iso_year_adjust+0xb6>
 808a070:	2001      	movs	r0, #1
 808a072:	bd10      	pop	{r4, pc}
 808a074:	2000      	movs	r0, #0
 808a076:	bd10      	pop	{r4, pc}
 808a078:	f04f 30ff 	mov.w	r0, #4294967295
 808a07c:	bd10      	pop	{r4, pc}
	...

0808a080 <strftime>:
 808a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a084:	460e      	mov	r6, r1
 808a086:	b093      	sub	sp, #76	; 0x4c
 808a088:	461d      	mov	r5, r3
 808a08a:	4607      	mov	r7, r0
 808a08c:	4691      	mov	r9, r2
 808a08e:	f001 fba7 	bl	808b7e0 <__get_current_time_locale>
 808a092:	2300      	movs	r3, #0
 808a094:	9306      	str	r3, [sp, #24]
 808a096:	461c      	mov	r4, r3
 808a098:	1e73      	subs	r3, r6, #1
 808a09a:	9003      	str	r0, [sp, #12]
 808a09c:	9302      	str	r3, [sp, #8]
 808a09e:	f899 3000 	ldrb.w	r3, [r9]
 808a0a2:	2b00      	cmp	r3, #0
 808a0a4:	f000 8492 	beq.w	808a9cc <strftime+0x94c>
 808a0a8:	2b25      	cmp	r3, #37	; 0x25
 808a0aa:	d008      	beq.n	808a0be <strftime+0x3e>
 808a0ac:	9a02      	ldr	r2, [sp, #8]
 808a0ae:	4294      	cmp	r4, r2
 808a0b0:	f080 8490 	bcs.w	808a9d4 <strftime+0x954>
 808a0b4:	553b      	strb	r3, [r7, r4]
 808a0b6:	f109 0901 	add.w	r9, r9, #1
 808a0ba:	3401      	adds	r4, #1
 808a0bc:	e7ef      	b.n	808a09e <strftime+0x1e>
 808a0be:	f899 a001 	ldrb.w	sl, [r9, #1]
 808a0c2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808a0c6:	d007      	beq.n	808a0d8 <strftime+0x58>
 808a0c8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a0cc:	d004      	beq.n	808a0d8 <strftime+0x58>
 808a0ce:	f109 0901 	add.w	r9, r9, #1
 808a0d2:	f04f 0a00 	mov.w	sl, #0
 808a0d6:	e001      	b.n	808a0dc <strftime+0x5c>
 808a0d8:	f109 0902 	add.w	r9, r9, #2
 808a0dc:	f899 3000 	ldrb.w	r3, [r9]
 808a0e0:	3b31      	subs	r3, #49	; 0x31
 808a0e2:	2b08      	cmp	r3, #8
 808a0e4:	d808      	bhi.n	808a0f8 <strftime+0x78>
 808a0e6:	4648      	mov	r0, r9
 808a0e8:	220a      	movs	r2, #10
 808a0ea:	a90a      	add	r1, sp, #40	; 0x28
 808a0ec:	f001 fb6e 	bl	808b7cc <strtoul>
 808a0f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808a0f4:	4680      	mov	r8, r0
 808a0f6:	e001      	b.n	808a0fc <strftime+0x7c>
 808a0f8:	f04f 0800 	mov.w	r8, #0
 808a0fc:	f899 3000 	ldrb.w	r3, [r9]
 808a100:	2b45      	cmp	r3, #69	; 0x45
 808a102:	d001      	beq.n	808a108 <strftime+0x88>
 808a104:	2b4f      	cmp	r3, #79	; 0x4f
 808a106:	d101      	bne.n	808a10c <strftime+0x8c>
 808a108:	f109 0901 	add.w	r9, r9, #1
 808a10c:	f899 0000 	ldrb.w	r0, [r9]
 808a110:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808a114:	2b55      	cmp	r3, #85	; 0x55
 808a116:	f200 845d 	bhi.w	808a9d4 <strftime+0x954>
 808a11a:	e8df f013 	tbh	[pc, r3, lsl #1]
 808a11e:	044a      	.short	0x044a
 808a120:	045b045b 	.word	0x045b045b
 808a124:	045b045b 	.word	0x045b045b
 808a128:	045b045b 	.word	0x045b045b
 808a12c:	045b045b 	.word	0x045b045b
 808a130:	045b045b 	.word	0x045b045b
 808a134:	045b045b 	.word	0x045b045b
 808a138:	045b045b 	.word	0x045b045b
 808a13c:	045b045b 	.word	0x045b045b
 808a140:	045b045b 	.word	0x045b045b
 808a144:	045b045b 	.word	0x045b045b
 808a148:	045b045b 	.word	0x045b045b
 808a14c:	045b045b 	.word	0x045b045b
 808a150:	045b045b 	.word	0x045b045b
 808a154:	006f045b 	.word	0x006f045b
 808a158:	00d400a1 	.word	0x00d400a1
 808a15c:	045b011a 	.word	0x045b011a
 808a160:	01a0013f 	.word	0x01a0013f
 808a164:	022d0226 	.word	0x022d0226
 808a168:	045b045b 	.word	0x045b045b
 808a16c:	0260045b 	.word	0x0260045b
 808a170:	045b045b 	.word	0x045b045b
 808a174:	045b0268 	.word	0x045b0268
 808a178:	031c0296 	.word	0x031c0296
 808a17c:	033a0324 	.word	0x033a0324
 808a180:	03850342 	.word	0x03850342
 808a184:	039f00c6 	.word	0x039f00c6
 808a188:	045b041f 	.word	0x045b041f
 808a18c:	045b045b 	.word	0x045b045b
 808a190:	045b045b 	.word	0x045b045b
 808a194:	0056045b 	.word	0x0056045b
 808a198:	00ba0089 	.word	0x00ba0089
 808a19c:	010c010c 	.word	0x010c010c
 808a1a0:	0171045b 	.word	0x0171045b
 808a1a4:	045b0089 	.word	0x045b0089
 808a1a8:	0226023d 	.word	0x0226023d
 808a1ac:	025d022d 	.word	0x025d022d
 808a1b0:	045b0262 	.word	0x045b0262
 808a1b4:	045b0268 	.word	0x045b0268
 808a1b8:	029b00be 	.word	0x029b00be
 808a1bc:	032d031e 	.word	0x032d031e
 808a1c0:	037e045b 	.word	0x037e045b
 808a1c4:	039100c2 	.word	0x039100c2
 808a1c8:	03e7      	.short	0x03e7
 808a1ca:	69ab      	ldr	r3, [r5, #24]
 808a1cc:	9a03      	ldr	r2, [sp, #12]
 808a1ce:	3318      	adds	r3, #24
 808a1d0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a1d4:	4640      	mov	r0, r8
 808a1d6:	f000 fc07 	bl	808a9e8 <strlen>
 808a1da:	f108 38ff 	add.w	r8, r8, #4294967295
 808a1de:	193b      	adds	r3, r7, r4
 808a1e0:	4420      	add	r0, r4
 808a1e2:	4284      	cmp	r4, r0
 808a1e4:	f000 83eb 	beq.w	808a9be <strftime+0x93e>
 808a1e8:	9a02      	ldr	r2, [sp, #8]
 808a1ea:	4294      	cmp	r4, r2
 808a1ec:	f080 83f2 	bcs.w	808a9d4 <strftime+0x954>
 808a1f0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a1f4:	3401      	adds	r4, #1
 808a1f6:	f803 2b01 	strb.w	r2, [r3], #1
 808a1fa:	e7f2      	b.n	808a1e2 <strftime+0x162>
 808a1fc:	69ab      	ldr	r3, [r5, #24]
 808a1fe:	9a03      	ldr	r2, [sp, #12]
 808a200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808a204:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808a208:	4640      	mov	r0, r8
 808a20a:	f000 fbed 	bl	808a9e8 <strlen>
 808a20e:	f108 38ff 	add.w	r8, r8, #4294967295
 808a212:	193b      	adds	r3, r7, r4
 808a214:	4420      	add	r0, r4
 808a216:	4284      	cmp	r4, r0
 808a218:	f000 83d1 	beq.w	808a9be <strftime+0x93e>
 808a21c:	9a02      	ldr	r2, [sp, #8]
 808a21e:	4294      	cmp	r4, r2
 808a220:	f080 83d8 	bcs.w	808a9d4 <strftime+0x954>
 808a224:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a228:	3401      	adds	r4, #1
 808a22a:	f803 2b01 	strb.w	r2, [r3], #1
 808a22e:	e7f2      	b.n	808a216 <strftime+0x196>
 808a230:	692b      	ldr	r3, [r5, #16]
 808a232:	9a03      	ldr	r2, [sp, #12]
 808a234:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a238:	4640      	mov	r0, r8
 808a23a:	f000 fbd5 	bl	808a9e8 <strlen>
 808a23e:	f108 38ff 	add.w	r8, r8, #4294967295
 808a242:	193b      	adds	r3, r7, r4
 808a244:	4420      	add	r0, r4
 808a246:	4284      	cmp	r4, r0
 808a248:	f000 83b9 	beq.w	808a9be <strftime+0x93e>
 808a24c:	9a02      	ldr	r2, [sp, #8]
 808a24e:	4294      	cmp	r4, r2
 808a250:	f080 83c0 	bcs.w	808a9d4 <strftime+0x954>
 808a254:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a258:	3401      	adds	r4, #1
 808a25a:	f803 2b01 	strb.w	r2, [r3], #1
 808a25e:	e7f2      	b.n	808a246 <strftime+0x1c6>
 808a260:	692b      	ldr	r3, [r5, #16]
 808a262:	9a03      	ldr	r2, [sp, #12]
 808a264:	330c      	adds	r3, #12
 808a266:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a26a:	4640      	mov	r0, r8
 808a26c:	f000 fbbc 	bl	808a9e8 <strlen>
 808a270:	f108 38ff 	add.w	r8, r8, #4294967295
 808a274:	193b      	adds	r3, r7, r4
 808a276:	4420      	add	r0, r4
 808a278:	4284      	cmp	r4, r0
 808a27a:	f000 83a0 	beq.w	808a9be <strftime+0x93e>
 808a27e:	9a02      	ldr	r2, [sp, #8]
 808a280:	4294      	cmp	r4, r2
 808a282:	f080 83a7 	bcs.w	808a9d4 <strftime+0x954>
 808a286:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a28a:	3401      	adds	r4, #1
 808a28c:	f803 2b01 	strb.w	r2, [r3], #1
 808a290:	e7f2      	b.n	808a278 <strftime+0x1f8>
 808a292:	9b03      	ldr	r3, [sp, #12]
 808a294:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808a298:	e00a      	b.n	808a2b0 <strftime+0x230>
 808a29a:	9b03      	ldr	r3, [sp, #12]
 808a29c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808a2a0:	e006      	b.n	808a2b0 <strftime+0x230>
 808a2a2:	9b03      	ldr	r3, [sp, #12]
 808a2a4:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808a2a8:	e002      	b.n	808a2b0 <strftime+0x230>
 808a2aa:	9b03      	ldr	r3, [sp, #12]
 808a2ac:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808a2b0:	4640      	mov	r0, r8
 808a2b2:	f000 fb99 	bl	808a9e8 <strlen>
 808a2b6:	f898 3000 	ldrb.w	r3, [r8]
 808a2ba:	2b00      	cmp	r3, #0
 808a2bc:	f000 837f 	beq.w	808a9be <strftime+0x93e>
 808a2c0:	462b      	mov	r3, r5
 808a2c2:	4642      	mov	r2, r8
 808a2c4:	e093      	b.n	808a3ee <strftime+0x36e>
 808a2c6:	49b6      	ldr	r1, [pc, #728]	; (808a5a0 <strftime+0x520>)
 808a2c8:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808a2cc:	458b      	cmp	fp, r1
 808a2ce:	bfac      	ite	ge
 808a2d0:	2100      	movge	r1, #0
 808a2d2:	2101      	movlt	r1, #1
 808a2d4:	f1bb 0f00 	cmp.w	fp, #0
 808a2d8:	db04      	blt.n	808a2e4 <strftime+0x264>
 808a2da:	2064      	movs	r0, #100	; 0x64
 808a2dc:	fb9b f0f0 	sdiv	r0, fp, r0
 808a2e0:	3013      	adds	r0, #19
 808a2e2:	e008      	b.n	808a2f6 <strftime+0x276>
 808a2e4:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808a2e8:	9107      	str	r1, [sp, #28]
 808a2ea:	f001 fcb9 	bl	808bc60 <abs>
 808a2ee:	2364      	movs	r3, #100	; 0x64
 808a2f0:	fb90 f0f3 	sdiv	r0, r0, r3
 808a2f4:	9907      	ldr	r1, [sp, #28]
 808a2f6:	f1ba 0f00 	cmp.w	sl, #0
 808a2fa:	d008      	beq.n	808a30e <strftime+0x28e>
 808a2fc:	2863      	cmp	r0, #99	; 0x63
 808a2fe:	dd09      	ble.n	808a314 <strftime+0x294>
 808a300:	4ba8      	ldr	r3, [pc, #672]	; (808a5a4 <strftime+0x524>)
 808a302:	4aa9      	ldr	r2, [pc, #676]	; (808a5a8 <strftime+0x528>)
 808a304:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a308:	bf18      	it	ne
 808a30a:	4613      	movne	r3, r2
 808a30c:	e003      	b.n	808a316 <strftime+0x296>
 808a30e:	4ba6      	ldr	r3, [pc, #664]	; (808a5a8 <strftime+0x528>)
 808a310:	4aa6      	ldr	r2, [pc, #664]	; (808a5ac <strftime+0x52c>)
 808a312:	e001      	b.n	808a318 <strftime+0x298>
 808a314:	4ba4      	ldr	r3, [pc, #656]	; (808a5a8 <strftime+0x528>)
 808a316:	4aa6      	ldr	r2, [pc, #664]	; (808a5b0 <strftime+0x530>)
 808a318:	f1b8 0f01 	cmp.w	r8, #1
 808a31c:	bf98      	it	ls
 808a31e:	f04f 0802 	movls.w	r8, #2
 808a322:	ebc1 0108 	rsb	r1, r1, r8
 808a326:	9001      	str	r0, [sp, #4]
 808a328:	9100      	str	r1, [sp, #0]
 808a32a:	489d      	ldr	r0, [pc, #628]	; (808a5a0 <strftime+0x520>)
 808a32c:	49a1      	ldr	r1, [pc, #644]	; (808a5b4 <strftime+0x534>)
 808a32e:	4583      	cmp	fp, r0
 808a330:	bfb8      	it	lt
 808a332:	460b      	movlt	r3, r1
 808a334:	e21d      	b.n	808a772 <strftime+0x6f2>
 808a336:	4aa0      	ldr	r2, [pc, #640]	; (808a5b8 <strftime+0x538>)
 808a338:	49a0      	ldr	r1, [pc, #640]	; (808a5bc <strftime+0x53c>)
 808a33a:	68eb      	ldr	r3, [r5, #12]
 808a33c:	2864      	cmp	r0, #100	; 0x64
 808a33e:	bf08      	it	eq
 808a340:	460a      	moveq	r2, r1
 808a342:	1b31      	subs	r1, r6, r4
 808a344:	1938      	adds	r0, r7, r4
 808a346:	f7fb fb17 	bl	8085978 <sniprintf>
 808a34a:	2800      	cmp	r0, #0
 808a34c:	f280 8302 	bge.w	808a954 <strftime+0x8d4>
 808a350:	e340      	b.n	808a9d4 <strftime+0x954>
 808a352:	6968      	ldr	r0, [r5, #20]
 808a354:	692b      	ldr	r3, [r5, #16]
 808a356:	2800      	cmp	r0, #0
 808a358:	f103 0b01 	add.w	fp, r3, #1
 808a35c:	eb07 0804 	add.w	r8, r7, r4
 808a360:	ebc4 0a06 	rsb	sl, r4, r6
 808a364:	68eb      	ldr	r3, [r5, #12]
 808a366:	db05      	blt.n	808a374 <strftime+0x2f4>
 808a368:	2264      	movs	r2, #100	; 0x64
 808a36a:	fb90 f1f2 	sdiv	r1, r0, r2
 808a36e:	fb02 0011 	mls	r0, r2, r1, r0
 808a372:	e00a      	b.n	808a38a <strftime+0x30a>
 808a374:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a378:	9307      	str	r3, [sp, #28]
 808a37a:	f001 fc71 	bl	808bc60 <abs>
 808a37e:	2264      	movs	r2, #100	; 0x64
 808a380:	fb90 f1f2 	sdiv	r1, r0, r2
 808a384:	fb01 0012 	mls	r0, r1, r2, r0
 808a388:	9b07      	ldr	r3, [sp, #28]
 808a38a:	9001      	str	r0, [sp, #4]
 808a38c:	9300      	str	r3, [sp, #0]
 808a38e:	4651      	mov	r1, sl
 808a390:	465b      	mov	r3, fp
 808a392:	4640      	mov	r0, r8
 808a394:	4a8a      	ldr	r2, [pc, #552]	; (808a5c0 <strftime+0x540>)
 808a396:	f7fb faef 	bl	8085978 <sniprintf>
 808a39a:	e7d6      	b.n	808a34a <strftime+0x2ca>
 808a39c:	2325      	movs	r3, #37	; 0x25
 808a39e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808a3a2:	f1ba 0f00 	cmp.w	sl, #0
 808a3a6:	d007      	beq.n	808a3b8 <strftime+0x338>
 808a3a8:	f1b8 0f05 	cmp.w	r8, #5
 808a3ac:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808a3b0:	bf98      	it	ls
 808a3b2:	f04f 0806 	movls.w	r8, #6
 808a3b6:	e004      	b.n	808a3c2 <strftime+0x342>
 808a3b8:	232b      	movs	r3, #43	; 0x2b
 808a3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808a3be:	f04f 080a 	mov.w	r8, #10
 808a3c2:	f1b8 0306 	subs.w	r3, r8, #6
 808a3c6:	d102      	bne.n	808a3ce <strftime+0x34e>
 808a3c8:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808a3cc:	e00a      	b.n	808a3e4 <strftime+0x364>
 808a3ce:	4a7d      	ldr	r2, [pc, #500]	; (808a5c4 <strftime+0x544>)
 808a3d0:	211e      	movs	r1, #30
 808a3d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808a3d6:	f7fb facf 	bl	8085978 <sniprintf>
 808a3da:	2800      	cmp	r0, #0
 808a3dc:	ddf4      	ble.n	808a3c8 <strftime+0x348>
 808a3de:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808a3e2:	4418      	add	r0, r3
 808a3e4:	4978      	ldr	r1, [pc, #480]	; (808a5c8 <strftime+0x548>)
 808a3e6:	f7ff fdc7 	bl	8089f78 <strcpy>
 808a3ea:	462b      	mov	r3, r5
 808a3ec:	aa0a      	add	r2, sp, #40	; 0x28
 808a3ee:	1b31      	subs	r1, r6, r4
 808a3f0:	1938      	adds	r0, r7, r4
 808a3f2:	f7ff fe45 	bl	808a080 <strftime>
 808a3f6:	2800      	cmp	r0, #0
 808a3f8:	f340 82ec 	ble.w	808a9d4 <strftime+0x954>
 808a3fc:	4404      	add	r4, r0
 808a3fe:	e2de      	b.n	808a9be <strftime+0x93e>
 808a400:	4628      	mov	r0, r5
 808a402:	f7ff fddc 	bl	8089fbe <iso_year_adjust>
 808a406:	4680      	mov	r8, r0
 808a408:	6968      	ldr	r0, [r5, #20]
 808a40a:	2800      	cmp	r0, #0
 808a40c:	db05      	blt.n	808a41a <strftime+0x39a>
 808a40e:	2264      	movs	r2, #100	; 0x64
 808a410:	fb90 f1f2 	sdiv	r1, r0, r2
 808a414:	fb02 0011 	mls	r0, r2, r1, r0
 808a418:	e008      	b.n	808a42c <strftime+0x3ac>
 808a41a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a41e:	f001 fc1f 	bl	808bc60 <abs>
 808a422:	2264      	movs	r2, #100	; 0x64
 808a424:	fb90 f3f2 	sdiv	r3, r0, r2
 808a428:	fb03 0012 	mls	r0, r3, r2, r0
 808a42c:	f1b8 0f00 	cmp.w	r8, #0
 808a430:	da06      	bge.n	808a440 <strftime+0x3c0>
 808a432:	696a      	ldr	r2, [r5, #20]
 808a434:	4b65      	ldr	r3, [pc, #404]	; (808a5cc <strftime+0x54c>)
 808a436:	429a      	cmp	r2, r3
 808a438:	bfb8      	it	lt
 808a43a:	f04f 0801 	movlt.w	r8, #1
 808a43e:	e006      	b.n	808a44e <strftime+0x3ce>
 808a440:	d005      	beq.n	808a44e <strftime+0x3ce>
 808a442:	696a      	ldr	r2, [r5, #20]
 808a444:	4b56      	ldr	r3, [pc, #344]	; (808a5a0 <strftime+0x520>)
 808a446:	429a      	cmp	r2, r3
 808a448:	bfb8      	it	lt
 808a44a:	f04f 38ff 	movlt.w	r8, #4294967295
 808a44e:	2364      	movs	r3, #100	; 0x64
 808a450:	4440      	add	r0, r8
 808a452:	fb90 f2f3 	sdiv	r2, r0, r3
 808a456:	fb03 0012 	mls	r0, r3, r2, r0
 808a45a:	4418      	add	r0, r3
 808a45c:	e1f8      	b.n	808a850 <strftime+0x7d0>
 808a45e:	4b50      	ldr	r3, [pc, #320]	; (808a5a0 <strftime+0x520>)
 808a460:	6969      	ldr	r1, [r5, #20]
 808a462:	4628      	mov	r0, r5
 808a464:	4299      	cmp	r1, r3
 808a466:	bfac      	ite	ge
 808a468:	2300      	movge	r3, #0
 808a46a:	2301      	movlt	r3, #1
 808a46c:	9108      	str	r1, [sp, #32]
 808a46e:	9307      	str	r3, [sp, #28]
 808a470:	f7ff fda5 	bl	8089fbe <iso_year_adjust>
 808a474:	9908      	ldr	r1, [sp, #32]
 808a476:	4683      	mov	fp, r0
 808a478:	2900      	cmp	r1, #0
 808a47a:	db04      	blt.n	808a486 <strftime+0x406>
 808a47c:	2364      	movs	r3, #100	; 0x64
 808a47e:	fb91 f3f3 	sdiv	r3, r1, r3
 808a482:	3313      	adds	r3, #19
 808a484:	e008      	b.n	808a498 <strftime+0x418>
 808a486:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808a48a:	9108      	str	r1, [sp, #32]
 808a48c:	f001 fbe8 	bl	808bc60 <abs>
 808a490:	2364      	movs	r3, #100	; 0x64
 808a492:	fb90 f3f3 	sdiv	r3, r0, r3
 808a496:	9908      	ldr	r1, [sp, #32]
 808a498:	6968      	ldr	r0, [r5, #20]
 808a49a:	2800      	cmp	r0, #0
 808a49c:	db06      	blt.n	808a4ac <strftime+0x42c>
 808a49e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808a4a2:	fb90 fcfe 	sdiv	ip, r0, lr
 808a4a6:	fb0e 001c 	mls	r0, lr, ip, r0
 808a4aa:	e00d      	b.n	808a4c8 <strftime+0x448>
 808a4ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a4b0:	9109      	str	r1, [sp, #36]	; 0x24
 808a4b2:	9308      	str	r3, [sp, #32]
 808a4b4:	f001 fbd4 	bl	808bc60 <abs>
 808a4b8:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808a4bc:	fb90 fcfe 	sdiv	ip, r0, lr
 808a4c0:	fb0c 001e 	mls	r0, ip, lr, r0
 808a4c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 808a4c6:	9b08      	ldr	r3, [sp, #32]
 808a4c8:	f1bb 0f00 	cmp.w	fp, #0
 808a4cc:	da08      	bge.n	808a4e0 <strftime+0x460>
 808a4ce:	6969      	ldr	r1, [r5, #20]
 808a4d0:	4a3e      	ldr	r2, [pc, #248]	; (808a5cc <strftime+0x54c>)
 808a4d2:	4291      	cmp	r1, r2
 808a4d4:	da0a      	bge.n	808a4ec <strftime+0x46c>
 808a4d6:	f04f 0b01 	mov.w	fp, #1
 808a4da:	f8cd b01c 	str.w	fp, [sp, #28]
 808a4de:	e005      	b.n	808a4ec <strftime+0x46c>
 808a4e0:	d004      	beq.n	808a4ec <strftime+0x46c>
 808a4e2:	4a2f      	ldr	r2, [pc, #188]	; (808a5a0 <strftime+0x520>)
 808a4e4:	4291      	cmp	r1, r2
 808a4e6:	bfb8      	it	lt
 808a4e8:	f04f 3bff 	movlt.w	fp, #4294967295
 808a4ec:	eb0b 0200 	add.w	r2, fp, r0
 808a4f0:	1c50      	adds	r0, r2, #1
 808a4f2:	d102      	bne.n	808a4fa <strftime+0x47a>
 808a4f4:	3b01      	subs	r3, #1
 808a4f6:	2263      	movs	r2, #99	; 0x63
 808a4f8:	e003      	b.n	808a502 <strftime+0x482>
 808a4fa:	2a64      	cmp	r2, #100	; 0x64
 808a4fc:	bf04      	itt	eq
 808a4fe:	3301      	addeq	r3, #1
 808a500:	2200      	moveq	r2, #0
 808a502:	2064      	movs	r0, #100	; 0x64
 808a504:	fb00 2303 	mla	r3, r0, r3, r2
 808a508:	9a07      	ldr	r2, [sp, #28]
 808a50a:	b142      	cbz	r2, 808a51e <strftime+0x49e>
 808a50c:	222d      	movs	r2, #45	; 0x2d
 808a50e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808a512:	f1b8 0f00 	cmp.w	r8, #0
 808a516:	d013      	beq.n	808a540 <strftime+0x4c0>
 808a518:	f108 38ff 	add.w	r8, r8, #4294967295
 808a51c:	e010      	b.n	808a540 <strftime+0x4c0>
 808a51e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a522:	d110      	bne.n	808a546 <strftime+0x4c6>
 808a524:	f242 720f 	movw	r2, #9999	; 0x270f
 808a528:	4293      	cmp	r3, r2
 808a52a:	d90c      	bls.n	808a546 <strftime+0x4c6>
 808a52c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808a530:	f1b8 0f00 	cmp.w	r8, #0
 808a534:	d1f0      	bne.n	808a518 <strftime+0x498>
 808a536:	aa12      	add	r2, sp, #72	; 0x48
 808a538:	2125      	movs	r1, #37	; 0x25
 808a53a:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808a53e:	e00a      	b.n	808a556 <strftime+0x4d6>
 808a540:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808a544:	e000      	b.n	808a548 <strftime+0x4c8>
 808a546:	aa0a      	add	r2, sp, #40	; 0x28
 808a548:	2125      	movs	r1, #37	; 0x25
 808a54a:	7011      	strb	r1, [r2, #0]
 808a54c:	f1ba 0f00 	cmp.w	sl, #0
 808a550:	d101      	bne.n	808a556 <strftime+0x4d6>
 808a552:	1c50      	adds	r0, r2, #1
 808a554:	e002      	b.n	808a55c <strftime+0x4dc>
 808a556:	2130      	movs	r1, #48	; 0x30
 808a558:	1c90      	adds	r0, r2, #2
 808a55a:	7051      	strb	r1, [r2, #1]
 808a55c:	491c      	ldr	r1, [pc, #112]	; (808a5d0 <strftime+0x550>)
 808a55e:	9307      	str	r3, [sp, #28]
 808a560:	f7ff fd0a 	bl	8089f78 <strcpy>
 808a564:	9b07      	ldr	r3, [sp, #28]
 808a566:	9300      	str	r3, [sp, #0]
 808a568:	e1ac      	b.n	808a8c4 <strftime+0x844>
 808a56a:	4a14      	ldr	r2, [pc, #80]	; (808a5bc <strftime+0x53c>)
 808a56c:	4912      	ldr	r1, [pc, #72]	; (808a5b8 <strftime+0x538>)
 808a56e:	68ab      	ldr	r3, [r5, #8]
 808a570:	286b      	cmp	r0, #107	; 0x6b
 808a572:	bf08      	it	eq
 808a574:	460a      	moveq	r2, r1
 808a576:	e6e4      	b.n	808a342 <strftime+0x2c2>
 808a578:	68a9      	ldr	r1, [r5, #8]
 808a57a:	230c      	movs	r3, #12
 808a57c:	b131      	cbz	r1, 808a58c <strftime+0x50c>
 808a57e:	4299      	cmp	r1, r3
 808a580:	bf16      	itet	ne
 808a582:	fb91 f2f3 	sdivne	r2, r1, r3
 808a586:	460b      	moveq	r3, r1
 808a588:	fb03 1312 	mlsne	r3, r3, r2, r1
 808a58c:	4a0a      	ldr	r2, [pc, #40]	; (808a5b8 <strftime+0x538>)
 808a58e:	490b      	ldr	r1, [pc, #44]	; (808a5bc <strftime+0x53c>)
 808a590:	2849      	cmp	r0, #73	; 0x49
 808a592:	bf08      	it	eq
 808a594:	460a      	moveq	r2, r1
 808a596:	e6d4      	b.n	808a342 <strftime+0x2c2>
 808a598:	69eb      	ldr	r3, [r5, #28]
 808a59a:	4a0e      	ldr	r2, [pc, #56]	; (808a5d4 <strftime+0x554>)
 808a59c:	3301      	adds	r3, #1
 808a59e:	e6d0      	b.n	808a342 <strftime+0x2c2>
 808a5a0:	fffff894 	.word	0xfffff894
 808a5a4:	0808decf 	.word	0x0808decf
 808a5a8:	0808d853 	.word	0x0808d853
 808a5ac:	0808dec0 	.word	0x0808dec0
 808a5b0:	0808dec7 	.word	0x0808dec7
 808a5b4:	0808d316 	.word	0x0808d316
 808a5b8:	0808ded1 	.word	0x0808ded1
 808a5bc:	0808dedf 	.word	0x0808dedf
 808a5c0:	0808ded5 	.word	0x0808ded5
 808a5c4:	0808d1b9 	.word	0x0808d1b9
 808a5c8:	0808dee4 	.word	0x0808dee4
 808a5cc:	fffff895 	.word	0xfffff895
 808a5d0:	0808deec 	.word	0x0808deec
 808a5d4:	0808def0 	.word	0x0808def0
 808a5d8:	692b      	ldr	r3, [r5, #16]
 808a5da:	3301      	adds	r3, #1
 808a5dc:	e13c      	b.n	808a858 <strftime+0x7d8>
 808a5de:	686b      	ldr	r3, [r5, #4]
 808a5e0:	e13a      	b.n	808a858 <strftime+0x7d8>
 808a5e2:	9b02      	ldr	r3, [sp, #8]
 808a5e4:	429c      	cmp	r4, r3
 808a5e6:	f080 81f5 	bcs.w	808a9d4 <strftime+0x954>
 808a5ea:	230a      	movs	r3, #10
 808a5ec:	e1e5      	b.n	808a9ba <strftime+0x93a>
 808a5ee:	68ab      	ldr	r3, [r5, #8]
 808a5f0:	9a03      	ldr	r2, [sp, #12]
 808a5f2:	2b0b      	cmp	r3, #11
 808a5f4:	bfcc      	ite	gt
 808a5f6:	23a4      	movgt	r3, #164	; 0xa4
 808a5f8:	23a0      	movle	r3, #160	; 0xa0
 808a5fa:	4413      	add	r3, r2
 808a5fc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808a600:	4640      	mov	r0, r8
 808a602:	f000 f9f1 	bl	808a9e8 <strlen>
 808a606:	4642      	mov	r2, r8
 808a608:	4bb1      	ldr	r3, [pc, #708]	; (808a8d0 <strftime+0x850>)
 808a60a:	1939      	adds	r1, r7, r4
 808a60c:	f8d3 e000 	ldr.w	lr, [r3]
 808a610:	4420      	add	r0, r4
 808a612:	4284      	cmp	r4, r0
 808a614:	f000 81d3 	beq.w	808a9be <strftime+0x93e>
 808a618:	9b02      	ldr	r3, [sp, #8]
 808a61a:	429c      	cmp	r4, r3
 808a61c:	f080 81da 	bcs.w	808a9d4 <strftime+0x954>
 808a620:	f899 3000 	ldrb.w	r3, [r9]
 808a624:	3401      	adds	r4, #1
 808a626:	2b50      	cmp	r3, #80	; 0x50
 808a628:	7813      	ldrb	r3, [r2, #0]
 808a62a:	d10a      	bne.n	808a642 <strftime+0x5c2>
 808a62c:	eb0e 0c03 	add.w	ip, lr, r3
 808a630:	f89c c001 	ldrb.w	ip, [ip, #1]
 808a634:	f00c 0c03 	and.w	ip, ip, #3
 808a638:	f1bc 0f01 	cmp.w	ip, #1
 808a63c:	bf08      	it	eq
 808a63e:	3320      	addeq	r3, #32
 808a640:	b2db      	uxtb	r3, r3
 808a642:	f801 3b01 	strb.w	r3, [r1], #1
 808a646:	3201      	adds	r2, #1
 808a648:	e7e3      	b.n	808a612 <strftime+0x592>
 808a64a:	686b      	ldr	r3, [r5, #4]
 808a64c:	4aa1      	ldr	r2, [pc, #644]	; (808a8d4 <strftime+0x854>)
 808a64e:	9300      	str	r3, [sp, #0]
 808a650:	68ab      	ldr	r3, [r5, #8]
 808a652:	e139      	b.n	808a8c8 <strftime+0x848>
 808a654:	6a2b      	ldr	r3, [r5, #32]
 808a656:	2b00      	cmp	r3, #0
 808a658:	db17      	blt.n	808a68a <strftime+0x60a>
 808a65a:	f001 f979 	bl	808b950 <__tz_lock>
 808a65e:	9b06      	ldr	r3, [sp, #24]
 808a660:	b91b      	cbnz	r3, 808a66a <strftime+0x5ea>
 808a662:	f001 f977 	bl	808b954 <_tzset_unlocked>
 808a666:	2301      	movs	r3, #1
 808a668:	9306      	str	r3, [sp, #24]
 808a66a:	f001 fe5f 	bl	808c32c <__gettzinfo>
 808a66e:	6a2b      	ldr	r3, [r5, #32]
 808a670:	221c      	movs	r2, #28
 808a672:	2b00      	cmp	r3, #0
 808a674:	bfd4      	ite	le
 808a676:	2300      	movle	r3, #0
 808a678:	2301      	movgt	r3, #1
 808a67a:	fb02 0003 	mla	r0, r2, r3, r0
 808a67e:	6a03      	ldr	r3, [r0, #32]
 808a680:	f1c3 0800 	rsb	r8, r3, #0
 808a684:	f001 f965 	bl	808b952 <__tz_unlock>
 808a688:	e001      	b.n	808a68e <strftime+0x60e>
 808a68a:	f04f 0800 	mov.w	r8, #0
 808a68e:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808a692:	ebc4 0c06 	rsb	ip, r4, r6
 808a696:	4670      	mov	r0, lr
 808a698:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808a69c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808a6a0:	f141 33ff 	adc.w	r3, r1, #4294967295
 808a6a4:	2a00      	cmp	r2, #0
 808a6a6:	f173 0b00 	sbcs.w	fp, r3, #0
 808a6aa:	eb07 0a04 	add.w	sl, r7, r4
 808a6ae:	da03      	bge.n	808a6b8 <strftime+0x638>
 808a6b0:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808a6b4:	f141 33ff 	adc.w	r3, r1, #4294967295
 808a6b8:	0891      	lsrs	r1, r2, #2
 808a6ba:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808a6be:	109b      	asrs	r3, r3, #2
 808a6c0:	9104      	str	r1, [sp, #16]
 808a6c2:	9305      	str	r3, [sp, #20]
 808a6c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 808a6c8:	2364      	movs	r3, #100	; 0x64
 808a6ca:	fb91 f1f3 	sdiv	r1, r1, r3
 808a6ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808a6d2:	1a52      	subs	r2, r2, r1
 808a6d4:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808a6d8:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808a6dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808a6e0:	fb90 f1f1 	sdiv	r1, r0, r1
 808a6e4:	1852      	adds	r2, r2, r1
 808a6e6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808a6ea:	f240 116d 	movw	r1, #365	; 0x16d
 808a6ee:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808a6f2:	fb01 fe0e 	mul.w	lr, r1, lr
 808a6f6:	69e9      	ldr	r1, [r5, #28]
 808a6f8:	eb12 020e 	adds.w	r2, r2, lr
 808a6fc:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808a700:	1852      	adds	r2, r2, r1
 808a702:	f04f 0e18 	mov.w	lr, #24
 808a706:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808a70a:	fba2 010e 	umull	r0, r1, r2, lr
 808a70e:	fb0e 1103 	mla	r1, lr, r3, r1
 808a712:	68ab      	ldr	r3, [r5, #8]
 808a714:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808a718:	18c0      	adds	r0, r0, r3
 808a71a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808a71e:	fba0 230e 	umull	r2, r3, r0, lr
 808a722:	fb0e 3301 	mla	r3, lr, r1, r3
 808a726:	6869      	ldr	r1, [r5, #4]
 808a728:	1852      	adds	r2, r2, r1
 808a72a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808a72e:	fba2 010e 	umull	r0, r1, r2, lr
 808a732:	fb0e 1103 	mla	r1, lr, r3, r1
 808a736:	682b      	ldr	r3, [r5, #0]
 808a738:	4a67      	ldr	r2, [pc, #412]	; (808a8d8 <strftime+0x858>)
 808a73a:	18c0      	adds	r0, r0, r3
 808a73c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808a740:	ebb0 0008 	subs.w	r0, r0, r8
 808a744:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808a748:	e9cd 0100 	strd	r0, r1, [sp]
 808a74c:	4661      	mov	r1, ip
 808a74e:	4650      	mov	r0, sl
 808a750:	f7fb f912 	bl	8085978 <sniprintf>
 808a754:	e5f9      	b.n	808a34a <strftime+0x2ca>
 808a756:	682b      	ldr	r3, [r5, #0]
 808a758:	e07e      	b.n	808a858 <strftime+0x7d8>
 808a75a:	9b02      	ldr	r3, [sp, #8]
 808a75c:	429c      	cmp	r4, r3
 808a75e:	f080 8139 	bcs.w	808a9d4 <strftime+0x954>
 808a762:	2309      	movs	r3, #9
 808a764:	e129      	b.n	808a9ba <strftime+0x93a>
 808a766:	682b      	ldr	r3, [r5, #0]
 808a768:	4a5c      	ldr	r2, [pc, #368]	; (808a8dc <strftime+0x85c>)
 808a76a:	9301      	str	r3, [sp, #4]
 808a76c:	686b      	ldr	r3, [r5, #4]
 808a76e:	9300      	str	r3, [sp, #0]
 808a770:	68ab      	ldr	r3, [r5, #8]
 808a772:	1b31      	subs	r1, r6, r4
 808a774:	1938      	adds	r0, r7, r4
 808a776:	e60e      	b.n	808a396 <strftime+0x316>
 808a778:	9b02      	ldr	r3, [sp, #8]
 808a77a:	429c      	cmp	r4, r3
 808a77c:	f080 812a 	bcs.w	808a9d4 <strftime+0x954>
 808a780:	69ab      	ldr	r3, [r5, #24]
 808a782:	1c62      	adds	r2, r4, #1
 808a784:	b90b      	cbnz	r3, 808a78a <strftime+0x70a>
 808a786:	2337      	movs	r3, #55	; 0x37
 808a788:	e000      	b.n	808a78c <strftime+0x70c>
 808a78a:	3330      	adds	r3, #48	; 0x30
 808a78c:	553b      	strb	r3, [r7, r4]
 808a78e:	4614      	mov	r4, r2
 808a790:	e115      	b.n	808a9be <strftime+0x93e>
 808a792:	69eb      	ldr	r3, [r5, #28]
 808a794:	69aa      	ldr	r2, [r5, #24]
 808a796:	3307      	adds	r3, #7
 808a798:	1a9b      	subs	r3, r3, r2
 808a79a:	2207      	movs	r2, #7
 808a79c:	fb93 f3f2 	sdiv	r3, r3, r2
 808a7a0:	e05a      	b.n	808a858 <strftime+0x7d8>
 808a7a2:	4628      	mov	r0, r5
 808a7a4:	f7ff fc0b 	bl	8089fbe <iso_year_adjust>
 808a7a8:	69aa      	ldr	r2, [r5, #24]
 808a7aa:	b10a      	cbz	r2, 808a7b0 <strftime+0x730>
 808a7ac:	1e53      	subs	r3, r2, #1
 808a7ae:	e000      	b.n	808a7b2 <strftime+0x732>
 808a7b0:	2306      	movs	r3, #6
 808a7b2:	2800      	cmp	r0, #0
 808a7b4:	dc2f      	bgt.n	808a816 <strftime+0x796>
 808a7b6:	69ea      	ldr	r2, [r5, #28]
 808a7b8:	d101      	bne.n	808a7be <strftime+0x73e>
 808a7ba:	320a      	adds	r2, #10
 808a7bc:	e03b      	b.n	808a836 <strftime+0x7b6>
 808a7be:	f240 716b 	movw	r1, #1899	; 0x76b
 808a7c2:	1a9a      	subs	r2, r3, r2
 808a7c4:	696b      	ldr	r3, [r5, #20]
 808a7c6:	2b00      	cmp	r3, #0
 808a7c8:	bfb4      	ite	lt
 808a7ca:	4608      	movlt	r0, r1
 808a7cc:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808a7d0:	4418      	add	r0, r3
 808a7d2:	0781      	lsls	r1, r0, #30
 808a7d4:	d107      	bne.n	808a7e6 <strftime+0x766>
 808a7d6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808a7da:	4601      	mov	r1, r0
 808a7dc:	fb90 f0fe 	sdiv	r0, r0, lr
 808a7e0:	fb0e 1110 	mls	r1, lr, r0, r1
 808a7e4:	b981      	cbnz	r1, 808a808 <strftime+0x788>
 808a7e6:	f240 716b 	movw	r1, #1899	; 0x76b
 808a7ea:	2b00      	cmp	r3, #0
 808a7ec:	bfa8      	it	ge
 808a7ee:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808a7f2:	4419      	add	r1, r3
 808a7f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808a7f8:	fb91 f0f3 	sdiv	r0, r1, r3
 808a7fc:	fb03 1110 	mls	r1, r3, r0, r1
 808a800:	fab1 f181 	clz	r1, r1
 808a804:	0949      	lsrs	r1, r1, #5
 808a806:	e000      	b.n	808a80a <strftime+0x78a>
 808a808:	2101      	movs	r1, #1
 808a80a:	1a52      	subs	r2, r2, r1
 808a80c:	2a05      	cmp	r2, #5
 808a80e:	bfb4      	ite	lt
 808a810:	2335      	movlt	r3, #53	; 0x35
 808a812:	2334      	movge	r3, #52	; 0x34
 808a814:	e020      	b.n	808a858 <strftime+0x7d8>
 808a816:	2301      	movs	r3, #1
 808a818:	e01e      	b.n	808a858 <strftime+0x7d8>
 808a81a:	9b02      	ldr	r3, [sp, #8]
 808a81c:	429c      	cmp	r4, r3
 808a81e:	f080 80d9 	bcs.w	808a9d4 <strftime+0x954>
 808a822:	69ab      	ldr	r3, [r5, #24]
 808a824:	3330      	adds	r3, #48	; 0x30
 808a826:	e0c8      	b.n	808a9ba <strftime+0x93a>
 808a828:	69aa      	ldr	r2, [r5, #24]
 808a82a:	b10a      	cbz	r2, 808a830 <strftime+0x7b0>
 808a82c:	1e53      	subs	r3, r2, #1
 808a82e:	e000      	b.n	808a832 <strftime+0x7b2>
 808a830:	2306      	movs	r3, #6
 808a832:	69ea      	ldr	r2, [r5, #28]
 808a834:	3207      	adds	r2, #7
 808a836:	1ad2      	subs	r2, r2, r3
 808a838:	2307      	movs	r3, #7
 808a83a:	fb92 f3f3 	sdiv	r3, r2, r3
 808a83e:	e00b      	b.n	808a858 <strftime+0x7d8>
 808a840:	6968      	ldr	r0, [r5, #20]
 808a842:	2800      	cmp	r0, #0
 808a844:	da03      	bge.n	808a84e <strftime+0x7ce>
 808a846:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a84a:	f001 fa09 	bl	808bc60 <abs>
 808a84e:	2364      	movs	r3, #100	; 0x64
 808a850:	fb90 f2f3 	sdiv	r2, r0, r3
 808a854:	fb02 0313 	mls	r3, r2, r3, r0
 808a858:	4a21      	ldr	r2, [pc, #132]	; (808a8e0 <strftime+0x860>)
 808a85a:	e572      	b.n	808a342 <strftime+0x2c2>
 808a85c:	696b      	ldr	r3, [r5, #20]
 808a85e:	4a21      	ldr	r2, [pc, #132]	; (808a8e4 <strftime+0x864>)
 808a860:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808a864:	4293      	cmp	r3, r2
 808a866:	da05      	bge.n	808a874 <strftime+0x7f4>
 808a868:	232d      	movs	r3, #45	; 0x2d
 808a86a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808a86e:	f1cb 0b00 	rsb	fp, fp, #0
 808a872:	e008      	b.n	808a886 <strftime+0x806>
 808a874:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a878:	d10d      	bne.n	808a896 <strftime+0x816>
 808a87a:	f242 730f 	movw	r3, #9999	; 0x270f
 808a87e:	459b      	cmp	fp, r3
 808a880:	d911      	bls.n	808a8a6 <strftime+0x826>
 808a882:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808a886:	f1b8 0f00 	cmp.w	r8, #0
 808a88a:	d001      	beq.n	808a890 <strftime+0x810>
 808a88c:	f108 38ff 	add.w	r8, r8, #4294967295
 808a890:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808a894:	e000      	b.n	808a898 <strftime+0x818>
 808a896:	ab0a      	add	r3, sp, #40	; 0x28
 808a898:	2225      	movs	r2, #37	; 0x25
 808a89a:	701a      	strb	r2, [r3, #0]
 808a89c:	f1ba 0f00 	cmp.w	sl, #0
 808a8a0:	d108      	bne.n	808a8b4 <strftime+0x834>
 808a8a2:	1c58      	adds	r0, r3, #1
 808a8a4:	e009      	b.n	808a8ba <strftime+0x83a>
 808a8a6:	f1b8 0f00 	cmp.w	r8, #0
 808a8aa:	d1f4      	bne.n	808a896 <strftime+0x816>
 808a8ac:	2325      	movs	r3, #37	; 0x25
 808a8ae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808a8b2:	ab0a      	add	r3, sp, #40	; 0x28
 808a8b4:	2230      	movs	r2, #48	; 0x30
 808a8b6:	1c98      	adds	r0, r3, #2
 808a8b8:	705a      	strb	r2, [r3, #1]
 808a8ba:	490b      	ldr	r1, [pc, #44]	; (808a8e8 <strftime+0x868>)
 808a8bc:	f7ff fb5c 	bl	8089f78 <strcpy>
 808a8c0:	f8cd b000 	str.w	fp, [sp]
 808a8c4:	4643      	mov	r3, r8
 808a8c6:	aa0a      	add	r2, sp, #40	; 0x28
 808a8c8:	1b31      	subs	r1, r6, r4
 808a8ca:	1938      	adds	r0, r7, r4
 808a8cc:	e03f      	b.n	808a94e <strftime+0x8ce>
 808a8ce:	bf00      	nop
 808a8d0:	20000054 	.word	0x20000054
 808a8d4:	0808deff 	.word	0x0808deff
 808a8d8:	0808def5 	.word	0x0808def5
 808a8dc:	0808defa 	.word	0x0808defa
 808a8e0:	0808dedf 	.word	0x0808dedf
 808a8e4:	fffff894 	.word	0xfffff894
 808a8e8:	0808deec 	.word	0x0808deec
 808a8ec:	6a2b      	ldr	r3, [r5, #32]
 808a8ee:	2b00      	cmp	r3, #0
 808a8f0:	db65      	blt.n	808a9be <strftime+0x93e>
 808a8f2:	f001 f82d 	bl	808b950 <__tz_lock>
 808a8f6:	9b06      	ldr	r3, [sp, #24]
 808a8f8:	b91b      	cbnz	r3, 808a902 <strftime+0x882>
 808a8fa:	f001 f82b 	bl	808b954 <_tzset_unlocked>
 808a8fe:	2301      	movs	r3, #1
 808a900:	9306      	str	r3, [sp, #24]
 808a902:	f001 fd13 	bl	808c32c <__gettzinfo>
 808a906:	6a2b      	ldr	r3, [r5, #32]
 808a908:	221c      	movs	r2, #28
 808a90a:	2b00      	cmp	r3, #0
 808a90c:	bfd4      	ite	le
 808a90e:	2300      	movle	r3, #0
 808a910:	2301      	movgt	r3, #1
 808a912:	fb02 0003 	mla	r0, r2, r3, r0
 808a916:	6a03      	ldr	r3, [r0, #32]
 808a918:	eb07 0a04 	add.w	sl, r7, r4
 808a91c:	f1c3 0800 	rsb	r8, r3, #0
 808a920:	f001 f817 	bl	808b952 <__tz_unlock>
 808a924:	233c      	movs	r3, #60	; 0x3c
 808a926:	fb98 f0f3 	sdiv	r0, r8, r3
 808a92a:	9307      	str	r3, [sp, #28]
 808a92c:	f001 fd98 	bl	808c460 <labs>
 808a930:	9b07      	ldr	r3, [sp, #28]
 808a932:	ebc4 0b06 	rsb	fp, r4, r6
 808a936:	fb90 f2f3 	sdiv	r2, r0, r3
 808a93a:	fb02 0013 	mls	r0, r2, r3, r0
 808a93e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808a942:	9000      	str	r0, [sp, #0]
 808a944:	fb98 f3f3 	sdiv	r3, r8, r3
 808a948:	4659      	mov	r1, fp
 808a94a:	4650      	mov	r0, sl
 808a94c:	4a24      	ldr	r2, [pc, #144]	; (808a9e0 <strftime+0x960>)
 808a94e:	f7fb f813 	bl	8085978 <sniprintf>
 808a952:	e4fa      	b.n	808a34a <strftime+0x2ca>
 808a954:	4404      	add	r4, r0
 808a956:	42a6      	cmp	r6, r4
 808a958:	d831      	bhi.n	808a9be <strftime+0x93e>
 808a95a:	e03b      	b.n	808a9d4 <strftime+0x954>
 808a95c:	6a2b      	ldr	r3, [r5, #32]
 808a95e:	2b00      	cmp	r3, #0
 808a960:	db2d      	blt.n	808a9be <strftime+0x93e>
 808a962:	f000 fff5 	bl	808b950 <__tz_lock>
 808a966:	9b06      	ldr	r3, [sp, #24]
 808a968:	b91b      	cbnz	r3, 808a972 <strftime+0x8f2>
 808a96a:	f000 fff3 	bl	808b954 <_tzset_unlocked>
 808a96e:	2301      	movs	r3, #1
 808a970:	9306      	str	r3, [sp, #24]
 808a972:	6a2b      	ldr	r3, [r5, #32]
 808a974:	4a1b      	ldr	r2, [pc, #108]	; (808a9e4 <strftime+0x964>)
 808a976:	2b00      	cmp	r3, #0
 808a978:	bfd4      	ite	le
 808a97a:	2300      	movle	r3, #0
 808a97c:	2301      	movgt	r3, #1
 808a97e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a982:	4640      	mov	r0, r8
 808a984:	f000 f830 	bl	808a9e8 <strlen>
 808a988:	f108 38ff 	add.w	r8, r8, #4294967295
 808a98c:	193b      	adds	r3, r7, r4
 808a98e:	4420      	add	r0, r4
 808a990:	4284      	cmp	r4, r0
 808a992:	d00b      	beq.n	808a9ac <strftime+0x92c>
 808a994:	9a02      	ldr	r2, [sp, #8]
 808a996:	4294      	cmp	r4, r2
 808a998:	d205      	bcs.n	808a9a6 <strftime+0x926>
 808a99a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a99e:	3401      	adds	r4, #1
 808a9a0:	f803 2b01 	strb.w	r2, [r3], #1
 808a9a4:	e7f4      	b.n	808a990 <strftime+0x910>
 808a9a6:	f000 ffd4 	bl	808b952 <__tz_unlock>
 808a9aa:	e013      	b.n	808a9d4 <strftime+0x954>
 808a9ac:	f000 ffd1 	bl	808b952 <__tz_unlock>
 808a9b0:	e005      	b.n	808a9be <strftime+0x93e>
 808a9b2:	9b02      	ldr	r3, [sp, #8]
 808a9b4:	429c      	cmp	r4, r3
 808a9b6:	d20d      	bcs.n	808a9d4 <strftime+0x954>
 808a9b8:	2325      	movs	r3, #37	; 0x25
 808a9ba:	553b      	strb	r3, [r7, r4]
 808a9bc:	3401      	adds	r4, #1
 808a9be:	f899 3000 	ldrb.w	r3, [r9]
 808a9c2:	b11b      	cbz	r3, 808a9cc <strftime+0x94c>
 808a9c4:	f109 0901 	add.w	r9, r9, #1
 808a9c8:	f7ff bb69 	b.w	808a09e <strftime+0x1e>
 808a9cc:	b126      	cbz	r6, 808a9d8 <strftime+0x958>
 808a9ce:	2300      	movs	r3, #0
 808a9d0:	553b      	strb	r3, [r7, r4]
 808a9d2:	e001      	b.n	808a9d8 <strftime+0x958>
 808a9d4:	2000      	movs	r0, #0
 808a9d6:	e000      	b.n	808a9da <strftime+0x95a>
 808a9d8:	4620      	mov	r0, r4
 808a9da:	b013      	add	sp, #76	; 0x4c
 808a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a9e0:	0808df09 	.word	0x0808df09
 808a9e4:	200000f4 	.word	0x200000f4

0808a9e8 <strlen>:
 808a9e8:	4603      	mov	r3, r0
 808a9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a9ee:	2a00      	cmp	r2, #0
 808a9f0:	d1fb      	bne.n	808a9ea <strlen+0x2>
 808a9f2:	1a18      	subs	r0, r3, r0
 808a9f4:	3801      	subs	r0, #1
 808a9f6:	4770      	bx	lr

0808a9f8 <strncmp>:
 808a9f8:	b530      	push	{r4, r5, lr}
 808a9fa:	b182      	cbz	r2, 808aa1e <strncmp+0x26>
 808a9fc:	1e45      	subs	r5, r0, #1
 808a9fe:	3901      	subs	r1, #1
 808aa00:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808aa04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808aa08:	42a3      	cmp	r3, r4
 808aa0a:	d106      	bne.n	808aa1a <strncmp+0x22>
 808aa0c:	43ec      	mvns	r4, r5
 808aa0e:	4414      	add	r4, r2
 808aa10:	42e0      	cmn	r0, r4
 808aa12:	d001      	beq.n	808aa18 <strncmp+0x20>
 808aa14:	2b00      	cmp	r3, #0
 808aa16:	d1f3      	bne.n	808aa00 <strncmp+0x8>
 808aa18:	461c      	mov	r4, r3
 808aa1a:	1b18      	subs	r0, r3, r4
 808aa1c:	bd30      	pop	{r4, r5, pc}
 808aa1e:	4610      	mov	r0, r2
 808aa20:	bd30      	pop	{r4, r5, pc}

0808aa22 <strncpy>:
 808aa22:	4603      	mov	r3, r0
 808aa24:	b510      	push	{r4, lr}
 808aa26:	b142      	cbz	r2, 808aa3a <strncpy+0x18>
 808aa28:	f811 4b01 	ldrb.w	r4, [r1], #1
 808aa2c:	3a01      	subs	r2, #1
 808aa2e:	f803 4b01 	strb.w	r4, [r3], #1
 808aa32:	2c00      	cmp	r4, #0
 808aa34:	d1f7      	bne.n	808aa26 <strncpy+0x4>
 808aa36:	441a      	add	r2, r3
 808aa38:	e000      	b.n	808aa3c <strncpy+0x1a>
 808aa3a:	bd10      	pop	{r4, pc}
 808aa3c:	4293      	cmp	r3, r2
 808aa3e:	d002      	beq.n	808aa46 <strncpy+0x24>
 808aa40:	f803 4b01 	strb.w	r4, [r3], #1
 808aa44:	e7fa      	b.n	808aa3c <strncpy+0x1a>
 808aa46:	bd10      	pop	{r4, pc}

0808aa48 <strstr>:
 808aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 808aa4a:	7803      	ldrb	r3, [r0, #0]
 808aa4c:	b963      	cbnz	r3, 808aa68 <strstr+0x20>
 808aa4e:	780b      	ldrb	r3, [r1, #0]
 808aa50:	2b00      	cmp	r3, #0
 808aa52:	bf18      	it	ne
 808aa54:	2000      	movne	r0, #0
 808aa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808aa58:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808aa5c:	b162      	cbz	r2, 808aa78 <strstr+0x30>
 808aa5e:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808aa62:	4630      	mov	r0, r6
 808aa64:	4297      	cmp	r7, r2
 808aa66:	d0f7      	beq.n	808aa58 <strstr+0x10>
 808aa68:	4603      	mov	r3, r0
 808aa6a:	1c46      	adds	r6, r0, #1
 808aa6c:	7800      	ldrb	r0, [r0, #0]
 808aa6e:	b110      	cbz	r0, 808aa76 <strstr+0x2e>
 808aa70:	1e4d      	subs	r5, r1, #1
 808aa72:	1e5c      	subs	r4, r3, #1
 808aa74:	e7f0      	b.n	808aa58 <strstr+0x10>
 808aa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808aa78:	4618      	mov	r0, r3
 808aa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808aa7c <sulp>:
 808aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808aa80:	460f      	mov	r7, r1
 808aa82:	4690      	mov	r8, r2
 808aa84:	f001 ffb6 	bl	808c9f4 <__ulp>
 808aa88:	4604      	mov	r4, r0
 808aa8a:	460d      	mov	r5, r1
 808aa8c:	f1b8 0f00 	cmp.w	r8, #0
 808aa90:	d011      	beq.n	808aab6 <sulp+0x3a>
 808aa92:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808aa96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808aa9a:	2b00      	cmp	r3, #0
 808aa9c:	dd0b      	ble.n	808aab6 <sulp+0x3a>
 808aa9e:	051b      	lsls	r3, r3, #20
 808aaa0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808aaa4:	2400      	movs	r4, #0
 808aaa6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808aaaa:	4622      	mov	r2, r4
 808aaac:	462b      	mov	r3, r5
 808aaae:	f7fe f8ad 	bl	8088c0c <__aeabi_dmul>
 808aab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808aab6:	4620      	mov	r0, r4
 808aab8:	4629      	mov	r1, r5
 808aaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808aac0 <_strtod_r>:
 808aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808aac4:	4682      	mov	sl, r0
 808aac6:	460c      	mov	r4, r1
 808aac8:	b09d      	sub	sp, #116	; 0x74
 808aaca:	2300      	movs	r3, #0
 808aacc:	9213      	str	r2, [sp, #76]	; 0x4c
 808aace:	9318      	str	r3, [sp, #96]	; 0x60
 808aad0:	f04f 0800 	mov.w	r8, #0
 808aad4:	f04f 0900 	mov.w	r9, #0
 808aad8:	9117      	str	r1, [sp, #92]	; 0x5c
 808aada:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808aadc:	781a      	ldrb	r2, [r3, #0]
 808aade:	2a0d      	cmp	r2, #13
 808aae0:	d805      	bhi.n	808aaee <_strtod_r+0x2e>
 808aae2:	2a09      	cmp	r2, #9
 808aae4:	d213      	bcs.n	808ab0e <_strtod_r+0x4e>
 808aae6:	2a00      	cmp	r2, #0
 808aae8:	f000 81ad 	beq.w	808ae46 <_strtod_r+0x386>
 808aaec:	e012      	b.n	808ab14 <_strtod_r+0x54>
 808aaee:	2a2b      	cmp	r2, #43	; 0x2b
 808aaf0:	d004      	beq.n	808aafc <_strtod_r+0x3c>
 808aaf2:	2a2d      	cmp	r2, #45	; 0x2d
 808aaf4:	d004      	beq.n	808ab00 <_strtod_r+0x40>
 808aaf6:	2a20      	cmp	r2, #32
 808aaf8:	d10c      	bne.n	808ab14 <_strtod_r+0x54>
 808aafa:	e008      	b.n	808ab0e <_strtod_r+0x4e>
 808aafc:	2200      	movs	r2, #0
 808aafe:	e000      	b.n	808ab02 <_strtod_r+0x42>
 808ab00:	2201      	movs	r2, #1
 808ab02:	920c      	str	r2, [sp, #48]	; 0x30
 808ab04:	1c5a      	adds	r2, r3, #1
 808ab06:	9217      	str	r2, [sp, #92]	; 0x5c
 808ab08:	785b      	ldrb	r3, [r3, #1]
 808ab0a:	b92b      	cbnz	r3, 808ab18 <_strtod_r+0x58>
 808ab0c:	e19b      	b.n	808ae46 <_strtod_r+0x386>
 808ab0e:	3301      	adds	r3, #1
 808ab10:	9317      	str	r3, [sp, #92]	; 0x5c
 808ab12:	e7e2      	b.n	808aada <_strtod_r+0x1a>
 808ab14:	2300      	movs	r3, #0
 808ab16:	930c      	str	r3, [sp, #48]	; 0x30
 808ab18:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808ab1a:	782b      	ldrb	r3, [r5, #0]
 808ab1c:	2b30      	cmp	r3, #48	; 0x30
 808ab1e:	d15c      	bne.n	808abda <_strtod_r+0x11a>
 808ab20:	786b      	ldrb	r3, [r5, #1]
 808ab22:	2b58      	cmp	r3, #88	; 0x58
 808ab24:	d001      	beq.n	808ab2a <_strtod_r+0x6a>
 808ab26:	2b78      	cmp	r3, #120	; 0x78
 808ab28:	d14c      	bne.n	808abc4 <_strtod_r+0x104>
 808ab2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808ab2c:	4aa8      	ldr	r2, [pc, #672]	; (808add0 <_strtod_r+0x310>)
 808ab2e:	9301      	str	r3, [sp, #4]
 808ab30:	ab18      	add	r3, sp, #96	; 0x60
 808ab32:	9300      	str	r3, [sp, #0]
 808ab34:	a917      	add	r1, sp, #92	; 0x5c
 808ab36:	ab19      	add	r3, sp, #100	; 0x64
 808ab38:	4650      	mov	r0, sl
 808ab3a:	f001 f8e0 	bl	808bcfe <__gethex>
 808ab3e:	f010 0607 	ands.w	r6, r0, #7
 808ab42:	4604      	mov	r4, r0
 808ab44:	f000 8585 	beq.w	808b652 <_strtod_r+0xb92>
 808ab48:	2e06      	cmp	r6, #6
 808ab4a:	d105      	bne.n	808ab58 <_strtod_r+0x98>
 808ab4c:	3501      	adds	r5, #1
 808ab4e:	2300      	movs	r3, #0
 808ab50:	9517      	str	r5, [sp, #92]	; 0x5c
 808ab52:	930c      	str	r3, [sp, #48]	; 0x30
 808ab54:	f000 bd7d 	b.w	808b652 <_strtod_r+0xb92>
 808ab58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808ab5a:	b13a      	cbz	r2, 808ab6c <_strtod_r+0xac>
 808ab5c:	2135      	movs	r1, #53	; 0x35
 808ab5e:	a81a      	add	r0, sp, #104	; 0x68
 808ab60:	f002 f82f 	bl	808cbc2 <__copybits>
 808ab64:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ab66:	4650      	mov	r0, sl
 808ab68:	f001 fcb3 	bl	808c4d2 <_Bfree>
 808ab6c:	2e06      	cmp	r6, #6
 808ab6e:	d822      	bhi.n	808abb6 <_strtod_r+0xf6>
 808ab70:	e8df f006 	tbb	[pc, r6]
 808ab74:	18080d04 	.word	0x18080d04
 808ab78:	0d1d      	.short	0x0d1d
 808ab7a:	04          	.byte	0x04
 808ab7b:	00          	.byte	0x00
 808ab7c:	f04f 0900 	mov.w	r9, #0
 808ab80:	46c8      	mov	r8, r9
 808ab82:	e018      	b.n	808abb6 <_strtod_r+0xf6>
 808ab84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808ab88:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808ab8c:	e013      	b.n	808abb6 <_strtod_r+0xf6>
 808ab8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ab90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808ab92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808ab96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808ab9a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808ab9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808aba2:	e008      	b.n	808abb6 <_strtod_r+0xf6>
 808aba4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808add4 <_strtod_r+0x314>
 808aba8:	f04f 0800 	mov.w	r8, #0
 808abac:	e003      	b.n	808abb6 <_strtod_r+0xf6>
 808abae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808abb2:	f04f 38ff 	mov.w	r8, #4294967295
 808abb6:	0721      	lsls	r1, r4, #28
 808abb8:	f140 854b 	bpl.w	808b652 <_strtod_r+0xb92>
 808abbc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808abc0:	f000 bd47 	b.w	808b652 <_strtod_r+0xb92>
 808abc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808abc6:	1c5a      	adds	r2, r3, #1
 808abc8:	9217      	str	r2, [sp, #92]	; 0x5c
 808abca:	785b      	ldrb	r3, [r3, #1]
 808abcc:	2b30      	cmp	r3, #48	; 0x30
 808abce:	d0f9      	beq.n	808abc4 <_strtod_r+0x104>
 808abd0:	2b00      	cmp	r3, #0
 808abd2:	f000 853e 	beq.w	808b652 <_strtod_r+0xb92>
 808abd6:	2301      	movs	r3, #1
 808abd8:	e000      	b.n	808abdc <_strtod_r+0x11c>
 808abda:	2300      	movs	r3, #0
 808abdc:	9305      	str	r3, [sp, #20]
 808abde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808abe0:	220a      	movs	r2, #10
 808abe2:	9306      	str	r3, [sp, #24]
 808abe4:	2300      	movs	r3, #0
 808abe6:	469b      	mov	fp, r3
 808abe8:	9302      	str	r3, [sp, #8]
 808abea:	9304      	str	r3, [sp, #16]
 808abec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808abee:	782e      	ldrb	r6, [r5, #0]
 808abf0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808abf4:	b2d9      	uxtb	r1, r3
 808abf6:	2909      	cmp	r1, #9
 808abf8:	d811      	bhi.n	808ac1e <_strtod_r+0x15e>
 808abfa:	f1bb 0f08 	cmp.w	fp, #8
 808abfe:	bfd5      	itete	le
 808ac00:	9904      	ldrle	r1, [sp, #16]
 808ac02:	9902      	ldrgt	r1, [sp, #8]
 808ac04:	fb02 3301 	mlale	r3, r2, r1, r3
 808ac08:	fb02 3301 	mlagt	r3, r2, r1, r3
 808ac0c:	f105 0501 	add.w	r5, r5, #1
 808ac10:	bfd4      	ite	le
 808ac12:	9304      	strle	r3, [sp, #16]
 808ac14:	9302      	strgt	r3, [sp, #8]
 808ac16:	f10b 0b01 	add.w	fp, fp, #1
 808ac1a:	9517      	str	r5, [sp, #92]	; 0x5c
 808ac1c:	e7e6      	b.n	808abec <_strtod_r+0x12c>
 808ac1e:	4650      	mov	r0, sl
 808ac20:	f7ff f944 	bl	8089eac <_localeconv_r>
 808ac24:	6807      	ldr	r7, [r0, #0]
 808ac26:	4650      	mov	r0, sl
 808ac28:	f7ff f940 	bl	8089eac <_localeconv_r>
 808ac2c:	6800      	ldr	r0, [r0, #0]
 808ac2e:	f7ff fedb 	bl	808a9e8 <strlen>
 808ac32:	4639      	mov	r1, r7
 808ac34:	4602      	mov	r2, r0
 808ac36:	4628      	mov	r0, r5
 808ac38:	f7ff fede 	bl	808a9f8 <strncmp>
 808ac3c:	4607      	mov	r7, r0
 808ac3e:	b128      	cbz	r0, 808ac4c <_strtod_r+0x18c>
 808ac40:	2000      	movs	r0, #0
 808ac42:	4633      	mov	r3, r6
 808ac44:	465d      	mov	r5, fp
 808ac46:	4602      	mov	r2, r0
 808ac48:	4601      	mov	r1, r0
 808ac4a:	e05a      	b.n	808ad02 <_strtod_r+0x242>
 808ac4c:	4650      	mov	r0, sl
 808ac4e:	f7ff f92d 	bl	8089eac <_localeconv_r>
 808ac52:	6800      	ldr	r0, [r0, #0]
 808ac54:	f7ff fec8 	bl	808a9e8 <strlen>
 808ac58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ac5a:	181a      	adds	r2, r3, r0
 808ac5c:	9217      	str	r2, [sp, #92]	; 0x5c
 808ac5e:	5c1b      	ldrb	r3, [r3, r0]
 808ac60:	f1bb 0f00 	cmp.w	fp, #0
 808ac64:	d145      	bne.n	808acf2 <_strtod_r+0x232>
 808ac66:	4658      	mov	r0, fp
 808ac68:	2b30      	cmp	r3, #48	; 0x30
 808ac6a:	d105      	bne.n	808ac78 <_strtod_r+0x1b8>
 808ac6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ac6e:	3001      	adds	r0, #1
 808ac70:	1c5a      	adds	r2, r3, #1
 808ac72:	9217      	str	r2, [sp, #92]	; 0x5c
 808ac74:	785b      	ldrb	r3, [r3, #1]
 808ac76:	e7f7      	b.n	808ac68 <_strtod_r+0x1a8>
 808ac78:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808ac7c:	2a08      	cmp	r2, #8
 808ac7e:	d846      	bhi.n	808ad0e <_strtod_r+0x24e>
 808ac80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808ac82:	9206      	str	r2, [sp, #24]
 808ac84:	4602      	mov	r2, r0
 808ac86:	2000      	movs	r0, #0
 808ac88:	4605      	mov	r5, r0
 808ac8a:	3b30      	subs	r3, #48	; 0x30
 808ac8c:	f100 0101 	add.w	r1, r0, #1
 808ac90:	d029      	beq.n	808ace6 <_strtod_r+0x226>
 808ac92:	440a      	add	r2, r1
 808ac94:	4629      	mov	r1, r5
 808ac96:	eb05 0c00 	add.w	ip, r5, r0
 808ac9a:	260a      	movs	r6, #10
 808ac9c:	4561      	cmp	r1, ip
 808ac9e:	d00f      	beq.n	808acc0 <_strtod_r+0x200>
 808aca0:	3101      	adds	r1, #1
 808aca2:	f101 3eff 	add.w	lr, r1, #4294967295
 808aca6:	f1be 0f08 	cmp.w	lr, #8
 808acaa:	dc03      	bgt.n	808acb4 <_strtod_r+0x1f4>
 808acac:	9f04      	ldr	r7, [sp, #16]
 808acae:	4377      	muls	r7, r6
 808acb0:	9704      	str	r7, [sp, #16]
 808acb2:	e7f3      	b.n	808ac9c <_strtod_r+0x1dc>
 808acb4:	2910      	cmp	r1, #16
 808acb6:	bfde      	ittt	le
 808acb8:	9f02      	ldrle	r7, [sp, #8]
 808acba:	4377      	mulle	r7, r6
 808acbc:	9702      	strle	r7, [sp, #8]
 808acbe:	e7ed      	b.n	808ac9c <_strtod_r+0x1dc>
 808acc0:	4428      	add	r0, r5
 808acc2:	2808      	cmp	r0, #8
 808acc4:	f100 0501 	add.w	r5, r0, #1
 808acc8:	dc05      	bgt.n	808acd6 <_strtod_r+0x216>
 808acca:	9804      	ldr	r0, [sp, #16]
 808accc:	210a      	movs	r1, #10
 808acce:	fb01 3300 	mla	r3, r1, r0, r3
 808acd2:	9304      	str	r3, [sp, #16]
 808acd4:	e006      	b.n	808ace4 <_strtod_r+0x224>
 808acd6:	2d10      	cmp	r5, #16
 808acd8:	bfdf      	itttt	le
 808acda:	9802      	ldrle	r0, [sp, #8]
 808acdc:	210a      	movle	r1, #10
 808acde:	fb01 3300 	mlale	r3, r1, r0, r3
 808ace2:	9302      	strle	r3, [sp, #8]
 808ace4:	2100      	movs	r1, #0
 808ace6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ace8:	1c58      	adds	r0, r3, #1
 808acea:	9017      	str	r0, [sp, #92]	; 0x5c
 808acec:	785b      	ldrb	r3, [r3, #1]
 808acee:	4608      	mov	r0, r1
 808acf0:	e002      	b.n	808acf8 <_strtod_r+0x238>
 808acf2:	465d      	mov	r5, fp
 808acf4:	4638      	mov	r0, r7
 808acf6:	463a      	mov	r2, r7
 808acf8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808acfc:	2909      	cmp	r1, #9
 808acfe:	d9c4      	bls.n	808ac8a <_strtod_r+0x1ca>
 808ad00:	2101      	movs	r1, #1
 808ad02:	2b65      	cmp	r3, #101	; 0x65
 808ad04:	d001      	beq.n	808ad0a <_strtod_r+0x24a>
 808ad06:	2b45      	cmp	r3, #69	; 0x45
 808ad08:	d14f      	bne.n	808adaa <_strtod_r+0x2ea>
 808ad0a:	b96d      	cbnz	r5, 808ad28 <_strtod_r+0x268>
 808ad0c:	e004      	b.n	808ad18 <_strtod_r+0x258>
 808ad0e:	2b65      	cmp	r3, #101	; 0x65
 808ad10:	f040 84ad 	bne.w	808b66e <_strtod_r+0xbae>
 808ad14:	2200      	movs	r2, #0
 808ad16:	2101      	movs	r1, #1
 808ad18:	b928      	cbnz	r0, 808ad26 <_strtod_r+0x266>
 808ad1a:	9b05      	ldr	r3, [sp, #20]
 808ad1c:	2b00      	cmp	r3, #0
 808ad1e:	f000 8092 	beq.w	808ae46 <_strtod_r+0x386>
 808ad22:	4605      	mov	r5, r0
 808ad24:	e000      	b.n	808ad28 <_strtod_r+0x268>
 808ad26:	2500      	movs	r5, #0
 808ad28:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808ad2a:	1c63      	adds	r3, r4, #1
 808ad2c:	9317      	str	r3, [sp, #92]	; 0x5c
 808ad2e:	7863      	ldrb	r3, [r4, #1]
 808ad30:	2b2b      	cmp	r3, #43	; 0x2b
 808ad32:	d006      	beq.n	808ad42 <_strtod_r+0x282>
 808ad34:	2b2d      	cmp	r3, #45	; 0x2d
 808ad36:	d002      	beq.n	808ad3e <_strtod_r+0x27e>
 808ad38:	2600      	movs	r6, #0
 808ad3a:	9603      	str	r6, [sp, #12]
 808ad3c:	e006      	b.n	808ad4c <_strtod_r+0x28c>
 808ad3e:	2301      	movs	r3, #1
 808ad40:	e000      	b.n	808ad44 <_strtod_r+0x284>
 808ad42:	2300      	movs	r3, #0
 808ad44:	9303      	str	r3, [sp, #12]
 808ad46:	1ca3      	adds	r3, r4, #2
 808ad48:	9317      	str	r3, [sp, #92]	; 0x5c
 808ad4a:	78a3      	ldrb	r3, [r4, #2]
 808ad4c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808ad50:	2e09      	cmp	r6, #9
 808ad52:	d829      	bhi.n	808ada8 <_strtod_r+0x2e8>
 808ad54:	2b30      	cmp	r3, #48	; 0x30
 808ad56:	d104      	bne.n	808ad62 <_strtod_r+0x2a2>
 808ad58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad5a:	1c5e      	adds	r6, r3, #1
 808ad5c:	9617      	str	r6, [sp, #92]	; 0x5c
 808ad5e:	785b      	ldrb	r3, [r3, #1]
 808ad60:	e7f8      	b.n	808ad54 <_strtod_r+0x294>
 808ad62:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808ad66:	2e08      	cmp	r6, #8
 808ad68:	d81f      	bhi.n	808adaa <_strtod_r+0x2ea>
 808ad6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808ad6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad70:	461f      	mov	r7, r3
 808ad72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad74:	1c5e      	adds	r6, r3, #1
 808ad76:	9617      	str	r6, [sp, #92]	; 0x5c
 808ad78:	785b      	ldrb	r3, [r3, #1]
 808ad7a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808ad7e:	f1bc 0f09 	cmp.w	ip, #9
 808ad82:	d805      	bhi.n	808ad90 <_strtod_r+0x2d0>
 808ad84:	260a      	movs	r6, #10
 808ad86:	fb06 3e0e 	mla	lr, r6, lr, r3
 808ad8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808ad8e:	e7f0      	b.n	808ad72 <_strtod_r+0x2b2>
 808ad90:	1bf6      	subs	r6, r6, r7
 808ad92:	2e08      	cmp	r6, #8
 808ad94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808ad98:	dc02      	bgt.n	808ada0 <_strtod_r+0x2e0>
 808ad9a:	4576      	cmp	r6, lr
 808ad9c:	bfa8      	it	ge
 808ad9e:	4676      	movge	r6, lr
 808ada0:	9f03      	ldr	r7, [sp, #12]
 808ada2:	b11f      	cbz	r7, 808adac <_strtod_r+0x2ec>
 808ada4:	4276      	negs	r6, r6
 808ada6:	e001      	b.n	808adac <_strtod_r+0x2ec>
 808ada8:	9417      	str	r4, [sp, #92]	; 0x5c
 808adaa:	2600      	movs	r6, #0
 808adac:	2d00      	cmp	r5, #0
 808adae:	d152      	bne.n	808ae56 <_strtod_r+0x396>
 808adb0:	2800      	cmp	r0, #0
 808adb2:	f040 844e 	bne.w	808b652 <_strtod_r+0xb92>
 808adb6:	9a05      	ldr	r2, [sp, #20]
 808adb8:	2a00      	cmp	r2, #0
 808adba:	f040 844a 	bne.w	808b652 <_strtod_r+0xb92>
 808adbe:	2900      	cmp	r1, #0
 808adc0:	d141      	bne.n	808ae46 <_strtod_r+0x386>
 808adc2:	2b4e      	cmp	r3, #78	; 0x4e
 808adc4:	d020      	beq.n	808ae08 <_strtod_r+0x348>
 808adc6:	dc07      	bgt.n	808add8 <_strtod_r+0x318>
 808adc8:	2b49      	cmp	r3, #73	; 0x49
 808adca:	d00a      	beq.n	808ade2 <_strtod_r+0x322>
 808adcc:	e03b      	b.n	808ae46 <_strtod_r+0x386>
 808adce:	bf00      	nop
 808add0:	0808df18 	.word	0x0808df18
 808add4:	7ff00000 	.word	0x7ff00000
 808add8:	2b69      	cmp	r3, #105	; 0x69
 808adda:	d002      	beq.n	808ade2 <_strtod_r+0x322>
 808addc:	2b6e      	cmp	r3, #110	; 0x6e
 808adde:	d013      	beq.n	808ae08 <_strtod_r+0x348>
 808ade0:	e031      	b.n	808ae46 <_strtod_r+0x386>
 808ade2:	49aa      	ldr	r1, [pc, #680]	; (808b08c <_strtod_r+0x5cc>)
 808ade4:	a817      	add	r0, sp, #92	; 0x5c
 808ade6:	f001 f9bb 	bl	808c160 <__match>
 808adea:	b360      	cbz	r0, 808ae46 <_strtod_r+0x386>
 808adec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808adee:	49a8      	ldr	r1, [pc, #672]	; (808b090 <_strtod_r+0x5d0>)
 808adf0:	3b01      	subs	r3, #1
 808adf2:	a817      	add	r0, sp, #92	; 0x5c
 808adf4:	9317      	str	r3, [sp, #92]	; 0x5c
 808adf6:	f001 f9b3 	bl	808c160 <__match>
 808adfa:	b910      	cbnz	r0, 808ae02 <_strtod_r+0x342>
 808adfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808adfe:	3301      	adds	r3, #1
 808ae00:	9317      	str	r3, [sp, #92]	; 0x5c
 808ae02:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808b0ac <_strtod_r+0x5ec>
 808ae06:	e01a      	b.n	808ae3e <_strtod_r+0x37e>
 808ae08:	49a2      	ldr	r1, [pc, #648]	; (808b094 <_strtod_r+0x5d4>)
 808ae0a:	a817      	add	r0, sp, #92	; 0x5c
 808ae0c:	f001 f9a8 	bl	808c160 <__match>
 808ae10:	b1c8      	cbz	r0, 808ae46 <_strtod_r+0x386>
 808ae12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ae14:	781b      	ldrb	r3, [r3, #0]
 808ae16:	2b28      	cmp	r3, #40	; 0x28
 808ae18:	d10f      	bne.n	808ae3a <_strtod_r+0x37a>
 808ae1a:	aa1a      	add	r2, sp, #104	; 0x68
 808ae1c:	499e      	ldr	r1, [pc, #632]	; (808b098 <_strtod_r+0x5d8>)
 808ae1e:	a817      	add	r0, sp, #92	; 0x5c
 808ae20:	f001 f9b1 	bl	808c186 <__hexnan>
 808ae24:	2805      	cmp	r0, #5
 808ae26:	d108      	bne.n	808ae3a <_strtod_r+0x37a>
 808ae28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ae2a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808ae2e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808ae32:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808ae36:	f000 bc0c 	b.w	808b652 <_strtod_r+0xb92>
 808ae3a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808b0b0 <_strtod_r+0x5f0>
 808ae3e:	f04f 0800 	mov.w	r8, #0
 808ae42:	f000 bc06 	b.w	808b652 <_strtod_r+0xb92>
 808ae46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808ae48:	9417      	str	r4, [sp, #92]	; 0x5c
 808ae4a:	2b00      	cmp	r3, #0
 808ae4c:	f000 840c 	beq.w	808b668 <_strtod_r+0xba8>
 808ae50:	2300      	movs	r3, #0
 808ae52:	930c      	str	r3, [sp, #48]	; 0x30
 808ae54:	e3ff      	b.n	808b656 <_strtod_r+0xb96>
 808ae56:	462c      	mov	r4, r5
 808ae58:	f1bb 0f00 	cmp.w	fp, #0
 808ae5c:	bf08      	it	eq
 808ae5e:	46ab      	moveq	fp, r5
 808ae60:	9804      	ldr	r0, [sp, #16]
 808ae62:	2d10      	cmp	r5, #16
 808ae64:	bfa8      	it	ge
 808ae66:	2410      	movge	r4, #16
 808ae68:	1ab7      	subs	r7, r6, r2
 808ae6a:	f7fd fe59 	bl	8088b20 <__aeabi_ui2d>
 808ae6e:	2c09      	cmp	r4, #9
 808ae70:	4680      	mov	r8, r0
 808ae72:	4689      	mov	r9, r1
 808ae74:	dd13      	ble.n	808ae9e <_strtod_r+0x3de>
 808ae76:	4b89      	ldr	r3, [pc, #548]	; (808b09c <_strtod_r+0x5dc>)
 808ae78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808ae7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808ae80:	f7fd fec4 	bl	8088c0c <__aeabi_dmul>
 808ae84:	4680      	mov	r8, r0
 808ae86:	9802      	ldr	r0, [sp, #8]
 808ae88:	4689      	mov	r9, r1
 808ae8a:	f7fd fe49 	bl	8088b20 <__aeabi_ui2d>
 808ae8e:	4602      	mov	r2, r0
 808ae90:	460b      	mov	r3, r1
 808ae92:	4640      	mov	r0, r8
 808ae94:	4649      	mov	r1, r9
 808ae96:	f7fd fd07 	bl	80888a8 <__adddf3>
 808ae9a:	4680      	mov	r8, r0
 808ae9c:	4689      	mov	r9, r1
 808ae9e:	2d0f      	cmp	r5, #15
 808aea0:	dc33      	bgt.n	808af0a <_strtod_r+0x44a>
 808aea2:	2f00      	cmp	r7, #0
 808aea4:	f000 83d5 	beq.w	808b652 <_strtod_r+0xb92>
 808aea8:	dd22      	ble.n	808aef0 <_strtod_r+0x430>
 808aeaa:	2f16      	cmp	r7, #22
 808aeac:	dc07      	bgt.n	808aebe <_strtod_r+0x3fe>
 808aeae:	4d7b      	ldr	r5, [pc, #492]	; (808b09c <_strtod_r+0x5dc>)
 808aeb0:	4642      	mov	r2, r8
 808aeb2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808aeb6:	464b      	mov	r3, r9
 808aeb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808aebc:	e013      	b.n	808aee6 <_strtod_r+0x426>
 808aebe:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808aec2:	429f      	cmp	r7, r3
 808aec4:	dc21      	bgt.n	808af0a <_strtod_r+0x44a>
 808aec6:	4c75      	ldr	r4, [pc, #468]	; (808b09c <_strtod_r+0x5dc>)
 808aec8:	f1c5 050f 	rsb	r5, r5, #15
 808aecc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808aed0:	1b7d      	subs	r5, r7, r5
 808aed2:	4642      	mov	r2, r8
 808aed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808aed8:	464b      	mov	r3, r9
 808aeda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808aede:	f7fd fe95 	bl	8088c0c <__aeabi_dmul>
 808aee2:	e9d4 2300 	ldrd	r2, r3, [r4]
 808aee6:	f7fd fe91 	bl	8088c0c <__aeabi_dmul>
 808aeea:	4680      	mov	r8, r0
 808aeec:	4689      	mov	r9, r1
 808aeee:	e3b0      	b.n	808b652 <_strtod_r+0xb92>
 808aef0:	f117 0f16 	cmn.w	r7, #22
 808aef4:	db09      	blt.n	808af0a <_strtod_r+0x44a>
 808aef6:	4d69      	ldr	r5, [pc, #420]	; (808b09c <_strtod_r+0x5dc>)
 808aef8:	4640      	mov	r0, r8
 808aefa:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 808af02:	4649      	mov	r1, r9
 808af04:	f7fd ffac 	bl	8088e60 <__aeabi_ddiv>
 808af08:	e7ef      	b.n	808aeea <_strtod_r+0x42a>
 808af0a:	1b2c      	subs	r4, r5, r4
 808af0c:	443c      	add	r4, r7
 808af0e:	2c00      	cmp	r4, #0
 808af10:	dd5d      	ble.n	808afce <_strtod_r+0x50e>
 808af12:	f014 010f 	ands.w	r1, r4, #15
 808af16:	d00a      	beq.n	808af2e <_strtod_r+0x46e>
 808af18:	4b60      	ldr	r3, [pc, #384]	; (808b09c <_strtod_r+0x5dc>)
 808af1a:	4642      	mov	r2, r8
 808af1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808af20:	e9d1 0100 	ldrd	r0, r1, [r1]
 808af24:	464b      	mov	r3, r9
 808af26:	f7fd fe71 	bl	8088c0c <__aeabi_dmul>
 808af2a:	4680      	mov	r8, r0
 808af2c:	4689      	mov	r9, r1
 808af2e:	f034 040f 	bics.w	r4, r4, #15
 808af32:	f000 80c1 	beq.w	808b0b8 <_strtod_r+0x5f8>
 808af36:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808af3a:	dd0f      	ble.n	808af5c <_strtod_r+0x49c>
 808af3c:	f04f 0b00 	mov.w	fp, #0
 808af40:	f8cd b008 	str.w	fp, [sp, #8]
 808af44:	f8cd b014 	str.w	fp, [sp, #20]
 808af48:	f8cd b010 	str.w	fp, [sp, #16]
 808af4c:	2322      	movs	r3, #34	; 0x22
 808af4e:	f8ca 3000 	str.w	r3, [sl]
 808af52:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808b0ac <_strtod_r+0x5ec>
 808af56:	f04f 0800 	mov.w	r8, #0
 808af5a:	e189      	b.n	808b270 <_strtod_r+0x7b0>
 808af5c:	4640      	mov	r0, r8
 808af5e:	4649      	mov	r1, r9
 808af60:	2300      	movs	r3, #0
 808af62:	4e4f      	ldr	r6, [pc, #316]	; (808b0a0 <_strtod_r+0x5e0>)
 808af64:	1124      	asrs	r4, r4, #4
 808af66:	9302      	str	r3, [sp, #8]
 808af68:	2c01      	cmp	r4, #1
 808af6a:	dd0c      	ble.n	808af86 <_strtod_r+0x4c6>
 808af6c:	07e2      	lsls	r2, r4, #31
 808af6e:	d504      	bpl.n	808af7a <_strtod_r+0x4ba>
 808af70:	e9d6 2300 	ldrd	r2, r3, [r6]
 808af74:	f7fd fe4a 	bl	8088c0c <__aeabi_dmul>
 808af78:	2301      	movs	r3, #1
 808af7a:	9a02      	ldr	r2, [sp, #8]
 808af7c:	1064      	asrs	r4, r4, #1
 808af7e:	3201      	adds	r2, #1
 808af80:	9202      	str	r2, [sp, #8]
 808af82:	3608      	adds	r6, #8
 808af84:	e7f0      	b.n	808af68 <_strtod_r+0x4a8>
 808af86:	b10b      	cbz	r3, 808af8c <_strtod_r+0x4cc>
 808af88:	4680      	mov	r8, r0
 808af8a:	4689      	mov	r9, r1
 808af8c:	4b44      	ldr	r3, [pc, #272]	; (808b0a0 <_strtod_r+0x5e0>)
 808af8e:	9a02      	ldr	r2, [sp, #8]
 808af90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808af94:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808af98:	e9d1 0100 	ldrd	r0, r1, [r1]
 808af9c:	4642      	mov	r2, r8
 808af9e:	464b      	mov	r3, r9
 808afa0:	f7fd fe34 	bl	8088c0c <__aeabi_dmul>
 808afa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808afa8:	4689      	mov	r9, r1
 808afaa:	460a      	mov	r2, r1
 808afac:	0d1b      	lsrs	r3, r3, #20
 808afae:	493d      	ldr	r1, [pc, #244]	; (808b0a4 <_strtod_r+0x5e4>)
 808afb0:	051b      	lsls	r3, r3, #20
 808afb2:	428b      	cmp	r3, r1
 808afb4:	4680      	mov	r8, r0
 808afb6:	d8c1      	bhi.n	808af3c <_strtod_r+0x47c>
 808afb8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808afbc:	428b      	cmp	r3, r1
 808afbe:	bf86      	itte	hi
 808afc0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808b0b4 <_strtod_r+0x5f4>
 808afc4:	f04f 38ff 	movhi.w	r8, #4294967295
 808afc8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808afcc:	e074      	b.n	808b0b8 <_strtod_r+0x5f8>
 808afce:	d073      	beq.n	808b0b8 <_strtod_r+0x5f8>
 808afd0:	4264      	negs	r4, r4
 808afd2:	f014 020f 	ands.w	r2, r4, #15
 808afd6:	d00a      	beq.n	808afee <_strtod_r+0x52e>
 808afd8:	4b30      	ldr	r3, [pc, #192]	; (808b09c <_strtod_r+0x5dc>)
 808afda:	4640      	mov	r0, r8
 808afdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808afe0:	4649      	mov	r1, r9
 808afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808afe6:	f7fd ff3b 	bl	8088e60 <__aeabi_ddiv>
 808afea:	4680      	mov	r8, r0
 808afec:	4689      	mov	r9, r1
 808afee:	1124      	asrs	r4, r4, #4
 808aff0:	d062      	beq.n	808b0b8 <_strtod_r+0x5f8>
 808aff2:	2c1f      	cmp	r4, #31
 808aff4:	dd08      	ble.n	808b008 <_strtod_r+0x548>
 808aff6:	f04f 0b00 	mov.w	fp, #0
 808affa:	f8cd b008 	str.w	fp, [sp, #8]
 808affe:	f8cd b014 	str.w	fp, [sp, #20]
 808b002:	f8cd b010 	str.w	fp, [sp, #16]
 808b006:	e12c      	b.n	808b262 <_strtod_r+0x7a2>
 808b008:	4640      	mov	r0, r8
 808b00a:	4649      	mov	r1, r9
 808b00c:	f014 0f10 	tst.w	r4, #16
 808b010:	bf0c      	ite	eq
 808b012:	2300      	moveq	r3, #0
 808b014:	236a      	movne	r3, #106	; 0x6a
 808b016:	4e24      	ldr	r6, [pc, #144]	; (808b0a8 <_strtod_r+0x5e8>)
 808b018:	9303      	str	r3, [sp, #12]
 808b01a:	2300      	movs	r3, #0
 808b01c:	2c00      	cmp	r4, #0
 808b01e:	dd09      	ble.n	808b034 <_strtod_r+0x574>
 808b020:	07e2      	lsls	r2, r4, #31
 808b022:	d504      	bpl.n	808b02e <_strtod_r+0x56e>
 808b024:	e9d6 2300 	ldrd	r2, r3, [r6]
 808b028:	f7fd fdf0 	bl	8088c0c <__aeabi_dmul>
 808b02c:	2301      	movs	r3, #1
 808b02e:	1064      	asrs	r4, r4, #1
 808b030:	3608      	adds	r6, #8
 808b032:	e7f3      	b.n	808b01c <_strtod_r+0x55c>
 808b034:	b10b      	cbz	r3, 808b03a <_strtod_r+0x57a>
 808b036:	4680      	mov	r8, r0
 808b038:	4689      	mov	r9, r1
 808b03a:	9b03      	ldr	r3, [sp, #12]
 808b03c:	b1eb      	cbz	r3, 808b07a <_strtod_r+0x5ba>
 808b03e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808b042:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b046:	2b00      	cmp	r3, #0
 808b048:	4649      	mov	r1, r9
 808b04a:	dd16      	ble.n	808b07a <_strtod_r+0x5ba>
 808b04c:	2b1f      	cmp	r3, #31
 808b04e:	dd0e      	ble.n	808b06e <_strtod_r+0x5ae>
 808b050:	2b34      	cmp	r3, #52	; 0x34
 808b052:	bfde      	ittt	le
 808b054:	3b20      	suble	r3, #32
 808b056:	f04f 32ff 	movle.w	r2, #4294967295
 808b05a:	fa02 f303 	lslle.w	r3, r2, r3
 808b05e:	f04f 0800 	mov.w	r8, #0
 808b062:	bfcc      	ite	gt
 808b064:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808b068:	ea03 0901 	andle.w	r9, r3, r1
 808b06c:	e005      	b.n	808b07a <_strtod_r+0x5ba>
 808b06e:	f04f 32ff 	mov.w	r2, #4294967295
 808b072:	fa02 f303 	lsl.w	r3, r2, r3
 808b076:	ea03 0808 	and.w	r8, r3, r8
 808b07a:	2200      	movs	r2, #0
 808b07c:	2300      	movs	r3, #0
 808b07e:	4640      	mov	r0, r8
 808b080:	4649      	mov	r1, r9
 808b082:	f7fe f82b 	bl	80890dc <__aeabi_dcmpeq>
 808b086:	2800      	cmp	r0, #0
 808b088:	d1b5      	bne.n	808aff6 <_strtod_r+0x536>
 808b08a:	e017      	b.n	808b0bc <_strtod_r+0x5fc>
 808b08c:	0808df2c 	.word	0x0808df2c
 808b090:	0808df2f 	.word	0x0808df2f
 808b094:	0808df81 	.word	0x0808df81
 808b098:	0808df38 	.word	0x0808df38
 808b09c:	0808e1e0 	.word	0x0808e1e0
 808b0a0:	0808e2a8 	.word	0x0808e2a8
 808b0a4:	7ca00000 	.word	0x7ca00000
 808b0a8:	0808df50 	.word	0x0808df50
 808b0ac:	7ff00000 	.word	0x7ff00000
 808b0b0:	fff80000 	.word	0xfff80000
 808b0b4:	7fefffff 	.word	0x7fefffff
 808b0b8:	2300      	movs	r3, #0
 808b0ba:	9303      	str	r3, [sp, #12]
 808b0bc:	9b04      	ldr	r3, [sp, #16]
 808b0be:	465a      	mov	r2, fp
 808b0c0:	9300      	str	r3, [sp, #0]
 808b0c2:	9906      	ldr	r1, [sp, #24]
 808b0c4:	462b      	mov	r3, r5
 808b0c6:	4650      	mov	r0, sl
 808b0c8:	f001 fa55 	bl	808c576 <__s2b>
 808b0cc:	9005      	str	r0, [sp, #20]
 808b0ce:	2800      	cmp	r0, #0
 808b0d0:	f43f af34 	beq.w	808af3c <_strtod_r+0x47c>
 808b0d4:	2f00      	cmp	r7, #0
 808b0d6:	f1c7 0300 	rsb	r3, r7, #0
 808b0da:	bfa8      	it	ge
 808b0dc:	2300      	movge	r3, #0
 808b0de:	930d      	str	r3, [sp, #52]	; 0x34
 808b0e0:	f04f 0b00 	mov.w	fp, #0
 808b0e4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808b0e8:	9312      	str	r3, [sp, #72]	; 0x48
 808b0ea:	f8cd b008 	str.w	fp, [sp, #8]
 808b0ee:	9b05      	ldr	r3, [sp, #20]
 808b0f0:	4650      	mov	r0, sl
 808b0f2:	6859      	ldr	r1, [r3, #4]
 808b0f4:	f001 f9b8 	bl	808c468 <_Balloc>
 808b0f8:	9004      	str	r0, [sp, #16]
 808b0fa:	2800      	cmp	r0, #0
 808b0fc:	f43f af26 	beq.w	808af4c <_strtod_r+0x48c>
 808b100:	9b05      	ldr	r3, [sp, #20]
 808b102:	300c      	adds	r0, #12
 808b104:	691a      	ldr	r2, [r3, #16]
 808b106:	f103 010c 	add.w	r1, r3, #12
 808b10a:	3202      	adds	r2, #2
 808b10c:	0092      	lsls	r2, r2, #2
 808b10e:	f7fe fee0 	bl	8089ed2 <memcpy>
 808b112:	ab1a      	add	r3, sp, #104	; 0x68
 808b114:	9301      	str	r3, [sp, #4]
 808b116:	ab19      	add	r3, sp, #100	; 0x64
 808b118:	9300      	str	r3, [sp, #0]
 808b11a:	4642      	mov	r2, r8
 808b11c:	464b      	mov	r3, r9
 808b11e:	4650      	mov	r0, sl
 808b120:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808b124:	f001 fcd7 	bl	808cad6 <__d2b>
 808b128:	9018      	str	r0, [sp, #96]	; 0x60
 808b12a:	2800      	cmp	r0, #0
 808b12c:	f43f af0e 	beq.w	808af4c <_strtod_r+0x48c>
 808b130:	2101      	movs	r1, #1
 808b132:	4650      	mov	r0, sl
 808b134:	f001 faaa 	bl	808c68c <__i2b>
 808b138:	9002      	str	r0, [sp, #8]
 808b13a:	2800      	cmp	r0, #0
 808b13c:	f43f af06 	beq.w	808af4c <_strtod_r+0x48c>
 808b140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b142:	9903      	ldr	r1, [sp, #12]
 808b144:	2b00      	cmp	r3, #0
 808b146:	bfac      	ite	ge
 808b148:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808b14a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808b14c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808b14e:	bfac      	ite	ge
 808b150:	18d6      	addge	r6, r2, r3
 808b152:	1ad2      	sublt	r2, r2, r3
 808b154:	eba3 0301 	sub.w	r3, r3, r1
 808b158:	4423      	add	r3, r4
 808b15a:	49b1      	ldr	r1, [pc, #708]	; (808b420 <_strtod_r+0x960>)
 808b15c:	f103 33ff 	add.w	r3, r3, #4294967295
 808b160:	bfac      	ite	ge
 808b162:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808b164:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808b166:	428b      	cmp	r3, r1
 808b168:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808b16c:	f280 8085 	bge.w	808b27a <_strtod_r+0x7ba>
 808b170:	1ac9      	subs	r1, r1, r3
 808b172:	291f      	cmp	r1, #31
 808b174:	bfc8      	it	gt
 808b176:	4dab      	ldrgt	r5, [pc, #684]	; (808b424 <_strtod_r+0x964>)
 808b178:	f04f 0701 	mov.w	r7, #1
 808b17c:	bfd4      	ite	le
 808b17e:	fa07 f301 	lslle.w	r3, r7, r1
 808b182:	1aed      	subgt	r5, r5, r3
 808b184:	eba4 0401 	sub.w	r4, r4, r1
 808b188:	bfd9      	ittee	le
 808b18a:	9307      	strle	r3, [sp, #28]
 808b18c:	2500      	movle	r5, #0
 808b18e:	fa07 f505 	lslgt.w	r5, r7, r5
 808b192:	9707      	strgt	r7, [sp, #28]
 808b194:	1937      	adds	r7, r6, r4
 808b196:	9b03      	ldr	r3, [sp, #12]
 808b198:	42be      	cmp	r6, r7
 808b19a:	4414      	add	r4, r2
 808b19c:	441c      	add	r4, r3
 808b19e:	4633      	mov	r3, r6
 808b1a0:	bfa8      	it	ge
 808b1a2:	463b      	movge	r3, r7
 808b1a4:	42a3      	cmp	r3, r4
 808b1a6:	bfa8      	it	ge
 808b1a8:	4623      	movge	r3, r4
 808b1aa:	2b00      	cmp	r3, #0
 808b1ac:	bfc2      	ittt	gt
 808b1ae:	1aff      	subgt	r7, r7, r3
 808b1b0:	1ae4      	subgt	r4, r4, r3
 808b1b2:	1af6      	subgt	r6, r6, r3
 808b1b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b1b6:	2b00      	cmp	r3, #0
 808b1b8:	d163      	bne.n	808b282 <_strtod_r+0x7c2>
 808b1ba:	2f00      	cmp	r7, #0
 808b1bc:	dc7a      	bgt.n	808b2b4 <_strtod_r+0x7f4>
 808b1be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808b1c0:	2b00      	cmp	r3, #0
 808b1c2:	f040 8081 	bne.w	808b2c8 <_strtod_r+0x808>
 808b1c6:	2c00      	cmp	r4, #0
 808b1c8:	f300 8088 	bgt.w	808b2dc <_strtod_r+0x81c>
 808b1cc:	2e00      	cmp	r6, #0
 808b1ce:	f300 808f 	bgt.w	808b2f0 <_strtod_r+0x830>
 808b1d2:	9a04      	ldr	r2, [sp, #16]
 808b1d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b1d6:	4650      	mov	r0, sl
 808b1d8:	f001 fbad 	bl	808c936 <__mdiff>
 808b1dc:	4683      	mov	fp, r0
 808b1de:	2800      	cmp	r0, #0
 808b1e0:	f43f aeb4 	beq.w	808af4c <_strtod_r+0x48c>
 808b1e4:	68c3      	ldr	r3, [r0, #12]
 808b1e6:	2400      	movs	r4, #0
 808b1e8:	60c4      	str	r4, [r0, #12]
 808b1ea:	9902      	ldr	r1, [sp, #8]
 808b1ec:	9306      	str	r3, [sp, #24]
 808b1ee:	f001 fb86 	bl	808c8fe <__mcmp>
 808b1f2:	42a0      	cmp	r0, r4
 808b1f4:	f280 808b 	bge.w	808b30e <_strtod_r+0x84e>
 808b1f8:	9b06      	ldr	r3, [sp, #24]
 808b1fa:	2b00      	cmp	r3, #0
 808b1fc:	f040 8202 	bne.w	808b604 <_strtod_r+0xb44>
 808b200:	f1b8 0f00 	cmp.w	r8, #0
 808b204:	f040 81fe 	bne.w	808b604 <_strtod_r+0xb44>
 808b208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b20c:	2b00      	cmp	r3, #0
 808b20e:	f040 81f9 	bne.w	808b604 <_strtod_r+0xb44>
 808b212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b216:	0d1b      	lsrs	r3, r3, #20
 808b218:	051b      	lsls	r3, r3, #20
 808b21a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b21e:	f240 81f1 	bls.w	808b604 <_strtod_r+0xb44>
 808b222:	f8db 3014 	ldr.w	r3, [fp, #20]
 808b226:	2b00      	cmp	r3, #0
 808b228:	d06c      	beq.n	808b304 <_strtod_r+0x844>
 808b22a:	4659      	mov	r1, fp
 808b22c:	2201      	movs	r2, #1
 808b22e:	4650      	mov	r0, sl
 808b230:	f001 fb14 	bl	808c85c <__lshift>
 808b234:	9902      	ldr	r1, [sp, #8]
 808b236:	4683      	mov	fp, r0
 808b238:	f001 fb61 	bl	808c8fe <__mcmp>
 808b23c:	2800      	cmp	r0, #0
 808b23e:	f340 81e1 	ble.w	808b604 <_strtod_r+0xb44>
 808b242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b246:	9a03      	ldr	r2, [sp, #12]
 808b248:	0d1b      	lsrs	r3, r3, #20
 808b24a:	051b      	lsls	r3, r3, #20
 808b24c:	2a00      	cmp	r2, #0
 808b24e:	f000 808d 	beq.w	808b36c <_strtod_r+0x8ac>
 808b252:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b256:	f300 8089 	bgt.w	808b36c <_strtod_r+0x8ac>
 808b25a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808b25e:	f300 81d3 	bgt.w	808b608 <_strtod_r+0xb48>
 808b262:	2322      	movs	r3, #34	; 0x22
 808b264:	f04f 0800 	mov.w	r8, #0
 808b268:	f04f 0900 	mov.w	r9, #0
 808b26c:	f8ca 3000 	str.w	r3, [sl]
 808b270:	9b05      	ldr	r3, [sp, #20]
 808b272:	2b00      	cmp	r3, #0
 808b274:	f040 81d9 	bne.w	808b62a <_strtod_r+0xb6a>
 808b278:	e1eb      	b.n	808b652 <_strtod_r+0xb92>
 808b27a:	2301      	movs	r3, #1
 808b27c:	2500      	movs	r5, #0
 808b27e:	9307      	str	r3, [sp, #28]
 808b280:	e788      	b.n	808b194 <_strtod_r+0x6d4>
 808b282:	461a      	mov	r2, r3
 808b284:	9902      	ldr	r1, [sp, #8]
 808b286:	4650      	mov	r0, sl
 808b288:	f001 fa9a 	bl	808c7c0 <__pow5mult>
 808b28c:	9002      	str	r0, [sp, #8]
 808b28e:	2800      	cmp	r0, #0
 808b290:	f43f ae5c 	beq.w	808af4c <_strtod_r+0x48c>
 808b294:	4601      	mov	r1, r0
 808b296:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808b298:	4650      	mov	r0, sl
 808b29a:	f001 fa00 	bl	808c69e <__multiply>
 808b29e:	9006      	str	r0, [sp, #24]
 808b2a0:	2800      	cmp	r0, #0
 808b2a2:	f43f ae53 	beq.w	808af4c <_strtod_r+0x48c>
 808b2a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b2a8:	4650      	mov	r0, sl
 808b2aa:	f001 f912 	bl	808c4d2 <_Bfree>
 808b2ae:	9b06      	ldr	r3, [sp, #24]
 808b2b0:	9318      	str	r3, [sp, #96]	; 0x60
 808b2b2:	e782      	b.n	808b1ba <_strtod_r+0x6fa>
 808b2b4:	463a      	mov	r2, r7
 808b2b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b2b8:	4650      	mov	r0, sl
 808b2ba:	f001 facf 	bl	808c85c <__lshift>
 808b2be:	9018      	str	r0, [sp, #96]	; 0x60
 808b2c0:	2800      	cmp	r0, #0
 808b2c2:	f47f af7c 	bne.w	808b1be <_strtod_r+0x6fe>
 808b2c6:	e641      	b.n	808af4c <_strtod_r+0x48c>
 808b2c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808b2ca:	9904      	ldr	r1, [sp, #16]
 808b2cc:	4650      	mov	r0, sl
 808b2ce:	f001 fa77 	bl	808c7c0 <__pow5mult>
 808b2d2:	9004      	str	r0, [sp, #16]
 808b2d4:	2800      	cmp	r0, #0
 808b2d6:	f47f af76 	bne.w	808b1c6 <_strtod_r+0x706>
 808b2da:	e637      	b.n	808af4c <_strtod_r+0x48c>
 808b2dc:	4622      	mov	r2, r4
 808b2de:	9904      	ldr	r1, [sp, #16]
 808b2e0:	4650      	mov	r0, sl
 808b2e2:	f001 fabb 	bl	808c85c <__lshift>
 808b2e6:	9004      	str	r0, [sp, #16]
 808b2e8:	2800      	cmp	r0, #0
 808b2ea:	f47f af6f 	bne.w	808b1cc <_strtod_r+0x70c>
 808b2ee:	e62d      	b.n	808af4c <_strtod_r+0x48c>
 808b2f0:	4632      	mov	r2, r6
 808b2f2:	9902      	ldr	r1, [sp, #8]
 808b2f4:	4650      	mov	r0, sl
 808b2f6:	f001 fab1 	bl	808c85c <__lshift>
 808b2fa:	9002      	str	r0, [sp, #8]
 808b2fc:	2800      	cmp	r0, #0
 808b2fe:	f47f af68 	bne.w	808b1d2 <_strtod_r+0x712>
 808b302:	e623      	b.n	808af4c <_strtod_r+0x48c>
 808b304:	f8db 3010 	ldr.w	r3, [fp, #16]
 808b308:	2b01      	cmp	r3, #1
 808b30a:	dc8e      	bgt.n	808b22a <_strtod_r+0x76a>
 808b30c:	e17a      	b.n	808b604 <_strtod_r+0xb44>
 808b30e:	d161      	bne.n	808b3d4 <_strtod_r+0x914>
 808b310:	9a06      	ldr	r2, [sp, #24]
 808b312:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b316:	b322      	cbz	r2, 808b362 <_strtod_r+0x8a2>
 808b318:	4943      	ldr	r1, [pc, #268]	; (808b428 <_strtod_r+0x968>)
 808b31a:	464a      	mov	r2, r9
 808b31c:	428b      	cmp	r3, r1
 808b31e:	d12e      	bne.n	808b37e <_strtod_r+0x8be>
 808b320:	9b03      	ldr	r3, [sp, #12]
 808b322:	4641      	mov	r1, r8
 808b324:	b163      	cbz	r3, 808b340 <_strtod_r+0x880>
 808b326:	4b41      	ldr	r3, [pc, #260]	; (808b42c <_strtod_r+0x96c>)
 808b328:	4013      	ands	r3, r2
 808b32a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808b32e:	d807      	bhi.n	808b340 <_strtod_r+0x880>
 808b330:	0d1b      	lsrs	r3, r3, #20
 808b332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b336:	f04f 30ff 	mov.w	r0, #4294967295
 808b33a:	fa00 f303 	lsl.w	r3, r0, r3
 808b33e:	e001      	b.n	808b344 <_strtod_r+0x884>
 808b340:	f04f 33ff 	mov.w	r3, #4294967295
 808b344:	428b      	cmp	r3, r1
 808b346:	d11a      	bne.n	808b37e <_strtod_r+0x8be>
 808b348:	4939      	ldr	r1, [pc, #228]	; (808b430 <_strtod_r+0x970>)
 808b34a:	428a      	cmp	r2, r1
 808b34c:	d102      	bne.n	808b354 <_strtod_r+0x894>
 808b34e:	3301      	adds	r3, #1
 808b350:	f43f adfc 	beq.w	808af4c <_strtod_r+0x48c>
 808b354:	4b35      	ldr	r3, [pc, #212]	; (808b42c <_strtod_r+0x96c>)
 808b356:	f04f 0800 	mov.w	r8, #0
 808b35a:	4013      	ands	r3, r2
 808b35c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808b360:	e150      	b.n	808b604 <_strtod_r+0xb44>
 808b362:	b963      	cbnz	r3, 808b37e <_strtod_r+0x8be>
 808b364:	f1b8 0f00 	cmp.w	r8, #0
 808b368:	d109      	bne.n	808b37e <_strtod_r+0x8be>
 808b36a:	e76a      	b.n	808b242 <_strtod_r+0x782>
 808b36c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808b370:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808b374:	f04f 38ff 	mov.w	r8, #4294967295
 808b378:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808b37c:	e142      	b.n	808b604 <_strtod_r+0xb44>
 808b37e:	b115      	cbz	r5, 808b386 <_strtod_r+0x8c6>
 808b380:	ea15 0f09 	tst.w	r5, r9
 808b384:	e002      	b.n	808b38c <_strtod_r+0x8cc>
 808b386:	9b07      	ldr	r3, [sp, #28]
 808b388:	ea13 0f08 	tst.w	r3, r8
 808b38c:	f000 813a 	beq.w	808b604 <_strtod_r+0xb44>
 808b390:	9b06      	ldr	r3, [sp, #24]
 808b392:	9a03      	ldr	r2, [sp, #12]
 808b394:	4640      	mov	r0, r8
 808b396:	4649      	mov	r1, r9
 808b398:	b153      	cbz	r3, 808b3b0 <_strtod_r+0x8f0>
 808b39a:	f7ff fb6f 	bl	808aa7c <sulp>
 808b39e:	4602      	mov	r2, r0
 808b3a0:	460b      	mov	r3, r1
 808b3a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808b3a6:	f7fd fa7f 	bl	80888a8 <__adddf3>
 808b3aa:	4680      	mov	r8, r0
 808b3ac:	4689      	mov	r9, r1
 808b3ae:	e129      	b.n	808b604 <_strtod_r+0xb44>
 808b3b0:	f7ff fb64 	bl	808aa7c <sulp>
 808b3b4:	4602      	mov	r2, r0
 808b3b6:	460b      	mov	r3, r1
 808b3b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808b3bc:	f7fd fa72 	bl	80888a4 <__aeabi_dsub>
 808b3c0:	2200      	movs	r2, #0
 808b3c2:	2300      	movs	r3, #0
 808b3c4:	4680      	mov	r8, r0
 808b3c6:	4689      	mov	r9, r1
 808b3c8:	f7fd fe88 	bl	80890dc <__aeabi_dcmpeq>
 808b3cc:	2800      	cmp	r0, #0
 808b3ce:	f47f af48 	bne.w	808b262 <_strtod_r+0x7a2>
 808b3d2:	e117      	b.n	808b604 <_strtod_r+0xb44>
 808b3d4:	9902      	ldr	r1, [sp, #8]
 808b3d6:	4658      	mov	r0, fp
 808b3d8:	f001 fbcb 	bl	808cb72 <__ratio>
 808b3dc:	2200      	movs	r2, #0
 808b3de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808b3e2:	4606      	mov	r6, r0
 808b3e4:	460f      	mov	r7, r1
 808b3e6:	f7fd fe8d 	bl	8089104 <__aeabi_dcmple>
 808b3ea:	2800      	cmp	r0, #0
 808b3ec:	d03f      	beq.n	808b46e <_strtod_r+0x9ae>
 808b3ee:	9b06      	ldr	r3, [sp, #24]
 808b3f0:	b113      	cbz	r3, 808b3f8 <_strtod_r+0x938>
 808b3f2:	2600      	movs	r6, #0
 808b3f4:	4f0f      	ldr	r7, [pc, #60]	; (808b434 <_strtod_r+0x974>)
 808b3f6:	e010      	b.n	808b41a <_strtod_r+0x95a>
 808b3f8:	f1b8 0f00 	cmp.w	r8, #0
 808b3fc:	d103      	bne.n	808b406 <_strtod_r+0x946>
 808b3fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b402:	b93b      	cbnz	r3, 808b414 <_strtod_r+0x954>
 808b404:	e01a      	b.n	808b43c <_strtod_r+0x97c>
 808b406:	f1b8 0f01 	cmp.w	r8, #1
 808b40a:	d103      	bne.n	808b414 <_strtod_r+0x954>
 808b40c:	f1b9 0f00 	cmp.w	r9, #0
 808b410:	f43f af27 	beq.w	808b262 <_strtod_r+0x7a2>
 808b414:	4f08      	ldr	r7, [pc, #32]	; (808b438 <_strtod_r+0x978>)
 808b416:	2600      	movs	r6, #0
 808b418:	2400      	movs	r4, #0
 808b41a:	4d06      	ldr	r5, [pc, #24]	; (808b434 <_strtod_r+0x974>)
 808b41c:	e03c      	b.n	808b498 <_strtod_r+0x9d8>
 808b41e:	bf00      	nop
 808b420:	fffffc02 	.word	0xfffffc02
 808b424:	fffffbe2 	.word	0xfffffbe2
 808b428:	000fffff 	.word	0x000fffff
 808b42c:	7ff00000 	.word	0x7ff00000
 808b430:	7fefffff 	.word	0x7fefffff
 808b434:	3ff00000 	.word	0x3ff00000
 808b438:	bff00000 	.word	0xbff00000
 808b43c:	2200      	movs	r2, #0
 808b43e:	4b9a      	ldr	r3, [pc, #616]	; (808b6a8 <_strtod_r+0xbe8>)
 808b440:	4630      	mov	r0, r6
 808b442:	4639      	mov	r1, r7
 808b444:	f7fd fe54 	bl	80890f0 <__aeabi_dcmplt>
 808b448:	b940      	cbnz	r0, 808b45c <_strtod_r+0x99c>
 808b44a:	2200      	movs	r2, #0
 808b44c:	4b97      	ldr	r3, [pc, #604]	; (808b6ac <_strtod_r+0xbec>)
 808b44e:	4630      	mov	r0, r6
 808b450:	4639      	mov	r1, r7
 808b452:	f7fd fbdb 	bl	8088c0c <__aeabi_dmul>
 808b456:	4604      	mov	r4, r0
 808b458:	460d      	mov	r5, r1
 808b45a:	e001      	b.n	808b460 <_strtod_r+0x9a0>
 808b45c:	9c06      	ldr	r4, [sp, #24]
 808b45e:	4d93      	ldr	r5, [pc, #588]	; (808b6ac <_strtod_r+0xbec>)
 808b460:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808b464:	9414      	str	r4, [sp, #80]	; 0x50
 808b466:	9315      	str	r3, [sp, #84]	; 0x54
 808b468:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808b46c:	e014      	b.n	808b498 <_strtod_r+0x9d8>
 808b46e:	4b8f      	ldr	r3, [pc, #572]	; (808b6ac <_strtod_r+0xbec>)
 808b470:	2200      	movs	r2, #0
 808b472:	4630      	mov	r0, r6
 808b474:	4639      	mov	r1, r7
 808b476:	f7fd fbc9 	bl	8088c0c <__aeabi_dmul>
 808b47a:	9b06      	ldr	r3, [sp, #24]
 808b47c:	4604      	mov	r4, r0
 808b47e:	460d      	mov	r5, r1
 808b480:	b923      	cbnz	r3, 808b48c <_strtod_r+0x9cc>
 808b482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b486:	900e      	str	r0, [sp, #56]	; 0x38
 808b488:	930f      	str	r3, [sp, #60]	; 0x3c
 808b48a:	e003      	b.n	808b494 <_strtod_r+0x9d4>
 808b48c:	4602      	mov	r2, r0
 808b48e:	460b      	mov	r3, r1
 808b490:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808b494:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808b498:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b49c:	0d1b      	lsrs	r3, r3, #20
 808b49e:	051b      	lsls	r3, r3, #20
 808b4a0:	9307      	str	r3, [sp, #28]
 808b4a2:	9a07      	ldr	r2, [sp, #28]
 808b4a4:	4b82      	ldr	r3, [pc, #520]	; (808b6b0 <_strtod_r+0xbf0>)
 808b4a6:	429a      	cmp	r2, r3
 808b4a8:	d12b      	bne.n	808b502 <_strtod_r+0xa42>
 808b4aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808b4ae:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808b4b2:	4640      	mov	r0, r8
 808b4b4:	4649      	mov	r1, r9
 808b4b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808b4ba:	f001 fa9b 	bl	808c9f4 <__ulp>
 808b4be:	4602      	mov	r2, r0
 808b4c0:	460b      	mov	r3, r1
 808b4c2:	4630      	mov	r0, r6
 808b4c4:	4639      	mov	r1, r7
 808b4c6:	f7fd fba1 	bl	8088c0c <__aeabi_dmul>
 808b4ca:	4642      	mov	r2, r8
 808b4cc:	464b      	mov	r3, r9
 808b4ce:	f7fd f9eb 	bl	80888a8 <__adddf3>
 808b4d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808b4d6:	0d1b      	lsrs	r3, r3, #20
 808b4d8:	4a76      	ldr	r2, [pc, #472]	; (808b6b4 <_strtod_r+0xbf4>)
 808b4da:	051b      	lsls	r3, r3, #20
 808b4dc:	4293      	cmp	r3, r2
 808b4de:	4680      	mov	r8, r0
 808b4e0:	d90c      	bls.n	808b4fc <_strtod_r+0xa3c>
 808b4e2:	4b75      	ldr	r3, [pc, #468]	; (808b6b8 <_strtod_r+0xbf8>)
 808b4e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808b4e6:	429a      	cmp	r2, r3
 808b4e8:	d103      	bne.n	808b4f2 <_strtod_r+0xa32>
 808b4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b4ec:	3301      	adds	r3, #1
 808b4ee:	f43f ad2d 	beq.w	808af4c <_strtod_r+0x48c>
 808b4f2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808b6b8 <_strtod_r+0xbf8>
 808b4f6:	f04f 38ff 	mov.w	r8, #4294967295
 808b4fa:	e072      	b.n	808b5e2 <_strtod_r+0xb22>
 808b4fc:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808b500:	e039      	b.n	808b576 <_strtod_r+0xab6>
 808b502:	9b03      	ldr	r3, [sp, #12]
 808b504:	b33b      	cbz	r3, 808b556 <_strtod_r+0xa96>
 808b506:	9b07      	ldr	r3, [sp, #28]
 808b508:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808b50c:	d823      	bhi.n	808b556 <_strtod_r+0xa96>
 808b50e:	a35e      	add	r3, pc, #376	; (adr r3, 808b688 <_strtod_r+0xbc8>)
 808b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b514:	4620      	mov	r0, r4
 808b516:	4629      	mov	r1, r5
 808b518:	f7fd fdf4 	bl	8089104 <__aeabi_dcmple>
 808b51c:	b1b8      	cbz	r0, 808b54e <_strtod_r+0xa8e>
 808b51e:	4629      	mov	r1, r5
 808b520:	4620      	mov	r0, r4
 808b522:	f7fd fe35 	bl	8089190 <__aeabi_d2uiz>
 808b526:	2800      	cmp	r0, #0
 808b528:	bf08      	it	eq
 808b52a:	2001      	moveq	r0, #1
 808b52c:	f7fd faf8 	bl	8088b20 <__aeabi_ui2d>
 808b530:	9b06      	ldr	r3, [sp, #24]
 808b532:	4604      	mov	r4, r0
 808b534:	460d      	mov	r5, r1
 808b536:	b923      	cbnz	r3, 808b542 <_strtod_r+0xa82>
 808b538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b53c:	9010      	str	r0, [sp, #64]	; 0x40
 808b53e:	9311      	str	r3, [sp, #68]	; 0x44
 808b540:	e003      	b.n	808b54a <_strtod_r+0xa8a>
 808b542:	4602      	mov	r2, r0
 808b544:	460b      	mov	r3, r1
 808b546:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808b54a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808b54e:	9a07      	ldr	r2, [sp, #28]
 808b550:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808b554:	1a9f      	subs	r7, r3, r2
 808b556:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808b55a:	f001 fa4b 	bl	808c9f4 <__ulp>
 808b55e:	4602      	mov	r2, r0
 808b560:	460b      	mov	r3, r1
 808b562:	4630      	mov	r0, r6
 808b564:	4639      	mov	r1, r7
 808b566:	f7fd fb51 	bl	8088c0c <__aeabi_dmul>
 808b56a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808b56e:	f7fd f99b 	bl	80888a8 <__adddf3>
 808b572:	4680      	mov	r8, r0
 808b574:	4689      	mov	r9, r1
 808b576:	9b03      	ldr	r3, [sp, #12]
 808b578:	bb9b      	cbnz	r3, 808b5e2 <_strtod_r+0xb22>
 808b57a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b57e:	0d1b      	lsrs	r3, r3, #20
 808b580:	9a07      	ldr	r2, [sp, #28]
 808b582:	051b      	lsls	r3, r3, #20
 808b584:	429a      	cmp	r2, r3
 808b586:	464e      	mov	r6, r9
 808b588:	d12b      	bne.n	808b5e2 <_strtod_r+0xb22>
 808b58a:	4629      	mov	r1, r5
 808b58c:	4620      	mov	r0, r4
 808b58e:	f7fd fdd7 	bl	8089140 <__aeabi_d2iz>
 808b592:	f7fd fad5 	bl	8088b40 <__aeabi_i2d>
 808b596:	460b      	mov	r3, r1
 808b598:	4602      	mov	r2, r0
 808b59a:	4629      	mov	r1, r5
 808b59c:	4620      	mov	r0, r4
 808b59e:	f7fd f981 	bl	80888a4 <__aeabi_dsub>
 808b5a2:	9b06      	ldr	r3, [sp, #24]
 808b5a4:	4604      	mov	r4, r0
 808b5a6:	460d      	mov	r5, r1
 808b5a8:	b92b      	cbnz	r3, 808b5b6 <_strtod_r+0xaf6>
 808b5aa:	f1b8 0f00 	cmp.w	r8, #0
 808b5ae:	d102      	bne.n	808b5b6 <_strtod_r+0xaf6>
 808b5b0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808b5b4:	b17e      	cbz	r6, 808b5d6 <_strtod_r+0xb16>
 808b5b6:	a336      	add	r3, pc, #216	; (adr r3, 808b690 <_strtod_r+0xbd0>)
 808b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b5bc:	4620      	mov	r0, r4
 808b5be:	4629      	mov	r1, r5
 808b5c0:	f7fd fd96 	bl	80890f0 <__aeabi_dcmplt>
 808b5c4:	bb88      	cbnz	r0, 808b62a <_strtod_r+0xb6a>
 808b5c6:	a334      	add	r3, pc, #208	; (adr r3, 808b698 <_strtod_r+0xbd8>)
 808b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b5cc:	4620      	mov	r0, r4
 808b5ce:	4629      	mov	r1, r5
 808b5d0:	f7fd fdac 	bl	808912c <__aeabi_dcmpgt>
 808b5d4:	e004      	b.n	808b5e0 <_strtod_r+0xb20>
 808b5d6:	a332      	add	r3, pc, #200	; (adr r3, 808b6a0 <_strtod_r+0xbe0>)
 808b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b5dc:	f7fd fd88 	bl	80890f0 <__aeabi_dcmplt>
 808b5e0:	bb18      	cbnz	r0, 808b62a <_strtod_r+0xb6a>
 808b5e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b5e4:	4650      	mov	r0, sl
 808b5e6:	f000 ff74 	bl	808c4d2 <_Bfree>
 808b5ea:	9904      	ldr	r1, [sp, #16]
 808b5ec:	4650      	mov	r0, sl
 808b5ee:	f000 ff70 	bl	808c4d2 <_Bfree>
 808b5f2:	9902      	ldr	r1, [sp, #8]
 808b5f4:	4650      	mov	r0, sl
 808b5f6:	f000 ff6c 	bl	808c4d2 <_Bfree>
 808b5fa:	4659      	mov	r1, fp
 808b5fc:	4650      	mov	r0, sl
 808b5fe:	f000 ff68 	bl	808c4d2 <_Bfree>
 808b602:	e574      	b.n	808b0ee <_strtod_r+0x62e>
 808b604:	9b03      	ldr	r3, [sp, #12]
 808b606:	b183      	cbz	r3, 808b62a <_strtod_r+0xb6a>
 808b608:	4b2c      	ldr	r3, [pc, #176]	; (808b6bc <_strtod_r+0xbfc>)
 808b60a:	4640      	mov	r0, r8
 808b60c:	930b      	str	r3, [sp, #44]	; 0x2c
 808b60e:	2300      	movs	r3, #0
 808b610:	930a      	str	r3, [sp, #40]	; 0x28
 808b612:	4649      	mov	r1, r9
 808b614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808b618:	f7fd faf8 	bl	8088c0c <__aeabi_dmul>
 808b61c:	4680      	mov	r8, r0
 808b61e:	4689      	mov	r9, r1
 808b620:	b919      	cbnz	r1, 808b62a <_strtod_r+0xb6a>
 808b622:	b910      	cbnz	r0, 808b62a <_strtod_r+0xb6a>
 808b624:	2322      	movs	r3, #34	; 0x22
 808b626:	f8ca 3000 	str.w	r3, [sl]
 808b62a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b62c:	4650      	mov	r0, sl
 808b62e:	f000 ff50 	bl	808c4d2 <_Bfree>
 808b632:	9904      	ldr	r1, [sp, #16]
 808b634:	4650      	mov	r0, sl
 808b636:	f000 ff4c 	bl	808c4d2 <_Bfree>
 808b63a:	9902      	ldr	r1, [sp, #8]
 808b63c:	4650      	mov	r0, sl
 808b63e:	f000 ff48 	bl	808c4d2 <_Bfree>
 808b642:	9905      	ldr	r1, [sp, #20]
 808b644:	4650      	mov	r0, sl
 808b646:	f000 ff44 	bl	808c4d2 <_Bfree>
 808b64a:	4659      	mov	r1, fp
 808b64c:	4650      	mov	r0, sl
 808b64e:	f000 ff40 	bl	808c4d2 <_Bfree>
 808b652:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808b654:	b113      	cbz	r3, 808b65c <_strtod_r+0xb9c>
 808b656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808b65a:	6013      	str	r3, [r2, #0]
 808b65c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808b65e:	b11b      	cbz	r3, 808b668 <_strtod_r+0xba8>
 808b660:	4642      	mov	r2, r8
 808b662:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808b666:	e007      	b.n	808b678 <_strtod_r+0xbb8>
 808b668:	4642      	mov	r2, r8
 808b66a:	464b      	mov	r3, r9
 808b66c:	e004      	b.n	808b678 <_strtod_r+0xbb8>
 808b66e:	2500      	movs	r5, #0
 808b670:	462a      	mov	r2, r5
 808b672:	2101      	movs	r1, #1
 808b674:	f7ff bb47 	b.w	808ad06 <_strtod_r+0x246>
 808b678:	4610      	mov	r0, r2
 808b67a:	4619      	mov	r1, r3
 808b67c:	b01d      	add	sp, #116	; 0x74
 808b67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b682:	bf00      	nop
 808b684:	f3af 8000 	nop.w
 808b688:	ffc00000 	.word	0xffc00000
 808b68c:	41dfffff 	.word	0x41dfffff
 808b690:	94a03595 	.word	0x94a03595
 808b694:	3fdfffff 	.word	0x3fdfffff
 808b698:	35afe535 	.word	0x35afe535
 808b69c:	3fe00000 	.word	0x3fe00000
 808b6a0:	94a03595 	.word	0x94a03595
 808b6a4:	3fcfffff 	.word	0x3fcfffff
 808b6a8:	3ff00000 	.word	0x3ff00000
 808b6ac:	3fe00000 	.word	0x3fe00000
 808b6b0:	7fe00000 	.word	0x7fe00000
 808b6b4:	7c9fffff 	.word	0x7c9fffff
 808b6b8:	7fefffff 	.word	0x7fefffff
 808b6bc:	39500000 	.word	0x39500000

0808b6c0 <strtod>:
 808b6c0:	4b02      	ldr	r3, [pc, #8]	; (808b6cc <strtod+0xc>)
 808b6c2:	460a      	mov	r2, r1
 808b6c4:	4601      	mov	r1, r0
 808b6c6:	6818      	ldr	r0, [r3, #0]
 808b6c8:	f7ff b9fa 	b.w	808aac0 <_strtod_r>
 808b6cc:	200000b8 	.word	0x200000b8

0808b6d0 <_strtoul_r>:
 808b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b6d4:	460e      	mov	r6, r1
 808b6d6:	4680      	mov	r8, r0
 808b6d8:	483b      	ldr	r0, [pc, #236]	; (808b7c8 <_strtoul_r+0xf8>)
 808b6da:	f8d0 9000 	ldr.w	r9, [r0]
 808b6de:	4635      	mov	r5, r6
 808b6e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 808b6e4:	eb09 0004 	add.w	r0, r9, r4
 808b6e8:	7840      	ldrb	r0, [r0, #1]
 808b6ea:	f000 0008 	and.w	r0, r0, #8
 808b6ee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808b6f2:	b108      	cbz	r0, 808b6f8 <_strtoul_r+0x28>
 808b6f4:	462e      	mov	r6, r5
 808b6f6:	e7f2      	b.n	808b6de <_strtoul_r+0xe>
 808b6f8:	2c2d      	cmp	r4, #45	; 0x2d
 808b6fa:	d103      	bne.n	808b704 <_strtoul_r+0x34>
 808b6fc:	1cb5      	adds	r5, r6, #2
 808b6fe:	7874      	ldrb	r4, [r6, #1]
 808b700:	2701      	movs	r7, #1
 808b702:	e003      	b.n	808b70c <_strtoul_r+0x3c>
 808b704:	2c2b      	cmp	r4, #43	; 0x2b
 808b706:	bf04      	itt	eq
 808b708:	7874      	ldrbeq	r4, [r6, #1]
 808b70a:	1cb5      	addeq	r5, r6, #2
 808b70c:	b113      	cbz	r3, 808b714 <_strtoul_r+0x44>
 808b70e:	2b10      	cmp	r3, #16
 808b710:	d10a      	bne.n	808b728 <_strtoul_r+0x58>
 808b712:	e053      	b.n	808b7bc <_strtoul_r+0xec>
 808b714:	2c30      	cmp	r4, #48	; 0x30
 808b716:	d14f      	bne.n	808b7b8 <_strtoul_r+0xe8>
 808b718:	7828      	ldrb	r0, [r5, #0]
 808b71a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808b71e:	2858      	cmp	r0, #88	; 0x58
 808b720:	d145      	bne.n	808b7ae <_strtoul_r+0xde>
 808b722:	786c      	ldrb	r4, [r5, #1]
 808b724:	2310      	movs	r3, #16
 808b726:	3502      	adds	r5, #2
 808b728:	f04f 3cff 	mov.w	ip, #4294967295
 808b72c:	fbbc fcf3 	udiv	ip, ip, r3
 808b730:	fb03 fa0c 	mul.w	sl, r3, ip
 808b734:	2600      	movs	r6, #0
 808b736:	ea6f 0a0a 	mvn.w	sl, sl
 808b73a:	4630      	mov	r0, r6
 808b73c:	eb09 0e04 	add.w	lr, r9, r4
 808b740:	f89e e001 	ldrb.w	lr, [lr, #1]
 808b744:	f01e 0f04 	tst.w	lr, #4
 808b748:	d001      	beq.n	808b74e <_strtoul_r+0x7e>
 808b74a:	3c30      	subs	r4, #48	; 0x30
 808b74c:	e00b      	b.n	808b766 <_strtoul_r+0x96>
 808b74e:	f01e 0e03 	ands.w	lr, lr, #3
 808b752:	d01a      	beq.n	808b78a <_strtoul_r+0xba>
 808b754:	f1be 0f01 	cmp.w	lr, #1
 808b758:	bf0c      	ite	eq
 808b75a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808b75e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808b762:	ebce 0404 	rsb	r4, lr, r4
 808b766:	42a3      	cmp	r3, r4
 808b768:	dd0f      	ble.n	808b78a <_strtoul_r+0xba>
 808b76a:	2e00      	cmp	r6, #0
 808b76c:	db08      	blt.n	808b780 <_strtoul_r+0xb0>
 808b76e:	4560      	cmp	r0, ip
 808b770:	d806      	bhi.n	808b780 <_strtoul_r+0xb0>
 808b772:	d101      	bne.n	808b778 <_strtoul_r+0xa8>
 808b774:	4554      	cmp	r4, sl
 808b776:	dc03      	bgt.n	808b780 <_strtoul_r+0xb0>
 808b778:	fb03 4000 	mla	r0, r3, r0, r4
 808b77c:	2601      	movs	r6, #1
 808b77e:	e001      	b.n	808b784 <_strtoul_r+0xb4>
 808b780:	f04f 36ff 	mov.w	r6, #4294967295
 808b784:	f815 4b01 	ldrb.w	r4, [r5], #1
 808b788:	e7d8      	b.n	808b73c <_strtoul_r+0x6c>
 808b78a:	2e00      	cmp	r6, #0
 808b78c:	da07      	bge.n	808b79e <_strtoul_r+0xce>
 808b78e:	2322      	movs	r3, #34	; 0x22
 808b790:	f8c8 3000 	str.w	r3, [r8]
 808b794:	f04f 30ff 	mov.w	r0, #4294967295
 808b798:	b92a      	cbnz	r2, 808b7a6 <_strtoul_r+0xd6>
 808b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b79e:	b107      	cbz	r7, 808b7a2 <_strtoul_r+0xd2>
 808b7a0:	4240      	negs	r0, r0
 808b7a2:	b172      	cbz	r2, 808b7c2 <_strtoul_r+0xf2>
 808b7a4:	b106      	cbz	r6, 808b7a8 <_strtoul_r+0xd8>
 808b7a6:	1e69      	subs	r1, r5, #1
 808b7a8:	6011      	str	r1, [r2, #0]
 808b7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b7ae:	2430      	movs	r4, #48	; 0x30
 808b7b0:	2b00      	cmp	r3, #0
 808b7b2:	d1b9      	bne.n	808b728 <_strtoul_r+0x58>
 808b7b4:	2308      	movs	r3, #8
 808b7b6:	e7b7      	b.n	808b728 <_strtoul_r+0x58>
 808b7b8:	230a      	movs	r3, #10
 808b7ba:	e7b5      	b.n	808b728 <_strtoul_r+0x58>
 808b7bc:	2c30      	cmp	r4, #48	; 0x30
 808b7be:	d0ab      	beq.n	808b718 <_strtoul_r+0x48>
 808b7c0:	e7b2      	b.n	808b728 <_strtoul_r+0x58>
 808b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b7c6:	bf00      	nop
 808b7c8:	20000054 	.word	0x20000054

0808b7cc <strtoul>:
 808b7cc:	4613      	mov	r3, r2
 808b7ce:	460a      	mov	r2, r1
 808b7d0:	4601      	mov	r1, r0
 808b7d2:	4802      	ldr	r0, [pc, #8]	; (808b7dc <strtoul+0x10>)
 808b7d4:	6800      	ldr	r0, [r0, #0]
 808b7d6:	f7ff bf7b 	b.w	808b6d0 <_strtoul_r>
 808b7da:	bf00      	nop
 808b7dc:	200000b8 	.word	0x200000b8

0808b7e0 <__get_current_time_locale>:
 808b7e0:	4b04      	ldr	r3, [pc, #16]	; (808b7f4 <__get_current_time_locale+0x14>)
 808b7e2:	4a05      	ldr	r2, [pc, #20]	; (808b7f8 <__get_current_time_locale+0x18>)
 808b7e4:	6818      	ldr	r0, [r3, #0]
 808b7e6:	4b05      	ldr	r3, [pc, #20]	; (808b7fc <__get_current_time_locale+0x1c>)
 808b7e8:	2800      	cmp	r0, #0
 808b7ea:	bf14      	ite	ne
 808b7ec:	4610      	movne	r0, r2
 808b7ee:	4618      	moveq	r0, r3
 808b7f0:	4770      	bx	lr
 808b7f2:	bf00      	nop
 808b7f4:	20000f90 	.word	0x20000f90
 808b7f8:	20000f94 	.word	0x20000f94
 808b7fc:	0808e0a8 	.word	0x0808e0a8

0808b800 <__tzcalc_limits>:
 808b800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b804:	4604      	mov	r4, r0
 808b806:	f000 fd91 	bl	808c32c <__gettzinfo>
 808b80a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808b80e:	429c      	cmp	r4, r3
 808b810:	f340 8096 	ble.w	808b940 <__tzcalc_limits+0x140>
 808b814:	f240 156d 	movw	r5, #365	; 0x16d
 808b818:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808b81c:	18e3      	adds	r3, r4, r3
 808b81e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808b822:	109b      	asrs	r3, r3, #2
 808b824:	fb05 3502 	mla	r5, r5, r2, r3
 808b828:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808b82c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808b830:	fb92 f3f3 	sdiv	r3, r2, r3
 808b834:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808b838:	442b      	add	r3, r5
 808b83a:	18a5      	adds	r5, r4, r2
 808b83c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808b840:	fb94 f7f2 	sdiv	r7, r4, r2
 808b844:	fb95 f5f2 	sdiv	r5, r5, r2
 808b848:	fb02 4717 	mls	r7, r2, r7, r4
 808b84c:	441d      	add	r5, r3
 808b84e:	2364      	movs	r3, #100	; 0x64
 808b850:	fb94 f6f3 	sdiv	r6, r4, r3
 808b854:	fab7 fe87 	clz	lr, r7
 808b858:	4601      	mov	r1, r0
 808b85a:	fb03 4616 	mls	r6, r3, r6, r4
 808b85e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808b862:	9301      	str	r3, [sp, #4]
 808b864:	f004 0303 	and.w	r3, r4, #3
 808b868:	6044      	str	r4, [r0, #4]
 808b86a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808b86e:	9300      	str	r3, [sp, #0]
 808b870:	f04f 0c07 	mov.w	ip, #7
 808b874:	7a0b      	ldrb	r3, [r1, #8]
 808b876:	2b4a      	cmp	r3, #74	; 0x4a
 808b878:	d10e      	bne.n	808b898 <__tzcalc_limits+0x98>
 808b87a:	694b      	ldr	r3, [r1, #20]
 808b87c:	9a00      	ldr	r2, [sp, #0]
 808b87e:	18ec      	adds	r4, r5, r3
 808b880:	b902      	cbnz	r2, 808b884 <__tzcalc_limits+0x84>
 808b882:	b906      	cbnz	r6, 808b886 <__tzcalc_limits+0x86>
 808b884:	b927      	cbnz	r7, 808b890 <__tzcalc_limits+0x90>
 808b886:	2b3b      	cmp	r3, #59	; 0x3b
 808b888:	bfd4      	ite	le
 808b88a:	2300      	movle	r3, #0
 808b88c:	2301      	movgt	r3, #1
 808b88e:	e000      	b.n	808b892 <__tzcalc_limits+0x92>
 808b890:	2300      	movs	r3, #0
 808b892:	4423      	add	r3, r4
 808b894:	3b01      	subs	r3, #1
 808b896:	e03f      	b.n	808b918 <__tzcalc_limits+0x118>
 808b898:	2b44      	cmp	r3, #68	; 0x44
 808b89a:	d102      	bne.n	808b8a2 <__tzcalc_limits+0xa2>
 808b89c:	694b      	ldr	r3, [r1, #20]
 808b89e:	442b      	add	r3, r5
 808b8a0:	e03a      	b.n	808b918 <__tzcalc_limits+0x118>
 808b8a2:	9b00      	ldr	r3, [sp, #0]
 808b8a4:	b92b      	cbnz	r3, 808b8b2 <__tzcalc_limits+0xb2>
 808b8a6:	2e00      	cmp	r6, #0
 808b8a8:	bf0c      	ite	eq
 808b8aa:	46f0      	moveq	r8, lr
 808b8ac:	f04f 0801 	movne.w	r8, #1
 808b8b0:	e000      	b.n	808b8b4 <__tzcalc_limits+0xb4>
 808b8b2:	46f0      	mov	r8, lr
 808b8b4:	46a9      	mov	r9, r5
 808b8b6:	4b24      	ldr	r3, [pc, #144]	; (808b948 <__tzcalc_limits+0x148>)
 808b8b8:	2230      	movs	r2, #48	; 0x30
 808b8ba:	fb02 3808 	mla	r8, r2, r8, r3
 808b8be:	68cc      	ldr	r4, [r1, #12]
 808b8c0:	f1a8 0a04 	sub.w	sl, r8, #4
 808b8c4:	2301      	movs	r3, #1
 808b8c6:	42a3      	cmp	r3, r4
 808b8c8:	da04      	bge.n	808b8d4 <__tzcalc_limits+0xd4>
 808b8ca:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808b8ce:	3301      	adds	r3, #1
 808b8d0:	44d9      	add	r9, fp
 808b8d2:	e7f8      	b.n	808b8c6 <__tzcalc_limits+0xc6>
 808b8d4:	f109 0304 	add.w	r3, r9, #4
 808b8d8:	fb93 fbfc 	sdiv	fp, r3, ip
 808b8dc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808b8e0:	ebca 0a03 	rsb	sl, sl, r3
 808b8e4:	694b      	ldr	r3, [r1, #20]
 808b8e6:	2c01      	cmp	r4, #1
 808b8e8:	bfb8      	it	lt
 808b8ea:	2401      	movlt	r4, #1
 808b8ec:	ebb3 0a0a 	subs.w	sl, r3, sl
 808b8f0:	690b      	ldr	r3, [r1, #16]
 808b8f2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808b8f6:	f103 33ff 	add.w	r3, r3, #4294967295
 808b8fa:	f104 34ff 	add.w	r4, r4, #4294967295
 808b8fe:	bf48      	it	mi
 808b900:	f10a 0a07 	addmi.w	sl, sl, #7
 808b904:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808b908:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808b90c:	4453      	add	r3, sl
 808b90e:	42a3      	cmp	r3, r4
 808b910:	db01      	blt.n	808b916 <__tzcalc_limits+0x116>
 808b912:	3b07      	subs	r3, #7
 808b914:	e7fb      	b.n	808b90e <__tzcalc_limits+0x10e>
 808b916:	444b      	add	r3, r9
 808b918:	698c      	ldr	r4, [r1, #24]
 808b91a:	4a0c      	ldr	r2, [pc, #48]	; (808b94c <__tzcalc_limits+0x14c>)
 808b91c:	fb02 4303 	mla	r3, r2, r3, r4
 808b920:	6a0c      	ldr	r4, [r1, #32]
 808b922:	4423      	add	r3, r4
 808b924:	f841 3f1c 	str.w	r3, [r1, #28]!
 808b928:	9b01      	ldr	r3, [sp, #4]
 808b92a:	4299      	cmp	r1, r3
 808b92c:	d1a2      	bne.n	808b874 <__tzcalc_limits+0x74>
 808b92e:	69c3      	ldr	r3, [r0, #28]
 808b930:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808b932:	4293      	cmp	r3, r2
 808b934:	bfac      	ite	ge
 808b936:	2300      	movge	r3, #0
 808b938:	2301      	movlt	r3, #1
 808b93a:	6003      	str	r3, [r0, #0]
 808b93c:	2001      	movs	r0, #1
 808b93e:	e000      	b.n	808b942 <__tzcalc_limits+0x142>
 808b940:	2000      	movs	r0, #0
 808b942:	b003      	add	sp, #12
 808b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b948:	0808de60 	.word	0x0808de60
 808b94c:	00015180 	.word	0x00015180

0808b950 <__tz_lock>:
 808b950:	4770      	bx	lr

0808b952 <__tz_unlock>:
 808b952:	4770      	bx	lr

0808b954 <_tzset_unlocked>:
 808b954:	4b01      	ldr	r3, [pc, #4]	; (808b95c <_tzset_unlocked+0x8>)
 808b956:	6818      	ldr	r0, [r3, #0]
 808b958:	f000 b802 	b.w	808b960 <_tzset_unlocked_r>
 808b95c:	200000b8 	.word	0x200000b8

0808b960 <_tzset_unlocked_r>:
 808b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b964:	b08d      	sub	sp, #52	; 0x34
 808b966:	4607      	mov	r7, r0
 808b968:	f000 fce0 	bl	808c32c <__gettzinfo>
 808b96c:	49b0      	ldr	r1, [pc, #704]	; (808bc30 <_tzset_unlocked_r+0x2d0>)
 808b96e:	4604      	mov	r4, r0
 808b970:	4638      	mov	r0, r7
 808b972:	f000 fcd3 	bl	808c31c <_getenv_r>
 808b976:	4eaf      	ldr	r6, [pc, #700]	; (808bc34 <_tzset_unlocked_r+0x2d4>)
 808b978:	4605      	mov	r5, r0
 808b97a:	b960      	cbnz	r0, 808b996 <_tzset_unlocked_r+0x36>
 808b97c:	4bae      	ldr	r3, [pc, #696]	; (808bc38 <_tzset_unlocked_r+0x2d8>)
 808b97e:	4aaf      	ldr	r2, [pc, #700]	; (808bc3c <_tzset_unlocked_r+0x2dc>)
 808b980:	6018      	str	r0, [r3, #0]
 808b982:	4baf      	ldr	r3, [pc, #700]	; (808bc40 <_tzset_unlocked_r+0x2e0>)
 808b984:	6018      	str	r0, [r3, #0]
 808b986:	4baf      	ldr	r3, [pc, #700]	; (808bc44 <_tzset_unlocked_r+0x2e4>)
 808b988:	6830      	ldr	r0, [r6, #0]
 808b98a:	601a      	str	r2, [r3, #0]
 808b98c:	605a      	str	r2, [r3, #4]
 808b98e:	f7f9 ffc3 	bl	8085918 <free>
 808b992:	6035      	str	r5, [r6, #0]
 808b994:	e148      	b.n	808bc28 <_tzset_unlocked_r+0x2c8>
 808b996:	6831      	ldr	r1, [r6, #0]
 808b998:	b979      	cbnz	r1, 808b9ba <_tzset_unlocked_r+0x5a>
 808b99a:	6830      	ldr	r0, [r6, #0]
 808b99c:	f7f9 ffbc 	bl	8085918 <free>
 808b9a0:	4628      	mov	r0, r5
 808b9a2:	f7ff f821 	bl	808a9e8 <strlen>
 808b9a6:	1c41      	adds	r1, r0, #1
 808b9a8:	4638      	mov	r0, r7
 808b9aa:	f7f9 fffd 	bl	80859a8 <_malloc_r>
 808b9ae:	6030      	str	r0, [r6, #0]
 808b9b0:	b148      	cbz	r0, 808b9c6 <_tzset_unlocked_r+0x66>
 808b9b2:	4629      	mov	r1, r5
 808b9b4:	f7fe fae0 	bl	8089f78 <strcpy>
 808b9b8:	e005      	b.n	808b9c6 <_tzset_unlocked_r+0x66>
 808b9ba:	f7fe fad3 	bl	8089f64 <strcmp>
 808b9be:	2800      	cmp	r0, #0
 808b9c0:	f000 8132 	beq.w	808bc28 <_tzset_unlocked_r+0x2c8>
 808b9c4:	e7e9      	b.n	808b99a <_tzset_unlocked_r+0x3a>
 808b9c6:	782b      	ldrb	r3, [r5, #0]
 808b9c8:	ae0a      	add	r6, sp, #40	; 0x28
 808b9ca:	2b3a      	cmp	r3, #58	; 0x3a
 808b9cc:	bf08      	it	eq
 808b9ce:	3501      	addeq	r5, #1
 808b9d0:	4633      	mov	r3, r6
 808b9d2:	4a9d      	ldr	r2, [pc, #628]	; (808bc48 <_tzset_unlocked_r+0x2e8>)
 808b9d4:	499d      	ldr	r1, [pc, #628]	; (808bc4c <_tzset_unlocked_r+0x2ec>)
 808b9d6:	4628      	mov	r0, r5
 808b9d8:	f7f9 ffbe 	bl	8085958 <siscanf>
 808b9dc:	2800      	cmp	r0, #0
 808b9de:	f340 8123 	ble.w	808bc28 <_tzset_unlocked_r+0x2c8>
 808b9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b9e4:	18ef      	adds	r7, r5, r3
 808b9e6:	5ceb      	ldrb	r3, [r5, r3]
 808b9e8:	2b2d      	cmp	r3, #45	; 0x2d
 808b9ea:	d103      	bne.n	808b9f4 <_tzset_unlocked_r+0x94>
 808b9ec:	3701      	adds	r7, #1
 808b9ee:	f04f 35ff 	mov.w	r5, #4294967295
 808b9f2:	e003      	b.n	808b9fc <_tzset_unlocked_r+0x9c>
 808b9f4:	2b2b      	cmp	r3, #43	; 0x2b
 808b9f6:	bf08      	it	eq
 808b9f8:	3701      	addeq	r7, #1
 808b9fa:	2501      	movs	r5, #1
 808b9fc:	f10d 0a20 	add.w	sl, sp, #32
 808ba00:	f10d 0b1e 	add.w	fp, sp, #30
 808ba04:	f04f 0800 	mov.w	r8, #0
 808ba08:	9603      	str	r6, [sp, #12]
 808ba0a:	f8cd a008 	str.w	sl, [sp, #8]
 808ba0e:	9601      	str	r6, [sp, #4]
 808ba10:	f8cd b000 	str.w	fp, [sp]
 808ba14:	4633      	mov	r3, r6
 808ba16:	aa07      	add	r2, sp, #28
 808ba18:	498d      	ldr	r1, [pc, #564]	; (808bc50 <_tzset_unlocked_r+0x2f0>)
 808ba1a:	4638      	mov	r0, r7
 808ba1c:	f8ad 801e 	strh.w	r8, [sp, #30]
 808ba20:	f8ad 8020 	strh.w	r8, [sp, #32]
 808ba24:	f7f9 ff98 	bl	8085958 <siscanf>
 808ba28:	4540      	cmp	r0, r8
 808ba2a:	f340 80fd 	ble.w	808bc28 <_tzset_unlocked_r+0x2c8>
 808ba2e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808ba32:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808ba36:	213c      	movs	r1, #60	; 0x3c
 808ba38:	fb01 3302 	mla	r3, r1, r2, r3
 808ba3c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808ba40:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808ba44:	fb01 3302 	mla	r3, r1, r2, r3
 808ba48:	435d      	muls	r5, r3
 808ba4a:	4b7f      	ldr	r3, [pc, #508]	; (808bc48 <_tzset_unlocked_r+0x2e8>)
 808ba4c:	6225      	str	r5, [r4, #32]
 808ba4e:	4d7d      	ldr	r5, [pc, #500]	; (808bc44 <_tzset_unlocked_r+0x2e4>)
 808ba50:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808bc5c <_tzset_unlocked_r+0x2fc>
 808ba54:	602b      	str	r3, [r5, #0]
 808ba56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ba58:	464a      	mov	r2, r9
 808ba5a:	441f      	add	r7, r3
 808ba5c:	497b      	ldr	r1, [pc, #492]	; (808bc4c <_tzset_unlocked_r+0x2ec>)
 808ba5e:	4633      	mov	r3, r6
 808ba60:	4638      	mov	r0, r7
 808ba62:	f7f9 ff79 	bl	8085958 <siscanf>
 808ba66:	4540      	cmp	r0, r8
 808ba68:	dc08      	bgt.n	808ba7c <_tzset_unlocked_r+0x11c>
 808ba6a:	682b      	ldr	r3, [r5, #0]
 808ba6c:	6a22      	ldr	r2, [r4, #32]
 808ba6e:	606b      	str	r3, [r5, #4]
 808ba70:	4b71      	ldr	r3, [pc, #452]	; (808bc38 <_tzset_unlocked_r+0x2d8>)
 808ba72:	601a      	str	r2, [r3, #0]
 808ba74:	4b72      	ldr	r3, [pc, #456]	; (808bc40 <_tzset_unlocked_r+0x2e0>)
 808ba76:	f8c3 8000 	str.w	r8, [r3]
 808ba7a:	e0d5      	b.n	808bc28 <_tzset_unlocked_r+0x2c8>
 808ba7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ba7e:	f8c5 9004 	str.w	r9, [r5, #4]
 808ba82:	18fd      	adds	r5, r7, r3
 808ba84:	5cfb      	ldrb	r3, [r7, r3]
 808ba86:	2b2d      	cmp	r3, #45	; 0x2d
 808ba88:	d103      	bne.n	808ba92 <_tzset_unlocked_r+0x132>
 808ba8a:	3501      	adds	r5, #1
 808ba8c:	f04f 37ff 	mov.w	r7, #4294967295
 808ba90:	e003      	b.n	808ba9a <_tzset_unlocked_r+0x13a>
 808ba92:	2b2b      	cmp	r3, #43	; 0x2b
 808ba94:	bf08      	it	eq
 808ba96:	3501      	addeq	r5, #1
 808ba98:	2701      	movs	r7, #1
 808ba9a:	2300      	movs	r3, #0
 808ba9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 808baa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 808baa4:	f8ad 3020 	strh.w	r3, [sp, #32]
 808baa8:	930a      	str	r3, [sp, #40]	; 0x28
 808baaa:	9603      	str	r6, [sp, #12]
 808baac:	f8cd a008 	str.w	sl, [sp, #8]
 808bab0:	9601      	str	r6, [sp, #4]
 808bab2:	f8cd b000 	str.w	fp, [sp]
 808bab6:	4633      	mov	r3, r6
 808bab8:	aa07      	add	r2, sp, #28
 808baba:	4965      	ldr	r1, [pc, #404]	; (808bc50 <_tzset_unlocked_r+0x2f0>)
 808babc:	4628      	mov	r0, r5
 808babe:	f7f9 ff4b 	bl	8085958 <siscanf>
 808bac2:	2800      	cmp	r0, #0
 808bac4:	dc04      	bgt.n	808bad0 <_tzset_unlocked_r+0x170>
 808bac6:	6a23      	ldr	r3, [r4, #32]
 808bac8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808bacc:	63e3      	str	r3, [r4, #60]	; 0x3c
 808bace:	e00e      	b.n	808baee <_tzset_unlocked_r+0x18e>
 808bad0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808bad4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808bad8:	213c      	movs	r1, #60	; 0x3c
 808bada:	fb01 3302 	mla	r3, r1, r2, r3
 808bade:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808bae2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808bae6:	fb01 3302 	mla	r3, r1, r2, r3
 808baea:	435f      	muls	r7, r3
 808baec:	63e7      	str	r7, [r4, #60]	; 0x3c
 808baee:	4627      	mov	r7, r4
 808baf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808baf2:	f04f 0900 	mov.w	r9, #0
 808baf6:	441d      	add	r5, r3
 808baf8:	782b      	ldrb	r3, [r5, #0]
 808bafa:	2b2c      	cmp	r3, #44	; 0x2c
 808bafc:	bf08      	it	eq
 808bafe:	3501      	addeq	r5, #1
 808bb00:	f895 8000 	ldrb.w	r8, [r5]
 808bb04:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808bb08:	d126      	bne.n	808bb58 <_tzset_unlocked_r+0x1f8>
 808bb0a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808bb0e:	9302      	str	r3, [sp, #8]
 808bb10:	ab09      	add	r3, sp, #36	; 0x24
 808bb12:	9300      	str	r3, [sp, #0]
 808bb14:	9603      	str	r6, [sp, #12]
 808bb16:	9601      	str	r6, [sp, #4]
 808bb18:	4633      	mov	r3, r6
 808bb1a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808bb1e:	494d      	ldr	r1, [pc, #308]	; (808bc54 <_tzset_unlocked_r+0x2f4>)
 808bb20:	4628      	mov	r0, r5
 808bb22:	f7f9 ff19 	bl	8085958 <siscanf>
 808bb26:	2803      	cmp	r0, #3
 808bb28:	d17e      	bne.n	808bc28 <_tzset_unlocked_r+0x2c8>
 808bb2a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808bb2e:	1e4b      	subs	r3, r1, #1
 808bb30:	2b0b      	cmp	r3, #11
 808bb32:	d879      	bhi.n	808bc28 <_tzset_unlocked_r+0x2c8>
 808bb34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808bb38:	1e53      	subs	r3, r2, #1
 808bb3a:	2b04      	cmp	r3, #4
 808bb3c:	d874      	bhi.n	808bc28 <_tzset_unlocked_r+0x2c8>
 808bb3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808bb42:	2b06      	cmp	r3, #6
 808bb44:	d870      	bhi.n	808bc28 <_tzset_unlocked_r+0x2c8>
 808bb46:	f887 8008 	strb.w	r8, [r7, #8]
 808bb4a:	60f9      	str	r1, [r7, #12]
 808bb4c:	613a      	str	r2, [r7, #16]
 808bb4e:	617b      	str	r3, [r7, #20]
 808bb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808bb52:	eb05 0803 	add.w	r8, r5, r3
 808bb56:	e02a      	b.n	808bbae <_tzset_unlocked_r+0x24e>
 808bb58:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808bb5c:	bf06      	itte	eq
 808bb5e:	4643      	moveq	r3, r8
 808bb60:	3501      	addeq	r5, #1
 808bb62:	2344      	movne	r3, #68	; 0x44
 808bb64:	220a      	movs	r2, #10
 808bb66:	a90b      	add	r1, sp, #44	; 0x2c
 808bb68:	4628      	mov	r0, r5
 808bb6a:	9305      	str	r3, [sp, #20]
 808bb6c:	f7ff fe2e 	bl	808b7cc <strtoul>
 808bb70:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808bb74:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808bb78:	4545      	cmp	r5, r8
 808bb7a:	9b05      	ldr	r3, [sp, #20]
 808bb7c:	d114      	bne.n	808bba8 <_tzset_unlocked_r+0x248>
 808bb7e:	234d      	movs	r3, #77	; 0x4d
 808bb80:	f1b9 0f00 	cmp.w	r9, #0
 808bb84:	d107      	bne.n	808bb96 <_tzset_unlocked_r+0x236>
 808bb86:	7223      	strb	r3, [r4, #8]
 808bb88:	2303      	movs	r3, #3
 808bb8a:	60e3      	str	r3, [r4, #12]
 808bb8c:	2302      	movs	r3, #2
 808bb8e:	6123      	str	r3, [r4, #16]
 808bb90:	f8c4 9014 	str.w	r9, [r4, #20]
 808bb94:	e00b      	b.n	808bbae <_tzset_unlocked_r+0x24e>
 808bb96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808bb9a:	230b      	movs	r3, #11
 808bb9c:	62a3      	str	r3, [r4, #40]	; 0x28
 808bb9e:	2301      	movs	r3, #1
 808bba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 808bba2:	2300      	movs	r3, #0
 808bba4:	6323      	str	r3, [r4, #48]	; 0x30
 808bba6:	e002      	b.n	808bbae <_tzset_unlocked_r+0x24e>
 808bba8:	b280      	uxth	r0, r0
 808bbaa:	723b      	strb	r3, [r7, #8]
 808bbac:	6178      	str	r0, [r7, #20]
 808bbae:	2302      	movs	r3, #2
 808bbb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 808bbb4:	2300      	movs	r3, #0
 808bbb6:	f8ad 301e 	strh.w	r3, [sp, #30]
 808bbba:	f8ad 3020 	strh.w	r3, [sp, #32]
 808bbbe:	930a      	str	r3, [sp, #40]	; 0x28
 808bbc0:	f898 3000 	ldrb.w	r3, [r8]
 808bbc4:	2b2f      	cmp	r3, #47	; 0x2f
 808bbc6:	d10b      	bne.n	808bbe0 <_tzset_unlocked_r+0x280>
 808bbc8:	9603      	str	r6, [sp, #12]
 808bbca:	f8cd a008 	str.w	sl, [sp, #8]
 808bbce:	9601      	str	r6, [sp, #4]
 808bbd0:	f8cd b000 	str.w	fp, [sp]
 808bbd4:	4633      	mov	r3, r6
 808bbd6:	aa07      	add	r2, sp, #28
 808bbd8:	491f      	ldr	r1, [pc, #124]	; (808bc58 <_tzset_unlocked_r+0x2f8>)
 808bbda:	4640      	mov	r0, r8
 808bbdc:	f7f9 febc 	bl	8085958 <siscanf>
 808bbe0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808bbe4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808bbe8:	213c      	movs	r1, #60	; 0x3c
 808bbea:	fb01 3302 	mla	r3, r1, r2, r3
 808bbee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808bbf2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808bbf6:	fb01 3302 	mla	r3, r1, r2, r3
 808bbfa:	61bb      	str	r3, [r7, #24]
 808bbfc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808bbfe:	f109 0901 	add.w	r9, r9, #1
 808bc02:	f1b9 0f02 	cmp.w	r9, #2
 808bc06:	4445      	add	r5, r8
 808bc08:	f107 071c 	add.w	r7, r7, #28
 808bc0c:	f47f af74 	bne.w	808baf8 <_tzset_unlocked_r+0x198>
 808bc10:	6860      	ldr	r0, [r4, #4]
 808bc12:	f7ff fdf5 	bl	808b800 <__tzcalc_limits>
 808bc16:	6a22      	ldr	r2, [r4, #32]
 808bc18:	4b07      	ldr	r3, [pc, #28]	; (808bc38 <_tzset_unlocked_r+0x2d8>)
 808bc1a:	601a      	str	r2, [r3, #0]
 808bc1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808bc1e:	1a9b      	subs	r3, r3, r2
 808bc20:	4a07      	ldr	r2, [pc, #28]	; (808bc40 <_tzset_unlocked_r+0x2e0>)
 808bc22:	bf18      	it	ne
 808bc24:	2301      	movne	r3, #1
 808bc26:	6013      	str	r3, [r2, #0]
 808bc28:	b00d      	add	sp, #52	; 0x34
 808bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bc2e:	bf00      	nop
 808bc30:	0808e1a4 	.word	0x0808e1a4
 808bc34:	200010a8 	.word	0x200010a8
 808bc38:	200010b0 	.word	0x200010b0
 808bc3c:	0808e1a7 	.word	0x0808e1a7
 808bc40:	200010ac 	.word	0x200010ac
 808bc44:	200000f4 	.word	0x200000f4
 808bc48:	2000109b 	.word	0x2000109b
 808bc4c:	0808e1ab 	.word	0x0808e1ab
 808bc50:	0808e1ce 	.word	0x0808e1ce
 808bc54:	0808e1ba 	.word	0x0808e1ba
 808bc58:	0808e1cd 	.word	0x0808e1cd
 808bc5c:	20001090 	.word	0x20001090

0808bc60 <abs>:
 808bc60:	2800      	cmp	r0, #0
 808bc62:	bfb8      	it	lt
 808bc64:	4240      	neglt	r0, r0
 808bc66:	4770      	bx	lr

0808bc68 <rshift>:
 808bc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bc6a:	6906      	ldr	r6, [r0, #16]
 808bc6c:	114b      	asrs	r3, r1, #5
 808bc6e:	42b3      	cmp	r3, r6
 808bc70:	f100 0514 	add.w	r5, r0, #20
 808bc74:	da27      	bge.n	808bcc6 <rshift+0x5e>
 808bc76:	f011 011f 	ands.w	r1, r1, #31
 808bc7a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808bc7e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808bc82:	d101      	bne.n	808bc88 <rshift+0x20>
 808bc84:	4629      	mov	r1, r5
 808bc86:	e016      	b.n	808bcb6 <rshift+0x4e>
 808bc88:	1d14      	adds	r4, r2, #4
 808bc8a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808bc8e:	462b      	mov	r3, r5
 808bc90:	f1c1 0e20 	rsb	lr, r1, #32
 808bc94:	40ca      	lsrs	r2, r1
 808bc96:	42b4      	cmp	r4, r6
 808bc98:	d209      	bcs.n	808bcae <rshift+0x46>
 808bc9a:	6827      	ldr	r7, [r4, #0]
 808bc9c:	fa07 f70e 	lsl.w	r7, r7, lr
 808bca0:	433a      	orrs	r2, r7
 808bca2:	f843 2b04 	str.w	r2, [r3], #4
 808bca6:	f854 2b04 	ldr.w	r2, [r4], #4
 808bcaa:	40ca      	lsrs	r2, r1
 808bcac:	e7f3      	b.n	808bc96 <rshift+0x2e>
 808bcae:	601a      	str	r2, [r3, #0]
 808bcb0:	b152      	cbz	r2, 808bcc8 <rshift+0x60>
 808bcb2:	3304      	adds	r3, #4
 808bcb4:	e008      	b.n	808bcc8 <rshift+0x60>
 808bcb6:	42b2      	cmp	r2, r6
 808bcb8:	460b      	mov	r3, r1
 808bcba:	d205      	bcs.n	808bcc8 <rshift+0x60>
 808bcbc:	f852 3b04 	ldr.w	r3, [r2], #4
 808bcc0:	f841 3b04 	str.w	r3, [r1], #4
 808bcc4:	e7f7      	b.n	808bcb6 <rshift+0x4e>
 808bcc6:	462b      	mov	r3, r5
 808bcc8:	1b5b      	subs	r3, r3, r5
 808bcca:	109b      	asrs	r3, r3, #2
 808bccc:	6103      	str	r3, [r0, #16]
 808bcce:	b903      	cbnz	r3, 808bcd2 <rshift+0x6a>
 808bcd0:	6143      	str	r3, [r0, #20]
 808bcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bcd4 <__hexdig_fun>:
 808bcd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808bcd8:	2b09      	cmp	r3, #9
 808bcda:	d801      	bhi.n	808bce0 <__hexdig_fun+0xc>
 808bcdc:	3820      	subs	r0, #32
 808bcde:	e00a      	b.n	808bcf6 <__hexdig_fun+0x22>
 808bce0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808bce4:	2b05      	cmp	r3, #5
 808bce6:	d801      	bhi.n	808bcec <__hexdig_fun+0x18>
 808bce8:	3847      	subs	r0, #71	; 0x47
 808bcea:	e004      	b.n	808bcf6 <__hexdig_fun+0x22>
 808bcec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808bcf0:	2b05      	cmp	r3, #5
 808bcf2:	d802      	bhi.n	808bcfa <__hexdig_fun+0x26>
 808bcf4:	3827      	subs	r0, #39	; 0x27
 808bcf6:	b2c0      	uxtb	r0, r0
 808bcf8:	4770      	bx	lr
 808bcfa:	2000      	movs	r0, #0
 808bcfc:	4770      	bx	lr

0808bcfe <__gethex>:
 808bcfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bd02:	b08b      	sub	sp, #44	; 0x2c
 808bd04:	468a      	mov	sl, r1
 808bd06:	4690      	mov	r8, r2
 808bd08:	9306      	str	r3, [sp, #24]
 808bd0a:	9002      	str	r0, [sp, #8]
 808bd0c:	f7fe f8ce 	bl	8089eac <_localeconv_r>
 808bd10:	6803      	ldr	r3, [r0, #0]
 808bd12:	f04f 0b00 	mov.w	fp, #0
 808bd16:	4618      	mov	r0, r3
 808bd18:	9303      	str	r3, [sp, #12]
 808bd1a:	f7fe fe65 	bl	808a9e8 <strlen>
 808bd1e:	9b03      	ldr	r3, [sp, #12]
 808bd20:	9001      	str	r0, [sp, #4]
 808bd22:	4403      	add	r3, r0
 808bd24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808bd28:	9307      	str	r3, [sp, #28]
 808bd2a:	f8da 3000 	ldr.w	r3, [sl]
 808bd2e:	3302      	adds	r3, #2
 808bd30:	461f      	mov	r7, r3
 808bd32:	f813 0b01 	ldrb.w	r0, [r3], #1
 808bd36:	2830      	cmp	r0, #48	; 0x30
 808bd38:	d102      	bne.n	808bd40 <__gethex+0x42>
 808bd3a:	f10b 0b01 	add.w	fp, fp, #1
 808bd3e:	e7f7      	b.n	808bd30 <__gethex+0x32>
 808bd40:	f7ff ffc8 	bl	808bcd4 <__hexdig_fun>
 808bd44:	4604      	mov	r4, r0
 808bd46:	b9e0      	cbnz	r0, 808bd82 <__gethex+0x84>
 808bd48:	9a01      	ldr	r2, [sp, #4]
 808bd4a:	9903      	ldr	r1, [sp, #12]
 808bd4c:	4638      	mov	r0, r7
 808bd4e:	f7fe fe53 	bl	808a9f8 <strncmp>
 808bd52:	2800      	cmp	r0, #0
 808bd54:	d134      	bne.n	808bdc0 <__gethex+0xc2>
 808bd56:	9b01      	ldr	r3, [sp, #4]
 808bd58:	5cf8      	ldrb	r0, [r7, r3]
 808bd5a:	18fe      	adds	r6, r7, r3
 808bd5c:	f7ff ffba 	bl	808bcd4 <__hexdig_fun>
 808bd60:	b380      	cbz	r0, 808bdc4 <__gethex+0xc6>
 808bd62:	4633      	mov	r3, r6
 808bd64:	7818      	ldrb	r0, [r3, #0]
 808bd66:	461f      	mov	r7, r3
 808bd68:	2830      	cmp	r0, #48	; 0x30
 808bd6a:	f103 0301 	add.w	r3, r3, #1
 808bd6e:	d0f9      	beq.n	808bd64 <__gethex+0x66>
 808bd70:	f7ff ffb0 	bl	808bcd4 <__hexdig_fun>
 808bd74:	fab0 f580 	clz	r5, r0
 808bd78:	4634      	mov	r4, r6
 808bd7a:	096d      	lsrs	r5, r5, #5
 808bd7c:	f04f 0b01 	mov.w	fp, #1
 808bd80:	e001      	b.n	808bd86 <__gethex+0x88>
 808bd82:	2500      	movs	r5, #0
 808bd84:	462c      	mov	r4, r5
 808bd86:	463a      	mov	r2, r7
 808bd88:	4616      	mov	r6, r2
 808bd8a:	7830      	ldrb	r0, [r6, #0]
 808bd8c:	3201      	adds	r2, #1
 808bd8e:	f7ff ffa1 	bl	808bcd4 <__hexdig_fun>
 808bd92:	2800      	cmp	r0, #0
 808bd94:	d1f8      	bne.n	808bd88 <__gethex+0x8a>
 808bd96:	9a01      	ldr	r2, [sp, #4]
 808bd98:	9903      	ldr	r1, [sp, #12]
 808bd9a:	4630      	mov	r0, r6
 808bd9c:	f7fe fe2c 	bl	808a9f8 <strncmp>
 808bda0:	b950      	cbnz	r0, 808bdb8 <__gethex+0xba>
 808bda2:	b954      	cbnz	r4, 808bdba <__gethex+0xbc>
 808bda4:	9b01      	ldr	r3, [sp, #4]
 808bda6:	18f4      	adds	r4, r6, r3
 808bda8:	4622      	mov	r2, r4
 808bdaa:	4616      	mov	r6, r2
 808bdac:	7830      	ldrb	r0, [r6, #0]
 808bdae:	3201      	adds	r2, #1
 808bdb0:	f7ff ff90 	bl	808bcd4 <__hexdig_fun>
 808bdb4:	2800      	cmp	r0, #0
 808bdb6:	d1f8      	bne.n	808bdaa <__gethex+0xac>
 808bdb8:	b134      	cbz	r4, 808bdc8 <__gethex+0xca>
 808bdba:	1ba4      	subs	r4, r4, r6
 808bdbc:	00a4      	lsls	r4, r4, #2
 808bdbe:	e003      	b.n	808bdc8 <__gethex+0xca>
 808bdc0:	463e      	mov	r6, r7
 808bdc2:	e000      	b.n	808bdc6 <__gethex+0xc8>
 808bdc4:	4604      	mov	r4, r0
 808bdc6:	2501      	movs	r5, #1
 808bdc8:	7833      	ldrb	r3, [r6, #0]
 808bdca:	2b50      	cmp	r3, #80	; 0x50
 808bdcc:	d001      	beq.n	808bdd2 <__gethex+0xd4>
 808bdce:	2b70      	cmp	r3, #112	; 0x70
 808bdd0:	d12a      	bne.n	808be28 <__gethex+0x12a>
 808bdd2:	7873      	ldrb	r3, [r6, #1]
 808bdd4:	2b2b      	cmp	r3, #43	; 0x2b
 808bdd6:	d008      	beq.n	808bdea <__gethex+0xec>
 808bdd8:	2b2d      	cmp	r3, #45	; 0x2d
 808bdda:	d003      	beq.n	808bde4 <__gethex+0xe6>
 808bddc:	1c71      	adds	r1, r6, #1
 808bdde:	f04f 0900 	mov.w	r9, #0
 808bde2:	e005      	b.n	808bdf0 <__gethex+0xf2>
 808bde4:	f04f 0901 	mov.w	r9, #1
 808bde8:	e001      	b.n	808bdee <__gethex+0xf0>
 808bdea:	f04f 0900 	mov.w	r9, #0
 808bdee:	1cb1      	adds	r1, r6, #2
 808bdf0:	7808      	ldrb	r0, [r1, #0]
 808bdf2:	f7ff ff6f 	bl	808bcd4 <__hexdig_fun>
 808bdf6:	1e43      	subs	r3, r0, #1
 808bdf8:	b2db      	uxtb	r3, r3
 808bdfa:	2b18      	cmp	r3, #24
 808bdfc:	d814      	bhi.n	808be28 <__gethex+0x12a>
 808bdfe:	f1a0 0210 	sub.w	r2, r0, #16
 808be02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808be06:	f7ff ff65 	bl	808bcd4 <__hexdig_fun>
 808be0a:	1e43      	subs	r3, r0, #1
 808be0c:	b2db      	uxtb	r3, r3
 808be0e:	2b18      	cmp	r3, #24
 808be10:	d804      	bhi.n	808be1c <__gethex+0x11e>
 808be12:	230a      	movs	r3, #10
 808be14:	fb03 0202 	mla	r2, r3, r2, r0
 808be18:	3a10      	subs	r2, #16
 808be1a:	e7f2      	b.n	808be02 <__gethex+0x104>
 808be1c:	f1b9 0f00 	cmp.w	r9, #0
 808be20:	d000      	beq.n	808be24 <__gethex+0x126>
 808be22:	4252      	negs	r2, r2
 808be24:	4414      	add	r4, r2
 808be26:	e000      	b.n	808be2a <__gethex+0x12c>
 808be28:	4631      	mov	r1, r6
 808be2a:	f8ca 1000 	str.w	r1, [sl]
 808be2e:	b12d      	cbz	r5, 808be3c <__gethex+0x13e>
 808be30:	f1bb 0f00 	cmp.w	fp, #0
 808be34:	bf14      	ite	ne
 808be36:	2000      	movne	r0, #0
 808be38:	2006      	moveq	r0, #6
 808be3a:	e17c      	b.n	808c136 <__gethex+0x438>
 808be3c:	4629      	mov	r1, r5
 808be3e:	1bf3      	subs	r3, r6, r7
 808be40:	3b01      	subs	r3, #1
 808be42:	2b07      	cmp	r3, #7
 808be44:	dd02      	ble.n	808be4c <__gethex+0x14e>
 808be46:	3101      	adds	r1, #1
 808be48:	105b      	asrs	r3, r3, #1
 808be4a:	e7fa      	b.n	808be42 <__gethex+0x144>
 808be4c:	9802      	ldr	r0, [sp, #8]
 808be4e:	f000 fb0b 	bl	808c468 <_Balloc>
 808be52:	f04f 0900 	mov.w	r9, #0
 808be56:	4605      	mov	r5, r0
 808be58:	46cb      	mov	fp, r9
 808be5a:	9b01      	ldr	r3, [sp, #4]
 808be5c:	f100 0a14 	add.w	sl, r0, #20
 808be60:	f1c3 0301 	rsb	r3, r3, #1
 808be64:	f8cd a010 	str.w	sl, [sp, #16]
 808be68:	9308      	str	r3, [sp, #32]
 808be6a:	42b7      	cmp	r7, r6
 808be6c:	d22f      	bcs.n	808bece <__gethex+0x1d0>
 808be6e:	1e73      	subs	r3, r6, #1
 808be70:	9305      	str	r3, [sp, #20]
 808be72:	9a07      	ldr	r2, [sp, #28]
 808be74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808be78:	4293      	cmp	r3, r2
 808be7a:	d00b      	beq.n	808be94 <__gethex+0x196>
 808be7c:	f1bb 0f20 	cmp.w	fp, #32
 808be80:	d116      	bne.n	808beb0 <__gethex+0x1b2>
 808be82:	9b04      	ldr	r3, [sp, #16]
 808be84:	f8c3 9000 	str.w	r9, [r3]
 808be88:	3304      	adds	r3, #4
 808be8a:	f04f 0900 	mov.w	r9, #0
 808be8e:	9304      	str	r3, [sp, #16]
 808be90:	46cb      	mov	fp, r9
 808be92:	e00d      	b.n	808beb0 <__gethex+0x1b2>
 808be94:	9b05      	ldr	r3, [sp, #20]
 808be96:	9a08      	ldr	r2, [sp, #32]
 808be98:	4413      	add	r3, r2
 808be9a:	429f      	cmp	r7, r3
 808be9c:	d8ee      	bhi.n	808be7c <__gethex+0x17e>
 808be9e:	4618      	mov	r0, r3
 808bea0:	9a01      	ldr	r2, [sp, #4]
 808bea2:	9903      	ldr	r1, [sp, #12]
 808bea4:	9309      	str	r3, [sp, #36]	; 0x24
 808bea6:	f7fe fda7 	bl	808a9f8 <strncmp>
 808beaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808beac:	b168      	cbz	r0, 808beca <__gethex+0x1cc>
 808beae:	e7e5      	b.n	808be7c <__gethex+0x17e>
 808beb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808beb4:	f7ff ff0e 	bl	808bcd4 <__hexdig_fun>
 808beb8:	f000 000f 	and.w	r0, r0, #15
 808bebc:	fa00 f00b 	lsl.w	r0, r0, fp
 808bec0:	9b05      	ldr	r3, [sp, #20]
 808bec2:	ea49 0900 	orr.w	r9, r9, r0
 808bec6:	f10b 0b04 	add.w	fp, fp, #4
 808beca:	461e      	mov	r6, r3
 808becc:	e7cd      	b.n	808be6a <__gethex+0x16c>
 808bece:	9804      	ldr	r0, [sp, #16]
 808bed0:	f840 9b04 	str.w	r9, [r0], #4
 808bed4:	ebca 0000 	rsb	r0, sl, r0
 808bed8:	1080      	asrs	r0, r0, #2
 808beda:	6128      	str	r0, [r5, #16]
 808bedc:	0147      	lsls	r7, r0, #5
 808bede:	4648      	mov	r0, r9
 808bee0:	f000 fb87 	bl	808c5f2 <__hi0bits>
 808bee4:	f8d8 6000 	ldr.w	r6, [r8]
 808bee8:	1a38      	subs	r0, r7, r0
 808beea:	42b0      	cmp	r0, r6
 808beec:	dd26      	ble.n	808bf3c <__gethex+0x23e>
 808beee:	1b87      	subs	r7, r0, r6
 808bef0:	4639      	mov	r1, r7
 808bef2:	4628      	mov	r0, r5
 808bef4:	f000 fe7f 	bl	808cbf6 <__any_on>
 808bef8:	b1c8      	cbz	r0, 808bf2e <__gethex+0x230>
 808befa:	1e7b      	subs	r3, r7, #1
 808befc:	1159      	asrs	r1, r3, #5
 808befe:	f003 021f 	and.w	r2, r3, #31
 808bf02:	f04f 0901 	mov.w	r9, #1
 808bf06:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808bf0a:	fa09 f202 	lsl.w	r2, r9, r2
 808bf0e:	420a      	tst	r2, r1
 808bf10:	d00e      	beq.n	808bf30 <__gethex+0x232>
 808bf12:	454b      	cmp	r3, r9
 808bf14:	dc02      	bgt.n	808bf1c <__gethex+0x21e>
 808bf16:	f04f 0902 	mov.w	r9, #2
 808bf1a:	e009      	b.n	808bf30 <__gethex+0x232>
 808bf1c:	1eb9      	subs	r1, r7, #2
 808bf1e:	4628      	mov	r0, r5
 808bf20:	f000 fe69 	bl	808cbf6 <__any_on>
 808bf24:	2800      	cmp	r0, #0
 808bf26:	d0f6      	beq.n	808bf16 <__gethex+0x218>
 808bf28:	f04f 0903 	mov.w	r9, #3
 808bf2c:	e000      	b.n	808bf30 <__gethex+0x232>
 808bf2e:	4681      	mov	r9, r0
 808bf30:	4639      	mov	r1, r7
 808bf32:	4628      	mov	r0, r5
 808bf34:	f7ff fe98 	bl	808bc68 <rshift>
 808bf38:	443c      	add	r4, r7
 808bf3a:	e00c      	b.n	808bf56 <__gethex+0x258>
 808bf3c:	da09      	bge.n	808bf52 <__gethex+0x254>
 808bf3e:	1a37      	subs	r7, r6, r0
 808bf40:	4629      	mov	r1, r5
 808bf42:	463a      	mov	r2, r7
 808bf44:	9802      	ldr	r0, [sp, #8]
 808bf46:	f000 fc89 	bl	808c85c <__lshift>
 808bf4a:	4605      	mov	r5, r0
 808bf4c:	1be4      	subs	r4, r4, r7
 808bf4e:	f100 0a14 	add.w	sl, r0, #20
 808bf52:	f04f 0900 	mov.w	r9, #0
 808bf56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808bf5a:	429c      	cmp	r4, r3
 808bf5c:	dd08      	ble.n	808bf70 <__gethex+0x272>
 808bf5e:	9802      	ldr	r0, [sp, #8]
 808bf60:	4629      	mov	r1, r5
 808bf62:	f000 fab6 	bl	808c4d2 <_Bfree>
 808bf66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808bf68:	2300      	movs	r3, #0
 808bf6a:	6013      	str	r3, [r2, #0]
 808bf6c:	20a3      	movs	r0, #163	; 0xa3
 808bf6e:	e0e2      	b.n	808c136 <__gethex+0x438>
 808bf70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808bf74:	4284      	cmp	r4, r0
 808bf76:	da53      	bge.n	808c020 <__gethex+0x322>
 808bf78:	1b04      	subs	r4, r0, r4
 808bf7a:	42a6      	cmp	r6, r4
 808bf7c:	dc2e      	bgt.n	808bfdc <__gethex+0x2de>
 808bf7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808bf82:	2b02      	cmp	r3, #2
 808bf84:	d01a      	beq.n	808bfbc <__gethex+0x2be>
 808bf86:	2b03      	cmp	r3, #3
 808bf88:	d01c      	beq.n	808bfc4 <__gethex+0x2c6>
 808bf8a:	2b01      	cmp	r3, #1
 808bf8c:	d11d      	bne.n	808bfca <__gethex+0x2cc>
 808bf8e:	42a6      	cmp	r6, r4
 808bf90:	d11b      	bne.n	808bfca <__gethex+0x2cc>
 808bf92:	2e01      	cmp	r6, #1
 808bf94:	dc0b      	bgt.n	808bfae <__gethex+0x2b0>
 808bf96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808bf9a:	9a06      	ldr	r2, [sp, #24]
 808bf9c:	2062      	movs	r0, #98	; 0x62
 808bf9e:	6013      	str	r3, [r2, #0]
 808bfa0:	2301      	movs	r3, #1
 808bfa2:	612b      	str	r3, [r5, #16]
 808bfa4:	f8ca 3000 	str.w	r3, [sl]
 808bfa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808bfaa:	601d      	str	r5, [r3, #0]
 808bfac:	e0c3      	b.n	808c136 <__gethex+0x438>
 808bfae:	1e71      	subs	r1, r6, #1
 808bfb0:	4628      	mov	r0, r5
 808bfb2:	f000 fe20 	bl	808cbf6 <__any_on>
 808bfb6:	2800      	cmp	r0, #0
 808bfb8:	d1ed      	bne.n	808bf96 <__gethex+0x298>
 808bfba:	e006      	b.n	808bfca <__gethex+0x2cc>
 808bfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bfbe:	2b00      	cmp	r3, #0
 808bfc0:	d0e9      	beq.n	808bf96 <__gethex+0x298>
 808bfc2:	e002      	b.n	808bfca <__gethex+0x2cc>
 808bfc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bfc6:	2b00      	cmp	r3, #0
 808bfc8:	d1e5      	bne.n	808bf96 <__gethex+0x298>
 808bfca:	9802      	ldr	r0, [sp, #8]
 808bfcc:	4629      	mov	r1, r5
 808bfce:	f000 fa80 	bl	808c4d2 <_Bfree>
 808bfd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808bfd4:	2300      	movs	r3, #0
 808bfd6:	6013      	str	r3, [r2, #0]
 808bfd8:	2050      	movs	r0, #80	; 0x50
 808bfda:	e0ac      	b.n	808c136 <__gethex+0x438>
 808bfdc:	1e67      	subs	r7, r4, #1
 808bfde:	f1b9 0f00 	cmp.w	r9, #0
 808bfe2:	d106      	bne.n	808bff2 <__gethex+0x2f4>
 808bfe4:	b13f      	cbz	r7, 808bff6 <__gethex+0x2f8>
 808bfe6:	4639      	mov	r1, r7
 808bfe8:	4628      	mov	r0, r5
 808bfea:	f000 fe04 	bl	808cbf6 <__any_on>
 808bfee:	4681      	mov	r9, r0
 808bff0:	e001      	b.n	808bff6 <__gethex+0x2f8>
 808bff2:	f04f 0901 	mov.w	r9, #1
 808bff6:	117a      	asrs	r2, r7, #5
 808bff8:	2301      	movs	r3, #1
 808bffa:	f007 071f 	and.w	r7, r7, #31
 808bffe:	fa03 f707 	lsl.w	r7, r3, r7
 808c002:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808c006:	4621      	mov	r1, r4
 808c008:	421f      	tst	r7, r3
 808c00a:	4628      	mov	r0, r5
 808c00c:	bf18      	it	ne
 808c00e:	f049 0902 	orrne.w	r9, r9, #2
 808c012:	1b36      	subs	r6, r6, r4
 808c014:	f7ff fe28 	bl	808bc68 <rshift>
 808c018:	2702      	movs	r7, #2
 808c01a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808c01e:	e000      	b.n	808c022 <__gethex+0x324>
 808c020:	2701      	movs	r7, #1
 808c022:	f1b9 0f00 	cmp.w	r9, #0
 808c026:	f000 8081 	beq.w	808c12c <__gethex+0x42e>
 808c02a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808c02e:	2b02      	cmp	r3, #2
 808c030:	d00e      	beq.n	808c050 <__gethex+0x352>
 808c032:	2b03      	cmp	r3, #3
 808c034:	d010      	beq.n	808c058 <__gethex+0x35a>
 808c036:	2b01      	cmp	r3, #1
 808c038:	d176      	bne.n	808c128 <__gethex+0x42a>
 808c03a:	f019 0f02 	tst.w	r9, #2
 808c03e:	d073      	beq.n	808c128 <__gethex+0x42a>
 808c040:	f8da 0000 	ldr.w	r0, [sl]
 808c044:	ea49 0900 	orr.w	r9, r9, r0
 808c048:	f019 0f01 	tst.w	r9, #1
 808c04c:	d107      	bne.n	808c05e <__gethex+0x360>
 808c04e:	e06b      	b.n	808c128 <__gethex+0x42a>
 808c050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c052:	f1c3 0301 	rsb	r3, r3, #1
 808c056:	9315      	str	r3, [sp, #84]	; 0x54
 808c058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c05a:	2b00      	cmp	r3, #0
 808c05c:	d064      	beq.n	808c128 <__gethex+0x42a>
 808c05e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808c062:	f105 0314 	add.w	r3, r5, #20
 808c066:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808c06a:	eb03 0109 	add.w	r1, r3, r9
 808c06e:	2000      	movs	r0, #0
 808c070:	681a      	ldr	r2, [r3, #0]
 808c072:	f1b2 3fff 	cmp.w	r2, #4294967295
 808c076:	d002      	beq.n	808c07e <__gethex+0x380>
 808c078:	3201      	adds	r2, #1
 808c07a:	601a      	str	r2, [r3, #0]
 808c07c:	e020      	b.n	808c0c0 <__gethex+0x3c2>
 808c07e:	f843 0b04 	str.w	r0, [r3], #4
 808c082:	4299      	cmp	r1, r3
 808c084:	d8f4      	bhi.n	808c070 <__gethex+0x372>
 808c086:	68ab      	ldr	r3, [r5, #8]
 808c088:	459a      	cmp	sl, r3
 808c08a:	db12      	blt.n	808c0b2 <__gethex+0x3b4>
 808c08c:	6869      	ldr	r1, [r5, #4]
 808c08e:	9802      	ldr	r0, [sp, #8]
 808c090:	3101      	adds	r1, #1
 808c092:	f000 f9e9 	bl	808c468 <_Balloc>
 808c096:	4683      	mov	fp, r0
 808c098:	692a      	ldr	r2, [r5, #16]
 808c09a:	f105 010c 	add.w	r1, r5, #12
 808c09e:	3202      	adds	r2, #2
 808c0a0:	0092      	lsls	r2, r2, #2
 808c0a2:	300c      	adds	r0, #12
 808c0a4:	f7fd ff15 	bl	8089ed2 <memcpy>
 808c0a8:	4629      	mov	r1, r5
 808c0aa:	9802      	ldr	r0, [sp, #8]
 808c0ac:	f000 fa11 	bl	808c4d2 <_Bfree>
 808c0b0:	465d      	mov	r5, fp
 808c0b2:	692b      	ldr	r3, [r5, #16]
 808c0b4:	1c5a      	adds	r2, r3, #1
 808c0b6:	612a      	str	r2, [r5, #16]
 808c0b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808c0bc:	2201      	movs	r2, #1
 808c0be:	615a      	str	r2, [r3, #20]
 808c0c0:	2f02      	cmp	r7, #2
 808c0c2:	f105 0214 	add.w	r2, r5, #20
 808c0c6:	d111      	bne.n	808c0ec <__gethex+0x3ee>
 808c0c8:	f8d8 3000 	ldr.w	r3, [r8]
 808c0cc:	3b01      	subs	r3, #1
 808c0ce:	429e      	cmp	r6, r3
 808c0d0:	d127      	bne.n	808c122 <__gethex+0x424>
 808c0d2:	1171      	asrs	r1, r6, #5
 808c0d4:	2301      	movs	r3, #1
 808c0d6:	f006 061f 	and.w	r6, r6, #31
 808c0da:	fa03 f606 	lsl.w	r6, r3, r6
 808c0de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808c0e2:	421e      	tst	r6, r3
 808c0e4:	bf0c      	ite	eq
 808c0e6:	2702      	moveq	r7, #2
 808c0e8:	2701      	movne	r7, #1
 808c0ea:	e01a      	b.n	808c122 <__gethex+0x424>
 808c0ec:	692b      	ldr	r3, [r5, #16]
 808c0ee:	459a      	cmp	sl, r3
 808c0f0:	da0a      	bge.n	808c108 <__gethex+0x40a>
 808c0f2:	2101      	movs	r1, #1
 808c0f4:	4628      	mov	r0, r5
 808c0f6:	f7ff fdb7 	bl	808bc68 <rshift>
 808c0fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c0fe:	3401      	adds	r4, #1
 808c100:	429c      	cmp	r4, r3
 808c102:	f73f af2c 	bgt.w	808bf5e <__gethex+0x260>
 808c106:	e00b      	b.n	808c120 <__gethex+0x422>
 808c108:	f016 061f 	ands.w	r6, r6, #31
 808c10c:	d008      	beq.n	808c120 <__gethex+0x422>
 808c10e:	4491      	add	r9, r2
 808c110:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808c114:	f000 fa6d 	bl	808c5f2 <__hi0bits>
 808c118:	f1c6 0620 	rsb	r6, r6, #32
 808c11c:	42b0      	cmp	r0, r6
 808c11e:	dbe8      	blt.n	808c0f2 <__gethex+0x3f4>
 808c120:	2701      	movs	r7, #1
 808c122:	f047 0720 	orr.w	r7, r7, #32
 808c126:	e001      	b.n	808c12c <__gethex+0x42e>
 808c128:	f047 0710 	orr.w	r7, r7, #16
 808c12c:	4638      	mov	r0, r7
 808c12e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c130:	601d      	str	r5, [r3, #0]
 808c132:	9b06      	ldr	r3, [sp, #24]
 808c134:	601c      	str	r4, [r3, #0]
 808c136:	b00b      	add	sp, #44	; 0x2c
 808c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c13c <L_shift>:
 808c13c:	f1c2 0208 	rsb	r2, r2, #8
 808c140:	0092      	lsls	r2, r2, #2
 808c142:	b570      	push	{r4, r5, r6, lr}
 808c144:	f1c2 0620 	rsb	r6, r2, #32
 808c148:	6843      	ldr	r3, [r0, #4]
 808c14a:	6805      	ldr	r5, [r0, #0]
 808c14c:	fa03 f406 	lsl.w	r4, r3, r6
 808c150:	432c      	orrs	r4, r5
 808c152:	40d3      	lsrs	r3, r2
 808c154:	6004      	str	r4, [r0, #0]
 808c156:	f840 3f04 	str.w	r3, [r0, #4]!
 808c15a:	4288      	cmp	r0, r1
 808c15c:	d3f4      	bcc.n	808c148 <L_shift+0xc>
 808c15e:	bd70      	pop	{r4, r5, r6, pc}

0808c160 <__match>:
 808c160:	b530      	push	{r4, r5, lr}
 808c162:	6803      	ldr	r3, [r0, #0]
 808c164:	f811 4b01 	ldrb.w	r4, [r1], #1
 808c168:	3301      	adds	r3, #1
 808c16a:	b14c      	cbz	r4, 808c180 <__match+0x20>
 808c16c:	781a      	ldrb	r2, [r3, #0]
 808c16e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808c172:	2d19      	cmp	r5, #25
 808c174:	bf98      	it	ls
 808c176:	3220      	addls	r2, #32
 808c178:	42a2      	cmp	r2, r4
 808c17a:	d0f3      	beq.n	808c164 <__match+0x4>
 808c17c:	2000      	movs	r0, #0
 808c17e:	bd30      	pop	{r4, r5, pc}
 808c180:	6003      	str	r3, [r0, #0]
 808c182:	2001      	movs	r0, #1
 808c184:	bd30      	pop	{r4, r5, pc}

0808c186 <__hexnan>:
 808c186:	680b      	ldr	r3, [r1, #0]
 808c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c18c:	115e      	asrs	r6, r3, #5
 808c18e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808c192:	f013 031f 	ands.w	r3, r3, #31
 808c196:	bf18      	it	ne
 808c198:	3604      	addne	r6, #4
 808c19a:	1f35      	subs	r5, r6, #4
 808c19c:	4617      	mov	r7, r2
 808c19e:	2200      	movs	r2, #0
 808c1a0:	4682      	mov	sl, r0
 808c1a2:	46a8      	mov	r8, r5
 808c1a4:	462c      	mov	r4, r5
 808c1a6:	4691      	mov	r9, r2
 808c1a8:	b085      	sub	sp, #20
 808c1aa:	f8d0 b000 	ldr.w	fp, [r0]
 808c1ae:	9301      	str	r3, [sp, #4]
 808c1b0:	f846 2c04 	str.w	r2, [r6, #-4]
 808c1b4:	9200      	str	r2, [sp, #0]
 808c1b6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808c1ba:	2900      	cmp	r1, #0
 808c1bc:	d03c      	beq.n	808c238 <__hexnan+0xb2>
 808c1be:	4608      	mov	r0, r1
 808c1c0:	9203      	str	r2, [sp, #12]
 808c1c2:	9102      	str	r1, [sp, #8]
 808c1c4:	f7ff fd86 	bl	808bcd4 <__hexdig_fun>
 808c1c8:	9a03      	ldr	r2, [sp, #12]
 808c1ca:	bb00      	cbnz	r0, 808c20e <__hexnan+0x88>
 808c1cc:	9902      	ldr	r1, [sp, #8]
 808c1ce:	2920      	cmp	r1, #32
 808c1d0:	d816      	bhi.n	808c200 <__hexnan+0x7a>
 808c1d2:	9b00      	ldr	r3, [sp, #0]
 808c1d4:	4599      	cmp	r9, r3
 808c1d6:	ddee      	ble.n	808c1b6 <__hexnan+0x30>
 808c1d8:	4544      	cmp	r4, r8
 808c1da:	d205      	bcs.n	808c1e8 <__hexnan+0x62>
 808c1dc:	2a07      	cmp	r2, #7
 808c1de:	dc03      	bgt.n	808c1e8 <__hexnan+0x62>
 808c1e0:	4641      	mov	r1, r8
 808c1e2:	4620      	mov	r0, r4
 808c1e4:	f7ff ffaa 	bl	808c13c <L_shift>
 808c1e8:	42bc      	cmp	r4, r7
 808c1ea:	d923      	bls.n	808c234 <__hexnan+0xae>
 808c1ec:	2300      	movs	r3, #0
 808c1ee:	f1a4 0804 	sub.w	r8, r4, #4
 808c1f2:	f844 3c04 	str.w	r3, [r4, #-4]
 808c1f6:	f8cd 9000 	str.w	r9, [sp]
 808c1fa:	4644      	mov	r4, r8
 808c1fc:	461a      	mov	r2, r3
 808c1fe:	e7da      	b.n	808c1b6 <__hexnan+0x30>
 808c200:	2929      	cmp	r1, #41	; 0x29
 808c202:	d148      	bne.n	808c296 <__hexnan+0x110>
 808c204:	f10b 0301 	add.w	r3, fp, #1
 808c208:	f8ca 3000 	str.w	r3, [sl]
 808c20c:	e014      	b.n	808c238 <__hexnan+0xb2>
 808c20e:	3201      	adds	r2, #1
 808c210:	2a08      	cmp	r2, #8
 808c212:	f109 0901 	add.w	r9, r9, #1
 808c216:	dd06      	ble.n	808c226 <__hexnan+0xa0>
 808c218:	42bc      	cmp	r4, r7
 808c21a:	d9cc      	bls.n	808c1b6 <__hexnan+0x30>
 808c21c:	2300      	movs	r3, #0
 808c21e:	f844 3c04 	str.w	r3, [r4, #-4]
 808c222:	2201      	movs	r2, #1
 808c224:	3c04      	subs	r4, #4
 808c226:	6821      	ldr	r1, [r4, #0]
 808c228:	f000 000f 	and.w	r0, r0, #15
 808c22c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808c230:	6020      	str	r0, [r4, #0]
 808c232:	e7c0      	b.n	808c1b6 <__hexnan+0x30>
 808c234:	2208      	movs	r2, #8
 808c236:	e7be      	b.n	808c1b6 <__hexnan+0x30>
 808c238:	f1b9 0f00 	cmp.w	r9, #0
 808c23c:	d02b      	beq.n	808c296 <__hexnan+0x110>
 808c23e:	4544      	cmp	r4, r8
 808c240:	d205      	bcs.n	808c24e <__hexnan+0xc8>
 808c242:	2a07      	cmp	r2, #7
 808c244:	dc03      	bgt.n	808c24e <__hexnan+0xc8>
 808c246:	4641      	mov	r1, r8
 808c248:	4620      	mov	r0, r4
 808c24a:	f7ff ff77 	bl	808c13c <L_shift>
 808c24e:	42bc      	cmp	r4, r7
 808c250:	d90c      	bls.n	808c26c <__hexnan+0xe6>
 808c252:	463b      	mov	r3, r7
 808c254:	f854 2b04 	ldr.w	r2, [r4], #4
 808c258:	42a5      	cmp	r5, r4
 808c25a:	f843 2b04 	str.w	r2, [r3], #4
 808c25e:	d2f9      	bcs.n	808c254 <__hexnan+0xce>
 808c260:	2200      	movs	r2, #0
 808c262:	f843 2b04 	str.w	r2, [r3], #4
 808c266:	429d      	cmp	r5, r3
 808c268:	d2fb      	bcs.n	808c262 <__hexnan+0xdc>
 808c26a:	e00b      	b.n	808c284 <__hexnan+0xfe>
 808c26c:	9b01      	ldr	r3, [sp, #4]
 808c26e:	b14b      	cbz	r3, 808c284 <__hexnan+0xfe>
 808c270:	f1c3 0220 	rsb	r2, r3, #32
 808c274:	f04f 33ff 	mov.w	r3, #4294967295
 808c278:	40d3      	lsrs	r3, r2
 808c27a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808c27e:	4013      	ands	r3, r2
 808c280:	f846 3c04 	str.w	r3, [r6, #-4]
 808c284:	682b      	ldr	r3, [r5, #0]
 808c286:	b943      	cbnz	r3, 808c29a <__hexnan+0x114>
 808c288:	42bd      	cmp	r5, r7
 808c28a:	d102      	bne.n	808c292 <__hexnan+0x10c>
 808c28c:	2301      	movs	r3, #1
 808c28e:	602b      	str	r3, [r5, #0]
 808c290:	e003      	b.n	808c29a <__hexnan+0x114>
 808c292:	3d04      	subs	r5, #4
 808c294:	e7f6      	b.n	808c284 <__hexnan+0xfe>
 808c296:	2004      	movs	r0, #4
 808c298:	e000      	b.n	808c29c <__hexnan+0x116>
 808c29a:	2005      	movs	r0, #5
 808c29c:	b005      	add	sp, #20
 808c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808c2a4 <_findenv_r>:
 808c2a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c2a8:	4607      	mov	r7, r0
 808c2aa:	468b      	mov	fp, r1
 808c2ac:	4690      	mov	r8, r2
 808c2ae:	f000 fcd2 	bl	808cc56 <__env_lock>
 808c2b2:	4b19      	ldr	r3, [pc, #100]	; (808c318 <_findenv_r+0x74>)
 808c2b4:	681d      	ldr	r5, [r3, #0]
 808c2b6:	469a      	mov	sl, r3
 808c2b8:	b13d      	cbz	r5, 808c2ca <_findenv_r+0x26>
 808c2ba:	465c      	mov	r4, fp
 808c2bc:	4623      	mov	r3, r4
 808c2be:	f813 2b01 	ldrb.w	r2, [r3], #1
 808c2c2:	b142      	cbz	r2, 808c2d6 <_findenv_r+0x32>
 808c2c4:	2a3d      	cmp	r2, #61	; 0x3d
 808c2c6:	461c      	mov	r4, r3
 808c2c8:	d1f8      	bne.n	808c2bc <_findenv_r+0x18>
 808c2ca:	4638      	mov	r0, r7
 808c2cc:	f000 fcc4 	bl	808cc58 <__env_unlock>
 808c2d0:	2000      	movs	r0, #0
 808c2d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c2d6:	ebcb 0404 	rsb	r4, fp, r4
 808c2da:	46a9      	mov	r9, r5
 808c2dc:	f859 0b04 	ldr.w	r0, [r9], #4
 808c2e0:	2800      	cmp	r0, #0
 808c2e2:	d0f2      	beq.n	808c2ca <_findenv_r+0x26>
 808c2e4:	4622      	mov	r2, r4
 808c2e6:	4659      	mov	r1, fp
 808c2e8:	f7fe fb86 	bl	808a9f8 <strncmp>
 808c2ec:	b988      	cbnz	r0, 808c312 <_findenv_r+0x6e>
 808c2ee:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808c2f2:	191e      	adds	r6, r3, r4
 808c2f4:	5d1b      	ldrb	r3, [r3, r4]
 808c2f6:	2b3d      	cmp	r3, #61	; 0x3d
 808c2f8:	d10b      	bne.n	808c312 <_findenv_r+0x6e>
 808c2fa:	f8da 3000 	ldr.w	r3, [sl]
 808c2fe:	4638      	mov	r0, r7
 808c300:	1aed      	subs	r5, r5, r3
 808c302:	10ad      	asrs	r5, r5, #2
 808c304:	f8c8 5000 	str.w	r5, [r8]
 808c308:	f000 fca6 	bl	808cc58 <__env_unlock>
 808c30c:	1c70      	adds	r0, r6, #1
 808c30e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c312:	464d      	mov	r5, r9
 808c314:	e7e1      	b.n	808c2da <_findenv_r+0x36>
 808c316:	bf00      	nop
 808c318:	2000013c 	.word	0x2000013c

0808c31c <_getenv_r>:
 808c31c:	b507      	push	{r0, r1, r2, lr}
 808c31e:	aa01      	add	r2, sp, #4
 808c320:	f7ff ffc0 	bl	808c2a4 <_findenv_r>
 808c324:	b003      	add	sp, #12
 808c326:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c32c <__gettzinfo>:
 808c32c:	4800      	ldr	r0, [pc, #0]	; (808c330 <__gettzinfo+0x4>)
 808c32e:	4770      	bx	lr
 808c330:	200000fc 	.word	0x200000fc

0808c334 <gmtime_r>:
 808c334:	6802      	ldr	r2, [r0, #0]
 808c336:	4b46      	ldr	r3, [pc, #280]	; (808c450 <gmtime_r+0x11c>)
 808c338:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c33a:	fb92 f4f3 	sdiv	r4, r2, r3
 808c33e:	fb03 2214 	mls	r2, r3, r4, r2
 808c342:	2a00      	cmp	r2, #0
 808c344:	bfbc      	itt	lt
 808c346:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808c34a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808c34e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808c352:	fb92 f3f0 	sdiv	r3, r2, r0
 808c356:	fb00 2213 	mls	r2, r0, r3, r2
 808c35a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808c35e:	608b      	str	r3, [r1, #8]
 808c360:	fb92 f3f0 	sdiv	r3, r2, r0
 808c364:	fb00 2213 	mls	r2, r0, r3, r2
 808c368:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808c36c:	bfac      	ite	ge
 808c36e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808c372:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808c376:	604b      	str	r3, [r1, #4]
 808c378:	600a      	str	r2, [r1, #0]
 808c37a:	2307      	movs	r3, #7
 808c37c:	1ce2      	adds	r2, r4, #3
 808c37e:	fb92 f3f3 	sdiv	r3, r2, r3
 808c382:	4d34      	ldr	r5, [pc, #208]	; (808c454 <gmtime_r+0x120>)
 808c384:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808c388:	fb94 f5f5 	sdiv	r5, r4, r5
 808c38c:	1ad3      	subs	r3, r2, r3
 808c38e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808c392:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808c396:	618b      	str	r3, [r1, #24]
 808c398:	4b2f      	ldr	r3, [pc, #188]	; (808c458 <gmtime_r+0x124>)
 808c39a:	4830      	ldr	r0, [pc, #192]	; (808c45c <gmtime_r+0x128>)
 808c39c:	fb03 4405 	mla	r4, r3, r5, r4
 808c3a0:	fbb4 f2f2 	udiv	r2, r4, r2
 808c3a4:	fbb4 f3f7 	udiv	r3, r4, r7
 808c3a8:	fbb4 f0f0 	udiv	r0, r4, r0
 808c3ac:	4422      	add	r2, r4
 808c3ae:	1ad2      	subs	r2, r2, r3
 808c3b0:	f648 6694 	movw	r6, #36500	; 0x8e94
 808c3b4:	1a13      	subs	r3, r2, r0
 808c3b6:	f240 126d 	movw	r2, #365	; 0x16d
 808c3ba:	fbb3 f6f6 	udiv	r6, r3, r6
 808c3be:	fbb3 f0f2 	udiv	r0, r3, r2
 808c3c2:	fbb3 f3f7 	udiv	r3, r3, r7
 808c3c6:	4434      	add	r4, r6
 808c3c8:	1ae3      	subs	r3, r4, r3
 808c3ca:	fb02 3310 	mls	r3, r2, r0, r3
 808c3ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808c3d2:	2499      	movs	r4, #153	; 0x99
 808c3d4:	3202      	adds	r2, #2
 808c3d6:	fbb2 f2f4 	udiv	r2, r2, r4
 808c3da:	4354      	muls	r4, r2
 808c3dc:	1ca6      	adds	r6, r4, #2
 808c3de:	2405      	movs	r4, #5
 808c3e0:	fbb6 f4f4 	udiv	r4, r6, r4
 808c3e4:	2a0a      	cmp	r2, #10
 808c3e6:	bf34      	ite	cc
 808c3e8:	2602      	movcc	r6, #2
 808c3ea:	f06f 0609 	mvncs.w	r6, #9
 808c3ee:	4416      	add	r6, r2
 808c3f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c3f4:	fb02 0505 	mla	r5, r2, r5, r0
 808c3f8:	1c5f      	adds	r7, r3, #1
 808c3fa:	2e01      	cmp	r6, #1
 808c3fc:	bf98      	it	ls
 808c3fe:	3501      	addls	r5, #1
 808c400:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808c404:	eba7 0704 	sub.w	r7, r7, r4
 808c408:	d302      	bcc.n	808c410 <gmtime_r+0xdc>
 808c40a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808c40e:	e014      	b.n	808c43a <gmtime_r+0x106>
 808c410:	0782      	lsls	r2, r0, #30
 808c412:	d105      	bne.n	808c420 <gmtime_r+0xec>
 808c414:	2464      	movs	r4, #100	; 0x64
 808c416:	fbb0 f2f4 	udiv	r2, r0, r4
 808c41a:	fb04 0212 	mls	r2, r4, r2, r0
 808c41e:	b94a      	cbnz	r2, 808c434 <gmtime_r+0x100>
 808c420:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c424:	fbb0 f4f2 	udiv	r4, r0, r2
 808c428:	fb02 0014 	mls	r0, r2, r4, r0
 808c42c:	fab0 f280 	clz	r2, r0
 808c430:	0952      	lsrs	r2, r2, #5
 808c432:	e000      	b.n	808c436 <gmtime_r+0x102>
 808c434:	2201      	movs	r2, #1
 808c436:	333b      	adds	r3, #59	; 0x3b
 808c438:	441a      	add	r2, r3
 808c43a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808c43e:	2300      	movs	r3, #0
 808c440:	61ca      	str	r2, [r1, #28]
 808c442:	614d      	str	r5, [r1, #20]
 808c444:	610e      	str	r6, [r1, #16]
 808c446:	60cf      	str	r7, [r1, #12]
 808c448:	620b      	str	r3, [r1, #32]
 808c44a:	4608      	mov	r0, r1
 808c44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c44e:	bf00      	nop
 808c450:	00015180 	.word	0x00015180
 808c454:	00023ab1 	.word	0x00023ab1
 808c458:	fffdc54f 	.word	0xfffdc54f
 808c45c:	00023ab0 	.word	0x00023ab0

0808c460 <labs>:
 808c460:	2800      	cmp	r0, #0
 808c462:	bfb8      	it	lt
 808c464:	4240      	neglt	r0, r0
 808c466:	4770      	bx	lr

0808c468 <_Balloc>:
 808c468:	b570      	push	{r4, r5, r6, lr}
 808c46a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808c46c:	4604      	mov	r4, r0
 808c46e:	460e      	mov	r6, r1
 808c470:	b93d      	cbnz	r5, 808c482 <_Balloc+0x1a>
 808c472:	2010      	movs	r0, #16
 808c474:	f7f9 fa48 	bl	8085908 <malloc>
 808c478:	6260      	str	r0, [r4, #36]	; 0x24
 808c47a:	6045      	str	r5, [r0, #4]
 808c47c:	6085      	str	r5, [r0, #8]
 808c47e:	6005      	str	r5, [r0, #0]
 808c480:	60c5      	str	r5, [r0, #12]
 808c482:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808c484:	68eb      	ldr	r3, [r5, #12]
 808c486:	b143      	cbz	r3, 808c49a <_Balloc+0x32>
 808c488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808c48a:	68db      	ldr	r3, [r3, #12]
 808c48c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808c490:	b178      	cbz	r0, 808c4b2 <_Balloc+0x4a>
 808c492:	6802      	ldr	r2, [r0, #0]
 808c494:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808c498:	e017      	b.n	808c4ca <_Balloc+0x62>
 808c49a:	2221      	movs	r2, #33	; 0x21
 808c49c:	2104      	movs	r1, #4
 808c49e:	4620      	mov	r0, r4
 808c4a0:	f000 fbcb 	bl	808cc3a <_calloc_r>
 808c4a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808c4a6:	60e8      	str	r0, [r5, #12]
 808c4a8:	68db      	ldr	r3, [r3, #12]
 808c4aa:	2b00      	cmp	r3, #0
 808c4ac:	d1ec      	bne.n	808c488 <_Balloc+0x20>
 808c4ae:	2000      	movs	r0, #0
 808c4b0:	bd70      	pop	{r4, r5, r6, pc}
 808c4b2:	2101      	movs	r1, #1
 808c4b4:	fa01 f506 	lsl.w	r5, r1, r6
 808c4b8:	1d6a      	adds	r2, r5, #5
 808c4ba:	0092      	lsls	r2, r2, #2
 808c4bc:	4620      	mov	r0, r4
 808c4be:	f000 fbbc 	bl	808cc3a <_calloc_r>
 808c4c2:	2800      	cmp	r0, #0
 808c4c4:	d0f3      	beq.n	808c4ae <_Balloc+0x46>
 808c4c6:	6046      	str	r6, [r0, #4]
 808c4c8:	6085      	str	r5, [r0, #8]
 808c4ca:	2300      	movs	r3, #0
 808c4cc:	6103      	str	r3, [r0, #16]
 808c4ce:	60c3      	str	r3, [r0, #12]
 808c4d0:	bd70      	pop	{r4, r5, r6, pc}

0808c4d2 <_Bfree>:
 808c4d2:	b570      	push	{r4, r5, r6, lr}
 808c4d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808c4d6:	4606      	mov	r6, r0
 808c4d8:	460d      	mov	r5, r1
 808c4da:	b93c      	cbnz	r4, 808c4ec <_Bfree+0x1a>
 808c4dc:	2010      	movs	r0, #16
 808c4de:	f7f9 fa13 	bl	8085908 <malloc>
 808c4e2:	6270      	str	r0, [r6, #36]	; 0x24
 808c4e4:	6044      	str	r4, [r0, #4]
 808c4e6:	6084      	str	r4, [r0, #8]
 808c4e8:	6004      	str	r4, [r0, #0]
 808c4ea:	60c4      	str	r4, [r0, #12]
 808c4ec:	b13d      	cbz	r5, 808c4fe <_Bfree+0x2c>
 808c4ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808c4f0:	686a      	ldr	r2, [r5, #4]
 808c4f2:	68db      	ldr	r3, [r3, #12]
 808c4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808c4f8:	6029      	str	r1, [r5, #0]
 808c4fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808c4fe:	bd70      	pop	{r4, r5, r6, pc}

0808c500 <__multadd>:
 808c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c504:	4606      	mov	r6, r0
 808c506:	460c      	mov	r4, r1
 808c508:	690d      	ldr	r5, [r1, #16]
 808c50a:	461f      	mov	r7, r3
 808c50c:	f101 0e14 	add.w	lr, r1, #20
 808c510:	2300      	movs	r3, #0
 808c512:	f8de 0000 	ldr.w	r0, [lr]
 808c516:	3301      	adds	r3, #1
 808c518:	b281      	uxth	r1, r0
 808c51a:	fb02 7101 	mla	r1, r2, r1, r7
 808c51e:	0c00      	lsrs	r0, r0, #16
 808c520:	0c0f      	lsrs	r7, r1, #16
 808c522:	fb02 7000 	mla	r0, r2, r0, r7
 808c526:	b289      	uxth	r1, r1
 808c528:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808c52c:	429d      	cmp	r5, r3
 808c52e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808c532:	f84e 1b04 	str.w	r1, [lr], #4
 808c536:	dcec      	bgt.n	808c512 <__multadd+0x12>
 808c538:	b1d7      	cbz	r7, 808c570 <__multadd+0x70>
 808c53a:	68a3      	ldr	r3, [r4, #8]
 808c53c:	429d      	cmp	r5, r3
 808c53e:	db12      	blt.n	808c566 <__multadd+0x66>
 808c540:	6861      	ldr	r1, [r4, #4]
 808c542:	4630      	mov	r0, r6
 808c544:	3101      	adds	r1, #1
 808c546:	f7ff ff8f 	bl	808c468 <_Balloc>
 808c54a:	4680      	mov	r8, r0
 808c54c:	6922      	ldr	r2, [r4, #16]
 808c54e:	f104 010c 	add.w	r1, r4, #12
 808c552:	3202      	adds	r2, #2
 808c554:	0092      	lsls	r2, r2, #2
 808c556:	300c      	adds	r0, #12
 808c558:	f7fd fcbb 	bl	8089ed2 <memcpy>
 808c55c:	4621      	mov	r1, r4
 808c55e:	4630      	mov	r0, r6
 808c560:	f7ff ffb7 	bl	808c4d2 <_Bfree>
 808c564:	4644      	mov	r4, r8
 808c566:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808c56a:	3501      	adds	r5, #1
 808c56c:	615f      	str	r7, [r3, #20]
 808c56e:	6125      	str	r5, [r4, #16]
 808c570:	4620      	mov	r0, r4
 808c572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c576 <__s2b>:
 808c576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c57a:	4606      	mov	r6, r0
 808c57c:	4615      	mov	r5, r2
 808c57e:	461f      	mov	r7, r3
 808c580:	2209      	movs	r2, #9
 808c582:	3308      	adds	r3, #8
 808c584:	460c      	mov	r4, r1
 808c586:	fb93 f3f2 	sdiv	r3, r3, r2
 808c58a:	2100      	movs	r1, #0
 808c58c:	2201      	movs	r2, #1
 808c58e:	429a      	cmp	r2, r3
 808c590:	da02      	bge.n	808c598 <__s2b+0x22>
 808c592:	0052      	lsls	r2, r2, #1
 808c594:	3101      	adds	r1, #1
 808c596:	e7fa      	b.n	808c58e <__s2b+0x18>
 808c598:	4630      	mov	r0, r6
 808c59a:	f7ff ff65 	bl	808c468 <_Balloc>
 808c59e:	9b08      	ldr	r3, [sp, #32]
 808c5a0:	2d09      	cmp	r5, #9
 808c5a2:	6143      	str	r3, [r0, #20]
 808c5a4:	f04f 0301 	mov.w	r3, #1
 808c5a8:	6103      	str	r3, [r0, #16]
 808c5aa:	dd11      	ble.n	808c5d0 <__s2b+0x5a>
 808c5ac:	f104 0809 	add.w	r8, r4, #9
 808c5b0:	46c1      	mov	r9, r8
 808c5b2:	442c      	add	r4, r5
 808c5b4:	f819 3b01 	ldrb.w	r3, [r9], #1
 808c5b8:	4601      	mov	r1, r0
 808c5ba:	3b30      	subs	r3, #48	; 0x30
 808c5bc:	220a      	movs	r2, #10
 808c5be:	4630      	mov	r0, r6
 808c5c0:	f7ff ff9e 	bl	808c500 <__multadd>
 808c5c4:	45a1      	cmp	r9, r4
 808c5c6:	d1f5      	bne.n	808c5b4 <__s2b+0x3e>
 808c5c8:	eb08 0405 	add.w	r4, r8, r5
 808c5cc:	3c08      	subs	r4, #8
 808c5ce:	e001      	b.n	808c5d4 <__s2b+0x5e>
 808c5d0:	340a      	adds	r4, #10
 808c5d2:	2509      	movs	r5, #9
 808c5d4:	1b2d      	subs	r5, r5, r4
 808c5d6:	1963      	adds	r3, r4, r5
 808c5d8:	429f      	cmp	r7, r3
 808c5da:	dd08      	ble.n	808c5ee <__s2b+0x78>
 808c5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 808c5e0:	4601      	mov	r1, r0
 808c5e2:	3b30      	subs	r3, #48	; 0x30
 808c5e4:	220a      	movs	r2, #10
 808c5e6:	4630      	mov	r0, r6
 808c5e8:	f7ff ff8a 	bl	808c500 <__multadd>
 808c5ec:	e7f3      	b.n	808c5d6 <__s2b+0x60>
 808c5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808c5f2 <__hi0bits>:
 808c5f2:	0c03      	lsrs	r3, r0, #16
 808c5f4:	041b      	lsls	r3, r3, #16
 808c5f6:	b913      	cbnz	r3, 808c5fe <__hi0bits+0xc>
 808c5f8:	0400      	lsls	r0, r0, #16
 808c5fa:	2310      	movs	r3, #16
 808c5fc:	e000      	b.n	808c600 <__hi0bits+0xe>
 808c5fe:	2300      	movs	r3, #0
 808c600:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808c604:	bf04      	itt	eq
 808c606:	0200      	lsleq	r0, r0, #8
 808c608:	3308      	addeq	r3, #8
 808c60a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808c60e:	bf04      	itt	eq
 808c610:	0100      	lsleq	r0, r0, #4
 808c612:	3304      	addeq	r3, #4
 808c614:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808c618:	bf04      	itt	eq
 808c61a:	0080      	lsleq	r0, r0, #2
 808c61c:	3302      	addeq	r3, #2
 808c61e:	2800      	cmp	r0, #0
 808c620:	db03      	blt.n	808c62a <__hi0bits+0x38>
 808c622:	0042      	lsls	r2, r0, #1
 808c624:	d503      	bpl.n	808c62e <__hi0bits+0x3c>
 808c626:	1c58      	adds	r0, r3, #1
 808c628:	4770      	bx	lr
 808c62a:	4618      	mov	r0, r3
 808c62c:	4770      	bx	lr
 808c62e:	2020      	movs	r0, #32
 808c630:	4770      	bx	lr

0808c632 <__lo0bits>:
 808c632:	6803      	ldr	r3, [r0, #0]
 808c634:	f013 0207 	ands.w	r2, r3, #7
 808c638:	d00b      	beq.n	808c652 <__lo0bits+0x20>
 808c63a:	07d9      	lsls	r1, r3, #31
 808c63c:	d422      	bmi.n	808c684 <__lo0bits+0x52>
 808c63e:	079a      	lsls	r2, r3, #30
 808c640:	bf4b      	itete	mi
 808c642:	085b      	lsrmi	r3, r3, #1
 808c644:	089b      	lsrpl	r3, r3, #2
 808c646:	6003      	strmi	r3, [r0, #0]
 808c648:	6003      	strpl	r3, [r0, #0]
 808c64a:	bf4c      	ite	mi
 808c64c:	2001      	movmi	r0, #1
 808c64e:	2002      	movpl	r0, #2
 808c650:	4770      	bx	lr
 808c652:	b299      	uxth	r1, r3
 808c654:	b909      	cbnz	r1, 808c65a <__lo0bits+0x28>
 808c656:	0c1b      	lsrs	r3, r3, #16
 808c658:	2210      	movs	r2, #16
 808c65a:	f013 0fff 	tst.w	r3, #255	; 0xff
 808c65e:	bf04      	itt	eq
 808c660:	0a1b      	lsreq	r3, r3, #8
 808c662:	3208      	addeq	r2, #8
 808c664:	0719      	lsls	r1, r3, #28
 808c666:	bf04      	itt	eq
 808c668:	091b      	lsreq	r3, r3, #4
 808c66a:	3204      	addeq	r2, #4
 808c66c:	0799      	lsls	r1, r3, #30
 808c66e:	bf04      	itt	eq
 808c670:	089b      	lsreq	r3, r3, #2
 808c672:	3202      	addeq	r2, #2
 808c674:	07d9      	lsls	r1, r3, #31
 808c676:	d402      	bmi.n	808c67e <__lo0bits+0x4c>
 808c678:	085b      	lsrs	r3, r3, #1
 808c67a:	d005      	beq.n	808c688 <__lo0bits+0x56>
 808c67c:	3201      	adds	r2, #1
 808c67e:	6003      	str	r3, [r0, #0]
 808c680:	4610      	mov	r0, r2
 808c682:	4770      	bx	lr
 808c684:	2000      	movs	r0, #0
 808c686:	4770      	bx	lr
 808c688:	2020      	movs	r0, #32
 808c68a:	4770      	bx	lr

0808c68c <__i2b>:
 808c68c:	b510      	push	{r4, lr}
 808c68e:	460c      	mov	r4, r1
 808c690:	2101      	movs	r1, #1
 808c692:	f7ff fee9 	bl	808c468 <_Balloc>
 808c696:	2201      	movs	r2, #1
 808c698:	6144      	str	r4, [r0, #20]
 808c69a:	6102      	str	r2, [r0, #16]
 808c69c:	bd10      	pop	{r4, pc}

0808c69e <__multiply>:
 808c69e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c6a2:	4614      	mov	r4, r2
 808c6a4:	690a      	ldr	r2, [r1, #16]
 808c6a6:	6923      	ldr	r3, [r4, #16]
 808c6a8:	4688      	mov	r8, r1
 808c6aa:	429a      	cmp	r2, r3
 808c6ac:	bfbe      	ittt	lt
 808c6ae:	460b      	movlt	r3, r1
 808c6b0:	46a0      	movlt	r8, r4
 808c6b2:	461c      	movlt	r4, r3
 808c6b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808c6b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808c6bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c6c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808c6c4:	eb07 0609 	add.w	r6, r7, r9
 808c6c8:	429e      	cmp	r6, r3
 808c6ca:	bfc8      	it	gt
 808c6cc:	3101      	addgt	r1, #1
 808c6ce:	f7ff fecb 	bl	808c468 <_Balloc>
 808c6d2:	f100 0514 	add.w	r5, r0, #20
 808c6d6:	462b      	mov	r3, r5
 808c6d8:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808c6dc:	2200      	movs	r2, #0
 808c6de:	4563      	cmp	r3, ip
 808c6e0:	d202      	bcs.n	808c6e8 <__multiply+0x4a>
 808c6e2:	f843 2b04 	str.w	r2, [r3], #4
 808c6e6:	e7fa      	b.n	808c6de <__multiply+0x40>
 808c6e8:	f104 0214 	add.w	r2, r4, #20
 808c6ec:	f108 0114 	add.w	r1, r8, #20
 808c6f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808c6f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808c6f8:	9300      	str	r3, [sp, #0]
 808c6fa:	9b00      	ldr	r3, [sp, #0]
 808c6fc:	9201      	str	r2, [sp, #4]
 808c6fe:	4293      	cmp	r3, r2
 808c700:	d957      	bls.n	808c7b2 <__multiply+0x114>
 808c702:	f8b2 b000 	ldrh.w	fp, [r2]
 808c706:	f1bb 0f00 	cmp.w	fp, #0
 808c70a:	d023      	beq.n	808c754 <__multiply+0xb6>
 808c70c:	4689      	mov	r9, r1
 808c70e:	46ae      	mov	lr, r5
 808c710:	f04f 0800 	mov.w	r8, #0
 808c714:	f859 4b04 	ldr.w	r4, [r9], #4
 808c718:	f8be a000 	ldrh.w	sl, [lr]
 808c71c:	b2a3      	uxth	r3, r4
 808c71e:	fb0b a303 	mla	r3, fp, r3, sl
 808c722:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808c726:	f8de 4000 	ldr.w	r4, [lr]
 808c72a:	4443      	add	r3, r8
 808c72c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808c730:	fb0b 840a 	mla	r4, fp, sl, r8
 808c734:	46f2      	mov	sl, lr
 808c736:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808c73a:	b29b      	uxth	r3, r3
 808c73c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808c740:	454f      	cmp	r7, r9
 808c742:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808c746:	f84a 3b04 	str.w	r3, [sl], #4
 808c74a:	d901      	bls.n	808c750 <__multiply+0xb2>
 808c74c:	46d6      	mov	lr, sl
 808c74e:	e7e1      	b.n	808c714 <__multiply+0x76>
 808c750:	f8ce 8004 	str.w	r8, [lr, #4]
 808c754:	9b01      	ldr	r3, [sp, #4]
 808c756:	3204      	adds	r2, #4
 808c758:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808c75c:	f1ba 0f00 	cmp.w	sl, #0
 808c760:	d021      	beq.n	808c7a6 <__multiply+0x108>
 808c762:	462c      	mov	r4, r5
 808c764:	4689      	mov	r9, r1
 808c766:	682b      	ldr	r3, [r5, #0]
 808c768:	f04f 0800 	mov.w	r8, #0
 808c76c:	f8b9 e000 	ldrh.w	lr, [r9]
 808c770:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808c774:	b29b      	uxth	r3, r3
 808c776:	fb0a be0e 	mla	lr, sl, lr, fp
 808c77a:	46a3      	mov	fp, r4
 808c77c:	44f0      	add	r8, lr
 808c77e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808c782:	f84b 3b04 	str.w	r3, [fp], #4
 808c786:	f859 3b04 	ldr.w	r3, [r9], #4
 808c78a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808c78e:	0c1b      	lsrs	r3, r3, #16
 808c790:	fb0a e303 	mla	r3, sl, r3, lr
 808c794:	454f      	cmp	r7, r9
 808c796:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808c79a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808c79e:	d901      	bls.n	808c7a4 <__multiply+0x106>
 808c7a0:	465c      	mov	r4, fp
 808c7a2:	e7e3      	b.n	808c76c <__multiply+0xce>
 808c7a4:	6063      	str	r3, [r4, #4]
 808c7a6:	3504      	adds	r5, #4
 808c7a8:	e7a7      	b.n	808c6fa <__multiply+0x5c>
 808c7aa:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808c7ae:	b913      	cbnz	r3, 808c7b6 <__multiply+0x118>
 808c7b0:	3e01      	subs	r6, #1
 808c7b2:	2e00      	cmp	r6, #0
 808c7b4:	dcf9      	bgt.n	808c7aa <__multiply+0x10c>
 808c7b6:	6106      	str	r6, [r0, #16]
 808c7b8:	b003      	add	sp, #12
 808c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808c7c0 <__pow5mult>:
 808c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c7c4:	4615      	mov	r5, r2
 808c7c6:	f012 0203 	ands.w	r2, r2, #3
 808c7ca:	4606      	mov	r6, r0
 808c7cc:	460f      	mov	r7, r1
 808c7ce:	d007      	beq.n	808c7e0 <__pow5mult+0x20>
 808c7d0:	4c21      	ldr	r4, [pc, #132]	; (808c858 <__pow5mult+0x98>)
 808c7d2:	3a01      	subs	r2, #1
 808c7d4:	2300      	movs	r3, #0
 808c7d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808c7da:	f7ff fe91 	bl	808c500 <__multadd>
 808c7de:	4607      	mov	r7, r0
 808c7e0:	10ad      	asrs	r5, r5, #2
 808c7e2:	d036      	beq.n	808c852 <__pow5mult+0x92>
 808c7e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808c7e6:	b93c      	cbnz	r4, 808c7f8 <__pow5mult+0x38>
 808c7e8:	2010      	movs	r0, #16
 808c7ea:	f7f9 f88d 	bl	8085908 <malloc>
 808c7ee:	6270      	str	r0, [r6, #36]	; 0x24
 808c7f0:	6044      	str	r4, [r0, #4]
 808c7f2:	6084      	str	r4, [r0, #8]
 808c7f4:	6004      	str	r4, [r0, #0]
 808c7f6:	60c4      	str	r4, [r0, #12]
 808c7f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808c7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808c800:	b94c      	cbnz	r4, 808c816 <__pow5mult+0x56>
 808c802:	f240 2171 	movw	r1, #625	; 0x271
 808c806:	4630      	mov	r0, r6
 808c808:	f7ff ff40 	bl	808c68c <__i2b>
 808c80c:	4604      	mov	r4, r0
 808c80e:	2300      	movs	r3, #0
 808c810:	f8c8 0008 	str.w	r0, [r8, #8]
 808c814:	6003      	str	r3, [r0, #0]
 808c816:	f04f 0800 	mov.w	r8, #0
 808c81a:	07eb      	lsls	r3, r5, #31
 808c81c:	d50a      	bpl.n	808c834 <__pow5mult+0x74>
 808c81e:	4639      	mov	r1, r7
 808c820:	4622      	mov	r2, r4
 808c822:	4630      	mov	r0, r6
 808c824:	f7ff ff3b 	bl	808c69e <__multiply>
 808c828:	4681      	mov	r9, r0
 808c82a:	4639      	mov	r1, r7
 808c82c:	4630      	mov	r0, r6
 808c82e:	f7ff fe50 	bl	808c4d2 <_Bfree>
 808c832:	464f      	mov	r7, r9
 808c834:	106d      	asrs	r5, r5, #1
 808c836:	d00c      	beq.n	808c852 <__pow5mult+0x92>
 808c838:	6820      	ldr	r0, [r4, #0]
 808c83a:	b108      	cbz	r0, 808c840 <__pow5mult+0x80>
 808c83c:	4604      	mov	r4, r0
 808c83e:	e7ec      	b.n	808c81a <__pow5mult+0x5a>
 808c840:	4622      	mov	r2, r4
 808c842:	4621      	mov	r1, r4
 808c844:	4630      	mov	r0, r6
 808c846:	f7ff ff2a 	bl	808c69e <__multiply>
 808c84a:	6020      	str	r0, [r4, #0]
 808c84c:	f8c0 8000 	str.w	r8, [r0]
 808c850:	e7f4      	b.n	808c83c <__pow5mult+0x7c>
 808c852:	4638      	mov	r0, r7
 808c854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c858:	0808e2d0 	.word	0x0808e2d0

0808c85c <__lshift>:
 808c85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c860:	460c      	mov	r4, r1
 808c862:	4607      	mov	r7, r0
 808c864:	4691      	mov	r9, r2
 808c866:	6926      	ldr	r6, [r4, #16]
 808c868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808c86c:	4456      	add	r6, sl
 808c86e:	6849      	ldr	r1, [r1, #4]
 808c870:	68a3      	ldr	r3, [r4, #8]
 808c872:	1c75      	adds	r5, r6, #1
 808c874:	42ab      	cmp	r3, r5
 808c876:	da02      	bge.n	808c87e <__lshift+0x22>
 808c878:	3101      	adds	r1, #1
 808c87a:	005b      	lsls	r3, r3, #1
 808c87c:	e7fa      	b.n	808c874 <__lshift+0x18>
 808c87e:	4638      	mov	r0, r7
 808c880:	f7ff fdf2 	bl	808c468 <_Balloc>
 808c884:	2300      	movs	r3, #0
 808c886:	4680      	mov	r8, r0
 808c888:	461a      	mov	r2, r3
 808c88a:	f100 0114 	add.w	r1, r0, #20
 808c88e:	4553      	cmp	r3, sl
 808c890:	da03      	bge.n	808c89a <__lshift+0x3e>
 808c892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808c896:	3301      	adds	r3, #1
 808c898:	e7f9      	b.n	808c88e <__lshift+0x32>
 808c89a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808c89e:	6920      	ldr	r0, [r4, #16]
 808c8a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808c8a4:	f019 091f 	ands.w	r9, r9, #31
 808c8a8:	f104 0114 	add.w	r1, r4, #20
 808c8ac:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808c8b0:	d014      	beq.n	808c8dc <__lshift+0x80>
 808c8b2:	f1c9 0c20 	rsb	ip, r9, #32
 808c8b6:	2200      	movs	r2, #0
 808c8b8:	6808      	ldr	r0, [r1, #0]
 808c8ba:	469a      	mov	sl, r3
 808c8bc:	fa00 f009 	lsl.w	r0, r0, r9
 808c8c0:	4302      	orrs	r2, r0
 808c8c2:	f843 2b04 	str.w	r2, [r3], #4
 808c8c6:	f851 2b04 	ldr.w	r2, [r1], #4
 808c8ca:	458e      	cmp	lr, r1
 808c8cc:	fa22 f20c 	lsr.w	r2, r2, ip
 808c8d0:	d8f2      	bhi.n	808c8b8 <__lshift+0x5c>
 808c8d2:	f8ca 2004 	str.w	r2, [sl, #4]
 808c8d6:	b142      	cbz	r2, 808c8ea <__lshift+0x8e>
 808c8d8:	1cb5      	adds	r5, r6, #2
 808c8da:	e006      	b.n	808c8ea <__lshift+0x8e>
 808c8dc:	3b04      	subs	r3, #4
 808c8de:	f851 2b04 	ldr.w	r2, [r1], #4
 808c8e2:	458e      	cmp	lr, r1
 808c8e4:	f843 2f04 	str.w	r2, [r3, #4]!
 808c8e8:	d8f9      	bhi.n	808c8de <__lshift+0x82>
 808c8ea:	3d01      	subs	r5, #1
 808c8ec:	4638      	mov	r0, r7
 808c8ee:	f8c8 5010 	str.w	r5, [r8, #16]
 808c8f2:	4621      	mov	r1, r4
 808c8f4:	f7ff fded 	bl	808c4d2 <_Bfree>
 808c8f8:	4640      	mov	r0, r8
 808c8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808c8fe <__mcmp>:
 808c8fe:	6903      	ldr	r3, [r0, #16]
 808c900:	690a      	ldr	r2, [r1, #16]
 808c902:	b510      	push	{r4, lr}
 808c904:	1a9b      	subs	r3, r3, r2
 808c906:	d111      	bne.n	808c92c <__mcmp+0x2e>
 808c908:	0092      	lsls	r2, r2, #2
 808c90a:	3014      	adds	r0, #20
 808c90c:	3114      	adds	r1, #20
 808c90e:	1883      	adds	r3, r0, r2
 808c910:	440a      	add	r2, r1
 808c912:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808c916:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808c91a:	428c      	cmp	r4, r1
 808c91c:	d002      	beq.n	808c924 <__mcmp+0x26>
 808c91e:	d307      	bcc.n	808c930 <__mcmp+0x32>
 808c920:	2001      	movs	r0, #1
 808c922:	bd10      	pop	{r4, pc}
 808c924:	4298      	cmp	r0, r3
 808c926:	d3f4      	bcc.n	808c912 <__mcmp+0x14>
 808c928:	2000      	movs	r0, #0
 808c92a:	bd10      	pop	{r4, pc}
 808c92c:	4618      	mov	r0, r3
 808c92e:	bd10      	pop	{r4, pc}
 808c930:	f04f 30ff 	mov.w	r0, #4294967295
 808c934:	bd10      	pop	{r4, pc}

0808c936 <__mdiff>:
 808c936:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c93a:	460c      	mov	r4, r1
 808c93c:	4607      	mov	r7, r0
 808c93e:	4611      	mov	r1, r2
 808c940:	4620      	mov	r0, r4
 808c942:	4615      	mov	r5, r2
 808c944:	f7ff ffdb 	bl	808c8fe <__mcmp>
 808c948:	1e06      	subs	r6, r0, #0
 808c94a:	d108      	bne.n	808c95e <__mdiff+0x28>
 808c94c:	4631      	mov	r1, r6
 808c94e:	4638      	mov	r0, r7
 808c950:	f7ff fd8a 	bl	808c468 <_Balloc>
 808c954:	2301      	movs	r3, #1
 808c956:	6103      	str	r3, [r0, #16]
 808c958:	6146      	str	r6, [r0, #20]
 808c95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c95e:	bfbc      	itt	lt
 808c960:	4623      	movlt	r3, r4
 808c962:	462c      	movlt	r4, r5
 808c964:	4638      	mov	r0, r7
 808c966:	6861      	ldr	r1, [r4, #4]
 808c968:	bfba      	itte	lt
 808c96a:	461d      	movlt	r5, r3
 808c96c:	2601      	movlt	r6, #1
 808c96e:	2600      	movge	r6, #0
 808c970:	f7ff fd7a 	bl	808c468 <_Balloc>
 808c974:	692b      	ldr	r3, [r5, #16]
 808c976:	60c6      	str	r6, [r0, #12]
 808c978:	6926      	ldr	r6, [r4, #16]
 808c97a:	f105 0914 	add.w	r9, r5, #20
 808c97e:	f104 0114 	add.w	r1, r4, #20
 808c982:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808c986:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808c98a:	f100 0514 	add.w	r5, r0, #20
 808c98e:	f04f 0c00 	mov.w	ip, #0
 808c992:	f851 2b04 	ldr.w	r2, [r1], #4
 808c996:	f859 4b04 	ldr.w	r4, [r9], #4
 808c99a:	b293      	uxth	r3, r2
 808c99c:	449c      	add	ip, r3
 808c99e:	b2a3      	uxth	r3, r4
 808c9a0:	0c24      	lsrs	r4, r4, #16
 808c9a2:	ebc3 030c 	rsb	r3, r3, ip
 808c9a6:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808c9aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808c9ae:	b29b      	uxth	r3, r3
 808c9b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808c9b4:	45c8      	cmp	r8, r9
 808c9b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808c9ba:	468e      	mov	lr, r1
 808c9bc:	f845 2b04 	str.w	r2, [r5], #4
 808c9c0:	d8e7      	bhi.n	808c992 <__mdiff+0x5c>
 808c9c2:	45be      	cmp	lr, r7
 808c9c4:	d20e      	bcs.n	808c9e4 <__mdiff+0xae>
 808c9c6:	f85e 1b04 	ldr.w	r1, [lr], #4
 808c9ca:	b28a      	uxth	r2, r1
 808c9cc:	4462      	add	r2, ip
 808c9ce:	1413      	asrs	r3, r2, #16
 808c9d0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808c9d4:	b292      	uxth	r2, r2
 808c9d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808c9da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808c9de:	f845 2b04 	str.w	r2, [r5], #4
 808c9e2:	e7ee      	b.n	808c9c2 <__mdiff+0x8c>
 808c9e4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808c9e8:	b90b      	cbnz	r3, 808c9ee <__mdiff+0xb8>
 808c9ea:	3e01      	subs	r6, #1
 808c9ec:	e7fa      	b.n	808c9e4 <__mdiff+0xae>
 808c9ee:	6106      	str	r6, [r0, #16]
 808c9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808c9f4 <__ulp>:
 808c9f4:	4b10      	ldr	r3, [pc, #64]	; (808ca38 <__ulp+0x44>)
 808c9f6:	400b      	ands	r3, r1
 808c9f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808c9fc:	2b00      	cmp	r3, #0
 808c9fe:	dd02      	ble.n	808ca06 <__ulp+0x12>
 808ca00:	2000      	movs	r0, #0
 808ca02:	4619      	mov	r1, r3
 808ca04:	4770      	bx	lr
 808ca06:	425b      	negs	r3, r3
 808ca08:	151b      	asrs	r3, r3, #20
 808ca0a:	2b13      	cmp	r3, #19
 808ca0c:	f04f 0000 	mov.w	r0, #0
 808ca10:	f04f 0100 	mov.w	r1, #0
 808ca14:	dc04      	bgt.n	808ca20 <__ulp+0x2c>
 808ca16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808ca1a:	fa42 f103 	asr.w	r1, r2, r3
 808ca1e:	4770      	bx	lr
 808ca20:	3b14      	subs	r3, #20
 808ca22:	2b1e      	cmp	r3, #30
 808ca24:	f04f 0201 	mov.w	r2, #1
 808ca28:	bfce      	itee	gt
 808ca2a:	4613      	movgt	r3, r2
 808ca2c:	f1c3 031f 	rsble	r3, r3, #31
 808ca30:	fa02 f303 	lslle.w	r3, r2, r3
 808ca34:	4618      	mov	r0, r3
 808ca36:	4770      	bx	lr
 808ca38:	7ff00000 	.word	0x7ff00000

0808ca3c <__b2d>:
 808ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ca3e:	6905      	ldr	r5, [r0, #16]
 808ca40:	f100 0614 	add.w	r6, r0, #20
 808ca44:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808ca48:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808ca4c:	1f2f      	subs	r7, r5, #4
 808ca4e:	4620      	mov	r0, r4
 808ca50:	f7ff fdcf 	bl	808c5f2 <__hi0bits>
 808ca54:	f1c0 0320 	rsb	r3, r0, #32
 808ca58:	280a      	cmp	r0, #10
 808ca5a:	600b      	str	r3, [r1, #0]
 808ca5c:	dc14      	bgt.n	808ca88 <__b2d+0x4c>
 808ca5e:	f1c0 0e0b 	rsb	lr, r0, #11
 808ca62:	fa24 f10e 	lsr.w	r1, r4, lr
 808ca66:	42be      	cmp	r6, r7
 808ca68:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808ca6c:	bf34      	ite	cc
 808ca6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ca72:	2100      	movcs	r1, #0
 808ca74:	3015      	adds	r0, #21
 808ca76:	fa04 f000 	lsl.w	r0, r4, r0
 808ca7a:	fa21 f10e 	lsr.w	r1, r1, lr
 808ca7e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808ca82:	ea40 0201 	orr.w	r2, r0, r1
 808ca86:	e023      	b.n	808cad0 <__b2d+0x94>
 808ca88:	42be      	cmp	r6, r7
 808ca8a:	bf3a      	itte	cc
 808ca8c:	f1a5 0708 	subcc.w	r7, r5, #8
 808ca90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ca94:	2100      	movcs	r1, #0
 808ca96:	380b      	subs	r0, #11
 808ca98:	d015      	beq.n	808cac6 <__b2d+0x8a>
 808ca9a:	4084      	lsls	r4, r0
 808ca9c:	f1c0 0520 	rsb	r5, r0, #32
 808caa0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808caa4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808caa8:	42b7      	cmp	r7, r6
 808caaa:	fa21 fe05 	lsr.w	lr, r1, r5
 808caae:	ea44 030e 	orr.w	r3, r4, lr
 808cab2:	bf8c      	ite	hi
 808cab4:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808cab8:	2400      	movls	r4, #0
 808caba:	fa01 f000 	lsl.w	r0, r1, r0
 808cabe:	40ec      	lsrs	r4, r5
 808cac0:	ea40 0204 	orr.w	r2, r0, r4
 808cac4:	e004      	b.n	808cad0 <__b2d+0x94>
 808cac6:	460a      	mov	r2, r1
 808cac8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808cacc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808cad0:	4610      	mov	r0, r2
 808cad2:	4619      	mov	r1, r3
 808cad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808cad6 <__d2b>:
 808cad6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808cada:	461c      	mov	r4, r3
 808cadc:	2101      	movs	r1, #1
 808cade:	4690      	mov	r8, r2
 808cae0:	9e08      	ldr	r6, [sp, #32]
 808cae2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808cae4:	f7ff fcc0 	bl	808c468 <_Balloc>
 808cae8:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808caec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808caf0:	4607      	mov	r7, r0
 808caf2:	b10c      	cbz	r4, 808caf8 <__d2b+0x22>
 808caf4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808caf8:	9201      	str	r2, [sp, #4]
 808cafa:	f1b8 0f00 	cmp.w	r8, #0
 808cafe:	d019      	beq.n	808cb34 <__d2b+0x5e>
 808cb00:	a802      	add	r0, sp, #8
 808cb02:	f840 8d08 	str.w	r8, [r0, #-8]!
 808cb06:	f7ff fd94 	bl	808c632 <__lo0bits>
 808cb0a:	9b00      	ldr	r3, [sp, #0]
 808cb0c:	b148      	cbz	r0, 808cb22 <__d2b+0x4c>
 808cb0e:	9a01      	ldr	r2, [sp, #4]
 808cb10:	f1c0 0120 	rsb	r1, r0, #32
 808cb14:	fa02 f101 	lsl.w	r1, r2, r1
 808cb18:	430b      	orrs	r3, r1
 808cb1a:	40c2      	lsrs	r2, r0
 808cb1c:	617b      	str	r3, [r7, #20]
 808cb1e:	9201      	str	r2, [sp, #4]
 808cb20:	e000      	b.n	808cb24 <__d2b+0x4e>
 808cb22:	617b      	str	r3, [r7, #20]
 808cb24:	9b01      	ldr	r3, [sp, #4]
 808cb26:	2b00      	cmp	r3, #0
 808cb28:	bf14      	ite	ne
 808cb2a:	2102      	movne	r1, #2
 808cb2c:	2101      	moveq	r1, #1
 808cb2e:	61bb      	str	r3, [r7, #24]
 808cb30:	6139      	str	r1, [r7, #16]
 808cb32:	e007      	b.n	808cb44 <__d2b+0x6e>
 808cb34:	a801      	add	r0, sp, #4
 808cb36:	f7ff fd7c 	bl	808c632 <__lo0bits>
 808cb3a:	9b01      	ldr	r3, [sp, #4]
 808cb3c:	2101      	movs	r1, #1
 808cb3e:	617b      	str	r3, [r7, #20]
 808cb40:	6139      	str	r1, [r7, #16]
 808cb42:	3020      	adds	r0, #32
 808cb44:	b134      	cbz	r4, 808cb54 <__d2b+0x7e>
 808cb46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808cb4a:	4404      	add	r4, r0
 808cb4c:	6034      	str	r4, [r6, #0]
 808cb4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808cb52:	e009      	b.n	808cb68 <__d2b+0x92>
 808cb54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808cb58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808cb5c:	6030      	str	r0, [r6, #0]
 808cb5e:	6918      	ldr	r0, [r3, #16]
 808cb60:	f7ff fd47 	bl	808c5f2 <__hi0bits>
 808cb64:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808cb68:	6028      	str	r0, [r5, #0]
 808cb6a:	4638      	mov	r0, r7
 808cb6c:	b002      	add	sp, #8
 808cb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808cb72 <__ratio>:
 808cb72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808cb76:	4688      	mov	r8, r1
 808cb78:	4669      	mov	r1, sp
 808cb7a:	4681      	mov	r9, r0
 808cb7c:	f7ff ff5e 	bl	808ca3c <__b2d>
 808cb80:	460d      	mov	r5, r1
 808cb82:	4604      	mov	r4, r0
 808cb84:	a901      	add	r1, sp, #4
 808cb86:	4640      	mov	r0, r8
 808cb88:	f7ff ff58 	bl	808ca3c <__b2d>
 808cb8c:	460f      	mov	r7, r1
 808cb8e:	4606      	mov	r6, r0
 808cb90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808cb94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808cb98:	4620      	mov	r0, r4
 808cb9a:	1a9a      	subs	r2, r3, r2
 808cb9c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808cba0:	1ac9      	subs	r1, r1, r3
 808cba2:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808cba6:	2b00      	cmp	r3, #0
 808cba8:	bfcc      	ite	gt
 808cbaa:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808cbae:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808cbb2:	4632      	mov	r2, r6
 808cbb4:	463b      	mov	r3, r7
 808cbb6:	4629      	mov	r1, r5
 808cbb8:	f7fc f952 	bl	8088e60 <__aeabi_ddiv>
 808cbbc:	b003      	add	sp, #12
 808cbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808cbc2 <__copybits>:
 808cbc2:	3901      	subs	r1, #1
 808cbc4:	b510      	push	{r4, lr}
 808cbc6:	1149      	asrs	r1, r1, #5
 808cbc8:	6914      	ldr	r4, [r2, #16]
 808cbca:	3101      	adds	r1, #1
 808cbcc:	f102 0314 	add.w	r3, r2, #20
 808cbd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808cbd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808cbd8:	42a3      	cmp	r3, r4
 808cbda:	4602      	mov	r2, r0
 808cbdc:	d204      	bcs.n	808cbe8 <__copybits+0x26>
 808cbde:	f853 2b04 	ldr.w	r2, [r3], #4
 808cbe2:	f840 2b04 	str.w	r2, [r0], #4
 808cbe6:	e7f7      	b.n	808cbd8 <__copybits+0x16>
 808cbe8:	2300      	movs	r3, #0
 808cbea:	428a      	cmp	r2, r1
 808cbec:	d202      	bcs.n	808cbf4 <__copybits+0x32>
 808cbee:	f842 3b04 	str.w	r3, [r2], #4
 808cbf2:	e7fa      	b.n	808cbea <__copybits+0x28>
 808cbf4:	bd10      	pop	{r4, pc}

0808cbf6 <__any_on>:
 808cbf6:	f100 0214 	add.w	r2, r0, #20
 808cbfa:	6900      	ldr	r0, [r0, #16]
 808cbfc:	114b      	asrs	r3, r1, #5
 808cbfe:	4298      	cmp	r0, r3
 808cc00:	b510      	push	{r4, lr}
 808cc02:	db0c      	blt.n	808cc1e <__any_on+0x28>
 808cc04:	dd0c      	ble.n	808cc20 <__any_on+0x2a>
 808cc06:	f011 011f 	ands.w	r1, r1, #31
 808cc0a:	d009      	beq.n	808cc20 <__any_on+0x2a>
 808cc0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808cc10:	fa24 f001 	lsr.w	r0, r4, r1
 808cc14:	fa00 f101 	lsl.w	r1, r0, r1
 808cc18:	428c      	cmp	r4, r1
 808cc1a:	d10c      	bne.n	808cc36 <__any_on+0x40>
 808cc1c:	e000      	b.n	808cc20 <__any_on+0x2a>
 808cc1e:	4603      	mov	r3, r0
 808cc20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808cc24:	4293      	cmp	r3, r2
 808cc26:	d904      	bls.n	808cc32 <__any_on+0x3c>
 808cc28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808cc2c:	2900      	cmp	r1, #0
 808cc2e:	d0f9      	beq.n	808cc24 <__any_on+0x2e>
 808cc30:	e001      	b.n	808cc36 <__any_on+0x40>
 808cc32:	2000      	movs	r0, #0
 808cc34:	bd10      	pop	{r4, pc}
 808cc36:	2001      	movs	r0, #1
 808cc38:	bd10      	pop	{r4, pc}

0808cc3a <_calloc_r>:
 808cc3a:	b538      	push	{r3, r4, r5, lr}
 808cc3c:	fb02 f401 	mul.w	r4, r2, r1
 808cc40:	4621      	mov	r1, r4
 808cc42:	f7f8 feb1 	bl	80859a8 <_malloc_r>
 808cc46:	4605      	mov	r5, r0
 808cc48:	b118      	cbz	r0, 808cc52 <_calloc_r+0x18>
 808cc4a:	4622      	mov	r2, r4
 808cc4c:	2100      	movs	r1, #0
 808cc4e:	f7fd f94b 	bl	8089ee8 <memset>
 808cc52:	4628      	mov	r0, r5
 808cc54:	bd38      	pop	{r3, r4, r5, pc}

0808cc56 <__env_lock>:
 808cc56:	4770      	bx	lr

0808cc58 <__env_unlock>:
 808cc58:	4770      	bx	lr

0808cc5a <link_code_end>:
	...

0808cc5c <dynalib_user>:
 808cc5c:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808cc6c:	0000 0000                                   ....

0808cc70 <_ZTVN8particle13__SPISettingsE>:
	...
 808cc78:	0121 0808                                   !...

0808cc7c <_ZTV6SdFile>:
	...
 808cc84:	00db 0808 010b 0808 019d 0808 0119 0808     ................
 808cc94:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
 808cca4:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
 808ccb4:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
 808ccc4:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
 808ccd4:	2545 3e64 6100 7070 6477 0074 6164 6574     E%d>.appwdt.date
 808cce4:	6974 656d 202c 3174 202c 3274 202c 7053     time, t1, t2, Sp
 808ccf4:	435f 2c20 7641 6c6f 7374 202c 6172 6e69     _C ,Avolts, rain
 808cd04:	202c 6564 7470 2c68 5320 436f 202c 6f76     , depth, SoC, vo
 808cd14:	746c 0073 6f4e 0020 6559 2073 6c00 736f     lts.No .Yes .los
 808cd24:	2d74 6974 656d 3030 2e30 7363 0076 005f     t-time000.csv._.
 808cd34:	5925 252d 0064 6620 6c69 6e65 6d61 0065     %Y-%d. filename.
 808cd44:	7277 7469 2065 7265 6f72 0072 6f4c 0067     write error.Log.
 808cd54:	4453 772d 6972 6574 7720 726f 656b 3a64     SD-write worked:
 808cd64:	2520 0073 6152 6e69 4800 6d75 6469 7469      %s.Rain.Humidit
 808cd74:	5f79 0025 6941 2d72 6554 706d 435f 5000     y_%.Air-Temp_C.P
 808cd84:	6572 7373 7275 5f65 5068 0041 3248 2d4f     ressure_hPA.H2O-
 808cd94:	6554 706d 435f 4800 4f32 685f 4150 4400     Temp_C.H2O_hPA.D
 808cda4:	7065 6874 695f 006e 6f56 746c 0073 4f53     epth_in.Volts.SO
 808cdb4:	0043 7053 435f 6e6f 0064 2e41 6f76 746c     C.Sp_Cond.A.volt
 808cdc4:	0073 202c 3025 2e35 6632 202c 3025 2e35     s., %05.2f, %05.
 808cdd4:	6632 202c 3025 2e36 6631 202c 3025 2e35     2f, %06.1f, %05.
 808cde4:	6633 202c 3025 2e34 6630 202c 3025 2e36     3f, %04.0f, %06.
 808cdf4:	6633 202c 3025 2e35 6632 202c 3025 2e34     3f, %05.2f, %04.
 808ce04:	6632 4300 6d61 7265 2061 6f46 6e75 3a64     2f.Camera Found:
 808ce14:	4e00 206f 6163 656d 6172 6620 756f 646e     .No camera found
 808ce24:	003f 6146 6c69 6465 7420 206f 6567 2074     ?.Failed to get 
 808ce34:	6576 7372 6f69 006e 6e53 7061 6920 206e     version.Snap in 
 808ce44:	2031 6573 7363 2e2e 002e 6146 6c69 6465     1 secs....Failed
 808ce54:	7420 206f 6e73 7061 0021 6950 7463 7275      to snap!.Pictur
 808ce64:	2065 6174 656b 216e 6c00 736f 2d74 6974     e taken!.lost-ti
 808ce74:	656d 3030 2e30 706a 0067 5925 252d 2d6d     me000.jpg.%Y-%m-
 808ce84:	6425 252d 2d48 4d25 2000 7962 6574 6920     %d-%H-%M. byte i
 808ce94:	616d 6567 202e 2000 736d 6520 616c 7370     mage. . ms elaps
 808cea4:	6465 4400 6669 6966 7563 746c 2079 6f63     ed.Difficulty co
 808ceb4:	6e6e 6365 6974 676e 202e 6957 6c6c 7420     nnecting. Will t
 808cec4:	7972 6620 726f 3120 6d20 726f 2065 696d     ry for 1 more mi
 808ced4:	006e 7320 656c 7065 6e69 2067 6f66 2072     n. sleeping for 
 808cee4:	3225 2069 696d 756e 6574 2073 6f74 7720     %2i minutes to w
 808cef4:	6961 2074 6f66 2072 6562 7474 7265 7420     ait for better t
 808cf04:	6d69 2065 4400 6669 6966 7563 746c 2079     ime .Difficulty 
 808cf14:	6f63 6e6e 6365 6974 676e 7320 656c 7065     connecting sleep
 808cf24:	6e69 0067 6170 7373 6465 7420 6568 4320     ing.passed the C
 808cf34:	6c65 756c 616c 2e72 6572 6461 2079 6574     ellular.ready te
 808cf44:	7473 6300 6e6f 656e 7463 6465 7000 7261     st.connected.par
 808cf54:	6974 6c63 0065 6543 6c6c 7551 6c61 4300     ticle.CellQual.C
 808cf64:	6c65 536c 7274 6e65 5300 7570 6e64 6b69     ellStren.Spudnik
 808cf74:	302d 6238 2500 2c73 7420 5f31 666f 7366     -08b.%s, t1_offs
 808cf84:	7465 202c 3274 6f5f 6666 6573 2c74 6b20     et, t2_offset, k
 808cf94:	635f 726f 6572 7463 6f69 2c6e 4120 762e     _correction, A.v
 808cfa4:	6c6f 7374 202c 7457 6d65 2c70 4420 7065     olts, Wtemp, Dep
 808cfb4:	6874 695f 2c6e 2520 3530 322e 2c66 2520     th_in, %05.2f, %
 808cfc4:	3530 322e 2c66 2520 3530 322e 2c66 2520     05.2f, %05.2f, %
 808cfd4:	3530 332e 2c66 2520 3530 322e 2c66 2520     05.3f, %05.2f, %
 808cfe4:	3630 332e 0066 227b 7441 6d65 4370 3a22     06.3f.{"AtempC":
 808cff4:	2522 3530 322e 2266 222c 3248 744f 6d65     "%05.2f","H2Otem
 808d004:	2270 223a 3025 2e35 6632 2c22 5322 4370     p":"%05.2f","SpC
 808d014:	3a22 2522 3630 312e 2266 202c 4122 6f76     ":"%06.1f", "Avo
 808d024:	746c 2273 223a 3025 2e35 6633 2c22 7222     lts":"%05.3f","r
 808d034:	6961 226e 223a 3025 2e34 6630 2c22 6422     ain":"%04.0f","d
 808d044:	7065 6874 3a22 2522 3630 332e 2266 222c     epth":"%06.3f","
 808d054:	4f53 2243 223a 3025 2e35 6632 2c22 7622     SOC":"%05.2f","v
 808d064:	6c6f 7374 3a22 2522 3430 322e 2266 007d     olts":"%04.2f"}.
 808d074:	6966 696e 6873 6465 7520 6c70 616f 6964     finished uploadi
 808d084:	676e 7500 6c70 616f 6564 2c64 7720 6c69     ng.uploaded, wil
 808d094:	206c 6c73 6565 2070 6e69 2520 6932 7320     l sleep in %2i s
 808d0a4:	6365 6e6f 7364 7300 656c 7065 6e69 2067     econds.sleeping 
 808d0b4:	3225 2069 696d 756e 6574 0073 6170 7472     %2i minutes.part
 808d0c4:	6369 656c 6f73 616c 3372 6330 2000 7325     iclesolar30c. %s
 808d0d4:	6f5f 5f6e 7325 6c00 6e6f 0067 6e69 6420     _on_%s.long.in d
 808d0e4:	6c65 7961 6954 656d 5000 7261 6974 6c63     elayTime.Particl
 808d0f4:	0065 6f63 6c75 2064 6f6e 2074 6966 646e     e.could not find
 808d104:	6220 656d 0031 624f 4469 746f 0073 6544      bme1.ObiDots.De
 808d114:	616c 0079 6e65 6964 676e 7320 7465 7075     lay.ending setup
 808d124:	4200 4642 2d46 324d 5958 4d7a 4849 786a     .BBFF-M2XYzMIHjx
 808d134:	4976 4765 306a 5768 3837 6850 7732 5145     vIeGj0hW78Ph2wEQ
 808d144:	7950 366c 5400 6568 6572 6920 2073 6c61     Pyl6.There is al
 808d154:	6572 6461 2079 6e61 6920 736e 6174 636e     ready an instanc
 808d164:	2065 666f 5020 7261 6974 6c63 5365 666f     e of ParticleSof
 808d174:	5374 7265 6169 206c 7572 6e6e 6e69 2067     tSerial running 
 808d184:	6e6f 7020 6e69 2073 5852 6425 2f20 5420     on pins RX%d / T
 808d194:	2558 0064 6c25 2075 6f6e 2074 7661 6961     X%d.%lu not avai
 808d1a4:	616c 6c62 2165 5320 6c65 6365 6574 2064     lable! Selected 
 808d1b4:	6172 6574 2520 756c 0000 0000               rate %lu....

0808d1c0 <_ZL7btTable>:
 808d1c0:	e100 0000 0009 0000 0010 0000 9600 0000     ................
 808d1d0:	0018 0000 0018 0000 7a12 0000 001f 0000     .........z......
 808d1e0:	001f 0000 7080 0000 0025 0000 0021 0000     .....p..%...!...
 808d1f0:	4b00 0000 003d 0000 0033 0000 3840 0000     .K..=...3...@8..
 808d200:	005a 0000 0044 0000 2580 0000 008c 0000     Z...D....%......
 808d210:	0068 0000 12c0 0000 0127 0000 00d0 0000     h.......'.......
 808d220:	0960 0000 0262 0000 01a1 0000 04b0 0000     `...b...........
 808d230:	04ce 0000 0341 0000 0258 0000 09c4 0000     ....A...X.......
 808d240:	0683 0000 012c 0000 1388 0000 0d05 0000     ....,...........
	...
 808d25c:	7441 6574 706d 6974 676e 7420 206f 6572     Attempting to re
 808d26c:	6f63 6e6e 6365 0074 7254 6979 676e 7420     connect.Trying t
 808d27c:	206f 6f63 6e6e 6365 2074 6f74 0020 2c20     o connect to . ,
 808d28c:	6120 7474 6d65 7470 6e20 6d75 6562 3a72      attempt number:
 808d29c:	0020 6974 656d 756f 2c74 6320 756f 646c      .timeout, could
 808d2ac:	6e20 746f 7220 6165 2064 6e61 2079 6572      not read any re
 808d2bc:	7073 6e6f 6573 6620 6f72 206d 6874 2065     sponse from the 
 808d2cc:	6f68 7473 5300 7265 6576 2772 2073 6572     host.Server's re
 808d2dc:	7073 6e6f 6573 003a 2d0a 2d2d 2d2d 2d2d     sponse:..-------
 808d2ec:	2d2d 002d 4f50 5453 4f00 004b 4c7c 7c56     ---.POST.OK.|LV|
 808d2fc:	5000 7961 6f6c 6461 6620 726f 7220 7165     .Payload for req
 808d30c:	6575 7473 003a 2d0a 2d2d 002d 564c 4500     uest:..----.LV.E
 808d31c:	5252 524f 6320 756f 646c 6e20 746f 6320     RROR could not c
 808d32c:	6e6f 656e 7463 7420 206f 6874 2065 6573     onnect to the se
 808d33c:	7672 7265 4300 756f 646c 6e20 746f 6320     rver.Could not c
 808d34c:	6e6f 656e 7463 7420 206f 6874 2065 6f68     onnect to the ho
 808d35c:	7473 0000                                   st..

0808d360 <_ZTV6UbiTCP>:
	...
 808d368:	374d 0808 35f9 0808 3405 0808 6f59 2075     M7...5...4..You 
 808d378:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
 808d388:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
 808d398:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
 808d3a8:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
 808d3b8:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
 808d3c8:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
 808d3d8:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
 808d3e8:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
 808d3f8:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
 808d408:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
 808d418:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
 808d428:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
 808d438:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
 808d448:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
 808d458:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
 808d468:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
 808d478:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
 808d488:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
 808d498:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
 808d4a8:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
 808d4b8:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
 808d4c8:	474e 205d 6c70 6165 6573 6320 6f68 736f     NG] please choos
 808d4d8:	2065 2061 6964 6666 7265 6e65 2074 6c63     e a different cl
 808d4e8:	756f 2064 7270 746f 636f 6c6f 6f20 2066     oud protocol of 
 808d4f8:	654d 6873 6920 206e 6874 2065 6255 6469     Mesh in the Ubid
 808d508:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
 808d518:	575b 5241 494e 474e 205d 6f59 7275 6220     [WARNING] Your b
 808d528:	616f 6472 6420 656f 2073 6f6e 2074 7573     oard does not su
 808d538:	7070 726f 2074 6874 2065 656d 6873 7550     pport the meshPu
 808d548:	6c62 7369 5468 556f 6962 6f64 7374 2928     blishToUbidots()
 808d558:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808d568:	205d 6f59 7275 6220 616f 6472 6420 656f     ] Your board doe
 808d578:	2073 6f6e 2074 7573 7070 726f 2074 6874     s not support th
 808d588:	2065 656d 6873 6f4c 706f 2928 6d20 7465     e meshLoop() met
 808d598:	6f68 0064 575b 5241 494e 474e 205d 6f59     hod.[WARNING] Yo
 808d5a8:	7275 6220 616f 6472 6420 656f 2073 6f6e     ur board does no
 808d5b8:	2074 7573 7070 726f 2074 6874 2065 6573     t support the se
 808d5c8:	4374 6f6c 6475 7250 746f 636f 6c6f 2928     tCloudProtocol()
 808d5d8:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808d5e8:	205d 6854 2065 654d 6873 5020 6f72 6f74     ] The Mesh Proto
 808d5f8:	6f63 206c 7369 6e20 746f 7320 7075 6f70     col is not suppo
 808d608:	7472 6465 6920 206e 6874 7369 6420 7665     rted in this dev
 808d618:	6369 2065 6f66 2072 6573 646e 6e69 2067     ice for sending 
 808d628:	6164 6174 5b00 6157 6e72 6e69 5d67 5420     data.[Warning] T
 808d638:	206f 6572 7274 6569 6576 6420 7461 2c61     o retrieve data,
 808d648:	7020 656c 7361 2065 6573 2074 2061 6176      please set a va
 808d658:	696c 2064 6c63 756f 2064 7270 746f 636f     lid cloud protoc
 808d668:	6c6f 6920 206e 6874 2065 6255 6469 746f     ol in the Ubidot
 808d678:	2073 6f63 736e 7274 6375 6f74 0072 6f59     s constructor.Yo
 808d688:	2075 7261 2065 6461 6964 676e 6d20 726f     u are adding mor
 808d698:	2065 6874 6e61 7420 6568 6d20 7861 6d69     e than the maxim
 808d6a8:	6d75 6f20 2066 6f63 736e 6365 7475 7669     um of consecutiv
 808d6b8:	2065 656b 2d79 6176 756c 7365 7020 6961     e key-values pai
 808d6c8:	7372 2500 2573 3d73 7325 2500 2473 2500     rs.%s%s=%s.%s$.%
 808d6d8:	2273 7325 3a22 2522 2273 0000               s"%s":"%s"..

0808d6e4 <_ZTV7UbiHTTP>:
	...
 808d6ec:	3fed 0808 423d 0808 3dc9 0808 7441 6574     .?..=B...=..Atte
 808d6fc:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
 808d70c:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
 808d71c:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
 808d72c:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
 808d73c:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
 808d74c:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
 808d75c:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
 808d76c:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
 808d77c:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
 808d78c:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
 808d79c:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
 808d7ac:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
 808d7bc:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
 808d7cc:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
 808d7dc:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
 808d7ec:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
 808d7fc:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
 808d80c:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
 808d81c:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
 808d82c:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
 808d83c:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
 808d84c:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
 808d85c:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
 808d86c:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

0808d87a <_ZStL19piecewise_construct>:
 808d87a:	5b00 6157 6e72 6e69 5d67 4320 756f 646c     .[Warning] Could
 808d88a:	6e20 746f 7320 6c6f 6576 4920 2050 6441      not solve IP Ad
 808d89a:	7264 7365 2073 666f 7420 6568 7220 6d65     dress of the rem
 808d8aa:	746f 2065 6f68 7473 202c 6977 6874 7920     ote host, with y
 808d8ba:	756f 2072 4e44 2053 6573 7574 2e70 2020     our DNS setup.  
 808d8ca:	2020 2020 2020 2020 0a20 7355 6e69 2067              .Using 
 808d8da:	6564 6166 6c75 2074 6e49 7564 7473 6972     default Industri
 808d8ea:	6c61 5520 6962 6f64 7374 4920 3a50 3120     al Ubidots IP: 1
 808d8fa:	3936 352e 2e35 3136 322e 3334 4500 5252     69.55.61.243.ERR
 808d90a:	524f 7320 6e65 6964 676e 7620 6c61 6575     OR sending value
 808d91a:	2073 6977 6874 5520 5044 0000 0000          s with UDP....

0808d928 <_ZTV6UbiUDP>:
	...
 808d930:	4901 0808 4891 0808 4899 0808               .I...H...H..

0808d93c <_ZTV11UbiParticle>:
	...
 808d944:	4a43 0808 49e1 0808 49e9 0808               CJ...I...I..

0808d950 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808d950:	0800 1810 2820 3830                         .... (08

0808d958 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 808d960:	5f6d 0808 5f73 0808 635b 0808 5f81 0808     m_..s_..[c..._..
 808d970:	5f6f 0808                                   o_..

0808d974 <_ZTV9TCPClient>:
	...
 808d97c:	3409 0808 343d 0808 5f15 0808 5f2f 0808     .4..=4..._../_..
 808d98c:	6069 0808 5fd3 0808 5fa5 0808 5f57 0808     i`..._..._..W_..
 808d99c:	6111 0808 6375 0808 6007 0808 60e1 0808     .a..uc...`...`..
 808d9ac:	6253 0808 62a5 0808 5f3f 0808 6217 0808     Sb...b..?_...b..
 808d9bc:	5f59 0808 6977 6972 676e 5400 5043 6c43     Y_..wiring.TCPCl
 808d9cc:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 808d9dc:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 808d9ec:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 808d9fc:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 808da0c:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 808da1c:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 808da2c:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 808da3c:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 808da4c:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 808da5c:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
 808da6c:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 808da7c:	3d20 0020 6e6c 6600 006e 6f63 6564 6400      = .ln.fn.code.d
 808da8c:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 808da9c:	6900 666e 006f 6177 6e72 7000 6e61 6369     .info.warn.panic
 808daac:	6100 6c6c 2500 302b 6433 253a 3230 0075     .all.%+03d:%02u.
 808dabc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 808dacc:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

0808dad8 <_ZTV3UDP>:
	...
 808dae0:	4519 0808 4539 0808 69a9 0808 6acf 0808     .E..9E...i...j..
 808daf0:	696d 0808 69bf 0808 69dd 0808 69f7 0808     mi...i...i...i..
 808db00:	6a19 0808 6a69 0808 6a8b 0808 6921 0808     .j..ij...j..!i..
 808db10:	6b35 0808 6945 0808 6c89 0808 6b9d 0808     5k..Ei...l...k..
 808db20:	6975 0808 6cad 0808 6af9 0808 6951 0808     ui...l...j..Qi..
 808db30:	6959 0808 6969 0808 69f9 0808 fff0 ffff     Yi..ii...i......
 808db40:	0000 0000 6a11 0808                         .....j..

0808db48 <_ZTV14CellularSignal>:
	...
 808db50:	6d2d 0808 6d7d 0808 6d2f 0808 6dbd 0808     -m..}m../m...m..
 808db60:	6d35 0808 6d8d 0808 6d59 0808 6e43 0808     5m...m..Ym..Cn..
 808db70:	fffc ffff 0000 0000 6e6d 0808               ........mn..

0808db7c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808db84:	70e9 0808 70ef 0808 7133 0808 70fd 0808     .p...p..3q...p..
 808db94:	70eb 0808                                   .p..

0808db98 <_ZTV9IPAddress>:
	...
 808dba0:	76d9 0808 76c9 0808 76cb 0808               .v...v...v..

0808dbac <_ZTV9USBSerial>:
	...
 808dbb4:	778b 0808 77db 0808 77e9 0808 65b5 0808     .w...w...w...e..
 808dbc4:	77c7 0808 778d 0808 77a3 0808 77d5 0808     .w...w...w...w..
 808dbd4:	77b9 0808 7787 0808                         .w...w..

0808dbdc <_ZTVN5spark13CellularClassE>:
	...
 808dbe4:	7acd 0808 7ac3 0808 7ab9 0808 01b5 0808     .z...z...z......
 808dbf4:	7aad 0808 7aa1 0808 7a95 0808 7a8d 0808     .z...z...z...z..
 808dc04:	7a83 0808 7a79 0808 7a35 0808               .z..yz..5z..

0808dc10 <_ZTV11USARTSerial>:
	...
 808dc18:	7b7d 0808 7bcd 0808 7bdb 0808 65b5 0808     }{...{...{...e..
 808dc28:	7b91 0808 7bb3 0808 7b9f 0808 7bc7 0808     .{...{...{...{..
 808dc38:	7b7f 0808 7b83 0808                         .{...{..

0808dc40 <_ZTV7TwoWire>:
	...
 808dc48:	7cb5 0808 7cff 0808 7cd7 0808 7cb7 0808     .|...|...|...|..
 808dc58:	7cdf 0808 7ce7 0808 7cef 0808 7cf7 0808     .|...|...|...|..

0808dc68 <_ZTVN5spark12NetworkClassE>:
	...
 808dc70:	7de7 0808 7df1 0808 7dfb 0808 7e05 0808     .}...}...}...~..
 808dc80:	7e0f 0808 7e1b 0808 7e27 0808 7e33 0808     .~...~..'~..3~..
 808dc90:	7e3b 0808 7e45 0808 7e51 0808               ;~..E~..Q~..

0808dc9c <_ZSt7nothrow>:
	...

0808dc9d <day_name.4723>:
 808dc9d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808dcad:	6972 6153 4a74                                   riSat

0808dcb2 <mon_name.4724>:
 808dcb2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808dcc2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808dcd2:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808dce2:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808dcf2:	6425 000a                                   %d..

0808dcf6 <_ctype_>:
 808dcf6:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808dd06:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808dd16:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808dd26:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808dd36:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808dd46:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808dd56:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808dd66:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808dd76:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808ddf8 <__sf_fake_stdin>:
	...

0808de18 <__sf_fake_stdout>:
	...

0808de38 <__sf_fake_stderr>:
	...
 808de58:	4f50 4953 0058 0000                         POSIX...

0808de60 <__month_lengths>:
 808de60:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808de70:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808de80:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808de90:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808dea0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808deb0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808dec0:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808ded0:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 808dee0:	322e 0064 2d59 6d25 252d 0064 2a2e 0075     .2d.Y-%m-%d..*u.
 808def0:	2e25 6433 2500 6c6c 0064 2e25 6432 253a     %.3d.%lld.%.2d:%
 808df00:	322e 3a64 2e25 6432 2500 302b 6c33 2564     .2d:%.2d.%+03ld%
 808df10:	322e 646c 0000 0000                         .2ld....

0808df18 <fpi.5342>:
 808df18:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808df28:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

0808df38 <fpinan.5378>:
 808df38:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

0808df50 <tinytens>:
 808df50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808df60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808df70:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 808df80:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 808df90:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 808dfa0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 808dfb0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 808dfc0:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 808dfd0:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 808dfe0:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 808dff0:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 808e000:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 808e010:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 808e020:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 808e030:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 808e040:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 808e050:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 808e060:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 808e070:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 808e080:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 808e090:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 808e0a0:	3a4d 5325 2520 0070                         M:%S %p.

0808e0a8 <_C_time_locale>:
 808e0a8:	df80 0808 df84 0808 df88 0808 df8c 0808     ................
 808e0b8:	df90 0808 df94 0808 df98 0808 df9c 0808     ................
 808e0c8:	dfa0 0808 dfa4 0808 dfa8 0808 dfac 0808     ................
 808e0d8:	dfb0 0808 dfb8 0808 dfc1 0808 dfc7 0808     ................
 808e0e8:	df90 0808 dfcd 0808 dfd2 0808 dfd7 0808     ................
 808e0f8:	dfde 0808 dfe8 0808 dff0 0808 dff9 0808     ................
 808e108:	e002 0808 e006 0808 e00a 0808 e00e 0808     ................
 808e118:	e012 0808 e016 0808 e01a 0808 e01e 0808     ................
 808e128:	e025 0808 e02c 0808 e034 0808 e03e 0808     %...,...4...>...
 808e138:	e047 0808 e04e 0808 e057 0808 e060 0808     G...N...W...`...
 808e148:	e069 0808 e07e 0808 e081 0808 e084 0808     i...~...........
 808e158:	dfb0 0808 dfb8 0808 dfc1 0808 dfc7 0808     ................
 808e168:	df90 0808 dfcd 0808 dfd2 0808 dfd7 0808     ................
 808e178:	dfde 0808 dfe8 0808 dff0 0808 dff9 0808     ................
 808e188:	d9fe 0808 e09c 0808 d853 0808 d853 0808     ........S...S...
 808e198:	d853 0808 d853 0808 d853 0808 5a54 4700     S...S...S...TZ.G
 808e1a8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808e1b8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808e1c8:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808e1d8:	3a6e 6825 2575 006e                         n:%hu%n.

0808e1e0 <__mprec_tens>:
 808e1e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808e1f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808e200:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808e210:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808e220:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808e230:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808e240:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808e250:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808e260:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808e270:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808e280:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808e290:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808e2a0:	9db4 79d9 7843 44ea                         ...yCx.D

0808e2a8 <__mprec_bigtens>:
 808e2a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808e2b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808e2c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808e2d0 <p05.5385>:
 808e2d0:	0005 0000 0019 0000 007d 0000               ........}...

0808e2dc <link_const_variable_data_end>:
 808e2dc:	0808141d 	.word	0x0808141d
 808e2e0:	08081811 	.word	0x08081811
 808e2e4:	08081815 	.word	0x08081815
 808e2e8:	08081819 	.word	0x08081819
 808e2ec:	08081e41 	.word	0x08081e41
 808e2f0:	08081e45 	.word	0x08081e45
 808e2f4:	08081e49 	.word	0x08081e49
 808e2f8:	08081e4d 	.word	0x08081e4d
 808e2fc:	080824ed 	.word	0x080824ed
 808e300:	08082511 	.word	0x08082511
 808e304:	08082515 	.word	0x08082515
 808e308:	08082839 	.word	0x08082839
 808e30c:	0808283d 	.word	0x0808283d
 808e310:	08082841 	.word	0x08082841
 808e314:	08082d7b 	.word	0x08082d7b
 808e318:	08082d7f 	.word	0x08082d7f
 808e31c:	08082d83 	.word	0x08082d83
 808e320:	08082e29 	.word	0x08082e29
 808e324:	080833b5 	.word	0x080833b5
 808e328:	08083401 	.word	0x08083401
 808e32c:	080837e5 	.word	0x080837e5
 808e330:	08083ce9 	.word	0x08083ce9
 808e334:	08083dc5 	.word	0x08083dc5
 808e338:	08084411 	.word	0x08084411
 808e33c:	08084825 	.word	0x08084825
 808e340:	08084881 	.word	0x08084881
 808e344:	080849b9 	.word	0x080849b9
 808e348:	08084aab 	.word	0x08084aab
 808e34c:	08084f25 	.word	0x08084f25
 808e350:	0808527d 	.word	0x0808527d
 808e354:	08085ee1 	.word	0x08085ee1
 808e358:	080866e5 	.word	0x080866e5
 808e35c:	08086905 	.word	0x08086905
 808e360:	08086d11 	.word	0x08086d11
 808e364:	08087b4d 	.word	0x08087b4d
 808e368:	08087eb5 	.word	0x08087eb5
 808e36c:	0808833d 	.word	0x0808833d
 808e370:	0808860d 	.word	0x0808860d
 808e374:	08088691 	.word	0x08088691
 808e378:	08088755 	.word	0x08088755
 808e37c:	08088819 	.word	0x08088819
