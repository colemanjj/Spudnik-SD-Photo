
g:/jsc/IoT/particle/ParticleSolar30vs/target/1.5.2/electron/ParticleSolar30vs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e300  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  0808e320  0808e320  0001e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  0808e328  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000140  20000000  0808e32c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f78  20000140  20000140  00040140  2**2
                  ALLOC
  7 .module_info_suffix 00000028  0808e46c  0808e46c  0003e46c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0808e494  0808e494  0003e494  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001fa275  00000000  00000000  0003e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002af9f  00000000  00000000  0023870d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00030aee  00000000  00000000  002636ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003c28  00000000  00000000  0029419a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006640  00000000  00000000  00297dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c5e9  00000000  00000000  0029e402  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006b304  00000000  00000000  002ea9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d07ac  00000000  00000000  00355cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011560  00000000  00000000  0042649c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f009 ff1e 	bl	8089e72 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f009 ff23 	bl	8089e88 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808e32c 	.word	0x0808e32c
 8080050:	20000140 	.word	0x20000140
 8080054:	20000140 	.word	0x20000140
 8080058:	200010b8 	.word	0x200010b8
 808005c:	200010b8 	.word	0x200010b8

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f006 ffe5 	bl	8087030 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808e274 	.word	0x0808e274
 8080088:	0808e318 	.word	0x0808e318

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 b8fa 	b.w	8081284 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fc81 	bl	8080998 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f006 bf8b 	b.w	8086fb4 <_post_loop>

0808009e <_Znwj>:
 808009e:	f005 bc03 	b.w	80858a8 <malloc>

080800a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80800a2:	f005 bc01 	b.w	80858a8 <malloc>

080800a6 <_ZdlPv>:
 80800a6:	f005 bc07 	b.w	80858b8 <free>

080800aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800aa:	f005 bc05 	b.w	80858b8 <free>

080800ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800ae:	7800      	ldrb	r0, [r0, #0]
 80800b0:	fab0 f080 	clz	r0, r0
 80800b4:	0940      	lsrs	r0, r0, #5
 80800b6:	4770      	bx	lr

080800b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b8:	2301      	movs	r3, #1
 80800ba:	7003      	strb	r3, [r0, #0]
 80800bc:	4770      	bx	lr

080800be <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800be:	6803      	ldr	r3, [r0, #0]
 80800c0:	4718      	bx	r3

080800c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800c2:	2a01      	cmp	r2, #1
 80800c4:	d002      	beq.n	80800cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800c6:	2a02      	cmp	r2, #2
 80800c8:	d002      	beq.n	80800d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800ca:	e004      	b.n	80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800cc:	6001      	str	r1, [r0, #0]
	      break;
 80800ce:	e002      	b.n	80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800d0:	680b      	ldr	r3, [r1, #0]
 80800d2:	b100      	cbz	r0, 80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800d4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800d6:	2000      	movs	r0, #0
 80800d8:	4770      	bx	lr

080800da <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 80800da:	4770      	bx	lr

080800dc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80800dc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80800de:	2301      	movs	r3, #1
 80800e0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80800e2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80800e4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80800e6:	b10b      	cbz	r3, 80800ec <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80800e8:	68c0      	ldr	r0, [r0, #12]
 80800ea:	e006      	b.n	80800fa <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80800ec:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80800ee:	b128      	cbz	r0, 80800fc <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80800f0:	6883      	ldr	r3, [r0, #8]
 80800f2:	b90b      	cbnz	r3, 80800f8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80800f4:	f008 fa56 	bl	80885a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80800f8:	68c3      	ldr	r3, [r0, #12]
 80800fa:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80800fc:	2301      	movs	r3, #1
 80800fe:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 8080100:	2000      	movs	r0, #0
    }
 8080102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 8080106:	f005 b983 	b.w	8085410 <os_thread_exit>

0808010a <_ZN6SdFileD0Ev>:
 808010a:	b510      	push	{r4, lr}
 808010c:	4604      	mov	r4, r0
 808010e:	212c      	movs	r1, #44	; 0x2c
 8080110:	f008 f97c 	bl	808840c <_ZdlPvj>
 8080114:	4620      	mov	r0, r4
 8080116:	bd10      	pop	{r4, pc}

08080118 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080118:	3008      	adds	r0, #8
 808011a:	f001 bfa1 	b.w	8082060 <_ZN7FatFile5writeEPKvj>
	...

08080120 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080122:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080124:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080126:	4608      	mov	r0, r1
 8080128:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 808012a:	b133      	cbz	r3, 808013a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 808012c:	b93d      	cbnz	r5, 808013e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 808012e:	490c      	ldr	r1, [pc, #48]	; (8080160 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080130:	b004      	add	sp, #16
 8080132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080136:	f006 ba23 	b.w	8086580 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 808013a:	4b0a      	ldr	r3, [pc, #40]	; (8080164 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 808013c:	e000      	b.n	8080140 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 808013e:	4b0a      	ldr	r3, [pc, #40]	; (8080168 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080140:	7b16      	ldrb	r6, [r2, #12]
 8080142:	4c0a      	ldr	r4, [pc, #40]	; (808016c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080144:	490a      	ldr	r1, [pc, #40]	; (8080170 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080146:	7b52      	ldrb	r2, [r2, #13]
 8080148:	2e01      	cmp	r6, #1
 808014a:	bf08      	it	eq
 808014c:	4621      	moveq	r1, r4
 808014e:	9202      	str	r2, [sp, #8]
 8080150:	9101      	str	r1, [sp, #4]
 8080152:	9500      	str	r5, [sp, #0]
 8080154:	4a07      	ldr	r2, [pc, #28]	; (8080174 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 8080156:	2100      	movs	r1, #0
 8080158:	f006 fa52 	bl	8086600 <_ZN5Print11printf_implEbPKcz>
  }
 808015c:	b004      	add	sp, #16
 808015e:	bd70      	pop	{r4, r5, r6, pc}
 8080160:	0808cc45 	.word	0x0808cc45
 8080164:	0808d6df 	.word	0x0808d6df
 8080168:	0808cc34 	.word	0x0808cc34
 808016c:	0808cc3d 	.word	0x0808cc3d
 8080170:	0808cc41 	.word	0x0808cc41
 8080174:	0808cc5b 	.word	0x0808cc5b

08080178 <_Z15watchdogHandlerv>:
  // Do not attempt to Particle.publish(), use Cellular.command()
  // or similar functions. You can save data to a retained variable
  // here safetly so you know the watchdog triggered when you 
  // restart.
  // In 2.0.0 and later, RESET_NO_WAIT prevents notifying the cloud of a pending reset
  System.reset();
 8080178:	f005 be59 	b.w	8085e2e <_ZN11SystemClass5resetEv>

0808017c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 808017c:	b510      	push	{r4, lr}
 808017e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8080180:	6880      	ldr	r0, [r0, #8]
 8080182:	b108      	cbz	r0, 8080188 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8080184:	f005 f92c 	bl	80853e0 <os_mutex_recursive_destroy>
 8080188:	4620      	mov	r0, r4
 808018a:	bd10      	pop	{r4, pc}

0808018c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808018c:	b510      	push	{r4, lr}
 808018e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080190:	6800      	ldr	r0, [r0, #0]
 8080192:	b108      	cbz	r0, 8080198 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080194:	f005 fb90 	bl	80858b8 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080198:	4620      	mov	r0, r4
 808019a:	bd10      	pop	{r4, pc}

0808019c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808019c:	b507      	push	{r0, r1, r2, lr}
 808019e:	ab02      	add	r3, sp, #8
 80801a0:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80801a4:	2201      	movs	r2, #1
 80801a6:	4619      	mov	r1, r3
 80801a8:	3008      	adds	r0, #8
 80801aa:	f001 ff59 	bl	8082060 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80801ae:	b003      	add	sp, #12
 80801b0:	f85d fb04 	ldr.w	pc, [sp], #4

080801b4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80801b4:	2200      	movs	r2, #0
 80801b6:	4611      	mov	r1, r2
 80801b8:	6840      	ldr	r0, [r0, #4]
 80801ba:	f005 bafd 	b.w	80857b8 <network_ready>

080801be <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80801be:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80801c0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80801c2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80801c4:	b113      	cbz	r3, 80801cc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80801c6:	2203      	movs	r2, #3
 80801c8:	4601      	mov	r1, r0
 80801ca:	4798      	blx	r3
    }
 80801cc:	4620      	mov	r0, r4
 80801ce:	bd10      	pop	{r4, pc}

080801d0 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 80801d0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801d2:	f005 f8c5 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801d6:	4b01      	ldr	r3, [pc, #4]	; (80801dc <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 80801d8:	6018      	str	r0, [r3, #0]
 80801da:	bd08      	pop	{r3, pc}
 80801dc:	20000eb0 	.word	0x20000eb0

080801e0 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
	}
	ApplicationWatchdog(std::chrono::milliseconds ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80801e0:	b570      	push	{r4, r5, r6, lr}
 80801e2:	461d      	mov	r5, r3
 80801e4:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80801e6:	2300      	movs	r3, #0
 80801e8:	4604      	mov	r4, r0
 80801ea:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80801ec:	b122      	cbz	r2, 80801f8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80801ee:	4b27      	ldr	r3, [pc, #156]	; (808028c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80801f0:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80801f2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80801f4:	4b26      	ldr	r3, [pc, #152]	; (8080290 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 80801f6:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80801f8:	2300      	movs	r3, #0
 80801fa:	60e3      	str	r3, [r4, #12]
 80801fc:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80801fe:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080200:	b13b      	cbz	r3, 8080212 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080202:	2202      	movs	r2, #2
 8080204:	a902      	add	r1, sp, #8
 8080206:	1d20      	adds	r0, r4, #4
 8080208:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808020a:	9b05      	ldr	r3, [sp, #20]
 808020c:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 808020e:	9b04      	ldr	r3, [sp, #16]
 8080210:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 8080212:	4920      	ldr	r1, [pc, #128]	; (8080294 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb4>)
 8080214:	2014      	movs	r0, #20
 8080216:	f008 f8fd 	bl	8088414 <_ZnwjRKSt9nothrow_t>
 808021a:	b130      	cbz	r0, 808022a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 808021c:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 808021e:	7403      	strb	r3, [r0, #16]
 8080220:	6003      	str	r3, [r0, #0]
 8080222:	6043      	str	r3, [r0, #4]
 8080224:	6083      	str	r3, [r0, #8]
 8080226:	60c3      	str	r3, [r0, #12]
 8080228:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808022a:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 808022c:	b1a0      	cbz	r0, 8080258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 808022e:	4b1a      	ldr	r3, [pc, #104]	; (8080298 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb8>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080230:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 8080232:	6083      	str	r3, [r0, #8]
 8080234:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080236:	4919      	ldr	r1, [pc, #100]	; (808029c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xbc>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 8080238:	60dc      	str	r4, [r3, #12]
 808023a:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808023c:	4b18      	ldr	r3, [pc, #96]	; (80802a0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xc0>)
 808023e:	e88d 0021 	stmia.w	sp, {r0, r5}
 8080242:	3004      	adds	r0, #4
 8080244:	f005 f8b4 	bl	80853b0 <os_thread_create>
 8080248:	b930      	cbnz	r0, 8080258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 808024a:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 808024c:	7c1b      	ldrb	r3, [r3, #16]
 808024e:	b9a3      	cbnz	r3, 808027a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8080250:	2001      	movs	r0, #1
 8080252:	f005 f875 	bl	8085340 <HAL_Delay_Milliseconds>
 8080256:	e7f8      	b.n	808024a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080258:	6965      	ldr	r5, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 808025a:	2300      	movs	r3, #0
 808025c:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 808025e:	b165      	cbz	r5, 808027a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 8080260:	682e      	ldr	r6, [r5, #0]
 8080262:	b136      	cbz	r6, 8080272 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x92>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080264:	4630      	mov	r0, r6
 8080266:	f7ff ffaa 	bl	80801be <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 808026a:	2110      	movs	r1, #16
 808026c:	4630      	mov	r0, r6
 808026e:	f008 f8cd 	bl	808840c <_ZdlPvj>
 8080272:	2114      	movs	r1, #20
 8080274:	4628      	mov	r0, r5
 8080276:	f008 f8c9 	bl	808840c <_ZdlPvj>
	{
		checkin();
 808027a:	f7ff ffa9 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
 808027e:	a802      	add	r0, sp, #8
 8080280:	f7ff ff9d 	bl	80801be <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 8080284:	4620      	mov	r0, r4
 8080286:	b006      	add	sp, #24
 8080288:	bd70      	pop	{r4, r5, r6, pc}
 808028a:	bf00      	nop
 808028c:	080800bf 	.word	0x080800bf
 8080290:	080800c3 	.word	0x080800c3
 8080294:	0808dc38 	.word	0x0808dc38
 8080298:	080882cd 	.word	0x080882cd
 808029c:	0808cc79 	.word	0x0808cc79
 80802a0:	080800dd 	.word	0x080800dd

080802a4 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 80802a4:	4613      	mov	r3, r2
 80802a6:	460a      	mov	r2, r1
 80802a8:	4901      	ldr	r1, [pc, #4]	; (80802b0 <_ZN7FatFile4openEPKci+0xc>)
 80802aa:	6809      	ldr	r1, [r1, #0]
 80802ac:	f001 be89 	b.w	8081fc2 <_ZN7FatFile4openEPS_PKci>
 80802b0:	20000740 	.word	0x20000740

080802b4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80802b4:	b530      	push	{r4, r5, lr}
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 80802b6:	4b1d      	ldr	r3, [pc, #116]	; (808032c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 80802b8:	b085      	sub	sp, #20
 80802ba:	9300      	str	r3, [sp, #0]
 80802bc:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80802be:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 80802c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80802c6:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80802c8:	4604      	mov	r4, r0
 80802ca:	9302      	str	r3, [sp, #8]
 80802cc:	7b13      	ldrb	r3, [r2, #12]
 80802ce:	f88d 300c 	strb.w	r3, [sp, #12]
 80802d2:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80802d4:	460a      	mov	r2, r1
 80802d6:	f88d 300d 	strb.w	r3, [sp, #13]
 80802da:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 80802de:	466b      	mov	r3, sp
 80802e0:	4628      	mov	r0, r5
 80802e2:	f002 fa03 	bl	80826ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 80802e6:	b1f0      	cbz	r0, 8080326 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80802e8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80802ea:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 80802ee:	4628      	mov	r0, r5
 80802f0:	f001 fe60 	bl	8081fb4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80802f4:	2101      	movs	r1, #1
 80802f6:	4620      	mov	r0, r4
 80802f8:	f002 f8a1 	bl	808243e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80802fc:	4601      	mov	r1, r0
 80802fe:	b168      	cbz	r0, 808031c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 8080300:	4621      	mov	r1, r4
 8080302:	4628      	mov	r0, r5
 8080304:	f001 fc81 	bl	8081c0a <_ZN7FatFile8openRootEP9FatVolume>
 8080308:	b168      	cbz	r0, 8080326 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 808030a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 808030e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080312:	bf16      	itet	ne
 8080314:	4b06      	ldrne	r3, [pc, #24]	; (8080330 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 8080316:	4618      	moveq	r0, r3
 8080318:	601d      	strne	r5, [r3, #0]
 808031a:	e005      	b.n	8080328 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 808031c:	4620      	mov	r0, r4
 808031e:	f002 f88e 	bl	808243e <_ZN9FatVolume4initEh>
 8080322:	2800      	cmp	r0, #0
 8080324:	d1ec      	bne.n	8080300 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 8080326:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 8080328:	b005      	add	sp, #20
 808032a:	bd30      	pop	{r4, r5, pc}
 808032c:	0808cc18 	.word	0x0808cc18
 8080330:	20000740 	.word	0x20000740

08080334 <_Z5Blinkv>:

//*******************************************************************************************
//------------------------------ Functions --------------------------------------------------
//
void Blink()
     {
 8080334:	b510      	push	{r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080336:	4c08      	ldr	r4, [pc, #32]	; (8080358 <_Z5Blinkv+0x24>)
 8080338:	2101      	movs	r1, #1
 808033a:	8820      	ldrh	r0, [r4, #0]
 808033c:	f007 ff59 	bl	80881f2 <digitalWrite>
            delay(20);                   // Waits for a sec
 8080340:	2014      	movs	r0, #20
 8080342:	f006 fab9 	bl	80868b8 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080346:	8820      	ldrh	r0, [r4, #0]
 8080348:	2100      	movs	r1, #0
 808034a:	f007 ff52 	bl	80881f2 <digitalWrite>
            delay(5);
          }
     }
 808034e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(20);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
 8080352:	2005      	movs	r0, #5
 8080354:	f006 bab0 	b.w	80868b8 <delay>
 8080358:	20000028 	.word	0x20000028

0808035c <_Z12LowBattBlinkv>:
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 808035c:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808035e:	4d0a      	ldr	r5, [pc, #40]	; (8080388 <_Z12LowBattBlinkv+0x2c>)
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
 8080360:	2402      	movs	r4, #2
          for (size_t i = 0; i < 2; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080362:	2101      	movs	r1, #1
 8080364:	8828      	ldrh	r0, [r5, #0]
 8080366:	f007 ff44 	bl	80881f2 <digitalWrite>
            delay(2000);                   // Waits for a sec
 808036a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808036e:	f006 faa3 	bl	80868b8 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080372:	2100      	movs	r1, #0
 8080374:	8828      	ldrh	r0, [r5, #0]
 8080376:	f007 ff3c 	bl	80881f2 <digitalWrite>
            delay(2000);
 808037a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808037e:	f006 fa9b 	bl	80868b8 <delay>
            delay(5);
          }
     }
void LowBattBlink() //slow blink blue twice
     {
          for (size_t i = 0; i < 2; i++)
 8080382:	3c01      	subs	r4, #1
 8080384:	d1ed      	bne.n	8080362 <_Z12LowBattBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(2000);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(2000);
          }
     }
 8080386:	bd38      	pop	{r3, r4, r5, pc}
 8080388:	20000028 	.word	0x20000028

0808038c <_Z15WeakSignalBlinkv>:

void WeakSignalBlink()
     {
 808038c:	b570      	push	{r4, r5, r6, lr}
          for (size_t i = 0; i < 10; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 808038e:	4e10      	ldr	r6, [pc, #64]	; (80803d0 <_Z15WeakSignalBlinkv+0x44>)
            delay(2000);
          }
     }

void WeakSignalBlink()
     {
 8080390:	240a      	movs	r4, #10
          for (size_t i = 0; i < 10; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080392:	2101      	movs	r1, #1
 8080394:	8830      	ldrh	r0, [r6, #0]
 8080396:	f007 ff2c 	bl	80881f2 <digitalWrite>
            delay(150);                   // Waits for a sec
 808039a:	2096      	movs	r0, #150	; 0x96
 808039c:	f006 fa8c 	bl	80868b8 <delay>
            digitalWrite(ledPin, LOW);    // Sets the LED off
 80803a0:	2100      	movs	r1, #0
 80803a2:	8830      	ldrh	r0, [r6, #0]
 80803a4:	f007 ff25 	bl	80881f2 <digitalWrite>
            delay(150);
 80803a8:	2096      	movs	r0, #150	; 0x96
 80803aa:	f006 fa85 	bl	80868b8 <delay>
          }
     }

void WeakSignalBlink()
     {
          for (size_t i = 0; i < 10; i++)
 80803ae:	3c01      	subs	r4, #1
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803b0:	4d07      	ldr	r5, [pc, #28]	; (80803d0 <_Z15WeakSignalBlinkv+0x44>)
          }
     }

void WeakSignalBlink()
     {
          for (size_t i = 0; i < 10; i++)
 80803b2:	d1ee      	bne.n	8080392 <_Z15WeakSignalBlinkv+0x6>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(150);                   // Waits for a sec
            digitalWrite(ledPin, LOW);    // Sets the LED off
            delay(150);
          }
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803b4:	2101      	movs	r1, #1
 80803b6:	8828      	ldrh	r0, [r5, #0]
 80803b8:	f007 ff1b 	bl	80881f2 <digitalWrite>
            delay(550);                   // Waits for a sec
 80803bc:	f240 2026 	movw	r0, #550	; 0x226
 80803c0:	f006 fa7a 	bl	80868b8 <delay>
            digitalWrite(ledPin, LOW);    // Sets the LED off
 80803c4:	4621      	mov	r1, r4
 80803c6:	8828      	ldrh	r0, [r5, #0]
     }
 80803c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            digitalWrite(ledPin, LOW);    // Sets the LED off
            delay(150);
          }
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(550);                   // Waits for a sec
            digitalWrite(ledPin, LOW);    // Sets the LED off
 80803cc:	f007 bf11 	b.w	80881f2 <digitalWrite>
 80803d0:	20000028 	.word	0x20000028

080803d4 <_Z11UploadBlinkv>:
     }

void UploadBlink()
     {
 80803d4:	b538      	push	{r3, r4, r5, lr}
          for (size_t i = 0; i < 1; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803d6:	4c11      	ldr	r4, [pc, #68]	; (808041c <_Z11UploadBlinkv+0x48>)
 80803d8:	2101      	movs	r1, #1
 80803da:	8820      	ldrh	r0, [r4, #0]
 80803dc:	f007 ff09 	bl	80881f2 <digitalWrite>
            delay(500);                   // Waits for a sec
 80803e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80803e4:	f006 fa68 	bl	80868b8 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 80803e8:	2100      	movs	r1, #0
 80803ea:	8820      	ldrh	r0, [r4, #0]
 80803ec:	f007 ff01 	bl	80881f2 <digitalWrite>
            delay(1000);
 80803f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80803f4:	f006 fa60 	bl	80868b8 <delay>
 80803f8:	2504      	movs	r5, #4
          }
          for (size_t i = 0; i < 4; i++)
          {
            digitalWrite(ledPin, HIGH);   // Sets the LED on
 80803fa:	2101      	movs	r1, #1
 80803fc:	8820      	ldrh	r0, [r4, #0]
 80803fe:	f007 fef8 	bl	80881f2 <digitalWrite>
            delay(50);                   // Waits for a sec
 8080402:	2032      	movs	r0, #50	; 0x32
 8080404:	f006 fa58 	bl	80868b8 <delay>
            digitalWrite(ledPin, LOW);   // Sets the LED on
 8080408:	2100      	movs	r1, #0
 808040a:	8820      	ldrh	r0, [r4, #0]
 808040c:	f007 fef1 	bl	80881f2 <digitalWrite>
            delay(50);
 8080410:	2032      	movs	r0, #50	; 0x32
 8080412:	f006 fa51 	bl	80868b8 <delay>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(500);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(1000);
          }
          for (size_t i = 0; i < 4; i++)
 8080416:	3d01      	subs	r5, #1
 8080418:	d1ef      	bne.n	80803fa <_Z11UploadBlinkv+0x26>
            digitalWrite(ledPin, HIGH);   // Sets the LED on
            delay(50);                   // Waits for a sec
            digitalWrite(ledPin, LOW);   // Sets the LED on
            delay(50);
          }
     }
 808041a:	bd38      	pop	{r3, r4, r5, pc}
 808041c:	20000028 	.word	0x20000028

08080420 <_Z12checkBatteryff>:

     int checkBattery(float charge,float V)
       {
 8080420:	b537      	push	{r0, r1, r2, r4, r5, lr}
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 8080422:	491d      	ldr	r1, [pc, #116]	; (8080498 <_Z12checkBatteryff+0x78>)
            delay(50);
          }
     }

     int checkBattery(float charge,float V)
       {
 8080424:	4605      	mov	r5, r0
         int min;
         if (charge>12.5)   //  testing seems to indicate unit stops connecting to internet when too low
 8080426:	f009 f9bd 	bl	80897a4 <__aeabi_fcmpgt>
 808042a:	b330      	cbz	r0, 808047a <_Z12checkBatteryff+0x5a>
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
 808042c:	491b      	ldr	r1, [pc, #108]	; (808049c <_Z12checkBatteryff+0x7c>)
 808042e:	4628      	mov	r0, r5
 8080430:	f009 f9b8 	bl	80897a4 <__aeabi_fcmpgt>
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 8080434:	491a      	ldr	r1, [pc, #104]	; (80804a0 <_Z12checkBatteryff+0x80>)
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 8080436:	2800      	cmp	r0, #0
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 8080438:	4628      	mov	r0, r5
           // with a FLCapacitor in parallel with battery, connection continues even when as low as 10%
           // discharging the Electron completely can render it "bricked".
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 808043a:	bf14      	ite	ne
 808043c:	f44f 7496 	movne.w	r4, #300	; 0x12c
 8080440:	f44f 7416 	moveq.w	r4, #600	; 0x258
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 8080444:	f009 f9ae 	bl	80897a4 <__aeabi_fcmpgt>
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 8080448:	4916      	ldr	r1, [pc, #88]	; (80804a4 <_Z12checkBatteryff+0x84>)
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 808044a:	2800      	cmp	r0, #0
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 808044c:	4628      	mov	r0, r5
           //   see: https://community.particle.io/t/bug-bounty-electron-not-booting-after-battery-discharges-completely/
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
 808044e:	bf18      	it	ne
 8080450:	2478      	movne	r4, #120	; 0x78
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 8080452:	f009 f9a7 	bl	80897a4 <__aeabi_fcmpgt>
                                 if (charge>75 )   min = 60;     // 30 minutes
 8080456:	4914      	ldr	r1, [pc, #80]	; (80804a8 <_Z12checkBatteryff+0x88>)
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 8080458:	2800      	cmp	r0, #0
                                 if (charge>75 )   min = 60;     // 30 minutes
 808045a:	4628      	mov	r0, r5
           //  Getting it wet will do that also. //   see: https://community.particle.io/t/recover-electron-from-beaver-attack/
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
 808045c:	bf18      	it	ne
 808045e:	245a      	movne	r4, #90	; 0x5a
                                 if (charge>75 )   min = 60;     // 30 minutes
 8080460:	f009 f9a0 	bl	80897a4 <__aeabi_fcmpgt>
                                     if (charge>80 )   min = 30;      // 15 minutes;
 8080464:	4911      	ldr	r1, [pc, #68]	; (80804ac <_Z12checkBatteryff+0x8c>)
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
                                 if (charge>75 )   min = 60;     // 30 minutes
 8080466:	2800      	cmp	r0, #0
                                     if (charge>80 )   min = 30;      // 15 minutes;
 8080468:	4628      	mov	r0, r5
                {
                 min = 600;  // 7 hours (420 min)  // values set to shorter intervals during code testing
                  if (charge>25 )   min = 300;    // 5 hours (300 min)
                     if (charge>50 )   min = 120;     // 2 hours (120 min)
                         if (charge>65 )   min = 90;   // 1 hours (60 min)
                                 if (charge>75 )   min = 60;     // 30 minutes
 808046a:	bf18      	it	ne
 808046c:	243c      	movne	r4, #60	; 0x3c
                                     if (charge>80 )   min = 30;      // 15 minutes;
 808046e:	f009 f999 	bl	80897a4 <__aeabi_fcmpgt>
 8080472:	2800      	cmp	r0, #0
 8080474:	bf18      	it	ne
 8080476:	241e      	movne	r4, #30
 8080478:	e00b      	b.n	8080492 <_Z12checkBatteryff+0x72>
                else
                 { // if battery below 25%, don't even try to connect but go to sleep for 9 hours
                   min = 432000;   // sleep 5 days if battery very low
              //   sprintf(publishStr, "not connecting, sleeping for %2i min to charge battery ", min);
              //     Serial.println(publishStr);
                   LowBattBlink();
 808047a:	f7ff ff6f 	bl	808035c <_Z12LowBattBlinkv>
                   // could add code to collect data and write to SD card, or set flag to use later to skip connecting
                   //System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);
                  System.sleep(SLEEP_MODE_DEEP, sleepInterval * min);
 808047e:	4b0c      	ldr	r3, [pc, #48]	; (80804b0 <_Z12checkBatteryff+0x90>)
 8080480:	4c0c      	ldr	r4, [pc, #48]	; (80804b4 <_Z12checkBatteryff+0x94>)
 8080482:	681a      	ldr	r2, [r3, #0]
 8080484:	4b0c      	ldr	r3, [pc, #48]	; (80804b8 <_Z12checkBatteryff+0x98>)
 8080486:	4362      	muls	r2, r4
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	2101      	movs	r1, #1
 808048c:	4668      	mov	r0, sp
 808048e:	f005 fcd1 	bl	8085e34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
                 }
           return min;
       }  // end of checkBattery
 8080492:	4620      	mov	r0, r4
 8080494:	b003      	add	sp, #12
 8080496:	bd30      	pop	{r4, r5, pc}
 8080498:	41480000 	.word	0x41480000
 808049c:	41c80000 	.word	0x41c80000
 80804a0:	42480000 	.word	0x42480000
 80804a4:	42820000 	.word	0x42820000
 80804a8:	42960000 	.word	0x42960000
 80804ac:	42a00000 	.word	0x42a00000
 80804b0:	2000002c 	.word	0x2000002c
 80804b4:	00069780 	.word	0x00069780
 80804b8:	200006ec 	.word	0x200006ec

080804bc <_Z12getMedianNumPii>:
   return averageVoltage;
  }  // end of getAvolts

// calculate a median for set of values in buffer
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
 80804bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80804be:	008b      	lsls	r3, r1, #2
 80804c0:	330a      	adds	r3, #10
 80804c2:	f023 0307 	bic.w	r3, r3, #7
 80804c6:	af00      	add	r7, sp, #0
 80804c8:	ebad 0d03 	sub.w	sp, sp, r3
 80804cc:	466b      	mov	r3, sp
 80804ce:	1e4a      	subs	r2, r1, #1
 80804d0:	2400      	movs	r4, #0
    for (byte i = 0; i<iFilterLen; i++)
 80804d2:	b2e5      	uxtb	r5, r4
 80804d4:	42a9      	cmp	r1, r5
 80804d6:	f104 0401 	add.w	r4, r4, #1
 80804da:	dc01      	bgt.n	80804e0 <_Z12getMedianNumPii+0x24>
 80804dc:	2400      	movs	r4, #0
 80804de:	e010      	b.n	8080502 <_Z12getMedianNumPii+0x46>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
 80804e0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80804e4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
  }  // end of getAvolts

// calculate a median for set of values in buffer
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
 80804e8:	e7f3      	b.n	80804d2 <_Z12getMedianNumPii+0x16>
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
           {  if (bTab[i] > bTab[i + 1])
 80804ea:	6806      	ldr	r6, [r0, #0]
 80804ec:	f850 ef04 	ldr.w	lr, [r0, #4]!
 80804f0:	3501      	adds	r5, #1
 80804f2:	4576      	cmp	r6, lr
 80804f4:	dd02      	ble.n	80804fc <_Z12getMedianNumPii+0x40>
              {  bTemp = bTab[i];
                 bTab[i] = bTab[i + 1];
 80804f6:	f840 ec04 	str.w	lr, [r0, #-4]
                 bTab[i + 1] = bTemp;
 80804fa:	6006      	str	r6, [r0, #0]
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 80804fc:	4565      	cmp	r5, ip
 80804fe:	dbf4      	blt.n	80804ea <_Z12getMedianNumPii+0x2e>
int getMedianNum(int bArray[], int iFilterLen)
{     int bTab[iFilterLen];
    for (byte i = 0; i<iFilterLen; i++)
            bTab[i] = bArray[i];                  // copy input array into BTab[] array
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
 8080500:	3401      	adds	r4, #1
 8080502:	4294      	cmp	r4, r2
 8080504:	da04      	bge.n	8080510 <_Z12getMedianNumPii+0x54>
 8080506:	4618      	mov	r0, r3
 8080508:	2500      	movs	r5, #0
         {  for (i = 0; i < iFilterLen - j - 1; i++)
 808050a:	ebc4 0c02 	rsb	ip, r4, r2
 808050e:	e7f5      	b.n	80804fc <_Z12getMedianNumPii+0x40>
                 bTab[i] = bTab[i + 1];
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
 8080510:	f011 0f01 	tst.w	r1, #1
 8080514:	f04f 0402 	mov.w	r4, #2
 8080518:	bf01      	itttt	eq
 808051a:	fb91 f1f4 	sdiveq	r1, r1, r4
 808051e:	eb03 0281 	addeq.w	r2, r3, r1, lsl #2
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080522:	f853 0021 	ldreq.w	r0, [r3, r1, lsl #2]
 8080526:	f852 3c04 	ldreq.w	r3, [r2, #-4]
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 808052a:	bf13      	iteet	ne
 808052c:	fb92 f2f4 	sdivne	r2, r2, r4
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080530:	18c0      	addeq	r0, r0, r3
 8080532:	fb90 f0f4 	sdiveq	r0, r0, r4
                 bTab[i + 1] = bTemp;
               }
            }
          }
   if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
        bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 8080536:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
    else
       bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
  return bTemp;
} //end getmedianNum
 808053a:	46bd      	mov	sp, r7
 808053c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080540 <_Z6getSpCv>:
  float getDepth ()
  ...
*/
// get SpC value from sensor
  float getSpC()
   {
 8080540:	b5f0      	push	{r4, r5, r6, r7, lr}
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080542:	4d43      	ldr	r5, [pc, #268]	; (8080650 <_Z6getSpCv+0x110>)
  float getDepth ()
  ...
*/
// get SpC value from sensor
  float getSpC()
   {
 8080544:	b0d1      	sub	sp, #324	; 0x144
      #define VREF 3.3      // analog reference voltage(Volt) of the ADC
      #define SCOUNT  40           // number of sample points to collect for averaging
      #define resolution 4095.0  // analog resolution of 4095 with Particle electron
      int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
 8080546:	2400      	movs	r4, #0
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
        {
           analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080548:	8828      	ldrh	r0, [r5, #0]
 808054a:	f007 fe6b 	bl	8088224 <analogRead>
 808054e:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
           analogBufferIndex++;
 8080552:	3401      	adds	r4, #1
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
 8080554:	2032      	movs	r0, #50	; 0x32
 8080556:	f006 f9af 	bl	80868b8 <delay>
      int analogBufferTemp[SCOUNT];
      int analogBufferIndex = 0,  copyIndex = 0;
      float averageVoltage = 0;
      float SpC = -1.1;

      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 808055a:	2c28      	cmp	r4, #40	; 0x28
 808055c:	d1f4      	bne.n	8080548 <_Z6getSpCv+0x8>
 808055e:	2100      	movs	r1, #0
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
 8080560:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 8080564:	a828      	add	r0, sp, #160	; 0xa0
 8080566:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  //         if(analogBufferIndex == SCOUNT)
            delay(50u);  //delay 50 milliseconds between taking sample
        }
      analogBufferIndex = 0;

      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 808056a:	3101      	adds	r1, #1
 808056c:	2928      	cmp	r1, #40	; 0x28
 808056e:	d1f7      	bne.n	8080560 <_Z6getSpCv+0x20>
                 analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 8080570:	f7ff ffa4 	bl	80804bc <_Z12getMedianNumPii>
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 8080574:	f008 ff06 	bl	8089384 <__aeabi_i2f>
 8080578:	4936      	ldr	r1, [pc, #216]	; (8080654 <_Z6getSpCv+0x114>)
 808057a:	f008 ff57 	bl	808942c <__aeabi_fmul>
 808057e:	4936      	ldr	r1, [pc, #216]	; (8080658 <_Z6getSpCv+0x118>)
 8080580:	f009 f808 	bl	8089594 <__aeabi_fdiv>
 8080584:	f008 fabe 	bl	8088b04 <__aeabi_f2d>
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080588:	a329      	add	r3, pc, #164	; (adr r3, 8080630 <_Z6getSpCv+0xf0>)
 808058a:	e9d3 2300 	ldrd	r2, r3, [r3]
            - 255.86*compensationVolatge*compensationVolatge
            + 857.39*compensationVolatge)*0.5*K; //convert voltage value to tds value and multiply by calibration K.
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 808058e:	4604      	mov	r4, r0
 8080590:	460d      	mov	r5, r1
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080592:	f008 fb0b 	bl	8088bac <__aeabi_dmul>
 8080596:	4622      	mov	r2, r4
 8080598:	462b      	mov	r3, r5
 808059a:	f008 fb07 	bl	8088bac <__aeabi_dmul>
 808059e:	4622      	mov	r2, r4
 80805a0:	462b      	mov	r3, r5
 80805a2:	f008 fb03 	bl	8088bac <__aeabi_dmul>
 80805a6:	a324      	add	r3, pc, #144	; (adr r3, 8080638 <_Z6getSpCv+0xf8>)
 80805a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805ac:	4606      	mov	r6, r0
 80805ae:	460f      	mov	r7, r1
 80805b0:	4620      	mov	r0, r4
 80805b2:	4629      	mov	r1, r5
 80805b4:	f008 fafa 	bl	8088bac <__aeabi_dmul>
 80805b8:	4622      	mov	r2, r4
 80805ba:	462b      	mov	r3, r5
 80805bc:	f008 faf6 	bl	8088bac <__aeabi_dmul>
 80805c0:	4602      	mov	r2, r0
 80805c2:	460b      	mov	r3, r1
 80805c4:	4630      	mov	r0, r6
 80805c6:	4639      	mov	r1, r7
 80805c8:	f008 f93e 	bl	8088848 <__adddf3>
 80805cc:	a31c      	add	r3, pc, #112	; (adr r3, 8080640 <_Z6getSpCv+0x100>)
 80805ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805d2:	4606      	mov	r6, r0
 80805d4:	460f      	mov	r7, r1
 80805d6:	4620      	mov	r0, r4
 80805d8:	4629      	mov	r1, r5
 80805da:	f008 fae7 	bl	8088bac <__aeabi_dmul>
 80805de:	4602      	mov	r2, r0
 80805e0:	460b      	mov	r3, r1
 80805e2:	4630      	mov	r0, r6
 80805e4:	4639      	mov	r1, r7
 80805e6:	f008 f92f 	bl	8088848 <__adddf3>
                                            //made more stable by the median filtering algorithm, and convert to voltage value
///      Serial.print(t2);   // temperature comes from a different sensor, outside this function.
///      Serial.println(" deg.C at start");
///      Serial.print("median analog reading= "); Serial.println(getMedianNum(analogBufferTemp,SCOUNT));
///      Serial.print("averageVoltage= "); Serial.println(averageVoltage);
      float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 80805ea:	4b1c      	ldr	r3, [pc, #112]	; (808065c <_Z6getSpCv+0x11c>)
*/
// coefficients for the following equation derived from calibration to
 // hundreds of specific conductance readings taken at SandL04 by an Onset logger running in parallel with the Spudnik
       SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
            + 24.823*averageVoltage*averageVoltage
            + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 80805ec:	4604      	mov	r4, r0
 80805ee:	6818      	ldr	r0, [r3, #0]
 80805f0:	460d      	mov	r5, r1
 80805f2:	f008 fa87 	bl	8088b04 <__aeabi_f2d>
 80805f6:	2200      	movs	r2, #0
 80805f8:	4b19      	ldr	r3, [pc, #100]	; (8080660 <_Z6getSpCv+0x120>)
 80805fa:	f008 f923 	bl	8088844 <__aeabi_dsub>
 80805fe:	a312      	add	r3, pc, #72	; (adr r3, 8080648 <_Z6getSpCv+0x108>)
 8080600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080604:	f008 fad2 	bl	8088bac <__aeabi_dmul>
 8080608:	2200      	movs	r2, #0
 808060a:	4b16      	ldr	r3, [pc, #88]	; (8080664 <_Z6getSpCv+0x124>)
 808060c:	f008 f91c 	bl	8088848 <__adddf3>
 8080610:	f008 fdae 	bl	8089170 <__aeabi_d2f>
 8080614:	f008 fa76 	bl	8088b04 <__aeabi_f2d>
 8080618:	4602      	mov	r2, r0
 808061a:	460b      	mov	r3, r1
 808061c:	4620      	mov	r0, r4
 808061e:	4629      	mov	r1, r5
 8080620:	f008 fbee 	bl	8088e00 <__aeabi_ddiv>
 8080624:	f008 fda4 	bl	8089170 <__aeabi_d2f>

    //  Serial.print("SpC Value: ");
    //  Serial.println(SpC,2);
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC
 8080628:	b051      	add	sp, #324	; 0x144
 808062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808062c:	f3af 8000 	nop.w
 8080630:	8f5c28f6 	.word	0x8f5c28f6
 8080634:	4032d5c2 	.word	0x4032d5c2
 8080638:	20c49ba6 	.word	0x20c49ba6
 808063c:	4038d2b0 	.word	0x4038d2b0
 8080640:	4fdf3b64 	.word	0x4fdf3b64
 8080644:	4083818d 	.word	0x4083818d
 8080648:	6a7ef9db 	.word	0x6a7ef9db
 808064c:	3f9374bc 	.word	0x3f9374bc
 8080650:	20000010 	.word	0x20000010
 8080654:	40533333 	.word	0x40533333
 8080658:	457ff000 	.word	0x457ff000
 808065c:	20000024 	.word	0x20000024
 8080660:	40390000 	.word	0x40390000
 8080664:	3ff00000 	.word	0x3ff00000

08080668 <_Z9getAvoltsv>:

// get averageVolts value from sensor.  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 8080668:	b530      	push	{r4, r5, lr}
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 808066a:	4d11      	ldr	r5, [pc, #68]	; (80806b0 <_Z9getAvoltsv+0x48>)
      return SpC;  //adjust SpC by correction factor
   }  // end of getSpC

// get averageVolts value from sensor.  This can be sent to Ubidots for use later to calculate Specific Conductance
float getAvolts()
  {
 808066c:	b0d1      	sub	sp, #324	; 0x144
     #define VREF 3.3      // analog reference voltage(Volt) of the ADC
     #define SCOUNT  40           // number of sample points to collect for averaging
     #define resolution 4095.0  // analog resolution of 4095 with Particle electron
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
 808066e:	2400      	movs	r4, #0
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
       {
          analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080670:	8828      	ldrh	r0, [r5, #0]
 8080672:	f007 fdd7 	bl	8088224 <analogRead>
 8080676:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
          analogBufferIndex++;
 808067a:	3401      	adds	r4, #1
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
 808067c:	2032      	movs	r0, #50	; 0x32
 808067e:	f006 f91b 	bl	80868b8 <delay>
     int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
     int analogBufferTemp[SCOUNT];
     int analogBufferIndex = 0, copyIndex = 0;
     float averageVoltage = 0;

     while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 8080682:	2c28      	cmp	r4, #40	; 0x28
 8080684:	d1f4      	bne.n	8080670 <_Z9getAvoltsv+0x8>
 8080686:	2100      	movs	r1, #0
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
 8080688:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
 808068c:	a828      	add	r0, sp, #160	; 0xa0
 808068e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
          analogBufferIndex++;
 //         if(analogBufferIndex == SCOUNT)
           delay(50u);  //delay 50 milliseconds between taking sample
       }
       // copy one array to another
     for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 8080692:	3101      	adds	r1, #1
 8080694:	2928      	cmp	r1, #40	; 0x28
 8080696:	d1f7      	bne.n	8080688 <_Z9getAvoltsv+0x20>
        {
            analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
        }
     averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 8080698:	f7ff ff10 	bl	80804bc <_Z12getMedianNumPii>
             // remember particle board has analog resolution of 4095
             //made more stable by the median filtering algorithm, and convert to voltage value
   return averageVoltage;
 808069c:	f008 fe72 	bl	8089384 <__aeabi_i2f>
 80806a0:	4904      	ldr	r1, [pc, #16]	; (80806b4 <_Z9getAvoltsv+0x4c>)
 80806a2:	f008 fec3 	bl	808942c <__aeabi_fmul>
 80806a6:	4904      	ldr	r1, [pc, #16]	; (80806b8 <_Z9getAvoltsv+0x50>)
 80806a8:	f008 ff74 	bl	8089594 <__aeabi_fdiv>
  }  // end of getAvolts
 80806ac:	b051      	add	sp, #324	; 0x144
 80806ae:	bd30      	pop	{r4, r5, pc}
 80806b0:	20000010 	.word	0x20000010
 80806b4:	40533333 	.word	0x40533333
 80806b8:	457ff000 	.word	0x457ff000

080806bc <_Z7waitSecm>:
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
    Particle.process();
}
 //  create a Delay using timer, safer than delay()
inline void waitSec(uint32_t seconds) {
 80806bc:	b570      	push	{r4, r5, r6, lr}
 80806be:	4606      	mov	r6, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80806c0:	f004 fe4e 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t sec = (millis()/1000); (millis()/1000) - sec < seconds; Particle.process());
 80806c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80806c8:	fbb0 f5f3 	udiv	r5, r0, r3
 80806cc:	461c      	mov	r4, r3
 80806ce:	f004 fe47 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
 80806d2:	fbb0 f0f4 	udiv	r0, r0, r4
 80806d6:	1b40      	subs	r0, r0, r5
 80806d8:	42b0      	cmp	r0, r6
 80806da:	d204      	bcs.n	80806e6 <_Z7waitSecm+0x2a>
		last_checkin = current_time();
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 80806dc:	f7ff fd78 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80806e0:	f005 f8aa 	bl	8085838 <spark_process>
 80806e4:	e7f3      	b.n	80806ce <_Z7waitSecm+0x12>
 80806e6:	bd70      	pop	{r4, r5, r6, pc}

080806e8 <_Z11writeHeaderv>:
            }
    }
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
    {
 80806e8:	b510      	push	{r4, lr}
        file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
 80806ea:	4c05      	ldr	r4, [pc, #20]	; (8080700 <_Z11writeHeaderv+0x18>)
 80806ec:	4905      	ldr	r1, [pc, #20]	; (8080704 <_Z11writeHeaderv+0x1c>)
 80806ee:	4620      	mov	r0, r4
 80806f0:	f005 ff4d 	bl	808658e <_ZN5Print5printEPK19__FlashStringHelper>
        file.println();
 80806f4:	4620      	mov	r0, r4
    }
 80806f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//------------------------------------------------------------------------------
// Write data header.
void writeHeader()
    {
        file.print(F("datetime, t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts"));
        file.println();
 80806fa:	f005 bf4c 	b.w	8086596 <_ZN5Print7printlnEv>
 80806fe:	bf00      	nop
 8080700:	200006f0 	.word	0x200006f0
 8080704:	0808cc80 	.word	0x0808cc80

08080708 <_Z8setup_SDv>:
//  Edit writeHeader() and logData() for your requirements.
//-------------------------------------------------------------------------------
//setup the sd card

void setup_SD()
    {
 8080708:	b5f0      	push	{r4, r5, r6, r7, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 808070a:	4a59      	ldr	r2, [pc, #356]	; (8080870 <_Z8setup_SDv+0x168>)
 808070c:	b093      	sub	sp, #76	; 0x4c
 808070e:	4b59      	ldr	r3, [pc, #356]	; (8080874 <_Z8setup_SDv+0x16c>)
 8080710:	920b      	str	r2, [sp, #44]	; 0x2c
 8080712:	2201      	movs	r2, #1
 8080714:	9309      	str	r3, [sp, #36]	; 0x24
 8080716:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 808071a:	2300      	movs	r3, #0
      //char works[3];
       if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sprintf(works,"No ");   }
 808071c:	aa09      	add	r2, sp, #36	; 0x24
 808071e:	210c      	movs	r1, #12
 8080720:	4855      	ldr	r0, [pc, #340]	; (8080878 <_Z8setup_SDv+0x170>)
 8080722:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8080726:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 808072a:	f7ff fdc3 	bl	80802b4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 808072e:	b908      	cbnz	r0, 8080734 <_Z8setup_SDv+0x2c>
 8080730:	4952      	ldr	r1, [pc, #328]	; (808087c <_Z8setup_SDv+0x174>)
 8080732:	e000      	b.n	8080736 <_Z8setup_SDv+0x2e>
          else { sprintf(works,"Yes "); }
 8080734:	4952      	ldr	r1, [pc, #328]	; (8080880 <_Z8setup_SDv+0x178>)
 8080736:	4853      	ldr	r0, [pc, #332]	; (8080884 <_Z8setup_SDv+0x17c>)
 8080738:	f009 fbee 	bl	8089f18 <strcpy>
        Time.zone(-6);  // setup to CST time zone, which is part of the ISO8601 format        //**
 808073c:	4852      	ldr	r0, [pc, #328]	; (8080888 <_Z8setup_SDv+0x180>)
 808073e:	f005 ffb7 	bl	80866b0 <_ZN9TimeClass4zoneEf>
        //if(Time.year() < 2020)

        ///  fileName = String("lost-time000.jpg");   
  
        if(! Time.isValid())
 8080742:	f006 f887 	bl	8086854 <_ZN9TimeClass7isValidEv>
 8080746:	4e51      	ldr	r6, [pc, #324]	; (808088c <_Z8setup_SDv+0x184>)
 8080748:	4604      	mov	r4, r0
 808074a:	bba8      	cbnz	r0, 80807b8 <_Z8setup_SDv+0xb0>
        {
               fileName = String("lost-time000.csv");         
 808074c:	4950      	ldr	r1, [pc, #320]	; (8080890 <_Z8setup_SDv+0x188>)
 808074e:	a809      	add	r0, sp, #36	; 0x24
 8080750:	f005 fe59 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>
 8080754:	a909      	add	r1, sp, #36	; 0x24
 8080756:	4630      	mov	r0, r6
 8080758:	f005 fe9f 	bl	808649a <_ZN6StringaSEOS_>
 808075c:	a809      	add	r0, sp, #36	; 0x24
 808075e:	f005 fe0b 	bl	8086378 <_ZN6StringD1Ev>
               //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName[9] = '0' + i/100;
            fileName[10] = '0' + i/10;
 8080762:	270a      	movs	r7, #10
        if(! Time.isValid())
        {
               fileName = String("lost-time000.csv");         
               //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
            fileName[9] = '0' + i/100;
 8080764:	2109      	movs	r1, #9
 8080766:	4849      	ldr	r0, [pc, #292]	; (808088c <_Z8setup_SDv+0x184>)
 8080768:	f005 fee6 	bl	8086538 <_ZN6StringixEj>
 808076c:	2364      	movs	r3, #100	; 0x64
 808076e:	fb94 f3f3 	sdiv	r3, r4, r3
 8080772:	3330      	adds	r3, #48	; 0x30
 8080774:	7003      	strb	r3, [r0, #0]
            fileName[10] = '0' + i/10;
 8080776:	210a      	movs	r1, #10
 8080778:	4844      	ldr	r0, [pc, #272]	; (808088c <_Z8setup_SDv+0x184>)
 808077a:	f005 fedd 	bl	8086538 <_ZN6StringixEj>
 808077e:	fb94 f5f7 	sdiv	r5, r4, r7
 8080782:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8080786:	7003      	strb	r3, [r0, #0]
            fileName[11] = '0' + i%10;
 8080788:	210b      	movs	r1, #11
 808078a:	4840      	ldr	r0, [pc, #256]	; (808088c <_Z8setup_SDv+0x184>)
 808078c:	f005 fed4 	bl	8086538 <_ZN6StringixEj>
 8080790:	fb07 4515 	mls	r5, r7, r5, r4
 8080794:	3530      	adds	r5, #48	; 0x30
 8080796:	7005      	strb	r5, [r0, #0]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080798:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 808079a:	6832      	ldr	r2, [r6, #0]
 808079c:	493d      	ldr	r1, [pc, #244]	; (8080894 <_Z8setup_SDv+0x18c>)
 808079e:	a809      	add	r0, sp, #36	; 0x24
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80807a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80807a4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 80807a8:	f001 fc0b 	bl	8081fc2 <_ZN7FatFile4openEPS_PKci>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
 80807ac:	b368      	cbz	r0, 808080a <_Z8setup_SDv+0x102>
  
        if(! Time.isValid())
        {
               fileName = String("lost-time000.csv");         
               //       /// strcpy(fileName, "lost-time000.jpg");      
          for (int i = 0; i < 1000; i++) {
 80807ae:	3401      	adds	r4, #1
 80807b0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80807b4:	d1d6      	bne.n	8080764 <_Z8setup_SDv+0x5c>
 80807b6:	e028      	b.n	808080a <_Z8setup_SDv+0x102>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80807b8:	4937      	ldr	r1, [pc, #220]	; (8080898 <_Z8setup_SDv+0x190>)
 80807ba:	a801      	add	r0, sp, #4
 80807bc:	f005 fe62 	bl	8086484 <_ZN6StringC1ERKS_>
            // create if does not exist, do not open existing, write, sync after write
          if (!sd.exists(fileName)) {  break;  }
          }
        }
          else
             fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%d") + ".csv");    //**
 80807c0:	4936      	ldr	r1, [pc, #216]	; (808089c <_Z8setup_SDv+0x194>)
 80807c2:	a801      	add	r0, sp, #4
 80807c4:	f005 fe94 	bl	80864f0 <_ZplRK15StringSumHelperPKc>
 80807c8:	4604      	mov	r4, r0
 80807ca:	f006 f864 	bl	8086896 <_ZN9TimeClass3nowEv>
 80807ce:	4b34      	ldr	r3, [pc, #208]	; (80808a0 <_Z8setup_SDv+0x198>)
 80807d0:	4602      	mov	r2, r0
 80807d2:	4934      	ldr	r1, [pc, #208]	; (80808a4 <_Z8setup_SDv+0x19c>)
 80807d4:	a805      	add	r0, sp, #20
 80807d6:	f006 f80b 	bl	80867f0 <_ZN9TimeClass6formatElPKc>
 80807da:	a905      	add	r1, sp, #20
 80807dc:	4620      	mov	r0, r4
 80807de:	f005 fe7b 	bl	80864d8 <_ZplRK15StringSumHelperRK6String>
 80807e2:	4931      	ldr	r1, [pc, #196]	; (80808a8 <_Z8setup_SDv+0x1a0>)
 80807e4:	f005 fe84 	bl	80864f0 <_ZplRK15StringSumHelperPKc>
 80807e8:	4601      	mov	r1, r0
 80807ea:	a809      	add	r0, sp, #36	; 0x24
 80807ec:	f005 fe4a 	bl	8086484 <_ZN6StringC1ERKS_>
 80807f0:	a909      	add	r1, sp, #36	; 0x24
 80807f2:	4630      	mov	r0, r6
 80807f4:	f005 fe51 	bl	808649a <_ZN6StringaSEOS_>
 80807f8:	a809      	add	r0, sp, #36	; 0x24
 80807fa:	f005 fdbd 	bl	8086378 <_ZN6StringD1Ev>
 80807fe:	a805      	add	r0, sp, #20
 8080800:	f005 fdba 	bl	8086378 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080804:	a801      	add	r0, sp, #4
 8080806:	f005 fdb7 	bl	8086378 <_ZN6StringD1Ev>
        Serial.println(fileName + " filename");
 808080a:	f006 fffd 	bl	8087808 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808080e:	4c1f      	ldr	r4, [pc, #124]	; (808088c <_Z8setup_SDv+0x184>)
 8080810:	4605      	mov	r5, r0
 8080812:	4621      	mov	r1, r4
 8080814:	a809      	add	r0, sp, #36	; 0x24
 8080816:	f005 fe35 	bl	8086484 <_ZN6StringC1ERKS_>
 808081a:	4924      	ldr	r1, [pc, #144]	; (80808ac <_Z8setup_SDv+0x1a4>)
 808081c:	a809      	add	r0, sp, #36	; 0x24
 808081e:	f005 fe67 	bl	80864f0 <_ZplRK15StringSumHelperPKc>
 8080822:	6801      	ldr	r1, [r0, #0]
 8080824:	4628      	mov	r0, r5
 8080826:	f005 fec2 	bl	80865ae <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808082a:	a809      	add	r0, sp, #36	; 0x24
 808082c:	f005 fda4 	bl	8086378 <_ZN6StringD1Ev>
        //if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sd.initErrorHalt();   }
        //sprintf(publishStr,
   ///     if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sprintf(works,"No ");   }
  ///      else { sprintf(works,"Yes "); }
        //sd.begin(chipSelect, SD_SCK_MHZ(20)); 
             Serial.println(works);
 8080830:	f006 ffea 	bl	8087808 <_Z16_fetch_usbserialv>
 8080834:	4913      	ldr	r1, [pc, #76]	; (8080884 <_Z8setup_SDv+0x17c>)
 8080836:	f005 feba 	bl	80865ae <_ZN5Print7printlnEPKc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808083a:	2300      	movs	r3, #0
 808083c:	6832      	ldr	r2, [r6, #0]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 808083e:	4915      	ldr	r1, [pc, #84]	; (8080894 <_Z8setup_SDv+0x18c>)
 8080840:	a809      	add	r0, sp, #36	; 0x24
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080842:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8080846:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 808084a:	f001 fbba 	bl	8081fc2 <_ZN7FatFile4openEPS_PKci>
        if(sd.exists(fileName))
 808084e:	b128      	cbz	r0, 808085c <_Z8setup_SDv+0x154>
            {  file.open(fileName, O_WRONLY | O_APPEND);  }
 8080850:	2209      	movs	r2, #9
 8080852:	6821      	ldr	r1, [r4, #0]
 8080854:	4816      	ldr	r0, [pc, #88]	; (80808b0 <_Z8setup_SDv+0x1a8>)
 8080856:	f7ff fd25 	bl	80802a4 <_ZN7FatFile4openEPKci>
 808085a:	e007      	b.n	808086c <_Z8setup_SDv+0x164>
            else
            {
                file.open(fileName, O_WRONLY |O_CREAT | O_EXCL);
 808085c:	f640 2201 	movw	r2, #2561	; 0xa01
 8080860:	6821      	ldr	r1, [r4, #0]
 8080862:	4813      	ldr	r0, [pc, #76]	; (80808b0 <_Z8setup_SDv+0x1a8>)
 8080864:	f7ff fd1e 	bl	80802a4 <_ZN7FatFile4openEPKci>
                writeHeader();
 8080868:	f7ff ff3e 	bl	80806e8 <_Z11writeHeaderv>
            }
    }
 808086c:	b013      	add	sp, #76	; 0x4c
 808086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080870:	01c9c380 	.word	0x01c9c380
 8080874:	0808cc18 	.word	0x0808cc18
 8080878:	20000160 	.word	0x20000160
 808087c:	0808ccb8 	.word	0x0808ccb8
 8080880:	0808ccbc 	.word	0x0808ccbc
 8080884:	2000073a 	.word	0x2000073a
 8080888:	c0c00000 	.word	0xc0c00000
 808088c:	200005e4 	.word	0x200005e4
 8080890:	0808ccc1 	.word	0x0808ccc1
 8080894:	2000059c 	.word	0x2000059c
 8080898:	200006cc 	.word	0x200006cc
 808089c:	0808ccd2 	.word	0x0808ccd2
 80808a0:	0808ccd4 	.word	0x0808ccd4
 80808a4:	20000944 	.word	0x20000944
 80808a8:	0808cccd 	.word	0x0808cccd
 80808ac:	0808ccda 	.word	0x0808ccda
 80808b0:	200006f8 	.word	0x200006f8

080808b4 <_Z7logDataPc>:
        file.println();
    }
//------------------------------------------------------------------------------
// Log a data record.
    void logData(char data[256])
    {
 80808b4:	b530      	push	{r4, r5, lr}
 80808b6:	b085      	sub	sp, #20
 80808b8:	4605      	mov	r5, r0
        // Write data to file.
        time_t time = Time.now();
 80808ba:	f005 ffec 	bl	8086896 <_ZN9TimeClass3nowEv>
        ///  Time.zone(-6);  // setup a time zone, which is part of the ISO8601 format
        file.print(Time.format(time, TIME_FORMAT_ISO8601_FULL)); // e.g. 2004-01-10T08:22:04-06:00
 80808be:	4b0e      	ldr	r3, [pc, #56]	; (80808f8 <_Z7logDataPc+0x44>)
 80808c0:	4c0e      	ldr	r4, [pc, #56]	; (80808fc <_Z7logDataPc+0x48>)
 80808c2:	4602      	mov	r2, r0
 80808c4:	681b      	ldr	r3, [r3, #0]
 80808c6:	4668      	mov	r0, sp
 80808c8:	490d      	ldr	r1, [pc, #52]	; (8080900 <_Z7logDataPc+0x4c>)
 80808ca:	f005 ff91 	bl	80867f0 <_ZN9TimeClass6formatElPKc>
 80808ce:	9900      	ldr	r1, [sp, #0]
 80808d0:	4620      	mov	r0, r4
 80808d2:	f005 fe55 	bl	8086580 <_ZN5Print5printEPKc>
 80808d6:	4668      	mov	r0, sp
 80808d8:	f005 fd4e 	bl	8086378 <_ZN6StringD1Ev>

    //    Particle.publish("battery1", data, 60, PRIVATE);
        delay(500);
 80808dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80808e0:	f005 ffea 	bl	80868b8 <delay>
        file.print(data);
 80808e4:	4629      	mov	r1, r5
 80808e6:	4620      	mov	r0, r4
 80808e8:	f005 fe4a 	bl	8086580 <_ZN5Print5printEPKc>
        file.println();
 80808ec:	4620      	mov	r0, r4
 80808ee:	f005 fe52 	bl	8086596 <_ZN5Print7printlnEv>
    }
 80808f2:	b005      	add	sp, #20
 80808f4:	bd30      	pop	{r4, r5, pc}
 80808f6:	bf00      	nop
 80808f8:	2000004c 	.word	0x2000004c
 80808fc:	200006f0 	.word	0x200006f0
 8080900:	20000944 	.word	0x20000944

08080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080904:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080906:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080908:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808090a:	b17c      	cbz	r4, 808092c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808090c:	6863      	ldr	r3, [r4, #4]
 808090e:	3b01      	subs	r3, #1
 8080910:	6063      	str	r3, [r4, #4]
 8080912:	b95b      	cbnz	r3, 808092c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080914:	6823      	ldr	r3, [r4, #0]
 8080916:	4620      	mov	r0, r4
 8080918:	689b      	ldr	r3, [r3, #8]
 808091a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808091c:	68a3      	ldr	r3, [r4, #8]
 808091e:	3b01      	subs	r3, #1
 8080920:	60a3      	str	r3, [r4, #8]
 8080922:	b91b      	cbnz	r3, 808092c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080924:	6823      	ldr	r3, [r4, #0]
 8080926:	4620      	mov	r0, r4
 8080928:	68db      	ldr	r3, [r3, #12]
 808092a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808092c:	4628      	mov	r0, r5
 808092e:	bd38      	pop	{r3, r4, r5, pc}

08080930 <_Z8close_SDv>:
//--------------------------------------------------------------------------------
//close down the SD card
void close_SD()
    {
 8080930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
         // Force data to SD and update the directory entry to avoid data loss.
     /// if (!file.sync() || file.getWriteError()) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 8080932:	4812      	ldr	r0, [pc, #72]	; (808097c <_Z8close_SDv+0x4c>)
 8080934:	f001 fb08 	bl	8081f48 <_ZN7FatFile4syncEv>
 8080938:	b960      	cbnz	r0, 8080954 <_Z8close_SDv+0x24>
 808093a:	4b11      	ldr	r3, [pc, #68]	; (8080980 <_Z8close_SDv+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808093c:	a802      	add	r0, sp, #8
 808093e:	781b      	ldrb	r3, [r3, #0]
 8080940:	4a10      	ldr	r2, [pc, #64]	; (8080984 <_Z8close_SDv+0x54>)
 8080942:	f88d 3000 	strb.w	r3, [sp]
 8080946:	4910      	ldr	r1, [pc, #64]	; (8080988 <_Z8close_SDv+0x58>)
 8080948:	233c      	movs	r3, #60	; 0x3c
 808094a:	f006 fd0b 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808094e:	a803      	add	r0, sp, #12
 8080950:	f7ff ffd8 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080954:	4809      	ldr	r0, [pc, #36]	; (808097c <_Z8close_SDv+0x4c>)
 8080956:	f001 faf7 	bl	8081f48 <_ZN7FatFile4syncEv>
        //  if (Serial.available()) {
        // Close file and stop.
        file.flush();
        file.close();
 808095a:	4808      	ldr	r0, [pc, #32]	; (808097c <_Z8close_SDv+0x4c>)
 808095c:	f001 fb2a 	bl	8081fb4 <_ZN7FatFile5closeEv>
           sprintf(publishStr, "SD-write worked: %s", works);
 8080960:	4a0a      	ldr	r2, [pc, #40]	; (808098c <_Z8close_SDv+0x5c>)
 8080962:	490b      	ldr	r1, [pc, #44]	; (8080990 <_Z8close_SDv+0x60>)
 8080964:	480b      	ldr	r0, [pc, #44]	; (8080994 <_Z8close_SDv+0x64>)
 8080966:	f004 ffb7 	bl	80858d8 <sprintf>
      Serial.println((publishStr));
 808096a:	f006 ff4d 	bl	8087808 <_Z16_fetch_usbserialv>
 808096e:	4909      	ldr	r1, [pc, #36]	; (8080994 <_Z8close_SDv+0x64>)
 8080970:	f005 fe1d 	bl	80865ae <_ZN5Print7printlnEPKc>
    //    Particle.publish("Log", "SD_done", 60, PRIVATE);
        //    SysCall::halt();
    }
 8080974:	b005      	add	sp, #20
 8080976:	f85d fb04 	ldr.w	pc, [sp], #4
 808097a:	bf00      	nop
 808097c:	200006f8 	.word	0x200006f8
 8080980:	200006dc 	.word	0x200006dc
 8080984:	0808cce4 	.word	0x0808cce4
 8080988:	0808ccf0 	.word	0x0808ccf0
 808098c:	2000073a 	.word	0x2000073a
 8080990:	0808ccf4 	.word	0x0808ccf4
 8080994:	2000071c 	.word	0x2000071c

08080998 <loop>:

 Serial.println("ending setup");
} // end setup()

//-----------LOOP
void loop() {  
 8080998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808099c:	b0f1      	sub	sp, #452	; 0x1c4
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 808099e:	2100      	movs	r1, #0
 80809a0:	a818      	add	r0, sp, #96	; 0x60
 80809a2:	f006 fa4f 	bl	8086e44 <_ZN9FuelGaugeC1Eb>
  //  set the deep sleep timer based on the battery charge
  //--- get battery info
  float volts = fuel.getVCell();
 80809a6:	a818      	add	r0, sp, #96	; 0x60
 80809a8:	f006 fa8c 	bl	8086ec4 <_ZN9FuelGauge8getVCellEv>
 80809ac:	4604      	mov	r4, r0
  float SoC = -99;
  //SoC = System.batteryCharge();
  SoC = fuel.getSoC();
 80809ae:	a818      	add	r0, sp, #96	; 0x60
 80809b0:	f006 fa9e 	bl	8086ef0 <_ZN9FuelGauge6getSoCEv>
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 80809b4:	4621      	mov	r1, r4
  //  set the deep sleep timer based on the battery charge
  //--- get battery info
  float volts = fuel.getVCell();
  float SoC = -99;
  //SoC = System.batteryCharge();
  SoC = fuel.getSoC();
 80809b6:	9010      	str	r0, [sp, #64]	; 0x40
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 80809b8:	f7ff fd32 	bl	8080420 <_Z12checkBatteryff>
 80809bc:	4bb4      	ldr	r3, [pc, #720]	; (8080c90 <loop+0x2f8>)
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 80809be:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8080ca4 <loop+0x30c>
                        //--run on programed schedule if solar powers VIN constantly
                        //--charge the battery if solar powers VIN
                        //--be skipped if power to VIN brings battery charge above 15%
                   }
    */
 minutes = checkBattery(SoC,volts);
 80809c2:	6018      	str	r0, [r3, #0]
 //minutes = 2;

  float rain = analogRead(RainPin);
 80809c4:	4bb3      	ldr	r3, [pc, #716]	; (8080c94 <loop+0x2fc>)
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 80809c6:	f04f 0902 	mov.w	r9, #2
                   }
    */
 minutes = checkBattery(SoC,volts);
 //minutes = 2;

  float rain = analogRead(RainPin);
 80809ca:	8818      	ldrh	r0, [r3, #0]
 80809cc:	f007 fc2a 	bl	8088224 <analogRead>
 80809d0:	f008 fcd8 	bl	8089384 <__aeabi_i2f>
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 80809d4:	2100      	movs	r1, #0
                   }
    */
 minutes = checkBattery(SoC,volts);
 //minutes = 2;

  float rain = analogRead(RainPin);
 80809d6:	4606      	mov	r6, r0
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 80809d8:	2018      	movs	r0, #24
 80809da:	f007 fc0a 	bl	80881f2 <digitalWrite>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 80809de:	20c8      	movs	r0, #200	; 0xc8
 80809e0:	f005 ff6a 	bl	80868b8 <delay>
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
 80809e4:	48ac      	ldr	r0, [pc, #688]	; (8080c98 <loop+0x300>)
 80809e6:	f003 fcfd 	bl	80843e4 <_ZN9CE_BME28015readTemperatureEv>
 80809ea:	f8ca 0000 	str.w	r0, [sl]
               h1 = bme1.readHumidity();
 80809ee:	48aa      	ldr	r0, [pc, #680]	; (8080c98 <loop+0x300>)
 80809f0:	f003 fdf2 	bl	80845d8 <_ZN9CE_BME28012readHumidityEv>
 80809f4:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8080cbc <loop+0x324>
               p1 = bme1.readPressure()/100.0;
 80809f8:	4fa8      	ldr	r7, [pc, #672]	; (8080c9c <loop+0x304>)
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
               t1 = bme1.readTemperature();
               h1 = bme1.readHumidity();
 80809fa:	f8c8 0000 	str.w	r0, [r8]
               p1 = bme1.readPressure()/100.0;
 80809fe:	48a6      	ldr	r0, [pc, #664]	; (8080c98 <loop+0x300>)
 8080a00:	f003 fd1a 	bl	8084438 <_ZN9CE_BME28012readPressureEv>
 8080a04:	49a6      	ldr	r1, [pc, #664]	; (8080ca0 <loop+0x308>)
 8080a06:	f008 fdc5 	bl	8089594 <__aeabi_fdiv>
 8080a0a:	6038      	str	r0, [r7, #0]
               delay(200);
 8080a0c:	20c8      	movs	r0, #200	; 0xc8
 8080a0e:	f005 ff53 	bl	80868b8 <delay>
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
  // ---- get AIR temperature and humidity and pressure
            // from BME280 using I2C connection
        int i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080a12:	f1b9 0901 	subs.w	r9, r9, #1
 8080a16:	4da3      	ldr	r5, [pc, #652]	; (8080ca4 <loop+0x30c>)
 8080a18:	d1e4      	bne.n	80809e4 <loop+0x4c>
               h1 = bme1.readHumidity();
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
 8080a1a:	f8d7 9000 	ldr.w	r9, [r7]
 8080a1e:	4649      	mov	r1, r9
 8080a20:	4648      	mov	r0, r9
 8080a22:	f008 fec9 	bl	80897b8 <__aeabi_fcmpun>
 8080a26:	2800      	cmp	r0, #0
 8080a28:	f040 8236 	bne.w	8080e98 <loop+0x500>
 8080a2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080a30:	4648      	mov	r0, r9
 8080a32:	f008 fe99 	bl	8089768 <__aeabi_fcmplt>
 8080a36:	2800      	cmp	r0, #0
 8080a38:	f040 822e 	bne.w	8080e98 <loop+0x500>
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080a3c:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8080d04 <loop+0x36c>
 //minutes = 2;

  float rain = analogRead(RainPin);
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
                             // with the next analog sensor (i.e. TDS/Sp.C)
  delay(200);
 8080a40:	f04f 0902 	mov.w	r9, #2
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
             {
              t2 = bme2.readTemperature();
 8080a44:	4898      	ldr	r0, [pc, #608]	; (8080ca8 <loop+0x310>)
 8080a46:	f003 fccd 	bl	80843e4 <_ZN9CE_BME28015readTemperatureEv>
 8080a4a:	f8ca 0000 	str.w	r0, [sl]
              p2 = bme2.readPressure()/100.0;
 8080a4e:	4896      	ldr	r0, [pc, #600]	; (8080ca8 <loop+0x310>)
 8080a50:	f003 fcf2 	bl	8084438 <_ZN9CE_BME28012readPressureEv>
 8080a54:	4992      	ldr	r1, [pc, #584]	; (8080ca0 <loop+0x308>)
 8080a56:	f008 fd9d 	bl	8089594 <__aeabi_fdiv>
 8080a5a:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8080cb0 <loop+0x318>
 8080a5e:	f8c8 0000 	str.w	r0, [r8]
              delay(200);
 8080a62:	20c8      	movs	r0, #200	; 0xc8
 8080a64:	f005 ff28 	bl	80868b8 <delay>
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
    // ---- get WATER temperature and pressure
            // from the BME280 using I2C connection. being used underwater (enclosed in mineral oil) for depth sensor
        i = 0;
        while(i<2)  // read 2 times to be sure of a good read
 8080a68:	f1b9 0901 	subs.w	r9, r9, #1
 8080a6c:	d1ea      	bne.n	8080a44 <loop+0xac>
              p2 = bme2.readPressure()/100.0;
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
 8080a6e:	6839      	ldr	r1, [r7, #0]
 8080a70:	4608      	mov	r0, r1
 8080a72:	f008 fea1 	bl	80897b8 <__aeabi_fcmpun>
 8080a76:	2800      	cmp	r0, #0
 8080a78:	f040 8214 	bne.w	8080ea4 <loop+0x50c>
 8080a7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080a80:	f8d8 0000 	ldr.w	r0, [r8]
 8080a84:	f008 fe70 	bl	8089768 <__aeabi_fcmplt>
 8080a88:	2800      	cmp	r0, #0
 8080a8a:	f040 820b 	bne.w	8080ea4 <loop+0x50c>
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080a8e:	6828      	ldr	r0, [r5, #0]
 8080a90:	f008 f838 	bl	8088b04 <__aeabi_f2d>
 8080a94:	a378      	add	r3, pc, #480	; (adr r3, 8080c78 <loop+0x2e0>)
 8080a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080a9a:	f007 fed3 	bl	8088844 <__aeabi_dsub>
 8080a9e:	f008 fb67 	bl	8089170 <__aeabi_d2f>
        t2 = t2+t2_offset;
 8080aa2:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8080d04 <loop+0x36c>
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
        t1 = t1+t1_offset;
 8080aa6:	6028      	str	r0, [r5, #0]
        t2 = t2+t2_offset;
 8080aa8:	f8d8 0000 	ldr.w	r0, [r8]
 8080aac:	f008 f82a 	bl	8088b04 <__aeabi_f2d>
 8080ab0:	a373      	add	r3, pc, #460	; (adr r3, 8080c80 <loop+0x2e8>)
 8080ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080ab6:	f007 fec5 	bl	8088844 <__aeabi_dsub>
 8080aba:	f008 fb59 	bl	8089170 <__aeabi_d2f>
 8080abe:	f8c8 0000 	str.w	r0, [r8]

// ---- get WATER Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
 8080ac2:	f7ff fd3d 	bl	8080540 <_Z6getSpCv>
 8080ac6:	4979      	ldr	r1, [pc, #484]	; (8080cac <loop+0x314>)
 8080ac8:	f008 fcb0 	bl	808942c <__aeabi_fmul>
 8080acc:	4681      	mov	r9, r0
    float Avolts = getAvolts();
 8080ace:	f7ff fdcb 	bl	8080668 <_Z9getAvoltsv>

 //  float depth = getDepth();  // read second depth sensor using function getDepth(). this is analog
        //don't need this without the vented analog depth sensor
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s
 8080ad2:	2100      	movs	r1, #0
        t1 = t1+t1_offset;
        t2 = t2+t2_offset;

// ---- get WATER Specific Conductance and median voltage on sensor
    float Sp_C = getSpC() * k;
    float Avolts = getAvolts();
 8080ad4:	4682      	mov	sl, r0

 //  float depth = getDepth();  // read second depth sensor using function getDepth(). this is analog
        //don't need this without the vented analog depth sensor
// turn off sensor POWER pins after sensors are read
        digitalWrite(D3, LOW);	 // for the digital sensors, BME280s
 8080ad6:	2003      	movs	r0, #3
 8080ad8:	f007 fb8b 	bl	80881f2 <digitalWrite>
                //  digitalWrite(D6, LOW);	// not needed because all digital sensors run off D3
 ///digitalWrite(B0, LOW);	// for the rain sensor
        digitalWrite(B1, LOW);     //for the TDS-Sp.C sensor
 8080adc:	2100      	movs	r1, #0
 8080ade:	2019      	movs	r0, #25
 8080ae0:	f007 fb87 	bl	80881f2 <digitalWrite>
///char context[90];
//sprintf(context, "tries=%02i", ii);
// add values to que of data to be uploaded to Ubidots
///	ubidots.add("time(UTC)",Time.now()/60);
  float depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8080ae4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8080c9c <loop+0x304>
 8080ae8:	4b71      	ldr	r3, [pc, #452]	; (8080cb0 <loop+0x318>)
 8080aea:	f8db 1000 	ldr.w	r1, [fp]
 8080aee:	6818      	ldr	r0, [r3, #0]
 8080af0:	f008 fb92 	bl	8089218 <__aeabi_fsub>
 8080af4:	f008 f806 	bl	8088b04 <__aeabi_f2d>
 8080af8:	a363      	add	r3, pc, #396	; (adr r3, 8080c88 <loop+0x2f0>)
 8080afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080afe:	f008 f855 	bl	8088bac <__aeabi_dmul>
 8080b02:	f008 fb35 	bl	8089170 <__aeabi_d2f>
 8080b06:	4607      	mov	r7, r0

  ubidots.add("Rain", rain);
 8080b08:	4632      	mov	r2, r6
 8080b0a:	496a      	ldr	r1, [pc, #424]	; (8080cb4 <loop+0x31c>)
 8080b0c:	486a      	ldr	r0, [pc, #424]	; (8080cb8 <loop+0x320>)
 8080b0e:	f002 fce7 	bl	80834e0 <_ZN7Ubidots3addEPcf>
	ubidots.add("Humidity_%", h1);
 8080b12:	4b6a      	ldr	r3, [pc, #424]	; (8080cbc <loop+0x324>)
 8080b14:	496a      	ldr	r1, [pc, #424]	; (8080cc0 <loop+0x328>)
 8080b16:	681a      	ldr	r2, [r3, #0]
 8080b18:	4867      	ldr	r0, [pc, #412]	; (8080cb8 <loop+0x320>)
 8080b1a:	f002 fce1 	bl	80834e0 <_ZN7Ubidots3addEPcf>
	ubidots.add("Air-Temp_C", t1);
 8080b1e:	682a      	ldr	r2, [r5, #0]
 8080b20:	4968      	ldr	r1, [pc, #416]	; (8080cc4 <loop+0x32c>)
 8080b22:	4865      	ldr	r0, [pc, #404]	; (8080cb8 <loop+0x320>)
 8080b24:	f002 fcdc 	bl	80834e0 <_ZN7Ubidots3addEPcf>
  ubidots.add("Pressure_hPA", p1);
 8080b28:	f8db 2000 	ldr.w	r2, [fp]
 8080b2c:	4966      	ldr	r1, [pc, #408]	; (8080cc8 <loop+0x330>)
 8080b2e:	4862      	ldr	r0, [pc, #392]	; (8080cb8 <loop+0x320>)
 8080b30:	f002 fcd6 	bl	80834e0 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O-Temp_C", t2);
 8080b34:	f8d8 2000 	ldr.w	r2, [r8]
 8080b38:	4964      	ldr	r1, [pc, #400]	; (8080ccc <loop+0x334>)
 8080b3a:	485f      	ldr	r0, [pc, #380]	; (8080cb8 <loop+0x320>)
 8080b3c:	f002 fcd0 	bl	80834e0 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O_hPA", p2);
 8080b40:	4b5b      	ldr	r3, [pc, #364]	; (8080cb0 <loop+0x318>)
 8080b42:	4963      	ldr	r1, [pc, #396]	; (8080cd0 <loop+0x338>)
 8080b44:	681a      	ldr	r2, [r3, #0]
 8080b46:	485c      	ldr	r0, [pc, #368]	; (8080cb8 <loop+0x320>)
 8080b48:	f002 fcca 	bl	80834e0 <_ZN7Ubidots3addEPcf>
  ubidots.add("Depth_in", depth);
 8080b4c:	463a      	mov	r2, r7
 8080b4e:	4961      	ldr	r1, [pc, #388]	; (8080cd4 <loop+0x33c>)
 8080b50:	4859      	ldr	r0, [pc, #356]	; (8080cb8 <loop+0x320>)
 8080b52:	f002 fcc5 	bl	80834e0 <_ZN7Ubidots3addEPcf>
    ubidots.add("Volts", volts);
 8080b56:	4622      	mov	r2, r4
 8080b58:	495f      	ldr	r1, [pc, #380]	; (8080cd8 <loop+0x340>)
 8080b5a:	4857      	ldr	r0, [pc, #348]	; (8080cb8 <loop+0x320>)
 8080b5c:	f002 fcc0 	bl	80834e0 <_ZN7Ubidots3addEPcf>
    ubidots.add("SOC", SoC);
 8080b60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8080b62:	495e      	ldr	r1, [pc, #376]	; (8080cdc <loop+0x344>)
 8080b64:	4854      	ldr	r0, [pc, #336]	; (8080cb8 <loop+0x320>)
 8080b66:	f002 fcbb 	bl	80834e0 <_ZN7Ubidots3addEPcf>
      //if (t2 > -99.0)   // if reading water temperature was successful, send temp and Sp_Cond to Ubidots
    ubidots.add("Sp_Cond", Sp_C);
 8080b6a:	464a      	mov	r2, r9
 8080b6c:	495c      	ldr	r1, [pc, #368]	; (8080ce0 <loop+0x348>)
 8080b6e:	4852      	ldr	r0, [pc, #328]	; (8080cb8 <loop+0x320>)
 8080b70:	f002 fcb6 	bl	80834e0 <_ZN7Ubidots3addEPcf>
    ubidots.add("A.volts", Avolts);
 8080b74:	4652      	mov	r2, sl
 8080b76:	495b      	ldr	r1, [pc, #364]	; (8080ce4 <loop+0x34c>)
 8080b78:	484f      	ldr	r0, [pc, #316]	; (8080cb8 <loop+0x320>)
 8080b7a:	f002 fcb1 	bl	80834e0 <_ZN7Ubidots3addEPcf>
  

//  could put some code here to write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %04.2f",
 8080b7e:	4648      	mov	r0, r9
 8080b80:	f007 ffc0 	bl	8088b04 <__aeabi_f2d>
 8080b84:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8080b88:	4650      	mov	r0, sl
 8080b8a:	f007 ffbb 	bl	8088b04 <__aeabi_f2d>
 8080b8e:	4682      	mov	sl, r0
 8080b90:	4630      	mov	r0, r6
 8080b92:	468b      	mov	fp, r1
 8080b94:	f007 ffb6 	bl	8088b04 <__aeabi_f2d>
 8080b98:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080b9c:	4638      	mov	r0, r7
 8080b9e:	f007 ffb1 	bl	8088b04 <__aeabi_f2d>
 8080ba2:	4606      	mov	r6, r0
 8080ba4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8080ba6:	460f      	mov	r7, r1
 8080ba8:	f007 ffac 	bl	8088b04 <__aeabi_f2d>
 8080bac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080bb0:	4620      	mov	r0, r4
 8080bb2:	f007 ffa7 	bl	8088b04 <__aeabi_f2d>
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8080bb6:	4603      	mov	r3, r0
 8080bb8:	460c      	mov	r4, r1
 8080bba:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8080bbe:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8080bc2:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 8080bc6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8080bca:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8080bce:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8080bd2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8080bd6:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
 8080bda:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ubidots.add("A.volts", Avolts);
  

//  could put some code here to write the data to a SD card before trying to connect
  char _json[256];
    snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %04.2f",
 8080bde:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 8080be2:	f8d8 0000 	ldr.w	r0, [r8]
 8080be6:	f007 ff8d 	bl	8088b04 <__aeabi_f2d>
 8080bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080bee:	6828      	ldr	r0, [r5, #0]
 8080bf0:	f007 ff88 	bl	8088b04 <__aeabi_f2d>
 8080bf4:	4a3c      	ldr	r2, [pc, #240]	; (8080ce8 <loop+0x350>)
 8080bf6:	e9cd 0100 	strd	r0, r1, [sp]
 8080bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080bfe:	a830      	add	r0, sp, #192	; 0xc0
 8080c00:	f004 fe82 	bl	8085908 <snprintf>
   
      logData(_json);
 8080c04:	a830      	add	r0, sp, #192	; 0xc0
 8080c06:	f7ff fe55 	bl	80808b4 <_Z7logDataPc>
      delay(200);
 8080c0a:	20c8      	movs	r0, #200	; 0xc8
 8080c0c:	f005 fe54 	bl	80868b8 <delay>
      close_SD();
 8080c10:	f7ff fe8e 	bl	8080930 <_Z8close_SDv>
      delay(200);
 8080c14:	20c8      	movs	r0, #200	; 0xc8
 8080c16:	f005 fe4f 	bl	80868b8 <delay>
savePhoto();
*/
//cam.begin();
//--------------------------------------------------------------------------------
// Try to locate the camera
  if (cam.begin()) {
 8080c1a:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8080c1e:	4833      	ldr	r0, [pc, #204]	; (8080cec <loop+0x354>)
 8080c20:	f003 fdee 	bl	8084800 <_ZN13camera_VC07065beginEt>
 8080c24:	b118      	cbz	r0, 8080c2e <loop+0x296>
    Serial.println("Camera Found:");
 8080c26:	f006 fdef 	bl	8087808 <_Z16_fetch_usbserialv>
 8080c2a:	4931      	ldr	r1, [pc, #196]	; (8080cf0 <loop+0x358>)
 8080c2c:	e002      	b.n	8080c34 <loop+0x29c>
  } else {
    Serial.println("No camera found?");
 8080c2e:	f006 fdeb 	bl	8087808 <_Z16_fetch_usbserialv>
 8080c32:	4930      	ldr	r1, [pc, #192]	; (8080cf4 <loop+0x35c>)
 8080c34:	f005 fcbb 	bl	80865ae <_ZN5Print7printlnEPKc>
     }
// Print out the camera version information (optional)
  char *reply = cam.getVersion();
 8080c38:	482c      	ldr	r0, [pc, #176]	; (8080cec <loop+0x354>)
 8080c3a:	f003 fd85 	bl	8084748 <_ZN13camera_VC070610getVersionEv>
  if (reply == 0) {
 8080c3e:	4604      	mov	r4, r0
 8080c40:	b918      	cbnz	r0, 8080c4a <loop+0x2b2>
    Serial.print("Failed to get version");
 8080c42:	f006 fde1 	bl	8087808 <_Z16_fetch_usbserialv>
 8080c46:	492c      	ldr	r1, [pc, #176]	; (8080cf8 <loop+0x360>)
 8080c48:	e002      	b.n	8080c50 <loop+0x2b8>
  } else {
  //  Serial.println("-----------------");
    Serial.print(reply);
 8080c4a:	f006 fddd 	bl	8087808 <_Z16_fetch_usbserialv>
 8080c4e:	4621      	mov	r1, r4
 8080c50:	f005 fc96 	bl	8086580 <_ZN5Print5printEPKc>
  //  Serial.println("-----------------");
  }
  
  Serial.println("Snap in 1 secs...");
 8080c54:	f006 fdd8 	bl	8087808 <_Z16_fetch_usbserialv>
 8080c58:	4928      	ldr	r1, [pc, #160]	; (8080cfc <loop+0x364>)
 8080c5a:	f005 fca8 	bl	80865ae <_ZN5Print7printlnEPKc>
 delay(3000);
 8080c5e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8080c62:	f005 fe29 	bl	80868b8 <delay>
  if (! cam.takePicture()) 
 8080c66:	4821      	ldr	r0, [pc, #132]	; (8080cec <loop+0x354>)
 8080c68:	f003 fdea 	bl	8084840 <_ZN13camera_VC070611takePictureEv>
 8080c6c:	2800      	cmp	r0, #0
 8080c6e:	d14b      	bne.n	8080d08 <loop+0x370>
    Serial.println("Failed to snap!");
 8080c70:	f006 fdca 	bl	8087808 <_Z16_fetch_usbserialv>
 8080c74:	4922      	ldr	r1, [pc, #136]	; (8080d00 <loop+0x368>)
 8080c76:	e04a      	b.n	8080d0e <loop+0x376>
 8080c78:	9999999a 	.word	0x9999999a
 8080c7c:	3fe99999 	.word	0x3fe99999
 8080c80:	33333333 	.word	0x33333333
 8080c84:	3fe33333 	.word	0x3fe33333
 8080c88:	3a14cec4 	.word	0x3a14cec4
 8080c8c:	3fd9b1af 	.word	0x3fd9b1af
 8080c90:	2000001c 	.word	0x2000001c
 8080c94:	20000014 	.word	0x20000014
 8080c98:	200005f8 	.word	0x200005f8
 8080c9c:	20000000 	.word	0x20000000
 8080ca0:	42c80000 	.word	0x42c80000
 8080ca4:	20000020 	.word	0x20000020
 8080ca8:	20000628 	.word	0x20000628
 8080cac:	3fa00000 	.word	0x3fa00000
 8080cb0:	20000004 	.word	0x20000004
 8080cb4:	0808cd08 	.word	0x0808cd08
 8080cb8:	200006e0 	.word	0x200006e0
 8080cbc:	2000000c 	.word	0x2000000c
 8080cc0:	0808cd0d 	.word	0x0808cd0d
 8080cc4:	0808cd18 	.word	0x0808cd18
 8080cc8:	0808cd23 	.word	0x0808cd23
 8080ccc:	0808cd30 	.word	0x0808cd30
 8080cd0:	0808cd3b 	.word	0x0808cd3b
 8080cd4:	0808cd43 	.word	0x0808cd43
 8080cd8:	0808cd4c 	.word	0x0808cd4c
 8080cdc:	0808cd52 	.word	0x0808cd52
 8080ce0:	0808cd56 	.word	0x0808cd56
 8080ce4:	0808cd5e 	.word	0x0808cd5e
 8080ce8:	0808cd66 	.word	0x0808cd66
 8080cec:	20000658 	.word	0x20000658
 8080cf0:	0808cda7 	.word	0x0808cda7
 8080cf4:	0808cdb5 	.word	0x0808cdb5
 8080cf8:	0808cdc6 	.word	0x0808cdc6
 8080cfc:	0808cddc 	.word	0x0808cddc
 8080d00:	0808cdee 	.word	0x0808cdee
 8080d04:	20000024 	.word	0x20000024
  else 
    Serial.println("Picture taken!");   
 8080d08:	f006 fd7e 	bl	8087808 <_Z16_fetch_usbserialv>
 8080d0c:	4985      	ldr	r1, [pc, #532]	; (8080f24 <loop+0x58c>)
 8080d0e:	f005 fc4e 	bl	80865ae <_ZN5Print7printlnEPKc>

 /// String hold;
//    if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sprintf(works,"No ");   }
//       else { sprintf(works,"Yes "); }
 // if (!sd.begin(chipSelect, SD_SCK_MHZ(30))) {  sd.initErrorHalt();    }
    if( !Time.isValid()) 
 8080d12:	f005 fd9f 	bl	8086854 <_ZN9TimeClass7isValidEv>
 8080d16:	b958      	cbnz	r0, 8080d30 <loop+0x398>
        {
          fileName = String("lost-time000.jpg");   
 8080d18:	4983      	ldr	r1, [pc, #524]	; (8080f28 <loop+0x590>)
 8080d1a:	a826      	add	r0, sp, #152	; 0x98
 8080d1c:	f005 fb73 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>
 8080d20:	a926      	add	r1, sp, #152	; 0x98
 8080d22:	4882      	ldr	r0, [pc, #520]	; (8080f2c <loop+0x594>)
 8080d24:	f005 fbb9 	bl	808649a <_ZN6StringaSEOS_>
 8080d28:	a826      	add	r0, sp, #152	; 0x98
 8080d2a:	f005 fb25 	bl	8086378 <_ZN6StringD1Ev>
 8080d2e:	e028      	b.n	8080d82 <loop+0x3ea>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080d30:	497f      	ldr	r1, [pc, #508]	; (8080f30 <loop+0x598>)
 8080d32:	a81a      	add	r0, sp, #104	; 0x68
 8080d34:	f005 fba6 	bl	8086484 <_ZN6StringC1ERKS_>
  //        }
          
        }
          else
          {
           fileName =  String(unit_name + "_" + Time.format(Time.now(),"%Y-%m-%d-%H-%M") + ".jpg");    
 8080d38:	497e      	ldr	r1, [pc, #504]	; (8080f34 <loop+0x59c>)
 8080d3a:	a81a      	add	r0, sp, #104	; 0x68
 8080d3c:	f005 fbd8 	bl	80864f0 <_ZplRK15StringSumHelperPKc>
 8080d40:	4604      	mov	r4, r0
 8080d42:	f005 fda8 	bl	8086896 <_ZN9TimeClass3nowEv>
 8080d46:	4b7c      	ldr	r3, [pc, #496]	; (8080f38 <loop+0x5a0>)
 8080d48:	4602      	mov	r2, r0
 8080d4a:	497c      	ldr	r1, [pc, #496]	; (8080f3c <loop+0x5a4>)
 8080d4c:	a81e      	add	r0, sp, #120	; 0x78
 8080d4e:	f005 fd4f 	bl	80867f0 <_ZN9TimeClass6formatElPKc>
 8080d52:	a91e      	add	r1, sp, #120	; 0x78
 8080d54:	4620      	mov	r0, r4
 8080d56:	f005 fbbf 	bl	80864d8 <_ZplRK15StringSumHelperRK6String>
 8080d5a:	4979      	ldr	r1, [pc, #484]	; (8080f40 <loop+0x5a8>)
 8080d5c:	f005 fbc8 	bl	80864f0 <_ZplRK15StringSumHelperPKc>
 8080d60:	4601      	mov	r1, r0
 8080d62:	a826      	add	r0, sp, #152	; 0x98
 8080d64:	f005 fb8e 	bl	8086484 <_ZN6StringC1ERKS_>
 8080d68:	a926      	add	r1, sp, #152	; 0x98
 8080d6a:	4870      	ldr	r0, [pc, #448]	; (8080f2c <loop+0x594>)
 8080d6c:	f005 fb95 	bl	808649a <_ZN6StringaSEOS_>
 8080d70:	a826      	add	r0, sp, #152	; 0x98
 8080d72:	f005 fb01 	bl	8086378 <_ZN6StringD1Ev>
 8080d76:	a81e      	add	r0, sp, #120	; 0x78
 8080d78:	f005 fafe 	bl	8086378 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080d7c:	a81a      	add	r0, sp, #104	; 0x68
 8080d7e:	f005 fafb 	bl	8086378 <_ZN6StringD1Ev>
 8080d82:	4c6a      	ldr	r4, [pc, #424]	; (8080f2c <loop+0x594>)
          ///  strcpy(fileName, hold); 
          }

  // Open the file for writing
    file.open(fileName, FILE_WRITE);
 8080d84:	f244 2202 	movw	r2, #16898	; 0x4202
 8080d88:	6821      	ldr	r1, [r4, #0]
 8080d8a:	486e      	ldr	r0, [pc, #440]	; (8080f44 <loop+0x5ac>)
 8080d8c:	f7ff fa8a 	bl	80802a4 <_ZN7FatFile4openEPKci>
  // Get the size of the image (frame) taken  
    uint16_t jpglen = cam.frameLength();
 8080d90:	486d      	ldr	r0, [pc, #436]	; (8080f48 <loop+0x5b0>)
 8080d92:	f003 fd5a 	bl	808484a <_ZN13camera_VC070611frameLengthEv>
 8080d96:	b285      	uxth	r5, r0
    //Serial.print("Storing ");
    Serial.print(jpglen, DEC);
 8080d98:	f006 fd36 	bl	8087808 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080d9c:	220a      	movs	r2, #10
 8080d9e:	4629      	mov	r1, r5
 8080da0:	f005 fc0f 	bl	80865c2 <_ZN5Print11printNumberEmh>
    Serial.print(" byte image. ");
 8080da4:	f006 fd30 	bl	8087808 <_Z16_fetch_usbserialv>
 8080da8:	4968      	ldr	r1, [pc, #416]	; (8080f4c <loop+0x5b4>)
 8080daa:	f005 fbe9 	bl	8086580 <_ZN5Print5printEPKc>
    Serial.println(fileName);
 8080dae:	f006 fd2b 	bl	8087808 <_Z16_fetch_usbserialv>
 8080db2:	6821      	ldr	r1, [r4, #0]
 8080db4:	f005 fbfb 	bl	80865ae <_ZN5Print7printlnEPKc>
 8080db8:	f004 fad2 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>

    int32_t time = millis();
    pinMode(8, OUTPUT);
 8080dbc:	2101      	movs	r1, #1
 8080dbe:	4604      	mov	r4, r0
 8080dc0:	2008      	movs	r0, #8
 8080dc2:	f007 fa05 	bl	80881d0 <pinMode>
    // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
 8080dc6:	f04f 0900 	mov.w	r9, #0
    while (jpglen > 0) {
 8080dca:	b1ed      	cbz	r5, 8080e08 <loop+0x470>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 8080dcc:	46a8      	mov	r8, r5
 8080dce:	2d40      	cmp	r5, #64	; 0x40
 8080dd0:	bfa8      	it	ge
 8080dd2:	f04f 0840 	movge.w	r8, #64	; 0x40
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
 8080dd6:	fa5f f188 	uxtb.w	r1, r8
 8080dda:	485b      	ldr	r0, [pc, #364]	; (8080f48 <loop+0x5b0>)
 8080ddc:	f003 fd51 	bl	8084882 <_ZN13camera_VC070611readPictureEh>
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080de0:	f109 0901 	add.w	r9, r9, #1
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
 8080de4:	4601      	mov	r1, r0
 8080de6:	4642      	mov	r2, r8
 8080de8:	4859      	ldr	r0, [pc, #356]	; (8080f50 <loop+0x5b8>)
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080dea:	fa5f f989 	uxtb.w	r9, r9
      // read 32 bytes at a time;
      uint8_t *buffer;
      uint8_t bytesToRead = min(64, jpglen); // change 32 to 64 for a speedup but may not work with all setups!
      buffer = cam.readPicture(bytesToRead);
      //imgFile.write(buffer, bytesToRead);
      file.write(buffer, bytesToRead);
 8080dee:	f7ff f993 	bl	8080118 <_ZN9PrintFile5writeEPKhj>
      if(++wCount >= 64) { // Every 2K, give a little feedback so it doesn't appear locked up
 8080df2:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8080df6:	d903      	bls.n	8080e00 <loop+0x468>
      //  Serial.print('.');
        Blink();
 8080df8:	f7ff fa9c 	bl	8080334 <_Z5Blinkv>
        wCount = 0;
 8080dfc:	f04f 0900 	mov.w	r9, #0
      }
      //Serial.print("Read ");  Serial.print(bytesToRead, DEC); Serial.println(" bytes");
      jpglen -= bytesToRead;
 8080e00:	ebc8 0505 	rsb	r5, r8, r5
 8080e04:	b2ad      	uxth	r5, r5

    int32_t time = millis();
    pinMode(8, OUTPUT);
    // Read all the data up to # bytes!
    byte wCount = 0; // For counting # of writes
    while (jpglen > 0) {
 8080e06:	e7e0      	b.n	8080dca <loop+0x432>
        wCount = 0;
      }
      //Serial.print("Read ");  Serial.print(bytesToRead, DEC); Serial.println(" bytes");
      jpglen -= bytesToRead;
    }
    file.close();
 8080e08:	484e      	ldr	r0, [pc, #312]	; (8080f44 <loop+0x5ac>)
 8080e0a:	f001 f8d3 	bl	8081fb4 <_ZN7FatFile5closeEv>
 8080e0e:	f004 faa7 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
      time = millis() - time;
 8080e12:	1b04      	subs	r4, r0, r4
    //Serial.println("done!");
    Serial.print(time); Serial.println(" ms elapsed");
 8080e14:	f006 fcf8 	bl	8087808 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8080e18:	2c00      	cmp	r4, #0
 8080e1a:	4605      	mov	r5, r0
 8080e1c:	da03      	bge.n	8080e26 <loop+0x48e>
            t = print('-');
 8080e1e:	212d      	movs	r1, #45	; 0x2d
 8080e20:	f005 fbb2 	bl	8086588 <_ZN5Print5printEc>
            val = -n;
 8080e24:	4264      	negs	r4, r4
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080e26:	220a      	movs	r2, #10
 8080e28:	4621      	mov	r1, r4
 8080e2a:	4628      	mov	r0, r5
 8080e2c:	f005 fbc9 	bl	80865c2 <_ZN5Print11printNumberEmh>
 8080e30:	f006 fcea 	bl	8087808 <_Z16_fetch_usbserialv>
 8080e34:	4947      	ldr	r1, [pc, #284]	; (8080f54 <loop+0x5bc>)
 8080e36:	f005 fbba 	bl	80865ae <_ZN5Print7printlnEPKc>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080e3a:	4847      	ldr	r0, [pc, #284]	; (8080f58 <loop+0x5c0>)
 8080e3c:	2300      	movs	r3, #0
 8080e3e:	461a      	mov	r2, r3
 8080e40:	4619      	mov	r1, r3
 8080e42:	6840      	ldr	r0, [r0, #4]
 8080e44:	f004 fca0 	bl	8085788 <network_connect>
   Cellular.connect();   // this blocks further code execution (see reference) until connection
                          // when in SYSTEM_MODE(semi_automatic),
                          // unless SYSTEM_THREAD(ENABLED). I have SYSTEM_THREAD(ENABLED);
                          //  in any case, after 5 mins of not successfuly connecting the modem
                          // will give up and stop blocking code execution
   delay(500);
 8080e48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080e4c:	f005 fd34 	bl	80868b8 <delay>
///   Serial.println("done the Cellular.connect() command, Waiting for Cellular.ready");
      // If the cellular modem does not successfuly connect to the cellular network in
      // 2 mins then blink blue LED and write message to serial below.
      // Regardless of code, after 5 mins of not successfuly connecting the modem will give up.
      if (!waitFor(Cellular.ready, a_minute * 1.5))
 8080e50:	4b42      	ldr	r3, [pc, #264]	; (8080f5c <loop+0x5c4>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080e52:	f04f 0900 	mov.w	r9, #0
 8080e56:	6818      	ldr	r0, [r3, #0]
 8080e58:	f007 fe42 	bl	8088ae0 <__aeabi_i2d>
 8080e5c:	2200      	movs	r2, #0
 8080e5e:	4b40      	ldr	r3, [pc, #256]	; (8080f60 <loop+0x5c8>)
 8080e60:	f007 fea4 	bl	8088bac <__aeabi_dmul>
 8080e64:	f008 f964 	bl	8089130 <__aeabi_d2uiz>
 8080e68:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080e6a:	2000      	movs	r0, #0
 8080e6c:	f004 fa90 	bl	8085390 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080e70:	4680      	mov	r8, r0
 8080e72:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080e74:	2000      	movs	r0, #0
 8080e76:	f004 fa8b 	bl	8085390 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8080e7e:	eb61 0309 	sbc.w	r3, r1, r9
 8080e82:	42ab      	cmp	r3, r5
 8080e84:	bf08      	it	eq
 8080e86:	42a2      	cmpeq	r2, r4
 8080e88:	d212      	bcs.n	8080eb0 <loop+0x518>
            WeakSignalBlink();
            Serial.println("Difficulty connecting. Will try for 1 more min");
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080e8a:	4833      	ldr	r0, [pc, #204]	; (8080f58 <loop+0x5c0>)
 8080e8c:	f7ff f992 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
 8080e90:	b970      	cbnz	r0, 8080eb0 <loop+0x518>
            spark_process();
 8080e92:	f004 fcd1 	bl	8085838 <spark_process>
 8080e96:	e7ed      	b.n	8080e74 <loop+0x4dc>
               p1 = bme1.readPressure()/100.0;
               delay(200);
               i++;
             }
          if (isnan(p1) || p1<1.0 )
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
 8080e98:	4b32      	ldr	r3, [pc, #200]	; (8080f64 <loop+0x5cc>)
 8080e9a:	f8c8 3000 	str.w	r3, [r8]
 8080e9e:	602b      	str	r3, [r5, #0]
 8080ea0:	603b      	str	r3, [r7, #0]
 8080ea2:	e5cb      	b.n	8080a3c <loop+0xa4>
              delay(200);
              i++;
            }
          // Check if any reads failed but don't hold things up
       	    if (isnan(p1) || p2<1.0 )
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
 8080ea4:	4b2f      	ldr	r3, [pc, #188]	; (8080f64 <loop+0x5cc>)
 8080ea6:	4a30      	ldr	r2, [pc, #192]	; (8080f68 <loop+0x5d0>)
 8080ea8:	f8c8 3000 	str.w	r3, [r8]
 8080eac:	6013      	str	r3, [r2, #0]
 8080eae:	e5ee      	b.n	8080a8e <loop+0xf6>
            WeakSignalBlink();
            Serial.println("Difficulty connecting. Will try for 1 more min");
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080eb0:	4829      	ldr	r0, [pc, #164]	; (8080f58 <loop+0x5c0>)
 8080eb2:	f7ff f97f 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
   delay(500);
///   Serial.println("done the Cellular.connect() command, Waiting for Cellular.ready");
      // If the cellular modem does not successfuly connect to the cellular network in
      // 2 mins then blink blue LED and write message to serial below.
      // Regardless of code, after 5 mins of not successfuly connecting the modem will give up.
      if (!waitFor(Cellular.ready, a_minute * 1.5))
 8080eb6:	b980      	cbnz	r0, 8080eda <loop+0x542>
         {
            WeakSignalBlink();
 8080eb8:	f7ff fa68 	bl	808038c <_Z15WeakSignalBlinkv>
            delay(500);
 8080ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080ec0:	f005 fcfa 	bl	80868b8 <delay>
            WeakSignalBlink();
 8080ec4:	f7ff fa62 	bl	808038c <_Z15WeakSignalBlinkv>
            Serial.println("Difficulty connecting. Will try for 1 more min");
 8080ec8:	f006 fc9e 	bl	8087808 <_Z16_fetch_usbserialv>
 8080ecc:	4927      	ldr	r1, [pc, #156]	; (8080f6c <loop+0x5d4>)
 8080ece:	f005 fb6e 	bl	80865ae <_ZN5Print7printlnEPKc>
            delay(500);
 8080ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080ed6:	f005 fcef 	bl	80868b8 <delay>
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
 8080eda:	4b20      	ldr	r3, [pc, #128]	; (8080f5c <loop+0x5c4>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080edc:	f04f 0900 	mov.w	r9, #0
 8080ee0:	6818      	ldr	r0, [r3, #0]
 8080ee2:	f007 fdfd 	bl	8088ae0 <__aeabi_i2d>
 8080ee6:	2200      	movs	r2, #0
 8080ee8:	4b21      	ldr	r3, [pc, #132]	; (8080f70 <loop+0x5d8>)
 8080eea:	f007 fe5f 	bl	8088bac <__aeabi_dmul>
 8080eee:	f008 f91f 	bl	8089130 <__aeabi_d2uiz>
 8080ef2:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080ef4:	2000      	movs	r0, #0
 8080ef6:	f004 fa4b 	bl	8085390 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080efa:	4680      	mov	r8, r0
 8080efc:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080efe:	2000      	movs	r0, #0
 8080f00:	f004 fa46 	bl	8085390 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080f04:	ebb0 0208 	subs.w	r2, r0, r8
 8080f08:	eb61 0309 	sbc.w	r3, r1, r9
 8080f0c:	42ab      	cmp	r3, r5
 8080f0e:	bf08      	it	eq
 8080f10:	42a2      	cmpeq	r2, r4
 8080f12:	d22f      	bcs.n	8080f74 <loop+0x5dc>
 8080f14:	4810      	ldr	r0, [pc, #64]	; (8080f58 <loop+0x5c0>)
 8080f16:	f7ff f94d 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
 8080f1a:	bb58      	cbnz	r0, 8080f74 <loop+0x5dc>
            spark_process();
 8080f1c:	f004 fc8c 	bl	8085838 <spark_process>
 8080f20:	e7ed      	b.n	8080efe <loop+0x566>
 8080f22:	bf00      	nop
 8080f24:	0808cdfe 	.word	0x0808cdfe
 8080f28:	0808ce0d 	.word	0x0808ce0d
 8080f2c:	200005e4 	.word	0x200005e4
 8080f30:	200006cc 	.word	0x200006cc
 8080f34:	0808ccd2 	.word	0x0808ccd2
 8080f38:	0808ce1e 	.word	0x0808ce1e
 8080f3c:	20000944 	.word	0x20000944
 8080f40:	0808ce19 	.word	0x0808ce19
 8080f44:	200006f8 	.word	0x200006f8
 8080f48:	20000658 	.word	0x20000658
 8080f4c:	0808ce2d 	.word	0x0808ce2d
 8080f50:	200006f0 	.word	0x200006f0
 8080f54:	0808ce3b 	.word	0x0808ce3b
 8080f58:	20000d58 	.word	0x20000d58
 8080f5c:	20000008 	.word	0x20000008
 8080f60:	3ff80000 	.word	0x3ff80000
 8080f64:	c2c63333 	.word	0xc2c63333
 8080f68:	20000024 	.word	0x20000024
 8080f6c:	0808ce47 	.word	0x0808ce47
 8080f70:	3fe00000 	.word	0x3fe00000
 8080f74:	4892      	ldr	r0, [pc, #584]	; (80811c0 <loop+0x828>)
 8080f76:	f7ff f91d 	bl	80801b4 <_ZN5spark13CellularClass5readyEv>
 8080f7a:	bb28      	cbnz	r0, 8080fc8 <loop+0x630>
         {
            WeakSignalBlink();
            delay(500);
            WeakSignalBlink();
            sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 8080f7c:	4c91      	ldr	r4, [pc, #580]	; (80811c4 <loop+0x82c>)
            delay(500);
         }
      // check a second time to make sure it is connected, if not, try for 1 more minute
      if (!waitFor(Cellular.ready, a_minute * 0.5))
         {
            WeakSignalBlink();
 8080f7e:	f7ff fa05 	bl	808038c <_Z15WeakSignalBlinkv>
            delay(500);
 8080f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080f86:	f005 fc97 	bl	80868b8 <delay>
            WeakSignalBlink();
 8080f8a:	f7ff f9ff 	bl	808038c <_Z15WeakSignalBlinkv>
            sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 8080f8e:	6822      	ldr	r2, [r4, #0]
 8080f90:	498d      	ldr	r1, [pc, #564]	; (80811c8 <loop+0x830>)
 8080f92:	488e      	ldr	r0, [pc, #568]	; (80811cc <loop+0x834>)
 8080f94:	f004 fca0 	bl	80858d8 <sprintf>
           Serial.print("Difficulty connecting sleeping");   Serial.println(publishStr);
 8080f98:	f006 fc36 	bl	8087808 <_Z16_fetch_usbserialv>
 8080f9c:	498c      	ldr	r1, [pc, #560]	; (80811d0 <loop+0x838>)
 8080f9e:	f005 faef 	bl	8086580 <_ZN5Print5printEPKc>
 8080fa2:	f006 fc31 	bl	8087808 <_Z16_fetch_usbserialv>
 8080fa6:	4989      	ldr	r1, [pc, #548]	; (80811cc <loop+0x834>)
 8080fa8:	f005 fb01 	bl	80865ae <_ZN5Print7printlnEPKc>
            delay(500);
 8080fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080fb0:	f005 fc82 	bl	80868b8 <delay>
            //System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval*minutes);
            System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);
 8080fb4:	4b87      	ldr	r3, [pc, #540]	; (80811d4 <loop+0x83c>)
 8080fb6:	6821      	ldr	r1, [r4, #0]
 8080fb8:	681a      	ldr	r2, [r3, #0]
 8080fba:	4b87      	ldr	r3, [pc, #540]	; (80811d8 <loop+0x840>)
 8080fbc:	434a      	muls	r2, r1
 8080fbe:	681b      	ldr	r3, [r3, #0]
 8080fc0:	2101      	movs	r1, #1
 8080fc2:	a826      	add	r0, sp, #152	; 0x98
 8080fc4:	f004 ff36 	bl	8085e34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8080fc8:	4c84      	ldr	r4, [pc, #528]	; (80811dc <loop+0x844>)
            // if can't connect for a second time, go to deep sleep for
            // for "minutes" minutes and on wake the program starts from the beginning
          }
   Serial.println("passed the Cellular.ready test");
 8080fca:	f006 fc1d 	bl	8087808 <_Z16_fetch_usbserialv>
 8080fce:	4984      	ldr	r1, [pc, #528]	; (80811e0 <loop+0x848>)
 8080fd0:	f005 faed 	bl	80865ae <_ZN5Print7printlnEPKc>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080fd4:	f004 fc38 	bl	8085848 <spark_cloud_flag_connect>
///     readyForOTA(5000);  // 5 second delay with call to Particle.process() to allow time for OTA flashing
     //delay(1000);

  /// if(Particle.connected()) { wDog.checkin();  } // resets the ApplicationWatchdog count if connected
///   if(Particle.connected()) {  
      wd->checkin();  
 8080fd8:	f7ff f8fa 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
 8080fdc:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080fde:	4a81      	ldr	r2, [pc, #516]	; (80811e4 <loop+0x84c>)
 8080fe0:	4981      	ldr	r1, [pc, #516]	; (80811e8 <loop+0x850>)
 8080fe2:	f88d 3000 	strb.w	r3, [sp]
 8080fe6:	a826      	add	r0, sp, #152	; 0x98
 8080fe8:	233c      	movs	r3, #60	; 0x3c
 8080fea:	f006 f9bb 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080fee:	a827      	add	r0, sp, #156	; 0x9c
 8080ff0:	f7ff fc88 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("particle", "connected",60,PRIVATE);
      Serial.println("connected");
 8080ff4:	f006 fc08 	bl	8087808 <_Z16_fetch_usbserialv>
 8080ff8:	497a      	ldr	r1, [pc, #488]	; (80811e4 <loop+0x84c>)
 8080ffa:	f005 fad8 	bl	80865ae <_ZN5Print7printlnEPKc>
// send data that is already in ubidots list
// add data to list of items to be sent to Ubidots. Max of 10 items in que. Limit set in include file ubidots.h


// ---- get cell signal strength & quality
      CellularSignal sig = Cellular.RSSI();  //this may hang up the system if no connection.
 8080ffe:	4970      	ldr	r1, [pc, #448]	; (80811c0 <loop+0x828>)
 8081000:	a826      	add	r0, sp, #152	; 0x98
 8081002:	f006 fd39 	bl	8087a78 <_ZN5spark13CellularClass4RSSIEv>
                                              //So this line has been moved to after the if Cellular.ready statement
      ubidots.add("CellQual", sig.qual); //value location will show up as Ubidots "context"
 8081006:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8081008:	f008 f9bc 	bl	8089384 <__aeabi_i2f>
 808100c:	4977      	ldr	r1, [pc, #476]	; (80811ec <loop+0x854>)
 808100e:	4602      	mov	r2, r0
 8081010:	4877      	ldr	r0, [pc, #476]	; (80811f0 <loop+0x858>)
 8081012:	f002 fa65 	bl	80834e0 <_ZN7Ubidots3addEPcf>
      ubidots.add("CellStren", sig.rssi);
 8081016:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8081018:	f008 f9b4 	bl	8089384 <__aeabi_i2f>
 808101c:	4975      	ldr	r1, [pc, #468]	; (80811f4 <loop+0x85c>)
 808101e:	4602      	mov	r2, r0
 8081020:	4873      	ldr	r0, [pc, #460]	; (80811f0 <loop+0x858>)
 8081022:	f002 fa5d 	bl	80834e0 <_ZN7Ubidots3addEPcf>
//
//  send the rest of the data to Ubidots
      ubidots.send(DATA_SOURCE_NAME,DATA_SOURCE_NAME); // Send rest of the data to your Ubidots account.
 8081026:	4a74      	ldr	r2, [pc, #464]	; (80811f8 <loop+0x860>)
 8081028:	4871      	ldr	r0, [pc, #452]	; (80811f0 <loop+0x858>)
 808102a:	4611      	mov	r1, r2
 808102c:	f002 fa61 	bl	80834f2 <_ZN7Ubidots4sendEPKcS1_>
                //2020-01-12 modified UbiConstants.h to allow for sending up to 15 variables
                  // but unibots doesn't seem to accept well more than 14 for a device
            //        ubidots.sendAll();
    //readyForOTA(5000); //wait 5 seconds
    //delay(100000);
    waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds
 8081030:	2005      	movs	r0, #5
 8081032:	f7ff fb43 	bl	80806bc <_Z7waitSecm>

    UploadBlink();
 8081036:	f7ff f9cd 	bl	80803d4 <_Z11UploadBlinkv>
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
 808103a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    //readyForOTA(5000); //wait 5 seconds
    //delay(100000);
    waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds

    UploadBlink();
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
 808103e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8081230 <loop+0x898>
 8081042:	4d6e      	ldr	r5, [pc, #440]	; (80811fc <loop+0x864>)
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
 8081044:	f8d8 0000 	ldr.w	r0, [r8]
 8081048:	f007 fd5c 	bl	8088b04 <__aeabi_f2d>
 808104c:	4b6c      	ldr	r3, [pc, #432]	; (8081200 <loop+0x868>)
 808104e:	2200      	movs	r2, #0
 8081050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8081054:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081058:	a355      	add	r3, pc, #340	; (adr r3, 80811b0 <loop+0x818>)
 808105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808105e:	4969      	ldr	r1, [pc, #420]	; (8081204 <loop+0x86c>)
 8081060:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8081064:	a354      	add	r3, pc, #336	; (adr r3, 80811b8 <loop+0x820>)
 8081066:	e9d3 2300 	ldrd	r2, r3, [r3]
 808106a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 808106e:	e9cd 2300 	strd	r2, r3, [sp]
 8081072:	4856      	ldr	r0, [pc, #344]	; (80811cc <loop+0x834>)
 8081074:	4a64      	ldr	r2, [pc, #400]	; (8081208 <loop+0x870>)
 8081076:	f004 fc2f 	bl	80858d8 <sprintf>
 808107a:	7823      	ldrb	r3, [r4, #0]
 808107c:	4a53      	ldr	r2, [pc, #332]	; (80811cc <loop+0x834>)
 808107e:	f88d 3000 	strb.w	r3, [sp]
 8081082:	6829      	ldr	r1, [r5, #0]
 8081084:	233c      	movs	r3, #60	; 0x3c
 8081086:	a81e      	add	r0, sp, #120	; 0x78
 8081088:	f006 f96c 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808108c:	a81f      	add	r0, sp, #124	; 0x7c
 808108e:	f7ff fc39 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
 8081092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081096:	f005 fc0f 	bl	80868b8 <delay>
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 808109a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 808109e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80810a2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80810a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80810aa:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80810ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80810b2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80810b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80810ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80810be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80810c2:	f8d8 0000 	ldr.w	r0, [r8]
 80810c6:	f007 fd1d 	bl	8088b04 <__aeabi_f2d>
 80810ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    sprintf(publishStr, "%s, t1_offset, t2_offset, k_correction, A.volts, Wtemp, Depth_in, %05.2f, %05.2f, %05.2f, %05.3f, %05.2f, %06.3f",
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
 80810ce:	4b4f      	ldr	r3, [pc, #316]	; (808120c <loop+0x874>)
   ///   delay(500);
   ///   close_SD();

      Serial.println("finished uploading");
// send warning message to particle console
       sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 80810d0:	4e4f      	ldr	r6, [pc, #316]	; (8081210 <loop+0x878>)
                    works, t1_offset, t2_offset, k, Avolts, t2, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
delay(500);
  //  char _json[256];
      snprintf(_json, sizeof(_json), "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                          t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
 80810d2:	6818      	ldr	r0, [r3, #0]
 80810d4:	f007 fd16 	bl	8088b04 <__aeabi_f2d>
 80810d8:	4a4e      	ldr	r2, [pc, #312]	; (8081214 <loop+0x87c>)
 80810da:	e9cd 0100 	strd	r0, r1, [sp]
 80810de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80810e2:	a830      	add	r0, sp, #192	; 0xc0
 80810e4:	f004 fc10 	bl	8085908 <snprintf>
 80810e8:	7823      	ldrb	r3, [r4, #0]
 80810ea:	aa30      	add	r2, sp, #192	; 0xc0
 80810ec:	494a      	ldr	r1, [pc, #296]	; (8081218 <loop+0x880>)
 80810ee:	f88d 3000 	strb.w	r3, [sp]
 80810f2:	a81e      	add	r0, sp, #120	; 0x78
 80810f4:	233c      	movs	r3, #60	; 0x3c
 80810f6:	f006 f935 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80810fa:	a81f      	add	r0, sp, #124	; 0x7c
 80810fc:	f7ff fc02 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("data", _json, PRIVATE);
delay(500);
 8081100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081104:	f005 fbd8 	bl	80868b8 <delay>
  //      sprintf(_json, ", %06.2f, %03.2f", fuel.getVCell(), fuel.getSoC());
   ///   logData(_json);
   ///   delay(500);
   ///   close_SD();

      Serial.println("finished uploading");
 8081108:	f006 fb7e 	bl	8087808 <_Z16_fetch_usbserialv>
 808110c:	4943      	ldr	r1, [pc, #268]	; (808121c <loop+0x884>)
 808110e:	f005 fa4e 	bl	80865ae <_ZN5Print7printlnEPKc>
// send warning message to particle console
       sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 8081112:	6832      	ldr	r2, [r6, #0]
 8081114:	4942      	ldr	r1, [pc, #264]	; (8081220 <loop+0x888>)
 8081116:	482d      	ldr	r0, [pc, #180]	; (80811cc <loop+0x834>)
 8081118:	f004 fbde 	bl	80858d8 <sprintf>
 808111c:	7823      	ldrb	r3, [r4, #0]
 808111e:	4a2b      	ldr	r2, [pc, #172]	; (80811cc <loop+0x834>)
 8081120:	f88d 3000 	strb.w	r3, [sp]
 8081124:	6829      	ldr	r1, [r5, #0]
 8081126:	233c      	movs	r3, #60	; 0x3c
 8081128:	a81e      	add	r0, sp, #120	; 0x78
 808112a:	f006 f91b 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808112e:	a81f      	add	r0, sp, #124	; 0x7c
 8081130:	f7ff fbe8 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr,60,PRIVATE);
      waitSec(seconds);  //wait seconds
 8081134:	6830      	ldr	r0, [r6, #0]
 8081136:	f7ff fac1 	bl	80806bc <_Z7waitSecm>
 808113a:	f004 f911 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
 808113e:	4606      	mov	r6, r0
 8081140:	f004 f90e 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
} //end getmedianNum

inline void waitMS(uint32_t timeout)   // function to delay the system thread for the timeout period
{ // timeout == 0 waits forever
  uint32_t ms = millis();
  while (timeout == 0 || millis() - ms < timeout)
 8081144:	1b80      	subs	r0, r0, r6
 8081146:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 808114a:	d204      	bcs.n	8081156 <loop+0x7be>
 808114c:	f7ff f840 	bl	80801d0 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8081150:	f004 fb72 	bl	8085838 <spark_process>
 8081154:	e7f4      	b.n	8081140 <loop+0x7a8>
         sprintf(publishStr, "sleeping %2i minutes", minutes+1);
       }
  else {
    */
  // send message to particle console
       sprintf(publishStr, "sleeping %2i minutes", minutes);
 8081156:	4e1b      	ldr	r6, [pc, #108]	; (80811c4 <loop+0x82c>)
 8081158:	4932      	ldr	r1, [pc, #200]	; (8081224 <loop+0x88c>)
 808115a:	6832      	ldr	r2, [r6, #0]
 808115c:	481b      	ldr	r0, [pc, #108]	; (80811cc <loop+0x834>)
 808115e:	f004 fbbb 	bl	80858d8 <sprintf>
       sprintf(event_name, " %s_on_%s", unit_name.c_str(), code_name);
 8081162:	682a      	ldr	r2, [r5, #0]
 8081164:	4b30      	ldr	r3, [pc, #192]	; (8081228 <loop+0x890>)
 8081166:	4931      	ldr	r1, [pc, #196]	; (808122c <loop+0x894>)
 8081168:	a81e      	add	r0, sp, #120	; 0x78
 808116a:	f004 fbb5 	bl	80858d8 <sprintf>
 808116e:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081170:	a91e      	add	r1, sp, #120	; 0x78
 8081172:	4a16      	ldr	r2, [pc, #88]	; (80811cc <loop+0x834>)
 8081174:	f88d 3000 	strb.w	r3, [sp]
 8081178:	a81a      	add	r0, sp, #104	; 0x68
 808117a:	233c      	movs	r3, #60	; 0x3c
 808117c:	f006 f8f2 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081180:	a81b      	add	r0, sp, #108	; 0x6c
 8081182:	f7ff fbbf 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish(event_name, publishStr,60,PRIVATE);
      waitSec(2); //wait 2 more seconds
 8081186:	2002      	movs	r0, #2
 8081188:	f7ff fa98 	bl	80806bc <_Z7waitSecm>
// Go to sleep for the amount of time determined by the battery charge
  // for sleep modes see:https://community.particle.io/t/choosing-an-electron-sleep-mode/41822?u=colemanjj
     System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);   //keeps SOC meter running
 808118c:	4b11      	ldr	r3, [pc, #68]	; (80811d4 <loop+0x83c>)
 808118e:	6831      	ldr	r1, [r6, #0]
 8081190:	681a      	ldr	r2, [r3, #0]
 8081192:	4b11      	ldr	r3, [pc, #68]	; (80811d8 <loop+0x840>)
 8081194:	434a      	muls	r2, r1
 8081196:	681b      	ldr	r3, [r3, #0]
 8081198:	2101      	movs	r1, #1
 808119a:	a81a      	add	r0, sp, #104	; 0x68
 808119c:	f004 fe4a 	bl	8085e34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>

//-----------LOOP
void loop() {  
  char event_name[30];
  //Serial.println("in loop");
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 80811a0:	a818      	add	r0, sp, #96	; 0x60
 80811a2:	f005 fe5e 	bl	8086e62 <_ZN9FuelGaugeD1Ev>
    // System.sleep(SLEEP_MODE_SOFTPOWEROFF, sleepInterval * minutes);  // shuts down SOC meter
    // SLEEP_MODE_DEEP = 161 μA
    // SLEEP_MODE_SOFTPOWEROFF = 110 μA


} // end loop()
 80811a6:	b071      	add	sp, #452	; 0x1c4
 80811a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80811ac:	f3af 8000 	nop.w
 80811b0:	33333333 	.word	0x33333333
 80811b4:	bfe33333 	.word	0xbfe33333
 80811b8:	9999999a 	.word	0x9999999a
 80811bc:	bfe99999 	.word	0xbfe99999
 80811c0:	20000d58 	.word	0x20000d58
 80811c4:	2000001c 	.word	0x2000001c
 80811c8:	0808ce76 	.word	0x0808ce76
 80811cc:	2000071c 	.word	0x2000071c
 80811d0:	0808cea9 	.word	0x0808cea9
 80811d4:	2000002c 	.word	0x2000002c
 80811d8:	200006ec 	.word	0x200006ec
 80811dc:	200006dc 	.word	0x200006dc
 80811e0:	0808cec8 	.word	0x0808cec8
 80811e4:	0808cee7 	.word	0x0808cee7
 80811e8:	0808cef1 	.word	0x0808cef1
 80811ec:	0808cefa 	.word	0x0808cefa
 80811f0:	200006e0 	.word	0x200006e0
 80811f4:	0808cf03 	.word	0x0808cf03
 80811f8:	0808cf0d 	.word	0x0808cf0d
 80811fc:	200006cc 	.word	0x200006cc
 8081200:	3ff40000 	.word	0x3ff40000
 8081204:	0808cf19 	.word	0x0808cf19
 8081208:	2000073a 	.word	0x2000073a
 808120c:	20000020 	.word	0x20000020
 8081210:	20000018 	.word	0x20000018
 8081214:	0808cf8a 	.word	0x0808cf8a
 8081218:	0808d4b4 	.word	0x0808d4b4
 808121c:	0808d014 	.word	0x0808d014
 8081220:	0808d027 	.word	0x0808d027
 8081224:	0808d04b 	.word	0x0808d04b
 8081228:	0808d060 	.word	0x0808d060
 808122c:	0808d071 	.word	0x0808d071
 8081230:	20000024 	.word	0x20000024

08081234 <_Z9delayTime6String>:
  // In 2.0.0 and later, RESET_NO_WAIT prevents notifying the cloud of a pending reset
  System.reset();
    }

int delayTime(String delay)
  { if(delay == "long")
 8081234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081236:	490e      	ldr	r1, [pc, #56]	; (8081270 <_Z9delayTime6String+0x3c>)
 8081238:	f005 f96c 	bl	8086514 <_ZNK6String6equalsEPKc>
 808123c:	4b0d      	ldr	r3, [pc, #52]	; (8081274 <_Z9delayTime6String+0x40>)
 808123e:	b180      	cbz	r0, 8081262 <_Z9delayTime6String+0x2e>
      {seconds=120;   // creat enough delay time to flash the unit
 8081240:	2278      	movs	r2, #120	; 0x78
 8081242:	601a      	str	r2, [r3, #0]
 8081244:	4b0c      	ldr	r3, [pc, #48]	; (8081278 <_Z9delayTime6String+0x44>)
 8081246:	4a0d      	ldr	r2, [pc, #52]	; (808127c <_Z9delayTime6String+0x48>)
 8081248:	781b      	ldrb	r3, [r3, #0]
 808124a:	490d      	ldr	r1, [pc, #52]	; (8081280 <_Z9delayTime6String+0x4c>)
 808124c:	f88d 3000 	strb.w	r3, [sp]
 8081250:	a802      	add	r0, sp, #8
 8081252:	233c      	movs	r3, #60	; 0x3c
 8081254:	f006 f886 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081258:	a803      	add	r0, sp, #12
 808125a:	f7ff fb53 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
 808125e:	2001      	movs	r0, #1
 8081260:	e003      	b.n	808126a <_Z9delayTime6String+0x36>
    else 
      {seconds=5; return -1; }
 8081262:	2205      	movs	r2, #5
 8081264:	601a      	str	r2, [r3, #0]
 8081266:	f04f 30ff 	mov.w	r0, #4294967295
  }
 808126a:	b005      	add	sp, #20
 808126c:	f85d fb04 	ldr.w	pc, [sp], #4
 8081270:	0808d07b 	.word	0x0808d07b
 8081274:	20000018 	.word	0x20000018
 8081278:	200006dc 	.word	0x200006dc
 808127c:	0808d080 	.word	0x0808d080
 8081280:	0808d08d 	.word	0x0808d08d

08081284 <setup>:
  // reset the system after 15 min if the application is stuck.  set as an escape from some hangup.
    // watchDog is petted after cell connection estsblished
 //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
 8081284:	b510      	push	{r4, lr}
 8081286:	b088      	sub	sp, #32
     Serial.begin(9600);
 8081288:	f006 fabe 	bl	8087808 <_Z16_fetch_usbserialv>
 808128c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081290:	f006 faa0 	bl	80877d4 <_ZN9USBSerial5beginEl>
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 8081294:	2018      	movs	r0, #24
 8081296:	f7fe ff02 	bl	808009e <_Znwj>
 808129a:	4604      	mov	r4, r0
 808129c:	b128      	cbz	r0, 80812aa <setup+0x26>
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
    ApplicationWatchdog(std::chrono::milliseconds ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}
 808129e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80812a2:	4a39      	ldr	r2, [pc, #228]	; (8081388 <setup+0x104>)
 80812a4:	4939      	ldr	r1, [pc, #228]	; (808138c <setup+0x108>)
 80812a6:	f7fe ff9b 	bl	80801e0 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 80812aa:	4b39      	ldr	r3, [pc, #228]	; (8081390 <setup+0x10c>)
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 80812ac:	2101      	movs	r1, #1
 //ApplicationWatchdog wDog(90000, watchdogHandler, 512);

// ---------SETUP------------
void setup() {
     Serial.begin(9600);
       wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 80812ae:	601c      	str	r4, [r3, #0]
///    Particle.variable("temp", t2);

//  Do I need to set up D0 and D1 in some way for the BME280s   ????????????
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 80812b0:	4b38      	ldr	r3, [pc, #224]	; (8081394 <setup+0x110>)
 80812b2:	8818      	ldrh	r0, [r3, #0]
 80812b4:	f006 ff8c 	bl	80881d0 <pinMode>
// create power on digital pins for stable power supply AND so that sensors are shut down
  // when processor is shut down
	pinMode(D3, OUTPUT);     // power for the all digital sensors
 80812b8:	2101      	movs	r1, #1
 80812ba:	2003      	movs	r0, #3
 80812bc:	f006 ff88 	bl	80881d0 <pinMode>
	digitalWrite(D3, HIGH);
 80812c0:	2101      	movs	r1, #1
 80812c2:	2003      	movs	r0, #3
 80812c4:	f006 ff95 	bl	80881f2 <digitalWrite>
                              //activate the Electron internal pullup resistor but also have a 4.7Kohm pullup on the board
//	pinMode(D6, OUTPUT);     // power for 2nd analog sensor nt needed because TDS powered off B1
//	digitalWrite(D6, HIGH);

	pinMode(B0, OUTPUT);     // power for analog rain sensor
 80812c8:	2101      	movs	r1, #1
 80812ca:	2018      	movs	r0, #24
 80812cc:	f006 ff80 	bl	80881d0 <pinMode>
	digitalWrite(B0, HIGH);	//
 80812d0:	2101      	movs	r1, #1
 80812d2:	2018      	movs	r0, #24
 80812d4:	f006 ff8d 	bl	80881f2 <digitalWrite>
  pinMode(B1, OUTPUT);     // power for analog TDS sensor
 80812d8:	2101      	movs	r1, #1
 80812da:	2019      	movs	r0, #25
 80812dc:	f006 ff78 	bl	80881d0 <pinMode>
  digitalWrite(B1, HIGH);	//
 80812e0:	2101      	movs	r1, #1
 80812e2:	2019      	movs	r0, #25
 80812e4:	f006 ff85 	bl	80881f2 <digitalWrite>
	delay(500);   // delay to give time for power to turn on, don't know if this is needed
 80812e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80812ec:	f005 fae4 	bl	80868b8 <delay>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 80812f0:	2100      	movs	r1, #0
 80812f2:	a805      	add	r0, sp, #20
 80812f4:	f004 fb37 	bl	8085966 <_ZN4PMICC1Eb>
    // from spark_wiring_power.cpp
     @ https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_power.cpp
     This will be overridden if the input voltage drops out and comes back though (with something like a solar cell)
     and it will be set back to the default 900mA level. To counteract that you could set it in a Software Timer every 60 seconds or so.
    *******************************************************************************/
 pmic.setChargeCurrent(0, 0, 1, 0, 0, 0);      // Set charging current to 1024mA (512 + 512 offset)    //???????? is this good idea?
 80812f8:	2200      	movs	r2, #0
 80812fa:	4611      	mov	r1, r2
 80812fc:	9202      	str	r2, [sp, #8]
 80812fe:	9201      	str	r2, [sp, #4]
 8081300:	9200      	str	r2, [sp, #0]
 8081302:	2301      	movs	r3, #1
 8081304:	a805      	add	r0, sp, #20
 8081306:	f004 fc23 	bl	8085b50 <_ZN4PMIC16setChargeCurrentEbbbbbb>
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
    */
 // Set the lowest input voltage to 4.84 volts. This keeps the solar panel from operating below 4.84 volts.
 pmic.setInputVoltageLimit(4840);  //  taken from code suggested by RyanB in the https://community.particle.io forum
 808130a:	f241 21e8 	movw	r1, #4840	; 0x12e8
 808130e:	a805      	add	r0, sp, #20
 8081310:	f004 fb94 	bl	8085a3c <_ZN4PMIC20setInputVoltageLimitEt>
                    5000
                    5080
  * Return         : 0 Error, 1 Success
 *******************************************************************************/
 //pmic.setChargeVoltage(4512);  // for sealed lead-acit (SLA) battery. may not be implemented in spark_wiring_power.cpp
 pmic.setChargeVoltage(4208); // set upper limit on charge voltage. this limits the
 8081314:	f241 0170 	movw	r1, #4208	; 0x1070
 8081318:	a805      	add	r0, sp, #20
 808131a:	f004 fc4c 	bl	8085bb6 <_ZN4PMIC16setChargeVoltageEt>
  *******************************************************************************
   bool PMIC::setChargeVoltage(uint16_t voltage) {.......................
 *******************************************************************************/

 // setup two BME280s
    if (!bme1.begin(0x77)) // the air sensor BME280 for temp, humidity, pressure
 808131e:	2177      	movs	r1, #119	; 0x77
 8081320:	481d      	ldr	r0, [pc, #116]	; (8081398 <setup+0x114>)
 8081322:	f003 f840 	bl	80843a6 <_ZN9CE_BME2805beginEh>
 8081326:	b960      	cbnz	r0, 8081342 <setup+0xbe>
 8081328:	4b1c      	ldr	r3, [pc, #112]	; (808139c <setup+0x118>)
 808132a:	a806      	add	r0, sp, #24
 808132c:	781b      	ldrb	r3, [r3, #0]
 808132e:	4a1c      	ldr	r2, [pc, #112]	; (80813a0 <setup+0x11c>)
 8081330:	f88d 3000 	strb.w	r3, [sp]
 8081334:	491b      	ldr	r1, [pc, #108]	; (80813a4 <setup+0x120>)
 8081336:	233c      	movs	r3, #60	; 0x3c
 8081338:	f006 f814 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808133c:	a807      	add	r0, sp, #28
 808133e:	f7ff fae1 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///      Serial.println("Could not find 1st valid BME280 sensor, check wiring!");
      Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
        //  while (1);  // original code had this but seems like an endless loop if the BME is not detected.
      }
    if (!bme2.begin(0x76))  // the water depth sensor in oil made from a BME280. Temp and pressure
 8081342:	2176      	movs	r1, #118	; 0x76
 8081344:	4818      	ldr	r0, [pc, #96]	; (80813a8 <setup+0x124>)
 8081346:	f003 f82e 	bl	80843a6 <_ZN9CE_BME2805beginEh>
 808134a:	b960      	cbnz	r0, 8081366 <setup+0xe2>
 808134c:	4b13      	ldr	r3, [pc, #76]	; (808139c <setup+0x118>)
 808134e:	a806      	add	r0, sp, #24
 8081350:	781b      	ldrb	r3, [r3, #0]
 8081352:	4a13      	ldr	r2, [pc, #76]	; (80813a0 <setup+0x11c>)
 8081354:	f88d 3000 	strb.w	r3, [sp]
 8081358:	4912      	ldr	r1, [pc, #72]	; (80813a4 <setup+0x120>)
 808135a:	233c      	movs	r3, #60	; 0x3c
 808135c:	f006 f802 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081360:	a807      	add	r0, sp, #28
 8081362:	f7ff facf 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
///        Serial.println("Could not find 2nd valid BME280 sensor, check wiring!");
        Particle.publish("ObiDots", "could not find bme1",60,PRIVATE);
      }

 setup_SD();
 8081366:	f7ff f9cf 	bl	8080708 <_Z8setup_SDv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 808136a:	4a10      	ldr	r2, [pc, #64]	; (80813ac <setup+0x128>)
 808136c:	4910      	ldr	r1, [pc, #64]	; (80813b0 <setup+0x12c>)
 808136e:	4811      	ldr	r0, [pc, #68]	; (80813b4 <setup+0x130>)
 8081370:	f005 fee8 	bl	8087144 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  // register a Particle cloud Function
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
 8081374:	f006 fa48 	bl	8087808 <_Z16_fetch_usbserialv>
 8081378:	490f      	ldr	r1, [pc, #60]	; (80813b8 <setup+0x134>)
 808137a:	f005 f918 	bl	80865ae <_ZN5Print7printlnEPKc>

  //ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data.

// Initalize the PMIC class so you can call the Power Management functions below.
  // Particle.publish("PMIC", "setting charge in setup",60,PRIVATE);
  PMIC pmic;
 808137e:	a805      	add	r0, sp, #20
 8081380:	f004 fb00 	bl	8085984 <_ZN4PMICD1Ev>
 setup_SD();
  // register a Particle cloud Function
  Particle.function("Delay", delayTime);

 Serial.println("ending setup");
} // end setup()
 8081384:	b008      	add	sp, #32
 8081386:	bd10      	pop	{r4, pc}
 8081388:	08080179 	.word	0x08080179
 808138c:	000927c0 	.word	0x000927c0
 8081390:	200005f4 	.word	0x200005f4
 8081394:	20000028 	.word	0x20000028
 8081398:	200005f8 	.word	0x200005f8
 808139c:	200006dc 	.word	0x200006dc
 80813a0:	0808d096 	.word	0x0808d096
 80813a4:	0808d0aa 	.word	0x0808d0aa
 80813a8:	20000628 	.word	0x20000628
 80813ac:	0808d0b2 	.word	0x0808d0b2
 80813b0:	08081235 	.word	0x08081235
 80813b4:	08087119 	.word	0x08087119
 80813b8:	0808d0b8 	.word	0x0808d0b8

080813bc <_GLOBAL__sub_I_fileName>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80813bc:	4b3f      	ldr	r3, [pc, #252]	; (80814bc <_GLOBAL__sub_I_fileName+0x100>)
      {seconds=120;   // creat enough delay time to flash the unit
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
    else 
      {seconds=5; return -1; }
  }
 80813be:	b570      	push	{r4, r5, r6, lr}
 80813c0:	2400      	movs	r4, #0
 80813c2:	601c      	str	r4, [r3, #0]
 80813c4:	4b3e      	ldr	r3, [pc, #248]	; (80814c0 <_GLOBAL__sub_I_fileName+0x104>)
 80813c6:	2501      	movs	r5, #1
 80813c8:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80813ca:	f003 ff29 	bl	8085220 <HAL_Pin_Map>
#include <SPI.h>        //**
#include <SdFat.h>      //**
// SD chip select pin.  Be sure to disable any other SPI devices such as Enet.
const uint8_t chipSelect = SS;  //**
// create filename as a global variable for use in several functions
String fileName ;       //**
 80813ce:	493d      	ldr	r1, [pc, #244]	; (80814c4 <_GLOBAL__sub_I_fileName+0x108>)
 80813d0:	483d      	ldr	r0, [pc, #244]	; (80814c8 <_GLOBAL__sub_I_fileName+0x10c>)
 80813d2:	f005 f818 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80813d6:	4e3d      	ldr	r6, [pc, #244]	; (80814cc <_GLOBAL__sub_I_fileName+0x110>)
 80813d8:	4a3d      	ldr	r2, [pc, #244]	; (80814d0 <_GLOBAL__sub_I_fileName+0x114>)
 80813da:	493e      	ldr	r1, [pc, #248]	; (80814d4 <_GLOBAL__sub_I_fileName+0x118>)
 80813dc:	483a      	ldr	r0, [pc, #232]	; (80814c8 <_GLOBAL__sub_I_fileName+0x10c>)
 80813de:	f007 f807 	bl	80883f0 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80813e2:	4b3d      	ldr	r3, [pc, #244]	; (80814d8 <_GLOBAL__sub_I_fileName+0x11c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80813e4:	2264      	movs	r2, #100	; 0x64
 80813e6:	6831      	ldr	r1, [r6, #0]
 80813e8:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 80813ec:	4a3b      	ldr	r2, [pc, #236]	; (80814dc <_GLOBAL__sub_I_fileName+0x120>)
 80813ee:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
 80813f2:	400d      	ands	r5, r1
 80813f4:	71dc      	strb	r4, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80813f6:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 80813fa:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 80813fe:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 8081402:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 8081406:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 808140a:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 808140e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 8081412:	461c      	mov	r4, r3
 8081414:	d10f      	bne.n	8081436 <_GLOBAL__sub_I_fileName+0x7a>
 8081416:	4630      	mov	r0, r6
 8081418:	f7fe fe49 	bl	80800ae <__cxa_guard_acquire>
 808141c:	b158      	cbz	r0, 8081436 <_GLOBAL__sub_I_fileName+0x7a>
 808141e:	4629      	mov	r1, r5
 8081420:	482f      	ldr	r0, [pc, #188]	; (80814e0 <_GLOBAL__sub_I_fileName+0x124>)
 8081422:	f004 fbfb 	bl	8085c1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081426:	4630      	mov	r0, r6
 8081428:	f7fe fe46 	bl	80800b8 <__cxa_guard_release>
 808142c:	4a28      	ldr	r2, [pc, #160]	; (80814d0 <_GLOBAL__sub_I_fileName+0x114>)
 808142e:	492d      	ldr	r1, [pc, #180]	; (80814e4 <_GLOBAL__sub_I_fileName+0x128>)
 8081430:	482b      	ldr	r0, [pc, #172]	; (80814e0 <_GLOBAL__sub_I_fileName+0x124>)
 8081432:	f006 ffdd 	bl	80883f0 <__aeabi_atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 8081436:	4b2a      	ldr	r3, [pc, #168]	; (80814e0 <_GLOBAL__sub_I_fileName+0x124>)
 8081438:	482b      	ldr	r0, [pc, #172]	; (80814e8 <_GLOBAL__sub_I_fileName+0x12c>)
 808143a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 808143e:	2400      	movs	r4, #0
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8081440:	4b2a      	ldr	r3, [pc, #168]	; (80814ec <_GLOBAL__sub_I_fileName+0x130>)
// File system object.
SdFat sd;               //**
// identify a Logging file.
SdFile file;            //**
 8081442:	4a23      	ldr	r2, [pc, #140]	; (80814d0 <_GLOBAL__sub_I_fileName+0x114>)
 8081444:	492a      	ldr	r1, [pc, #168]	; (80814f0 <_GLOBAL__sub_I_fileName+0x134>)
 8081446:	7204      	strb	r4, [r0, #8]
 8081448:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808144a:	6044      	str	r4, [r0, #4]
 808144c:	6003      	str	r3, [r0, #0]
 808144e:	f006 ffcf 	bl	80883f0 <__aeabi_atexit>
// Error messages stored in flash.
#define error(msg) sd.errorHalt(F(msg))
// for camera-------------------------------
#include "camera_VC0706.h"
camera_VC0706 cam(&Serial1);
 8081452:	f006 fbc5 	bl	8087be0 <_Z22__fetch_global_Serial1v>
 8081456:	4601      	mov	r1, r0
 8081458:	4826      	ldr	r0, [pc, #152]	; (80814f4 <_GLOBAL__sub_I_fileName+0x138>)
 808145a:	f003 f908 	bl	808466e <_ZN13camera_VC0706C1EP11USARTSerial>
#include "sensitive_definitions.h"  // this file contains ubidots token definition
                               // e.g.  #define your_token ""  // Put here your Ubidots TOKEN
// for the temp. humidity, pressure BME280 sensor
#include <CE_BME280.h>
// Create two BME280 instances
CE_BME280 bme1; // I2C  for air temp. pressure, humidity
 808145e:	4826      	ldr	r0, [pc, #152]	; (80814f8 <_GLOBAL__sub_I_fileName+0x13c>)
 8081460:	f002 febf 	bl	80841e2 <_ZN9CE_BME280C1Ev>
CE_BME280 bme2; // I2C   for WATER temp. & pressure
 8081464:	4825      	ldr	r0, [pc, #148]	; (80814fc <_GLOBAL__sub_I_fileName+0x140>)
 8081466:	f002 febc 	bl	80841e2 <_ZN9CE_BME280C1Ev>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808146a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808146e:	4d24      	ldr	r5, [pc, #144]	; (8081500 <_GLOBAL__sub_I_fileName+0x144>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081470:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081472:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081474:	602c      	str	r4, [r5, #0]
 8081476:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081478:	71ac      	strb	r4, [r5, #6]
 808147a:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808147c:	f004 f938 	bl	80856f0 <set_system_mode>

#include <Adafruit_DHT_Particle.h>  // air and humidity sensor.   includes "isnan()" function

#include <Ubidots.h>   // using here Ubidots=3.1.4
//SYSTEM_MODE(AUTOMATIC); 
SYSTEM_MODE(SEMI_AUTOMATIC);   // was set at semi_automatic but I could not flash remotely, tried automatic then set back to semi-automatic
 8081480:	4a13      	ldr	r2, [pc, #76]	; (80814d0 <_GLOBAL__sub_I_fileName+0x114>)
 8081482:	4920      	ldr	r1, [pc, #128]	; (8081504 <_GLOBAL__sub_I_fileName+0x148>)
 8081484:	4628      	mov	r0, r5
 8081486:	f006 ffb3 	bl	80883f0 <__aeabi_atexit>
//The only main difference between SEMI_AUTOMATIC mode and AUTOMATIC mode is that for semi-automatic
    // Particle.connect() is not called at the beginning of your code;  With semi-automatic you must call Particle.connect() yourself
SYSTEM_THREAD(ENABLED);       // seems to make the checking for connection routine work, keep an eye on this ****
 808148a:	4621      	mov	r1, r4
 808148c:	2001      	movs	r0, #1
 808148e:	f004 f947 	bl	8085720 <system_thread_set_state>
//#define your_token "xyz..."  // for privacy, the Ubidots token is defined in the included .h file as "your_token"
#define DATA_SOURCE_NAME "Spudnik-08b"
//#define unit_name "Spudnik-08b"
String unit_name = "Spudnik-08b";
 8081492:	491d      	ldr	r1, [pc, #116]	; (8081508 <_GLOBAL__sub_I_fileName+0x14c>)
 8081494:	481d      	ldr	r0, [pc, #116]	; (808150c <_GLOBAL__sub_I_fileName+0x150>)
 8081496:	f004 ffb6 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>
 808149a:	4a0d      	ldr	r2, [pc, #52]	; (80814d0 <_GLOBAL__sub_I_fileName+0x114>)
 808149c:	490d      	ldr	r1, [pc, #52]	; (80814d4 <_GLOBAL__sub_I_fileName+0x118>)
 808149e:	481b      	ldr	r0, [pc, #108]	; (808150c <_GLOBAL__sub_I_fileName+0x150>)
 80814a0:	f006 ffa6 	bl	80883f0 <__aeabi_atexit>
#define code_name "particlesolar30c"

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 80814a4:	2201      	movs	r2, #1
 80814a6:	491a      	ldr	r1, [pc, #104]	; (8081510 <_GLOBAL__sub_I_fileName+0x154>)
 80814a8:	481a      	ldr	r0, [pc, #104]	; (8081514 <_GLOBAL__sub_I_fileName+0x158>)
 80814aa:	f001 ffe9 	bl	8083480 <_ZN7UbidotsC1EPc11IotProtocol>
      {seconds=120;   // creat enough delay time to flash the unit
       Particle.publish("Particle", "in delayTime",60,PRIVATE);
       return 1; }
    else 
      {seconds=5; return -1; }
  }
 80814ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String unit_name = "Spudnik-08b";
#define code_name "particlesolar30c"

ApplicationWatchdog *wd;

Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 80814b2:	4a07      	ldr	r2, [pc, #28]	; (80814d0 <_GLOBAL__sub_I_fileName+0x114>)
 80814b4:	4918      	ldr	r1, [pc, #96]	; (8081518 <_GLOBAL__sub_I_fileName+0x15c>)
 80814b6:	4817      	ldr	r0, [pc, #92]	; (8081514 <_GLOBAL__sub_I_fileName+0x158>)
 80814b8:	f006 bf9a 	b.w	80883f0 <__aeabi_atexit>
 80814bc:	200006ec 	.word	0x200006ec
 80814c0:	200006dc 	.word	0x200006dc
 80814c4:	0808d6df 	.word	0x0808d6df
 80814c8:	200005e4 	.word	0x200005e4
 80814cc:	20000144 	.word	0x20000144
 80814d0:	20000140 	.word	0x20000140
 80814d4:	08086379 	.word	0x08086379
 80814d8:	20000160 	.word	0x20000160
 80814dc:	0808cc18 	.word	0x0808cc18
 80814e0:	20000148 	.word	0x20000148
 80814e4:	0808017d 	.word	0x0808017d
 80814e8:	200006f0 	.word	0x200006f0
 80814ec:	0808cc24 	.word	0x0808cc24
 80814f0:	080800db 	.word	0x080800db
 80814f4:	20000658 	.word	0x20000658
 80814f8:	200005f8 	.word	0x200005f8
 80814fc:	20000628 	.word	0x20000628
 8081500:	20000154 	.word	0x20000154
 8081504:	0808018d 	.word	0x0808018d
 8081508:	0808cf0d 	.word	0x0808cf0d
 808150c:	200006cc 	.word	0x200006cc
 8081510:	0808d0c5 	.word	0x0808d0c5
 8081514:	200006e0 	.word	0x200006e0
 8081518:	0808349d 	.word	0x0808349d

0808151c <_GLOBAL__sub_I_MinimumSerial.cpp>:
 808151c:	f003 be80 	b.w	8085220 <HAL_Pin_Map>

08081520 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8081520:	f003 be7e 	b.w	8085220 <HAL_Pin_Map>

08081524 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8081524:	b510      	push	{r4, lr}
 8081526:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081528:	3024      	adds	r0, #36	; 0x24
 808152a:	f000 fe79 	bl	8082220 <_ZN8FatCache4syncEv>
 808152e:	b128      	cbz	r0, 808153c <_ZN9FatVolume9cacheSyncEv+0x18>
 8081530:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 8081534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081538:	f000 be72 	b.w	8082220 <_ZN8FatCache4syncEv>
  }
 808153c:	bd10      	pop	{r4, pc}

0808153e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 808153e:	1e41      	subs	r1, r0, #1
 8081540:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8081544:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8081546:	0843      	lsrs	r3, r0, #1
 8081548:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 808154c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8081550:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081552:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8081554:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081558:	d1f5      	bne.n	8081546 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 808155a:	4770      	bx	lr

0808155c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 808155c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8081560:	7803      	ldrb	r3, [r0, #0]
 8081562:	1c44      	adds	r4, r0, #1
 8081564:	2b20      	cmp	r3, #32
 8081566:	d101      	bne.n	808156c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8081568:	4620      	mov	r0, r4
 808156a:	e7f9      	b.n	8081560 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 808156c:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808156e:	4f70      	ldr	r7, [pc, #448]	; (8081730 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8081570:	6088      	str	r0, [r1, #8]
 8081572:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8081574:	462e      	mov	r6, r5
 8081576:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 808157a:	b30b      	cbz	r3, 80815c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 808157c:	2b2f      	cmp	r3, #47	; 0x2f
 808157e:	d101      	bne.n	8081584 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8081580:	1903      	adds	r3, r0, r4
 8081582:	e017      	b.n	80815b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081584:	2b5c      	cmp	r3, #92	; 0x5c
 8081586:	d102      	bne.n	808158e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8081588:	2000      	movs	r0, #0
 808158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808158e:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8081592:	b2e4      	uxtb	r4, r4
 8081594:	2c1d      	cmp	r4, #29
 8081596:	d803      	bhi.n	80815a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8081598:	fa27 f404 	lsr.w	r4, r7, r4
 808159c:	07e4      	lsls	r4, r4, #31
 808159e:	d4f3      	bmi.n	8081588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80815a0:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80815a4:	2c3c      	cmp	r4, #60	; 0x3c
 80815a6:	d0ef      	beq.n	8081588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80815a8:	3b20      	subs	r3, #32
 80815aa:	2b5e      	cmp	r3, #94	; 0x5e
 80815ac:	d9e1      	bls.n	8081572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80815ae:	e7eb      	b.n	8081588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80815b0:	2d2f      	cmp	r5, #47	; 0x2f
 80815b2:	d105      	bne.n	80815c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80815b4:	461e      	mov	r6, r3
 80815b6:	f813 5b01 	ldrb.w	r5, [r3], #1
 80815ba:	2d20      	cmp	r5, #32
 80815bc:	d1f8      	bne.n	80815b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80815be:	e7f9      	b.n	80815b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80815c0:	6016      	str	r6, [r2, #0]
 80815c2:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80815c4:	4298      	cmp	r0, r3
 80815c6:	ebc0 0803 	rsb	r8, r0, r3
 80815ca:	d009      	beq.n	80815e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80815cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80815d0:	2a2e      	cmp	r2, #46	; 0x2e
 80815d2:	d0f7      	beq.n	80815c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80815d4:	2a20      	cmp	r2, #32
 80815d6:	d0f5      	beq.n	80815c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80815d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80815dc:	dcd4      	bgt.n	8081588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80815de:	e001      	b.n	80815e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80815e0:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80815e4:	f8c1 8004 	str.w	r8, [r1, #4]
 80815e8:	f101 030c 	add.w	r3, r1, #12
 80815ec:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80815f0:	2420      	movs	r4, #32
 80815f2:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80815f6:	4293      	cmp	r3, r2
 80815f8:	d1fb      	bne.n	80815f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80815fa:	4603      	mov	r3, r0
 80815fc:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80815fe:	f813 4b01 	ldrb.w	r4, [r3], #1
 8081602:	2c2e      	cmp	r4, #46	; 0x2e
 8081604:	d0fa      	beq.n	80815fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8081606:	2c20      	cmp	r4, #32
 8081608:	d0f8      	beq.n	80815fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808160a:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808160e:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8081612:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8081614:	1c73      	adds	r3, r6, #1
 8081616:	d107      	bne.n	8081628 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8081618:	2700      	movs	r7, #0
 808161a:	f04f 0e07 	mov.w	lr, #7
 808161e:	463d      	mov	r5, r7
 8081620:	46ba      	mov	sl, r7
 8081622:	f04f 0908 	mov.w	r9, #8
 8081626:	e009      	b.n	808163c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8081628:	5d83      	ldrb	r3, [r0, r6]
 808162a:	2b2e      	cmp	r3, #46	; 0x2e
 808162c:	d0f4      	beq.n	8081618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 808162e:	3e01      	subs	r6, #1
 8081630:	e7f0      	b.n	8081614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8081632:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8081634:	2b20      	cmp	r3, #32
 8081636:	d104      	bne.n	8081642 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8081638:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 808163a:	3201      	adds	r2, #1
 808163c:	4542      	cmp	r2, r8
 808163e:	dbf8      	blt.n	8081632 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8081640:	e04b      	b.n	80816da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8081642:	2b2e      	cmp	r3, #46	; 0x2e
 8081644:	d102      	bne.n	808164c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8081646:	42b2      	cmp	r2, r6
 8081648:	d1f6      	bne.n	8081638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 808164a:	e003      	b.n	8081654 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 808164c:	2b22      	cmp	r3, #34	; 0x22
 808164e:	d017      	beq.n	8081680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8081650:	2b7c      	cmp	r3, #124	; 0x7c
 8081652:	d015      	beq.n	8081680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8081654:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8081658:	f1bc 0f05 	cmp.w	ip, #5
 808165c:	d801      	bhi.n	8081662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 808165e:	2b2d      	cmp	r3, #45	; 0x2d
 8081660:	d10e      	bne.n	8081680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 8081662:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8081666:	f1bc 0f05 	cmp.w	ip, #5
 808166a:	d909      	bls.n	8081680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 808166c:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8081670:	f1bc 0f02 	cmp.w	ip, #2
 8081674:	d904      	bls.n	8081680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8081676:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 808167a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 808167e:	d902      	bls.n	8081686 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8081680:	42b2      	cmp	r2, r6
 8081682:	d10e      	bne.n	80816a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8081684:	e049      	b.n	808171a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8081686:	42b2      	cmp	r2, r6
 8081688:	d047      	beq.n	808171a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 808168a:	4575      	cmp	r5, lr
 808168c:	d821      	bhi.n	80816d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 808168e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8081692:	f1bc 0f19 	cmp.w	ip, #25
 8081696:	d808      	bhi.n	80816aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8081698:	3b20      	subs	r3, #32
 808169a:	b2db      	uxtb	r3, r3
        lc |= bit;
 808169c:	ea49 0707 	orr.w	r7, r9, r7
 80816a0:	e00a      	b.n	80816b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80816a2:	4575      	cmp	r5, lr
 80816a4:	d815      	bhi.n	80816d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80816a6:	2400      	movs	r4, #0
      c = '_';
 80816a8:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80816aa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80816ae:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80816b2:	bf98      	it	ls
 80816b4:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80816b8:	f105 0c01 	add.w	ip, r5, #1
 80816bc:	fa5f fc8c 	uxtb.w	ip, ip
 80816c0:	440d      	add	r5, r1
      if (i < 7) {
 80816c2:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80816c6:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80816c8:	d801      	bhi.n	80816ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80816ca:	f881 c00c 	strb.w	ip, [r1, #12]
 80816ce:	4665      	mov	r5, ip
 80816d0:	e7b3      	b.n	808163a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80816d2:	f1be 0f0a 	cmp.w	lr, #10
 80816d6:	d117      	bne.n	8081708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80816d8:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80816da:	7b4b      	ldrb	r3, [r1, #13]
 80816dc:	2b20      	cmp	r3, #32
 80816de:	f43f af53 	beq.w	8081588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80816e2:	b13c      	cbz	r4, 80816f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80816e4:	ea1a 0f07 	tst.w	sl, r7
 80816e8:	bf18      	it	ne
 80816ea:	2702      	movne	r7, #2
 80816ec:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80816ee:	2001      	movs	r0, #1
 80816f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 80816f4:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80816f6:	2001      	movs	r0, #1
 80816f8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80816fa:	4419      	add	r1, r3
 80816fc:	237e      	movs	r3, #126	; 0x7e
 80816fe:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8081700:	2331      	movs	r3, #49	; 0x31
 8081702:	738b      	strb	r3, [r1, #14]
 8081704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8081708:	42b2      	cmp	r2, r6
 808170a:	dce5      	bgt.n	80816d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808170c:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808170e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081712:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081714:	f04f 0910 	mov.w	r9, #16
 8081718:	e78e      	b.n	8081638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808171a:	f1be 0f0a 	cmp.w	lr, #10
 808171e:	d0db      	beq.n	80816d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8081720:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8081722:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081726:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081728:	f04f 0910 	mov.w	r9, #16
 808172c:	e785      	b.n	808163a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808172e:	bf00      	nop
 8081730:	31000101 	.word	0x31000101

08081734 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8081734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081738:	4606      	mov	r6, r0
 808173a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 808173c:	f891 900c 	ldrb.w	r9, [r1, #12]
 8081740:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8081742:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8081744:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8081748:	6869      	ldr	r1, [r5, #4]
 808174a:	68aa      	ldr	r2, [r5, #8]
 808174c:	1863      	adds	r3, r4, r1
 808174e:	b29b      	uxth	r3, r3
 8081750:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8081752:	4291      	cmp	r1, r2
 8081754:	d006      	beq.n	8081764 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8081756:	f812 0b01 	ldrb.w	r0, [r2], #1
 808175a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808175e:	4043      	eors	r3, r0
 8081760:	b29b      	uxth	r3, r3
 8081762:	e7f6      	b.n	8081752 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8081764:	f1b9 0f03 	cmp.w	r9, #3
 8081768:	bf28      	it	cs
 808176a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808176e:	f109 0204 	add.w	r2, r9, #4
 8081772:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8081774:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081778:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808177a:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808177c:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808177e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081780:	bf94      	ite	ls
 8081782:	3130      	addls	r1, #48	; 0x30
 8081784:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8081786:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8081788:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 808178a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808178e:	d3f1      	bcc.n	8081774 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8081790:	eb05 0309 	add.w	r3, r5, r9
 8081794:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8081796:	2100      	movs	r1, #0
 8081798:	4630      	mov	r0, r6
 808179a:	f000 fb1e 	bl	8081dda <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 808179e:	2101      	movs	r1, #1
 80817a0:	4630      	mov	r0, r6
 80817a2:	f000 fafd 	bl	8081da0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80817a6:	4601      	mov	r1, r0
 80817a8:	b928      	cbnz	r0, 80817b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80817aa:	7870      	ldrb	r0, [r6, #1]
 80817ac:	fab0 f080 	clz	r0, r0
 80817b0:	0940      	lsrs	r0, r0, #5
 80817b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80817b6:	7803      	ldrb	r3, [r0, #0]
 80817b8:	b14b      	cbz	r3, 80817ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80817ba:	7ac3      	ldrb	r3, [r0, #11]
 80817bc:	071b      	lsls	r3, r3, #28
 80817be:	d4ee      	bmi.n	808179e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80817c0:	220b      	movs	r2, #11
 80817c2:	4640      	mov	r0, r8
 80817c4:	f008 fb46 	bl	8089e54 <memcmp>
 80817c8:	2800      	cmp	r0, #0
 80817ca:	d1e8      	bne.n	808179e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80817cc:	e002      	b.n	80817d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80817ce:	2001      	movs	r0, #1
 80817d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80817d4:	3401      	adds	r4, #1
 80817d6:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80817d8:	2c64      	cmp	r4, #100	; 0x64
 80817da:	d1b5      	bne.n	8081748 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80817dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080817e0 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80817e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80817e4:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80817e6:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80817e8:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80817ea:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80817ee:	9005      	str	r0, [sp, #20]
 80817f0:	460e      	mov	r6, r1
 80817f2:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80817f4:	d101      	bne.n	80817fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 80817f6:	2000      	movs	r0, #0
 80817f8:	e1a0      	b.n	8081b3c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80817fa:	9b05      	ldr	r3, [sp, #20]
 80817fc:	781b      	ldrb	r3, [r3, #0]
 80817fe:	2b00      	cmp	r3, #0
 8081800:	d1f9      	bne.n	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8081802:	6853      	ldr	r3, [r2, #4]
 8081804:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081806:	7813      	ldrb	r3, [r2, #0]
 8081808:	079b      	lsls	r3, r3, #30
 808180a:	f000 818d 	beq.w	8081b28 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 808180e:	9b02      	ldr	r3, [sp, #8]
 8081810:	270d      	movs	r7, #13
 8081812:	330c      	adds	r3, #12
 8081814:	fbb3 f7f7 	udiv	r7, r3, r7
 8081818:	3701      	adds	r7, #1
 808181a:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 808181c:	f04f 0800 	mov.w	r8, #0
 8081820:	2100      	movs	r1, #0
 8081822:	4630      	mov	r0, r6
 8081824:	f000 fad9 	bl	8081dda <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8081828:	4644      	mov	r4, r8
  uint8_t ord = 0;
 808182a:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 808182c:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808182e:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8081832:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8081836:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808183a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808183c:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 808183e:	2101      	movs	r1, #1
 8081840:	4630      	mov	r0, r6
 8081842:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081844:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8081848:	f000 faaa 	bl	8081da0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808184c:	9b07      	ldr	r3, [sp, #28]
 808184e:	b920      	cbnz	r0, 808185a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 8081850:	7873      	ldrb	r3, [r6, #1]
 8081852:	2b00      	cmp	r3, #0
 8081854:	f000 8090 	beq.w	8081978 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8081858:	e7cd      	b.n	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 808185a:	7802      	ldrb	r2, [r0, #0]
 808185c:	2ae5      	cmp	r2, #229	; 0xe5
 808185e:	d000      	beq.n	8081862 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8081860:	b942      	cbnz	r2, 8081874 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081862:	2c00      	cmp	r4, #0
 8081864:	bf08      	it	eq
 8081866:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8081868:	42bc      	cmp	r4, r7
        freeFound++;
 808186a:	bf3c      	itt	cc
 808186c:	3401      	addcc	r4, #1
 808186e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8081870:	b922      	cbnz	r2, 808187c <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 8081872:	e081      	b.n	8081978 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8081874:	42bc      	cmp	r4, r7
 8081876:	bf38      	it	cc
 8081878:	2400      	movcc	r4, #0
 808187a:	e003      	b.n	8081884 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 808187c:	2ae5      	cmp	r2, #229	; 0xe5
 808187e:	d101      	bne.n	8081884 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8081880:	2500      	movs	r5, #0
 8081882:	e7db      	b.n	808183c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8081884:	2a2e      	cmp	r2, #46	; 0x2e
 8081886:	d0fb      	beq.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081888:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 808188a:	290f      	cmp	r1, #15
 808188c:	d152      	bne.n	8081934 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 808188e:	b93d      	cbnz	r5, 80818a0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8081890:	0651      	lsls	r1, r2, #25
 8081892:	d5d3      	bpl.n	808183c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8081894:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8081896:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 808189a:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 808189c:	462b      	mov	r3, r5
 808189e:	e007      	b.n	80818b0 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80818a0:	3b01      	subs	r3, #1
 80818a2:	b2db      	uxtb	r3, r3
 80818a4:	429a      	cmp	r2, r3
 80818a6:	d1eb      	bne.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80818a8:	7b42      	ldrb	r2, [r0, #13]
 80818aa:	9903      	ldr	r1, [sp, #12]
 80818ac:	4291      	cmp	r1, r2
 80818ae:	d1e7      	bne.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80818b0:	1e5a      	subs	r2, r3, #1
 80818b2:	f04f 0c0d 	mov.w	ip, #13
 80818b6:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80818ba:	9a02      	ldr	r2, [sp, #8]
 80818bc:	4562      	cmp	r2, ip
 80818be:	d9df      	bls.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80818c0:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80818c4:	f1be 0f04 	cmp.w	lr, #4
 80818c8:	fa5f f28e 	uxtb.w	r2, lr
 80818cc:	d804      	bhi.n	80818d8 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 80818ce:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80818d2:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80818d6:	e00c      	b.n	80818f2 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80818d8:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80818da:	bf95      	itete	ls
 80818dc:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80818e0:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80818e4:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80818e8:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80818ec:	bf94      	ite	ls
 80818ee:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80818f0:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 80818f2:	9902      	ldr	r1, [sp, #8]
 80818f4:	4561      	cmp	r1, ip
 80818f6:	d103      	bne.n	8081900 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 80818f8:	2a00      	cmp	r2, #0
 80818fa:	bf18      	it	ne
 80818fc:	2500      	movne	r5, #0
 80818fe:	e79d      	b.n	808183c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081900:	2aff      	cmp	r2, #255	; 0xff
 8081902:	d8bd      	bhi.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081904:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081906:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 808190a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808190c:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081910:	bf98      	it	ls
 8081912:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081914:	f811 100c 	ldrb.w	r1, [r1, ip]
 8081918:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808191c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8081920:	bf98      	it	ls
 8081922:	b2d2      	uxtbls	r2, r2
 8081924:	f1bc 0f19 	cmp.w	ip, #25
 8081928:	bf9c      	itt	ls
 808192a:	3120      	addls	r1, #32
 808192c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808192e:	4291      	cmp	r1, r2
 8081930:	d1a6      	bne.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081932:	e0fb      	b.n	8081b2c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081934:	0709      	lsls	r1, r1, #28
 8081936:	d4a3      	bmi.n	8081880 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8081938:	b14d      	cbz	r5, 808194e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 808193a:	2b01      	cmp	r3, #1
 808193c:	f47f af5b 	bne.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081940:	f7ff fdfd 	bl	808153e <_ZN7FatFile11lfnChecksumEPh>
 8081944:	9b03      	ldr	r3, [sp, #12]
 8081946:	4283      	cmp	r3, r0
 8081948:	f47f af55 	bne.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 808194c:	e00f      	b.n	808196e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808194e:	220b      	movs	r2, #11
 8081950:	9906      	ldr	r1, [sp, #24]
 8081952:	9307      	str	r3, [sp, #28]
 8081954:	f008 fa7e 	bl	8089e54 <memcmp>
 8081958:	9b07      	ldr	r3, [sp, #28]
 808195a:	2800      	cmp	r0, #0
 808195c:	f47f af6e 	bne.w	808183c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8081960:	f899 2000 	ldrb.w	r2, [r9]
 8081964:	07d2      	lsls	r2, r2, #31
 8081966:	d502      	bpl.n	808196e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8081968:	2201      	movs	r2, #1
 808196a:	9204      	str	r2, [sp, #16]
 808196c:	e766      	b.n	808183c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 808196e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8081972:	f000 80d1 	beq.w	8081b18 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 8081976:	e73e      	b.n	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8081978:	f41b 7f00 	tst.w	fp, #512	; 0x200
 808197c:	f43f af3b 	beq.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081980:	f00b 0303 	and.w	r3, fp, #3
 8081984:	3b01      	subs	r3, #1
 8081986:	2b01      	cmp	r3, #1
 8081988:	f63f af35 	bhi.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 808198c:	2c00      	cmp	r4, #0
 808198e:	bf08      	it	eq
 8081990:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8081992:	42bc      	cmp	r4, r7
 8081994:	d302      	bcc.n	808199c <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8081996:	9b04      	ldr	r3, [sp, #16]
 8081998:	b9cb      	cbnz	r3, 80819ce <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 808199a:	e01f      	b.n	80819dc <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 808199c:	2100      	movs	r1, #0
 808199e:	4630      	mov	r0, r6
 80819a0:	f000 f9fe 	bl	8081da0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80819a4:	b910      	cbnz	r0, 80819ac <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 80819a6:	7873      	ldrb	r3, [r6, #1]
 80819a8:	b15b      	cbz	r3, 80819c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 80819aa:	e724      	b.n	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80819ac:	3401      	adds	r4, #1
 80819ae:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80819b0:	e7ef      	b.n	8081992 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 80819b2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80819b4:	791b      	ldrb	r3, [r3, #4]
 80819b6:	2b01      	cmp	r3, #1
 80819b8:	d8ed      	bhi.n	8081996 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 80819ba:	3410      	adds	r4, #16
 80819bc:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80819be:	42a7      	cmp	r7, r4
 80819c0:	d9e9      	bls.n	8081996 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80819c2:	4630      	mov	r0, r6
 80819c4:	f000 f8d2 	bl	8081b6c <_ZN7FatFile13addDirClusterEv>
 80819c8:	2800      	cmp	r0, #0
 80819ca:	d1f2      	bne.n	80819b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 80819cc:	e713      	b.n	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80819ce:	4649      	mov	r1, r9
 80819d0:	4630      	mov	r0, r6
 80819d2:	f7ff feaf 	bl	8081734 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80819d6:	2800      	cmp	r0, #0
 80819d8:	f43f af0d 	beq.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80819dc:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80819e0:	4630      	mov	r0, r6
 80819e2:	f000 f9fa 	bl	8081dda <_ZN7FatFile7seekSetEm>
 80819e6:	2800      	cmp	r0, #0
 80819e8:	f43f af05 	beq.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 80819ec:	1e7d      	subs	r5, r7, #1
 80819ee:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80819f0:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80819f2:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 80819f6:	f04f 080f 	mov.w	r8, #15
 80819fa:	e041      	b.n	8081a80 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80819fc:	2100      	movs	r1, #0
 80819fe:	4630      	mov	r0, r6
 8081a00:	f000 f9ce 	bl	8081da0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081a04:	4607      	mov	r7, r0
 8081a06:	2800      	cmp	r0, #0
 8081a08:	f43f aef5 	beq.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8081a0c:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081a0e:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8081a10:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081a14:	f043 0301 	orr.w	r3, r3, #1
 8081a18:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8081a1c:	bf14      	ite	ne
 8081a1e:	4622      	movne	r2, r4
 8081a20:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8081a24:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8081a26:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8081a2a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8081a2e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8081a32:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081a34:	f7ff fd83 	bl	808153e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081a38:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081a3a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8081a3c:	f887 a01a 	strb.w	sl, [r7, #26]
 8081a40:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081a44:	f002 021f 	and.w	r2, r2, #31
 8081a48:	230d      	movs	r3, #13
 8081a4a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8081a4c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081a50:	435a      	muls	r2, r3
 8081a52:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081a54:	9902      	ldr	r1, [sp, #8]
 8081a56:	4291      	cmp	r1, r2
 8081a58:	d915      	bls.n	8081a86 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8081a5a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8081a5e:	2b04      	cmp	r3, #4
 8081a60:	fa5f fc83 	uxtb.w	ip, r3
 8081a64:	f103 0001 	add.w	r0, r3, #1
 8081a68:	d813      	bhi.n	8081a92 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 8081a6a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8081a6e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8081a72:	280d      	cmp	r0, #13
 8081a74:	f102 0201 	add.w	r2, r2, #1
 8081a78:	4603      	mov	r3, r0
 8081a7a:	d1eb      	bne.n	8081a54 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8081a7c:	3c01      	subs	r4, #1
 8081a7e:	b2e4      	uxtb	r4, r4
 8081a80:	2c00      	cmp	r4, #0
 8081a82:	d1bb      	bne.n	80819fc <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 8081a84:	e00e      	b.n	8081aa4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081a86:	bf14      	ite	ne
 8081a88:	f04f 31ff 	movne.w	r1, #4294967295
 8081a8c:	2100      	moveq	r1, #0
 8081a8e:	b289      	uxth	r1, r1
 8081a90:	e7e5      	b.n	8081a5e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081a92:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8081a96:	bf94      	ite	ls
 8081a98:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8081a9c:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8081aa0:	8099      	strh	r1, [r3, #4]
 8081aa2:	e7e6      	b.n	8081a72 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8081aa4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8081aa6:	4621      	mov	r1, r4
 8081aa8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8081aaa:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8081aae:	f000 f977 	bl	8081da0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8081ab2:	4607      	mov	r7, r0
 8081ab4:	2800      	cmp	r0, #0
 8081ab6:	f43f ae9e 	beq.w	80817f6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8081aba:	2220      	movs	r2, #32
 8081abc:	4621      	mov	r1, r4
 8081abe:	f008 f9e3 	bl	8089e88 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8081ac2:	464b      	mov	r3, r9
 8081ac4:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8081ac8:	603a      	str	r2, [r7, #0]
 8081aca:	685a      	ldr	r2, [r3, #4]
 8081acc:	607a      	str	r2, [r7, #4]
 8081ace:	891a      	ldrh	r2, [r3, #8]
 8081ad0:	813a      	strh	r2, [r7, #8]
 8081ad2:	7a9b      	ldrb	r3, [r3, #10]
 8081ad4:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8081ad6:	f899 3000 	ldrb.w	r3, [r9]
 8081ada:	f003 0318 	and.w	r3, r3, #24
 8081ade:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8081ae0:	4b18      	ldr	r3, [pc, #96]	; (8081b44 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 8081ae2:	681b      	ldr	r3, [r3, #0]
 8081ae4:	b12b      	cbz	r3, 8081af2 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8081ae6:	f107 010e 	add.w	r1, r7, #14
 8081aea:	f107 0010 	add.w	r0, r7, #16
 8081aee:	4798      	blx	r3
 8081af0:	e006      	b.n	8081b00 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8081af2:	2321      	movs	r3, #33	; 0x21
 8081af4:	743b      	strb	r3, [r7, #16]
 8081af6:	2328      	movs	r3, #40	; 0x28
 8081af8:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8081afa:	2308      	movs	r3, #8
 8081afc:	73bc      	strb	r4, [r7, #14]
 8081afe:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8081b00:	8a3b      	ldrh	r3, [r7, #16]
 8081b02:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8081b04:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8081b06:	89fb      	ldrh	r3, [r7, #14]
 8081b08:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8081b0a:	68b2      	ldr	r2, [r6, #8]
 8081b0c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081b10:	f043 0301 	orr.w	r3, r3, #1
 8081b14:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8081b18:	9500      	str	r5, [sp, #0]
 8081b1a:	465b      	mov	r3, fp
 8081b1c:	4652      	mov	r2, sl
 8081b1e:	4631      	mov	r1, r6
 8081b20:	9805      	ldr	r0, [sp, #20]
 8081b22:	f000 f9a3 	bl	8081e6c <_ZN7FatFile15openCachedEntryEPS_tih>
 8081b26:	e009      	b.n	8081b3c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081b28:	2701      	movs	r7, #1
 8081b2a:	e677      	b.n	808181c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8081b2c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8081b30:	f1be 0f0d 	cmp.w	lr, #13
 8081b34:	f43f ae82 	beq.w	808183c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081b38:	46d4      	mov	ip, sl
 8081b3a:	e6c3      	b.n	80818c4 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8081b3c:	b009      	add	sp, #36	; 0x24
 8081b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081b42:	bf00      	nop
 8081b44:	20000744 	.word	0x20000744

08081b48 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081b48:	f003 bb6a 	b.w	8085220 <HAL_Pin_Map>

08081b4c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8081b4c:	f003 bb68 	b.w	8085220 <HAL_Pin_Map>

08081b50 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8081b50:	f003 bb66 	b.w	8085220 <HAL_Pin_Map>

08081b54 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8081b54:	f003 bb64 	b.w	8085220 <HAL_Pin_Map>

08081b58 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081b58:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081b5a:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081b5e:	f043 0304 	orr.w	r3, r3, #4
 8081b62:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081b64:	6901      	ldr	r1, [r0, #16]
 8081b66:	6880      	ldr	r0, [r0, #8]
 8081b68:	f000 bc10 	b.w	808238c <_ZN9FatVolume15allocateClusterEmPm>

08081b6c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081b70:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081b72:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081b74:	f003 0320 	and.w	r3, r3, #32
 8081b78:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8081b7c:	b10b      	cbz	r3, 8081b82 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8081b7e:	2600      	movs	r6, #0
 8081b80:	e02e      	b.n	8081be0 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8081b82:	6942      	ldr	r2, [r0, #20]
 8081b84:	4b18      	ldr	r3, [pc, #96]	; (8081be8 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8081b86:	429a      	cmp	r2, r3
 8081b88:	d8f9      	bhi.n	8081b7e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8081b8a:	f7ff ffe5 	bl	8081b58 <_ZN7FatFile10addClusterEv>
 8081b8e:	4606      	mov	r6, r0
 8081b90:	2800      	cmp	r0, #0
 8081b92:	d0f4      	beq.n	8081b7e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 8081b94:	6921      	ldr	r1, [r4, #16]
 8081b96:	68a0      	ldr	r0, [r4, #8]
 8081b98:	f000 fb8d 	bl	80822b6 <_ZNK9FatVolume17clusterFirstBlockEm>
 8081b9c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081b9e:	68a0      	ldr	r0, [r4, #8]
 8081ba0:	2205      	movs	r2, #5
 8081ba2:	4639      	mov	r1, r7
 8081ba4:	3024      	adds	r0, #36	; 0x24
 8081ba6:	f000 fb62 	bl	808226e <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8081baa:	4680      	mov	r8, r0
 8081bac:	2800      	cmp	r0, #0
 8081bae:	d0e6      	beq.n	8081b7e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8081bb0:	4629      	mov	r1, r5
 8081bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081bb6:	f008 f967 	bl	8089e88 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8081bba:	2501      	movs	r5, #1
 8081bbc:	68a3      	ldr	r3, [r4, #8]
 8081bbe:	791a      	ldrb	r2, [r3, #4]
 8081bc0:	42aa      	cmp	r2, r5
 8081bc2:	d909      	bls.n	8081bd8 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8081bc4:	4642      	mov	r2, r8
 8081bc6:	19e9      	adds	r1, r5, r7
 8081bc8:	6818      	ldr	r0, [r3, #0]
 8081bca:	f000 fecd 	bl	8082968 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8081bce:	2800      	cmp	r0, #0
 8081bd0:	d0d5      	beq.n	8081b7e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8081bd2:	3501      	adds	r5, #1
 8081bd4:	b2ed      	uxtb	r5, r5
 8081bd6:	e7f1      	b.n	8081bbc <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8081bd8:	6963      	ldr	r3, [r4, #20]
 8081bda:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8081bde:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8081be0:	4630      	mov	r0, r6
 8081be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081be6:	bf00      	nop
 8081be8:	001ffdff 	.word	0x001ffdff

08081bec <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8081bec:	b510      	push	{r4, lr}
 8081bee:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081bf0:	6880      	ldr	r0, [r0, #8]
 8081bf2:	460a      	mov	r2, r1
 8081bf4:	3024      	adds	r0, #36	; 0x24
 8081bf6:	69a1      	ldr	r1, [r4, #24]
 8081bf8:	f000 fb39 	bl	808226e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8081bfc:	b120      	cbz	r0, 8081c08 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8081bfe:	88a3      	ldrh	r3, [r4, #4]
 8081c00:	f003 030f 	and.w	r3, r3, #15
 8081c04:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8081c08:	bd10      	pop	{r4, pc}

08081c0a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8081c0a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8081c0c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8081c0e:	4605      	mov	r5, r0
 8081c10:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8081c12:	b984      	cbnz	r4, 8081c36 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8081c14:	2224      	movs	r2, #36	; 0x24
 8081c16:	4621      	mov	r1, r4
 8081c18:	f008 f936 	bl	8089e88 <memset>

  m_vol = vol;
 8081c1c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8081c1e:	79f3      	ldrb	r3, [r6, #7]
 8081c20:	2b10      	cmp	r3, #16
 8081c22:	d003      	beq.n	8081c2c <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8081c24:	2b20      	cmp	r3, #32
 8081c26:	d106      	bne.n	8081c36 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081c28:	2340      	movs	r3, #64	; 0x40
 8081c2a:	e000      	b.n	8081c2e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8081c2c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8081c2e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081c30:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8081c32:	70a8      	strb	r0, [r5, #2]
 8081c34:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8081c36:	2000      	movs	r0, #0
 8081c38:	bd70      	pop	{r4, r5, r6, pc}

08081c3a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8081c3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081c3e:	7803      	ldrb	r3, [r0, #0]
 8081c40:	4604      	mov	r4, r0
 8081c42:	4689      	mov	r9, r1
 8081c44:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8081c46:	b14b      	cbz	r3, 8081c5c <_ZN7FatFile4readEPvj+0x22>
 8081c48:	7882      	ldrb	r2, [r0, #2]
 8081c4a:	07d1      	lsls	r1, r2, #31
 8081c4c:	d506      	bpl.n	8081c5c <_ZN7FatFile4readEPvj+0x22>
 8081c4e:	e00c      	b.n	8081c6a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081c50:	465a      	mov	r2, fp
 8081c52:	6921      	ldr	r1, [r4, #16]
 8081c54:	f000 fb35 	bl	80822c2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081c58:	2800      	cmp	r0, #0
 8081c5a:	da3d      	bge.n	8081cd8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081c5c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081c5e:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081c62:	f043 0302 	orr.w	r3, r3, #2
 8081c66:	7063      	strb	r3, [r4, #1]
  return -1;
 8081c68:	e097      	b.n	8081d9a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8081c6a:	071a      	lsls	r2, r3, #28
 8081c6c:	d503      	bpl.n	8081c76 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8081c6e:	69e3      	ldr	r3, [r4, #28]
 8081c70:	6962      	ldr	r2, [r4, #20]
 8081c72:	1a9b      	subs	r3, r3, r2
 8081c74:	e007      	b.n	8081c86 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081c76:	069a      	lsls	r2, r3, #26
 8081c78:	d508      	bpl.n	8081c8c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8081c7a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8081c7c:	891a      	ldrh	r2, [r3, #8]
 8081c7e:	6963      	ldr	r3, [r4, #20]
 8081c80:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8081c84:	b29b      	uxth	r3, r3
 8081c86:	429d      	cmp	r5, r3
 8081c88:	bf28      	it	cs
 8081c8a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8081c8c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8081c8e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081c92:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081c96:	2e00      	cmp	r6, #0
 8081c98:	d035      	beq.n	8081d06 <_ZN7FatFile4readEPvj+0xcc>
 8081c9a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081c9c:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8081c9e:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8081ca6:	68a0      	ldr	r0, [r4, #8]
 8081ca8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8081cac:	d002      	beq.n	8081cb4 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8081cae:	6a03      	ldr	r3, [r0, #32]
 8081cb0:	4419      	add	r1, r3
 8081cb2:	e01d      	b.n	8081cf0 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081cb4:	f890 8005 	ldrb.w	r8, [r0, #5]
 8081cb8:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8081cbc:	f1ba 0f00 	cmp.w	sl, #0
 8081cc0:	d110      	bne.n	8081ce4 <_ZN7FatFile4readEPvj+0xaa>
 8081cc2:	f1b8 0f00 	cmp.w	r8, #0
 8081cc6:	d10d      	bne.n	8081ce4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8081cc8:	2b00      	cmp	r3, #0
 8081cca:	d1c1      	bne.n	8081c50 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081ccc:	0653      	lsls	r3, r2, #25
 8081cce:	bf4c      	ite	mi
 8081cd0:	6a03      	ldrmi	r3, [r0, #32]
 8081cd2:	6a23      	ldrpl	r3, [r4, #32]
 8081cd4:	6123      	str	r3, [r4, #16]
 8081cd6:	e005      	b.n	8081ce4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8081cd8:	d104      	bne.n	8081ce4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8081cda:	7823      	ldrb	r3, [r4, #0]
 8081cdc:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081ce0:	d111      	bne.n	8081d06 <_ZN7FatFile4readEPvj+0xcc>
 8081ce2:	e7bb      	b.n	8081c5c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8081ce4:	6921      	ldr	r1, [r4, #16]
 8081ce6:	68a0      	ldr	r0, [r4, #8]
 8081ce8:	f000 fae5 	bl	80822b6 <_ZNK9FatVolume17clusterFirstBlockEm>
 8081cec:	eb08 0100 	add.w	r1, r8, r0
 8081cf0:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8081cf2:	f1ba 0f00 	cmp.w	sl, #0
 8081cf6:	d135      	bne.n	8081d64 <_ZN7FatFile4readEPvj+0x12a>
 8081cf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081cfc:	d332      	bcc.n	8081d64 <_ZN7FatFile4readEPvj+0x12a>
 8081cfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8081d00:	4299      	cmp	r1, r3
 8081d02:	d102      	bne.n	8081d0a <_ZN7FatFile4readEPvj+0xd0>
 8081d04:	e02e      	b.n	8081d64 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8081d06:	1ba8      	subs	r0, r5, r6
 8081d08:	e047      	b.n	8081d9a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8081d0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8081d0e:	d31b      	bcc.n	8081d48 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8081d10:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 8081d12:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 8081d16:	0697      	lsls	r7, r2, #26
 8081d18:	d406      	bmi.n	8081d28 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 8081d1a:	7902      	ldrb	r2, [r0, #4]
 8081d1c:	ebc8 0202 	rsb	r2, r8, r2
 8081d20:	b2d2      	uxtb	r2, r2
 8081d22:	4592      	cmp	sl, r2
 8081d24:	bf28      	it	cs
 8081d26:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081d28:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8081d2a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081d2e:	d207      	bcs.n	8081d40 <_ZN7FatFile4readEPvj+0x106>
 8081d30:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 8081d32:	4653      	mov	r3, sl
 8081d34:	464a      	mov	r2, r9
 8081d36:	6800      	ldr	r0, [r0, #0]
 8081d38:	f000 fdd4 	bl	80828e4 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8081d3c:	b960      	cbnz	r0, 8081d58 <_ZN7FatFile4readEPvj+0x11e>
 8081d3e:	e78d      	b.n	8081c5c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081d40:	4453      	add	r3, sl
 8081d42:	4299      	cmp	r1, r3
 8081d44:	d321      	bcc.n	8081d8a <_ZN7FatFile4readEPvj+0x150>
 8081d46:	e7f3      	b.n	8081d30 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8081d48:	464a      	mov	r2, r9
 8081d4a:	6800      	ldr	r0, [r0, #0]
 8081d4c:	f000 fd82 	bl	8082854 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8081d50:	2800      	cmp	r0, #0
 8081d52:	d083      	beq.n	8081c5c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8081d54:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8081d58:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8081d5a:	44b9      	add	r9, r7
    m_curPosition += n;
 8081d5c:	443b      	add	r3, r7
 8081d5e:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8081d60:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081d62:	e798      	b.n	8081c96 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081d64:	2200      	movs	r2, #0
 8081d66:	3024      	adds	r0, #36	; 0x24
 8081d68:	f000 fa81 	bl	808226e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8081d6c:	2800      	cmp	r0, #0
 8081d6e:	f43f af75 	beq.w	8081c5c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8081d72:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8081d76:	42b7      	cmp	r7, r6
 8081d78:	bf28      	it	cs
 8081d7a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8081d7c:	eb00 010a 	add.w	r1, r0, sl
 8081d80:	463a      	mov	r2, r7
 8081d82:	4648      	mov	r0, r9
 8081d84:	f008 f875 	bl	8089e72 <memcpy>
 8081d88:	e7e6      	b.n	8081d58 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081d8a:	3024      	adds	r0, #36	; 0x24
 8081d8c:	9101      	str	r1, [sp, #4]
 8081d8e:	f000 fa47 	bl	8082220 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 8081d92:	9901      	ldr	r1, [sp, #4]
 8081d94:	2800      	cmp	r0, #0
 8081d96:	d1cb      	bne.n	8081d30 <_ZN7FatFile4readEPvj+0xf6>
 8081d98:	e760      	b.n	8081c5c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8081d9a:	b003      	add	sp, #12
 8081d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081da0 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8081da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8081da2:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8081da4:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8081da6:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 8081daa:	b105      	cbz	r5, 8081dae <_ZN7FatFile12readDirCacheEb+0xe>
 8081dac:	b969      	cbnz	r1, 8081dca <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8081dae:	2201      	movs	r2, #1
 8081db0:	f10d 0107 	add.w	r1, sp, #7
 8081db4:	4620      	mov	r0, r4
 8081db6:	f7ff ff40 	bl	8081c3a <_ZN7FatFile4readEPvj>
 8081dba:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8081dbc:	2801      	cmp	r0, #1
 8081dbe:	d001      	beq.n	8081dc4 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8081dc0:	2000      	movs	r0, #0
 8081dc2:	e008      	b.n	8081dd6 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8081dc4:	6963      	ldr	r3, [r4, #20]
 8081dc6:	331f      	adds	r3, #31
 8081dc8:	e000      	b.n	8081dcc <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 8081dca:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081dcc:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8081dce:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081dd0:	3030      	adds	r0, #48	; 0x30
 8081dd2:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8081dd6:	b003      	add	sp, #12
 8081dd8:	bd30      	pop	{r4, r5, pc}

08081dda <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8081dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081dde:	460e      	mov	r6, r1
 8081de0:	7801      	ldrb	r1, [r0, #0]
 8081de2:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8081de4:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8081de6:	2900      	cmp	r1, #0
 8081de8:	d039      	beq.n	8081e5e <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8081dea:	6945      	ldr	r5, [r0, #20]
 8081dec:	42b5      	cmp	r5, r6
 8081dee:	d03a      	beq.n	8081e66 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8081df0:	b90e      	cbnz	r6, 8081df6 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8081df2:	6106      	str	r6, [r0, #16]
    goto done;
 8081df4:	e031      	b.n	8081e5a <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8081df6:	070b      	lsls	r3, r1, #28
 8081df8:	d503      	bpl.n	8081e02 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8081dfa:	69c3      	ldr	r3, [r0, #28]
 8081dfc:	429e      	cmp	r6, r3
 8081dfe:	d82e      	bhi.n	8081e5e <_ZN7FatFile7seekSetEm+0x84>
 8081e00:	e007      	b.n	8081e12 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8081e02:	0688      	lsls	r0, r1, #26
 8081e04:	d505      	bpl.n	8081e12 <_ZN7FatFile7seekSetEm+0x38>
 8081e06:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8081e08:	891b      	ldrh	r3, [r3, #8]
 8081e0a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8081e0e:	d826      	bhi.n	8081e5e <_ZN7FatFile7seekSetEm+0x84>
 8081e10:	e023      	b.n	8081e5a <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081e12:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8081e16:	1e6a      	subs	r2, r5, #1
 8081e18:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8081e1c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081e20:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081e22:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081e24:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8081e26:	429a      	cmp	r2, r3
 8081e28:	d800      	bhi.n	8081e2c <_ZN7FatFile7seekSetEm+0x52>
 8081e2a:	b94d      	cbnz	r5, 8081e40 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081e2c:	064a      	lsls	r2, r1, #25
 8081e2e:	bf4c      	ite	mi
 8081e30:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8081e34:	6a22      	ldrpl	r2, [r4, #32]
 8081e36:	6122      	str	r2, [r4, #16]
 8081e38:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081e3a:	f104 0810 	add.w	r8, r4, #16
 8081e3e:	e00a      	b.n	8081e56 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8081e40:	1a9b      	subs	r3, r3, r2
 8081e42:	e7f9      	b.n	8081e38 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081e44:	4642      	mov	r2, r8
 8081e46:	6921      	ldr	r1, [r4, #16]
 8081e48:	68a0      	ldr	r0, [r4, #8]
 8081e4a:	f000 fa3a 	bl	80822c2 <_ZN9FatVolume6fatGetEmPm>
 8081e4e:	2800      	cmp	r0, #0
 8081e50:	f105 35ff 	add.w	r5, r5, #4294967295
 8081e54:	dd03      	ble.n	8081e5e <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8081e56:	2d00      	cmp	r5, #0
 8081e58:	d1f4      	bne.n	8081e44 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8081e5a:	6166      	str	r6, [r4, #20]
 8081e5c:	e003      	b.n	8081e66 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8081e5e:	6127      	str	r7, [r4, #16]
  return false;
 8081e60:	2000      	movs	r0, #0
 8081e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8081e66:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8081e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081e6c <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8081e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081e6e:	460f      	mov	r7, r1
 8081e70:	4604      	mov	r4, r0
 8081e72:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8081e74:	2100      	movs	r1, #0
 8081e76:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8081e78:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8081e7a:	f008 f805 	bl	8089e88 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081e7e:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8081e80:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081e82:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8081e84:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8081e86:	f005 020f 	and.w	r2, r5, #15
 8081e8a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8081e8e:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8081e90:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8081e92:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081e94:	7acb      	ldrb	r3, [r1, #11]
 8081e96:	071d      	lsls	r5, r3, #28
 8081e98:	d44c      	bmi.n	8081f34 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8081e9a:	1883      	adds	r3, r0, r2
 8081e9c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8081ea0:	f003 0317 	and.w	r3, r3, #23
 8081ea4:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8081ea6:	7ac9      	ldrb	r1, [r1, #11]
 8081ea8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 8081eac:	bf04      	itt	eq
 8081eae:	f043 0308 	orreq.w	r3, r3, #8
 8081eb2:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 8081eb4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8081eb8:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 8081eba:	f006 0303 	and.w	r3, r6, #3
 8081ebe:	2b01      	cmp	r3, #1
 8081ec0:	d009      	beq.n	8081ed6 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 8081ec2:	2b02      	cmp	r3, #2
 8081ec4:	d005      	beq.n	8081ed2 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 8081ec6:	2b00      	cmp	r3, #0
 8081ec8:	d134      	bne.n	8081f34 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 8081eca:	0571      	lsls	r1, r6, #21
 8081ecc:	d432      	bmi.n	8081f34 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 8081ece:	2301      	movs	r3, #1
 8081ed0:	e002      	b.n	8081ed8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 8081ed2:	2303      	movs	r3, #3
 8081ed4:	e000      	b.n	8081ed8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 8081ed6:	2302      	movs	r3, #2
 8081ed8:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 8081eda:	78a1      	ldrb	r1, [r4, #2]
 8081edc:	078b      	lsls	r3, r1, #30
 8081ede:	d503      	bpl.n	8081ee8 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 8081ee0:	7823      	ldrb	r3, [r4, #0]
 8081ee2:	f013 0f11 	tst.w	r3, #17
 8081ee6:	d125      	bne.n	8081f34 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 8081ee8:	b24b      	sxtb	r3, r1
 8081eea:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8081eee:	f006 0108 	and.w	r1, r6, #8
 8081ef2:	bf14      	ite	ne
 8081ef4:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 8081ef8:	2700      	moveq	r7, #0
 8081efa:	4319      	orrs	r1, r3
 8081efc:	4339      	orrs	r1, r7
 8081efe:	70a1      	strb	r1, [r4, #2]
 8081f00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8081f02:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 8081f04:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081f06:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8081f0a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8081f0e:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081f10:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 8081f14:	d504      	bpl.n	8081f20 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8081f16:	b181      	cbz	r1, 8081f3a <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8081f18:	f000 fa73 	bl	8082402 <_ZN9FatVolume9freeChainEm>
 8081f1c:	b968      	cbnz	r0, 8081f3a <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8081f1e:	e009      	b.n	8081f34 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8081f20:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8081f22:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8081f24:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8081f26:	0473      	lsls	r3, r6, #17
 8081f28:	d50c      	bpl.n	8081f44 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8081f2a:	69e1      	ldr	r1, [r4, #28]
 8081f2c:	4620      	mov	r0, r4
 8081f2e:	f7ff ff54 	bl	8081dda <_ZN7FatFile7seekSetEm>
 8081f32:	b938      	cbnz	r0, 8081f44 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8081f34:	2000      	movs	r0, #0
 8081f36:	7020      	strb	r0, [r4, #0]
  return false;
 8081f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8081f3a:	78a3      	ldrb	r3, [r4, #2]
 8081f3c:	f043 0304 	orr.w	r3, r3, #4
 8081f40:	70a3      	strb	r3, [r4, #2]
 8081f42:	e7f0      	b.n	8081f26 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8081f44:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8081f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081f48 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081f48:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8081f4a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081f4c:	4604      	mov	r4, r0
  if (!isOpen()) {
 8081f4e:	b90b      	cbnz	r3, 8081f54 <_ZN7FatFile4syncEv+0xc>
    return true;
 8081f50:	2001      	movs	r0, #1
 8081f52:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 8081f54:	7883      	ldrb	r3, [r0, #2]
 8081f56:	075a      	lsls	r2, r3, #29
 8081f58:	d523      	bpl.n	8081fa2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8081f5a:	2101      	movs	r1, #1
 8081f5c:	f7ff fe46 	bl	8081bec <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081f60:	4605      	mov	r5, r0
 8081f62:	b928      	cbnz	r0, 8081f70 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081f64:	7863      	ldrb	r3, [r4, #1]
  return false;
 8081f66:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081f68:	f043 0301 	orr.w	r3, r3, #1
 8081f6c:	7063      	strb	r3, [r4, #1]
 8081f6e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081f70:	7803      	ldrb	r3, [r0, #0]
 8081f72:	2be5      	cmp	r3, #229	; 0xe5
 8081f74:	d0f6      	beq.n	8081f64 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081f76:	7823      	ldrb	r3, [r4, #0]
 8081f78:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8081f7a:	bf44      	itt	mi
 8081f7c:	69e3      	ldrmi	r3, [r4, #28]
 8081f7e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8081f80:	8c23      	ldrh	r3, [r4, #32]
 8081f82:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8081f84:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081f86:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8081f88:	4b09      	ldr	r3, [pc, #36]	; (8081fb0 <_ZN7FatFile4syncEv+0x68>)
 8081f8a:	681b      	ldr	r3, [r3, #0]
 8081f8c:	b12b      	cbz	r3, 8081f9a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8081f8e:	f100 0116 	add.w	r1, r0, #22
 8081f92:	3018      	adds	r0, #24
 8081f94:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8081f96:	8b2b      	ldrh	r3, [r5, #24]
 8081f98:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8081f9a:	78a3      	ldrb	r3, [r4, #2]
 8081f9c:	f023 0304 	bic.w	r3, r3, #4
 8081fa0:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8081fa2:	68a0      	ldr	r0, [r4, #8]
 8081fa4:	f7ff fabe 	bl	8081524 <_ZN9FatVolume9cacheSyncEv>
 8081fa8:	2800      	cmp	r0, #0
 8081faa:	d0db      	beq.n	8081f64 <_ZN7FatFile4syncEv+0x1c>
 8081fac:	e7d0      	b.n	8081f50 <_ZN7FatFile4syncEv+0x8>
 8081fae:	bf00      	nop
 8081fb0:	20000744 	.word	0x20000744

08081fb4 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8081fb4:	b510      	push	{r4, lr}
 8081fb6:	4604      	mov	r4, r0
  bool rtn = sync();
 8081fb8:	f7ff ffc6 	bl	8081f48 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8081fbc:	2300      	movs	r3, #0
 8081fbe:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8081fc0:	bd10      	pop	{r4, pc}

08081fc2 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8081fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081fc4:	461f      	mov	r7, r3
 8081fc6:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081fc8:	2300      	movs	r3, #0
 8081fca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8081fce:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081fd2:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8081fd4:	4606      	mov	r6, r0
 8081fd6:	460c      	mov	r4, r1
 8081fd8:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081fda:	b10b      	cbz	r3, 8081fe0 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8081fdc:	2000      	movs	r0, #0
 8081fde:	e03d      	b.n	808205c <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081fe0:	780b      	ldrb	r3, [r1, #0]
 8081fe2:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081fe6:	d0f9      	beq.n	8081fdc <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8081fe8:	7813      	ldrb	r3, [r2, #0]
 8081fea:	2b2f      	cmp	r3, #47	; 0x2f
 8081fec:	d112      	bne.n	8082014 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 8081fee:	9b01      	ldr	r3, [sp, #4]
 8081ff0:	781a      	ldrb	r2, [r3, #0]
 8081ff2:	2a2f      	cmp	r2, #47	; 0x2f
 8081ff4:	d102      	bne.n	8081ffc <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 8081ff6:	3301      	adds	r3, #1
 8081ff8:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8081ffa:	e7f8      	b.n	8081fee <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8081ffc:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8081ffe:	b91a      	cbnz	r2, 8082008 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 8082000:	4630      	mov	r0, r6
 8082002:	f7ff fe02 	bl	8081c0a <_ZN7FatFile8openRootEP9FatVolume>
 8082006:	e029      	b.n	808205c <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8082008:	a809      	add	r0, sp, #36	; 0x24
 808200a:	f7ff fdfe 	bl	8081c0a <_ZN7FatFile8openRootEP9FatVolume>
 808200e:	2800      	cmp	r0, #0
 8082010:	d0e4      	beq.n	8081fdc <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8082012:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8082014:	aa01      	add	r2, sp, #4
 8082016:	a903      	add	r1, sp, #12
 8082018:	9801      	ldr	r0, [sp, #4]
 808201a:	f7ff fa9f 	bl	808155c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 808201e:	2800      	cmp	r0, #0
 8082020:	d0dc      	beq.n	8081fdc <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8082022:	9b01      	ldr	r3, [sp, #4]
 8082024:	781b      	ldrb	r3, [r3, #0]
 8082026:	b19b      	cbz	r3, 8082050 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8082028:	2300      	movs	r3, #0
 808202a:	aa03      	add	r2, sp, #12
 808202c:	4621      	mov	r1, r4
 808202e:	4630      	mov	r0, r6
 8082030:	f7ff fbd6 	bl	80817e0 <_ZN7FatFile4openEPS_P7fname_ti>
 8082034:	2800      	cmp	r0, #0
 8082036:	d0d1      	beq.n	8081fdc <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082038:	4635      	mov	r5, r6
 808203a:	ac09      	add	r4, sp, #36	; 0x24
 808203c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808203e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082044:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8082046:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082048:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 808204a:	f7ff ffb3 	bl	8081fb4 <_ZN7FatFile5closeEv>
 808204e:	e7e0      	b.n	8082012 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8082050:	463b      	mov	r3, r7
 8082052:	aa03      	add	r2, sp, #12
 8082054:	4621      	mov	r1, r4
 8082056:	4630      	mov	r0, r6
 8082058:	f7ff fbc2 	bl	80817e0 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 808205c:	b013      	add	sp, #76	; 0x4c
 808205e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082060 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082064:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082066:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082068:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808206a:	4604      	mov	r4, r0
 808206c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 808206e:	d508      	bpl.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
 8082070:	7883      	ldrb	r3, [r0, #2]
 8082072:	079a      	lsls	r2, r3, #30
 8082074:	d505      	bpl.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8082076:	071b      	lsls	r3, r3, #28
 8082078:	d50b      	bpl.n	8082092 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 808207a:	69e1      	ldr	r1, [r4, #28]
 808207c:	f7ff fead 	bl	8081dda <_ZN7FatFile7seekSetEm>
 8082080:	b938      	cbnz	r0, 8082092 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8082082:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8082084:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8082088:	f043 0301 	orr.w	r3, r3, #1
 808208c:	7063      	strb	r3, [r4, #1]
  return -1;
 808208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8082092:	6963      	ldr	r3, [r4, #20]
 8082094:	43db      	mvns	r3, r3
 8082096:	4598      	cmp	r8, r3
 8082098:	d8f3      	bhi.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
 808209a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808209c:	f04f 0a00 	mov.w	sl, #0
 80820a0:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80820a2:	2e00      	cmp	r6, #0
 80820a4:	d07f      	beq.n	80821a6 <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80820a6:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80820a8:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80820ac:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80820ae:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 80820b2:	d11c      	bne.n	80820ee <_ZN7FatFile5writeEPKvj+0x8e>
 80820b4:	b9df      	cbnz	r7, 80820ee <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 80820b6:	6921      	ldr	r1, [r4, #16]
 80820b8:	b171      	cbz	r1, 80820d8 <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80820ba:	f104 0210 	add.w	r2, r4, #16
 80820be:	f000 f900 	bl	80822c2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80820c2:	2800      	cmp	r0, #0
 80820c4:	dbdd      	blt.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80820c6:	f040 808d 	bne.w	80821e4 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 80820ca:	4620      	mov	r0, r4
 80820cc:	f7ff fd44 	bl	8081b58 <_ZN7FatFile10addClusterEv>
 80820d0:	2800      	cmp	r0, #0
 80820d2:	f040 8087 	bne.w	80821e4 <_ZN7FatFile5writeEPKvj+0x184>
 80820d6:	e7d4      	b.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80820d8:	6a23      	ldr	r3, [r4, #32]
 80820da:	b93b      	cbnz	r3, 80820ec <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 80820dc:	4620      	mov	r0, r4
 80820de:	f7ff fd3b 	bl	8081b58 <_ZN7FatFile10addClusterEv>
 80820e2:	2800      	cmp	r0, #0
 80820e4:	d0cd      	beq.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80820e6:	6923      	ldr	r3, [r4, #16]
 80820e8:	6223      	str	r3, [r4, #32]
 80820ea:	e000      	b.n	80820ee <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 80820ec:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80820ee:	6921      	ldr	r1, [r4, #16]
 80820f0:	68a0      	ldr	r0, [r4, #8]
 80820f2:	f000 f8e0 	bl	80822b6 <_ZNK9FatVolume17clusterFirstBlockEm>
 80820f6:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80820f8:	b917      	cbnz	r7, 8082100 <_ZN7FatFile5writeEPKvj+0xa0>
 80820fa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80820fe:	d221      	bcs.n	8082144 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8082100:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 8082104:	42b5      	cmp	r5, r6
 8082106:	bf28      	it	cs
 8082108:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 808210a:	b937      	cbnz	r7, 808211a <_ZN7FatFile5writeEPKvj+0xba>
 808210c:	6963      	ldr	r3, [r4, #20]
 808210e:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8082110:	4293      	cmp	r3, r2
 8082112:	bf34      	ite	cc
 8082114:	2201      	movcc	r2, #1
 8082116:	2205      	movcs	r2, #5
 8082118:	e000      	b.n	808211c <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 808211a:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808211c:	68a0      	ldr	r0, [r4, #8]
 808211e:	3024      	adds	r0, #36	; 0x24
 8082120:	f000 f8a5 	bl	808226e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8082124:	2800      	cmp	r0, #0
 8082126:	d0ac      	beq.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082128:	4438      	add	r0, r7
 808212a:	462a      	mov	r2, r5
 808212c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 808212e:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082130:	f007 fe9f 	bl	8089e72 <memcpy>
      if (512 == (n + blockOffset)) {
 8082134:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8082138:	d12f      	bne.n	808219a <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 808213a:	68a0      	ldr	r0, [r4, #8]
 808213c:	3024      	adds	r0, #36	; 0x24
 808213e:	f000 f86f 	bl	8082220 <_ZN8FatCache4syncEv>
 8082142:	e016      	b.n	8082172 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8082144:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082148:	68a0      	ldr	r0, [r4, #8]
 808214a:	d314      	bcc.n	8082176 <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 808214c:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 808214e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 8082150:	1b52      	subs	r2, r2, r5
 8082152:	b2d2      	uxtb	r2, r2
 8082154:	4293      	cmp	r3, r2
 8082156:	bf28      	it	cs
 8082158:	4613      	movcs	r3, r2
 808215a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 808215c:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808215e:	4291      	cmp	r1, r2
 8082160:	d302      	bcc.n	8082168 <_ZN7FatFile5writeEPKvj+0x108>
 8082162:	441a      	add	r2, r3
 8082164:	4291      	cmp	r1, r2
 8082166:	d337      	bcc.n	80821d8 <_ZN7FatFile5writeEPKvj+0x178>
 8082168:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 808216a:	464a      	mov	r2, r9
 808216c:	6838      	ldr	r0, [r7, #0]
 808216e:	f000 fc6d 	bl	8082a4c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 8082172:	b990      	cbnz	r0, 808219a <_ZN7FatFile5writeEPKvj+0x13a>
 8082174:	e785      	b.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8082176:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082178:	464a      	mov	r2, r9
 808217a:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808217c:	bf02      	ittt	eq
 808217e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082182:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082186:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8082188:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 808218a:	6818      	ldr	r0, [r3, #0]
 808218c:	f000 fbec 	bl	8082968 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8082190:	2800      	cmp	r0, #0
 8082192:	f43f af76 	beq.w	8082082 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8082196:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 808219a:	6963      	ldr	r3, [r4, #20]
    src += n;
 808219c:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 808219e:	442b      	add	r3, r5
 80821a0:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80821a2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80821a4:	e77c      	b.n	80820a0 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80821a6:	69e2      	ldr	r2, [r4, #28]
 80821a8:	4293      	cmp	r3, r2
 80821aa:	d901      	bls.n	80821b0 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80821ac:	61e3      	str	r3, [r4, #28]
 80821ae:	e002      	b.n	80821b6 <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80821b0:	4b0f      	ldr	r3, [pc, #60]	; (80821f0 <_ZN7FatFile5writeEPKvj+0x190>)
 80821b2:	681b      	ldr	r3, [r3, #0]
 80821b4:	b11b      	cbz	r3, 80821be <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80821b6:	78a3      	ldrb	r3, [r4, #2]
 80821b8:	f043 0304 	orr.w	r3, r3, #4
 80821bc:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 80821be:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80821c2:	2b00      	cmp	r3, #0
 80821c4:	db02      	blt.n	80821cc <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80821c6:	4640      	mov	r0, r8
 80821c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 80821cc:	4620      	mov	r0, r4
 80821ce:	f7ff febb 	bl	8081f48 <_ZN7FatFile4syncEv>
 80821d2:	2800      	cmp	r0, #0
 80821d4:	d1f7      	bne.n	80821c6 <_ZN7FatFile5writeEPKvj+0x166>
 80821d6:	e754      	b.n	8082082 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80821d8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80821dc:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80821e0:	62c2      	str	r2, [r0, #44]	; 0x2c
 80821e2:	e7c1      	b.n	8082168 <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80821e4:	6921      	ldr	r1, [r4, #16]
 80821e6:	68a0      	ldr	r0, [r4, #8]
 80821e8:	f000 f865 	bl	80822b6 <_ZNK9FatVolume17clusterFirstBlockEm>
 80821ec:	4601      	mov	r1, r0
 80821ee:	e784      	b.n	80820fa <_ZN7FatFile5writeEPKvj+0x9a>
 80821f0:	20000744 	.word	0x20000744

080821f4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80821f4:	f003 b814 	b.w	8085220 <HAL_Pin_Map>

080821f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80821f8:	b570      	push	{r4, r5, r6, lr}
 80821fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80821fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80821fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082200:	b149      	cbz	r1, 8082216 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082202:	f008 fbc1 	bl	808a988 <strlen>
 8082206:	682b      	ldr	r3, [r5, #0]
 8082208:	4602      	mov	r2, r0
 808220a:	4621      	mov	r1, r4
 808220c:	4628      	mov	r0, r5
    }
 808220e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082212:	68db      	ldr	r3, [r3, #12]
 8082214:	4718      	bx	r3
    }
 8082216:	bd70      	pop	{r4, r5, r6, pc}

08082218 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8082218:	f003 b802 	b.w	8085220 <HAL_Pin_Map>

0808221c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 808221c:	f003 b800 	b.w	8085220 <HAL_Pin_Map>

08082220 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082220:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8082222:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082224:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8082226:	07da      	lsls	r2, r3, #31
 8082228:	d51e      	bpl.n	8082268 <_ZN8FatCache4syncEv+0x48>
 808222a:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 808222c:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082230:	6881      	ldr	r1, [r0, #8]
 8082232:	4632      	mov	r2, r6
 8082234:	6818      	ldr	r0, [r3, #0]
 8082236:	f000 fb97 	bl	8082968 <_ZN9SdSpiCard10writeBlockEmPKh>
 808223a:	4605      	mov	r5, r0
 808223c:	b908      	cbnz	r0, 8082242 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 808223e:	2500      	movs	r5, #0
 8082240:	e013      	b.n	808226a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8082242:	7823      	ldrb	r3, [r4, #0]
 8082244:	079b      	lsls	r3, r3, #30
 8082246:	d404      	bmi.n	8082252 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8082248:	7823      	ldrb	r3, [r4, #0]
 808224a:	f023 0301 	bic.w	r3, r3, #1
 808224e:	7023      	strb	r3, [r4, #0]
 8082250:	e00b      	b.n	808226a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8082252:	6863      	ldr	r3, [r4, #4]
 8082254:	68a0      	ldr	r0, [r4, #8]
 8082256:	6919      	ldr	r1, [r3, #16]
 8082258:	4632      	mov	r2, r6
 808225a:	4401      	add	r1, r0
 808225c:	6818      	ldr	r0, [r3, #0]
 808225e:	f000 fb83 	bl	8082968 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8082262:	2800      	cmp	r0, #0
 8082264:	d1f0      	bne.n	8082248 <_ZN8FatCache4syncEv+0x28>
 8082266:	e7ea      	b.n	808223e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8082268:	2501      	movs	r5, #1

fail:
  return false;
}
 808226a:	4628      	mov	r0, r5
 808226c:	bd70      	pop	{r4, r5, r6, pc}

0808226e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808226e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8082270:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082272:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8082274:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082276:	460e      	mov	r6, r1
 8082278:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 808227a:	d014      	beq.n	80822a6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 808227c:	f7ff ffd0 	bl	8082220 <_ZN8FatCache4syncEv>
 8082280:	b908      	cbnz	r0, 8082286 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 8082282:	2000      	movs	r0, #0
 8082284:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8082286:	076b      	lsls	r3, r5, #29
 8082288:	d503      	bpl.n	8082292 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 808228a:	2300      	movs	r3, #0
 808228c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 808228e:	60a6      	str	r6, [r4, #8]
 8082290:	e009      	b.n	80822a6 <_ZN8FatCache4readEmh+0x38>
 8082292:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8082294:	f104 020c 	add.w	r2, r4, #12
 8082298:	4631      	mov	r1, r6
 808229a:	6818      	ldr	r0, [r3, #0]
 808229c:	f000 fada 	bl	8082854 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80822a0:	2800      	cmp	r0, #0
 80822a2:	d1f2      	bne.n	808228a <_ZN8FatCache4readEmh+0x1c>
 80822a4:	e7ed      	b.n	8082282 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80822a6:	4620      	mov	r0, r4
 80822a8:	7823      	ldrb	r3, [r4, #0]
 80822aa:	f005 0503 	and.w	r5, r5, #3
 80822ae:	431d      	orrs	r5, r3
 80822b0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 80822b4:	bd70      	pop	{r4, r5, r6, pc}

080822b6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80822b6:	7983      	ldrb	r3, [r0, #6]
 80822b8:	3902      	subs	r1, #2
 80822ba:	6940      	ldr	r0, [r0, #20]
 80822bc:	4099      	lsls	r1, r3
}
 80822be:	4408      	add	r0, r1
 80822c0:	4770      	bx	lr

080822c2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80822c2:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80822c4:	b570      	push	{r4, r5, r6, lr}
 80822c6:	4605      	mov	r5, r0
 80822c8:	460c      	mov	r4, r1
 80822ca:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80822cc:	d802      	bhi.n	80822d4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80822ce:	f04f 30ff 	mov.w	r0, #4294967295
 80822d2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80822d4:	69c3      	ldr	r3, [r0, #28]
 80822d6:	4299      	cmp	r1, r3
 80822d8:	d8f9      	bhi.n	80822ce <_ZN9FatVolume6fatGetEmPm+0xc>
 80822da:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80822dc:	2b20      	cmp	r3, #32
 80822de:	d110      	bne.n	8082302 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80822e0:	6981      	ldr	r1, [r0, #24]
 80822e2:	2202      	movs	r2, #2
 80822e4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80822e8:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80822ec:	f7ff ffbf 	bl	808226e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80822f0:	2800      	cmp	r0, #0
 80822f2:	d0ec      	beq.n	80822ce <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80822f4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80822f8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80822fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8082300:	e00f      	b.n	8082322 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 8082302:	2b10      	cmp	r3, #16
 8082304:	d1e3      	bne.n	80822ce <_ZN9FatVolume6fatGetEmPm+0xc>
 8082306:	6983      	ldr	r3, [r0, #24]
 8082308:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808230c:	2202      	movs	r2, #2
 808230e:	4419      	add	r1, r3
 8082310:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082314:	f7ff ffab 	bl	808226e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082318:	2800      	cmp	r0, #0
 808231a:	d0d8      	beq.n	80822ce <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 808231c:	b2e4      	uxtb	r4, r4
 808231e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8082322:	69ea      	ldr	r2, [r5, #28]
 8082324:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8082326:	bf9a      	itte	ls
 8082328:	6033      	strls	r3, [r6, #0]
  return 1;
 808232a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 808232c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 808232e:	bd70      	pop	{r4, r5, r6, pc}

08082330 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082330:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8082332:	b538      	push	{r3, r4, r5, lr}
 8082334:	460c      	mov	r4, r1
 8082336:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082338:	d801      	bhi.n	808233e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 808233a:	2000      	movs	r0, #0
 808233c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 808233e:	69c3      	ldr	r3, [r0, #28]
 8082340:	4299      	cmp	r1, r3
 8082342:	d8fa      	bhi.n	808233a <_ZN9FatVolume6fatPutEmm+0xa>
 8082344:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8082346:	2b20      	cmp	r3, #32
 8082348:	d10e      	bne.n	8082368 <_ZN9FatVolume6fatPutEmm+0x38>
 808234a:	6981      	ldr	r1, [r0, #24]
 808234c:	2203      	movs	r2, #3
 808234e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082352:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082356:	f7ff ff8a 	bl	808226e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 808235a:	2800      	cmp	r0, #0
 808235c:	d0ed      	beq.n	808233a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 808235e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082362:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8082366:	e00f      	b.n	8082388 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8082368:	2b10      	cmp	r3, #16
 808236a:	d1e6      	bne.n	808233a <_ZN9FatVolume6fatPutEmm+0xa>
 808236c:	6983      	ldr	r3, [r0, #24]
 808236e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082372:	2203      	movs	r2, #3
 8082374:	4419      	add	r1, r3
 8082376:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808237a:	f7ff ff78 	bl	808226e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 808237e:	2800      	cmp	r0, #0
 8082380:	d0db      	beq.n	808233a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8082382:	b2e4      	uxtb	r4, r4
 8082384:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8082388:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 808238a:	bd38      	pop	{r3, r4, r5, pc}

0808238c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808238c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082390:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082392:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082394:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082396:	460e      	mov	r6, r1
 8082398:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 808239a:	d207      	bcs.n	80823ac <_ZN9FatVolume15allocateClusterEmPm+0x20>
 808239c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 808239e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 80823a0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 80823a2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 80823a4:	429c      	cmp	r4, r3
 80823a6:	d903      	bls.n	80823b0 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 80823a8:	b9cf      	cbnz	r7, 80823de <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 80823aa:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 80823ac:	2701      	movs	r7, #1
 80823ae:	e7f7      	b.n	80823a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 80823b0:	42a6      	cmp	r6, r4
 80823b2:	d014      	beq.n	80823de <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80823b4:	aa01      	add	r2, sp, #4
 80823b6:	4621      	mov	r1, r4
 80823b8:	4628      	mov	r0, r5
 80823ba:	f7ff ff82 	bl	80822c2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80823be:	2800      	cmp	r0, #0
 80823c0:	db0d      	blt.n	80823de <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80823c2:	d0ed      	beq.n	80823a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80823c4:	9b01      	ldr	r3, [sp, #4]
 80823c6:	2b00      	cmp	r3, #0
 80823c8:	d1ea      	bne.n	80823a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 80823ca:	b107      	cbz	r7, 80823ce <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 80823cc:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80823ce:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80823d2:	4621      	mov	r1, r4
 80823d4:	4628      	mov	r0, r5
 80823d6:	f7ff ffab 	bl	8082330 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 80823da:	4607      	mov	r7, r0
 80823dc:	b908      	cbnz	r0, 80823e2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80823de:	2700      	movs	r7, #0
 80823e0:	e00b      	b.n	80823fa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80823e2:	b916      	cbnz	r6, 80823ea <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 80823e4:	f8c8 4000 	str.w	r4, [r8]
  return true;
 80823e8:	e007      	b.n	80823fa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 80823ea:	4622      	mov	r2, r4
 80823ec:	4631      	mov	r1, r6
 80823ee:	4628      	mov	r0, r5
 80823f0:	f7ff ff9e 	bl	8082330 <_ZN9FatVolume6fatPutEmm>
 80823f4:	2800      	cmp	r0, #0
 80823f6:	d1f5      	bne.n	80823e4 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 80823f8:	e7f1      	b.n	80823de <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 80823fa:	4638      	mov	r0, r7
 80823fc:	b002      	add	sp, #8
 80823fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082402 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8082402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8082404:	4605      	mov	r5, r0
 8082406:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8082408:	aa01      	add	r2, sp, #4
 808240a:	4621      	mov	r1, r4
 808240c:	4628      	mov	r0, r5
 808240e:	f7ff ff58 	bl	80822c2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082412:	1e06      	subs	r6, r0, #0
 8082414:	da01      	bge.n	808241a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8082416:	2000      	movs	r0, #0
 8082418:	e00f      	b.n	808243a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808241a:	2200      	movs	r2, #0
 808241c:	4621      	mov	r1, r4
 808241e:	4628      	mov	r0, r5
 8082420:	f7ff ff86 	bl	8082330 <_ZN9FatVolume6fatPutEmm>
 8082424:	2800      	cmp	r0, #0
 8082426:	d0f6      	beq.n	8082416 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8082428:	68eb      	ldr	r3, [r5, #12]
 808242a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 808242c:	bf9c      	itt	ls
 808242e:	f104 34ff 	addls.w	r4, r4, #4294967295
 8082432:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 8082434:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8082436:	2e00      	cmp	r6, #0
 8082438:	d1e6      	bne.n	8082408 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 808243a:	b002      	add	sp, #8
 808243c:	bd70      	pop	{r4, r5, r6, pc}

0808243e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 808243e:	b570      	push	{r4, r5, r6, lr}
 8082440:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8082442:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8082444:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8082446:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082448:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 808244c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 808244e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082450:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082452:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082456:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082458:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808245c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 8082460:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 8082464:	b1a1      	cbz	r1, 8082490 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8082466:	2904      	cmp	r1, #4
 8082468:	d85d      	bhi.n	8082526 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808246a:	4611      	mov	r1, r2
 808246c:	3024      	adds	r0, #36	; 0x24
 808246e:	f7ff fefe 	bl	808226e <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082472:	2800      	cmp	r0, #0
 8082474:	d057      	beq.n	8082526 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8082476:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 808247a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 808247e:	065b      	lsls	r3, r3, #25
 8082480:	d151      	bne.n	8082526 <_ZN9FatVolume4initEh+0xe8>
 8082482:	351b      	adds	r5, #27
 8082484:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8082488:	f8d5 5006 	ldr.w	r5, [r5, #6]
 808248c:	2d00      	cmp	r5, #0
 808248e:	d04a      	beq.n	8082526 <_ZN9FatVolume4initEh+0xe8>
 8082490:	2200      	movs	r2, #0
 8082492:	4629      	mov	r1, r5
 8082494:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8082498:	f7ff fee9 	bl	808226e <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 808249c:	2800      	cmp	r0, #0
 808249e:	d042      	beq.n	8082526 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80824a0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80824a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80824a8:	d13d      	bne.n	8082526 <_ZN9FatVolume4initEh+0xe8>
 80824aa:	7c03      	ldrb	r3, [r0, #16]
 80824ac:	2b02      	cmp	r3, #2
 80824ae:	d13a      	bne.n	8082526 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 80824b0:	89c3      	ldrh	r3, [r0, #14]
 80824b2:	2b00      	cmp	r3, #0
 80824b4:	d037      	beq.n	8082526 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80824b6:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80824b8:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80824ba:	1e4b      	subs	r3, r1, #1
 80824bc:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80824be:	2300      	movs	r3, #0
 80824c0:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80824c2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80824c4:	2301      	movs	r3, #1
 80824c6:	428b      	cmp	r3, r1
 80824c8:	d007      	beq.n	80824da <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 80824ca:	3e01      	subs	r6, #1
 80824cc:	d02b      	beq.n	8082526 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80824ce:	79a2      	ldrb	r2, [r4, #6]
 80824d0:	005b      	lsls	r3, r3, #1
 80824d2:	3201      	adds	r2, #1
 80824d4:	b2db      	uxtb	r3, r3
 80824d6:	71a2      	strb	r2, [r4, #6]
 80824d8:	e7f5      	b.n	80824c6 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80824da:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80824dc:	b902      	cbnz	r2, 80824e0 <_ZN9FatVolume4initEh+0xa2>
 80824de:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80824e0:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80824e2:	89c6      	ldrh	r6, [r0, #14]
 80824e4:	442e      	add	r6, r5
 80824e6:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80824e8:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80824ec:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80824f0:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80824f2:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80824f4:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 80824f8:	0152      	lsls	r2, r2, #5
 80824fa:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80824fe:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8082502:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8082504:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8082508:	b903      	cbnz	r3, 808250c <_ZN9FatVolume4initEh+0xce>
 808250a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 808250c:	1aad      	subs	r5, r5, r2
 808250e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8082510:	79a5      	ldrb	r5, [r4, #6]
 8082512:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8082516:	1c6b      	adds	r3, r5, #1
 8082518:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 808251a:	f640 73f4 	movw	r3, #4084	; 0xff4
 808251e:	429d      	cmp	r5, r3
 8082520:	d803      	bhi.n	808252a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 8082522:	230c      	movs	r3, #12
 8082524:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8082526:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8082528:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 808252a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 808252e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082530:	bf89      	itett	hi
 8082532:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8082534:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082536:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8082538:	2320      	movhi	r3, #32
 808253a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 808253c:	2001      	movs	r0, #1

fail:
  return false;
}
 808253e:	bd70      	pop	{r4, r5, r6, pc}

08082540 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8082540:	f002 be6e 	b.w	8085220 <HAL_Pin_Map>

08082544 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 8082544:	f002 be6c 	b.w	8085220 <HAL_Pin_Map>

08082548 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8082548:	f002 be6a 	b.w	8085220 <HAL_Pin_Map>

0808254c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 808254c:	b570      	push	{r4, r5, r6, lr}
 808254e:	460e      	mov	r6, r1
 8082550:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 8082552:	f002 fefd 	bl	8085350 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 8082556:	4c0c      	ldr	r4, [pc, #48]	; (8082588 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8082558:	6823      	ldr	r3, [r4, #0]
 808255a:	1ac0      	subs	r0, r0, r3
 808255c:	4b0b      	ldr	r3, [pc, #44]	; (808258c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 808255e:	4298      	cmp	r0, r3
 8082560:	d908      	bls.n	8082574 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082562:	f002 fefd 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082566:	4b0a      	ldr	r3, [pc, #40]	; (8082590 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8082568:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 808256a:	f003 f965 	bl	8085838 <spark_process>
 808256e:	f002 feef 	bl	8085350 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 8082572:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8082574:	f002 fef4 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 8082578:	b280      	uxth	r0, r0
 808257a:	1b80      	subs	r0, r0, r6
}
 808257c:	42a8      	cmp	r0, r5
 808257e:	bfd4      	ite	le
 8082580:	2000      	movle	r0, #0
 8082582:	2001      	movgt	r0, #1
 8082584:	bd70      	pop	{r4, r5, r6, pc}
 8082586:	bf00      	nop
 8082588:	20000748 	.word	0x20000748
 808258c:	000186a0 	.word	0x000186a0
 8082590:	20000eb0 	.word	0x20000eb0

08082594 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8082594:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 8082596:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8082598:	4604      	mov	r4, r0
  if (!m_spiActive) {
 808259a:	b94d      	cbnz	r5, 80825b0 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 808259c:	6840      	ldr	r0, [r0, #4]
 808259e:	f000 fa7d 	bl	8082a9c <_ZN14SdSpiAltDriver8activateEv>
 80825a2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80825a4:	4629      	mov	r1, r5
 80825a6:	7d18      	ldrb	r0, [r3, #20]
 80825a8:	f005 fe23 	bl	80881f2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80825ac:	2301      	movs	r3, #1
 80825ae:	7223      	strb	r3, [r4, #8]
 80825b0:	bd38      	pop	{r3, r4, r5, pc}

080825b2 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80825b2:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80825b4:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80825b6:	4604      	mov	r4, r0
  if (m_spiActive) {
 80825b8:	b16b      	cbz	r3, 80825d6 <_ZN9SdSpiCard7spiStopEv+0x24>
 80825ba:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 80825bc:	2101      	movs	r1, #1
 80825be:	7d18      	ldrb	r0, [r3, #20]
 80825c0:	f005 fe17 	bl	80881f2 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80825c4:	21ff      	movs	r1, #255	; 0xff
 80825c6:	6860      	ldr	r0, [r4, #4]
 80825c8:	f000 fa9a 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 80825cc:	6860      	ldr	r0, [r4, #4]
 80825ce:	f000 fa79 	bl	8082ac4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 80825d2:	2300      	movs	r3, #0
 80825d4:	7223      	strb	r3, [r4, #8]
 80825d6:	bd10      	pop	{r4, pc}

080825d8 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80825d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80825da:	4604      	mov	r4, r0
 80825dc:	460d      	mov	r5, r1
 80825de:	4616      	mov	r6, r2
 80825e0:	f002 febe 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80825e4:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80825e6:	6860      	ldr	r0, [r4, #4]
 80825e8:	f000 fa6f 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 80825ec:	28ff      	cmp	r0, #255	; 0xff
 80825ee:	7260      	strb	r0, [r4, #9]
 80825f0:	d109      	bne.n	8082606 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80825f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80825f6:	4639      	mov	r1, r7
 80825f8:	4620      	mov	r0, r4
 80825fa:	f7ff ffa7 	bl	808254c <_ZN9SdSpiCard10isTimedOutEtt>
 80825fe:	2800      	cmp	r0, #0
 8082600:	d0f1      	beq.n	80825e6 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082602:	2355      	movs	r3, #85	; 0x55
 8082604:	e00b      	b.n	808261e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 8082606:	28fe      	cmp	r0, #254	; 0xfe
 8082608:	d001      	beq.n	808260e <_ZN9SdSpiCard8readDataEPhj+0x36>
 808260a:	2350      	movs	r3, #80	; 0x50
 808260c:	e007      	b.n	808261e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 808260e:	4632      	mov	r2, r6
 8082610:	4629      	mov	r1, r5
 8082612:	6860      	ldr	r0, [r4, #4]
 8082614:	f000 fa5e 	bl	8082ad4 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8082618:	7260      	strb	r0, [r4, #9]
 808261a:	b130      	cbz	r0, 808262a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808261c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 808261e:	4620      	mov	r0, r4
 8082620:	7023      	strb	r3, [r4, #0]
 8082622:	f7ff ffc6 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082626:	2000      	movs	r0, #0
}
 8082628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808262a:	6860      	ldr	r0, [r4, #4]
 808262c:	f000 fa4d 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 8082630:	6860      	ldr	r0, [r4, #4]
 8082632:	f000 fa4a 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 8082636:	2001      	movs	r0, #1
 8082638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808263a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 808263a:	b570      	push	{r4, r5, r6, lr}
 808263c:	4604      	mov	r4, r0
 808263e:	460e      	mov	r6, r1
 8082640:	f002 fe8e 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
 8082644:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 8082646:	4632      	mov	r2, r6
 8082648:	4629      	mov	r1, r5
 808264a:	4620      	mov	r0, r4
 808264c:	f7ff ff7e 	bl	808254c <_ZN9SdSpiCard10isTimedOutEtt>
 8082650:	b930      	cbnz	r0, 8082660 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 8082652:	6860      	ldr	r0, [r4, #4]
 8082654:	f000 fa39 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 8082658:	28ff      	cmp	r0, #255	; 0xff
 808265a:	d1f4      	bne.n	8082646 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 808265c:	2001      	movs	r0, #1
 808265e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 8082660:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 8082662:	bd70      	pop	{r4, r5, r6, pc}

08082664 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 8082666:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082668:	4604      	mov	r4, r0
 808266a:	460d      	mov	r5, r1
 808266c:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 808266e:	b90b      	cbnz	r3, 8082674 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 8082670:	f7ff ff90 	bl	8082594 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 8082674:	b125      	cbz	r5, 8082680 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 8082676:	f44f 7196 	mov.w	r1, #300	; 0x12c
 808267a:	4620      	mov	r0, r4
 808267c:	f7ff ffdd 	bl	808263a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082680:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8082684:	6860      	ldr	r0, [r4, #4]
 8082686:	f000 fa3b 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
 808268a:	f10d 0607 	add.w	r6, sp, #7
 808268e:	f10d 0703 	add.w	r7, sp, #3
 8082692:	f816 1901 	ldrb.w	r1, [r6], #-1
 8082696:	6860      	ldr	r0, [r4, #4]
 8082698:	f000 fa32 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 808269c:	42be      	cmp	r6, r7
 808269e:	d1f8      	bne.n	8082692 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80826a0:	2d00      	cmp	r5, #0
 80826a2:	bf0c      	ite	eq
 80826a4:	2195      	moveq	r1, #149	; 0x95
 80826a6:	2187      	movne	r1, #135	; 0x87
 80826a8:	6860      	ldr	r0, [r4, #4]
 80826aa:	f000 fa29 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80826ae:	6860      	ldr	r0, [r4, #4]
 80826b0:	f000 fa0b 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 80826b4:	250b      	movs	r5, #11
 80826b6:	6860      	ldr	r0, [r4, #4]
 80826b8:	f000 fa07 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80826bc:	0603      	lsls	r3, r0, #24
 80826be:	7260      	strb	r0, [r4, #9]
 80826c0:	d503      	bpl.n	80826ca <_ZN9SdSpiCard11cardCommandEhm+0x66>
 80826c2:	3d01      	subs	r5, #1
 80826c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80826c8:	d1f5      	bne.n	80826b6 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 80826ca:	b003      	add	sp, #12
 80826cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080826ce <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80826ce:	b570      	push	{r4, r5, r6, lr}
 80826d0:	4604      	mov	r4, r0
 80826d2:	460d      	mov	r5, r1
 80826d4:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80826d6:	2137      	movs	r1, #55	; 0x37
 80826d8:	2200      	movs	r2, #0
 80826da:	f7ff ffc3 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80826de:	4632      	mov	r2, r6
 80826e0:	4629      	mov	r1, r5
 80826e2:	4620      	mov	r0, r4
  }
 80826e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 80826e8:	f7ff bfbc 	b.w	8082664 <_ZN9SdSpiCard11cardCommandEhm>

080826ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80826ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80826f0:	2500      	movs	r5, #0
 80826f2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80826f4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 80826f6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 80826f8:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80826fa:	4604      	mov	r4, r0
 80826fc:	4690      	mov	r8, r2
 80826fe:	461e      	mov	r6, r3
 8082700:	f002 fe2e 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 8082704:	4641      	mov	r1, r8
 8082706:	4607      	mov	r7, r0
 8082708:	6860      	ldr	r0, [r4, #4]
 808270a:	f000 f9cb 	bl	8082aa4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 808270e:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8082710:	4a4f      	ldr	r2, [pc, #316]	; (8082850 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 8082712:	f04f 0801 	mov.w	r8, #1
 8082716:	721d      	strb	r5, [r3, #8]
 8082718:	60da      	str	r2, [r3, #12]
 808271a:	745d      	strb	r5, [r3, #17]
 808271c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 8082720:	4620      	mov	r0, r4
 8082722:	f7ff ff37 	bl	8082594 <_ZN9SdSpiCard8spiStartEv>
 8082726:	6863      	ldr	r3, [r4, #4]
 8082728:	4641      	mov	r1, r8
 808272a:	7d18      	ldrb	r0, [r3, #20]
 808272c:	f005 fd61 	bl	80881f2 <digitalWrite>
 8082730:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082732:	21ff      	movs	r1, #255	; 0xff
 8082734:	6860      	ldr	r0, [r4, #4]
 8082736:	3d01      	subs	r5, #1
 8082738:	f000 f9e2 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 808273c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082740:	d1f7      	bne.n	8082732 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 8082742:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8082744:	4629      	mov	r1, r5
 8082746:	7d18      	ldrb	r0, [r3, #20]
 8082748:	f005 fd53 	bl	80881f2 <digitalWrite>
 808274c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 808274e:	2200      	movs	r2, #0
 8082750:	4611      	mov	r1, r2
 8082752:	4620      	mov	r0, r4
 8082754:	f7ff ff86 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 8082758:	2801      	cmp	r0, #1
 808275a:	4680      	mov	r8, r0
 808275c:	d012      	beq.n	8082784 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 808275e:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 8082760:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082764:	d101      	bne.n	808276a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082766:	2320      	movs	r3, #32
 8082768:	e057      	b.n	808281a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808276a:	21fd      	movs	r1, #253	; 0xfd
 808276c:	6860      	ldr	r0, [r4, #4]
 808276e:	f000 f9c7 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
 8082772:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082776:	6860      	ldr	r0, [r4, #4]
 8082778:	f000 f9a7 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 808277c:	f1b8 0801 	subs.w	r8, r8, #1
 8082780:	d1f9      	bne.n	8082776 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 8082782:	e7e4      	b.n	808274e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8082784:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8082788:	2108      	movs	r1, #8
 808278a:	4620      	mov	r0, r4
 808278c:	f7ff ff6a 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 8082790:	2805      	cmp	r0, #5
 8082792:	d102      	bne.n	808279a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8082794:	f884 800a 	strb.w	r8, [r4, #10]
 8082798:	e00f      	b.n	80827ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 808279a:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808279c:	6860      	ldr	r0, [r4, #4]
 808279e:	f000 f994 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 80827a2:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80827a4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80827a8:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80827aa:	d1f7      	bne.n	808279c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80827ac:	28aa      	cmp	r0, #170	; 0xaa
 80827ae:	d102      	bne.n	80827b6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80827b0:	2302      	movs	r3, #2
 80827b2:	72a3      	strb	r3, [r4, #10]
 80827b4:	e001      	b.n	80827ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80827b6:	2325      	movs	r3, #37	; 0x25
 80827b8:	e02f      	b.n	808281a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80827ba:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80827bc:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80827be:	2b02      	cmp	r3, #2
 80827c0:	bf0c      	ite	eq
 80827c2:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80827c6:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80827c8:	462a      	mov	r2, r5
 80827ca:	2129      	movs	r1, #41	; 0x29
 80827cc:	4620      	mov	r0, r4
 80827ce:	f7ff ff7e 	bl	80826ce <_ZN9SdSpiCard8cardAcmdEhm>
 80827d2:	4602      	mov	r2, r0
 80827d4:	b148      	cbz	r0, 80827ea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80827d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80827da:	4639      	mov	r1, r7
 80827dc:	4620      	mov	r0, r4
 80827de:	f7ff feb5 	bl	808254c <_ZN9SdSpiCard10isTimedOutEtt>
 80827e2:	2800      	cmp	r0, #0
 80827e4:	d0f0      	beq.n	80827c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 80827e6:	2343      	movs	r3, #67	; 0x43
 80827e8:	e017      	b.n	808281a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 80827ea:	7aa3      	ldrb	r3, [r4, #10]
 80827ec:	2b02      	cmp	r3, #2
 80827ee:	d00e      	beq.n	808280e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 80827f0:	4620      	mov	r0, r4
 80827f2:	f7ff fede 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 80827f6:	6863      	ldr	r3, [r4, #4]
 80827f8:	68b0      	ldr	r0, [r6, #8]
 80827fa:	7934      	ldrb	r4, [r6, #4]
 80827fc:	7b31      	ldrb	r1, [r6, #12]
 80827fe:	7b72      	ldrb	r2, [r6, #13]
 8082800:	60d8      	str	r0, [r3, #12]
 8082802:	721c      	strb	r4, [r3, #8]
 8082804:	7419      	strb	r1, [r3, #16]
 8082806:	745a      	strb	r2, [r3, #17]
  return true;
 8082808:	2001      	movs	r0, #1
 808280a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 808280e:	213a      	movs	r1, #58	; 0x3a
 8082810:	4620      	mov	r0, r4
 8082812:	f7ff ff27 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 8082816:	b138      	cbz	r0, 8082828 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8082818:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 808281a:	4620      	mov	r0, r4
 808281c:	7023      	strb	r3, [r4, #0]
 808281e:	f7ff fec8 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082822:	2000      	movs	r0, #0
}
 8082824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082828:	6860      	ldr	r0, [r4, #4]
 808282a:	f000 f94e 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 808282e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8082832:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8082834:	bf04      	itt	eq
 8082836:	2303      	moveq	r3, #3
 8082838:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808283a:	6860      	ldr	r0, [r4, #4]
 808283c:	f000 f945 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 8082840:	6860      	ldr	r0, [r4, #4]
 8082842:	f000 f942 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 8082846:	6860      	ldr	r0, [r4, #4]
 8082848:	f000 f93f 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 808284c:	e7d0      	b.n	80827f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 808284e:	bf00      	nop
 8082850:	0003d090 	.word	0x0003d090

08082854 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082854:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082856:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082858:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808285a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808285c:	bf18      	it	ne
 808285e:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8082860:	460a      	mov	r2, r1
 8082862:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082864:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8082866:	f7ff fefd 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 808286a:	b110      	cbz	r0, 8082872 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808286c:	2330      	movs	r3, #48	; 0x30
 808286e:	7023      	strb	r3, [r4, #0]
 8082870:	e00b      	b.n	808288a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8082872:	4629      	mov	r1, r5
 8082874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082878:	4620      	mov	r0, r4
 808287a:	f7ff fead 	bl	80825d8 <_ZN9SdSpiCard8readDataEPhj>
 808287e:	4605      	mov	r5, r0
 8082880:	b118      	cbz	r0, 808288a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 8082882:	4620      	mov	r0, r4
 8082884:	f7ff fe95 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return true;
 8082888:	e003      	b.n	8082892 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 808288a:	4620      	mov	r0, r4
 808288c:	f7ff fe91 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082890:	2500      	movs	r5, #0
}
 8082892:	4628      	mov	r0, r5
 8082894:	bd38      	pop	{r3, r4, r5, pc}

08082896 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082896:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8082898:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808289a:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808289c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808289e:	bf18      	it	ne
 80828a0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80828a2:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80828a4:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80828a6:	f7ff fedd 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 80828aa:	b130      	cbz	r0, 80828ba <_ZN9SdSpiCard9readStartEm+0x24>
 80828ac:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 80828ae:	4620      	mov	r0, r4
 80828b0:	7023      	strb	r3, [r4, #0]
 80828b2:	f7ff fe7e 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80828b6:	2000      	movs	r0, #0
 80828b8:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 80828ba:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80828bc:	bd10      	pop	{r4, pc}

080828be <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80828be:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80828c0:	2200      	movs	r2, #0
 80828c2:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80828c4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80828c6:	f7ff fecd 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 80828ca:	b130      	cbz	r0, 80828da <_ZN9SdSpiCard8readStopEv+0x1c>
 80828cc:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 80828ce:	4620      	mov	r0, r4
 80828d0:	7023      	strb	r3, [r4, #0]
 80828d2:	f7ff fe6e 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80828d6:	2000      	movs	r0, #0
 80828d8:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 80828da:	4620      	mov	r0, r4
 80828dc:	f7ff fe69 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80828e0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80828e2:	bd10      	pop	{r4, pc}

080828e4 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80828e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80828e6:	4605      	mov	r5, r0
 80828e8:	4616      	mov	r6, r2
 80828ea:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80828ec:	f7ff ffd3 	bl	8082896 <_ZN9SdSpiCard9readStartEm>
 80828f0:	b198      	cbz	r0, 808291a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80828f2:	2400      	movs	r4, #0
 80828f4:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80828f6:	429f      	cmp	r7, r3
 80828f8:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80828fc:	d908      	bls.n	8082910 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 80828fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082902:	4628      	mov	r0, r5
 8082904:	f7ff fe68 	bl	80825d8 <_ZN9SdSpiCard8readDataEPhj>
 8082908:	3401      	adds	r4, #1
 808290a:	2800      	cmp	r0, #0
 808290c:	d1f2      	bne.n	80828f4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 808290e:	e004      	b.n	808291a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8082910:	4628      	mov	r0, r5
}
 8082912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8082916:	f7ff bfd2 	b.w	80828be <_ZN9SdSpiCard8readStopEv>
}
 808291a:	2000      	movs	r0, #0
 808291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808291e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 808291e:	b538      	push	{r3, r4, r5, lr}
 8082920:	4604      	mov	r4, r0
 8082922:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082924:	6840      	ldr	r0, [r0, #4]
 8082926:	f000 f8eb 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 808292a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808292e:	4629      	mov	r1, r5
 8082930:	6860      	ldr	r0, [r4, #4]
 8082932:	f000 f8e9 	bl	8082b08 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082936:	21ff      	movs	r1, #255	; 0xff
 8082938:	6860      	ldr	r0, [r4, #4]
 808293a:	f000 f8e1 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
 808293e:	21ff      	movs	r1, #255	; 0xff
 8082940:	6860      	ldr	r0, [r4, #4]
 8082942:	f000 f8dd 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082946:	6860      	ldr	r0, [r4, #4]
 8082948:	f000 f8bf 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 808294c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 808294e:	f000 001f 	and.w	r0, r0, #31
 8082952:	2805      	cmp	r0, #5
 8082954:	d006      	beq.n	8082964 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082956:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 8082958:	4620      	mov	r0, r4
 808295a:	7023      	strb	r3, [r4, #0]
 808295c:	f7ff fe29 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082960:	2000      	movs	r0, #0
 8082962:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8082964:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082966:	bd38      	pop	{r3, r4, r5, pc}

08082968 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8082968:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808296a:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808296c:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808296e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082970:	bf18      	it	ne
 8082972:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8082974:	460a      	mov	r2, r1
 8082976:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8082978:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 808297a:	f7ff fe73 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 808297e:	4606      	mov	r6, r0
 8082980:	b108      	cbz	r0, 8082986 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8082982:	2332      	movs	r3, #50	; 0x32
 8082984:	e01d      	b.n	80829c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8082986:	462a      	mov	r2, r5
 8082988:	21fe      	movs	r1, #254	; 0xfe
 808298a:	4620      	mov	r0, r4
 808298c:	f7ff ffc7 	bl	808291e <_ZN9SdSpiCard9writeDataEhPKh>
 8082990:	b1c0      	cbz	r0, 80829c4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082992:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8082996:	4620      	mov	r0, r4
 8082998:	f7ff fe4f 	bl	808263a <_ZN9SdSpiCard11waitNotBusyEt>
 808299c:	4605      	mov	r5, r0
 808299e:	b908      	cbnz	r0, 80829a4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 80829a0:	235a      	movs	r3, #90	; 0x5a
 80829a2:	e00e      	b.n	80829c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80829a4:	4632      	mov	r2, r6
 80829a6:	210d      	movs	r1, #13
 80829a8:	4620      	mov	r0, r4
 80829aa:	f7ff fe5b 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 80829ae:	b938      	cbnz	r0, 80829c0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80829b0:	6860      	ldr	r0, [r4, #4]
 80829b2:	f000 f88a 	bl	8082aca <_ZN14SdSpiAltDriver7receiveEv>
 80829b6:	b918      	cbnz	r0, 80829c0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 80829b8:	4620      	mov	r0, r4
 80829ba:	f7ff fdfa 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80829be:	e005      	b.n	80829cc <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80829c0:	2329      	movs	r3, #41	; 0x29
 80829c2:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 80829c4:	4620      	mov	r0, r4
 80829c6:	f7ff fdf4 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80829ca:	2500      	movs	r5, #0
}
 80829cc:	4628      	mov	r0, r5
 80829ce:	bd70      	pop	{r4, r5, r6, pc}

080829d0 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80829d0:	b538      	push	{r3, r4, r5, lr}
 80829d2:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80829d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80829d8:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80829da:	f7ff fe2e 	bl	808263a <_ZN9SdSpiCard11waitNotBusyEt>
 80829de:	b910      	cbnz	r0, 80829e6 <_ZN9SdSpiCard9writeDataEPKh+0x16>
 80829e0:	235b      	movs	r3, #91	; 0x5b
 80829e2:	7023      	strb	r3, [r4, #0]
 80829e4:	e005      	b.n	80829f2 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80829e6:	462a      	mov	r2, r5
 80829e8:	21fc      	movs	r1, #252	; 0xfc
 80829ea:	4620      	mov	r0, r4
 80829ec:	f7ff ff97 	bl	808291e <_ZN9SdSpiCard9writeDataEhPKh>
 80829f0:	b918      	cbnz	r0, 80829fa <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 80829f2:	4620      	mov	r0, r4
 80829f4:	f7ff fddd 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80829f8:	2000      	movs	r0, #0
}
 80829fa:	bd38      	pop	{r3, r4, r5, pc}

080829fc <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80829fc:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80829fe:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082a00:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8082a02:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082a04:	bf18      	it	ne
 8082a06:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082a08:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082a0a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082a0c:	f7ff fe2a 	bl	8082664 <_ZN9SdSpiCard11cardCommandEhm>
 8082a10:	b130      	cbz	r0, 8082a20 <_ZN9SdSpiCard10writeStartEm+0x24>
 8082a12:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 8082a14:	4620      	mov	r0, r4
 8082a16:	7023      	strb	r3, [r4, #0]
 8082a18:	f7ff fdcb 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082a1c:	2000      	movs	r0, #0
 8082a1e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8082a20:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082a22:	bd10      	pop	{r4, pc}

08082a24 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082a24:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082a26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082a2a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082a2c:	f7ff fe05 	bl	808263a <_ZN9SdSpiCard11waitNotBusyEt>
 8082a30:	4605      	mov	r5, r0
 8082a32:	b120      	cbz	r0, 8082a3e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082a34:	21fd      	movs	r1, #253	; 0xfd
 8082a36:	6860      	ldr	r0, [r4, #4]
 8082a38:	f000 f862 	bl	8082b00 <_ZN14SdSpiAltDriver4sendEh>
 8082a3c:	e001      	b.n	8082a42 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082a3e:	2356      	movs	r3, #86	; 0x56
 8082a40:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 8082a42:	4620      	mov	r0, r4
 8082a44:	f7ff fdb5 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8082a48:	4628      	mov	r0, r5
 8082a4a:	bd38      	pop	{r3, r4, r5, pc}

08082a4c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8082a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a4e:	4605      	mov	r5, r0
 8082a50:	4616      	mov	r6, r2
 8082a52:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 8082a54:	f7ff ffd2 	bl	80829fc <_ZN9SdSpiCard10writeStartEm>
 8082a58:	b170      	cbz	r0, 8082a78 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 8082a5a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082a5c:	42bc      	cmp	r4, r7
 8082a5e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8082a62:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082a64:	d004      	beq.n	8082a70 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 8082a66:	f7ff ffb3 	bl	80829d0 <_ZN9SdSpiCard9writeDataEPKh>
 8082a6a:	b128      	cbz	r0, 8082a78 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8082a6c:	3401      	adds	r4, #1
 8082a6e:	e7f5      	b.n	8082a5c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 8082a70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8082a74:	f7ff bfd6 	b.w	8082a24 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 8082a78:	4628      	mov	r0, r5
 8082a7a:	f7ff fd9a 	bl	80825b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8082a7e:	2000      	movs	r0, #0
 8082a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082a82 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 8082a82:	f002 bbcd 	b.w	8085220 <HAL_Pin_Map>

08082a86 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 8082a86:	f002 bbcb 	b.w	8085220 <HAL_Pin_Map>

08082a8a <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 8082a8a:	f002 bbc9 	b.w	8085220 <HAL_Pin_Map>
	...

08082a90 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8082a90:	4b01      	ldr	r3, [pc, #4]	; (8082a98 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8082a92:	2201      	movs	r2, #1
 8082a94:	701a      	strb	r2, [r3, #0]
 8082a96:	4770      	bx	lr
 8082a98:	2000074c 	.word	0x2000074c

08082a9c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 8082a9c:	1d01      	adds	r1, r0, #4
 8082a9e:	6800      	ldr	r0, [r0, #0]
 8082aa0:	f003 b8f6 	b.w	8085c90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

08082aa4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 8082aa4:	b510      	push	{r4, lr}
 8082aa6:	4604      	mov	r4, r0
  m_csPin = csPin;
 8082aa8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 8082aaa:	6800      	ldr	r0, [r0, #0]
 8082aac:	f003 f8c5 	bl	8085c3a <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 8082ab0:	7d20      	ldrb	r0, [r4, #20]
 8082ab2:	2101      	movs	r1, #1
 8082ab4:	f005 fb8c 	bl	80881d0 <pinMode>
  digitalWrite(m_csPin, HIGH);
 8082ab8:	7d20      	ldrb	r0, [r4, #20]
 8082aba:	2101      	movs	r1, #1
}
 8082abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 8082ac0:	f005 bb97 	b.w	80881f2 <digitalWrite>

08082ac4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8082ac4:	6800      	ldr	r0, [r0, #0]
 8082ac6:	f003 b8c8 	b.w	8085c5a <_ZN8SPIClass14endTransactionEv>

08082aca <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 8082aca:	21ff      	movs	r1, #255	; 0xff
 8082acc:	6800      	ldr	r0, [r0, #0]
 8082ace:	f003 b94e 	b.w	8085d6e <_ZN8SPIClass8transferEh>
	...

08082ad4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8082ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082ad6:	4b08      	ldr	r3, [pc, #32]	; (8082af8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082ad8:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082ada:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082adc:	4c07      	ldr	r4, [pc, #28]	; (8082afc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082ade:	4613      	mov	r3, r2
 8082ae0:	6800      	ldr	r0, [r0, #0]
 8082ae2:	460a      	mov	r2, r1
 8082ae4:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082ae6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082ae8:	f003 f947 	bl	8085d7a <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8082aec:	7823      	ldrb	r3, [r4, #0]
 8082aee:	2b00      	cmp	r3, #0
 8082af0:	d0fc      	beq.n	8082aec <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 8082af2:	2000      	movs	r0, #0
 8082af4:	b003      	add	sp, #12
 8082af6:	bd30      	pop	{r4, r5, pc}
 8082af8:	08082a91 	.word	0x08082a91
 8082afc:	2000074c 	.word	0x2000074c

08082b00 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 8082b00:	6800      	ldr	r0, [r0, #0]
 8082b02:	f003 b934 	b.w	8085d6e <_ZN8SPIClass8transferEh>
	...

08082b08 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8082b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082b0a:	4b07      	ldr	r3, [pc, #28]	; (8082b28 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082b0c:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082b0e:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082b10:	4c06      	ldr	r4, [pc, #24]	; (8082b2c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082b12:	4613      	mov	r3, r2
 8082b14:	6800      	ldr	r0, [r0, #0]
 8082b16:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082b18:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082b1a:	f003 f92e 	bl	8085d7a <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8082b1e:	7823      	ldrb	r3, [r4, #0]
 8082b20:	2b00      	cmp	r3, #0
 8082b22:	d0fc      	beq.n	8082b1e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8082b24:	b003      	add	sp, #12
 8082b26:	bd30      	pop	{r4, r5, pc}
 8082b28:	08082a91 	.word	0x08082a91
 8082b2c:	2000074c 	.word	0x2000074c

08082b30 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 8082b30:	f002 bb76 	b.w	8085220 <HAL_Pin_Map>

08082b34 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 8082b34:	f002 bb74 	b.w	8085220 <HAL_Pin_Map>

08082b38 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 8082b38:	7501      	strb	r1, [r0, #20]
 8082b3a:	4770      	bx	lr

08082b3c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 8082b3c:	b538      	push	{r3, r4, r5, lr}
 8082b3e:	4b0b      	ldr	r3, [pc, #44]	; (8082b6c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8082b40:	6984      	ldr	r4, [r0, #24]
 8082b42:	4605      	mov	r5, r0
 8082b44:	6003      	str	r3, [r0, #0]
 8082b46:	b17c      	cbz	r4, 8082b68 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8082b48:	6863      	ldr	r3, [r4, #4]
 8082b4a:	3b01      	subs	r3, #1
 8082b4c:	6063      	str	r3, [r4, #4]
 8082b4e:	b95b      	cbnz	r3, 8082b68 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8082b50:	6823      	ldr	r3, [r4, #0]
 8082b52:	4620      	mov	r0, r4
 8082b54:	689b      	ldr	r3, [r3, #8]
 8082b56:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082b58:	68a3      	ldr	r3, [r4, #8]
 8082b5a:	3b01      	subs	r3, #1
 8082b5c:	60a3      	str	r3, [r4, #8]
 8082b5e:	b91b      	cbnz	r3, 8082b68 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8082b60:	6823      	ldr	r3, [r4, #0]
 8082b62:	4620      	mov	r0, r4
 8082b64:	68db      	ldr	r3, [r3, #12]
 8082b66:	4798      	blx	r3
 8082b68:	4628      	mov	r0, r5
 8082b6a:	bd38      	pop	{r3, r4, r5, pc}
 8082b6c:	0808d918 	.word	0x0808d918

08082b70 <_ZN9TCPClientD0Ev>:
 8082b70:	b510      	push	{r4, lr}
 8082b72:	4604      	mov	r4, r0
 8082b74:	f7ff ffe2 	bl	8082b3c <_ZN9TCPClientD1Ev>
 8082b78:	4620      	mov	r0, r4
 8082b7a:	211c      	movs	r1, #28
 8082b7c:	f005 fc46 	bl	808840c <_ZdlPvj>
 8082b80:	4620      	mov	r0, r4
 8082b82:	bd10      	pop	{r4, pc}

08082b84 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
 8082b84:	b530      	push	{r4, r5, lr}
               const char* token) {
 8082b86:	4d06      	ldr	r5, [pc, #24]	; (8082ba0 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
  _host = host;
  _user_agent = user_agent;
 8082b88:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
 8082b8a:	6005      	str	r5, [r0, #0]
 8082b8c:	2500      	movs	r5, #0
 8082b8e:	7505      	strb	r5, [r0, #20]
 8082b90:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 8082b94:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
 8082b96:	6185      	str	r5, [r0, #24]
  _host = host;
 8082b98:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8082b9a:	60c3      	str	r3, [r0, #12]
  _port = port;
 8082b9c:	6102      	str	r2, [r0, #16]
}
 8082b9e:	bd30      	pop	{r4, r5, pc}
 8082ba0:	0808d1f4 	.word	0x0808d1f4

08082ba4 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
 8082ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082ba8:	460d      	mov	r5, r1
 8082baa:	4617      	mov	r7, r2
 8082bac:	4606      	mov	r6, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
 8082bae:	f004 fe2b 	bl	8087808 <_Z16_fetch_usbserialv>
 8082bb2:	491c      	ldr	r1, [pc, #112]	; (8082c24 <_ZN6UbiTCP9reconnectEPKci+0x80>)
 8082bb4:	f003 fcfb 	bl	80865ae <_ZN5Print7printlnEPKc>
 8082bb8:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8082bba:	481b      	ldr	r0, [pc, #108]	; (8082c28 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8082bbc:	f003 fae2 	bl	8086184 <_ZN9TCPClient6statusEv>
 8082bc0:	bb68      	cbnz	r0, 8082c1e <_ZN6UbiTCP9reconnectEPKci+0x7a>
 8082bc2:	2c05      	cmp	r4, #5
 8082bc4:	d101      	bne.n	8082bca <_ZN6UbiTCP9reconnectEPKci+0x26>
 8082bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
 8082bca:	7d33      	ldrb	r3, [r6, #20]
 8082bcc:	b1c3      	cbz	r3, 8082c00 <_ZN6UbiTCP9reconnectEPKci+0x5c>
      Serial.print("Trying to connect to ");
 8082bce:	f004 fe1b 	bl	8087808 <_Z16_fetch_usbserialv>
 8082bd2:	4916      	ldr	r1, [pc, #88]	; (8082c2c <_ZN6UbiTCP9reconnectEPKci+0x88>)
 8082bd4:	f003 fcd4 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(host);
 8082bd8:	f004 fe16 	bl	8087808 <_Z16_fetch_usbserialv>
 8082bdc:	4629      	mov	r1, r5
 8082bde:	f003 fccf 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 8082be2:	f004 fe11 	bl	8087808 <_Z16_fetch_usbserialv>
 8082be6:	4912      	ldr	r1, [pc, #72]	; (8082c30 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
 8082be8:	f003 fcca 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 8082bec:	f004 fe0c 	bl	8087808 <_Z16_fetch_usbserialv>
 8082bf0:	4680      	mov	r8, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8082bf2:	220a      	movs	r2, #10
 8082bf4:	4621      	mov	r1, r4
 8082bf6:	f003 fce4 	bl	80865c2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8082bfa:	4640      	mov	r0, r8
 8082bfc:	f003 fccb 	bl	8086596 <_ZN5Print7printlnEv>
    }
    _client_tcp_ubi.stop();
 8082c00:	4809      	ldr	r0, [pc, #36]	; (8082c28 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8082c02:	f003 fa3d 	bl	8086080 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
 8082c06:	2300      	movs	r3, #0
 8082c08:	b2ba      	uxth	r2, r7
 8082c0a:	4629      	mov	r1, r5
 8082c0c:	4806      	ldr	r0, [pc, #24]	; (8082c28 <_ZN6UbiTCP9reconnectEPKci+0x84>)
 8082c0e:	f003 fb81 	bl	8086314 <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
 8082c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082c16:	f003 fe4f 	bl	80868b8 <delay>
 8082c1a:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8082c1c:	e7cd      	b.n	8082bba <_ZN6UbiTCP9reconnectEPKci+0x16>
 8082c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082c22:	bf00      	nop
 8082c24:	0808d0e9 	.word	0x0808d0e9
 8082c28:	20000750 	.word	0x20000750
 8082c2c:	0808d101 	.word	0x0808d101
 8082c30:	0808d117 	.word	0x0808d117

08082c34 <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
 8082c34:	b570      	push	{r4, r5, r6, lr}
 8082c36:	4605      	mov	r5, r0
  int timeout = 0;
 8082c38:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
 8082c3a:	480d      	ldr	r0, [pc, #52]	; (8082c70 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
 8082c3c:	f003 f9e4 	bl	8086008 <_ZN9TCPClient9availableEv>
 8082c40:	4606      	mov	r6, r0
 8082c42:	b910      	cbnz	r0, 8082c4a <_ZN6UbiTCP16waitServerAnswerEv+0x16>
 8082c44:	69ab      	ldr	r3, [r5, #24]
 8082c46:	429c      	cmp	r4, r3
 8082c48:	db01      	blt.n	8082c4e <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
 8082c4a:	2001      	movs	r0, #1
 8082c4c:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
 8082c4e:	2001      	movs	r0, #1
 8082c50:	f003 fe32 	bl	80868b8 <delay>
    if (timeout > _timeout - 1) {
 8082c54:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
 8082c56:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
 8082c58:	429c      	cmp	r4, r3
 8082c5a:	dbee      	blt.n	8082c3a <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
 8082c5c:	7d28      	ldrb	r0, [r5, #20]
 8082c5e:	b130      	cbz	r0, 8082c6e <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
 8082c60:	f004 fdd2 	bl	8087808 <_Z16_fetch_usbserialv>
 8082c64:	4903      	ldr	r1, [pc, #12]	; (8082c74 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
 8082c66:	f003 fca2 	bl	80865ae <_ZN5Print7printlnEPKc>
 8082c6a:	4630      	mov	r0, r6
 8082c6c:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
 8082c6e:	bd70      	pop	{r4, r5, r6, pc}
 8082c70:	20000750 	.word	0x20000750
 8082c74:	0808d12b 	.word	0x0808d12b

08082c78 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8082c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
 8082c7c:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8082c7e:	4606      	mov	r6, r0
 8082c80:	4688      	mov	r8, r1
 8082c82:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
 8082c84:	b14b      	cbz	r3, 8082c9a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
 8082c86:	f004 fdbf 	bl	8087808 <_Z16_fetch_usbserialv>
 8082c8a:	4921      	ldr	r1, [pc, #132]	; (8082d10 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x98>)
 8082c8c:	f003 fc8f 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8082c90:	f004 fdba 	bl	8087808 <_Z16_fetch_usbserialv>
 8082c94:	491f      	ldr	r1, [pc, #124]	; (8082d14 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x9c>)
 8082c96:	f003 fc8a 	bl	80865ae <_ZN5Print7printlnEPKc>
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
 8082c9a:	f240 29bb 	movw	r9, #699	; 0x2bb
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8082c9e:	2400      	movs	r4, #0
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
 8082ca0:	481d      	ldr	r0, [pc, #116]	; (8082d18 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8082ca2:	f003 f9b1 	bl	8086008 <_ZN9TCPClient9availableEv>
 8082ca6:	b178      	cbz	r0, 8082cc8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
 8082ca8:	481b      	ldr	r0, [pc, #108]	; (8082d18 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8082caa:	f003 f962 	bl	8085f72 <_ZN9TCPClient4readEv>
    if (_debug) {
 8082cae:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
 8082cb0:	b2c7      	uxtb	r7, r0
    if (_debug) {
 8082cb2:	b12b      	cbz	r3, 8082cc0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
 8082cb4:	f004 fda8 	bl	8087808 <_Z16_fetch_usbserialv>
 8082cb8:	6803      	ldr	r3, [r0, #0]
 8082cba:	4639      	mov	r1, r7
 8082cbc:	689b      	ldr	r3, [r3, #8]
 8082cbe:	4798      	blx	r3
    }
    response[j] = c;
 8082cc0:	552f      	strb	r7, [r5, r4]
    j++;
 8082cc2:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
 8082cc4:	454c      	cmp	r4, r9
 8082cc6:	d1eb      	bne.n	8082ca0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
 8082cc8:	7d33      	ldrb	r3, [r6, #20]
 8082cca:	b123      	cbz	r3, 8082cd6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
 8082ccc:	f004 fd9c 	bl	8087808 <_Z16_fetch_usbserialv>
 8082cd0:	4912      	ldr	r1, [pc, #72]	; (8082d1c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>)
 8082cd2:	f003 fc6c 	bl	80865ae <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
 8082cd6:	2300      	movs	r3, #0
 8082cd8:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
 8082cda:	4b11      	ldr	r3, [pc, #68]	; (8082d20 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa8>)
 8082cdc:	4598      	cmp	r8, r3
 8082cde:	d108      	bne.n	8082cf2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7a>
    char* pch = strstr(response, "OK");
 8082ce0:	4910      	ldr	r1, [pc, #64]	; (8082d24 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
 8082ce2:	4628      	mov	r0, r5
 8082ce4:	f007 fe80 	bl	808a9e8 <strstr>
    if (pch != NULL) {
 8082ce8:	b178      	cbz	r0, 8082d0a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
      result = 1;
 8082cea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8082cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
 8082cf2:	217c      	movs	r1, #124	; 0x7c
 8082cf4:	4628      	mov	r0, r5
 8082cf6:	f007 f8f7 	bl	8089ee8 <strchr>
  if (pch != NULL) {
 8082cfa:	b130      	cbz	r0, 8082d0a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x92>
    result = atof(pch + 1);
 8082cfc:	3001      	adds	r0, #1
 8082cfe:	f006 ff9b 	bl	8089c38 <atof>
 8082d02:	f006 fa35 	bl	8089170 <__aeabi_d2f>
 8082d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
 8082d0a:	4807      	ldr	r0, [pc, #28]	; (8082d28 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
 8082d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8082d10:	0808d172 	.word	0x0808d172
 8082d14:	0808d15e 	.word	0x0808d15e
 8082d18:	20000750 	.word	0x20000750
 8082d1c:	0808d171 	.word	0x0808d171
 8082d20:	0808d17d 	.word	0x0808d17d
 8082d24:	0808d182 	.word	0x0808d182
 8082d28:	cda2425f 	.word	0xcda2425f

08082d2c <_ZN6UbiTCP3getEPKcS1_>:

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
 8082d2c:	b570      	push	{r4, r5, r6, lr}
 8082d2e:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8082d30:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
 8082d32:	460e      	mov	r6, r1
 8082d34:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8082d36:	6841      	ldr	r1, [r0, #4]
 8082d38:	f242 3234 	movw	r2, #9012	; 0x2334
 8082d3c:	4845      	ldr	r0, [pc, #276]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d3e:	f003 fae9 	bl	8086314 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 8082d42:	4620      	mov	r0, r4
 8082d44:	f242 3234 	movw	r2, #9012	; 0x2334
 8082d48:	6861      	ldr	r1, [r4, #4]
 8082d4a:	f7ff ff2b 	bl	8082ba4 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
 8082d4e:	4841      	ldr	r0, [pc, #260]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d50:	f003 fa4f 	bl	80861f2 <_ZN9TCPClient9connectedEv>
 8082d54:	2800      	cmp	r0, #0
 8082d56:	d074      	beq.n	8082e42 <_ZN6UbiTCP3getEPKcS1_+0x116>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
 8082d58:	68a1      	ldr	r1, [r4, #8]
 8082d5a:	483e      	ldr	r0, [pc, #248]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d5c:	f003 fc10 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
 8082d60:	493d      	ldr	r1, [pc, #244]	; (8082e58 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8082d62:	483c      	ldr	r0, [pc, #240]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d64:	f003 fc0c 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
 8082d68:	68e1      	ldr	r1, [r4, #12]
 8082d6a:	483a      	ldr	r0, [pc, #232]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d6c:	f003 fc08 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
 8082d70:	493a      	ldr	r1, [pc, #232]	; (8082e5c <_ZN6UbiTCP3getEPKcS1_+0x130>)
 8082d72:	4838      	ldr	r0, [pc, #224]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d74:	f003 fc04 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
 8082d78:	4631      	mov	r1, r6
 8082d7a:	4836      	ldr	r0, [pc, #216]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d7c:	f003 fc00 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
 8082d80:	4937      	ldr	r1, [pc, #220]	; (8082e60 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8082d82:	4834      	ldr	r0, [pc, #208]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d84:	f003 fbfc 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
 8082d88:	4629      	mov	r1, r5
 8082d8a:	4832      	ldr	r0, [pc, #200]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d8c:	f003 fbf8 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
 8082d90:	4934      	ldr	r1, [pc, #208]	; (8082e64 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8082d92:	4830      	ldr	r0, [pc, #192]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082d94:	f003 fbf4 	bl	8086580 <_ZN5Print5printEPKc>

    if (_debug) {
 8082d98:	7d23      	ldrb	r3, [r4, #20]
 8082d9a:	b3b3      	cbz	r3, 8082e0a <_ZN6UbiTCP3getEPKcS1_+0xde>
      Serial.println("----");
 8082d9c:	f004 fd34 	bl	8087808 <_Z16_fetch_usbserialv>
 8082da0:	4931      	ldr	r1, [pc, #196]	; (8082e68 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
 8082da2:	f003 fc04 	bl	80865ae <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
 8082da6:	f004 fd2f 	bl	8087808 <_Z16_fetch_usbserialv>
 8082daa:	4930      	ldr	r1, [pc, #192]	; (8082e6c <_ZN6UbiTCP3getEPKcS1_+0x140>)
 8082dac:	f003 fbff 	bl	80865ae <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
 8082db0:	f004 fd2a 	bl	8087808 <_Z16_fetch_usbserialv>
 8082db4:	68a1      	ldr	r1, [r4, #8]
 8082db6:	f003 fbe3 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
 8082dba:	f004 fd25 	bl	8087808 <_Z16_fetch_usbserialv>
 8082dbe:	4926      	ldr	r1, [pc, #152]	; (8082e58 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8082dc0:	f003 fbde 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8082dc4:	f004 fd20 	bl	8087808 <_Z16_fetch_usbserialv>
 8082dc8:	68e1      	ldr	r1, [r4, #12]
 8082dca:	f003 fbd9 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("|");
 8082dce:	f004 fd1b 	bl	8087808 <_Z16_fetch_usbserialv>
 8082dd2:	4922      	ldr	r1, [pc, #136]	; (8082e5c <_ZN6UbiTCP3getEPKcS1_+0x130>)
 8082dd4:	f003 fbd4 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8082dd8:	f004 fd16 	bl	8087808 <_Z16_fetch_usbserialv>
 8082ddc:	4631      	mov	r1, r6
 8082dde:	f003 fbcf 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(":");
 8082de2:	f004 fd11 	bl	8087808 <_Z16_fetch_usbserialv>
 8082de6:	491e      	ldr	r1, [pc, #120]	; (8082e60 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8082de8:	f003 fbca 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 8082dec:	f004 fd0c 	bl	8087808 <_Z16_fetch_usbserialv>
 8082df0:	4629      	mov	r1, r5
 8082df2:	f003 fbc5 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("|end");
 8082df6:	f004 fd07 	bl	8087808 <_Z16_fetch_usbserialv>
 8082dfa:	491a      	ldr	r1, [pc, #104]	; (8082e64 <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8082dfc:	f003 fbc0 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.println("\n----");
 8082e00:	f004 fd02 	bl	8087808 <_Z16_fetch_usbserialv>
 8082e04:	491a      	ldr	r1, [pc, #104]	; (8082e70 <_ZN6UbiTCP3getEPKcS1_+0x144>)
 8082e06:	f003 fbd2 	bl	80865ae <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
 8082e0a:	4620      	mov	r0, r4
 8082e0c:	f7ff ff12 	bl	8082c34 <_ZN6UbiTCP16waitServerAnswerEv>
 8082e10:	b920      	cbnz	r0, 8082e1c <_ZN6UbiTCP3getEPKcS1_+0xf0>
      _client_tcp_ubi.stop();
 8082e12:	4810      	ldr	r0, [pc, #64]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082e14:	f003 f934 	bl	8086080 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 8082e18:	4816      	ldr	r0, [pc, #88]	; (8082e74 <_ZN6UbiTCP3getEPKcS1_+0x148>)
 8082e1a:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8082e1c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8082e20:	f002 fd42 	bl	80858a8 <malloc>
    float value = parseTCPAnswer("LV", response);
 8082e24:	4914      	ldr	r1, [pc, #80]	; (8082e78 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
 8082e26:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8082e28:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
 8082e2a:	4620      	mov	r0, r4
 8082e2c:	f7ff ff24 	bl	8082c78 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8082e30:	4604      	mov	r4, r0
    _client_tcp_ubi.stop();
 8082e32:	4808      	ldr	r0, [pc, #32]	; (8082e54 <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8082e34:	f003 f924 	bl	8086080 <_ZN9TCPClient4stopEv>
    free(response);
 8082e38:	4628      	mov	r0, r5
 8082e3a:	f002 fd3d 	bl	80858b8 <free>
    return value;
 8082e3e:	4620      	mov	r0, r4
 8082e40:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (_debug) {
 8082e42:	7d23      	ldrb	r3, [r4, #20]
 8082e44:	2b00      	cmp	r3, #0
 8082e46:	d0e4      	beq.n	8082e12 <_ZN6UbiTCP3getEPKcS1_+0xe6>
    Serial.println("ERROR could not connect to the server");
 8082e48:	f004 fcde 	bl	8087808 <_Z16_fetch_usbserialv>
 8082e4c:	490b      	ldr	r1, [pc, #44]	; (8082e7c <_ZN6UbiTCP3getEPKcS1_+0x150>)
 8082e4e:	f003 fbae 	bl	80865ae <_ZN5Print7printlnEPKc>
 8082e52:	e7de      	b.n	8082e12 <_ZN6UbiTCP3getEPKcS1_+0xe6>
 8082e54:	20000750 	.word	0x20000750
 8082e58:	0808d185 	.word	0x0808d185
 8082e5c:	0808d188 	.word	0x0808d188
 8082e60:	0808d2e0 	.word	0x0808d2e0
 8082e64:	0808d31e 	.word	0x0808d31e
 8082e68:	0808d1a0 	.word	0x0808d1a0
 8082e6c:	0808d18a 	.word	0x0808d18a
 8082e70:	0808d19f 	.word	0x0808d19f
 8082e74:	cda2425f 	.word	0xcda2425f
 8082e78:	0808d1a5 	.word	0x0808d1a5
 8082e7c:	0808d1a8 	.word	0x0808d1a8

08082e80 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
 8082e80:	b570      	push	{r4, r5, r6, lr}
 8082e82:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8082e84:	6841      	ldr	r1, [r0, #4]
 8082e86:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
 8082e8a:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8082e8c:	481e      	ldr	r0, [pc, #120]	; (8082f08 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8082e8e:	2300      	movs	r3, #0
 8082e90:	f003 fa40 	bl	8086314 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 8082e94:	4620      	mov	r0, r4
 8082e96:	f242 3234 	movw	r2, #9012	; 0x2334
 8082e9a:	6861      	ldr	r1, [r4, #4]
 8082e9c:	f7ff fe82 	bl	8082ba4 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
 8082ea0:	4819      	ldr	r0, [pc, #100]	; (8082f08 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8082ea2:	f003 f9a6 	bl	80861f2 <_ZN9TCPClient9connectedEv>
 8082ea6:	b320      	cbz	r0, 8082ef2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x72>
    _client_tcp_ubi.print(payload);
 8082ea8:	4629      	mov	r1, r5
 8082eaa:	4817      	ldr	r0, [pc, #92]	; (8082f08 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8082eac:	f003 fb68 	bl	8086580 <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
 8082eb0:	4620      	mov	r0, r4
 8082eb2:	f7ff febf 	bl	8082c34 <_ZN6UbiTCP16waitServerAnswerEv>
 8082eb6:	4605      	mov	r5, r0
 8082eb8:	b920      	cbnz	r0, 8082ec4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x44>
    _client_tcp_ubi.stop();
 8082eba:	4813      	ldr	r0, [pc, #76]	; (8082f08 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8082ebc:	f003 f8e0 	bl	8086080 <_ZN9TCPClient4stopEv>
    return false;
 8082ec0:	2500      	movs	r5, #0
 8082ec2:	e01f      	b.n	8082f04 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
 8082ec4:	2064      	movs	r0, #100	; 0x64
 8082ec6:	f002 fcef 	bl	80858a8 <malloc>

  float value = parseTCPAnswer("POST", response);
 8082eca:	4910      	ldr	r1, [pc, #64]	; (8082f0c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>)
 8082ecc:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
 8082ece:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
 8082ed0:	4620      	mov	r0, r4
 8082ed2:	f7ff fed1 	bl	8082c78 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8082ed6:	4604      	mov	r4, r0
  free(response);
 8082ed8:	4630      	mov	r0, r6
 8082eda:	f002 fced 	bl	80858b8 <free>
  if (value != ERROR_VALUE) {
 8082ede:	490c      	ldr	r1, [pc, #48]	; (8082f10 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x90>)
 8082ee0:	4620      	mov	r0, r4
 8082ee2:	f006 fc37 	bl	8089754 <__aeabi_fcmpeq>
 8082ee6:	2800      	cmp	r0, #0
 8082ee8:	d1e7      	bne.n	8082eba <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    _client_tcp_ubi.stop();
 8082eea:	4807      	ldr	r0, [pc, #28]	; (8082f08 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8082eec:	f003 f8c8 	bl	8086080 <_ZN9TCPClient4stopEv>
 8082ef0:	e008      	b.n	8082f04 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x84>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
 8082ef2:	7d23      	ldrb	r3, [r4, #20]
 8082ef4:	2b00      	cmp	r3, #0
 8082ef6:	d0e0      	beq.n	8082eba <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
      Serial.println("Could not connect to the host");
 8082ef8:	f004 fc86 	bl	8087808 <_Z16_fetch_usbserialv>
 8082efc:	4905      	ldr	r1, [pc, #20]	; (8082f14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
 8082efe:	f003 fb56 	bl	80865ae <_ZN5Print7printlnEPKc>
 8082f02:	e7da      	b.n	8082eba <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
 8082f04:	4628      	mov	r0, r5
 8082f06:	bd70      	pop	{r4, r5, r6, pc}
 8082f08:	20000750 	.word	0x20000750
 8082f0c:	0808d17d 	.word	0x0808d17d
 8082f10:	cda2425f 	.word	0xcda2425f
 8082f14:	0808d1ce 	.word	0x0808d1ce

08082f18 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 8082f18:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
 8082f1a:	4c06      	ldr	r4, [pc, #24]	; (8082f34 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
 8082f1c:	f002 f980 	bl	8085220 <HAL_Pin_Map>
 8082f20:	4620      	mov	r0, r4
 8082f22:	f003 f9d5 	bl	80862d0 <_ZN9TCPClientC1Ev>
 8082f26:	4620      	mov	r0, r4
 8082f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082f2c:	4a02      	ldr	r2, [pc, #8]	; (8082f38 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
 8082f2e:	4903      	ldr	r1, [pc, #12]	; (8082f3c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
 8082f30:	f005 ba5e 	b.w	80883f0 <__aeabi_atexit>
 8082f34:	20000750 	.word	0x20000750
 8082f38:	20000140 	.word	0x20000140
 8082f3c:	08082b3d 	.word	0x08082b3d

08082f40 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
 8082f40:	b510      	push	{r4, lr}
 8082f42:	4604      	mov	r4, r0
  delete[] _default_device_label;
 8082f44:	6800      	ldr	r0, [r0, #0]
 8082f46:	b108      	cbz	r0, 8082f4c <_ZN18UbiProtocolHandlerD1Ev+0xc>
 8082f48:	f7fd f8af 	bl	80800aa <_ZdaPv>

  free(_dots);
 8082f4c:	68e0      	ldr	r0, [r4, #12]
 8082f4e:	f002 fcb3 	bl	80858b8 <free>
  delete _ubiProtocol;
 8082f52:	6860      	ldr	r0, [r4, #4]
 8082f54:	2104      	movs	r1, #4
 8082f56:	f005 fa59 	bl	808840c <_ZdlPvj>
}
 8082f5a:	4620      	mov	r0, r4
 8082f5c:	bd10      	pop	{r4, pc}
	...

08082f60 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
 8082f60:	b570      	push	{r4, r5, r6, lr}
 8082f62:	4604      	mov	r4, r0
  _dirty = true;
 8082f64:	2001      	movs	r0, #1
  (_dots + _current_value)->variable_label = variable_label;
 8082f66:	f994 5010 	ldrsb.w	r5, [r4, #16]
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
  _dirty = true;
 8082f6a:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
 8082f6c:	2014      	movs	r0, #20
 8082f6e:	4345      	muls	r5, r0
 8082f70:	68e6      	ldr	r6, [r4, #12]
 8082f72:	5171      	str	r1, [r6, r5]
  (_dots + _current_value)->dot_value = value;
 8082f74:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8082f78:	68e5      	ldr	r5, [r4, #12]
 8082f7a:	fb00 5101 	mla	r1, r0, r1, r5
 8082f7e:	608a      	str	r2, [r1, #8]
  (_dots + _current_value)->dot_context = context;
 8082f80:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8082f84:	68e1      	ldr	r1, [r4, #12]
 8082f86:	fb00 1202 	mla	r2, r0, r2, r1
 8082f8a:	6053      	str	r3, [r2, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
 8082f8c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8082f90:	68e2      	ldr	r2, [r4, #12]
 8082f92:	fb00 2303 	mla	r3, r0, r3, r2
 8082f96:	9a04      	ldr	r2, [sp, #16]
 8082f98:	60da      	str	r2, [r3, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
 8082f9a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8082f9e:	68e2      	ldr	r2, [r4, #12]
 8082fa0:	fb00 2003 	mla	r0, r0, r3, r2
 8082fa4:	9b05      	ldr	r3, [sp, #20]
 8082fa6:	6103      	str	r3, [r0, #16]
  _current_value++;
 8082fa8:	7c23      	ldrb	r3, [r4, #16]
 8082faa:	3301      	adds	r3, #1
 8082fac:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
 8082fae:	2b0f      	cmp	r3, #15
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
 8082fb0:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
 8082fb2:	dd08      	ble.n	8082fc6 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x66>
    if (_debug) {
 8082fb4:	7ca3      	ldrb	r3, [r4, #18]
 8082fb6:	b123      	cbz	r3, 8082fc2 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x62>
      Serial.println(
 8082fb8:	f004 fc26 	bl	8087808 <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
 8082fbc:	4902      	ldr	r1, [pc, #8]	; (8082fc8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x68>)
 8082fbe:	f003 faf6 	bl	80865ae <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
 8082fc2:	230f      	movs	r3, #15
 8082fc4:	7423      	strb	r3, [r4, #16]
 8082fc6:	bd70      	pop	{r4, r5, r6, pc}
 8082fc8:	0808d200 	.word	0x0808d200

08082fcc <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 8082fcc:	b530      	push	{r4, r5, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 8082fce:	4610      	mov	r0, r2
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 8082fd0:	b087      	sub	sp, #28
 8082fd2:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 8082fd4:	f005 fd96 	bl	8088b04 <__aeabi_f2d>
 8082fd8:	ad01      	add	r5, sp, #4
 8082fda:	4602      	mov	r2, r0
 8082fdc:	460b      	mov	r3, r1
 8082fde:	4628      	mov	r0, r5
 8082fe0:	4909      	ldr	r1, [pc, #36]	; (8083008 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x3c>)
 8082fe2:	f002 fc79 	bl	80858d8 <sprintf>
 8082fe6:	2200      	movs	r2, #0
  uint8_t j = 0;
  uint8_t k = 0;
 8082fe8:	4613      	mov	r3, r2
  while (j < 20) {
    if (temp_arr[j] != ' ') {
 8082fea:	5ca9      	ldrb	r1, [r5, r2]
 8082fec:	2920      	cmp	r1, #32
 8082fee:	d005      	beq.n	8082ffc <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
      str_value[k] = temp_arr[j];
 8082ff0:	54e1      	strb	r1, [r4, r3]
      k++;
 8082ff2:	3301      	adds	r3, #1
 8082ff4:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
 8082ff6:	b909      	cbnz	r1, 8082ffc <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
      str_value[k] = temp_arr[j];
 8082ff8:	54e1      	strb	r1, [r4, r3]
      break;
 8082ffa:	e002      	b.n	8083002 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
 8082ffc:	3201      	adds	r2, #1
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
 8082ffe:	2a14      	cmp	r2, #20
 8083000:	d1f3      	bne.n	8082fea <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x1e>
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
 8083002:	b007      	add	sp, #28
 8083004:	bd30      	pop	{r4, r5, pc}
 8083006:	bf00      	nop
 8083008:	0808d283 	.word	0x0808d283

0808300c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
 * @payload [Mandatory] char payload pointer to store the built structure.
 * @timestamp_global [Optional] If set, it will be used for any dot without
 * timestamp.
 */

void UbiProtocolHandler::buildHttpPayload(char* payload) {
 808300c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083010:	460c      	mov	r4, r1
 8083012:	b088      	sub	sp, #32
 8083014:	4605      	mov	r5, r0
  /* Builds the payload */
  sprintf(payload, "{");
 8083016:	4947      	ldr	r1, [pc, #284]	; (8083134 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x128>)
 8083018:	4620      	mov	r0, r4
 808301a:	f006 ff7d 	bl	8089f18 <strcpy>

  for (uint8_t i = 0; i < _current_value;) {
 808301e:	2700      	movs	r7, #0
 8083020:	f995 3010 	ldrsb.w	r3, [r5, #16]
 8083024:	429f      	cmp	r7, r3
 8083026:	da66      	bge.n	80830f6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xea>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
 8083028:	2614      	movs	r6, #20
 808302a:	437e      	muls	r6, r7
 808302c:	68eb      	ldr	r3, [r5, #12]
 808302e:	f10d 080c 	add.w	r8, sp, #12
 8083032:	4433      	add	r3, r6
 8083034:	689a      	ldr	r2, [r3, #8]
 8083036:	4641      	mov	r1, r8
 8083038:	4628      	mov	r0, r5
 808303a:	f7ff ffc7 	bl	8082fcc <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
 808303e:	68eb      	ldr	r3, [r5, #12]
            (_dots + i)->variable_label, str_value);
 8083040:	f8cd 8000 	str.w	r8, [sp]
 8083044:	599b      	ldr	r3, [r3, r6]
 8083046:	4622      	mov	r2, r4
 8083048:	493b      	ldr	r1, [pc, #236]	; (8083138 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x12c>)
 808304a:	4620      	mov	r0, r4
 808304c:	f002 fc44 	bl	80858d8 <sprintf>

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 8083050:	68eb      	ldr	r3, [r5, #12]
 8083052:	4433      	add	r3, r6
 8083054:	68db      	ldr	r3, [r3, #12]
 8083056:	b36b      	cbz	r3, 80830b4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa8>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
              (_dots + i)->dot_timestamp_seconds);
 8083058:	4622      	mov	r2, r4
 808305a:	4938      	ldr	r1, [pc, #224]	; (808313c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x130>)
 808305c:	4620      	mov	r0, r4
 808305e:	f002 fc3b 	bl	80858d8 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 8083062:	68eb      	ldr	r3, [r5, #12]
 8083064:	4433      	add	r3, r6
 8083066:	691b      	ldr	r3, [r3, #16]
 8083068:	b1fb      	cbz	r3, 80830aa <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x9e>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 808306a:	200a      	movs	r0, #10
 808306c:	fb93 f1f0 	sdiv	r1, r3, r0
 8083070:	2264      	movs	r2, #100	; 0x64
 8083072:	fb93 f2f2 	sdiv	r2, r3, r2
 8083076:	fb91 fcf0 	sdiv	ip, r1, r0
 808307a:	fb92 fef0 	sdiv	lr, r2, r0
 808307e:	fb00 1c1c 	mls	ip, r0, ip, r1
 8083082:	fb00 3111 	mls	r1, r0, r1, r3
 8083086:	fb00 221e 	mls	r2, r0, lr, r2
 808308a:	b2c9      	uxtb	r1, r1
 808308c:	9100      	str	r1, [sp, #0]
 808308e:	fa5f f38c 	uxtb.w	r3, ip
 8083092:	b2d2      	uxtb	r2, r2
 8083094:	492a      	ldr	r1, [pc, #168]	; (8083140 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
 8083096:	a802      	add	r0, sp, #8
 8083098:	f002 fc1e 	bl	80858d8 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 808309c:	ab02      	add	r3, sp, #8
 808309e:	4622      	mov	r2, r4
 80830a0:	4928      	ldr	r1, [pc, #160]	; (8083144 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
 80830a2:	4620      	mov	r0, r4
 80830a4:	f002 fc18 	bl	80858d8 <sprintf>
 80830a8:	e004      	b.n	80830b4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa8>
      } else {
        sprintf(payload, "%s000", payload);
 80830aa:	4622      	mov	r2, r4
 80830ac:	4926      	ldr	r1, [pc, #152]	; (8083148 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
 80830ae:	4620      	mov	r0, r4
 80830b0:	f002 fc12 	bl	80858d8 <sprintf>
      }
    }

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
 80830b4:	68eb      	ldr	r3, [r5, #12]
 80830b6:	441e      	add	r6, r3
 80830b8:	6873      	ldr	r3, [r6, #4]
 80830ba:	b123      	cbz	r3, 80830c6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xba>
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
 80830bc:	4622      	mov	r2, r4
 80830be:	4923      	ldr	r1, [pc, #140]	; (808314c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
 80830c0:	4620      	mov	r0, r4
 80830c2:	f002 fc09 	bl	80858d8 <sprintf>
    }

    sprintf(payload, "%s}", payload);
 80830c6:	4622      	mov	r2, r4
 80830c8:	4921      	ldr	r1, [pc, #132]	; (8083150 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 80830ca:	4620      	mov	r0, r4
 80830cc:	f002 fc04 	bl	80858d8 <sprintf>
    i++;
 80830d0:	3701      	adds	r7, #1

    if (i < _current_value) {
 80830d2:	f995 3010 	ldrsb.w	r3, [r5, #16]
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
    }

    sprintf(payload, "%s}", payload);
    i++;
 80830d6:	b2ff      	uxtb	r7, r7

    if (i < _current_value) {
 80830d8:	429f      	cmp	r7, r3
      sprintf(payload, "%s,", payload);
 80830da:	4622      	mov	r2, r4
    }

    sprintf(payload, "%s}", payload);
    i++;

    if (i < _current_value) {
 80830dc:	da04      	bge.n	80830e8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xdc>
      sprintf(payload, "%s,", payload);
 80830de:	491d      	ldr	r1, [pc, #116]	; (8083154 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
 80830e0:	4620      	mov	r0, r4
 80830e2:	f002 fbf9 	bl	80858d8 <sprintf>
 80830e6:	e79b      	b.n	8083020 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
    } else {
      sprintf(payload, "%s}", payload);
 80830e8:	4919      	ldr	r1, [pc, #100]	; (8083150 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 80830ea:	4620      	mov	r0, r4
 80830ec:	f002 fbf4 	bl	80858d8 <sprintf>
      _current_value = 0;
 80830f0:	2300      	movs	r3, #0
 80830f2:	742b      	strb	r3, [r5, #16]

void UbiProtocolHandler::buildHttpPayload(char* payload) {
  /* Builds the payload */
  sprintf(payload, "{");

  for (uint8_t i = 0; i < _current_value;) {
 80830f4:	e794      	b.n	8083020 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
      sprintf(payload, "%s}", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
 80830f6:	7cab      	ldrb	r3, [r5, #18]
 80830f8:	b1c3      	cbz	r3, 808312c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x120>
    Serial.println("----------");
 80830fa:	f004 fb85 	bl	8087808 <_Z16_fetch_usbserialv>
 80830fe:	4916      	ldr	r1, [pc, #88]	; (8083158 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 8083100:	f003 fa55 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 8083104:	f004 fb80 	bl	8087808 <_Z16_fetch_usbserialv>
 8083108:	4914      	ldr	r1, [pc, #80]	; (808315c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
 808310a:	f003 fa50 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 808310e:	f004 fb7b 	bl	8087808 <_Z16_fetch_usbserialv>
 8083112:	4621      	mov	r1, r4
 8083114:	f003 fa4b 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 8083118:	f004 fb76 	bl	8087808 <_Z16_fetch_usbserialv>
 808311c:	490e      	ldr	r1, [pc, #56]	; (8083158 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 808311e:	f003 fa46 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("");
 8083122:	f004 fb71 	bl	8087808 <_Z16_fetch_usbserialv>
 8083126:	490e      	ldr	r1, [pc, #56]	; (8083160 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
 8083128:	f003 fa41 	bl	80865ae <_ZN5Print7printlnEPKc>
  }
}
 808312c:	b008      	add	sp, #32
 808312e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083132:	bf00      	nop
 8083134:	0808d288 	.word	0x0808d288
 8083138:	0808d28a 	.word	0x0808d28a
 808313c:	0808d29d 	.word	0x0808d29d
 8083140:	0808d2b0 	.word	0x0808d2b0
 8083144:	0808d2b7 	.word	0x0808d2b7
 8083148:	0808d2bc 	.word	0x0808d2bc
 808314c:	0808d2c2 	.word	0x0808d2c2
 8083150:	0808d2d1 	.word	0x0808d2d1
 8083154:	0808d2d5 	.word	0x0808d2d5
 8083158:	0808d172 	.word	0x0808d172
 808315c:	0808d2d9 	.word	0x0808d2d9
 8083160:	0808d6df 	.word	0x0808d6df

08083164 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
 8083164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083168:	460c      	mov	r4, r1
 808316a:	4605      	mov	r5, r0
 808316c:	461f      	mov	r7, r3
 808316e:	4616      	mov	r6, r2
 8083170:	b088      	sub	sp, #32
  sprintf(payload, "");
 8083172:	494d      	ldr	r1, [pc, #308]	; (80832a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>)
 8083174:	4620      	mov	r0, r4
 8083176:	f006 fecf 	bl	8089f18 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
 808317a:	68ab      	ldr	r3, [r5, #8]
 808317c:	4a4b      	ldr	r2, [pc, #300]	; (80832ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x148>)
 808317e:	494c      	ldr	r1, [pc, #304]	; (80832b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
 8083180:	4620      	mov	r0, r4
 8083182:	f002 fba9 	bl	80858d8 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
 8083186:	9700      	str	r7, [sp, #0]
 8083188:	4633      	mov	r3, r6
 808318a:	4622      	mov	r2, r4
 808318c:	4949      	ldr	r1, [pc, #292]	; (80832b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
 808318e:	4620      	mov	r0, r4
 8083190:	f002 fba2 	bl	80858d8 <sprintf>

  sprintf(payload, "%s=>", payload);
 8083194:	4622      	mov	r2, r4
 8083196:	4948      	ldr	r1, [pc, #288]	; (80832b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
 8083198:	4620      	mov	r0, r4
 808319a:	f002 fb9d 	bl	80858d8 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
 808319e:	2700      	movs	r7, #0
 80831a0:	f995 3010 	ldrsb.w	r3, [r5, #16]
 80831a4:	429f      	cmp	r7, r3
 80831a6:	da60      	bge.n	808326a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x106>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
 80831a8:	2614      	movs	r6, #20
 80831aa:	437e      	muls	r6, r7
 80831ac:	68eb      	ldr	r3, [r5, #12]
 80831ae:	f10d 080c 	add.w	r8, sp, #12
 80831b2:	4433      	add	r3, r6
 80831b4:	689a      	ldr	r2, [r3, #8]
 80831b6:	4641      	mov	r1, r8
 80831b8:	4628      	mov	r0, r5
 80831ba:	f7ff ff07 	bl	8082fcc <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
 80831be:	68eb      	ldr	r3, [r5, #12]
            str_value);
 80831c0:	f8cd 8000 	str.w	r8, [sp]
 80831c4:	599b      	ldr	r3, [r3, r6]
 80831c6:	4622      	mov	r2, r4
 80831c8:	493a      	ldr	r1, [pc, #232]	; (80832b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
 80831ca:	4620      	mov	r0, r4
 80831cc:	f002 fb84 	bl	80858d8 <sprintf>

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
 80831d0:	68eb      	ldr	r3, [r5, #12]
 80831d2:	4433      	add	r3, r6
 80831d4:	685b      	ldr	r3, [r3, #4]
 80831d6:	b123      	cbz	r3, 80831e2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x7e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
 80831d8:	4622      	mov	r2, r4
 80831da:	4938      	ldr	r1, [pc, #224]	; (80832bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
 80831dc:	4620      	mov	r0, r4
 80831de:	f002 fb7b 	bl	80858d8 <sprintf>
    }

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 80831e2:	68eb      	ldr	r3, [r5, #12]
 80831e4:	4433      	add	r3, r6
 80831e6:	68db      	ldr	r3, [r3, #12]
 80831e8:	b363      	cbz	r3, 8083244 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe0>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
 80831ea:	4622      	mov	r2, r4
 80831ec:	4934      	ldr	r1, [pc, #208]	; (80832c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
 80831ee:	4620      	mov	r0, r4
 80831f0:	f002 fb72 	bl	80858d8 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 80831f4:	68eb      	ldr	r3, [r5, #12]
 80831f6:	441e      	add	r6, r3
 80831f8:	6936      	ldr	r6, [r6, #16]
 80831fa:	b1f6      	cbz	r6, 808323a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xd6>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 80831fc:	200a      	movs	r0, #10
 80831fe:	fb96 f1f0 	sdiv	r1, r6, r0
 8083202:	2264      	movs	r2, #100	; 0x64
 8083204:	fb96 f2f2 	sdiv	r2, r6, r2
 8083208:	fb91 f3f0 	sdiv	r3, r1, r0
 808320c:	fb92 fef0 	sdiv	lr, r2, r0
 8083210:	fb00 1313 	mls	r3, r0, r3, r1
 8083214:	fb00 6111 	mls	r1, r0, r1, r6
 8083218:	fb00 221e 	mls	r2, r0, lr, r2
 808321c:	b2c9      	uxtb	r1, r1
 808321e:	9100      	str	r1, [sp, #0]
 8083220:	b2db      	uxtb	r3, r3
 8083222:	b2d2      	uxtb	r2, r2
 8083224:	4927      	ldr	r1, [pc, #156]	; (80832c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
 8083226:	a802      	add	r0, sp, #8
 8083228:	f002 fb56 	bl	80858d8 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 808322c:	ab02      	add	r3, sp, #8
 808322e:	4622      	mov	r2, r4
 8083230:	4925      	ldr	r1, [pc, #148]	; (80832c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
 8083232:	4620      	mov	r0, r4
 8083234:	f002 fb50 	bl	80858d8 <sprintf>
 8083238:	e004      	b.n	8083244 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe0>
      } else {
        sprintf(payload, "%s000", payload);
 808323a:	4622      	mov	r2, r4
 808323c:	4923      	ldr	r1, [pc, #140]	; (80832cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
 808323e:	4620      	mov	r0, r4
 8083240:	f002 fb4a 	bl	80858d8 <sprintf>
      }
    }

    i++;
 8083244:	3701      	adds	r7, #1

    if (i < _current_value) {
 8083246:	f995 3010 	ldrsb.w	r3, [r5, #16]
      } else {
        sprintf(payload, "%s000", payload);
      }
    }

    i++;
 808324a:	b2ff      	uxtb	r7, r7

    if (i < _current_value) {
 808324c:	429f      	cmp	r7, r3
      sprintf(payload, "%s,", payload);
 808324e:	4622      	mov	r2, r4
      }
    }

    i++;

    if (i < _current_value) {
 8083250:	da04      	bge.n	808325c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xf8>
      sprintf(payload, "%s,", payload);
 8083252:	491f      	ldr	r1, [pc, #124]	; (80832d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
 8083254:	4620      	mov	r0, r4
 8083256:	f002 fb3f 	bl	80858d8 <sprintf>
 808325a:	e7a1      	b.n	80831a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
    } else {
      sprintf(payload, "%s|end", payload);
 808325c:	491d      	ldr	r1, [pc, #116]	; (80832d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
 808325e:	4620      	mov	r0, r4
 8083260:	f002 fb3a 	bl	80858d8 <sprintf>
      _current_value = 0;
 8083264:	2300      	movs	r3, #0
 8083266:	742b      	strb	r3, [r5, #16]
  sprintf(payload, "");
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);

  sprintf(payload, "%s=>", payload);
  for (uint8_t i = 0; i < _current_value;) {
 8083268:	e79a      	b.n	80831a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
      sprintf(payload, "%s|end", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
 808326a:	7cab      	ldrb	r3, [r5, #18]
 808326c:	b1c3      	cbz	r3, 80832a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x13c>
    Serial.println("----------");
 808326e:	f004 facb 	bl	8087808 <_Z16_fetch_usbserialv>
 8083272:	4919      	ldr	r1, [pc, #100]	; (80832d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 8083274:	f003 f99b 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 8083278:	f004 fac6 	bl	8087808 <_Z16_fetch_usbserialv>
 808327c:	4917      	ldr	r1, [pc, #92]	; (80832dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
 808327e:	f003 f996 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 8083282:	f004 fac1 	bl	8087808 <_Z16_fetch_usbserialv>
 8083286:	4621      	mov	r1, r4
 8083288:	f003 f991 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 808328c:	f004 fabc 	bl	8087808 <_Z16_fetch_usbserialv>
 8083290:	4911      	ldr	r1, [pc, #68]	; (80832d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 8083292:	f003 f98c 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("");
 8083296:	f004 fab7 	bl	8087808 <_Z16_fetch_usbserialv>
 808329a:	4903      	ldr	r1, [pc, #12]	; (80832a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>)
 808329c:	f003 f987 	bl	80865ae <_ZN5Print7printlnEPKc>
  }
}
 80832a0:	b008      	add	sp, #32
 80832a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80832a6:	bf00      	nop
 80832a8:	0808d6df 	.word	0x0808d6df
 80832ac:	0808d2e2 	.word	0x0808d2e2
 80832b0:	0808d2f6 	.word	0x0808d2f6
 80832b4:	0808d302 	.word	0x0808d302
 80832b8:	0808d30a 	.word	0x0808d30a
 80832bc:	0808d30f 	.word	0x0808d30f
 80832c0:	0808d315 	.word	0x0808d315
 80832c4:	0808d2b0 	.word	0x0808d2b0
 80832c8:	0808d2b7 	.word	0x0808d2b7
 80832cc:	0808d2bc 	.word	0x0808d2bc
 80832d0:	0808d2d5 	.word	0x0808d2d5
 80832d4:	0808d31c 	.word	0x0808d31c
 80832d8:	0808d172 	.word	0x0808d172
 80832dc:	0808d2d9 	.word	0x0808d2d9

080832e0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
 80832e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80832e4:	4604      	mov	r4, r0
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80832e6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
 80832ea:	461f      	mov	r7, r3
 80832ec:	460e      	mov	r6, r1
 80832ee:	4690      	mov	r8, r2
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80832f0:	f002 fada 	bl	80858a8 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 80832f4:	7ce3      	ldrb	r3, [r4, #19]
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80832f6:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 80832f8:	3b01      	subs	r3, #1
 80832fa:	2b01      	cmp	r3, #1
 80832fc:	d806      	bhi.n	808330c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2c>
    buildTcpPayload(payload, device_label, device_name);
 80832fe:	4601      	mov	r1, r0
 8083300:	4643      	mov	r3, r8
 8083302:	4632      	mov	r2, r6
 8083304:	4620      	mov	r0, r4
 8083306:	f7ff ff2d 	bl	8083164 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
 808330a:	e003      	b.n	8083314 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x34>
  } else {
    buildHttpPayload(payload);
 808330c:	4601      	mov	r1, r0
 808330e:	4620      	mov	r0, r4
 8083310:	f7ff fe7c 	bl	808300c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
  }

  // Sends data
  if (_debug) {
 8083314:	7ca3      	ldrb	r3, [r4, #18]
 8083316:	b123      	cbz	r3, 8083322 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x42>
    Serial.println("Sending data...");
 8083318:	f004 fa76 	bl	8087808 <_Z16_fetch_usbserialv>
 808331c:	490d      	ldr	r1, [pc, #52]	; (8083354 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x74>)
 808331e:	f003 f946 	bl	80865ae <_ZN5Print7printlnEPKc>
  }

  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
 8083322:	6860      	ldr	r0, [r4, #4]
 8083324:	4631      	mov	r1, r6
 8083326:	6803      	ldr	r3, [r0, #0]
 8083328:	9700      	str	r7, [sp, #0]
 808332a:	4642      	mov	r2, r8
 808332c:	f8d3 9000 	ldr.w	r9, [r3]
 8083330:	462b      	mov	r3, r5
 8083332:	47c8      	blx	r9
 8083334:	4606      	mov	r6, r0
  free(payload);
 8083336:	4628      	mov	r0, r5
 8083338:	f002 fabe 	bl	80858b8 <free>
  delete flags;
 808333c:	2101      	movs	r1, #1
 808333e:	4638      	mov	r0, r7
 8083340:	f005 f864 	bl	808840c <_ZdlPvj>
 8083344:	2300      	movs	r3, #0
  if (result) {
 8083346:	b106      	cbz	r6, 808334a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6a>
    _dirty = false;
 8083348:	7463      	strb	r3, [r4, #17]
    _current_value = 0;
  }

  _current_value = 0;
  return result;
}
 808334a:	4630      	mov	r0, r6
  if (result) {
    _dirty = false;
    _current_value = 0;
  }

  _current_value = 0;
 808334c:	7423      	strb	r3, [r4, #16]
  return result;
}
 808334e:	b003      	add	sp, #12
 8083350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083354:	0808d323 	.word	0x0808d323

08083358 <_ZN18UbiProtocolHandler4sendEPKcS1_>:
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
 8083358:	b570      	push	{r4, r5, r6, lr}
 808335a:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
 808335c:	2001      	movs	r0, #1
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
 808335e:	460d      	mov	r5, r1
 8083360:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
 8083362:	f7fc fe9c 	bl	808009e <_Znwj>
 8083366:	4603      	mov	r3, r0
 8083368:	b110      	cbz	r0, 8083370 <_ZN18UbiProtocolHandler4sendEPKcS1_+0x18>
 808336a:	4a05      	ldr	r2, [pc, #20]	; (8083380 <_ZN18UbiProtocolHandler4sendEPKcS1_+0x28>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808336c:	7812      	ldrb	r2, [r2, #0]
 808336e:	7002      	strb	r2, [r0, #0]
  return send(device_label, device_name, flags);
 8083370:	4632      	mov	r2, r6
 8083372:	4629      	mov	r1, r5
 8083374:	4620      	mov	r0, r4
}
 8083376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool UbiProtocolHandler::send(const char* device_label,
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
 808337a:	f7ff bfb1 	b.w	80832e0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>
 808337e:	bf00      	nop
 8083380:	2000076c 	.word	0x2000076c

08083384 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8083384:	b570      	push	{r4, r5, r6, lr}
 8083386:	4606      	mov	r6, r0
 8083388:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 808338a:	b184      	cbz	r4, 80833ae <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
 808338c:	68e1      	ldr	r1, [r4, #12]
 808338e:	4630      	mov	r0, r6
 8083390:	f7ff fff8 	bl	8083384 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8083394:	69e3      	ldr	r3, [r4, #28]
 8083396:	68a5      	ldr	r5, [r4, #8]
 8083398:	b123      	cbz	r3, 80833a4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808339a:	f104 0114 	add.w	r1, r4, #20
 808339e:	2203      	movs	r2, #3
 80833a0:	4608      	mov	r0, r1
 80833a2:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80833a4:	4620      	mov	r0, r4
 80833a6:	f7fc fe7e 	bl	80800a6 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 80833aa:	462c      	mov	r4, r5
 80833ac:	e7ed      	b.n	808338a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
 80833ae:	bd70      	pop	{r4, r5, r6, pc}

080833b0 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
 80833b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80833b2:	b08d      	sub	sp, #52	; 0x34
 80833b4:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80833b6:	a801      	add	r0, sp, #4
 80833b8:	460d      	mov	r5, r1
 80833ba:	4617      	mov	r7, r2
 80833bc:	461e      	mov	r6, r3
 80833be:	f002 fa53 	bl	8085868 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
 80833c2:	9803      	ldr	r0, [sp, #12]
 80833c4:	3001      	adds	r0, #1
 80833c6:	f7fc fe6c 	bl	80800a2 <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
 80833ca:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
 80833cc:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
 80833ce:	f006 fda3 	bl	8089f18 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
 80833d2:	462a      	mov	r2, r5
 80833d4:	4633      	mov	r3, r6
 80833d6:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
 80833d8:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
 80833da:	a805      	add	r0, sp, #20
 80833dc:	f000 fd6a 	bl	8083eb4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
 80833e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80833e4:	f002 fa60 	bl	80858a8 <malloc>
 80833e8:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
 80833ea:	a805      	add	r0, sp, #20
 80833ec:	f000 fc72 	bl	8083cd4 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
 80833f0:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
 80833f2:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
 80833f4:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
 80833f6:	9908      	ldr	r1, [sp, #32]
 80833f8:	a806      	add	r0, sp, #24
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
 80833fa:	60a5      	str	r5, [r4, #8]
 80833fc:	f7ff ffc2 	bl	8083384 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
 8083400:	a801      	add	r0, sp, #4
 8083402:	f002 ffb9 	bl	8086378 <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
 8083406:	b00d      	add	sp, #52	; 0x34
 8083408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808340a <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
 808340a:	b538      	push	{r3, r4, r5, lr}
 808340c:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
 808340e:	2500      	movs	r5, #0
 8083410:	7405      	strb	r5, [r0, #16]
 8083412:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
 8083414:	f7ff ffcc 	bl	80833b0 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
 8083418:	4620      	mov	r0, r4
 808341a:	bd38      	pop	{r3, r4, r5, pc}

0808341c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808341c:	4b02      	ldr	r3, [pc, #8]	; (8083428 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
 808341e:	2200      	movs	r2, #0
 8083420:	701a      	strb	r2, [r3, #0]
 8083422:	f001 befd 	b.w	8085220 <HAL_Pin_Map>
 8083426:	bf00      	nop
 8083428:	2000076c 	.word	0x2000076c

0808342c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 808342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083430:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8083432:	2078      	movs	r0, #120	; 0x78
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
 8083434:	7223      	strb	r3, [r4, #8]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 8083436:	461f      	mov	r7, r3
 8083438:	460d      	mov	r5, r1
 808343a:	4616      	mov	r6, r2
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 808343c:	f002 fa34 	bl	80858a8 <malloc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8083440:	7a23      	ldrb	r3, [r4, #8]
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8083442:	6060      	str	r0, [r4, #4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 8083444:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 8083446:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 808344a:	d00c      	beq.n	8083466 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x3a>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 808344c:	f7fc fe27 	bl	808009e <_Znwj>
 8083450:	4680      	mov	r8, r0
 8083452:	b120      	cbz	r0, 808345e <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x32>
 8083454:	463b      	mov	r3, r7
 8083456:	4632      	mov	r2, r6
 8083458:	4629      	mov	r1, r5
 808345a:	f7ff ffd6 	bl	808340a <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 808345e:	f8c4 8000 	str.w	r8, [r4]
 8083462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
 8083466:	f7fc fe1a 	bl	808009e <_Znwj>
 808346a:	4607      	mov	r7, r0
 808346c:	b120      	cbz	r0, 8083478 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x4c>
 808346e:	2301      	movs	r3, #1
 8083470:	4632      	mov	r2, r6
 8083472:	4629      	mov	r1, r5
 8083474:	f7ff ffc9 	bl	808340a <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 8083478:	6027      	str	r7, [r4, #0]
 808347a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08083480 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
 8083480:	b510      	push	{r4, lr}
 8083482:	4604      	mov	r4, r0
 8083484:	2300      	movs	r3, #0
 8083486:	7243      	strb	r3, [r0, #9]
 8083488:	7283      	strb	r3, [r0, #10]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
 808348a:	4613      	mov	r3, r2
 808348c:	4a02      	ldr	r2, [pc, #8]	; (8083498 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
 808348e:	f7ff ffcd 	bl	808342c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
 8083492:	4620      	mov	r0, r4
 8083494:	bd10      	pop	{r4, pc}
 8083496:	bf00      	nop
 8083498:	0808d333 	.word	0x0808d333

0808349c <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
 808349c:	b538      	push	{r3, r4, r5, lr}
 808349e:	4604      	mov	r4, r0
  free(_context);
 80834a0:	6840      	ldr	r0, [r0, #4]
 80834a2:	f002 fa09 	bl	80858b8 <free>
  delete _protocolMesh;
#elif PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
 80834a6:	6825      	ldr	r5, [r4, #0]
 80834a8:	b135      	cbz	r5, 80834b8 <_ZN7UbidotsD1Ev+0x1c>
 80834aa:	4628      	mov	r0, r5
 80834ac:	f7ff fd48 	bl	8082f40 <_ZN18UbiProtocolHandlerD1Ev>
 80834b0:	2114      	movs	r1, #20
 80834b2:	4628      	mov	r0, r5
 80834b4:	f004 ffaa 	bl	808840c <_ZdlPvj>
#endif
}
 80834b8:	4620      	mov	r0, r4
 80834ba:	bd38      	pop	{r3, r4, r5, pc}

080834bc <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
 80834bc:	b570      	push	{r4, r5, r6, lr}
  }

#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 80834be:	7a06      	ldrb	r6, [r0, #8]
 80834c0:	2e04      	cmp	r6, #4
 80834c2:	d004      	beq.n	80834ce <_ZN7Ubidots3addEPcfS0_mj+0x12>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 80834c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
 80834c8:	6800      	ldr	r0, [r0, #0]
 80834ca:	f7ff bd49 	b.w	8082f60 <_ZN18UbiProtocolHandler3addEPcfS0_mj>
  } else {
    Serial.println(
 80834ce:	f004 f99b 	bl	8087808 <_Z16_fetch_usbserialv>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 80834d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
  } else {
    Serial.println(
        "[WARNING] please choose a different cloud protocol of Mesh in the "
        "Ubidots constructor");
 80834d6:	4901      	ldr	r1, [pc, #4]	; (80834dc <_ZN7Ubidots3addEPcfS0_mj+0x20>)
 80834d8:	f003 b869 	b.w	80865ae <_ZN5Print7printlnEPKc>
 80834dc:	0808d34e 	.word	0x0808d34e

080834e0 <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
 80834e0:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
 80834e2:	2300      	movs	r3, #0
 80834e4:	9301      	str	r3, [sp, #4]
 80834e6:	9300      	str	r3, [sp, #0]
 80834e8:	f7ff ffe8 	bl	80834bc <_ZN7Ubidots3addEPcfS0_mj>
}
 80834ec:	b003      	add	sp, #12
 80834ee:	f85d fb04 	ldr.w	pc, [sp], #4

080834f2 <_ZN7Ubidots4sendEPKcS1_>:
bool Ubidots::send(const char* device_label, const char* device_name) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, device_name);
 80834f2:	6800      	ldr	r0, [r0, #0]
 80834f4:	f7ff bf30 	b.w	8083358 <_ZN18UbiProtocolHandler4sendEPKcS1_>

080834f8 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
 80834f8:	f001 be92 	b.w	8085220 <HAL_Pin_Map>

080834fc <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

 80834fc:	7501      	strb	r1, [r0, #20]
 80834fe:	4770      	bx	lr

08083500 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
 8083500:	b570      	push	{r4, r5, r6, lr}
 8083502:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
 8083504:	2014      	movs	r0, #20
 8083506:	f002 f9cf 	bl	80858a8 <malloc>
 808350a:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
 808350c:	2014      	movs	r0, #20
 808350e:	f002 f9cb 	bl	80858a8 <malloc>
 8083512:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
 8083514:	4620      	mov	r0, r4
 8083516:	f007 fa37 	bl	808a988 <strlen>
 808351a:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
 808351c:	2300      	movs	r3, #0
 808351e:	3802      	subs	r0, #2
 8083520:	4298      	cmp	r0, r3
 8083522:	dd17      	ble.n	8083554 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
 8083524:	f812 1b01 	ldrb.w	r1, [r2], #1
 8083528:	290d      	cmp	r1, #13
 808352a:	d111      	bne.n	8083550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 808352c:	7811      	ldrb	r1, [r2, #0]
 808352e:	290a      	cmp	r1, #10
 8083530:	d10e      	bne.n	8083550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083532:	7851      	ldrb	r1, [r2, #1]
 8083534:	290d      	cmp	r1, #13
 8083536:	d10b      	bne.n	8083550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
 8083538:	7891      	ldrb	r1, [r2, #2]
 808353a:	290a      	cmp	r1, #10
 808353c:	d108      	bne.n	8083550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
 808353e:	1d19      	adds	r1, r3, #4
 8083540:	2214      	movs	r2, #20
 8083542:	4421      	add	r1, r4
 8083544:	4630      	mov	r0, r6
 8083546:	f007 fa3c 	bl	808a9c2 <strncpy>
        parsed[20] = '\0';
 808354a:	2300      	movs	r3, #0
 808354c:	7533      	strb	r3, [r6, #20]
 808354e:	e001      	b.n	8083554 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
 8083550:	3301      	adds	r3, #1
 8083552:	e7e5      	b.n	8083520 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
 8083554:	210a      	movs	r1, #10
 8083556:	4630      	mov	r0, r6
 8083558:	f006 fcc6 	bl	8089ee8 <strchr>
    if (pch == NULL) {
 808355c:	4604      	mov	r4, r0
 808355e:	b1e8      	cbz	r0, 808359c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
 8083560:	210a      	movs	r1, #10
 8083562:	3001      	adds	r0, #1
 8083564:	f006 fcc0 	bl	8089ee8 <strchr>

    if (pch2 == NULL) {
 8083568:	b1c0      	cbz	r0, 808359c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x9c>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
 808356a:	4621      	mov	r1, r4
 808356c:	4628      	mov	r0, r5
 808356e:	f006 fcd3 	bl	8089f18 <strcpy>
    dst[strlen(dst) - 1] = '\0';
 8083572:	4628      	mov	r0, r5
 8083574:	f007 fa08 	bl	808a988 <strlen>
 8083578:	2300      	movs	r3, #0
 808357a:	4428      	add	r0, r5
 808357c:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
 8083580:	4628      	mov	r0, r5
 8083582:	f006 fb59 	bl	8089c38 <atof>
 8083586:	f005 fdf3 	bl	8089170 <__aeabi_d2f>
 808358a:	4604      	mov	r4, r0

    free(dst);
 808358c:	4628      	mov	r0, r5
 808358e:	f002 f993 	bl	80858b8 <free>
    free(parsed);
 8083592:	4630      	mov	r0, r6
 8083594:	f002 f990 	bl	80858b8 <free>
    return result;
 8083598:	4620      	mov	r0, r4
 808359a:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
 808359c:	4800      	ldr	r0, [pc, #0]	; (80835a0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa0>)
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
 808359e:	bd70      	pop	{r4, r5, r6, pc}
 80835a0:	cda2425f 	.word	0xcda2425f

080835a4 <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
 80835a4:	b530      	push	{r4, r5, lr}
                 const char* token) {
 80835a6:	4d07      	ldr	r5, [pc, #28]	; (80835c4 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
  _host = host;
  _user_agent = user_agent;
 80835a8:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
 80835aa:	6005      	str	r5, [r0, #0]
 80835ac:	2500      	movs	r5, #0
 80835ae:	7505      	strb	r5, [r0, #20]
 80835b0:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 80835b4:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
 80835b6:	6185      	str	r5, [r0, #24]
 80835b8:	2505      	movs	r5, #5
 80835ba:	7705      	strb	r5, [r0, #28]
  _host = host;
 80835bc:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 80835be:	60c3      	str	r3, [r0, #12]
  _port = port;
 80835c0:	6102      	str	r2, [r0, #16]
}
 80835c2:	bd30      	pop	{r4, r5, pc}
 80835c4:	0808d578 	.word	0x0808d578

080835c8 <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
 80835c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80835cc:	4605      	mov	r5, r0
 80835ce:	460f      	mov	r7, r1
 80835d0:	4690      	mov	r8, r2
 80835d2:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 80835d4:	481d      	ldr	r0, [pc, #116]	; (808364c <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 80835d6:	b2e6      	uxtb	r6, r4
 80835d8:	f002 fe0b 	bl	80861f2 <_ZN9TCPClient9connectedEv>
 80835dc:	bb98      	cbnz	r0, 8083646 <_ZN7UbiHTTP9reconnectEPKci+0x7e>
 80835de:	7f2b      	ldrb	r3, [r5, #28]
 80835e0:	42b3      	cmp	r3, r6
 80835e2:	d801      	bhi.n	80835e8 <_ZN7UbiHTTP9reconnectEPKci+0x20>
 80835e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (_debug) {
 80835e8:	7d2b      	ldrb	r3, [r5, #20]
 80835ea:	b1c3      	cbz	r3, 808361e <_ZN7UbiHTTP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
 80835ec:	f004 f90c 	bl	8087808 <_Z16_fetch_usbserialv>
 80835f0:	4917      	ldr	r1, [pc, #92]	; (8083650 <_ZN7UbiHTTP9reconnectEPKci+0x88>)
 80835f2:	f002 ffc5 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(host);
 80835f6:	f004 f907 	bl	8087808 <_Z16_fetch_usbserialv>
 80835fa:	4639      	mov	r1, r7
 80835fc:	f002 ffc0 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 8083600:	f004 f902 	bl	8087808 <_Z16_fetch_usbserialv>
 8083604:	4913      	ldr	r1, [pc, #76]	; (8083654 <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
 8083606:	f002 ffbb 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 808360a:	f004 f8fd 	bl	8087808 <_Z16_fetch_usbserialv>
 808360e:	4681      	mov	r9, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8083610:	220a      	movs	r2, #10
 8083612:	4631      	mov	r1, r6
 8083614:	f002 ffd5 	bl	80865c2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8083618:	4648      	mov	r0, r9
 808361a:	f002 ffbc 	bl	8086596 <_ZN5Print7printlnEv>
    }
    _client_http_ubi.connect(host, port);
 808361e:	2300      	movs	r3, #0
 8083620:	fa1f f288 	uxth.w	r2, r8
 8083624:	4639      	mov	r1, r7
 8083626:	4809      	ldr	r0, [pc, #36]	; (808364c <_ZN7UbiHTTP9reconnectEPKci+0x84>)
 8083628:	f002 fe74 	bl	8086314 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
 808362c:	7d2b      	ldrb	r3, [r5, #20]
 808362e:	b123      	cbz	r3, 808363a <_ZN7UbiHTTP9reconnectEPKci+0x72>
      Serial.println("Attempt finished");
 8083630:	f004 f8ea 	bl	8087808 <_Z16_fetch_usbserialv>
 8083634:	4908      	ldr	r1, [pc, #32]	; (8083658 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
 8083636:	f002 ffba 	bl	80865ae <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
 808363a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808363e:	f003 f93b 	bl	80868b8 <delay>
 8083642:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 8083644:	e7c6      	b.n	80835d4 <_ZN7UbiHTTP9reconnectEPKci+0xc>
 8083646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808364a:	bf00      	nop
 808364c:	20000770 	.word	0x20000770
 8083650:	0808d101 	.word	0x0808d101
 8083654:	0808d117 	.word	0x0808d117
 8083658:	0808d584 	.word	0x0808d584

0808365c <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
 808365c:	b570      	push	{r4, r5, r6, lr}
 808365e:	1e4d      	subs	r5, r1, #1
 8083660:	4606      	mov	r6, r0
 8083662:	462b      	mov	r3, r5
 8083664:	460c      	mov	r4, r1
 8083666:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
 808366a:	2100      	movs	r1, #0
 808366c:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
 8083670:	4293      	cmp	r3, r2
 8083672:	d1fb      	bne.n	808366c <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
 8083674:	7d33      	ldrb	r3, [r6, #20]
 8083676:	b14b      	cbz	r3, 808368c <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
 8083678:	f004 f8c6 	bl	8087808 <_Z16_fetch_usbserialv>
 808367c:	4913      	ldr	r1, [pc, #76]	; (80836cc <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
 808367e:	f002 ff96 	bl	80865ae <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8083682:	f004 f8c1 	bl	8087808 <_Z16_fetch_usbserialv>
 8083686:	4912      	ldr	r1, [pc, #72]	; (80836d0 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
 8083688:	f002 ff91 	bl	80865ae <_ZN5Print7printlnEPKc>
 808368c:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
 8083690:	4810      	ldr	r0, [pc, #64]	; (80836d4 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 8083692:	f002 fcb9 	bl	8086008 <_ZN9TCPClient9availableEv>
 8083696:	b940      	cbnz	r0, 80836aa <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
 8083698:	7d33      	ldrb	r3, [r6, #20]
 808369a:	b1b3      	cbz	r3, 80836ca <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
 808369c:	f004 f8b4 	bl	8087808 <_Z16_fetch_usbserialv>
  }
}
 80836a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
 80836a4:	490c      	ldr	r1, [pc, #48]	; (80836d8 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
 80836a6:	f002 bf82 	b.w	80865ae <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
 80836aa:	480a      	ldr	r0, [pc, #40]	; (80836d4 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 80836ac:	f002 fc61 	bl	8085f72 <_ZN9TCPClient4readEv>
 80836b0:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
 80836b4:	7d33      	ldrb	r3, [r6, #20]
 80836b6:	b12b      	cbz	r3, 80836c4 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
 80836b8:	f004 f8a6 	bl	8087808 <_Z16_fetch_usbserialv>
 80836bc:	6803      	ldr	r3, [r0, #0]
 80836be:	7829      	ldrb	r1, [r5, #0]
 80836c0:	689b      	ldr	r3, [r3, #8]
 80836c2:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
 80836c4:	42a5      	cmp	r5, r4
 80836c6:	d1e3      	bne.n	8083690 <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
 80836c8:	e7e6      	b.n	8083698 <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
 80836ca:	bd70      	pop	{r4, r5, r6, pc}
 80836cc:	0808d172 	.word	0x0808d172
 80836d0:	0808d15e 	.word	0x0808d15e
 80836d4:	20000770 	.word	0x20000770
 80836d8:	0808d171 	.word	0x0808d171

080836dc <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
 80836dc:	b570      	push	{r4, r5, r6, lr}
 80836de:	4605      	mov	r5, r0
  int timeout = 0;
 80836e0:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
 80836e2:	480d      	ldr	r0, [pc, #52]	; (8083718 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
 80836e4:	f002 fc90 	bl	8086008 <_ZN9TCPClient9availableEv>
 80836e8:	4606      	mov	r6, r0
 80836ea:	b910      	cbnz	r0, 80836f2 <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
 80836ec:	69ab      	ldr	r3, [r5, #24]
 80836ee:	429c      	cmp	r4, r3
 80836f0:	db01      	blt.n	80836f6 <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
 80836f2:	2001      	movs	r0, #1
 80836f4:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
 80836f6:	2001      	movs	r0, #1
 80836f8:	f003 f8de 	bl	80868b8 <delay>
    if (timeout > _timeout - 1) {
 80836fc:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
 80836fe:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
 8083700:	429c      	cmp	r4, r3
 8083702:	dbee      	blt.n	80836e2 <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
 8083704:	7d28      	ldrb	r0, [r5, #20]
 8083706:	b130      	cbz	r0, 8083716 <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
 8083708:	f004 f87e 	bl	8087808 <_Z16_fetch_usbserialv>
 808370c:	4903      	ldr	r1, [pc, #12]	; (808371c <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
 808370e:	f002 ff4e 	bl	80865ae <_ZN5Print7printlnEPKc>
 8083712:	4630      	mov	r0, r6
 8083714:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
 8083716:	bd70      	pop	{r4, r5, r6, pc}
 8083718:	20000770 	.word	0x20000770
 808371c:	0808d12b 	.word	0x0808d12b

08083720 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
 8083720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083722:	460f      	mov	r7, r1
  reconnect(_host, _port);
 8083724:	6902      	ldr	r2, [r0, #16]
 8083726:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
 8083728:	4604      	mov	r4, r0
 808372a:	461e      	mov	r6, r3
  reconnect(_host, _port);
 808372c:	f7ff ff4c 	bl	80835c8 <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
 8083730:	4880      	ldr	r0, [pc, #512]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083732:	f002 fd5e 	bl	80861f2 <_ZN9TCPClient9connectedEv>
 8083736:	4605      	mov	r5, r0
 8083738:	2800      	cmp	r0, #0
 808373a:	f000 80ec 	beq.w	8083916 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
 808373e:	497e      	ldr	r1, [pc, #504]	; (8083938 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8083740:	487c      	ldr	r0, [pc, #496]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083742:	f002 ff1d 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 8083746:	4639      	mov	r1, r7
 8083748:	487a      	ldr	r0, [pc, #488]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808374a:	f002 ff19 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
 808374e:	497b      	ldr	r1, [pc, #492]	; (808393c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8083750:	4878      	ldr	r0, [pc, #480]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083752:	f002 ff15 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
 8083756:	497a      	ldr	r1, [pc, #488]	; (8083940 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 8083758:	4876      	ldr	r0, [pc, #472]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808375a:	f002 ff11 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
 808375e:	6861      	ldr	r1, [r4, #4]
 8083760:	4874      	ldr	r0, [pc, #464]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083762:	f002 ff0d 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8083766:	4977      	ldr	r1, [pc, #476]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8083768:	4872      	ldr	r0, [pc, #456]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808376a:	f002 ff09 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
 808376e:	4976      	ldr	r1, [pc, #472]	; (8083948 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 8083770:	4870      	ldr	r0, [pc, #448]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083772:	f002 ff05 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 8083776:	68a1      	ldr	r1, [r4, #8]
 8083778:	486e      	ldr	r0, [pc, #440]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808377a:	f002 ff01 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 808377e:	4971      	ldr	r1, [pc, #452]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8083780:	486c      	ldr	r0, [pc, #432]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083782:	f002 fefd 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
 8083786:	4971      	ldr	r1, [pc, #452]	; (808394c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 8083788:	486a      	ldr	r0, [pc, #424]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808378a:	f002 fef9 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 808378e:	68e1      	ldr	r1, [r4, #12]
 8083790:	4868      	ldr	r0, [pc, #416]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083792:	f002 fef5 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8083796:	496b      	ldr	r1, [pc, #428]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8083798:	4866      	ldr	r0, [pc, #408]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808379a:	f002 fef1 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
 808379e:	496c      	ldr	r1, [pc, #432]	; (8083950 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 80837a0:	4864      	ldr	r0, [pc, #400]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837a2:	f002 feed 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
 80837a6:	496b      	ldr	r1, [pc, #428]	; (8083954 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 80837a8:	4862      	ldr	r0, [pc, #392]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837aa:	f002 fee9 	bl	8086580 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
 80837ae:	4630      	mov	r0, r6
 80837b0:	f007 f8ea 	bl	808a988 <strlen>
 80837b4:	4605      	mov	r5, r0
    _client_http_ubi.print(F("Content-Length: "));
 80837b6:	4968      	ldr	r1, [pc, #416]	; (8083958 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 80837b8:	485e      	ldr	r0, [pc, #376]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837ba:	f002 fee1 	bl	8086580 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80837be:	2d00      	cmp	r5, #0
 80837c0:	da05      	bge.n	80837ce <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
 80837c2:	212d      	movs	r1, #45	; 0x2d
 80837c4:	485b      	ldr	r0, [pc, #364]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837c6:	f002 fedf 	bl	8086588 <_ZN5Print5printEc>
            val = -n;
 80837ca:	4269      	negs	r1, r5
 80837cc:	e000      	b.n	80837d0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80837ce:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80837d0:	220a      	movs	r2, #10
 80837d2:	4858      	ldr	r0, [pc, #352]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837d4:	f002 fef5 	bl	80865c2 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(content_length);
    _client_http_ubi.print(F("\r\n\r\n"));
 80837d8:	4960      	ldr	r1, [pc, #384]	; (808395c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80837da:	4856      	ldr	r0, [pc, #344]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837dc:	f002 fed0 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
 80837e0:	4631      	mov	r1, r6
 80837e2:	4854      	ldr	r0, [pc, #336]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837e4:	f002 fecc 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 80837e8:	4956      	ldr	r1, [pc, #344]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80837ea:	4852      	ldr	r0, [pc, #328]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837ec:	f002 fec8 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
 80837f0:	4850      	ldr	r0, [pc, #320]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80837f2:	f002 fb80 	bl	8085ef6 <_ZN9TCPClient5flushEv>

    if (_debug) {
 80837f6:	7d23      	ldrb	r3, [r4, #20]
 80837f8:	2b00      	cmp	r3, #0
 80837fa:	d071      	beq.n	80838e0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
      Serial.println(F("Making request to Ubidots:\n"));
 80837fc:	f004 f804 	bl	8087808 <_Z16_fetch_usbserialv>
 8083800:	4957      	ldr	r1, [pc, #348]	; (8083960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
 8083802:	f002 fed4 	bl	80865ae <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
 8083806:	f003 ffff 	bl	8087808 <_Z16_fetch_usbserialv>
 808380a:	494b      	ldr	r1, [pc, #300]	; (8083938 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 808380c:	f002 feb8 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8083810:	f003 fffa 	bl	8087808 <_Z16_fetch_usbserialv>
 8083814:	4639      	mov	r1, r7
 8083816:	f002 feb3 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 808381a:	f003 fff5 	bl	8087808 <_Z16_fetch_usbserialv>
 808381e:	4947      	ldr	r1, [pc, #284]	; (808393c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8083820:	f002 feae 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 8083824:	f003 fff0 	bl	8087808 <_Z16_fetch_usbserialv>
 8083828:	4945      	ldr	r1, [pc, #276]	; (8083940 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 808382a:	f002 fea9 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(_host);
 808382e:	f003 ffeb 	bl	8087808 <_Z16_fetch_usbserialv>
 8083832:	6861      	ldr	r1, [r4, #4]
 8083834:	f002 fea4 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8083838:	f003 ffe6 	bl	8087808 <_Z16_fetch_usbserialv>
 808383c:	4941      	ldr	r1, [pc, #260]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808383e:	f002 fe9f 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 8083842:	f003 ffe1 	bl	8087808 <_Z16_fetch_usbserialv>
 8083846:	4940      	ldr	r1, [pc, #256]	; (8083948 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 8083848:	f002 fe9a 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 808384c:	f003 ffdc 	bl	8087808 <_Z16_fetch_usbserialv>
 8083850:	68a1      	ldr	r1, [r4, #8]
 8083852:	f002 fe95 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8083856:	f003 ffd7 	bl	8087808 <_Z16_fetch_usbserialv>
 808385a:	493a      	ldr	r1, [pc, #232]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808385c:	f002 fe90 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 8083860:	f003 ffd2 	bl	8087808 <_Z16_fetch_usbserialv>
 8083864:	4939      	ldr	r1, [pc, #228]	; (808394c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 8083866:	f002 fe8b 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(_token);
 808386a:	f003 ffcd 	bl	8087808 <_Z16_fetch_usbserialv>
 808386e:	68e1      	ldr	r1, [r4, #12]
 8083870:	f002 fe86 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8083874:	f003 ffc8 	bl	8087808 <_Z16_fetch_usbserialv>
 8083878:	4932      	ldr	r1, [pc, #200]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 808387a:	f002 fe81 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
 808387e:	f003 ffc3 	bl	8087808 <_Z16_fetch_usbserialv>
 8083882:	4933      	ldr	r1, [pc, #204]	; (8083950 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
 8083884:	f002 fe7c 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
 8083888:	f003 ffbe 	bl	8087808 <_Z16_fetch_usbserialv>
 808388c:	4931      	ldr	r1, [pc, #196]	; (8083954 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
 808388e:	f002 fe77 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
 8083892:	f003 ffb9 	bl	8087808 <_Z16_fetch_usbserialv>
 8083896:	4930      	ldr	r1, [pc, #192]	; (8083958 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
 8083898:	f002 fe72 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(content_length);
 808389c:	f003 ffb4 	bl	8087808 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80838a0:	2d00      	cmp	r5, #0
 80838a2:	4607      	mov	r7, r0
 80838a4:	da03      	bge.n	80838ae <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
 80838a6:	212d      	movs	r1, #45	; 0x2d
 80838a8:	f002 fe6e 	bl	8086588 <_ZN5Print5printEc>
            val = -n;
 80838ac:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80838ae:	220a      	movs	r2, #10
 80838b0:	4629      	mov	r1, r5
 80838b2:	4638      	mov	r0, r7
 80838b4:	f002 fe85 	bl	80865c2 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
 80838b8:	f003 ffa6 	bl	8087808 <_Z16_fetch_usbserialv>
 80838bc:	4927      	ldr	r1, [pc, #156]	; (808395c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
 80838be:	f002 fe5f 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(payload);
 80838c2:	f003 ffa1 	bl	8087808 <_Z16_fetch_usbserialv>
 80838c6:	4631      	mov	r1, r6
 80838c8:	f002 fe5a 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 80838cc:	f003 ff9c 	bl	8087808 <_Z16_fetch_usbserialv>
 80838d0:	491c      	ldr	r1, [pc, #112]	; (8083944 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 80838d2:	f002 fe55 	bl	8086580 <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
 80838d6:	f003 ff97 	bl	8087808 <_Z16_fetch_usbserialv>
 80838da:	4922      	ldr	r1, [pc, #136]	; (8083964 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
 80838dc:	f002 fe67 	bl	80865ae <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
 80838e0:	4620      	mov	r0, r4
 80838e2:	f7ff fefb 	bl	80836dc <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
 80838e6:	7d23      	ldrb	r3, [r4, #20]
 80838e8:	b90b      	cbnz	r3, 80838ee <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
 80838ea:	2401      	movs	r4, #1
 80838ec:	e01d      	b.n	808392a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
 80838ee:	f003 ff8b 	bl	8087808 <_Z16_fetch_usbserialv>
 80838f2:	491d      	ldr	r1, [pc, #116]	; (8083968 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
 80838f4:	f002 fe5b 	bl	80865ae <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
 80838f8:	480e      	ldr	r0, [pc, #56]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 80838fa:	f002 fb85 	bl	8086008 <_ZN9TCPClient9availableEv>
 80838fe:	2800      	cmp	r0, #0
 8083900:	d0f3      	beq.n	80838ea <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
        char c = _client_http_ubi.read();
 8083902:	480c      	ldr	r0, [pc, #48]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8083904:	f002 fb35 	bl	8085f72 <_ZN9TCPClient4readEv>
 8083908:	4604      	mov	r4, r0
        Serial.print(c);
 808390a:	f003 ff7d 	bl	8087808 <_Z16_fetch_usbserialv>
 808390e:	b2e1      	uxtb	r1, r4
 8083910:	f002 fe3a 	bl	8086588 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
 8083914:	e7f0      	b.n	80838f8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
    }

    result = true;

  } else {
    if (_debug) {
 8083916:	7d23      	ldrb	r3, [r4, #20]
 8083918:	b133      	cbz	r3, 8083928 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
      Serial.println("Could not send data to ubidots using HTTP");
 808391a:	f003 ff75 	bl	8087808 <_Z16_fetch_usbserialv>
 808391e:	4913      	ldr	r1, [pc, #76]	; (808396c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
 8083920:	f002 fe45 	bl	80865ae <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
 8083924:	462c      	mov	r4, r5
 8083926:	e000      	b.n	808392a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
 8083928:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
 808392a:	4802      	ldr	r0, [pc, #8]	; (8083934 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 808392c:	f002 fba8 	bl	8086080 <_ZN9TCPClient4stopEv>
  return result;
}
 8083930:	4620      	mov	r0, r4
 8083932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083934:	20000770 	.word	0x20000770
 8083938:	0808d595 	.word	0x0808d595
 808393c:	0808d5ad 	.word	0x0808d5ad
 8083940:	0808d5b9 	.word	0x0808d5b9
 8083944:	0808d6dd 	.word	0x0808d6dd
 8083948:	0808d5c0 	.word	0x0808d5c0
 808394c:	0808d5cd 	.word	0x0808d5cd
 8083950:	0808d5dc 	.word	0x0808d5dc
 8083954:	0808d5f0 	.word	0x0808d5f0
 8083958:	0808d611 	.word	0x0808d611
 808395c:	0808d6db 	.word	0x0808d6db
 8083960:	0808d622 	.word	0x0808d622
 8083964:	0808d63e 	.word	0x0808d63e
 8083968:	0808d65c 	.word	0x0808d65c
 808396c:	0808d678 	.word	0x0808d678

08083970 <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
 8083970:	b570      	push	{r4, r5, r6, lr}
 8083972:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 8083974:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
 8083976:	460e      	mov	r6, r1
 8083978:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 808397a:	6841      	ldr	r1, [r0, #4]
 808397c:	2250      	movs	r2, #80	; 0x50
 808397e:	4865      	ldr	r0, [pc, #404]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083980:	f002 fcc8 	bl	8086314 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
 8083984:	4620      	mov	r0, r4
 8083986:	2250      	movs	r2, #80	; 0x50
 8083988:	6861      	ldr	r1, [r4, #4]
 808398a:	f7ff fe1d 	bl	80835c8 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
 808398e:	4861      	ldr	r0, [pc, #388]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083990:	f002 fc2f 	bl	80861f2 <_ZN9TCPClient9connectedEv>
 8083994:	2800      	cmp	r0, #0
 8083996:	f000 80b2 	beq.w	8083afe <_ZN7UbiHTTP3getEPKcS1_+0x18e>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
 808399a:	495f      	ldr	r1, [pc, #380]	; (8083b18 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 808399c:	485d      	ldr	r0, [pc, #372]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 808399e:	f002 fdef 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 80839a2:	4631      	mov	r1, r6
 80839a4:	485b      	ldr	r0, [pc, #364]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839a6:	f002 fdeb 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
 80839aa:	495c      	ldr	r1, [pc, #368]	; (8083b1c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 80839ac:	4859      	ldr	r0, [pc, #356]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839ae:	f002 fde7 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
 80839b2:	4629      	mov	r1, r5
 80839b4:	4857      	ldr	r0, [pc, #348]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839b6:	f002 fde3 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
 80839ba:	4959      	ldr	r1, [pc, #356]	; (8083b20 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 80839bc:	4855      	ldr	r0, [pc, #340]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839be:	f002 fddf 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
 80839c2:	4958      	ldr	r1, [pc, #352]	; (8083b24 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 80839c4:	4853      	ldr	r0, [pc, #332]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839c6:	f002 fddb 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
 80839ca:	4957      	ldr	r1, [pc, #348]	; (8083b28 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 80839cc:	4851      	ldr	r0, [pc, #324]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839ce:	f002 fdd7 	bl	8086580 <_ZN5Print5printEPKc>
 80839d2:	220a      	movs	r2, #10
 80839d4:	2150      	movs	r1, #80	; 0x50
 80839d6:	484f      	ldr	r0, [pc, #316]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839d8:	f002 fdf3 	bl	80865c2 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
    _client_http_ubi.print("\r\n");
 80839dc:	4953      	ldr	r1, [pc, #332]	; (8083b2c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80839de:	484d      	ldr	r0, [pc, #308]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839e0:	f002 fdce 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
 80839e4:	4952      	ldr	r1, [pc, #328]	; (8083b30 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 80839e6:	484b      	ldr	r0, [pc, #300]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839e8:	f002 fdca 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 80839ec:	68a1      	ldr	r1, [r4, #8]
 80839ee:	4849      	ldr	r0, [pc, #292]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839f0:	f002 fdc6 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 80839f4:	494d      	ldr	r1, [pc, #308]	; (8083b2c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 80839f6:	4847      	ldr	r0, [pc, #284]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 80839f8:	f002 fdc2 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
 80839fc:	494d      	ldr	r1, [pc, #308]	; (8083b34 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 80839fe:	4845      	ldr	r0, [pc, #276]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083a00:	f002 fdbe 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 8083a04:	68e1      	ldr	r1, [r4, #12]
 8083a06:	4843      	ldr	r0, [pc, #268]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083a08:	f002 fdba 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 8083a0c:	4947      	ldr	r1, [pc, #284]	; (8083b2c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8083a0e:	4841      	ldr	r0, [pc, #260]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083a10:	f002 fdb6 	bl	8086580 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
 8083a14:	4948      	ldr	r1, [pc, #288]	; (8083b38 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 8083a16:	483f      	ldr	r0, [pc, #252]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083a18:	f002 fdb2 	bl	8086580 <_ZN5Print5printEPKc>

    if (_debug) {
 8083a1c:	7d23      	ldrb	r3, [r4, #20]
 8083a1e:	2b00      	cmp	r3, #0
 8083a20:	d050      	beq.n	8083ac4 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
 8083a22:	f003 fef1 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a26:	493c      	ldr	r1, [pc, #240]	; (8083b18 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 8083a28:	f002 fdaa 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8083a2c:	f003 feec 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a30:	4631      	mov	r1, r6
 8083a32:	f002 fda5 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("/");
 8083a36:	f003 fee7 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a3a:	4938      	ldr	r1, [pc, #224]	; (8083b1c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8083a3c:	f002 fda0 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 8083a40:	f003 fee2 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a44:	4629      	mov	r1, r5
 8083a46:	f002 fd9b 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("/lv");
 8083a4a:	f003 fedd 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a4e:	4934      	ldr	r1, [pc, #208]	; (8083b20 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 8083a50:	f002 fd96 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 8083a54:	f003 fed8 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a58:	4932      	ldr	r1, [pc, #200]	; (8083b24 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 8083a5a:	f002 fd91 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 8083a5e:	f003 fed3 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a62:	4931      	ldr	r1, [pc, #196]	; (8083b28 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8083a64:	f002 fd8c 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
 8083a68:	f003 fece 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a6c:	220a      	movs	r2, #10
 8083a6e:	2150      	movs	r1, #80	; 0x50
 8083a70:	f002 fda7 	bl	80865c2 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
 8083a74:	f003 fec8 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a78:	492c      	ldr	r1, [pc, #176]	; (8083b2c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8083a7a:	f002 fd81 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 8083a7e:	f003 fec3 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a82:	492b      	ldr	r1, [pc, #172]	; (8083b30 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 8083a84:	f002 fd7c 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 8083a88:	f003 febe 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a8c:	68a1      	ldr	r1, [r4, #8]
 8083a8e:	f002 fd77 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8083a92:	f003 feb9 	bl	8087808 <_Z16_fetch_usbserialv>
 8083a96:	4925      	ldr	r1, [pc, #148]	; (8083b2c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8083a98:	f002 fd72 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 8083a9c:	f003 feb4 	bl	8087808 <_Z16_fetch_usbserialv>
 8083aa0:	4924      	ldr	r1, [pc, #144]	; (8083b34 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 8083aa2:	f002 fd6d 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8083aa6:	f003 feaf 	bl	8087808 <_Z16_fetch_usbserialv>
 8083aaa:	68e1      	ldr	r1, [r4, #12]
 8083aac:	f002 fd68 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8083ab0:	f003 feaa 	bl	8087808 <_Z16_fetch_usbserialv>
 8083ab4:	491d      	ldr	r1, [pc, #116]	; (8083b2c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8083ab6:	f002 fd63 	bl	8086580 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
 8083aba:	f003 fea5 	bl	8087808 <_Z16_fetch_usbserialv>
 8083abe:	491e      	ldr	r1, [pc, #120]	; (8083b38 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 8083ac0:	f002 fd5e 	bl	8086580 <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
 8083ac4:	4620      	mov	r0, r4
 8083ac6:	f7ff fe09 	bl	80836dc <_ZN7UbiHTTP16waitServerAnswerEv>
 8083aca:	b920      	cbnz	r0, 8083ad6 <_ZN7UbiHTTP3getEPKcS1_+0x166>
      _client_http_ubi.stop();
 8083acc:	4811      	ldr	r0, [pc, #68]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083ace:	f002 fad7 	bl	8086080 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 8083ad2:	4c1a      	ldr	r4, [pc, #104]	; (8083b3c <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
 8083ad4:	e01c      	b.n	8083b10 <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8083ad6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8083ada:	f001 fee5 	bl	80858a8 <malloc>
 8083ade:	4605      	mov	r5, r0
    readServerAnswer(response);
 8083ae0:	4601      	mov	r1, r0
 8083ae2:	4620      	mov	r0, r4
 8083ae4:	f7ff fdba 	bl	808365c <_ZN7UbiHTTP16readServerAnswerEPc>
 8083ae8:	4628      	mov	r0, r5
 8083aea:	f7ff fd09 	bl	8083500 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>
 8083aee:	4604      	mov	r4, r0

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
 8083af0:	4808      	ldr	r0, [pc, #32]	; (8083b14 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8083af2:	f002 fac5 	bl	8086080 <_ZN9TCPClient4stopEv>
    free(response);
 8083af6:	4628      	mov	r0, r5
 8083af8:	f001 fede 	bl	80858b8 <free>
 8083afc:	e008      	b.n	8083b10 <_ZN7UbiHTTP3getEPKcS1_+0x1a0>
    return value;
  }

  if (_debug) {
 8083afe:	7d23      	ldrb	r3, [r4, #20]
 8083b00:	2b00      	cmp	r3, #0
 8083b02:	d0e3      	beq.n	8083acc <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
 8083b04:	f003 fe80 	bl	8087808 <_Z16_fetch_usbserialv>
 8083b08:	490d      	ldr	r1, [pc, #52]	; (8083b40 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
 8083b0a:	f002 fd50 	bl	80865ae <_ZN5Print7printlnEPKc>
 8083b0e:	e7dd      	b.n	8083acc <_ZN7UbiHTTP3getEPKcS1_+0x15c>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
 8083b10:	4620      	mov	r0, r4
 8083b12:	bd70      	pop	{r4, r5, r6, pc}
 8083b14:	20000770 	.word	0x20000770
 8083b18:	0808d6a2 	.word	0x0808d6a2
 8083b1c:	0808d6b7 	.word	0x0808d6b7
 8083b20:	0808d6b9 	.word	0x0808d6b9
 8083b24:	0808d5ad 	.word	0x0808d5ad
 8083b28:	0808d5b9 	.word	0x0808d5b9
 8083b2c:	0808d6dd 	.word	0x0808d6dd
 8083b30:	0808d5c0 	.word	0x0808d5c0
 8083b34:	0808d5cd 	.word	0x0808d5cd
 8083b38:	0808d6bd 	.word	0x0808d6bd
 8083b3c:	cda2425f 	.word	0xcda2425f
 8083b40:	0808d6e0 	.word	0x0808d6e0

08083b44 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

 8083b44:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
 8083b46:	4c06      	ldr	r4, [pc, #24]	; (8083b60 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
 8083b48:	f001 fb6a 	bl	8085220 <HAL_Pin_Map>
 8083b4c:	4620      	mov	r0, r4
 8083b4e:	f002 fbbf 	bl	80862d0 <_ZN9TCPClientC1Ev>
 8083b52:	4620      	mov	r0, r4
 8083b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083b58:	4a02      	ldr	r2, [pc, #8]	; (8083b64 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
 8083b5a:	4903      	ldr	r1, [pc, #12]	; (8083b68 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
 8083b5c:	f004 bc48 	b.w	80883f0 <__aeabi_atexit>
 8083b60:	20000770 	.word	0x20000770
 8083b64:	20000140 	.word	0x20000140
 8083b68:	08082b3d 	.word	0x08082b3d

08083b6c <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
 8083b6c:	6803      	ldr	r3, [r0, #0]
 8083b6e:	4718      	bx	r3

08083b70 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8083b70:	2a01      	cmp	r2, #1
 8083b72:	d002      	beq.n	8083b7a <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 8083b74:	2a02      	cmp	r2, #2
 8083b76:	d002      	beq.n	8083b7e <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
 8083b78:	e004      	b.n	8083b84 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8083b7a:	6001      	str	r1, [r0, #0]
	      break;
 8083b7c:	e002      	b.n	8083b84 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8083b7e:	680b      	ldr	r3, [r1, #0]
 8083b80:	b100      	cbz	r0, 8083b84 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
 8083b82:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8083b84:	2000      	movs	r0, #0
 8083b86:	4770      	bx	lr

08083b88 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
 8083b88:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8083b8a:	201c      	movs	r0, #28
 8083b8c:	f7fc fa87 	bl	808009e <_Znwj>
 8083b90:	4604      	mov	r4, r0
 8083b92:	b148      	cbz	r0, 8083ba8 <_Z10builderTcpv+0x20>
 8083b94:	4b06      	ldr	r3, [pc, #24]	; (8083bb0 <_Z10builderTcpv+0x28>)
 8083b96:	4907      	ldr	r1, [pc, #28]	; (8083bb4 <_Z10builderTcpv+0x2c>)
 8083b98:	681b      	ldr	r3, [r3, #0]
 8083b9a:	f242 3234 	movw	r2, #9012	; 0x2334
 8083b9e:	9300      	str	r3, [sp, #0]
 8083ba0:	6809      	ldr	r1, [r1, #0]
 8083ba2:	4b05      	ldr	r3, [pc, #20]	; (8083bb8 <_Z10builderTcpv+0x30>)
 8083ba4:	f7fe ffee 	bl	8082b84 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
 8083ba8:	4620      	mov	r0, r4
 8083baa:	b002      	add	sp, #8
 8083bac:	bd10      	pop	{r4, pc}
 8083bae:	bf00      	nop
 8083bb0:	200007c4 	.word	0x200007c4
 8083bb4:	200007c8 	.word	0x200007c8
 8083bb8:	0808d2e2 	.word	0x0808d2e2

08083bbc <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
 8083bbc:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
 8083bbe:	2020      	movs	r0, #32
 8083bc0:	f7fc fa6d 	bl	808009e <_Znwj>
 8083bc4:	4604      	mov	r4, r0
 8083bc6:	b140      	cbz	r0, 8083bda <_Z11builderHttpv+0x1e>
 8083bc8:	4b05      	ldr	r3, [pc, #20]	; (8083be0 <_Z11builderHttpv+0x24>)
 8083bca:	4906      	ldr	r1, [pc, #24]	; (8083be4 <_Z11builderHttpv+0x28>)
 8083bcc:	681b      	ldr	r3, [r3, #0]
 8083bce:	2250      	movs	r2, #80	; 0x50
 8083bd0:	9300      	str	r3, [sp, #0]
 8083bd2:	6809      	ldr	r1, [r1, #0]
 8083bd4:	4b04      	ldr	r3, [pc, #16]	; (8083be8 <_Z11builderHttpv+0x2c>)
 8083bd6:	f7ff fce5 	bl	80835a4 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
 8083bda:	4620      	mov	r0, r4
 8083bdc:	b002      	add	sp, #8
 8083bde:	bd10      	pop	{r4, pc}
 8083be0:	200007c4 	.word	0x200007c4
 8083be4:	200007c8 	.word	0x200007c8
 8083be8:	0808d2e2 	.word	0x0808d2e2

08083bec <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
 8083bec:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8083bee:	201c      	movs	r0, #28
 8083bf0:	f7fc fa55 	bl	808009e <_Znwj>
 8083bf4:	4604      	mov	r4, r0
 8083bf6:	b148      	cbz	r0, 8083c0c <_Z10builderUdpv+0x20>
 8083bf8:	4b06      	ldr	r3, [pc, #24]	; (8083c14 <_Z10builderUdpv+0x28>)
 8083bfa:	4907      	ldr	r1, [pc, #28]	; (8083c18 <_Z10builderUdpv+0x2c>)
 8083bfc:	681b      	ldr	r3, [r3, #0]
 8083bfe:	f242 3234 	movw	r2, #9012	; 0x2334
 8083c02:	9300      	str	r3, [sp, #0]
 8083c04:	6809      	ldr	r1, [r1, #0]
 8083c06:	4b05      	ldr	r3, [pc, #20]	; (8083c1c <_Z10builderUdpv+0x30>)
 8083c08:	f000 f9e2 	bl	8083fd0 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
 8083c0c:	4620      	mov	r0, r4
 8083c0e:	b002      	add	sp, #8
 8083c10:	bd10      	pop	{r4, pc}
 8083c12:	bf00      	nop
 8083c14:	200007c4 	.word	0x200007c4
 8083c18:	200007c8 	.word	0x200007c8
 8083c1c:	0808d2e2 	.word	0x0808d2e2

08083c20 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
 8083c20:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
 8083c22:	2014      	movs	r0, #20
 8083c24:	f7fc fa3b 	bl	808009e <_Znwj>
 8083c28:	4604      	mov	r4, r0
 8083c2a:	b140      	cbz	r0, 8083c3e <_Z15builderParticlev+0x1e>
 8083c2c:	4b05      	ldr	r3, [pc, #20]	; (8083c44 <_Z15builderParticlev+0x24>)
 8083c2e:	4906      	ldr	r1, [pc, #24]	; (8083c48 <_Z15builderParticlev+0x28>)
 8083c30:	681b      	ldr	r3, [r3, #0]
 8083c32:	9300      	str	r3, [sp, #0]
 8083c34:	2300      	movs	r3, #0
 8083c36:	461a      	mov	r2, r3
 8083c38:	6809      	ldr	r1, [r1, #0]
 8083c3a:	f000 fa71 	bl	8084120 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
 8083c3e:	4620      	mov	r0, r4
 8083c40:	b002      	add	sp, #8
 8083c42:	bd10      	pop	{r4, pc}
 8083c44:	200007c4 	.word	0x200007c4
 8083c48:	200007c8 	.word	0x200007c8

08083c4c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 8083c4c:	b510      	push	{r4, lr}
 8083c4e:	4604      	mov	r4, r0
 8083c50:	4b05      	ldr	r3, [pc, #20]	; (8083c68 <_ZN3UDPD1Ev+0x1c>)
 8083c52:	6003      	str	r3, [r0, #0]
 8083c54:	3364      	adds	r3, #100	; 0x64
 8083c56:	6103      	str	r3, [r0, #16]
 8083c58:	f002 fed6 	bl	8086a08 <_ZN3UDP4stopEv>
 8083c5c:	4620      	mov	r0, r4
 8083c5e:	f002 ffb7 	bl	8086bd0 <_ZN3UDP13releaseBufferEv>
 8083c62:	4620      	mov	r0, r4
 8083c64:	bd10      	pop	{r4, pc}
 8083c66:	bf00      	nop
 8083c68:	0808da7c 	.word	0x0808da7c

08083c6c <_ZN3UDPD0Ev>:
 8083c6c:	b510      	push	{r4, lr}
 8083c6e:	4604      	mov	r4, r0
 8083c70:	f7ff ffec 	bl	8083c4c <_ZN3UDPD1Ev>
 8083c74:	4620      	mov	r0, r4
 8083c76:	213c      	movs	r1, #60	; 0x3c
 8083c78:	f004 fbc8 	bl	808840c <_ZdlPvj>
 8083c7c:	4620      	mov	r0, r4
 8083c7e:	bd10      	pop	{r4, pc}

08083c80 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8083c80:	b510      	push	{r4, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083c82:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8083c84:	b086      	sub	sp, #24
 8083c86:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083c88:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8083c8a:	b121      	cbz	r1, 8083c96 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083c8c:	4b0f      	ldr	r3, [pc, #60]	; (8083ccc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083c8e:	9102      	str	r1, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083c90:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8083c92:	4b0f      	ldr	r3, [pc, #60]	; (8083cd0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
 8083c94:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083c96:	ab02      	add	r3, sp, #8
 8083c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8083c9c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8083ca0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8083ca4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8083ca8:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083cac:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8083cae:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8083cb2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8083cb4:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083cb6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8083cb8:	9104      	str	r1, [sp, #16]
 8083cba:	68e1      	ldr	r1, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083cbc:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 8083cbe:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8083cc0:	9105      	str	r1, [sp, #20]
 8083cc2:	f7fc fa7c 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 8083cc6:	4620      	mov	r0, r4
 8083cc8:	b006      	add	sp, #24
 8083cca:	bd10      	pop	{r4, pc}
 8083ccc:	08083b6d 	.word	0x08083b6d
 8083cd0:	08083b71 	.word	0x08083b71

08083cd4 <_ZN10UbiBuilder7builderEv>:
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8083cd4:	f100 0108 	add.w	r1, r0, #8
 8083cd8:	460b      	mov	r3, r1
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
 8083cda:	b570      	push	{r4, r5, r6, lr}
 8083cdc:	68c2      	ldr	r2, [r0, #12]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8083cde:	b14a      	cbz	r2, 8083cf4 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8083ce0:	7804      	ldrb	r4, [r0, #0]
 8083ce2:	7c15      	ldrb	r5, [r2, #16]
 8083ce4:	42a5      	cmp	r5, r4
 8083ce6:	bf3a      	itte	cc
 8083ce8:	68d4      	ldrcc	r4, [r2, #12]
 8083cea:	461a      	movcc	r2, r3
 8083cec:	6894      	ldrcs	r4, [r2, #8]
 8083cee:	4613      	mov	r3, r2
 8083cf0:	4622      	mov	r2, r4
 8083cf2:	e7f4      	b.n	8083cde <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8083cf4:	4299      	cmp	r1, r3
 8083cf6:	d004      	beq.n	8083d02 <_ZN10UbiBuilder7builderEv+0x2e>
 8083cf8:	7800      	ldrb	r0, [r0, #0]
 8083cfa:	7c1a      	ldrb	r2, [r3, #16]
 8083cfc:	4290      	cmp	r0, r2
 8083cfe:	bf38      	it	cc
 8083d00:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8083d02:	69da      	ldr	r2, [r3, #28]
 8083d04:	b90a      	cbnz	r2, 8083d0a <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
 8083d06:	f004 fc4d 	bl	80885a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8083d0a:	6a1a      	ldr	r2, [r3, #32]
 8083d0c:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
 8083d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083d14:	4710      	bx	r2

08083d16 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8083d16:	b570      	push	{r4, r5, r6, lr}
 8083d18:	4604      	mov	r4, r0
 8083d1a:	688b      	ldr	r3, [r1, #8]
 8083d1c:	4616      	mov	r6, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8083d1e:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
 8083d20:	2201      	movs	r2, #1
      while (__x != 0)
 8083d22:	b153      	cbz	r3, 8083d3a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x24>
 8083d24:	7830      	ldrb	r0, [r6, #0]
 8083d26:	7c1a      	ldrb	r2, [r3, #16]
 8083d28:	461d      	mov	r5, r3
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 8083d2a:	4290      	cmp	r0, r2
 8083d2c:	bf35      	itete	cc
 8083d2e:	6898      	ldrcc	r0, [r3, #8]
 8083d30:	68d8      	ldrcs	r0, [r3, #12]
 8083d32:	2201      	movcc	r2, #1
 8083d34:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8083d36:	4603      	mov	r3, r0
 8083d38:	e7f3      	b.n	8083d22 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
 8083d3a:	b132      	cbz	r2, 8083d4a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
	{
	  if (__j == begin())
 8083d3c:	68ca      	ldr	r2, [r1, #12]
 8083d3e:	4295      	cmp	r5, r2
 8083d40:	d00a      	beq.n	8083d58 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x42>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 8083d42:	4628      	mov	r0, r5
 8083d44:	f004 fbc9 	bl	80884da <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8083d48:	e000      	b.n	8083d4c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
 8083d4a:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8083d4c:	7833      	ldrb	r3, [r6, #0]
 8083d4e:	7c02      	ldrb	r2, [r0, #16]
 8083d50:	429a      	cmp	r2, r3
 8083d52:	f04f 0300 	mov.w	r3, #0
 8083d56:	d202      	bcs.n	8083d5e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x48>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8083d58:	e884 0028 	stmia.w	r4, {r3, r5}
 8083d5c:	e001      	b.n	8083d62 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4c>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
 8083d5e:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 8083d62:	4620      	mov	r0, r4
 8083d64:	bd70      	pop	{r4, r5, r6, pc}

08083d66 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8083d66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8083d6a:	461f      	mov	r7, r3
 8083d6c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8083d6e:	2024      	movs	r0, #36	; 0x24
 8083d70:	460c      	mov	r4, r1
 8083d72:	f7fc f994 	bl	808009e <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8083d76:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8083d78:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8083d7c:	bf18      	it	ne
 8083d7e:	781b      	ldrbne	r3, [r3, #0]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8083d80:	f106 0704 	add.w	r7, r6, #4
 8083d84:	bf1e      	ittt	ne
 8083d86:	7403      	strbne	r3, [r0, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083d88:	2300      	movne	r3, #0
 8083d8a:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
 8083d8c:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8083d8e:	4605      	mov	r5, r0
 8083d90:	d108      	bne.n	8083da4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
 8083d92:	6973      	ldr	r3, [r6, #20]
 8083d94:	2b00      	cmp	r3, #0
 8083d96:	d05c      	beq.n	8083e52 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8083d98:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
 8083d9a:	7c03      	ldrb	r3, [r0, #16]
 8083d9c:	7c0a      	ldrb	r2, [r1, #16]
 8083d9e:	429a      	cmp	r2, r3
 8083da0:	d33a      	bcc.n	8083e18 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
 8083da2:	e056      	b.n	8083e52 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
 8083da4:	f890 9010 	ldrb.w	r9, [r0, #16]
 8083da8:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8083daa:	4599      	cmp	r9, r3
 8083dac:	d217      	bcs.n	8083dde <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
 8083dae:	68f3      	ldr	r3, [r6, #12]
 8083db0:	4620      	mov	r0, r4
 8083db2:	42a3      	cmp	r3, r4
 8083db4:	d011      	beq.n	8083dda <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
 8083db6:	f004 fb90 	bl	80884da <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8083dba:	7c03      	ldrb	r3, [r0, #16]
 8083dbc:	454b      	cmp	r3, r9
 8083dbe:	d205      	bcs.n	8083dcc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
 8083dc0:	68c3      	ldr	r3, [r0, #12]
 8083dc2:	2b00      	cmp	r3, #0
 8083dc4:	bf14      	ite	ne
 8083dc6:	4620      	movne	r0, r4
 8083dc8:	2400      	moveq	r4, #0
 8083dca:	e006      	b.n	8083dda <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 8083dcc:	4668      	mov	r0, sp
 8083dce:	4642      	mov	r2, r8
 8083dd0:	4631      	mov	r1, r6
 8083dd2:	f7ff ffa0 	bl	8083d16 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8083dd6:	9c00      	ldr	r4, [sp, #0]
 8083dd8:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 8083dda:	4601      	mov	r1, r0
 8083ddc:	e01a      	b.n	8083e14 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8083dde:	d92f      	bls.n	8083e40 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
 8083de0:	6933      	ldr	r3, [r6, #16]
 8083de2:	42a3      	cmp	r3, r4
 8083de4:	d013      	beq.n	8083e0e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
 8083de6:	4620      	mov	r0, r4
 8083de8:	f004 fb64 	bl	80884b4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8083dec:	7c03      	ldrb	r3, [r0, #16]
 8083dee:	454b      	cmp	r3, r9
 8083df0:	d905      	bls.n	8083dfe <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
 8083df2:	68e3      	ldr	r3, [r4, #12]
 8083df4:	2b00      	cmp	r3, #0
 8083df6:	bf14      	ite	ne
 8083df8:	4604      	movne	r4, r0
 8083dfa:	2000      	moveq	r0, #0
 8083dfc:	e008      	b.n	8083e10 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
 8083dfe:	4668      	mov	r0, sp
 8083e00:	4642      	mov	r2, r8
 8083e02:	4631      	mov	r1, r6
 8083e04:	f7ff ff87 	bl	8083d16 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8083e08:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8083e0c:	e000      	b.n	8083e10 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
 8083e0e:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
 8083e10:	4621      	mov	r1, r4
 8083e12:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
 8083e14:	b1a1      	cbz	r1, 8083e40 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
 8083e16:	b944      	cbnz	r4, 8083e2a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 8083e18:	428f      	cmp	r7, r1
 8083e1a:	d006      	beq.n	8083e2a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
 8083e1c:	7c08      	ldrb	r0, [r1, #16]
 8083e1e:	7c2b      	ldrb	r3, [r5, #16]
 8083e20:	4283      	cmp	r3, r0
 8083e22:	bf2c      	ite	cs
 8083e24:	2000      	movcs	r0, #0
 8083e26:	2001      	movcc	r0, #1
 8083e28:	e000      	b.n	8083e2c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
 8083e2a:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8083e2c:	463b      	mov	r3, r7
 8083e2e:	460a      	mov	r2, r1
 8083e30:	4629      	mov	r1, r5
 8083e32:	f004 fb54 	bl	80884de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 8083e36:	6973      	ldr	r3, [r6, #20]
 8083e38:	4628      	mov	r0, r5
 8083e3a:	3301      	adds	r3, #1
 8083e3c:	6173      	str	r3, [r6, #20]
 8083e3e:	e010      	b.n	8083e62 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083e40:	f105 0014 	add.w	r0, r5, #20
 8083e44:	f7fc f9bb 	bl	80801be <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8083e48:	4628      	mov	r0, r5
 8083e4a:	f7fc f92c 	bl	80800a6 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
 8083e4e:	4620      	mov	r0, r4
 8083e50:	e007      	b.n	8083e62 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
 8083e52:	4631      	mov	r1, r6
 8083e54:	4642      	mov	r2, r8
 8083e56:	4668      	mov	r0, sp
 8083e58:	f7ff ff5d 	bl	8083d16 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8083e5c:	9c00      	ldr	r4, [sp, #0]
 8083e5e:	9901      	ldr	r1, [sp, #4]
 8083e60:	e7d8      	b.n	8083e14 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8083e62:	b003      	add	sp, #12
 8083e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08083e68 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8083e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
 8083e6a:	1d04      	adds	r4, r0, #4
 8083e6c:	460a      	mov	r2, r1
 8083e6e:	4621      	mov	r1, r4
 8083e70:	6883      	ldr	r3, [r0, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8083e72:	b14b      	cbz	r3, 8083e88 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8083e74:	7815      	ldrb	r5, [r2, #0]
 8083e76:	7c1e      	ldrb	r6, [r3, #16]
 8083e78:	42ae      	cmp	r6, r5
 8083e7a:	bf3a      	itte	cc
 8083e7c:	68dd      	ldrcc	r5, [r3, #12]
 8083e7e:	460b      	movcc	r3, r1
 8083e80:	689d      	ldrcs	r5, [r3, #8]
 8083e82:	4619      	mov	r1, r3
 8083e84:	462b      	mov	r3, r5
 8083e86:	e7f4      	b.n	8083e72 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8083e88:	428c      	cmp	r4, r1
 8083e8a:	d003      	beq.n	8083e94 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
 8083e8c:	7814      	ldrb	r4, [r2, #0]
 8083e8e:	7c0b      	ldrb	r3, [r1, #16]
 8083e90:	429c      	cmp	r4, r3
 8083e92:	d208      	bcs.n	8083ea6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8083e94:	ab04      	add	r3, sp, #16
 8083e96:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8083e9a:	aa02      	add	r2, sp, #8
 8083e9c:	9200      	str	r2, [sp, #0]
 8083e9e:	4a04      	ldr	r2, [pc, #16]	; (8083eb0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
 8083ea0:	f7ff ff61 	bl	8083d66 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8083ea4:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
 8083ea6:	f101 0014 	add.w	r0, r1, #20
      }
 8083eaa:	b004      	add	sp, #16
 8083eac:	bd70      	pop	{r4, r5, r6, pc}
 8083eae:	bf00      	nop
 8083eb0:	0808d706 	.word	0x0808d706

08083eb4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
 8083eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8083eb8:	4604      	mov	r4, r0
 8083eba:	461d      	mov	r5, r3
 8083ebc:	4689      	mov	r9, r1
 8083ebe:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 8083ec0:	2100      	movs	r1, #0
 8083ec2:	2210      	movs	r2, #16
 8083ec4:	3008      	adds	r0, #8
 8083ec6:	f005 ffdf 	bl	8089e88 <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
  command_list[UBI_TCP] = &builderTcp;
 8083eca:	2301      	movs	r3, #1
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
 8083ecc:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
 8083ece:	ad02      	add	r5, sp, #8
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 8083ed0:	f104 0208 	add.w	r2, r4, #8
 8083ed4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8083ed8:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 8083eda:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 8083edc:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
 8083ede:	6162      	str	r2, [r4, #20]
 8083ee0:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 8083ee2:	61a7      	str	r7, [r4, #24]
 8083ee4:	4630      	mov	r0, r6
 8083ee6:	f7ff ffbf 	bl	8083e68 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8083eea:	4915      	ldr	r1, [pc, #84]	; (8083f40 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
 8083eec:	f7ff fec8 	bl	8083c80 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
 8083ef0:	4629      	mov	r1, r5
 8083ef2:	4630      	mov	r0, r6
 8083ef4:	f88d 7007 	strb.w	r7, [sp, #7]
 8083ef8:	f7ff ffb6 	bl	8083e68 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8083efc:	4911      	ldr	r1, [pc, #68]	; (8083f44 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
 8083efe:	f7ff febf 	bl	8083c80 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
 8083f02:	2302      	movs	r3, #2
 8083f04:	4629      	mov	r1, r5
 8083f06:	4630      	mov	r0, r6
 8083f08:	f88d 3007 	strb.w	r3, [sp, #7]
 8083f0c:	f7ff ffac 	bl	8083e68 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8083f10:	490d      	ldr	r1, [pc, #52]	; (8083f48 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
 8083f12:	f7ff feb5 	bl	8083c80 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
 8083f16:	2303      	movs	r3, #3
 8083f18:	4629      	mov	r1, r5
 8083f1a:	4630      	mov	r0, r6
 8083f1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8083f20:	f7ff ffa2 	bl	8083e68 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8083f24:	4909      	ldr	r1, [pc, #36]	; (8083f4c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
 8083f26:	f7ff feab 	bl	8083c80 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
  _token = token;
}
 8083f2a:	4620      	mov	r0, r4
  _iot_protocol = iot_protocol;
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
 8083f2c:	4b08      	ldr	r3, [pc, #32]	; (8083f50 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
 8083f2e:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
 8083f32:	4b08      	ldr	r3, [pc, #32]	; (8083f54 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
 8083f34:	f8c3 8000 	str.w	r8, [r3]
}
 8083f38:	b003      	add	sp, #12
 8083f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083f3e:	bf00      	nop
 8083f40:	08083b89 	.word	0x08083b89
 8083f44:	08083bbd 	.word	0x08083bbd
 8083f48:	08083bed 	.word	0x08083bed
 8083f4c:	08083c21 	.word	0x08083c21
 8083f50:	200007c8 	.word	0x200007c8
 8083f54:	200007c4 	.word	0x200007c4

08083f58 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
 8083f58:	b570      	push	{r4, r5, r6, lr}
 8083f5a:	4d10      	ldr	r5, [pc, #64]	; (8083f9c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
 8083f5c:	f001 f960 	bl	8085220 <HAL_Pin_Map>
 8083f60:	4c0f      	ldr	r4, [pc, #60]	; (8083fa0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
 8083f62:	4e10      	ldr	r6, [pc, #64]	; (8083fa4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
 8083f64:	4628      	mov	r0, r5
 8083f66:	f002 f9b3 	bl	80862d0 <_ZN9TCPClientC1Ev>
 8083f6a:	4628      	mov	r0, r5
 8083f6c:	4d0e      	ldr	r5, [pc, #56]	; (8083fa8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
 8083f6e:	4622      	mov	r2, r4
 8083f70:	4631      	mov	r1, r6
 8083f72:	f004 fa3d 	bl	80883f0 <__aeabi_atexit>
 8083f76:	4628      	mov	r0, r5
 8083f78:	f002 f9aa 	bl	80862d0 <_ZN9TCPClientC1Ev>
 8083f7c:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
 8083f7e:	4d0b      	ldr	r5, [pc, #44]	; (8083fac <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
 8083f80:	4622      	mov	r2, r4
 8083f82:	4631      	mov	r1, r6
 8083f84:	f004 fa34 	bl	80883f0 <__aeabi_atexit>
 8083f88:	4628      	mov	r0, r5
 8083f8a:	f002 fe03 	bl	8086b94 <_ZN3UDPC1Ev>
 8083f8e:	4622      	mov	r2, r4
 8083f90:	4628      	mov	r0, r5
 8083f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083f96:	4906      	ldr	r1, [pc, #24]	; (8083fb0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
 8083f98:	f004 ba2a 	b.w	80883f0 <__aeabi_atexit>
 8083f9c:	200007a8 	.word	0x200007a8
 8083fa0:	20000140 	.word	0x20000140
 8083fa4:	08082b3d 	.word	0x08082b3d
 8083fa8:	2000078c 	.word	0x2000078c
 8083fac:	200007cc 	.word	0x200007cc
 8083fb0:	08083c4d 	.word	0x08083c4d

08083fb4 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
 8083fb4:	b508      	push	{r3, lr}
 8083fb6:	f001 f933 	bl	8085220 <HAL_Pin_Map>
 8083fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8083fbe:	f001 b9cf 	b.w	8085360 <HAL_Timer_Get_Milli_Seconds>
	...

08083fc4 <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
 8083fc4:	4800      	ldr	r0, [pc, #0]	; (8083fc8 <_ZN6UbiUDP3getEPKcS1_+0x4>)
 8083fc6:	4770      	bx	lr
 8083fc8:	cda2425f 	.word	0xcda2425f

08083fcc <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
 8083fcc:	7501      	strb	r1, [r0, #20]
 8083fce:	4770      	bx	lr

08083fd0 <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
 8083fd0:	b530      	push	{r4, r5, lr}
               const char *token) {
 8083fd2:	4d06      	ldr	r5, [pc, #24]	; (8083fec <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
  _host = host;
  _user_agent = user_agent;
 8083fd4:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
 8083fd6:	6005      	str	r5, [r0, #0]
 8083fd8:	2500      	movs	r5, #0
 8083fda:	7505      	strb	r5, [r0, #20]
 8083fdc:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
 8083fe0:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
 8083fe2:	6185      	str	r5, [r0, #24]
  _host = host;
 8083fe4:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8083fe6:	60c3      	str	r3, [r0, #12]
  _port = port;
 8083fe8:	6102      	str	r2, [r0, #16]
}
 8083fea:	bd30      	pop	{r4, r5, pc}
 8083fec:	0808d7bc 	.word	0x0808d7bc

08083ff0 <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 8083ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
#elif (PLATFORM_ID == 13 || PLATFORM_ID == 10)  // Boron(13), Electron(10)
  return Cellular.resolve(_host);
 8083ff2:	684f      	ldr	r7, [r1, #4]

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 8083ff4:	b085      	sub	sp, #20
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8083ff6:	2600      	movs	r6, #0
 8083ff8:	ac04      	add	r4, sp, #16
 8083ffa:	4605      	mov	r5, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083ffc:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8083ffe:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084002:	f006 fcc1 	bl	808a988 <strlen>
 8084006:	4b0a      	ldr	r3, [pc, #40]	; (8084030 <_ZN6UbiUDP11getServerIpEv+0x40>)
 8084008:	9600      	str	r6, [sp, #0]
 808400a:	b281      	uxth	r1, r0
 808400c:	685b      	ldr	r3, [r3, #4]
 808400e:	4622      	mov	r2, r4
 8084010:	4638      	mov	r0, r7
 8084012:	f001 fb0d 	bl	8085630 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8084016:	b120      	cbz	r0, 8084022 <_ZN6UbiUDP11getServerIpEv+0x32>
 8084018:	4631      	mov	r1, r6
 808401a:	4628      	mov	r0, r5
 808401c:	f003 fb56 	bl	80876cc <_ZN9IPAddressC1Em>
 8084020:	e003      	b.n	808402a <_ZN6UbiUDP11getServerIpEv+0x3a>
 8084022:	4621      	mov	r1, r4
 8084024:	4628      	mov	r0, r5
 8084026:	f003 fb49 	bl	80876bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 808402a:	4628      	mov	r0, r5
 808402c:	b005      	add	sp, #20
 808402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084030:	20000d58 	.word	0x20000d58

08084034 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 8084034:	b530      	push	{r4, r5, lr}
 8084036:	b087      	sub	sp, #28
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084038:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 808403a:	4604      	mov	r4, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 808403c:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
 808403e:	461d      	mov	r5, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
 8084040:	f7ff ffd6 	bl	8083ff0 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 8084044:	a802      	add	r0, sp, #8
 8084046:	f003 fb47 	bl	80876d8 <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
 808404a:	b980      	cbnz	r0, 808406e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    if (_debug) {
 808404c:	7d23      	ldrb	r3, [r4, #20]
 808404e:	b123      	cbz	r3, 808405a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
 8084050:	f003 fbda 	bl	8087808 <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
 8084054:	4921      	ldr	r1, [pc, #132]	; (80840dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa8>)
 8084056:	f002 faaa 	bl	80865ae <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
 808405a:	23f3      	movs	r3, #243	; 0xf3
 808405c:	9300      	str	r3, [sp, #0]
 808405e:	2237      	movs	r2, #55	; 0x37
 8084060:	233d      	movs	r3, #61	; 0x3d
 8084062:	21a9      	movs	r1, #169	; 0xa9
 8084064:	a804      	add	r0, sp, #16
 8084066:	f003 fb47 	bl	80876f8 <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 808406a:	9b05      	ldr	r3, [sp, #20]
 808406c:	9303      	str	r3, [sp, #12]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
 808406e:	2200      	movs	r2, #0
 8084070:	f240 21bd 	movw	r1, #701	; 0x2bd
 8084074:	481a      	ldr	r0, [pc, #104]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084076:	f002 fdbd 	bl	8086bf4 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
 808407a:	2200      	movs	r2, #0
 808407c:	f242 3134 	movw	r1, #9012	; 0x2334
 8084080:	4817      	ldr	r0, [pc, #92]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084082:	f002 fc99 	bl	80869b8 <_ZN3UDP5beginEtm>
 8084086:	4b17      	ldr	r3, [pc, #92]	; (80840e4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb0>)
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8084088:	f242 3234 	movw	r2, #9012	; 0x2334
 808408c:	9304      	str	r3, [sp, #16]
 808408e:	9b03      	ldr	r3, [sp, #12]
 8084090:	a904      	add	r1, sp, #16
 8084092:	4813      	ldr	r0, [pc, #76]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 8084094:	9305      	str	r3, [sp, #20]
 8084096:	f002 fdc7 	bl	8086c28 <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 808409a:	b168      	cbz	r0, 80840b8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 808409c:	b165      	cbz	r5, 80840b8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
      return write((const uint8_t *)str, strlen(str));
 808409e:	4628      	mov	r0, r5
 80840a0:	f006 fc72 	bl	808a988 <strlen>
 80840a4:	4629      	mov	r1, r5
 80840a6:	4602      	mov	r2, r0
 80840a8:	480d      	ldr	r0, [pc, #52]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 80840aa:	f002 fce0 	bl	8086a6e <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 80840ae:	b118      	cbz	r0, 80840b8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x84>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 80840b0:	480b      	ldr	r0, [pc, #44]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 80840b2:	f002 fc2f 	bl	8086914 <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 80840b6:	b958      	cbnz	r0, 80840d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
 80840b8:	7d23      	ldrb	r3, [r4, #20]
 80840ba:	b123      	cbz	r3, 80840c6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x92>
      Serial.println("ERROR sending values with UDP");
 80840bc:	f003 fba4 	bl	8087808 <_Z16_fetch_usbserialv>
 80840c0:	4909      	ldr	r1, [pc, #36]	; (80840e8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 80840c2:	f002 fa74 	bl	80865ae <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
 80840c6:	4806      	ldr	r0, [pc, #24]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 80840c8:	f002 fc9e 	bl	8086a08 <_ZN3UDP4stopEv>
    return false;
 80840cc:	2000      	movs	r0, #0
 80840ce:	e003      	b.n	80840d8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa4>
  }

  _client_udp_ubi.stop();
 80840d0:	4803      	ldr	r0, [pc, #12]	; (80840e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>)
 80840d2:	f002 fc99 	bl	8086a08 <_ZN3UDP4stopEv>
  return true;
 80840d6:	2001      	movs	r0, #1
}
 80840d8:	b007      	add	sp, #28
 80840da:	bd30      	pop	{r4, r5, pc}
 80840dc:	0808d707 	.word	0x0808d707
 80840e0:	20000808 	.word	0x20000808
 80840e4:	0808db3c 	.word	0x0808db3c
 80840e8:	0808d793 	.word	0x0808d793

080840ec <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 80840ec:	b510      	push	{r4, lr}
 80840ee:	4c06      	ldr	r4, [pc, #24]	; (8084108 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
 80840f0:	f001 f896 	bl	8085220 <HAL_Pin_Map>
 80840f4:	4620      	mov	r0, r4
 80840f6:	f002 fd4d 	bl	8086b94 <_ZN3UDPC1Ev>
 80840fa:	4620      	mov	r0, r4
 80840fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084100:	4a02      	ldr	r2, [pc, #8]	; (808410c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
 8084102:	4903      	ldr	r1, [pc, #12]	; (8084110 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
 8084104:	f004 b974 	b.w	80883f0 <__aeabi_atexit>
 8084108:	20000808 	.word	0x20000808
 808410c:	20000140 	.word	0x20000140
 8084110:	08083c4d 	.word	0x08083c4d

08084114 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
 8084114:	4800      	ldr	r0, [pc, #0]	; (8084118 <_ZN11UbiParticle3getEPKcS1_+0x4>)
 8084116:	4770      	bx	lr
 8084118:	cda2425f 	.word	0xcda2425f

0808411c <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
 808411c:	7401      	strb	r1, [r0, #16]
 808411e:	4770      	bx	lr

08084120 <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
 8084120:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
 8084122:	4c04      	ldr	r4, [pc, #16]	; (8084134 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
  _host = host;
  _user_agent = user_agent;
 8084124:	6083      	str	r3, [r0, #8]
  _token = token;
 8084126:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
 8084128:	6004      	str	r4, [r0, #0]
 808412a:	2400      	movs	r4, #0
 808412c:	7404      	strb	r4, [r0, #16]
  _host = host;
 808412e:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
 8084130:	60c3      	str	r3, [r0, #12]
}
 8084132:	bd10      	pop	{r4, pc}
 8084134:	0808d7d0 	.word	0x0808d7d0

08084138 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8084138:	b570      	push	{r4, r5, r6, lr}
 808413a:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808413c:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 808413e:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8084140:	f001 faf6 	bl	8085730 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 8084144:	b908      	cbnz	r0, 808414a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
 8084146:	2000      	movs	r0, #0
 8084148:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
 808414a:	2c00      	cmp	r4, #0
 808414c:	dd03      	ble.n	8084156 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
 808414e:	f001 f907 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
 8084152:	4605      	mov	r5, r0
 8084154:	e000      	b.n	8084158 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 8084156:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8084158:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 808415a:	b93b      	cbnz	r3, 808416c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
 808415c:	2c00      	cmp	r4, #0
 808415e:	dd07      	ble.n	8084170 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8084160:	f001 f8fe 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
 8084164:	1b40      	subs	r0, r0, r5
 8084166:	42a0      	cmp	r0, r4
 8084168:	d302      	bcc.n	8084170 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 808416a:	e7ec      	b.n	8084146 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
 808416c:	2001      	movs	r0, #1
 808416e:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 8084170:	f001 fb62 	bl	8085838 <spark_process>
 8084174:	e7f0      	b.n	8084158 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

08084176 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
 8084176:	b530      	push	{r4, r5, lr}
 8084178:	b085      	sub	sp, #20
 808417a:	461a      	mov	r2, r3
 808417c:	9b08      	ldr	r3, [sp, #32]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808417e:	a802      	add	r0, sp, #8
 8084180:	781b      	ldrb	r3, [r3, #0]
 8084182:	f88d 3000 	strb.w	r3, [sp]
 8084186:	233c      	movs	r3, #60	; 0x3c
 8084188:	f003 f8ec 	bl	8087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808418c:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
 808418e:	2100      	movs	r1, #0
 8084190:	4620      	mov	r0, r4
 8084192:	f7ff ffd1 	bl	8084138 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
 8084196:	7863      	ldrb	r3, [r4, #1]
 8084198:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
 808419c:	b133      	cbz	r3, 80841ac <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
 808419e:	2100      	movs	r1, #0
 80841a0:	4620      	mov	r0, r4
 80841a2:	f7ff ffc9 	bl	8084138 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80841a6:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
 80841a8:	2b01      	cmp	r3, #1
 80841aa:	d013      	beq.n	80841d4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
 80841ac:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80841ae:	9c03      	ldr	r4, [sp, #12]
 80841b0:	b194      	cbz	r4, 80841d8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80841b2:	6863      	ldr	r3, [r4, #4]
 80841b4:	3b01      	subs	r3, #1
 80841b6:	6063      	str	r3, [r4, #4]
 80841b8:	b973      	cbnz	r3, 80841d8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
 80841ba:	6823      	ldr	r3, [r4, #0]
 80841bc:	4620      	mov	r0, r4
 80841be:	689b      	ldr	r3, [r3, #8]
 80841c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80841c2:	68a3      	ldr	r3, [r4, #8]
 80841c4:	3b01      	subs	r3, #1
 80841c6:	60a3      	str	r3, [r4, #8]
 80841c8:	b933      	cbnz	r3, 80841d8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
 80841ca:	6823      	ldr	r3, [r4, #0]
 80841cc:	4620      	mov	r0, r4
 80841ce:	68db      	ldr	r3, [r3, #12]
 80841d0:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
 80841d2:	e001      	b.n	80841d8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
 80841d4:	7b25      	ldrb	r5, [r4, #12]
 80841d6:	e7ea      	b.n	80841ae <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
 80841d8:	4628      	mov	r0, r5
 80841da:	b005      	add	sp, #20
 80841dc:	bd30      	pop	{r4, r5, pc}

080841de <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
 80841de:	f001 b81f 	b.w	8085220 <HAL_Pin_Map>

080841e2 <_ZN9CE_BME280C1Ev>:
 ***************************************************************************/



CE_BME280::CE_BME280()
{}
 80841e2:	4770      	bx	lr

080841e4 <_ZN9CE_BME2806write8Ehh>:
/*!
    @brief  Writes an 8 bit value over I2C/SPI
*/
/**************************************************************************/
void CE_BME280::write8(byte reg, byte value)
{
 80841e4:	b570      	push	{r4, r5, r6, lr}
 80841e6:	4606      	mov	r6, r0
 80841e8:	4614      	mov	r4, r2
 80841ea:	460d      	mov	r5, r1
    Wire.beginTransmission((uint8_t)_i2caddr);
 80841ec:	f004 f8b4 	bl	8088358 <_Z19__fetch_global_Wirev>
 80841f0:	7831      	ldrb	r1, [r6, #0]
 80841f2:	f003 fda4 	bl	8087d3e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 80841f6:	f004 f8af 	bl	8088358 <_Z19__fetch_global_Wirev>
 80841fa:	6803      	ldr	r3, [r0, #0]
 80841fc:	4629      	mov	r1, r5
 80841fe:	689b      	ldr	r3, [r3, #8]
 8084200:	4798      	blx	r3
    Wire.write((uint8_t)value);
 8084202:	f004 f8a9 	bl	8088358 <_Z19__fetch_global_Wirev>
 8084206:	6803      	ldr	r3, [r0, #0]
 8084208:	4621      	mov	r1, r4
 808420a:	689b      	ldr	r3, [r3, #8]
 808420c:	4798      	blx	r3
    Wire.endTransmission();
 808420e:	f004 f8a3 	bl	8088358 <_Z19__fetch_global_Wirev>
}
 8084212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void CE_BME280::write8(byte reg, byte value)
{
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 8084216:	f003 bd9d 	b.w	8087d54 <_ZN7TwoWire15endTransmissionEv>

0808421a <_ZN9CE_BME2805read8Eh>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t CE_BME280::read8(byte reg)
{
 808421a:	b538      	push	{r3, r4, r5, lr}
 808421c:	4604      	mov	r4, r0
 808421e:	460d      	mov	r5, r1
  uint8_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 8084220:	f004 f89a 	bl	8088358 <_Z19__fetch_global_Wirev>
 8084224:	7821      	ldrb	r1, [r4, #0]
 8084226:	f003 fd8a 	bl	8087d3e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 808422a:	f004 f895 	bl	8088358 <_Z19__fetch_global_Wirev>
 808422e:	6803      	ldr	r3, [r0, #0]
 8084230:	4629      	mov	r1, r5
 8084232:	689b      	ldr	r3, [r3, #8]
 8084234:	4798      	blx	r3
    Wire.endTransmission();
 8084236:	f004 f88f 	bl	8088358 <_Z19__fetch_global_Wirev>
 808423a:	f003 fd8b 	bl	8087d54 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
 808423e:	f004 f88b 	bl	8088358 <_Z19__fetch_global_Wirev>
 8084242:	7821      	ldrb	r1, [r4, #0]
 8084244:	2201      	movs	r2, #1
 8084246:	f003 fd77 	bl	8087d38 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 808424a:	f004 f885 	bl	8088358 <_Z19__fetch_global_Wirev>
 808424e:	6803      	ldr	r3, [r0, #0]
 8084250:	695b      	ldr	r3, [r3, #20]
 8084252:	4798      	blx	r3
 8084254:	4604      	mov	r4, r0
    Wire.endTransmission();
 8084256:	f004 f87f 	bl	8088358 <_Z19__fetch_global_Wirev>
 808425a:	f003 fd7b 	bl	8087d54 <_ZN7TwoWire15endTransmissionEv>
 
  return value;
}
 808425e:	b2e0      	uxtb	r0, r4
 8084260:	bd38      	pop	{r3, r4, r5, pc}

08084262 <_ZN9CE_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C
*/
/**************************************************************************/
uint16_t CE_BME280::read16(byte reg)
{
 8084262:	b538      	push	{r3, r4, r5, lr}
 8084264:	4604      	mov	r4, r0
 8084266:	460d      	mov	r5, r1
  uint16_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 8084268:	f004 f876 	bl	8088358 <_Z19__fetch_global_Wirev>
 808426c:	7821      	ldrb	r1, [r4, #0]
 808426e:	f003 fd66 	bl	8087d3e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8084272:	f004 f871 	bl	8088358 <_Z19__fetch_global_Wirev>
 8084276:	6803      	ldr	r3, [r0, #0]
 8084278:	4629      	mov	r1, r5
 808427a:	689b      	ldr	r3, [r3, #8]
 808427c:	4798      	blx	r3
    Wire.endTransmission();
 808427e:	f004 f86b 	bl	8088358 <_Z19__fetch_global_Wirev>
 8084282:	f003 fd67 	bl	8087d54 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
 8084286:	f004 f867 	bl	8088358 <_Z19__fetch_global_Wirev>
 808428a:	7821      	ldrb	r1, [r4, #0]
 808428c:	2202      	movs	r2, #2
 808428e:	f003 fd53 	bl	8087d38 <_ZN7TwoWire11requestFromEhj>
    value = (Wire.read() << 8) | Wire.read();
 8084292:	f004 f861 	bl	8088358 <_Z19__fetch_global_Wirev>
 8084296:	6803      	ldr	r3, [r0, #0]
 8084298:	695b      	ldr	r3, [r3, #20]
 808429a:	4798      	blx	r3
 808429c:	4605      	mov	r5, r0
 808429e:	f004 f85b 	bl	8088358 <_Z19__fetch_global_Wirev>
 80842a2:	6803      	ldr	r3, [r0, #0]
 80842a4:	695b      	ldr	r3, [r3, #20]
 80842a6:	4798      	blx	r3
 80842a8:	4604      	mov	r4, r0
    Wire.endTransmission();
 80842aa:	f004 f855 	bl	8088358 <_Z19__fetch_global_Wirev>
 80842ae:	f003 fd51 	bl	8087d54 <_ZN7TwoWire15endTransmissionEv>
  

  return value;
 80842b2:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
}
 80842b6:	b280      	uxth	r0, r0
 80842b8:	bd38      	pop	{r3, r4, r5, pc}

080842ba <_ZN9CE_BME2809read16_LEEh>:

uint16_t CE_BME280::read16_LE(byte reg) {
 80842ba:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 80842bc:	f7ff ffd1 	bl	8084262 <_ZN9CE_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 80842c0:	ba40      	rev16	r0, r0

}
 80842c2:	b280      	uxth	r0, r0
 80842c4:	bd08      	pop	{r3, pc}

080842c6 <_ZN9CE_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 80842c6:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80842c8:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 80842ca:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80842cc:	f7ff fff5 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80842d0:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80842d2:	81a0      	strh	r0, [r4, #12]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80842d4:	4620      	mov	r0, r4
 80842d6:	f7ff fff0 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 80842da:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80842dc:	81e0      	strh	r0, [r4, #14]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80842de:	4620      	mov	r0, r4
 80842e0:	f7ff ffeb 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80842e4:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80842e6:	8220      	strh	r0, [r4, #16]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80842e8:	4620      	mov	r0, r4
 80842ea:	f7ff ffe6 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80842ee:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80842f0:	8260      	strh	r0, [r4, #18]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80842f2:	4620      	mov	r0, r4
 80842f4:	f7ff ffe1 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 80842f8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80842fa:	82a0      	strh	r0, [r4, #20]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 80842fc:	4620      	mov	r0, r4
 80842fe:	f7ff ffdc 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 8084302:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 8084304:	82e0      	strh	r0, [r4, #22]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084306:	4620      	mov	r0, r4
 8084308:	f7ff ffd7 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 808430c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 808430e:	8320      	strh	r0, [r4, #24]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084310:	4620      	mov	r0, r4
 8084312:	f7ff ffd2 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 8084316:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 8084318:	8360      	strh	r0, [r4, #26]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808431a:	4620      	mov	r0, r4
 808431c:	f7ff ffcd 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 8084320:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 8084322:	83a0      	strh	r0, [r4, #28]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084324:	4620      	mov	r0, r4
 8084326:	f7ff ffc8 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 808432a:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 808432c:	83e0      	strh	r0, [r4, #30]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808432e:	4620      	mov	r0, r4
 8084330:	f7ff ffc3 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
 8084334:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 8084336:	8420      	strh	r0, [r4, #32]

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084338:	4620      	mov	r0, r4
 808433a:	f7ff ffbe 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 808433e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 8084340:	8460      	strh	r0, [r4, #34]	; 0x22

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8084342:	4620      	mov	r0, r4
 8084344:	f7ff ff69 	bl	808421a <_ZN9CE_BME2805read8Eh>

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 8084348:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 808434a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24

}

int16_t CE_BME280::readS16_LE(byte reg)
{
  return (int16_t)read16_LE(reg);
 808434e:	4620      	mov	r0, r4
 8084350:	f7ff ffb3 	bl	80842ba <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8084354:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 8084356:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8084358:	4620      	mov	r0, r4
 808435a:	f7ff ff5e 	bl	808421a <_ZN9CE_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 808435e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8084360:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 8084364:	4620      	mov	r0, r4
 8084366:	f7ff ff58 	bl	808421a <_ZN9CE_BME2805read8Eh>
 808436a:	21e5      	movs	r1, #229	; 0xe5
 808436c:	4605      	mov	r5, r0
 808436e:	4620      	mov	r0, r4
 8084370:	f7ff ff53 	bl	808421a <_ZN9CE_BME2805read8Eh>
 8084374:	f000 000f 	and.w	r0, r0, #15
 8084378:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 808437c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 808437e:	21e6      	movs	r1, #230	; 0xe6
 8084380:	4620      	mov	r0, r4
 8084382:	f7ff ff4a 	bl	808421a <_ZN9CE_BME2805read8Eh>
 8084386:	21e5      	movs	r1, #229	; 0xe5
 8084388:	4605      	mov	r5, r0
 808438a:	4620      	mov	r0, r4
 808438c:	f7ff ff45 	bl	808421a <_ZN9CE_BME2805read8Eh>
 8084390:	1100      	asrs	r0, r0, #4
 8084392:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8084396:	85a0      	strh	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 8084398:	21e7      	movs	r1, #231	; 0xe7
 808439a:	4620      	mov	r0, r4
 808439c:	f7ff ff3d 	bl	808421a <_ZN9CE_BME2805read8Eh>
 80843a0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80843a4:	bd38      	pop	{r3, r4, r5, pc}

080843a6 <_ZN9CE_BME2805beginEh>:


CE_BME280::CE_BME280()
{}

bool CE_BME280::begin(uint8_t a) {
 80843a6:	b510      	push	{r4, lr}
 80843a8:	4604      	mov	r4, r0
  _i2caddr = a;
 80843aa:	7001      	strb	r1, [r0, #0]

  Wire.begin();
 80843ac:	f003 ffd4 	bl	8088358 <_Z19__fetch_global_Wirev>
 80843b0:	f003 fc8e 	bl	8087cd0 <_ZN7TwoWire5beginEv>

  if (read8(BME280_REGISTER_CHIPID) != 0x60)
 80843b4:	21d0      	movs	r1, #208	; 0xd0
 80843b6:	4620      	mov	r0, r4
 80843b8:	f7ff ff2f 	bl	808421a <_ZN9CE_BME2805read8Eh>
 80843bc:	2860      	cmp	r0, #96	; 0x60
 80843be:	d10e      	bne.n	80843de <_ZN9CE_BME2805beginEh+0x38>
    return false;

  readCoefficients();
 80843c0:	4620      	mov	r0, r4
 80843c2:	f7ff ff80 	bl	80842c6 <_ZN9CE_BME28016readCoefficientsEv>
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
 80843c6:	4620      	mov	r0, r4
 80843c8:	2203      	movs	r2, #3
 80843ca:	21f2      	movs	r1, #242	; 0xf2
 80843cc:	f7ff ff0a 	bl	80841e4 <_ZN9CE_BME2806write8Ehh>
  write8(BME280_REGISTER_CONTROL, 0x3F);
 80843d0:	4620      	mov	r0, r4
 80843d2:	223f      	movs	r2, #63	; 0x3f
 80843d4:	21f4      	movs	r1, #244	; 0xf4
 80843d6:	f7ff ff05 	bl	80841e4 <_ZN9CE_BME2806write8Ehh>
  return true;
 80843da:	2001      	movs	r0, #1
 80843dc:	bd10      	pop	{r4, pc}
  _i2caddr = a;

  Wire.begin();

  if (read8(BME280_REGISTER_CHIPID) != 0x60)
    return false;
 80843de:	2000      	movs	r0, #0

  readCoefficients();
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
  write8(BME280_REGISTER_CONTROL, 0x3F);
  return true;
}
 80843e0:	bd10      	pop	{r4, pc}
	...

080843e4 <_ZN9CE_BME28015readTemperatureEv>:
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 80843e4:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 80843e6:	21fa      	movs	r1, #250	; 0xfa
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 80843e8:	4604      	mov	r4, r0
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 80843ea:	f7ff ff3a 	bl	8084262 <_ZN9CE_BME2806read16Eh>
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 80843ee:	21fc      	movs	r1, #252	; 0xfc
float CE_BME280::readTemperature(void)
{
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
  adc_T <<= 8;
 80843f0:	0205      	lsls	r5, r0, #8
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 80843f2:	4620      	mov	r0, r4
 80843f4:	f7ff ff11 	bl	808421a <_ZN9CE_BME2805read8Eh>
  adc_T >>= 4;

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80843f8:	89a2      	ldrh	r2, [r4, #12]
{
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 80843fa:	4328      	orrs	r0, r5

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
	   ((int32_t)_bme280_calib.dig_T2)) >> 11;

  var2  = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
	     ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80843fc:	ebc2 2320 	rsb	r3, r2, r0, asr #8
	   ((int32_t)_bme280_calib.dig_T3)) >> 14;

  t_fine = var1 + var2;
 8084400:	435b      	muls	r3, r3
 8084402:	0052      	lsls	r2, r2, #1
 8084404:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8084408:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 808440c:	131b      	asrs	r3, r3, #12
 808440e:	4350      	muls	r0, r2
 8084410:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8084414:	4353      	muls	r3, r2
 8084416:	139b      	asrs	r3, r3, #14
 8084418:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 808441c:	60a0      	str	r0, [r4, #8]

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;
 808441e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8084422:	3080      	adds	r0, #128	; 0x80
 8084424:	1200      	asrs	r0, r0, #8
 8084426:	f004 ffad 	bl	8089384 <__aeabi_i2f>
 808442a:	4902      	ldr	r1, [pc, #8]	; (8084434 <_ZN9CE_BME28015readTemperatureEv+0x50>)
 808442c:	f005 f8b2 	bl	8089594 <__aeabi_fdiv>
}
 8084430:	bd38      	pop	{r3, r4, r5, pc}
 8084432:	bf00      	nop
 8084434:	42c80000 	.word	0x42c80000

08084438 <_ZN9CE_BME28012readPressureEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 8084438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 808443c:	21f7      	movs	r1, #247	; 0xf7
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 808443e:	4606      	mov	r6, r0
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8084440:	f7ff ff0f 	bl	8084262 <_ZN9CE_BME2806read16Eh>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084444:	21f9      	movs	r1, #249	; 0xf9
*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8084446:	4607      	mov	r7, r0
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084448:	4630      	mov	r0, r6
 808444a:	f7ff fee6 	bl	808421a <_ZN9CE_BME2805read8Eh>
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 808444e:	68b4      	ldr	r4, [r6, #8]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084450:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 8084454:	17e5      	asrs	r5, r4, #31
 8084456:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 808445a:	f145 35ff 	adc.w	r5, r5, #4294967295
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 808445e:	fba4 8904 	umull	r8, r9, r4, r4
 8084462:	fb04 f305 	mul.w	r3, r4, r5
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084466:	fb02 f105 	mul.w	r1, r2, r5
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 808446a:	eb09 0943 	add.w	r9, r9, r3, lsl #1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 808446e:	17d3      	asrs	r3, r2, #31
 8084470:	fb04 1103 	mla	r1, r4, r3, r1
 8084474:	fba2 2304 	umull	r2, r3, r2, r4
 8084478:	440b      	add	r3, r1
 808447a:	0319      	lsls	r1, r3, #12
 808447c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8084480:	4686      	mov	lr, r0
  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 8084482:	0310      	lsls	r0, r2, #12
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 8084484:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8084488:	fb02 fc09 	mul.w	ip, r2, r9
 808448c:	17d3      	asrs	r3, r2, #31
 808448e:	fb08 cc03 	mla	ip, r8, r3, ip
 8084492:	fba2 2308 	umull	r2, r3, r2, r8
 8084496:	4463      	add	r3, ip
 8084498:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 808449c:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80844a0:	eb1a 0a00 	adds.w	sl, sl, r0
 80844a4:	8a72      	ldrh	r2, [r6, #18]
 80844a6:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80844aa:	eb4b 0b01 	adc.w	fp, fp, r1
 80844ae:	f11a 0000 	adds.w	r0, sl, #0
 80844b2:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 80844b6:	fba0 ab02 	umull	sl, fp, r0, r2
 80844ba:	fb02 bb01 	mla	fp, r2, r1, fp
 80844be:	ea4f 026b 	mov.w	r2, fp, asr #1
 80844c2:	ea4f 73eb 	mov.w	r3, fp, asr #31

  if (var1 == 0) {
 80844c6:	ea52 0103 	orrs.w	r1, r2, r3
 80844ca:	f000 8082 	beq.w	80845d2 <_ZN9CE_BME28012readPressureEv+0x19a>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80844ce:	f9b6 a01c 	ldrsh.w	sl, [r6, #28]
float CE_BME280::readPressure(void) {
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 80844d2:	ea4e 2707 	orr.w	r7, lr, r7, lsl #8
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80844d6:	fb0a f109 	mul.w	r1, sl, r9
 80844da:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80844de:	fb08 110b 	mla	r1, r8, fp, r1
 80844e2:	fbaa 8908 	umull	r8, r9, sl, r8
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80844e6:	f9b6 a01a 	ldrsh.w	sl, [r6, #26]
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80844ea:	4489      	add	r9, r1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80844ec:	fb0a f105 	mul.w	r1, sl, r5
 80844f0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80844f4:	fb04 110b 	mla	r1, r4, fp, r1
 80844f8:	fbaa 4504 	umull	r4, r5, sl, r4
 80844fc:	440d      	add	r5, r1
 80844fe:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 8084502:	ea4f 4a44 	mov.w	sl, r4, lsl #17

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 8084506:	113f      	asrs	r7, r7, #4
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8084508:	eb1a 0a08 	adds.w	sl, sl, r8

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 808450c:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8084510:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 8084514:	eb4b 0b09 	adc.w	fp, fp, r9

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
 8084518:	ea4f 79e7 	mov.w	r9, r7, asr #31
 808451c:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 8084520:	ea45 0557 	orr.w	r5, r5, r7, lsr #1
 8084524:	07fc      	lsls	r4, r7, #31
 8084526:	f640 4735 	movw	r7, #3125	; 0xc35
 808452a:	f9b6 0018 	ldrsh.w	r0, [r6, #24]
 808452e:	f04f 0800 	mov.w	r8, #0
 8084532:	eb18 080a 	adds.w	r8, r8, sl
 8084536:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 808453a:	eb49 090b 	adc.w	r9, r9, fp
 808453e:	ebb4 0408 	subs.w	r4, r4, r8
 8084542:	fba4 0107 	umull	r0, r1, r4, r7
 8084546:	eb65 0509 	sbc.w	r5, r5, r9
 808454a:	fb07 1105 	mla	r1, r7, r5, r1
 808454e:	f005 f96f 	bl	8089830 <__aeabi_ldivmod>
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084552:	f9b6 2022 	ldrsh.w	r2, [r6, #34]	; 0x22
  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8084556:	134c      	asrs	r4, r1, #13
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084558:	fb02 f704 	mul.w	r7, r2, r4
  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 808455c:	0b45      	lsrs	r5, r0, #13
 808455e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 8084562:	17d3      	asrs	r3, r2, #31
 8084564:	fb05 7703 	mla	r7, r5, r3, r7
 8084568:	fba2 2305 	umull	r2, r3, r2, r5
 808456c:	4354      	muls	r4, r2
 808456e:	443b      	add	r3, r7
 8084570:	fb05 4403 	mla	r4, r5, r3, r4
 8084574:	fba2 2305 	umull	r2, r3, r2, r5
 8084578:	4423      	add	r3, r4
 808457a:	0e54      	lsrs	r4, r2, #25
 808457c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 8084580:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8084584:	1824      	adds	r4, r4, r0
 8084586:	ea4f 6563 	mov.w	r5, r3, asr #25
 808458a:	414d      	adcs	r5, r1
 808458c:	4351      	muls	r1, r2
 808458e:	17d3      	asrs	r3, r2, #31
 8084590:	fb00 1303 	mla	r3, r0, r3, r1
 8084594:	fba2 0100 	umull	r0, r1, r2, r0
 8084598:	4419      	add	r1, r3
 808459a:	0cc2      	lsrs	r2, r0, #19
 808459c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80845a0:	1912      	adds	r2, r2, r4
  return (float)p/256;
 80845a2:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80845a6:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80845aa:	416b      	adcs	r3, r5
 80845ac:	0a10      	lsrs	r0, r2, #8
  return (float)p/256;
 80845ae:	17e5      	asrs	r5, r4, #31
 80845b0:	0122      	lsls	r2, r4, #4
  p = 1048576 - adc_P;
  p = (((p<<31) - var2)*3125) / var1;
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80845b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80845b6:	1219      	asrs	r1, r3, #8
  return (float)p/256;
 80845b8:	012b      	lsls	r3, r5, #4
 80845ba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80845be:	1880      	adds	r0, r0, r2
 80845c0:	4159      	adcs	r1, r3
 80845c2:	f004 fef5 	bl	80893b0 <__aeabi_l2f>
 80845c6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80845ca:	f004 ff2f 	bl	808942c <__aeabi_fmul>
 80845ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

  if (var1 == 0) {
    return 0;  // avoid exception caused by division by zero
 80845d2:	2000      	movs	r0, #0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
  return (float)p/256;
}
 80845d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080845d8 <_ZN9CE_BME28012readHumidityEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readHumidity(void) {
 80845d8:	b510      	push	{r4, lr}
 80845da:	4604      	mov	r4, r0

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80845dc:	21fd      	movs	r1, #253	; 0xfd
 80845de:	f7ff fe40 	bl	8084262 <_ZN9CE_BME2806read16Eh>
  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80845e2:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 80845e6:	68a2      	ldr	r2, [r4, #8]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80845e8:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 80845ec:	051b      	lsls	r3, r3, #20

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 80845ee:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80845f2:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
 80845f6:	fb02 0011 	mls	r0, r2, r1, r0
 80845fa:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 80845fe:	13d8      	asrs	r0, r3, #15
	       (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
		    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
		  ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 8084600:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8084604:	f994 102e 	ldrsb.w	r1, [r4, #46]	; 0x2e
 8084608:	4353      	muls	r3, r2
 808460a:	434a      	muls	r2, r1
 808460c:	12db      	asrs	r3, r3, #11
 808460e:	1292      	asrs	r2, r2, #10
 8084610:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8084614:	4353      	muls	r3, r2
 8084616:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 808461a:	129b      	asrs	r3, r3, #10
 808461c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8084620:	4353      	muls	r3, r2
 8084622:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8084626:	139b      	asrs	r3, r3, #14
 8084628:	4343      	muls	r3, r0

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 808462a:	13d8      	asrs	r0, r3, #15
			     ((int32_t)_bme280_calib.dig_H1)) >> 4));
 808462c:	4340      	muls	r0, r0
 808462e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8084632:	11c0      	asrs	r0, r0, #7
 8084634:	4350      	muls	r0, r2
 8084636:	eba3 1020 	sub.w	r0, r3, r0, asr #4

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 808463a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
  float h = (v_x1_u32r>>12);
  return  h / 1024.0;
 808463e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8084642:	bfa8      	it	ge
 8084644:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 8084648:	1300      	asrs	r0, r0, #12
 808464a:	f004 fe9b 	bl	8089384 <__aeabi_i2f>
 808464e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8084652:	f004 feeb 	bl	808942c <__aeabi_fmul>
}
 8084656:	bd10      	pop	{r4, pc}

08084658 <_GLOBAL__sub_I__ZN9CE_BME280C2Ev>:
 8084658:	f000 bde2 	b.w	8085220 <HAL_Pin_Map>

0808465c <_ZN13camera_VC070611common_initEv>:
#include "camera_VC0706.h"

void camera_VC0706::common_init(void) {
	swSerial  = NULL;
 808465c:	2300      	movs	r3, #0
 808465e:	66c3      	str	r3, [r0, #108]	; 0x6c
	hwSerial  = NULL;
 8084660:	6703      	str	r3, [r0, #112]	; 0x70
	frameptr  = 0;
 8084662:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	bufferLen = 0;
 8084666:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
	serialNum = 0;
 808466a:	7003      	strb	r3, [r0, #0]
 808466c:	4770      	bx	lr

0808466e <_ZN13camera_VC0706C1EP11USARTSerial>:
#endif
	common_init();  // Set everything to common state, then...
	swSerial = ser; // ...override swSerial with value passed.
}

camera_VC0706::camera_VC0706(HardwareSerial *ser) {
 808466e:	b508      	push	{r3, lr}
	common_init();  // Set everything to common state, then...
 8084670:	f7ff fff4 	bl	808465c <_ZN13camera_VC070611common_initEv>
	hwSerial = ser; // ...override hwSerial with value passed.
 8084674:	6701      	str	r1, [r0, #112]	; 0x70
}
 8084676:	bd08      	pop	{r3, pc}

08084678 <_ZN13camera_VC070611sendCommandEhPhh>:
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8084678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808467c:	4606      	mov	r6, r0
	if(swSerial) {
 808467e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8084680:	4688      	mov	r8, r1
 8084682:	4617      	mov	r7, r2
 8084684:	1e54      	subs	r4, r2, #1
 8084686:	1e5d      	subs	r5, r3, #1
	if(swSerial) {
 8084688:	b1b8      	cbz	r0, 80846ba <_ZN13camera_VC070611sendCommandEhPhh+0x42>
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
 808468a:	6803      	ldr	r3, [r0, #0]
 808468c:	2156      	movs	r1, #86	; 0x56
 808468e:	689b      	ldr	r3, [r3, #8]
 8084690:	4798      	blx	r3
		swSerial->write((byte)serialNum);
 8084692:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8084694:	7831      	ldrb	r1, [r6, #0]
 8084696:	6803      	ldr	r3, [r0, #0]
 8084698:	443d      	add	r5, r7
 808469a:	689b      	ldr	r3, [r3, #8]
 808469c:	4798      	blx	r3
		swSerial->write((byte)cmd);
 808469e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80846a0:	4641      	mov	r1, r8
 80846a2:	6803      	ldr	r3, [r0, #0]
 80846a4:	689b      	ldr	r3, [r3, #8]
 80846a6:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 80846a8:	42a5      	cmp	r5, r4
 80846aa:	d01f      	beq.n	80846ec <_ZN13camera_VC070611sendCommandEhPhh+0x74>
			swSerial->write((byte)args[i]);
 80846ac:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80846ae:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80846b2:	6803      	ldr	r3, [r0, #0]
 80846b4:	689b      	ldr	r3, [r3, #8]
 80846b6:	4798      	blx	r3
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
		swSerial->write((byte)serialNum);
		swSerial->write((byte)cmd);

		for (uint8_t i=0; i<argn; i++) {
 80846b8:	e7f6      	b.n	80846a8 <_ZN13camera_VC070611sendCommandEhPhh+0x30>
			//Serial.print(args[i], HEX);
		}
#endif
	} else {
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
 80846ba:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80846bc:	2156      	movs	r1, #86	; 0x56
 80846be:	6803      	ldr	r3, [r0, #0]
 80846c0:	443d      	add	r5, r7
 80846c2:	689b      	ldr	r3, [r3, #8]
 80846c4:	4798      	blx	r3
		hwSerial->write((byte)serialNum);
 80846c6:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80846c8:	7831      	ldrb	r1, [r6, #0]
 80846ca:	6803      	ldr	r3, [r0, #0]
 80846cc:	689b      	ldr	r3, [r3, #8]
 80846ce:	4798      	blx	r3
		hwSerial->write((byte)cmd);
 80846d0:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80846d2:	4641      	mov	r1, r8
 80846d4:	6803      	ldr	r3, [r0, #0]
 80846d6:	689b      	ldr	r3, [r3, #8]
 80846d8:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 80846da:	42ac      	cmp	r4, r5
 80846dc:	d006      	beq.n	80846ec <_ZN13camera_VC070611sendCommandEhPhh+0x74>
			hwSerial->write((byte)args[i]);
 80846de:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80846e0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80846e4:	6803      	ldr	r3, [r0, #0]
 80846e6:	689b      	ldr	r3, [r3, #8]
 80846e8:	4798      	blx	r3
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
		hwSerial->write((byte)serialNum);
		hwSerial->write((byte)cmd);

		for (uint8_t i=0; i<argn; i++) {
 80846ea:	e7f6      	b.n	80846da <_ZN13camera_VC070611sendCommandEhPhh+0x62>
 80846ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080846f0 <_ZN13camera_VC070612readResponseEhh>:
		}
#endif
	}
}

uint8_t camera_VC0706::readResponse(uint8_t numbytes, uint8_t timeout) {
 80846f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80846f2:	4605      	mov	r5, r0
 80846f4:	460e      	mov	r6, r1
 80846f6:	4617      	mov	r7, r2
	uint8_t counter = 0;
	bufferLen = 0;
 80846f8:	2400      	movs	r4, #0
 80846fa:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
 80846fe:	42bc      	cmp	r4, r7
 8084700:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
 8084704:	d01f      	beq.n	8084746 <_ZN13camera_VC070612readResponseEhh+0x56>
 8084706:	42b0      	cmp	r0, r6
 8084708:	d01d      	beq.n	8084746 <_ZN13camera_VC070612readResponseEhh+0x56>
		avail = swSerial ? swSerial->available() : hwSerial->available();
 808470a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 808470c:	b900      	cbnz	r0, 8084710 <_ZN13camera_VC070612readResponseEhh+0x20>
 808470e:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8084710:	6803      	ldr	r3, [r0, #0]
 8084712:	691b      	ldr	r3, [r3, #16]
 8084714:	4798      	blx	r3
		if (avail <= 0) {
 8084716:	2800      	cmp	r0, #0
 8084718:	dc05      	bgt.n	8084726 <_ZN13camera_VC070612readResponseEhh+0x36>
			delay(1);
 808471a:	2001      	movs	r0, #1
			counter++;
 808471c:	3401      	adds	r4, #1
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
		avail = swSerial ? swSerial->available() : hwSerial->available();
		if (avail <= 0) {
			delay(1);
 808471e:	f002 f8cb 	bl	80868b8 <delay>
			counter++;
 8084722:	b2e4      	uxtb	r4, r4
			continue;
 8084724:	e7eb      	b.n	80846fe <_ZN13camera_VC070612readResponseEhh+0xe>
		}
		counter = 0;
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
 8084726:	f895 4066 	ldrb.w	r4, [r5, #102]	; 0x66
 808472a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 808472c:	1c63      	adds	r3, r4, #1
 808472e:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
 8084732:	b900      	cbnz	r0, 8084736 <_ZN13camera_VC070612readResponseEhh+0x46>
 8084734:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8084736:	6803      	ldr	r3, [r0, #0]
 8084738:	695b      	ldr	r3, [r3, #20]
 808473a:	4798      	blx	r3
 808473c:	192b      	adds	r3, r5, r4
 808473e:	b2c0      	uxtb	r0, r0
 8084740:	7058      	strb	r0, [r3, #1]
		if (avail <= 0) {
			delay(1);
			counter++;
			continue;
		}
		counter = 0;
 8084742:	2400      	movs	r4, #0
 8084744:	e7db      	b.n	80846fe <_ZN13camera_VC070612readResponseEhh+0xe>
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
	}
	return bufferLen;
}
 8084746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08084748 <_ZN13camera_VC070610getVersionEv>:

	return runCommand(VC0706_DOWNSIZE_CTRL, args, 2, 5);
}

/***************** other high level commands */
char * camera_VC0706::getVersion(void) {
 8084748:	b513      	push	{r0, r1, r4, lr}
 808474a:	4604      	mov	r4, r0
	uint8_t args[] = {0x01};
 808474c:	aa02      	add	r2, sp, #8
 808474e:	2301      	movs	r3, #1
 8084750:	f802 3d04 	strb.w	r3, [r2, #-4]!

	sendCommand(VC0706_GEN_VERSION, args, 1);
 8084754:	2111      	movs	r1, #17
 8084756:	f7ff ff8f 	bl	8084678 <_ZN13camera_VC070611sendCommandEhPhh>
	// get reply
	if (!readResponse(CAMERABUFFSIZ, 200))
 808475a:	22c8      	movs	r2, #200	; 0xc8
 808475c:	2164      	movs	r1, #100	; 0x64
 808475e:	4620      	mov	r0, r4
 8084760:	f7ff ffc6 	bl	80846f0 <_ZN13camera_VC070612readResponseEhh>
 8084764:	b128      	cbz	r0, 8084772 <_ZN13camera_VC070610getVersionEv+0x2a>
		return 0;
	camerabuff[bufferLen] = 0;  // end it!
 8084766:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 808476a:	2200      	movs	r2, #0
 808476c:	4423      	add	r3, r4
 808476e:	705a      	strb	r2, [r3, #1]
	return (char *)camerabuff;  // return it!
 8084770:	1c60      	adds	r0, r4, #1
}
 8084772:	b002      	add	sp, #8
 8084774:	bd10      	pop	{r4, pc}

08084776 <_ZN13camera_VC070614verifyResponseEh>:
	}
	return bufferLen;
}

boolean camera_VC0706::verifyResponse(uint8_t command) {
	if ((camerabuff[0] != 0x76) ||
 8084776:	7843      	ldrb	r3, [r0, #1]
 8084778:	2b76      	cmp	r3, #118	; 0x76
 808477a:	d10b      	bne.n	8084794 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 808477c:	7882      	ldrb	r2, [r0, #2]
 808477e:	7803      	ldrb	r3, [r0, #0]
 8084780:	429a      	cmp	r2, r3
 8084782:	d107      	bne.n	8084794 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[1] != serialNum) ||
 8084784:	78c3      	ldrb	r3, [r0, #3]
 8084786:	428b      	cmp	r3, r1
 8084788:	d104      	bne.n	8084794 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[2] != command) ||
 808478a:	7900      	ldrb	r0, [r0, #4]
 808478c:	fab0 f080 	clz	r0, r0
 8084790:	0940      	lsrs	r0, r0, #5
 8084792:	4770      	bx	lr
	        (camerabuff[3] != 0x0))
		return false;
 8084794:	2000      	movs	r0, #0
	return true;

}
 8084796:	4770      	bx	lr

08084798 <_ZN13camera_VC070610runCommandEhPhhhb>:
	return camerabuff;
}

/**************** low level commands */
boolean camera_VC0706::runCommand(uint8_t cmd, uint8_t *args, uint8_t argn,
                                  uint8_t resplen, boolean flushflag) {
 8084798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808479c:	4698      	mov	r8, r3
 808479e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80847a2:	4604      	mov	r4, r0
 80847a4:	460d      	mov	r5, r1
 80847a6:	4617      	mov	r7, r2
 80847a8:	f89d 6018 	ldrb.w	r6, [sp, #24]
	// flush out anything in the buffer?
	if (flushflag) {
 80847ac:	b11b      	cbz	r3, 80847b6 <_ZN13camera_VC070610runCommandEhPhhhb+0x1e>
		readResponse(100, 10);
 80847ae:	220a      	movs	r2, #10
 80847b0:	2164      	movs	r1, #100	; 0x64
 80847b2:	f7ff ff9d 	bl	80846f0 <_ZN13camera_VC070612readResponseEhh>
	}

	sendCommand(cmd, args, argn);
 80847b6:	4643      	mov	r3, r8
 80847b8:	463a      	mov	r2, r7
 80847ba:	4629      	mov	r1, r5
 80847bc:	4620      	mov	r0, r4
 80847be:	f7ff ff5b 	bl	8084678 <_ZN13camera_VC070611sendCommandEhPhh>
	if (readResponse(resplen, 200) != resplen)
 80847c2:	22c8      	movs	r2, #200	; 0xc8
 80847c4:	4631      	mov	r1, r6
 80847c6:	4620      	mov	r0, r4
 80847c8:	f7ff ff92 	bl	80846f0 <_ZN13camera_VC070612readResponseEhh>
 80847cc:	4286      	cmp	r6, r0
 80847ce:	d105      	bne.n	80847dc <_ZN13camera_VC070610runCommandEhPhhhb+0x44>
		return false;
	if (! verifyResponse(cmd))
 80847d0:	4629      	mov	r1, r5
 80847d2:	4620      	mov	r0, r4
		return false;
	return true;
}
 80847d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}

	sendCommand(cmd, args, argn);
	if (readResponse(resplen, 200) != resplen)
		return false;
	if (! verifyResponse(cmd))
 80847d8:	f7ff bfcd 	b.w	8084776 <_ZN13camera_VC070614verifyResponseEh>
		return false;
	return true;
}
 80847dc:	2000      	movs	r0, #0
 80847de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080847e2 <_ZN13camera_VC07065resetEv>:
	if(swSerial) swSerial->begin(baud);
	else         hwSerial->begin(baud);
	return reset();
}

boolean camera_VC0706::reset() {
 80847e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x0};
 80847e4:	2300      	movs	r3, #0
 80847e6:	aa04      	add	r2, sp, #16
 80847e8:	f802 3d04 	strb.w	r3, [r2, #-4]!

	return runCommand(VC0706_RESET, args, 1, 5);
 80847ec:	2105      	movs	r1, #5
 80847ee:	2301      	movs	r3, #1
 80847f0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80847f4:	2126      	movs	r1, #38	; 0x26
 80847f6:	f7ff ffcf 	bl	8084798 <_ZN13camera_VC070610runCommandEhPhhhb>
}
 80847fa:	b005      	add	sp, #20
 80847fc:	f85d fb04 	ldr.w	pc, [sp], #4

08084800 <_ZN13camera_VC07065beginEt>:
camera_VC0706::camera_VC0706(HardwareSerial *ser) {
	common_init();  // Set everything to common state, then...
	hwSerial = ser; // ...override hwSerial with value passed.
}

boolean camera_VC0706::begin(uint16_t baud) {
 8084800:	b510      	push	{r4, lr}
 8084802:	4604      	mov	r4, r0
	if(swSerial) swSerial->begin(baud);
 8084804:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8084806:	b110      	cbz	r0, 808480e <_ZN13camera_VC07065beginEt+0xe>
 8084808:	f000 fb34 	bl	8084e74 <_ZN18ParticleSoftSerial5beginEm>
 808480c:	e002      	b.n	8084814 <_ZN13camera_VC07065beginEt+0x14>
	else         hwSerial->begin(baud);
 808480e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8084810:	f003 f9e0 	bl	8087bd4 <_ZN11USARTSerial5beginEm>
	return reset();
 8084814:	4620      	mov	r0, r4
}
 8084816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

boolean camera_VC0706::begin(uint16_t baud) {
	if(swSerial) swSerial->begin(baud);
	else         hwSerial->begin(baud);
	return reset();
 808481a:	f7ff bfe2 	b.w	80847e2 <_ZN13camera_VC07065resetEv>

0808481e <_ZN13camera_VC070619cameraFrameBuffCtrlEh>:
boolean camera_VC0706::TVoff() {
	uint8_t args[] = {0x1, 0x0};
	return runCommand(VC0706_TVOUT_CTRL, args, sizeof(args), 5);
}

boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
 808481e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x1, command};
 8084820:	2301      	movs	r3, #1
 8084822:	f88d 300c 	strb.w	r3, [sp, #12]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 8084826:	9301      	str	r3, [sp, #4]
 8084828:	2305      	movs	r3, #5
	uint8_t args[] = {0x1, 0x0};
	return runCommand(VC0706_TVOUT_CTRL, args, sizeof(args), 5);
}

boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
 808482a:	f88d 100d 	strb.w	r1, [sp, #13]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 808482e:	9300      	str	r3, [sp, #0]
 8084830:	aa03      	add	r2, sp, #12
 8084832:	2302      	movs	r3, #2
 8084834:	2136      	movs	r1, #54	; 0x36
 8084836:	f7ff ffaf 	bl	8084798 <_ZN13camera_VC070610runCommandEhPhhhb>
}
 808483a:	b005      	add	sp, #20
 808483c:	f85d fb04 	ldr.w	pc, [sp], #4

08084840 <_ZN13camera_VC070611takePictureEv>:
	return true;
}


boolean camera_VC0706::takePicture() {
	frameptr = 0;
 8084840:	2100      	movs	r1, #0
 8084842:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
	return cameraFrameBuffCtrl(VC0706_STOPCURRENTFRAME);
 8084846:	f7ff bfea 	b.w	808481e <_ZN13camera_VC070619cameraFrameBuffCtrlEh>

0808484a <_ZN13camera_VC070611frameLengthEv>:
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
 808484a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x01, 0x00};
 808484c:	2301      	movs	r3, #1
 808484e:	2200      	movs	r2, #0
 8084850:	f88d 300c 	strb.w	r3, [sp, #12]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 8084854:	9301      	str	r3, [sp, #4]
 8084856:	2309      	movs	r3, #9
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
	uint8_t args[] = {0x01, 0x00};
 8084858:	f88d 200d 	strb.w	r2, [sp, #13]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 808485c:	9300      	str	r3, [sp, #0]
 808485e:	aa03      	add	r2, sp, #12
 8084860:	2302      	movs	r3, #2
 8084862:	2134      	movs	r1, #52	; 0x34
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
	uint8_t args[] = {0x1, command};
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
}

uint32_t camera_VC0706::frameLength(void) {
 8084864:	4604      	mov	r4, r0
	uint8_t args[] = {0x01, 0x00};
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 8084866:	f7ff ff97 	bl	8084798 <_ZN13camera_VC070610runCommandEhPhhhb>
 808486a:	b140      	cbz	r0, 808487e <_ZN13camera_VC070611frameLengthEv+0x34>
 808486c:	88e3      	ldrh	r3, [r4, #6]
	uint32_t len;
	len = camerabuff[5];
	len <<= 8;
	len |= camerabuff[6];
	len <<= 8;
	len |= camerabuff[7];
 808486e:	7a20      	ldrb	r0, [r4, #8]
 8084870:	ba5b      	rev16	r3, r3
 8084872:	b29b      	uxth	r3, r3
 8084874:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	len <<= 8;
	len |= camerabuff[8];
 8084878:	7a63      	ldrb	r3, [r4, #9]
 808487a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8

	return len;
}
 808487e:	b004      	add	sp, #16
 8084880:	bd10      	pop	{r4, pc}

08084882 <_ZN13camera_VC070611readPictureEh>:
uint8_t camera_VC0706::available(void) {
	return bufferLen;
}


uint8_t * camera_VC0706::readPicture(uint8_t n) {
 8084882:	b570      	push	{r4, r5, r6, lr}
 8084884:	4604      	mov	r4, r0
 8084886:	460d      	mov	r5, r1
 8084888:	b086      	sub	sp, #24
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 808488a:	220d      	movs	r2, #13
 808488c:	2100      	movs	r1, #0
 808488e:	a802      	add	r0, sp, #8
 8084890:	f005 fafa 	bl	8089e88 <memset>
 8084894:	230c      	movs	r3, #12
 8084896:	f88d 3008 	strb.w	r3, [sp, #8]
}


uint8_t * camera_VC0706::readPicture(uint8_t n) {
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
 808489a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 808489e:	260a      	movs	r6, #10
 80848a0:	121a      	asrs	r2, r3, #8
 80848a2:	f88d 200d 	strb.w	r2, [sp, #13]
 80848a6:	f88d 300e 	strb.w	r3, [sp, #14]

	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 80848aa:	2205      	movs	r2, #5
 80848ac:	2300      	movs	r3, #0
 80848ae:	e88d 000c 	stmia.w	sp, {r2, r3}
 80848b2:	2132      	movs	r1, #50	; 0x32
 80848b4:	230d      	movs	r3, #13
 80848b6:	aa02      	add	r2, sp, #8
 80848b8:	4620      	mov	r0, r4
uint8_t * camera_VC0706::readPicture(uint8_t n) {
	uint8_t args[] = {0x0C, 0x0, 0x0A,
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
	                  0, 0, 0, n,
	                  CAMERADELAY >> 8, CAMERADELAY & 0xFF
	                 };
 80848ba:	f88d 600a 	strb.w	r6, [sp, #10]
 80848be:	f88d 6014 	strb.w	r6, [sp, #20]
 80848c2:	f88d 5012 	strb.w	r5, [sp, #18]

	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 80848c6:	f7ff ff67 	bl	8084798 <_ZN13camera_VC070610runCommandEhPhhhb>
 80848ca:	b908      	cbnz	r0, 80848d0 <_ZN13camera_VC070611readPictureEh+0x4e>
		return 0;
 80848cc:	2000      	movs	r0, #0
 80848ce:	e00d      	b.n	80848ec <_ZN13camera_VC070611readPictureEh+0x6a>


	// read into the buffer PACKETLEN!
	if (readResponse(n+5, CAMERADELAY) == 0)
 80848d0:	1d69      	adds	r1, r5, #5
 80848d2:	4632      	mov	r2, r6
 80848d4:	b2c9      	uxtb	r1, r1
 80848d6:	4620      	mov	r0, r4
 80848d8:	f7ff ff0a 	bl	80846f0 <_ZN13camera_VC070612readResponseEhh>
 80848dc:	2800      	cmp	r0, #0
 80848de:	d0f5      	beq.n	80848cc <_ZN13camera_VC070611readPictureEh+0x4a>
		return 0;


	frameptr += n;
 80848e0:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68

	return camerabuff;
 80848e4:	1c60      	adds	r0, r4, #1
	// read into the buffer PACKETLEN!
	if (readResponse(n+5, CAMERADELAY) == 0)
		return 0;


	frameptr += n;
 80848e6:	4429      	add	r1, r5
 80848e8:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68

	return camerabuff;
}
 80848ec:	b006      	add	sp, #24
 80848ee:	bd70      	pop	{r4, r5, r6, pc}

080848f0 <_GLOBAL__sub_I__ZN13camera_VC070611common_initEv>:
 80848f0:	f000 bc96 	b.w	8085220 <HAL_Pin_Map>

080848f4 <_ZN18ParticleSoftSerial10rxTimerISREv>:
    detachInterrupt(_rxPin);
  }
}

void ParticleSoftSerial::rxTimerISR(void)
{
 80848f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  static uint8_t parityErr = (_parity & 0x01);
 80848f6:	4c3c      	ldr	r4, [pc, #240]	; (80849e8 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf4>)
 80848f8:	6823      	ldr	r3, [r4, #0]
 80848fa:	07d9      	lsls	r1, r3, #31
 80848fc:	d40c      	bmi.n	8084918 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 80848fe:	4620      	mov	r0, r4
 8084900:	f7fb fbd5 	bl	80800ae <__cxa_guard_acquire>
 8084904:	b140      	cbz	r0, 8084918 <_ZN18ParticleSoftSerial10rxTimerISREv+0x24>
 8084906:	4b39      	ldr	r3, [pc, #228]	; (80849ec <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8084908:	4a39      	ldr	r2, [pc, #228]	; (80849f0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 808490a:	781b      	ldrb	r3, [r3, #0]
 808490c:	4620      	mov	r0, r4
 808490e:	f003 0301 	and.w	r3, r3, #1
 8084912:	7013      	strb	r3, [r2, #0]
 8084914:	f7fb fbd0 	bl	80800b8 <__cxa_guard_release>
  uint8_t bit;

  if (_rxBitPos <= PSS_STARTBIT) return;
 8084918:	4c36      	ldr	r4, [pc, #216]	; (80849f4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 808491a:	7823      	ldrb	r3, [r4, #0]
 808491c:	061a      	lsls	r2, r3, #24
 808491e:	d461      	bmi.n	80849e4 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
  _PSS_DEBUG_HIGH(_debugPin);
  
  if (_rxBitPos == PSS_DATA) // after start bit go for normal bit length
 8084920:	7825      	ldrb	r5, [r4, #0]
 8084922:	4e32      	ldr	r6, [pc, #200]	; (80849ec <_ZN18ParticleSoftSerial10rxTimerISREv+0xf8>)
 8084924:	b26d      	sxtb	r5, r5
 8084926:	b975      	cbnz	r5, 8084946 <_ZN18ParticleSoftSerial10rxTimerISREv+0x52>
  {
    rxTimer.resetPeriod_SIT(_usBitLength, uSec);
 8084928:	4b33      	ldr	r3, [pc, #204]	; (80849f8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x104>)
 808492a:	462a      	mov	r2, r5
 808492c:	6819      	ldr	r1, [r3, #0]
 808492e:	4833      	ldr	r0, [pc, #204]	; (80849fc <_ZN18ParticleSoftSerial10rxTimerISREv+0x108>)
 8084930:	f000 fc48 	bl	80851c4 <_ZN13IntervalTimer15resetPeriod_SITEmb>

    parityErr = (_parity & 0x01);
 8084934:	7833      	ldrb	r3, [r6, #0]
 8084936:	4a2e      	ldr	r2, [pc, #184]	; (80849f0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 8084938:	f003 0301 	and.w	r3, r3, #1
 808493c:	7013      	strb	r3, [r2, #0]
    _rxBuffer[_rxBufferHead] = 0;
 808493e:	4b30      	ldr	r3, [pc, #192]	; (8084a00 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 8084940:	4a30      	ldr	r2, [pc, #192]	; (8084a04 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8084942:	781b      	ldrb	r3, [r3, #0]
 8084944:	54d5      	strb	r5, [r2, r3]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8084946:	4b30      	ldr	r3, [pc, #192]	; (8084a08 <_ZN18ParticleSoftSerial10rxTimerISREv+0x114>)
 8084948:	4a30      	ldr	r2, [pc, #192]	; (8084a0c <_ZN18ParticleSoftSerial10rxTimerISREv+0x118>)
 808494a:	8818      	ldrh	r0, [r3, #0]
 808494c:	231c      	movs	r3, #28
 808494e:	4343      	muls	r3, r0
 8084950:	6812      	ldr	r2, [r2, #0]
 8084952:	18d1      	adds	r1, r2, r3
 8084954:	58d3      	ldr	r3, [r2, r3]
 8084956:	888a      	ldrh	r2, [r1, #4]
 8084958:	691b      	ldr	r3, [r3, #16]
  bit = pinReadFast(_rxPin);
#ifdef _PSS_DEBUG
  b[_rxBitPos+1] = bit;
  usLast[_rxBitPos+1] = micros();
#endif
  if (_rxBitPos <= _dataBits)
 808495a:	492d      	ldr	r1, [pc, #180]	; (8084a10 <_ZN18ParticleSoftSerial10rxTimerISREv+0x11c>)
 808495c:	421a      	tst	r2, r3
 808495e:	7823      	ldrb	r3, [r4, #0]
 8084960:	780d      	ldrb	r5, [r1, #0]
 8084962:	b25b      	sxtb	r3, r3
 8084964:	bf14      	ite	ne
 8084966:	2201      	movne	r2, #1
 8084968:	2200      	moveq	r2, #0
 808496a:	42ab      	cmp	r3, r5
 808496c:	dc0d      	bgt.n	808498a <_ZN18ParticleSoftSerial10rxTimerISREv+0x96>
  {
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
 808496e:	4b21      	ldr	r3, [pc, #132]	; (80849f4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x100>)
 8084970:	4923      	ldr	r1, [pc, #140]	; (8084a00 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 8084972:	781b      	ldrb	r3, [r3, #0]
 8084974:	7809      	ldrb	r1, [r1, #0]
 8084976:	4f23      	ldr	r7, [pc, #140]	; (8084a04 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 8084978:	b2c9      	uxtb	r1, r1
 808497a:	f817 e001 	ldrb.w	lr, [r7, r1]
 808497e:	b25b      	sxtb	r3, r3
 8084980:	fa02 f303 	lsl.w	r3, r2, r3
 8084984:	ea4e 0303 	orr.w	r3, lr, r3
 8084988:	547b      	strb	r3, [r7, r1]
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
 808498a:	7833      	ldrb	r3, [r6, #0]
 808498c:	06db      	lsls	r3, r3, #27
 808498e:	d503      	bpl.n	8084998 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
 8084990:	7823      	ldrb	r3, [r4, #0]
 8084992:	b25b      	sxtb	r3, r3
 8084994:	429d      	cmp	r5, r3
 8084996:	da20      	bge.n	80849da <_ZN18ParticleSoftSerial10rxTimerISREv+0xe6>
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
  }  
  
  if (++_rxBitPos >= _totalBits)
 8084998:	7823      	ldrb	r3, [r4, #0]
 808499a:	4a1e      	ldr	r2, [pc, #120]	; (8084a14 <_ZN18ParticleSoftSerial10rxTimerISREv+0x120>)
 808499c:	3301      	adds	r3, #1
 808499e:	7812      	ldrb	r2, [r2, #0]
 80849a0:	b25b      	sxtb	r3, r3
 80849a2:	4293      	cmp	r3, r2
 80849a4:	7023      	strb	r3, [r4, #0]
 80849a6:	db1d      	blt.n	80849e4 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
  {
    if (parityErr)
 80849a8:	4b11      	ldr	r3, [pc, #68]	; (80849f0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 80849aa:	4a15      	ldr	r2, [pc, #84]	; (8084a00 <_ZN18ParticleSoftSerial10rxTimerISREv+0x10c>)
 80849ac:	781b      	ldrb	r3, [r3, #0]
 80849ae:	b123      	cbz	r3, 80849ba <_ZN18ParticleSoftSerial10rxTimerISREv+0xc6>
    {
      _rxBuffer[_rxBufferHead] = 0xFF;
 80849b0:	7813      	ldrb	r3, [r2, #0]
 80849b2:	4a14      	ldr	r2, [pc, #80]	; (8084a04 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>)
 80849b4:	21ff      	movs	r1, #255	; 0xff
 80849b6:	54d1      	strb	r1, [r2, r3]
 80849b8:	e004      	b.n	80849c4 <_ZN18ParticleSoftSerial10rxTimerISREv+0xd0>
    }
    else
    {
      _rxBufferHead = (_rxBufferHead + 1) % _PSS_BUFF_SIZE;
 80849ba:	7813      	ldrb	r3, [r2, #0]
 80849bc:	3301      	adds	r3, #1
 80849be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80849c2:	7013      	strb	r3, [r2, #0]
    }
    _rxBitPos = PSS_INACTIVE;
 80849c4:	23fe      	movs	r3, #254	; 0xfe
 80849c6:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
 80849c8:	2300      	movs	r3, #0
 80849ca:	9300      	str	r3, [sp, #0]
 80849cc:	2202      	movs	r2, #2
 80849ce:	f04f 33ff 	mov.w	r3, #4294967295
 80849d2:	4911      	ldr	r1, [pc, #68]	; (8084a18 <_ZN18ParticleSoftSerial10rxTimerISREv+0x124>)
 80849d4:	f002 ff84 	bl	80878e0 <_Z15attachInterrupttPFvvE13InterruptModeah>
 80849d8:	e004      	b.n	80849e4 <_ZN18ParticleSoftSerial10rxTimerISREv+0xf0>
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
 80849da:	4b05      	ldr	r3, [pc, #20]	; (80849f0 <_ZN18ParticleSoftSerial10rxTimerISREv+0xfc>)
 80849dc:	7819      	ldrb	r1, [r3, #0]
 80849de:	404a      	eors	r2, r1
 80849e0:	701a      	strb	r2, [r3, #0]
 80849e2:	e7d9      	b.n	8084998 <_ZN18ParticleSoftSerial10rxTimerISREv+0xa4>
    _rxBitPos = PSS_INACTIVE;
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
  }
  _PSS_DEBUG_LOW(_debugPin);
}
 80849e4:	b003      	add	sp, #12
 80849e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80849e8:	2000084c 	.word	0x2000084c
 80849ec:	200008a5 	.word	0x200008a5
 80849f0:	20000850 	.word	0x20000850
 80849f4:	20000040 	.word	0x20000040
 80849f8:	20000034 	.word	0x20000034
 80849fc:	200008f4 	.word	0x200008f4
 8084a00:	200008b0 	.word	0x200008b0
 8084a04:	20000851 	.word	0x20000851
 8084a08:	20000048 	.word	0x20000048
 8084a0c:	200008ac 	.word	0x200008ac
 8084a10:	2000003f 	.word	0x2000003f
 8084a14:	20000030 	.word	0x20000030
 8084a18:	08084a29 	.word	0x08084a29

08084a1c <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 8084a1c:	b510      	push	{r4, lr}
 8084a1e:	4604      	mov	r4, r0
 8084a20:	f000 fbc6 	bl	80851b0 <_ZN13IntervalTimer3endEv>
 8084a24:	4620      	mov	r0, r4
 8084a26:	bd10      	pop	{r4, pc}

08084a28 <_ZN18ParticleSoftSerial8rxPinISREv>:
  volatile uint32_t usLast[12];
  volatile uint8_t  b[12];
#endif

void ParticleSoftSerial::rxPinISR(void)
{ // start bit triggers read after 1.5 bits lengths (= middle of first data bit)
 8084a28:	b510      	push	{r4, lr}
  if (_rxBitPos <= PSS_STARTBIT)
 8084a2a:	4c09      	ldr	r4, [pc, #36]	; (8084a50 <_ZN18ParticleSoftSerial8rxPinISREv+0x28>)
 8084a2c:	7823      	ldrb	r3, [r4, #0]
 8084a2e:	061b      	lsls	r3, r3, #24
 8084a30:	d50d      	bpl.n	8084a4e <_ZN18ParticleSoftSerial8rxPinISREv+0x26>
#ifdef _PSS_DEBUG
    usLast[0] = micros();
    b[0] = HIGH;
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
 8084a32:	4b08      	ldr	r3, [pc, #32]	; (8084a54 <_ZN18ParticleSoftSerial8rxPinISREv+0x2c>)
 8084a34:	4808      	ldr	r0, [pc, #32]	; (8084a58 <_ZN18ParticleSoftSerial8rxPinISREv+0x30>)
 8084a36:	6819      	ldr	r1, [r3, #0]
 8084a38:	2200      	movs	r2, #0
 8084a3a:	f000 fbc3 	bl	80851c4 <_ZN13IntervalTimer15resetPeriod_SITEmb>
    _rxBitPos = PSS_DATA;
 8084a3e:	2300      	movs	r3, #0
 8084a40:	7023      	strb	r3, [r4, #0]
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 8084a42:	4b06      	ldr	r3, [pc, #24]	; (8084a5c <_ZN18ParticleSoftSerial8rxPinISREv+0x34>)
  }
}
 8084a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
    _rxBitPos = PSS_DATA;
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 8084a48:	8818      	ldrh	r0, [r3, #0]
 8084a4a:	f002 bf71 	b.w	8087930 <_Z15detachInterruptt>
 8084a4e:	bd10      	pop	{r4, pc}
 8084a50:	20000040 	.word	0x20000040
 8084a54:	20000038 	.word	0x20000038
 8084a58:	200008f4 	.word	0x200008f4
 8084a5c:	20000048 	.word	0x20000048

08084a60 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8084a60:	b40e      	push	{r1, r2, r3}
 8084a62:	b500      	push	{lr}
 8084a64:	b08c      	sub	sp, #48	; 0x30
 8084a66:	aa0d      	add	r2, sp, #52	; 0x34
 8084a68:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8084a6c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8084a6e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8084a72:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8084a74:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8084a76:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8084a78:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8084a7a:	aa04      	add	r2, sp, #16
 8084a7c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8084a7e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8084a80:	f000 fe26 	bl	80856d0 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8084a84:	b00c      	add	sp, #48	; 0x30
 8084a86:	f85d eb04 	ldr.w	lr, [sp], #4
 8084a8a:	b003      	add	sp, #12
 8084a8c:	4770      	bx	lr
	...

08084a90 <_ZN13IntervalTimerC1Ev>:
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8084a90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8084a92:	223b      	movs	r2, #59	; 0x3b
 8084a94:	8042      	strh	r2, [r0, #2]
 8084a96:	f247 522f 	movw	r2, #29999	; 0x752f
 8084a9a:	8082      	strh	r2, [r0, #4]
 8084a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8084aa0:	80c2      	strh	r2, [r0, #6]
	status = TIMER_OFF;

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8084aa2:	4a25      	ldr	r2, [pc, #148]	; (8084b38 <_ZN13IntervalTimerC1Ev+0xa8>)
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8084aa4:	2300      	movs	r3, #0
 8084aa6:	7003      	strb	r3, [r0, #0]
	status = TIMER_OFF;
 8084aa8:	7203      	strb	r3, [r0, #8]

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8084aaa:	7013      	strb	r3, [r2, #0]
 8084aac:	7053      	strb	r3, [r2, #1]
 8084aae:	7093      	strb	r3, [r2, #2]
 8084ab0:	70d3      	strb	r3, [r2, #3]
 8084ab2:	7113      	strb	r3, [r2, #4]
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8084ab4:	7803      	ldrb	r3, [r0, #0]
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8084ab6:	4604      	mov	r4, r0
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8084ab8:	2b00      	cmp	r3, #0
 8084aba:	d13a      	bne.n	8084b32 <_ZN13IntervalTimerC1Ev+0xa2>
		sysIntSetupDone = true;
 8084abc:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084abe:	4e1f      	ldr	r6, [pc, #124]	; (8084b3c <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 8084ac0:	4d1f      	ldr	r5, [pc, #124]	; (8084b40 <_ZN13IntervalTimerC1Ev+0xb0>)
 8084ac2:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084ac4:	4b1f      	ldr	r3, [pc, #124]	; (8084b44 <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 8084ac6:	4669      	mov	r1, sp
 8084ac8:	2013      	movs	r0, #19
 8084aca:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084acc:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084ace:	9502      	str	r5, [sp, #8]
 8084ad0:	f002 ff58 	bl	8087984 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084ad4:	4668      	mov	r0, sp
 8084ad6:	f7fb fb72 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084ada:	4b1b      	ldr	r3, [pc, #108]	; (8084b48 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 8084adc:	4669      	mov	r1, sp
 8084ade:	201a      	movs	r0, #26
 8084ae0:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084ae2:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084ae4:	9502      	str	r5, [sp, #8]
 8084ae6:	f002 ff4d 	bl	8087984 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084aea:	4668      	mov	r0, sp
 8084aec:	f7fb fb67 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084af0:	4b16      	ldr	r3, [pc, #88]	; (8084b4c <_ZN13IntervalTimerC1Ev+0xbc>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 8084af2:	4669      	mov	r1, sp
 8084af4:	2021      	movs	r0, #33	; 0x21
 8084af6:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084af8:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084afa:	9502      	str	r5, [sp, #8]
 8084afc:	f002 ff42 	bl	8087984 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084b00:	4668      	mov	r0, sp
 8084b02:	f7fb fb5c 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084b06:	4b12      	ldr	r3, [pc, #72]	; (8084b50 <_ZN13IntervalTimerC1Ev+0xc0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 8084b08:	4669      	mov	r1, sp
 8084b0a:	2024      	movs	r0, #36	; 0x24
 8084b0c:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084b0e:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084b10:	9502      	str	r5, [sp, #8]
 8084b12:	f002 ff37 	bl	8087984 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084b16:	4668      	mov	r0, sp
 8084b18:	f7fb fb51 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8084b1c:	4b0d      	ldr	r3, [pc, #52]	; (8084b54 <_ZN13IntervalTimerC1Ev+0xc4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 8084b1e:	4669      	mov	r1, sp
 8084b20:	2026      	movs	r0, #38	; 0x26
 8084b22:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084b24:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084b26:	9502      	str	r5, [sp, #8]
 8084b28:	f002 ff2c 	bl	8087984 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084b2c:	4668      	mov	r0, sp
 8084b2e:	f7fb fb46 	bl	80801be <_ZNSt14_Function_baseD1Ev>
	}
#endif

    }
 8084b32:	4620      	mov	r0, r4
 8084b34:	b004      	add	sp, #16
 8084b36:	bd70      	pop	{r4, r5, r6, pc}
 8084b38:	2000091c 	.word	0x2000091c
 8084b3c:	080800bf 	.word	0x080800bf
 8084b40:	080800c3 	.word	0x080800c3
 8084b44:	08084ec9 	.word	0x08084ec9
 8084b48:	08084ef1 	.word	0x08084ef1
 8084b4c:	08084f19 	.word	0x08084f19
 8084b50:	08084f41 	.word	0x08084f41
 8084b54:	08084f69 	.word	0x08084f69

08084b58 <_ZN18ParticleSoftSerial9prepareRXEv>:
  end();
  pss = NULL;
}

void ParticleSoftSerial::prepareRX(void)
{
 8084b58:	b513      	push	{r0, r1, r4, lr}
  pinMode(_rxPin, INPUT_PULLUP);
 8084b5a:	4c11      	ldr	r4, [pc, #68]	; (8084ba0 <_ZN18ParticleSoftSerial9prepareRXEv+0x48>)
 8084b5c:	2102      	movs	r1, #2
 8084b5e:	8820      	ldrh	r0, [r4, #0]
 8084b60:	f003 fb36 	bl	80881d0 <pinMode>

  _rxBitPos = PSS_INACTIVE;
 8084b64:	4b0f      	ldr	r3, [pc, #60]	; (8084ba4 <_ZN18ParticleSoftSerial9prepareRXEv+0x4c>)
 8084b66:	22fe      	movs	r2, #254	; 0xfe
 8084b68:	701a      	strb	r2, [r3, #0]
  rxTimer.begin(rxTimerISR, _usBitLength, uSec, _rxTimId);
 8084b6a:	4b0f      	ldr	r3, [pc, #60]	; (8084ba8 <_ZN18ParticleSoftSerial9prepareRXEv+0x50>)
 8084b6c:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 8084b6e:	2a09      	cmp	r2, #9
 8084b70:	d90a      	bls.n	8084b88 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 8084b72:	480e      	ldr	r0, [pc, #56]	; (8084bac <_ZN18ParticleSoftSerial9prepareRXEv+0x54>)
 8084b74:	88c3      	ldrh	r3, [r0, #6]
 8084b76:	429a      	cmp	r2, r3
 8084b78:	d806      	bhi.n	8084b88 <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 8084b7a:	4b0d      	ldr	r3, [pc, #52]	; (8084bb0 <_ZN18ParticleSoftSerial9prepareRXEv+0x58>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 8084b7c:	490d      	ldr	r1, [pc, #52]	; (8084bb4 <_ZN18ParticleSoftSerial9prepareRXEv+0x5c>)
 8084b7e:	781b      	ldrb	r3, [r3, #0]
 8084b80:	9300      	str	r3, [sp, #0]
 8084b82:	2300      	movs	r3, #0
 8084b84:	f000 fade 	bl	8085144 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage

  // prepare for FALLING edge of start bit 
  attachInterrupt(_rxPin, rxPinISR, FALLING);
 8084b88:	2300      	movs	r3, #0
 8084b8a:	9300      	str	r3, [sp, #0]
 8084b8c:	8820      	ldrh	r0, [r4, #0]
 8084b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8084b92:	2202      	movs	r2, #2
 8084b94:	4908      	ldr	r1, [pc, #32]	; (8084bb8 <_ZN18ParticleSoftSerial9prepareRXEv+0x60>)
 8084b96:	f002 fea3 	bl	80878e0 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 8084b9a:	b002      	add	sp, #8
 8084b9c:	bd10      	pop	{r4, pc}
 8084b9e:	bf00      	nop
 8084ba0:	20000048 	.word	0x20000048
 8084ba4:	20000040 	.word	0x20000040
 8084ba8:	20000034 	.word	0x20000034
 8084bac:	200008f4 	.word	0x200008f4
 8084bb0:	2000003d 	.word	0x2000003d
 8084bb4:	080848f5 	.word	0x080848f5
 8084bb8:	08084a29 	.word	0x08084a29

08084bbc <_ZN18ParticleSoftSerial10txTimerISREv>:
  }
  _PSS_DEBUG_LOW(_debugPin);
}

void ParticleSoftSerial::txTimerISR(void)
{
 8084bbc:	b538      	push	{r3, r4, r5, lr}
  static uint8_t parity = (_parity & 0x01);
 8084bbe:	4c56      	ldr	r4, [pc, #344]	; (8084d18 <_ZN18ParticleSoftSerial10txTimerISREv+0x15c>)
 8084bc0:	6823      	ldr	r3, [r4, #0]
 8084bc2:	07db      	lsls	r3, r3, #31
 8084bc4:	d40c      	bmi.n	8084be0 <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 8084bc6:	4620      	mov	r0, r4
 8084bc8:	f7fb fa71 	bl	80800ae <__cxa_guard_acquire>
 8084bcc:	b140      	cbz	r0, 8084be0 <_ZN18ParticleSoftSerial10txTimerISREv+0x24>
 8084bce:	4b53      	ldr	r3, [pc, #332]	; (8084d1c <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8084bd0:	4a53      	ldr	r2, [pc, #332]	; (8084d20 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8084bd2:	781b      	ldrb	r3, [r3, #0]
 8084bd4:	4620      	mov	r0, r4
 8084bd6:	f003 0301 	and.w	r3, r3, #1
 8084bda:	7013      	strb	r3, [r2, #0]
 8084bdc:	f7fb fa6c 	bl	80800b8 <__cxa_guard_release>

  if(_txBitPos < PSS_STARTBIT) return;
 8084be0:	4c50      	ldr	r4, [pc, #320]	; (8084d24 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8084be2:	7823      	ldrb	r3, [r4, #0]
 8084be4:	b25b      	sxtb	r3, r3
 8084be6:	3301      	adds	r3, #1
 8084be8:	f2c0 8094 	blt.w	8084d14 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>

  if(_txBitPos == PSS_STARTBIT)                                 // produce StartBit
 8084bec:	7823      	ldrb	r3, [r4, #0]
 8084bee:	4d4e      	ldr	r5, [pc, #312]	; (8084d28 <_ZN18ParticleSoftSerial10txTimerISREv+0x16c>)
 8084bf0:	2bff      	cmp	r3, #255	; 0xff
 8084bf2:	d115      	bne.n	8084c20 <_ZN18ParticleSoftSerial10txTimerISREv+0x64>
  {
    txTimer.resetPeriod_SIT(_usBitLength, uSec);
 8084bf4:	4b4d      	ldr	r3, [pc, #308]	; (8084d2c <_ZN18ParticleSoftSerial10txTimerISREv+0x170>)
 8084bf6:	2200      	movs	r2, #0
 8084bf8:	6819      	ldr	r1, [r3, #0]
 8084bfa:	484d      	ldr	r0, [pc, #308]	; (8084d30 <_ZN18ParticleSoftSerial10txTimerISREv+0x174>)
 8084bfc:	f000 fae2 	bl	80851c4 <_ZN13IntervalTimer15resetPeriod_SITEmb>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8084c00:	4b4c      	ldr	r3, [pc, #304]	; (8084d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8084c02:	881a      	ldrh	r2, [r3, #0]
 8084c04:	231c      	movs	r3, #28
 8084c06:	4353      	muls	r3, r2
 8084c08:	4a4b      	ldr	r2, [pc, #300]	; (8084d38 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8084c0a:	6812      	ldr	r2, [r2, #0]
 8084c0c:	18d1      	adds	r1, r2, r3
 8084c0e:	58d3      	ldr	r3, [r2, r3]
 8084c10:	888a      	ldrh	r2, [r1, #4]
 8084c12:	835a      	strh	r2, [r3, #26]
    pinResetFast(_txPin);
    parity = (_parity & 0x01);
 8084c14:	4b41      	ldr	r3, [pc, #260]	; (8084d1c <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8084c16:	4a42      	ldr	r2, [pc, #264]	; (8084d20 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8084c18:	781b      	ldrb	r3, [r3, #0]
 8084c1a:	f003 0301 	and.w	r3, r3, #1
 8084c1e:	e020      	b.n	8084c62 <_ZN18ParticleSoftSerial10txTimerISREv+0xa6>
  }
  else if(PSS_DATA <= _txBitPos && _txBitPos < _dataBits)       // send data bits
 8084c20:	7823      	ldrb	r3, [r4, #0]
 8084c22:	4a46      	ldr	r2, [pc, #280]	; (8084d3c <_ZN18ParticleSoftSerial10txTimerISREv+0x180>)
 8084c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8084c28:	d13d      	bne.n	8084ca6 <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
 8084c2a:	7823      	ldrb	r3, [r4, #0]
 8084c2c:	7811      	ldrb	r1, [r2, #0]
 8084c2e:	b25b      	sxtb	r3, r3
 8084c30:	428b      	cmp	r3, r1
 8084c32:	da38      	bge.n	8084ca6 <_ZN18ParticleSoftSerial10txTimerISREv+0xea>
  {
    if ((_txBuffer[_txBufferTail] >> _txBitPos) & 0x01)
 8084c34:	7829      	ldrb	r1, [r5, #0]
 8084c36:	7823      	ldrb	r3, [r4, #0]
 8084c38:	b25a      	sxtb	r2, r3
 8084c3a:	4b41      	ldr	r3, [pc, #260]	; (8084d40 <_ZN18ParticleSoftSerial10txTimerISREv+0x184>)
 8084c3c:	5c5b      	ldrb	r3, [r3, r1]
 8084c3e:	4113      	asrs	r3, r2
 8084c40:	f013 0f01 	tst.w	r3, #1
 8084c44:	4a3c      	ldr	r2, [pc, #240]	; (8084d38 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8084c46:	4b3b      	ldr	r3, [pc, #236]	; (8084d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8084c48:	d00d      	beq.n	8084c66 <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8084c4a:	8819      	ldrh	r1, [r3, #0]
 8084c4c:	231c      	movs	r3, #28
 8084c4e:	434b      	muls	r3, r1
 8084c50:	6812      	ldr	r2, [r2, #0]
 8084c52:	18d1      	adds	r1, r2, r3
 8084c54:	58d3      	ldr	r3, [r2, r3]
 8084c56:	888a      	ldrh	r2, [r1, #4]
 8084c58:	831a      	strh	r2, [r3, #24]
    {
      pinSetFast(_txPin);
      parity ^= 0x01;                                           // keep track of the parity
 8084c5a:	4a31      	ldr	r2, [pc, #196]	; (8084d20 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8084c5c:	7813      	ldrb	r3, [r2, #0]
 8084c5e:	f083 0301 	eor.w	r3, r3, #1
 8084c62:	7013      	strb	r3, [r2, #0]
 8084c64:	e007      	b.n	8084c76 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8084c66:	8819      	ldrh	r1, [r3, #0]
 8084c68:	231c      	movs	r3, #28
 8084c6a:	434b      	muls	r3, r1
 8084c6c:	6812      	ldr	r2, [r2, #0]
 8084c6e:	18d1      	adds	r1, r2, r3
 8084c70:	58d3      	ldr	r3, [r2, r3]
 8084c72:	888a      	ldrh	r2, [r1, #4]
 8084c74:	835a      	strh	r2, [r3, #26]
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
    _txBitPos = PSS_INACTIVE;
  }
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
 8084c76:	4b33      	ldr	r3, [pc, #204]	; (8084d44 <_ZN18ParticleSoftSerial10txTimerISREv+0x188>)
 8084c78:	782a      	ldrb	r2, [r5, #0]
 8084c7a:	781b      	ldrb	r3, [r3, #0]
 8084c7c:	429a      	cmp	r2, r3
 8084c7e:	d10d      	bne.n	8084c9c <_ZN18ParticleSoftSerial10txTimerISREv+0xe0>
  {
    _txBitPos = PSS_INACTIVE;
 8084c80:	23fe      	movs	r3, #254	; 0xfe
 8084c82:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 8084c84:	4b30      	ldr	r3, [pc, #192]	; (8084d48 <_ZN18ParticleSoftSerial10txTimerISREv+0x18c>)
 8084c86:	781b      	ldrb	r3, [r3, #0]
 8084c88:	2b00      	cmp	r3, #0
 8084c8a:	d043      	beq.n	8084d14 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
 8084c8c:	4b2f      	ldr	r3, [pc, #188]	; (8084d4c <_ZN18ParticleSoftSerial10txTimerISREv+0x190>)
 8084c8e:	6818      	ldr	r0, [r3, #0]
 8084c90:	2800      	cmp	r0, #0
 8084c92:	d03f      	beq.n	8084d14 <_ZN18ParticleSoftSerial10txTimerISREv+0x158>
  }
  else
  {
    _txBitPos++;
  }
}
 8084c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
  {
    _txBitPos = PSS_INACTIVE;
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 8084c98:	f7ff bf5e 	b.w	8084b58 <_ZN18ParticleSoftSerial9prepareRXEv>
  }
  else
  {
    _txBitPos++;
 8084c9c:	7823      	ldrb	r3, [r4, #0]
 8084c9e:	3301      	adds	r3, #1
 8084ca0:	b25b      	sxtb	r3, r3
 8084ca2:	7023      	strb	r3, [r4, #0]
 8084ca4:	bd38      	pop	{r3, r4, r5, pc}
    else
    {
      pinResetFast(_txPin);
    }
  }
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
 8084ca6:	4b1d      	ldr	r3, [pc, #116]	; (8084d1c <_ZN18ParticleSoftSerial10txTimerISREv+0x160>)
 8084ca8:	781b      	ldrb	r3, [r3, #0]
 8084caa:	b123      	cbz	r3, 8084cb6 <_ZN18ParticleSoftSerial10txTimerISREv+0xfa>
 8084cac:	7823      	ldrb	r3, [r4, #0]
 8084cae:	7811      	ldrb	r1, [r2, #0]
 8084cb0:	b25b      	sxtb	r3, r3
 8084cb2:	428b      	cmp	r3, r1
 8084cb4:	d011      	beq.n	8084cda <_ZN18ParticleSoftSerial10txTimerISREv+0x11e>
    else
    {
      pinResetFast(_txPin);
    }
  }
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
 8084cb6:	7823      	ldrb	r3, [r4, #0]
 8084cb8:	7812      	ldrb	r2, [r2, #0]
 8084cba:	b25b      	sxtb	r3, r3
 8084cbc:	429a      	cmp	r2, r3
 8084cbe:	4a24      	ldr	r2, [pc, #144]	; (8084d50 <_ZN18ParticleSoftSerial10txTimerISREv+0x194>)
 8084cc0:	dc1a      	bgt.n	8084cf8 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
 8084cc2:	4b18      	ldr	r3, [pc, #96]	; (8084d24 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8084cc4:	7811      	ldrb	r1, [r2, #0]
 8084cc6:	781b      	ldrb	r3, [r3, #0]
 8084cc8:	b25b      	sxtb	r3, r3
 8084cca:	428b      	cmp	r3, r1
 8084ccc:	da14      	bge.n	8084cf8 <_ZN18ParticleSoftSerial10txTimerISREv+0x13c>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8084cce:	4b19      	ldr	r3, [pc, #100]	; (8084d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8084cd0:	881a      	ldrh	r2, [r3, #0]
 8084cd2:	231c      	movs	r3, #28
 8084cd4:	4353      	muls	r3, r2
 8084cd6:	4a18      	ldr	r2, [pc, #96]	; (8084d38 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8084cd8:	e008      	b.n	8084cec <_ZN18ParticleSoftSerial10txTimerISREv+0x130>
      pinResetFast(_txPin);
    }
  }
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
  {
    if (parity)
 8084cda:	4b11      	ldr	r3, [pc, #68]	; (8084d20 <_ZN18ParticleSoftSerial10txTimerISREv+0x164>)
 8084cdc:	4a16      	ldr	r2, [pc, #88]	; (8084d38 <_ZN18ParticleSoftSerial10txTimerISREv+0x17c>)
 8084cde:	7819      	ldrb	r1, [r3, #0]
 8084ce0:	4b14      	ldr	r3, [pc, #80]	; (8084d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x178>)
 8084ce2:	2900      	cmp	r1, #0
 8084ce4:	d0bf      	beq.n	8084c66 <_ZN18ParticleSoftSerial10txTimerISREv+0xaa>
 8084ce6:	8819      	ldrh	r1, [r3, #0]
 8084ce8:	231c      	movs	r3, #28
 8084cea:	434b      	muls	r3, r1
 8084cec:	6812      	ldr	r2, [r2, #0]
 8084cee:	18d1      	adds	r1, r2, r3
 8084cf0:	58d3      	ldr	r3, [r2, r3]
 8084cf2:	888a      	ldrh	r2, [r1, #4]
 8084cf4:	831a      	strh	r2, [r3, #24]
 8084cf6:	e7be      	b.n	8084c76 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  }
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
  {
      pinSetFast(_txPin);
  }
  else if(_txBitPos >= _totalBits)
 8084cf8:	7823      	ldrb	r3, [r4, #0]
 8084cfa:	7812      	ldrb	r2, [r2, #0]
 8084cfc:	b25b      	sxtb	r3, r3
 8084cfe:	4293      	cmp	r3, r2
 8084d00:	dbb9      	blt.n	8084c76 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 8084d02:	782b      	ldrb	r3, [r5, #0]
    _txBitPos = PSS_INACTIVE;
 8084d04:	22fe      	movs	r2, #254	; 0xfe
  {
      pinSetFast(_txPin);
  }
  else if(_txBitPos >= _totalBits)
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 8084d06:	3301      	adds	r3, #1
 8084d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8084d0c:	702b      	strb	r3, [r5, #0]
    _txBitPos = PSS_INACTIVE;
 8084d0e:	4b05      	ldr	r3, [pc, #20]	; (8084d24 <_ZN18ParticleSoftSerial10txTimerISREv+0x168>)
 8084d10:	701a      	strb	r2, [r3, #0]
 8084d12:	e7b0      	b.n	8084c76 <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
 8084d14:	bd38      	pop	{r3, r4, r5, pc}
 8084d16:	bf00      	nop
 8084d18:	20000844 	.word	0x20000844
 8084d1c:	200008a5 	.word	0x200008a5
 8084d20:	20000848 	.word	0x20000848
 8084d24:	2000003c 	.word	0x2000003c
 8084d28:	200008a4 	.word	0x200008a4
 8084d2c:	20000034 	.word	0x20000034
 8084d30:	20000894 	.word	0x20000894
 8084d34:	20000044 	.word	0x20000044
 8084d38:	200008ac 	.word	0x200008ac
 8084d3c:	2000003f 	.word	0x2000003f
 8084d40:	200008b1 	.word	0x200008b1
 8084d44:	20000904 	.word	0x20000904
 8084d48:	20000891 	.word	0x20000891
 8084d4c:	200008a8 	.word	0x200008a8
 8084d50:	20000030 	.word	0x20000030

08084d54 <_ZN18ParticleSoftSerial9prepareTXEv>:
  // prepare for FALLING edge of start bit 
  attachInterrupt(_rxPin, rxPinISR, FALLING);
}

void ParticleSoftSerial::prepareTX(void)
{
 8084d54:	b513      	push	{r0, r1, r4, lr}
  pinMode(_txPin, OUTPUT);
 8084d56:	4c11      	ldr	r4, [pc, #68]	; (8084d9c <_ZN18ParticleSoftSerial9prepareTXEv+0x48>)
 8084d58:	2101      	movs	r1, #1
 8084d5a:	8820      	ldrh	r0, [r4, #0]
 8084d5c:	f003 fa38 	bl	80881d0 <pinMode>
 8084d60:	8822      	ldrh	r2, [r4, #0]
 8084d62:	231c      	movs	r3, #28
 8084d64:	4353      	muls	r3, r2
 8084d66:	4a0e      	ldr	r2, [pc, #56]	; (8084da0 <_ZN18ParticleSoftSerial9prepareTXEv+0x4c>)
 8084d68:	6812      	ldr	r2, [r2, #0]
 8084d6a:	18d1      	adds	r1, r2, r3
 8084d6c:	58d3      	ldr	r3, [r2, r3]
 8084d6e:	888a      	ldrh	r2, [r1, #4]
 8084d70:	831a      	strh	r2, [r3, #24]
  pinSetFast(_txPin);

  _txBitPos = PSS_INACTIVE;
 8084d72:	4b0c      	ldr	r3, [pc, #48]	; (8084da4 <_ZN18ParticleSoftSerial9prepareTXEv+0x50>)
 8084d74:	22fe      	movs	r2, #254	; 0xfe
 8084d76:	701a      	strb	r2, [r3, #0]
  txTimer.begin(txTimerISR, _usBitLength, uSec, _txTimId);
 8084d78:	4b0b      	ldr	r3, [pc, #44]	; (8084da8 <_ZN18ParticleSoftSerial9prepareTXEv+0x54>)
 8084d7a:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 8084d7c:	2a09      	cmp	r2, #9
 8084d7e:	d90a      	bls.n	8084d96 <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 8084d80:	480a      	ldr	r0, [pc, #40]	; (8084dac <_ZN18ParticleSoftSerial9prepareTXEv+0x58>)
 8084d82:	88c3      	ldrh	r3, [r0, #6]
 8084d84:	429a      	cmp	r2, r3
 8084d86:	d806      	bhi.n	8084d96 <_ZN18ParticleSoftSerial9prepareTXEv+0x42>
 8084d88:	4b09      	ldr	r3, [pc, #36]	; (8084db0 <_ZN18ParticleSoftSerial9prepareTXEv+0x5c>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 8084d8a:	490a      	ldr	r1, [pc, #40]	; (8084db4 <_ZN18ParticleSoftSerial9prepareTXEv+0x60>)
 8084d8c:	781b      	ldrb	r3, [r3, #0]
 8084d8e:	9300      	str	r3, [sp, #0]
 8084d90:	2300      	movs	r3, #0
 8084d92:	f000 f9d7 	bl	8085144 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  //txTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage
}
 8084d96:	b002      	add	sp, #8
 8084d98:	bd10      	pop	{r4, pc}
 8084d9a:	bf00      	nop
 8084d9c:	20000044 	.word	0x20000044
 8084da0:	200008ac 	.word	0x200008ac
 8084da4:	2000003c 	.word	0x2000003c
 8084da8:	20000034 	.word	0x20000034
 8084dac:	20000894 	.word	0x20000894
 8084db0:	2000003e 	.word	0x2000003e
 8084db4:	08084bbd 	.word	0x08084bbd

08084db8 <_ZN18ParticleSoftSerial5beginEmm>:

void ParticleSoftSerial::begin(unsigned long baud, uint32_t config)
{
  _PSS_DEBUG_PIN(_debugPin);

  if (config & SERIAL_DATA_BITS_9)
 8084db8:	f012 0f10 	tst.w	r2, #16
{
  begin(baud, SERIAL_8N1);
}

void ParticleSoftSerial::begin(unsigned long baud, uint32_t config)
{
 8084dbc:	b538      	push	{r3, r4, r5, lr}
 8084dbe:	4605      	mov	r5, r0
 8084dc0:	4b23      	ldr	r3, [pc, #140]	; (8084e50 <_ZN18ParticleSoftSerial5beginEmm+0x98>)
  _PSS_DEBUG_PIN(_debugPin);

  if (config & SERIAL_DATA_BITS_9)
 8084dc2:	d001      	beq.n	8084dc8 <_ZN18ParticleSoftSerial5beginEmm+0x10>
  {
    _dataBits = 9;
 8084dc4:	2009      	movs	r0, #9
 8084dc6:	e003      	b.n	8084dd0 <_ZN18ParticleSoftSerial5beginEmm+0x18>
  }
  else if (config & SERIAL_DATA_BITS_7)
 8084dc8:	0690      	lsls	r0, r2, #26
  {
    _dataBits = 7;
 8084dca:	bf4c      	ite	mi
 8084dcc:	2007      	movmi	r0, #7
  }
  else
  {
    _dataBits = 8;
 8084dce:	2008      	movpl	r0, #8
 8084dd0:	7018      	strb	r0, [r3, #0]
  }
  
  if (config & SERIAL_STOP_BITS_2)
  {
    _totalBits = _dataBits + 2;
 8084dd2:	781b      	ldrb	r3, [r3, #0]
  else
  {
    _dataBits = 8;
  }
  
  if (config & SERIAL_STOP_BITS_2)
 8084dd4:	f012 0f01 	tst.w	r2, #1
 8084dd8:	481e      	ldr	r0, [pc, #120]	; (8084e54 <_ZN18ParticleSoftSerial5beginEmm+0x9c>)
  {
    _totalBits = _dataBits + 2;
 8084dda:	bf14      	ite	ne
 8084ddc:	3302      	addne	r3, #2
  }
  else
  {
    _totalBits = _dataBits + 1;
 8084dde:	3301      	addeq	r3, #1
  }

  if (config & SERIAL_PARITY)
 8084de0:	f012 040c 	ands.w	r4, r2, #12
  {
    _totalBits = _dataBits + 2;
  }
  else
  {
    _totalBits = _dataBits + 1;
 8084de4:	7003      	strb	r3, [r0, #0]
 8084de6:	4b1c      	ldr	r3, [pc, #112]	; (8084e58 <_ZN18ParticleSoftSerial5beginEmm+0xa0>)
  }

  if (config & SERIAL_PARITY)
 8084de8:	d009      	beq.n	8084dfe <_ZN18ParticleSoftSerial5beginEmm+0x46>
  {
    _parity = (config & SERIAL_PARITY_ODD) ? 0x11 : 0x10;
 8084dea:	f012 0f08 	tst.w	r2, #8
 8084dee:	bf14      	ite	ne
 8084df0:	2211      	movne	r2, #17
 8084df2:	2210      	moveq	r2, #16
 8084df4:	701a      	strb	r2, [r3, #0]
    _totalBits++;
 8084df6:	7803      	ldrb	r3, [r0, #0]
 8084df8:	3301      	adds	r3, #1
 8084dfa:	7003      	strb	r3, [r0, #0]
 8084dfc:	e000      	b.n	8084e00 <_ZN18ParticleSoftSerial5beginEmm+0x48>
  }
  else
  {
    _parity = 0;
 8084dfe:	701c      	strb	r4, [r3, #0]
  }
    
  for (int i=0; btTable[i].baudrate > 0; i++)
 8084e00:	4a16      	ldr	r2, [pc, #88]	; (8084e5c <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 8084e02:	2400      	movs	r4, #0
 8084e04:	200c      	movs	r0, #12
 8084e06:	fb00 f304 	mul.w	r3, r0, r4
 8084e0a:	589b      	ldr	r3, [r3, r2]
 8084e0c:	b1a3      	cbz	r3, 8084e38 <_ZN18ParticleSoftSerial5beginEmm+0x80>
  {
    if (btTable[i].baudrate <= baud)
 8084e0e:	428b      	cmp	r3, r1
 8084e10:	d810      	bhi.n	8084e34 <_ZN18ParticleSoftSerial5beginEmm+0x7c>
    {
#if (SYSTEM_VERSION >= 0x00060000)
      if (btTable[i].baudrate != baud)
 8084e12:	d004      	beq.n	8084e1e <_ZN18ParticleSoftSerial5beginEmm+0x66>
      {
        Log.info("%lu not available! Selected rate %lu", baud, btTable[i].baudrate);
 8084e14:	460a      	mov	r2, r1
 8084e16:	4812      	ldr	r0, [pc, #72]	; (8084e60 <_ZN18ParticleSoftSerial5beginEmm+0xa8>)
 8084e18:	4912      	ldr	r1, [pc, #72]	; (8084e64 <_ZN18ParticleSoftSerial5beginEmm+0xac>)
 8084e1a:	f7ff fe21 	bl	8084a60 <_ZNK5spark6Logger4infoEPKcz>
      }
#endif
      _usStartBit  = btTable[i].usStartBit;
 8084e1e:	4a0f      	ldr	r2, [pc, #60]	; (8084e5c <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 8084e20:	230c      	movs	r3, #12
 8084e22:	fb03 2404 	mla	r4, r3, r4, r2
 8084e26:	4b10      	ldr	r3, [pc, #64]	; (8084e68 <_ZN18ParticleSoftSerial5beginEmm+0xb0>)
 8084e28:	6862      	ldr	r2, [r4, #4]
 8084e2a:	601a      	str	r2, [r3, #0]
      _usBitLength = btTable[i].usBitLength;
 8084e2c:	68a2      	ldr	r2, [r4, #8]
 8084e2e:	4b0f      	ldr	r3, [pc, #60]	; (8084e6c <_ZN18ParticleSoftSerial5beginEmm+0xb4>)
 8084e30:	601a      	str	r2, [r3, #0]

      break;
 8084e32:	e001      	b.n	8084e38 <_ZN18ParticleSoftSerial5beginEmm+0x80>
  else
  {
    _parity = 0;
  }
    
  for (int i=0; btTable[i].baudrate > 0; i++)
 8084e34:	3401      	adds	r4, #1
 8084e36:	e7e6      	b.n	8084e06 <_ZN18ParticleSoftSerial5beginEmm+0x4e>

      break;
    }
  }

  if (!_halfduplex)
 8084e38:	4b0d      	ldr	r3, [pc, #52]	; (8084e70 <_ZN18ParticleSoftSerial5beginEmm+0xb8>)
 8084e3a:	781b      	ldrb	r3, [r3, #0]
 8084e3c:	b913      	cbnz	r3, 8084e44 <_ZN18ParticleSoftSerial5beginEmm+0x8c>
  { // since in halfduplex mode the pin starts off as RX pin
    prepareTX();
 8084e3e:	4628      	mov	r0, r5
 8084e40:	f7ff ff88 	bl	8084d54 <_ZN18ParticleSoftSerial9prepareTXEv>
  }
  prepareRX();
 8084e44:	4628      	mov	r0, r5
}
 8084e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (!_halfduplex)
  { // since in halfduplex mode the pin starts off as RX pin
    prepareTX();
  }
  prepareRX();
 8084e4a:	f7ff be85 	b.w	8084b58 <_ZN18ParticleSoftSerial9prepareRXEv>
 8084e4e:	bf00      	nop
 8084e50:	2000003f 	.word	0x2000003f
 8084e54:	20000030 	.word	0x20000030
 8084e58:	200008a5 	.word	0x200008a5
 8084e5c:	0808d850 	.word	0x0808d850
 8084e60:	20000934 	.word	0x20000934
 8084e64:	0808d82b 	.word	0x0808d82b
 8084e68:	20000038 	.word	0x20000038
 8084e6c:	20000034 	.word	0x20000034
 8084e70:	20000891 	.word	0x20000891

08084e74 <_ZN18ParticleSoftSerial5beginEm>:
  //txTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at a time critical stage
}

void ParticleSoftSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8084e74:	2200      	movs	r2, #0
 8084e76:	f7ff bf9f 	b.w	8084db8 <_ZN18ParticleSoftSerial5beginEmm>
	...

08084e7c <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
  }
  else
  {
    _txBitPos++;
  }
}
 8084e7c:	b570      	push	{r4, r5, r6, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8084e7e:	f000 f9cf 	bl	8085220 <HAL_Pin_Map>
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 8084e82:	4c0c      	ldr	r4, [pc, #48]	; (8084eb4 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 8084e84:	4b0c      	ldr	r3, [pc, #48]	; (8084eb8 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
 8084e86:	4e0d      	ldr	r6, [pc, #52]	; (8084ebc <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x40>)
 8084e88:	6018      	str	r0, [r3, #0]
 8084e8a:	4d0d      	ldr	r5, [pc, #52]	; (8084ec0 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x44>)
 8084e8c:	4620      	mov	r0, r4
 8084e8e:	f7ff fdff 	bl	8084a90 <_ZN13IntervalTimerC1Ev>
 8084e92:	4620      	mov	r0, r4
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8084e94:	4c0b      	ldr	r4, [pc, #44]	; (8084ec4 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x48>)
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 8084e96:	4632      	mov	r2, r6
 8084e98:	4629      	mov	r1, r5
 8084e9a:	f003 faa9 	bl	80883f0 <__aeabi_atexit>
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8084e9e:	4620      	mov	r0, r4
 8084ea0:	f7ff fdf6 	bl	8084a90 <_ZN13IntervalTimerC1Ev>
 8084ea4:	4632      	mov	r2, r6
 8084ea6:	4629      	mov	r1, r5
 8084ea8:	4620      	mov	r0, r4
  }
  else
  {
    _txBitPos++;
  }
}
 8084eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8084eae:	f003 ba9f 	b.w	80883f0 <__aeabi_atexit>
 8084eb2:	bf00      	nop
 8084eb4:	200008f4 	.word	0x200008f4
 8084eb8:	200008ac 	.word	0x200008ac
 8084ebc:	20000140 	.word	0x20000140
 8084ec0:	08084a1d 	.word	0x08084a1d
 8084ec4:	20000894 	.word	0x20000894

08084ec8 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 8084ec8:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8084eca:	2101      	movs	r1, #1
 8084ecc:	4806      	ldr	r0, [pc, #24]	; (8084ee8 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8084ece:	f003 f927 	bl	8088120 <TIM_GetITStatus>
 8084ed2:	b140      	cbz	r0, 8084ee6 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8084ed4:	2101      	movs	r1, #1
 8084ed6:	4804      	ldr	r0, [pc, #16]	; (8084ee8 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8084ed8:	f003 f92d 	bl	8088136 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 8084edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM3_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[0]();
 8084ee0:	4b02      	ldr	r3, [pc, #8]	; (8084eec <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 8084ee2:	681b      	ldr	r3, [r3, #0]
 8084ee4:	4718      	bx	r3
 8084ee6:	bd10      	pop	{r4, pc}
 8084ee8:	40000400 	.word	0x40000400
 8084eec:	20000908 	.word	0x20000908

08084ef0 <Wiring_TIM4_Interrupt_Handler_override>:
	}
}

void Wiring_TIM4_Interrupt_Handler_override()
{
 8084ef0:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 8084ef2:	2101      	movs	r1, #1
 8084ef4:	4806      	ldr	r0, [pc, #24]	; (8084f10 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8084ef6:	f003 f913 	bl	8088120 <TIM_GetITStatus>
 8084efa:	b140      	cbz	r0, 8084f0e <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8084efc:	2101      	movs	r1, #1
 8084efe:	4804      	ldr	r0, [pc, #16]	; (8084f10 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8084f00:	f003 f919 	bl	8088136 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 8084f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM4_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[1]();
 8084f08:	4b02      	ldr	r3, [pc, #8]	; (8084f14 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 8084f0a:	685b      	ldr	r3, [r3, #4]
 8084f0c:	4718      	bx	r3
 8084f0e:	bd10      	pop	{r4, pc}
 8084f10:	40000800 	.word	0x40000800
 8084f14:	20000908 	.word	0x20000908

08084f18 <Wiring_TIM5_Interrupt_Handler_override>:
	}
}

void Wiring_TIM5_Interrupt_Handler_override()
{
 8084f18:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 8084f1a:	2101      	movs	r1, #1
 8084f1c:	4806      	ldr	r0, [pc, #24]	; (8084f38 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8084f1e:	f003 f8ff 	bl	8088120 <TIM_GetITStatus>
 8084f22:	b140      	cbz	r0, 8084f36 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8084f24:	2101      	movs	r1, #1
 8084f26:	4804      	ldr	r0, [pc, #16]	; (8084f38 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8084f28:	f003 f905 	bl	8088136 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 8084f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM5_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[2]();
 8084f30:	4b02      	ldr	r3, [pc, #8]	; (8084f3c <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 8084f32:	689b      	ldr	r3, [r3, #8]
 8084f34:	4718      	bx	r3
 8084f36:	bd10      	pop	{r4, pc}
 8084f38:	40000c00 	.word	0x40000c00
 8084f3c:	20000908 	.word	0x20000908

08084f40 <Wiring_TIM6_Interrupt_Handler_override>:
	}
}

void Wiring_TIM6_Interrupt_Handler_override()
{
 8084f40:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 8084f42:	2101      	movs	r1, #1
 8084f44:	4806      	ldr	r0, [pc, #24]	; (8084f60 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8084f46:	f003 f8eb 	bl	8088120 <TIM_GetITStatus>
 8084f4a:	b140      	cbz	r0, 8084f5e <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8084f4c:	2101      	movs	r1, #1
 8084f4e:	4804      	ldr	r0, [pc, #16]	; (8084f60 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8084f50:	f003 f8f1 	bl	8088136 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 8084f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM6_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[3]();
 8084f58:	4b02      	ldr	r3, [pc, #8]	; (8084f64 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 8084f5a:	68db      	ldr	r3, [r3, #12]
 8084f5c:	4718      	bx	r3
 8084f5e:	bd10      	pop	{r4, pc}
 8084f60:	40001000 	.word	0x40001000
 8084f64:	20000908 	.word	0x20000908

08084f68 <Wiring_TIM7_Interrupt_Handler_override>:
	}
}

void Wiring_TIM7_Interrupt_Handler_override()
{
 8084f68:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8084f6a:	2101      	movs	r1, #1
 8084f6c:	4806      	ldr	r0, [pc, #24]	; (8084f88 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8084f6e:	f003 f8d7 	bl	8088120 <TIM_GetITStatus>
 8084f72:	b140      	cbz	r0, 8084f86 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8084f74:	2101      	movs	r1, #1
 8084f76:	4804      	ldr	r0, [pc, #16]	; (8084f88 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8084f78:	f003 f8dd 	bl	8088136 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 8084f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM7_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[4]();
 8084f80:	4b02      	ldr	r3, [pc, #8]	; (8084f8c <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 8084f82:	691b      	ldr	r3, [r3, #16]
 8084f84:	4718      	bx	r3
 8084f86:	bd10      	pop	{r4, pc}
 8084f88:	40001400 	.word	0x40001400
 8084f8c:	20000908 	.word	0x20000908

08084f90 <_ZN13IntervalTimer9start_SITEmb>:

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 8084f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8084f92:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 8084f94:	b085      	sub	sp, #20
 8084f96:	4605      	mov	r5, r0
 8084f98:	460f      	mov	r7, r1
 8084f9a:	4616      	mov	r6, r2
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8084f9c:	2b04      	cmp	r3, #4
 8084f9e:	d830      	bhi.n	8085002 <_ZN13IntervalTimer9start_SITEmb+0x72>
 8084fa0:	e8df f003 	tbb	[pc, r3]
 8084fa4:	1e150c03 	.word	0x1e150c03
 8084fa8:	27          	.byte	0x27
 8084fa9:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8084faa:	2101      	movs	r1, #1
 8084fac:	2002      	movs	r0, #2
 8084fae:	f002 ff93 	bl	8087ed8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8084fb2:	231d      	movs	r3, #29
 8084fb4:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM3;
 8084fb8:	4c29      	ldr	r4, [pc, #164]	; (8085060 <_ZN13IntervalTimer9start_SITEmb+0xd0>)
		break;
 8084fba:	e022      	b.n	8085002 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 1:		// TIM4
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8084fbc:	2101      	movs	r1, #1
 8084fbe:	2004      	movs	r0, #4
 8084fc0:	f002 ff8a 	bl	8087ed8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8084fc4:	231e      	movs	r3, #30
 8084fc6:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM4;
 8084fca:	4c26      	ldr	r4, [pc, #152]	; (8085064 <_ZN13IntervalTimer9start_SITEmb+0xd4>)
		break;
 8084fcc:	e019      	b.n	8085002 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 2:		// TIM5
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8084fce:	2101      	movs	r1, #1
 8084fd0:	2008      	movs	r0, #8
 8084fd2:	f002 ff81 	bl	8087ed8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8084fd6:	2332      	movs	r3, #50	; 0x32
 8084fd8:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM5;
 8084fdc:	4c22      	ldr	r4, [pc, #136]	; (8085068 <_ZN13IntervalTimer9start_SITEmb+0xd8>)
		break;
 8084fde:	e010      	b.n	8085002 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 3:		// TIM6
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8084fe0:	2101      	movs	r1, #1
 8084fe2:	2010      	movs	r0, #16
 8084fe4:	f002 ff78 	bl	8087ed8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8084fe8:	2336      	movs	r3, #54	; 0x36
 8084fea:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM6;
 8084fee:	4c1f      	ldr	r4, [pc, #124]	; (808506c <_ZN13IntervalTimer9start_SITEmb+0xdc>)
		break;
 8084ff0:	e007      	b.n	8085002 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8084ff2:	2101      	movs	r1, #1
 8084ff4:	2020      	movs	r0, #32
 8084ff6:	f002 ff6f 	bl	8087ed8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
		TIMx = TIM7;
 8084ffa:	4c1d      	ldr	r4, [pc, #116]	; (8085070 <_ZN13IntervalTimer9start_SITEmb+0xe0>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8084ffc:	2337      	movs	r3, #55	; 0x37
 8084ffe:	f88d 3000 	strb.w	r3, [sp]
		break;
#endif
	}
	
	// Initialize Timer
	switch (scale) {
 8085002:	b11e      	cbz	r6, 808500c <_ZN13IntervalTimer9start_SITEmb+0x7c>
 8085004:	2e01      	cmp	r6, #1
 8085006:	d101      	bne.n	808500c <_ZN13IntervalTimer9start_SITEmb+0x7c>
		case uSec:
			prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
			break;
		case hmSec:
			prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 8085008:	88ae      	ldrh	r6, [r5, #4]
			break;
 808500a:	e000      	b.n	808500e <_ZN13IntervalTimer9start_SITEmb+0x7e>
		default:
			prescaler = SIT_PRESCALERu;
 808500c:	886e      	ldrh	r6, [r5, #2]
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 808500e:	7a6a      	ldrb	r2, [r5, #9]
 8085010:	68e9      	ldr	r1, [r5, #12]
 8085012:	4b18      	ldr	r3, [pc, #96]	; (8085074 <_ZN13IntervalTimer9start_SITEmb+0xe4>)

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8085014:	2501      	movs	r5, #1
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 8085016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
 808501a:	4668      	mov	r0, sp

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
 808501c:	230a      	movs	r3, #10
 808501e:	f88d 3001 	strb.w	r3, [sp, #1]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8085022:	f88d 5002 	strb.w	r5, [sp, #2]
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8085026:	f88d 5003 	strb.w	r5, [sp, #3]
    	NVIC_Init(&nvicStructure);
 808502a:	f002 ff1d 	bl	8087e68 <NVIC_Init>
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 808502e:	2300      	movs	r3, #0
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 8085030:	a901      	add	r1, sp, #4
 8085032:	4620      	mov	r0, r4
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8085034:	f8ad 3006 	strh.w	r3, [sp, #6]
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8085038:	f8ad 300c 	strh.w	r3, [sp, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 808503c:	f88d 300e 	strb.w	r3, [sp, #14]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
 8085040:	f8ad 6004 	strh.w	r6, [sp, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = Period;
 8085044:	9702      	str	r7, [sp, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 8085046:	f003 f821 	bl	808808c <TIM_TimeBaseInit>
	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 808504a:	462a      	mov	r2, r5
 808504c:	4629      	mov	r1, r5
 808504e:	4620      	mov	r0, r4
 8085050:	f003 f87e 	bl	8088150 <TIM_ITConfig>
	TIM_Cmd(TIMx, ENABLE);
 8085054:	4629      	mov	r1, r5
 8085056:	4620      	mov	r0, r4
 8085058:	f003 f856 	bl	8088108 <TIM_Cmd>
}
 808505c:	b005      	add	sp, #20
 808505e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085060:	40000400 	.word	0x40000400
 8085064:	40000800 	.word	0x40000800
 8085068:	40000c00 	.word	0x40000c00
 808506c:	40001000 	.word	0x40001000
 8085070:	40001400 	.word	0x40001400
 8085074:	20000908 	.word	0x20000908

08085078 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>:
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 8085078:	2b04      	cmp	r3, #4
// enables the SIT clock if not already enabled, then checks to
// see if any SITs are available for use. if one is available,
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {
 808507a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808507c:	4606      	mov	r6, r0
 808507e:	460f      	mov	r7, r1
 8085080:	4696      	mov	lr, r2
 8085082:	461c      	mov	r4, r3
 8085084:	4d0e      	ldr	r5, [pc, #56]	; (80850c0 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 8085086:	d911      	bls.n	80850ac <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x34>
 8085088:	2400      	movs	r4, #0
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 808508a:	5d2a      	ldrb	r2, [r5, r4]
 808508c:	b2e3      	uxtb	r3, r4
 808508e:	b94a      	cbnz	r2, 80850a4 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x2c>
				SIT_id = tid;
 8085090:	7273      	strb	r3, [r6, #9]
				start_SIT(Period, scale);
 8085092:	4630      	mov	r0, r6
 8085094:	4672      	mov	r2, lr
 8085096:	4639      	mov	r1, r7
 8085098:	f7ff ff7a 	bl	8084f90 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 808509c:	4b08      	ldr	r3, [pc, #32]	; (80850c0 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)
 808509e:	2001      	movs	r0, #1
 80850a0:	5518      	strb	r0, [r3, r4]
 80850a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80850a4:	3401      	adds	r4, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 80850a6:	2c05      	cmp	r4, #5
 80850a8:	d1ef      	bne.n	808508a <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x12>
 80850aa:	e007      	b.n	80850bc <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
		if (!SIT_used[id]) {
 80850ac:	5ceb      	ldrb	r3, [r5, r3]
 80850ae:	b92b      	cbnz	r3, 80850bc <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
			SIT_id = id;
 80850b0:	7244      	strb	r4, [r0, #9]
			start_SIT(Period, scale);
 80850b2:	f7ff ff6d 	bl	8084f90 <_ZN13IntervalTimer9start_SITEmb>
			SIT_used[id] = true;
 80850b6:	2001      	movs	r0, #1
 80850b8:	5528      	strb	r0, [r5, r4]
			return true;
 80850ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	
	// Specified or no auto-allocate SIT available
	return false;
 80850bc:	2000      	movs	r0, #0
}
 80850be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80850c0:	2000091c 	.word	0x2000091c

080850c4 <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80850c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80850c6:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80850c8:	4606      	mov	r6, r0
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80850ca:	2b04      	cmp	r3, #4
 80850cc:	d81c      	bhi.n	8085108 <_ZN13IntervalTimer8stop_SITEv+0x44>
 80850ce:	e8df f003 	tbb	[pc, r3]
 80850d2:	0803      	.short	0x0803
 80850d4:	120d      	.short	0x120d
 80850d6:	17          	.byte	0x17
 80850d7:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80850d8:	231d      	movs	r3, #29
 80850da:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM3;
 80850de:	4c13      	ldr	r4, [pc, #76]	; (808512c <_ZN13IntervalTimer8stop_SITEv+0x68>)
		break;
 80850e0:	e012      	b.n	8085108 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 1:		// TIM4
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80850e2:	231e      	movs	r3, #30
 80850e4:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM4;
 80850e8:	4c11      	ldr	r4, [pc, #68]	; (8085130 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
		break;
 80850ea:	e00d      	b.n	8085108 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 2:		// TIM5
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80850ec:	2332      	movs	r3, #50	; 0x32
 80850ee:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM5;
 80850f2:	4c10      	ldr	r4, [pc, #64]	; (8085134 <_ZN13IntervalTimer8stop_SITEv+0x70>)
		break;
 80850f4:	e008      	b.n	8085108 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80850f6:	2336      	movs	r3, #54	; 0x36
 80850f8:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM6;
 80850fc:	4c0e      	ldr	r4, [pc, #56]	; (8085138 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		break;
 80850fe:	e003      	b.n	8085108 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085100:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 8085102:	4c0e      	ldr	r4, [pc, #56]	; (808513c <_ZN13IntervalTimer8stop_SITEv+0x78>)
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085104:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM7;
		break;
#endif
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
 8085108:	2100      	movs	r1, #0
 808510a:	4620      	mov	r0, r4
 808510c:	f002 fffc 	bl	8088108 <TIM_Cmd>
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8085110:	2500      	movs	r5, #0
    NVIC_Init(&nvicStructure);
 8085112:	a801      	add	r0, sp, #4
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8085114:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&nvicStructure);
 8085118:	f002 fea6 	bl	8087e68 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 808511c:	4620      	mov	r0, r4
 808511e:	f002 feff 	bl	8087f20 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 8085122:	7a73      	ldrb	r3, [r6, #9]
 8085124:	4a06      	ldr	r2, [pc, #24]	; (8085140 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 8085126:	54d5      	strb	r5, [r2, r3]
}
 8085128:	b002      	add	sp, #8
 808512a:	bd70      	pop	{r4, r5, r6, pc}
 808512c:	40000400 	.word	0x40000400
 8085130:	40000800 	.word	0x40000800
 8085134:	40000c00 	.word	0x40000c00
 8085138:	40001000 	.word	0x40001000
 808513c:	40001400 	.word	0x40001400
 8085140:	2000091c 	.word	0x2000091c

08085144 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>:
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 8085144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085148:	461f      	mov	r7, r3

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 808514a:	7a03      	ldrb	r3, [r0, #8]
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 808514c:	4604      	mov	r4, r0
 808514e:	4688      	mov	r8, r1
 8085150:	4616      	mov	r6, r2
 8085152:	f89d 5018 	ldrb.w	r5, [sp, #24]

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 8085156:	b11b      	cbz	r3, 8085160 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x1c>
		stop_SIT();
 8085158:	f7ff ffb4 	bl	80850c4 <_ZN13IntervalTimer8stop_SITEv>
		status = TIMER_OFF;
 808515c:	2300      	movs	r3, #0
 808515e:	7223      	strb	r3, [r4, #8]
	}
	// store callback pointer
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 8085160:	2d04      	cmp	r5, #4
	if (status == TIMER_SIT) {
		stop_SIT();
		status = TIMER_OFF;
	}
	// store callback pointer
	myISRcallback = isrCallback;
 8085162:	f8c4 800c 	str.w	r8, [r4, #12]

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 8085166:	d810      	bhi.n	808518a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x46>
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
 8085168:	462b      	mov	r3, r5
 808516a:	463a      	mov	r2, r7
 808516c:	4631      	mov	r1, r6
 808516e:	4620      	mov	r0, r4
 8085170:	f7ff ff82 	bl	8085078 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>
 8085174:	b120      	cbz	r0, 8085180 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3c>
 8085176:	2301      	movs	r3, #1
 8085178:	e003      	b.n	8085182 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 808517a:	3501      	adds	r5, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 808517c:	2d05      	cmp	r5, #5
 808517e:	d106      	bne.n	808518e <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x4a>
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
		else status = TIMER_OFF;
 8085180:	2300      	movs	r3, #0
 8085182:	7223      	strb	r3, [r4, #8]

	// check for success and return
	if (status != TIMER_OFF) return true;
	return false;

}
 8085184:	7a20      	ldrb	r0, [r4, #8]
 8085186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 808518a:	4b08      	ldr	r3, [pc, #32]	; (80851ac <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 808518c:	2500      	movs	r5, #0
 808518e:	5ce9      	ldrb	r1, [r5, r3]
 8085190:	b2ea      	uxtb	r2, r5
 8085192:	2900      	cmp	r1, #0
 8085194:	d1f1      	bne.n	808517a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x36>
				SIT_id = tid;
 8085196:	7262      	strb	r2, [r4, #9]
				start_SIT(Period, scale);
 8085198:	4631      	mov	r1, r6
 808519a:	463a      	mov	r2, r7
 808519c:	4620      	mov	r0, r4
 808519e:	f7ff fef7 	bl	8084f90 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 80851a2:	4a02      	ldr	r2, [pc, #8]	; (80851ac <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 80851a4:	2301      	movs	r3, #1
 80851a6:	5553      	strb	r3, [r2, r5]
 80851a8:	e7eb      	b.n	8085182 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 80851aa:	bf00      	nop
 80851ac:	2000091c 	.word	0x2000091c

080851b0 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
	if (status == TIMER_SIT) stop_SIT();
 80851b0:	7a03      	ldrb	r3, [r0, #8]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
 80851b2:	b510      	push	{r4, lr}
 80851b4:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 80851b6:	b10b      	cbz	r3, 80851bc <_ZN13IntervalTimer3endEv+0xc>
 80851b8:	f7ff ff84 	bl	80850c4 <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 80851bc:	2300      	movs	r3, #0
 80851be:	7223      	strb	r3, [r4, #8]
 80851c0:	bd10      	pop	{r4, pc}
	...

080851c4 <_ZN13IntervalTimer15resetPeriod_SITEmb>:
// ------------------------------------------------------------
// Set new period for the SIT without
// removing the SIT.
// ------------------------------------------------------------
void IntervalTimer::resetPeriod_SIT(intPeriod newPeriod, bool scale)
{
 80851c4:	b510      	push	{r4, lr}
	//TIM_TimeBaseInitTypeDef timerInitStructure;
	TIM_TypeDef* TIMx;
	intPeriod prescaler;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80851c6:	7a44      	ldrb	r4, [r0, #9]
 80851c8:	2c04      	cmp	r4, #4
 80851ca:	d80d      	bhi.n	80851e8 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
 80851cc:	e8df f004 	tbb	[pc, r4]
 80851d0:	09070503 	.word	0x09070503
 80851d4:	0b          	.byte	0x0b
 80851d5:	00          	.byte	0x00
	case 2:		// TIM4
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		TIMx = TIM3;
 80851d6:	4b0c      	ldr	r3, [pc, #48]	; (8085208 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x44>)
 80851d8:	e006      	b.n	80851e8 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
		break;
	case 1:		// TIM4
		TIMx = TIM4;
 80851da:	4b0c      	ldr	r3, [pc, #48]	; (808520c <_ZN13IntervalTimer15resetPeriod_SITEmb+0x48>)
		break;
 80851dc:	e004      	b.n	80851e8 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 2:		// TIM5
		TIMx = TIM5;
 80851de:	4b0c      	ldr	r3, [pc, #48]	; (8085210 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x4c>)
		break;
 80851e0:	e002      	b.n	80851e8 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 3:		// TIM6
		TIMx = TIM6;
 80851e2:	4b0c      	ldr	r3, [pc, #48]	; (8085214 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x50>)
		break;
 80851e4:	e000      	b.n	80851e8 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x24>
	case 4:		// TIM7
		TIMx = TIM7;
 80851e6:	4b0c      	ldr	r3, [pc, #48]	; (8085218 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x54>)
		break;
#endif
	}

	switch (scale) {
 80851e8:	b11a      	cbz	r2, 80851f2 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
 80851ea:	2a01      	cmp	r2, #1
 80851ec:	d101      	bne.n	80851f2 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x2e>
	case uSec:
		prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
		break;
	case hmSec:
		prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 80851ee:	8882      	ldrh	r2, [r0, #4]
		break;
 80851f0:	e000      	b.n	80851f4 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x30>
	default:
		scale = uSec;				// Default to microseconds
		prescaler = SIT_PRESCALERu;
 80851f2:	8842      	ldrh	r2, [r0, #2]
		break;
	}

	TIMx->ARR = newPeriod;
 80851f4:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIMx->PSC = prescaler;
 80851f6:	b292      	uxth	r2, r2
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80851f8:	2101      	movs	r1, #1
		prescaler = SIT_PRESCALERu;
		break;
	}

	TIMx->ARR = newPeriod;
	TIMx->PSC = prescaler;
 80851fa:	851a      	strh	r2, [r3, #40]	; 0x28
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80851fc:	8299      	strh	r1, [r3, #20]
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 80851fe:	4618      	mov	r0, r3
}
 8085200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	TIMx->ARR = newPeriod;
	TIMx->PSC = prescaler;
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 8085204:	f002 bf97 	b.w	8088136 <TIM_ClearITPendingBit>
 8085208:	40000400 	.word	0x40000400
 808520c:	40000800 	.word	0x40000800
 8085210:	40000c00 	.word	0x40000c00
 8085214:	40001000 	.word	0x40001000
 8085218:	40001400 	.word	0x40001400

0808521c <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 808521c:	f000 b800 	b.w	8085220 <HAL_Pin_Map>

08085220 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8085220:	b508      	push	{r3, lr}
 8085222:	4b02      	ldr	r3, [pc, #8]	; (808522c <HAL_Pin_Map+0xc>)
 8085224:	681b      	ldr	r3, [r3, #0]
 8085226:	681b      	ldr	r3, [r3, #0]
 8085228:	9301      	str	r3, [sp, #4]
 808522a:	bd08      	pop	{r3, pc}
 808522c:	080401b0 	.word	0x080401b0

08085230 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8085230:	b508      	push	{r3, lr}
 8085232:	4b02      	ldr	r3, [pc, #8]	; (808523c <HAL_Validate_Pin_Function+0xc>)
 8085234:	681b      	ldr	r3, [r3, #0]
 8085236:	685b      	ldr	r3, [r3, #4]
 8085238:	9301      	str	r3, [sp, #4]
 808523a:	bd08      	pop	{r3, pc}
 808523c:	080401b0 	.word	0x080401b0

08085240 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8085240:	b508      	push	{r3, lr}
 8085242:	4b02      	ldr	r3, [pc, #8]	; (808524c <HAL_Pin_Mode+0xc>)
 8085244:	681b      	ldr	r3, [r3, #0]
 8085246:	689b      	ldr	r3, [r3, #8]
 8085248:	9301      	str	r3, [sp, #4]
 808524a:	bd08      	pop	{r3, pc}
 808524c:	080401b0 	.word	0x080401b0

08085250 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8085250:	b508      	push	{r3, lr}
 8085252:	4b02      	ldr	r3, [pc, #8]	; (808525c <HAL_Get_Pin_Mode+0xc>)
 8085254:	681b      	ldr	r3, [r3, #0]
 8085256:	68db      	ldr	r3, [r3, #12]
 8085258:	9301      	str	r3, [sp, #4]
 808525a:	bd08      	pop	{r3, pc}
 808525c:	080401b0 	.word	0x080401b0

08085260 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8085260:	b508      	push	{r3, lr}
 8085262:	4b02      	ldr	r3, [pc, #8]	; (808526c <HAL_GPIO_Write+0xc>)
 8085264:	681b      	ldr	r3, [r3, #0]
 8085266:	691b      	ldr	r3, [r3, #16]
 8085268:	9301      	str	r3, [sp, #4]
 808526a:	bd08      	pop	{r3, pc}
 808526c:	080401b0 	.word	0x080401b0

08085270 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8085270:	b508      	push	{r3, lr}
 8085272:	4b02      	ldr	r3, [pc, #8]	; (808527c <HAL_Interrupts_Attach+0xc>)
 8085274:	681b      	ldr	r3, [r3, #0]
 8085276:	699b      	ldr	r3, [r3, #24]
 8085278:	9301      	str	r3, [sp, #4]
 808527a:	bd08      	pop	{r3, pc}
 808527c:	080401b0 	.word	0x080401b0

08085280 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8085280:	b508      	push	{r3, lr}
 8085282:	4b02      	ldr	r3, [pc, #8]	; (808528c <HAL_Interrupts_Detach+0xc>)
 8085284:	681b      	ldr	r3, [r3, #0]
 8085286:	69db      	ldr	r3, [r3, #28]
 8085288:	9301      	str	r3, [sp, #4]
 808528a:	bd08      	pop	{r3, pc}
 808528c:	080401b0 	.word	0x080401b0

08085290 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8085290:	b508      	push	{r3, lr}
 8085292:	4b02      	ldr	r3, [pc, #8]	; (808529c <HAL_ADC_Read+0xc>)
 8085294:	681b      	ldr	r3, [r3, #0]
 8085296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085298:	9301      	str	r3, [sp, #4]
 808529a:	bd08      	pop	{r3, pc}
 808529c:	080401b0 	.word	0x080401b0

080852a0 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 80852a0:	b508      	push	{r3, lr}
 80852a2:	4b02      	ldr	r3, [pc, #8]	; (80852ac <HAL_Set_System_Interrupt_Handler+0xc>)
 80852a4:	681b      	ldr	r3, [r3, #0]
 80852a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80852a8:	9301      	str	r3, [sp, #4]
 80852aa:	bd08      	pop	{r3, pc}
 80852ac:	080401b0 	.word	0x080401b0

080852b0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80852b0:	b508      	push	{r3, lr}
 80852b2:	4b02      	ldr	r3, [pc, #8]	; (80852bc <HAL_SPI_Begin+0xc>)
 80852b4:	681b      	ldr	r3, [r3, #0]
 80852b6:	681b      	ldr	r3, [r3, #0]
 80852b8:	9301      	str	r3, [sp, #4]
 80852ba:	bd08      	pop	{r3, pc}
 80852bc:	080401b4 	.word	0x080401b4

080852c0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80852c0:	b508      	push	{r3, lr}
 80852c2:	4b02      	ldr	r3, [pc, #8]	; (80852cc <HAL_SPI_Send_Receive_Data+0xc>)
 80852c4:	681b      	ldr	r3, [r3, #0]
 80852c6:	695b      	ldr	r3, [r3, #20]
 80852c8:	9301      	str	r3, [sp, #4]
 80852ca:	bd08      	pop	{r3, pc}
 80852cc:	080401b4 	.word	0x080401b4

080852d0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80852d0:	b508      	push	{r3, lr}
 80852d2:	4b02      	ldr	r3, [pc, #8]	; (80852dc <HAL_SPI_Init+0xc>)
 80852d4:	681b      	ldr	r3, [r3, #0]
 80852d6:	69db      	ldr	r3, [r3, #28]
 80852d8:	9301      	str	r3, [sp, #4]
 80852da:	bd08      	pop	{r3, pc}
 80852dc:	080401b4 	.word	0x080401b4

080852e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80852e0:	b508      	push	{r3, lr}
 80852e2:	4b02      	ldr	r3, [pc, #8]	; (80852ec <HAL_SPI_Is_Enabled+0xc>)
 80852e4:	681b      	ldr	r3, [r3, #0]
 80852e6:	6a1b      	ldr	r3, [r3, #32]
 80852e8:	9301      	str	r3, [sp, #4]
 80852ea:	bd08      	pop	{r3, pc}
 80852ec:	080401b4 	.word	0x080401b4

080852f0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80852f0:	b508      	push	{r3, lr}
 80852f2:	4b02      	ldr	r3, [pc, #8]	; (80852fc <HAL_SPI_Info+0xc>)
 80852f4:	681b      	ldr	r3, [r3, #0]
 80852f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80852f8:	9301      	str	r3, [sp, #4]
 80852fa:	bd08      	pop	{r3, pc}
 80852fc:	080401b4 	.word	0x080401b4

08085300 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8085300:	b508      	push	{r3, lr}
 8085302:	4b02      	ldr	r3, [pc, #8]	; (808530c <HAL_SPI_DMA_Transfer+0xc>)
 8085304:	681b      	ldr	r3, [r3, #0]
 8085306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085308:	9301      	str	r3, [sp, #4]
 808530a:	bd08      	pop	{r3, pc}
 808530c:	080401b4 	.word	0x080401b4

08085310 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8085310:	b508      	push	{r3, lr}
 8085312:	4b02      	ldr	r3, [pc, #8]	; (808531c <HAL_SPI_DMA_Transfer_Status+0xc>)
 8085314:	681b      	ldr	r3, [r3, #0]
 8085316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085318:	9301      	str	r3, [sp, #4]
 808531a:	bd08      	pop	{r3, pc}
 808531c:	080401b4 	.word	0x080401b4

08085320 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8085320:	b508      	push	{r3, lr}
 8085322:	4b02      	ldr	r3, [pc, #8]	; (808532c <HAL_SPI_Set_Settings+0xc>)
 8085324:	681b      	ldr	r3, [r3, #0]
 8085326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085328:	9301      	str	r3, [sp, #4]
 808532a:	bd08      	pop	{r3, pc}
 808532c:	080401b4 	.word	0x080401b4

08085330 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8085330:	b508      	push	{r3, lr}
 8085332:	4b02      	ldr	r3, [pc, #8]	; (808533c <HAL_RNG_GetRandomNumber+0xc>)
 8085334:	681b      	ldr	r3, [r3, #0]
 8085336:	685b      	ldr	r3, [r3, #4]
 8085338:	9301      	str	r3, [sp, #4]
 808533a:	bd08      	pop	{r3, pc}
 808533c:	0804019c 	.word	0x0804019c

08085340 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8085340:	b508      	push	{r3, lr}
 8085342:	4b02      	ldr	r3, [pc, #8]	; (808534c <HAL_Delay_Milliseconds+0xc>)
 8085344:	681b      	ldr	r3, [r3, #0]
 8085346:	689b      	ldr	r3, [r3, #8]
 8085348:	9301      	str	r3, [sp, #4]
 808534a:	bd08      	pop	{r3, pc}
 808534c:	0804019c 	.word	0x0804019c

08085350 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8085350:	b508      	push	{r3, lr}
 8085352:	4b02      	ldr	r3, [pc, #8]	; (808535c <HAL_Timer_Get_Micro_Seconds+0xc>)
 8085354:	681b      	ldr	r3, [r3, #0]
 8085356:	691b      	ldr	r3, [r3, #16]
 8085358:	9301      	str	r3, [sp, #4]
 808535a:	bd08      	pop	{r3, pc}
 808535c:	0804019c 	.word	0x0804019c

08085360 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8085360:	b508      	push	{r3, lr}
 8085362:	4b02      	ldr	r3, [pc, #8]	; (808536c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8085364:	681b      	ldr	r3, [r3, #0]
 8085366:	695b      	ldr	r3, [r3, #20]
 8085368:	9301      	str	r3, [sp, #4]
 808536a:	bd08      	pop	{r3, pc}
 808536c:	0804019c 	.word	0x0804019c

08085370 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8085370:	b508      	push	{r3, lr}
 8085372:	4b02      	ldr	r3, [pc, #8]	; (808537c <HAL_RTC_Get_UnixTime+0xc>)
 8085374:	681b      	ldr	r3, [r3, #0]
 8085376:	69db      	ldr	r3, [r3, #28]
 8085378:	9301      	str	r3, [sp, #4]
 808537a:	bd08      	pop	{r3, pc}
 808537c:	0804019c 	.word	0x0804019c

08085380 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8085380:	b508      	push	{r3, lr}
 8085382:	4b02      	ldr	r3, [pc, #8]	; (808538c <HAL_RTC_Time_Is_Valid+0xc>)
 8085384:	681b      	ldr	r3, [r3, #0]
 8085386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085388:	9301      	str	r3, [sp, #4]
 808538a:	bd08      	pop	{r3, pc}
 808538c:	0804019c 	.word	0x0804019c

08085390 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8085390:	b508      	push	{r3, lr}
 8085392:	4b02      	ldr	r3, [pc, #8]	; (808539c <hal_timer_millis+0xc>)
 8085394:	681b      	ldr	r3, [r3, #0]
 8085396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8085398:	9301      	str	r3, [sp, #4]
 808539a:	bd08      	pop	{r3, pc}
 808539c:	0804019c 	.word	0x0804019c

080853a0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80853a0:	b508      	push	{r3, lr}
 80853a2:	4b02      	ldr	r3, [pc, #8]	; (80853ac <HAL_Core_System_Reset_Ex+0xc>)
 80853a4:	681b      	ldr	r3, [r3, #0]
 80853a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80853a8:	9301      	str	r3, [sp, #4]
 80853aa:	bd08      	pop	{r3, pc}
 80853ac:	080401b8 	.word	0x080401b8

080853b0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80853b0:	b508      	push	{r3, lr}
 80853b2:	4b02      	ldr	r3, [pc, #8]	; (80853bc <os_thread_create+0xc>)
 80853b4:	681b      	ldr	r3, [r3, #0]
 80853b6:	685b      	ldr	r3, [r3, #4]
 80853b8:	9301      	str	r3, [sp, #4]
 80853ba:	bd08      	pop	{r3, pc}
 80853bc:	080401d0 	.word	0x080401d0

080853c0 <os_thread_cleanup>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80853c0:	b508      	push	{r3, lr}
 80853c2:	4b02      	ldr	r3, [pc, #8]	; (80853cc <os_thread_cleanup+0xc>)
 80853c4:	681b      	ldr	r3, [r3, #0]
 80853c6:	695b      	ldr	r3, [r3, #20]
 80853c8:	9301      	str	r3, [sp, #4]
 80853ca:	bd08      	pop	{r3, pc}
 80853cc:	080401d0 	.word	0x080401d0

080853d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80853d0:	b508      	push	{r3, lr}
 80853d2:	4b02      	ldr	r3, [pc, #8]	; (80853dc <os_mutex_recursive_create+0xc>)
 80853d4:	681b      	ldr	r3, [r3, #0]
 80853d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80853d8:	9301      	str	r3, [sp, #4]
 80853da:	bd08      	pop	{r3, pc}
 80853dc:	080401d0 	.word	0x080401d0

080853e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80853e0:	b508      	push	{r3, lr}
 80853e2:	4b02      	ldr	r3, [pc, #8]	; (80853ec <os_mutex_recursive_destroy+0xc>)
 80853e4:	681b      	ldr	r3, [r3, #0]
 80853e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80853e8:	9301      	str	r3, [sp, #4]
 80853ea:	bd08      	pop	{r3, pc}
 80853ec:	080401d0 	.word	0x080401d0

080853f0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80853f0:	b508      	push	{r3, lr}
 80853f2:	4b02      	ldr	r3, [pc, #8]	; (80853fc <os_mutex_recursive_lock+0xc>)
 80853f4:	681b      	ldr	r3, [r3, #0]
 80853f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80853f8:	9301      	str	r3, [sp, #4]
 80853fa:	bd08      	pop	{r3, pc}
 80853fc:	080401d0 	.word	0x080401d0

08085400 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8085400:	b508      	push	{r3, lr}
 8085402:	4b02      	ldr	r3, [pc, #8]	; (808540c <os_mutex_recursive_unlock+0xc>)
 8085404:	681b      	ldr	r3, [r3, #0]
 8085406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085408:	9301      	str	r3, [sp, #4]
 808540a:	bd08      	pop	{r3, pc}
 808540c:	080401d0 	.word	0x080401d0

08085410 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8085410:	b508      	push	{r3, lr}
 8085412:	4b02      	ldr	r3, [pc, #8]	; (808541c <os_thread_exit+0xc>)
 8085414:	681b      	ldr	r3, [r3, #0]
 8085416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085418:	9301      	str	r3, [sp, #4]
 808541a:	bd08      	pop	{r3, pc}
 808541c:	080401d0 	.word	0x080401d0

08085420 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8085420:	b508      	push	{r3, lr}
 8085422:	4b02      	ldr	r3, [pc, #8]	; (808542c <HAL_USART_Init+0xc>)
 8085424:	681b      	ldr	r3, [r3, #0]
 8085426:	699b      	ldr	r3, [r3, #24]
 8085428:	9301      	str	r3, [sp, #4]
 808542a:	bd08      	pop	{r3, pc}
 808542c:	080401c4 	.word	0x080401c4

08085430 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8085430:	b508      	push	{r3, lr}
 8085432:	4b02      	ldr	r3, [pc, #8]	; (808543c <HAL_USART_Write_Data+0xc>)
 8085434:	681b      	ldr	r3, [r3, #0]
 8085436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085438:	9301      	str	r3, [sp, #4]
 808543a:	bd08      	pop	{r3, pc}
 808543c:	080401c4 	.word	0x080401c4

08085440 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8085440:	b508      	push	{r3, lr}
 8085442:	4b02      	ldr	r3, [pc, #8]	; (808544c <HAL_USART_Available_Data+0xc>)
 8085444:	681b      	ldr	r3, [r3, #0]
 8085446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085448:	9301      	str	r3, [sp, #4]
 808544a:	bd08      	pop	{r3, pc}
 808544c:	080401c4 	.word	0x080401c4

08085450 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8085450:	b508      	push	{r3, lr}
 8085452:	4b02      	ldr	r3, [pc, #8]	; (808545c <HAL_USART_Read_Data+0xc>)
 8085454:	681b      	ldr	r3, [r3, #0]
 8085456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085458:	9301      	str	r3, [sp, #4]
 808545a:	bd08      	pop	{r3, pc}
 808545c:	080401c4 	.word	0x080401c4

08085460 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8085460:	b508      	push	{r3, lr}
 8085462:	4b02      	ldr	r3, [pc, #8]	; (808546c <HAL_USART_Peek_Data+0xc>)
 8085464:	681b      	ldr	r3, [r3, #0]
 8085466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085468:	9301      	str	r3, [sp, #4]
 808546a:	bd08      	pop	{r3, pc}
 808546c:	080401c4 	.word	0x080401c4

08085470 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8085470:	b508      	push	{r3, lr}
 8085472:	4b02      	ldr	r3, [pc, #8]	; (808547c <HAL_USART_Flush_Data+0xc>)
 8085474:	681b      	ldr	r3, [r3, #0]
 8085476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085478:	9301      	str	r3, [sp, #4]
 808547a:	bd08      	pop	{r3, pc}
 808547c:	080401c4 	.word	0x080401c4

08085480 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8085480:	b508      	push	{r3, lr}
 8085482:	4b02      	ldr	r3, [pc, #8]	; (808548c <HAL_USART_Is_Enabled+0xc>)
 8085484:	681b      	ldr	r3, [r3, #0]
 8085486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085488:	9301      	str	r3, [sp, #4]
 808548a:	bd08      	pop	{r3, pc}
 808548c:	080401c4 	.word	0x080401c4

08085490 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8085490:	b508      	push	{r3, lr}
 8085492:	4b02      	ldr	r3, [pc, #8]	; (808549c <HAL_USART_Available_Data_For_Write+0xc>)
 8085494:	681b      	ldr	r3, [r3, #0]
 8085496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085498:	9301      	str	r3, [sp, #4]
 808549a:	bd08      	pop	{r3, pc}
 808549c:	080401c4 	.word	0x080401c4

080854a0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80854a0:	b508      	push	{r3, lr}
 80854a2:	4b02      	ldr	r3, [pc, #8]	; (80854ac <HAL_USART_BeginConfig+0xc>)
 80854a4:	681b      	ldr	r3, [r3, #0]
 80854a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80854a8:	9301      	str	r3, [sp, #4]
 80854aa:	bd08      	pop	{r3, pc}
 80854ac:	080401c4 	.word	0x080401c4

080854b0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80854b0:	b508      	push	{r3, lr}
 80854b2:	4b02      	ldr	r3, [pc, #8]	; (80854bc <HAL_I2C_Begin+0xc>)
 80854b4:	681b      	ldr	r3, [r3, #0]
 80854b6:	68db      	ldr	r3, [r3, #12]
 80854b8:	9301      	str	r3, [sp, #4]
 80854ba:	bd08      	pop	{r3, pc}
 80854bc:	080401ac 	.word	0x080401ac

080854c0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80854c0:	b508      	push	{r3, lr}
 80854c2:	4b02      	ldr	r3, [pc, #8]	; (80854cc <HAL_I2C_Begin_Transmission+0xc>)
 80854c4:	681b      	ldr	r3, [r3, #0]
 80854c6:	699b      	ldr	r3, [r3, #24]
 80854c8:	9301      	str	r3, [sp, #4]
 80854ca:	bd08      	pop	{r3, pc}
 80854cc:	080401ac 	.word	0x080401ac

080854d0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80854d0:	b508      	push	{r3, lr}
 80854d2:	4b02      	ldr	r3, [pc, #8]	; (80854dc <HAL_I2C_End_Transmission+0xc>)
 80854d4:	681b      	ldr	r3, [r3, #0]
 80854d6:	69db      	ldr	r3, [r3, #28]
 80854d8:	9301      	str	r3, [sp, #4]
 80854da:	bd08      	pop	{r3, pc}
 80854dc:	080401ac 	.word	0x080401ac

080854e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80854e0:	b508      	push	{r3, lr}
 80854e2:	4b02      	ldr	r3, [pc, #8]	; (80854ec <HAL_I2C_Write_Data+0xc>)
 80854e4:	681b      	ldr	r3, [r3, #0]
 80854e6:	6a1b      	ldr	r3, [r3, #32]
 80854e8:	9301      	str	r3, [sp, #4]
 80854ea:	bd08      	pop	{r3, pc}
 80854ec:	080401ac 	.word	0x080401ac

080854f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80854f0:	b508      	push	{r3, lr}
 80854f2:	4b02      	ldr	r3, [pc, #8]	; (80854fc <HAL_I2C_Available_Data+0xc>)
 80854f4:	681b      	ldr	r3, [r3, #0]
 80854f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80854f8:	9301      	str	r3, [sp, #4]
 80854fa:	bd08      	pop	{r3, pc}
 80854fc:	080401ac 	.word	0x080401ac

08085500 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8085500:	b508      	push	{r3, lr}
 8085502:	4b02      	ldr	r3, [pc, #8]	; (808550c <HAL_I2C_Read_Data+0xc>)
 8085504:	681b      	ldr	r3, [r3, #0]
 8085506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085508:	9301      	str	r3, [sp, #4]
 808550a:	bd08      	pop	{r3, pc}
 808550c:	080401ac 	.word	0x080401ac

08085510 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8085510:	b508      	push	{r3, lr}
 8085512:	4b02      	ldr	r3, [pc, #8]	; (808551c <HAL_I2C_Peek_Data+0xc>)
 8085514:	681b      	ldr	r3, [r3, #0]
 8085516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085518:	9301      	str	r3, [sp, #4]
 808551a:	bd08      	pop	{r3, pc}
 808551c:	080401ac 	.word	0x080401ac

08085520 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8085520:	b508      	push	{r3, lr}
 8085522:	4b02      	ldr	r3, [pc, #8]	; (808552c <HAL_I2C_Flush_Data+0xc>)
 8085524:	681b      	ldr	r3, [r3, #0]
 8085526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085528:	9301      	str	r3, [sp, #4]
 808552a:	bd08      	pop	{r3, pc}
 808552c:	080401ac 	.word	0x080401ac

08085530 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8085530:	b508      	push	{r3, lr}
 8085532:	4b02      	ldr	r3, [pc, #8]	; (808553c <HAL_I2C_Is_Enabled+0xc>)
 8085534:	681b      	ldr	r3, [r3, #0]
 8085536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085538:	9301      	str	r3, [sp, #4]
 808553a:	bd08      	pop	{r3, pc}
 808553c:	080401ac 	.word	0x080401ac

08085540 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8085540:	b508      	push	{r3, lr}
 8085542:	4b02      	ldr	r3, [pc, #8]	; (808554c <HAL_I2C_Init+0xc>)
 8085544:	681b      	ldr	r3, [r3, #0]
 8085546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085548:	9301      	str	r3, [sp, #4]
 808554a:	bd08      	pop	{r3, pc}
 808554c:	080401ac 	.word	0x080401ac

08085550 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8085550:	b508      	push	{r3, lr}
 8085552:	4b02      	ldr	r3, [pc, #8]	; (808555c <HAL_I2C_Acquire+0xc>)
 8085554:	681b      	ldr	r3, [r3, #0]
 8085556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085558:	9301      	str	r3, [sp, #4]
 808555a:	bd08      	pop	{r3, pc}
 808555c:	080401ac 	.word	0x080401ac

08085560 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8085560:	b508      	push	{r3, lr}
 8085562:	4b02      	ldr	r3, [pc, #8]	; (808556c <HAL_I2C_Release+0xc>)
 8085564:	681b      	ldr	r3, [r3, #0]
 8085566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085568:	9301      	str	r3, [sp, #4]
 808556a:	bd08      	pop	{r3, pc}
 808556c:	080401ac 	.word	0x080401ac

08085570 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8085570:	b508      	push	{r3, lr}
 8085572:	4b02      	ldr	r3, [pc, #8]	; (808557c <HAL_I2C_Request_Data_Ex+0xc>)
 8085574:	681b      	ldr	r3, [r3, #0]
 8085576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085578:	9301      	str	r3, [sp, #4]
 808557a:	bd08      	pop	{r3, pc}
 808557c:	080401ac 	.word	0x080401ac

08085580 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8085580:	b508      	push	{r3, lr}
 8085582:	4b02      	ldr	r3, [pc, #8]	; (808558c <socket_active_status+0xc>)
 8085584:	681b      	ldr	r3, [r3, #0]
 8085586:	681b      	ldr	r3, [r3, #0]
 8085588:	9301      	str	r3, [sp, #4]
 808558a:	bd08      	pop	{r3, pc}
 808558c:	08060024 	.word	0x08060024

08085590 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8085590:	b508      	push	{r3, lr}
 8085592:	4b02      	ldr	r3, [pc, #8]	; (808559c <socket_handle_valid+0xc>)
 8085594:	681b      	ldr	r3, [r3, #0]
 8085596:	685b      	ldr	r3, [r3, #4]
 8085598:	9301      	str	r3, [sp, #4]
 808559a:	bd08      	pop	{r3, pc}
 808559c:	08060024 	.word	0x08060024

080855a0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80855a0:	b508      	push	{r3, lr}
 80855a2:	4b02      	ldr	r3, [pc, #8]	; (80855ac <socket_create+0xc>)
 80855a4:	681b      	ldr	r3, [r3, #0]
 80855a6:	689b      	ldr	r3, [r3, #8]
 80855a8:	9301      	str	r3, [sp, #4]
 80855aa:	bd08      	pop	{r3, pc}
 80855ac:	08060024 	.word	0x08060024

080855b0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80855b0:	b508      	push	{r3, lr}
 80855b2:	4b02      	ldr	r3, [pc, #8]	; (80855bc <socket_connect+0xc>)
 80855b4:	681b      	ldr	r3, [r3, #0]
 80855b6:	68db      	ldr	r3, [r3, #12]
 80855b8:	9301      	str	r3, [sp, #4]
 80855ba:	bd08      	pop	{r3, pc}
 80855bc:	08060024 	.word	0x08060024

080855c0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80855c0:	b508      	push	{r3, lr}
 80855c2:	4b02      	ldr	r3, [pc, #8]	; (80855cc <socket_receive+0xc>)
 80855c4:	681b      	ldr	r3, [r3, #0]
 80855c6:	691b      	ldr	r3, [r3, #16]
 80855c8:	9301      	str	r3, [sp, #4]
 80855ca:	bd08      	pop	{r3, pc}
 80855cc:	08060024 	.word	0x08060024

080855d0 <socket_receivefrom>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80855d0:	b508      	push	{r3, lr}
 80855d2:	4b02      	ldr	r3, [pc, #8]	; (80855dc <socket_receivefrom+0xc>)
 80855d4:	681b      	ldr	r3, [r3, #0]
 80855d6:	695b      	ldr	r3, [r3, #20]
 80855d8:	9301      	str	r3, [sp, #4]
 80855da:	bd08      	pop	{r3, pc}
 80855dc:	08060024 	.word	0x08060024

080855e0 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80855e0:	b508      	push	{r3, lr}
 80855e2:	4b02      	ldr	r3, [pc, #8]	; (80855ec <socket_sendto+0xc>)
 80855e4:	681b      	ldr	r3, [r3, #0]
 80855e6:	69db      	ldr	r3, [r3, #28]
 80855e8:	9301      	str	r3, [sp, #4]
 80855ea:	bd08      	pop	{r3, pc}
 80855ec:	08060024 	.word	0x08060024

080855f0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80855f0:	b508      	push	{r3, lr}
 80855f2:	4b02      	ldr	r3, [pc, #8]	; (80855fc <socket_close+0xc>)
 80855f4:	681b      	ldr	r3, [r3, #0]
 80855f6:	6a1b      	ldr	r3, [r3, #32]
 80855f8:	9301      	str	r3, [sp, #4]
 80855fa:	bd08      	pop	{r3, pc}
 80855fc:	08060024 	.word	0x08060024

08085600 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8085600:	b508      	push	{r3, lr}
 8085602:	4b02      	ldr	r3, [pc, #8]	; (808560c <socket_handle_invalid+0xc>)
 8085604:	681b      	ldr	r3, [r3, #0]
 8085606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085608:	9301      	str	r3, [sp, #4]
 808560a:	bd08      	pop	{r3, pc}
 808560c:	08060024 	.word	0x08060024

08085610 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 8085610:	b508      	push	{r3, lr}
 8085612:	4b02      	ldr	r3, [pc, #8]	; (808561c <socket_send_ex+0xc>)
 8085614:	681b      	ldr	r3, [r3, #0]
 8085616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085618:	9301      	str	r3, [sp, #4]
 808561a:	bd08      	pop	{r3, pc}
 808561c:	08060024 	.word	0x08060024

08085620 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 8085620:	b508      	push	{r3, lr}
 8085622:	4b02      	ldr	r3, [pc, #8]	; (808562c <HAL_NET_SetNetWatchDog+0xc>)
 8085624:	681b      	ldr	r3, [r3, #0]
 8085626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085628:	9301      	str	r3, [sp, #4]
 808562a:	bd08      	pop	{r3, pc}
 808562c:	08060020 	.word	0x08060020

08085630 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8085630:	b508      	push	{r3, lr}
 8085632:	4b02      	ldr	r3, [pc, #8]	; (808563c <inet_gethostbyname+0xc>)
 8085634:	681b      	ldr	r3, [r3, #0]
 8085636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085638:	9301      	str	r3, [sp, #4]
 808563a:	bd08      	pop	{r3, pc}
 808563c:	08060020 	.word	0x08060020

08085640 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8085640:	b508      	push	{r3, lr}
 8085642:	4b02      	ldr	r3, [pc, #8]	; (808564c <cellular_signal+0xc>)
 8085644:	681b      	ldr	r3, [r3, #0]
 8085646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085648:	9301      	str	r3, [sp, #4]
 808564a:	bd08      	pop	{r3, pc}
 808564c:	08060020 	.word	0x08060020

08085650 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8085650:	b508      	push	{r3, lr}
 8085652:	4b02      	ldr	r3, [pc, #8]	; (808565c <HAL_USB_USART_Init+0xc>)
 8085654:	681b      	ldr	r3, [r3, #0]
 8085656:	681b      	ldr	r3, [r3, #0]
 8085658:	9301      	str	r3, [sp, #4]
 808565a:	bd08      	pop	{r3, pc}
 808565c:	0806001c 	.word	0x0806001c

08085660 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8085660:	b508      	push	{r3, lr}
 8085662:	4b02      	ldr	r3, [pc, #8]	; (808566c <HAL_USB_USART_Begin+0xc>)
 8085664:	681b      	ldr	r3, [r3, #0]
 8085666:	685b      	ldr	r3, [r3, #4]
 8085668:	9301      	str	r3, [sp, #4]
 808566a:	bd08      	pop	{r3, pc}
 808566c:	0806001c 	.word	0x0806001c

08085670 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8085670:	b508      	push	{r3, lr}
 8085672:	4b02      	ldr	r3, [pc, #8]	; (808567c <HAL_USB_USART_Available_Data+0xc>)
 8085674:	681b      	ldr	r3, [r3, #0]
 8085676:	691b      	ldr	r3, [r3, #16]
 8085678:	9301      	str	r3, [sp, #4]
 808567a:	bd08      	pop	{r3, pc}
 808567c:	0806001c 	.word	0x0806001c

08085680 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8085680:	b508      	push	{r3, lr}
 8085682:	4b02      	ldr	r3, [pc, #8]	; (808568c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8085684:	681b      	ldr	r3, [r3, #0]
 8085686:	695b      	ldr	r3, [r3, #20]
 8085688:	9301      	str	r3, [sp, #4]
 808568a:	bd08      	pop	{r3, pc}
 808568c:	0806001c 	.word	0x0806001c

08085690 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8085690:	b508      	push	{r3, lr}
 8085692:	4b02      	ldr	r3, [pc, #8]	; (808569c <HAL_USB_USART_Receive_Data+0xc>)
 8085694:	681b      	ldr	r3, [r3, #0]
 8085696:	699b      	ldr	r3, [r3, #24]
 8085698:	9301      	str	r3, [sp, #4]
 808569a:	bd08      	pop	{r3, pc}
 808569c:	0806001c 	.word	0x0806001c

080856a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80856a0:	b508      	push	{r3, lr}
 80856a2:	4b02      	ldr	r3, [pc, #8]	; (80856ac <HAL_USB_USART_Send_Data+0xc>)
 80856a4:	681b      	ldr	r3, [r3, #0]
 80856a6:	69db      	ldr	r3, [r3, #28]
 80856a8:	9301      	str	r3, [sp, #4]
 80856aa:	bd08      	pop	{r3, pc}
 80856ac:	0806001c 	.word	0x0806001c

080856b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80856b0:	b508      	push	{r3, lr}
 80856b2:	4b02      	ldr	r3, [pc, #8]	; (80856bc <HAL_USB_USART_Flush_Data+0xc>)
 80856b4:	681b      	ldr	r3, [r3, #0]
 80856b6:	6a1b      	ldr	r3, [r3, #32]
 80856b8:	9301      	str	r3, [sp, #4]
 80856ba:	bd08      	pop	{r3, pc}
 80856bc:	0806001c 	.word	0x0806001c

080856c0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80856c0:	b508      	push	{r3, lr}
 80856c2:	4b02      	ldr	r3, [pc, #8]	; (80856cc <log_message+0xc>)
 80856c4:	681b      	ldr	r3, [r3, #0]
 80856c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80856c8:	9301      	str	r3, [sp, #4]
 80856ca:	bd08      	pop	{r3, pc}
 80856cc:	080201a0 	.word	0x080201a0

080856d0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80856d0:	b508      	push	{r3, lr}
 80856d2:	4b02      	ldr	r3, [pc, #8]	; (80856dc <log_message_v+0xc>)
 80856d4:	681b      	ldr	r3, [r3, #0]
 80856d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80856d8:	9301      	str	r3, [sp, #4]
 80856da:	bd08      	pop	{r3, pc}
 80856dc:	080201a0 	.word	0x080201a0

080856e0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80856e0:	b508      	push	{r3, lr}
 80856e2:	4b02      	ldr	r3, [pc, #8]	; (80856ec <system_mode+0xc>)
 80856e4:	681b      	ldr	r3, [r3, #0]
 80856e6:	681b      	ldr	r3, [r3, #0]
 80856e8:	9301      	str	r3, [sp, #4]
 80856ea:	bd08      	pop	{r3, pc}
 80856ec:	080401a4 	.word	0x080401a4

080856f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80856f0:	b508      	push	{r3, lr}
 80856f2:	4b02      	ldr	r3, [pc, #8]	; (80856fc <set_system_mode+0xc>)
 80856f4:	681b      	ldr	r3, [r3, #0]
 80856f6:	685b      	ldr	r3, [r3, #4]
 80856f8:	9301      	str	r3, [sp, #4]
 80856fa:	bd08      	pop	{r3, pc}
 80856fc:	080401a4 	.word	0x080401a4

08085700 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8085700:	b508      	push	{r3, lr}
 8085702:	4b02      	ldr	r3, [pc, #8]	; (808570c <system_delay_ms+0xc>)
 8085704:	681b      	ldr	r3, [r3, #0]
 8085706:	695b      	ldr	r3, [r3, #20]
 8085708:	9301      	str	r3, [sp, #4]
 808570a:	bd08      	pop	{r3, pc}
 808570c:	080401a4 	.word	0x080401a4

08085710 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8085710:	b508      	push	{r3, lr}
 8085712:	4b02      	ldr	r3, [pc, #8]	; (808571c <system_sleep+0xc>)
 8085714:	681b      	ldr	r3, [r3, #0]
 8085716:	699b      	ldr	r3, [r3, #24]
 8085718:	9301      	str	r3, [sp, #4]
 808571a:	bd08      	pop	{r3, pc}
 808571c:	080401a4 	.word	0x080401a4

08085720 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8085720:	b508      	push	{r3, lr}
 8085722:	4b02      	ldr	r3, [pc, #8]	; (808572c <system_thread_set_state+0xc>)
 8085724:	681b      	ldr	r3, [r3, #0]
 8085726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085728:	9301      	str	r3, [sp, #4]
 808572a:	bd08      	pop	{r3, pc}
 808572c:	080401a4 	.word	0x080401a4

08085730 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8085730:	b508      	push	{r3, lr}
 8085732:	4b02      	ldr	r3, [pc, #8]	; (808573c <application_thread_current+0xc>)
 8085734:	681b      	ldr	r3, [r3, #0]
 8085736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085738:	9301      	str	r3, [sp, #4]
 808573a:	bd08      	pop	{r3, pc}
 808573c:	080401a4 	.word	0x080401a4

08085740 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8085740:	b508      	push	{r3, lr}
 8085742:	4b02      	ldr	r3, [pc, #8]	; (808574c <application_thread_invoke+0xc>)
 8085744:	681b      	ldr	r3, [r3, #0]
 8085746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085748:	9301      	str	r3, [sp, #4]
 808574a:	bd08      	pop	{r3, pc}
 808574c:	080401a4 	.word	0x080401a4

08085750 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8085750:	b508      	push	{r3, lr}
 8085752:	4b02      	ldr	r3, [pc, #8]	; (808575c <system_thread_get_state+0xc>)
 8085754:	681b      	ldr	r3, [r3, #0]
 8085756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085758:	9301      	str	r3, [sp, #4]
 808575a:	bd08      	pop	{r3, pc}
 808575c:	080401a4 	.word	0x080401a4

08085760 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8085760:	b508      	push	{r3, lr}
 8085762:	4b03      	ldr	r3, [pc, #12]	; (8085770 <system_ctrl_set_app_request_handler+0x10>)
 8085764:	681b      	ldr	r3, [r3, #0]
 8085766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808576a:	9301      	str	r3, [sp, #4]
 808576c:	bd08      	pop	{r3, pc}
 808576e:	0000      	.short	0x0000
 8085770:	080401a4 	.word	0x080401a4

08085774 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8085774:	b508      	push	{r3, lr}
 8085776:	4b03      	ldr	r3, [pc, #12]	; (8085784 <system_ctrl_set_result+0x10>)
 8085778:	681b      	ldr	r3, [r3, #0]
 808577a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808577e:	9301      	str	r3, [sp, #4]
 8085780:	bd08      	pop	{r3, pc}
 8085782:	0000      	.short	0x0000
 8085784:	080401a4 	.word	0x080401a4

08085788 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8085788:	b508      	push	{r3, lr}
 808578a:	4b02      	ldr	r3, [pc, #8]	; (8085794 <network_connect+0xc>)
 808578c:	681b      	ldr	r3, [r3, #0]
 808578e:	685b      	ldr	r3, [r3, #4]
 8085790:	9301      	str	r3, [sp, #4]
 8085792:	bd08      	pop	{r3, pc}
 8085794:	080401c8 	.word	0x080401c8

08085798 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8085798:	b508      	push	{r3, lr}
 808579a:	4b02      	ldr	r3, [pc, #8]	; (80857a4 <network_connecting+0xc>)
 808579c:	681b      	ldr	r3, [r3, #0]
 808579e:	689b      	ldr	r3, [r3, #8]
 80857a0:	9301      	str	r3, [sp, #4]
 80857a2:	bd08      	pop	{r3, pc}
 80857a4:	080401c8 	.word	0x080401c8

080857a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80857a8:	b508      	push	{r3, lr}
 80857aa:	4b02      	ldr	r3, [pc, #8]	; (80857b4 <network_disconnect+0xc>)
 80857ac:	681b      	ldr	r3, [r3, #0]
 80857ae:	68db      	ldr	r3, [r3, #12]
 80857b0:	9301      	str	r3, [sp, #4]
 80857b2:	bd08      	pop	{r3, pc}
 80857b4:	080401c8 	.word	0x080401c8

080857b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80857b8:	b508      	push	{r3, lr}
 80857ba:	4b02      	ldr	r3, [pc, #8]	; (80857c4 <network_ready+0xc>)
 80857bc:	681b      	ldr	r3, [r3, #0]
 80857be:	691b      	ldr	r3, [r3, #16]
 80857c0:	9301      	str	r3, [sp, #4]
 80857c2:	bd08      	pop	{r3, pc}
 80857c4:	080401c8 	.word	0x080401c8

080857c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80857c8:	b508      	push	{r3, lr}
 80857ca:	4b02      	ldr	r3, [pc, #8]	; (80857d4 <network_on+0xc>)
 80857cc:	681b      	ldr	r3, [r3, #0]
 80857ce:	695b      	ldr	r3, [r3, #20]
 80857d0:	9301      	str	r3, [sp, #4]
 80857d2:	bd08      	pop	{r3, pc}
 80857d4:	080401c8 	.word	0x080401c8

080857d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80857d8:	b508      	push	{r3, lr}
 80857da:	4b02      	ldr	r3, [pc, #8]	; (80857e4 <network_off+0xc>)
 80857dc:	681b      	ldr	r3, [r3, #0]
 80857de:	699b      	ldr	r3, [r3, #24]
 80857e0:	9301      	str	r3, [sp, #4]
 80857e2:	bd08      	pop	{r3, pc}
 80857e4:	080401c8 	.word	0x080401c8

080857e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80857e8:	b508      	push	{r3, lr}
 80857ea:	4b02      	ldr	r3, [pc, #8]	; (80857f4 <network_listen+0xc>)
 80857ec:	681b      	ldr	r3, [r3, #0]
 80857ee:	69db      	ldr	r3, [r3, #28]
 80857f0:	9301      	str	r3, [sp, #4]
 80857f2:	bd08      	pop	{r3, pc}
 80857f4:	080401c8 	.word	0x080401c8

080857f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80857f8:	b508      	push	{r3, lr}
 80857fa:	4b02      	ldr	r3, [pc, #8]	; (8085804 <network_listening+0xc>)
 80857fc:	681b      	ldr	r3, [r3, #0]
 80857fe:	6a1b      	ldr	r3, [r3, #32]
 8085800:	9301      	str	r3, [sp, #4]
 8085802:	bd08      	pop	{r3, pc}
 8085804:	080401c8 	.word	0x080401c8

08085808 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8085808:	b508      	push	{r3, lr}
 808580a:	4b02      	ldr	r3, [pc, #8]	; (8085814 <network_set_listen_timeout+0xc>)
 808580c:	681b      	ldr	r3, [r3, #0]
 808580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085810:	9301      	str	r3, [sp, #4]
 8085812:	bd08      	pop	{r3, pc}
 8085814:	080401c8 	.word	0x080401c8

08085818 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8085818:	b508      	push	{r3, lr}
 808581a:	4b02      	ldr	r3, [pc, #8]	; (8085824 <network_get_listen_timeout+0xc>)
 808581c:	681b      	ldr	r3, [r3, #0]
 808581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085820:	9301      	str	r3, [sp, #4]
 8085822:	bd08      	pop	{r3, pc}
 8085824:	080401c8 	.word	0x080401c8

08085828 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8085828:	b508      	push	{r3, lr}
 808582a:	4b02      	ldr	r3, [pc, #8]	; (8085834 <spark_function+0xc>)
 808582c:	681b      	ldr	r3, [r3, #0]
 808582e:	685b      	ldr	r3, [r3, #4]
 8085830:	9301      	str	r3, [sp, #4]
 8085832:	bd08      	pop	{r3, pc}
 8085834:	080401cc 	.word	0x080401cc

08085838 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8085838:	b508      	push	{r3, lr}
 808583a:	4b02      	ldr	r3, [pc, #8]	; (8085844 <spark_process+0xc>)
 808583c:	681b      	ldr	r3, [r3, #0]
 808583e:	689b      	ldr	r3, [r3, #8]
 8085840:	9301      	str	r3, [sp, #4]
 8085842:	bd08      	pop	{r3, pc}
 8085844:	080401cc 	.word	0x080401cc

08085848 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8085848:	b508      	push	{r3, lr}
 808584a:	4b02      	ldr	r3, [pc, #8]	; (8085854 <spark_cloud_flag_connect+0xc>)
 808584c:	681b      	ldr	r3, [r3, #0]
 808584e:	68db      	ldr	r3, [r3, #12]
 8085850:	9301      	str	r3, [sp, #4]
 8085852:	bd08      	pop	{r3, pc}
 8085854:	080401cc 	.word	0x080401cc

08085858 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8085858:	b508      	push	{r3, lr}
 808585a:	4b02      	ldr	r3, [pc, #8]	; (8085864 <spark_cloud_flag_connected+0xc>)
 808585c:	681b      	ldr	r3, [r3, #0]
 808585e:	695b      	ldr	r3, [r3, #20]
 8085860:	9301      	str	r3, [sp, #4]
 8085862:	bd08      	pop	{r3, pc}
 8085864:	080401cc 	.word	0x080401cc

08085868 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8085868:	b508      	push	{r3, lr}
 808586a:	4b02      	ldr	r3, [pc, #8]	; (8085874 <spark_deviceID+0xc>)
 808586c:	681b      	ldr	r3, [r3, #0]
 808586e:	69db      	ldr	r3, [r3, #28]
 8085870:	9301      	str	r3, [sp, #4]
 8085872:	bd08      	pop	{r3, pc}
 8085874:	080401cc 	.word	0x080401cc

08085878 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8085878:	b508      	push	{r3, lr}
 808587a:	4b02      	ldr	r3, [pc, #8]	; (8085884 <spark_send_event+0xc>)
 808587c:	681b      	ldr	r3, [r3, #0]
 808587e:	6a1b      	ldr	r3, [r3, #32]
 8085880:	9301      	str	r3, [sp, #4]
 8085882:	bd08      	pop	{r3, pc}
 8085884:	080401cc 	.word	0x080401cc

08085888 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8085888:	b508      	push	{r3, lr}
 808588a:	4b02      	ldr	r3, [pc, #8]	; (8085894 <spark_sync_time_pending+0xc>)
 808588c:	681b      	ldr	r3, [r3, #0]
 808588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085890:	9301      	str	r3, [sp, #4]
 8085892:	bd08      	pop	{r3, pc}
 8085894:	080401cc 	.word	0x080401cc

08085898 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8085898:	b508      	push	{r3, lr}
 808589a:	4b02      	ldr	r3, [pc, #8]	; (80858a4 <spark_set_random_seed_from_cloud_handler+0xc>)
 808589c:	681b      	ldr	r3, [r3, #0]
 808589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80858a0:	9301      	str	r3, [sp, #4]
 80858a2:	bd08      	pop	{r3, pc}
 80858a4:	080401cc 	.word	0x080401cc

080858a8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80858a8:	b508      	push	{r3, lr}
 80858aa:	4b02      	ldr	r3, [pc, #8]	; (80858b4 <malloc+0xc>)
 80858ac:	681b      	ldr	r3, [r3, #0]
 80858ae:	681b      	ldr	r3, [r3, #0]
 80858b0:	9301      	str	r3, [sp, #4]
 80858b2:	bd08      	pop	{r3, pc}
 80858b4:	080401a0 	.word	0x080401a0

080858b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80858b8:	b508      	push	{r3, lr}
 80858ba:	4b02      	ldr	r3, [pc, #8]	; (80858c4 <free+0xc>)
 80858bc:	681b      	ldr	r3, [r3, #0]
 80858be:	685b      	ldr	r3, [r3, #4]
 80858c0:	9301      	str	r3, [sp, #4]
 80858c2:	bd08      	pop	{r3, pc}
 80858c4:	080401a0 	.word	0x080401a0

080858c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80858c8:	b508      	push	{r3, lr}
 80858ca:	4b02      	ldr	r3, [pc, #8]	; (80858d4 <realloc+0xc>)
 80858cc:	681b      	ldr	r3, [r3, #0]
 80858ce:	689b      	ldr	r3, [r3, #8]
 80858d0:	9301      	str	r3, [sp, #4]
 80858d2:	bd08      	pop	{r3, pc}
 80858d4:	080401a0 	.word	0x080401a0

080858d8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80858d8:	b508      	push	{r3, lr}
 80858da:	4b02      	ldr	r3, [pc, #8]	; (80858e4 <sprintf+0xc>)
 80858dc:	681b      	ldr	r3, [r3, #0]
 80858de:	68db      	ldr	r3, [r3, #12]
 80858e0:	9301      	str	r3, [sp, #4]
 80858e2:	bd08      	pop	{r3, pc}
 80858e4:	080401a0 	.word	0x080401a0

080858e8 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80858e8:	b508      	push	{r3, lr}
 80858ea:	4b02      	ldr	r3, [pc, #8]	; (80858f4 <siprintf+0xc>)
 80858ec:	681b      	ldr	r3, [r3, #0]
 80858ee:	691b      	ldr	r3, [r3, #16]
 80858f0:	9301      	str	r3, [sp, #4]
 80858f2:	bd08      	pop	{r3, pc}
 80858f4:	080401a0 	.word	0x080401a0

080858f8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80858f8:	b508      	push	{r3, lr}
 80858fa:	4b02      	ldr	r3, [pc, #8]	; (8085904 <siscanf+0xc>)
 80858fc:	681b      	ldr	r3, [r3, #0]
 80858fe:	699b      	ldr	r3, [r3, #24]
 8085900:	9301      	str	r3, [sp, #4]
 8085902:	bd08      	pop	{r3, pc}
 8085904:	080401a0 	.word	0x080401a0

08085908 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8085908:	b508      	push	{r3, lr}
 808590a:	4b02      	ldr	r3, [pc, #8]	; (8085914 <snprintf+0xc>)
 808590c:	681b      	ldr	r3, [r3, #0]
 808590e:	69db      	ldr	r3, [r3, #28]
 8085910:	9301      	str	r3, [sp, #4]
 8085912:	bd08      	pop	{r3, pc}
 8085914:	080401a0 	.word	0x080401a0

08085918 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8085918:	b508      	push	{r3, lr}
 808591a:	4b02      	ldr	r3, [pc, #8]	; (8085924 <sniprintf+0xc>)
 808591c:	681b      	ldr	r3, [r3, #0]
 808591e:	6a1b      	ldr	r3, [r3, #32]
 8085920:	9301      	str	r3, [sp, #4]
 8085922:	bd08      	pop	{r3, pc}
 8085924:	080401a0 	.word	0x080401a0

08085928 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8085928:	b508      	push	{r3, lr}
 808592a:	4b02      	ldr	r3, [pc, #8]	; (8085934 <vsnprintf+0xc>)
 808592c:	681b      	ldr	r3, [r3, #0]
 808592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085930:	9301      	str	r3, [sp, #4]
 8085932:	bd08      	pop	{r3, pc}
 8085934:	080401a0 	.word	0x080401a0

08085938 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8085938:	b508      	push	{r3, lr}
 808593a:	4b02      	ldr	r3, [pc, #8]	; (8085944 <abort+0xc>)
 808593c:	681b      	ldr	r3, [r3, #0]
 808593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085940:	9301      	str	r3, [sp, #4]
 8085942:	bd08      	pop	{r3, pc}
 8085944:	080401a0 	.word	0x080401a0

08085948 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8085948:	b508      	push	{r3, lr}
 808594a:	4b02      	ldr	r3, [pc, #8]	; (8085954 <_malloc_r+0xc>)
 808594c:	681b      	ldr	r3, [r3, #0]
 808594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085950:	9301      	str	r3, [sp, #4]
 8085952:	bd08      	pop	{r3, pc}
 8085954:	080401a0 	.word	0x080401a0

08085958 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8085958:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808595a:	f002 fd23 	bl	80883a4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808595e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8085962:	f002 b9fe 	b.w	8087d62 <_ZN7TwoWire4lockEv>

08085966 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8085966:	b510      	push	{r4, lr}
 8085968:	4604      	mov	r4, r0
    lock_(_lock)
 808596a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808596c:	b109      	cbz	r1, 8085972 <_ZN4PMICC1Eb+0xc>
        lock();
 808596e:	f7ff fff3 	bl	8085958 <_ZN4PMIC4lockEv>
    }
}
 8085972:	4620      	mov	r0, r4
 8085974:	bd10      	pop	{r4, pc}

08085976 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8085976:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085978:	f002 fd14 	bl	80883a4 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808597c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8085980:	f002 b9f8 	b.w	8087d74 <_ZN7TwoWire6unlockEv>

08085984 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8085984:	b510      	push	{r4, lr}
{
    if (lock_) {
 8085986:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8085988:	4604      	mov	r4, r0
{
    if (lock_) {
 808598a:	b10b      	cbz	r3, 8085990 <_ZN4PMICD1Ev+0xc>
        unlock();
 808598c:	f7ff fff3 	bl	8085976 <_ZN4PMIC6unlockEv>
    }
}
 8085990:	4620      	mov	r0, r4
 8085992:	bd10      	pop	{r4, pc}

08085994 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8085994:	b510      	push	{r4, lr}
 8085996:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8085998:	6800      	ldr	r0, [r0, #0]
 808599a:	f7ff ffec 	bl	8085976 <_ZN4PMIC6unlockEv>
 808599e:	4620      	mov	r0, r4
 80859a0:	bd10      	pop	{r4, pc}

080859a2 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80859a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80859a4:	ac02      	add	r4, sp, #8
 80859a6:	460d      	mov	r5, r1
 80859a8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80859ac:	f7ff ffd4 	bl	8085958 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859b0:	f002 fcf8 	bl	80883a4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80859b4:	216b      	movs	r1, #107	; 0x6b
 80859b6:	f002 f9c6 	bl	8087d46 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859ba:	f002 fcf3 	bl	80883a4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80859be:	6803      	ldr	r3, [r0, #0]
 80859c0:	4629      	mov	r1, r5
 80859c2:	689b      	ldr	r3, [r3, #8]
 80859c4:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859c6:	f002 fced 	bl	80883a4 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 80859ca:	2101      	movs	r1, #1
 80859cc:	f002 f9be 	bl	8087d4c <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859d0:	f002 fce8 	bl	80883a4 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 80859d4:	2301      	movs	r3, #1
 80859d6:	461a      	mov	r2, r3
 80859d8:	216b      	movs	r1, #107	; 0x6b
 80859da:	f002 f99b 	bl	8087d14 <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80859de:	f002 fce1 	bl	80883a4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80859e2:	6803      	ldr	r3, [r0, #0]
 80859e4:	695b      	ldr	r3, [r3, #20]
 80859e6:	4798      	blx	r3
 80859e8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80859ea:	4620      	mov	r0, r4
 80859ec:	f7ff ffd2 	bl	8085994 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80859f0:	b2e8      	uxtb	r0, r5
 80859f2:	b003      	add	sp, #12
 80859f4:	bd30      	pop	{r4, r5, pc}

080859f6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 80859f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80859f8:	ac02      	add	r4, sp, #8
 80859fa:	4615      	mov	r5, r2
 80859fc:	460e      	mov	r6, r1
 80859fe:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8085a02:	f7ff ffa9 	bl	8085958 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a06:	f002 fccd 	bl	80883a4 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8085a0a:	216b      	movs	r1, #107	; 0x6b
 8085a0c:	f002 f99b 	bl	8087d46 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a10:	f002 fcc8 	bl	80883a4 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8085a14:	6803      	ldr	r3, [r0, #0]
 8085a16:	4631      	mov	r1, r6
 8085a18:	689b      	ldr	r3, [r3, #8]
 8085a1a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a1c:	f002 fcc2 	bl	80883a4 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8085a20:	6803      	ldr	r3, [r0, #0]
 8085a22:	4629      	mov	r1, r5
 8085a24:	689b      	ldr	r3, [r3, #8]
 8085a26:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8085a28:	f002 fcbc 	bl	80883a4 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8085a2c:	2101      	movs	r1, #1
 8085a2e:	f002 f98d 	bl	8087d4c <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8085a32:	4620      	mov	r0, r4
 8085a34:	f7ff ffae 	bl	8085994 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8085a38:	b002      	add	sp, #8
 8085a3a:	bd70      	pop	{r4, r5, r6, pc}

08085a3c <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 8085a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085a3e:	4604      	mov	r4, r0
 8085a40:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085a42:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085a44:	f7ff ff88 	bl	8085958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8085a48:	2100      	movs	r1, #0
 8085a4a:	4620      	mov	r0, r4
 8085a4c:	f7ff ffa9 	bl	80859a2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085a50:	f241 1358 	movw	r3, #4440	; 0x1158
 8085a54:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8085a56:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8085a5a:	d05b      	beq.n	8085b14 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8085a5c:	d820      	bhi.n	8085aa0 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 8085a5e:	f241 0318 	movw	r3, #4120	; 0x1018
 8085a62:	429d      	cmp	r5, r3
 8085a64:	d04d      	beq.n	8085b02 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8085a66:	d80c      	bhi.n	8085a82 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8085a68:	f640 7378 	movw	r3, #3960	; 0xf78
 8085a6c:	429d      	cmp	r5, r3
 8085a6e:	d042      	beq.n	8085af6 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8085a70:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8085a74:	429d      	cmp	r5, r3
 8085a76:	d041      	beq.n	8085afc <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8085a78:	f640 7328 	movw	r3, #3880	; 0xf28
 8085a7c:	429d      	cmp	r5, r3
 8085a7e:	d160      	bne.n	8085b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8085a80:	e059      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8085a82:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8085a86:	429d      	cmp	r5, r3
 8085a88:	d03e      	beq.n	8085b08 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8085a8a:	f241 1308 	movw	r3, #4360	; 0x1108
 8085a8e:	429d      	cmp	r5, r3
 8085a90:	d03d      	beq.n	8085b0e <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8085a92:	f241 0368 	movw	r3, #4200	; 0x1068
 8085a96:	429d      	cmp	r5, r3
 8085a98:	d153      	bne.n	8085b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8085a9a:	f042 0220 	orr.w	r2, r2, #32
 8085a9e:	e04a      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085aa0:	f241 2398 	movw	r3, #4760	; 0x1298
 8085aa4:	429d      	cmp	r5, r3
 8085aa6:	d03e      	beq.n	8085b26 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8085aa8:	d80e      	bhi.n	8085ac8 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8085aaa:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8085aae:	429d      	cmp	r5, r3
 8085ab0:	d033      	beq.n	8085b1a <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8085ab2:	f241 2348 	movw	r3, #4680	; 0x1248
 8085ab6:	429d      	cmp	r5, r3
 8085ab8:	d032      	beq.n	8085b20 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8085aba:	f241 13a8 	movw	r3, #4520	; 0x11a8
 8085abe:	429d      	cmp	r5, r3
 8085ac0:	d13f      	bne.n	8085b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8085ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8085ac6:	e036      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085ac8:	f241 3338 	movw	r3, #4920	; 0x1338
 8085acc:	429d      	cmp	r5, r3
 8085ace:	d02d      	beq.n	8085b2c <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8085ad0:	d806      	bhi.n	8085ae0 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8085ad2:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8085ad6:	429d      	cmp	r5, r3
 8085ad8:	d133      	bne.n	8085b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8085ada:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8085ade:	e02a      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8085ae0:	f241 3388 	movw	r3, #5000	; 0x1388
 8085ae4:	429d      	cmp	r5, r3
 8085ae6:	d024      	beq.n	8085b32 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8085ae8:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8085aec:	429d      	cmp	r5, r3
 8085aee:	d128      	bne.n	8085b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 8085af0:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8085af4:	e01f      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8085af6:	f042 0208 	orr.w	r2, r2, #8
 8085afa:	e01c      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8085afc:	f042 0210 	orr.w	r2, r2, #16
 8085b00:	e019      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8085b02:	f042 0218 	orr.w	r2, r2, #24
 8085b06:	e016      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8085b08:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8085b0c:	e013      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 8085b0e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8085b12:	e010      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8085b14:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8085b18:	e00d      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8085b1a:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 8085b1e:	e00a      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 8085b20:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8085b24:	e007      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8085b26:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8085b2a:	e004      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 8085b2c:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8085b30:	e001      	b.n	8085b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 8085b32:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8085b36:	4620      	mov	r0, r4
 8085b38:	2100      	movs	r1, #0
 8085b3a:	f7ff ff5c 	bl	80859f6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8085b3e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8085b40:	e000      	b.n	8085b44 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8085b42:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8085b44:	a801      	add	r0, sp, #4
 8085b46:	f7ff ff25 	bl	8085994 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8085b4a:	4620      	mov	r0, r4
 8085b4c:	b003      	add	sp, #12
 8085b4e:	bd30      	pop	{r4, r5, pc}

08085b50 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8085b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8085b52:	460c      	mov	r4, r1
 8085b54:	4617      	mov	r7, r2
 8085b56:	4605      	mov	r5, r0
 8085b58:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085b5a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085b5c:	f7ff fefc 	bl	8085958 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8085b60:	2c00      	cmp	r4, #0
 8085b62:	bf0c      	ite	eq
 8085b64:	2400      	moveq	r4, #0
 8085b66:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8085b68:	b117      	cbz	r7, 8085b70 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8085b6a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8085b6e:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8085b70:	b10e      	cbz	r6, 8085b76 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8085b72:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8085b76:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8085b7a:	b10b      	cbz	r3, 8085b80 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8085b7c:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8085b80:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8085b84:	b10b      	cbz	r3, 8085b8a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8085b86:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8085b8a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8085b8e:	b10b      	cbz	r3, 8085b94 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8085b90:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8085b94:	2102      	movs	r1, #2
 8085b96:	4628      	mov	r0, r5
 8085b98:	f7ff ff03 	bl	80859a2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8085b9c:	f000 0201 	and.w	r2, r0, #1
 8085ba0:	4322      	orrs	r2, r4
 8085ba2:	2102      	movs	r1, #2
 8085ba4:	4628      	mov	r0, r5
 8085ba6:	f7ff ff26 	bl	80859f6 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8085baa:	a801      	add	r0, sp, #4
 8085bac:	f7ff fef2 	bl	8085994 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8085bb0:	2001      	movs	r0, #1
 8085bb2:	b003      	add	sp, #12
 8085bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085bb6 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8085bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#endif // Wiring_Wire3
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
 8085bb8:	2400      	movs	r4, #0
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8085bba:	4605      	mov	r5, r0
 8085bbc:	460f      	mov	r7, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085bbe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085bc0:	f7ff feca 	bl	8085958 <_ZN4PMIC4lockEv>
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8085bc4:	4623      	mov	r3, r4
    }
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
 8085bc6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
        uint32_t sum = baseOffset + (mask << bitsBaseShift);
 8085bca:	0118      	lsls	r0, r3, #4
 8085bcc:	f500 605b 	add.w	r0, r0, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8085bd0:	1bc2      	subs	r2, r0, r7
 8085bd2:	2a00      	cmp	r2, #0
 8085bd4:	bfb8      	it	lt
 8085bd6:	4252      	neglt	r2, r2
        if (delta < bestDelta && sum <= value) {
 8085bd8:	4296      	cmp	r6, r2
 8085bda:	dd03      	ble.n	8085be4 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8085bdc:	4287      	cmp	r7, r0
 8085bde:	bf24      	itt	cs
 8085be0:	4616      	movcs	r6, r2
 8085be2:	461c      	movcs	r4, r3
}

uint32_t findClosestMatchingSum(uint32_t value, uint32_t baseOffset, uint32_t bits, uint32_t bitsBaseShift) {
    uint32_t best = 0;
    int bestDelta = 0x7fffffff;
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8085be4:	3301      	adds	r3, #1
 8085be6:	2b40      	cmp	r3, #64	; 0x40
 8085be8:	d1ef      	bne.n	8085bca <_ZN4PMIC16setChargeVoltageEt+0x14>

    const uint16_t baseValue = 3504;
    // Find closest matching charge voltage not larger than 'voltage'
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);

    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8085bea:	2104      	movs	r1, #4
 8085bec:	4628      	mov	r0, r5
 8085bee:	f7ff fed8 	bl	80859a2 <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8085bf2:	f000 0003 	and.w	r0, r0, #3
 8085bf6:	ea40 0284 	orr.w	r2, r0, r4, lsl #2

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8085bfa:	b2d2      	uxtb	r2, r2
 8085bfc:	2104      	movs	r1, #4
 8085bfe:	4628      	mov	r0, r5
 8085c00:	f7ff fef9 	bl	80859f6 <_ZN4PMIC13writeRegisterEhh>
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8085c04:	a801      	add	r0, sp, #4
 8085c06:	f7ff fec5 	bl	8085994 <_ZNSt10lock_guardI4PMICED1Ev>
    cvcr |= (currentCvcr & 0b11);

    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);

    return true;
}
 8085c0a:	2001      	movs	r0, #1
 8085c0c:	b003      	add	sp, #12
 8085c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085c10 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8085c10:	6800      	ldr	r0, [r0, #0]
 8085c12:	f7ff bbed 	b.w	80853f0 <os_mutex_recursive_lock>

08085c16 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8085c16:	6800      	ldr	r0, [r0, #0]
 8085c18:	f7ff bbf2 	b.w	8085400 <os_mutex_recursive_unlock>

08085c1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8085c1c:	b570      	push	{r4, r5, r6, lr}
 8085c1e:	4604      	mov	r4, r0
 8085c20:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8085c22:	2500      	movs	r5, #0
 8085c24:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8085c28:	f7ff fbd2 	bl	80853d0 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8085c2c:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 8085c2e:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 8085c30:	f7ff fb4e 	bl	80852d0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8085c34:	6065      	str	r5, [r4, #4]
}
 8085c36:	4620      	mov	r0, r4
 8085c38:	bd70      	pop	{r4, r5, r6, pc}

08085c3a <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8085c3a:	b538      	push	{r3, r4, r5, lr}
 8085c3c:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085c3e:	f100 0408 	add.w	r4, r0, #8
 8085c42:	4620      	mov	r0, r4
 8085c44:	f7ff ffe4 	bl	8085c10 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8085c48:	7828      	ldrb	r0, [r5, #0]
 8085c4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8085c4e:	f7ff fb2f 	bl	80852b0 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8085c52:	4620      	mov	r0, r4
 8085c54:	f7ff ffdf 	bl	8085c16 <_ZN14RecursiveMutex6unlockEv>
 8085c58:	bd38      	pop	{r3, r4, r5, pc}

08085c5a <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 8085c5a:	b508      	push	{r3, lr}
 8085c5c:	3008      	adds	r0, #8
 8085c5e:	f7ff ffda 	bl	8085c16 <_ZN14RecursiveMutex6unlockEv>
 8085c62:	bd08      	pop	{r3, pc}

08085c64 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085c64:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8085c66:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085c68:	6018      	str	r0, [r3, #0]
 8085c6a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8085c6c:	6818      	ldr	r0, [r3, #0]
 8085c6e:	b2e5      	uxtb	r5, r4
 8085c70:	4288      	cmp	r0, r1
 8085c72:	d906      	bls.n	8085c82 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8085c74:	3401      	adds	r4, #1
 8085c76:	2c08      	cmp	r4, #8
 8085c78:	d002      	beq.n	8085c80 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8085c7a:	0840      	lsrs	r0, r0, #1
 8085c7c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8085c7e:	e7f5      	b.n	8085c6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8085c80:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8085c82:	4b02      	ldr	r3, [pc, #8]	; (8085c8c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8085c84:	5d5b      	ldrb	r3, [r3, r5]
 8085c86:	7013      	strb	r3, [r2, #0]
 8085c88:	bd30      	pop	{r4, r5, pc}
 8085c8a:	bf00      	nop
 8085c8c:	0808d8ec 	.word	0x0808d8ec

08085c90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8085c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085c94:	4680      	mov	r8, r0
 8085c96:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085c98:	3008      	adds	r0, #8
 8085c9a:	460e      	mov	r6, r1
 8085c9c:	f7ff ffb8 	bl	8085c10 <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 8085ca0:	f898 4000 	ldrb.w	r4, [r8]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8085ca4:	2214      	movs	r2, #20
 8085ca6:	2100      	movs	r1, #0
 8085ca8:	a809      	add	r0, sp, #36	; 0x24
 8085caa:	f004 f8ed 	bl	8089e88 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8085cae:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8085cb0:	4620      	mov	r0, r4
 8085cb2:	2200      	movs	r2, #0
 8085cb4:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 8085cb6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 8085cba:	f7ff fb19 	bl	80852f0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 8085cbe:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8085cc2:	b14c      	cbz	r4, 8085cd8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8085cc4:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8085cc8:	b92d      	cbnz	r5, 8085cd6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8085cca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8085ccc:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8085cd0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8085cd4:	e003      	b.n	8085cde <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8085cd6:	2400      	movs	r4, #0
 8085cd8:	46a1      	mov	r9, r4
 8085cda:	4627      	mov	r7, r4
 8085cdc:	2501      	movs	r5, #1
 8085cde:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8085ce0:	b10d      	cbz	r5, 8085ce6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8085ce2:	2b00      	cmp	r3, #0
 8085ce4:	d13f      	bne.n	8085d66 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 8085ce6:	429d      	cmp	r5, r3
 8085ce8:	d10b      	bne.n	8085d02 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 8085cea:	68b2      	ldr	r2, [r6, #8]
 8085cec:	42ba      	cmp	r2, r7
 8085cee:	d108      	bne.n	8085d02 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8085cf0:	f88d 9020 	strb.w	r9, [sp, #32]
 8085cf4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8085cf8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8085cfc:	89b2      	ldrh	r2, [r6, #12]
 8085cfe:	4291      	cmp	r1, r2
 8085d00:	d031      	beq.n	8085d66 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 8085d02:	b13b      	cbz	r3, 8085d14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8085d04:	2300      	movs	r3, #0
 8085d06:	f898 0000 	ldrb.w	r0, [r8]
 8085d0a:	9301      	str	r3, [sp, #4]
 8085d0c:	9300      	str	r3, [sp, #0]
 8085d0e:	461a      	mov	r2, r3
 8085d10:	2101      	movs	r1, #1
 8085d12:	e016      	b.n	8085d42 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 8085d14:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 8085d18:	68b1      	ldr	r1, [r6, #8]
 8085d1a:	ab04      	add	r3, sp, #16
 8085d1c:	f10d 020f 	add.w	r2, sp, #15
 8085d20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8085d22:	f7ff ff9f 	bl	8085c64 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 8085d26:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8085d28:	b105      	cbz	r5, 8085d2c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 8085d2a:	b9c9      	cbnz	r1, 8085d60 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 8085d2c:	42a9      	cmp	r1, r5
 8085d2e:	d00b      	beq.n	8085d48 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 8085d30:	2400      	movs	r4, #0
 8085d32:	9401      	str	r4, [sp, #4]
 8085d34:	7b74      	ldrb	r4, [r6, #13]
 8085d36:	7b33      	ldrb	r3, [r6, #12]
 8085d38:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8085d3c:	f898 0000 	ldrb.w	r0, [r8]
 8085d40:	9400      	str	r4, [sp, #0]
 8085d42:	f7ff faed 	bl	8085320 <HAL_SPI_Set_Settings>
 8085d46:	e00e      	b.n	8085d66 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 8085d48:	68b3      	ldr	r3, [r6, #8]
 8085d4a:	42bb      	cmp	r3, r7
 8085d4c:	d3f0      	bcc.n	8085d30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8085d4e:	f88d 9020 	strb.w	r9, [sp, #32]
 8085d52:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8085d56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8085d5a:	89b3      	ldrh	r3, [r6, #12]
 8085d5c:	429a      	cmp	r2, r3
 8085d5e:	d1e7      	bne.n	8085d30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 8085d60:	9b04      	ldr	r3, [sp, #16]
 8085d62:	42bb      	cmp	r3, r7
 8085d64:	d1e4      	bne.n	8085d30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 8085d66:	2000      	movs	r0, #0
 8085d68:	b00f      	add	sp, #60	; 0x3c
 8085d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08085d6e <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8085d6e:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 8085d70:	7800      	ldrb	r0, [r0, #0]
 8085d72:	f7ff faa5 	bl	80852c0 <HAL_SPI_Send_Receive_Data>
}
 8085d76:	b2c0      	uxtb	r0, r0
 8085d78:	bd08      	pop	{r3, pc}

08085d7a <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8085d7a:	b530      	push	{r4, r5, lr}
 8085d7c:	b087      	sub	sp, #28
 8085d7e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085d80:	4604      	mov	r4, r0
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8085d82:	7800      	ldrb	r0, [r0, #0]
 8085d84:	9500      	str	r5, [sp, #0]
 8085d86:	f7ff fabb 	bl	8085300 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
 8085d8a:	b93d      	cbnz	r5, 8085d9c <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8085d8c:	a902      	add	r1, sp, #8
 8085d8e:	7820      	ldrb	r0, [r4, #0]
 8085d90:	f7ff fabe 	bl	8085310 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
 8085d94:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8085d98:	07db      	lsls	r3, r3, #31
 8085d9a:	d4f7      	bmi.n	8085d8c <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
 8085d9c:	b007      	add	sp, #28
 8085d9e:	bd30      	pop	{r4, r5, pc}

08085da0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 8085da0:	7800      	ldrb	r0, [r0, #0]
 8085da2:	f7ff ba9d 	b.w	80852e0 <HAL_SPI_Is_Enabled>

08085da6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8085da6:	b510      	push	{r4, lr}
 8085da8:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8085daa:	6800      	ldr	r0, [r0, #0]
 8085dac:	b118      	cbz	r0, 8085db6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8085dae:	f7ff fd83 	bl	80858b8 <free>
            wakeupSource_ = nullptr;
 8085db2:	2300      	movs	r3, #0
 8085db4:	6023      	str	r3, [r4, #0]
 8085db6:	bd10      	pop	{r4, pc}

08085db8 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085db8:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8085dba:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085dbe:	460d      	mov	r5, r1
        error_ = result.error_;
 8085dc0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8085dc2:	460b      	mov	r3, r1
 8085dc4:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085dc8:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8085dca:	f8c0 2006 	str.w	r2, [r0, #6]
 8085dce:	889b      	ldrh	r3, [r3, #4]
 8085dd0:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8085dd2:	f7ff ffe8 	bl	8085da6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8085dd6:	682b      	ldr	r3, [r5, #0]
 8085dd8:	b113      	cbz	r3, 8085de0 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8085dda:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8085ddc:	2300      	movs	r3, #0
 8085dde:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 8085de0:	4620      	mov	r0, r4
 8085de2:	bd38      	pop	{r3, r4, r5, pc}

08085de4 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8085de4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8085de8:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8085dea:	b90b      	cbnz	r3, 8085df0 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8085dec:	680a      	ldr	r2, [r1, #0]
 8085dee:	b19a      	cbz	r2, 8085e18 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8085df0:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8085df2:	b15c      	cbz	r4, 8085e0c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8085df4:	88a2      	ldrh	r2, [r4, #4]
 8085df6:	2a01      	cmp	r2, #1
 8085df8:	d003      	beq.n	8085e02 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8085dfa:	2a04      	cmp	r2, #4
 8085dfc:	d106      	bne.n	8085e0c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8085dfe:	2202      	movs	r2, #2
 8085e00:	e005      	b.n	8085e0e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8085e02:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8085e04:	718a      	strb	r2, [r1, #6]
 8085e06:	810b      	strh	r3, [r1, #8]
 8085e08:	814c      	strh	r4, [r1, #10]
                    break;
 8085e0a:	e005      	b.n	8085e18 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8085e0c:	2204      	movs	r2, #4
 8085e0e:	810b      	strh	r3, [r1, #8]
 8085e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085e14:	718a      	strb	r2, [r1, #6]
 8085e16:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8085e18:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8085e1c:	6003      	str	r3, [r0, #0]
 8085e1e:	888b      	ldrh	r3, [r1, #4]
 8085e20:	8083      	strh	r3, [r0, #4]
    }
 8085e22:	bd10      	pop	{r4, pc}

08085e24 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8085e24:	4601      	mov	r1, r0
 8085e26:	2200      	movs	r2, #0
 8085e28:	208c      	movs	r0, #140	; 0x8c
 8085e2a:	f7ff bab9 	b.w	80853a0 <HAL_Core_System_Reset_Ex>

08085e2e <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8085e2e:	2000      	movs	r0, #0
 8085e30:	f7ff bff8 	b.w	8085e24 <_ZN11SystemClass5resetEm>

08085e34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8085e34:	b530      	push	{r4, r5, lr}
 8085e36:	4604      	mov	r4, r0
 8085e38:	b085      	sub	sp, #20
 8085e3a:	4608      	mov	r0, r1
 8085e3c:	4611      	mov	r1, r2
 8085e3e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8085e40:	2300      	movs	r3, #0
 8085e42:	f7ff fc65 	bl	8085710 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8085e46:	2300      	movs	r3, #0
 8085e48:	9301      	str	r3, [sp, #4]
 8085e4a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8085e4e:	f88d 300a 	strb.w	r3, [sp, #10]
 8085e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8085e56:	4d09      	ldr	r5, [pc, #36]	; (8085e7c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8085e58:	a901      	add	r1, sp, #4
 8085e5a:	f8ad 000c 	strh.w	r0, [sp, #12]
 8085e5e:	4628      	mov	r0, r5
 8085e60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8085e64:	f7ff ffa8 	bl	8085db8 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8085e68:	a801      	add	r0, sp, #4
 8085e6a:	f7ff ff9c 	bl	8085da6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8085e6e:	4620      	mov	r0, r4
 8085e70:	4629      	mov	r1, r5
 8085e72:	f7ff ffb7 	bl	8085de4 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8085e76:	4620      	mov	r0, r4
 8085e78:	b005      	add	sp, #20
 8085e7a:	bd30      	pop	{r4, r5, pc}
 8085e7c:	20000924 	.word	0x20000924

08085e80 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8085e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8085e84:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8085e86:	4c08      	ldr	r4, [pc, #32]	; (8085ea8 <_GLOBAL__sub_I_System+0x28>)
 8085e88:	2000      	movs	r0, #0
 8085e8a:	6020      	str	r0, [r4, #0]
 8085e8c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8085e8e:	71a0      	strb	r0, [r4, #6]
 8085e90:	8120      	strh	r0, [r4, #8]
 8085e92:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8085e94:	f7ff fc2c 	bl	80856f0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8085e98:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8085e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8085e9e:	4a03      	ldr	r2, [pc, #12]	; (8085eac <_GLOBAL__sub_I_System+0x2c>)
 8085ea0:	4903      	ldr	r1, [pc, #12]	; (8085eb0 <_GLOBAL__sub_I_System+0x30>)
 8085ea2:	f002 baa5 	b.w	80883f0 <__aeabi_atexit>
 8085ea6:	bf00      	nop
 8085ea8:	20000924 	.word	0x20000924
 8085eac:	20000140 	.word	0x20000140
 8085eb0:	0808018d 	.word	0x0808018d

08085eb4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8085eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085eb6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085eb8:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8085eba:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085ebe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8085ec0:	2201      	movs	r2, #1
 8085ec2:	f247 5330 	movw	r3, #30000	; 0x7530
 8085ec6:	4621      	mov	r1, r4
 8085ec8:	47a8      	blx	r5
}
 8085eca:	b003      	add	sp, #12
 8085ecc:	bd30      	pop	{r4, r5, pc}

08085ece <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8085ece:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085ed0:	6803      	ldr	r3, [r0, #0]
 8085ed2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8085ed4:	f247 5330 	movw	r3, #30000	; 0x7530
 8085ed8:	46a4      	mov	ip, r4
}
 8085eda:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8085edc:	4760      	bx	ip

08085ede <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8085ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085ee0:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 8085ee2:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8085ee4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 8085ee8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8085eea:	4621      	mov	r1, r4
 8085eec:	4613      	mov	r3, r2
 8085eee:	2201      	movs	r2, #1
 8085ef0:	47a8      	blx	r5
}
 8085ef2:	b003      	add	sp, #12
 8085ef4:	bd30      	pop	{r4, r5, pc}

08085ef6 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8085ef6:	4770      	bx	lr

08085ef8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8085ef8:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8085efa:	4903      	ldr	r1, [pc, #12]	; (8085f08 <_ZN9TCPClient8remoteIPEv+0x10>)
 8085efc:	6001      	str	r1, [r0, #0]
 8085efe:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8085f02:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8085f04:	4770      	bx	lr
 8085f06:	bf00      	nop
 8085f08:	0808db3c 	.word	0x0808db3c

08085f0c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8085f0c:	4770      	bx	lr

08085f0e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8085f0e:	2000      	movs	r0, #0
 8085f10:	4770      	bx	lr

08085f12 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8085f12:	b510      	push	{r4, lr}
 8085f14:	4604      	mov	r4, r0
 8085f16:	2114      	movs	r1, #20
 8085f18:	f002 fa78 	bl	808840c <_ZdlPvj>
 8085f1c:	4620      	mov	r0, r4
 8085f1e:	bd10      	pop	{r4, pc}

08085f20 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
 8085f20:	f7fa b8c1 	b.w	80800a6 <_ZdlPv>

08085f24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8085f24:	b510      	push	{r4, lr}
 8085f26:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8085f28:	6803      	ldr	r3, [r0, #0]
 8085f2a:	689b      	ldr	r3, [r3, #8]
 8085f2c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8085f2e:	68a3      	ldr	r3, [r4, #8]
 8085f30:	3b01      	subs	r3, #1
 8085f32:	60a3      	str	r3, [r4, #8]
 8085f34:	b92b      	cbnz	r3, 8085f42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 8085f36:	6823      	ldr	r3, [r4, #0]
 8085f38:	4620      	mov	r0, r4
        }
    }
 8085f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8085f3e:	68db      	ldr	r3, [r3, #12]
 8085f40:	4718      	bx	r3
 8085f42:	bd10      	pop	{r4, pc}

08085f44 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8085f44:	b510      	push	{r4, lr}
 8085f46:	6943      	ldr	r3, [r0, #20]
 8085f48:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8085f4a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8085f4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8085f52:	429a      	cmp	r2, r3
 8085f54:	d005      	beq.n	8085f62 <_ZN9TCPClient4peekEv+0x1e>
 8085f56:	6962      	ldr	r2, [r4, #20]
 8085f58:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8085f5c:	4413      	add	r3, r2
 8085f5e:	7918      	ldrb	r0, [r3, #4]
 8085f60:	bd10      	pop	{r4, pc}
 8085f62:	6803      	ldr	r3, [r0, #0]
 8085f64:	691b      	ldr	r3, [r3, #16]
 8085f66:	4798      	blx	r3
 8085f68:	2800      	cmp	r0, #0
 8085f6a:	d1f4      	bne.n	8085f56 <_ZN9TCPClient4peekEv+0x12>
 8085f6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8085f70:	bd10      	pop	{r4, pc}

08085f72 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 8085f72:	b510      	push	{r4, lr}
 8085f74:	6943      	ldr	r3, [r0, #20]
 8085f76:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8085f78:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8085f7c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8085f80:	429a      	cmp	r2, r3
 8085f82:	d008      	beq.n	8085f96 <_ZN9TCPClient4readEv+0x24>
 8085f84:	6962      	ldr	r2, [r4, #20]
 8085f86:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8085f8a:	1c59      	adds	r1, r3, #1
 8085f8c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8085f90:	4413      	add	r3, r2
 8085f92:	7918      	ldrb	r0, [r3, #4]
 8085f94:	bd10      	pop	{r4, pc}
 8085f96:	6803      	ldr	r3, [r0, #0]
 8085f98:	691b      	ldr	r3, [r3, #16]
 8085f9a:	4798      	blx	r3
 8085f9c:	2800      	cmp	r0, #0
 8085f9e:	d1f1      	bne.n	8085f84 <_ZN9TCPClient4readEv+0x12>
 8085fa0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8085fa4:	bd10      	pop	{r4, pc}

08085fa6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8085fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085fa8:	6943      	ldr	r3, [r0, #20]
 8085faa:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8085fac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8085fb0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8085fb4:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8085fb6:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8085fb8:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8085fba:	d106      	bne.n	8085fca <_ZN9TCPClient4readEPhj+0x24>
 8085fbc:	6803      	ldr	r3, [r0, #0]
 8085fbe:	691b      	ldr	r3, [r3, #16]
 8085fc0:	4798      	blx	r3
 8085fc2:	b910      	cbnz	r0, 8085fca <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8085fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8085fc8:	e014      	b.n	8085ff4 <_ZN9TCPClient4readEPhj+0x4e>
 8085fca:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8085fcc:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8085fce:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8085fd2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8085fd6:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8085fd8:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8085fda:	42bc      	cmp	r4, r7
 8085fdc:	bf28      	it	cs
 8085fde:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8085fe0:	3104      	adds	r1, #4
 8085fe2:	4622      	mov	r2, r4
 8085fe4:	f003 ff45 	bl	8089e72 <memcpy>
 8085fe8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8085fea:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8085fee:	4423      	add	r3, r4
 8085ff0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8085ff4:	4620      	mov	r0, r4
 8085ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085ff8 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8085ff8:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8085ffa:	2300      	movs	r3, #0
 8085ffc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8086000:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8086002:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8086006:	4770      	bx	lr

08086008 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8086008:	b538      	push	{r3, r4, r5, lr}
 808600a:	6942      	ldr	r2, [r0, #20]
 808600c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 808600e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086012:	b11b      	cbz	r3, 808601c <_ZN9TCPClient9availableEv+0x14>
 8086014:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8086018:	429a      	cmp	r2, r3
 808601a:	d00c      	beq.n	8086036 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 808601c:	6920      	ldr	r0, [r4, #16]
 808601e:	f001 ff0d 	bl	8087e3c <_ZN5spark12NetworkClass4fromEm>
 8086022:	6803      	ldr	r3, [r0, #0]
 8086024:	68db      	ldr	r3, [r3, #12]
 8086026:	4798      	blx	r3
 8086028:	b318      	cbz	r0, 8086072 <_ZN9TCPClient9availableEv+0x6a>
 808602a:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808602c:	6818      	ldr	r0, [r3, #0]
 808602e:	f7ff faaf 	bl	8085590 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8086032:	b918      	cbnz	r0, 808603c <_ZN9TCPClient9availableEv+0x34>
 8086034:	e01d      	b.n	8086072 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8086036:	f7ff ffdf 	bl	8085ff8 <_ZN9TCPClient12flush_bufferEv>
 808603a:	e7ef      	b.n	808601c <_ZN9TCPClient9availableEv+0x14>
 808603c:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 808603e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8086042:	297f      	cmp	r1, #127	; 0x7f
 8086044:	d815      	bhi.n	8086072 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8086046:	1d05      	adds	r5, r0, #4
 8086048:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 808604c:	2300      	movs	r3, #0
 808604e:	4429      	add	r1, r5
 8086050:	6800      	ldr	r0, [r0, #0]
 8086052:	f7ff fab5 	bl	80855c0 <socket_receive>
            if (ret > 0)
 8086056:	2800      	cmp	r0, #0
 8086058:	dd0b      	ble.n	8086072 <_ZN9TCPClient9availableEv+0x6a>
 808605a:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 808605c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086060:	b90a      	cbnz	r2, 8086066 <_ZN9TCPClient9availableEv+0x5e>
 8086062:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8086066:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 8086068:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 808606c:	4418      	add	r0, r3
 808606e:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 8086072:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 8086074:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086078:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 808607c:	1a18      	subs	r0, r3, r0
}
 808607e:	bd38      	pop	{r3, r4, r5, pc}

08086080 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 8086080:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8086082:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 8086084:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8086086:	6818      	ldr	r0, [r3, #0]
 8086088:	f7ff fa82 	bl	8085590 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 808608c:	b118      	cbz	r0, 8086096 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 808608e:	6963      	ldr	r3, [r4, #20]
 8086090:	6818      	ldr	r0, [r3, #0]
 8086092:	f7ff faad 	bl	80855f0 <socket_close>
 8086096:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8086098:	f7ff fab2 	bl	8085600 <socket_handle_invalid>
 808609c:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808609e:	6963      	ldr	r3, [r4, #20]
 80860a0:	2200      	movs	r2, #0
 80860a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 80860a6:	4620      	mov	r0, r4
}
 80860a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80860ac:	f7ff bfa4 	b.w	8085ff8 <_ZN9TCPClient12flush_bufferEv>

080860b0 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80860b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80860b4:	461e      	mov	r6, r3
    stop();
 80860b6:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80860b8:	b08a      	sub	sp, #40	; 0x28
    stop();
 80860ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80860bc:	4604      	mov	r4, r0
 80860be:	460d      	mov	r5, r1
 80860c0:	4617      	mov	r7, r2
    stop();
 80860c2:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80860c4:	4630      	mov	r0, r6
 80860c6:	f001 feb9 	bl	8087e3c <_ZN5spark12NetworkClass4fromEm>
 80860ca:	6803      	ldr	r3, [r0, #0]
 80860cc:	68db      	ldr	r3, [r3, #12]
 80860ce:	4798      	blx	r3
 80860d0:	2800      	cmp	r0, #0
 80860d2:	d050      	beq.n	8086176 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80860d4:	9600      	str	r6, [sp, #0]
 80860d6:	463b      	mov	r3, r7
 80860d8:	2206      	movs	r2, #6
 80860da:	2101      	movs	r1, #1
 80860dc:	2002      	movs	r0, #2
 80860de:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80860e2:	f7ff fa5d 	bl	80855a0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80860e6:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80860e8:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80860ec:	2600      	movs	r6, #0
 80860ee:	9302      	str	r3, [sp, #8]
 80860f0:	6963      	ldr	r3, [r4, #20]
 80860f2:	9603      	str	r6, [sp, #12]
 80860f4:	681b      	ldr	r3, [r3, #0]
 80860f6:	2001      	movs	r0, #1
 80860f8:	9301      	str	r3, [sp, #4]
 80860fa:	4b20      	ldr	r3, [pc, #128]	; (808617c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 80860fc:	aa02      	add	r2, sp, #8
 80860fe:	9300      	str	r3, [sp, #0]
 8086100:	491f      	ldr	r1, [pc, #124]	; (8086180 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 8086102:	4633      	mov	r3, r6
 8086104:	f7ff fadc 	bl	80856c0 <log_message>

          if (socket_handle_valid(d_->sock))
 8086108:	6963      	ldr	r3, [r4, #20]
 808610a:	6818      	ldr	r0, [r3, #0]
 808610c:	f7ff fa40 	bl	8085590 <socket_handle_valid>
 8086110:	b388      	cbz	r0, 8086176 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
          {
            flush_buffer();
 8086112:	4620      	mov	r0, r4
 8086114:	f7ff ff70 	bl	8085ff8 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8086118:	2302      	movs	r3, #2
 808611a:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 808611e:	0a3b      	lsrs	r3, r7, #8
 8086120:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8086124:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086126:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 808612a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 808612e:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8086130:	f88d 700b 	strb.w	r7, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8086134:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8086138:	796b      	ldrb	r3, [r5, #5]
 808613a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 808613e:	792b      	ldrb	r3, [r5, #4]
 8086140:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086144:	f7ff fa6c 	bl	8085620 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086148:	6963      	ldr	r3, [r4, #20]
 808614a:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 808614c:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 808614e:	a902      	add	r1, sp, #8
 8086150:	6818      	ldr	r0, [r3, #0]
 8086152:	f7ff fa2d 	bl	80855b0 <socket_connect>
 8086156:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8086158:	4640      	mov	r0, r8
 808615a:	f7ff fa61 	bl	8085620 <HAL_NET_SetNetWatchDog>
 808615e:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8086160:	686a      	ldr	r2, [r5, #4]
 8086162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8086166:	b12f      	cbz	r7, 8086174 <_ZN9TCPClient7connectE9IPAddresstm+0xc4>
            {
                stop();
 8086168:	6823      	ldr	r3, [r4, #0]
 808616a:	4620      	mov	r0, r4
 808616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808616e:	4798      	blx	r3
 8086170:	4630      	mov	r0, r6
 8086172:	e000      	b.n	8086176 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8086174:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8086176:	b00a      	add	sp, #40	; 0x28
 8086178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808617c:	0808d963 	.word	0x0808d963
 8086180:	0808d95c 	.word	0x0808d95c

08086184 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8086184:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086186:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8086188:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808618a:	6818      	ldr	r0, [r3, #0]
 808618c:	f7ff fa00 	bl	8085590 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086190:	b908      	cbnz	r0, 8086196 <_ZN9TCPClient6statusEv+0x12>
 8086192:	2000      	movs	r0, #0
 8086194:	bd10      	pop	{r4, pc}
 8086196:	6920      	ldr	r0, [r4, #16]
 8086198:	f001 fe50 	bl	8087e3c <_ZN5spark12NetworkClass4fromEm>
 808619c:	6803      	ldr	r3, [r0, #0]
 808619e:	68db      	ldr	r3, [r3, #12]
 80861a0:	4798      	blx	r3
 80861a2:	2800      	cmp	r0, #0
 80861a4:	d0f5      	beq.n	8086192 <_ZN9TCPClient6statusEv+0xe>
 80861a6:	6963      	ldr	r3, [r4, #20]
 80861a8:	6818      	ldr	r0, [r3, #0]
 80861aa:	f7ff f9e9 	bl	8085580 <socket_active_status>
 80861ae:	fab0 f080 	clz	r0, r0
 80861b2:	0940      	lsrs	r0, r0, #5
}
 80861b4:	bd10      	pop	{r4, pc}

080861b6 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80861b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80861ba:	2500      	movs	r5, #0
 80861bc:	6045      	str	r5, [r0, #4]
 80861be:	4604      	mov	r4, r0
 80861c0:	460e      	mov	r6, r1
 80861c2:	4617      	mov	r7, r2
 80861c4:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80861c6:	f7ff ffdd 	bl	8086184 <_ZN9TCPClient6statusEv>
 80861ca:	b160      	cbz	r0, 80861e6 <_ZN9TCPClient5writeEPKhjm+0x30>
 80861cc:	6960      	ldr	r0, [r4, #20]
 80861ce:	9501      	str	r5, [sp, #4]
 80861d0:	f8cd 8000 	str.w	r8, [sp]
 80861d4:	462b      	mov	r3, r5
 80861d6:	463a      	mov	r2, r7
 80861d8:	4631      	mov	r1, r6
 80861da:	6800      	ldr	r0, [r0, #0]
 80861dc:	f7ff fa18 	bl	8085610 <socket_send_ex>
    if (ret < 0) {
 80861e0:	2800      	cmp	r0, #0
 80861e2:	da03      	bge.n	80861ec <_ZN9TCPClient5writeEPKhjm+0x36>
 80861e4:	e001      	b.n	80861ea <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80861e6:	f04f 30ff 	mov.w	r0, #4294967295
 80861ea:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80861ec:	b002      	add	sp, #8
 80861ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080861f2 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80861f2:	b538      	push	{r3, r4, r5, lr}
 80861f4:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80861f6:	f7ff ffc5 	bl	8086184 <_ZN9TCPClient6statusEv>
 80861fa:	bb00      	cbnz	r0, 808623e <_ZN9TCPClient9connectedEv+0x4c>
 80861fc:	6963      	ldr	r3, [r4, #20]
 80861fe:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8086202:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8086206:	4291      	cmp	r1, r2
 8086208:	d119      	bne.n	808623e <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808620a:	6818      	ldr	r0, [r3, #0]
 808620c:	f7ff f9c0 	bl	8085590 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8086210:	b128      	cbz	r0, 808621e <_ZN9TCPClient9connectedEv+0x2c>
 8086212:	6963      	ldr	r3, [r4, #20]
 8086214:	6818      	ldr	r0, [r3, #0]
 8086216:	f7ff f9b3 	bl	8085580 <socket_active_status>
 808621a:	2801      	cmp	r0, #1
 808621c:	d001      	beq.n	8086222 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 808621e:	2500      	movs	r5, #0
 8086220:	e00e      	b.n	8086240 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8086222:	6823      	ldr	r3, [r4, #0]
 8086224:	4620      	mov	r0, r4
 8086226:	691b      	ldr	r3, [r3, #16]
 8086228:	4798      	blx	r3
 808622a:	2800      	cmp	r0, #0
 808622c:	bf14      	ite	ne
 808622e:	2501      	movne	r5, #1
 8086230:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8086232:	d105      	bne.n	8086240 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 8086234:	6823      	ldr	r3, [r4, #0]
 8086236:	4620      	mov	r0, r4
 8086238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808623a:	4798      	blx	r3
 808623c:	e000      	b.n	8086240 <_ZN9TCPClient9connectedEv+0x4e>
 808623e:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 8086240:	4628      	mov	r0, r5
 8086242:	bd38      	pop	{r3, r4, r5, pc}

08086244 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8086244:	b508      	push	{r3, lr}
   return (status()!=0);
 8086246:	f7ff ff9d 	bl	8086184 <_ZN9TCPClient6statusEv>
}
 808624a:	3000      	adds	r0, #0
 808624c:	bf18      	it	ne
 808624e:	2001      	movne	r0, #1
 8086250:	bd08      	pop	{r3, pc}

08086252 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 8086252:	b510      	push	{r4, lr}
 8086254:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 8086256:	2300      	movs	r3, #0
 8086258:	6001      	str	r1, [r0, #0]
 808625a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 808625e:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 8086262:	3088      	adds	r0, #136	; 0x88
 8086264:	f001 fa22 	bl	80876ac <_ZN9IPAddressC1Ev>
}
 8086268:	4620      	mov	r0, r4
 808626a:	bd10      	pop	{r4, pc}

0808626c <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808626c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8086270:	b570      	push	{r4, r5, r6, lr}
 8086272:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8086274:	4a14      	ldr	r2, [pc, #80]	; (80862c8 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8086276:	2300      	movs	r3, #0
 8086278:	6043      	str	r3, [r0, #4]
 808627a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 808627c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 808627e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8086280:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8086282:	2090      	movs	r0, #144	; 0x90
 8086284:	460e      	mov	r6, r1
 8086286:	f7f9 ff0a 	bl	808009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 808628a:	4605      	mov	r5, r0
 808628c:	b110      	cbz	r0, 8086294 <_ZN9TCPClientC1Em+0x28>
 808628e:	4631      	mov	r1, r6
 8086290:	f7ff ffdf 	bl	8086252 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8086294:	2014      	movs	r0, #20
 8086296:	f7f9 ff02 	bl	808009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 808629a:	4603      	mov	r3, r0
 808629c:	b128      	cbz	r0, 80862aa <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808629e:	2201      	movs	r2, #1
 80862a0:	6042      	str	r2, [r0, #4]
 80862a2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80862a4:	4a09      	ldr	r2, [pc, #36]	; (80862cc <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80862a6:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80862a8:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80862aa:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80862ac:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80862ae:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80862b0:	b128      	cbz	r0, 80862be <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80862b2:	6843      	ldr	r3, [r0, #4]
 80862b4:	3b01      	subs	r3, #1
 80862b6:	6043      	str	r3, [r0, #4]
 80862b8:	b90b      	cbnz	r3, 80862be <_ZN9TCPClientC1Em+0x52>
 80862ba:	f7ff fe33 	bl	8085f24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80862be:	4620      	mov	r0, r4
 80862c0:	f7ff fe9a 	bl	8085ff8 <_ZN9TCPClient12flush_bufferEv>
}
 80862c4:	4620      	mov	r0, r4
 80862c6:	bd70      	pop	{r4, r5, r6, pc}
 80862c8:	0808d918 	.word	0x0808d918
 80862cc:	0808d8fc 	.word	0x0808d8fc

080862d0 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80862d0:	b510      	push	{r4, lr}
 80862d2:	4604      	mov	r4, r0
 80862d4:	f7ff f994 	bl	8085600 <socket_handle_invalid>
 80862d8:	4601      	mov	r1, r0
 80862da:	4620      	mov	r0, r4
 80862dc:	f7ff ffc6 	bl	808626c <_ZN9TCPClientC1Em>
{
}
 80862e0:	4620      	mov	r0, r4
 80862e2:	bd10      	pop	{r4, pc}

080862e4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80862e4:	b510      	push	{r4, lr}
 80862e6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80862e8:	6800      	ldr	r0, [r0, #0]
 80862ea:	f7ff f951 	bl	8085590 <socket_handle_valid>
 80862ee:	b110      	cbz	r0, 80862f6 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80862f0:	6820      	ldr	r0, [r4, #0]
 80862f2:	f7ff f97d 	bl	80855f0 <socket_close>
    }
}
 80862f6:	4620      	mov	r0, r4
 80862f8:	bd10      	pop	{r4, pc}

080862fa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80862fa:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80862fc:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80862fe:	4620      	mov	r0, r4
 8086300:	f7ff fff0 	bl	80862e4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 8086304:	b124      	cbz	r4, 8086310 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8086306:	4620      	mov	r0, r4
 8086308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808630c:	f7f9 becb 	b.w	80800a6 <_ZdlPv>
 8086310:	bd10      	pop	{r4, pc}
	...

08086314 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8086314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086318:	461e      	mov	r6, r3
    stop();
 808631a:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808631c:	b086      	sub	sp, #24
    stop();
 808631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8086320:	4605      	mov	r5, r0
 8086322:	460f      	mov	r7, r1
 8086324:	4690      	mov	r8, r2
    stop();
 8086326:	4798      	blx	r3
    if (Network.ready())
 8086328:	4811      	ldr	r0, [pc, #68]	; (8086370 <_ZN9TCPClient7connectEPKctm+0x5c>)
 808632a:	f001 fd3b 	bl	8087da4 <_ZN5spark12NetworkClass5readyEv>
 808632e:	b1d8      	cbz	r0, 8086368 <_ZN9TCPClient7connectEPKctm+0x54>
    {
        IPAddress ip_addr;
 8086330:	a802      	add	r0, sp, #8
 8086332:	f001 f9bb 	bl	80876ac <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 8086336:	4638      	mov	r0, r7
 8086338:	f004 fb26 	bl	808a988 <strlen>
 808633c:	2400      	movs	r4, #0
 808633e:	b281      	uxth	r1, r0
 8086340:	9400      	str	r4, [sp, #0]
 8086342:	4633      	mov	r3, r6
 8086344:	aa03      	add	r2, sp, #12
 8086346:	4638      	mov	r0, r7
 8086348:	f7ff f972 	bl	8085630 <inet_gethostbyname>
 808634c:	b958      	cbnz	r0, 8086366 <_ZN9TCPClient7connectEPKctm+0x52>
            return connect(ip_addr, port, nif);
 808634e:	682b      	ldr	r3, [r5, #0]
 8086350:	4642      	mov	r2, r8
 8086352:	6a1c      	ldr	r4, [r3, #32]
 8086354:	4b07      	ldr	r3, [pc, #28]	; (8086374 <_ZN9TCPClient7connectEPKctm+0x60>)
 8086356:	a904      	add	r1, sp, #16
 8086358:	9304      	str	r3, [sp, #16]
 808635a:	9b03      	ldr	r3, [sp, #12]
 808635c:	4628      	mov	r0, r5
 808635e:	9305      	str	r3, [sp, #20]
 8086360:	4633      	mov	r3, r6
 8086362:	47a0      	blx	r4
 8086364:	e000      	b.n	8086368 <_ZN9TCPClient7connectEPKctm+0x54>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 8086366:	4620      	mov	r0, r4
}
 8086368:	b006      	add	sp, #24
 808636a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808636e:	bf00      	nop
 8086370:	20000ea8 	.word	0x20000ea8
 8086374:	0808db3c 	.word	0x0808db3c

08086378 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8086378:	b510      	push	{r4, lr}
 808637a:	4604      	mov	r4, r0
{
	free(buffer);
 808637c:	6800      	ldr	r0, [r0, #0]
 808637e:	f7ff fa9b 	bl	80858b8 <free>
}
 8086382:	4620      	mov	r0, r4
 8086384:	bd10      	pop	{r4, pc}

08086386 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8086386:	b510      	push	{r4, lr}
 8086388:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808638a:	6800      	ldr	r0, [r0, #0]
 808638c:	b108      	cbz	r0, 8086392 <_ZN6String10invalidateEv+0xc>
 808638e:	f7ff fa93 	bl	80858b8 <free>
	buffer = NULL;
 8086392:	2300      	movs	r3, #0
 8086394:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8086396:	60a3      	str	r3, [r4, #8]
 8086398:	6063      	str	r3, [r4, #4]
 808639a:	bd10      	pop	{r4, pc}

0808639c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808639c:	b538      	push	{r3, r4, r5, lr}
 808639e:	4604      	mov	r4, r0
 80863a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80863a2:	6800      	ldr	r0, [r0, #0]
 80863a4:	3101      	adds	r1, #1
 80863a6:	f7ff fa8f 	bl	80858c8 <realloc>
	if (newbuffer) {
 80863aa:	b110      	cbz	r0, 80863b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80863ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80863b0:	2001      	movs	r0, #1
	}
	return 0;
}
 80863b2:	bd38      	pop	{r3, r4, r5, pc}

080863b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80863b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80863b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80863b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80863ba:	b113      	cbz	r3, 80863c2 <_ZN6String7reserveEj+0xe>
 80863bc:	6843      	ldr	r3, [r0, #4]
 80863be:	428b      	cmp	r3, r1
 80863c0:	d207      	bcs.n	80863d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80863c2:	4620      	mov	r0, r4
 80863c4:	f7ff ffea 	bl	808639c <_ZN6String12changeBufferEj>
 80863c8:	b120      	cbz	r0, 80863d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80863ca:	68a3      	ldr	r3, [r4, #8]
 80863cc:	b90b      	cbnz	r3, 80863d2 <_ZN6String7reserveEj+0x1e>
 80863ce:	6822      	ldr	r2, [r4, #0]
 80863d0:	7013      	strb	r3, [r2, #0]
 80863d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80863d4:	bd10      	pop	{r4, pc}

080863d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80863d6:	b570      	push	{r4, r5, r6, lr}
 80863d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80863da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80863dc:	4604      	mov	r4, r0
 80863de:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80863e0:	f7ff ffe8 	bl	80863b4 <_ZN6String7reserveEj>
 80863e4:	b918      	cbnz	r0, 80863ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80863e6:	4620      	mov	r0, r4
 80863e8:	f7ff ffcd 	bl	8086386 <_ZN6String10invalidateEv>
		return *this;
 80863ec:	e009      	b.n	8086402 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80863ee:	462a      	mov	r2, r5
 80863f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80863f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80863f4:	6820      	ldr	r0, [r4, #0]
 80863f6:	f003 fd3c 	bl	8089e72 <memcpy>
	buffer[len] = 0;
 80863fa:	6822      	ldr	r2, [r4, #0]
 80863fc:	68a3      	ldr	r3, [r4, #8]
 80863fe:	2100      	movs	r1, #0
 8086400:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8086402:	4620      	mov	r0, r4
 8086404:	bd70      	pop	{r4, r5, r6, pc}

08086406 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8086406:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086408:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808640a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808640c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808640e:	6043      	str	r3, [r0, #4]
	len = 0;
 8086410:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086412:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8086414:	460d      	mov	r5, r1
 8086416:	b139      	cbz	r1, 8086428 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8086418:	4608      	mov	r0, r1
 808641a:	f004 fab5 	bl	808a988 <strlen>
 808641e:	4629      	mov	r1, r5
 8086420:	4602      	mov	r2, r0
 8086422:	4620      	mov	r0, r4
 8086424:	f7ff ffd7 	bl	80863d6 <_ZN6String4copyEPKcj>
}
 8086428:	4620      	mov	r0, r4
 808642a:	bd38      	pop	{r3, r4, r5, pc}

0808642c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808642c:	b538      	push	{r3, r4, r5, lr}
 808642e:	4605      	mov	r5, r0
	if (buffer) {
 8086430:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8086432:	460c      	mov	r4, r1
	if (buffer) {
 8086434:	b160      	cbz	r0, 8086450 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8086436:	686a      	ldr	r2, [r5, #4]
 8086438:	688b      	ldr	r3, [r1, #8]
 808643a:	429a      	cmp	r2, r3
 808643c:	d306      	bcc.n	808644c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808643e:	6809      	ldr	r1, [r1, #0]
 8086440:	f003 fd6a 	bl	8089f18 <strcpy>
			len = rhs.len;
 8086444:	68a3      	ldr	r3, [r4, #8]
 8086446:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8086448:	2300      	movs	r3, #0
 808644a:	e00a      	b.n	8086462 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808644c:	f7ff fa34 	bl	80858b8 <free>
		}
	}
	buffer = rhs.buffer;
 8086450:	6823      	ldr	r3, [r4, #0]
 8086452:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8086454:	6863      	ldr	r3, [r4, #4]
 8086456:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8086458:	68a3      	ldr	r3, [r4, #8]
 808645a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808645c:	2300      	movs	r3, #0
 808645e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8086460:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8086462:	60a3      	str	r3, [r4, #8]
 8086464:	bd38      	pop	{r3, r4, r5, pc}

08086466 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8086466:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8086468:	b510      	push	{r4, lr}
 808646a:	460b      	mov	r3, r1
 808646c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808646e:	d007      	beq.n	8086480 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8086470:	6809      	ldr	r1, [r1, #0]
 8086472:	b119      	cbz	r1, 808647c <_ZN6StringaSERKS_+0x16>
 8086474:	689a      	ldr	r2, [r3, #8]
 8086476:	f7ff ffae 	bl	80863d6 <_ZN6String4copyEPKcj>
 808647a:	e001      	b.n	8086480 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808647c:	f7ff ff83 	bl	8086386 <_ZN6String10invalidateEv>

	return *this;
}
 8086480:	4620      	mov	r0, r4
 8086482:	bd10      	pop	{r4, pc}

08086484 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8086484:	b510      	push	{r4, lr}
 8086486:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8086488:	2300      	movs	r3, #0
 808648a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808648c:	6043      	str	r3, [r0, #4]
	len = 0;
 808648e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086490:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8086492:	f7ff ffe8 	bl	8086466 <_ZN6StringaSERKS_>
}
 8086496:	4620      	mov	r0, r4
 8086498:	bd10      	pop	{r4, pc}

0808649a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808649a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808649c:	b510      	push	{r4, lr}
 808649e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80864a0:	d001      	beq.n	80864a6 <_ZN6StringaSEOS_+0xc>
 80864a2:	f7ff ffc3 	bl	808642c <_ZN6String4moveERS_>
	return *this;
}
 80864a6:	4620      	mov	r0, r4
 80864a8:	bd10      	pop	{r4, pc}

080864aa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80864aa:	b570      	push	{r4, r5, r6, lr}
 80864ac:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80864ae:	460e      	mov	r6, r1
 80864b0:	b909      	cbnz	r1, 80864b6 <_ZN6String6concatEPKcj+0xc>
 80864b2:	2000      	movs	r0, #0
 80864b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80864b6:	b16a      	cbz	r2, 80864d4 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80864b8:	6883      	ldr	r3, [r0, #8]
 80864ba:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80864bc:	4629      	mov	r1, r5
 80864be:	f7ff ff79 	bl	80863b4 <_ZN6String7reserveEj>
 80864c2:	2800      	cmp	r0, #0
 80864c4:	d0f5      	beq.n	80864b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80864c6:	6820      	ldr	r0, [r4, #0]
 80864c8:	68a3      	ldr	r3, [r4, #8]
 80864ca:	4631      	mov	r1, r6
 80864cc:	4418      	add	r0, r3
 80864ce:	f003 fd23 	bl	8089f18 <strcpy>
	len = newlen;
 80864d2:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80864d4:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80864d6:	bd70      	pop	{r4, r5, r6, pc}

080864d8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80864d8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80864da:	688a      	ldr	r2, [r1, #8]
 80864dc:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80864de:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80864e0:	f7ff ffe3 	bl	80864aa <_ZN6String6concatEPKcj>
 80864e4:	b910      	cbnz	r0, 80864ec <_ZplRK15StringSumHelperRK6String+0x14>
 80864e6:	4620      	mov	r0, r4
 80864e8:	f7ff ff4d 	bl	8086386 <_ZN6String10invalidateEv>
	return a;
}
 80864ec:	4620      	mov	r0, r4
 80864ee:	bd10      	pop	{r4, pc}

080864f0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80864f0:	b538      	push	{r3, r4, r5, lr}
 80864f2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80864f4:	460d      	mov	r5, r1
 80864f6:	b141      	cbz	r1, 808650a <_ZplRK15StringSumHelperPKc+0x1a>
 80864f8:	4608      	mov	r0, r1
 80864fa:	f004 fa45 	bl	808a988 <strlen>
 80864fe:	4629      	mov	r1, r5
 8086500:	4602      	mov	r2, r0
 8086502:	4620      	mov	r0, r4
 8086504:	f7ff ffd1 	bl	80864aa <_ZN6String6concatEPKcj>
 8086508:	b910      	cbnz	r0, 8086510 <_ZplRK15StringSumHelperPKc+0x20>
 808650a:	4620      	mov	r0, r4
 808650c:	f7ff ff3b 	bl	8086386 <_ZN6String10invalidateEv>
	return a;
}
 8086510:	4620      	mov	r0, r4
 8086512:	bd38      	pop	{r3, r4, r5, pc}

08086514 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086514:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8086516:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086518:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808651a:	b912      	cbnz	r2, 8086522 <_ZNK6String6equalsEPKc+0xe>
 808651c:	b919      	cbnz	r1, 8086526 <_ZNK6String6equalsEPKc+0x12>
 808651e:	2001      	movs	r0, #1
 8086520:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8086522:	b911      	cbnz	r1, 808652a <_ZNK6String6equalsEPKc+0x16>
 8086524:	6803      	ldr	r3, [r0, #0]
 8086526:	7818      	ldrb	r0, [r3, #0]
 8086528:	e002      	b.n	8086530 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808652a:	6800      	ldr	r0, [r0, #0]
 808652c:	f003 fcea 	bl	8089f04 <strcmp>
 8086530:	fab0 f080 	clz	r0, r0
 8086534:	0940      	lsrs	r0, r0, #5
}
 8086536:	bd08      	pop	{r3, pc}

08086538 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 8086538:	6883      	ldr	r3, [r0, #8]
 808653a:	428b      	cmp	r3, r1
 808653c:	d901      	bls.n	8086542 <_ZN6StringixEj+0xa>
 808653e:	6800      	ldr	r0, [r0, #0]
 8086540:	b918      	cbnz	r0, 808654a <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 8086542:	4803      	ldr	r0, [pc, #12]	; (8086550 <_ZN6StringixEj+0x18>)
 8086544:	2300      	movs	r3, #0
 8086546:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 8086548:	4770      	bx	lr
	}
	return buffer[index];
 808654a:	4408      	add	r0, r1
}
 808654c:	4770      	bx	lr
 808654e:	bf00      	nop
 8086550:	20000930 	.word	0x20000930

08086554 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8086554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086556:	4606      	mov	r6, r0
 8086558:	460d      	mov	r5, r1
 808655a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808655c:	2400      	movs	r4, #0
  while (size--) {
 808655e:	42bd      	cmp	r5, r7
 8086560:	d00c      	beq.n	808657c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8086562:	6833      	ldr	r3, [r6, #0]
 8086564:	f815 1b01 	ldrb.w	r1, [r5], #1
 8086568:	689b      	ldr	r3, [r3, #8]
 808656a:	4630      	mov	r0, r6
 808656c:	4798      	blx	r3
     if (chunk>=0)
 808656e:	2800      	cmp	r0, #0
 8086570:	db01      	blt.n	8086576 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8086572:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8086574:	e7f3      	b.n	808655e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8086576:	2c00      	cmp	r4, #0
 8086578:	bf08      	it	eq
 808657a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808657c:	4620      	mov	r0, r4
 808657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086580 <_ZN5Print5printEPKc>:
 8086580:	b508      	push	{r3, lr}
 8086582:	f7fb fe39 	bl	80821f8 <_ZN5Print5writeEPKc>
 8086586:	bd08      	pop	{r3, pc}

08086588 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8086588:	6803      	ldr	r3, [r0, #0]
 808658a:	689b      	ldr	r3, [r3, #8]
 808658c:	4718      	bx	r3

0808658e <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 808658e:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086590:	f7fb fe32 	bl	80821f8 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 8086594:	bd08      	pop	{r3, pc}

08086596 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 8086596:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8086598:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808659a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808659c:	f7ff fff4 	bl	8086588 <_ZN5Print5printEc>
  n += print('\n');
 80865a0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80865a2:	4604      	mov	r4, r0
  n += print('\n');
 80865a4:	4628      	mov	r0, r5
 80865a6:	f7ff ffef 	bl	8086588 <_ZN5Print5printEc>
  return n;
}
 80865aa:	4420      	add	r0, r4
 80865ac:	bd38      	pop	{r3, r4, r5, pc}

080865ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80865ae:	b538      	push	{r3, r4, r5, lr}
 80865b0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80865b2:	f7fb fe21 	bl	80821f8 <_ZN5Print5writeEPKc>
 80865b6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80865b8:	4628      	mov	r0, r5
 80865ba:	f7ff ffec 	bl	8086596 <_ZN5Print7printlnEv>
  return n;
}
 80865be:	4420      	add	r0, r4
 80865c0:	bd38      	pop	{r3, r4, r5, pc}

080865c2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80865c2:	2a01      	cmp	r2, #1
 80865c4:	bf98      	it	ls
 80865c6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80865c8:	b530      	push	{r4, r5, lr}
 80865ca:	460b      	mov	r3, r1
 80865cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80865ce:	2100      	movs	r1, #0
 80865d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80865d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80865d8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80865dc:	fb05 3312 	mls	r3, r5, r2, r3
 80865e0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80865e2:	2b09      	cmp	r3, #9
 80865e4:	bf94      	ite	ls
 80865e6:	3330      	addls	r3, #48	; 0x30
 80865e8:	3337      	addhi	r3, #55	; 0x37
 80865ea:	b2db      	uxtb	r3, r3
 80865ec:	4621      	mov	r1, r4
 80865ee:	f804 3901 	strb.w	r3, [r4], #-1
 80865f2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80865f4:	2d00      	cmp	r5, #0
 80865f6:	d1ef      	bne.n	80865d8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80865f8:	f7fb fdfe 	bl	80821f8 <_ZN5Print5writeEPKc>
}
 80865fc:	b00b      	add	sp, #44	; 0x2c
 80865fe:	bd30      	pop	{r4, r5, pc}

08086600 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8086600:	b40c      	push	{r2, r3}
 8086602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086606:	b087      	sub	sp, #28
 8086608:	af00      	add	r7, sp, #0
 808660a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808660e:	f854 9b04 	ldr.w	r9, [r4], #4
 8086612:	4605      	mov	r5, r0
 8086614:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8086616:	4623      	mov	r3, r4
 8086618:	464a      	mov	r2, r9
 808661a:	2114      	movs	r1, #20
 808661c:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808661e:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8086620:	f7ff f982 	bl	8085928 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8086624:	2813      	cmp	r0, #19
 8086626:	d805      	bhi.n	8086634 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086628:	1d39      	adds	r1, r7, #4
 808662a:	4628      	mov	r0, r5
 808662c:	f7fb fde4 	bl	80821f8 <_ZN5Print5writeEPKc>
 8086630:	4604      	mov	r4, r0
 8086632:	e013      	b.n	808665c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8086634:	f100 0308 	add.w	r3, r0, #8
 8086638:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808663c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808663e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8086642:	1c41      	adds	r1, r0, #1
 8086644:	4623      	mov	r3, r4
 8086646:	464a      	mov	r2, r9
 8086648:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 808664a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808664c:	f7ff f96c 	bl	8085928 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8086650:	4669      	mov	r1, sp
 8086652:	4628      	mov	r0, r5
 8086654:	f7fb fdd0 	bl	80821f8 <_ZN5Print5writeEPKc>
 8086658:	4604      	mov	r4, r0
 808665a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808665c:	b11e      	cbz	r6, 8086666 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808665e:	4628      	mov	r0, r5
 8086660:	f7ff ff99 	bl	8086596 <_ZN5Print7printlnEv>
 8086664:	4404      	add	r4, r0
    return n;
}
 8086666:	4620      	mov	r0, r4
 8086668:	371c      	adds	r7, #28
 808666a:	46bd      	mov	sp, r7
 808666c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086670:	b002      	add	sp, #8
 8086672:	4770      	bx	lr

08086674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8086674:	680b      	ldr	r3, [r1, #0]
 8086676:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8086678:	b113      	cbz	r3, 8086680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808667a:	685a      	ldr	r2, [r3, #4]
 808667c:	3201      	adds	r2, #1
 808667e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8086680:	4770      	bx	lr
	...

08086684 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8086684:	4a01      	ldr	r2, [pc, #4]	; (808668c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8086686:	4b02      	ldr	r3, [pc, #8]	; (8086690 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8086688:	601a      	str	r2, [r3, #0]
 808668a:	4770      	bx	lr
 808668c:	0808d9ed 	.word	0x0808d9ed
 8086690:	20000934 	.word	0x20000934

08086694 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8086694:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086696:	2000      	movs	r0, #0
 8086698:	f7ff f8f6 	bl	8085888 <spark_sync_time_pending>
 808669c:	b128      	cbz	r0, 80866aa <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808669e:	f7ff f8db 	bl	8085858 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80866a2:	f080 0001 	eor.w	r0, r0, #1
 80866a6:	b2c0      	uxtb	r0, r0
 80866a8:	bd08      	pop	{r3, pc}
 80866aa:	2001      	movs	r0, #1
    }
 80866ac:	bd08      	pop	{r3, pc}
	...

080866b0 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80866b0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80866b2:	4909      	ldr	r1, [pc, #36]	; (80866d8 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80866b4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80866b6:	f003 f857 	bl	8089768 <__aeabi_fcmplt>
 80866ba:	b960      	cbnz	r0, 80866d6 <_ZN9TimeClass4zoneEf+0x26>
 80866bc:	4907      	ldr	r1, [pc, #28]	; (80866dc <_ZN9TimeClass4zoneEf+0x2c>)
 80866be:	4620      	mov	r0, r4
 80866c0:	f003 f870 	bl	80897a4 <__aeabi_fcmpgt>
 80866c4:	b938      	cbnz	r0, 80866d6 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80866c6:	4906      	ldr	r1, [pc, #24]	; (80866e0 <_ZN9TimeClass4zoneEf+0x30>)
 80866c8:	4620      	mov	r0, r4
 80866ca:	f002 feaf 	bl	808942c <__aeabi_fmul>
 80866ce:	f003 f889 	bl	80897e4 <__aeabi_f2iz>
 80866d2:	4b04      	ldr	r3, [pc, #16]	; (80866e4 <_ZN9TimeClass4zoneEf+0x34>)
 80866d4:	6018      	str	r0, [r3, #0]
 80866d6:	bd10      	pop	{r4, pc}
 80866d8:	c1400000 	.word	0xc1400000
 80866dc:	41600000 	.word	0x41600000
 80866e0:	45610000 	.word	0x45610000
 80866e4:	20000940 	.word	0x20000940

080866e8 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80866e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80866ea:	4b0e      	ldr	r3, [pc, #56]	; (8086724 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80866ec:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80866ee:	681b      	ldr	r3, [r3, #0]
 80866f0:	a802      	add	r0, sp, #8
 80866f2:	4419      	add	r1, r3
 80866f4:	4b0c      	ldr	r3, [pc, #48]	; (8086728 <_ZN9TimeClass7timeStrEl+0x40>)
 80866f6:	681b      	ldr	r3, [r3, #0]
 80866f8:	4419      	add	r1, r3
 80866fa:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80866fe:	f003 faad 	bl	8089c5c <localtime>
        char* ascstr = asctime(calendar_time);
 8086702:	f003 fa5d 	bl	8089bc0 <asctime>
 8086706:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8086708:	f004 f93e 	bl	808a988 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808670c:	2300      	movs	r3, #0
 808670e:	4428      	add	r0, r5
 8086710:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8086714:	4629      	mov	r1, r5
 8086716:	4620      	mov	r0, r4
 8086718:	f7ff fe75 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808671c:	4620      	mov	r0, r4
 808671e:	b003      	add	sp, #12
 8086720:	bd30      	pop	{r4, r5, pc}
 8086722:	bf00      	nop
 8086724:	20000940 	.word	0x20000940
 8086728:	2000093c 	.word	0x2000093c

0808672c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086730:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086732:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086734:	4607      	mov	r7, r0
 8086736:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086738:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808673a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808673c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808673e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086740:	f004 f93f 	bl	808a9c2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086744:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086746:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086748:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808674c:	f004 f91c 	bl	808a988 <strlen>
 8086750:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8086752:	b925      	cbnz	r5, 808675e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 8086754:	4924      	ldr	r1, [pc, #144]	; (80867e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 8086756:	a803      	add	r0, sp, #12
 8086758:	f003 fbde 	bl	8089f18 <strcpy>
 808675c:	e013      	b.n	8086786 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808675e:	213c      	movs	r1, #60	; 0x3c
 8086760:	fb95 f2f1 	sdiv	r2, r5, r1
 8086764:	2a00      	cmp	r2, #0
 8086766:	bfb8      	it	lt
 8086768:	4252      	neglt	r2, r2
 808676a:	fb92 f3f1 	sdiv	r3, r2, r1
 808676e:	fb01 2213 	mls	r2, r1, r3, r2
 8086772:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086776:	9200      	str	r2, [sp, #0]
 8086778:	fb95 f3f3 	sdiv	r3, r5, r3
 808677c:	4a1b      	ldr	r2, [pc, #108]	; (80867ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 808677e:	2110      	movs	r1, #16
 8086780:	a803      	add	r0, sp, #12
 8086782:	f7ff f8c1 	bl	8085908 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086786:	4625      	mov	r5, r4
 8086788:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808678a:	f108 3aff 	add.w	sl, r8, #4294967295
 808678e:	45b2      	cmp	sl, r6
 8086790:	d91b      	bls.n	80867ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8086792:	782b      	ldrb	r3, [r5, #0]
 8086794:	2b25      	cmp	r3, #37	; 0x25
 8086796:	d116      	bne.n	80867c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 8086798:	786b      	ldrb	r3, [r5, #1]
 808679a:	2b7a      	cmp	r3, #122	; 0x7a
 808679c:	d113      	bne.n	80867c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 808679e:	a803      	add	r0, sp, #12
 80867a0:	f004 f8f2 	bl	808a988 <strlen>
 80867a4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80867a6:	4430      	add	r0, r6
 80867a8:	ebc6 020a 	rsb	r2, r6, sl
 80867ac:	1ca9      	adds	r1, r5, #2
 80867ae:	4420      	add	r0, r4
 80867b0:	f003 fb5f 	bl	8089e72 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80867b4:	4642      	mov	r2, r8
 80867b6:	a903      	add	r1, sp, #12
 80867b8:	4628      	mov	r0, r5
 80867ba:	f003 fb5a 	bl	8089e72 <memcpy>
            len = strlen(format_str);
 80867be:	4620      	mov	r0, r4
 80867c0:	f004 f8e2 	bl	808a988 <strlen>
 80867c4:	4680      	mov	r8, r0
 80867c6:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80867c8:	e7de      	b.n	8086788 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80867ca:	464b      	mov	r3, r9
 80867cc:	4622      	mov	r2, r4
 80867ce:	2132      	movs	r1, #50	; 0x32
 80867d0:	a807      	add	r0, sp, #28
 80867d2:	f003 fc25 	bl	808a020 <strftime>
    return String(buf);
 80867d6:	a907      	add	r1, sp, #28
 80867d8:	4638      	mov	r0, r7
 80867da:	f7ff fe14 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80867de:	4638      	mov	r0, r7
 80867e0:	b024      	add	sp, #144	; 0x90
 80867e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80867e6:	bf00      	nop
 80867e8:	0808e13d 	.word	0x0808e13d
 80867ec:	0808da4d 	.word	0x0808da4d

080867f0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80867f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80867f2:	4605      	mov	r5, r0
 80867f4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80867f6:	461c      	mov	r4, r3
 80867f8:	b913      	cbnz	r3, 8086800 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80867fa:	4b12      	ldr	r3, [pc, #72]	; (8086844 <_ZN9TimeClass6formatElPKc+0x54>)
 80867fc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80867fe:	b12c      	cbz	r4, 808680c <_ZN9TimeClass6formatElPKc+0x1c>
 8086800:	4b11      	ldr	r3, [pc, #68]	; (8086848 <_ZN9TimeClass6formatElPKc+0x58>)
 8086802:	4620      	mov	r0, r4
 8086804:	6819      	ldr	r1, [r3, #0]
 8086806:	f003 fb7d 	bl	8089f04 <strcmp>
 808680a:	b920      	cbnz	r0, 8086816 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808680c:	9901      	ldr	r1, [sp, #4]
 808680e:	4628      	mov	r0, r5
 8086810:	f7ff ff6a 	bl	80866e8 <_ZN9TimeClass7timeStrEl>
 8086814:	e013      	b.n	808683e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8086816:	4f0d      	ldr	r7, [pc, #52]	; (808684c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8086818:	9a01      	ldr	r2, [sp, #4]
 808681a:	683b      	ldr	r3, [r7, #0]
 808681c:	4e0c      	ldr	r6, [pc, #48]	; (8086850 <_ZN9TimeClass6formatElPKc+0x60>)
 808681e:	441a      	add	r2, r3
 8086820:	6833      	ldr	r3, [r6, #0]
 8086822:	a802      	add	r0, sp, #8
 8086824:	4413      	add	r3, r2
 8086826:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808682a:	f003 fa17 	bl	8089c5c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808682e:	683a      	ldr	r2, [r7, #0]
 8086830:	6833      	ldr	r3, [r6, #0]
 8086832:	4601      	mov	r1, r0
 8086834:	4413      	add	r3, r2
 8086836:	4628      	mov	r0, r5
 8086838:	4622      	mov	r2, r4
 808683a:	f7ff ff77 	bl	808672c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808683e:	4628      	mov	r0, r5
 8086840:	b003      	add	sp, #12
 8086842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086844:	20000938 	.word	0x20000938
 8086848:	20000050 	.word	0x20000050
 808684c:	20000940 	.word	0x20000940
 8086850:	2000093c 	.word	0x2000093c

08086854 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8086854:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8086856:	2000      	movs	r0, #0
 8086858:	f7fe fd92 	bl	8085380 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808685c:	4604      	mov	r4, r0
 808685e:	b968      	cbnz	r0, 808687c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8086860:	f7fe ff3e 	bl	80856e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8086864:	2801      	cmp	r0, #1
 8086866:	d10b      	bne.n	8086880 <_ZN9TimeClass7isValidEv+0x2c>
 8086868:	4620      	mov	r0, r4
 808686a:	f7fe ff71 	bl	8085750 <system_thread_get_state>
 808686e:	b938      	cbnz	r0, 8086880 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8086870:	f7ff ff10 	bl	8086694 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8086874:	b930      	cbnz	r0, 8086884 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8086876:	f7fe ffdf 	bl	8085838 <spark_process>
 808687a:	e7f9      	b.n	8086870 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808687c:	2001      	movs	r0, #1
 808687e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8086880:	2000      	movs	r0, #0
 8086882:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8086884:	f7ff ff06 	bl	8086694 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8086888:	2000      	movs	r0, #0
 808688a:	f7fe fd79 	bl	8085380 <HAL_RTC_Time_Is_Valid>
 808688e:	3000      	adds	r0, #0
 8086890:	bf18      	it	ne
 8086892:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8086894:	bd10      	pop	{r4, pc}

08086896 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8086896:	b508      	push	{r3, lr}
    (void)isValid();
 8086898:	f7ff ffdc 	bl	8086854 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808689c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80868a0:	f7fe bd66 	b.w	8085370 <HAL_RTC_Get_UnixTime>

080868a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80868a4:	4b02      	ldr	r3, [pc, #8]	; (80868b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80868a6:	681a      	ldr	r2, [r3, #0]
 80868a8:	4b02      	ldr	r3, [pc, #8]	; (80868b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80868aa:	601a      	str	r2, [r3, #0]
 80868ac:	4770      	bx	lr
 80868ae:	bf00      	nop
 80868b0:	20000050 	.word	0x20000050
 80868b4:	20000938 	.word	0x20000938

080868b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80868b8:	2100      	movs	r1, #0
 80868ba:	f7fe bf21 	b.w	8085700 <system_delay_ms>
	...

080868c0 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80868c0:	b530      	push	{r4, r5, lr}
 80868c2:	685b      	ldr	r3, [r3, #4]
 80868c4:	b085      	sub	sp, #20
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80868c6:	6804      	ldr	r4, [r0, #0]
 80868c8:	9303      	str	r3, [sp, #12]
 80868ca:	4d05      	ldr	r5, [pc, #20]	; (80868e0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x20>)
 80868cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80868d0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 80868d2:	9502      	str	r5, [sp, #8]
 80868d4:	9300      	str	r3, [sp, #0]
 80868d6:	ab02      	add	r3, sp, #8
 80868d8:	47a0      	blx	r4
    }
 80868da:	b005      	add	sp, #20
 80868dc:	bd30      	pop	{r4, r5, pc}
 80868de:	bf00      	nop
 80868e0:	0808db3c 	.word	0x0808db3c

080868e4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80868e4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80868e6:	6804      	ldr	r4, [r0, #0]
 80868e8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80868ea:	46a4      	mov	ip, r4
    }
 80868ec:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80868ee:	4760      	bx	ip

080868f0 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80868f0:	6803      	ldr	r3, [r0, #0]
 80868f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80868f4:	4718      	bx	r3
	...

080868f8 <_ZN3UDP8remoteIPEv>:
 80868f8:	4a02      	ldr	r2, [pc, #8]	; (8086904 <_ZN3UDP8remoteIPEv+0xc>)
 80868fa:	6002      	str	r2, [r0, #0]
 80868fc:	6a0a      	ldr	r2, [r1, #32]
 80868fe:	6042      	str	r2, [r0, #4]
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 8086900:	4770      	bx	lr
 8086902:	bf00      	nop
 8086904:	0808db3c 	.word	0x0808db3c

08086908 <_ZN3UDP10remotePortEv>:
    virtual uint16_t remotePort() { return _remotePort; };
 8086908:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 808690a:	4770      	bx	lr

0808690c <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 808690c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 808690e:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8086910:	1a10      	subs	r0, r2, r0
 8086912:	4770      	bx	lr

08086914 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086914:	b530      	push	{r4, r5, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086916:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086918:	b085      	sub	sp, #20
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 808691a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 808691c:	4b09      	ldr	r3, [pc, #36]	; (8086944 <_ZN3UDP9endPacketEv+0x30>)
 808691e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8086920:	9302      	str	r3, [sp, #8]
 8086922:	6a03      	ldr	r3, [r0, #32]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 8086924:	4604      	mov	r4, r0
 8086926:	9303      	str	r3, [sp, #12]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 8086928:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 808692a:	9300      	str	r3, [sp, #0]
 808692c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 808692e:	ab02      	add	r3, sp, #8
 8086930:	47a8      	blx	r5
 8086932:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 8086934:	6823      	ldr	r3, [r4, #0]
 8086936:	4620      	mov	r0, r4
 8086938:	69db      	ldr	r3, [r3, #28]
 808693a:	4798      	blx	r3
    return result;
}
 808693c:	4628      	mov	r0, r5
 808693e:	b005      	add	sp, #20
 8086940:	bd30      	pop	{r4, r5, pc}
 8086942:	bf00      	nop
 8086944:	0808db3c 	.word	0x0808db3c

08086948 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 8086948:	b513      	push	{r0, r1, r4, lr}
 808694a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 808694c:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 808694e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 8086952:	68d4      	ldr	r4, [r2, #12]
 8086954:	4619      	mov	r1, r3
 8086956:	2201      	movs	r2, #1
 8086958:	47a0      	blx	r4
}
 808695a:	b002      	add	sp, #8
 808695c:	bd10      	pop	{r4, pc}

0808695e <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 808695e:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 8086960:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 8086962:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 8086964:	691b      	ldr	r3, [r3, #16]
 8086966:	4798      	blx	r3
 8086968:	b128      	cbz	r0, 8086976 <_ZN3UDP4readEv+0x18>
 808696a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 808696c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808696e:	1c59      	adds	r1, r3, #1
 8086970:	84e1      	strh	r1, [r4, #38]	; 0x26
 8086972:	5cd0      	ldrb	r0, [r2, r3]
 8086974:	bd10      	pop	{r4, pc}
 8086976:	f04f 30ff 	mov.w	r0, #4294967295
}
 808697a:	bd10      	pop	{r4, pc}

0808697c <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 808697c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 808697e:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 8086980:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 8086982:	691b      	ldr	r3, [r3, #16]
 8086984:	4798      	blx	r3
 8086986:	b118      	cbz	r0, 8086990 <_ZN3UDP4peekEv+0x14>
 8086988:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 808698a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808698c:	5cd0      	ldrb	r0, [r2, r3]
 808698e:	bd10      	pop	{r4, pc}
 8086990:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086994:	bd10      	pop	{r4, pc}

08086996 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 8086996:	4770      	bx	lr

08086998 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 8086998:	4603      	mov	r3, r0
 808699a:	4608      	mov	r0, r1
 808699c:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 808699e:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    return p.write(_buffer+_offset, size);
 80869a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80869a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80869a4:	6803      	ldr	r3, [r0, #0]
 80869a6:	1a52      	subs	r2, r2, r1
 80869a8:	68db      	ldr	r3, [r3, #12]
 80869aa:	4421      	add	r1, r4
}
 80869ac:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80869ae:	4718      	bx	r3

080869b0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80869b0:	f1a0 0010 	sub.w	r0, r0, #16
 80869b4:	f7ff bff0 	b.w	8086998 <_ZNK3UDP7printToER5Print>

080869b8 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80869b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80869ba:	4616      	mov	r6, r2
    stop();
 80869bc:	6803      	ldr	r3, [r0, #0]
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80869be:	4605      	mov	r5, r0
    stop();
 80869c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80869c2:	460f      	mov	r7, r1
    stop();
 80869c4:	4798      	blx	r3

    bool bound = 0;
    if(Network.from(nif).ready())
 80869c6:	4630      	mov	r0, r6
 80869c8:	f001 fa38 	bl	8087e3c <_ZN5spark12NetworkClass4fromEm>
 80869cc:	6803      	ldr	r3, [r0, #0]
 80869ce:	68db      	ldr	r3, [r3, #12]
 80869d0:	4798      	blx	r3
 80869d2:	b1b8      	cbz	r0, 8086a04 <_ZN3UDP5beginEtm+0x4c>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80869d4:	2102      	movs	r1, #2
 80869d6:	463b      	mov	r3, r7
 80869d8:	2211      	movs	r2, #17
 80869da:	4608      	mov	r0, r1
 80869dc:	9600      	str	r6, [sp, #0]
 80869de:	f7fe fddf 	bl	80855a0 <socket_create>
 80869e2:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80869e4:	f7fe fdd4 	bl	8085590 <socket_handle_valid>
 80869e8:	4604      	mov	r4, r0
 80869ea:	b130      	cbz	r0, 80869fa <_ZN3UDP5beginEtm+0x42>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80869ec:	2300      	movs	r3, #0
 80869ee:	84eb      	strh	r3, [r5, #38]	; 0x26
  _total = 0;
 80869f0:	852b      	strh	r3, [r5, #40]	; 0x28
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80869f2:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80869f4:	636e      	str	r6, [r5, #52]	; 0x34
            bound = true;
 80869f6:	2001      	movs	r0, #1
 80869f8:	e004      	b.n	8086a04 <_ZN3UDP5beginEtm+0x4c>
        }
        else {
            stop();
 80869fa:	682b      	ldr	r3, [r5, #0]
 80869fc:	4628      	mov	r0, r5
 80869fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086a00:	4798      	blx	r3
            bound = false;
 8086a02:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 8086a04:	b003      	add	sp, #12
 8086a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086a08 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 8086a08:	b538      	push	{r3, r4, r5, lr}
 8086a0a:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 8086a0c:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 8086a0e:	f7fe fdf7 	bl	8085600 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 8086a12:	4285      	cmp	r5, r0
 8086a14:	d002      	beq.n	8086a1c <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 8086a16:	6960      	ldr	r0, [r4, #20]
 8086a18:	f7fe fdea 	bl	80855f0 <socket_close>
    }
    _sock = socket_handle_invalid();
 8086a1c:	f7fe fdf0 	bl	8085600 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086a20:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 8086a22:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086a24:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086a26:	8523      	strh	r3, [r4, #40]	; 0x28
 8086a28:	bd38      	pop	{r3, r4, r5, pc}

08086a2a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 8086a2a:	b530      	push	{r4, r5, lr}
 8086a2c:	b087      	sub	sp, #28
 8086a2e:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 8086a32:	2502      	movs	r5, #2
 8086a34:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 8086a38:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8086a3c:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8086a3e:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8086a40:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 8086a44:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 8086a48:	799c      	ldrb	r4, [r3, #6]
 8086a4a:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8086a4e:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8086a50:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 8086a52:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 8086a56:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 8086a5a:	2310      	movs	r3, #16
 8086a5c:	9301      	str	r3, [sp, #4]
 8086a5e:	ab02      	add	r3, sp, #8
 8086a60:	9300      	str	r3, [sp, #0]
 8086a62:	6940      	ldr	r0, [r0, #20]
 8086a64:	2300      	movs	r3, #0
 8086a66:	f7fe fdbb 	bl	80855e0 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 8086a6a:	b007      	add	sp, #28
 8086a6c:	bd30      	pop	{r4, r5, pc}

08086a6e <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8086a6e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8086a70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 8086a72:	4605      	mov	r5, r0
 8086a74:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8086a76:	b113      	cbz	r3, 8086a7e <_ZN3UDP5writeEPKhj+0x10>
 8086a78:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8086a7a:	1a24      	subs	r4, r4, r0
 8086a7c:	e000      	b.n	8086a80 <_ZN3UDP5writeEPKhj+0x12>
 8086a7e:	461c      	mov	r4, r3
 8086a80:	4294      	cmp	r4, r2
 8086a82:	bf28      	it	cs
 8086a84:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 8086a86:	4418      	add	r0, r3
 8086a88:	4622      	mov	r2, r4
 8086a8a:	f003 f9f2 	bl	8089e72 <memcpy>
    _offset += size;
 8086a8e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    return size;
}
 8086a90:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 8086a92:	4423      	add	r3, r4
 8086a94:	84eb      	strh	r3, [r5, #38]	; 0x26
    return size;
}
 8086a96:	bd38      	pop	{r3, r4, r5, pc}

08086a98 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8086a98:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 8086a9a:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8086a9c:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 8086a9e:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 8086aa0:	460e      	mov	r6, r1
 8086aa2:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 8086aa4:	4798      	blx	r3
 8086aa6:	b188      	cbz	r0, 8086acc <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 8086aa8:	6823      	ldr	r3, [r4, #0]
 8086aaa:	4620      	mov	r0, r4
 8086aac:	691b      	ldr	r3, [r3, #16]
 8086aae:	4798      	blx	r3
 8086ab0:	4285      	cmp	r5, r0
 8086ab2:	bfa8      	it	ge
 8086ab4:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 8086ab6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8086ab8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8086aba:	462a      	mov	r2, r5
 8086abc:	4419      	add	r1, r3
 8086abe:	4630      	mov	r0, r6
 8086ac0:	f003 f9d7 	bl	8089e72 <memcpy>
      _offset += read;
 8086ac4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8086ac6:	442b      	add	r3, r5
 8086ac8:	84e3      	strh	r3, [r4, #38]	; 0x26
 8086aca:	e001      	b.n	8086ad0 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 8086acc:	f04f 35ff 	mov.w	r5, #4294967295
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 8086ad0:	4628      	mov	r0, r5
 8086ad2:	bd70      	pop	{r4, r5, r6, pc}

08086ad4 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 8086ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086ad6:	4604      	mov	r4, r0
 8086ad8:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8086ada:	6b40      	ldr	r0, [r0, #52]	; 0x34
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 8086adc:	460d      	mov	r5, r1
 8086ade:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8086ae0:	f001 f9ac 	bl	8087e3c <_ZN5spark12NetworkClass4fromEm>
 8086ae4:	6803      	ldr	r3, [r0, #0]
 8086ae6:	68db      	ldr	r3, [r3, #12]
 8086ae8:	4798      	blx	r3
 8086aea:	b310      	cbz	r0, 8086b32 <_ZN3UDP13receivePacketEPhjm+0x5e>
 8086aec:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 8086aee:	f7fe fd87 	bl	8085600 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8086af2:	4287      	cmp	r7, r0
 8086af4:	d01d      	beq.n	8086b32 <_ZN3UDP13receivePacketEPhjm+0x5e>
 8086af6:	b1e5      	cbz	r5, 8086b32 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 8086af8:	ab08      	add	r3, sp, #32
 8086afa:	2210      	movs	r2, #16
 8086afc:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 8086b00:	9301      	str	r3, [sp, #4]
 8086b02:	eb0d 0302 	add.w	r3, sp, r2
 8086b06:	9300      	str	r3, [sp, #0]
 8086b08:	4629      	mov	r1, r5
 8086b0a:	2300      	movs	r3, #0
 8086b0c:	4632      	mov	r2, r6
 8086b0e:	6960      	ldr	r0, [r4, #20]
 8086b10:	f7fe fd5e 	bl	80855d0 <socket_receivefrom>
        if (ret >= 0)
 8086b14:	1e05      	subs	r5, r0, #0
 8086b16:	db0e      	blt.n	8086b36 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 8086b18:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8086b1c:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 8086b20:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 8086b22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8086b26:	84a3      	strh	r3, [r4, #36]	; 0x24
            _remoteIP = &remoteSockAddr.sa_data[2];
 8086b28:	f104 001c 	add.w	r0, r4, #28
 8086b2c:	f000 fdf0 	bl	8087710 <_ZN9IPAddressaSEPKh>
 8086b30:	e001      	b.n	8086b36 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 8086b32:	f04f 35ff 	mov.w	r5, #4294967295
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 8086b36:	4628      	mov	r0, r5
 8086b38:	b009      	add	sp, #36	; 0x24
 8086b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086b3c <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8086b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086b3e:	4605      	mov	r5, r0
 8086b40:	b089      	sub	sp, #36	; 0x24
    if(Network.from(_nif).ready())
 8086b42:	6b40      	ldr	r0, [r0, #52]	; 0x34

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 8086b44:	460e      	mov	r6, r1
 8086b46:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 8086b48:	f001 f978 	bl	8087e3c <_ZN5spark12NetworkClass4fromEm>
 8086b4c:	6803      	ldr	r3, [r0, #0]
 8086b4e:	68db      	ldr	r3, [r3, #12]
 8086b50:	4798      	blx	r3
 8086b52:	b1d8      	cbz	r0, 8086b8c <_ZN3UDP11beginPacketEPKct+0x50>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 8086b54:	4630      	mov	r0, r6
 8086b56:	f003 ff17 	bl	808a988 <strlen>
 8086b5a:	2400      	movs	r4, #0
 8086b5c:	b281      	uxth	r1, r0
 8086b5e:	9400      	str	r4, [sp, #0]
 8086b60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8086b62:	aa03      	add	r2, sp, #12
 8086b64:	4630      	mov	r0, r6
 8086b66:	f7fe fd63 	bl	8085630 <inet_gethostbyname>
 8086b6a:	b970      	cbnz	r0, 8086b8a <_ZN3UDP11beginPacketEPKct+0x4e>
        {
            IPAddress remote_addr(ip_addr);
 8086b6c:	a903      	add	r1, sp, #12
 8086b6e:	a804      	add	r0, sp, #16
 8086b70:	f000 fda4 	bl	80876bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8086b74:	4a06      	ldr	r2, [pc, #24]	; (8086b90 <_ZN3UDP11beginPacketEPKct+0x54>)
            return beginPacket(remote_addr, port);
 8086b76:	682b      	ldr	r3, [r5, #0]
 8086b78:	9206      	str	r2, [sp, #24]
 8086b7a:	9a05      	ldr	r2, [sp, #20]
 8086b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086b7e:	9207      	str	r2, [sp, #28]
 8086b80:	a906      	add	r1, sp, #24
 8086b82:	463a      	mov	r2, r7
 8086b84:	4628      	mov	r0, r5
 8086b86:	4798      	blx	r3
 8086b88:	e000      	b.n	8086b8c <_ZN3UDP11beginPacketEPKct+0x50>
        }
    }
    return 0;
 8086b8a:	4620      	mov	r0, r4
}
 8086b8c:	b009      	add	sp, #36	; 0x24
 8086b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086b90:	0808db3c 	.word	0x0808db3c

08086b94 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 8086b94:	b538      	push	{r3, r4, r5, lr}
 8086b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086b9a:	6083      	str	r3, [r0, #8]
 8086b9c:	4b0b      	ldr	r3, [pc, #44]	; (8086bcc <_ZN3UDPC1Ev+0x38>)
 8086b9e:	2500      	movs	r5, #0
 8086ba0:	f103 0208 	add.w	r2, r3, #8
 8086ba4:	336c      	adds	r3, #108	; 0x6c
 8086ba6:	6002      	str	r2, [r0, #0]
 8086ba8:	6103      	str	r3, [r0, #16]
 8086baa:	6045      	str	r5, [r0, #4]
 8086bac:	4604      	mov	r4, r0
 8086bae:	f7fe fd27 	bl	8085600 <socket_handle_invalid>
 8086bb2:	6160      	str	r0, [r4, #20]
 8086bb4:	f104 001c 	add.w	r0, r4, #28
 8086bb8:	f000 fd78 	bl	80876ac <_ZN9IPAddressC1Ev>
 8086bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8086bc0:	84e5      	strh	r5, [r4, #38]	; 0x26
 8086bc2:	8525      	strh	r5, [r4, #40]	; 0x28
 8086bc4:	62e5      	str	r5, [r4, #44]	; 0x2c
 8086bc6:	6323      	str	r3, [r4, #48]	; 0x30
{
}
 8086bc8:	4620      	mov	r0, r4
 8086bca:	bd38      	pop	{r3, r4, r5, pc}
 8086bcc:	0808da74 	.word	0x0808da74

08086bd0 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8086bd0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 8086bd2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 8086bd6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 8086bd8:	b123      	cbz	r3, 8086be4 <_ZN3UDP13releaseBufferEv+0x14>
 8086bda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8086bdc:	b110      	cbz	r0, 8086be4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 8086bde:	2101      	movs	r1, #1
 8086be0:	f001 fc14 	bl	808840c <_ZdlPvj>
    }
    _buffer = NULL;
 8086be4:	2300      	movs	r3, #0
 8086be6:	62e3      	str	r3, [r4, #44]	; 0x2c
    _buffer_allocated = false;
 8086be8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    _buffer_size = 0;
 8086bec:	6323      	str	r3, [r4, #48]	; 0x30
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086bee:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086bf0:	8523      	strh	r3, [r4, #40]	; 0x28
 8086bf2:	bd10      	pop	{r4, pc}

08086bf4 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 8086bf4:	b570      	push	{r4, r5, r6, lr}
 8086bf6:	4604      	mov	r4, r0
 8086bf8:	4616      	mov	r6, r2
 8086bfa:	460d      	mov	r5, r1
    releaseBuffer();
 8086bfc:	f7ff ffe8 	bl	8086bd0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 8086c00:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 8086c02:	62e6      	str	r6, [r4, #44]	; 0x2c
    _buffer_size = 0;
 8086c04:	6323      	str	r3, [r4, #48]	; 0x30
    if (!_buffer && buf_size) {         // requested allocation
 8086c06:	b93e      	cbnz	r6, 8086c18 <_ZN3UDP9setBufferEjPh+0x24>
 8086c08:	b135      	cbz	r5, 8086c18 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 8086c0a:	4628      	mov	r0, r5
 8086c0c:	f7f9 fa49 	bl	80800a2 <_Znaj>
        _buffer_allocated = true;
 8086c10:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 8086c12:	62e0      	str	r0, [r4, #44]	; 0x2c
        _buffer_allocated = true;
 8086c14:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
    if (_buffer) {
 8086c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8086c1a:	b103      	cbz	r3, 8086c1e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 8086c1c:	6325      	str	r5, [r4, #48]	; 0x30
    }
    return _buffer_size;
 8086c1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8086c20:	3000      	adds	r0, #0
 8086c22:	bf18      	it	ne
 8086c24:	2001      	movne	r0, #1
 8086c26:	bd70      	pop	{r4, r5, r6, pc}

08086c28 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 8086c28:	b570      	push	{r4, r5, r6, lr}
 8086c2a:	4615      	mov	r5, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 8086c2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 8086c2e:	4604      	mov	r4, r0
 8086c30:	460e      	mov	r6, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 8086c32:	b91a      	cbnz	r2, 8086c3c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 8086c34:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8086c36:	b109      	cbz	r1, 8086c3c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 8086c38:	f7ff ffdc 	bl	8086bf4 <_ZN3UDP9setBufferEjPh>
 8086c3c:	6873      	ldr	r3, [r6, #4]
    }

    _remoteIP = ip;
    _remotePort = port;
 8086c3e:	84a5      	strh	r5, [r4, #36]	; 0x24
 8086c40:	6223      	str	r3, [r4, #32]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086c42:	2300      	movs	r3, #0
 8086c44:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086c46:	8523      	strh	r3, [r4, #40]	; 0x28

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 8086c48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8086c4a:	bd70      	pop	{r4, r5, r6, pc}

08086c4c <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8086c4c:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 8086c4e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 8086c50:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 8086c52:	b91a      	cbnz	r2, 8086c5c <_ZN3UDP11parsePacketEm+0x10>
 8086c54:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8086c56:	b109      	cbz	r1, 8086c5c <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 8086c58:	f7ff ffcc 	bl	8086bf4 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8086c5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 8086c5e:	2300      	movs	r3, #0
 8086c60:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8086c62:	8523      	strh	r3, [r4, #40]	; 0x28
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 8086c64:	b141      	cbz	r1, 8086c78 <_ZN3UDP11parsePacketEm+0x2c>
 8086c66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8086c68:	b132      	cbz	r2, 8086c78 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 8086c6a:	6820      	ldr	r0, [r4, #0]
 8086c6c:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8086c6e:	4620      	mov	r0, r4
 8086c70:	47a8      	blx	r5
        if (result>0) {
 8086c72:	2800      	cmp	r0, #0
            _total = result;
 8086c74:	bfc8      	it	gt
 8086c76:	8520      	strhgt	r0, [r4, #40]	; 0x28
        }
    };
    return available();
 8086c78:	6823      	ldr	r3, [r4, #0]
 8086c7a:	4620      	mov	r0, r4
}
 8086c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 8086c80:	691b      	ldr	r3, [r3, #16]
 8086c82:	4718      	bx	r3

08086c84 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8086c84:	b510      	push	{r4, lr}
 8086c86:	4604      	mov	r4, r0
 8086c88:	f7f9 fa99 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 8086c8c:	4620      	mov	r0, r4
 8086c8e:	bd10      	pop	{r4, pc}

08086c90 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8086c90:	b513      	push	{r0, r1, r4, lr}
 8086c92:	460b      	mov	r3, r1
 8086c94:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086c96:	c803      	ldmia	r0, {r0, r1}
 8086c98:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8086c9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8086ca0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8086ca4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8086ca8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8086cac:	b002      	add	sp, #8
 8086cae:	bd10      	pop	{r4, pc}

08086cb0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086cb0:	4803      	ldr	r0, [pc, #12]	; (8086cc0 <_GLOBAL__sub_I_RGB+0x10>)
 8086cb2:	2300      	movs	r3, #0
 8086cb4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086cb6:	4a03      	ldr	r2, [pc, #12]	; (8086cc4 <_GLOBAL__sub_I_RGB+0x14>)
 8086cb8:	4903      	ldr	r1, [pc, #12]	; (8086cc8 <_GLOBAL__sub_I_RGB+0x18>)
 8086cba:	f001 bb99 	b.w	80883f0 <__aeabi_atexit>
 8086cbe:	bf00      	nop
 8086cc0:	20000948 	.word	0x20000948
 8086cc4:	20000140 	.word	0x20000140
 8086cc8:	08086c85 	.word	0x08086c85

08086ccc <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8086ccc:	4770      	bx	lr

08086cce <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8086cce:	7d00      	ldrb	r0, [r0, #20]
 8086cd0:	4770      	bx	lr
	...

08086cd4 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8086cd4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8086cd6:	7d03      	ldrb	r3, [r0, #20]
 8086cd8:	b11b      	cbz	r3, 8086ce2 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8086cda:	6980      	ldr	r0, [r0, #24]
 8086cdc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8086ce0:	d101      	bne.n	8086ce6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8086ce2:	2000      	movs	r0, #0
 8086ce4:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8086ce6:	f002 fb4d 	bl	8089384 <__aeabi_i2f>
 8086cea:	4902      	ldr	r1, [pc, #8]	; (8086cf4 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8086cec:	f002 fc52 	bl	8089594 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8086cf0:	bd08      	pop	{r3, pc}
 8086cf2:	bf00      	nop
 8086cf4:	42c80000 	.word	0x42c80000

08086cf8 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8086cf8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8086cfa:	7d03      	ldrb	r3, [r0, #20]
 8086cfc:	b11b      	cbz	r3, 8086d06 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8086cfe:	6a00      	ldr	r0, [r0, #32]
 8086d00:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8086d04:	d101      	bne.n	8086d0a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8086d06:	2000      	movs	r0, #0
 8086d08:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8086d0a:	f002 fb3b 	bl	8089384 <__aeabi_i2f>
 8086d0e:	4902      	ldr	r1, [pc, #8]	; (8086d18 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8086d10:	f002 fc40 	bl	8089594 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8086d14:	bd08      	pop	{r3, pc}
 8086d16:	bf00      	nop
 8086d18:	42c80000 	.word	0x42c80000

08086d1c <_ZN14CellularSignalD0Ev>:
 8086d1c:	b510      	push	{r4, lr}
 8086d1e:	4604      	mov	r4, r0
 8086d20:	2128      	movs	r1, #40	; 0x28
 8086d22:	f001 fb73 	bl	808840c <_ZdlPvj>
 8086d26:	4620      	mov	r0, r4
 8086d28:	bd10      	pop	{r4, pc}
	...

08086d2c <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8086d2c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8086d2e:	7d03      	ldrb	r3, [r0, #20]
 8086d30:	b15b      	cbz	r3, 8086d4a <_ZNK14CellularSignal10getQualityEv+0x1e>
 8086d32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8086d34:	2800      	cmp	r0, #0
 8086d36:	db08      	blt.n	8086d4a <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8086d38:	f002 fb24 	bl	8089384 <__aeabi_i2f>
 8086d3c:	4904      	ldr	r1, [pc, #16]	; (8086d50 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8086d3e:	f002 fc29 	bl	8089594 <__aeabi_fdiv>
 8086d42:	4904      	ldr	r1, [pc, #16]	; (8086d54 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8086d44:	f002 fb72 	bl	808942c <__aeabi_fmul>
 8086d48:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8086d4a:	4803      	ldr	r0, [pc, #12]	; (8086d58 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8086d4c:	bd08      	pop	{r3, pc}
 8086d4e:	bf00      	nop
 8086d50:	477fff00 	.word	0x477fff00
 8086d54:	42c80000 	.word	0x42c80000
 8086d58:	bf800000 	.word	0xbf800000

08086d5c <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8086d5c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8086d5e:	7d03      	ldrb	r3, [r0, #20]
 8086d60:	b15b      	cbz	r3, 8086d7a <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8086d62:	69c0      	ldr	r0, [r0, #28]
 8086d64:	2800      	cmp	r0, #0
 8086d66:	db08      	blt.n	8086d7a <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8086d68:	f002 fb0c 	bl	8089384 <__aeabi_i2f>
 8086d6c:	4904      	ldr	r1, [pc, #16]	; (8086d80 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8086d6e:	f002 fc11 	bl	8089594 <__aeabi_fdiv>
 8086d72:	4904      	ldr	r1, [pc, #16]	; (8086d84 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8086d74:	f002 fb5a 	bl	808942c <__aeabi_fmul>
 8086d78:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8086d7a:	4803      	ldr	r0, [pc, #12]	; (8086d88 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8086d7c:	bd08      	pop	{r3, pc}
 8086d7e:	bf00      	nop
 8086d80:	477fff00 	.word	0x477fff00
 8086d84:	42c80000 	.word	0x42c80000
 8086d88:	bf800000 	.word	0xbf800000

08086d8c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8086d8c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8086d8e:	460d      	mov	r5, r1
 8086d90:	f100 0410 	add.w	r4, r0, #16
 8086d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8086d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8086d98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8086d9c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8086da0:	2001      	movs	r0, #1
 8086da2:	bd30      	pop	{r4, r5, pc}

08086da4 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 8086da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086da8:	4607      	mov	r7, r0
 8086daa:	460c      	mov	r4, r1
{
    if (base == 0) {
 8086dac:	4615      	mov	r5, r2
 8086dae:	b92a      	cbnz	r2, 8086dbc <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 8086db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 8086db4:	6803      	ldr	r3, [r0, #0]
 8086db6:	b2c9      	uxtb	r1, r1
 8086db8:	689b      	ldr	r3, [r3, #8]
 8086dba:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8086dbc:	2900      	cmp	r1, #0
 8086dbe:	da07      	bge.n	8086dd0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 8086dc0:	2a0a      	cmp	r2, #10
 8086dc2:	d105      	bne.n	8086dd0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 8086dc4:	212d      	movs	r1, #45	; 0x2d
 8086dc6:	f7ff fbdf 	bl	8086588 <_ZN5Print5printEc>
            val = -n;
 8086dca:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8086dcc:	4606      	mov	r6, r0
            val = -n;
 8086dce:	e001      	b.n	8086dd4 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 8086dd0:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8086dd2:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8086dd4:	b2ea      	uxtb	r2, r5
 8086dd6:	4638      	mov	r0, r7
 8086dd8:	f7ff fbf3 	bl	80865c2 <_ZN5Print11printNumberEmh>
    }
}
 8086ddc:	4430      	add	r0, r6
 8086dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086de2 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
 8086de2:	b570      	push	{r4, r5, r6, lr}
 8086de4:	460d      	mov	r5, r1
 8086de6:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8086de8:	220a      	movs	r2, #10
 8086dea:	6881      	ldr	r1, [r0, #8]
 8086dec:	4628      	mov	r0, r5
 8086dee:	f7ff ffd9 	bl	8086da4 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
 8086df2:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8086df4:	4604      	mov	r4, r0
    n += p.print(',');
 8086df6:	4628      	mov	r0, r5
 8086df8:	f7ff fbc6 	bl	8086588 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8086dfc:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8086dfe:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8086e00:	68f1      	ldr	r1, [r6, #12]
 8086e02:	4628      	mov	r0, r5
 8086e04:	f7ff ffce 	bl	8086da4 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
 8086e08:	4420      	add	r0, r4
 8086e0a:	bd70      	pop	{r4, r5, r6, pc}

08086e0c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8086e0c:	f1a0 0004 	sub.w	r0, r0, #4
 8086e10:	f7ff bfe7 	b.w	8086de2 <_ZNK14CellularSignal7printToER5Print>

08086e14 <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 8086e14:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 8086e16:	0909      	lsrs	r1, r1, #4
 8086e18:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086e1c:	f002 fab2 	bl	8089384 <__aeabi_i2f>
 8086e20:	4901      	ldr	r1, [pc, #4]	; (8086e28 <_ZN6detail9_getVCellEhh+0x14>)
 8086e22:	f002 fbb7 	bl	8089594 <__aeabi_fdiv>
	}
 8086e26:	bd08      	pop	{r3, pc}
 8086e28:	44480000 	.word	0x44480000

08086e2c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8086e2c:	6800      	ldr	r0, [r0, #0]
 8086e2e:	f000 bf98 	b.w	8087d62 <_ZN7TwoWire4lockEv>

08086e32 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8086e32:	b510      	push	{r4, lr}
 8086e34:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8086e36:	6001      	str	r1, [r0, #0]
 8086e38:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8086e3a:	b10a      	cbz	r2, 8086e40 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8086e3c:	f7ff fff6 	bl	8086e2c <_ZN9FuelGauge4lockEv>
    }
}
 8086e40:	4620      	mov	r0, r4
 8086e42:	bd10      	pop	{r4, pc}

08086e44 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8086e44:	b538      	push	{r3, r4, r5, lr}
 8086e46:	4604      	mov	r4, r0
 8086e48:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8086e4a:	f001 faab 	bl	80883a4 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8086e4e:	462a      	mov	r2, r5
 8086e50:	4601      	mov	r1, r0
 8086e52:	4620      	mov	r0, r4
 8086e54:	f7ff ffed 	bl	8086e32 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8086e58:	4620      	mov	r0, r4
 8086e5a:	bd38      	pop	{r3, r4, r5, pc}

08086e5c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8086e5c:	6800      	ldr	r0, [r0, #0]
 8086e5e:	f000 bf89 	b.w	8087d74 <_ZN7TwoWire6unlockEv>

08086e62 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8086e62:	b510      	push	{r4, lr}
{
    if (lock_) {
 8086e64:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8086e66:	4604      	mov	r4, r0
{
    if (lock_) {
 8086e68:	b10b      	cbz	r3, 8086e6e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8086e6a:	f7ff fff7 	bl	8086e5c <_ZN9FuelGauge6unlockEv>
    }
}
 8086e6e:	4620      	mov	r0, r4
 8086e70:	bd10      	pop	{r4, pc}

08086e72 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8086e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086e74:	4604      	mov	r4, r0
 8086e76:	460f      	mov	r7, r1
 8086e78:	4616      	mov	r6, r2
 8086e7a:	461d      	mov	r5, r3
 8086e7c:	f7ff ffd6 	bl	8086e2c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8086e80:	6820      	ldr	r0, [r4, #0]
 8086e82:	2136      	movs	r1, #54	; 0x36
 8086e84:	f000 ff5f 	bl	8087d46 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8086e88:	6820      	ldr	r0, [r4, #0]
 8086e8a:	4639      	mov	r1, r7
 8086e8c:	6803      	ldr	r3, [r0, #0]
 8086e8e:	689b      	ldr	r3, [r3, #8]
 8086e90:	4798      	blx	r3
    i2c_.endTransmission(true);
 8086e92:	2101      	movs	r1, #1
 8086e94:	6820      	ldr	r0, [r4, #0]
 8086e96:	f000 ff59 	bl	8087d4c <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8086e9a:	2202      	movs	r2, #2
 8086e9c:	2136      	movs	r1, #54	; 0x36
 8086e9e:	2301      	movs	r3, #1
 8086ea0:	6820      	ldr	r0, [r4, #0]
 8086ea2:	f000 ff37 	bl	8087d14 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
 8086ea6:	6820      	ldr	r0, [r4, #0]
 8086ea8:	6803      	ldr	r3, [r0, #0]
 8086eaa:	695b      	ldr	r3, [r3, #20]
 8086eac:	4798      	blx	r3
 8086eae:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8086eb0:	6820      	ldr	r0, [r4, #0]
 8086eb2:	6803      	ldr	r3, [r0, #0]
 8086eb4:	695b      	ldr	r3, [r3, #20]
 8086eb6:	4798      	blx	r3
 8086eb8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8086eba:	4620      	mov	r0, r4
}
 8086ebc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8086ec0:	f7ff bfcc 	b.w	8086e5c <_ZN9FuelGauge6unlockEv>

08086ec4 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 8086ec4:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 8086ec6:	2200      	movs	r2, #0
	byte LSB = 0;
 8086ec8:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 8086eca:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 8086ece:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 8086ed2:	2102      	movs	r1, #2
 8086ed4:	f10d 0206 	add.w	r2, sp, #6
 8086ed8:	f7ff ffcb 	bl	8086e72 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 8086edc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086ee0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086ee4:	b003      	add	sp, #12
 8086ee6:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 8086eea:	f7ff bf93 	b.w	8086e14 <_ZN6detail9_getVCellEhh>
	...

08086ef0 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8086ef0:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8086ef2:	2200      	movs	r2, #0
	byte LSB = 0;
 8086ef4:	ab02      	add	r3, sp, #8
 8086ef6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8086efa:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8086efe:	2104      	movs	r1, #4
 8086f00:	f10d 0206 	add.w	r2, sp, #6
 8086f04:	f7ff ffb5 	bl	8086e72 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8086f08:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086f0c:	f001 fde8 	bl	8088ae0 <__aeabi_i2d>
 8086f10:	2200      	movs	r2, #0
 8086f12:	4b08      	ldr	r3, [pc, #32]	; (8086f34 <_ZN9FuelGauge6getSoCEv+0x44>)
 8086f14:	f001 fe4a 	bl	8088bac <__aeabi_dmul>
 8086f18:	f002 f92a 	bl	8089170 <__aeabi_d2f>
 8086f1c:	4604      	mov	r4, r0
 8086f1e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8086f22:	f002 fa2f 	bl	8089384 <__aeabi_i2f>
 8086f26:	4601      	mov	r1, r0
 8086f28:	4620      	mov	r0, r4
 8086f2a:	f002 f977 	bl	808921c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8086f2e:	b002      	add	sp, #8
 8086f30:	bd10      	pop	{r4, pc}
 8086f32:	bf00      	nop
 8086f34:	3f700000 	.word	0x3f700000

08086f38 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8086f38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8086f3a:	4b18      	ldr	r3, [pc, #96]	; (8086f9c <serialEventRun+0x64>)
 8086f3c:	b133      	cbz	r3, 8086f4c <serialEventRun+0x14>
 8086f3e:	f000 fc63 	bl	8087808 <_Z16_fetch_usbserialv>
 8086f42:	6803      	ldr	r3, [r0, #0]
 8086f44:	691b      	ldr	r3, [r3, #16]
 8086f46:	4798      	blx	r3
 8086f48:	2800      	cmp	r0, #0
 8086f4a:	dc1e      	bgt.n	8086f8a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8086f4c:	4b14      	ldr	r3, [pc, #80]	; (8086fa0 <serialEventRun+0x68>)
 8086f4e:	b133      	cbz	r3, 8086f5e <serialEventRun+0x26>
 8086f50:	f000 fe46 	bl	8087be0 <_Z22__fetch_global_Serial1v>
 8086f54:	6803      	ldr	r3, [r0, #0]
 8086f56:	691b      	ldr	r3, [r3, #16]
 8086f58:	4798      	blx	r3
 8086f5a:	2800      	cmp	r0, #0
 8086f5c:	dc18      	bgt.n	8086f90 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8086f5e:	4b11      	ldr	r3, [pc, #68]	; (8086fa4 <serialEventRun+0x6c>)
 8086f60:	b10b      	cbz	r3, 8086f66 <serialEventRun+0x2e>
 8086f62:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8086f66:	4b10      	ldr	r3, [pc, #64]	; (8086fa8 <serialEventRun+0x70>)
 8086f68:	b10b      	cbz	r3, 8086f6e <serialEventRun+0x36>
 8086f6a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8086f6e:	4b0f      	ldr	r3, [pc, #60]	; (8086fac <serialEventRun+0x74>)
 8086f70:	b10b      	cbz	r3, 8086f76 <serialEventRun+0x3e>
 8086f72:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8086f76:	4b0e      	ldr	r3, [pc, #56]	; (8086fb0 <serialEventRun+0x78>)
 8086f78:	b17b      	cbz	r3, 8086f9a <serialEventRun+0x62>
 8086f7a:	f000 fc81 	bl	8087880 <_Z17_fetch_usbserial1v>
 8086f7e:	6803      	ldr	r3, [r0, #0]
 8086f80:	691b      	ldr	r3, [r3, #16]
 8086f82:	4798      	blx	r3
 8086f84:	2800      	cmp	r0, #0
 8086f86:	dc06      	bgt.n	8086f96 <serialEventRun+0x5e>
 8086f88:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8086f8a:	f3af 8000 	nop.w
 8086f8e:	e7dd      	b.n	8086f4c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8086f90:	f3af 8000 	nop.w
 8086f94:	e7e3      	b.n	8086f5e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8086f96:	f3af 8000 	nop.w
 8086f9a:	bd08      	pop	{r3, pc}
	...

08086fb4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8086fb4:	b508      	push	{r3, lr}
	serialEventRun();
 8086fb6:	f7ff ffbf 	bl	8086f38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8086fba:	f7fe f9d1 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8086fbe:	4b01      	ldr	r3, [pc, #4]	; (8086fc4 <_post_loop+0x10>)
 8086fc0:	6018      	str	r0, [r3, #0]
 8086fc2:	bd08      	pop	{r3, pc}
 8086fc4:	20000eb0 	.word	0x20000eb0

08086fc8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8086fc8:	4802      	ldr	r0, [pc, #8]	; (8086fd4 <_Z33system_initialize_user_backup_ramv+0xc>)
 8086fca:	4a03      	ldr	r2, [pc, #12]	; (8086fd8 <_Z33system_initialize_user_backup_ramv+0x10>)
 8086fcc:	4903      	ldr	r1, [pc, #12]	; (8086fdc <_Z33system_initialize_user_backup_ramv+0x14>)
 8086fce:	1a12      	subs	r2, r2, r0
 8086fd0:	f002 bf4f 	b.w	8089e72 <memcpy>
 8086fd4:	40024000 	.word	0x40024000
 8086fd8:	40024004 	.word	0x40024004
 8086fdc:	0808e328 	.word	0x0808e328

08086fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8086fe0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086fe2:	2300      	movs	r3, #0
 8086fe4:	9300      	str	r3, [sp, #0]
 8086fe6:	461a      	mov	r2, r3
 8086fe8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8086fec:	f7fe fbc2 	bl	8085774 <system_ctrl_set_result>
}
 8086ff0:	b003      	add	sp, #12
 8086ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086ff8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8086ff8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8086ffa:	8843      	ldrh	r3, [r0, #2]
 8086ffc:	2b0a      	cmp	r3, #10
 8086ffe:	d008      	beq.n	8087012 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8087000:	2b50      	cmp	r3, #80	; 0x50
 8087002:	d109      	bne.n	8087018 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8087004:	4b09      	ldr	r3, [pc, #36]	; (808702c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8087006:	681b      	ldr	r3, [r3, #0]
 8087008:	b13b      	cbz	r3, 808701a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808700a:	b003      	add	sp, #12
 808700c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8087010:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8087012:	f7ff ffe5 	bl	8086fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8087016:	e006      	b.n	8087026 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8087018:	2300      	movs	r3, #0
 808701a:	9300      	str	r3, [sp, #0]
 808701c:	461a      	mov	r2, r3
 808701e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8087022:	f7fe fba7 	bl	8085774 <system_ctrl_set_result>
        break;
    }
}
 8087026:	b003      	add	sp, #12
 8087028:	f85d fb04 	ldr.w	pc, [sp], #4
 808702c:	20000958 	.word	0x20000958

08087030 <module_user_init_hook>:

void module_user_init_hook()
{
 8087030:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8087032:	4c10      	ldr	r4, [pc, #64]	; (8087074 <module_user_init_hook+0x44>)
 8087034:	4d10      	ldr	r5, [pc, #64]	; (8087078 <module_user_init_hook+0x48>)
 8087036:	6823      	ldr	r3, [r4, #0]
 8087038:	42ab      	cmp	r3, r5
 808703a:	4b10      	ldr	r3, [pc, #64]	; (808707c <module_user_init_hook+0x4c>)
 808703c:	bf0c      	ite	eq
 808703e:	2201      	moveq	r2, #1
 8087040:	2200      	movne	r2, #0
 8087042:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8087044:	d002      	beq.n	808704c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8087046:	f7ff ffbf 	bl	8086fc8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808704a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808704c:	f7fe f970 	bl	8085330 <HAL_RNG_GetRandomNumber>
 8087050:	4604      	mov	r4, r0
    srand(seed);
 8087052:	f002 ff21 	bl	8089e98 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8087056:	4b0a      	ldr	r3, [pc, #40]	; (8087080 <module_user_init_hook+0x50>)
 8087058:	b113      	cbz	r3, 8087060 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808705a:	4620      	mov	r0, r4
 808705c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8087060:	2100      	movs	r1, #0
 8087062:	4807      	ldr	r0, [pc, #28]	; (8087080 <module_user_init_hook+0x50>)
 8087064:	f7fe fc18 	bl	8085898 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8087068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808706c:	2100      	movs	r1, #0
 808706e:	4805      	ldr	r0, [pc, #20]	; (8087084 <module_user_init_hook+0x54>)
 8087070:	f7fe bb76 	b.w	8085760 <system_ctrl_set_app_request_handler>
 8087074:	40024000 	.word	0x40024000
 8087078:	9a271c1e 	.word	0x9a271c1e
 808707c:	2000095c 	.word	0x2000095c
 8087080:	00000000 	.word	0x00000000
 8087084:	08086ff9 	.word	0x08086ff9

08087088 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087088:	4770      	bx	lr

0808708a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808708a:	2000      	movs	r0, #0
 808708c:	4770      	bx	lr

0808708e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808708e:	b510      	push	{r4, lr}
 8087090:	4604      	mov	r4, r0
 8087092:	2110      	movs	r1, #16
 8087094:	f001 f9ba 	bl	808840c <_ZdlPvj>
 8087098:	4620      	mov	r0, r4
 808709a:	bd10      	pop	{r4, pc}

0808709c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808709c:	b508      	push	{r3, lr}
      { delete this; }
 808709e:	b108      	cbz	r0, 80870a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80870a0:	f7ff fff5 	bl	808708e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80870a4:	bd08      	pop	{r3, pc}

080870a6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80870a6:	2200      	movs	r2, #0
 80870a8:	6002      	str	r2, [r0, #0]
 80870aa:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80870ae:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80870b0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80870b2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80870b6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80870b8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80870ba:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80870bc:	680c      	ldr	r4, [r1, #0]
 80870be:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80870c0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80870c2:	bd10      	pop	{r4, pc}

080870c4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80870c4:	b510      	push	{r4, lr}
 80870c6:	4604      	mov	r4, r0
    free((void*)msg_);
 80870c8:	6800      	ldr	r0, [r0, #0]
 80870ca:	f7fe fbf5 	bl	80858b8 <free>
}
 80870ce:	4620      	mov	r0, r4
 80870d0:	bd10      	pop	{r4, pc}

080870d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80870d2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80870d4:	68c4      	ldr	r4, [r0, #12]
 80870d6:	b1f4      	cbz	r4, 8087116 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 80870d8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80870da:	2b02      	cmp	r3, #2
 80870dc:	d103      	bne.n	80870e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80870de:	f104 000c 	add.w	r0, r4, #12
 80870e2:	f7ff ffef 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80870e6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80870e8:	b135      	cbz	r5, 80870f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80870ea:	4628      	mov	r0, r5
 80870ec:	f7f9 f867 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 80870f0:	2110      	movs	r1, #16
 80870f2:	4628      	mov	r0, r5
 80870f4:	f001 f98a 	bl	808840c <_ZdlPvj>
 80870f8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80870fa:	b135      	cbz	r5, 808710a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80870fc:	4628      	mov	r0, r5
 80870fe:	f7f9 f85e 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 8087102:	2110      	movs	r1, #16
 8087104:	4628      	mov	r0, r5
 8087106:	f001 f981 	bl	808840c <_ZdlPvj>
 808710a:	4620      	mov	r0, r4
 808710c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087110:	2114      	movs	r1, #20
 8087112:	f001 b97b 	b.w	808840c <_ZdlPvj>
 8087116:	bd38      	pop	{r3, r4, r5, pc}

08087118 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8087118:	b510      	push	{r4, lr}
 808711a:	b088      	sub	sp, #32
 808711c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808711e:	4668      	mov	r0, sp
 8087120:	f7ff f971 	bl	8086406 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8087124:	4669      	mov	r1, sp
 8087126:	a804      	add	r0, sp, #16
 8087128:	f7ff f9ac 	bl	8086484 <_ZN6StringC1ERKS_>
 808712c:	a804      	add	r0, sp, #16
 808712e:	47a0      	blx	r4
 8087130:	4604      	mov	r4, r0
 8087132:	a804      	add	r0, sp, #16
 8087134:	f7ff f920 	bl	8086378 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8087138:	4668      	mov	r0, sp
 808713a:	f7ff f91d 	bl	8086378 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808713e:	4620      	mov	r0, r4
 8087140:	b008      	add	sp, #32
 8087142:	bd10      	pop	{r4, pc}

08087144 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8087144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087146:	4607      	mov	r7, r0
 8087148:	460e      	mov	r6, r1
 808714a:	4615      	mov	r5, r2
 808714c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808714e:	2410      	movs	r4, #16
 8087150:	4622      	mov	r2, r4
 8087152:	2100      	movs	r1, #0
 8087154:	4668      	mov	r0, sp
 8087156:	f002 fe97 	bl	8089e88 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808715a:	2200      	movs	r2, #0
 808715c:	4669      	mov	r1, sp
 808715e:	4610      	mov	r0, r2
         size = sizeof(*this);
 8087160:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8087164:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8087166:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8087168:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808716a:	f7fe fb5d 	bl	8085828 <spark_function>
}
 808716e:	b005      	add	sp, #20
 8087170:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087172 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8087172:	b513      	push	{r0, r1, r4, lr}
 8087174:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8087176:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808717a:	2300      	movs	r3, #0
 808717c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808717e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087180:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8087182:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8087184:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8087186:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8087188:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808718a:	f7f9 fbbb 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808718e:	4620      	mov	r0, r4
 8087190:	b002      	add	sp, #8
 8087192:	bd10      	pop	{r4, pc}

08087194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8087194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8087196:	460c      	mov	r4, r1
 8087198:	4606      	mov	r6, r0
 808719a:	460f      	mov	r7, r1
 808719c:	f854 3b04 	ldr.w	r3, [r4], #4
 80871a0:	ad02      	add	r5, sp, #8
 80871a2:	f845 3d08 	str.w	r3, [r5, #-8]!
 80871a6:	4621      	mov	r1, r4
 80871a8:	a801      	add	r0, sp, #4
 80871aa:	f7ff fa63 	bl	8086674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80871ae:	4629      	mov	r1, r5
 80871b0:	4630      	mov	r0, r6
 80871b2:	f7ff ffde 	bl	8087172 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80871b6:	a801      	add	r0, sp, #4
 80871b8:	f7f9 fba4 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80871bc:	4620      	mov	r0, r4
 80871be:	f7f9 fba1 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80871c2:	4638      	mov	r0, r7
 80871c4:	2108      	movs	r1, #8
 80871c6:	f001 f921 	bl	808840c <_ZdlPvj>
        return p;
    }
 80871ca:	4630      	mov	r0, r6
 80871cc:	b003      	add	sp, #12
 80871ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080871d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80871d0:	b538      	push	{r3, r4, r5, lr}
 80871d2:	2300      	movs	r3, #0
 80871d4:	4604      	mov	r4, r0
 80871d6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80871d8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80871da:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80871dc:	f7f8 ff5f 	bl	808009e <_Znwj>
 80871e0:	b128      	cbz	r0, 80871ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80871e2:	2301      	movs	r3, #1
 80871e4:	6043      	str	r3, [r0, #4]
 80871e6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80871e8:	4b02      	ldr	r3, [pc, #8]	; (80871f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80871ea:	60c5      	str	r5, [r0, #12]
 80871ec:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80871ee:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80871f0:	4620      	mov	r0, r4
 80871f2:	bd38      	pop	{r3, r4, r5, pc}
 80871f4:	0808db20 	.word	0x0808db20

080871f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80871f8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80871fa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80871fc:	b90a      	cbnz	r2, 8087202 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80871fe:	f001 f9d1 	bl	80885a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087202:	68c3      	ldr	r3, [r0, #12]
    }
 8087204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087208:	4718      	bx	r3

0808720a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808720a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808720c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808720e:	f100 0110 	add.w	r1, r0, #16
 8087212:	f7ff fff1 	bl	80871f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8087216:	bd08      	pop	{r3, pc}

08087218 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087218:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808721a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808721c:	b90a      	cbnz	r2, 8087222 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808721e:	f001 f9c1 	bl	80885a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087222:	68c3      	ldr	r3, [r0, #12]
    }
 8087224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087228:	4718      	bx	r3

0808722a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808722a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808722c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808722e:	f100 0110 	add.w	r1, r0, #16
 8087232:	f7ff fff1 	bl	8087218 <_ZNKSt8functionIFvRKbEEclES1_>
 8087236:	bd08      	pop	{r3, pc}

08087238 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087238:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808723a:	2300      	movs	r3, #0
 808723c:	6083      	str	r3, [r0, #8]
 808723e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087240:	4604      	mov	r4, r0
 8087242:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8087244:	b12b      	cbz	r3, 8087252 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087246:	2202      	movs	r2, #2
 8087248:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808724a:	68eb      	ldr	r3, [r5, #12]
 808724c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808724e:	68ab      	ldr	r3, [r5, #8]
 8087250:	60a3      	str	r3, [r4, #8]
	}
    }
 8087252:	4620      	mov	r0, r4
 8087254:	bd38      	pop	{r3, r4, r5, pc}
	...

08087258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8087258:	b5f0      	push	{r4, r5, r6, r7, lr}
 808725a:	b089      	sub	sp, #36	; 0x24
 808725c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808725e:	4668      	mov	r0, sp
 8087260:	f7ff ff21 	bl	80870a6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8087264:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8087268:	2300      	movs	r3, #0
 808726a:	f88d 3008 	strb.w	r3, [sp, #8]
 808726e:	e8d4 3f4f 	ldrexb	r3, [r4]
 8087272:	2b00      	cmp	r3, #0
 8087274:	d103      	bne.n	808727e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8087276:	e8c4 2f41 	strexb	r1, r2, [r4]
 808727a:	2900      	cmp	r1, #0
 808727c:	d1f7      	bne.n	808726e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808727e:	d002      	beq.n	8087286 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8087280:	f88d 3008 	strb.w	r3, [sp, #8]
 8087284:	e063      	b.n	808734e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8087286:	f114 050c 	adds.w	r5, r4, #12
 808728a:	d003      	beq.n	8087294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 808728c:	4669      	mov	r1, sp
 808728e:	4628      	mov	r0, r5
 8087290:	f7ff ff09 	bl	80870a6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8087294:	f3bf 8f5f 	dmb	sy
 8087298:	2301      	movs	r3, #1
 808729a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808729c:	f3bf 8f5f 	dmb	sy
 80872a0:	f104 0308 	add.w	r3, r4, #8
 80872a4:	2000      	movs	r0, #0
 80872a6:	e853 6f00 	ldrex	r6, [r3]
 80872aa:	e843 0200 	strex	r2, r0, [r3]
 80872ae:	2a00      	cmp	r2, #0
 80872b0:	d1f9      	bne.n	80872a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80872b2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80872b6:	2e00      	cmp	r6, #0
 80872b8:	d049      	beq.n	808734e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80872ba:	f7fe fa39 	bl	8085730 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80872be:	b120      	cbz	r0, 80872ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80872c0:	4629      	mov	r1, r5
 80872c2:	4630      	mov	r0, r6
 80872c4:	f7ff ff98 	bl	80871f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80872c8:	e03a      	b.n	8087340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80872ca:	4631      	mov	r1, r6
 80872cc:	a802      	add	r0, sp, #8
 80872ce:	f7ff ffb3 	bl	8087238 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80872d2:	68e0      	ldr	r0, [r4, #12]
 80872d4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80872d8:	b108      	cbz	r0, 80872de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80872da:	f002 fe25 	bl	8089f28 <strdup>
 80872de:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80872e0:	2010      	movs	r0, #16
 80872e2:	f8ad 501c 	strh.w	r5, [sp, #28]
 80872e6:	f7f8 feda 	bl	808009e <_Znwj>
 80872ea:	4605      	mov	r5, r0
 80872ec:	b1e8      	cbz	r0, 808732a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80872ee:	2700      	movs	r7, #0
 80872f0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80872f2:	2018      	movs	r0, #24
 80872f4:	f7f8 fed3 	bl	808009e <_Znwj>
 80872f8:	4604      	mov	r4, r0
 80872fa:	b188      	cbz	r0, 8087320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80872fc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80872fe:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8087300:	a802      	add	r0, sp, #8
 8087302:	f7ff fcc5 	bl	8086c90 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087306:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8087308:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808730a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808730c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808730e:	9204      	str	r2, [sp, #16]
 8087310:	68e2      	ldr	r2, [r4, #12]
 8087312:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8087314:	60e3      	str	r3, [r4, #12]
 8087316:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808731a:	9205      	str	r2, [sp, #20]
 808731c:	f7ff fec3 	bl	80870a6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087320:	4b0d      	ldr	r3, [pc, #52]	; (8087358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087322:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8087324:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8087326:	4b0d      	ldr	r3, [pc, #52]	; (808735c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8087328:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808732a:	a806      	add	r0, sp, #24
 808732c:	f7ff feca 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087330:	a802      	add	r0, sp, #8
 8087332:	f7f8 ff44 	bl	80801be <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087336:	2200      	movs	r2, #0
 8087338:	4629      	mov	r1, r5
 808733a:	4809      	ldr	r0, [pc, #36]	; (8087360 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 808733c:	f7fe fa00 	bl	8085740 <application_thread_invoke>
 8087340:	4630      	mov	r0, r6
 8087342:	f7f8 ff3c 	bl	80801be <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8087346:	2110      	movs	r1, #16
 8087348:	4630      	mov	r0, r6
 808734a:	f001 f85f 	bl	808840c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 808734e:	4668      	mov	r0, sp
 8087350:	f7ff feb8 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
    }
 8087354:	b009      	add	sp, #36	; 0x24
 8087356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087358:	0808720b 	.word	0x0808720b
 808735c:	08087481 	.word	0x08087481
 8087360:	08087c2d 	.word	0x08087c2d

08087364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8087364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087368:	b08b      	sub	sp, #44	; 0x2c
 808736a:	4606      	mov	r6, r0
 808736c:	460f      	mov	r7, r1
 808736e:	4690      	mov	r8, r2
 8087370:	4699      	mov	r9, r3
 8087372:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8087376:	f7fe fa6f 	bl	8085858 <spark_cloud_flag_connected>
 808737a:	ad07      	add	r5, sp, #28
    if (!connected()) {
 808737c:	4683      	mov	fp, r0
 808737e:	bb30      	cbnz	r0, 80873ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8087380:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8087384:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8087386:	a905      	add	r1, sp, #20
 8087388:	4628      	mov	r0, r5
 808738a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808738e:	f7ff fe8a 	bl	80870a6 <_ZN8particle5ErrorC1EOS0_>
 8087392:	2014      	movs	r0, #20
 8087394:	f7f8 fe83 	bl	808009e <_Znwj>
 8087398:	4604      	mov	r4, r0
 808739a:	b158      	cbz	r0, 80873b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808739c:	2302      	movs	r3, #2
 808739e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80873a0:	2301      	movs	r3, #1
 80873a2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80873a4:	f8c0 b004 	str.w	fp, [r0, #4]
 80873a8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80873ac:	4629      	mov	r1, r5
 80873ae:	300c      	adds	r0, #12
 80873b0:	f7ff fe79 	bl	80870a6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80873b4:	4630      	mov	r0, r6
 80873b6:	4621      	mov	r1, r4
 80873b8:	f840 4b04 	str.w	r4, [r0], #4
 80873bc:	f7ff ff08 	bl	80871d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80873c0:	4628      	mov	r0, r5
 80873c2:	f7ff fe7f 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80873c6:	a805      	add	r0, sp, #20
 80873c8:	f7ff fe7c 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
 80873cc:	e052      	b.n	8087474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80873ce:	2400      	movs	r4, #0
 80873d0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80873d2:	2014      	movs	r0, #20
 80873d4:	606c      	str	r4, [r5, #4]
 80873d6:	60ac      	str	r4, [r5, #8]
 80873d8:	9307      	str	r3, [sp, #28]
 80873da:	f7f8 fe60 	bl	808009e <_Znwj>
 80873de:	4601      	mov	r1, r0
 80873e0:	b118      	cbz	r0, 80873ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80873e2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80873e4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80873e6:	6044      	str	r4, [r0, #4]
 80873e8:	6084      	str	r4, [r0, #8]
 80873ea:	a804      	add	r0, sp, #16
 80873ec:	9103      	str	r1, [sp, #12]
 80873ee:	f7ff feef 	bl	80871d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80873f2:	4b22      	ldr	r3, [pc, #136]	; (808747c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80873f4:	2008      	movs	r0, #8
 80873f6:	9308      	str	r3, [sp, #32]
 80873f8:	f7f8 fe51 	bl	808009e <_Znwj>
 80873fc:	4604      	mov	r4, r0
 80873fe:	b128      	cbz	r0, 808740c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8087400:	9b03      	ldr	r3, [sp, #12]
 8087402:	a904      	add	r1, sp, #16
 8087404:	f840 3b04 	str.w	r3, [r0], #4
 8087408:	f7ff f934 	bl	8086674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808740c:	9500      	str	r5, [sp, #0]
 808740e:	fa5f f38a 	uxtb.w	r3, sl
 8087412:	464a      	mov	r2, r9
 8087414:	4641      	mov	r1, r8
 8087416:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8087418:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808741a:	f7fe fa2d 	bl	8085878 <spark_send_event>
 808741e:	b920      	cbnz	r0, 808742a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8087420:	9b03      	ldr	r3, [sp, #12]
 8087422:	785b      	ldrb	r3, [r3, #1]
 8087424:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8087428:	b183      	cbz	r3, 808744c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808742a:	9b03      	ldr	r3, [sp, #12]
 808742c:	a904      	add	r1, sp, #16
 808742e:	a806      	add	r0, sp, #24
 8087430:	9305      	str	r3, [sp, #20]
 8087432:	f7ff f91f 	bl	8086674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8087436:	a905      	add	r1, sp, #20
 8087438:	4630      	mov	r0, r6
 808743a:	f7ff fe9a 	bl	8087172 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808743e:	a806      	add	r0, sp, #24
 8087440:	f7f9 fa60 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087444:	a804      	add	r0, sp, #16
 8087446:	f7f9 fa5d 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808744a:	e013      	b.n	8087474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 808744c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8087450:	a905      	add	r1, sp, #20
 8087452:	a803      	add	r0, sp, #12
 8087454:	9205      	str	r2, [sp, #20]
 8087456:	f8ad 3018 	strh.w	r3, [sp, #24]
 808745a:	f7ff fefd 	bl	8087258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808745e:	a805      	add	r0, sp, #20
 8087460:	f7ff fe30 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8087464:	a805      	add	r0, sp, #20
 8087466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8087468:	f7ff fe94 	bl	8087194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 808746c:	a806      	add	r0, sp, #24
 808746e:	f7f9 fa49 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087472:	e7da      	b.n	808742a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8087474:	4630      	mov	r0, r6
 8087476:	b00b      	add	sp, #44	; 0x2c
 8087478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808747c:	080875f1 	.word	0x080875f1

08087480 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8087480:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8087482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087484:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8087486:	d006      	beq.n	8087496 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8087488:	2a03      	cmp	r2, #3
 808748a:	d017      	beq.n	80874bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808748c:	2a01      	cmp	r2, #1
 808748e:	d122      	bne.n	80874d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8087490:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8087492:	6003      	str	r3, [r0, #0]
	      break;
 8087494:	e01f      	b.n	80874d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087496:	2018      	movs	r0, #24
 8087498:	680e      	ldr	r6, [r1, #0]
 808749a:	f7f8 fe00 	bl	808009e <_Znwj>
 808749e:	4605      	mov	r5, r0
 80874a0:	b150      	cbz	r0, 80874b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80874a2:	4631      	mov	r1, r6
 80874a4:	f7ff fec8 	bl	8087238 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80874a8:	6930      	ldr	r0, [r6, #16]
 80874aa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80874ae:	b108      	cbz	r0, 80874b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80874b0:	f002 fd3a 	bl	8089f28 <strdup>
 80874b4:	6128      	str	r0, [r5, #16]
 80874b6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80874b8:	6025      	str	r5, [r4, #0]
 80874ba:	e00c      	b.n	80874d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80874bc:	6804      	ldr	r4, [r0, #0]
 80874be:	b154      	cbz	r4, 80874d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80874c0:	f104 0010 	add.w	r0, r4, #16
 80874c4:	f7ff fdfe 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80874c8:	4620      	mov	r0, r4
 80874ca:	f7f8 fe78 	bl	80801be <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80874ce:	2118      	movs	r1, #24
 80874d0:	4620      	mov	r0, r4
 80874d2:	f000 ff9b 	bl	808840c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80874d6:	2000      	movs	r0, #0
 80874d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080874da <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80874da:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80874dc:	2300      	movs	r3, #0
 80874de:	6083      	str	r3, [r0, #8]
 80874e0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80874e2:	4604      	mov	r4, r0
 80874e4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80874e6:	b12b      	cbz	r3, 80874f4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80874e8:	2202      	movs	r2, #2
 80874ea:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80874ec:	68eb      	ldr	r3, [r5, #12]
 80874ee:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80874f0:	68ab      	ldr	r3, [r5, #8]
 80874f2:	60a3      	str	r3, [r4, #8]
	}
    }
 80874f4:	4620      	mov	r0, r4
 80874f6:	bd38      	pop	{r3, r4, r5, pc}

080874f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80874f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80874fa:	b570      	push	{r4, r5, r6, lr}
 80874fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80874fe:	d006      	beq.n	808750e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8087500:	2a03      	cmp	r2, #3
 8087502:	d011      	beq.n	8087528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8087504:	2a01      	cmp	r2, #1
 8087506:	d118      	bne.n	808753a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8087508:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808750a:	6003      	str	r3, [r0, #0]
	      break;
 808750c:	e015      	b.n	808753a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808750e:	2014      	movs	r0, #20
 8087510:	680e      	ldr	r6, [r1, #0]
 8087512:	f7f8 fdc4 	bl	808009e <_Znwj>
 8087516:	4605      	mov	r5, r0
 8087518:	b120      	cbz	r0, 8087524 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808751a:	4631      	mov	r1, r6
 808751c:	f7ff ffdd 	bl	80874da <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8087520:	7c33      	ldrb	r3, [r6, #16]
 8087522:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8087524:	6025      	str	r5, [r4, #0]
 8087526:	e008      	b.n	808753a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087528:	6804      	ldr	r4, [r0, #0]
 808752a:	b134      	cbz	r4, 808753a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808752c:	4620      	mov	r0, r4
 808752e:	f7f8 fe46 	bl	80801be <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8087532:	2114      	movs	r1, #20
 8087534:	4620      	mov	r0, r4
 8087536:	f000 ff69 	bl	808840c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808753a:	2000      	movs	r0, #0
 808753c:	bd70      	pop	{r4, r5, r6, pc}
	...

08087540 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8087540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087542:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8087544:	f3bf 8f5f 	dmb	sy
 8087548:	b087      	sub	sp, #28
 808754a:	2300      	movs	r3, #0
 808754c:	e850 6f00 	ldrex	r6, [r0]
 8087550:	e840 3200 	strex	r2, r3, [r0]
 8087554:	2a00      	cmp	r2, #0
 8087556:	d1f9      	bne.n	808754c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8087558:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808755c:	2e00      	cmp	r6, #0
 808755e:	d03f      	beq.n	80875e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8087560:	4618      	mov	r0, r3
 8087562:	f7fe f8e5 	bl	8085730 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8087566:	4607      	mov	r7, r0
 8087568:	b120      	cbz	r0, 8087574 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808756a:	4621      	mov	r1, r4
 808756c:	4630      	mov	r0, r6
 808756e:	f7ff fe53 	bl	8087218 <_ZNKSt8functionIFvRKbEEclES1_>
 8087572:	e02e      	b.n	80875d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8087574:	4631      	mov	r1, r6
 8087576:	a801      	add	r0, sp, #4
 8087578:	f7ff ffaf 	bl	80874da <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808757c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808757e:	2010      	movs	r0, #16
 8087580:	f88d 3014 	strb.w	r3, [sp, #20]
 8087584:	f7f8 fd8b 	bl	808009e <_Znwj>
 8087588:	4605      	mov	r5, r0
 808758a:	b1d0      	cbz	r0, 80875c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808758c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808758e:	2014      	movs	r0, #20
 8087590:	f7f8 fd85 	bl	808009e <_Znwj>
 8087594:	4604      	mov	r4, r0
 8087596:	b178      	cbz	r0, 80875b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087598:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808759a:	4601      	mov	r1, r0
 808759c:	a801      	add	r0, sp, #4
 808759e:	f7ff fb77 	bl	8086c90 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80875a2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80875a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80875a6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80875a8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80875aa:	9203      	str	r2, [sp, #12]
 80875ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80875ae:	60e3      	str	r3, [r4, #12]
 80875b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80875b4:	9204      	str	r2, [sp, #16]
 80875b6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80875b8:	4b0a      	ldr	r3, [pc, #40]	; (80875e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80875ba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80875bc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80875be:	4b0a      	ldr	r3, [pc, #40]	; (80875e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80875c0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80875c2:	a801      	add	r0, sp, #4
 80875c4:	f7f8 fdfb 	bl	80801be <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80875c8:	2200      	movs	r2, #0
 80875ca:	4629      	mov	r1, r5
 80875cc:	4807      	ldr	r0, [pc, #28]	; (80875ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80875ce:	f7fe f8b7 	bl	8085740 <application_thread_invoke>
 80875d2:	4630      	mov	r0, r6
 80875d4:	f7f8 fdf3 	bl	80801be <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80875d8:	2110      	movs	r1, #16
 80875da:	4630      	mov	r0, r6
 80875dc:	f000 ff16 	bl	808840c <_ZdlPvj>
        }
    }
 80875e0:	b007      	add	sp, #28
 80875e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80875e4:	0808722b 	.word	0x0808722b
 80875e8:	080874f9 	.word	0x080874f9
 80875ec:	08087c2d 	.word	0x08087c2d

080875f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80875f0:	b530      	push	{r4, r5, lr}
 80875f2:	4604      	mov	r4, r0
 80875f4:	b085      	sub	sp, #20
 80875f6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80875f8:	4668      	mov	r0, sp
 80875fa:	4611      	mov	r1, r2
 80875fc:	f7ff fdca 	bl	8087194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8087600:	b17c      	cbz	r4, 8087622 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8087602:	b224      	sxth	r4, r4
 8087604:	4628      	mov	r0, r5
 8087606:	b10d      	cbz	r5, 808760c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8087608:	f002 fc8e 	bl	8089f28 <strdup>
 808760c:	9002      	str	r0, [sp, #8]
 808760e:	a902      	add	r1, sp, #8
 8087610:	4668      	mov	r0, sp
 8087612:	f8ad 400c 	strh.w	r4, [sp, #12]
 8087616:	f7ff fe1f 	bl	8087258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808761a:	a802      	add	r0, sp, #8
 808761c:	f7ff fd52 	bl	80870c4 <_ZN8particle5ErrorD1Ev>
 8087620:	e01d      	b.n	808765e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8087622:	f04f 0201 	mov.w	r2, #1
 8087626:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8087628:	f88d 4008 	strb.w	r4, [sp, #8]
 808762c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8087630:	42a3      	cmp	r3, r4
 8087632:	d103      	bne.n	808763c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8087634:	e8c0 2f41 	strexb	r1, r2, [r0]
 8087638:	2900      	cmp	r1, #0
 808763a:	d1f7      	bne.n	808762c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808763c:	d002      	beq.n	8087644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808763e:	f88d 3008 	strb.w	r3, [sp, #8]
 8087642:	e00c      	b.n	808765e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8087644:	f110 010c 	adds.w	r1, r0, #12
 8087648:	f04f 0301 	mov.w	r3, #1
 808764c:	bf18      	it	ne
 808764e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8087650:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8087654:	3004      	adds	r0, #4
 8087656:	f800 3c03 	strb.w	r3, [r0, #-3]
 808765a:	f7ff ff71 	bl	8087540 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808765e:	a801      	add	r0, sp, #4
 8087660:	f7f9 f950 	bl	8080904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8087664:	b005      	add	sp, #20
 8087666:	bd30      	pop	{r4, r5, pc}

08087668 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8087668:	4770      	bx	lr

0808766a <_ZN9IPAddressD0Ev>:
 808766a:	b510      	push	{r4, lr}
 808766c:	4604      	mov	r4, r0
 808766e:	2108      	movs	r1, #8
 8087670:	f000 fecc 	bl	808840c <_ZdlPvj>
 8087674:	4620      	mov	r0, r4
 8087676:	bd10      	pop	{r4, pc}

08087678 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8087678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808767a:	460f      	mov	r7, r1
 808767c:	f100 0608 	add.w	r6, r0, #8
 8087680:	1d05      	adds	r5, r0, #4
 8087682:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8087684:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8087688:	220a      	movs	r2, #10
 808768a:	4638      	mov	r0, r7
 808768c:	f7fe ff99 	bl	80865c2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8087690:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8087692:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8087694:	d007      	beq.n	80876a6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8087696:	2c00      	cmp	r4, #0
 8087698:	d0f4      	beq.n	8087684 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808769a:	212e      	movs	r1, #46	; 0x2e
 808769c:	4638      	mov	r0, r7
 808769e:	f7fe ff73 	bl	8086588 <_ZN5Print5printEc>
 80876a2:	4404      	add	r4, r0
 80876a4:	e7ee      	b.n	8087684 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80876a6:	4620      	mov	r0, r4
 80876a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080876ac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80876ac:	4a02      	ldr	r2, [pc, #8]	; (80876b8 <_ZN9IPAddressC1Ev+0xc>)
 80876ae:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80876b0:	2200      	movs	r2, #0
 80876b2:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80876b4:	4770      	bx	lr
 80876b6:	bf00      	nop
 80876b8:	0808db3c 	.word	0x0808db3c

080876bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80876bc:	4a02      	ldr	r2, [pc, #8]	; (80876c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80876be:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80876c0:	680a      	ldr	r2, [r1, #0]
 80876c2:	6042      	str	r2, [r0, #4]
}
 80876c4:	4770      	bx	lr
 80876c6:	bf00      	nop
 80876c8:	0808db3c 	.word	0x0808db3c

080876cc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80876cc:	4a01      	ldr	r2, [pc, #4]	; (80876d4 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80876ce:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80876d0:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80876d2:	4770      	bx	lr
 80876d4:	0808db3c 	.word	0x0808db3c

080876d8 <_ZNK9IPAddresscvbEv>:
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
    } else {
        return false;
    }
#else
    return address.ipv4!=0;
 80876d8:	6840      	ldr	r0, [r0, #4]
#endif
}
 80876da:	3000      	adds	r0, #0
 80876dc:	bf18      	it	ne
 80876de:	2001      	movne	r0, #1
 80876e0:	4770      	bx	lr

080876e2 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80876e2:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80876e4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80876e8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80876ec:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80876f0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80876f4:	6041      	str	r1, [r0, #4]
 80876f6:	bd10      	pop	{r4, pc}

080876f8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80876f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80876fa:	4d04      	ldr	r5, [pc, #16]	; (808770c <_ZN9IPAddressC1Ehhhh+0x14>)
 80876fc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80876fe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8087702:	9500      	str	r5, [sp, #0]
 8087704:	f7ff ffed 	bl	80876e2 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8087708:	b003      	add	sp, #12
 808770a:	bd30      	pop	{r4, r5, pc}
 808770c:	0808db3c 	.word	0x0808db3c

08087710 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 8087710:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 8087712:	780d      	ldrb	r5, [r1, #0]
 8087714:	788b      	ldrb	r3, [r1, #2]
 8087716:	784a      	ldrb	r2, [r1, #1]
 8087718:	78c9      	ldrb	r1, [r1, #3]
 808771a:	9100      	str	r1, [sp, #0]
 808771c:	4629      	mov	r1, r5
 808771e:	f7ff ffe0 	bl	80876e2 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 8087722:	b003      	add	sp, #12
 8087724:	bd30      	pop	{r4, r5, pc}

08087726 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087726:	7441      	strb	r1, [r0, #17]
 8087728:	4770      	bx	lr

0808772a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808772a:	4770      	bx	lr

0808772c <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808772c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808772e:	2100      	movs	r1, #0
 8087730:	7c00      	ldrb	r0, [r0, #16]
 8087732:	f7fd ffad 	bl	8085690 <HAL_USB_USART_Receive_Data>
}
 8087736:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808773a:	bf28      	it	cs
 808773c:	f04f 30ff 	movcs.w	r0, #4294967295
 8087740:	bd08      	pop	{r3, pc}

08087742 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8087742:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8087744:	2101      	movs	r1, #1
 8087746:	7c00      	ldrb	r0, [r0, #16]
 8087748:	f7fd ffa2 	bl	8085690 <HAL_USB_USART_Receive_Data>
}
 808774c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087750:	bf28      	it	cs
 8087752:	f04f 30ff 	movcs.w	r0, #4294967295
 8087756:	bd08      	pop	{r3, pc}

08087758 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8087758:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808775a:	7c00      	ldrb	r0, [r0, #16]
 808775c:	f7fd ff90 	bl	8085680 <HAL_USB_USART_Available_Data_For_Write>
}
 8087760:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087764:	bd08      	pop	{r3, pc}

08087766 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8087766:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8087768:	7c00      	ldrb	r0, [r0, #16]
 808776a:	f7fd ff81 	bl	8085670 <HAL_USB_USART_Available_Data>
}
 808776e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087772:	bd08      	pop	{r3, pc}

08087774 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8087774:	7c00      	ldrb	r0, [r0, #16]
 8087776:	f7fd bf9b 	b.w	80856b0 <HAL_USB_USART_Flush_Data>

0808777a <_ZN9USBSerialD0Ev>:
 808777a:	b510      	push	{r4, lr}
 808777c:	4604      	mov	r4, r0
 808777e:	2114      	movs	r1, #20
 8087780:	f000 fe44 	bl	808840c <_ZdlPvj>
 8087784:	4620      	mov	r0, r4
 8087786:	bd10      	pop	{r4, pc}

08087788 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8087788:	b538      	push	{r3, r4, r5, lr}
 808778a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808778c:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808778e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8087790:	f7fd ff76 	bl	8085680 <HAL_USB_USART_Available_Data_For_Write>
 8087794:	2800      	cmp	r0, #0
 8087796:	dc01      	bgt.n	808779c <_ZN9USBSerial5writeEh+0x14>
 8087798:	7c60      	ldrb	r0, [r4, #17]
 808779a:	b128      	cbz	r0, 80877a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808779c:	4629      	mov	r1, r5
 808779e:	7c20      	ldrb	r0, [r4, #16]
 80877a0:	f7fd ff7e 	bl	80856a0 <HAL_USB_USART_Send_Data>
 80877a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80877a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080877ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80877ac:	b510      	push	{r4, lr}
 80877ae:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80877b0:	2300      	movs	r3, #0
 80877b2:	6063      	str	r3, [r4, #4]
 80877b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80877b8:	60a3      	str	r3, [r4, #8]
 80877ba:	4b05      	ldr	r3, [pc, #20]	; (80877d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80877bc:	4608      	mov	r0, r1
 80877be:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80877c0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80877c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80877c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80877c6:	4611      	mov	r1, r2
 80877c8:	f7fd ff42 	bl	8085650 <HAL_USB_USART_Init>
}
 80877cc:	4620      	mov	r0, r4
 80877ce:	bd10      	pop	{r4, pc}
 80877d0:	0808db50 	.word	0x0808db50

080877d4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80877d4:	2200      	movs	r2, #0
 80877d6:	7c00      	ldrb	r0, [r0, #16]
 80877d8:	f7fd bf42 	b.w	8085660 <HAL_USB_USART_Begin>

080877dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80877dc:	b510      	push	{r4, lr}
 80877de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80877e0:	2214      	movs	r2, #20
 80877e2:	2100      	movs	r1, #0
 80877e4:	f002 fb50 	bl	8089e88 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80877e8:	4b05      	ldr	r3, [pc, #20]	; (8087800 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80877ea:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80877ec:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80877ee:	4b05      	ldr	r3, [pc, #20]	; (8087804 <_Z19acquireSerialBufferv+0x28>)
 80877f0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80877f2:	f240 1301 	movw	r3, #257	; 0x101
 80877f6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80877f8:	2381      	movs	r3, #129	; 0x81
 80877fa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80877fc:	bd10      	pop	{r4, pc}
 80877fe:	bf00      	nop
 8087800:	200009e5 	.word	0x200009e5
 8087804:	20000964 	.word	0x20000964

08087808 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8087808:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808780a:	4d0e      	ldr	r5, [pc, #56]	; (8087844 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808780c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808780e:	a801      	add	r0, sp, #4
 8087810:	f7ff ffe4 	bl	80877dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8087814:	6829      	ldr	r1, [r5, #0]
 8087816:	f011 0401 	ands.w	r4, r1, #1
 808781a:	d110      	bne.n	808783e <_Z16_fetch_usbserialv+0x36>
 808781c:	4628      	mov	r0, r5
 808781e:	f7f8 fc46 	bl	80800ae <__cxa_guard_acquire>
 8087822:	b160      	cbz	r0, 808783e <_Z16_fetch_usbserialv+0x36>
 8087824:	aa01      	add	r2, sp, #4
 8087826:	4621      	mov	r1, r4
 8087828:	4807      	ldr	r0, [pc, #28]	; (8087848 <_Z16_fetch_usbserialv+0x40>)
 808782a:	f7ff ffbf 	bl	80877ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808782e:	4628      	mov	r0, r5
 8087830:	f7f8 fc42 	bl	80800b8 <__cxa_guard_release>
 8087834:	4a05      	ldr	r2, [pc, #20]	; (808784c <_Z16_fetch_usbserialv+0x44>)
 8087836:	4906      	ldr	r1, [pc, #24]	; (8087850 <_Z16_fetch_usbserialv+0x48>)
 8087838:	4803      	ldr	r0, [pc, #12]	; (8087848 <_Z16_fetch_usbserialv+0x40>)
 808783a:	f000 fdd9 	bl	80883f0 <__aeabi_atexit>
	return _usbserial;
}
 808783e:	4802      	ldr	r0, [pc, #8]	; (8087848 <_Z16_fetch_usbserialv+0x40>)
 8087840:	b007      	add	sp, #28
 8087842:	bd30      	pop	{r4, r5, pc}
 8087844:	20000960 	.word	0x20000960
 8087848:	20000ae8 	.word	0x20000ae8
 808784c:	20000140 	.word	0x20000140
 8087850:	0808772b 	.word	0x0808772b

08087854 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8087854:	b510      	push	{r4, lr}
 8087856:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087858:	2214      	movs	r2, #20
 808785a:	2100      	movs	r1, #0
 808785c:	f002 fb14 	bl	8089e88 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8087860:	4b05      	ldr	r3, [pc, #20]	; (8087878 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8087862:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8087864:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8087866:	4b05      	ldr	r3, [pc, #20]	; (808787c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8087868:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808786a:	f240 1301 	movw	r3, #257	; 0x101
 808786e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8087870:	2381      	movs	r3, #129	; 0x81
 8087872:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8087874:	bd10      	pop	{r4, pc}
 8087876:	bf00      	nop
 8087878:	20000b98 	.word	0x20000b98
 808787c:	20000b00 	.word	0x20000b00

08087880 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8087880:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8087882:	4c0e      	ldr	r4, [pc, #56]	; (80878bc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8087884:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8087886:	a801      	add	r0, sp, #4
 8087888:	f7ff ffe4 	bl	8087854 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808788c:	6823      	ldr	r3, [r4, #0]
 808788e:	07db      	lsls	r3, r3, #31
 8087890:	d410      	bmi.n	80878b4 <_Z17_fetch_usbserial1v+0x34>
 8087892:	4620      	mov	r0, r4
 8087894:	f7f8 fc0b 	bl	80800ae <__cxa_guard_acquire>
 8087898:	b160      	cbz	r0, 80878b4 <_Z17_fetch_usbserial1v+0x34>
 808789a:	aa01      	add	r2, sp, #4
 808789c:	2101      	movs	r1, #1
 808789e:	4808      	ldr	r0, [pc, #32]	; (80878c0 <_Z17_fetch_usbserial1v+0x40>)
 80878a0:	f7ff ff84 	bl	80877ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80878a4:	4620      	mov	r0, r4
 80878a6:	f7f8 fc07 	bl	80800b8 <__cxa_guard_release>
 80878aa:	4a06      	ldr	r2, [pc, #24]	; (80878c4 <_Z17_fetch_usbserial1v+0x44>)
 80878ac:	4906      	ldr	r1, [pc, #24]	; (80878c8 <_Z17_fetch_usbserial1v+0x48>)
 80878ae:	4804      	ldr	r0, [pc, #16]	; (80878c0 <_Z17_fetch_usbserial1v+0x40>)
 80878b0:	f000 fd9e 	bl	80883f0 <__aeabi_atexit>
  return _usbserial1;
}
 80878b4:	4802      	ldr	r0, [pc, #8]	; (80878c0 <_Z17_fetch_usbserial1v+0x40>)
 80878b6:	b006      	add	sp, #24
 80878b8:	bd10      	pop	{r4, pc}
 80878ba:	bf00      	nop
 80878bc:	20000afc 	.word	0x20000afc
 80878c0:	20000b84 	.word	0x20000b84
 80878c4:	20000140 	.word	0x20000140
 80878c8:	0808772b 	.word	0x0808772b

080878cc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80878cc:	4700      	bx	r0

080878ce <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80878ce:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80878d0:	b510      	push	{r4, lr}
 80878d2:	b90a      	cbnz	r2, 80878d8 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80878d4:	f000 fe66 	bl	80885a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878d8:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80878da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80878de:	4718      	bx	r3

080878e0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80878e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80878e2:	461c      	mov	r4, r3
 80878e4:	b085      	sub	sp, #20
 80878e6:	460e      	mov	r6, r1
 80878e8:	4617      	mov	r7, r2
 80878ea:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 80878ec:	f7fd fcc8 	bl	8085280 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80878f0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80878f2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80878f4:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80878f8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80878fa:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80878fe:	bfb4      	ite	lt
 8087900:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8087902:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087906:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8087908:	bfa4      	itt	ge
 808790a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 808790e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087910:	9300      	str	r3, [sp, #0]
 8087912:	4906      	ldr	r1, [pc, #24]	; (808792c <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8087914:	463b      	mov	r3, r7
 8087916:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8087918:	bfa8      	it	ge
 808791a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808791e:	f7fd fca7 	bl	8085270 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8087922:	fab0 f080 	clz	r0, r0
 8087926:	0940      	lsrs	r0, r0, #5
 8087928:	b005      	add	sp, #20
 808792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808792c:	080878cd 	.word	0x080878cd

08087930 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8087930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087932:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8087934:	f7fd fca4 	bl	8085280 <HAL_Interrupts_Detach>
 8087938:	4607      	mov	r7, r0
 808793a:	b968      	cbnz	r0, 8087958 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 808793c:	4d08      	ldr	r5, [pc, #32]	; (8087960 <_Z15detachInterruptt+0x30>)
 808793e:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8087942:	b15c      	cbz	r4, 808795c <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8087944:	4620      	mov	r0, r4
 8087946:	f7f8 fc3a 	bl	80801be <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 808794a:	2110      	movs	r1, #16
 808794c:	4620      	mov	r0, r4
 808794e:	f000 fd5d 	bl	808840c <_ZdlPvj>
        handlers[pin] = nullptr;
 8087952:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 8087956:	e001      	b.n	808795c <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 8087958:	2000      	movs	r0, #0
 808795a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 808795c:	2001      	movs	r0, #1
}
 808795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087960:	20000c9c 	.word	0x20000c9c

08087964 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8087964:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8087966:	2300      	movs	r3, #0
 8087968:	6083      	str	r3, [r0, #8]
 808796a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808796c:	4604      	mov	r4, r0
 808796e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8087970:	b12b      	cbz	r3, 808797e <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087972:	2202      	movs	r2, #2
 8087974:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087976:	68eb      	ldr	r3, [r5, #12]
 8087978:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808797a:	68ab      	ldr	r3, [r5, #8]
 808797c:	60a3      	str	r3, [r4, #8]
	}
    }
 808797e:	4620      	mov	r0, r4
 8087980:	bd38      	pop	{r3, r4, r5, pc}
	...

08087984 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8087984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8087986:	4b12      	ldr	r3, [pc, #72]	; (80879d0 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8087988:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 808798a:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 808798c:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 808798e:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8087990:	f7f8 fb85 	bl	808009e <_Znwj>
 8087994:	4605      	mov	r5, r0
 8087996:	b110      	cbz	r0, 808799e <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 8087998:	4631      	mov	r1, r6
 808799a:	f7ff ffe3 	bl	8087964 <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 808799e:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80879a0:	4620      	mov	r0, r4
 80879a2:	aa02      	add	r2, sp, #8
 80879a4:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80879a6:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 80879a8:	9302      	str	r3, [sp, #8]
 80879aa:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80879ac:	f7fd fc78 	bl	80852a0 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 80879b0:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80879b2:	1c05      	adds	r5, r0, #0
 80879b4:	bf18      	it	ne
 80879b6:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 80879b8:	b134      	cbz	r4, 80879c8 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80879ba:	4620      	mov	r0, r4
 80879bc:	f7f8 fbff 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 80879c0:	2110      	movs	r1, #16
 80879c2:	4620      	mov	r0, r4
 80879c4:	f000 fd22 	bl	808840c <_ZdlPvj>
    return ok;
}
 80879c8:	4628      	mov	r0, r5
 80879ca:	b004      	add	sp, #16
 80879cc:	bd70      	pop	{r4, r5, r6, pc}
 80879ce:	bf00      	nop
 80879d0:	080878cf 	.word	0x080878cf

080879d4 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80879d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80879d8:	2600      	movs	r6, #0
 80879da:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80879dc:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80879de:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80879e0:	4688      	mov	r8, r1
 80879e2:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80879e4:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80879e8:	f002 ffce 	bl	808a988 <strlen>
 80879ec:	9600      	str	r6, [sp, #0]
 80879ee:	b281      	uxth	r1, r0
 80879f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80879f4:	4622      	mov	r2, r4
 80879f6:	4638      	mov	r0, r7
 80879f8:	f7fd fe1a 	bl	8085630 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80879fc:	b120      	cbz	r0, 8087a08 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80879fe:	4631      	mov	r1, r6
 8087a00:	4628      	mov	r0, r5
 8087a02:	f7ff fe63 	bl	80876cc <_ZN9IPAddressC1Em>
 8087a06:	e003      	b.n	8087a10 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8087a08:	4621      	mov	r1, r4
 8087a0a:	4628      	mov	r0, r5
 8087a0c:	f7ff fe56 	bl	80876bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8087a10:	4628      	mov	r0, r5
 8087a12:	b004      	add	sp, #16
 8087a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087a18 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8087a18:	2200      	movs	r2, #0
 8087a1a:	4611      	mov	r1, r2
 8087a1c:	6840      	ldr	r0, [r0, #4]
 8087a1e:	f7fd beeb 	b.w	80857f8 <network_listening>

08087a22 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8087a22:	2200      	movs	r2, #0
 8087a24:	4611      	mov	r1, r2
 8087a26:	6840      	ldr	r0, [r0, #4]
 8087a28:	f7fd bef6 	b.w	8085818 <network_get_listen_timeout>

08087a2c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8087a2c:	2200      	movs	r2, #0
 8087a2e:	6840      	ldr	r0, [r0, #4]
 8087a30:	f7fd beea 	b.w	8085808 <network_set_listen_timeout>

08087a34 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8087a34:	2200      	movs	r2, #0
 8087a36:	f081 0101 	eor.w	r1, r1, #1
 8087a3a:	6840      	ldr	r0, [r0, #4]
 8087a3c:	f7fd bed4 	b.w	80857e8 <network_listen>

08087a40 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8087a40:	2300      	movs	r3, #0
 8087a42:	461a      	mov	r2, r3
 8087a44:	4619      	mov	r1, r3
 8087a46:	6840      	ldr	r0, [r0, #4]
 8087a48:	f7fd bec6 	b.w	80857d8 <network_off>

08087a4c <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8087a4c:	2300      	movs	r3, #0
 8087a4e:	461a      	mov	r2, r3
 8087a50:	4619      	mov	r1, r3
 8087a52:	6840      	ldr	r0, [r0, #4]
 8087a54:	f7fd beb8 	b.w	80857c8 <network_on>

08087a58 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8087a58:	2200      	movs	r2, #0
 8087a5a:	4611      	mov	r1, r2
 8087a5c:	6840      	ldr	r0, [r0, #4]
 8087a5e:	f7fd be9b 	b.w	8085798 <network_connecting>

08087a62 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8087a62:	2200      	movs	r2, #0
 8087a64:	2102      	movs	r1, #2
 8087a66:	6840      	ldr	r0, [r0, #4]
 8087a68:	f7fd be9e 	b.w	80857a8 <network_disconnect>

08087a6c <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8087a6c:	2300      	movs	r3, #0
 8087a6e:	461a      	mov	r2, r3
 8087a70:	6840      	ldr	r0, [r0, #4]
 8087a72:	f7fd be89 	b.w	8085788 <network_connect>
	...

08087a78 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8087a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087a7a:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8087a7c:	4b1a      	ldr	r3, [pc, #104]	; (8087ae8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8087a7e:	2500      	movs	r5, #0
 8087a80:	6003      	str	r3, [r0, #0]
 8087a82:	2618      	movs	r6, #24
 8087a84:	3328      	adds	r3, #40	; 0x28
 8087a86:	b089      	sub	sp, #36	; 0x24
 8087a88:	6043      	str	r3, [r0, #4]
 8087a8a:	6085      	str	r5, [r0, #8]
 8087a8c:	60c5      	str	r5, [r0, #12]
 8087a8e:	4632      	mov	r2, r6
 8087a90:	4629      	mov	r1, r5
 8087a92:	4604      	mov	r4, r0
 8087a94:	3010      	adds	r0, #16
 8087a96:	f002 f9f7 	bl	8089e88 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8087a9a:	462a      	mov	r2, r5
 8087a9c:	4629      	mov	r1, r5
 8087a9e:	6878      	ldr	r0, [r7, #4]
 8087aa0:	f7fd fe8a 	bl	80857b8 <network_ready>
 8087aa4:	b908      	cbnz	r0, 8087aaa <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8087aa6:	60a0      	str	r0, [r4, #8]
            return sig;
 8087aa8:	e01b      	b.n	8087ae2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8087aaa:	4629      	mov	r1, r5
 8087aac:	4632      	mov	r2, r6
 8087aae:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8087ab0:	9500      	str	r5, [sp, #0]
 8087ab2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8087ab4:	f002 f9e8 	bl	8089e88 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8087ab8:	a902      	add	r1, sp, #8
 8087aba:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8087abc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8087ac0:	f7fd fdbe 	bl	8085640 <cellular_signal>
 8087ac4:	b110      	cbz	r0, 8087acc <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8087ac6:	2301      	movs	r3, #1
 8087ac8:	60a3      	str	r3, [r4, #8]
            return sig;
 8087aca:	e00a      	b.n	8087ae2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8087acc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8087ace:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8087ad0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8087ad2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8087ad4:	b90b      	cbnz	r3, 8087ada <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8087ad6:	2302      	movs	r3, #2
 8087ad8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8087ada:	a902      	add	r1, sp, #8
 8087adc:	4620      	mov	r0, r4
 8087ade:	f7ff f955 	bl	8086d8c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8087ae2:	4620      	mov	r0, r4
 8087ae4:	b009      	add	sp, #36	; 0x24
 8087ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087ae8:	0808daec 	.word	0x0808daec

08087aec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8087aec:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8087aee:	4c08      	ldr	r4, [pc, #32]	; (8087b10 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8087af0:	2528      	movs	r5, #40	; 0x28
 8087af2:	462a      	mov	r2, r5
 8087af4:	2100      	movs	r1, #0
 8087af6:	4620      	mov	r0, r4
 8087af8:	f002 f9c6 	bl	8089e88 <memset>
        cid = -1;
 8087afc:	f04f 33ff 	mov.w	r3, #4294967295
 8087b00:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8087b02:	4b04      	ldr	r3, [pc, #16]	; (8087b14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8087b04:	2204      	movs	r2, #4
 8087b06:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8087b08:	4a03      	ldr	r2, [pc, #12]	; (8087b18 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8087b0a:	8025      	strh	r5, [r4, #0]
 8087b0c:	601a      	str	r2, [r3, #0]
 8087b0e:	bd38      	pop	{r3, r4, r5, pc}
 8087b10:	20000d60 	.word	0x20000d60
 8087b14:	20000d58 	.word	0x20000d58
 8087b18:	0808db80 	.word	0x0808db80

08087b1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8087b1c:	4770      	bx	lr

08087b1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087b1e:	7441      	strb	r1, [r0, #17]
 8087b20:	4770      	bx	lr

08087b22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8087b22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8087b24:	7c00      	ldrb	r0, [r0, #16]
 8087b26:	f7fd fcb3 	bl	8085490 <HAL_USART_Available_Data_For_Write>
}
 8087b2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087b2e:	bd08      	pop	{r3, pc}

08087b30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8087b30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8087b32:	7c00      	ldrb	r0, [r0, #16]
 8087b34:	f7fd fc84 	bl	8085440 <HAL_USART_Available_Data>
}
 8087b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087b3c:	bd08      	pop	{r3, pc}

08087b3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8087b3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8087b40:	7c00      	ldrb	r0, [r0, #16]
 8087b42:	f7fd fc8d 	bl	8085460 <HAL_USART_Peek_Data>
}
 8087b46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087b4a:	bf28      	it	cs
 8087b4c:	f04f 30ff 	movcs.w	r0, #4294967295
 8087b50:	bd08      	pop	{r3, pc}

08087b52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8087b52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8087b54:	7c00      	ldrb	r0, [r0, #16]
 8087b56:	f7fd fc7b 	bl	8085450 <HAL_USART_Read_Data>
}
 8087b5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087b5e:	bf28      	it	cs
 8087b60:	f04f 30ff 	movcs.w	r0, #4294967295
 8087b64:	bd08      	pop	{r3, pc}

08087b66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8087b66:	7c00      	ldrb	r0, [r0, #16]
 8087b68:	f7fd bc82 	b.w	8085470 <HAL_USART_Flush_Data>

08087b6c <_ZN11USARTSerialD0Ev>:
 8087b6c:	b510      	push	{r4, lr}
 8087b6e:	4604      	mov	r4, r0
 8087b70:	2114      	movs	r1, #20
 8087b72:	f000 fc4b 	bl	808840c <_ZdlPvj>
 8087b76:	4620      	mov	r0, r4
 8087b78:	bd10      	pop	{r4, pc}

08087b7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087b7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8087b7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8087b7e:	4604      	mov	r4, r0
 8087b80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8087b82:	b925      	cbnz	r5, 8087b8e <_ZN11USARTSerial5writeEh+0x14>
 8087b84:	7c00      	ldrb	r0, [r0, #16]
 8087b86:	f7fd fc83 	bl	8085490 <HAL_USART_Available_Data_For_Write>
 8087b8a:	2800      	cmp	r0, #0
 8087b8c:	dd05      	ble.n	8087b9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8087b8e:	4631      	mov	r1, r6
 8087b90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8087b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8087b96:	f7fd bc4b 	b.w	8085430 <HAL_USART_Write_Data>
  }
  return 0;
}
 8087b9a:	4628      	mov	r0, r5
 8087b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08087ba0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8087ba0:	b510      	push	{r4, lr}
 8087ba2:	4604      	mov	r4, r0
 8087ba4:	4608      	mov	r0, r1
 8087ba6:	4611      	mov	r1, r2
 8087ba8:	2200      	movs	r2, #0
 8087baa:	6062      	str	r2, [r4, #4]
 8087bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087bb0:	60a2      	str	r2, [r4, #8]
 8087bb2:	4a05      	ldr	r2, [pc, #20]	; (8087bc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8087bb4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8087bb6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8087bb8:	2201      	movs	r2, #1
 8087bba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8087bbc:	461a      	mov	r2, r3
 8087bbe:	f7fd fc2f 	bl	8085420 <HAL_USART_Init>
}
 8087bc2:	4620      	mov	r0, r4
 8087bc4:	bd10      	pop	{r4, pc}
 8087bc6:	bf00      	nop
 8087bc8:	0808dbb4 	.word	0x0808dbb4

08087bcc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8087bcc:	2300      	movs	r3, #0
 8087bce:	7c00      	ldrb	r0, [r0, #16]
 8087bd0:	f7fd bc66 	b.w	80854a0 <HAL_USART_BeginConfig>

08087bd4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8087bd4:	2200      	movs	r2, #0
 8087bd6:	f7ff bff9 	b.w	8087bcc <_ZN11USARTSerial5beginEmm>

08087bda <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8087bda:	7c00      	ldrb	r0, [r0, #16]
 8087bdc:	f7fd bc50 	b.w	8085480 <HAL_USART_Is_Enabled>

08087be0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8087be0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8087be2:	4d0c      	ldr	r5, [pc, #48]	; (8087c14 <_Z22__fetch_global_Serial1v+0x34>)
 8087be4:	6829      	ldr	r1, [r5, #0]
 8087be6:	f011 0401 	ands.w	r4, r1, #1
 8087bea:	d111      	bne.n	8087c10 <_Z22__fetch_global_Serial1v+0x30>
 8087bec:	4628      	mov	r0, r5
 8087bee:	f7f8 fa5e 	bl	80800ae <__cxa_guard_acquire>
 8087bf2:	b168      	cbz	r0, 8087c10 <_Z22__fetch_global_Serial1v+0x30>
 8087bf4:	4a08      	ldr	r2, [pc, #32]	; (8087c18 <_Z22__fetch_global_Serial1v+0x38>)
 8087bf6:	4621      	mov	r1, r4
 8087bf8:	4b08      	ldr	r3, [pc, #32]	; (8087c1c <_Z22__fetch_global_Serial1v+0x3c>)
 8087bfa:	4809      	ldr	r0, [pc, #36]	; (8087c20 <_Z22__fetch_global_Serial1v+0x40>)
 8087bfc:	f7ff ffd0 	bl	8087ba0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8087c00:	4628      	mov	r0, r5
 8087c02:	f7f8 fa59 	bl	80800b8 <__cxa_guard_release>
 8087c06:	4a07      	ldr	r2, [pc, #28]	; (8087c24 <_Z22__fetch_global_Serial1v+0x44>)
 8087c08:	4907      	ldr	r1, [pc, #28]	; (8087c28 <_Z22__fetch_global_Serial1v+0x48>)
 8087c0a:	4805      	ldr	r0, [pc, #20]	; (8087c20 <_Z22__fetch_global_Serial1v+0x40>)
 8087c0c:	f000 fbf0 	bl	80883f0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8087c10:	4803      	ldr	r0, [pc, #12]	; (8087c20 <_Z22__fetch_global_Serial1v+0x40>)
 8087c12:	bd38      	pop	{r3, r4, r5, pc}
 8087c14:	20000e20 	.word	0x20000e20
 8087c18:	20000e24 	.word	0x20000e24
 8087c1c:	20000d9c 	.word	0x20000d9c
 8087c20:	20000d88 	.word	0x20000d88
 8087c24:	20000140 	.word	0x20000140
 8087c28:	08087b1d 	.word	0x08087b1d

08087c2c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8087c2c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087c2e:	6883      	ldr	r3, [r0, #8]
 8087c30:	4604      	mov	r4, r0
 8087c32:	b90b      	cbnz	r3, 8087c38 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087c34:	f000 fcb6 	bl	80885a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087c38:	68c3      	ldr	r3, [r0, #12]
 8087c3a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8087c3c:	68a3      	ldr	r3, [r4, #8]
 8087c3e:	b11b      	cbz	r3, 8087c48 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087c40:	2203      	movs	r2, #3
 8087c42:	4621      	mov	r1, r4
 8087c44:	4620      	mov	r0, r4
 8087c46:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087c48:	4620      	mov	r0, r4
}
 8087c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087c4e:	2110      	movs	r1, #16
 8087c50:	f000 bbdc 	b.w	808840c <_ZdlPvj>

08087c54 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8087c54:	4770      	bx	lr

08087c56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8087c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087c58:	4606      	mov	r6, r0
 8087c5a:	4615      	mov	r5, r2
 8087c5c:	460c      	mov	r4, r1
 8087c5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087c60:	42bc      	cmp	r4, r7
 8087c62:	d006      	beq.n	8087c72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087c64:	6833      	ldr	r3, [r6, #0]
 8087c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8087c6a:	689b      	ldr	r3, [r3, #8]
 8087c6c:	4630      	mov	r0, r6
 8087c6e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087c70:	e7f6      	b.n	8087c60 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8087c72:	4628      	mov	r0, r5
 8087c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087c76 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8087c76:	2200      	movs	r2, #0
 8087c78:	7c00      	ldrb	r0, [r0, #16]
 8087c7a:	f7fd bc31 	b.w	80854e0 <HAL_I2C_Write_Data>

08087c7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8087c7e:	2100      	movs	r1, #0
 8087c80:	7c00      	ldrb	r0, [r0, #16]
 8087c82:	f7fd bc35 	b.w	80854f0 <HAL_I2C_Available_Data>

08087c86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8087c86:	2100      	movs	r1, #0
 8087c88:	7c00      	ldrb	r0, [r0, #16]
 8087c8a:	f7fd bc39 	b.w	8085500 <HAL_I2C_Read_Data>

08087c8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8087c8e:	2100      	movs	r1, #0
 8087c90:	7c00      	ldrb	r0, [r0, #16]
 8087c92:	f7fd bc3d 	b.w	8085510 <HAL_I2C_Peek_Data>

08087c96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8087c96:	2100      	movs	r1, #0
 8087c98:	7c00      	ldrb	r0, [r0, #16]
 8087c9a:	f7fd bc41 	b.w	8085520 <HAL_I2C_Flush_Data>

08087c9e <_ZN7TwoWireD0Ev>:
 8087c9e:	b510      	push	{r4, lr}
 8087ca0:	4604      	mov	r4, r0
 8087ca2:	2114      	movs	r1, #20
 8087ca4:	f000 fbb2 	bl	808840c <_ZdlPvj>
 8087ca8:	4620      	mov	r0, r4
 8087caa:	bd10      	pop	{r4, pc}

08087cac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8087cac:	b510      	push	{r4, lr}
 8087cae:	4604      	mov	r4, r0
 8087cb0:	2300      	movs	r3, #0
 8087cb2:	6063      	str	r3, [r4, #4]
 8087cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087cb8:	60a3      	str	r3, [r4, #8]
 8087cba:	4b04      	ldr	r3, [pc, #16]	; (8087ccc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8087cbc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8087cbe:	4608      	mov	r0, r1
 8087cc0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8087cc2:	4611      	mov	r1, r2
 8087cc4:	f7fd fc3c 	bl	8085540 <HAL_I2C_Init>
}
 8087cc8:	4620      	mov	r0, r4
 8087cca:	bd10      	pop	{r4, pc}
 8087ccc:	0808dbe4 	.word	0x0808dbe4

08087cd0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8087cd0:	2300      	movs	r3, #0
 8087cd2:	461a      	mov	r2, r3
 8087cd4:	4619      	mov	r1, r3
 8087cd6:	7c00      	ldrb	r0, [r0, #16]
 8087cd8:	f7fd bbea 	b.w	80854b0 <HAL_I2C_Begin>

08087cdc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8087cdc:	b570      	push	{r4, r5, r6, lr}
 8087cde:	460c      	mov	r4, r1
 8087ce0:	4606      	mov	r6, r0
 8087ce2:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 8087ce4:	2514      	movs	r5, #20
 8087ce6:	462a      	mov	r2, r5
 8087ce8:	2100      	movs	r1, #0
 8087cea:	a801      	add	r0, sp, #4
 8087cec:	f002 f8cc 	bl	8089e88 <memset>
 8087cf0:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 8087cf2:	2200      	movs	r2, #0
 8087cf4:	f88d 3008 	strb.w	r3, [sp, #8]
 8087cf8:	6863      	ldr	r3, [r4, #4]
 8087cfa:	a901      	add	r1, sp, #4
 8087cfc:	9303      	str	r3, [sp, #12]
 8087cfe:	68e3      	ldr	r3, [r4, #12]
 8087d00:	7c30      	ldrb	r0, [r6, #16]
 8087d02:	9304      	str	r3, [sp, #16]
 8087d04:	7a23      	ldrb	r3, [r4, #8]
 8087d06:	f8ad 5004 	strh.w	r5, [sp, #4]
 8087d0a:	9305      	str	r3, [sp, #20]
 8087d0c:	f7fd fc30 	bl	8085570 <HAL_I2C_Request_Data_Ex>
}
 8087d10:	b006      	add	sp, #24
 8087d12:	bd70      	pop	{r4, r5, r6, pc}

08087d14 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 8087d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087d16:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087d18:	f88d 1000 	strb.w	r1, [sp]
 8087d1c:	f04f 0164 	mov.w	r1, #100	; 0x64
 8087d20:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087d22:	bf18      	it	ne
 8087d24:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8087d26:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8087d28:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087d2a:	f88d 3008 	strb.w	r3, [sp, #8]
 8087d2e:	f7ff ffd5 	bl	8087cdc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8087d32:	b005      	add	sp, #20
 8087d34:	f85d fb04 	ldr.w	pc, [sp], #4

08087d38 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 8087d38:	2301      	movs	r3, #1
 8087d3a:	f7ff bfeb 	b.w	8087d14 <_ZN7TwoWire11requestFromEhjh>

08087d3e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8087d3e:	2200      	movs	r2, #0
 8087d40:	7c00      	ldrb	r0, [r0, #16]
 8087d42:	f7fd bbbd 	b.w	80854c0 <HAL_I2C_Begin_Transmission>

08087d46 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8087d46:	b2c9      	uxtb	r1, r1
 8087d48:	f7ff bff9 	b.w	8087d3e <_ZN7TwoWire17beginTransmissionEh>

08087d4c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8087d4c:	2200      	movs	r2, #0
 8087d4e:	7c00      	ldrb	r0, [r0, #16]
 8087d50:	f7fd bbbe 	b.w	80854d0 <HAL_I2C_End_Transmission>

08087d54 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8087d54:	2101      	movs	r1, #1
 8087d56:	f7ff bff9 	b.w	8087d4c <_ZN7TwoWire15endTransmissionEh>

08087d5a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8087d5a:	2100      	movs	r1, #0
 8087d5c:	7c00      	ldrb	r0, [r0, #16]
 8087d5e:	f7fd bbe7 	b.w	8085530 <HAL_I2C_Is_Enabled>

08087d62 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8087d62:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8087d64:	2100      	movs	r1, #0
 8087d66:	7c00      	ldrb	r0, [r0, #16]
 8087d68:	f7fd fbf2 	bl	8085550 <HAL_I2C_Acquire>
}
 8087d6c:	fab0 f080 	clz	r0, r0
 8087d70:	0940      	lsrs	r0, r0, #5
 8087d72:	bd08      	pop	{r3, pc}

08087d74 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8087d74:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8087d76:	2100      	movs	r1, #0
 8087d78:	7c00      	ldrb	r0, [r0, #16]
 8087d7a:	f7fd fbf1 	bl	8085560 <HAL_I2C_Release>
}
 8087d7e:	fab0 f080 	clz	r0, r0
 8087d82:	0940      	lsrs	r0, r0, #5
 8087d84:	bd08      	pop	{r3, pc}

08087d86 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8087d86:	2300      	movs	r3, #0
 8087d88:	461a      	mov	r2, r3
 8087d8a:	6840      	ldr	r0, [r0, #4]
 8087d8c:	f7fd bcfc 	b.w	8085788 <network_connect>

08087d90 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8087d90:	2200      	movs	r2, #0
 8087d92:	2102      	movs	r1, #2
 8087d94:	6840      	ldr	r0, [r0, #4]
 8087d96:	f7fd bd07 	b.w	80857a8 <network_disconnect>

08087d9a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8087d9a:	2200      	movs	r2, #0
 8087d9c:	4611      	mov	r1, r2
 8087d9e:	6840      	ldr	r0, [r0, #4]
 8087da0:	f7fd bcfa 	b.w	8085798 <network_connecting>

08087da4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8087da4:	2200      	movs	r2, #0
 8087da6:	4611      	mov	r1, r2
 8087da8:	6840      	ldr	r0, [r0, #4]
 8087daa:	f7fd bd05 	b.w	80857b8 <network_ready>

08087dae <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8087dae:	2300      	movs	r3, #0
 8087db0:	461a      	mov	r2, r3
 8087db2:	4619      	mov	r1, r3
 8087db4:	6840      	ldr	r0, [r0, #4]
 8087db6:	f7fd bd07 	b.w	80857c8 <network_on>

08087dba <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8087dba:	2300      	movs	r3, #0
 8087dbc:	461a      	mov	r2, r3
 8087dbe:	4619      	mov	r1, r3
 8087dc0:	6840      	ldr	r0, [r0, #4]
 8087dc2:	f7fd bd09 	b.w	80857d8 <network_off>

08087dc6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8087dc6:	2200      	movs	r2, #0
 8087dc8:	f081 0101 	eor.w	r1, r1, #1
 8087dcc:	6840      	ldr	r0, [r0, #4]
 8087dce:	f7fd bd0b 	b.w	80857e8 <network_listen>

08087dd2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8087dd2:	2200      	movs	r2, #0
 8087dd4:	6840      	ldr	r0, [r0, #4]
 8087dd6:	f7fd bd17 	b.w	8085808 <network_set_listen_timeout>

08087dda <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8087dda:	2200      	movs	r2, #0
 8087ddc:	4611      	mov	r1, r2
 8087dde:	6840      	ldr	r0, [r0, #4]
 8087de0:	f7fd bd1a 	b.w	8085818 <network_get_listen_timeout>

08087de4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8087de4:	2200      	movs	r2, #0
 8087de6:	4611      	mov	r1, r2
 8087de8:	6840      	ldr	r0, [r0, #4]
 8087dea:	f7fd bd05 	b.w	80857f8 <network_listening>
	...

08087df0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8087df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087df2:	4617      	mov	r7, r2
 8087df4:	b087      	sub	sp, #28
 8087df6:	4605      	mov	r5, r0
    IPAddress addr;
 8087df8:	a804      	add	r0, sp, #16
 8087dfa:	f7ff fc57 	bl	80876ac <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8087dfe:	2600      	movs	r6, #0
 8087e00:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087e02:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8087e04:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087e08:	f002 fdbe 	bl	808a988 <strlen>
 8087e0c:	4b0a      	ldr	r3, [pc, #40]	; (8087e38 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8087e0e:	9600      	str	r6, [sp, #0]
 8087e10:	b281      	uxth	r1, r0
 8087e12:	685b      	ldr	r3, [r3, #4]
 8087e14:	4622      	mov	r2, r4
 8087e16:	4638      	mov	r0, r7
 8087e18:	f7fd fc0a 	bl	8085630 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087e1c:	b120      	cbz	r0, 8087e28 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087e1e:	4631      	mov	r1, r6
 8087e20:	4628      	mov	r0, r5
 8087e22:	f7ff fc53 	bl	80876cc <_ZN9IPAddressC1Em>
 8087e26:	e003      	b.n	8087e30 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8087e28:	4621      	mov	r1, r4
 8087e2a:	4628      	mov	r0, r5
 8087e2c:	f7ff fc46 	bl	80876bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8087e30:	4628      	mov	r0, r5
 8087e32:	b007      	add	sp, #28
 8087e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087e36:	bf00      	nop
 8087e38:	20000d58 	.word	0x20000d58

08087e3c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 8087e3c:	4b03      	ldr	r3, [pc, #12]	; (8087e4c <_ZN5spark12NetworkClass4fromEm+0x10>)
 8087e3e:	4a04      	ldr	r2, [pc, #16]	; (8087e50 <_ZN5spark12NetworkClass4fromEm+0x14>)
 8087e40:	2804      	cmp	r0, #4
 8087e42:	bf0c      	ite	eq
 8087e44:	4610      	moveq	r0, r2
 8087e46:	4618      	movne	r0, r3
 8087e48:	4770      	bx	lr
 8087e4a:	bf00      	nop
 8087e4c:	20000ea8 	.word	0x20000ea8
 8087e50:	20000d58 	.word	0x20000d58

08087e54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087e54:	4b02      	ldr	r3, [pc, #8]	; (8087e60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087e56:	4a03      	ldr	r2, [pc, #12]	; (8087e64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087e58:	601a      	str	r2, [r3, #0]
 8087e5a:	2200      	movs	r2, #0
 8087e5c:	605a      	str	r2, [r3, #4]
 8087e5e:	4770      	bx	lr
 8087e60:	20000ea8 	.word	0x20000ea8
 8087e64:	0808dc0c 	.word	0x0808dc0c

08087e68 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8087e68:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8087e6a:	b530      	push	{r4, r5, lr}
 8087e6c:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8087e6e:	b31a      	cbz	r2, 8087eb8 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8087e70:	4a17      	ldr	r2, [pc, #92]	; (8087ed0 <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8087e72:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8087e74:	68d1      	ldr	r1, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8087e76:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8087e7a:	43c9      	mvns	r1, r1
 8087e7c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8087e80:	f1c1 0204 	rsb	r2, r1, #4
 8087e84:	b2d2      	uxtb	r2, r2
 8087e86:	fa05 f202 	lsl.w	r2, r5, r2
 8087e8a:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8087e8c:	220f      	movs	r2, #15
 8087e8e:	410a      	asrs	r2, r1
 8087e90:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8087e92:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8087e96:	400a      	ands	r2, r1
 8087e98:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
 8087e9a:	0112      	lsls	r2, r2, #4
 8087e9c:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8087e9e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087ea2:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8087ea4:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087ea6:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8087ea8:	f003 031f 	and.w	r3, r3, #31
 8087eac:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087eb0:	4a08      	ldr	r2, [pc, #32]	; (8087ed4 <NVIC_Init+0x6c>)
 8087eb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8087eb6:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087eb8:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8087eba:	2101      	movs	r1, #1
 8087ebc:	f003 031f 	and.w	r3, r3, #31
 8087ec0:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8087ec4:	4903      	ldr	r1, [pc, #12]	; (8087ed4 <NVIC_Init+0x6c>)
 8087ec6:	3220      	adds	r2, #32
 8087ec8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8087ecc:	bd30      	pop	{r4, r5, pc}
 8087ece:	bf00      	nop
 8087ed0:	e000ed00 	.word	0xe000ed00
 8087ed4:	e000e100 	.word	0xe000e100

08087ed8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8087ed8:	4b04      	ldr	r3, [pc, #16]	; (8087eec <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8087eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8087edc:	b109      	cbz	r1, 8087ee2 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8087ede:	4310      	orrs	r0, r2
 8087ee0:	e001      	b.n	8087ee6 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8087ee2:	ea22 0000 	bic.w	r0, r2, r0
 8087ee6:	6418      	str	r0, [r3, #64]	; 0x40
 8087ee8:	4770      	bx	lr
 8087eea:	bf00      	nop
 8087eec:	40023800 	.word	0x40023800

08087ef0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8087ef0:	4b04      	ldr	r3, [pc, #16]	; (8087f04 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8087ef2:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8087ef4:	b109      	cbz	r1, 8087efa <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8087ef6:	4310      	orrs	r0, r2
 8087ef8:	e001      	b.n	8087efe <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8087efa:	ea22 0000 	bic.w	r0, r2, r0
 8087efe:	6218      	str	r0, [r3, #32]
 8087f00:	4770      	bx	lr
 8087f02:	bf00      	nop
 8087f04:	40023800 	.word	0x40023800

08087f08 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8087f08:	4b04      	ldr	r3, [pc, #16]	; (8087f1c <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8087f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8087f0c:	b109      	cbz	r1, 8087f12 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8087f0e:	4310      	orrs	r0, r2
 8087f10:	e001      	b.n	8087f16 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8087f12:	ea22 0000 	bic.w	r0, r2, r0
 8087f16:	6258      	str	r0, [r3, #36]	; 0x24
 8087f18:	4770      	bx	lr
 8087f1a:	bf00      	nop
 8087f1c:	40023800 	.word	0x40023800

08087f20 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8087f20:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 8087f22:	4b4d      	ldr	r3, [pc, #308]	; (8088058 <TIM_DeInit+0x138>)
 8087f24:	4298      	cmp	r0, r3
 8087f26:	d106      	bne.n	8087f36 <TIM_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8087f28:	2101      	movs	r1, #1
 8087f2a:	4608      	mov	r0, r1
 8087f2c:	f7ff ffec 	bl	8087f08 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 8087f30:	2100      	movs	r1, #0
 8087f32:	2001      	movs	r0, #1
 8087f34:	e044      	b.n	8087fc0 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM2)
 8087f36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8087f3a:	d106      	bne.n	8087f4a <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8087f3c:	2101      	movs	r1, #1
 8087f3e:	4608      	mov	r0, r1
 8087f40:	f7ff ffd6 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8087f44:	2100      	movs	r1, #0
 8087f46:	2001      	movs	r0, #1
 8087f48:	e081      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM3)
 8087f4a:	4b44      	ldr	r3, [pc, #272]	; (808805c <TIM_DeInit+0x13c>)
 8087f4c:	4298      	cmp	r0, r3
 8087f4e:	d106      	bne.n	8087f5e <TIM_DeInit+0x3e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8087f50:	2101      	movs	r1, #1
 8087f52:	2002      	movs	r0, #2
 8087f54:	f7ff ffcc 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8087f58:	2100      	movs	r1, #0
 8087f5a:	2002      	movs	r0, #2
 8087f5c:	e077      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM4)
 8087f5e:	4b40      	ldr	r3, [pc, #256]	; (8088060 <TIM_DeInit+0x140>)
 8087f60:	4298      	cmp	r0, r3
 8087f62:	d106      	bne.n	8087f72 <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8087f64:	2101      	movs	r1, #1
 8087f66:	2004      	movs	r0, #4
 8087f68:	f7ff ffc2 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8087f6c:	2100      	movs	r1, #0
 8087f6e:	2004      	movs	r0, #4
 8087f70:	e06d      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM5)
 8087f72:	4b3c      	ldr	r3, [pc, #240]	; (8088064 <TIM_DeInit+0x144>)
 8087f74:	4298      	cmp	r0, r3
 8087f76:	d106      	bne.n	8087f86 <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8087f78:	2101      	movs	r1, #1
 8087f7a:	2008      	movs	r0, #8
 8087f7c:	f7ff ffb8 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8087f80:	2100      	movs	r1, #0
 8087f82:	2008      	movs	r0, #8
 8087f84:	e063      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM6)
 8087f86:	4b38      	ldr	r3, [pc, #224]	; (8088068 <TIM_DeInit+0x148>)
 8087f88:	4298      	cmp	r0, r3
 8087f8a:	d106      	bne.n	8087f9a <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8087f8c:	2101      	movs	r1, #1
 8087f8e:	2010      	movs	r0, #16
 8087f90:	f7ff ffae 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8087f94:	2100      	movs	r1, #0
 8087f96:	2010      	movs	r0, #16
 8087f98:	e059      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM7)
 8087f9a:	4b34      	ldr	r3, [pc, #208]	; (808806c <TIM_DeInit+0x14c>)
 8087f9c:	4298      	cmp	r0, r3
 8087f9e:	d106      	bne.n	8087fae <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8087fa0:	2101      	movs	r1, #1
 8087fa2:	2020      	movs	r0, #32
 8087fa4:	f7ff ffa4 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8087fa8:	2100      	movs	r1, #0
 8087faa:	2020      	movs	r0, #32
 8087fac:	e04f      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM8)
 8087fae:	4b30      	ldr	r3, [pc, #192]	; (8088070 <TIM_DeInit+0x150>)
 8087fb0:	4298      	cmp	r0, r3
 8087fb2:	d109      	bne.n	8087fc8 <TIM_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8087fb4:	2101      	movs	r1, #1
 8087fb6:	2002      	movs	r0, #2
 8087fb8:	f7ff ffa6 	bl	8087f08 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8087fbc:	2100      	movs	r1, #0
 8087fbe:	2002      	movs	r0, #2
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 8087fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM8)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8087fc4:	f7ff bfa0 	b.w	8087f08 <RCC_APB2PeriphResetCmd>
  }
  else if (TIMx == TIM9)
 8087fc8:	4b2a      	ldr	r3, [pc, #168]	; (8088074 <TIM_DeInit+0x154>)
 8087fca:	4298      	cmp	r0, r3
 8087fcc:	d108      	bne.n	8087fe0 <TIM_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8087fce:	2101      	movs	r1, #1
 8087fd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8087fd4:	f7ff ff98 	bl	8087f08 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 8087fd8:	2100      	movs	r1, #0
 8087fda:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8087fde:	e7ef      	b.n	8087fc0 <TIM_DeInit+0xa0>
   }
  else if (TIMx == TIM10)
 8087fe0:	4b25      	ldr	r3, [pc, #148]	; (8088078 <TIM_DeInit+0x158>)
 8087fe2:	4298      	cmp	r0, r3
 8087fe4:	d108      	bne.n	8087ff8 <TIM_DeInit+0xd8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8087fe6:	2101      	movs	r1, #1
 8087fe8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8087fec:	f7ff ff8c 	bl	8087f08 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 8087ff0:	2100      	movs	r1, #0
 8087ff2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8087ff6:	e7e3      	b.n	8087fc0 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM11)
 8087ff8:	4b20      	ldr	r3, [pc, #128]	; (808807c <TIM_DeInit+0x15c>)
 8087ffa:	4298      	cmp	r0, r3
 8087ffc:	d108      	bne.n	8088010 <TIM_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8087ffe:	2101      	movs	r1, #1
 8088000:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8088004:	f7ff ff80 	bl	8087f08 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 8088008:	2100      	movs	r1, #0
 808800a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 808800e:	e7d7      	b.n	8087fc0 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM12)
 8088010:	4b1b      	ldr	r3, [pc, #108]	; (8088080 <TIM_DeInit+0x160>)
 8088012:	4298      	cmp	r0, r3
 8088014:	d106      	bne.n	8088024 <TIM_DeInit+0x104>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8088016:	2101      	movs	r1, #1
 8088018:	2040      	movs	r0, #64	; 0x40
 808801a:	f7ff ff69 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 808801e:	2100      	movs	r1, #0
 8088020:	2040      	movs	r0, #64	; 0x40
 8088022:	e014      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM13)
 8088024:	4b17      	ldr	r3, [pc, #92]	; (8088084 <TIM_DeInit+0x164>)
 8088026:	4298      	cmp	r0, r3
 8088028:	d106      	bne.n	8088038 <TIM_DeInit+0x118>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 808802a:	2101      	movs	r1, #1
 808802c:	2080      	movs	r0, #128	; 0x80
 808802e:	f7ff ff5f 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 8088032:	2100      	movs	r1, #0
 8088034:	2080      	movs	r0, #128	; 0x80
 8088036:	e00a      	b.n	808804e <TIM_DeInit+0x12e>
  }
  else
  {
    if (TIMx == TIM14)
 8088038:	4b13      	ldr	r3, [pc, #76]	; (8088088 <TIM_DeInit+0x168>)
 808803a:	4298      	cmp	r0, r3
 808803c:	d10b      	bne.n	8088056 <TIM_DeInit+0x136>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 808803e:	2101      	movs	r1, #1
 8088040:	f44f 7080 	mov.w	r0, #256	; 0x100
 8088044:	f7ff ff54 	bl	8087ef0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8088048:	2100      	movs	r1, #0
 808804a:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 808804e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM14)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8088052:	f7ff bf4d 	b.w	8087ef0 <RCC_APB1PeriphResetCmd>
 8088056:	bd08      	pop	{r3, pc}
 8088058:	40010000 	.word	0x40010000
 808805c:	40000400 	.word	0x40000400
 8088060:	40000800 	.word	0x40000800
 8088064:	40000c00 	.word	0x40000c00
 8088068:	40001000 	.word	0x40001000
 808806c:	40001400 	.word	0x40001400
 8088070:	40010400 	.word	0x40010400
 8088074:	40014000 	.word	0x40014000
 8088078:	40014400 	.word	0x40014400
 808807c:	40014800 	.word	0x40014800
 8088080:	40001800 	.word	0x40001800
 8088084:	40001c00 	.word	0x40001c00
 8088088:	40002000 	.word	0x40002000

0808808c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;

  if((TIMx == TIM1) || (TIMx == TIM8)||
 808808c:	4a1c      	ldr	r2, [pc, #112]	; (8088100 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 808808e:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088090:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8088092:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088094:	d012      	beq.n	80880bc <TIM_TimeBaseInit+0x30>
 8088096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 808809a:	4290      	cmp	r0, r2
 808809c:	d00e      	beq.n	80880bc <TIM_TimeBaseInit+0x30>
 808809e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80880a2:	d00b      	beq.n	80880bc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80880a4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80880a8:	4290      	cmp	r0, r2
 80880aa:	d007      	beq.n	80880bc <TIM_TimeBaseInit+0x30>
 80880ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80880b0:	4290      	cmp	r0, r2
 80880b2:	d003      	beq.n	80880bc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5))
 80880b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80880b8:	4290      	cmp	r0, r2
 80880ba:	d103      	bne.n	80880c4 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80880bc:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80880be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80880c2:	4313      	orrs	r3, r2
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 80880c4:	4a0f      	ldr	r2, [pc, #60]	; (8088104 <TIM_TimeBaseInit+0x78>)
 80880c6:	4290      	cmp	r0, r2
 80880c8:	d008      	beq.n	80880dc <TIM_TimeBaseInit+0x50>
 80880ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80880ce:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80880d0:	bf1f      	itttt	ne
 80880d2:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80880d6:	890a      	ldrhne	r2, [r1, #8]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80880d8:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80880da:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80880dc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80880de:	684b      	ldr	r3, [r1, #4]
 80880e0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80880e2:	880b      	ldrh	r3, [r1, #0]
 80880e4:	8503      	strh	r3, [r0, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 80880e6:	4b06      	ldr	r3, [pc, #24]	; (8088100 <TIM_TimeBaseInit+0x74>)
 80880e8:	4298      	cmp	r0, r3
 80880ea:	d003      	beq.n	80880f4 <TIM_TimeBaseInit+0x68>
 80880ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80880f0:	4298      	cmp	r0, r3
 80880f2:	d101      	bne.n	80880f8 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80880f4:	7a8b      	ldrb	r3, [r1, #10]
 80880f6:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80880f8:	2301      	movs	r3, #1
 80880fa:	8283      	strh	r3, [r0, #20]
 80880fc:	4770      	bx	lr
 80880fe:	bf00      	nop
 8088100:	40010000 	.word	0x40010000
 8088104:	40001000 	.word	0x40001000

08088108 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8088108:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 808810a:	b119      	cbz	r1, 8088114 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 808810c:	b29b      	uxth	r3, r3
 808810e:	f043 0301 	orr.w	r3, r3, #1
 8088112:	e003      	b.n	808811c <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8088114:	f023 0301 	bic.w	r3, r3, #1
 8088118:	041b      	lsls	r3, r3, #16
 808811a:	0c1b      	lsrs	r3, r3, #16
 808811c:	8003      	strh	r3, [r0, #0]
 808811e:	4770      	bx	lr

08088120 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8088120:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 8088122:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8088124:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 8088128:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 808812a:	d003      	beq.n	8088134 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 808812c:	4211      	tst	r1, r2
 808812e:	bf14      	ite	ne
 8088130:	2001      	movne	r0, #1
 8088132:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8088134:	4770      	bx	lr

08088136 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8088136:	43c9      	mvns	r1, r1
 8088138:	b289      	uxth	r1, r1
 808813a:	8201      	strh	r1, [r0, #16]
 808813c:	4770      	bx	lr

0808813e <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 808813e:	8983      	ldrh	r3, [r0, #12]
 8088140:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8088142:	b10a      	cbz	r2, 8088148 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource;
 8088144:	4319      	orrs	r1, r3
 8088146:	e001      	b.n	808814c <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8088148:	ea23 0101 	bic.w	r1, r3, r1
 808814c:	8181      	strh	r1, [r0, #12]
 808814e:	4770      	bx	lr

08088150 <TIM_ITConfig>:
 8088150:	f7ff bff5 	b.w	808813e <TIM_DMACmd>

08088154 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8088154:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8088156:	4e1a      	ldr	r6, [pc, #104]	; (80881c0 <pinAvailable+0x6c>)
 8088158:	4604      	mov	r4, r0
 808815a:	6831      	ldr	r1, [r6, #0]
 808815c:	f011 0501 	ands.w	r5, r1, #1
 8088160:	d10f      	bne.n	8088182 <pinAvailable+0x2e>
 8088162:	4630      	mov	r0, r6
 8088164:	f7f7 ffa3 	bl	80800ae <__cxa_guard_acquire>
 8088168:	b158      	cbz	r0, 8088182 <pinAvailable+0x2e>
 808816a:	4629      	mov	r1, r5
 808816c:	4815      	ldr	r0, [pc, #84]	; (80881c4 <pinAvailable+0x70>)
 808816e:	f7fd fd55 	bl	8085c1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8088172:	4630      	mov	r0, r6
 8088174:	f7f7 ffa0 	bl	80800b8 <__cxa_guard_release>
 8088178:	4a13      	ldr	r2, [pc, #76]	; (80881c8 <pinAvailable+0x74>)
 808817a:	4914      	ldr	r1, [pc, #80]	; (80881cc <pinAvailable+0x78>)
 808817c:	4811      	ldr	r0, [pc, #68]	; (80881c4 <pinAvailable+0x70>)
 808817e:	f000 f937 	bl	80883f0 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 8088182:	4810      	ldr	r0, [pc, #64]	; (80881c4 <pinAvailable+0x70>)
 8088184:	f7fd fe0c 	bl	8085da0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8088188:	b128      	cbz	r0, 8088196 <pinAvailable+0x42>
 808818a:	f1a4 030d 	sub.w	r3, r4, #13
 808818e:	2b02      	cmp	r3, #2
 8088190:	d801      	bhi.n	8088196 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 8088192:	2000      	movs	r0, #0
 8088194:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8088196:	f000 f8df 	bl	8088358 <_Z19__fetch_global_Wirev>
 808819a:	f7ff fdde 	bl	8087d5a <_ZN7TwoWire9isEnabledEv>
 808819e:	b108      	cbz	r0, 80881a4 <pinAvailable+0x50>
 80881a0:	2c01      	cmp	r4, #1
 80881a2:	d9f6      	bls.n	8088192 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80881a4:	f7ff fd1c 	bl	8087be0 <_Z22__fetch_global_Serial1v>
 80881a8:	f7ff fd17 	bl	8087bda <_ZN11USARTSerial9isEnabledEv>
 80881ac:	b118      	cbz	r0, 80881b6 <pinAvailable+0x62>
 80881ae:	f1a4 0312 	sub.w	r3, r4, #18
 80881b2:	2b01      	cmp	r3, #1
 80881b4:	d9ed      	bls.n	8088192 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80881b6:	2c2e      	cmp	r4, #46	; 0x2e
 80881b8:	bf8c      	ite	hi
 80881ba:	2000      	movhi	r0, #0
 80881bc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80881be:	bd70      	pop	{r4, r5, r6, pc}
 80881c0:	20000144 	.word	0x20000144
 80881c4:	20000148 	.word	0x20000148
 80881c8:	20000140 	.word	0x20000140
 80881cc:	0808017d 	.word	0x0808017d

080881d0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80881d0:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80881d2:	b538      	push	{r3, r4, r5, lr}
 80881d4:	4604      	mov	r4, r0
 80881d6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80881d8:	d80a      	bhi.n	80881f0 <pinMode+0x20>
 80881da:	29ff      	cmp	r1, #255	; 0xff
 80881dc:	d008      	beq.n	80881f0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80881de:	f7ff ffb9 	bl	8088154 <pinAvailable>
 80881e2:	b128      	cbz	r0, 80881f0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80881e4:	4629      	mov	r1, r5
 80881e6:	4620      	mov	r0, r4
}
 80881e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80881ec:	f7fd b828 	b.w	8085240 <HAL_Pin_Mode>
 80881f0:	bd38      	pop	{r3, r4, r5, pc}

080881f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80881f2:	b538      	push	{r3, r4, r5, lr}
 80881f4:	4604      	mov	r4, r0
 80881f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80881f8:	f7fd f82a 	bl	8085250 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80881fc:	28ff      	cmp	r0, #255	; 0xff
 80881fe:	d010      	beq.n	8088222 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8088200:	2806      	cmp	r0, #6
 8088202:	d804      	bhi.n	808820e <digitalWrite+0x1c>
 8088204:	234d      	movs	r3, #77	; 0x4d
 8088206:	fa23 f000 	lsr.w	r0, r3, r0
 808820a:	07c3      	lsls	r3, r0, #31
 808820c:	d409      	bmi.n	8088222 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808820e:	4620      	mov	r0, r4
 8088210:	f7ff ffa0 	bl	8088154 <pinAvailable>
 8088214:	b128      	cbz	r0, 8088222 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8088216:	4629      	mov	r1, r5
 8088218:	4620      	mov	r0, r4
}
 808821a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808821e:	f7fd b81f 	b.w	8085260 <HAL_GPIO_Write>
 8088222:	bd38      	pop	{r3, r4, r5, pc}

08088224 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8088224:	b510      	push	{r4, lr}
 8088226:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8088228:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808822a:	bf9c      	itt	ls
 808822c:	340a      	addls	r4, #10
 808822e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8088230:	4620      	mov	r0, r4
 8088232:	f7ff ff8f 	bl	8088154 <pinAvailable>
 8088236:	b150      	cbz	r0, 808824e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8088238:	2103      	movs	r1, #3
 808823a:	4620      	mov	r0, r4
 808823c:	f7fc fff8 	bl	8085230 <HAL_Validate_Pin_Function>
 8088240:	2803      	cmp	r0, #3
 8088242:	d104      	bne.n	808824e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8088244:	4620      	mov	r0, r4
}
 8088246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808824a:	f7fd b821 	b.w	8085290 <HAL_ADC_Read>
}
 808824e:	2000      	movs	r0, #0
 8088250:	bd10      	pop	{r4, pc}
	...

08088254 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8088254:	b530      	push	{r4, r5, lr}
 8088256:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8088258:	4d1b      	ldr	r5, [pc, #108]	; (80882c8 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 808825a:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 808825c:	6820      	ldr	r0, [r4, #0]
 808825e:	f7fd f86f 	bl	8085340 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088262:	f7fd f87d 	bl	8085360 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8088266:	682b      	ldr	r3, [r5, #0]
 8088268:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 808826a:	1ac0      	subs	r0, r0, r3
 808826c:	4290      	cmp	r0, r2
 808826e:	d3f5      	bcc.n	808825c <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 8088270:	6823      	ldr	r3, [r4, #0]
 8088272:	b333      	cbz	r3, 80882c2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8088274:	68e3      	ldr	r3, [r4, #12]
 8088276:	b323      	cbz	r3, 80882c2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088278:	1d25      	adds	r5, r4, #4
 808827a:	6923      	ldr	r3, [r4, #16]
 808827c:	4628      	mov	r0, r5
 808827e:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088280:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088282:	a904      	add	r1, sp, #16
 8088284:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088286:	9302      	str	r3, [sp, #8]
 8088288:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808828a:	f7fe fd01 	bl	8086c90 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808828e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8088290:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8088292:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088294:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088296:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8088298:	9a07      	ldr	r2, [sp, #28]
 808829a:	4629      	mov	r1, r5
 808829c:	a804      	add	r0, sp, #16
 808829e:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80882a0:	9307      	str	r3, [sp, #28]
 80882a2:	f7fe fcf5 	bl	8086c90 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80882a6:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80882a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80882aa:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80882ac:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80882ae:	9206      	str	r2, [sp, #24]
 80882b0:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80882b2:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80882b4:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80882b6:	9207      	str	r2, [sp, #28]
 80882b8:	f7f7 ff81 	bl	80801be <_ZNSt14_Function_baseD1Ev>
 80882bc:	4668      	mov	r0, sp
 80882be:	f7f7 ff7e 	bl	80801be <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80882c2:	b009      	add	sp, #36	; 0x24
 80882c4:	bd30      	pop	{r4, r5, pc}
 80882c6:	bf00      	nop
 80882c8:	20000eb0 	.word	0x20000eb0

080882cc <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80882cc:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80882ce:	f7ff ffc1 	bl	8088254 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80882d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80882d6:	2000      	movs	r0, #0
 80882d8:	f7fd b872 	b.w	80853c0 <os_thread_cleanup>

080882dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80882dc:	b513      	push	{r0, r1, r4, lr}
 80882de:	4c08      	ldr	r4, [pc, #32]	; (8088300 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80882e0:	2300      	movs	r3, #0
 80882e2:	461a      	mov	r2, r3
 80882e4:	4619      	mov	r1, r3
 80882e6:	9300      	str	r3, [sp, #0]
 80882e8:	4620      	mov	r0, r4
 80882ea:	f7ff fa05 	bl	80876f8 <_ZN9IPAddressC1Ehhhh>
 80882ee:	4620      	mov	r0, r4
 80882f0:	4a04      	ldr	r2, [pc, #16]	; (8088304 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80882f2:	4905      	ldr	r1, [pc, #20]	; (8088308 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80882f4:	b002      	add	sp, #8
 80882f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80882fa:	f000 b879 	b.w	80883f0 <__aeabi_atexit>
 80882fe:	bf00      	nop
 8088300:	20000eb4 	.word	0x20000eb4
 8088304:	20000140 	.word	0x20000140
 8088308:	08087669 	.word	0x08087669

0808830c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 808830c:	b570      	push	{r4, r5, r6, lr}
 808830e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088310:	2514      	movs	r5, #20
 8088312:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088314:	4e09      	ldr	r6, [pc, #36]	; (808833c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088316:	2100      	movs	r1, #0
 8088318:	f001 fdb6 	bl	8089e88 <memset>
 808831c:	8025      	strh	r5, [r4, #0]
 808831e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088320:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088322:	60a5      	str	r5, [r4, #8]
 8088324:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088326:	4628      	mov	r0, r5
 8088328:	f000 f872 	bl	8088410 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808832c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808832e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088330:	4628      	mov	r0, r5
 8088332:	f000 f86d 	bl	8088410 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8088336:	60e0      	str	r0, [r4, #12]

	return config;
}
 8088338:	4620      	mov	r0, r4
 808833a:	bd70      	pop	{r4, r5, r6, pc}
 808833c:	0808dc38 	.word	0x0808dc38

08088340 <_Z17acquireWireBufferv>:
 8088340:	b510      	push	{r4, lr}
 8088342:	4604      	mov	r4, r0
 8088344:	f7ff ffe2 	bl	808830c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8088348:	4620      	mov	r0, r4
 808834a:	bd10      	pop	{r4, pc}

0808834c <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 808834c:	b510      	push	{r4, lr}
 808834e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8088350:	f7ff ffdc 	bl	808830c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8088354:	4620      	mov	r0, r4
 8088356:	bd10      	pop	{r4, pc}

08088358 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8088358:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808835a:	4d0e      	ldr	r5, [pc, #56]	; (8088394 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808835c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808835e:	6829      	ldr	r1, [r5, #0]
 8088360:	f011 0401 	ands.w	r4, r1, #1
 8088364:	d113      	bne.n	808838e <_Z19__fetch_global_Wirev+0x36>
 8088366:	4628      	mov	r0, r5
 8088368:	f7f7 fea1 	bl	80800ae <__cxa_guard_acquire>
 808836c:	b178      	cbz	r0, 808838e <_Z19__fetch_global_Wirev+0x36>
 808836e:	a801      	add	r0, sp, #4
 8088370:	f7ff ffe6 	bl	8088340 <_Z17acquireWireBufferv>
 8088374:	aa01      	add	r2, sp, #4
 8088376:	4621      	mov	r1, r4
 8088378:	4807      	ldr	r0, [pc, #28]	; (8088398 <_Z19__fetch_global_Wirev+0x40>)
 808837a:	f7ff fc97 	bl	8087cac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 808837e:	4628      	mov	r0, r5
 8088380:	f7f7 fe9a 	bl	80800b8 <__cxa_guard_release>
 8088384:	4a05      	ldr	r2, [pc, #20]	; (808839c <_Z19__fetch_global_Wirev+0x44>)
 8088386:	4906      	ldr	r1, [pc, #24]	; (80883a0 <_Z19__fetch_global_Wirev+0x48>)
 8088388:	4803      	ldr	r0, [pc, #12]	; (8088398 <_Z19__fetch_global_Wirev+0x40>)
 808838a:	f000 f831 	bl	80883f0 <__aeabi_atexit>
	return wire;
}
 808838e:	4802      	ldr	r0, [pc, #8]	; (8088398 <_Z19__fetch_global_Wirev+0x40>)
 8088390:	b007      	add	sp, #28
 8088392:	bd30      	pop	{r4, r5, pc}
 8088394:	20000ebc 	.word	0x20000ebc
 8088398:	20000ed4 	.word	0x20000ed4
 808839c:	20000140 	.word	0x20000140
 80883a0:	08087c55 	.word	0x08087c55

080883a4 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80883a4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80883a6:	4c0e      	ldr	r4, [pc, #56]	; (80883e0 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80883a8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80883aa:	6823      	ldr	r3, [r4, #0]
 80883ac:	07db      	lsls	r3, r3, #31
 80883ae:	d413      	bmi.n	80883d8 <_Z20__fetch_global_Wire3v+0x34>
 80883b0:	4620      	mov	r0, r4
 80883b2:	f7f7 fe7c 	bl	80800ae <__cxa_guard_acquire>
 80883b6:	b178      	cbz	r0, 80883d8 <_Z20__fetch_global_Wire3v+0x34>
 80883b8:	a801      	add	r0, sp, #4
 80883ba:	f7ff ffc7 	bl	808834c <_Z18acquireWire3Bufferv>
 80883be:	aa01      	add	r2, sp, #4
 80883c0:	2102      	movs	r1, #2
 80883c2:	4808      	ldr	r0, [pc, #32]	; (80883e4 <_Z20__fetch_global_Wire3v+0x40>)
 80883c4:	f7ff fc72 	bl	8087cac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80883c8:	4620      	mov	r0, r4
 80883ca:	f7f7 fe75 	bl	80800b8 <__cxa_guard_release>
 80883ce:	4a06      	ldr	r2, [pc, #24]	; (80883e8 <_Z20__fetch_global_Wire3v+0x44>)
 80883d0:	4906      	ldr	r1, [pc, #24]	; (80883ec <_Z20__fetch_global_Wire3v+0x48>)
 80883d2:	4804      	ldr	r0, [pc, #16]	; (80883e4 <_Z20__fetch_global_Wire3v+0x40>)
 80883d4:	f000 f80c 	bl	80883f0 <__aeabi_atexit>
	return wire;
}
 80883d8:	4802      	ldr	r0, [pc, #8]	; (80883e4 <_Z20__fetch_global_Wire3v+0x40>)
 80883da:	b006      	add	sp, #24
 80883dc:	bd10      	pop	{r4, pc}
 80883de:	bf00      	nop
 80883e0:	20000ee8 	.word	0x20000ee8
 80883e4:	20000ec0 	.word	0x20000ec0
 80883e8:	20000140 	.word	0x20000140
 80883ec:	08087c55 	.word	0x08087c55

080883f0 <__aeabi_atexit>:
 80883f0:	460b      	mov	r3, r1
 80883f2:	4601      	mov	r1, r0
 80883f4:	4618      	mov	r0, r3
 80883f6:	f001 bc23 	b.w	8089c40 <__cxa_atexit>
	...

080883fc <_ZSt15get_new_handlerv>:
 80883fc:	4b02      	ldr	r3, [pc, #8]	; (8088408 <_ZSt15get_new_handlerv+0xc>)
 80883fe:	6818      	ldr	r0, [r3, #0]
 8088400:	f3bf 8f5f 	dmb	sy
 8088404:	4770      	bx	lr
 8088406:	bf00      	nop
 8088408:	20000eec 	.word	0x20000eec

0808840c <_ZdlPvj>:
 808840c:	f7f7 be4b 	b.w	80800a6 <_ZdlPv>

08088410 <_ZnajRKSt9nothrow_t>:
 8088410:	f000 b800 	b.w	8088414 <_ZnwjRKSt9nothrow_t>

08088414 <_ZnwjRKSt9nothrow_t>:
 8088414:	b510      	push	{r4, lr}
 8088416:	2800      	cmp	r0, #0
 8088418:	bf14      	ite	ne
 808841a:	4604      	movne	r4, r0
 808841c:	2401      	moveq	r4, #1
 808841e:	4620      	mov	r0, r4
 8088420:	f7fd fa42 	bl	80858a8 <malloc>
 8088424:	b920      	cbnz	r0, 8088430 <_ZnwjRKSt9nothrow_t+0x1c>
 8088426:	f7ff ffe9 	bl	80883fc <_ZSt15get_new_handlerv>
 808842a:	b108      	cbz	r0, 8088430 <_ZnwjRKSt9nothrow_t+0x1c>
 808842c:	4780      	blx	r0
 808842e:	e7f6      	b.n	808841e <_ZnwjRKSt9nothrow_t+0xa>
 8088430:	bd10      	pop	{r4, pc}

08088432 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8088432:	68c3      	ldr	r3, [r0, #12]
 8088434:	689a      	ldr	r2, [r3, #8]
 8088436:	60c2      	str	r2, [r0, #12]
 8088438:	b102      	cbz	r2, 808843c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 808843a:	6050      	str	r0, [r2, #4]
 808843c:	6842      	ldr	r2, [r0, #4]
 808843e:	605a      	str	r2, [r3, #4]
 8088440:	680a      	ldr	r2, [r1, #0]
 8088442:	4290      	cmp	r0, r2
 8088444:	d101      	bne.n	808844a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
 8088446:	600b      	str	r3, [r1, #0]
 8088448:	e005      	b.n	8088456 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
 808844a:	6842      	ldr	r2, [r0, #4]
 808844c:	6891      	ldr	r1, [r2, #8]
 808844e:	4288      	cmp	r0, r1
 8088450:	bf0c      	ite	eq
 8088452:	6093      	streq	r3, [r2, #8]
 8088454:	60d3      	strne	r3, [r2, #12]
 8088456:	6098      	str	r0, [r3, #8]
 8088458:	6043      	str	r3, [r0, #4]
 808845a:	4770      	bx	lr

0808845c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 808845c:	6883      	ldr	r3, [r0, #8]
 808845e:	68da      	ldr	r2, [r3, #12]
 8088460:	6082      	str	r2, [r0, #8]
 8088462:	b102      	cbz	r2, 8088466 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 8088464:	6050      	str	r0, [r2, #4]
 8088466:	6842      	ldr	r2, [r0, #4]
 8088468:	605a      	str	r2, [r3, #4]
 808846a:	680a      	ldr	r2, [r1, #0]
 808846c:	4290      	cmp	r0, r2
 808846e:	d101      	bne.n	8088474 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
 8088470:	600b      	str	r3, [r1, #0]
 8088472:	e005      	b.n	8088480 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
 8088474:	6842      	ldr	r2, [r0, #4]
 8088476:	68d1      	ldr	r1, [r2, #12]
 8088478:	4288      	cmp	r0, r1
 808847a:	bf0c      	ite	eq
 808847c:	60d3      	streq	r3, [r2, #12]
 808847e:	6093      	strne	r3, [r2, #8]
 8088480:	60d8      	str	r0, [r3, #12]
 8088482:	6043      	str	r3, [r0, #4]
 8088484:	4770      	bx	lr

08088486 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8088486:	7803      	ldrb	r3, [r0, #0]
 8088488:	b92b      	cbnz	r3, 8088496 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 808848a:	6843      	ldr	r3, [r0, #4]
 808848c:	685b      	ldr	r3, [r3, #4]
 808848e:	4298      	cmp	r0, r3
 8088490:	d101      	bne.n	8088496 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
 8088492:	68c3      	ldr	r3, [r0, #12]
 8088494:	e00c      	b.n	80884b0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8088496:	6883      	ldr	r3, [r0, #8]
 8088498:	b11b      	cbz	r3, 80884a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
 808849a:	68da      	ldr	r2, [r3, #12]
 808849c:	b142      	cbz	r2, 80884b0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 808849e:	4613      	mov	r3, r2
 80884a0:	e7fb      	b.n	808849a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 80884a2:	6843      	ldr	r3, [r0, #4]
 80884a4:	689a      	ldr	r2, [r3, #8]
 80884a6:	4282      	cmp	r2, r0
 80884a8:	d102      	bne.n	80884b0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80884aa:	4618      	mov	r0, r3
 80884ac:	685b      	ldr	r3, [r3, #4]
 80884ae:	e7f9      	b.n	80884a4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
 80884b0:	4618      	mov	r0, r3
 80884b2:	4770      	bx	lr

080884b4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80884b4:	68c3      	ldr	r3, [r0, #12]
 80884b6:	b123      	cbz	r3, 80884c2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80884b8:	4618      	mov	r0, r3
 80884ba:	689b      	ldr	r3, [r3, #8]
 80884bc:	2b00      	cmp	r3, #0
 80884be:	d1fb      	bne.n	80884b8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80884c0:	e00a      	b.n	80884d8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 80884c2:	6843      	ldr	r3, [r0, #4]
 80884c4:	68da      	ldr	r2, [r3, #12]
 80884c6:	4282      	cmp	r2, r0
 80884c8:	d102      	bne.n	80884d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80884ca:	4618      	mov	r0, r3
 80884cc:	685b      	ldr	r3, [r3, #4]
 80884ce:	e7f9      	b.n	80884c4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80884d0:	68c2      	ldr	r2, [r0, #12]
 80884d2:	4293      	cmp	r3, r2
 80884d4:	bf18      	it	ne
 80884d6:	4618      	movne	r0, r3
 80884d8:	4770      	bx	lr

080884da <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80884da:	f7ff bfd4 	b.w	8088486 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080884de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80884de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80884e2:	461f      	mov	r7, r3
 80884e4:	f103 0904 	add.w	r9, r3, #4
 80884e8:	2300      	movs	r3, #0
 80884ea:	460c      	mov	r4, r1
 80884ec:	604a      	str	r2, [r1, #4]
 80884ee:	608b      	str	r3, [r1, #8]
 80884f0:	60cb      	str	r3, [r1, #12]
 80884f2:	700b      	strb	r3, [r1, #0]
 80884f4:	b168      	cbz	r0, 8088512 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
 80884f6:	4297      	cmp	r7, r2
 80884f8:	6091      	str	r1, [r2, #8]
 80884fa:	d101      	bne.n	8088500 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80884fc:	6079      	str	r1, [r7, #4]
 80884fe:	e00c      	b.n	808851a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
 8088500:	68bb      	ldr	r3, [r7, #8]
 8088502:	429a      	cmp	r2, r3
 8088504:	bf08      	it	eq
 8088506:	60b9      	streq	r1, [r7, #8]
 8088508:	f04f 0801 	mov.w	r8, #1
 808850c:	f04f 0a00 	mov.w	sl, #0
 8088510:	e017      	b.n	8088542 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8088512:	60d1      	str	r1, [r2, #12]
 8088514:	68fb      	ldr	r3, [r7, #12]
 8088516:	429a      	cmp	r2, r3
 8088518:	d1f6      	bne.n	8088508 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 808851a:	60fc      	str	r4, [r7, #12]
 808851c:	e7f4      	b.n	8088508 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 808851e:	6866      	ldr	r6, [r4, #4]
 8088520:	7832      	ldrb	r2, [r6, #0]
 8088522:	2a00      	cmp	r2, #0
 8088524:	d13a      	bne.n	808859c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 8088526:	6875      	ldr	r5, [r6, #4]
 8088528:	68ab      	ldr	r3, [r5, #8]
 808852a:	429e      	cmp	r6, r3
 808852c:	d11f      	bne.n	808856e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 808852e:	68eb      	ldr	r3, [r5, #12]
 8088530:	b15b      	cbz	r3, 808854a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8088532:	781a      	ldrb	r2, [r3, #0]
 8088534:	b94a      	cbnz	r2, 808854a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8088536:	f886 8000 	strb.w	r8, [r6]
 808853a:	f883 8000 	strb.w	r8, [r3]
 808853e:	702a      	strb	r2, [r5, #0]
 8088540:	462c      	mov	r4, r5
 8088542:	687b      	ldr	r3, [r7, #4]
 8088544:	429c      	cmp	r4, r3
 8088546:	d1ea      	bne.n	808851e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8088548:	e028      	b.n	808859c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 808854a:	68f3      	ldr	r3, [r6, #12]
 808854c:	429c      	cmp	r4, r3
 808854e:	d104      	bne.n	808855a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8088550:	4649      	mov	r1, r9
 8088552:	4630      	mov	r0, r6
 8088554:	f7ff ff6d 	bl	8088432 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8088558:	4634      	mov	r4, r6
 808855a:	6863      	ldr	r3, [r4, #4]
 808855c:	4649      	mov	r1, r9
 808855e:	f883 8000 	strb.w	r8, [r3]
 8088562:	4628      	mov	r0, r5
 8088564:	f885 a000 	strb.w	sl, [r5]
 8088568:	f7ff ff78 	bl	808845c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 808856c:	e014      	b.n	8088598 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
 808856e:	b113      	cbz	r3, 8088576 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 8088570:	781a      	ldrb	r2, [r3, #0]
 8088572:	2a00      	cmp	r2, #0
 8088574:	d0df      	beq.n	8088536 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8088576:	68b3      	ldr	r3, [r6, #8]
 8088578:	429c      	cmp	r4, r3
 808857a:	d104      	bne.n	8088586 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 808857c:	4649      	mov	r1, r9
 808857e:	4630      	mov	r0, r6
 8088580:	f7ff ff6c 	bl	808845c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8088584:	4634      	mov	r4, r6
 8088586:	6863      	ldr	r3, [r4, #4]
 8088588:	4649      	mov	r1, r9
 808858a:	f883 8000 	strb.w	r8, [r3]
 808858e:	4628      	mov	r0, r5
 8088590:	f885 a000 	strb.w	sl, [r5]
 8088594:	f7ff ff4d 	bl	8088432 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8088598:	4625      	mov	r5, r4
 808859a:	e7d1      	b.n	8088540 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
 808859c:	2201      	movs	r2, #1
 808859e:	701a      	strb	r2, [r3, #0]
 80885a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080885a4 <_ZSt25__throw_bad_function_callv>:
 80885a4:	b508      	push	{r3, lr}
 80885a6:	f7fd f9c7 	bl	8085938 <abort>
	...

080885ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80885ac:	4b18      	ldr	r3, [pc, #96]	; (8088610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80885ae:	681a      	ldr	r2, [r3, #0]
 80885b0:	07d1      	lsls	r1, r2, #31
 80885b2:	bf5c      	itt	pl
 80885b4:	2201      	movpl	r2, #1
 80885b6:	601a      	strpl	r2, [r3, #0]
 80885b8:	4b16      	ldr	r3, [pc, #88]	; (8088614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80885ba:	681a      	ldr	r2, [r3, #0]
 80885bc:	07d2      	lsls	r2, r2, #31
 80885be:	bf5c      	itt	pl
 80885c0:	2201      	movpl	r2, #1
 80885c2:	601a      	strpl	r2, [r3, #0]
 80885c4:	4b14      	ldr	r3, [pc, #80]	; (8088618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80885c6:	681a      	ldr	r2, [r3, #0]
 80885c8:	07d0      	lsls	r0, r2, #31
 80885ca:	bf5c      	itt	pl
 80885cc:	2201      	movpl	r2, #1
 80885ce:	601a      	strpl	r2, [r3, #0]
 80885d0:	4b12      	ldr	r3, [pc, #72]	; (808861c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80885d2:	681a      	ldr	r2, [r3, #0]
 80885d4:	07d1      	lsls	r1, r2, #31
 80885d6:	bf5c      	itt	pl
 80885d8:	2201      	movpl	r2, #1
 80885da:	601a      	strpl	r2, [r3, #0]
 80885dc:	4b10      	ldr	r3, [pc, #64]	; (8088620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80885de:	681a      	ldr	r2, [r3, #0]
 80885e0:	07d2      	lsls	r2, r2, #31
 80885e2:	bf5c      	itt	pl
 80885e4:	2201      	movpl	r2, #1
 80885e6:	601a      	strpl	r2, [r3, #0]
 80885e8:	4b0e      	ldr	r3, [pc, #56]	; (8088624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80885ea:	681a      	ldr	r2, [r3, #0]
 80885ec:	07d0      	lsls	r0, r2, #31
 80885ee:	bf5c      	itt	pl
 80885f0:	2201      	movpl	r2, #1
 80885f2:	601a      	strpl	r2, [r3, #0]
 80885f4:	4b0c      	ldr	r3, [pc, #48]	; (8088628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80885f6:	681a      	ldr	r2, [r3, #0]
 80885f8:	07d1      	lsls	r1, r2, #31
 80885fa:	bf5c      	itt	pl
 80885fc:	2201      	movpl	r2, #1
 80885fe:	601a      	strpl	r2, [r3, #0]
 8088600:	4b0a      	ldr	r3, [pc, #40]	; (808862c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8088602:	681a      	ldr	r2, [r3, #0]
 8088604:	07d2      	lsls	r2, r2, #31
 8088606:	bf5c      	itt	pl
 8088608:	2201      	movpl	r2, #1
 808860a:	601a      	strpl	r2, [r3, #0]
 808860c:	4770      	bx	lr
 808860e:	bf00      	nop
 8088610:	20000f0c 	.word	0x20000f0c
 8088614:	20000f08 	.word	0x20000f08
 8088618:	20000f04 	.word	0x20000f04
 808861c:	20000f00 	.word	0x20000f00
 8088620:	20000efc 	.word	0x20000efc
 8088624:	20000ef8 	.word	0x20000ef8
 8088628:	20000ef4 	.word	0x20000ef4
 808862c:	20000ef0 	.word	0x20000ef0

08088630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8088630:	4b24      	ldr	r3, [pc, #144]	; (80886c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8088632:	681a      	ldr	r2, [r3, #0]
 8088634:	07d0      	lsls	r0, r2, #31
 8088636:	bf5c      	itt	pl
 8088638:	2201      	movpl	r2, #1
 808863a:	601a      	strpl	r2, [r3, #0]
 808863c:	4b22      	ldr	r3, [pc, #136]	; (80886c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808863e:	681a      	ldr	r2, [r3, #0]
 8088640:	07d1      	lsls	r1, r2, #31
 8088642:	bf5c      	itt	pl
 8088644:	2201      	movpl	r2, #1
 8088646:	601a      	strpl	r2, [r3, #0]
 8088648:	4b20      	ldr	r3, [pc, #128]	; (80886cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808864a:	681a      	ldr	r2, [r3, #0]
 808864c:	07d2      	lsls	r2, r2, #31
 808864e:	bf5c      	itt	pl
 8088650:	2201      	movpl	r2, #1
 8088652:	601a      	strpl	r2, [r3, #0]
 8088654:	4b1e      	ldr	r3, [pc, #120]	; (80886d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8088656:	681a      	ldr	r2, [r3, #0]
 8088658:	07d0      	lsls	r0, r2, #31
 808865a:	bf5c      	itt	pl
 808865c:	2201      	movpl	r2, #1
 808865e:	601a      	strpl	r2, [r3, #0]
 8088660:	4b1c      	ldr	r3, [pc, #112]	; (80886d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8088662:	681a      	ldr	r2, [r3, #0]
 8088664:	07d1      	lsls	r1, r2, #31
 8088666:	bf5c      	itt	pl
 8088668:	2201      	movpl	r2, #1
 808866a:	601a      	strpl	r2, [r3, #0]
 808866c:	4b1a      	ldr	r3, [pc, #104]	; (80886d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808866e:	681a      	ldr	r2, [r3, #0]
 8088670:	07d2      	lsls	r2, r2, #31
 8088672:	bf5c      	itt	pl
 8088674:	2201      	movpl	r2, #1
 8088676:	601a      	strpl	r2, [r3, #0]
 8088678:	4b18      	ldr	r3, [pc, #96]	; (80886dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808867a:	681a      	ldr	r2, [r3, #0]
 808867c:	07d0      	lsls	r0, r2, #31
 808867e:	bf5c      	itt	pl
 8088680:	2201      	movpl	r2, #1
 8088682:	601a      	strpl	r2, [r3, #0]
 8088684:	4b16      	ldr	r3, [pc, #88]	; (80886e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8088686:	681a      	ldr	r2, [r3, #0]
 8088688:	07d1      	lsls	r1, r2, #31
 808868a:	bf5c      	itt	pl
 808868c:	2201      	movpl	r2, #1
 808868e:	601a      	strpl	r2, [r3, #0]
 8088690:	4b14      	ldr	r3, [pc, #80]	; (80886e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8088692:	681a      	ldr	r2, [r3, #0]
 8088694:	07d2      	lsls	r2, r2, #31
 8088696:	bf5c      	itt	pl
 8088698:	2201      	movpl	r2, #1
 808869a:	601a      	strpl	r2, [r3, #0]
 808869c:	4b12      	ldr	r3, [pc, #72]	; (80886e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808869e:	681a      	ldr	r2, [r3, #0]
 80886a0:	07d0      	lsls	r0, r2, #31
 80886a2:	bf5c      	itt	pl
 80886a4:	2201      	movpl	r2, #1
 80886a6:	601a      	strpl	r2, [r3, #0]
 80886a8:	4b10      	ldr	r3, [pc, #64]	; (80886ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80886aa:	681a      	ldr	r2, [r3, #0]
 80886ac:	07d1      	lsls	r1, r2, #31
 80886ae:	bf5c      	itt	pl
 80886b0:	2201      	movpl	r2, #1
 80886b2:	601a      	strpl	r2, [r3, #0]
 80886b4:	4b0e      	ldr	r3, [pc, #56]	; (80886f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80886b6:	681a      	ldr	r2, [r3, #0]
 80886b8:	07d2      	lsls	r2, r2, #31
 80886ba:	bf5c      	itt	pl
 80886bc:	2201      	movpl	r2, #1
 80886be:	601a      	strpl	r2, [r3, #0]
 80886c0:	4770      	bx	lr
 80886c2:	bf00      	nop
 80886c4:	20000f3c 	.word	0x20000f3c
 80886c8:	20000f38 	.word	0x20000f38
 80886cc:	20000f34 	.word	0x20000f34
 80886d0:	20000f30 	.word	0x20000f30
 80886d4:	20000f2c 	.word	0x20000f2c
 80886d8:	20000f28 	.word	0x20000f28
 80886dc:	20000f24 	.word	0x20000f24
 80886e0:	20000f20 	.word	0x20000f20
 80886e4:	20000f1c 	.word	0x20000f1c
 80886e8:	20000f18 	.word	0x20000f18
 80886ec:	20000f14 	.word	0x20000f14
 80886f0:	20000f10 	.word	0x20000f10

080886f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80886f4:	4b24      	ldr	r3, [pc, #144]	; (8088788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80886f6:	681a      	ldr	r2, [r3, #0]
 80886f8:	07d0      	lsls	r0, r2, #31
 80886fa:	bf5c      	itt	pl
 80886fc:	2201      	movpl	r2, #1
 80886fe:	601a      	strpl	r2, [r3, #0]
 8088700:	4b22      	ldr	r3, [pc, #136]	; (808878c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8088702:	681a      	ldr	r2, [r3, #0]
 8088704:	07d1      	lsls	r1, r2, #31
 8088706:	bf5c      	itt	pl
 8088708:	2201      	movpl	r2, #1
 808870a:	601a      	strpl	r2, [r3, #0]
 808870c:	4b20      	ldr	r3, [pc, #128]	; (8088790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808870e:	681a      	ldr	r2, [r3, #0]
 8088710:	07d2      	lsls	r2, r2, #31
 8088712:	bf5c      	itt	pl
 8088714:	2201      	movpl	r2, #1
 8088716:	601a      	strpl	r2, [r3, #0]
 8088718:	4b1e      	ldr	r3, [pc, #120]	; (8088794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808871a:	681a      	ldr	r2, [r3, #0]
 808871c:	07d0      	lsls	r0, r2, #31
 808871e:	bf5c      	itt	pl
 8088720:	2201      	movpl	r2, #1
 8088722:	601a      	strpl	r2, [r3, #0]
 8088724:	4b1c      	ldr	r3, [pc, #112]	; (8088798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8088726:	681a      	ldr	r2, [r3, #0]
 8088728:	07d1      	lsls	r1, r2, #31
 808872a:	bf5c      	itt	pl
 808872c:	2201      	movpl	r2, #1
 808872e:	601a      	strpl	r2, [r3, #0]
 8088730:	4b1a      	ldr	r3, [pc, #104]	; (808879c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8088732:	681a      	ldr	r2, [r3, #0]
 8088734:	07d2      	lsls	r2, r2, #31
 8088736:	bf5c      	itt	pl
 8088738:	2201      	movpl	r2, #1
 808873a:	601a      	strpl	r2, [r3, #0]
 808873c:	4b18      	ldr	r3, [pc, #96]	; (80887a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808873e:	681a      	ldr	r2, [r3, #0]
 8088740:	07d0      	lsls	r0, r2, #31
 8088742:	bf5c      	itt	pl
 8088744:	2201      	movpl	r2, #1
 8088746:	601a      	strpl	r2, [r3, #0]
 8088748:	4b16      	ldr	r3, [pc, #88]	; (80887a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808874a:	681a      	ldr	r2, [r3, #0]
 808874c:	07d1      	lsls	r1, r2, #31
 808874e:	bf5c      	itt	pl
 8088750:	2201      	movpl	r2, #1
 8088752:	601a      	strpl	r2, [r3, #0]
 8088754:	4b14      	ldr	r3, [pc, #80]	; (80887a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8088756:	681a      	ldr	r2, [r3, #0]
 8088758:	07d2      	lsls	r2, r2, #31
 808875a:	bf5c      	itt	pl
 808875c:	2201      	movpl	r2, #1
 808875e:	601a      	strpl	r2, [r3, #0]
 8088760:	4b12      	ldr	r3, [pc, #72]	; (80887ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8088762:	681a      	ldr	r2, [r3, #0]
 8088764:	07d0      	lsls	r0, r2, #31
 8088766:	bf5c      	itt	pl
 8088768:	2201      	movpl	r2, #1
 808876a:	601a      	strpl	r2, [r3, #0]
 808876c:	4b10      	ldr	r3, [pc, #64]	; (80887b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808876e:	681a      	ldr	r2, [r3, #0]
 8088770:	07d1      	lsls	r1, r2, #31
 8088772:	bf5c      	itt	pl
 8088774:	2201      	movpl	r2, #1
 8088776:	601a      	strpl	r2, [r3, #0]
 8088778:	4b0e      	ldr	r3, [pc, #56]	; (80887b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808877a:	681a      	ldr	r2, [r3, #0]
 808877c:	07d2      	lsls	r2, r2, #31
 808877e:	bf5c      	itt	pl
 8088780:	2201      	movpl	r2, #1
 8088782:	601a      	strpl	r2, [r3, #0]
 8088784:	4770      	bx	lr
 8088786:	bf00      	nop
 8088788:	20000f6c 	.word	0x20000f6c
 808878c:	20000f68 	.word	0x20000f68
 8088790:	20000f64 	.word	0x20000f64
 8088794:	20000f60 	.word	0x20000f60
 8088798:	20000f5c 	.word	0x20000f5c
 808879c:	20000f58 	.word	0x20000f58
 80887a0:	20000f54 	.word	0x20000f54
 80887a4:	20000f50 	.word	0x20000f50
 80887a8:	20000f4c 	.word	0x20000f4c
 80887ac:	20000f48 	.word	0x20000f48
 80887b0:	20000f44 	.word	0x20000f44
 80887b4:	20000f40 	.word	0x20000f40

080887b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80887b8:	4b18      	ldr	r3, [pc, #96]	; (808881c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80887ba:	681a      	ldr	r2, [r3, #0]
 80887bc:	07d1      	lsls	r1, r2, #31
 80887be:	bf5c      	itt	pl
 80887c0:	2201      	movpl	r2, #1
 80887c2:	601a      	strpl	r2, [r3, #0]
 80887c4:	4b16      	ldr	r3, [pc, #88]	; (8088820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80887c6:	681a      	ldr	r2, [r3, #0]
 80887c8:	07d2      	lsls	r2, r2, #31
 80887ca:	bf5c      	itt	pl
 80887cc:	2201      	movpl	r2, #1
 80887ce:	601a      	strpl	r2, [r3, #0]
 80887d0:	4b14      	ldr	r3, [pc, #80]	; (8088824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80887d2:	681a      	ldr	r2, [r3, #0]
 80887d4:	07d0      	lsls	r0, r2, #31
 80887d6:	bf5c      	itt	pl
 80887d8:	2201      	movpl	r2, #1
 80887da:	601a      	strpl	r2, [r3, #0]
 80887dc:	4b12      	ldr	r3, [pc, #72]	; (8088828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80887de:	681a      	ldr	r2, [r3, #0]
 80887e0:	07d1      	lsls	r1, r2, #31
 80887e2:	bf5c      	itt	pl
 80887e4:	2201      	movpl	r2, #1
 80887e6:	601a      	strpl	r2, [r3, #0]
 80887e8:	4b10      	ldr	r3, [pc, #64]	; (808882c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80887ea:	681a      	ldr	r2, [r3, #0]
 80887ec:	07d2      	lsls	r2, r2, #31
 80887ee:	bf5c      	itt	pl
 80887f0:	2201      	movpl	r2, #1
 80887f2:	601a      	strpl	r2, [r3, #0]
 80887f4:	4b0e      	ldr	r3, [pc, #56]	; (8088830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80887f6:	681a      	ldr	r2, [r3, #0]
 80887f8:	07d0      	lsls	r0, r2, #31
 80887fa:	bf5c      	itt	pl
 80887fc:	2201      	movpl	r2, #1
 80887fe:	601a      	strpl	r2, [r3, #0]
 8088800:	4b0c      	ldr	r3, [pc, #48]	; (8088834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8088802:	681a      	ldr	r2, [r3, #0]
 8088804:	07d1      	lsls	r1, r2, #31
 8088806:	bf5c      	itt	pl
 8088808:	2201      	movpl	r2, #1
 808880a:	601a      	strpl	r2, [r3, #0]
 808880c:	4b0a      	ldr	r3, [pc, #40]	; (8088838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808880e:	681a      	ldr	r2, [r3, #0]
 8088810:	07d2      	lsls	r2, r2, #31
 8088812:	bf5c      	itt	pl
 8088814:	2201      	movpl	r2, #1
 8088816:	601a      	strpl	r2, [r3, #0]
 8088818:	4770      	bx	lr
 808881a:	bf00      	nop
 808881c:	20000f8c 	.word	0x20000f8c
 8088820:	20000f88 	.word	0x20000f88
 8088824:	20000f84 	.word	0x20000f84
 8088828:	20000f80 	.word	0x20000f80
 808882c:	20000f7c 	.word	0x20000f7c
 8088830:	20000f78 	.word	0x20000f78
 8088834:	20000f74 	.word	0x20000f74
 8088838:	20000f70 	.word	0x20000f70

0808883c <__aeabi_drsub>:
 808883c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8088840:	e002      	b.n	8088848 <__adddf3>
 8088842:	bf00      	nop

08088844 <__aeabi_dsub>:
 8088844:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08088848 <__adddf3>:
 8088848:	b530      	push	{r4, r5, lr}
 808884a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808884e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8088852:	ea94 0f05 	teq	r4, r5
 8088856:	bf08      	it	eq
 8088858:	ea90 0f02 	teqeq	r0, r2
 808885c:	bf1f      	itttt	ne
 808885e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8088862:	ea55 0c02 	orrsne.w	ip, r5, r2
 8088866:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808886a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808886e:	f000 80e2 	beq.w	8088a36 <__adddf3+0x1ee>
 8088872:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8088876:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808887a:	bfb8      	it	lt
 808887c:	426d      	neglt	r5, r5
 808887e:	dd0c      	ble.n	808889a <__adddf3+0x52>
 8088880:	442c      	add	r4, r5
 8088882:	ea80 0202 	eor.w	r2, r0, r2
 8088886:	ea81 0303 	eor.w	r3, r1, r3
 808888a:	ea82 0000 	eor.w	r0, r2, r0
 808888e:	ea83 0101 	eor.w	r1, r3, r1
 8088892:	ea80 0202 	eor.w	r2, r0, r2
 8088896:	ea81 0303 	eor.w	r3, r1, r3
 808889a:	2d36      	cmp	r5, #54	; 0x36
 808889c:	bf88      	it	hi
 808889e:	bd30      	pophi	{r4, r5, pc}
 80888a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80888a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80888a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80888ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80888b0:	d002      	beq.n	80888b8 <__adddf3+0x70>
 80888b2:	4240      	negs	r0, r0
 80888b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80888b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80888bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80888c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80888c4:	d002      	beq.n	80888cc <__adddf3+0x84>
 80888c6:	4252      	negs	r2, r2
 80888c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80888cc:	ea94 0f05 	teq	r4, r5
 80888d0:	f000 80a7 	beq.w	8088a22 <__adddf3+0x1da>
 80888d4:	f1a4 0401 	sub.w	r4, r4, #1
 80888d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80888dc:	db0d      	blt.n	80888fa <__adddf3+0xb2>
 80888de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80888e2:	fa22 f205 	lsr.w	r2, r2, r5
 80888e6:	1880      	adds	r0, r0, r2
 80888e8:	f141 0100 	adc.w	r1, r1, #0
 80888ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80888f0:	1880      	adds	r0, r0, r2
 80888f2:	fa43 f305 	asr.w	r3, r3, r5
 80888f6:	4159      	adcs	r1, r3
 80888f8:	e00e      	b.n	8088918 <__adddf3+0xd0>
 80888fa:	f1a5 0520 	sub.w	r5, r5, #32
 80888fe:	f10e 0e20 	add.w	lr, lr, #32
 8088902:	2a01      	cmp	r2, #1
 8088904:	fa03 fc0e 	lsl.w	ip, r3, lr
 8088908:	bf28      	it	cs
 808890a:	f04c 0c02 	orrcs.w	ip, ip, #2
 808890e:	fa43 f305 	asr.w	r3, r3, r5
 8088912:	18c0      	adds	r0, r0, r3
 8088914:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8088918:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808891c:	d507      	bpl.n	808892e <__adddf3+0xe6>
 808891e:	f04f 0e00 	mov.w	lr, #0
 8088922:	f1dc 0c00 	rsbs	ip, ip, #0
 8088926:	eb7e 0000 	sbcs.w	r0, lr, r0
 808892a:	eb6e 0101 	sbc.w	r1, lr, r1
 808892e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8088932:	d31b      	bcc.n	808896c <__adddf3+0x124>
 8088934:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8088938:	d30c      	bcc.n	8088954 <__adddf3+0x10c>
 808893a:	0849      	lsrs	r1, r1, #1
 808893c:	ea5f 0030 	movs.w	r0, r0, rrx
 8088940:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8088944:	f104 0401 	add.w	r4, r4, #1
 8088948:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808894c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8088950:	f080 809a 	bcs.w	8088a88 <__adddf3+0x240>
 8088954:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8088958:	bf08      	it	eq
 808895a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808895e:	f150 0000 	adcs.w	r0, r0, #0
 8088962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8088966:	ea41 0105 	orr.w	r1, r1, r5
 808896a:	bd30      	pop	{r4, r5, pc}
 808896c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8088970:	4140      	adcs	r0, r0
 8088972:	eb41 0101 	adc.w	r1, r1, r1
 8088976:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808897a:	f1a4 0401 	sub.w	r4, r4, #1
 808897e:	d1e9      	bne.n	8088954 <__adddf3+0x10c>
 8088980:	f091 0f00 	teq	r1, #0
 8088984:	bf04      	itt	eq
 8088986:	4601      	moveq	r1, r0
 8088988:	2000      	moveq	r0, #0
 808898a:	fab1 f381 	clz	r3, r1
 808898e:	bf08      	it	eq
 8088990:	3320      	addeq	r3, #32
 8088992:	f1a3 030b 	sub.w	r3, r3, #11
 8088996:	f1b3 0220 	subs.w	r2, r3, #32
 808899a:	da0c      	bge.n	80889b6 <__adddf3+0x16e>
 808899c:	320c      	adds	r2, #12
 808899e:	dd08      	ble.n	80889b2 <__adddf3+0x16a>
 80889a0:	f102 0c14 	add.w	ip, r2, #20
 80889a4:	f1c2 020c 	rsb	r2, r2, #12
 80889a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80889ac:	fa21 f102 	lsr.w	r1, r1, r2
 80889b0:	e00c      	b.n	80889cc <__adddf3+0x184>
 80889b2:	f102 0214 	add.w	r2, r2, #20
 80889b6:	bfd8      	it	le
 80889b8:	f1c2 0c20 	rsble	ip, r2, #32
 80889bc:	fa01 f102 	lsl.w	r1, r1, r2
 80889c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80889c4:	bfdc      	itt	le
 80889c6:	ea41 010c 	orrle.w	r1, r1, ip
 80889ca:	4090      	lslle	r0, r2
 80889cc:	1ae4      	subs	r4, r4, r3
 80889ce:	bfa2      	ittt	ge
 80889d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80889d4:	4329      	orrge	r1, r5
 80889d6:	bd30      	popge	{r4, r5, pc}
 80889d8:	ea6f 0404 	mvn.w	r4, r4
 80889dc:	3c1f      	subs	r4, #31
 80889de:	da1c      	bge.n	8088a1a <__adddf3+0x1d2>
 80889e0:	340c      	adds	r4, #12
 80889e2:	dc0e      	bgt.n	8088a02 <__adddf3+0x1ba>
 80889e4:	f104 0414 	add.w	r4, r4, #20
 80889e8:	f1c4 0220 	rsb	r2, r4, #32
 80889ec:	fa20 f004 	lsr.w	r0, r0, r4
 80889f0:	fa01 f302 	lsl.w	r3, r1, r2
 80889f4:	ea40 0003 	orr.w	r0, r0, r3
 80889f8:	fa21 f304 	lsr.w	r3, r1, r4
 80889fc:	ea45 0103 	orr.w	r1, r5, r3
 8088a00:	bd30      	pop	{r4, r5, pc}
 8088a02:	f1c4 040c 	rsb	r4, r4, #12
 8088a06:	f1c4 0220 	rsb	r2, r4, #32
 8088a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8088a0e:	fa01 f304 	lsl.w	r3, r1, r4
 8088a12:	ea40 0003 	orr.w	r0, r0, r3
 8088a16:	4629      	mov	r1, r5
 8088a18:	bd30      	pop	{r4, r5, pc}
 8088a1a:	fa21 f004 	lsr.w	r0, r1, r4
 8088a1e:	4629      	mov	r1, r5
 8088a20:	bd30      	pop	{r4, r5, pc}
 8088a22:	f094 0f00 	teq	r4, #0
 8088a26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8088a2a:	bf06      	itte	eq
 8088a2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8088a30:	3401      	addeq	r4, #1
 8088a32:	3d01      	subne	r5, #1
 8088a34:	e74e      	b.n	80888d4 <__adddf3+0x8c>
 8088a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088a3a:	bf18      	it	ne
 8088a3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8088a40:	d029      	beq.n	8088a96 <__adddf3+0x24e>
 8088a42:	ea94 0f05 	teq	r4, r5
 8088a46:	bf08      	it	eq
 8088a48:	ea90 0f02 	teqeq	r0, r2
 8088a4c:	d005      	beq.n	8088a5a <__adddf3+0x212>
 8088a4e:	ea54 0c00 	orrs.w	ip, r4, r0
 8088a52:	bf04      	itt	eq
 8088a54:	4619      	moveq	r1, r3
 8088a56:	4610      	moveq	r0, r2
 8088a58:	bd30      	pop	{r4, r5, pc}
 8088a5a:	ea91 0f03 	teq	r1, r3
 8088a5e:	bf1e      	ittt	ne
 8088a60:	2100      	movne	r1, #0
 8088a62:	2000      	movne	r0, #0
 8088a64:	bd30      	popne	{r4, r5, pc}
 8088a66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8088a6a:	d105      	bne.n	8088a78 <__adddf3+0x230>
 8088a6c:	0040      	lsls	r0, r0, #1
 8088a6e:	4149      	adcs	r1, r1
 8088a70:	bf28      	it	cs
 8088a72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8088a76:	bd30      	pop	{r4, r5, pc}
 8088a78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8088a7c:	bf3c      	itt	cc
 8088a7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8088a82:	bd30      	popcc	{r4, r5, pc}
 8088a84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088a88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8088a8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088a90:	f04f 0000 	mov.w	r0, #0
 8088a94:	bd30      	pop	{r4, r5, pc}
 8088a96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088a9a:	bf1a      	itte	ne
 8088a9c:	4619      	movne	r1, r3
 8088a9e:	4610      	movne	r0, r2
 8088aa0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8088aa4:	bf1c      	itt	ne
 8088aa6:	460b      	movne	r3, r1
 8088aa8:	4602      	movne	r2, r0
 8088aaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088aae:	bf06      	itte	eq
 8088ab0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8088ab4:	ea91 0f03 	teqeq	r1, r3
 8088ab8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8088abc:	bd30      	pop	{r4, r5, pc}
 8088abe:	bf00      	nop

08088ac0 <__aeabi_ui2d>:
 8088ac0:	f090 0f00 	teq	r0, #0
 8088ac4:	bf04      	itt	eq
 8088ac6:	2100      	moveq	r1, #0
 8088ac8:	4770      	bxeq	lr
 8088aca:	b530      	push	{r4, r5, lr}
 8088acc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088ad0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088ad4:	f04f 0500 	mov.w	r5, #0
 8088ad8:	f04f 0100 	mov.w	r1, #0
 8088adc:	e750      	b.n	8088980 <__adddf3+0x138>
 8088ade:	bf00      	nop

08088ae0 <__aeabi_i2d>:
 8088ae0:	f090 0f00 	teq	r0, #0
 8088ae4:	bf04      	itt	eq
 8088ae6:	2100      	moveq	r1, #0
 8088ae8:	4770      	bxeq	lr
 8088aea:	b530      	push	{r4, r5, lr}
 8088aec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088af0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088af4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8088af8:	bf48      	it	mi
 8088afa:	4240      	negmi	r0, r0
 8088afc:	f04f 0100 	mov.w	r1, #0
 8088b00:	e73e      	b.n	8088980 <__adddf3+0x138>
 8088b02:	bf00      	nop

08088b04 <__aeabi_f2d>:
 8088b04:	0042      	lsls	r2, r0, #1
 8088b06:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8088b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8088b0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8088b12:	bf1f      	itttt	ne
 8088b14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8088b18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088b1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8088b20:	4770      	bxne	lr
 8088b22:	f092 0f00 	teq	r2, #0
 8088b26:	bf14      	ite	ne
 8088b28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088b2c:	4770      	bxeq	lr
 8088b2e:	b530      	push	{r4, r5, lr}
 8088b30:	f44f 7460 	mov.w	r4, #896	; 0x380
 8088b34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088b3c:	e720      	b.n	8088980 <__adddf3+0x138>
 8088b3e:	bf00      	nop

08088b40 <__aeabi_ul2d>:
 8088b40:	ea50 0201 	orrs.w	r2, r0, r1
 8088b44:	bf08      	it	eq
 8088b46:	4770      	bxeq	lr
 8088b48:	b530      	push	{r4, r5, lr}
 8088b4a:	f04f 0500 	mov.w	r5, #0
 8088b4e:	e00a      	b.n	8088b66 <__aeabi_l2d+0x16>

08088b50 <__aeabi_l2d>:
 8088b50:	ea50 0201 	orrs.w	r2, r0, r1
 8088b54:	bf08      	it	eq
 8088b56:	4770      	bxeq	lr
 8088b58:	b530      	push	{r4, r5, lr}
 8088b5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8088b5e:	d502      	bpl.n	8088b66 <__aeabi_l2d+0x16>
 8088b60:	4240      	negs	r0, r0
 8088b62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088b66:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088b6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088b6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8088b72:	f43f aedc 	beq.w	808892e <__adddf3+0xe6>
 8088b76:	f04f 0203 	mov.w	r2, #3
 8088b7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088b7e:	bf18      	it	ne
 8088b80:	3203      	addne	r2, #3
 8088b82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088b86:	bf18      	it	ne
 8088b88:	3203      	addne	r2, #3
 8088b8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8088b8e:	f1c2 0320 	rsb	r3, r2, #32
 8088b92:	fa00 fc03 	lsl.w	ip, r0, r3
 8088b96:	fa20 f002 	lsr.w	r0, r0, r2
 8088b9a:	fa01 fe03 	lsl.w	lr, r1, r3
 8088b9e:	ea40 000e 	orr.w	r0, r0, lr
 8088ba2:	fa21 f102 	lsr.w	r1, r1, r2
 8088ba6:	4414      	add	r4, r2
 8088ba8:	e6c1      	b.n	808892e <__adddf3+0xe6>
 8088baa:	bf00      	nop

08088bac <__aeabi_dmul>:
 8088bac:	b570      	push	{r4, r5, r6, lr}
 8088bae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088bb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088bb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088bba:	bf1d      	ittte	ne
 8088bbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8088bc0:	ea94 0f0c 	teqne	r4, ip
 8088bc4:	ea95 0f0c 	teqne	r5, ip
 8088bc8:	f000 f8de 	bleq	8088d88 <__aeabi_dmul+0x1dc>
 8088bcc:	442c      	add	r4, r5
 8088bce:	ea81 0603 	eor.w	r6, r1, r3
 8088bd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8088bd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8088bda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8088bde:	bf18      	it	ne
 8088be0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8088be4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8088bec:	d038      	beq.n	8088c60 <__aeabi_dmul+0xb4>
 8088bee:	fba0 ce02 	umull	ip, lr, r0, r2
 8088bf2:	f04f 0500 	mov.w	r5, #0
 8088bf6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8088bfa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8088bfe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8088c02:	f04f 0600 	mov.w	r6, #0
 8088c06:	fbe1 5603 	umlal	r5, r6, r1, r3
 8088c0a:	f09c 0f00 	teq	ip, #0
 8088c0e:	bf18      	it	ne
 8088c10:	f04e 0e01 	orrne.w	lr, lr, #1
 8088c14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8088c18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8088c1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8088c20:	d204      	bcs.n	8088c2c <__aeabi_dmul+0x80>
 8088c22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8088c26:	416d      	adcs	r5, r5
 8088c28:	eb46 0606 	adc.w	r6, r6, r6
 8088c2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8088c30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8088c34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8088c38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8088c3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8088c40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8088c44:	bf88      	it	hi
 8088c46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088c4a:	d81e      	bhi.n	8088c8a <__aeabi_dmul+0xde>
 8088c4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8088c50:	bf08      	it	eq
 8088c52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8088c56:	f150 0000 	adcs.w	r0, r0, #0
 8088c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8088c5e:	bd70      	pop	{r4, r5, r6, pc}
 8088c60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8088c64:	ea46 0101 	orr.w	r1, r6, r1
 8088c68:	ea40 0002 	orr.w	r0, r0, r2
 8088c6c:	ea81 0103 	eor.w	r1, r1, r3
 8088c70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8088c74:	bfc2      	ittt	gt
 8088c76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088c7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088c7e:	bd70      	popgt	{r4, r5, r6, pc}
 8088c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088c84:	f04f 0e00 	mov.w	lr, #0
 8088c88:	3c01      	subs	r4, #1
 8088c8a:	f300 80ab 	bgt.w	8088de4 <__aeabi_dmul+0x238>
 8088c8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8088c92:	bfde      	ittt	le
 8088c94:	2000      	movle	r0, #0
 8088c96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8088c9a:	bd70      	pople	{r4, r5, r6, pc}
 8088c9c:	f1c4 0400 	rsb	r4, r4, #0
 8088ca0:	3c20      	subs	r4, #32
 8088ca2:	da35      	bge.n	8088d10 <__aeabi_dmul+0x164>
 8088ca4:	340c      	adds	r4, #12
 8088ca6:	dc1b      	bgt.n	8088ce0 <__aeabi_dmul+0x134>
 8088ca8:	f104 0414 	add.w	r4, r4, #20
 8088cac:	f1c4 0520 	rsb	r5, r4, #32
 8088cb0:	fa00 f305 	lsl.w	r3, r0, r5
 8088cb4:	fa20 f004 	lsr.w	r0, r0, r4
 8088cb8:	fa01 f205 	lsl.w	r2, r1, r5
 8088cbc:	ea40 0002 	orr.w	r0, r0, r2
 8088cc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8088cc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088ccc:	fa21 f604 	lsr.w	r6, r1, r4
 8088cd0:	eb42 0106 	adc.w	r1, r2, r6
 8088cd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088cd8:	bf08      	it	eq
 8088cda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088cde:	bd70      	pop	{r4, r5, r6, pc}
 8088ce0:	f1c4 040c 	rsb	r4, r4, #12
 8088ce4:	f1c4 0520 	rsb	r5, r4, #32
 8088ce8:	fa00 f304 	lsl.w	r3, r0, r4
 8088cec:	fa20 f005 	lsr.w	r0, r0, r5
 8088cf0:	fa01 f204 	lsl.w	r2, r1, r4
 8088cf4:	ea40 0002 	orr.w	r0, r0, r2
 8088cf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088cfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088d00:	f141 0100 	adc.w	r1, r1, #0
 8088d04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088d08:	bf08      	it	eq
 8088d0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088d0e:	bd70      	pop	{r4, r5, r6, pc}
 8088d10:	f1c4 0520 	rsb	r5, r4, #32
 8088d14:	fa00 f205 	lsl.w	r2, r0, r5
 8088d18:	ea4e 0e02 	orr.w	lr, lr, r2
 8088d1c:	fa20 f304 	lsr.w	r3, r0, r4
 8088d20:	fa01 f205 	lsl.w	r2, r1, r5
 8088d24:	ea43 0302 	orr.w	r3, r3, r2
 8088d28:	fa21 f004 	lsr.w	r0, r1, r4
 8088d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088d30:	fa21 f204 	lsr.w	r2, r1, r4
 8088d34:	ea20 0002 	bic.w	r0, r0, r2
 8088d38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8088d3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088d40:	bf08      	it	eq
 8088d42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088d46:	bd70      	pop	{r4, r5, r6, pc}
 8088d48:	f094 0f00 	teq	r4, #0
 8088d4c:	d10f      	bne.n	8088d6e <__aeabi_dmul+0x1c2>
 8088d4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8088d52:	0040      	lsls	r0, r0, #1
 8088d54:	eb41 0101 	adc.w	r1, r1, r1
 8088d58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088d5c:	bf08      	it	eq
 8088d5e:	3c01      	subeq	r4, #1
 8088d60:	d0f7      	beq.n	8088d52 <__aeabi_dmul+0x1a6>
 8088d62:	ea41 0106 	orr.w	r1, r1, r6
 8088d66:	f095 0f00 	teq	r5, #0
 8088d6a:	bf18      	it	ne
 8088d6c:	4770      	bxne	lr
 8088d6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8088d72:	0052      	lsls	r2, r2, #1
 8088d74:	eb43 0303 	adc.w	r3, r3, r3
 8088d78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8088d7c:	bf08      	it	eq
 8088d7e:	3d01      	subeq	r5, #1
 8088d80:	d0f7      	beq.n	8088d72 <__aeabi_dmul+0x1c6>
 8088d82:	ea43 0306 	orr.w	r3, r3, r6
 8088d86:	4770      	bx	lr
 8088d88:	ea94 0f0c 	teq	r4, ip
 8088d8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8088d90:	bf18      	it	ne
 8088d92:	ea95 0f0c 	teqne	r5, ip
 8088d96:	d00c      	beq.n	8088db2 <__aeabi_dmul+0x206>
 8088d98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088d9c:	bf18      	it	ne
 8088d9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088da2:	d1d1      	bne.n	8088d48 <__aeabi_dmul+0x19c>
 8088da4:	ea81 0103 	eor.w	r1, r1, r3
 8088da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088dac:	f04f 0000 	mov.w	r0, #0
 8088db0:	bd70      	pop	{r4, r5, r6, pc}
 8088db2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088db6:	bf06      	itte	eq
 8088db8:	4610      	moveq	r0, r2
 8088dba:	4619      	moveq	r1, r3
 8088dbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088dc0:	d019      	beq.n	8088df6 <__aeabi_dmul+0x24a>
 8088dc2:	ea94 0f0c 	teq	r4, ip
 8088dc6:	d102      	bne.n	8088dce <__aeabi_dmul+0x222>
 8088dc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8088dcc:	d113      	bne.n	8088df6 <__aeabi_dmul+0x24a>
 8088dce:	ea95 0f0c 	teq	r5, ip
 8088dd2:	d105      	bne.n	8088de0 <__aeabi_dmul+0x234>
 8088dd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8088dd8:	bf1c      	itt	ne
 8088dda:	4610      	movne	r0, r2
 8088ddc:	4619      	movne	r1, r3
 8088dde:	d10a      	bne.n	8088df6 <__aeabi_dmul+0x24a>
 8088de0:	ea81 0103 	eor.w	r1, r1, r3
 8088de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088de8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088dec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088df0:	f04f 0000 	mov.w	r0, #0
 8088df4:	bd70      	pop	{r4, r5, r6, pc}
 8088df6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088dfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8088dfe:	bd70      	pop	{r4, r5, r6, pc}

08088e00 <__aeabi_ddiv>:
 8088e00:	b570      	push	{r4, r5, r6, lr}
 8088e02:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088e06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088e0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088e0e:	bf1d      	ittte	ne
 8088e10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8088e14:	ea94 0f0c 	teqne	r4, ip
 8088e18:	ea95 0f0c 	teqne	r5, ip
 8088e1c:	f000 f8a7 	bleq	8088f6e <__aeabi_ddiv+0x16e>
 8088e20:	eba4 0405 	sub.w	r4, r4, r5
 8088e24:	ea81 0e03 	eor.w	lr, r1, r3
 8088e28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088e2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8088e30:	f000 8088 	beq.w	8088f44 <__aeabi_ddiv+0x144>
 8088e34:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088e38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8088e3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8088e40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8088e44:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8088e48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8088e4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8088e50:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8088e54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8088e58:	429d      	cmp	r5, r3
 8088e5a:	bf08      	it	eq
 8088e5c:	4296      	cmpeq	r6, r2
 8088e5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8088e62:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8088e66:	d202      	bcs.n	8088e6e <__aeabi_ddiv+0x6e>
 8088e68:	085b      	lsrs	r3, r3, #1
 8088e6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8088e6e:	1ab6      	subs	r6, r6, r2
 8088e70:	eb65 0503 	sbc.w	r5, r5, r3
 8088e74:	085b      	lsrs	r3, r3, #1
 8088e76:	ea4f 0232 	mov.w	r2, r2, rrx
 8088e7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8088e7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8088e82:	ebb6 0e02 	subs.w	lr, r6, r2
 8088e86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088e8a:	bf22      	ittt	cs
 8088e8c:	1ab6      	subcs	r6, r6, r2
 8088e8e:	4675      	movcs	r5, lr
 8088e90:	ea40 000c 	orrcs.w	r0, r0, ip
 8088e94:	085b      	lsrs	r3, r3, #1
 8088e96:	ea4f 0232 	mov.w	r2, r2, rrx
 8088e9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8088e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088ea2:	bf22      	ittt	cs
 8088ea4:	1ab6      	subcs	r6, r6, r2
 8088ea6:	4675      	movcs	r5, lr
 8088ea8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088eac:	085b      	lsrs	r3, r3, #1
 8088eae:	ea4f 0232 	mov.w	r2, r2, rrx
 8088eb2:	ebb6 0e02 	subs.w	lr, r6, r2
 8088eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088eba:	bf22      	ittt	cs
 8088ebc:	1ab6      	subcs	r6, r6, r2
 8088ebe:	4675      	movcs	r5, lr
 8088ec0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088ec4:	085b      	lsrs	r3, r3, #1
 8088ec6:	ea4f 0232 	mov.w	r2, r2, rrx
 8088eca:	ebb6 0e02 	subs.w	lr, r6, r2
 8088ece:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088ed2:	bf22      	ittt	cs
 8088ed4:	1ab6      	subcs	r6, r6, r2
 8088ed6:	4675      	movcs	r5, lr
 8088ed8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088edc:	ea55 0e06 	orrs.w	lr, r5, r6
 8088ee0:	d018      	beq.n	8088f14 <__aeabi_ddiv+0x114>
 8088ee2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8088ee6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8088eea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8088eee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8088ef2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8088ef6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8088efa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8088efe:	d1c0      	bne.n	8088e82 <__aeabi_ddiv+0x82>
 8088f00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088f04:	d10b      	bne.n	8088f1e <__aeabi_ddiv+0x11e>
 8088f06:	ea41 0100 	orr.w	r1, r1, r0
 8088f0a:	f04f 0000 	mov.w	r0, #0
 8088f0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8088f12:	e7b6      	b.n	8088e82 <__aeabi_ddiv+0x82>
 8088f14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088f18:	bf04      	itt	eq
 8088f1a:	4301      	orreq	r1, r0
 8088f1c:	2000      	moveq	r0, #0
 8088f1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8088f22:	bf88      	it	hi
 8088f24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088f28:	f63f aeaf 	bhi.w	8088c8a <__aeabi_dmul+0xde>
 8088f2c:	ebb5 0c03 	subs.w	ip, r5, r3
 8088f30:	bf04      	itt	eq
 8088f32:	ebb6 0c02 	subseq.w	ip, r6, r2
 8088f36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8088f3a:	f150 0000 	adcs.w	r0, r0, #0
 8088f3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8088f42:	bd70      	pop	{r4, r5, r6, pc}
 8088f44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8088f48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8088f4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8088f50:	bfc2      	ittt	gt
 8088f52:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088f56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088f5a:	bd70      	popgt	{r4, r5, r6, pc}
 8088f5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088f60:	f04f 0e00 	mov.w	lr, #0
 8088f64:	3c01      	subs	r4, #1
 8088f66:	e690      	b.n	8088c8a <__aeabi_dmul+0xde>
 8088f68:	ea45 0e06 	orr.w	lr, r5, r6
 8088f6c:	e68d      	b.n	8088c8a <__aeabi_dmul+0xde>
 8088f6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8088f72:	ea94 0f0c 	teq	r4, ip
 8088f76:	bf08      	it	eq
 8088f78:	ea95 0f0c 	teqeq	r5, ip
 8088f7c:	f43f af3b 	beq.w	8088df6 <__aeabi_dmul+0x24a>
 8088f80:	ea94 0f0c 	teq	r4, ip
 8088f84:	d10a      	bne.n	8088f9c <__aeabi_ddiv+0x19c>
 8088f86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088f8a:	f47f af34 	bne.w	8088df6 <__aeabi_dmul+0x24a>
 8088f8e:	ea95 0f0c 	teq	r5, ip
 8088f92:	f47f af25 	bne.w	8088de0 <__aeabi_dmul+0x234>
 8088f96:	4610      	mov	r0, r2
 8088f98:	4619      	mov	r1, r3
 8088f9a:	e72c      	b.n	8088df6 <__aeabi_dmul+0x24a>
 8088f9c:	ea95 0f0c 	teq	r5, ip
 8088fa0:	d106      	bne.n	8088fb0 <__aeabi_ddiv+0x1b0>
 8088fa2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088fa6:	f43f aefd 	beq.w	8088da4 <__aeabi_dmul+0x1f8>
 8088faa:	4610      	mov	r0, r2
 8088fac:	4619      	mov	r1, r3
 8088fae:	e722      	b.n	8088df6 <__aeabi_dmul+0x24a>
 8088fb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088fb4:	bf18      	it	ne
 8088fb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088fba:	f47f aec5 	bne.w	8088d48 <__aeabi_dmul+0x19c>
 8088fbe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8088fc2:	f47f af0d 	bne.w	8088de0 <__aeabi_dmul+0x234>
 8088fc6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8088fca:	f47f aeeb 	bne.w	8088da4 <__aeabi_dmul+0x1f8>
 8088fce:	e712      	b.n	8088df6 <__aeabi_dmul+0x24a>

08088fd0 <__gedf2>:
 8088fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8088fd4:	e006      	b.n	8088fe4 <__cmpdf2+0x4>
 8088fd6:	bf00      	nop

08088fd8 <__ledf2>:
 8088fd8:	f04f 0c01 	mov.w	ip, #1
 8088fdc:	e002      	b.n	8088fe4 <__cmpdf2+0x4>
 8088fde:	bf00      	nop

08088fe0 <__cmpdf2>:
 8088fe0:	f04f 0c01 	mov.w	ip, #1
 8088fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8088fe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088ff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8088ff4:	bf18      	it	ne
 8088ff6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8088ffa:	d01b      	beq.n	8089034 <__cmpdf2+0x54>
 8088ffc:	b001      	add	sp, #4
 8088ffe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8089002:	bf0c      	ite	eq
 8089004:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8089008:	ea91 0f03 	teqne	r1, r3
 808900c:	bf02      	ittt	eq
 808900e:	ea90 0f02 	teqeq	r0, r2
 8089012:	2000      	moveq	r0, #0
 8089014:	4770      	bxeq	lr
 8089016:	f110 0f00 	cmn.w	r0, #0
 808901a:	ea91 0f03 	teq	r1, r3
 808901e:	bf58      	it	pl
 8089020:	4299      	cmppl	r1, r3
 8089022:	bf08      	it	eq
 8089024:	4290      	cmpeq	r0, r2
 8089026:	bf2c      	ite	cs
 8089028:	17d8      	asrcs	r0, r3, #31
 808902a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808902e:	f040 0001 	orr.w	r0, r0, #1
 8089032:	4770      	bx	lr
 8089034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8089038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808903c:	d102      	bne.n	8089044 <__cmpdf2+0x64>
 808903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8089042:	d107      	bne.n	8089054 <__cmpdf2+0x74>
 8089044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8089048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808904c:	d1d6      	bne.n	8088ffc <__cmpdf2+0x1c>
 808904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8089052:	d0d3      	beq.n	8088ffc <__cmpdf2+0x1c>
 8089054:	f85d 0b04 	ldr.w	r0, [sp], #4
 8089058:	4770      	bx	lr
 808905a:	bf00      	nop

0808905c <__aeabi_cdrcmple>:
 808905c:	4684      	mov	ip, r0
 808905e:	4610      	mov	r0, r2
 8089060:	4662      	mov	r2, ip
 8089062:	468c      	mov	ip, r1
 8089064:	4619      	mov	r1, r3
 8089066:	4663      	mov	r3, ip
 8089068:	e000      	b.n	808906c <__aeabi_cdcmpeq>
 808906a:	bf00      	nop

0808906c <__aeabi_cdcmpeq>:
 808906c:	b501      	push	{r0, lr}
 808906e:	f7ff ffb7 	bl	8088fe0 <__cmpdf2>
 8089072:	2800      	cmp	r0, #0
 8089074:	bf48      	it	mi
 8089076:	f110 0f00 	cmnmi.w	r0, #0
 808907a:	bd01      	pop	{r0, pc}

0808907c <__aeabi_dcmpeq>:
 808907c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089080:	f7ff fff4 	bl	808906c <__aeabi_cdcmpeq>
 8089084:	bf0c      	ite	eq
 8089086:	2001      	moveq	r0, #1
 8089088:	2000      	movne	r0, #0
 808908a:	f85d fb08 	ldr.w	pc, [sp], #8
 808908e:	bf00      	nop

08089090 <__aeabi_dcmplt>:
 8089090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089094:	f7ff ffea 	bl	808906c <__aeabi_cdcmpeq>
 8089098:	bf34      	ite	cc
 808909a:	2001      	movcc	r0, #1
 808909c:	2000      	movcs	r0, #0
 808909e:	f85d fb08 	ldr.w	pc, [sp], #8
 80890a2:	bf00      	nop

080890a4 <__aeabi_dcmple>:
 80890a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890a8:	f7ff ffe0 	bl	808906c <__aeabi_cdcmpeq>
 80890ac:	bf94      	ite	ls
 80890ae:	2001      	movls	r0, #1
 80890b0:	2000      	movhi	r0, #0
 80890b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80890b6:	bf00      	nop

080890b8 <__aeabi_dcmpge>:
 80890b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890bc:	f7ff ffce 	bl	808905c <__aeabi_cdrcmple>
 80890c0:	bf94      	ite	ls
 80890c2:	2001      	movls	r0, #1
 80890c4:	2000      	movhi	r0, #0
 80890c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80890ca:	bf00      	nop

080890cc <__aeabi_dcmpgt>:
 80890cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890d0:	f7ff ffc4 	bl	808905c <__aeabi_cdrcmple>
 80890d4:	bf34      	ite	cc
 80890d6:	2001      	movcc	r0, #1
 80890d8:	2000      	movcs	r0, #0
 80890da:	f85d fb08 	ldr.w	pc, [sp], #8
 80890de:	bf00      	nop

080890e0 <__aeabi_d2iz>:
 80890e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80890e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80890e8:	d215      	bcs.n	8089116 <__aeabi_d2iz+0x36>
 80890ea:	d511      	bpl.n	8089110 <__aeabi_d2iz+0x30>
 80890ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80890f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80890f4:	d912      	bls.n	808911c <__aeabi_d2iz+0x3c>
 80890f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80890fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80890fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8089102:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089106:	fa23 f002 	lsr.w	r0, r3, r2
 808910a:	bf18      	it	ne
 808910c:	4240      	negne	r0, r0
 808910e:	4770      	bx	lr
 8089110:	f04f 0000 	mov.w	r0, #0
 8089114:	4770      	bx	lr
 8089116:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808911a:	d105      	bne.n	8089128 <__aeabi_d2iz+0x48>
 808911c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8089120:	bf08      	it	eq
 8089122:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089126:	4770      	bx	lr
 8089128:	f04f 0000 	mov.w	r0, #0
 808912c:	4770      	bx	lr
 808912e:	bf00      	nop

08089130 <__aeabi_d2uiz>:
 8089130:	004a      	lsls	r2, r1, #1
 8089132:	d211      	bcs.n	8089158 <__aeabi_d2uiz+0x28>
 8089134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8089138:	d211      	bcs.n	808915e <__aeabi_d2uiz+0x2e>
 808913a:	d50d      	bpl.n	8089158 <__aeabi_d2uiz+0x28>
 808913c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8089140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8089144:	d40e      	bmi.n	8089164 <__aeabi_d2uiz+0x34>
 8089146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808914a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808914e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8089152:	fa23 f002 	lsr.w	r0, r3, r2
 8089156:	4770      	bx	lr
 8089158:	f04f 0000 	mov.w	r0, #0
 808915c:	4770      	bx	lr
 808915e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8089162:	d102      	bne.n	808916a <__aeabi_d2uiz+0x3a>
 8089164:	f04f 30ff 	mov.w	r0, #4294967295
 8089168:	4770      	bx	lr
 808916a:	f04f 0000 	mov.w	r0, #0
 808916e:	4770      	bx	lr

08089170 <__aeabi_d2f>:
 8089170:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8089174:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8089178:	bf24      	itt	cs
 808917a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808917e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8089182:	d90d      	bls.n	80891a0 <__aeabi_d2f+0x30>
 8089184:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089188:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808918c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8089190:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8089194:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8089198:	bf08      	it	eq
 808919a:	f020 0001 	biceq.w	r0, r0, #1
 808919e:	4770      	bx	lr
 80891a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80891a4:	d121      	bne.n	80891ea <__aeabi_d2f+0x7a>
 80891a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80891aa:	bfbc      	itt	lt
 80891ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80891b0:	4770      	bxlt	lr
 80891b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80891b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80891ba:	f1c2 0218 	rsb	r2, r2, #24
 80891be:	f1c2 0c20 	rsb	ip, r2, #32
 80891c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80891c6:	fa20 f002 	lsr.w	r0, r0, r2
 80891ca:	bf18      	it	ne
 80891cc:	f040 0001 	orrne.w	r0, r0, #1
 80891d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80891d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80891d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80891dc:	ea40 000c 	orr.w	r0, r0, ip
 80891e0:	fa23 f302 	lsr.w	r3, r3, r2
 80891e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80891e8:	e7cc      	b.n	8089184 <__aeabi_d2f+0x14>
 80891ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80891ee:	d107      	bne.n	8089200 <__aeabi_d2f+0x90>
 80891f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80891f4:	bf1e      	ittt	ne
 80891f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80891fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80891fe:	4770      	bxne	lr
 8089200:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8089204:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8089208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808920c:	4770      	bx	lr
 808920e:	bf00      	nop

08089210 <__aeabi_frsub>:
 8089210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8089214:	e002      	b.n	808921c <__addsf3>
 8089216:	bf00      	nop

08089218 <__aeabi_fsub>:
 8089218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808921c <__addsf3>:
 808921c:	0042      	lsls	r2, r0, #1
 808921e:	bf1f      	itttt	ne
 8089220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8089224:	ea92 0f03 	teqne	r2, r3
 8089228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808922c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089230:	d06a      	beq.n	8089308 <__addsf3+0xec>
 8089232:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8089236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808923a:	bfc1      	itttt	gt
 808923c:	18d2      	addgt	r2, r2, r3
 808923e:	4041      	eorgt	r1, r0
 8089240:	4048      	eorgt	r0, r1
 8089242:	4041      	eorgt	r1, r0
 8089244:	bfb8      	it	lt
 8089246:	425b      	neglt	r3, r3
 8089248:	2b19      	cmp	r3, #25
 808924a:	bf88      	it	hi
 808924c:	4770      	bxhi	lr
 808924e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8089252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808925a:	bf18      	it	ne
 808925c:	4240      	negne	r0, r0
 808925e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8089266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808926a:	bf18      	it	ne
 808926c:	4249      	negne	r1, r1
 808926e:	ea92 0f03 	teq	r2, r3
 8089272:	d03f      	beq.n	80892f4 <__addsf3+0xd8>
 8089274:	f1a2 0201 	sub.w	r2, r2, #1
 8089278:	fa41 fc03 	asr.w	ip, r1, r3
 808927c:	eb10 000c 	adds.w	r0, r0, ip
 8089280:	f1c3 0320 	rsb	r3, r3, #32
 8089284:	fa01 f103 	lsl.w	r1, r1, r3
 8089288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808928c:	d502      	bpl.n	8089294 <__addsf3+0x78>
 808928e:	4249      	negs	r1, r1
 8089290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8089294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8089298:	d313      	bcc.n	80892c2 <__addsf3+0xa6>
 808929a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808929e:	d306      	bcc.n	80892ae <__addsf3+0x92>
 80892a0:	0840      	lsrs	r0, r0, #1
 80892a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80892a6:	f102 0201 	add.w	r2, r2, #1
 80892aa:	2afe      	cmp	r2, #254	; 0xfe
 80892ac:	d251      	bcs.n	8089352 <__addsf3+0x136>
 80892ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80892b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80892b6:	bf08      	it	eq
 80892b8:	f020 0001 	biceq.w	r0, r0, #1
 80892bc:	ea40 0003 	orr.w	r0, r0, r3
 80892c0:	4770      	bx	lr
 80892c2:	0049      	lsls	r1, r1, #1
 80892c4:	eb40 0000 	adc.w	r0, r0, r0
 80892c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80892cc:	f1a2 0201 	sub.w	r2, r2, #1
 80892d0:	d1ed      	bne.n	80892ae <__addsf3+0x92>
 80892d2:	fab0 fc80 	clz	ip, r0
 80892d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80892da:	ebb2 020c 	subs.w	r2, r2, ip
 80892de:	fa00 f00c 	lsl.w	r0, r0, ip
 80892e2:	bfaa      	itet	ge
 80892e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80892e8:	4252      	neglt	r2, r2
 80892ea:	4318      	orrge	r0, r3
 80892ec:	bfbc      	itt	lt
 80892ee:	40d0      	lsrlt	r0, r2
 80892f0:	4318      	orrlt	r0, r3
 80892f2:	4770      	bx	lr
 80892f4:	f092 0f00 	teq	r2, #0
 80892f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80892fc:	bf06      	itte	eq
 80892fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8089302:	3201      	addeq	r2, #1
 8089304:	3b01      	subne	r3, #1
 8089306:	e7b5      	b.n	8089274 <__addsf3+0x58>
 8089308:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808930c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089310:	bf18      	it	ne
 8089312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089316:	d021      	beq.n	808935c <__addsf3+0x140>
 8089318:	ea92 0f03 	teq	r2, r3
 808931c:	d004      	beq.n	8089328 <__addsf3+0x10c>
 808931e:	f092 0f00 	teq	r2, #0
 8089322:	bf08      	it	eq
 8089324:	4608      	moveq	r0, r1
 8089326:	4770      	bx	lr
 8089328:	ea90 0f01 	teq	r0, r1
 808932c:	bf1c      	itt	ne
 808932e:	2000      	movne	r0, #0
 8089330:	4770      	bxne	lr
 8089332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8089336:	d104      	bne.n	8089342 <__addsf3+0x126>
 8089338:	0040      	lsls	r0, r0, #1
 808933a:	bf28      	it	cs
 808933c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8089340:	4770      	bx	lr
 8089342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8089346:	bf3c      	itt	cc
 8089348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808934c:	4770      	bxcc	lr
 808934e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8089352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8089356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808935a:	4770      	bx	lr
 808935c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8089360:	bf16      	itet	ne
 8089362:	4608      	movne	r0, r1
 8089364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8089368:	4601      	movne	r1, r0
 808936a:	0242      	lsls	r2, r0, #9
 808936c:	bf06      	itte	eq
 808936e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8089372:	ea90 0f01 	teqeq	r0, r1
 8089376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808937a:	4770      	bx	lr

0808937c <__aeabi_ui2f>:
 808937c:	f04f 0300 	mov.w	r3, #0
 8089380:	e004      	b.n	808938c <__aeabi_i2f+0x8>
 8089382:	bf00      	nop

08089384 <__aeabi_i2f>:
 8089384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8089388:	bf48      	it	mi
 808938a:	4240      	negmi	r0, r0
 808938c:	ea5f 0c00 	movs.w	ip, r0
 8089390:	bf08      	it	eq
 8089392:	4770      	bxeq	lr
 8089394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8089398:	4601      	mov	r1, r0
 808939a:	f04f 0000 	mov.w	r0, #0
 808939e:	e01c      	b.n	80893da <__aeabi_l2f+0x2a>

080893a0 <__aeabi_ul2f>:
 80893a0:	ea50 0201 	orrs.w	r2, r0, r1
 80893a4:	bf08      	it	eq
 80893a6:	4770      	bxeq	lr
 80893a8:	f04f 0300 	mov.w	r3, #0
 80893ac:	e00a      	b.n	80893c4 <__aeabi_l2f+0x14>
 80893ae:	bf00      	nop

080893b0 <__aeabi_l2f>:
 80893b0:	ea50 0201 	orrs.w	r2, r0, r1
 80893b4:	bf08      	it	eq
 80893b6:	4770      	bxeq	lr
 80893b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80893bc:	d502      	bpl.n	80893c4 <__aeabi_l2f+0x14>
 80893be:	4240      	negs	r0, r0
 80893c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80893c4:	ea5f 0c01 	movs.w	ip, r1
 80893c8:	bf02      	ittt	eq
 80893ca:	4684      	moveq	ip, r0
 80893cc:	4601      	moveq	r1, r0
 80893ce:	2000      	moveq	r0, #0
 80893d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80893d4:	bf08      	it	eq
 80893d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80893da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80893de:	fabc f28c 	clz	r2, ip
 80893e2:	3a08      	subs	r2, #8
 80893e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80893e8:	db10      	blt.n	808940c <__aeabi_l2f+0x5c>
 80893ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80893ee:	4463      	add	r3, ip
 80893f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80893f4:	f1c2 0220 	rsb	r2, r2, #32
 80893f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80893fc:	fa20 f202 	lsr.w	r2, r0, r2
 8089400:	eb43 0002 	adc.w	r0, r3, r2
 8089404:	bf08      	it	eq
 8089406:	f020 0001 	biceq.w	r0, r0, #1
 808940a:	4770      	bx	lr
 808940c:	f102 0220 	add.w	r2, r2, #32
 8089410:	fa01 fc02 	lsl.w	ip, r1, r2
 8089414:	f1c2 0220 	rsb	r2, r2, #32
 8089418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808941c:	fa21 f202 	lsr.w	r2, r1, r2
 8089420:	eb43 0002 	adc.w	r0, r3, r2
 8089424:	bf08      	it	eq
 8089426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808942a:	4770      	bx	lr

0808942c <__aeabi_fmul>:
 808942c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089430:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8089434:	bf1e      	ittt	ne
 8089436:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808943a:	ea92 0f0c 	teqne	r2, ip
 808943e:	ea93 0f0c 	teqne	r3, ip
 8089442:	d06f      	beq.n	8089524 <__aeabi_fmul+0xf8>
 8089444:	441a      	add	r2, r3
 8089446:	ea80 0c01 	eor.w	ip, r0, r1
 808944a:	0240      	lsls	r0, r0, #9
 808944c:	bf18      	it	ne
 808944e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8089452:	d01e      	beq.n	8089492 <__aeabi_fmul+0x66>
 8089454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8089458:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808945c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8089460:	fba0 3101 	umull	r3, r1, r0, r1
 8089464:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8089468:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808946c:	bf3e      	ittt	cc
 808946e:	0049      	lslcc	r1, r1, #1
 8089470:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8089474:	005b      	lslcc	r3, r3, #1
 8089476:	ea40 0001 	orr.w	r0, r0, r1
 808947a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808947e:	2afd      	cmp	r2, #253	; 0xfd
 8089480:	d81d      	bhi.n	80894be <__aeabi_fmul+0x92>
 8089482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8089486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808948a:	bf08      	it	eq
 808948c:	f020 0001 	biceq.w	r0, r0, #1
 8089490:	4770      	bx	lr
 8089492:	f090 0f00 	teq	r0, #0
 8089496:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808949a:	bf08      	it	eq
 808949c:	0249      	lsleq	r1, r1, #9
 808949e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80894a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80894a6:	3a7f      	subs	r2, #127	; 0x7f
 80894a8:	bfc2      	ittt	gt
 80894aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80894ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80894b2:	4770      	bxgt	lr
 80894b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80894b8:	f04f 0300 	mov.w	r3, #0
 80894bc:	3a01      	subs	r2, #1
 80894be:	dc5d      	bgt.n	808957c <__aeabi_fmul+0x150>
 80894c0:	f112 0f19 	cmn.w	r2, #25
 80894c4:	bfdc      	itt	le
 80894c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80894ca:	4770      	bxle	lr
 80894cc:	f1c2 0200 	rsb	r2, r2, #0
 80894d0:	0041      	lsls	r1, r0, #1
 80894d2:	fa21 f102 	lsr.w	r1, r1, r2
 80894d6:	f1c2 0220 	rsb	r2, r2, #32
 80894da:	fa00 fc02 	lsl.w	ip, r0, r2
 80894de:	ea5f 0031 	movs.w	r0, r1, rrx
 80894e2:	f140 0000 	adc.w	r0, r0, #0
 80894e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80894ea:	bf08      	it	eq
 80894ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80894f0:	4770      	bx	lr
 80894f2:	f092 0f00 	teq	r2, #0
 80894f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80894fa:	bf02      	ittt	eq
 80894fc:	0040      	lsleq	r0, r0, #1
 80894fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8089502:	3a01      	subeq	r2, #1
 8089504:	d0f9      	beq.n	80894fa <__aeabi_fmul+0xce>
 8089506:	ea40 000c 	orr.w	r0, r0, ip
 808950a:	f093 0f00 	teq	r3, #0
 808950e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089512:	bf02      	ittt	eq
 8089514:	0049      	lsleq	r1, r1, #1
 8089516:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808951a:	3b01      	subeq	r3, #1
 808951c:	d0f9      	beq.n	8089512 <__aeabi_fmul+0xe6>
 808951e:	ea41 010c 	orr.w	r1, r1, ip
 8089522:	e78f      	b.n	8089444 <__aeabi_fmul+0x18>
 8089524:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8089528:	ea92 0f0c 	teq	r2, ip
 808952c:	bf18      	it	ne
 808952e:	ea93 0f0c 	teqne	r3, ip
 8089532:	d00a      	beq.n	808954a <__aeabi_fmul+0x11e>
 8089534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8089538:	bf18      	it	ne
 808953a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808953e:	d1d8      	bne.n	80894f2 <__aeabi_fmul+0xc6>
 8089540:	ea80 0001 	eor.w	r0, r0, r1
 8089544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8089548:	4770      	bx	lr
 808954a:	f090 0f00 	teq	r0, #0
 808954e:	bf17      	itett	ne
 8089550:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8089554:	4608      	moveq	r0, r1
 8089556:	f091 0f00 	teqne	r1, #0
 808955a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808955e:	d014      	beq.n	808958a <__aeabi_fmul+0x15e>
 8089560:	ea92 0f0c 	teq	r2, ip
 8089564:	d101      	bne.n	808956a <__aeabi_fmul+0x13e>
 8089566:	0242      	lsls	r2, r0, #9
 8089568:	d10f      	bne.n	808958a <__aeabi_fmul+0x15e>
 808956a:	ea93 0f0c 	teq	r3, ip
 808956e:	d103      	bne.n	8089578 <__aeabi_fmul+0x14c>
 8089570:	024b      	lsls	r3, r1, #9
 8089572:	bf18      	it	ne
 8089574:	4608      	movne	r0, r1
 8089576:	d108      	bne.n	808958a <__aeabi_fmul+0x15e>
 8089578:	ea80 0001 	eor.w	r0, r0, r1
 808957c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8089580:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8089584:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089588:	4770      	bx	lr
 808958a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808958e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8089592:	4770      	bx	lr

08089594 <__aeabi_fdiv>:
 8089594:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089598:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808959c:	bf1e      	ittt	ne
 808959e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80895a2:	ea92 0f0c 	teqne	r2, ip
 80895a6:	ea93 0f0c 	teqne	r3, ip
 80895aa:	d069      	beq.n	8089680 <__aeabi_fdiv+0xec>
 80895ac:	eba2 0203 	sub.w	r2, r2, r3
 80895b0:	ea80 0c01 	eor.w	ip, r0, r1
 80895b4:	0249      	lsls	r1, r1, #9
 80895b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80895ba:	d037      	beq.n	808962c <__aeabi_fdiv+0x98>
 80895bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80895c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80895c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80895c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80895cc:	428b      	cmp	r3, r1
 80895ce:	bf38      	it	cc
 80895d0:	005b      	lslcc	r3, r3, #1
 80895d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80895d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80895da:	428b      	cmp	r3, r1
 80895dc:	bf24      	itt	cs
 80895de:	1a5b      	subcs	r3, r3, r1
 80895e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80895e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80895e8:	bf24      	itt	cs
 80895ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80895ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80895f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80895f6:	bf24      	itt	cs
 80895f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80895fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8089600:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8089604:	bf24      	itt	cs
 8089606:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808960a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808960e:	011b      	lsls	r3, r3, #4
 8089610:	bf18      	it	ne
 8089612:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8089616:	d1e0      	bne.n	80895da <__aeabi_fdiv+0x46>
 8089618:	2afd      	cmp	r2, #253	; 0xfd
 808961a:	f63f af50 	bhi.w	80894be <__aeabi_fmul+0x92>
 808961e:	428b      	cmp	r3, r1
 8089620:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8089624:	bf08      	it	eq
 8089626:	f020 0001 	biceq.w	r0, r0, #1
 808962a:	4770      	bx	lr
 808962c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8089630:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8089634:	327f      	adds	r2, #127	; 0x7f
 8089636:	bfc2      	ittt	gt
 8089638:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808963c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8089640:	4770      	bxgt	lr
 8089642:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089646:	f04f 0300 	mov.w	r3, #0
 808964a:	3a01      	subs	r2, #1
 808964c:	e737      	b.n	80894be <__aeabi_fmul+0x92>
 808964e:	f092 0f00 	teq	r2, #0
 8089652:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8089656:	bf02      	ittt	eq
 8089658:	0040      	lsleq	r0, r0, #1
 808965a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808965e:	3a01      	subeq	r2, #1
 8089660:	d0f9      	beq.n	8089656 <__aeabi_fdiv+0xc2>
 8089662:	ea40 000c 	orr.w	r0, r0, ip
 8089666:	f093 0f00 	teq	r3, #0
 808966a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808966e:	bf02      	ittt	eq
 8089670:	0049      	lsleq	r1, r1, #1
 8089672:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8089676:	3b01      	subeq	r3, #1
 8089678:	d0f9      	beq.n	808966e <__aeabi_fdiv+0xda>
 808967a:	ea41 010c 	orr.w	r1, r1, ip
 808967e:	e795      	b.n	80895ac <__aeabi_fdiv+0x18>
 8089680:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8089684:	ea92 0f0c 	teq	r2, ip
 8089688:	d108      	bne.n	808969c <__aeabi_fdiv+0x108>
 808968a:	0242      	lsls	r2, r0, #9
 808968c:	f47f af7d 	bne.w	808958a <__aeabi_fmul+0x15e>
 8089690:	ea93 0f0c 	teq	r3, ip
 8089694:	f47f af70 	bne.w	8089578 <__aeabi_fmul+0x14c>
 8089698:	4608      	mov	r0, r1
 808969a:	e776      	b.n	808958a <__aeabi_fmul+0x15e>
 808969c:	ea93 0f0c 	teq	r3, ip
 80896a0:	d104      	bne.n	80896ac <__aeabi_fdiv+0x118>
 80896a2:	024b      	lsls	r3, r1, #9
 80896a4:	f43f af4c 	beq.w	8089540 <__aeabi_fmul+0x114>
 80896a8:	4608      	mov	r0, r1
 80896aa:	e76e      	b.n	808958a <__aeabi_fmul+0x15e>
 80896ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80896b0:	bf18      	it	ne
 80896b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80896b6:	d1ca      	bne.n	808964e <__aeabi_fdiv+0xba>
 80896b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80896bc:	f47f af5c 	bne.w	8089578 <__aeabi_fmul+0x14c>
 80896c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80896c4:	f47f af3c 	bne.w	8089540 <__aeabi_fmul+0x114>
 80896c8:	e75f      	b.n	808958a <__aeabi_fmul+0x15e>
 80896ca:	bf00      	nop

080896cc <__gesf2>:
 80896cc:	f04f 3cff 	mov.w	ip, #4294967295
 80896d0:	e006      	b.n	80896e0 <__cmpsf2+0x4>
 80896d2:	bf00      	nop

080896d4 <__lesf2>:
 80896d4:	f04f 0c01 	mov.w	ip, #1
 80896d8:	e002      	b.n	80896e0 <__cmpsf2+0x4>
 80896da:	bf00      	nop

080896dc <__cmpsf2>:
 80896dc:	f04f 0c01 	mov.w	ip, #1
 80896e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80896e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80896e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80896ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80896f0:	bf18      	it	ne
 80896f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80896f6:	d011      	beq.n	808971c <__cmpsf2+0x40>
 80896f8:	b001      	add	sp, #4
 80896fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80896fe:	bf18      	it	ne
 8089700:	ea90 0f01 	teqne	r0, r1
 8089704:	bf58      	it	pl
 8089706:	ebb2 0003 	subspl.w	r0, r2, r3
 808970a:	bf88      	it	hi
 808970c:	17c8      	asrhi	r0, r1, #31
 808970e:	bf38      	it	cc
 8089710:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8089714:	bf18      	it	ne
 8089716:	f040 0001 	orrne.w	r0, r0, #1
 808971a:	4770      	bx	lr
 808971c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089720:	d102      	bne.n	8089728 <__cmpsf2+0x4c>
 8089722:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8089726:	d105      	bne.n	8089734 <__cmpsf2+0x58>
 8089728:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808972c:	d1e4      	bne.n	80896f8 <__cmpsf2+0x1c>
 808972e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8089732:	d0e1      	beq.n	80896f8 <__cmpsf2+0x1c>
 8089734:	f85d 0b04 	ldr.w	r0, [sp], #4
 8089738:	4770      	bx	lr
 808973a:	bf00      	nop

0808973c <__aeabi_cfrcmple>:
 808973c:	4684      	mov	ip, r0
 808973e:	4608      	mov	r0, r1
 8089740:	4661      	mov	r1, ip
 8089742:	e7ff      	b.n	8089744 <__aeabi_cfcmpeq>

08089744 <__aeabi_cfcmpeq>:
 8089744:	b50f      	push	{r0, r1, r2, r3, lr}
 8089746:	f7ff ffc9 	bl	80896dc <__cmpsf2>
 808974a:	2800      	cmp	r0, #0
 808974c:	bf48      	it	mi
 808974e:	f110 0f00 	cmnmi.w	r0, #0
 8089752:	bd0f      	pop	{r0, r1, r2, r3, pc}

08089754 <__aeabi_fcmpeq>:
 8089754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089758:	f7ff fff4 	bl	8089744 <__aeabi_cfcmpeq>
 808975c:	bf0c      	ite	eq
 808975e:	2001      	moveq	r0, #1
 8089760:	2000      	movne	r0, #0
 8089762:	f85d fb08 	ldr.w	pc, [sp], #8
 8089766:	bf00      	nop

08089768 <__aeabi_fcmplt>:
 8089768:	f84d ed08 	str.w	lr, [sp, #-8]!
 808976c:	f7ff ffea 	bl	8089744 <__aeabi_cfcmpeq>
 8089770:	bf34      	ite	cc
 8089772:	2001      	movcc	r0, #1
 8089774:	2000      	movcs	r0, #0
 8089776:	f85d fb08 	ldr.w	pc, [sp], #8
 808977a:	bf00      	nop

0808977c <__aeabi_fcmple>:
 808977c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089780:	f7ff ffe0 	bl	8089744 <__aeabi_cfcmpeq>
 8089784:	bf94      	ite	ls
 8089786:	2001      	movls	r0, #1
 8089788:	2000      	movhi	r0, #0
 808978a:	f85d fb08 	ldr.w	pc, [sp], #8
 808978e:	bf00      	nop

08089790 <__aeabi_fcmpge>:
 8089790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089794:	f7ff ffd2 	bl	808973c <__aeabi_cfrcmple>
 8089798:	bf94      	ite	ls
 808979a:	2001      	movls	r0, #1
 808979c:	2000      	movhi	r0, #0
 808979e:	f85d fb08 	ldr.w	pc, [sp], #8
 80897a2:	bf00      	nop

080897a4 <__aeabi_fcmpgt>:
 80897a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80897a8:	f7ff ffc8 	bl	808973c <__aeabi_cfrcmple>
 80897ac:	bf34      	ite	cc
 80897ae:	2001      	movcc	r0, #1
 80897b0:	2000      	movcs	r0, #0
 80897b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80897b6:	bf00      	nop

080897b8 <__aeabi_fcmpun>:
 80897b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80897bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80897c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80897c4:	d102      	bne.n	80897cc <__aeabi_fcmpun+0x14>
 80897c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80897ca:	d108      	bne.n	80897de <__aeabi_fcmpun+0x26>
 80897cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80897d0:	d102      	bne.n	80897d8 <__aeabi_fcmpun+0x20>
 80897d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80897d6:	d102      	bne.n	80897de <__aeabi_fcmpun+0x26>
 80897d8:	f04f 0000 	mov.w	r0, #0
 80897dc:	4770      	bx	lr
 80897de:	f04f 0001 	mov.w	r0, #1
 80897e2:	4770      	bx	lr

080897e4 <__aeabi_f2iz>:
 80897e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80897e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80897ec:	d30f      	bcc.n	808980e <__aeabi_f2iz+0x2a>
 80897ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80897f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80897f6:	d90d      	bls.n	8089814 <__aeabi_f2iz+0x30>
 80897f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80897fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8089800:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8089804:	fa23 f002 	lsr.w	r0, r3, r2
 8089808:	bf18      	it	ne
 808980a:	4240      	negne	r0, r0
 808980c:	4770      	bx	lr
 808980e:	f04f 0000 	mov.w	r0, #0
 8089812:	4770      	bx	lr
 8089814:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8089818:	d101      	bne.n	808981e <__aeabi_f2iz+0x3a>
 808981a:	0242      	lsls	r2, r0, #9
 808981c:	d105      	bne.n	808982a <__aeabi_f2iz+0x46>
 808981e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8089822:	bf08      	it	eq
 8089824:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089828:	4770      	bx	lr
 808982a:	f04f 0000 	mov.w	r0, #0
 808982e:	4770      	bx	lr

08089830 <__aeabi_ldivmod>:
 8089830:	b97b      	cbnz	r3, 8089852 <__aeabi_ldivmod+0x22>
 8089832:	b972      	cbnz	r2, 8089852 <__aeabi_ldivmod+0x22>
 8089834:	2900      	cmp	r1, #0
 8089836:	bfbe      	ittt	lt
 8089838:	2000      	movlt	r0, #0
 808983a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808983e:	e006      	blt.n	808984e <__aeabi_ldivmod+0x1e>
 8089840:	bf08      	it	eq
 8089842:	2800      	cmpeq	r0, #0
 8089844:	bf1c      	itt	ne
 8089846:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808984a:	f04f 30ff 	movne.w	r0, #4294967295
 808984e:	f000 b9b5 	b.w	8089bbc <__aeabi_idiv0>
 8089852:	f1ad 0c08 	sub.w	ip, sp, #8
 8089856:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808985a:	2900      	cmp	r1, #0
 808985c:	db09      	blt.n	8089872 <__aeabi_ldivmod+0x42>
 808985e:	2b00      	cmp	r3, #0
 8089860:	db1a      	blt.n	8089898 <__aeabi_ldivmod+0x68>
 8089862:	f000 f835 	bl	80898d0 <__udivmoddi4>
 8089866:	f8dd e004 	ldr.w	lr, [sp, #4]
 808986a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808986e:	b004      	add	sp, #16
 8089870:	4770      	bx	lr
 8089872:	4240      	negs	r0, r0
 8089874:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089878:	2b00      	cmp	r3, #0
 808987a:	db1b      	blt.n	80898b4 <__aeabi_ldivmod+0x84>
 808987c:	f000 f828 	bl	80898d0 <__udivmoddi4>
 8089880:	f8dd e004 	ldr.w	lr, [sp, #4]
 8089884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089888:	b004      	add	sp, #16
 808988a:	4240      	negs	r0, r0
 808988c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089890:	4252      	negs	r2, r2
 8089892:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089896:	4770      	bx	lr
 8089898:	4252      	negs	r2, r2
 808989a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808989e:	f000 f817 	bl	80898d0 <__udivmoddi4>
 80898a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80898a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80898aa:	b004      	add	sp, #16
 80898ac:	4240      	negs	r0, r0
 80898ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80898b2:	4770      	bx	lr
 80898b4:	4252      	negs	r2, r2
 80898b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80898ba:	f000 f809 	bl	80898d0 <__udivmoddi4>
 80898be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80898c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80898c6:	b004      	add	sp, #16
 80898c8:	4252      	negs	r2, r2
 80898ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80898ce:	4770      	bx	lr

080898d0 <__udivmoddi4>:
 80898d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80898d4:	468c      	mov	ip, r1
 80898d6:	460c      	mov	r4, r1
 80898d8:	4605      	mov	r5, r0
 80898da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80898dc:	2b00      	cmp	r3, #0
 80898de:	d14f      	bne.n	8089980 <__udivmoddi4+0xb0>
 80898e0:	428a      	cmp	r2, r1
 80898e2:	4617      	mov	r7, r2
 80898e4:	d96b      	bls.n	80899be <__udivmoddi4+0xee>
 80898e6:	fab2 fe82 	clz	lr, r2
 80898ea:	f1be 0f00 	cmp.w	lr, #0
 80898ee:	d00b      	beq.n	8089908 <__udivmoddi4+0x38>
 80898f0:	f1ce 0520 	rsb	r5, lr, #32
 80898f4:	fa20 f505 	lsr.w	r5, r0, r5
 80898f8:	fa01 f30e 	lsl.w	r3, r1, lr
 80898fc:	ea45 0c03 	orr.w	ip, r5, r3
 8089900:	fa02 f70e 	lsl.w	r7, r2, lr
 8089904:	fa00 f50e 	lsl.w	r5, r0, lr
 8089908:	0c39      	lsrs	r1, r7, #16
 808990a:	fbbc f0f1 	udiv	r0, ip, r1
 808990e:	b2ba      	uxth	r2, r7
 8089910:	fb01 c310 	mls	r3, r1, r0, ip
 8089914:	fb00 f802 	mul.w	r8, r0, r2
 8089918:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808991c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8089920:	45a0      	cmp	r8, r4
 8089922:	d909      	bls.n	8089938 <__udivmoddi4+0x68>
 8089924:	19e4      	adds	r4, r4, r7
 8089926:	f100 33ff 	add.w	r3, r0, #4294967295
 808992a:	f080 8128 	bcs.w	8089b7e <__udivmoddi4+0x2ae>
 808992e:	45a0      	cmp	r8, r4
 8089930:	f240 8125 	bls.w	8089b7e <__udivmoddi4+0x2ae>
 8089934:	3802      	subs	r0, #2
 8089936:	443c      	add	r4, r7
 8089938:	ebc8 0404 	rsb	r4, r8, r4
 808993c:	fbb4 f3f1 	udiv	r3, r4, r1
 8089940:	fb01 4c13 	mls	ip, r1, r3, r4
 8089944:	fb03 f202 	mul.w	r2, r3, r2
 8089948:	b2ac      	uxth	r4, r5
 808994a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808994e:	428a      	cmp	r2, r1
 8089950:	d909      	bls.n	8089966 <__udivmoddi4+0x96>
 8089952:	19c9      	adds	r1, r1, r7
 8089954:	f103 34ff 	add.w	r4, r3, #4294967295
 8089958:	f080 810f 	bcs.w	8089b7a <__udivmoddi4+0x2aa>
 808995c:	428a      	cmp	r2, r1
 808995e:	f240 810c 	bls.w	8089b7a <__udivmoddi4+0x2aa>
 8089962:	3b02      	subs	r3, #2
 8089964:	4439      	add	r1, r7
 8089966:	1a8a      	subs	r2, r1, r2
 8089968:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808996c:	2100      	movs	r1, #0
 808996e:	2e00      	cmp	r6, #0
 8089970:	d063      	beq.n	8089a3a <__udivmoddi4+0x16a>
 8089972:	fa22 f20e 	lsr.w	r2, r2, lr
 8089976:	2300      	movs	r3, #0
 8089978:	e886 000c 	stmia.w	r6, {r2, r3}
 808997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089980:	428b      	cmp	r3, r1
 8089982:	d907      	bls.n	8089994 <__udivmoddi4+0xc4>
 8089984:	2e00      	cmp	r6, #0
 8089986:	d056      	beq.n	8089a36 <__udivmoddi4+0x166>
 8089988:	2100      	movs	r1, #0
 808998a:	e886 0011 	stmia.w	r6, {r0, r4}
 808998e:	4608      	mov	r0, r1
 8089990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089994:	fab3 f183 	clz	r1, r3
 8089998:	2900      	cmp	r1, #0
 808999a:	f040 8093 	bne.w	8089ac4 <__udivmoddi4+0x1f4>
 808999e:	42a3      	cmp	r3, r4
 80899a0:	d302      	bcc.n	80899a8 <__udivmoddi4+0xd8>
 80899a2:	4282      	cmp	r2, r0
 80899a4:	f200 80fe 	bhi.w	8089ba4 <__udivmoddi4+0x2d4>
 80899a8:	1a85      	subs	r5, r0, r2
 80899aa:	eb64 0303 	sbc.w	r3, r4, r3
 80899ae:	469c      	mov	ip, r3
 80899b0:	2001      	movs	r0, #1
 80899b2:	2e00      	cmp	r6, #0
 80899b4:	d041      	beq.n	8089a3a <__udivmoddi4+0x16a>
 80899b6:	e886 1020 	stmia.w	r6, {r5, ip}
 80899ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80899be:	b912      	cbnz	r2, 80899c6 <__udivmoddi4+0xf6>
 80899c0:	2701      	movs	r7, #1
 80899c2:	fbb7 f7f2 	udiv	r7, r7, r2
 80899c6:	fab7 fe87 	clz	lr, r7
 80899ca:	f1be 0f00 	cmp.w	lr, #0
 80899ce:	d136      	bne.n	8089a3e <__udivmoddi4+0x16e>
 80899d0:	1be4      	subs	r4, r4, r7
 80899d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80899d6:	fa1f f987 	uxth.w	r9, r7
 80899da:	2101      	movs	r1, #1
 80899dc:	fbb4 f3f8 	udiv	r3, r4, r8
 80899e0:	fb08 4413 	mls	r4, r8, r3, r4
 80899e4:	fb09 f203 	mul.w	r2, r9, r3
 80899e8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80899ec:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80899f0:	42a2      	cmp	r2, r4
 80899f2:	d907      	bls.n	8089a04 <__udivmoddi4+0x134>
 80899f4:	19e4      	adds	r4, r4, r7
 80899f6:	f103 30ff 	add.w	r0, r3, #4294967295
 80899fa:	d202      	bcs.n	8089a02 <__udivmoddi4+0x132>
 80899fc:	42a2      	cmp	r2, r4
 80899fe:	f200 80d3 	bhi.w	8089ba8 <__udivmoddi4+0x2d8>
 8089a02:	4603      	mov	r3, r0
 8089a04:	1aa4      	subs	r4, r4, r2
 8089a06:	fbb4 f0f8 	udiv	r0, r4, r8
 8089a0a:	fb08 4810 	mls	r8, r8, r0, r4
 8089a0e:	fb09 f900 	mul.w	r9, r9, r0
 8089a12:	b2ac      	uxth	r4, r5
 8089a14:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8089a18:	4591      	cmp	r9, r2
 8089a1a:	d907      	bls.n	8089a2c <__udivmoddi4+0x15c>
 8089a1c:	19d2      	adds	r2, r2, r7
 8089a1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8089a22:	d202      	bcs.n	8089a2a <__udivmoddi4+0x15a>
 8089a24:	4591      	cmp	r9, r2
 8089a26:	f200 80ba 	bhi.w	8089b9e <__udivmoddi4+0x2ce>
 8089a2a:	4620      	mov	r0, r4
 8089a2c:	ebc9 0202 	rsb	r2, r9, r2
 8089a30:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8089a34:	e79b      	b.n	808996e <__udivmoddi4+0x9e>
 8089a36:	4631      	mov	r1, r6
 8089a38:	4630      	mov	r0, r6
 8089a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a3e:	fa07 f70e 	lsl.w	r7, r7, lr
 8089a42:	f1ce 0c20 	rsb	ip, lr, #32
 8089a46:	fa24 f30c 	lsr.w	r3, r4, ip
 8089a4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8089a4e:	fbb3 faf8 	udiv	sl, r3, r8
 8089a52:	fa1f f987 	uxth.w	r9, r7
 8089a56:	fb08 351a 	mls	r5, r8, sl, r3
 8089a5a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089a5e:	fa04 f40e 	lsl.w	r4, r4, lr
 8089a62:	fb0a fb09 	mul.w	fp, sl, r9
 8089a66:	ea4c 0c04 	orr.w	ip, ip, r4
 8089a6a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8089a6e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8089a72:	459b      	cmp	fp, r3
 8089a74:	fa00 f50e 	lsl.w	r5, r0, lr
 8089a78:	d90a      	bls.n	8089a90 <__udivmoddi4+0x1c0>
 8089a7a:	19db      	adds	r3, r3, r7
 8089a7c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8089a80:	f080 808b 	bcs.w	8089b9a <__udivmoddi4+0x2ca>
 8089a84:	459b      	cmp	fp, r3
 8089a86:	f240 8088 	bls.w	8089b9a <__udivmoddi4+0x2ca>
 8089a8a:	f1aa 0a02 	sub.w	sl, sl, #2
 8089a8e:	443b      	add	r3, r7
 8089a90:	ebcb 0303 	rsb	r3, fp, r3
 8089a94:	fbb3 f0f8 	udiv	r0, r3, r8
 8089a98:	fb08 3310 	mls	r3, r8, r0, r3
 8089a9c:	fb00 f409 	mul.w	r4, r0, r9
 8089aa0:	fa1f fc8c 	uxth.w	ip, ip
 8089aa4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8089aa8:	429c      	cmp	r4, r3
 8089aaa:	d907      	bls.n	8089abc <__udivmoddi4+0x1ec>
 8089aac:	19db      	adds	r3, r3, r7
 8089aae:	f100 32ff 	add.w	r2, r0, #4294967295
 8089ab2:	d26e      	bcs.n	8089b92 <__udivmoddi4+0x2c2>
 8089ab4:	429c      	cmp	r4, r3
 8089ab6:	d96c      	bls.n	8089b92 <__udivmoddi4+0x2c2>
 8089ab8:	3802      	subs	r0, #2
 8089aba:	443b      	add	r3, r7
 8089abc:	1b1c      	subs	r4, r3, r4
 8089abe:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8089ac2:	e78b      	b.n	80899dc <__udivmoddi4+0x10c>
 8089ac4:	f1c1 0e20 	rsb	lr, r1, #32
 8089ac8:	408b      	lsls	r3, r1
 8089aca:	fa22 fc0e 	lsr.w	ip, r2, lr
 8089ace:	ea4c 0c03 	orr.w	ip, ip, r3
 8089ad2:	fa24 f70e 	lsr.w	r7, r4, lr
 8089ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8089ada:	fbb7 faf9 	udiv	sl, r7, r9
 8089ade:	fa1f f38c 	uxth.w	r3, ip
 8089ae2:	fb09 771a 	mls	r7, r9, sl, r7
 8089ae6:	fa20 f80e 	lsr.w	r8, r0, lr
 8089aea:	408c      	lsls	r4, r1
 8089aec:	fb0a f503 	mul.w	r5, sl, r3
 8089af0:	ea48 0404 	orr.w	r4, r8, r4
 8089af4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8089af8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8089afc:	42bd      	cmp	r5, r7
 8089afe:	fa02 f201 	lsl.w	r2, r2, r1
 8089b02:	fa00 fb01 	lsl.w	fp, r0, r1
 8089b06:	d909      	bls.n	8089b1c <__udivmoddi4+0x24c>
 8089b08:	eb17 070c 	adds.w	r7, r7, ip
 8089b0c:	f10a 30ff 	add.w	r0, sl, #4294967295
 8089b10:	d241      	bcs.n	8089b96 <__udivmoddi4+0x2c6>
 8089b12:	42bd      	cmp	r5, r7
 8089b14:	d93f      	bls.n	8089b96 <__udivmoddi4+0x2c6>
 8089b16:	f1aa 0a02 	sub.w	sl, sl, #2
 8089b1a:	4467      	add	r7, ip
 8089b1c:	1b7f      	subs	r7, r7, r5
 8089b1e:	fbb7 f5f9 	udiv	r5, r7, r9
 8089b22:	fb09 7715 	mls	r7, r9, r5, r7
 8089b26:	fb05 f303 	mul.w	r3, r5, r3
 8089b2a:	b2a4      	uxth	r4, r4
 8089b2c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8089b30:	42bb      	cmp	r3, r7
 8089b32:	d908      	bls.n	8089b46 <__udivmoddi4+0x276>
 8089b34:	eb17 070c 	adds.w	r7, r7, ip
 8089b38:	f105 30ff 	add.w	r0, r5, #4294967295
 8089b3c:	d227      	bcs.n	8089b8e <__udivmoddi4+0x2be>
 8089b3e:	42bb      	cmp	r3, r7
 8089b40:	d925      	bls.n	8089b8e <__udivmoddi4+0x2be>
 8089b42:	3d02      	subs	r5, #2
 8089b44:	4467      	add	r7, ip
 8089b46:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8089b4a:	fba0 8902 	umull	r8, r9, r0, r2
 8089b4e:	1aff      	subs	r7, r7, r3
 8089b50:	454f      	cmp	r7, r9
 8089b52:	4645      	mov	r5, r8
 8089b54:	464c      	mov	r4, r9
 8089b56:	d314      	bcc.n	8089b82 <__udivmoddi4+0x2b2>
 8089b58:	d029      	beq.n	8089bae <__udivmoddi4+0x2de>
 8089b5a:	b366      	cbz	r6, 8089bb6 <__udivmoddi4+0x2e6>
 8089b5c:	ebbb 0305 	subs.w	r3, fp, r5
 8089b60:	eb67 0704 	sbc.w	r7, r7, r4
 8089b64:	fa07 fe0e 	lsl.w	lr, r7, lr
 8089b68:	40cb      	lsrs	r3, r1
 8089b6a:	40cf      	lsrs	r7, r1
 8089b6c:	ea4e 0303 	orr.w	r3, lr, r3
 8089b70:	e886 0088 	stmia.w	r6, {r3, r7}
 8089b74:	2100      	movs	r1, #0
 8089b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089b7a:	4623      	mov	r3, r4
 8089b7c:	e6f3      	b.n	8089966 <__udivmoddi4+0x96>
 8089b7e:	4618      	mov	r0, r3
 8089b80:	e6da      	b.n	8089938 <__udivmoddi4+0x68>
 8089b82:	ebb8 0502 	subs.w	r5, r8, r2
 8089b86:	eb69 040c 	sbc.w	r4, r9, ip
 8089b8a:	3801      	subs	r0, #1
 8089b8c:	e7e5      	b.n	8089b5a <__udivmoddi4+0x28a>
 8089b8e:	4605      	mov	r5, r0
 8089b90:	e7d9      	b.n	8089b46 <__udivmoddi4+0x276>
 8089b92:	4610      	mov	r0, r2
 8089b94:	e792      	b.n	8089abc <__udivmoddi4+0x1ec>
 8089b96:	4682      	mov	sl, r0
 8089b98:	e7c0      	b.n	8089b1c <__udivmoddi4+0x24c>
 8089b9a:	4692      	mov	sl, r2
 8089b9c:	e778      	b.n	8089a90 <__udivmoddi4+0x1c0>
 8089b9e:	3802      	subs	r0, #2
 8089ba0:	443a      	add	r2, r7
 8089ba2:	e743      	b.n	8089a2c <__udivmoddi4+0x15c>
 8089ba4:	4608      	mov	r0, r1
 8089ba6:	e704      	b.n	80899b2 <__udivmoddi4+0xe2>
 8089ba8:	3b02      	subs	r3, #2
 8089baa:	443c      	add	r4, r7
 8089bac:	e72a      	b.n	8089a04 <__udivmoddi4+0x134>
 8089bae:	45c3      	cmp	fp, r8
 8089bb0:	d3e7      	bcc.n	8089b82 <__udivmoddi4+0x2b2>
 8089bb2:	463c      	mov	r4, r7
 8089bb4:	e7d1      	b.n	8089b5a <__udivmoddi4+0x28a>
 8089bb6:	4631      	mov	r1, r6
 8089bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08089bbc <__aeabi_idiv0>:
 8089bbc:	4770      	bx	lr
 8089bbe:	bf00      	nop

08089bc0 <asctime>:
 8089bc0:	4b09      	ldr	r3, [pc, #36]	; (8089be8 <asctime+0x28>)
 8089bc2:	b570      	push	{r4, r5, r6, lr}
 8089bc4:	681c      	ldr	r4, [r3, #0]
 8089bc6:	4606      	mov	r6, r0
 8089bc8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8089bca:	b93d      	cbnz	r5, 8089bdc <asctime+0x1c>
 8089bcc:	201a      	movs	r0, #26
 8089bce:	f7fb fe6b 	bl	80858a8 <malloc>
 8089bd2:	221a      	movs	r2, #26
 8089bd4:	6420      	str	r0, [r4, #64]	; 0x40
 8089bd6:	4629      	mov	r1, r5
 8089bd8:	f000 f956 	bl	8089e88 <memset>
 8089bdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8089bde:	4630      	mov	r0, r6
 8089be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8089be4:	f000 b802 	b.w	8089bec <asctime_r>
 8089be8:	200000b8 	.word	0x200000b8

08089bec <asctime_r>:
 8089bec:	b510      	push	{r4, lr}
 8089bee:	460c      	mov	r4, r1
 8089bf0:	6941      	ldr	r1, [r0, #20]
 8089bf2:	b086      	sub	sp, #24
 8089bf4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8089bf8:	6903      	ldr	r3, [r0, #16]
 8089bfa:	6982      	ldr	r2, [r0, #24]
 8089bfc:	9104      	str	r1, [sp, #16]
 8089bfe:	6801      	ldr	r1, [r0, #0]
 8089c00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8089c04:	9103      	str	r1, [sp, #12]
 8089c06:	6841      	ldr	r1, [r0, #4]
 8089c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8089c0c:	9102      	str	r1, [sp, #8]
 8089c0e:	6881      	ldr	r1, [r0, #8]
 8089c10:	9101      	str	r1, [sp, #4]
 8089c12:	68c1      	ldr	r1, [r0, #12]
 8089c14:	4620      	mov	r0, r4
 8089c16:	9100      	str	r1, [sp, #0]
 8089c18:	4904      	ldr	r1, [pc, #16]	; (8089c2c <asctime_r+0x40>)
 8089c1a:	440b      	add	r3, r1
 8089c1c:	4904      	ldr	r1, [pc, #16]	; (8089c30 <asctime_r+0x44>)
 8089c1e:	440a      	add	r2, r1
 8089c20:	4904      	ldr	r1, [pc, #16]	; (8089c34 <asctime_r+0x48>)
 8089c22:	f7fb fe61 	bl	80858e8 <siprintf>
 8089c26:	4620      	mov	r0, r4
 8089c28:	b006      	add	sp, #24
 8089c2a:	bd10      	pop	{r4, pc}
 8089c2c:	0808dc4e 	.word	0x0808dc4e
 8089c30:	0808dc39 	.word	0x0808dc39
 8089c34:	0808dc72 	.word	0x0808dc72

08089c38 <atof>:
 8089c38:	2100      	movs	r1, #0
 8089c3a:	f001 bd11 	b.w	808b660 <strtod>
	...

08089c40 <__cxa_atexit>:
 8089c40:	b510      	push	{r4, lr}
 8089c42:	4c05      	ldr	r4, [pc, #20]	; (8089c58 <__cxa_atexit+0x18>)
 8089c44:	4613      	mov	r3, r2
 8089c46:	b12c      	cbz	r4, 8089c54 <__cxa_atexit+0x14>
 8089c48:	460a      	mov	r2, r1
 8089c4a:	4601      	mov	r1, r0
 8089c4c:	2002      	movs	r0, #2
 8089c4e:	f3af 8000 	nop.w
 8089c52:	bd10      	pop	{r4, pc}
 8089c54:	4620      	mov	r0, r4
 8089c56:	bd10      	pop	{r4, pc}
 8089c58:	00000000 	.word	0x00000000

08089c5c <localtime>:
 8089c5c:	b538      	push	{r3, r4, r5, lr}
 8089c5e:	4b07      	ldr	r3, [pc, #28]	; (8089c7c <localtime+0x20>)
 8089c60:	4605      	mov	r5, r0
 8089c62:	681c      	ldr	r4, [r3, #0]
 8089c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8089c66:	b91b      	cbnz	r3, 8089c70 <localtime+0x14>
 8089c68:	2024      	movs	r0, #36	; 0x24
 8089c6a:	f7fb fe1d 	bl	80858a8 <malloc>
 8089c6e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8089c70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8089c72:	4628      	mov	r0, r5
 8089c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089c78:	f000 b802 	b.w	8089c80 <localtime_r>
 8089c7c:	200000b8 	.word	0x200000b8

08089c80 <localtime_r>:
 8089c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089c84:	460c      	mov	r4, r1
 8089c86:	4680      	mov	r8, r0
 8089c88:	f002 fb20 	bl	808c2cc <__gettzinfo>
 8089c8c:	4621      	mov	r1, r4
 8089c8e:	4607      	mov	r7, r0
 8089c90:	4640      	mov	r0, r8
 8089c92:	f002 fb1f 	bl	808c2d4 <gmtime_r>
 8089c96:	6946      	ldr	r6, [r0, #20]
 8089c98:	4604      	mov	r4, r0
 8089c9a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8089c9e:	07b3      	lsls	r3, r6, #30
 8089ca0:	d105      	bne.n	8089cae <localtime_r+0x2e>
 8089ca2:	2264      	movs	r2, #100	; 0x64
 8089ca4:	fb96 f3f2 	sdiv	r3, r6, r2
 8089ca8:	fb02 6313 	mls	r3, r2, r3, r6
 8089cac:	b94b      	cbnz	r3, 8089cc2 <localtime_r+0x42>
 8089cae:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8089cb2:	fb96 f3f5 	sdiv	r3, r6, r5
 8089cb6:	fb05 6513 	mls	r5, r5, r3, r6
 8089cba:	fab5 f385 	clz	r3, r5
 8089cbe:	095b      	lsrs	r3, r3, #5
 8089cc0:	e000      	b.n	8089cc4 <localtime_r+0x44>
 8089cc2:	2301      	movs	r3, #1
 8089cc4:	4a5f      	ldr	r2, [pc, #380]	; (8089e44 <localtime_r+0x1c4>)
 8089cc6:	2530      	movs	r5, #48	; 0x30
 8089cc8:	fb05 2503 	mla	r5, r5, r3, r2
 8089ccc:	f001 fe10 	bl	808b8f0 <__tz_lock>
 8089cd0:	f001 fe10 	bl	808b8f4 <_tzset_unlocked>
 8089cd4:	4b5c      	ldr	r3, [pc, #368]	; (8089e48 <localtime_r+0x1c8>)
 8089cd6:	681b      	ldr	r3, [r3, #0]
 8089cd8:	b1f3      	cbz	r3, 8089d18 <localtime_r+0x98>
 8089cda:	687b      	ldr	r3, [r7, #4]
 8089cdc:	429e      	cmp	r6, r3
 8089cde:	d105      	bne.n	8089cec <localtime_r+0x6c>
 8089ce0:	6839      	ldr	r1, [r7, #0]
 8089ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8089ce6:	69fa      	ldr	r2, [r7, #28]
 8089ce8:	b941      	cbnz	r1, 8089cfc <localtime_r+0x7c>
 8089cea:	e00a      	b.n	8089d02 <localtime_r+0x82>
 8089cec:	4630      	mov	r0, r6
 8089cee:	f001 fd57 	bl	808b7a0 <__tzcalc_limits>
 8089cf2:	2800      	cmp	r0, #0
 8089cf4:	d1f4      	bne.n	8089ce0 <localtime_r+0x60>
 8089cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8089cfa:	e00d      	b.n	8089d18 <localtime_r+0x98>
 8089cfc:	4293      	cmp	r3, r2
 8089cfe:	db08      	blt.n	8089d12 <localtime_r+0x92>
 8089d00:	e001      	b.n	8089d06 <localtime_r+0x86>
 8089d02:	4293      	cmp	r3, r2
 8089d04:	da07      	bge.n	8089d16 <localtime_r+0x96>
 8089d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8089d08:	4293      	cmp	r3, r2
 8089d0a:	bfac      	ite	ge
 8089d0c:	2300      	movge	r3, #0
 8089d0e:	2301      	movlt	r3, #1
 8089d10:	e002      	b.n	8089d18 <localtime_r+0x98>
 8089d12:	2300      	movs	r3, #0
 8089d14:	e000      	b.n	8089d18 <localtime_r+0x98>
 8089d16:	2301      	movs	r3, #1
 8089d18:	6223      	str	r3, [r4, #32]
 8089d1a:	6a23      	ldr	r3, [r4, #32]
 8089d1c:	203c      	movs	r0, #60	; 0x3c
 8089d1e:	2b01      	cmp	r3, #1
 8089d20:	bf0c      	ite	eq
 8089d22:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8089d24:	6a39      	ldrne	r1, [r7, #32]
 8089d26:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8089d2a:	fb91 f6f3 	sdiv	r6, r1, r3
 8089d2e:	fb03 1316 	mls	r3, r3, r6, r1
 8089d32:	fb93 f2f0 	sdiv	r2, r3, r0
 8089d36:	fb00 3012 	mls	r0, r0, r2, r3
 8089d3a:	6861      	ldr	r1, [r4, #4]
 8089d3c:	6823      	ldr	r3, [r4, #0]
 8089d3e:	1a89      	subs	r1, r1, r2
 8089d40:	68a2      	ldr	r2, [r4, #8]
 8089d42:	1a1b      	subs	r3, r3, r0
 8089d44:	1b92      	subs	r2, r2, r6
 8089d46:	2b3b      	cmp	r3, #59	; 0x3b
 8089d48:	6023      	str	r3, [r4, #0]
 8089d4a:	6061      	str	r1, [r4, #4]
 8089d4c:	60a2      	str	r2, [r4, #8]
 8089d4e:	dd03      	ble.n	8089d58 <localtime_r+0xd8>
 8089d50:	3101      	adds	r1, #1
 8089d52:	6061      	str	r1, [r4, #4]
 8089d54:	3b3c      	subs	r3, #60	; 0x3c
 8089d56:	e004      	b.n	8089d62 <localtime_r+0xe2>
 8089d58:	2b00      	cmp	r3, #0
 8089d5a:	da03      	bge.n	8089d64 <localtime_r+0xe4>
 8089d5c:	3901      	subs	r1, #1
 8089d5e:	6061      	str	r1, [r4, #4]
 8089d60:	333c      	adds	r3, #60	; 0x3c
 8089d62:	6023      	str	r3, [r4, #0]
 8089d64:	6863      	ldr	r3, [r4, #4]
 8089d66:	2b3b      	cmp	r3, #59	; 0x3b
 8089d68:	dd03      	ble.n	8089d72 <localtime_r+0xf2>
 8089d6a:	3201      	adds	r2, #1
 8089d6c:	60a2      	str	r2, [r4, #8]
 8089d6e:	3b3c      	subs	r3, #60	; 0x3c
 8089d70:	e004      	b.n	8089d7c <localtime_r+0xfc>
 8089d72:	2b00      	cmp	r3, #0
 8089d74:	da03      	bge.n	8089d7e <localtime_r+0xfe>
 8089d76:	3a01      	subs	r2, #1
 8089d78:	60a2      	str	r2, [r4, #8]
 8089d7a:	333c      	adds	r3, #60	; 0x3c
 8089d7c:	6063      	str	r3, [r4, #4]
 8089d7e:	68a3      	ldr	r3, [r4, #8]
 8089d80:	2b17      	cmp	r3, #23
 8089d82:	dd22      	ble.n	8089dca <localtime_r+0x14a>
 8089d84:	69e2      	ldr	r2, [r4, #28]
 8089d86:	3b18      	subs	r3, #24
 8089d88:	3201      	adds	r2, #1
 8089d8a:	61e2      	str	r2, [r4, #28]
 8089d8c:	69a2      	ldr	r2, [r4, #24]
 8089d8e:	60a3      	str	r3, [r4, #8]
 8089d90:	3201      	adds	r2, #1
 8089d92:	2a06      	cmp	r2, #6
 8089d94:	bfc8      	it	gt
 8089d96:	2200      	movgt	r2, #0
 8089d98:	61a2      	str	r2, [r4, #24]
 8089d9a:	68e2      	ldr	r2, [r4, #12]
 8089d9c:	6923      	ldr	r3, [r4, #16]
 8089d9e:	3201      	adds	r2, #1
 8089da0:	60e2      	str	r2, [r4, #12]
 8089da2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8089da6:	428a      	cmp	r2, r1
 8089da8:	dd46      	ble.n	8089e38 <localtime_r+0x1b8>
 8089daa:	3301      	adds	r3, #1
 8089dac:	2b0c      	cmp	r3, #12
 8089dae:	bf08      	it	eq
 8089db0:	6963      	ldreq	r3, [r4, #20]
 8089db2:	eba2 0201 	sub.w	r2, r2, r1
 8089db6:	60e2      	str	r2, [r4, #12]
 8089db8:	bf05      	ittet	eq
 8089dba:	3301      	addeq	r3, #1
 8089dbc:	2200      	moveq	r2, #0
 8089dbe:	6123      	strne	r3, [r4, #16]
 8089dc0:	6122      	streq	r2, [r4, #16]
 8089dc2:	bf04      	itt	eq
 8089dc4:	6163      	streq	r3, [r4, #20]
 8089dc6:	61e2      	streq	r2, [r4, #28]
 8089dc8:	e036      	b.n	8089e38 <localtime_r+0x1b8>
 8089dca:	2b00      	cmp	r3, #0
 8089dcc:	da34      	bge.n	8089e38 <localtime_r+0x1b8>
 8089dce:	69e2      	ldr	r2, [r4, #28]
 8089dd0:	3318      	adds	r3, #24
 8089dd2:	3a01      	subs	r2, #1
 8089dd4:	61e2      	str	r2, [r4, #28]
 8089dd6:	69a2      	ldr	r2, [r4, #24]
 8089dd8:	60a3      	str	r3, [r4, #8]
 8089dda:	3a01      	subs	r2, #1
 8089ddc:	bf48      	it	mi
 8089dde:	2206      	movmi	r2, #6
 8089de0:	61a2      	str	r2, [r4, #24]
 8089de2:	68e2      	ldr	r2, [r4, #12]
 8089de4:	3a01      	subs	r2, #1
 8089de6:	60e2      	str	r2, [r4, #12]
 8089de8:	bb32      	cbnz	r2, 8089e38 <localtime_r+0x1b8>
 8089dea:	6923      	ldr	r3, [r4, #16]
 8089dec:	3b01      	subs	r3, #1
 8089dee:	d401      	bmi.n	8089df4 <localtime_r+0x174>
 8089df0:	6123      	str	r3, [r4, #16]
 8089df2:	e01d      	b.n	8089e30 <localtime_r+0x1b0>
 8089df4:	230b      	movs	r3, #11
 8089df6:	6123      	str	r3, [r4, #16]
 8089df8:	6963      	ldr	r3, [r4, #20]
 8089dfa:	1e5a      	subs	r2, r3, #1
 8089dfc:	f012 0f03 	tst.w	r2, #3
 8089e00:	6162      	str	r2, [r4, #20]
 8089e02:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8089e06:	d105      	bne.n	8089e14 <localtime_r+0x194>
 8089e08:	2164      	movs	r1, #100	; 0x64
 8089e0a:	fb93 f2f1 	sdiv	r2, r3, r1
 8089e0e:	fb01 3212 	mls	r2, r1, r2, r3
 8089e12:	b94a      	cbnz	r2, 8089e28 <localtime_r+0x1a8>
 8089e14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8089e18:	fb93 f2f1 	sdiv	r2, r3, r1
 8089e1c:	fb01 3312 	mls	r3, r1, r2, r3
 8089e20:	fab3 f383 	clz	r3, r3
 8089e24:	095b      	lsrs	r3, r3, #5
 8089e26:	e000      	b.n	8089e2a <localtime_r+0x1aa>
 8089e28:	2301      	movs	r3, #1
 8089e2a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8089e2e:	61e3      	str	r3, [r4, #28]
 8089e30:	6923      	ldr	r3, [r4, #16]
 8089e32:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8089e36:	60e3      	str	r3, [r4, #12]
 8089e38:	f001 fd5b 	bl	808b8f2 <__tz_unlock>
 8089e3c:	4620      	mov	r0, r4
 8089e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8089e42:	bf00      	nop
 8089e44:	0808ddfc 	.word	0x0808ddfc
 8089e48:	200010ac 	.word	0x200010ac

08089e4c <_localeconv_r>:
 8089e4c:	4800      	ldr	r0, [pc, #0]	; (8089e50 <_localeconv_r+0x4>)
 8089e4e:	4770      	bx	lr
 8089e50:	200000bc 	.word	0x200000bc

08089e54 <memcmp>:
 8089e54:	b510      	push	{r4, lr}
 8089e56:	3901      	subs	r1, #1
 8089e58:	4402      	add	r2, r0
 8089e5a:	4290      	cmp	r0, r2
 8089e5c:	d007      	beq.n	8089e6e <memcmp+0x1a>
 8089e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8089e62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8089e66:	42a3      	cmp	r3, r4
 8089e68:	d0f7      	beq.n	8089e5a <memcmp+0x6>
 8089e6a:	1b18      	subs	r0, r3, r4
 8089e6c:	bd10      	pop	{r4, pc}
 8089e6e:	2000      	movs	r0, #0
 8089e70:	bd10      	pop	{r4, pc}

08089e72 <memcpy>:
 8089e72:	b510      	push	{r4, lr}
 8089e74:	1e43      	subs	r3, r0, #1
 8089e76:	440a      	add	r2, r1
 8089e78:	4291      	cmp	r1, r2
 8089e7a:	d004      	beq.n	8089e86 <memcpy+0x14>
 8089e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8089e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8089e84:	e7f8      	b.n	8089e78 <memcpy+0x6>
 8089e86:	bd10      	pop	{r4, pc}

08089e88 <memset>:
 8089e88:	4603      	mov	r3, r0
 8089e8a:	4402      	add	r2, r0
 8089e8c:	4293      	cmp	r3, r2
 8089e8e:	d002      	beq.n	8089e96 <memset+0xe>
 8089e90:	f803 1b01 	strb.w	r1, [r3], #1
 8089e94:	e7fa      	b.n	8089e8c <memset+0x4>
 8089e96:	4770      	bx	lr

08089e98 <srand>:
 8089e98:	b538      	push	{r3, r4, r5, lr}
 8089e9a:	4b12      	ldr	r3, [pc, #72]	; (8089ee4 <srand+0x4c>)
 8089e9c:	4605      	mov	r5, r0
 8089e9e:	681c      	ldr	r4, [r3, #0]
 8089ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089ea2:	b9d3      	cbnz	r3, 8089eda <srand+0x42>
 8089ea4:	2018      	movs	r0, #24
 8089ea6:	f7fb fcff 	bl	80858a8 <malloc>
 8089eaa:	f243 330e 	movw	r3, #13070	; 0x330e
 8089eae:	63a0      	str	r0, [r4, #56]	; 0x38
 8089eb0:	8003      	strh	r3, [r0, #0]
 8089eb2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8089eb6:	8043      	strh	r3, [r0, #2]
 8089eb8:	f241 2334 	movw	r3, #4660	; 0x1234
 8089ebc:	8083      	strh	r3, [r0, #4]
 8089ebe:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8089ec2:	80c3      	strh	r3, [r0, #6]
 8089ec4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8089ec8:	8103      	strh	r3, [r0, #8]
 8089eca:	2305      	movs	r3, #5
 8089ecc:	8143      	strh	r3, [r0, #10]
 8089ece:	230b      	movs	r3, #11
 8089ed0:	8183      	strh	r3, [r0, #12]
 8089ed2:	2201      	movs	r2, #1
 8089ed4:	2300      	movs	r3, #0
 8089ed6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8089eda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089edc:	2200      	movs	r2, #0
 8089ede:	611d      	str	r5, [r3, #16]
 8089ee0:	615a      	str	r2, [r3, #20]
 8089ee2:	bd38      	pop	{r3, r4, r5, pc}
 8089ee4:	200000b8 	.word	0x200000b8

08089ee8 <strchr>:
 8089ee8:	b2c9      	uxtb	r1, r1
 8089eea:	4603      	mov	r3, r0
 8089eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8089ef0:	b11a      	cbz	r2, 8089efa <strchr+0x12>
 8089ef2:	4291      	cmp	r1, r2
 8089ef4:	d1f9      	bne.n	8089eea <strchr+0x2>
 8089ef6:	4618      	mov	r0, r3
 8089ef8:	4770      	bx	lr
 8089efa:	2900      	cmp	r1, #0
 8089efc:	bf0c      	ite	eq
 8089efe:	4618      	moveq	r0, r3
 8089f00:	2000      	movne	r0, #0
 8089f02:	4770      	bx	lr

08089f04 <strcmp>:
 8089f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8089f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8089f0c:	2a01      	cmp	r2, #1
 8089f0e:	bf28      	it	cs
 8089f10:	429a      	cmpcs	r2, r3
 8089f12:	d0f7      	beq.n	8089f04 <strcmp>
 8089f14:	1ad0      	subs	r0, r2, r3
 8089f16:	4770      	bx	lr

08089f18 <strcpy>:
 8089f18:	4603      	mov	r3, r0
 8089f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8089f1e:	f803 2b01 	strb.w	r2, [r3], #1
 8089f22:	2a00      	cmp	r2, #0
 8089f24:	d1f9      	bne.n	8089f1a <strcpy+0x2>
 8089f26:	4770      	bx	lr

08089f28 <strdup>:
 8089f28:	4b02      	ldr	r3, [pc, #8]	; (8089f34 <strdup+0xc>)
 8089f2a:	4601      	mov	r1, r0
 8089f2c:	6818      	ldr	r0, [r3, #0]
 8089f2e:	f000 b803 	b.w	8089f38 <_strdup_r>
 8089f32:	bf00      	nop
 8089f34:	200000b8 	.word	0x200000b8

08089f38 <_strdup_r>:
 8089f38:	b570      	push	{r4, r5, r6, lr}
 8089f3a:	4606      	mov	r6, r0
 8089f3c:	4608      	mov	r0, r1
 8089f3e:	460c      	mov	r4, r1
 8089f40:	f000 fd22 	bl	808a988 <strlen>
 8089f44:	1c45      	adds	r5, r0, #1
 8089f46:	4629      	mov	r1, r5
 8089f48:	4630      	mov	r0, r6
 8089f4a:	f7fb fcfd 	bl	8085948 <_malloc_r>
 8089f4e:	4606      	mov	r6, r0
 8089f50:	b118      	cbz	r0, 8089f5a <_strdup_r+0x22>
 8089f52:	462a      	mov	r2, r5
 8089f54:	4621      	mov	r1, r4
 8089f56:	f7ff ff8c 	bl	8089e72 <memcpy>
 8089f5a:	4630      	mov	r0, r6
 8089f5c:	bd70      	pop	{r4, r5, r6, pc}

08089f5e <iso_year_adjust>:
 8089f5e:	6941      	ldr	r1, [r0, #20]
 8089f60:	b510      	push	{r4, lr}
 8089f62:	078b      	lsls	r3, r1, #30
 8089f64:	d10c      	bne.n	8089f80 <iso_year_adjust+0x22>
 8089f66:	f240 736c 	movw	r3, #1900	; 0x76c
 8089f6a:	2900      	cmp	r1, #0
 8089f6c:	bfa8      	it	ge
 8089f6e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8089f72:	440b      	add	r3, r1
 8089f74:	2464      	movs	r4, #100	; 0x64
 8089f76:	fb93 f2f4 	sdiv	r2, r3, r4
 8089f7a:	fb04 3312 	mls	r3, r4, r2, r3
 8089f7e:	b983      	cbnz	r3, 8089fa2 <iso_year_adjust+0x44>
 8089f80:	f240 736c 	movw	r3, #1900	; 0x76c
 8089f84:	2900      	cmp	r1, #0
 8089f86:	bfa8      	it	ge
 8089f88:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8089f8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8089f90:	440b      	add	r3, r1
 8089f92:	fb93 f1f2 	sdiv	r1, r3, r2
 8089f96:	fb02 3311 	mls	r3, r2, r1, r3
 8089f9a:	fab3 f283 	clz	r2, r3
 8089f9e:	0952      	lsrs	r2, r2, #5
 8089fa0:	e000      	b.n	8089fa4 <iso_year_adjust+0x46>
 8089fa2:	2201      	movs	r2, #1
 8089fa4:	6983      	ldr	r3, [r0, #24]
 8089fa6:	69c1      	ldr	r1, [r0, #28]
 8089fa8:	005b      	lsls	r3, r3, #1
 8089faa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8089fae:	4413      	add	r3, r2
 8089fb0:	2b21      	cmp	r3, #33	; 0x21
 8089fb2:	dc0e      	bgt.n	8089fd2 <iso_year_adjust+0x74>
 8089fb4:	2b20      	cmp	r3, #32
 8089fb6:	da2f      	bge.n	808a018 <iso_year_adjust+0xba>
 8089fb8:	2b0d      	cmp	r3, #13
 8089fba:	dc02      	bgt.n	8089fc2 <iso_year_adjust+0x64>
 8089fbc:	2b0a      	cmp	r3, #10
 8089fbe:	db05      	blt.n	8089fcc <iso_year_adjust+0x6e>
 8089fc0:	e02a      	b.n	808a018 <iso_year_adjust+0xba>
 8089fc2:	2b10      	cmp	r3, #16
 8089fc4:	db26      	blt.n	808a014 <iso_year_adjust+0xb6>
 8089fc6:	2b11      	cmp	r3, #17
 8089fc8:	dd26      	ble.n	808a018 <iso_year_adjust+0xba>
 8089fca:	3b1c      	subs	r3, #28
 8089fcc:	2b01      	cmp	r3, #1
 8089fce:	d923      	bls.n	808a018 <iso_year_adjust+0xba>
 8089fd0:	e020      	b.n	808a014 <iso_year_adjust+0xb6>
 8089fd2:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8089fd6:	4293      	cmp	r3, r2
 8089fd8:	dc0e      	bgt.n	8089ff8 <iso_year_adjust+0x9a>
 8089fda:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8089fde:	4293      	cmp	r3, r2
 8089fe0:	da16      	bge.n	808a010 <iso_year_adjust+0xb2>
 8089fe2:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8089fe6:	4293      	cmp	r3, r2
 8089fe8:	d012      	beq.n	808a010 <iso_year_adjust+0xb2>
 8089fea:	db13      	blt.n	808a014 <iso_year_adjust+0xb6>
 8089fec:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8089ff0:	3b12      	subs	r3, #18
 8089ff2:	2b02      	cmp	r3, #2
 8089ff4:	d90c      	bls.n	808a010 <iso_year_adjust+0xb2>
 8089ff6:	e00d      	b.n	808a014 <iso_year_adjust+0xb6>
 8089ff8:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8089ffc:	4293      	cmp	r3, r2
 8089ffe:	d007      	beq.n	808a010 <iso_year_adjust+0xb2>
 808a000:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808a004:	4293      	cmp	r3, r2
 808a006:	d003      	beq.n	808a010 <iso_year_adjust+0xb2>
 808a008:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808a00c:	4293      	cmp	r3, r2
 808a00e:	d101      	bne.n	808a014 <iso_year_adjust+0xb6>
 808a010:	2001      	movs	r0, #1
 808a012:	bd10      	pop	{r4, pc}
 808a014:	2000      	movs	r0, #0
 808a016:	bd10      	pop	{r4, pc}
 808a018:	f04f 30ff 	mov.w	r0, #4294967295
 808a01c:	bd10      	pop	{r4, pc}
	...

0808a020 <strftime>:
 808a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a024:	460e      	mov	r6, r1
 808a026:	b093      	sub	sp, #76	; 0x4c
 808a028:	461d      	mov	r5, r3
 808a02a:	4607      	mov	r7, r0
 808a02c:	4691      	mov	r9, r2
 808a02e:	f001 fba7 	bl	808b780 <__get_current_time_locale>
 808a032:	2300      	movs	r3, #0
 808a034:	9306      	str	r3, [sp, #24]
 808a036:	461c      	mov	r4, r3
 808a038:	1e73      	subs	r3, r6, #1
 808a03a:	9003      	str	r0, [sp, #12]
 808a03c:	9302      	str	r3, [sp, #8]
 808a03e:	f899 3000 	ldrb.w	r3, [r9]
 808a042:	2b00      	cmp	r3, #0
 808a044:	f000 8492 	beq.w	808a96c <strftime+0x94c>
 808a048:	2b25      	cmp	r3, #37	; 0x25
 808a04a:	d008      	beq.n	808a05e <strftime+0x3e>
 808a04c:	9a02      	ldr	r2, [sp, #8]
 808a04e:	4294      	cmp	r4, r2
 808a050:	f080 8490 	bcs.w	808a974 <strftime+0x954>
 808a054:	553b      	strb	r3, [r7, r4]
 808a056:	f109 0901 	add.w	r9, r9, #1
 808a05a:	3401      	adds	r4, #1
 808a05c:	e7ef      	b.n	808a03e <strftime+0x1e>
 808a05e:	f899 a001 	ldrb.w	sl, [r9, #1]
 808a062:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808a066:	d007      	beq.n	808a078 <strftime+0x58>
 808a068:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a06c:	d004      	beq.n	808a078 <strftime+0x58>
 808a06e:	f109 0901 	add.w	r9, r9, #1
 808a072:	f04f 0a00 	mov.w	sl, #0
 808a076:	e001      	b.n	808a07c <strftime+0x5c>
 808a078:	f109 0902 	add.w	r9, r9, #2
 808a07c:	f899 3000 	ldrb.w	r3, [r9]
 808a080:	3b31      	subs	r3, #49	; 0x31
 808a082:	2b08      	cmp	r3, #8
 808a084:	d808      	bhi.n	808a098 <strftime+0x78>
 808a086:	4648      	mov	r0, r9
 808a088:	220a      	movs	r2, #10
 808a08a:	a90a      	add	r1, sp, #40	; 0x28
 808a08c:	f001 fb6e 	bl	808b76c <strtoul>
 808a090:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808a094:	4680      	mov	r8, r0
 808a096:	e001      	b.n	808a09c <strftime+0x7c>
 808a098:	f04f 0800 	mov.w	r8, #0
 808a09c:	f899 3000 	ldrb.w	r3, [r9]
 808a0a0:	2b45      	cmp	r3, #69	; 0x45
 808a0a2:	d001      	beq.n	808a0a8 <strftime+0x88>
 808a0a4:	2b4f      	cmp	r3, #79	; 0x4f
 808a0a6:	d101      	bne.n	808a0ac <strftime+0x8c>
 808a0a8:	f109 0901 	add.w	r9, r9, #1
 808a0ac:	f899 0000 	ldrb.w	r0, [r9]
 808a0b0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808a0b4:	2b55      	cmp	r3, #85	; 0x55
 808a0b6:	f200 845d 	bhi.w	808a974 <strftime+0x954>
 808a0ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 808a0be:	044a      	.short	0x044a
 808a0c0:	045b045b 	.word	0x045b045b
 808a0c4:	045b045b 	.word	0x045b045b
 808a0c8:	045b045b 	.word	0x045b045b
 808a0cc:	045b045b 	.word	0x045b045b
 808a0d0:	045b045b 	.word	0x045b045b
 808a0d4:	045b045b 	.word	0x045b045b
 808a0d8:	045b045b 	.word	0x045b045b
 808a0dc:	045b045b 	.word	0x045b045b
 808a0e0:	045b045b 	.word	0x045b045b
 808a0e4:	045b045b 	.word	0x045b045b
 808a0e8:	045b045b 	.word	0x045b045b
 808a0ec:	045b045b 	.word	0x045b045b
 808a0f0:	045b045b 	.word	0x045b045b
 808a0f4:	006f045b 	.word	0x006f045b
 808a0f8:	00d400a1 	.word	0x00d400a1
 808a0fc:	045b011a 	.word	0x045b011a
 808a100:	01a0013f 	.word	0x01a0013f
 808a104:	022d0226 	.word	0x022d0226
 808a108:	045b045b 	.word	0x045b045b
 808a10c:	0260045b 	.word	0x0260045b
 808a110:	045b045b 	.word	0x045b045b
 808a114:	045b0268 	.word	0x045b0268
 808a118:	031c0296 	.word	0x031c0296
 808a11c:	033a0324 	.word	0x033a0324
 808a120:	03850342 	.word	0x03850342
 808a124:	039f00c6 	.word	0x039f00c6
 808a128:	045b041f 	.word	0x045b041f
 808a12c:	045b045b 	.word	0x045b045b
 808a130:	045b045b 	.word	0x045b045b
 808a134:	0056045b 	.word	0x0056045b
 808a138:	00ba0089 	.word	0x00ba0089
 808a13c:	010c010c 	.word	0x010c010c
 808a140:	0171045b 	.word	0x0171045b
 808a144:	045b0089 	.word	0x045b0089
 808a148:	0226023d 	.word	0x0226023d
 808a14c:	025d022d 	.word	0x025d022d
 808a150:	045b0262 	.word	0x045b0262
 808a154:	045b0268 	.word	0x045b0268
 808a158:	029b00be 	.word	0x029b00be
 808a15c:	032d031e 	.word	0x032d031e
 808a160:	037e045b 	.word	0x037e045b
 808a164:	039100c2 	.word	0x039100c2
 808a168:	03e7      	.short	0x03e7
 808a16a:	69ab      	ldr	r3, [r5, #24]
 808a16c:	9a03      	ldr	r2, [sp, #12]
 808a16e:	3318      	adds	r3, #24
 808a170:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a174:	4640      	mov	r0, r8
 808a176:	f000 fc07 	bl	808a988 <strlen>
 808a17a:	f108 38ff 	add.w	r8, r8, #4294967295
 808a17e:	193b      	adds	r3, r7, r4
 808a180:	4420      	add	r0, r4
 808a182:	4284      	cmp	r4, r0
 808a184:	f000 83eb 	beq.w	808a95e <strftime+0x93e>
 808a188:	9a02      	ldr	r2, [sp, #8]
 808a18a:	4294      	cmp	r4, r2
 808a18c:	f080 83f2 	bcs.w	808a974 <strftime+0x954>
 808a190:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a194:	3401      	adds	r4, #1
 808a196:	f803 2b01 	strb.w	r2, [r3], #1
 808a19a:	e7f2      	b.n	808a182 <strftime+0x162>
 808a19c:	69ab      	ldr	r3, [r5, #24]
 808a19e:	9a03      	ldr	r2, [sp, #12]
 808a1a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808a1a4:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808a1a8:	4640      	mov	r0, r8
 808a1aa:	f000 fbed 	bl	808a988 <strlen>
 808a1ae:	f108 38ff 	add.w	r8, r8, #4294967295
 808a1b2:	193b      	adds	r3, r7, r4
 808a1b4:	4420      	add	r0, r4
 808a1b6:	4284      	cmp	r4, r0
 808a1b8:	f000 83d1 	beq.w	808a95e <strftime+0x93e>
 808a1bc:	9a02      	ldr	r2, [sp, #8]
 808a1be:	4294      	cmp	r4, r2
 808a1c0:	f080 83d8 	bcs.w	808a974 <strftime+0x954>
 808a1c4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a1c8:	3401      	adds	r4, #1
 808a1ca:	f803 2b01 	strb.w	r2, [r3], #1
 808a1ce:	e7f2      	b.n	808a1b6 <strftime+0x196>
 808a1d0:	692b      	ldr	r3, [r5, #16]
 808a1d2:	9a03      	ldr	r2, [sp, #12]
 808a1d4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a1d8:	4640      	mov	r0, r8
 808a1da:	f000 fbd5 	bl	808a988 <strlen>
 808a1de:	f108 38ff 	add.w	r8, r8, #4294967295
 808a1e2:	193b      	adds	r3, r7, r4
 808a1e4:	4420      	add	r0, r4
 808a1e6:	4284      	cmp	r4, r0
 808a1e8:	f000 83b9 	beq.w	808a95e <strftime+0x93e>
 808a1ec:	9a02      	ldr	r2, [sp, #8]
 808a1ee:	4294      	cmp	r4, r2
 808a1f0:	f080 83c0 	bcs.w	808a974 <strftime+0x954>
 808a1f4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a1f8:	3401      	adds	r4, #1
 808a1fa:	f803 2b01 	strb.w	r2, [r3], #1
 808a1fe:	e7f2      	b.n	808a1e6 <strftime+0x1c6>
 808a200:	692b      	ldr	r3, [r5, #16]
 808a202:	9a03      	ldr	r2, [sp, #12]
 808a204:	330c      	adds	r3, #12
 808a206:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a20a:	4640      	mov	r0, r8
 808a20c:	f000 fbbc 	bl	808a988 <strlen>
 808a210:	f108 38ff 	add.w	r8, r8, #4294967295
 808a214:	193b      	adds	r3, r7, r4
 808a216:	4420      	add	r0, r4
 808a218:	4284      	cmp	r4, r0
 808a21a:	f000 83a0 	beq.w	808a95e <strftime+0x93e>
 808a21e:	9a02      	ldr	r2, [sp, #8]
 808a220:	4294      	cmp	r4, r2
 808a222:	f080 83a7 	bcs.w	808a974 <strftime+0x954>
 808a226:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a22a:	3401      	adds	r4, #1
 808a22c:	f803 2b01 	strb.w	r2, [r3], #1
 808a230:	e7f2      	b.n	808a218 <strftime+0x1f8>
 808a232:	9b03      	ldr	r3, [sp, #12]
 808a234:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808a238:	e00a      	b.n	808a250 <strftime+0x230>
 808a23a:	9b03      	ldr	r3, [sp, #12]
 808a23c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808a240:	e006      	b.n	808a250 <strftime+0x230>
 808a242:	9b03      	ldr	r3, [sp, #12]
 808a244:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808a248:	e002      	b.n	808a250 <strftime+0x230>
 808a24a:	9b03      	ldr	r3, [sp, #12]
 808a24c:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808a250:	4640      	mov	r0, r8
 808a252:	f000 fb99 	bl	808a988 <strlen>
 808a256:	f898 3000 	ldrb.w	r3, [r8]
 808a25a:	2b00      	cmp	r3, #0
 808a25c:	f000 837f 	beq.w	808a95e <strftime+0x93e>
 808a260:	462b      	mov	r3, r5
 808a262:	4642      	mov	r2, r8
 808a264:	e093      	b.n	808a38e <strftime+0x36e>
 808a266:	49b6      	ldr	r1, [pc, #728]	; (808a540 <strftime+0x520>)
 808a268:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808a26c:	458b      	cmp	fp, r1
 808a26e:	bfac      	ite	ge
 808a270:	2100      	movge	r1, #0
 808a272:	2101      	movlt	r1, #1
 808a274:	f1bb 0f00 	cmp.w	fp, #0
 808a278:	db04      	blt.n	808a284 <strftime+0x264>
 808a27a:	2064      	movs	r0, #100	; 0x64
 808a27c:	fb9b f0f0 	sdiv	r0, fp, r0
 808a280:	3013      	adds	r0, #19
 808a282:	e008      	b.n	808a296 <strftime+0x276>
 808a284:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808a288:	9107      	str	r1, [sp, #28]
 808a28a:	f001 fcb9 	bl	808bc00 <abs>
 808a28e:	2364      	movs	r3, #100	; 0x64
 808a290:	fb90 f0f3 	sdiv	r0, r0, r3
 808a294:	9907      	ldr	r1, [sp, #28]
 808a296:	f1ba 0f00 	cmp.w	sl, #0
 808a29a:	d008      	beq.n	808a2ae <strftime+0x28e>
 808a29c:	2863      	cmp	r0, #99	; 0x63
 808a29e:	dd09      	ble.n	808a2b4 <strftime+0x294>
 808a2a0:	4ba8      	ldr	r3, [pc, #672]	; (808a544 <strftime+0x524>)
 808a2a2:	4aa9      	ldr	r2, [pc, #676]	; (808a548 <strftime+0x528>)
 808a2a4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a2a8:	bf18      	it	ne
 808a2aa:	4613      	movne	r3, r2
 808a2ac:	e003      	b.n	808a2b6 <strftime+0x296>
 808a2ae:	4ba6      	ldr	r3, [pc, #664]	; (808a548 <strftime+0x528>)
 808a2b0:	4aa6      	ldr	r2, [pc, #664]	; (808a54c <strftime+0x52c>)
 808a2b2:	e001      	b.n	808a2b8 <strftime+0x298>
 808a2b4:	4ba4      	ldr	r3, [pc, #656]	; (808a548 <strftime+0x528>)
 808a2b6:	4aa6      	ldr	r2, [pc, #664]	; (808a550 <strftime+0x530>)
 808a2b8:	f1b8 0f01 	cmp.w	r8, #1
 808a2bc:	bf98      	it	ls
 808a2be:	f04f 0802 	movls.w	r8, #2
 808a2c2:	ebc1 0108 	rsb	r1, r1, r8
 808a2c6:	9001      	str	r0, [sp, #4]
 808a2c8:	9100      	str	r1, [sp, #0]
 808a2ca:	489d      	ldr	r0, [pc, #628]	; (808a540 <strftime+0x520>)
 808a2cc:	49a1      	ldr	r1, [pc, #644]	; (808a554 <strftime+0x534>)
 808a2ce:	4583      	cmp	fp, r0
 808a2d0:	bfb8      	it	lt
 808a2d2:	460b      	movlt	r3, r1
 808a2d4:	e21d      	b.n	808a712 <strftime+0x6f2>
 808a2d6:	4aa0      	ldr	r2, [pc, #640]	; (808a558 <strftime+0x538>)
 808a2d8:	49a0      	ldr	r1, [pc, #640]	; (808a55c <strftime+0x53c>)
 808a2da:	68eb      	ldr	r3, [r5, #12]
 808a2dc:	2864      	cmp	r0, #100	; 0x64
 808a2de:	bf08      	it	eq
 808a2e0:	460a      	moveq	r2, r1
 808a2e2:	1b31      	subs	r1, r6, r4
 808a2e4:	1938      	adds	r0, r7, r4
 808a2e6:	f7fb fb17 	bl	8085918 <sniprintf>
 808a2ea:	2800      	cmp	r0, #0
 808a2ec:	f280 8302 	bge.w	808a8f4 <strftime+0x8d4>
 808a2f0:	e340      	b.n	808a974 <strftime+0x954>
 808a2f2:	6968      	ldr	r0, [r5, #20]
 808a2f4:	692b      	ldr	r3, [r5, #16]
 808a2f6:	2800      	cmp	r0, #0
 808a2f8:	f103 0b01 	add.w	fp, r3, #1
 808a2fc:	eb07 0804 	add.w	r8, r7, r4
 808a300:	ebc4 0a06 	rsb	sl, r4, r6
 808a304:	68eb      	ldr	r3, [r5, #12]
 808a306:	db05      	blt.n	808a314 <strftime+0x2f4>
 808a308:	2264      	movs	r2, #100	; 0x64
 808a30a:	fb90 f1f2 	sdiv	r1, r0, r2
 808a30e:	fb02 0011 	mls	r0, r2, r1, r0
 808a312:	e00a      	b.n	808a32a <strftime+0x30a>
 808a314:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a318:	9307      	str	r3, [sp, #28]
 808a31a:	f001 fc71 	bl	808bc00 <abs>
 808a31e:	2264      	movs	r2, #100	; 0x64
 808a320:	fb90 f1f2 	sdiv	r1, r0, r2
 808a324:	fb01 0012 	mls	r0, r1, r2, r0
 808a328:	9b07      	ldr	r3, [sp, #28]
 808a32a:	9001      	str	r0, [sp, #4]
 808a32c:	9300      	str	r3, [sp, #0]
 808a32e:	4651      	mov	r1, sl
 808a330:	465b      	mov	r3, fp
 808a332:	4640      	mov	r0, r8
 808a334:	4a8a      	ldr	r2, [pc, #552]	; (808a560 <strftime+0x540>)
 808a336:	f7fb faef 	bl	8085918 <sniprintf>
 808a33a:	e7d6      	b.n	808a2ea <strftime+0x2ca>
 808a33c:	2325      	movs	r3, #37	; 0x25
 808a33e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808a342:	f1ba 0f00 	cmp.w	sl, #0
 808a346:	d007      	beq.n	808a358 <strftime+0x338>
 808a348:	f1b8 0f05 	cmp.w	r8, #5
 808a34c:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808a350:	bf98      	it	ls
 808a352:	f04f 0806 	movls.w	r8, #6
 808a356:	e004      	b.n	808a362 <strftime+0x342>
 808a358:	232b      	movs	r3, #43	; 0x2b
 808a35a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808a35e:	f04f 080a 	mov.w	r8, #10
 808a362:	f1b8 0306 	subs.w	r3, r8, #6
 808a366:	d102      	bne.n	808a36e <strftime+0x34e>
 808a368:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808a36c:	e00a      	b.n	808a384 <strftime+0x364>
 808a36e:	4a7d      	ldr	r2, [pc, #500]	; (808a564 <strftime+0x544>)
 808a370:	211e      	movs	r1, #30
 808a372:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808a376:	f7fb facf 	bl	8085918 <sniprintf>
 808a37a:	2800      	cmp	r0, #0
 808a37c:	ddf4      	ble.n	808a368 <strftime+0x348>
 808a37e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808a382:	4418      	add	r0, r3
 808a384:	4978      	ldr	r1, [pc, #480]	; (808a568 <strftime+0x548>)
 808a386:	f7ff fdc7 	bl	8089f18 <strcpy>
 808a38a:	462b      	mov	r3, r5
 808a38c:	aa0a      	add	r2, sp, #40	; 0x28
 808a38e:	1b31      	subs	r1, r6, r4
 808a390:	1938      	adds	r0, r7, r4
 808a392:	f7ff fe45 	bl	808a020 <strftime>
 808a396:	2800      	cmp	r0, #0
 808a398:	f340 82ec 	ble.w	808a974 <strftime+0x954>
 808a39c:	4404      	add	r4, r0
 808a39e:	e2de      	b.n	808a95e <strftime+0x93e>
 808a3a0:	4628      	mov	r0, r5
 808a3a2:	f7ff fddc 	bl	8089f5e <iso_year_adjust>
 808a3a6:	4680      	mov	r8, r0
 808a3a8:	6968      	ldr	r0, [r5, #20]
 808a3aa:	2800      	cmp	r0, #0
 808a3ac:	db05      	blt.n	808a3ba <strftime+0x39a>
 808a3ae:	2264      	movs	r2, #100	; 0x64
 808a3b0:	fb90 f1f2 	sdiv	r1, r0, r2
 808a3b4:	fb02 0011 	mls	r0, r2, r1, r0
 808a3b8:	e008      	b.n	808a3cc <strftime+0x3ac>
 808a3ba:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a3be:	f001 fc1f 	bl	808bc00 <abs>
 808a3c2:	2264      	movs	r2, #100	; 0x64
 808a3c4:	fb90 f3f2 	sdiv	r3, r0, r2
 808a3c8:	fb03 0012 	mls	r0, r3, r2, r0
 808a3cc:	f1b8 0f00 	cmp.w	r8, #0
 808a3d0:	da06      	bge.n	808a3e0 <strftime+0x3c0>
 808a3d2:	696a      	ldr	r2, [r5, #20]
 808a3d4:	4b65      	ldr	r3, [pc, #404]	; (808a56c <strftime+0x54c>)
 808a3d6:	429a      	cmp	r2, r3
 808a3d8:	bfb8      	it	lt
 808a3da:	f04f 0801 	movlt.w	r8, #1
 808a3de:	e006      	b.n	808a3ee <strftime+0x3ce>
 808a3e0:	d005      	beq.n	808a3ee <strftime+0x3ce>
 808a3e2:	696a      	ldr	r2, [r5, #20]
 808a3e4:	4b56      	ldr	r3, [pc, #344]	; (808a540 <strftime+0x520>)
 808a3e6:	429a      	cmp	r2, r3
 808a3e8:	bfb8      	it	lt
 808a3ea:	f04f 38ff 	movlt.w	r8, #4294967295
 808a3ee:	2364      	movs	r3, #100	; 0x64
 808a3f0:	4440      	add	r0, r8
 808a3f2:	fb90 f2f3 	sdiv	r2, r0, r3
 808a3f6:	fb03 0012 	mls	r0, r3, r2, r0
 808a3fa:	4418      	add	r0, r3
 808a3fc:	e1f8      	b.n	808a7f0 <strftime+0x7d0>
 808a3fe:	4b50      	ldr	r3, [pc, #320]	; (808a540 <strftime+0x520>)
 808a400:	6969      	ldr	r1, [r5, #20]
 808a402:	4628      	mov	r0, r5
 808a404:	4299      	cmp	r1, r3
 808a406:	bfac      	ite	ge
 808a408:	2300      	movge	r3, #0
 808a40a:	2301      	movlt	r3, #1
 808a40c:	9108      	str	r1, [sp, #32]
 808a40e:	9307      	str	r3, [sp, #28]
 808a410:	f7ff fda5 	bl	8089f5e <iso_year_adjust>
 808a414:	9908      	ldr	r1, [sp, #32]
 808a416:	4683      	mov	fp, r0
 808a418:	2900      	cmp	r1, #0
 808a41a:	db04      	blt.n	808a426 <strftime+0x406>
 808a41c:	2364      	movs	r3, #100	; 0x64
 808a41e:	fb91 f3f3 	sdiv	r3, r1, r3
 808a422:	3313      	adds	r3, #19
 808a424:	e008      	b.n	808a438 <strftime+0x418>
 808a426:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808a42a:	9108      	str	r1, [sp, #32]
 808a42c:	f001 fbe8 	bl	808bc00 <abs>
 808a430:	2364      	movs	r3, #100	; 0x64
 808a432:	fb90 f3f3 	sdiv	r3, r0, r3
 808a436:	9908      	ldr	r1, [sp, #32]
 808a438:	6968      	ldr	r0, [r5, #20]
 808a43a:	2800      	cmp	r0, #0
 808a43c:	db06      	blt.n	808a44c <strftime+0x42c>
 808a43e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808a442:	fb90 fcfe 	sdiv	ip, r0, lr
 808a446:	fb0e 001c 	mls	r0, lr, ip, r0
 808a44a:	e00d      	b.n	808a468 <strftime+0x448>
 808a44c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a450:	9109      	str	r1, [sp, #36]	; 0x24
 808a452:	9308      	str	r3, [sp, #32]
 808a454:	f001 fbd4 	bl	808bc00 <abs>
 808a458:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808a45c:	fb90 fcfe 	sdiv	ip, r0, lr
 808a460:	fb0c 001e 	mls	r0, ip, lr, r0
 808a464:	9909      	ldr	r1, [sp, #36]	; 0x24
 808a466:	9b08      	ldr	r3, [sp, #32]
 808a468:	f1bb 0f00 	cmp.w	fp, #0
 808a46c:	da08      	bge.n	808a480 <strftime+0x460>
 808a46e:	6969      	ldr	r1, [r5, #20]
 808a470:	4a3e      	ldr	r2, [pc, #248]	; (808a56c <strftime+0x54c>)
 808a472:	4291      	cmp	r1, r2
 808a474:	da0a      	bge.n	808a48c <strftime+0x46c>
 808a476:	f04f 0b01 	mov.w	fp, #1
 808a47a:	f8cd b01c 	str.w	fp, [sp, #28]
 808a47e:	e005      	b.n	808a48c <strftime+0x46c>
 808a480:	d004      	beq.n	808a48c <strftime+0x46c>
 808a482:	4a2f      	ldr	r2, [pc, #188]	; (808a540 <strftime+0x520>)
 808a484:	4291      	cmp	r1, r2
 808a486:	bfb8      	it	lt
 808a488:	f04f 3bff 	movlt.w	fp, #4294967295
 808a48c:	eb0b 0200 	add.w	r2, fp, r0
 808a490:	1c50      	adds	r0, r2, #1
 808a492:	d102      	bne.n	808a49a <strftime+0x47a>
 808a494:	3b01      	subs	r3, #1
 808a496:	2263      	movs	r2, #99	; 0x63
 808a498:	e003      	b.n	808a4a2 <strftime+0x482>
 808a49a:	2a64      	cmp	r2, #100	; 0x64
 808a49c:	bf04      	itt	eq
 808a49e:	3301      	addeq	r3, #1
 808a4a0:	2200      	moveq	r2, #0
 808a4a2:	2064      	movs	r0, #100	; 0x64
 808a4a4:	fb00 2303 	mla	r3, r0, r3, r2
 808a4a8:	9a07      	ldr	r2, [sp, #28]
 808a4aa:	b142      	cbz	r2, 808a4be <strftime+0x49e>
 808a4ac:	222d      	movs	r2, #45	; 0x2d
 808a4ae:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808a4b2:	f1b8 0f00 	cmp.w	r8, #0
 808a4b6:	d013      	beq.n	808a4e0 <strftime+0x4c0>
 808a4b8:	f108 38ff 	add.w	r8, r8, #4294967295
 808a4bc:	e010      	b.n	808a4e0 <strftime+0x4c0>
 808a4be:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a4c2:	d110      	bne.n	808a4e6 <strftime+0x4c6>
 808a4c4:	f242 720f 	movw	r2, #9999	; 0x270f
 808a4c8:	4293      	cmp	r3, r2
 808a4ca:	d90c      	bls.n	808a4e6 <strftime+0x4c6>
 808a4cc:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808a4d0:	f1b8 0f00 	cmp.w	r8, #0
 808a4d4:	d1f0      	bne.n	808a4b8 <strftime+0x498>
 808a4d6:	aa12      	add	r2, sp, #72	; 0x48
 808a4d8:	2125      	movs	r1, #37	; 0x25
 808a4da:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808a4de:	e00a      	b.n	808a4f6 <strftime+0x4d6>
 808a4e0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808a4e4:	e000      	b.n	808a4e8 <strftime+0x4c8>
 808a4e6:	aa0a      	add	r2, sp, #40	; 0x28
 808a4e8:	2125      	movs	r1, #37	; 0x25
 808a4ea:	7011      	strb	r1, [r2, #0]
 808a4ec:	f1ba 0f00 	cmp.w	sl, #0
 808a4f0:	d101      	bne.n	808a4f6 <strftime+0x4d6>
 808a4f2:	1c50      	adds	r0, r2, #1
 808a4f4:	e002      	b.n	808a4fc <strftime+0x4dc>
 808a4f6:	2130      	movs	r1, #48	; 0x30
 808a4f8:	1c90      	adds	r0, r2, #2
 808a4fa:	7051      	strb	r1, [r2, #1]
 808a4fc:	491c      	ldr	r1, [pc, #112]	; (808a570 <strftime+0x550>)
 808a4fe:	9307      	str	r3, [sp, #28]
 808a500:	f7ff fd0a 	bl	8089f18 <strcpy>
 808a504:	9b07      	ldr	r3, [sp, #28]
 808a506:	9300      	str	r3, [sp, #0]
 808a508:	e1ac      	b.n	808a864 <strftime+0x844>
 808a50a:	4a14      	ldr	r2, [pc, #80]	; (808a55c <strftime+0x53c>)
 808a50c:	4912      	ldr	r1, [pc, #72]	; (808a558 <strftime+0x538>)
 808a50e:	68ab      	ldr	r3, [r5, #8]
 808a510:	286b      	cmp	r0, #107	; 0x6b
 808a512:	bf08      	it	eq
 808a514:	460a      	moveq	r2, r1
 808a516:	e6e4      	b.n	808a2e2 <strftime+0x2c2>
 808a518:	68a9      	ldr	r1, [r5, #8]
 808a51a:	230c      	movs	r3, #12
 808a51c:	b131      	cbz	r1, 808a52c <strftime+0x50c>
 808a51e:	4299      	cmp	r1, r3
 808a520:	bf16      	itet	ne
 808a522:	fb91 f2f3 	sdivne	r2, r1, r3
 808a526:	460b      	moveq	r3, r1
 808a528:	fb03 1312 	mlsne	r3, r3, r2, r1
 808a52c:	4a0a      	ldr	r2, [pc, #40]	; (808a558 <strftime+0x538>)
 808a52e:	490b      	ldr	r1, [pc, #44]	; (808a55c <strftime+0x53c>)
 808a530:	2849      	cmp	r0, #73	; 0x49
 808a532:	bf08      	it	eq
 808a534:	460a      	moveq	r2, r1
 808a536:	e6d4      	b.n	808a2e2 <strftime+0x2c2>
 808a538:	69eb      	ldr	r3, [r5, #28]
 808a53a:	4a0e      	ldr	r2, [pc, #56]	; (808a574 <strftime+0x554>)
 808a53c:	3301      	adds	r3, #1
 808a53e:	e6d0      	b.n	808a2e2 <strftime+0x2c2>
 808a540:	fffff894 	.word	0xfffff894
 808a544:	0808de6b 	.word	0x0808de6b
 808a548:	0808d6df 	.word	0x0808d6df
 808a54c:	0808de5c 	.word	0x0808de5c
 808a550:	0808de63 	.word	0x0808de63
 808a554:	0808d1a3 	.word	0x0808d1a3
 808a558:	0808de6d 	.word	0x0808de6d
 808a55c:	0808de7b 	.word	0x0808de7b
 808a560:	0808de71 	.word	0x0808de71
 808a564:	0808d84c 	.word	0x0808d84c
 808a568:	0808de80 	.word	0x0808de80
 808a56c:	fffff895 	.word	0xfffff895
 808a570:	0808de88 	.word	0x0808de88
 808a574:	0808de8c 	.word	0x0808de8c
 808a578:	692b      	ldr	r3, [r5, #16]
 808a57a:	3301      	adds	r3, #1
 808a57c:	e13c      	b.n	808a7f8 <strftime+0x7d8>
 808a57e:	686b      	ldr	r3, [r5, #4]
 808a580:	e13a      	b.n	808a7f8 <strftime+0x7d8>
 808a582:	9b02      	ldr	r3, [sp, #8]
 808a584:	429c      	cmp	r4, r3
 808a586:	f080 81f5 	bcs.w	808a974 <strftime+0x954>
 808a58a:	230a      	movs	r3, #10
 808a58c:	e1e5      	b.n	808a95a <strftime+0x93a>
 808a58e:	68ab      	ldr	r3, [r5, #8]
 808a590:	9a03      	ldr	r2, [sp, #12]
 808a592:	2b0b      	cmp	r3, #11
 808a594:	bfcc      	ite	gt
 808a596:	23a4      	movgt	r3, #164	; 0xa4
 808a598:	23a0      	movle	r3, #160	; 0xa0
 808a59a:	4413      	add	r3, r2
 808a59c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808a5a0:	4640      	mov	r0, r8
 808a5a2:	f000 f9f1 	bl	808a988 <strlen>
 808a5a6:	4642      	mov	r2, r8
 808a5a8:	4bb1      	ldr	r3, [pc, #708]	; (808a870 <strftime+0x850>)
 808a5aa:	1939      	adds	r1, r7, r4
 808a5ac:	f8d3 e000 	ldr.w	lr, [r3]
 808a5b0:	4420      	add	r0, r4
 808a5b2:	4284      	cmp	r4, r0
 808a5b4:	f000 81d3 	beq.w	808a95e <strftime+0x93e>
 808a5b8:	9b02      	ldr	r3, [sp, #8]
 808a5ba:	429c      	cmp	r4, r3
 808a5bc:	f080 81da 	bcs.w	808a974 <strftime+0x954>
 808a5c0:	f899 3000 	ldrb.w	r3, [r9]
 808a5c4:	3401      	adds	r4, #1
 808a5c6:	2b50      	cmp	r3, #80	; 0x50
 808a5c8:	7813      	ldrb	r3, [r2, #0]
 808a5ca:	d10a      	bne.n	808a5e2 <strftime+0x5c2>
 808a5cc:	eb0e 0c03 	add.w	ip, lr, r3
 808a5d0:	f89c c001 	ldrb.w	ip, [ip, #1]
 808a5d4:	f00c 0c03 	and.w	ip, ip, #3
 808a5d8:	f1bc 0f01 	cmp.w	ip, #1
 808a5dc:	bf08      	it	eq
 808a5de:	3320      	addeq	r3, #32
 808a5e0:	b2db      	uxtb	r3, r3
 808a5e2:	f801 3b01 	strb.w	r3, [r1], #1
 808a5e6:	3201      	adds	r2, #1
 808a5e8:	e7e3      	b.n	808a5b2 <strftime+0x592>
 808a5ea:	686b      	ldr	r3, [r5, #4]
 808a5ec:	4aa1      	ldr	r2, [pc, #644]	; (808a874 <strftime+0x854>)
 808a5ee:	9300      	str	r3, [sp, #0]
 808a5f0:	68ab      	ldr	r3, [r5, #8]
 808a5f2:	e139      	b.n	808a868 <strftime+0x848>
 808a5f4:	6a2b      	ldr	r3, [r5, #32]
 808a5f6:	2b00      	cmp	r3, #0
 808a5f8:	db17      	blt.n	808a62a <strftime+0x60a>
 808a5fa:	f001 f979 	bl	808b8f0 <__tz_lock>
 808a5fe:	9b06      	ldr	r3, [sp, #24]
 808a600:	b91b      	cbnz	r3, 808a60a <strftime+0x5ea>
 808a602:	f001 f977 	bl	808b8f4 <_tzset_unlocked>
 808a606:	2301      	movs	r3, #1
 808a608:	9306      	str	r3, [sp, #24]
 808a60a:	f001 fe5f 	bl	808c2cc <__gettzinfo>
 808a60e:	6a2b      	ldr	r3, [r5, #32]
 808a610:	221c      	movs	r2, #28
 808a612:	2b00      	cmp	r3, #0
 808a614:	bfd4      	ite	le
 808a616:	2300      	movle	r3, #0
 808a618:	2301      	movgt	r3, #1
 808a61a:	fb02 0003 	mla	r0, r2, r3, r0
 808a61e:	6a03      	ldr	r3, [r0, #32]
 808a620:	f1c3 0800 	rsb	r8, r3, #0
 808a624:	f001 f965 	bl	808b8f2 <__tz_unlock>
 808a628:	e001      	b.n	808a62e <strftime+0x60e>
 808a62a:	f04f 0800 	mov.w	r8, #0
 808a62e:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808a632:	ebc4 0c06 	rsb	ip, r4, r6
 808a636:	4670      	mov	r0, lr
 808a638:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808a63c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808a640:	f141 33ff 	adc.w	r3, r1, #4294967295
 808a644:	2a00      	cmp	r2, #0
 808a646:	f173 0b00 	sbcs.w	fp, r3, #0
 808a64a:	eb07 0a04 	add.w	sl, r7, r4
 808a64e:	da03      	bge.n	808a658 <strftime+0x638>
 808a650:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808a654:	f141 33ff 	adc.w	r3, r1, #4294967295
 808a658:	0891      	lsrs	r1, r2, #2
 808a65a:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808a65e:	109b      	asrs	r3, r3, #2
 808a660:	9104      	str	r1, [sp, #16]
 808a662:	9305      	str	r3, [sp, #20]
 808a664:	f10e 31ff 	add.w	r1, lr, #4294967295
 808a668:	2364      	movs	r3, #100	; 0x64
 808a66a:	fb91 f1f3 	sdiv	r1, r1, r3
 808a66e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808a672:	1a52      	subs	r2, r2, r1
 808a674:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808a678:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808a67c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808a680:	fb90 f1f1 	sdiv	r1, r0, r1
 808a684:	1852      	adds	r2, r2, r1
 808a686:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808a68a:	f240 116d 	movw	r1, #365	; 0x16d
 808a68e:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808a692:	fb01 fe0e 	mul.w	lr, r1, lr
 808a696:	69e9      	ldr	r1, [r5, #28]
 808a698:	eb12 020e 	adds.w	r2, r2, lr
 808a69c:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808a6a0:	1852      	adds	r2, r2, r1
 808a6a2:	f04f 0e18 	mov.w	lr, #24
 808a6a6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808a6aa:	fba2 010e 	umull	r0, r1, r2, lr
 808a6ae:	fb0e 1103 	mla	r1, lr, r3, r1
 808a6b2:	68ab      	ldr	r3, [r5, #8]
 808a6b4:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808a6b8:	18c0      	adds	r0, r0, r3
 808a6ba:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808a6be:	fba0 230e 	umull	r2, r3, r0, lr
 808a6c2:	fb0e 3301 	mla	r3, lr, r1, r3
 808a6c6:	6869      	ldr	r1, [r5, #4]
 808a6c8:	1852      	adds	r2, r2, r1
 808a6ca:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808a6ce:	fba2 010e 	umull	r0, r1, r2, lr
 808a6d2:	fb0e 1103 	mla	r1, lr, r3, r1
 808a6d6:	682b      	ldr	r3, [r5, #0]
 808a6d8:	4a67      	ldr	r2, [pc, #412]	; (808a878 <strftime+0x858>)
 808a6da:	18c0      	adds	r0, r0, r3
 808a6dc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808a6e0:	ebb0 0008 	subs.w	r0, r0, r8
 808a6e4:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808a6e8:	e9cd 0100 	strd	r0, r1, [sp]
 808a6ec:	4661      	mov	r1, ip
 808a6ee:	4650      	mov	r0, sl
 808a6f0:	f7fb f912 	bl	8085918 <sniprintf>
 808a6f4:	e5f9      	b.n	808a2ea <strftime+0x2ca>
 808a6f6:	682b      	ldr	r3, [r5, #0]
 808a6f8:	e07e      	b.n	808a7f8 <strftime+0x7d8>
 808a6fa:	9b02      	ldr	r3, [sp, #8]
 808a6fc:	429c      	cmp	r4, r3
 808a6fe:	f080 8139 	bcs.w	808a974 <strftime+0x954>
 808a702:	2309      	movs	r3, #9
 808a704:	e129      	b.n	808a95a <strftime+0x93a>
 808a706:	682b      	ldr	r3, [r5, #0]
 808a708:	4a5c      	ldr	r2, [pc, #368]	; (808a87c <strftime+0x85c>)
 808a70a:	9301      	str	r3, [sp, #4]
 808a70c:	686b      	ldr	r3, [r5, #4]
 808a70e:	9300      	str	r3, [sp, #0]
 808a710:	68ab      	ldr	r3, [r5, #8]
 808a712:	1b31      	subs	r1, r6, r4
 808a714:	1938      	adds	r0, r7, r4
 808a716:	e60e      	b.n	808a336 <strftime+0x316>
 808a718:	9b02      	ldr	r3, [sp, #8]
 808a71a:	429c      	cmp	r4, r3
 808a71c:	f080 812a 	bcs.w	808a974 <strftime+0x954>
 808a720:	69ab      	ldr	r3, [r5, #24]
 808a722:	1c62      	adds	r2, r4, #1
 808a724:	b90b      	cbnz	r3, 808a72a <strftime+0x70a>
 808a726:	2337      	movs	r3, #55	; 0x37
 808a728:	e000      	b.n	808a72c <strftime+0x70c>
 808a72a:	3330      	adds	r3, #48	; 0x30
 808a72c:	553b      	strb	r3, [r7, r4]
 808a72e:	4614      	mov	r4, r2
 808a730:	e115      	b.n	808a95e <strftime+0x93e>
 808a732:	69eb      	ldr	r3, [r5, #28]
 808a734:	69aa      	ldr	r2, [r5, #24]
 808a736:	3307      	adds	r3, #7
 808a738:	1a9b      	subs	r3, r3, r2
 808a73a:	2207      	movs	r2, #7
 808a73c:	fb93 f3f2 	sdiv	r3, r3, r2
 808a740:	e05a      	b.n	808a7f8 <strftime+0x7d8>
 808a742:	4628      	mov	r0, r5
 808a744:	f7ff fc0b 	bl	8089f5e <iso_year_adjust>
 808a748:	69aa      	ldr	r2, [r5, #24]
 808a74a:	b10a      	cbz	r2, 808a750 <strftime+0x730>
 808a74c:	1e53      	subs	r3, r2, #1
 808a74e:	e000      	b.n	808a752 <strftime+0x732>
 808a750:	2306      	movs	r3, #6
 808a752:	2800      	cmp	r0, #0
 808a754:	dc2f      	bgt.n	808a7b6 <strftime+0x796>
 808a756:	69ea      	ldr	r2, [r5, #28]
 808a758:	d101      	bne.n	808a75e <strftime+0x73e>
 808a75a:	320a      	adds	r2, #10
 808a75c:	e03b      	b.n	808a7d6 <strftime+0x7b6>
 808a75e:	f240 716b 	movw	r1, #1899	; 0x76b
 808a762:	1a9a      	subs	r2, r3, r2
 808a764:	696b      	ldr	r3, [r5, #20]
 808a766:	2b00      	cmp	r3, #0
 808a768:	bfb4      	ite	lt
 808a76a:	4608      	movlt	r0, r1
 808a76c:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808a770:	4418      	add	r0, r3
 808a772:	0781      	lsls	r1, r0, #30
 808a774:	d107      	bne.n	808a786 <strftime+0x766>
 808a776:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808a77a:	4601      	mov	r1, r0
 808a77c:	fb90 f0fe 	sdiv	r0, r0, lr
 808a780:	fb0e 1110 	mls	r1, lr, r0, r1
 808a784:	b981      	cbnz	r1, 808a7a8 <strftime+0x788>
 808a786:	f240 716b 	movw	r1, #1899	; 0x76b
 808a78a:	2b00      	cmp	r3, #0
 808a78c:	bfa8      	it	ge
 808a78e:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808a792:	4419      	add	r1, r3
 808a794:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808a798:	fb91 f0f3 	sdiv	r0, r1, r3
 808a79c:	fb03 1110 	mls	r1, r3, r0, r1
 808a7a0:	fab1 f181 	clz	r1, r1
 808a7a4:	0949      	lsrs	r1, r1, #5
 808a7a6:	e000      	b.n	808a7aa <strftime+0x78a>
 808a7a8:	2101      	movs	r1, #1
 808a7aa:	1a52      	subs	r2, r2, r1
 808a7ac:	2a05      	cmp	r2, #5
 808a7ae:	bfb4      	ite	lt
 808a7b0:	2335      	movlt	r3, #53	; 0x35
 808a7b2:	2334      	movge	r3, #52	; 0x34
 808a7b4:	e020      	b.n	808a7f8 <strftime+0x7d8>
 808a7b6:	2301      	movs	r3, #1
 808a7b8:	e01e      	b.n	808a7f8 <strftime+0x7d8>
 808a7ba:	9b02      	ldr	r3, [sp, #8]
 808a7bc:	429c      	cmp	r4, r3
 808a7be:	f080 80d9 	bcs.w	808a974 <strftime+0x954>
 808a7c2:	69ab      	ldr	r3, [r5, #24]
 808a7c4:	3330      	adds	r3, #48	; 0x30
 808a7c6:	e0c8      	b.n	808a95a <strftime+0x93a>
 808a7c8:	69aa      	ldr	r2, [r5, #24]
 808a7ca:	b10a      	cbz	r2, 808a7d0 <strftime+0x7b0>
 808a7cc:	1e53      	subs	r3, r2, #1
 808a7ce:	e000      	b.n	808a7d2 <strftime+0x7b2>
 808a7d0:	2306      	movs	r3, #6
 808a7d2:	69ea      	ldr	r2, [r5, #28]
 808a7d4:	3207      	adds	r2, #7
 808a7d6:	1ad2      	subs	r2, r2, r3
 808a7d8:	2307      	movs	r3, #7
 808a7da:	fb92 f3f3 	sdiv	r3, r2, r3
 808a7de:	e00b      	b.n	808a7f8 <strftime+0x7d8>
 808a7e0:	6968      	ldr	r0, [r5, #20]
 808a7e2:	2800      	cmp	r0, #0
 808a7e4:	da03      	bge.n	808a7ee <strftime+0x7ce>
 808a7e6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808a7ea:	f001 fa09 	bl	808bc00 <abs>
 808a7ee:	2364      	movs	r3, #100	; 0x64
 808a7f0:	fb90 f2f3 	sdiv	r2, r0, r3
 808a7f4:	fb02 0313 	mls	r3, r2, r3, r0
 808a7f8:	4a21      	ldr	r2, [pc, #132]	; (808a880 <strftime+0x860>)
 808a7fa:	e572      	b.n	808a2e2 <strftime+0x2c2>
 808a7fc:	696b      	ldr	r3, [r5, #20]
 808a7fe:	4a21      	ldr	r2, [pc, #132]	; (808a884 <strftime+0x864>)
 808a800:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808a804:	4293      	cmp	r3, r2
 808a806:	da05      	bge.n	808a814 <strftime+0x7f4>
 808a808:	232d      	movs	r3, #45	; 0x2d
 808a80a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808a80e:	f1cb 0b00 	rsb	fp, fp, #0
 808a812:	e008      	b.n	808a826 <strftime+0x806>
 808a814:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808a818:	d10d      	bne.n	808a836 <strftime+0x816>
 808a81a:	f242 730f 	movw	r3, #9999	; 0x270f
 808a81e:	459b      	cmp	fp, r3
 808a820:	d911      	bls.n	808a846 <strftime+0x826>
 808a822:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808a826:	f1b8 0f00 	cmp.w	r8, #0
 808a82a:	d001      	beq.n	808a830 <strftime+0x810>
 808a82c:	f108 38ff 	add.w	r8, r8, #4294967295
 808a830:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808a834:	e000      	b.n	808a838 <strftime+0x818>
 808a836:	ab0a      	add	r3, sp, #40	; 0x28
 808a838:	2225      	movs	r2, #37	; 0x25
 808a83a:	701a      	strb	r2, [r3, #0]
 808a83c:	f1ba 0f00 	cmp.w	sl, #0
 808a840:	d108      	bne.n	808a854 <strftime+0x834>
 808a842:	1c58      	adds	r0, r3, #1
 808a844:	e009      	b.n	808a85a <strftime+0x83a>
 808a846:	f1b8 0f00 	cmp.w	r8, #0
 808a84a:	d1f4      	bne.n	808a836 <strftime+0x816>
 808a84c:	2325      	movs	r3, #37	; 0x25
 808a84e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808a852:	ab0a      	add	r3, sp, #40	; 0x28
 808a854:	2230      	movs	r2, #48	; 0x30
 808a856:	1c98      	adds	r0, r3, #2
 808a858:	705a      	strb	r2, [r3, #1]
 808a85a:	490b      	ldr	r1, [pc, #44]	; (808a888 <strftime+0x868>)
 808a85c:	f7ff fb5c 	bl	8089f18 <strcpy>
 808a860:	f8cd b000 	str.w	fp, [sp]
 808a864:	4643      	mov	r3, r8
 808a866:	aa0a      	add	r2, sp, #40	; 0x28
 808a868:	1b31      	subs	r1, r6, r4
 808a86a:	1938      	adds	r0, r7, r4
 808a86c:	e03f      	b.n	808a8ee <strftime+0x8ce>
 808a86e:	bf00      	nop
 808a870:	20000054 	.word	0x20000054
 808a874:	0808de9b 	.word	0x0808de9b
 808a878:	0808de91 	.word	0x0808de91
 808a87c:	0808de96 	.word	0x0808de96
 808a880:	0808de7b 	.word	0x0808de7b
 808a884:	fffff894 	.word	0xfffff894
 808a888:	0808de88 	.word	0x0808de88
 808a88c:	6a2b      	ldr	r3, [r5, #32]
 808a88e:	2b00      	cmp	r3, #0
 808a890:	db65      	blt.n	808a95e <strftime+0x93e>
 808a892:	f001 f82d 	bl	808b8f0 <__tz_lock>
 808a896:	9b06      	ldr	r3, [sp, #24]
 808a898:	b91b      	cbnz	r3, 808a8a2 <strftime+0x882>
 808a89a:	f001 f82b 	bl	808b8f4 <_tzset_unlocked>
 808a89e:	2301      	movs	r3, #1
 808a8a0:	9306      	str	r3, [sp, #24]
 808a8a2:	f001 fd13 	bl	808c2cc <__gettzinfo>
 808a8a6:	6a2b      	ldr	r3, [r5, #32]
 808a8a8:	221c      	movs	r2, #28
 808a8aa:	2b00      	cmp	r3, #0
 808a8ac:	bfd4      	ite	le
 808a8ae:	2300      	movle	r3, #0
 808a8b0:	2301      	movgt	r3, #1
 808a8b2:	fb02 0003 	mla	r0, r2, r3, r0
 808a8b6:	6a03      	ldr	r3, [r0, #32]
 808a8b8:	eb07 0a04 	add.w	sl, r7, r4
 808a8bc:	f1c3 0800 	rsb	r8, r3, #0
 808a8c0:	f001 f817 	bl	808b8f2 <__tz_unlock>
 808a8c4:	233c      	movs	r3, #60	; 0x3c
 808a8c6:	fb98 f0f3 	sdiv	r0, r8, r3
 808a8ca:	9307      	str	r3, [sp, #28]
 808a8cc:	f001 fd98 	bl	808c400 <labs>
 808a8d0:	9b07      	ldr	r3, [sp, #28]
 808a8d2:	ebc4 0b06 	rsb	fp, r4, r6
 808a8d6:	fb90 f2f3 	sdiv	r2, r0, r3
 808a8da:	fb02 0013 	mls	r0, r2, r3, r0
 808a8de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808a8e2:	9000      	str	r0, [sp, #0]
 808a8e4:	fb98 f3f3 	sdiv	r3, r8, r3
 808a8e8:	4659      	mov	r1, fp
 808a8ea:	4650      	mov	r0, sl
 808a8ec:	4a24      	ldr	r2, [pc, #144]	; (808a980 <strftime+0x960>)
 808a8ee:	f7fb f813 	bl	8085918 <sniprintf>
 808a8f2:	e4fa      	b.n	808a2ea <strftime+0x2ca>
 808a8f4:	4404      	add	r4, r0
 808a8f6:	42a6      	cmp	r6, r4
 808a8f8:	d831      	bhi.n	808a95e <strftime+0x93e>
 808a8fa:	e03b      	b.n	808a974 <strftime+0x954>
 808a8fc:	6a2b      	ldr	r3, [r5, #32]
 808a8fe:	2b00      	cmp	r3, #0
 808a900:	db2d      	blt.n	808a95e <strftime+0x93e>
 808a902:	f000 fff5 	bl	808b8f0 <__tz_lock>
 808a906:	9b06      	ldr	r3, [sp, #24]
 808a908:	b91b      	cbnz	r3, 808a912 <strftime+0x8f2>
 808a90a:	f000 fff3 	bl	808b8f4 <_tzset_unlocked>
 808a90e:	2301      	movs	r3, #1
 808a910:	9306      	str	r3, [sp, #24]
 808a912:	6a2b      	ldr	r3, [r5, #32]
 808a914:	4a1b      	ldr	r2, [pc, #108]	; (808a984 <strftime+0x964>)
 808a916:	2b00      	cmp	r3, #0
 808a918:	bfd4      	ite	le
 808a91a:	2300      	movle	r3, #0
 808a91c:	2301      	movgt	r3, #1
 808a91e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808a922:	4640      	mov	r0, r8
 808a924:	f000 f830 	bl	808a988 <strlen>
 808a928:	f108 38ff 	add.w	r8, r8, #4294967295
 808a92c:	193b      	adds	r3, r7, r4
 808a92e:	4420      	add	r0, r4
 808a930:	4284      	cmp	r4, r0
 808a932:	d00b      	beq.n	808a94c <strftime+0x92c>
 808a934:	9a02      	ldr	r2, [sp, #8]
 808a936:	4294      	cmp	r4, r2
 808a938:	d205      	bcs.n	808a946 <strftime+0x926>
 808a93a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808a93e:	3401      	adds	r4, #1
 808a940:	f803 2b01 	strb.w	r2, [r3], #1
 808a944:	e7f4      	b.n	808a930 <strftime+0x910>
 808a946:	f000 ffd4 	bl	808b8f2 <__tz_unlock>
 808a94a:	e013      	b.n	808a974 <strftime+0x954>
 808a94c:	f000 ffd1 	bl	808b8f2 <__tz_unlock>
 808a950:	e005      	b.n	808a95e <strftime+0x93e>
 808a952:	9b02      	ldr	r3, [sp, #8]
 808a954:	429c      	cmp	r4, r3
 808a956:	d20d      	bcs.n	808a974 <strftime+0x954>
 808a958:	2325      	movs	r3, #37	; 0x25
 808a95a:	553b      	strb	r3, [r7, r4]
 808a95c:	3401      	adds	r4, #1
 808a95e:	f899 3000 	ldrb.w	r3, [r9]
 808a962:	b11b      	cbz	r3, 808a96c <strftime+0x94c>
 808a964:	f109 0901 	add.w	r9, r9, #1
 808a968:	f7ff bb69 	b.w	808a03e <strftime+0x1e>
 808a96c:	b126      	cbz	r6, 808a978 <strftime+0x958>
 808a96e:	2300      	movs	r3, #0
 808a970:	553b      	strb	r3, [r7, r4]
 808a972:	e001      	b.n	808a978 <strftime+0x958>
 808a974:	2000      	movs	r0, #0
 808a976:	e000      	b.n	808a97a <strftime+0x95a>
 808a978:	4620      	mov	r0, r4
 808a97a:	b013      	add	sp, #76	; 0x4c
 808a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a980:	0808dea5 	.word	0x0808dea5
 808a984:	200000f4 	.word	0x200000f4

0808a988 <strlen>:
 808a988:	4603      	mov	r3, r0
 808a98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a98e:	2a00      	cmp	r2, #0
 808a990:	d1fb      	bne.n	808a98a <strlen+0x2>
 808a992:	1a18      	subs	r0, r3, r0
 808a994:	3801      	subs	r0, #1
 808a996:	4770      	bx	lr

0808a998 <strncmp>:
 808a998:	b530      	push	{r4, r5, lr}
 808a99a:	b182      	cbz	r2, 808a9be <strncmp+0x26>
 808a99c:	1e45      	subs	r5, r0, #1
 808a99e:	3901      	subs	r1, #1
 808a9a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808a9a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808a9a8:	42a3      	cmp	r3, r4
 808a9aa:	d106      	bne.n	808a9ba <strncmp+0x22>
 808a9ac:	43ec      	mvns	r4, r5
 808a9ae:	4414      	add	r4, r2
 808a9b0:	42e0      	cmn	r0, r4
 808a9b2:	d001      	beq.n	808a9b8 <strncmp+0x20>
 808a9b4:	2b00      	cmp	r3, #0
 808a9b6:	d1f3      	bne.n	808a9a0 <strncmp+0x8>
 808a9b8:	461c      	mov	r4, r3
 808a9ba:	1b18      	subs	r0, r3, r4
 808a9bc:	bd30      	pop	{r4, r5, pc}
 808a9be:	4610      	mov	r0, r2
 808a9c0:	bd30      	pop	{r4, r5, pc}

0808a9c2 <strncpy>:
 808a9c2:	4603      	mov	r3, r0
 808a9c4:	b510      	push	{r4, lr}
 808a9c6:	b142      	cbz	r2, 808a9da <strncpy+0x18>
 808a9c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 808a9cc:	3a01      	subs	r2, #1
 808a9ce:	f803 4b01 	strb.w	r4, [r3], #1
 808a9d2:	2c00      	cmp	r4, #0
 808a9d4:	d1f7      	bne.n	808a9c6 <strncpy+0x4>
 808a9d6:	441a      	add	r2, r3
 808a9d8:	e000      	b.n	808a9dc <strncpy+0x1a>
 808a9da:	bd10      	pop	{r4, pc}
 808a9dc:	4293      	cmp	r3, r2
 808a9de:	d002      	beq.n	808a9e6 <strncpy+0x24>
 808a9e0:	f803 4b01 	strb.w	r4, [r3], #1
 808a9e4:	e7fa      	b.n	808a9dc <strncpy+0x1a>
 808a9e6:	bd10      	pop	{r4, pc}

0808a9e8 <strstr>:
 808a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a9ea:	7803      	ldrb	r3, [r0, #0]
 808a9ec:	b963      	cbnz	r3, 808aa08 <strstr+0x20>
 808a9ee:	780b      	ldrb	r3, [r1, #0]
 808a9f0:	2b00      	cmp	r3, #0
 808a9f2:	bf18      	it	ne
 808a9f4:	2000      	movne	r0, #0
 808a9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a9f8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808a9fc:	b162      	cbz	r2, 808aa18 <strstr+0x30>
 808a9fe:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808aa02:	4630      	mov	r0, r6
 808aa04:	4297      	cmp	r7, r2
 808aa06:	d0f7      	beq.n	808a9f8 <strstr+0x10>
 808aa08:	4603      	mov	r3, r0
 808aa0a:	1c46      	adds	r6, r0, #1
 808aa0c:	7800      	ldrb	r0, [r0, #0]
 808aa0e:	b110      	cbz	r0, 808aa16 <strstr+0x2e>
 808aa10:	1e4d      	subs	r5, r1, #1
 808aa12:	1e5c      	subs	r4, r3, #1
 808aa14:	e7f0      	b.n	808a9f8 <strstr+0x10>
 808aa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808aa18:	4618      	mov	r0, r3
 808aa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808aa1c <sulp>:
 808aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808aa20:	460f      	mov	r7, r1
 808aa22:	4690      	mov	r8, r2
 808aa24:	f001 ffb6 	bl	808c994 <__ulp>
 808aa28:	4604      	mov	r4, r0
 808aa2a:	460d      	mov	r5, r1
 808aa2c:	f1b8 0f00 	cmp.w	r8, #0
 808aa30:	d011      	beq.n	808aa56 <sulp+0x3a>
 808aa32:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808aa36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808aa3a:	2b00      	cmp	r3, #0
 808aa3c:	dd0b      	ble.n	808aa56 <sulp+0x3a>
 808aa3e:	051b      	lsls	r3, r3, #20
 808aa40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808aa44:	2400      	movs	r4, #0
 808aa46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808aa4a:	4622      	mov	r2, r4
 808aa4c:	462b      	mov	r3, r5
 808aa4e:	f7fe f8ad 	bl	8088bac <__aeabi_dmul>
 808aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808aa56:	4620      	mov	r0, r4
 808aa58:	4629      	mov	r1, r5
 808aa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808aa60 <_strtod_r>:
 808aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808aa64:	4682      	mov	sl, r0
 808aa66:	460c      	mov	r4, r1
 808aa68:	b09d      	sub	sp, #116	; 0x74
 808aa6a:	2300      	movs	r3, #0
 808aa6c:	9213      	str	r2, [sp, #76]	; 0x4c
 808aa6e:	9318      	str	r3, [sp, #96]	; 0x60
 808aa70:	f04f 0800 	mov.w	r8, #0
 808aa74:	f04f 0900 	mov.w	r9, #0
 808aa78:	9117      	str	r1, [sp, #92]	; 0x5c
 808aa7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808aa7c:	781a      	ldrb	r2, [r3, #0]
 808aa7e:	2a0d      	cmp	r2, #13
 808aa80:	d805      	bhi.n	808aa8e <_strtod_r+0x2e>
 808aa82:	2a09      	cmp	r2, #9
 808aa84:	d213      	bcs.n	808aaae <_strtod_r+0x4e>
 808aa86:	2a00      	cmp	r2, #0
 808aa88:	f000 81ad 	beq.w	808ade6 <_strtod_r+0x386>
 808aa8c:	e012      	b.n	808aab4 <_strtod_r+0x54>
 808aa8e:	2a2b      	cmp	r2, #43	; 0x2b
 808aa90:	d004      	beq.n	808aa9c <_strtod_r+0x3c>
 808aa92:	2a2d      	cmp	r2, #45	; 0x2d
 808aa94:	d004      	beq.n	808aaa0 <_strtod_r+0x40>
 808aa96:	2a20      	cmp	r2, #32
 808aa98:	d10c      	bne.n	808aab4 <_strtod_r+0x54>
 808aa9a:	e008      	b.n	808aaae <_strtod_r+0x4e>
 808aa9c:	2200      	movs	r2, #0
 808aa9e:	e000      	b.n	808aaa2 <_strtod_r+0x42>
 808aaa0:	2201      	movs	r2, #1
 808aaa2:	920c      	str	r2, [sp, #48]	; 0x30
 808aaa4:	1c5a      	adds	r2, r3, #1
 808aaa6:	9217      	str	r2, [sp, #92]	; 0x5c
 808aaa8:	785b      	ldrb	r3, [r3, #1]
 808aaaa:	b92b      	cbnz	r3, 808aab8 <_strtod_r+0x58>
 808aaac:	e19b      	b.n	808ade6 <_strtod_r+0x386>
 808aaae:	3301      	adds	r3, #1
 808aab0:	9317      	str	r3, [sp, #92]	; 0x5c
 808aab2:	e7e2      	b.n	808aa7a <_strtod_r+0x1a>
 808aab4:	2300      	movs	r3, #0
 808aab6:	930c      	str	r3, [sp, #48]	; 0x30
 808aab8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808aaba:	782b      	ldrb	r3, [r5, #0]
 808aabc:	2b30      	cmp	r3, #48	; 0x30
 808aabe:	d15c      	bne.n	808ab7a <_strtod_r+0x11a>
 808aac0:	786b      	ldrb	r3, [r5, #1]
 808aac2:	2b58      	cmp	r3, #88	; 0x58
 808aac4:	d001      	beq.n	808aaca <_strtod_r+0x6a>
 808aac6:	2b78      	cmp	r3, #120	; 0x78
 808aac8:	d14c      	bne.n	808ab64 <_strtod_r+0x104>
 808aaca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808aacc:	4aa8      	ldr	r2, [pc, #672]	; (808ad70 <_strtod_r+0x310>)
 808aace:	9301      	str	r3, [sp, #4]
 808aad0:	ab18      	add	r3, sp, #96	; 0x60
 808aad2:	9300      	str	r3, [sp, #0]
 808aad4:	a917      	add	r1, sp, #92	; 0x5c
 808aad6:	ab19      	add	r3, sp, #100	; 0x64
 808aad8:	4650      	mov	r0, sl
 808aada:	f001 f8e0 	bl	808bc9e <__gethex>
 808aade:	f010 0607 	ands.w	r6, r0, #7
 808aae2:	4604      	mov	r4, r0
 808aae4:	f000 8585 	beq.w	808b5f2 <_strtod_r+0xb92>
 808aae8:	2e06      	cmp	r6, #6
 808aaea:	d105      	bne.n	808aaf8 <_strtod_r+0x98>
 808aaec:	3501      	adds	r5, #1
 808aaee:	2300      	movs	r3, #0
 808aaf0:	9517      	str	r5, [sp, #92]	; 0x5c
 808aaf2:	930c      	str	r3, [sp, #48]	; 0x30
 808aaf4:	f000 bd7d 	b.w	808b5f2 <_strtod_r+0xb92>
 808aaf8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808aafa:	b13a      	cbz	r2, 808ab0c <_strtod_r+0xac>
 808aafc:	2135      	movs	r1, #53	; 0x35
 808aafe:	a81a      	add	r0, sp, #104	; 0x68
 808ab00:	f002 f82f 	bl	808cb62 <__copybits>
 808ab04:	9918      	ldr	r1, [sp, #96]	; 0x60
 808ab06:	4650      	mov	r0, sl
 808ab08:	f001 fcb3 	bl	808c472 <_Bfree>
 808ab0c:	2e06      	cmp	r6, #6
 808ab0e:	d822      	bhi.n	808ab56 <_strtod_r+0xf6>
 808ab10:	e8df f006 	tbb	[pc, r6]
 808ab14:	18080d04 	.word	0x18080d04
 808ab18:	0d1d      	.short	0x0d1d
 808ab1a:	04          	.byte	0x04
 808ab1b:	00          	.byte	0x00
 808ab1c:	f04f 0900 	mov.w	r9, #0
 808ab20:	46c8      	mov	r8, r9
 808ab22:	e018      	b.n	808ab56 <_strtod_r+0xf6>
 808ab24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808ab28:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808ab2c:	e013      	b.n	808ab56 <_strtod_r+0xf6>
 808ab2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ab30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808ab32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808ab36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808ab3a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808ab3e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808ab42:	e008      	b.n	808ab56 <_strtod_r+0xf6>
 808ab44:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808ad74 <_strtod_r+0x314>
 808ab48:	f04f 0800 	mov.w	r8, #0
 808ab4c:	e003      	b.n	808ab56 <_strtod_r+0xf6>
 808ab4e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808ab52:	f04f 38ff 	mov.w	r8, #4294967295
 808ab56:	0721      	lsls	r1, r4, #28
 808ab58:	f140 854b 	bpl.w	808b5f2 <_strtod_r+0xb92>
 808ab5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808ab60:	f000 bd47 	b.w	808b5f2 <_strtod_r+0xb92>
 808ab64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ab66:	1c5a      	adds	r2, r3, #1
 808ab68:	9217      	str	r2, [sp, #92]	; 0x5c
 808ab6a:	785b      	ldrb	r3, [r3, #1]
 808ab6c:	2b30      	cmp	r3, #48	; 0x30
 808ab6e:	d0f9      	beq.n	808ab64 <_strtod_r+0x104>
 808ab70:	2b00      	cmp	r3, #0
 808ab72:	f000 853e 	beq.w	808b5f2 <_strtod_r+0xb92>
 808ab76:	2301      	movs	r3, #1
 808ab78:	e000      	b.n	808ab7c <_strtod_r+0x11c>
 808ab7a:	2300      	movs	r3, #0
 808ab7c:	9305      	str	r3, [sp, #20]
 808ab7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ab80:	220a      	movs	r2, #10
 808ab82:	9306      	str	r3, [sp, #24]
 808ab84:	2300      	movs	r3, #0
 808ab86:	469b      	mov	fp, r3
 808ab88:	9302      	str	r3, [sp, #8]
 808ab8a:	9304      	str	r3, [sp, #16]
 808ab8c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808ab8e:	782e      	ldrb	r6, [r5, #0]
 808ab90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808ab94:	b2d9      	uxtb	r1, r3
 808ab96:	2909      	cmp	r1, #9
 808ab98:	d811      	bhi.n	808abbe <_strtod_r+0x15e>
 808ab9a:	f1bb 0f08 	cmp.w	fp, #8
 808ab9e:	bfd5      	itete	le
 808aba0:	9904      	ldrle	r1, [sp, #16]
 808aba2:	9902      	ldrgt	r1, [sp, #8]
 808aba4:	fb02 3301 	mlale	r3, r2, r1, r3
 808aba8:	fb02 3301 	mlagt	r3, r2, r1, r3
 808abac:	f105 0501 	add.w	r5, r5, #1
 808abb0:	bfd4      	ite	le
 808abb2:	9304      	strle	r3, [sp, #16]
 808abb4:	9302      	strgt	r3, [sp, #8]
 808abb6:	f10b 0b01 	add.w	fp, fp, #1
 808abba:	9517      	str	r5, [sp, #92]	; 0x5c
 808abbc:	e7e6      	b.n	808ab8c <_strtod_r+0x12c>
 808abbe:	4650      	mov	r0, sl
 808abc0:	f7ff f944 	bl	8089e4c <_localeconv_r>
 808abc4:	6807      	ldr	r7, [r0, #0]
 808abc6:	4650      	mov	r0, sl
 808abc8:	f7ff f940 	bl	8089e4c <_localeconv_r>
 808abcc:	6800      	ldr	r0, [r0, #0]
 808abce:	f7ff fedb 	bl	808a988 <strlen>
 808abd2:	4639      	mov	r1, r7
 808abd4:	4602      	mov	r2, r0
 808abd6:	4628      	mov	r0, r5
 808abd8:	f7ff fede 	bl	808a998 <strncmp>
 808abdc:	4607      	mov	r7, r0
 808abde:	b128      	cbz	r0, 808abec <_strtod_r+0x18c>
 808abe0:	2000      	movs	r0, #0
 808abe2:	4633      	mov	r3, r6
 808abe4:	465d      	mov	r5, fp
 808abe6:	4602      	mov	r2, r0
 808abe8:	4601      	mov	r1, r0
 808abea:	e05a      	b.n	808aca2 <_strtod_r+0x242>
 808abec:	4650      	mov	r0, sl
 808abee:	f7ff f92d 	bl	8089e4c <_localeconv_r>
 808abf2:	6800      	ldr	r0, [r0, #0]
 808abf4:	f7ff fec8 	bl	808a988 <strlen>
 808abf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808abfa:	181a      	adds	r2, r3, r0
 808abfc:	9217      	str	r2, [sp, #92]	; 0x5c
 808abfe:	5c1b      	ldrb	r3, [r3, r0]
 808ac00:	f1bb 0f00 	cmp.w	fp, #0
 808ac04:	d145      	bne.n	808ac92 <_strtod_r+0x232>
 808ac06:	4658      	mov	r0, fp
 808ac08:	2b30      	cmp	r3, #48	; 0x30
 808ac0a:	d105      	bne.n	808ac18 <_strtod_r+0x1b8>
 808ac0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ac0e:	3001      	adds	r0, #1
 808ac10:	1c5a      	adds	r2, r3, #1
 808ac12:	9217      	str	r2, [sp, #92]	; 0x5c
 808ac14:	785b      	ldrb	r3, [r3, #1]
 808ac16:	e7f7      	b.n	808ac08 <_strtod_r+0x1a8>
 808ac18:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808ac1c:	2a08      	cmp	r2, #8
 808ac1e:	d846      	bhi.n	808acae <_strtod_r+0x24e>
 808ac20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808ac22:	9206      	str	r2, [sp, #24]
 808ac24:	4602      	mov	r2, r0
 808ac26:	2000      	movs	r0, #0
 808ac28:	4605      	mov	r5, r0
 808ac2a:	3b30      	subs	r3, #48	; 0x30
 808ac2c:	f100 0101 	add.w	r1, r0, #1
 808ac30:	d029      	beq.n	808ac86 <_strtod_r+0x226>
 808ac32:	440a      	add	r2, r1
 808ac34:	4629      	mov	r1, r5
 808ac36:	eb05 0c00 	add.w	ip, r5, r0
 808ac3a:	260a      	movs	r6, #10
 808ac3c:	4561      	cmp	r1, ip
 808ac3e:	d00f      	beq.n	808ac60 <_strtod_r+0x200>
 808ac40:	3101      	adds	r1, #1
 808ac42:	f101 3eff 	add.w	lr, r1, #4294967295
 808ac46:	f1be 0f08 	cmp.w	lr, #8
 808ac4a:	dc03      	bgt.n	808ac54 <_strtod_r+0x1f4>
 808ac4c:	9f04      	ldr	r7, [sp, #16]
 808ac4e:	4377      	muls	r7, r6
 808ac50:	9704      	str	r7, [sp, #16]
 808ac52:	e7f3      	b.n	808ac3c <_strtod_r+0x1dc>
 808ac54:	2910      	cmp	r1, #16
 808ac56:	bfde      	ittt	le
 808ac58:	9f02      	ldrle	r7, [sp, #8]
 808ac5a:	4377      	mulle	r7, r6
 808ac5c:	9702      	strle	r7, [sp, #8]
 808ac5e:	e7ed      	b.n	808ac3c <_strtod_r+0x1dc>
 808ac60:	4428      	add	r0, r5
 808ac62:	2808      	cmp	r0, #8
 808ac64:	f100 0501 	add.w	r5, r0, #1
 808ac68:	dc05      	bgt.n	808ac76 <_strtod_r+0x216>
 808ac6a:	9804      	ldr	r0, [sp, #16]
 808ac6c:	210a      	movs	r1, #10
 808ac6e:	fb01 3300 	mla	r3, r1, r0, r3
 808ac72:	9304      	str	r3, [sp, #16]
 808ac74:	e006      	b.n	808ac84 <_strtod_r+0x224>
 808ac76:	2d10      	cmp	r5, #16
 808ac78:	bfdf      	itttt	le
 808ac7a:	9802      	ldrle	r0, [sp, #8]
 808ac7c:	210a      	movle	r1, #10
 808ac7e:	fb01 3300 	mlale	r3, r1, r0, r3
 808ac82:	9302      	strle	r3, [sp, #8]
 808ac84:	2100      	movs	r1, #0
 808ac86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ac88:	1c58      	adds	r0, r3, #1
 808ac8a:	9017      	str	r0, [sp, #92]	; 0x5c
 808ac8c:	785b      	ldrb	r3, [r3, #1]
 808ac8e:	4608      	mov	r0, r1
 808ac90:	e002      	b.n	808ac98 <_strtod_r+0x238>
 808ac92:	465d      	mov	r5, fp
 808ac94:	4638      	mov	r0, r7
 808ac96:	463a      	mov	r2, r7
 808ac98:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808ac9c:	2909      	cmp	r1, #9
 808ac9e:	d9c4      	bls.n	808ac2a <_strtod_r+0x1ca>
 808aca0:	2101      	movs	r1, #1
 808aca2:	2b65      	cmp	r3, #101	; 0x65
 808aca4:	d001      	beq.n	808acaa <_strtod_r+0x24a>
 808aca6:	2b45      	cmp	r3, #69	; 0x45
 808aca8:	d14f      	bne.n	808ad4a <_strtod_r+0x2ea>
 808acaa:	b96d      	cbnz	r5, 808acc8 <_strtod_r+0x268>
 808acac:	e004      	b.n	808acb8 <_strtod_r+0x258>
 808acae:	2b65      	cmp	r3, #101	; 0x65
 808acb0:	f040 84ad 	bne.w	808b60e <_strtod_r+0xbae>
 808acb4:	2200      	movs	r2, #0
 808acb6:	2101      	movs	r1, #1
 808acb8:	b928      	cbnz	r0, 808acc6 <_strtod_r+0x266>
 808acba:	9b05      	ldr	r3, [sp, #20]
 808acbc:	2b00      	cmp	r3, #0
 808acbe:	f000 8092 	beq.w	808ade6 <_strtod_r+0x386>
 808acc2:	4605      	mov	r5, r0
 808acc4:	e000      	b.n	808acc8 <_strtod_r+0x268>
 808acc6:	2500      	movs	r5, #0
 808acc8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808acca:	1c63      	adds	r3, r4, #1
 808accc:	9317      	str	r3, [sp, #92]	; 0x5c
 808acce:	7863      	ldrb	r3, [r4, #1]
 808acd0:	2b2b      	cmp	r3, #43	; 0x2b
 808acd2:	d006      	beq.n	808ace2 <_strtod_r+0x282>
 808acd4:	2b2d      	cmp	r3, #45	; 0x2d
 808acd6:	d002      	beq.n	808acde <_strtod_r+0x27e>
 808acd8:	2600      	movs	r6, #0
 808acda:	9603      	str	r6, [sp, #12]
 808acdc:	e006      	b.n	808acec <_strtod_r+0x28c>
 808acde:	2301      	movs	r3, #1
 808ace0:	e000      	b.n	808ace4 <_strtod_r+0x284>
 808ace2:	2300      	movs	r3, #0
 808ace4:	9303      	str	r3, [sp, #12]
 808ace6:	1ca3      	adds	r3, r4, #2
 808ace8:	9317      	str	r3, [sp, #92]	; 0x5c
 808acea:	78a3      	ldrb	r3, [r4, #2]
 808acec:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808acf0:	2e09      	cmp	r6, #9
 808acf2:	d829      	bhi.n	808ad48 <_strtod_r+0x2e8>
 808acf4:	2b30      	cmp	r3, #48	; 0x30
 808acf6:	d104      	bne.n	808ad02 <_strtod_r+0x2a2>
 808acf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808acfa:	1c5e      	adds	r6, r3, #1
 808acfc:	9617      	str	r6, [sp, #92]	; 0x5c
 808acfe:	785b      	ldrb	r3, [r3, #1]
 808ad00:	e7f8      	b.n	808acf4 <_strtod_r+0x294>
 808ad02:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808ad06:	2e08      	cmp	r6, #8
 808ad08:	d81f      	bhi.n	808ad4a <_strtod_r+0x2ea>
 808ad0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808ad0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad10:	461f      	mov	r7, r3
 808ad12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad14:	1c5e      	adds	r6, r3, #1
 808ad16:	9617      	str	r6, [sp, #92]	; 0x5c
 808ad18:	785b      	ldrb	r3, [r3, #1]
 808ad1a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808ad1e:	f1bc 0f09 	cmp.w	ip, #9
 808ad22:	d805      	bhi.n	808ad30 <_strtod_r+0x2d0>
 808ad24:	260a      	movs	r6, #10
 808ad26:	fb06 3e0e 	mla	lr, r6, lr, r3
 808ad2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808ad2e:	e7f0      	b.n	808ad12 <_strtod_r+0x2b2>
 808ad30:	1bf6      	subs	r6, r6, r7
 808ad32:	2e08      	cmp	r6, #8
 808ad34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808ad38:	dc02      	bgt.n	808ad40 <_strtod_r+0x2e0>
 808ad3a:	4576      	cmp	r6, lr
 808ad3c:	bfa8      	it	ge
 808ad3e:	4676      	movge	r6, lr
 808ad40:	9f03      	ldr	r7, [sp, #12]
 808ad42:	b11f      	cbz	r7, 808ad4c <_strtod_r+0x2ec>
 808ad44:	4276      	negs	r6, r6
 808ad46:	e001      	b.n	808ad4c <_strtod_r+0x2ec>
 808ad48:	9417      	str	r4, [sp, #92]	; 0x5c
 808ad4a:	2600      	movs	r6, #0
 808ad4c:	2d00      	cmp	r5, #0
 808ad4e:	d152      	bne.n	808adf6 <_strtod_r+0x396>
 808ad50:	2800      	cmp	r0, #0
 808ad52:	f040 844e 	bne.w	808b5f2 <_strtod_r+0xb92>
 808ad56:	9a05      	ldr	r2, [sp, #20]
 808ad58:	2a00      	cmp	r2, #0
 808ad5a:	f040 844a 	bne.w	808b5f2 <_strtod_r+0xb92>
 808ad5e:	2900      	cmp	r1, #0
 808ad60:	d141      	bne.n	808ade6 <_strtod_r+0x386>
 808ad62:	2b4e      	cmp	r3, #78	; 0x4e
 808ad64:	d020      	beq.n	808ada8 <_strtod_r+0x348>
 808ad66:	dc07      	bgt.n	808ad78 <_strtod_r+0x318>
 808ad68:	2b49      	cmp	r3, #73	; 0x49
 808ad6a:	d00a      	beq.n	808ad82 <_strtod_r+0x322>
 808ad6c:	e03b      	b.n	808ade6 <_strtod_r+0x386>
 808ad6e:	bf00      	nop
 808ad70:	0808deb4 	.word	0x0808deb4
 808ad74:	7ff00000 	.word	0x7ff00000
 808ad78:	2b69      	cmp	r3, #105	; 0x69
 808ad7a:	d002      	beq.n	808ad82 <_strtod_r+0x322>
 808ad7c:	2b6e      	cmp	r3, #110	; 0x6e
 808ad7e:	d013      	beq.n	808ada8 <_strtod_r+0x348>
 808ad80:	e031      	b.n	808ade6 <_strtod_r+0x386>
 808ad82:	49aa      	ldr	r1, [pc, #680]	; (808b02c <_strtod_r+0x5cc>)
 808ad84:	a817      	add	r0, sp, #92	; 0x5c
 808ad86:	f001 f9bb 	bl	808c100 <__match>
 808ad8a:	b360      	cbz	r0, 808ade6 <_strtod_r+0x386>
 808ad8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad8e:	49a8      	ldr	r1, [pc, #672]	; (808b030 <_strtod_r+0x5d0>)
 808ad90:	3b01      	subs	r3, #1
 808ad92:	a817      	add	r0, sp, #92	; 0x5c
 808ad94:	9317      	str	r3, [sp, #92]	; 0x5c
 808ad96:	f001 f9b3 	bl	808c100 <__match>
 808ad9a:	b910      	cbnz	r0, 808ada2 <_strtod_r+0x342>
 808ad9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ad9e:	3301      	adds	r3, #1
 808ada0:	9317      	str	r3, [sp, #92]	; 0x5c
 808ada2:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808b04c <_strtod_r+0x5ec>
 808ada6:	e01a      	b.n	808adde <_strtod_r+0x37e>
 808ada8:	49a2      	ldr	r1, [pc, #648]	; (808b034 <_strtod_r+0x5d4>)
 808adaa:	a817      	add	r0, sp, #92	; 0x5c
 808adac:	f001 f9a8 	bl	808c100 <__match>
 808adb0:	b1c8      	cbz	r0, 808ade6 <_strtod_r+0x386>
 808adb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808adb4:	781b      	ldrb	r3, [r3, #0]
 808adb6:	2b28      	cmp	r3, #40	; 0x28
 808adb8:	d10f      	bne.n	808adda <_strtod_r+0x37a>
 808adba:	aa1a      	add	r2, sp, #104	; 0x68
 808adbc:	499e      	ldr	r1, [pc, #632]	; (808b038 <_strtod_r+0x5d8>)
 808adbe:	a817      	add	r0, sp, #92	; 0x5c
 808adc0:	f001 f9b1 	bl	808c126 <__hexnan>
 808adc4:	2805      	cmp	r0, #5
 808adc6:	d108      	bne.n	808adda <_strtod_r+0x37a>
 808adc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808adca:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808adce:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808add2:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808add6:	f000 bc0c 	b.w	808b5f2 <_strtod_r+0xb92>
 808adda:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808b050 <_strtod_r+0x5f0>
 808adde:	f04f 0800 	mov.w	r8, #0
 808ade2:	f000 bc06 	b.w	808b5f2 <_strtod_r+0xb92>
 808ade6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808ade8:	9417      	str	r4, [sp, #92]	; 0x5c
 808adea:	2b00      	cmp	r3, #0
 808adec:	f000 840c 	beq.w	808b608 <_strtod_r+0xba8>
 808adf0:	2300      	movs	r3, #0
 808adf2:	930c      	str	r3, [sp, #48]	; 0x30
 808adf4:	e3ff      	b.n	808b5f6 <_strtod_r+0xb96>
 808adf6:	462c      	mov	r4, r5
 808adf8:	f1bb 0f00 	cmp.w	fp, #0
 808adfc:	bf08      	it	eq
 808adfe:	46ab      	moveq	fp, r5
 808ae00:	9804      	ldr	r0, [sp, #16]
 808ae02:	2d10      	cmp	r5, #16
 808ae04:	bfa8      	it	ge
 808ae06:	2410      	movge	r4, #16
 808ae08:	1ab7      	subs	r7, r6, r2
 808ae0a:	f7fd fe59 	bl	8088ac0 <__aeabi_ui2d>
 808ae0e:	2c09      	cmp	r4, #9
 808ae10:	4680      	mov	r8, r0
 808ae12:	4689      	mov	r9, r1
 808ae14:	dd13      	ble.n	808ae3e <_strtod_r+0x3de>
 808ae16:	4b89      	ldr	r3, [pc, #548]	; (808b03c <_strtod_r+0x5dc>)
 808ae18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808ae1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808ae20:	f7fd fec4 	bl	8088bac <__aeabi_dmul>
 808ae24:	4680      	mov	r8, r0
 808ae26:	9802      	ldr	r0, [sp, #8]
 808ae28:	4689      	mov	r9, r1
 808ae2a:	f7fd fe49 	bl	8088ac0 <__aeabi_ui2d>
 808ae2e:	4602      	mov	r2, r0
 808ae30:	460b      	mov	r3, r1
 808ae32:	4640      	mov	r0, r8
 808ae34:	4649      	mov	r1, r9
 808ae36:	f7fd fd07 	bl	8088848 <__adddf3>
 808ae3a:	4680      	mov	r8, r0
 808ae3c:	4689      	mov	r9, r1
 808ae3e:	2d0f      	cmp	r5, #15
 808ae40:	dc33      	bgt.n	808aeaa <_strtod_r+0x44a>
 808ae42:	2f00      	cmp	r7, #0
 808ae44:	f000 83d5 	beq.w	808b5f2 <_strtod_r+0xb92>
 808ae48:	dd22      	ble.n	808ae90 <_strtod_r+0x430>
 808ae4a:	2f16      	cmp	r7, #22
 808ae4c:	dc07      	bgt.n	808ae5e <_strtod_r+0x3fe>
 808ae4e:	4d7b      	ldr	r5, [pc, #492]	; (808b03c <_strtod_r+0x5dc>)
 808ae50:	4642      	mov	r2, r8
 808ae52:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808ae56:	464b      	mov	r3, r9
 808ae58:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ae5c:	e013      	b.n	808ae86 <_strtod_r+0x426>
 808ae5e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808ae62:	429f      	cmp	r7, r3
 808ae64:	dc21      	bgt.n	808aeaa <_strtod_r+0x44a>
 808ae66:	4c75      	ldr	r4, [pc, #468]	; (808b03c <_strtod_r+0x5dc>)
 808ae68:	f1c5 050f 	rsb	r5, r5, #15
 808ae6c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808ae70:	1b7d      	subs	r5, r7, r5
 808ae72:	4642      	mov	r2, r8
 808ae74:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ae78:	464b      	mov	r3, r9
 808ae7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808ae7e:	f7fd fe95 	bl	8088bac <__aeabi_dmul>
 808ae82:	e9d4 2300 	ldrd	r2, r3, [r4]
 808ae86:	f7fd fe91 	bl	8088bac <__aeabi_dmul>
 808ae8a:	4680      	mov	r8, r0
 808ae8c:	4689      	mov	r9, r1
 808ae8e:	e3b0      	b.n	808b5f2 <_strtod_r+0xb92>
 808ae90:	f117 0f16 	cmn.w	r7, #22
 808ae94:	db09      	blt.n	808aeaa <_strtod_r+0x44a>
 808ae96:	4d69      	ldr	r5, [pc, #420]	; (808b03c <_strtod_r+0x5dc>)
 808ae98:	4640      	mov	r0, r8
 808ae9a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808aea2:	4649      	mov	r1, r9
 808aea4:	f7fd ffac 	bl	8088e00 <__aeabi_ddiv>
 808aea8:	e7ef      	b.n	808ae8a <_strtod_r+0x42a>
 808aeaa:	1b2c      	subs	r4, r5, r4
 808aeac:	443c      	add	r4, r7
 808aeae:	2c00      	cmp	r4, #0
 808aeb0:	dd5d      	ble.n	808af6e <_strtod_r+0x50e>
 808aeb2:	f014 010f 	ands.w	r1, r4, #15
 808aeb6:	d00a      	beq.n	808aece <_strtod_r+0x46e>
 808aeb8:	4b60      	ldr	r3, [pc, #384]	; (808b03c <_strtod_r+0x5dc>)
 808aeba:	4642      	mov	r2, r8
 808aebc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808aec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808aec4:	464b      	mov	r3, r9
 808aec6:	f7fd fe71 	bl	8088bac <__aeabi_dmul>
 808aeca:	4680      	mov	r8, r0
 808aecc:	4689      	mov	r9, r1
 808aece:	f034 040f 	bics.w	r4, r4, #15
 808aed2:	f000 80c1 	beq.w	808b058 <_strtod_r+0x5f8>
 808aed6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808aeda:	dd0f      	ble.n	808aefc <_strtod_r+0x49c>
 808aedc:	f04f 0b00 	mov.w	fp, #0
 808aee0:	f8cd b008 	str.w	fp, [sp, #8]
 808aee4:	f8cd b014 	str.w	fp, [sp, #20]
 808aee8:	f8cd b010 	str.w	fp, [sp, #16]
 808aeec:	2322      	movs	r3, #34	; 0x22
 808aeee:	f8ca 3000 	str.w	r3, [sl]
 808aef2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808b04c <_strtod_r+0x5ec>
 808aef6:	f04f 0800 	mov.w	r8, #0
 808aefa:	e189      	b.n	808b210 <_strtod_r+0x7b0>
 808aefc:	4640      	mov	r0, r8
 808aefe:	4649      	mov	r1, r9
 808af00:	2300      	movs	r3, #0
 808af02:	4e4f      	ldr	r6, [pc, #316]	; (808b040 <_strtod_r+0x5e0>)
 808af04:	1124      	asrs	r4, r4, #4
 808af06:	9302      	str	r3, [sp, #8]
 808af08:	2c01      	cmp	r4, #1
 808af0a:	dd0c      	ble.n	808af26 <_strtod_r+0x4c6>
 808af0c:	07e2      	lsls	r2, r4, #31
 808af0e:	d504      	bpl.n	808af1a <_strtod_r+0x4ba>
 808af10:	e9d6 2300 	ldrd	r2, r3, [r6]
 808af14:	f7fd fe4a 	bl	8088bac <__aeabi_dmul>
 808af18:	2301      	movs	r3, #1
 808af1a:	9a02      	ldr	r2, [sp, #8]
 808af1c:	1064      	asrs	r4, r4, #1
 808af1e:	3201      	adds	r2, #1
 808af20:	9202      	str	r2, [sp, #8]
 808af22:	3608      	adds	r6, #8
 808af24:	e7f0      	b.n	808af08 <_strtod_r+0x4a8>
 808af26:	b10b      	cbz	r3, 808af2c <_strtod_r+0x4cc>
 808af28:	4680      	mov	r8, r0
 808af2a:	4689      	mov	r9, r1
 808af2c:	4b44      	ldr	r3, [pc, #272]	; (808b040 <_strtod_r+0x5e0>)
 808af2e:	9a02      	ldr	r2, [sp, #8]
 808af30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808af34:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808af38:	e9d1 0100 	ldrd	r0, r1, [r1]
 808af3c:	4642      	mov	r2, r8
 808af3e:	464b      	mov	r3, r9
 808af40:	f7fd fe34 	bl	8088bac <__aeabi_dmul>
 808af44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808af48:	4689      	mov	r9, r1
 808af4a:	460a      	mov	r2, r1
 808af4c:	0d1b      	lsrs	r3, r3, #20
 808af4e:	493d      	ldr	r1, [pc, #244]	; (808b044 <_strtod_r+0x5e4>)
 808af50:	051b      	lsls	r3, r3, #20
 808af52:	428b      	cmp	r3, r1
 808af54:	4680      	mov	r8, r0
 808af56:	d8c1      	bhi.n	808aedc <_strtod_r+0x47c>
 808af58:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808af5c:	428b      	cmp	r3, r1
 808af5e:	bf86      	itte	hi
 808af60:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808b054 <_strtod_r+0x5f4>
 808af64:	f04f 38ff 	movhi.w	r8, #4294967295
 808af68:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808af6c:	e074      	b.n	808b058 <_strtod_r+0x5f8>
 808af6e:	d073      	beq.n	808b058 <_strtod_r+0x5f8>
 808af70:	4264      	negs	r4, r4
 808af72:	f014 020f 	ands.w	r2, r4, #15
 808af76:	d00a      	beq.n	808af8e <_strtod_r+0x52e>
 808af78:	4b30      	ldr	r3, [pc, #192]	; (808b03c <_strtod_r+0x5dc>)
 808af7a:	4640      	mov	r0, r8
 808af7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808af80:	4649      	mov	r1, r9
 808af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 808af86:	f7fd ff3b 	bl	8088e00 <__aeabi_ddiv>
 808af8a:	4680      	mov	r8, r0
 808af8c:	4689      	mov	r9, r1
 808af8e:	1124      	asrs	r4, r4, #4
 808af90:	d062      	beq.n	808b058 <_strtod_r+0x5f8>
 808af92:	2c1f      	cmp	r4, #31
 808af94:	dd08      	ble.n	808afa8 <_strtod_r+0x548>
 808af96:	f04f 0b00 	mov.w	fp, #0
 808af9a:	f8cd b008 	str.w	fp, [sp, #8]
 808af9e:	f8cd b014 	str.w	fp, [sp, #20]
 808afa2:	f8cd b010 	str.w	fp, [sp, #16]
 808afa6:	e12c      	b.n	808b202 <_strtod_r+0x7a2>
 808afa8:	4640      	mov	r0, r8
 808afaa:	4649      	mov	r1, r9
 808afac:	f014 0f10 	tst.w	r4, #16
 808afb0:	bf0c      	ite	eq
 808afb2:	2300      	moveq	r3, #0
 808afb4:	236a      	movne	r3, #106	; 0x6a
 808afb6:	4e24      	ldr	r6, [pc, #144]	; (808b048 <_strtod_r+0x5e8>)
 808afb8:	9303      	str	r3, [sp, #12]
 808afba:	2300      	movs	r3, #0
 808afbc:	2c00      	cmp	r4, #0
 808afbe:	dd09      	ble.n	808afd4 <_strtod_r+0x574>
 808afc0:	07e2      	lsls	r2, r4, #31
 808afc2:	d504      	bpl.n	808afce <_strtod_r+0x56e>
 808afc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 808afc8:	f7fd fdf0 	bl	8088bac <__aeabi_dmul>
 808afcc:	2301      	movs	r3, #1
 808afce:	1064      	asrs	r4, r4, #1
 808afd0:	3608      	adds	r6, #8
 808afd2:	e7f3      	b.n	808afbc <_strtod_r+0x55c>
 808afd4:	b10b      	cbz	r3, 808afda <_strtod_r+0x57a>
 808afd6:	4680      	mov	r8, r0
 808afd8:	4689      	mov	r9, r1
 808afda:	9b03      	ldr	r3, [sp, #12]
 808afdc:	b1eb      	cbz	r3, 808b01a <_strtod_r+0x5ba>
 808afde:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808afe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808afe6:	2b00      	cmp	r3, #0
 808afe8:	4649      	mov	r1, r9
 808afea:	dd16      	ble.n	808b01a <_strtod_r+0x5ba>
 808afec:	2b1f      	cmp	r3, #31
 808afee:	dd0e      	ble.n	808b00e <_strtod_r+0x5ae>
 808aff0:	2b34      	cmp	r3, #52	; 0x34
 808aff2:	bfde      	ittt	le
 808aff4:	3b20      	suble	r3, #32
 808aff6:	f04f 32ff 	movle.w	r2, #4294967295
 808affa:	fa02 f303 	lslle.w	r3, r2, r3
 808affe:	f04f 0800 	mov.w	r8, #0
 808b002:	bfcc      	ite	gt
 808b004:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808b008:	ea03 0901 	andle.w	r9, r3, r1
 808b00c:	e005      	b.n	808b01a <_strtod_r+0x5ba>
 808b00e:	f04f 32ff 	mov.w	r2, #4294967295
 808b012:	fa02 f303 	lsl.w	r3, r2, r3
 808b016:	ea03 0808 	and.w	r8, r3, r8
 808b01a:	2200      	movs	r2, #0
 808b01c:	2300      	movs	r3, #0
 808b01e:	4640      	mov	r0, r8
 808b020:	4649      	mov	r1, r9
 808b022:	f7fe f82b 	bl	808907c <__aeabi_dcmpeq>
 808b026:	2800      	cmp	r0, #0
 808b028:	d1b5      	bne.n	808af96 <_strtod_r+0x536>
 808b02a:	e017      	b.n	808b05c <_strtod_r+0x5fc>
 808b02c:	0808dec8 	.word	0x0808dec8
 808b030:	0808decb 	.word	0x0808decb
 808b034:	0808df19 	.word	0x0808df19
 808b038:	0808ded4 	.word	0x0808ded4
 808b03c:	0808e178 	.word	0x0808e178
 808b040:	0808e240 	.word	0x0808e240
 808b044:	7ca00000 	.word	0x7ca00000
 808b048:	0808dee8 	.word	0x0808dee8
 808b04c:	7ff00000 	.word	0x7ff00000
 808b050:	fff80000 	.word	0xfff80000
 808b054:	7fefffff 	.word	0x7fefffff
 808b058:	2300      	movs	r3, #0
 808b05a:	9303      	str	r3, [sp, #12]
 808b05c:	9b04      	ldr	r3, [sp, #16]
 808b05e:	465a      	mov	r2, fp
 808b060:	9300      	str	r3, [sp, #0]
 808b062:	9906      	ldr	r1, [sp, #24]
 808b064:	462b      	mov	r3, r5
 808b066:	4650      	mov	r0, sl
 808b068:	f001 fa55 	bl	808c516 <__s2b>
 808b06c:	9005      	str	r0, [sp, #20]
 808b06e:	2800      	cmp	r0, #0
 808b070:	f43f af34 	beq.w	808aedc <_strtod_r+0x47c>
 808b074:	2f00      	cmp	r7, #0
 808b076:	f1c7 0300 	rsb	r3, r7, #0
 808b07a:	bfa8      	it	ge
 808b07c:	2300      	movge	r3, #0
 808b07e:	930d      	str	r3, [sp, #52]	; 0x34
 808b080:	f04f 0b00 	mov.w	fp, #0
 808b084:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808b088:	9312      	str	r3, [sp, #72]	; 0x48
 808b08a:	f8cd b008 	str.w	fp, [sp, #8]
 808b08e:	9b05      	ldr	r3, [sp, #20]
 808b090:	4650      	mov	r0, sl
 808b092:	6859      	ldr	r1, [r3, #4]
 808b094:	f001 f9b8 	bl	808c408 <_Balloc>
 808b098:	9004      	str	r0, [sp, #16]
 808b09a:	2800      	cmp	r0, #0
 808b09c:	f43f af26 	beq.w	808aeec <_strtod_r+0x48c>
 808b0a0:	9b05      	ldr	r3, [sp, #20]
 808b0a2:	300c      	adds	r0, #12
 808b0a4:	691a      	ldr	r2, [r3, #16]
 808b0a6:	f103 010c 	add.w	r1, r3, #12
 808b0aa:	3202      	adds	r2, #2
 808b0ac:	0092      	lsls	r2, r2, #2
 808b0ae:	f7fe fee0 	bl	8089e72 <memcpy>
 808b0b2:	ab1a      	add	r3, sp, #104	; 0x68
 808b0b4:	9301      	str	r3, [sp, #4]
 808b0b6:	ab19      	add	r3, sp, #100	; 0x64
 808b0b8:	9300      	str	r3, [sp, #0]
 808b0ba:	4642      	mov	r2, r8
 808b0bc:	464b      	mov	r3, r9
 808b0be:	4650      	mov	r0, sl
 808b0c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808b0c4:	f001 fcd7 	bl	808ca76 <__d2b>
 808b0c8:	9018      	str	r0, [sp, #96]	; 0x60
 808b0ca:	2800      	cmp	r0, #0
 808b0cc:	f43f af0e 	beq.w	808aeec <_strtod_r+0x48c>
 808b0d0:	2101      	movs	r1, #1
 808b0d2:	4650      	mov	r0, sl
 808b0d4:	f001 faaa 	bl	808c62c <__i2b>
 808b0d8:	9002      	str	r0, [sp, #8]
 808b0da:	2800      	cmp	r0, #0
 808b0dc:	f43f af06 	beq.w	808aeec <_strtod_r+0x48c>
 808b0e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b0e2:	9903      	ldr	r1, [sp, #12]
 808b0e4:	2b00      	cmp	r3, #0
 808b0e6:	bfac      	ite	ge
 808b0e8:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808b0ea:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808b0ec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808b0ee:	bfac      	ite	ge
 808b0f0:	18d6      	addge	r6, r2, r3
 808b0f2:	1ad2      	sublt	r2, r2, r3
 808b0f4:	eba3 0301 	sub.w	r3, r3, r1
 808b0f8:	4423      	add	r3, r4
 808b0fa:	49b1      	ldr	r1, [pc, #708]	; (808b3c0 <_strtod_r+0x960>)
 808b0fc:	f103 33ff 	add.w	r3, r3, #4294967295
 808b100:	bfac      	ite	ge
 808b102:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808b104:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808b106:	428b      	cmp	r3, r1
 808b108:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808b10c:	f280 8085 	bge.w	808b21a <_strtod_r+0x7ba>
 808b110:	1ac9      	subs	r1, r1, r3
 808b112:	291f      	cmp	r1, #31
 808b114:	bfc8      	it	gt
 808b116:	4dab      	ldrgt	r5, [pc, #684]	; (808b3c4 <_strtod_r+0x964>)
 808b118:	f04f 0701 	mov.w	r7, #1
 808b11c:	bfd4      	ite	le
 808b11e:	fa07 f301 	lslle.w	r3, r7, r1
 808b122:	1aed      	subgt	r5, r5, r3
 808b124:	eba4 0401 	sub.w	r4, r4, r1
 808b128:	bfd9      	ittee	le
 808b12a:	9307      	strle	r3, [sp, #28]
 808b12c:	2500      	movle	r5, #0
 808b12e:	fa07 f505 	lslgt.w	r5, r7, r5
 808b132:	9707      	strgt	r7, [sp, #28]
 808b134:	1937      	adds	r7, r6, r4
 808b136:	9b03      	ldr	r3, [sp, #12]
 808b138:	42be      	cmp	r6, r7
 808b13a:	4414      	add	r4, r2
 808b13c:	441c      	add	r4, r3
 808b13e:	4633      	mov	r3, r6
 808b140:	bfa8      	it	ge
 808b142:	463b      	movge	r3, r7
 808b144:	42a3      	cmp	r3, r4
 808b146:	bfa8      	it	ge
 808b148:	4623      	movge	r3, r4
 808b14a:	2b00      	cmp	r3, #0
 808b14c:	bfc2      	ittt	gt
 808b14e:	1aff      	subgt	r7, r7, r3
 808b150:	1ae4      	subgt	r4, r4, r3
 808b152:	1af6      	subgt	r6, r6, r3
 808b154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b156:	2b00      	cmp	r3, #0
 808b158:	d163      	bne.n	808b222 <_strtod_r+0x7c2>
 808b15a:	2f00      	cmp	r7, #0
 808b15c:	dc7a      	bgt.n	808b254 <_strtod_r+0x7f4>
 808b15e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808b160:	2b00      	cmp	r3, #0
 808b162:	f040 8081 	bne.w	808b268 <_strtod_r+0x808>
 808b166:	2c00      	cmp	r4, #0
 808b168:	f300 8088 	bgt.w	808b27c <_strtod_r+0x81c>
 808b16c:	2e00      	cmp	r6, #0
 808b16e:	f300 808f 	bgt.w	808b290 <_strtod_r+0x830>
 808b172:	9a04      	ldr	r2, [sp, #16]
 808b174:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b176:	4650      	mov	r0, sl
 808b178:	f001 fbad 	bl	808c8d6 <__mdiff>
 808b17c:	4683      	mov	fp, r0
 808b17e:	2800      	cmp	r0, #0
 808b180:	f43f aeb4 	beq.w	808aeec <_strtod_r+0x48c>
 808b184:	68c3      	ldr	r3, [r0, #12]
 808b186:	2400      	movs	r4, #0
 808b188:	60c4      	str	r4, [r0, #12]
 808b18a:	9902      	ldr	r1, [sp, #8]
 808b18c:	9306      	str	r3, [sp, #24]
 808b18e:	f001 fb86 	bl	808c89e <__mcmp>
 808b192:	42a0      	cmp	r0, r4
 808b194:	f280 808b 	bge.w	808b2ae <_strtod_r+0x84e>
 808b198:	9b06      	ldr	r3, [sp, #24]
 808b19a:	2b00      	cmp	r3, #0
 808b19c:	f040 8202 	bne.w	808b5a4 <_strtod_r+0xb44>
 808b1a0:	f1b8 0f00 	cmp.w	r8, #0
 808b1a4:	f040 81fe 	bne.w	808b5a4 <_strtod_r+0xb44>
 808b1a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b1ac:	2b00      	cmp	r3, #0
 808b1ae:	f040 81f9 	bne.w	808b5a4 <_strtod_r+0xb44>
 808b1b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b1b6:	0d1b      	lsrs	r3, r3, #20
 808b1b8:	051b      	lsls	r3, r3, #20
 808b1ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b1be:	f240 81f1 	bls.w	808b5a4 <_strtod_r+0xb44>
 808b1c2:	f8db 3014 	ldr.w	r3, [fp, #20]
 808b1c6:	2b00      	cmp	r3, #0
 808b1c8:	d06c      	beq.n	808b2a4 <_strtod_r+0x844>
 808b1ca:	4659      	mov	r1, fp
 808b1cc:	2201      	movs	r2, #1
 808b1ce:	4650      	mov	r0, sl
 808b1d0:	f001 fb14 	bl	808c7fc <__lshift>
 808b1d4:	9902      	ldr	r1, [sp, #8]
 808b1d6:	4683      	mov	fp, r0
 808b1d8:	f001 fb61 	bl	808c89e <__mcmp>
 808b1dc:	2800      	cmp	r0, #0
 808b1de:	f340 81e1 	ble.w	808b5a4 <_strtod_r+0xb44>
 808b1e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b1e6:	9a03      	ldr	r2, [sp, #12]
 808b1e8:	0d1b      	lsrs	r3, r3, #20
 808b1ea:	051b      	lsls	r3, r3, #20
 808b1ec:	2a00      	cmp	r2, #0
 808b1ee:	f000 808d 	beq.w	808b30c <_strtod_r+0x8ac>
 808b1f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b1f6:	f300 8089 	bgt.w	808b30c <_strtod_r+0x8ac>
 808b1fa:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808b1fe:	f300 81d3 	bgt.w	808b5a8 <_strtod_r+0xb48>
 808b202:	2322      	movs	r3, #34	; 0x22
 808b204:	f04f 0800 	mov.w	r8, #0
 808b208:	f04f 0900 	mov.w	r9, #0
 808b20c:	f8ca 3000 	str.w	r3, [sl]
 808b210:	9b05      	ldr	r3, [sp, #20]
 808b212:	2b00      	cmp	r3, #0
 808b214:	f040 81d9 	bne.w	808b5ca <_strtod_r+0xb6a>
 808b218:	e1eb      	b.n	808b5f2 <_strtod_r+0xb92>
 808b21a:	2301      	movs	r3, #1
 808b21c:	2500      	movs	r5, #0
 808b21e:	9307      	str	r3, [sp, #28]
 808b220:	e788      	b.n	808b134 <_strtod_r+0x6d4>
 808b222:	461a      	mov	r2, r3
 808b224:	9902      	ldr	r1, [sp, #8]
 808b226:	4650      	mov	r0, sl
 808b228:	f001 fa9a 	bl	808c760 <__pow5mult>
 808b22c:	9002      	str	r0, [sp, #8]
 808b22e:	2800      	cmp	r0, #0
 808b230:	f43f ae5c 	beq.w	808aeec <_strtod_r+0x48c>
 808b234:	4601      	mov	r1, r0
 808b236:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808b238:	4650      	mov	r0, sl
 808b23a:	f001 fa00 	bl	808c63e <__multiply>
 808b23e:	9006      	str	r0, [sp, #24]
 808b240:	2800      	cmp	r0, #0
 808b242:	f43f ae53 	beq.w	808aeec <_strtod_r+0x48c>
 808b246:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b248:	4650      	mov	r0, sl
 808b24a:	f001 f912 	bl	808c472 <_Bfree>
 808b24e:	9b06      	ldr	r3, [sp, #24]
 808b250:	9318      	str	r3, [sp, #96]	; 0x60
 808b252:	e782      	b.n	808b15a <_strtod_r+0x6fa>
 808b254:	463a      	mov	r2, r7
 808b256:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b258:	4650      	mov	r0, sl
 808b25a:	f001 facf 	bl	808c7fc <__lshift>
 808b25e:	9018      	str	r0, [sp, #96]	; 0x60
 808b260:	2800      	cmp	r0, #0
 808b262:	f47f af7c 	bne.w	808b15e <_strtod_r+0x6fe>
 808b266:	e641      	b.n	808aeec <_strtod_r+0x48c>
 808b268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808b26a:	9904      	ldr	r1, [sp, #16]
 808b26c:	4650      	mov	r0, sl
 808b26e:	f001 fa77 	bl	808c760 <__pow5mult>
 808b272:	9004      	str	r0, [sp, #16]
 808b274:	2800      	cmp	r0, #0
 808b276:	f47f af76 	bne.w	808b166 <_strtod_r+0x706>
 808b27a:	e637      	b.n	808aeec <_strtod_r+0x48c>
 808b27c:	4622      	mov	r2, r4
 808b27e:	9904      	ldr	r1, [sp, #16]
 808b280:	4650      	mov	r0, sl
 808b282:	f001 fabb 	bl	808c7fc <__lshift>
 808b286:	9004      	str	r0, [sp, #16]
 808b288:	2800      	cmp	r0, #0
 808b28a:	f47f af6f 	bne.w	808b16c <_strtod_r+0x70c>
 808b28e:	e62d      	b.n	808aeec <_strtod_r+0x48c>
 808b290:	4632      	mov	r2, r6
 808b292:	9902      	ldr	r1, [sp, #8]
 808b294:	4650      	mov	r0, sl
 808b296:	f001 fab1 	bl	808c7fc <__lshift>
 808b29a:	9002      	str	r0, [sp, #8]
 808b29c:	2800      	cmp	r0, #0
 808b29e:	f47f af68 	bne.w	808b172 <_strtod_r+0x712>
 808b2a2:	e623      	b.n	808aeec <_strtod_r+0x48c>
 808b2a4:	f8db 3010 	ldr.w	r3, [fp, #16]
 808b2a8:	2b01      	cmp	r3, #1
 808b2aa:	dc8e      	bgt.n	808b1ca <_strtod_r+0x76a>
 808b2ac:	e17a      	b.n	808b5a4 <_strtod_r+0xb44>
 808b2ae:	d161      	bne.n	808b374 <_strtod_r+0x914>
 808b2b0:	9a06      	ldr	r2, [sp, #24]
 808b2b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b2b6:	b322      	cbz	r2, 808b302 <_strtod_r+0x8a2>
 808b2b8:	4943      	ldr	r1, [pc, #268]	; (808b3c8 <_strtod_r+0x968>)
 808b2ba:	464a      	mov	r2, r9
 808b2bc:	428b      	cmp	r3, r1
 808b2be:	d12e      	bne.n	808b31e <_strtod_r+0x8be>
 808b2c0:	9b03      	ldr	r3, [sp, #12]
 808b2c2:	4641      	mov	r1, r8
 808b2c4:	b163      	cbz	r3, 808b2e0 <_strtod_r+0x880>
 808b2c6:	4b41      	ldr	r3, [pc, #260]	; (808b3cc <_strtod_r+0x96c>)
 808b2c8:	4013      	ands	r3, r2
 808b2ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808b2ce:	d807      	bhi.n	808b2e0 <_strtod_r+0x880>
 808b2d0:	0d1b      	lsrs	r3, r3, #20
 808b2d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b2d6:	f04f 30ff 	mov.w	r0, #4294967295
 808b2da:	fa00 f303 	lsl.w	r3, r0, r3
 808b2de:	e001      	b.n	808b2e4 <_strtod_r+0x884>
 808b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 808b2e4:	428b      	cmp	r3, r1
 808b2e6:	d11a      	bne.n	808b31e <_strtod_r+0x8be>
 808b2e8:	4939      	ldr	r1, [pc, #228]	; (808b3d0 <_strtod_r+0x970>)
 808b2ea:	428a      	cmp	r2, r1
 808b2ec:	d102      	bne.n	808b2f4 <_strtod_r+0x894>
 808b2ee:	3301      	adds	r3, #1
 808b2f0:	f43f adfc 	beq.w	808aeec <_strtod_r+0x48c>
 808b2f4:	4b35      	ldr	r3, [pc, #212]	; (808b3cc <_strtod_r+0x96c>)
 808b2f6:	f04f 0800 	mov.w	r8, #0
 808b2fa:	4013      	ands	r3, r2
 808b2fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808b300:	e150      	b.n	808b5a4 <_strtod_r+0xb44>
 808b302:	b963      	cbnz	r3, 808b31e <_strtod_r+0x8be>
 808b304:	f1b8 0f00 	cmp.w	r8, #0
 808b308:	d109      	bne.n	808b31e <_strtod_r+0x8be>
 808b30a:	e76a      	b.n	808b1e2 <_strtod_r+0x782>
 808b30c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808b310:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808b314:	f04f 38ff 	mov.w	r8, #4294967295
 808b318:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808b31c:	e142      	b.n	808b5a4 <_strtod_r+0xb44>
 808b31e:	b115      	cbz	r5, 808b326 <_strtod_r+0x8c6>
 808b320:	ea15 0f09 	tst.w	r5, r9
 808b324:	e002      	b.n	808b32c <_strtod_r+0x8cc>
 808b326:	9b07      	ldr	r3, [sp, #28]
 808b328:	ea13 0f08 	tst.w	r3, r8
 808b32c:	f000 813a 	beq.w	808b5a4 <_strtod_r+0xb44>
 808b330:	9b06      	ldr	r3, [sp, #24]
 808b332:	9a03      	ldr	r2, [sp, #12]
 808b334:	4640      	mov	r0, r8
 808b336:	4649      	mov	r1, r9
 808b338:	b153      	cbz	r3, 808b350 <_strtod_r+0x8f0>
 808b33a:	f7ff fb6f 	bl	808aa1c <sulp>
 808b33e:	4602      	mov	r2, r0
 808b340:	460b      	mov	r3, r1
 808b342:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808b346:	f7fd fa7f 	bl	8088848 <__adddf3>
 808b34a:	4680      	mov	r8, r0
 808b34c:	4689      	mov	r9, r1
 808b34e:	e129      	b.n	808b5a4 <_strtod_r+0xb44>
 808b350:	f7ff fb64 	bl	808aa1c <sulp>
 808b354:	4602      	mov	r2, r0
 808b356:	460b      	mov	r3, r1
 808b358:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808b35c:	f7fd fa72 	bl	8088844 <__aeabi_dsub>
 808b360:	2200      	movs	r2, #0
 808b362:	2300      	movs	r3, #0
 808b364:	4680      	mov	r8, r0
 808b366:	4689      	mov	r9, r1
 808b368:	f7fd fe88 	bl	808907c <__aeabi_dcmpeq>
 808b36c:	2800      	cmp	r0, #0
 808b36e:	f47f af48 	bne.w	808b202 <_strtod_r+0x7a2>
 808b372:	e117      	b.n	808b5a4 <_strtod_r+0xb44>
 808b374:	9902      	ldr	r1, [sp, #8]
 808b376:	4658      	mov	r0, fp
 808b378:	f001 fbcb 	bl	808cb12 <__ratio>
 808b37c:	2200      	movs	r2, #0
 808b37e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808b382:	4606      	mov	r6, r0
 808b384:	460f      	mov	r7, r1
 808b386:	f7fd fe8d 	bl	80890a4 <__aeabi_dcmple>
 808b38a:	2800      	cmp	r0, #0
 808b38c:	d03f      	beq.n	808b40e <_strtod_r+0x9ae>
 808b38e:	9b06      	ldr	r3, [sp, #24]
 808b390:	b113      	cbz	r3, 808b398 <_strtod_r+0x938>
 808b392:	2600      	movs	r6, #0
 808b394:	4f0f      	ldr	r7, [pc, #60]	; (808b3d4 <_strtod_r+0x974>)
 808b396:	e010      	b.n	808b3ba <_strtod_r+0x95a>
 808b398:	f1b8 0f00 	cmp.w	r8, #0
 808b39c:	d103      	bne.n	808b3a6 <_strtod_r+0x946>
 808b39e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b3a2:	b93b      	cbnz	r3, 808b3b4 <_strtod_r+0x954>
 808b3a4:	e01a      	b.n	808b3dc <_strtod_r+0x97c>
 808b3a6:	f1b8 0f01 	cmp.w	r8, #1
 808b3aa:	d103      	bne.n	808b3b4 <_strtod_r+0x954>
 808b3ac:	f1b9 0f00 	cmp.w	r9, #0
 808b3b0:	f43f af27 	beq.w	808b202 <_strtod_r+0x7a2>
 808b3b4:	4f08      	ldr	r7, [pc, #32]	; (808b3d8 <_strtod_r+0x978>)
 808b3b6:	2600      	movs	r6, #0
 808b3b8:	2400      	movs	r4, #0
 808b3ba:	4d06      	ldr	r5, [pc, #24]	; (808b3d4 <_strtod_r+0x974>)
 808b3bc:	e03c      	b.n	808b438 <_strtod_r+0x9d8>
 808b3be:	bf00      	nop
 808b3c0:	fffffc02 	.word	0xfffffc02
 808b3c4:	fffffbe2 	.word	0xfffffbe2
 808b3c8:	000fffff 	.word	0x000fffff
 808b3cc:	7ff00000 	.word	0x7ff00000
 808b3d0:	7fefffff 	.word	0x7fefffff
 808b3d4:	3ff00000 	.word	0x3ff00000
 808b3d8:	bff00000 	.word	0xbff00000
 808b3dc:	2200      	movs	r2, #0
 808b3de:	4b9a      	ldr	r3, [pc, #616]	; (808b648 <_strtod_r+0xbe8>)
 808b3e0:	4630      	mov	r0, r6
 808b3e2:	4639      	mov	r1, r7
 808b3e4:	f7fd fe54 	bl	8089090 <__aeabi_dcmplt>
 808b3e8:	b940      	cbnz	r0, 808b3fc <_strtod_r+0x99c>
 808b3ea:	2200      	movs	r2, #0
 808b3ec:	4b97      	ldr	r3, [pc, #604]	; (808b64c <_strtod_r+0xbec>)
 808b3ee:	4630      	mov	r0, r6
 808b3f0:	4639      	mov	r1, r7
 808b3f2:	f7fd fbdb 	bl	8088bac <__aeabi_dmul>
 808b3f6:	4604      	mov	r4, r0
 808b3f8:	460d      	mov	r5, r1
 808b3fa:	e001      	b.n	808b400 <_strtod_r+0x9a0>
 808b3fc:	9c06      	ldr	r4, [sp, #24]
 808b3fe:	4d93      	ldr	r5, [pc, #588]	; (808b64c <_strtod_r+0xbec>)
 808b400:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808b404:	9414      	str	r4, [sp, #80]	; 0x50
 808b406:	9315      	str	r3, [sp, #84]	; 0x54
 808b408:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808b40c:	e014      	b.n	808b438 <_strtod_r+0x9d8>
 808b40e:	4b8f      	ldr	r3, [pc, #572]	; (808b64c <_strtod_r+0xbec>)
 808b410:	2200      	movs	r2, #0
 808b412:	4630      	mov	r0, r6
 808b414:	4639      	mov	r1, r7
 808b416:	f7fd fbc9 	bl	8088bac <__aeabi_dmul>
 808b41a:	9b06      	ldr	r3, [sp, #24]
 808b41c:	4604      	mov	r4, r0
 808b41e:	460d      	mov	r5, r1
 808b420:	b923      	cbnz	r3, 808b42c <_strtod_r+0x9cc>
 808b422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b426:	900e      	str	r0, [sp, #56]	; 0x38
 808b428:	930f      	str	r3, [sp, #60]	; 0x3c
 808b42a:	e003      	b.n	808b434 <_strtod_r+0x9d4>
 808b42c:	4602      	mov	r2, r0
 808b42e:	460b      	mov	r3, r1
 808b430:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808b434:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808b438:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b43c:	0d1b      	lsrs	r3, r3, #20
 808b43e:	051b      	lsls	r3, r3, #20
 808b440:	9307      	str	r3, [sp, #28]
 808b442:	9a07      	ldr	r2, [sp, #28]
 808b444:	4b82      	ldr	r3, [pc, #520]	; (808b650 <_strtod_r+0xbf0>)
 808b446:	429a      	cmp	r2, r3
 808b448:	d12b      	bne.n	808b4a2 <_strtod_r+0xa42>
 808b44a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808b44e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808b452:	4640      	mov	r0, r8
 808b454:	4649      	mov	r1, r9
 808b456:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808b45a:	f001 fa9b 	bl	808c994 <__ulp>
 808b45e:	4602      	mov	r2, r0
 808b460:	460b      	mov	r3, r1
 808b462:	4630      	mov	r0, r6
 808b464:	4639      	mov	r1, r7
 808b466:	f7fd fba1 	bl	8088bac <__aeabi_dmul>
 808b46a:	4642      	mov	r2, r8
 808b46c:	464b      	mov	r3, r9
 808b46e:	f7fd f9eb 	bl	8088848 <__adddf3>
 808b472:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808b476:	0d1b      	lsrs	r3, r3, #20
 808b478:	4a76      	ldr	r2, [pc, #472]	; (808b654 <_strtod_r+0xbf4>)
 808b47a:	051b      	lsls	r3, r3, #20
 808b47c:	4293      	cmp	r3, r2
 808b47e:	4680      	mov	r8, r0
 808b480:	d90c      	bls.n	808b49c <_strtod_r+0xa3c>
 808b482:	4b75      	ldr	r3, [pc, #468]	; (808b658 <_strtod_r+0xbf8>)
 808b484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808b486:	429a      	cmp	r2, r3
 808b488:	d103      	bne.n	808b492 <_strtod_r+0xa32>
 808b48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b48c:	3301      	adds	r3, #1
 808b48e:	f43f ad2d 	beq.w	808aeec <_strtod_r+0x48c>
 808b492:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808b658 <_strtod_r+0xbf8>
 808b496:	f04f 38ff 	mov.w	r8, #4294967295
 808b49a:	e072      	b.n	808b582 <_strtod_r+0xb22>
 808b49c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808b4a0:	e039      	b.n	808b516 <_strtod_r+0xab6>
 808b4a2:	9b03      	ldr	r3, [sp, #12]
 808b4a4:	b33b      	cbz	r3, 808b4f6 <_strtod_r+0xa96>
 808b4a6:	9b07      	ldr	r3, [sp, #28]
 808b4a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808b4ac:	d823      	bhi.n	808b4f6 <_strtod_r+0xa96>
 808b4ae:	a35e      	add	r3, pc, #376	; (adr r3, 808b628 <_strtod_r+0xbc8>)
 808b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b4b4:	4620      	mov	r0, r4
 808b4b6:	4629      	mov	r1, r5
 808b4b8:	f7fd fdf4 	bl	80890a4 <__aeabi_dcmple>
 808b4bc:	b1b8      	cbz	r0, 808b4ee <_strtod_r+0xa8e>
 808b4be:	4629      	mov	r1, r5
 808b4c0:	4620      	mov	r0, r4
 808b4c2:	f7fd fe35 	bl	8089130 <__aeabi_d2uiz>
 808b4c6:	2800      	cmp	r0, #0
 808b4c8:	bf08      	it	eq
 808b4ca:	2001      	moveq	r0, #1
 808b4cc:	f7fd faf8 	bl	8088ac0 <__aeabi_ui2d>
 808b4d0:	9b06      	ldr	r3, [sp, #24]
 808b4d2:	4604      	mov	r4, r0
 808b4d4:	460d      	mov	r5, r1
 808b4d6:	b923      	cbnz	r3, 808b4e2 <_strtod_r+0xa82>
 808b4d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b4dc:	9010      	str	r0, [sp, #64]	; 0x40
 808b4de:	9311      	str	r3, [sp, #68]	; 0x44
 808b4e0:	e003      	b.n	808b4ea <_strtod_r+0xa8a>
 808b4e2:	4602      	mov	r2, r0
 808b4e4:	460b      	mov	r3, r1
 808b4e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808b4ea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808b4ee:	9a07      	ldr	r2, [sp, #28]
 808b4f0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808b4f4:	1a9f      	subs	r7, r3, r2
 808b4f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808b4fa:	f001 fa4b 	bl	808c994 <__ulp>
 808b4fe:	4602      	mov	r2, r0
 808b500:	460b      	mov	r3, r1
 808b502:	4630      	mov	r0, r6
 808b504:	4639      	mov	r1, r7
 808b506:	f7fd fb51 	bl	8088bac <__aeabi_dmul>
 808b50a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808b50e:	f7fd f99b 	bl	8088848 <__adddf3>
 808b512:	4680      	mov	r8, r0
 808b514:	4689      	mov	r9, r1
 808b516:	9b03      	ldr	r3, [sp, #12]
 808b518:	bb9b      	cbnz	r3, 808b582 <_strtod_r+0xb22>
 808b51a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b51e:	0d1b      	lsrs	r3, r3, #20
 808b520:	9a07      	ldr	r2, [sp, #28]
 808b522:	051b      	lsls	r3, r3, #20
 808b524:	429a      	cmp	r2, r3
 808b526:	464e      	mov	r6, r9
 808b528:	d12b      	bne.n	808b582 <_strtod_r+0xb22>
 808b52a:	4629      	mov	r1, r5
 808b52c:	4620      	mov	r0, r4
 808b52e:	f7fd fdd7 	bl	80890e0 <__aeabi_d2iz>
 808b532:	f7fd fad5 	bl	8088ae0 <__aeabi_i2d>
 808b536:	460b      	mov	r3, r1
 808b538:	4602      	mov	r2, r0
 808b53a:	4629      	mov	r1, r5
 808b53c:	4620      	mov	r0, r4
 808b53e:	f7fd f981 	bl	8088844 <__aeabi_dsub>
 808b542:	9b06      	ldr	r3, [sp, #24]
 808b544:	4604      	mov	r4, r0
 808b546:	460d      	mov	r5, r1
 808b548:	b92b      	cbnz	r3, 808b556 <_strtod_r+0xaf6>
 808b54a:	f1b8 0f00 	cmp.w	r8, #0
 808b54e:	d102      	bne.n	808b556 <_strtod_r+0xaf6>
 808b550:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808b554:	b17e      	cbz	r6, 808b576 <_strtod_r+0xb16>
 808b556:	a336      	add	r3, pc, #216	; (adr r3, 808b630 <_strtod_r+0xbd0>)
 808b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b55c:	4620      	mov	r0, r4
 808b55e:	4629      	mov	r1, r5
 808b560:	f7fd fd96 	bl	8089090 <__aeabi_dcmplt>
 808b564:	bb88      	cbnz	r0, 808b5ca <_strtod_r+0xb6a>
 808b566:	a334      	add	r3, pc, #208	; (adr r3, 808b638 <_strtod_r+0xbd8>)
 808b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b56c:	4620      	mov	r0, r4
 808b56e:	4629      	mov	r1, r5
 808b570:	f7fd fdac 	bl	80890cc <__aeabi_dcmpgt>
 808b574:	e004      	b.n	808b580 <_strtod_r+0xb20>
 808b576:	a332      	add	r3, pc, #200	; (adr r3, 808b640 <_strtod_r+0xbe0>)
 808b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b57c:	f7fd fd88 	bl	8089090 <__aeabi_dcmplt>
 808b580:	bb18      	cbnz	r0, 808b5ca <_strtod_r+0xb6a>
 808b582:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b584:	4650      	mov	r0, sl
 808b586:	f000 ff74 	bl	808c472 <_Bfree>
 808b58a:	9904      	ldr	r1, [sp, #16]
 808b58c:	4650      	mov	r0, sl
 808b58e:	f000 ff70 	bl	808c472 <_Bfree>
 808b592:	9902      	ldr	r1, [sp, #8]
 808b594:	4650      	mov	r0, sl
 808b596:	f000 ff6c 	bl	808c472 <_Bfree>
 808b59a:	4659      	mov	r1, fp
 808b59c:	4650      	mov	r0, sl
 808b59e:	f000 ff68 	bl	808c472 <_Bfree>
 808b5a2:	e574      	b.n	808b08e <_strtod_r+0x62e>
 808b5a4:	9b03      	ldr	r3, [sp, #12]
 808b5a6:	b183      	cbz	r3, 808b5ca <_strtod_r+0xb6a>
 808b5a8:	4b2c      	ldr	r3, [pc, #176]	; (808b65c <_strtod_r+0xbfc>)
 808b5aa:	4640      	mov	r0, r8
 808b5ac:	930b      	str	r3, [sp, #44]	; 0x2c
 808b5ae:	2300      	movs	r3, #0
 808b5b0:	930a      	str	r3, [sp, #40]	; 0x28
 808b5b2:	4649      	mov	r1, r9
 808b5b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808b5b8:	f7fd faf8 	bl	8088bac <__aeabi_dmul>
 808b5bc:	4680      	mov	r8, r0
 808b5be:	4689      	mov	r9, r1
 808b5c0:	b919      	cbnz	r1, 808b5ca <_strtod_r+0xb6a>
 808b5c2:	b910      	cbnz	r0, 808b5ca <_strtod_r+0xb6a>
 808b5c4:	2322      	movs	r3, #34	; 0x22
 808b5c6:	f8ca 3000 	str.w	r3, [sl]
 808b5ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 808b5cc:	4650      	mov	r0, sl
 808b5ce:	f000 ff50 	bl	808c472 <_Bfree>
 808b5d2:	9904      	ldr	r1, [sp, #16]
 808b5d4:	4650      	mov	r0, sl
 808b5d6:	f000 ff4c 	bl	808c472 <_Bfree>
 808b5da:	9902      	ldr	r1, [sp, #8]
 808b5dc:	4650      	mov	r0, sl
 808b5de:	f000 ff48 	bl	808c472 <_Bfree>
 808b5e2:	9905      	ldr	r1, [sp, #20]
 808b5e4:	4650      	mov	r0, sl
 808b5e6:	f000 ff44 	bl	808c472 <_Bfree>
 808b5ea:	4659      	mov	r1, fp
 808b5ec:	4650      	mov	r0, sl
 808b5ee:	f000 ff40 	bl	808c472 <_Bfree>
 808b5f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808b5f4:	b113      	cbz	r3, 808b5fc <_strtod_r+0xb9c>
 808b5f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808b5f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808b5fa:	6013      	str	r3, [r2, #0]
 808b5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808b5fe:	b11b      	cbz	r3, 808b608 <_strtod_r+0xba8>
 808b600:	4642      	mov	r2, r8
 808b602:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808b606:	e007      	b.n	808b618 <_strtod_r+0xbb8>
 808b608:	4642      	mov	r2, r8
 808b60a:	464b      	mov	r3, r9
 808b60c:	e004      	b.n	808b618 <_strtod_r+0xbb8>
 808b60e:	2500      	movs	r5, #0
 808b610:	462a      	mov	r2, r5
 808b612:	2101      	movs	r1, #1
 808b614:	f7ff bb47 	b.w	808aca6 <_strtod_r+0x246>
 808b618:	4610      	mov	r0, r2
 808b61a:	4619      	mov	r1, r3
 808b61c:	b01d      	add	sp, #116	; 0x74
 808b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b622:	bf00      	nop
 808b624:	f3af 8000 	nop.w
 808b628:	ffc00000 	.word	0xffc00000
 808b62c:	41dfffff 	.word	0x41dfffff
 808b630:	94a03595 	.word	0x94a03595
 808b634:	3fdfffff 	.word	0x3fdfffff
 808b638:	35afe535 	.word	0x35afe535
 808b63c:	3fe00000 	.word	0x3fe00000
 808b640:	94a03595 	.word	0x94a03595
 808b644:	3fcfffff 	.word	0x3fcfffff
 808b648:	3ff00000 	.word	0x3ff00000
 808b64c:	3fe00000 	.word	0x3fe00000
 808b650:	7fe00000 	.word	0x7fe00000
 808b654:	7c9fffff 	.word	0x7c9fffff
 808b658:	7fefffff 	.word	0x7fefffff
 808b65c:	39500000 	.word	0x39500000

0808b660 <strtod>:
 808b660:	4b02      	ldr	r3, [pc, #8]	; (808b66c <strtod+0xc>)
 808b662:	460a      	mov	r2, r1
 808b664:	4601      	mov	r1, r0
 808b666:	6818      	ldr	r0, [r3, #0]
 808b668:	f7ff b9fa 	b.w	808aa60 <_strtod_r>
 808b66c:	200000b8 	.word	0x200000b8

0808b670 <_strtoul_r>:
 808b670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b674:	460e      	mov	r6, r1
 808b676:	4680      	mov	r8, r0
 808b678:	483b      	ldr	r0, [pc, #236]	; (808b768 <_strtoul_r+0xf8>)
 808b67a:	f8d0 9000 	ldr.w	r9, [r0]
 808b67e:	4635      	mov	r5, r6
 808b680:	f815 4b01 	ldrb.w	r4, [r5], #1
 808b684:	eb09 0004 	add.w	r0, r9, r4
 808b688:	7840      	ldrb	r0, [r0, #1]
 808b68a:	f000 0008 	and.w	r0, r0, #8
 808b68e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808b692:	b108      	cbz	r0, 808b698 <_strtoul_r+0x28>
 808b694:	462e      	mov	r6, r5
 808b696:	e7f2      	b.n	808b67e <_strtoul_r+0xe>
 808b698:	2c2d      	cmp	r4, #45	; 0x2d
 808b69a:	d103      	bne.n	808b6a4 <_strtoul_r+0x34>
 808b69c:	1cb5      	adds	r5, r6, #2
 808b69e:	7874      	ldrb	r4, [r6, #1]
 808b6a0:	2701      	movs	r7, #1
 808b6a2:	e003      	b.n	808b6ac <_strtoul_r+0x3c>
 808b6a4:	2c2b      	cmp	r4, #43	; 0x2b
 808b6a6:	bf04      	itt	eq
 808b6a8:	7874      	ldrbeq	r4, [r6, #1]
 808b6aa:	1cb5      	addeq	r5, r6, #2
 808b6ac:	b113      	cbz	r3, 808b6b4 <_strtoul_r+0x44>
 808b6ae:	2b10      	cmp	r3, #16
 808b6b0:	d10a      	bne.n	808b6c8 <_strtoul_r+0x58>
 808b6b2:	e053      	b.n	808b75c <_strtoul_r+0xec>
 808b6b4:	2c30      	cmp	r4, #48	; 0x30
 808b6b6:	d14f      	bne.n	808b758 <_strtoul_r+0xe8>
 808b6b8:	7828      	ldrb	r0, [r5, #0]
 808b6ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808b6be:	2858      	cmp	r0, #88	; 0x58
 808b6c0:	d145      	bne.n	808b74e <_strtoul_r+0xde>
 808b6c2:	786c      	ldrb	r4, [r5, #1]
 808b6c4:	2310      	movs	r3, #16
 808b6c6:	3502      	adds	r5, #2
 808b6c8:	f04f 3cff 	mov.w	ip, #4294967295
 808b6cc:	fbbc fcf3 	udiv	ip, ip, r3
 808b6d0:	fb03 fa0c 	mul.w	sl, r3, ip
 808b6d4:	2600      	movs	r6, #0
 808b6d6:	ea6f 0a0a 	mvn.w	sl, sl
 808b6da:	4630      	mov	r0, r6
 808b6dc:	eb09 0e04 	add.w	lr, r9, r4
 808b6e0:	f89e e001 	ldrb.w	lr, [lr, #1]
 808b6e4:	f01e 0f04 	tst.w	lr, #4
 808b6e8:	d001      	beq.n	808b6ee <_strtoul_r+0x7e>
 808b6ea:	3c30      	subs	r4, #48	; 0x30
 808b6ec:	e00b      	b.n	808b706 <_strtoul_r+0x96>
 808b6ee:	f01e 0e03 	ands.w	lr, lr, #3
 808b6f2:	d01a      	beq.n	808b72a <_strtoul_r+0xba>
 808b6f4:	f1be 0f01 	cmp.w	lr, #1
 808b6f8:	bf0c      	ite	eq
 808b6fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808b6fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808b702:	ebce 0404 	rsb	r4, lr, r4
 808b706:	42a3      	cmp	r3, r4
 808b708:	dd0f      	ble.n	808b72a <_strtoul_r+0xba>
 808b70a:	2e00      	cmp	r6, #0
 808b70c:	db08      	blt.n	808b720 <_strtoul_r+0xb0>
 808b70e:	4560      	cmp	r0, ip
 808b710:	d806      	bhi.n	808b720 <_strtoul_r+0xb0>
 808b712:	d101      	bne.n	808b718 <_strtoul_r+0xa8>
 808b714:	4554      	cmp	r4, sl
 808b716:	dc03      	bgt.n	808b720 <_strtoul_r+0xb0>
 808b718:	fb03 4000 	mla	r0, r3, r0, r4
 808b71c:	2601      	movs	r6, #1
 808b71e:	e001      	b.n	808b724 <_strtoul_r+0xb4>
 808b720:	f04f 36ff 	mov.w	r6, #4294967295
 808b724:	f815 4b01 	ldrb.w	r4, [r5], #1
 808b728:	e7d8      	b.n	808b6dc <_strtoul_r+0x6c>
 808b72a:	2e00      	cmp	r6, #0
 808b72c:	da07      	bge.n	808b73e <_strtoul_r+0xce>
 808b72e:	2322      	movs	r3, #34	; 0x22
 808b730:	f8c8 3000 	str.w	r3, [r8]
 808b734:	f04f 30ff 	mov.w	r0, #4294967295
 808b738:	b92a      	cbnz	r2, 808b746 <_strtoul_r+0xd6>
 808b73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b73e:	b107      	cbz	r7, 808b742 <_strtoul_r+0xd2>
 808b740:	4240      	negs	r0, r0
 808b742:	b172      	cbz	r2, 808b762 <_strtoul_r+0xf2>
 808b744:	b106      	cbz	r6, 808b748 <_strtoul_r+0xd8>
 808b746:	1e69      	subs	r1, r5, #1
 808b748:	6011      	str	r1, [r2, #0]
 808b74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b74e:	2430      	movs	r4, #48	; 0x30
 808b750:	2b00      	cmp	r3, #0
 808b752:	d1b9      	bne.n	808b6c8 <_strtoul_r+0x58>
 808b754:	2308      	movs	r3, #8
 808b756:	e7b7      	b.n	808b6c8 <_strtoul_r+0x58>
 808b758:	230a      	movs	r3, #10
 808b75a:	e7b5      	b.n	808b6c8 <_strtoul_r+0x58>
 808b75c:	2c30      	cmp	r4, #48	; 0x30
 808b75e:	d0ab      	beq.n	808b6b8 <_strtoul_r+0x48>
 808b760:	e7b2      	b.n	808b6c8 <_strtoul_r+0x58>
 808b762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b766:	bf00      	nop
 808b768:	20000054 	.word	0x20000054

0808b76c <strtoul>:
 808b76c:	4613      	mov	r3, r2
 808b76e:	460a      	mov	r2, r1
 808b770:	4601      	mov	r1, r0
 808b772:	4802      	ldr	r0, [pc, #8]	; (808b77c <strtoul+0x10>)
 808b774:	6800      	ldr	r0, [r0, #0]
 808b776:	f7ff bf7b 	b.w	808b670 <_strtoul_r>
 808b77a:	bf00      	nop
 808b77c:	200000b8 	.word	0x200000b8

0808b780 <__get_current_time_locale>:
 808b780:	4b04      	ldr	r3, [pc, #16]	; (808b794 <__get_current_time_locale+0x14>)
 808b782:	4a05      	ldr	r2, [pc, #20]	; (808b798 <__get_current_time_locale+0x18>)
 808b784:	6818      	ldr	r0, [r3, #0]
 808b786:	4b05      	ldr	r3, [pc, #20]	; (808b79c <__get_current_time_locale+0x1c>)
 808b788:	2800      	cmp	r0, #0
 808b78a:	bf14      	ite	ne
 808b78c:	4610      	movne	r0, r2
 808b78e:	4618      	moveq	r0, r3
 808b790:	4770      	bx	lr
 808b792:	bf00      	nop
 808b794:	20000f90 	.word	0x20000f90
 808b798:	20000f94 	.word	0x20000f94
 808b79c:	0808e040 	.word	0x0808e040

0808b7a0 <__tzcalc_limits>:
 808b7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b7a4:	4604      	mov	r4, r0
 808b7a6:	f000 fd91 	bl	808c2cc <__gettzinfo>
 808b7aa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808b7ae:	429c      	cmp	r4, r3
 808b7b0:	f340 8096 	ble.w	808b8e0 <__tzcalc_limits+0x140>
 808b7b4:	f240 156d 	movw	r5, #365	; 0x16d
 808b7b8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808b7bc:	18e3      	adds	r3, r4, r3
 808b7be:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808b7c2:	109b      	asrs	r3, r3, #2
 808b7c4:	fb05 3502 	mla	r5, r5, r2, r3
 808b7c8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808b7cc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808b7d0:	fb92 f3f3 	sdiv	r3, r2, r3
 808b7d4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808b7d8:	442b      	add	r3, r5
 808b7da:	18a5      	adds	r5, r4, r2
 808b7dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808b7e0:	fb94 f7f2 	sdiv	r7, r4, r2
 808b7e4:	fb95 f5f2 	sdiv	r5, r5, r2
 808b7e8:	fb02 4717 	mls	r7, r2, r7, r4
 808b7ec:	441d      	add	r5, r3
 808b7ee:	2364      	movs	r3, #100	; 0x64
 808b7f0:	fb94 f6f3 	sdiv	r6, r4, r3
 808b7f4:	fab7 fe87 	clz	lr, r7
 808b7f8:	4601      	mov	r1, r0
 808b7fa:	fb03 4616 	mls	r6, r3, r6, r4
 808b7fe:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808b802:	9301      	str	r3, [sp, #4]
 808b804:	f004 0303 	and.w	r3, r4, #3
 808b808:	6044      	str	r4, [r0, #4]
 808b80a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808b80e:	9300      	str	r3, [sp, #0]
 808b810:	f04f 0c07 	mov.w	ip, #7
 808b814:	7a0b      	ldrb	r3, [r1, #8]
 808b816:	2b4a      	cmp	r3, #74	; 0x4a
 808b818:	d10e      	bne.n	808b838 <__tzcalc_limits+0x98>
 808b81a:	694b      	ldr	r3, [r1, #20]
 808b81c:	9a00      	ldr	r2, [sp, #0]
 808b81e:	18ec      	adds	r4, r5, r3
 808b820:	b902      	cbnz	r2, 808b824 <__tzcalc_limits+0x84>
 808b822:	b906      	cbnz	r6, 808b826 <__tzcalc_limits+0x86>
 808b824:	b927      	cbnz	r7, 808b830 <__tzcalc_limits+0x90>
 808b826:	2b3b      	cmp	r3, #59	; 0x3b
 808b828:	bfd4      	ite	le
 808b82a:	2300      	movle	r3, #0
 808b82c:	2301      	movgt	r3, #1
 808b82e:	e000      	b.n	808b832 <__tzcalc_limits+0x92>
 808b830:	2300      	movs	r3, #0
 808b832:	4423      	add	r3, r4
 808b834:	3b01      	subs	r3, #1
 808b836:	e03f      	b.n	808b8b8 <__tzcalc_limits+0x118>
 808b838:	2b44      	cmp	r3, #68	; 0x44
 808b83a:	d102      	bne.n	808b842 <__tzcalc_limits+0xa2>
 808b83c:	694b      	ldr	r3, [r1, #20]
 808b83e:	442b      	add	r3, r5
 808b840:	e03a      	b.n	808b8b8 <__tzcalc_limits+0x118>
 808b842:	9b00      	ldr	r3, [sp, #0]
 808b844:	b92b      	cbnz	r3, 808b852 <__tzcalc_limits+0xb2>
 808b846:	2e00      	cmp	r6, #0
 808b848:	bf0c      	ite	eq
 808b84a:	46f0      	moveq	r8, lr
 808b84c:	f04f 0801 	movne.w	r8, #1
 808b850:	e000      	b.n	808b854 <__tzcalc_limits+0xb4>
 808b852:	46f0      	mov	r8, lr
 808b854:	46a9      	mov	r9, r5
 808b856:	4b24      	ldr	r3, [pc, #144]	; (808b8e8 <__tzcalc_limits+0x148>)
 808b858:	2230      	movs	r2, #48	; 0x30
 808b85a:	fb02 3808 	mla	r8, r2, r8, r3
 808b85e:	68cc      	ldr	r4, [r1, #12]
 808b860:	f1a8 0a04 	sub.w	sl, r8, #4
 808b864:	2301      	movs	r3, #1
 808b866:	42a3      	cmp	r3, r4
 808b868:	da04      	bge.n	808b874 <__tzcalc_limits+0xd4>
 808b86a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808b86e:	3301      	adds	r3, #1
 808b870:	44d9      	add	r9, fp
 808b872:	e7f8      	b.n	808b866 <__tzcalc_limits+0xc6>
 808b874:	f109 0304 	add.w	r3, r9, #4
 808b878:	fb93 fbfc 	sdiv	fp, r3, ip
 808b87c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808b880:	ebca 0a03 	rsb	sl, sl, r3
 808b884:	694b      	ldr	r3, [r1, #20]
 808b886:	2c01      	cmp	r4, #1
 808b888:	bfb8      	it	lt
 808b88a:	2401      	movlt	r4, #1
 808b88c:	ebb3 0a0a 	subs.w	sl, r3, sl
 808b890:	690b      	ldr	r3, [r1, #16]
 808b892:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808b896:	f103 33ff 	add.w	r3, r3, #4294967295
 808b89a:	f104 34ff 	add.w	r4, r4, #4294967295
 808b89e:	bf48      	it	mi
 808b8a0:	f10a 0a07 	addmi.w	sl, sl, #7
 808b8a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808b8a8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808b8ac:	4453      	add	r3, sl
 808b8ae:	42a3      	cmp	r3, r4
 808b8b0:	db01      	blt.n	808b8b6 <__tzcalc_limits+0x116>
 808b8b2:	3b07      	subs	r3, #7
 808b8b4:	e7fb      	b.n	808b8ae <__tzcalc_limits+0x10e>
 808b8b6:	444b      	add	r3, r9
 808b8b8:	698c      	ldr	r4, [r1, #24]
 808b8ba:	4a0c      	ldr	r2, [pc, #48]	; (808b8ec <__tzcalc_limits+0x14c>)
 808b8bc:	fb02 4303 	mla	r3, r2, r3, r4
 808b8c0:	6a0c      	ldr	r4, [r1, #32]
 808b8c2:	4423      	add	r3, r4
 808b8c4:	f841 3f1c 	str.w	r3, [r1, #28]!
 808b8c8:	9b01      	ldr	r3, [sp, #4]
 808b8ca:	4299      	cmp	r1, r3
 808b8cc:	d1a2      	bne.n	808b814 <__tzcalc_limits+0x74>
 808b8ce:	69c3      	ldr	r3, [r0, #28]
 808b8d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808b8d2:	4293      	cmp	r3, r2
 808b8d4:	bfac      	ite	ge
 808b8d6:	2300      	movge	r3, #0
 808b8d8:	2301      	movlt	r3, #1
 808b8da:	6003      	str	r3, [r0, #0]
 808b8dc:	2001      	movs	r0, #1
 808b8de:	e000      	b.n	808b8e2 <__tzcalc_limits+0x142>
 808b8e0:	2000      	movs	r0, #0
 808b8e2:	b003      	add	sp, #12
 808b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b8e8:	0808ddfc 	.word	0x0808ddfc
 808b8ec:	00015180 	.word	0x00015180

0808b8f0 <__tz_lock>:
 808b8f0:	4770      	bx	lr

0808b8f2 <__tz_unlock>:
 808b8f2:	4770      	bx	lr

0808b8f4 <_tzset_unlocked>:
 808b8f4:	4b01      	ldr	r3, [pc, #4]	; (808b8fc <_tzset_unlocked+0x8>)
 808b8f6:	6818      	ldr	r0, [r3, #0]
 808b8f8:	f000 b802 	b.w	808b900 <_tzset_unlocked_r>
 808b8fc:	200000b8 	.word	0x200000b8

0808b900 <_tzset_unlocked_r>:
 808b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b904:	b08d      	sub	sp, #52	; 0x34
 808b906:	4607      	mov	r7, r0
 808b908:	f000 fce0 	bl	808c2cc <__gettzinfo>
 808b90c:	49b0      	ldr	r1, [pc, #704]	; (808bbd0 <_tzset_unlocked_r+0x2d0>)
 808b90e:	4604      	mov	r4, r0
 808b910:	4638      	mov	r0, r7
 808b912:	f000 fcd3 	bl	808c2bc <_getenv_r>
 808b916:	4eaf      	ldr	r6, [pc, #700]	; (808bbd4 <_tzset_unlocked_r+0x2d4>)
 808b918:	4605      	mov	r5, r0
 808b91a:	b960      	cbnz	r0, 808b936 <_tzset_unlocked_r+0x36>
 808b91c:	4bae      	ldr	r3, [pc, #696]	; (808bbd8 <_tzset_unlocked_r+0x2d8>)
 808b91e:	4aaf      	ldr	r2, [pc, #700]	; (808bbdc <_tzset_unlocked_r+0x2dc>)
 808b920:	6018      	str	r0, [r3, #0]
 808b922:	4baf      	ldr	r3, [pc, #700]	; (808bbe0 <_tzset_unlocked_r+0x2e0>)
 808b924:	6018      	str	r0, [r3, #0]
 808b926:	4baf      	ldr	r3, [pc, #700]	; (808bbe4 <_tzset_unlocked_r+0x2e4>)
 808b928:	6830      	ldr	r0, [r6, #0]
 808b92a:	601a      	str	r2, [r3, #0]
 808b92c:	605a      	str	r2, [r3, #4]
 808b92e:	f7f9 ffc3 	bl	80858b8 <free>
 808b932:	6035      	str	r5, [r6, #0]
 808b934:	e148      	b.n	808bbc8 <_tzset_unlocked_r+0x2c8>
 808b936:	6831      	ldr	r1, [r6, #0]
 808b938:	b979      	cbnz	r1, 808b95a <_tzset_unlocked_r+0x5a>
 808b93a:	6830      	ldr	r0, [r6, #0]
 808b93c:	f7f9 ffbc 	bl	80858b8 <free>
 808b940:	4628      	mov	r0, r5
 808b942:	f7ff f821 	bl	808a988 <strlen>
 808b946:	1c41      	adds	r1, r0, #1
 808b948:	4638      	mov	r0, r7
 808b94a:	f7f9 fffd 	bl	8085948 <_malloc_r>
 808b94e:	6030      	str	r0, [r6, #0]
 808b950:	b148      	cbz	r0, 808b966 <_tzset_unlocked_r+0x66>
 808b952:	4629      	mov	r1, r5
 808b954:	f7fe fae0 	bl	8089f18 <strcpy>
 808b958:	e005      	b.n	808b966 <_tzset_unlocked_r+0x66>
 808b95a:	f7fe fad3 	bl	8089f04 <strcmp>
 808b95e:	2800      	cmp	r0, #0
 808b960:	f000 8132 	beq.w	808bbc8 <_tzset_unlocked_r+0x2c8>
 808b964:	e7e9      	b.n	808b93a <_tzset_unlocked_r+0x3a>
 808b966:	782b      	ldrb	r3, [r5, #0]
 808b968:	ae0a      	add	r6, sp, #40	; 0x28
 808b96a:	2b3a      	cmp	r3, #58	; 0x3a
 808b96c:	bf08      	it	eq
 808b96e:	3501      	addeq	r5, #1
 808b970:	4633      	mov	r3, r6
 808b972:	4a9d      	ldr	r2, [pc, #628]	; (808bbe8 <_tzset_unlocked_r+0x2e8>)
 808b974:	499d      	ldr	r1, [pc, #628]	; (808bbec <_tzset_unlocked_r+0x2ec>)
 808b976:	4628      	mov	r0, r5
 808b978:	f7f9 ffbe 	bl	80858f8 <siscanf>
 808b97c:	2800      	cmp	r0, #0
 808b97e:	f340 8123 	ble.w	808bbc8 <_tzset_unlocked_r+0x2c8>
 808b982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b984:	18ef      	adds	r7, r5, r3
 808b986:	5ceb      	ldrb	r3, [r5, r3]
 808b988:	2b2d      	cmp	r3, #45	; 0x2d
 808b98a:	d103      	bne.n	808b994 <_tzset_unlocked_r+0x94>
 808b98c:	3701      	adds	r7, #1
 808b98e:	f04f 35ff 	mov.w	r5, #4294967295
 808b992:	e003      	b.n	808b99c <_tzset_unlocked_r+0x9c>
 808b994:	2b2b      	cmp	r3, #43	; 0x2b
 808b996:	bf08      	it	eq
 808b998:	3701      	addeq	r7, #1
 808b99a:	2501      	movs	r5, #1
 808b99c:	f10d 0a20 	add.w	sl, sp, #32
 808b9a0:	f10d 0b1e 	add.w	fp, sp, #30
 808b9a4:	f04f 0800 	mov.w	r8, #0
 808b9a8:	9603      	str	r6, [sp, #12]
 808b9aa:	f8cd a008 	str.w	sl, [sp, #8]
 808b9ae:	9601      	str	r6, [sp, #4]
 808b9b0:	f8cd b000 	str.w	fp, [sp]
 808b9b4:	4633      	mov	r3, r6
 808b9b6:	aa07      	add	r2, sp, #28
 808b9b8:	498d      	ldr	r1, [pc, #564]	; (808bbf0 <_tzset_unlocked_r+0x2f0>)
 808b9ba:	4638      	mov	r0, r7
 808b9bc:	f8ad 801e 	strh.w	r8, [sp, #30]
 808b9c0:	f8ad 8020 	strh.w	r8, [sp, #32]
 808b9c4:	f7f9 ff98 	bl	80858f8 <siscanf>
 808b9c8:	4540      	cmp	r0, r8
 808b9ca:	f340 80fd 	ble.w	808bbc8 <_tzset_unlocked_r+0x2c8>
 808b9ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808b9d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808b9d6:	213c      	movs	r1, #60	; 0x3c
 808b9d8:	fb01 3302 	mla	r3, r1, r2, r3
 808b9dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808b9e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808b9e4:	fb01 3302 	mla	r3, r1, r2, r3
 808b9e8:	435d      	muls	r5, r3
 808b9ea:	4b7f      	ldr	r3, [pc, #508]	; (808bbe8 <_tzset_unlocked_r+0x2e8>)
 808b9ec:	6225      	str	r5, [r4, #32]
 808b9ee:	4d7d      	ldr	r5, [pc, #500]	; (808bbe4 <_tzset_unlocked_r+0x2e4>)
 808b9f0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808bbfc <_tzset_unlocked_r+0x2fc>
 808b9f4:	602b      	str	r3, [r5, #0]
 808b9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b9f8:	464a      	mov	r2, r9
 808b9fa:	441f      	add	r7, r3
 808b9fc:	497b      	ldr	r1, [pc, #492]	; (808bbec <_tzset_unlocked_r+0x2ec>)
 808b9fe:	4633      	mov	r3, r6
 808ba00:	4638      	mov	r0, r7
 808ba02:	f7f9 ff79 	bl	80858f8 <siscanf>
 808ba06:	4540      	cmp	r0, r8
 808ba08:	dc08      	bgt.n	808ba1c <_tzset_unlocked_r+0x11c>
 808ba0a:	682b      	ldr	r3, [r5, #0]
 808ba0c:	6a22      	ldr	r2, [r4, #32]
 808ba0e:	606b      	str	r3, [r5, #4]
 808ba10:	4b71      	ldr	r3, [pc, #452]	; (808bbd8 <_tzset_unlocked_r+0x2d8>)
 808ba12:	601a      	str	r2, [r3, #0]
 808ba14:	4b72      	ldr	r3, [pc, #456]	; (808bbe0 <_tzset_unlocked_r+0x2e0>)
 808ba16:	f8c3 8000 	str.w	r8, [r3]
 808ba1a:	e0d5      	b.n	808bbc8 <_tzset_unlocked_r+0x2c8>
 808ba1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ba1e:	f8c5 9004 	str.w	r9, [r5, #4]
 808ba22:	18fd      	adds	r5, r7, r3
 808ba24:	5cfb      	ldrb	r3, [r7, r3]
 808ba26:	2b2d      	cmp	r3, #45	; 0x2d
 808ba28:	d103      	bne.n	808ba32 <_tzset_unlocked_r+0x132>
 808ba2a:	3501      	adds	r5, #1
 808ba2c:	f04f 37ff 	mov.w	r7, #4294967295
 808ba30:	e003      	b.n	808ba3a <_tzset_unlocked_r+0x13a>
 808ba32:	2b2b      	cmp	r3, #43	; 0x2b
 808ba34:	bf08      	it	eq
 808ba36:	3501      	addeq	r5, #1
 808ba38:	2701      	movs	r7, #1
 808ba3a:	2300      	movs	r3, #0
 808ba3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 808ba40:	f8ad 301e 	strh.w	r3, [sp, #30]
 808ba44:	f8ad 3020 	strh.w	r3, [sp, #32]
 808ba48:	930a      	str	r3, [sp, #40]	; 0x28
 808ba4a:	9603      	str	r6, [sp, #12]
 808ba4c:	f8cd a008 	str.w	sl, [sp, #8]
 808ba50:	9601      	str	r6, [sp, #4]
 808ba52:	f8cd b000 	str.w	fp, [sp]
 808ba56:	4633      	mov	r3, r6
 808ba58:	aa07      	add	r2, sp, #28
 808ba5a:	4965      	ldr	r1, [pc, #404]	; (808bbf0 <_tzset_unlocked_r+0x2f0>)
 808ba5c:	4628      	mov	r0, r5
 808ba5e:	f7f9 ff4b 	bl	80858f8 <siscanf>
 808ba62:	2800      	cmp	r0, #0
 808ba64:	dc04      	bgt.n	808ba70 <_tzset_unlocked_r+0x170>
 808ba66:	6a23      	ldr	r3, [r4, #32]
 808ba68:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808ba6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808ba6e:	e00e      	b.n	808ba8e <_tzset_unlocked_r+0x18e>
 808ba70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808ba74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808ba78:	213c      	movs	r1, #60	; 0x3c
 808ba7a:	fb01 3302 	mla	r3, r1, r2, r3
 808ba7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808ba82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808ba86:	fb01 3302 	mla	r3, r1, r2, r3
 808ba8a:	435f      	muls	r7, r3
 808ba8c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808ba8e:	4627      	mov	r7, r4
 808ba90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ba92:	f04f 0900 	mov.w	r9, #0
 808ba96:	441d      	add	r5, r3
 808ba98:	782b      	ldrb	r3, [r5, #0]
 808ba9a:	2b2c      	cmp	r3, #44	; 0x2c
 808ba9c:	bf08      	it	eq
 808ba9e:	3501      	addeq	r5, #1
 808baa0:	f895 8000 	ldrb.w	r8, [r5]
 808baa4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808baa8:	d126      	bne.n	808baf8 <_tzset_unlocked_r+0x1f8>
 808baaa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808baae:	9302      	str	r3, [sp, #8]
 808bab0:	ab09      	add	r3, sp, #36	; 0x24
 808bab2:	9300      	str	r3, [sp, #0]
 808bab4:	9603      	str	r6, [sp, #12]
 808bab6:	9601      	str	r6, [sp, #4]
 808bab8:	4633      	mov	r3, r6
 808baba:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808babe:	494d      	ldr	r1, [pc, #308]	; (808bbf4 <_tzset_unlocked_r+0x2f4>)
 808bac0:	4628      	mov	r0, r5
 808bac2:	f7f9 ff19 	bl	80858f8 <siscanf>
 808bac6:	2803      	cmp	r0, #3
 808bac8:	d17e      	bne.n	808bbc8 <_tzset_unlocked_r+0x2c8>
 808baca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808bace:	1e4b      	subs	r3, r1, #1
 808bad0:	2b0b      	cmp	r3, #11
 808bad2:	d879      	bhi.n	808bbc8 <_tzset_unlocked_r+0x2c8>
 808bad4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808bad8:	1e53      	subs	r3, r2, #1
 808bada:	2b04      	cmp	r3, #4
 808badc:	d874      	bhi.n	808bbc8 <_tzset_unlocked_r+0x2c8>
 808bade:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808bae2:	2b06      	cmp	r3, #6
 808bae4:	d870      	bhi.n	808bbc8 <_tzset_unlocked_r+0x2c8>
 808bae6:	f887 8008 	strb.w	r8, [r7, #8]
 808baea:	60f9      	str	r1, [r7, #12]
 808baec:	613a      	str	r2, [r7, #16]
 808baee:	617b      	str	r3, [r7, #20]
 808baf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808baf2:	eb05 0803 	add.w	r8, r5, r3
 808baf6:	e02a      	b.n	808bb4e <_tzset_unlocked_r+0x24e>
 808baf8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808bafc:	bf06      	itte	eq
 808bafe:	4643      	moveq	r3, r8
 808bb00:	3501      	addeq	r5, #1
 808bb02:	2344      	movne	r3, #68	; 0x44
 808bb04:	220a      	movs	r2, #10
 808bb06:	a90b      	add	r1, sp, #44	; 0x2c
 808bb08:	4628      	mov	r0, r5
 808bb0a:	9305      	str	r3, [sp, #20]
 808bb0c:	f7ff fe2e 	bl	808b76c <strtoul>
 808bb10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808bb14:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808bb18:	4545      	cmp	r5, r8
 808bb1a:	9b05      	ldr	r3, [sp, #20]
 808bb1c:	d114      	bne.n	808bb48 <_tzset_unlocked_r+0x248>
 808bb1e:	234d      	movs	r3, #77	; 0x4d
 808bb20:	f1b9 0f00 	cmp.w	r9, #0
 808bb24:	d107      	bne.n	808bb36 <_tzset_unlocked_r+0x236>
 808bb26:	7223      	strb	r3, [r4, #8]
 808bb28:	2303      	movs	r3, #3
 808bb2a:	60e3      	str	r3, [r4, #12]
 808bb2c:	2302      	movs	r3, #2
 808bb2e:	6123      	str	r3, [r4, #16]
 808bb30:	f8c4 9014 	str.w	r9, [r4, #20]
 808bb34:	e00b      	b.n	808bb4e <_tzset_unlocked_r+0x24e>
 808bb36:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808bb3a:	230b      	movs	r3, #11
 808bb3c:	62a3      	str	r3, [r4, #40]	; 0x28
 808bb3e:	2301      	movs	r3, #1
 808bb40:	62e3      	str	r3, [r4, #44]	; 0x2c
 808bb42:	2300      	movs	r3, #0
 808bb44:	6323      	str	r3, [r4, #48]	; 0x30
 808bb46:	e002      	b.n	808bb4e <_tzset_unlocked_r+0x24e>
 808bb48:	b280      	uxth	r0, r0
 808bb4a:	723b      	strb	r3, [r7, #8]
 808bb4c:	6178      	str	r0, [r7, #20]
 808bb4e:	2302      	movs	r3, #2
 808bb50:	f8ad 301c 	strh.w	r3, [sp, #28]
 808bb54:	2300      	movs	r3, #0
 808bb56:	f8ad 301e 	strh.w	r3, [sp, #30]
 808bb5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808bb5e:	930a      	str	r3, [sp, #40]	; 0x28
 808bb60:	f898 3000 	ldrb.w	r3, [r8]
 808bb64:	2b2f      	cmp	r3, #47	; 0x2f
 808bb66:	d10b      	bne.n	808bb80 <_tzset_unlocked_r+0x280>
 808bb68:	9603      	str	r6, [sp, #12]
 808bb6a:	f8cd a008 	str.w	sl, [sp, #8]
 808bb6e:	9601      	str	r6, [sp, #4]
 808bb70:	f8cd b000 	str.w	fp, [sp]
 808bb74:	4633      	mov	r3, r6
 808bb76:	aa07      	add	r2, sp, #28
 808bb78:	491f      	ldr	r1, [pc, #124]	; (808bbf8 <_tzset_unlocked_r+0x2f8>)
 808bb7a:	4640      	mov	r0, r8
 808bb7c:	f7f9 febc 	bl	80858f8 <siscanf>
 808bb80:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808bb84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808bb88:	213c      	movs	r1, #60	; 0x3c
 808bb8a:	fb01 3302 	mla	r3, r1, r2, r3
 808bb8e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808bb92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808bb96:	fb01 3302 	mla	r3, r1, r2, r3
 808bb9a:	61bb      	str	r3, [r7, #24]
 808bb9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808bb9e:	f109 0901 	add.w	r9, r9, #1
 808bba2:	f1b9 0f02 	cmp.w	r9, #2
 808bba6:	4445      	add	r5, r8
 808bba8:	f107 071c 	add.w	r7, r7, #28
 808bbac:	f47f af74 	bne.w	808ba98 <_tzset_unlocked_r+0x198>
 808bbb0:	6860      	ldr	r0, [r4, #4]
 808bbb2:	f7ff fdf5 	bl	808b7a0 <__tzcalc_limits>
 808bbb6:	6a22      	ldr	r2, [r4, #32]
 808bbb8:	4b07      	ldr	r3, [pc, #28]	; (808bbd8 <_tzset_unlocked_r+0x2d8>)
 808bbba:	601a      	str	r2, [r3, #0]
 808bbbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808bbbe:	1a9b      	subs	r3, r3, r2
 808bbc0:	4a07      	ldr	r2, [pc, #28]	; (808bbe0 <_tzset_unlocked_r+0x2e0>)
 808bbc2:	bf18      	it	ne
 808bbc4:	2301      	movne	r3, #1
 808bbc6:	6013      	str	r3, [r2, #0]
 808bbc8:	b00d      	add	sp, #52	; 0x34
 808bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bbce:	bf00      	nop
 808bbd0:	0808e13c 	.word	0x0808e13c
 808bbd4:	200010a8 	.word	0x200010a8
 808bbd8:	200010b0 	.word	0x200010b0
 808bbdc:	0808e13f 	.word	0x0808e13f
 808bbe0:	200010ac 	.word	0x200010ac
 808bbe4:	200000f4 	.word	0x200000f4
 808bbe8:	2000109b 	.word	0x2000109b
 808bbec:	0808e143 	.word	0x0808e143
 808bbf0:	0808e166 	.word	0x0808e166
 808bbf4:	0808e152 	.word	0x0808e152
 808bbf8:	0808e165 	.word	0x0808e165
 808bbfc:	20001090 	.word	0x20001090

0808bc00 <abs>:
 808bc00:	2800      	cmp	r0, #0
 808bc02:	bfb8      	it	lt
 808bc04:	4240      	neglt	r0, r0
 808bc06:	4770      	bx	lr

0808bc08 <rshift>:
 808bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bc0a:	6906      	ldr	r6, [r0, #16]
 808bc0c:	114b      	asrs	r3, r1, #5
 808bc0e:	42b3      	cmp	r3, r6
 808bc10:	f100 0514 	add.w	r5, r0, #20
 808bc14:	da27      	bge.n	808bc66 <rshift+0x5e>
 808bc16:	f011 011f 	ands.w	r1, r1, #31
 808bc1a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808bc1e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808bc22:	d101      	bne.n	808bc28 <rshift+0x20>
 808bc24:	4629      	mov	r1, r5
 808bc26:	e016      	b.n	808bc56 <rshift+0x4e>
 808bc28:	1d14      	adds	r4, r2, #4
 808bc2a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808bc2e:	462b      	mov	r3, r5
 808bc30:	f1c1 0e20 	rsb	lr, r1, #32
 808bc34:	40ca      	lsrs	r2, r1
 808bc36:	42b4      	cmp	r4, r6
 808bc38:	d209      	bcs.n	808bc4e <rshift+0x46>
 808bc3a:	6827      	ldr	r7, [r4, #0]
 808bc3c:	fa07 f70e 	lsl.w	r7, r7, lr
 808bc40:	433a      	orrs	r2, r7
 808bc42:	f843 2b04 	str.w	r2, [r3], #4
 808bc46:	f854 2b04 	ldr.w	r2, [r4], #4
 808bc4a:	40ca      	lsrs	r2, r1
 808bc4c:	e7f3      	b.n	808bc36 <rshift+0x2e>
 808bc4e:	601a      	str	r2, [r3, #0]
 808bc50:	b152      	cbz	r2, 808bc68 <rshift+0x60>
 808bc52:	3304      	adds	r3, #4
 808bc54:	e008      	b.n	808bc68 <rshift+0x60>
 808bc56:	42b2      	cmp	r2, r6
 808bc58:	460b      	mov	r3, r1
 808bc5a:	d205      	bcs.n	808bc68 <rshift+0x60>
 808bc5c:	f852 3b04 	ldr.w	r3, [r2], #4
 808bc60:	f841 3b04 	str.w	r3, [r1], #4
 808bc64:	e7f7      	b.n	808bc56 <rshift+0x4e>
 808bc66:	462b      	mov	r3, r5
 808bc68:	1b5b      	subs	r3, r3, r5
 808bc6a:	109b      	asrs	r3, r3, #2
 808bc6c:	6103      	str	r3, [r0, #16]
 808bc6e:	b903      	cbnz	r3, 808bc72 <rshift+0x6a>
 808bc70:	6143      	str	r3, [r0, #20]
 808bc72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bc74 <__hexdig_fun>:
 808bc74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808bc78:	2b09      	cmp	r3, #9
 808bc7a:	d801      	bhi.n	808bc80 <__hexdig_fun+0xc>
 808bc7c:	3820      	subs	r0, #32
 808bc7e:	e00a      	b.n	808bc96 <__hexdig_fun+0x22>
 808bc80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808bc84:	2b05      	cmp	r3, #5
 808bc86:	d801      	bhi.n	808bc8c <__hexdig_fun+0x18>
 808bc88:	3847      	subs	r0, #71	; 0x47
 808bc8a:	e004      	b.n	808bc96 <__hexdig_fun+0x22>
 808bc8c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808bc90:	2b05      	cmp	r3, #5
 808bc92:	d802      	bhi.n	808bc9a <__hexdig_fun+0x26>
 808bc94:	3827      	subs	r0, #39	; 0x27
 808bc96:	b2c0      	uxtb	r0, r0
 808bc98:	4770      	bx	lr
 808bc9a:	2000      	movs	r0, #0
 808bc9c:	4770      	bx	lr

0808bc9e <__gethex>:
 808bc9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bca2:	b08b      	sub	sp, #44	; 0x2c
 808bca4:	468a      	mov	sl, r1
 808bca6:	4690      	mov	r8, r2
 808bca8:	9306      	str	r3, [sp, #24]
 808bcaa:	9002      	str	r0, [sp, #8]
 808bcac:	f7fe f8ce 	bl	8089e4c <_localeconv_r>
 808bcb0:	6803      	ldr	r3, [r0, #0]
 808bcb2:	f04f 0b00 	mov.w	fp, #0
 808bcb6:	4618      	mov	r0, r3
 808bcb8:	9303      	str	r3, [sp, #12]
 808bcba:	f7fe fe65 	bl	808a988 <strlen>
 808bcbe:	9b03      	ldr	r3, [sp, #12]
 808bcc0:	9001      	str	r0, [sp, #4]
 808bcc2:	4403      	add	r3, r0
 808bcc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808bcc8:	9307      	str	r3, [sp, #28]
 808bcca:	f8da 3000 	ldr.w	r3, [sl]
 808bcce:	3302      	adds	r3, #2
 808bcd0:	461f      	mov	r7, r3
 808bcd2:	f813 0b01 	ldrb.w	r0, [r3], #1
 808bcd6:	2830      	cmp	r0, #48	; 0x30
 808bcd8:	d102      	bne.n	808bce0 <__gethex+0x42>
 808bcda:	f10b 0b01 	add.w	fp, fp, #1
 808bcde:	e7f7      	b.n	808bcd0 <__gethex+0x32>
 808bce0:	f7ff ffc8 	bl	808bc74 <__hexdig_fun>
 808bce4:	4604      	mov	r4, r0
 808bce6:	b9e0      	cbnz	r0, 808bd22 <__gethex+0x84>
 808bce8:	9a01      	ldr	r2, [sp, #4]
 808bcea:	9903      	ldr	r1, [sp, #12]
 808bcec:	4638      	mov	r0, r7
 808bcee:	f7fe fe53 	bl	808a998 <strncmp>
 808bcf2:	2800      	cmp	r0, #0
 808bcf4:	d134      	bne.n	808bd60 <__gethex+0xc2>
 808bcf6:	9b01      	ldr	r3, [sp, #4]
 808bcf8:	5cf8      	ldrb	r0, [r7, r3]
 808bcfa:	18fe      	adds	r6, r7, r3
 808bcfc:	f7ff ffba 	bl	808bc74 <__hexdig_fun>
 808bd00:	b380      	cbz	r0, 808bd64 <__gethex+0xc6>
 808bd02:	4633      	mov	r3, r6
 808bd04:	7818      	ldrb	r0, [r3, #0]
 808bd06:	461f      	mov	r7, r3
 808bd08:	2830      	cmp	r0, #48	; 0x30
 808bd0a:	f103 0301 	add.w	r3, r3, #1
 808bd0e:	d0f9      	beq.n	808bd04 <__gethex+0x66>
 808bd10:	f7ff ffb0 	bl	808bc74 <__hexdig_fun>
 808bd14:	fab0 f580 	clz	r5, r0
 808bd18:	4634      	mov	r4, r6
 808bd1a:	096d      	lsrs	r5, r5, #5
 808bd1c:	f04f 0b01 	mov.w	fp, #1
 808bd20:	e001      	b.n	808bd26 <__gethex+0x88>
 808bd22:	2500      	movs	r5, #0
 808bd24:	462c      	mov	r4, r5
 808bd26:	463a      	mov	r2, r7
 808bd28:	4616      	mov	r6, r2
 808bd2a:	7830      	ldrb	r0, [r6, #0]
 808bd2c:	3201      	adds	r2, #1
 808bd2e:	f7ff ffa1 	bl	808bc74 <__hexdig_fun>
 808bd32:	2800      	cmp	r0, #0
 808bd34:	d1f8      	bne.n	808bd28 <__gethex+0x8a>
 808bd36:	9a01      	ldr	r2, [sp, #4]
 808bd38:	9903      	ldr	r1, [sp, #12]
 808bd3a:	4630      	mov	r0, r6
 808bd3c:	f7fe fe2c 	bl	808a998 <strncmp>
 808bd40:	b950      	cbnz	r0, 808bd58 <__gethex+0xba>
 808bd42:	b954      	cbnz	r4, 808bd5a <__gethex+0xbc>
 808bd44:	9b01      	ldr	r3, [sp, #4]
 808bd46:	18f4      	adds	r4, r6, r3
 808bd48:	4622      	mov	r2, r4
 808bd4a:	4616      	mov	r6, r2
 808bd4c:	7830      	ldrb	r0, [r6, #0]
 808bd4e:	3201      	adds	r2, #1
 808bd50:	f7ff ff90 	bl	808bc74 <__hexdig_fun>
 808bd54:	2800      	cmp	r0, #0
 808bd56:	d1f8      	bne.n	808bd4a <__gethex+0xac>
 808bd58:	b134      	cbz	r4, 808bd68 <__gethex+0xca>
 808bd5a:	1ba4      	subs	r4, r4, r6
 808bd5c:	00a4      	lsls	r4, r4, #2
 808bd5e:	e003      	b.n	808bd68 <__gethex+0xca>
 808bd60:	463e      	mov	r6, r7
 808bd62:	e000      	b.n	808bd66 <__gethex+0xc8>
 808bd64:	4604      	mov	r4, r0
 808bd66:	2501      	movs	r5, #1
 808bd68:	7833      	ldrb	r3, [r6, #0]
 808bd6a:	2b50      	cmp	r3, #80	; 0x50
 808bd6c:	d001      	beq.n	808bd72 <__gethex+0xd4>
 808bd6e:	2b70      	cmp	r3, #112	; 0x70
 808bd70:	d12a      	bne.n	808bdc8 <__gethex+0x12a>
 808bd72:	7873      	ldrb	r3, [r6, #1]
 808bd74:	2b2b      	cmp	r3, #43	; 0x2b
 808bd76:	d008      	beq.n	808bd8a <__gethex+0xec>
 808bd78:	2b2d      	cmp	r3, #45	; 0x2d
 808bd7a:	d003      	beq.n	808bd84 <__gethex+0xe6>
 808bd7c:	1c71      	adds	r1, r6, #1
 808bd7e:	f04f 0900 	mov.w	r9, #0
 808bd82:	e005      	b.n	808bd90 <__gethex+0xf2>
 808bd84:	f04f 0901 	mov.w	r9, #1
 808bd88:	e001      	b.n	808bd8e <__gethex+0xf0>
 808bd8a:	f04f 0900 	mov.w	r9, #0
 808bd8e:	1cb1      	adds	r1, r6, #2
 808bd90:	7808      	ldrb	r0, [r1, #0]
 808bd92:	f7ff ff6f 	bl	808bc74 <__hexdig_fun>
 808bd96:	1e43      	subs	r3, r0, #1
 808bd98:	b2db      	uxtb	r3, r3
 808bd9a:	2b18      	cmp	r3, #24
 808bd9c:	d814      	bhi.n	808bdc8 <__gethex+0x12a>
 808bd9e:	f1a0 0210 	sub.w	r2, r0, #16
 808bda2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808bda6:	f7ff ff65 	bl	808bc74 <__hexdig_fun>
 808bdaa:	1e43      	subs	r3, r0, #1
 808bdac:	b2db      	uxtb	r3, r3
 808bdae:	2b18      	cmp	r3, #24
 808bdb0:	d804      	bhi.n	808bdbc <__gethex+0x11e>
 808bdb2:	230a      	movs	r3, #10
 808bdb4:	fb03 0202 	mla	r2, r3, r2, r0
 808bdb8:	3a10      	subs	r2, #16
 808bdba:	e7f2      	b.n	808bda2 <__gethex+0x104>
 808bdbc:	f1b9 0f00 	cmp.w	r9, #0
 808bdc0:	d000      	beq.n	808bdc4 <__gethex+0x126>
 808bdc2:	4252      	negs	r2, r2
 808bdc4:	4414      	add	r4, r2
 808bdc6:	e000      	b.n	808bdca <__gethex+0x12c>
 808bdc8:	4631      	mov	r1, r6
 808bdca:	f8ca 1000 	str.w	r1, [sl]
 808bdce:	b12d      	cbz	r5, 808bddc <__gethex+0x13e>
 808bdd0:	f1bb 0f00 	cmp.w	fp, #0
 808bdd4:	bf14      	ite	ne
 808bdd6:	2000      	movne	r0, #0
 808bdd8:	2006      	moveq	r0, #6
 808bdda:	e17c      	b.n	808c0d6 <__gethex+0x438>
 808bddc:	4629      	mov	r1, r5
 808bdde:	1bf3      	subs	r3, r6, r7
 808bde0:	3b01      	subs	r3, #1
 808bde2:	2b07      	cmp	r3, #7
 808bde4:	dd02      	ble.n	808bdec <__gethex+0x14e>
 808bde6:	3101      	adds	r1, #1
 808bde8:	105b      	asrs	r3, r3, #1
 808bdea:	e7fa      	b.n	808bde2 <__gethex+0x144>
 808bdec:	9802      	ldr	r0, [sp, #8]
 808bdee:	f000 fb0b 	bl	808c408 <_Balloc>
 808bdf2:	f04f 0900 	mov.w	r9, #0
 808bdf6:	4605      	mov	r5, r0
 808bdf8:	46cb      	mov	fp, r9
 808bdfa:	9b01      	ldr	r3, [sp, #4]
 808bdfc:	f100 0a14 	add.w	sl, r0, #20
 808be00:	f1c3 0301 	rsb	r3, r3, #1
 808be04:	f8cd a010 	str.w	sl, [sp, #16]
 808be08:	9308      	str	r3, [sp, #32]
 808be0a:	42b7      	cmp	r7, r6
 808be0c:	d22f      	bcs.n	808be6e <__gethex+0x1d0>
 808be0e:	1e73      	subs	r3, r6, #1
 808be10:	9305      	str	r3, [sp, #20]
 808be12:	9a07      	ldr	r2, [sp, #28]
 808be14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808be18:	4293      	cmp	r3, r2
 808be1a:	d00b      	beq.n	808be34 <__gethex+0x196>
 808be1c:	f1bb 0f20 	cmp.w	fp, #32
 808be20:	d116      	bne.n	808be50 <__gethex+0x1b2>
 808be22:	9b04      	ldr	r3, [sp, #16]
 808be24:	f8c3 9000 	str.w	r9, [r3]
 808be28:	3304      	adds	r3, #4
 808be2a:	f04f 0900 	mov.w	r9, #0
 808be2e:	9304      	str	r3, [sp, #16]
 808be30:	46cb      	mov	fp, r9
 808be32:	e00d      	b.n	808be50 <__gethex+0x1b2>
 808be34:	9b05      	ldr	r3, [sp, #20]
 808be36:	9a08      	ldr	r2, [sp, #32]
 808be38:	4413      	add	r3, r2
 808be3a:	429f      	cmp	r7, r3
 808be3c:	d8ee      	bhi.n	808be1c <__gethex+0x17e>
 808be3e:	4618      	mov	r0, r3
 808be40:	9a01      	ldr	r2, [sp, #4]
 808be42:	9903      	ldr	r1, [sp, #12]
 808be44:	9309      	str	r3, [sp, #36]	; 0x24
 808be46:	f7fe fda7 	bl	808a998 <strncmp>
 808be4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808be4c:	b168      	cbz	r0, 808be6a <__gethex+0x1cc>
 808be4e:	e7e5      	b.n	808be1c <__gethex+0x17e>
 808be50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808be54:	f7ff ff0e 	bl	808bc74 <__hexdig_fun>
 808be58:	f000 000f 	and.w	r0, r0, #15
 808be5c:	fa00 f00b 	lsl.w	r0, r0, fp
 808be60:	9b05      	ldr	r3, [sp, #20]
 808be62:	ea49 0900 	orr.w	r9, r9, r0
 808be66:	f10b 0b04 	add.w	fp, fp, #4
 808be6a:	461e      	mov	r6, r3
 808be6c:	e7cd      	b.n	808be0a <__gethex+0x16c>
 808be6e:	9804      	ldr	r0, [sp, #16]
 808be70:	f840 9b04 	str.w	r9, [r0], #4
 808be74:	ebca 0000 	rsb	r0, sl, r0
 808be78:	1080      	asrs	r0, r0, #2
 808be7a:	6128      	str	r0, [r5, #16]
 808be7c:	0147      	lsls	r7, r0, #5
 808be7e:	4648      	mov	r0, r9
 808be80:	f000 fb87 	bl	808c592 <__hi0bits>
 808be84:	f8d8 6000 	ldr.w	r6, [r8]
 808be88:	1a38      	subs	r0, r7, r0
 808be8a:	42b0      	cmp	r0, r6
 808be8c:	dd26      	ble.n	808bedc <__gethex+0x23e>
 808be8e:	1b87      	subs	r7, r0, r6
 808be90:	4639      	mov	r1, r7
 808be92:	4628      	mov	r0, r5
 808be94:	f000 fe7f 	bl	808cb96 <__any_on>
 808be98:	b1c8      	cbz	r0, 808bece <__gethex+0x230>
 808be9a:	1e7b      	subs	r3, r7, #1
 808be9c:	1159      	asrs	r1, r3, #5
 808be9e:	f003 021f 	and.w	r2, r3, #31
 808bea2:	f04f 0901 	mov.w	r9, #1
 808bea6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808beaa:	fa09 f202 	lsl.w	r2, r9, r2
 808beae:	420a      	tst	r2, r1
 808beb0:	d00e      	beq.n	808bed0 <__gethex+0x232>
 808beb2:	454b      	cmp	r3, r9
 808beb4:	dc02      	bgt.n	808bebc <__gethex+0x21e>
 808beb6:	f04f 0902 	mov.w	r9, #2
 808beba:	e009      	b.n	808bed0 <__gethex+0x232>
 808bebc:	1eb9      	subs	r1, r7, #2
 808bebe:	4628      	mov	r0, r5
 808bec0:	f000 fe69 	bl	808cb96 <__any_on>
 808bec4:	2800      	cmp	r0, #0
 808bec6:	d0f6      	beq.n	808beb6 <__gethex+0x218>
 808bec8:	f04f 0903 	mov.w	r9, #3
 808becc:	e000      	b.n	808bed0 <__gethex+0x232>
 808bece:	4681      	mov	r9, r0
 808bed0:	4639      	mov	r1, r7
 808bed2:	4628      	mov	r0, r5
 808bed4:	f7ff fe98 	bl	808bc08 <rshift>
 808bed8:	443c      	add	r4, r7
 808beda:	e00c      	b.n	808bef6 <__gethex+0x258>
 808bedc:	da09      	bge.n	808bef2 <__gethex+0x254>
 808bede:	1a37      	subs	r7, r6, r0
 808bee0:	4629      	mov	r1, r5
 808bee2:	463a      	mov	r2, r7
 808bee4:	9802      	ldr	r0, [sp, #8]
 808bee6:	f000 fc89 	bl	808c7fc <__lshift>
 808beea:	4605      	mov	r5, r0
 808beec:	1be4      	subs	r4, r4, r7
 808beee:	f100 0a14 	add.w	sl, r0, #20
 808bef2:	f04f 0900 	mov.w	r9, #0
 808bef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808befa:	429c      	cmp	r4, r3
 808befc:	dd08      	ble.n	808bf10 <__gethex+0x272>
 808befe:	9802      	ldr	r0, [sp, #8]
 808bf00:	4629      	mov	r1, r5
 808bf02:	f000 fab6 	bl	808c472 <_Bfree>
 808bf06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808bf08:	2300      	movs	r3, #0
 808bf0a:	6013      	str	r3, [r2, #0]
 808bf0c:	20a3      	movs	r0, #163	; 0xa3
 808bf0e:	e0e2      	b.n	808c0d6 <__gethex+0x438>
 808bf10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808bf14:	4284      	cmp	r4, r0
 808bf16:	da53      	bge.n	808bfc0 <__gethex+0x322>
 808bf18:	1b04      	subs	r4, r0, r4
 808bf1a:	42a6      	cmp	r6, r4
 808bf1c:	dc2e      	bgt.n	808bf7c <__gethex+0x2de>
 808bf1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808bf22:	2b02      	cmp	r3, #2
 808bf24:	d01a      	beq.n	808bf5c <__gethex+0x2be>
 808bf26:	2b03      	cmp	r3, #3
 808bf28:	d01c      	beq.n	808bf64 <__gethex+0x2c6>
 808bf2a:	2b01      	cmp	r3, #1
 808bf2c:	d11d      	bne.n	808bf6a <__gethex+0x2cc>
 808bf2e:	42a6      	cmp	r6, r4
 808bf30:	d11b      	bne.n	808bf6a <__gethex+0x2cc>
 808bf32:	2e01      	cmp	r6, #1
 808bf34:	dc0b      	bgt.n	808bf4e <__gethex+0x2b0>
 808bf36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808bf3a:	9a06      	ldr	r2, [sp, #24]
 808bf3c:	2062      	movs	r0, #98	; 0x62
 808bf3e:	6013      	str	r3, [r2, #0]
 808bf40:	2301      	movs	r3, #1
 808bf42:	612b      	str	r3, [r5, #16]
 808bf44:	f8ca 3000 	str.w	r3, [sl]
 808bf48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808bf4a:	601d      	str	r5, [r3, #0]
 808bf4c:	e0c3      	b.n	808c0d6 <__gethex+0x438>
 808bf4e:	1e71      	subs	r1, r6, #1
 808bf50:	4628      	mov	r0, r5
 808bf52:	f000 fe20 	bl	808cb96 <__any_on>
 808bf56:	2800      	cmp	r0, #0
 808bf58:	d1ed      	bne.n	808bf36 <__gethex+0x298>
 808bf5a:	e006      	b.n	808bf6a <__gethex+0x2cc>
 808bf5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bf5e:	2b00      	cmp	r3, #0
 808bf60:	d0e9      	beq.n	808bf36 <__gethex+0x298>
 808bf62:	e002      	b.n	808bf6a <__gethex+0x2cc>
 808bf64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bf66:	2b00      	cmp	r3, #0
 808bf68:	d1e5      	bne.n	808bf36 <__gethex+0x298>
 808bf6a:	9802      	ldr	r0, [sp, #8]
 808bf6c:	4629      	mov	r1, r5
 808bf6e:	f000 fa80 	bl	808c472 <_Bfree>
 808bf72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808bf74:	2300      	movs	r3, #0
 808bf76:	6013      	str	r3, [r2, #0]
 808bf78:	2050      	movs	r0, #80	; 0x50
 808bf7a:	e0ac      	b.n	808c0d6 <__gethex+0x438>
 808bf7c:	1e67      	subs	r7, r4, #1
 808bf7e:	f1b9 0f00 	cmp.w	r9, #0
 808bf82:	d106      	bne.n	808bf92 <__gethex+0x2f4>
 808bf84:	b13f      	cbz	r7, 808bf96 <__gethex+0x2f8>
 808bf86:	4639      	mov	r1, r7
 808bf88:	4628      	mov	r0, r5
 808bf8a:	f000 fe04 	bl	808cb96 <__any_on>
 808bf8e:	4681      	mov	r9, r0
 808bf90:	e001      	b.n	808bf96 <__gethex+0x2f8>
 808bf92:	f04f 0901 	mov.w	r9, #1
 808bf96:	117a      	asrs	r2, r7, #5
 808bf98:	2301      	movs	r3, #1
 808bf9a:	f007 071f 	and.w	r7, r7, #31
 808bf9e:	fa03 f707 	lsl.w	r7, r3, r7
 808bfa2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808bfa6:	4621      	mov	r1, r4
 808bfa8:	421f      	tst	r7, r3
 808bfaa:	4628      	mov	r0, r5
 808bfac:	bf18      	it	ne
 808bfae:	f049 0902 	orrne.w	r9, r9, #2
 808bfb2:	1b36      	subs	r6, r6, r4
 808bfb4:	f7ff fe28 	bl	808bc08 <rshift>
 808bfb8:	2702      	movs	r7, #2
 808bfba:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808bfbe:	e000      	b.n	808bfc2 <__gethex+0x324>
 808bfc0:	2701      	movs	r7, #1
 808bfc2:	f1b9 0f00 	cmp.w	r9, #0
 808bfc6:	f000 8081 	beq.w	808c0cc <__gethex+0x42e>
 808bfca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808bfce:	2b02      	cmp	r3, #2
 808bfd0:	d00e      	beq.n	808bff0 <__gethex+0x352>
 808bfd2:	2b03      	cmp	r3, #3
 808bfd4:	d010      	beq.n	808bff8 <__gethex+0x35a>
 808bfd6:	2b01      	cmp	r3, #1
 808bfd8:	d176      	bne.n	808c0c8 <__gethex+0x42a>
 808bfda:	f019 0f02 	tst.w	r9, #2
 808bfde:	d073      	beq.n	808c0c8 <__gethex+0x42a>
 808bfe0:	f8da 0000 	ldr.w	r0, [sl]
 808bfe4:	ea49 0900 	orr.w	r9, r9, r0
 808bfe8:	f019 0f01 	tst.w	r9, #1
 808bfec:	d107      	bne.n	808bffe <__gethex+0x360>
 808bfee:	e06b      	b.n	808c0c8 <__gethex+0x42a>
 808bff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bff2:	f1c3 0301 	rsb	r3, r3, #1
 808bff6:	9315      	str	r3, [sp, #84]	; 0x54
 808bff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bffa:	2b00      	cmp	r3, #0
 808bffc:	d064      	beq.n	808c0c8 <__gethex+0x42a>
 808bffe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808c002:	f105 0314 	add.w	r3, r5, #20
 808c006:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808c00a:	eb03 0109 	add.w	r1, r3, r9
 808c00e:	2000      	movs	r0, #0
 808c010:	681a      	ldr	r2, [r3, #0]
 808c012:	f1b2 3fff 	cmp.w	r2, #4294967295
 808c016:	d002      	beq.n	808c01e <__gethex+0x380>
 808c018:	3201      	adds	r2, #1
 808c01a:	601a      	str	r2, [r3, #0]
 808c01c:	e020      	b.n	808c060 <__gethex+0x3c2>
 808c01e:	f843 0b04 	str.w	r0, [r3], #4
 808c022:	4299      	cmp	r1, r3
 808c024:	d8f4      	bhi.n	808c010 <__gethex+0x372>
 808c026:	68ab      	ldr	r3, [r5, #8]
 808c028:	459a      	cmp	sl, r3
 808c02a:	db12      	blt.n	808c052 <__gethex+0x3b4>
 808c02c:	6869      	ldr	r1, [r5, #4]
 808c02e:	9802      	ldr	r0, [sp, #8]
 808c030:	3101      	adds	r1, #1
 808c032:	f000 f9e9 	bl	808c408 <_Balloc>
 808c036:	4683      	mov	fp, r0
 808c038:	692a      	ldr	r2, [r5, #16]
 808c03a:	f105 010c 	add.w	r1, r5, #12
 808c03e:	3202      	adds	r2, #2
 808c040:	0092      	lsls	r2, r2, #2
 808c042:	300c      	adds	r0, #12
 808c044:	f7fd ff15 	bl	8089e72 <memcpy>
 808c048:	4629      	mov	r1, r5
 808c04a:	9802      	ldr	r0, [sp, #8]
 808c04c:	f000 fa11 	bl	808c472 <_Bfree>
 808c050:	465d      	mov	r5, fp
 808c052:	692b      	ldr	r3, [r5, #16]
 808c054:	1c5a      	adds	r2, r3, #1
 808c056:	612a      	str	r2, [r5, #16]
 808c058:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808c05c:	2201      	movs	r2, #1
 808c05e:	615a      	str	r2, [r3, #20]
 808c060:	2f02      	cmp	r7, #2
 808c062:	f105 0214 	add.w	r2, r5, #20
 808c066:	d111      	bne.n	808c08c <__gethex+0x3ee>
 808c068:	f8d8 3000 	ldr.w	r3, [r8]
 808c06c:	3b01      	subs	r3, #1
 808c06e:	429e      	cmp	r6, r3
 808c070:	d127      	bne.n	808c0c2 <__gethex+0x424>
 808c072:	1171      	asrs	r1, r6, #5
 808c074:	2301      	movs	r3, #1
 808c076:	f006 061f 	and.w	r6, r6, #31
 808c07a:	fa03 f606 	lsl.w	r6, r3, r6
 808c07e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808c082:	421e      	tst	r6, r3
 808c084:	bf0c      	ite	eq
 808c086:	2702      	moveq	r7, #2
 808c088:	2701      	movne	r7, #1
 808c08a:	e01a      	b.n	808c0c2 <__gethex+0x424>
 808c08c:	692b      	ldr	r3, [r5, #16]
 808c08e:	459a      	cmp	sl, r3
 808c090:	da0a      	bge.n	808c0a8 <__gethex+0x40a>
 808c092:	2101      	movs	r1, #1
 808c094:	4628      	mov	r0, r5
 808c096:	f7ff fdb7 	bl	808bc08 <rshift>
 808c09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c09e:	3401      	adds	r4, #1
 808c0a0:	429c      	cmp	r4, r3
 808c0a2:	f73f af2c 	bgt.w	808befe <__gethex+0x260>
 808c0a6:	e00b      	b.n	808c0c0 <__gethex+0x422>
 808c0a8:	f016 061f 	ands.w	r6, r6, #31
 808c0ac:	d008      	beq.n	808c0c0 <__gethex+0x422>
 808c0ae:	4491      	add	r9, r2
 808c0b0:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808c0b4:	f000 fa6d 	bl	808c592 <__hi0bits>
 808c0b8:	f1c6 0620 	rsb	r6, r6, #32
 808c0bc:	42b0      	cmp	r0, r6
 808c0be:	dbe8      	blt.n	808c092 <__gethex+0x3f4>
 808c0c0:	2701      	movs	r7, #1
 808c0c2:	f047 0720 	orr.w	r7, r7, #32
 808c0c6:	e001      	b.n	808c0cc <__gethex+0x42e>
 808c0c8:	f047 0710 	orr.w	r7, r7, #16
 808c0cc:	4638      	mov	r0, r7
 808c0ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c0d0:	601d      	str	r5, [r3, #0]
 808c0d2:	9b06      	ldr	r3, [sp, #24]
 808c0d4:	601c      	str	r4, [r3, #0]
 808c0d6:	b00b      	add	sp, #44	; 0x2c
 808c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c0dc <L_shift>:
 808c0dc:	f1c2 0208 	rsb	r2, r2, #8
 808c0e0:	0092      	lsls	r2, r2, #2
 808c0e2:	b570      	push	{r4, r5, r6, lr}
 808c0e4:	f1c2 0620 	rsb	r6, r2, #32
 808c0e8:	6843      	ldr	r3, [r0, #4]
 808c0ea:	6805      	ldr	r5, [r0, #0]
 808c0ec:	fa03 f406 	lsl.w	r4, r3, r6
 808c0f0:	432c      	orrs	r4, r5
 808c0f2:	40d3      	lsrs	r3, r2
 808c0f4:	6004      	str	r4, [r0, #0]
 808c0f6:	f840 3f04 	str.w	r3, [r0, #4]!
 808c0fa:	4288      	cmp	r0, r1
 808c0fc:	d3f4      	bcc.n	808c0e8 <L_shift+0xc>
 808c0fe:	bd70      	pop	{r4, r5, r6, pc}

0808c100 <__match>:
 808c100:	b530      	push	{r4, r5, lr}
 808c102:	6803      	ldr	r3, [r0, #0]
 808c104:	f811 4b01 	ldrb.w	r4, [r1], #1
 808c108:	3301      	adds	r3, #1
 808c10a:	b14c      	cbz	r4, 808c120 <__match+0x20>
 808c10c:	781a      	ldrb	r2, [r3, #0]
 808c10e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808c112:	2d19      	cmp	r5, #25
 808c114:	bf98      	it	ls
 808c116:	3220      	addls	r2, #32
 808c118:	42a2      	cmp	r2, r4
 808c11a:	d0f3      	beq.n	808c104 <__match+0x4>
 808c11c:	2000      	movs	r0, #0
 808c11e:	bd30      	pop	{r4, r5, pc}
 808c120:	6003      	str	r3, [r0, #0]
 808c122:	2001      	movs	r0, #1
 808c124:	bd30      	pop	{r4, r5, pc}

0808c126 <__hexnan>:
 808c126:	680b      	ldr	r3, [r1, #0]
 808c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c12c:	115e      	asrs	r6, r3, #5
 808c12e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808c132:	f013 031f 	ands.w	r3, r3, #31
 808c136:	bf18      	it	ne
 808c138:	3604      	addne	r6, #4
 808c13a:	1f35      	subs	r5, r6, #4
 808c13c:	4617      	mov	r7, r2
 808c13e:	2200      	movs	r2, #0
 808c140:	4682      	mov	sl, r0
 808c142:	46a8      	mov	r8, r5
 808c144:	462c      	mov	r4, r5
 808c146:	4691      	mov	r9, r2
 808c148:	b085      	sub	sp, #20
 808c14a:	f8d0 b000 	ldr.w	fp, [r0]
 808c14e:	9301      	str	r3, [sp, #4]
 808c150:	f846 2c04 	str.w	r2, [r6, #-4]
 808c154:	9200      	str	r2, [sp, #0]
 808c156:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808c15a:	2900      	cmp	r1, #0
 808c15c:	d03c      	beq.n	808c1d8 <__hexnan+0xb2>
 808c15e:	4608      	mov	r0, r1
 808c160:	9203      	str	r2, [sp, #12]
 808c162:	9102      	str	r1, [sp, #8]
 808c164:	f7ff fd86 	bl	808bc74 <__hexdig_fun>
 808c168:	9a03      	ldr	r2, [sp, #12]
 808c16a:	bb00      	cbnz	r0, 808c1ae <__hexnan+0x88>
 808c16c:	9902      	ldr	r1, [sp, #8]
 808c16e:	2920      	cmp	r1, #32
 808c170:	d816      	bhi.n	808c1a0 <__hexnan+0x7a>
 808c172:	9b00      	ldr	r3, [sp, #0]
 808c174:	4599      	cmp	r9, r3
 808c176:	ddee      	ble.n	808c156 <__hexnan+0x30>
 808c178:	4544      	cmp	r4, r8
 808c17a:	d205      	bcs.n	808c188 <__hexnan+0x62>
 808c17c:	2a07      	cmp	r2, #7
 808c17e:	dc03      	bgt.n	808c188 <__hexnan+0x62>
 808c180:	4641      	mov	r1, r8
 808c182:	4620      	mov	r0, r4
 808c184:	f7ff ffaa 	bl	808c0dc <L_shift>
 808c188:	42bc      	cmp	r4, r7
 808c18a:	d923      	bls.n	808c1d4 <__hexnan+0xae>
 808c18c:	2300      	movs	r3, #0
 808c18e:	f1a4 0804 	sub.w	r8, r4, #4
 808c192:	f844 3c04 	str.w	r3, [r4, #-4]
 808c196:	f8cd 9000 	str.w	r9, [sp]
 808c19a:	4644      	mov	r4, r8
 808c19c:	461a      	mov	r2, r3
 808c19e:	e7da      	b.n	808c156 <__hexnan+0x30>
 808c1a0:	2929      	cmp	r1, #41	; 0x29
 808c1a2:	d148      	bne.n	808c236 <__hexnan+0x110>
 808c1a4:	f10b 0301 	add.w	r3, fp, #1
 808c1a8:	f8ca 3000 	str.w	r3, [sl]
 808c1ac:	e014      	b.n	808c1d8 <__hexnan+0xb2>
 808c1ae:	3201      	adds	r2, #1
 808c1b0:	2a08      	cmp	r2, #8
 808c1b2:	f109 0901 	add.w	r9, r9, #1
 808c1b6:	dd06      	ble.n	808c1c6 <__hexnan+0xa0>
 808c1b8:	42bc      	cmp	r4, r7
 808c1ba:	d9cc      	bls.n	808c156 <__hexnan+0x30>
 808c1bc:	2300      	movs	r3, #0
 808c1be:	f844 3c04 	str.w	r3, [r4, #-4]
 808c1c2:	2201      	movs	r2, #1
 808c1c4:	3c04      	subs	r4, #4
 808c1c6:	6821      	ldr	r1, [r4, #0]
 808c1c8:	f000 000f 	and.w	r0, r0, #15
 808c1cc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808c1d0:	6020      	str	r0, [r4, #0]
 808c1d2:	e7c0      	b.n	808c156 <__hexnan+0x30>
 808c1d4:	2208      	movs	r2, #8
 808c1d6:	e7be      	b.n	808c156 <__hexnan+0x30>
 808c1d8:	f1b9 0f00 	cmp.w	r9, #0
 808c1dc:	d02b      	beq.n	808c236 <__hexnan+0x110>
 808c1de:	4544      	cmp	r4, r8
 808c1e0:	d205      	bcs.n	808c1ee <__hexnan+0xc8>
 808c1e2:	2a07      	cmp	r2, #7
 808c1e4:	dc03      	bgt.n	808c1ee <__hexnan+0xc8>
 808c1e6:	4641      	mov	r1, r8
 808c1e8:	4620      	mov	r0, r4
 808c1ea:	f7ff ff77 	bl	808c0dc <L_shift>
 808c1ee:	42bc      	cmp	r4, r7
 808c1f0:	d90c      	bls.n	808c20c <__hexnan+0xe6>
 808c1f2:	463b      	mov	r3, r7
 808c1f4:	f854 2b04 	ldr.w	r2, [r4], #4
 808c1f8:	42a5      	cmp	r5, r4
 808c1fa:	f843 2b04 	str.w	r2, [r3], #4
 808c1fe:	d2f9      	bcs.n	808c1f4 <__hexnan+0xce>
 808c200:	2200      	movs	r2, #0
 808c202:	f843 2b04 	str.w	r2, [r3], #4
 808c206:	429d      	cmp	r5, r3
 808c208:	d2fb      	bcs.n	808c202 <__hexnan+0xdc>
 808c20a:	e00b      	b.n	808c224 <__hexnan+0xfe>
 808c20c:	9b01      	ldr	r3, [sp, #4]
 808c20e:	b14b      	cbz	r3, 808c224 <__hexnan+0xfe>
 808c210:	f1c3 0220 	rsb	r2, r3, #32
 808c214:	f04f 33ff 	mov.w	r3, #4294967295
 808c218:	40d3      	lsrs	r3, r2
 808c21a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808c21e:	4013      	ands	r3, r2
 808c220:	f846 3c04 	str.w	r3, [r6, #-4]
 808c224:	682b      	ldr	r3, [r5, #0]
 808c226:	b943      	cbnz	r3, 808c23a <__hexnan+0x114>
 808c228:	42bd      	cmp	r5, r7
 808c22a:	d102      	bne.n	808c232 <__hexnan+0x10c>
 808c22c:	2301      	movs	r3, #1
 808c22e:	602b      	str	r3, [r5, #0]
 808c230:	e003      	b.n	808c23a <__hexnan+0x114>
 808c232:	3d04      	subs	r5, #4
 808c234:	e7f6      	b.n	808c224 <__hexnan+0xfe>
 808c236:	2004      	movs	r0, #4
 808c238:	e000      	b.n	808c23c <__hexnan+0x116>
 808c23a:	2005      	movs	r0, #5
 808c23c:	b005      	add	sp, #20
 808c23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808c244 <_findenv_r>:
 808c244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c248:	4607      	mov	r7, r0
 808c24a:	468b      	mov	fp, r1
 808c24c:	4690      	mov	r8, r2
 808c24e:	f000 fcd2 	bl	808cbf6 <__env_lock>
 808c252:	4b19      	ldr	r3, [pc, #100]	; (808c2b8 <_findenv_r+0x74>)
 808c254:	681d      	ldr	r5, [r3, #0]
 808c256:	469a      	mov	sl, r3
 808c258:	b13d      	cbz	r5, 808c26a <_findenv_r+0x26>
 808c25a:	465c      	mov	r4, fp
 808c25c:	4623      	mov	r3, r4
 808c25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808c262:	b142      	cbz	r2, 808c276 <_findenv_r+0x32>
 808c264:	2a3d      	cmp	r2, #61	; 0x3d
 808c266:	461c      	mov	r4, r3
 808c268:	d1f8      	bne.n	808c25c <_findenv_r+0x18>
 808c26a:	4638      	mov	r0, r7
 808c26c:	f000 fcc4 	bl	808cbf8 <__env_unlock>
 808c270:	2000      	movs	r0, #0
 808c272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c276:	ebcb 0404 	rsb	r4, fp, r4
 808c27a:	46a9      	mov	r9, r5
 808c27c:	f859 0b04 	ldr.w	r0, [r9], #4
 808c280:	2800      	cmp	r0, #0
 808c282:	d0f2      	beq.n	808c26a <_findenv_r+0x26>
 808c284:	4622      	mov	r2, r4
 808c286:	4659      	mov	r1, fp
 808c288:	f7fe fb86 	bl	808a998 <strncmp>
 808c28c:	b988      	cbnz	r0, 808c2b2 <_findenv_r+0x6e>
 808c28e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808c292:	191e      	adds	r6, r3, r4
 808c294:	5d1b      	ldrb	r3, [r3, r4]
 808c296:	2b3d      	cmp	r3, #61	; 0x3d
 808c298:	d10b      	bne.n	808c2b2 <_findenv_r+0x6e>
 808c29a:	f8da 3000 	ldr.w	r3, [sl]
 808c29e:	4638      	mov	r0, r7
 808c2a0:	1aed      	subs	r5, r5, r3
 808c2a2:	10ad      	asrs	r5, r5, #2
 808c2a4:	f8c8 5000 	str.w	r5, [r8]
 808c2a8:	f000 fca6 	bl	808cbf8 <__env_unlock>
 808c2ac:	1c70      	adds	r0, r6, #1
 808c2ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c2b2:	464d      	mov	r5, r9
 808c2b4:	e7e1      	b.n	808c27a <_findenv_r+0x36>
 808c2b6:	bf00      	nop
 808c2b8:	2000013c 	.word	0x2000013c

0808c2bc <_getenv_r>:
 808c2bc:	b507      	push	{r0, r1, r2, lr}
 808c2be:	aa01      	add	r2, sp, #4
 808c2c0:	f7ff ffc0 	bl	808c244 <_findenv_r>
 808c2c4:	b003      	add	sp, #12
 808c2c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c2cc <__gettzinfo>:
 808c2cc:	4800      	ldr	r0, [pc, #0]	; (808c2d0 <__gettzinfo+0x4>)
 808c2ce:	4770      	bx	lr
 808c2d0:	200000fc 	.word	0x200000fc

0808c2d4 <gmtime_r>:
 808c2d4:	6802      	ldr	r2, [r0, #0]
 808c2d6:	4b46      	ldr	r3, [pc, #280]	; (808c3f0 <gmtime_r+0x11c>)
 808c2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c2da:	fb92 f4f3 	sdiv	r4, r2, r3
 808c2de:	fb03 2214 	mls	r2, r3, r4, r2
 808c2e2:	2a00      	cmp	r2, #0
 808c2e4:	bfbc      	itt	lt
 808c2e6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808c2ea:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808c2ee:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808c2f2:	fb92 f3f0 	sdiv	r3, r2, r0
 808c2f6:	fb00 2213 	mls	r2, r0, r3, r2
 808c2fa:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808c2fe:	608b      	str	r3, [r1, #8]
 808c300:	fb92 f3f0 	sdiv	r3, r2, r0
 808c304:	fb00 2213 	mls	r2, r0, r3, r2
 808c308:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808c30c:	bfac      	ite	ge
 808c30e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808c312:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808c316:	604b      	str	r3, [r1, #4]
 808c318:	600a      	str	r2, [r1, #0]
 808c31a:	2307      	movs	r3, #7
 808c31c:	1ce2      	adds	r2, r4, #3
 808c31e:	fb92 f3f3 	sdiv	r3, r2, r3
 808c322:	4d34      	ldr	r5, [pc, #208]	; (808c3f4 <gmtime_r+0x120>)
 808c324:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808c328:	fb94 f5f5 	sdiv	r5, r4, r5
 808c32c:	1ad3      	subs	r3, r2, r3
 808c32e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808c332:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808c336:	618b      	str	r3, [r1, #24]
 808c338:	4b2f      	ldr	r3, [pc, #188]	; (808c3f8 <gmtime_r+0x124>)
 808c33a:	4830      	ldr	r0, [pc, #192]	; (808c3fc <gmtime_r+0x128>)
 808c33c:	fb03 4405 	mla	r4, r3, r5, r4
 808c340:	fbb4 f2f2 	udiv	r2, r4, r2
 808c344:	fbb4 f3f7 	udiv	r3, r4, r7
 808c348:	fbb4 f0f0 	udiv	r0, r4, r0
 808c34c:	4422      	add	r2, r4
 808c34e:	1ad2      	subs	r2, r2, r3
 808c350:	f648 6694 	movw	r6, #36500	; 0x8e94
 808c354:	1a13      	subs	r3, r2, r0
 808c356:	f240 126d 	movw	r2, #365	; 0x16d
 808c35a:	fbb3 f6f6 	udiv	r6, r3, r6
 808c35e:	fbb3 f0f2 	udiv	r0, r3, r2
 808c362:	fbb3 f3f7 	udiv	r3, r3, r7
 808c366:	4434      	add	r4, r6
 808c368:	1ae3      	subs	r3, r4, r3
 808c36a:	fb02 3310 	mls	r3, r2, r0, r3
 808c36e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808c372:	2499      	movs	r4, #153	; 0x99
 808c374:	3202      	adds	r2, #2
 808c376:	fbb2 f2f4 	udiv	r2, r2, r4
 808c37a:	4354      	muls	r4, r2
 808c37c:	1ca6      	adds	r6, r4, #2
 808c37e:	2405      	movs	r4, #5
 808c380:	fbb6 f4f4 	udiv	r4, r6, r4
 808c384:	2a0a      	cmp	r2, #10
 808c386:	bf34      	ite	cc
 808c388:	2602      	movcc	r6, #2
 808c38a:	f06f 0609 	mvncs.w	r6, #9
 808c38e:	4416      	add	r6, r2
 808c390:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c394:	fb02 0505 	mla	r5, r2, r5, r0
 808c398:	1c5f      	adds	r7, r3, #1
 808c39a:	2e01      	cmp	r6, #1
 808c39c:	bf98      	it	ls
 808c39e:	3501      	addls	r5, #1
 808c3a0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808c3a4:	eba7 0704 	sub.w	r7, r7, r4
 808c3a8:	d302      	bcc.n	808c3b0 <gmtime_r+0xdc>
 808c3aa:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808c3ae:	e014      	b.n	808c3da <gmtime_r+0x106>
 808c3b0:	0782      	lsls	r2, r0, #30
 808c3b2:	d105      	bne.n	808c3c0 <gmtime_r+0xec>
 808c3b4:	2464      	movs	r4, #100	; 0x64
 808c3b6:	fbb0 f2f4 	udiv	r2, r0, r4
 808c3ba:	fb04 0212 	mls	r2, r4, r2, r0
 808c3be:	b94a      	cbnz	r2, 808c3d4 <gmtime_r+0x100>
 808c3c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c3c4:	fbb0 f4f2 	udiv	r4, r0, r2
 808c3c8:	fb02 0014 	mls	r0, r2, r4, r0
 808c3cc:	fab0 f280 	clz	r2, r0
 808c3d0:	0952      	lsrs	r2, r2, #5
 808c3d2:	e000      	b.n	808c3d6 <gmtime_r+0x102>
 808c3d4:	2201      	movs	r2, #1
 808c3d6:	333b      	adds	r3, #59	; 0x3b
 808c3d8:	441a      	add	r2, r3
 808c3da:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808c3de:	2300      	movs	r3, #0
 808c3e0:	61ca      	str	r2, [r1, #28]
 808c3e2:	614d      	str	r5, [r1, #20]
 808c3e4:	610e      	str	r6, [r1, #16]
 808c3e6:	60cf      	str	r7, [r1, #12]
 808c3e8:	620b      	str	r3, [r1, #32]
 808c3ea:	4608      	mov	r0, r1
 808c3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c3ee:	bf00      	nop
 808c3f0:	00015180 	.word	0x00015180
 808c3f4:	00023ab1 	.word	0x00023ab1
 808c3f8:	fffdc54f 	.word	0xfffdc54f
 808c3fc:	00023ab0 	.word	0x00023ab0

0808c400 <labs>:
 808c400:	2800      	cmp	r0, #0
 808c402:	bfb8      	it	lt
 808c404:	4240      	neglt	r0, r0
 808c406:	4770      	bx	lr

0808c408 <_Balloc>:
 808c408:	b570      	push	{r4, r5, r6, lr}
 808c40a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808c40c:	4604      	mov	r4, r0
 808c40e:	460e      	mov	r6, r1
 808c410:	b93d      	cbnz	r5, 808c422 <_Balloc+0x1a>
 808c412:	2010      	movs	r0, #16
 808c414:	f7f9 fa48 	bl	80858a8 <malloc>
 808c418:	6260      	str	r0, [r4, #36]	; 0x24
 808c41a:	6045      	str	r5, [r0, #4]
 808c41c:	6085      	str	r5, [r0, #8]
 808c41e:	6005      	str	r5, [r0, #0]
 808c420:	60c5      	str	r5, [r0, #12]
 808c422:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808c424:	68eb      	ldr	r3, [r5, #12]
 808c426:	b143      	cbz	r3, 808c43a <_Balloc+0x32>
 808c428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808c42a:	68db      	ldr	r3, [r3, #12]
 808c42c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808c430:	b178      	cbz	r0, 808c452 <_Balloc+0x4a>
 808c432:	6802      	ldr	r2, [r0, #0]
 808c434:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808c438:	e017      	b.n	808c46a <_Balloc+0x62>
 808c43a:	2221      	movs	r2, #33	; 0x21
 808c43c:	2104      	movs	r1, #4
 808c43e:	4620      	mov	r0, r4
 808c440:	f000 fbcb 	bl	808cbda <_calloc_r>
 808c444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808c446:	60e8      	str	r0, [r5, #12]
 808c448:	68db      	ldr	r3, [r3, #12]
 808c44a:	2b00      	cmp	r3, #0
 808c44c:	d1ec      	bne.n	808c428 <_Balloc+0x20>
 808c44e:	2000      	movs	r0, #0
 808c450:	bd70      	pop	{r4, r5, r6, pc}
 808c452:	2101      	movs	r1, #1
 808c454:	fa01 f506 	lsl.w	r5, r1, r6
 808c458:	1d6a      	adds	r2, r5, #5
 808c45a:	0092      	lsls	r2, r2, #2
 808c45c:	4620      	mov	r0, r4
 808c45e:	f000 fbbc 	bl	808cbda <_calloc_r>
 808c462:	2800      	cmp	r0, #0
 808c464:	d0f3      	beq.n	808c44e <_Balloc+0x46>
 808c466:	6046      	str	r6, [r0, #4]
 808c468:	6085      	str	r5, [r0, #8]
 808c46a:	2300      	movs	r3, #0
 808c46c:	6103      	str	r3, [r0, #16]
 808c46e:	60c3      	str	r3, [r0, #12]
 808c470:	bd70      	pop	{r4, r5, r6, pc}

0808c472 <_Bfree>:
 808c472:	b570      	push	{r4, r5, r6, lr}
 808c474:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808c476:	4606      	mov	r6, r0
 808c478:	460d      	mov	r5, r1
 808c47a:	b93c      	cbnz	r4, 808c48c <_Bfree+0x1a>
 808c47c:	2010      	movs	r0, #16
 808c47e:	f7f9 fa13 	bl	80858a8 <malloc>
 808c482:	6270      	str	r0, [r6, #36]	; 0x24
 808c484:	6044      	str	r4, [r0, #4]
 808c486:	6084      	str	r4, [r0, #8]
 808c488:	6004      	str	r4, [r0, #0]
 808c48a:	60c4      	str	r4, [r0, #12]
 808c48c:	b13d      	cbz	r5, 808c49e <_Bfree+0x2c>
 808c48e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808c490:	686a      	ldr	r2, [r5, #4]
 808c492:	68db      	ldr	r3, [r3, #12]
 808c494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808c498:	6029      	str	r1, [r5, #0]
 808c49a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808c49e:	bd70      	pop	{r4, r5, r6, pc}

0808c4a0 <__multadd>:
 808c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c4a4:	4606      	mov	r6, r0
 808c4a6:	460c      	mov	r4, r1
 808c4a8:	690d      	ldr	r5, [r1, #16]
 808c4aa:	461f      	mov	r7, r3
 808c4ac:	f101 0e14 	add.w	lr, r1, #20
 808c4b0:	2300      	movs	r3, #0
 808c4b2:	f8de 0000 	ldr.w	r0, [lr]
 808c4b6:	3301      	adds	r3, #1
 808c4b8:	b281      	uxth	r1, r0
 808c4ba:	fb02 7101 	mla	r1, r2, r1, r7
 808c4be:	0c00      	lsrs	r0, r0, #16
 808c4c0:	0c0f      	lsrs	r7, r1, #16
 808c4c2:	fb02 7000 	mla	r0, r2, r0, r7
 808c4c6:	b289      	uxth	r1, r1
 808c4c8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808c4cc:	429d      	cmp	r5, r3
 808c4ce:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808c4d2:	f84e 1b04 	str.w	r1, [lr], #4
 808c4d6:	dcec      	bgt.n	808c4b2 <__multadd+0x12>
 808c4d8:	b1d7      	cbz	r7, 808c510 <__multadd+0x70>
 808c4da:	68a3      	ldr	r3, [r4, #8]
 808c4dc:	429d      	cmp	r5, r3
 808c4de:	db12      	blt.n	808c506 <__multadd+0x66>
 808c4e0:	6861      	ldr	r1, [r4, #4]
 808c4e2:	4630      	mov	r0, r6
 808c4e4:	3101      	adds	r1, #1
 808c4e6:	f7ff ff8f 	bl	808c408 <_Balloc>
 808c4ea:	4680      	mov	r8, r0
 808c4ec:	6922      	ldr	r2, [r4, #16]
 808c4ee:	f104 010c 	add.w	r1, r4, #12
 808c4f2:	3202      	adds	r2, #2
 808c4f4:	0092      	lsls	r2, r2, #2
 808c4f6:	300c      	adds	r0, #12
 808c4f8:	f7fd fcbb 	bl	8089e72 <memcpy>
 808c4fc:	4621      	mov	r1, r4
 808c4fe:	4630      	mov	r0, r6
 808c500:	f7ff ffb7 	bl	808c472 <_Bfree>
 808c504:	4644      	mov	r4, r8
 808c506:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808c50a:	3501      	adds	r5, #1
 808c50c:	615f      	str	r7, [r3, #20]
 808c50e:	6125      	str	r5, [r4, #16]
 808c510:	4620      	mov	r0, r4
 808c512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c516 <__s2b>:
 808c516:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c51a:	4606      	mov	r6, r0
 808c51c:	4615      	mov	r5, r2
 808c51e:	461f      	mov	r7, r3
 808c520:	2209      	movs	r2, #9
 808c522:	3308      	adds	r3, #8
 808c524:	460c      	mov	r4, r1
 808c526:	fb93 f3f2 	sdiv	r3, r3, r2
 808c52a:	2100      	movs	r1, #0
 808c52c:	2201      	movs	r2, #1
 808c52e:	429a      	cmp	r2, r3
 808c530:	da02      	bge.n	808c538 <__s2b+0x22>
 808c532:	0052      	lsls	r2, r2, #1
 808c534:	3101      	adds	r1, #1
 808c536:	e7fa      	b.n	808c52e <__s2b+0x18>
 808c538:	4630      	mov	r0, r6
 808c53a:	f7ff ff65 	bl	808c408 <_Balloc>
 808c53e:	9b08      	ldr	r3, [sp, #32]
 808c540:	2d09      	cmp	r5, #9
 808c542:	6143      	str	r3, [r0, #20]
 808c544:	f04f 0301 	mov.w	r3, #1
 808c548:	6103      	str	r3, [r0, #16]
 808c54a:	dd11      	ble.n	808c570 <__s2b+0x5a>
 808c54c:	f104 0809 	add.w	r8, r4, #9
 808c550:	46c1      	mov	r9, r8
 808c552:	442c      	add	r4, r5
 808c554:	f819 3b01 	ldrb.w	r3, [r9], #1
 808c558:	4601      	mov	r1, r0
 808c55a:	3b30      	subs	r3, #48	; 0x30
 808c55c:	220a      	movs	r2, #10
 808c55e:	4630      	mov	r0, r6
 808c560:	f7ff ff9e 	bl	808c4a0 <__multadd>
 808c564:	45a1      	cmp	r9, r4
 808c566:	d1f5      	bne.n	808c554 <__s2b+0x3e>
 808c568:	eb08 0405 	add.w	r4, r8, r5
 808c56c:	3c08      	subs	r4, #8
 808c56e:	e001      	b.n	808c574 <__s2b+0x5e>
 808c570:	340a      	adds	r4, #10
 808c572:	2509      	movs	r5, #9
 808c574:	1b2d      	subs	r5, r5, r4
 808c576:	1963      	adds	r3, r4, r5
 808c578:	429f      	cmp	r7, r3
 808c57a:	dd08      	ble.n	808c58e <__s2b+0x78>
 808c57c:	f814 3b01 	ldrb.w	r3, [r4], #1
 808c580:	4601      	mov	r1, r0
 808c582:	3b30      	subs	r3, #48	; 0x30
 808c584:	220a      	movs	r2, #10
 808c586:	4630      	mov	r0, r6
 808c588:	f7ff ff8a 	bl	808c4a0 <__multadd>
 808c58c:	e7f3      	b.n	808c576 <__s2b+0x60>
 808c58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808c592 <__hi0bits>:
 808c592:	0c03      	lsrs	r3, r0, #16
 808c594:	041b      	lsls	r3, r3, #16
 808c596:	b913      	cbnz	r3, 808c59e <__hi0bits+0xc>
 808c598:	0400      	lsls	r0, r0, #16
 808c59a:	2310      	movs	r3, #16
 808c59c:	e000      	b.n	808c5a0 <__hi0bits+0xe>
 808c59e:	2300      	movs	r3, #0
 808c5a0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808c5a4:	bf04      	itt	eq
 808c5a6:	0200      	lsleq	r0, r0, #8
 808c5a8:	3308      	addeq	r3, #8
 808c5aa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808c5ae:	bf04      	itt	eq
 808c5b0:	0100      	lsleq	r0, r0, #4
 808c5b2:	3304      	addeq	r3, #4
 808c5b4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808c5b8:	bf04      	itt	eq
 808c5ba:	0080      	lsleq	r0, r0, #2
 808c5bc:	3302      	addeq	r3, #2
 808c5be:	2800      	cmp	r0, #0
 808c5c0:	db03      	blt.n	808c5ca <__hi0bits+0x38>
 808c5c2:	0042      	lsls	r2, r0, #1
 808c5c4:	d503      	bpl.n	808c5ce <__hi0bits+0x3c>
 808c5c6:	1c58      	adds	r0, r3, #1
 808c5c8:	4770      	bx	lr
 808c5ca:	4618      	mov	r0, r3
 808c5cc:	4770      	bx	lr
 808c5ce:	2020      	movs	r0, #32
 808c5d0:	4770      	bx	lr

0808c5d2 <__lo0bits>:
 808c5d2:	6803      	ldr	r3, [r0, #0]
 808c5d4:	f013 0207 	ands.w	r2, r3, #7
 808c5d8:	d00b      	beq.n	808c5f2 <__lo0bits+0x20>
 808c5da:	07d9      	lsls	r1, r3, #31
 808c5dc:	d422      	bmi.n	808c624 <__lo0bits+0x52>
 808c5de:	079a      	lsls	r2, r3, #30
 808c5e0:	bf4b      	itete	mi
 808c5e2:	085b      	lsrmi	r3, r3, #1
 808c5e4:	089b      	lsrpl	r3, r3, #2
 808c5e6:	6003      	strmi	r3, [r0, #0]
 808c5e8:	6003      	strpl	r3, [r0, #0]
 808c5ea:	bf4c      	ite	mi
 808c5ec:	2001      	movmi	r0, #1
 808c5ee:	2002      	movpl	r0, #2
 808c5f0:	4770      	bx	lr
 808c5f2:	b299      	uxth	r1, r3
 808c5f4:	b909      	cbnz	r1, 808c5fa <__lo0bits+0x28>
 808c5f6:	0c1b      	lsrs	r3, r3, #16
 808c5f8:	2210      	movs	r2, #16
 808c5fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 808c5fe:	bf04      	itt	eq
 808c600:	0a1b      	lsreq	r3, r3, #8
 808c602:	3208      	addeq	r2, #8
 808c604:	0719      	lsls	r1, r3, #28
 808c606:	bf04      	itt	eq
 808c608:	091b      	lsreq	r3, r3, #4
 808c60a:	3204      	addeq	r2, #4
 808c60c:	0799      	lsls	r1, r3, #30
 808c60e:	bf04      	itt	eq
 808c610:	089b      	lsreq	r3, r3, #2
 808c612:	3202      	addeq	r2, #2
 808c614:	07d9      	lsls	r1, r3, #31
 808c616:	d402      	bmi.n	808c61e <__lo0bits+0x4c>
 808c618:	085b      	lsrs	r3, r3, #1
 808c61a:	d005      	beq.n	808c628 <__lo0bits+0x56>
 808c61c:	3201      	adds	r2, #1
 808c61e:	6003      	str	r3, [r0, #0]
 808c620:	4610      	mov	r0, r2
 808c622:	4770      	bx	lr
 808c624:	2000      	movs	r0, #0
 808c626:	4770      	bx	lr
 808c628:	2020      	movs	r0, #32
 808c62a:	4770      	bx	lr

0808c62c <__i2b>:
 808c62c:	b510      	push	{r4, lr}
 808c62e:	460c      	mov	r4, r1
 808c630:	2101      	movs	r1, #1
 808c632:	f7ff fee9 	bl	808c408 <_Balloc>
 808c636:	2201      	movs	r2, #1
 808c638:	6144      	str	r4, [r0, #20]
 808c63a:	6102      	str	r2, [r0, #16]
 808c63c:	bd10      	pop	{r4, pc}

0808c63e <__multiply>:
 808c63e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c642:	4614      	mov	r4, r2
 808c644:	690a      	ldr	r2, [r1, #16]
 808c646:	6923      	ldr	r3, [r4, #16]
 808c648:	4688      	mov	r8, r1
 808c64a:	429a      	cmp	r2, r3
 808c64c:	bfbe      	ittt	lt
 808c64e:	460b      	movlt	r3, r1
 808c650:	46a0      	movlt	r8, r4
 808c652:	461c      	movlt	r4, r3
 808c654:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808c658:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808c65c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c660:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808c664:	eb07 0609 	add.w	r6, r7, r9
 808c668:	429e      	cmp	r6, r3
 808c66a:	bfc8      	it	gt
 808c66c:	3101      	addgt	r1, #1
 808c66e:	f7ff fecb 	bl	808c408 <_Balloc>
 808c672:	f100 0514 	add.w	r5, r0, #20
 808c676:	462b      	mov	r3, r5
 808c678:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808c67c:	2200      	movs	r2, #0
 808c67e:	4563      	cmp	r3, ip
 808c680:	d202      	bcs.n	808c688 <__multiply+0x4a>
 808c682:	f843 2b04 	str.w	r2, [r3], #4
 808c686:	e7fa      	b.n	808c67e <__multiply+0x40>
 808c688:	f104 0214 	add.w	r2, r4, #20
 808c68c:	f108 0114 	add.w	r1, r8, #20
 808c690:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808c694:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808c698:	9300      	str	r3, [sp, #0]
 808c69a:	9b00      	ldr	r3, [sp, #0]
 808c69c:	9201      	str	r2, [sp, #4]
 808c69e:	4293      	cmp	r3, r2
 808c6a0:	d957      	bls.n	808c752 <__multiply+0x114>
 808c6a2:	f8b2 b000 	ldrh.w	fp, [r2]
 808c6a6:	f1bb 0f00 	cmp.w	fp, #0
 808c6aa:	d023      	beq.n	808c6f4 <__multiply+0xb6>
 808c6ac:	4689      	mov	r9, r1
 808c6ae:	46ae      	mov	lr, r5
 808c6b0:	f04f 0800 	mov.w	r8, #0
 808c6b4:	f859 4b04 	ldr.w	r4, [r9], #4
 808c6b8:	f8be a000 	ldrh.w	sl, [lr]
 808c6bc:	b2a3      	uxth	r3, r4
 808c6be:	fb0b a303 	mla	r3, fp, r3, sl
 808c6c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808c6c6:	f8de 4000 	ldr.w	r4, [lr]
 808c6ca:	4443      	add	r3, r8
 808c6cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808c6d0:	fb0b 840a 	mla	r4, fp, sl, r8
 808c6d4:	46f2      	mov	sl, lr
 808c6d6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808c6da:	b29b      	uxth	r3, r3
 808c6dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808c6e0:	454f      	cmp	r7, r9
 808c6e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808c6e6:	f84a 3b04 	str.w	r3, [sl], #4
 808c6ea:	d901      	bls.n	808c6f0 <__multiply+0xb2>
 808c6ec:	46d6      	mov	lr, sl
 808c6ee:	e7e1      	b.n	808c6b4 <__multiply+0x76>
 808c6f0:	f8ce 8004 	str.w	r8, [lr, #4]
 808c6f4:	9b01      	ldr	r3, [sp, #4]
 808c6f6:	3204      	adds	r2, #4
 808c6f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808c6fc:	f1ba 0f00 	cmp.w	sl, #0
 808c700:	d021      	beq.n	808c746 <__multiply+0x108>
 808c702:	462c      	mov	r4, r5
 808c704:	4689      	mov	r9, r1
 808c706:	682b      	ldr	r3, [r5, #0]
 808c708:	f04f 0800 	mov.w	r8, #0
 808c70c:	f8b9 e000 	ldrh.w	lr, [r9]
 808c710:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808c714:	b29b      	uxth	r3, r3
 808c716:	fb0a be0e 	mla	lr, sl, lr, fp
 808c71a:	46a3      	mov	fp, r4
 808c71c:	44f0      	add	r8, lr
 808c71e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808c722:	f84b 3b04 	str.w	r3, [fp], #4
 808c726:	f859 3b04 	ldr.w	r3, [r9], #4
 808c72a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808c72e:	0c1b      	lsrs	r3, r3, #16
 808c730:	fb0a e303 	mla	r3, sl, r3, lr
 808c734:	454f      	cmp	r7, r9
 808c736:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808c73a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808c73e:	d901      	bls.n	808c744 <__multiply+0x106>
 808c740:	465c      	mov	r4, fp
 808c742:	e7e3      	b.n	808c70c <__multiply+0xce>
 808c744:	6063      	str	r3, [r4, #4]
 808c746:	3504      	adds	r5, #4
 808c748:	e7a7      	b.n	808c69a <__multiply+0x5c>
 808c74a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808c74e:	b913      	cbnz	r3, 808c756 <__multiply+0x118>
 808c750:	3e01      	subs	r6, #1
 808c752:	2e00      	cmp	r6, #0
 808c754:	dcf9      	bgt.n	808c74a <__multiply+0x10c>
 808c756:	6106      	str	r6, [r0, #16]
 808c758:	b003      	add	sp, #12
 808c75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808c760 <__pow5mult>:
 808c760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c764:	4615      	mov	r5, r2
 808c766:	f012 0203 	ands.w	r2, r2, #3
 808c76a:	4606      	mov	r6, r0
 808c76c:	460f      	mov	r7, r1
 808c76e:	d007      	beq.n	808c780 <__pow5mult+0x20>
 808c770:	4c21      	ldr	r4, [pc, #132]	; (808c7f8 <__pow5mult+0x98>)
 808c772:	3a01      	subs	r2, #1
 808c774:	2300      	movs	r3, #0
 808c776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808c77a:	f7ff fe91 	bl	808c4a0 <__multadd>
 808c77e:	4607      	mov	r7, r0
 808c780:	10ad      	asrs	r5, r5, #2
 808c782:	d036      	beq.n	808c7f2 <__pow5mult+0x92>
 808c784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808c786:	b93c      	cbnz	r4, 808c798 <__pow5mult+0x38>
 808c788:	2010      	movs	r0, #16
 808c78a:	f7f9 f88d 	bl	80858a8 <malloc>
 808c78e:	6270      	str	r0, [r6, #36]	; 0x24
 808c790:	6044      	str	r4, [r0, #4]
 808c792:	6084      	str	r4, [r0, #8]
 808c794:	6004      	str	r4, [r0, #0]
 808c796:	60c4      	str	r4, [r0, #12]
 808c798:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808c79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808c7a0:	b94c      	cbnz	r4, 808c7b6 <__pow5mult+0x56>
 808c7a2:	f240 2171 	movw	r1, #625	; 0x271
 808c7a6:	4630      	mov	r0, r6
 808c7a8:	f7ff ff40 	bl	808c62c <__i2b>
 808c7ac:	4604      	mov	r4, r0
 808c7ae:	2300      	movs	r3, #0
 808c7b0:	f8c8 0008 	str.w	r0, [r8, #8]
 808c7b4:	6003      	str	r3, [r0, #0]
 808c7b6:	f04f 0800 	mov.w	r8, #0
 808c7ba:	07eb      	lsls	r3, r5, #31
 808c7bc:	d50a      	bpl.n	808c7d4 <__pow5mult+0x74>
 808c7be:	4639      	mov	r1, r7
 808c7c0:	4622      	mov	r2, r4
 808c7c2:	4630      	mov	r0, r6
 808c7c4:	f7ff ff3b 	bl	808c63e <__multiply>
 808c7c8:	4681      	mov	r9, r0
 808c7ca:	4639      	mov	r1, r7
 808c7cc:	4630      	mov	r0, r6
 808c7ce:	f7ff fe50 	bl	808c472 <_Bfree>
 808c7d2:	464f      	mov	r7, r9
 808c7d4:	106d      	asrs	r5, r5, #1
 808c7d6:	d00c      	beq.n	808c7f2 <__pow5mult+0x92>
 808c7d8:	6820      	ldr	r0, [r4, #0]
 808c7da:	b108      	cbz	r0, 808c7e0 <__pow5mult+0x80>
 808c7dc:	4604      	mov	r4, r0
 808c7de:	e7ec      	b.n	808c7ba <__pow5mult+0x5a>
 808c7e0:	4622      	mov	r2, r4
 808c7e2:	4621      	mov	r1, r4
 808c7e4:	4630      	mov	r0, r6
 808c7e6:	f7ff ff2a 	bl	808c63e <__multiply>
 808c7ea:	6020      	str	r0, [r4, #0]
 808c7ec:	f8c0 8000 	str.w	r8, [r0]
 808c7f0:	e7f4      	b.n	808c7dc <__pow5mult+0x7c>
 808c7f2:	4638      	mov	r0, r7
 808c7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c7f8:	0808e268 	.word	0x0808e268

0808c7fc <__lshift>:
 808c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c800:	460c      	mov	r4, r1
 808c802:	4607      	mov	r7, r0
 808c804:	4691      	mov	r9, r2
 808c806:	6926      	ldr	r6, [r4, #16]
 808c808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808c80c:	4456      	add	r6, sl
 808c80e:	6849      	ldr	r1, [r1, #4]
 808c810:	68a3      	ldr	r3, [r4, #8]
 808c812:	1c75      	adds	r5, r6, #1
 808c814:	42ab      	cmp	r3, r5
 808c816:	da02      	bge.n	808c81e <__lshift+0x22>
 808c818:	3101      	adds	r1, #1
 808c81a:	005b      	lsls	r3, r3, #1
 808c81c:	e7fa      	b.n	808c814 <__lshift+0x18>
 808c81e:	4638      	mov	r0, r7
 808c820:	f7ff fdf2 	bl	808c408 <_Balloc>
 808c824:	2300      	movs	r3, #0
 808c826:	4680      	mov	r8, r0
 808c828:	461a      	mov	r2, r3
 808c82a:	f100 0114 	add.w	r1, r0, #20
 808c82e:	4553      	cmp	r3, sl
 808c830:	da03      	bge.n	808c83a <__lshift+0x3e>
 808c832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808c836:	3301      	adds	r3, #1
 808c838:	e7f9      	b.n	808c82e <__lshift+0x32>
 808c83a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808c83e:	6920      	ldr	r0, [r4, #16]
 808c840:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808c844:	f019 091f 	ands.w	r9, r9, #31
 808c848:	f104 0114 	add.w	r1, r4, #20
 808c84c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808c850:	d014      	beq.n	808c87c <__lshift+0x80>
 808c852:	f1c9 0c20 	rsb	ip, r9, #32
 808c856:	2200      	movs	r2, #0
 808c858:	6808      	ldr	r0, [r1, #0]
 808c85a:	469a      	mov	sl, r3
 808c85c:	fa00 f009 	lsl.w	r0, r0, r9
 808c860:	4302      	orrs	r2, r0
 808c862:	f843 2b04 	str.w	r2, [r3], #4
 808c866:	f851 2b04 	ldr.w	r2, [r1], #4
 808c86a:	458e      	cmp	lr, r1
 808c86c:	fa22 f20c 	lsr.w	r2, r2, ip
 808c870:	d8f2      	bhi.n	808c858 <__lshift+0x5c>
 808c872:	f8ca 2004 	str.w	r2, [sl, #4]
 808c876:	b142      	cbz	r2, 808c88a <__lshift+0x8e>
 808c878:	1cb5      	adds	r5, r6, #2
 808c87a:	e006      	b.n	808c88a <__lshift+0x8e>
 808c87c:	3b04      	subs	r3, #4
 808c87e:	f851 2b04 	ldr.w	r2, [r1], #4
 808c882:	458e      	cmp	lr, r1
 808c884:	f843 2f04 	str.w	r2, [r3, #4]!
 808c888:	d8f9      	bhi.n	808c87e <__lshift+0x82>
 808c88a:	3d01      	subs	r5, #1
 808c88c:	4638      	mov	r0, r7
 808c88e:	f8c8 5010 	str.w	r5, [r8, #16]
 808c892:	4621      	mov	r1, r4
 808c894:	f7ff fded 	bl	808c472 <_Bfree>
 808c898:	4640      	mov	r0, r8
 808c89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808c89e <__mcmp>:
 808c89e:	6903      	ldr	r3, [r0, #16]
 808c8a0:	690a      	ldr	r2, [r1, #16]
 808c8a2:	b510      	push	{r4, lr}
 808c8a4:	1a9b      	subs	r3, r3, r2
 808c8a6:	d111      	bne.n	808c8cc <__mcmp+0x2e>
 808c8a8:	0092      	lsls	r2, r2, #2
 808c8aa:	3014      	adds	r0, #20
 808c8ac:	3114      	adds	r1, #20
 808c8ae:	1883      	adds	r3, r0, r2
 808c8b0:	440a      	add	r2, r1
 808c8b2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808c8b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808c8ba:	428c      	cmp	r4, r1
 808c8bc:	d002      	beq.n	808c8c4 <__mcmp+0x26>
 808c8be:	d307      	bcc.n	808c8d0 <__mcmp+0x32>
 808c8c0:	2001      	movs	r0, #1
 808c8c2:	bd10      	pop	{r4, pc}
 808c8c4:	4298      	cmp	r0, r3
 808c8c6:	d3f4      	bcc.n	808c8b2 <__mcmp+0x14>
 808c8c8:	2000      	movs	r0, #0
 808c8ca:	bd10      	pop	{r4, pc}
 808c8cc:	4618      	mov	r0, r3
 808c8ce:	bd10      	pop	{r4, pc}
 808c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 808c8d4:	bd10      	pop	{r4, pc}

0808c8d6 <__mdiff>:
 808c8d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c8da:	460c      	mov	r4, r1
 808c8dc:	4607      	mov	r7, r0
 808c8de:	4611      	mov	r1, r2
 808c8e0:	4620      	mov	r0, r4
 808c8e2:	4615      	mov	r5, r2
 808c8e4:	f7ff ffdb 	bl	808c89e <__mcmp>
 808c8e8:	1e06      	subs	r6, r0, #0
 808c8ea:	d108      	bne.n	808c8fe <__mdiff+0x28>
 808c8ec:	4631      	mov	r1, r6
 808c8ee:	4638      	mov	r0, r7
 808c8f0:	f7ff fd8a 	bl	808c408 <_Balloc>
 808c8f4:	2301      	movs	r3, #1
 808c8f6:	6103      	str	r3, [r0, #16]
 808c8f8:	6146      	str	r6, [r0, #20]
 808c8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c8fe:	bfbc      	itt	lt
 808c900:	4623      	movlt	r3, r4
 808c902:	462c      	movlt	r4, r5
 808c904:	4638      	mov	r0, r7
 808c906:	6861      	ldr	r1, [r4, #4]
 808c908:	bfba      	itte	lt
 808c90a:	461d      	movlt	r5, r3
 808c90c:	2601      	movlt	r6, #1
 808c90e:	2600      	movge	r6, #0
 808c910:	f7ff fd7a 	bl	808c408 <_Balloc>
 808c914:	692b      	ldr	r3, [r5, #16]
 808c916:	60c6      	str	r6, [r0, #12]
 808c918:	6926      	ldr	r6, [r4, #16]
 808c91a:	f105 0914 	add.w	r9, r5, #20
 808c91e:	f104 0114 	add.w	r1, r4, #20
 808c922:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808c926:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808c92a:	f100 0514 	add.w	r5, r0, #20
 808c92e:	f04f 0c00 	mov.w	ip, #0
 808c932:	f851 2b04 	ldr.w	r2, [r1], #4
 808c936:	f859 4b04 	ldr.w	r4, [r9], #4
 808c93a:	b293      	uxth	r3, r2
 808c93c:	449c      	add	ip, r3
 808c93e:	b2a3      	uxth	r3, r4
 808c940:	0c24      	lsrs	r4, r4, #16
 808c942:	ebc3 030c 	rsb	r3, r3, ip
 808c946:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808c94a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808c94e:	b29b      	uxth	r3, r3
 808c950:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808c954:	45c8      	cmp	r8, r9
 808c956:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808c95a:	468e      	mov	lr, r1
 808c95c:	f845 2b04 	str.w	r2, [r5], #4
 808c960:	d8e7      	bhi.n	808c932 <__mdiff+0x5c>
 808c962:	45be      	cmp	lr, r7
 808c964:	d20e      	bcs.n	808c984 <__mdiff+0xae>
 808c966:	f85e 1b04 	ldr.w	r1, [lr], #4
 808c96a:	b28a      	uxth	r2, r1
 808c96c:	4462      	add	r2, ip
 808c96e:	1413      	asrs	r3, r2, #16
 808c970:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808c974:	b292      	uxth	r2, r2
 808c976:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808c97a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808c97e:	f845 2b04 	str.w	r2, [r5], #4
 808c982:	e7ee      	b.n	808c962 <__mdiff+0x8c>
 808c984:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808c988:	b90b      	cbnz	r3, 808c98e <__mdiff+0xb8>
 808c98a:	3e01      	subs	r6, #1
 808c98c:	e7fa      	b.n	808c984 <__mdiff+0xae>
 808c98e:	6106      	str	r6, [r0, #16]
 808c990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808c994 <__ulp>:
 808c994:	4b10      	ldr	r3, [pc, #64]	; (808c9d8 <__ulp+0x44>)
 808c996:	400b      	ands	r3, r1
 808c998:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808c99c:	2b00      	cmp	r3, #0
 808c99e:	dd02      	ble.n	808c9a6 <__ulp+0x12>
 808c9a0:	2000      	movs	r0, #0
 808c9a2:	4619      	mov	r1, r3
 808c9a4:	4770      	bx	lr
 808c9a6:	425b      	negs	r3, r3
 808c9a8:	151b      	asrs	r3, r3, #20
 808c9aa:	2b13      	cmp	r3, #19
 808c9ac:	f04f 0000 	mov.w	r0, #0
 808c9b0:	f04f 0100 	mov.w	r1, #0
 808c9b4:	dc04      	bgt.n	808c9c0 <__ulp+0x2c>
 808c9b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808c9ba:	fa42 f103 	asr.w	r1, r2, r3
 808c9be:	4770      	bx	lr
 808c9c0:	3b14      	subs	r3, #20
 808c9c2:	2b1e      	cmp	r3, #30
 808c9c4:	f04f 0201 	mov.w	r2, #1
 808c9c8:	bfce      	itee	gt
 808c9ca:	4613      	movgt	r3, r2
 808c9cc:	f1c3 031f 	rsble	r3, r3, #31
 808c9d0:	fa02 f303 	lslle.w	r3, r2, r3
 808c9d4:	4618      	mov	r0, r3
 808c9d6:	4770      	bx	lr
 808c9d8:	7ff00000 	.word	0x7ff00000

0808c9dc <__b2d>:
 808c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c9de:	6905      	ldr	r5, [r0, #16]
 808c9e0:	f100 0614 	add.w	r6, r0, #20
 808c9e4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808c9e8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808c9ec:	1f2f      	subs	r7, r5, #4
 808c9ee:	4620      	mov	r0, r4
 808c9f0:	f7ff fdcf 	bl	808c592 <__hi0bits>
 808c9f4:	f1c0 0320 	rsb	r3, r0, #32
 808c9f8:	280a      	cmp	r0, #10
 808c9fa:	600b      	str	r3, [r1, #0]
 808c9fc:	dc14      	bgt.n	808ca28 <__b2d+0x4c>
 808c9fe:	f1c0 0e0b 	rsb	lr, r0, #11
 808ca02:	fa24 f10e 	lsr.w	r1, r4, lr
 808ca06:	42be      	cmp	r6, r7
 808ca08:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808ca0c:	bf34      	ite	cc
 808ca0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ca12:	2100      	movcs	r1, #0
 808ca14:	3015      	adds	r0, #21
 808ca16:	fa04 f000 	lsl.w	r0, r4, r0
 808ca1a:	fa21 f10e 	lsr.w	r1, r1, lr
 808ca1e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808ca22:	ea40 0201 	orr.w	r2, r0, r1
 808ca26:	e023      	b.n	808ca70 <__b2d+0x94>
 808ca28:	42be      	cmp	r6, r7
 808ca2a:	bf3a      	itte	cc
 808ca2c:	f1a5 0708 	subcc.w	r7, r5, #8
 808ca30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ca34:	2100      	movcs	r1, #0
 808ca36:	380b      	subs	r0, #11
 808ca38:	d015      	beq.n	808ca66 <__b2d+0x8a>
 808ca3a:	4084      	lsls	r4, r0
 808ca3c:	f1c0 0520 	rsb	r5, r0, #32
 808ca40:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808ca44:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808ca48:	42b7      	cmp	r7, r6
 808ca4a:	fa21 fe05 	lsr.w	lr, r1, r5
 808ca4e:	ea44 030e 	orr.w	r3, r4, lr
 808ca52:	bf8c      	ite	hi
 808ca54:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808ca58:	2400      	movls	r4, #0
 808ca5a:	fa01 f000 	lsl.w	r0, r1, r0
 808ca5e:	40ec      	lsrs	r4, r5
 808ca60:	ea40 0204 	orr.w	r2, r0, r4
 808ca64:	e004      	b.n	808ca70 <__b2d+0x94>
 808ca66:	460a      	mov	r2, r1
 808ca68:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808ca6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808ca70:	4610      	mov	r0, r2
 808ca72:	4619      	mov	r1, r3
 808ca74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ca76 <__d2b>:
 808ca76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808ca7a:	461c      	mov	r4, r3
 808ca7c:	2101      	movs	r1, #1
 808ca7e:	4690      	mov	r8, r2
 808ca80:	9e08      	ldr	r6, [sp, #32]
 808ca82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ca84:	f7ff fcc0 	bl	808c408 <_Balloc>
 808ca88:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808ca8c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808ca90:	4607      	mov	r7, r0
 808ca92:	b10c      	cbz	r4, 808ca98 <__d2b+0x22>
 808ca94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808ca98:	9201      	str	r2, [sp, #4]
 808ca9a:	f1b8 0f00 	cmp.w	r8, #0
 808ca9e:	d019      	beq.n	808cad4 <__d2b+0x5e>
 808caa0:	a802      	add	r0, sp, #8
 808caa2:	f840 8d08 	str.w	r8, [r0, #-8]!
 808caa6:	f7ff fd94 	bl	808c5d2 <__lo0bits>
 808caaa:	9b00      	ldr	r3, [sp, #0]
 808caac:	b148      	cbz	r0, 808cac2 <__d2b+0x4c>
 808caae:	9a01      	ldr	r2, [sp, #4]
 808cab0:	f1c0 0120 	rsb	r1, r0, #32
 808cab4:	fa02 f101 	lsl.w	r1, r2, r1
 808cab8:	430b      	orrs	r3, r1
 808caba:	40c2      	lsrs	r2, r0
 808cabc:	617b      	str	r3, [r7, #20]
 808cabe:	9201      	str	r2, [sp, #4]
 808cac0:	e000      	b.n	808cac4 <__d2b+0x4e>
 808cac2:	617b      	str	r3, [r7, #20]
 808cac4:	9b01      	ldr	r3, [sp, #4]
 808cac6:	2b00      	cmp	r3, #0
 808cac8:	bf14      	ite	ne
 808caca:	2102      	movne	r1, #2
 808cacc:	2101      	moveq	r1, #1
 808cace:	61bb      	str	r3, [r7, #24]
 808cad0:	6139      	str	r1, [r7, #16]
 808cad2:	e007      	b.n	808cae4 <__d2b+0x6e>
 808cad4:	a801      	add	r0, sp, #4
 808cad6:	f7ff fd7c 	bl	808c5d2 <__lo0bits>
 808cada:	9b01      	ldr	r3, [sp, #4]
 808cadc:	2101      	movs	r1, #1
 808cade:	617b      	str	r3, [r7, #20]
 808cae0:	6139      	str	r1, [r7, #16]
 808cae2:	3020      	adds	r0, #32
 808cae4:	b134      	cbz	r4, 808caf4 <__d2b+0x7e>
 808cae6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808caea:	4404      	add	r4, r0
 808caec:	6034      	str	r4, [r6, #0]
 808caee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808caf2:	e009      	b.n	808cb08 <__d2b+0x92>
 808caf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808caf8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808cafc:	6030      	str	r0, [r6, #0]
 808cafe:	6918      	ldr	r0, [r3, #16]
 808cb00:	f7ff fd47 	bl	808c592 <__hi0bits>
 808cb04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808cb08:	6028      	str	r0, [r5, #0]
 808cb0a:	4638      	mov	r0, r7
 808cb0c:	b002      	add	sp, #8
 808cb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808cb12 <__ratio>:
 808cb12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808cb16:	4688      	mov	r8, r1
 808cb18:	4669      	mov	r1, sp
 808cb1a:	4681      	mov	r9, r0
 808cb1c:	f7ff ff5e 	bl	808c9dc <__b2d>
 808cb20:	460d      	mov	r5, r1
 808cb22:	4604      	mov	r4, r0
 808cb24:	a901      	add	r1, sp, #4
 808cb26:	4640      	mov	r0, r8
 808cb28:	f7ff ff58 	bl	808c9dc <__b2d>
 808cb2c:	460f      	mov	r7, r1
 808cb2e:	4606      	mov	r6, r0
 808cb30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808cb34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808cb38:	4620      	mov	r0, r4
 808cb3a:	1a9a      	subs	r2, r3, r2
 808cb3c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808cb40:	1ac9      	subs	r1, r1, r3
 808cb42:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808cb46:	2b00      	cmp	r3, #0
 808cb48:	bfcc      	ite	gt
 808cb4a:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808cb4e:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808cb52:	4632      	mov	r2, r6
 808cb54:	463b      	mov	r3, r7
 808cb56:	4629      	mov	r1, r5
 808cb58:	f7fc f952 	bl	8088e00 <__aeabi_ddiv>
 808cb5c:	b003      	add	sp, #12
 808cb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808cb62 <__copybits>:
 808cb62:	3901      	subs	r1, #1
 808cb64:	b510      	push	{r4, lr}
 808cb66:	1149      	asrs	r1, r1, #5
 808cb68:	6914      	ldr	r4, [r2, #16]
 808cb6a:	3101      	adds	r1, #1
 808cb6c:	f102 0314 	add.w	r3, r2, #20
 808cb70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808cb74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808cb78:	42a3      	cmp	r3, r4
 808cb7a:	4602      	mov	r2, r0
 808cb7c:	d204      	bcs.n	808cb88 <__copybits+0x26>
 808cb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 808cb82:	f840 2b04 	str.w	r2, [r0], #4
 808cb86:	e7f7      	b.n	808cb78 <__copybits+0x16>
 808cb88:	2300      	movs	r3, #0
 808cb8a:	428a      	cmp	r2, r1
 808cb8c:	d202      	bcs.n	808cb94 <__copybits+0x32>
 808cb8e:	f842 3b04 	str.w	r3, [r2], #4
 808cb92:	e7fa      	b.n	808cb8a <__copybits+0x28>
 808cb94:	bd10      	pop	{r4, pc}

0808cb96 <__any_on>:
 808cb96:	f100 0214 	add.w	r2, r0, #20
 808cb9a:	6900      	ldr	r0, [r0, #16]
 808cb9c:	114b      	asrs	r3, r1, #5
 808cb9e:	4298      	cmp	r0, r3
 808cba0:	b510      	push	{r4, lr}
 808cba2:	db0c      	blt.n	808cbbe <__any_on+0x28>
 808cba4:	dd0c      	ble.n	808cbc0 <__any_on+0x2a>
 808cba6:	f011 011f 	ands.w	r1, r1, #31
 808cbaa:	d009      	beq.n	808cbc0 <__any_on+0x2a>
 808cbac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808cbb0:	fa24 f001 	lsr.w	r0, r4, r1
 808cbb4:	fa00 f101 	lsl.w	r1, r0, r1
 808cbb8:	428c      	cmp	r4, r1
 808cbba:	d10c      	bne.n	808cbd6 <__any_on+0x40>
 808cbbc:	e000      	b.n	808cbc0 <__any_on+0x2a>
 808cbbe:	4603      	mov	r3, r0
 808cbc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808cbc4:	4293      	cmp	r3, r2
 808cbc6:	d904      	bls.n	808cbd2 <__any_on+0x3c>
 808cbc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808cbcc:	2900      	cmp	r1, #0
 808cbce:	d0f9      	beq.n	808cbc4 <__any_on+0x2e>
 808cbd0:	e001      	b.n	808cbd6 <__any_on+0x40>
 808cbd2:	2000      	movs	r0, #0
 808cbd4:	bd10      	pop	{r4, pc}
 808cbd6:	2001      	movs	r0, #1
 808cbd8:	bd10      	pop	{r4, pc}

0808cbda <_calloc_r>:
 808cbda:	b538      	push	{r3, r4, r5, lr}
 808cbdc:	fb02 f401 	mul.w	r4, r2, r1
 808cbe0:	4621      	mov	r1, r4
 808cbe2:	f7f8 feb1 	bl	8085948 <_malloc_r>
 808cbe6:	4605      	mov	r5, r0
 808cbe8:	b118      	cbz	r0, 808cbf2 <_calloc_r+0x18>
 808cbea:	4622      	mov	r2, r4
 808cbec:	2100      	movs	r1, #0
 808cbee:	f7fd f94b 	bl	8089e88 <memset>
 808cbf2:	4628      	mov	r0, r5
 808cbf4:	bd38      	pop	{r3, r4, r5, pc}

0808cbf6 <__env_lock>:
 808cbf6:	4770      	bx	lr

0808cbf8 <__env_unlock>:
 808cbf8:	4770      	bx	lr

0808cbfa <link_code_end>:
	...

0808cbfc <dynalib_user>:
 808cbfc:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808cc0c:	0000 0000                                   ....

0808cc10 <_ZTVN8particle13__SPISettingsE>:
	...
 808cc18:	0121 0808                                   !...

0808cc1c <_ZTV6SdFile>:
	...
 808cc24:	00db 0808 010b 0808 019d 0808 0119 0808     ................
 808cc34:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
 808cc44:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
 808cc54:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
 808cc64:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
 808cc74:	2545 3e64 6100 7070 6477 0074 6164 6574     E%d>.appwdt.date
 808cc84:	6974 656d 202c 3174 202c 3274 202c 7053     time, t1, t2, Sp
 808cc94:	435f 2c20 7641 6c6f 7374 202c 6172 6e69     _C ,Avolts, rain
 808cca4:	202c 6564 7470 2c68 5320 436f 202c 6f76     , depth, SoC, vo
 808ccb4:	746c 0073 6f4e 0020 6559 2073 6c00 736f     lts.No .Yes .los
 808ccc4:	2d74 6974 656d 3030 2e30 7363 0076 005f     t-time000.csv._.
 808ccd4:	5925 252d 0064 6620 6c69 6e65 6d61 0065     %Y-%d. filename.
 808cce4:	7277 7469 2065 7265 6f72 0072 6f4c 0067     write error.Log.
 808ccf4:	4453 772d 6972 6574 7720 726f 656b 3a64     SD-write worked:
 808cd04:	2520 0073 6152 6e69 4800 6d75 6469 7469      %s.Rain.Humidit
 808cd14:	5f79 0025 6941 2d72 6554 706d 435f 5000     y_%.Air-Temp_C.P
 808cd24:	6572 7373 7275 5f65 5068 0041 3248 2d4f     ressure_hPA.H2O-
 808cd34:	6554 706d 435f 4800 4f32 685f 4150 4400     Temp_C.H2O_hPA.D
 808cd44:	7065 6874 695f 006e 6f56 746c 0073 4f53     epth_in.Volts.SO
 808cd54:	0043 7053 435f 6e6f 0064 2e41 6f76 746c     C.Sp_Cond.A.volt
 808cd64:	0073 202c 3025 2e35 6632 202c 3025 2e35     s., %05.2f, %05.
 808cd74:	6632 202c 3025 2e36 6631 202c 3025 2e35     2f, %06.1f, %05.
 808cd84:	6633 202c 3025 2e34 6630 202c 3025 2e36     3f, %04.0f, %06.
 808cd94:	6633 202c 3025 2e35 6632 202c 3025 2e34     3f, %05.2f, %04.
 808cda4:	6632 4300 6d61 7265 2061 6f46 6e75 3a64     2f.Camera Found:
 808cdb4:	4e00 206f 6163 656d 6172 6620 756f 646e     .No camera found
 808cdc4:	003f 6146 6c69 6465 7420 206f 6567 2074     ?.Failed to get 
 808cdd4:	6576 7372 6f69 006e 6e53 7061 6920 206e     version.Snap in 
 808cde4:	2031 6573 7363 2e2e 002e 6146 6c69 6465     1 secs....Failed
 808cdf4:	7420 206f 6e73 7061 0021 6950 7463 7275      to snap!.Pictur
 808ce04:	2065 6174 656b 216e 6c00 736f 2d74 6974     e taken!.lost-ti
 808ce14:	656d 3030 2e30 706a 0067 5925 252d 2d6d     me000.jpg.%Y-%m-
 808ce24:	6425 252d 2d48 4d25 2000 7962 6574 6920     %d-%H-%M. byte i
 808ce34:	616d 6567 202e 2000 736d 6520 616c 7370     mage. . ms elaps
 808ce44:	6465 4400 6669 6966 7563 746c 2079 6f63     ed.Difficulty co
 808ce54:	6e6e 6365 6974 676e 202e 6957 6c6c 7420     nnecting. Will t
 808ce64:	7972 6620 726f 3120 6d20 726f 2065 696d     ry for 1 more mi
 808ce74:	006e 7320 656c 7065 6e69 2067 6f66 2072     n. sleeping for 
 808ce84:	3225 2069 696d 756e 6574 2073 6f74 7720     %2i minutes to w
 808ce94:	6961 2074 6f66 2072 6562 7474 7265 7420     ait for better t
 808cea4:	6d69 2065 4400 6669 6966 7563 746c 2079     ime .Difficulty 
 808ceb4:	6f63 6e6e 6365 6974 676e 7320 656c 7065     connecting sleep
 808cec4:	6e69 0067 6170 7373 6465 7420 6568 4320     ing.passed the C
 808ced4:	6c65 756c 616c 2e72 6572 6461 2079 6574     ellular.ready te
 808cee4:	7473 6300 6e6f 656e 7463 6465 7000 7261     st.connected.par
 808cef4:	6974 6c63 0065 6543 6c6c 7551 6c61 4300     ticle.CellQual.C
 808cf04:	6c65 536c 7274 6e65 5300 7570 6e64 6b69     ellStren.Spudnik
 808cf14:	302d 6238 2500 2c73 7420 5f31 666f 7366     -08b.%s, t1_offs
 808cf24:	7465 202c 3274 6f5f 6666 6573 2c74 6b20     et, t2_offset, k
 808cf34:	635f 726f 6572 7463 6f69 2c6e 4120 762e     _correction, A.v
 808cf44:	6c6f 7374 202c 7457 6d65 2c70 4420 7065     olts, Wtemp, Dep
 808cf54:	6874 695f 2c6e 2520 3530 322e 2c66 2520     th_in, %05.2f, %
 808cf64:	3530 322e 2c66 2520 3530 322e 2c66 2520     05.2f, %05.2f, %
 808cf74:	3530 332e 2c66 2520 3530 322e 2c66 2520     05.3f, %05.2f, %
 808cf84:	3630 332e 0066 227b 7441 6d65 4370 3a22     06.3f.{"AtempC":
 808cf94:	2522 3530 322e 2266 222c 3248 744f 6d65     "%05.2f","H2Otem
 808cfa4:	2270 223a 3025 2e35 6632 2c22 5322 4370     p":"%05.2f","SpC
 808cfb4:	3a22 2522 3630 312e 2266 202c 4122 6f76     ":"%06.1f", "Avo
 808cfc4:	746c 2273 223a 3025 2e35 6633 2c22 7222     lts":"%05.3f","r
 808cfd4:	6961 226e 223a 3025 2e34 6630 2c22 6422     ain":"%04.0f","d
 808cfe4:	7065 6874 3a22 2522 3630 332e 2266 222c     epth":"%06.3f","
 808cff4:	4f53 2243 223a 3025 2e35 6632 2c22 7622     SOC":"%05.2f","v
 808d004:	6c6f 7374 3a22 2522 3430 322e 2266 007d     olts":"%04.2f"}.
 808d014:	6966 696e 6873 6465 7520 6c70 616f 6964     finished uploadi
 808d024:	676e 7500 6c70 616f 6564 2c64 7720 6c69     ng.uploaded, wil
 808d034:	206c 6c73 6565 2070 6e69 2520 6932 7320     l sleep in %2i s
 808d044:	6365 6e6f 7364 7300 656c 7065 6e69 2067     econds.sleeping 
 808d054:	3225 2069 696d 756e 6574 0073 6170 7472     %2i minutes.part
 808d064:	6369 656c 6f73 616c 3372 6330 2000 7325     iclesolar30c. %s
 808d074:	6f5f 5f6e 7325 6c00 6e6f 0067 6e69 6420     _on_%s.long.in d
 808d084:	6c65 7961 6954 656d 5000 7261 6974 6c63     elayTime.Particl
 808d094:	0065 6f63 6c75 2064 6f6e 2074 6966 646e     e.could not find
 808d0a4:	6220 656d 0031 624f 4469 746f 0073 6544      bme1.ObiDots.De
 808d0b4:	616c 0079 6e65 6964 676e 7320 7465 7075     lay.ending setup
 808d0c4:	4200 4642 2d46 324d 5958 4d7a 4849 786a     .BBFF-M2XYzMIHjx
 808d0d4:	4976 4765 306a 5768 3837 6850 7732 5145     vIeGj0hW78Ph2wEQ
 808d0e4:	7950 366c 4100 7474 6d65 7470 6e69 2067     Pyl6.Attempting 
 808d0f4:	6f74 7220 6365 6e6f 656e 7463 5400 7972     to reconnect.Try
 808d104:	6e69 2067 6f74 6320 6e6f 656e 7463 7420     ing to connect t
 808d114:	206f 2000 202c 7461 6574 706d 2074 756e     o . , attempt nu
 808d124:	626d 7265 203a 7400 6d69 6f65 7475 202c     mber: .timeout, 
 808d134:	6f63 6c75 2064 6f6e 2074 6572 6461 6120     could not read a
 808d144:	796e 7220 7365 6f70 736e 2065 7266 6d6f     ny response from
 808d154:	7420 6568 6820 736f 0074 6553 7672 7265      the host.Server
 808d164:	7327 7220 7365 6f70 736e 3a65 0a00 2d2d     's response:..--
 808d174:	2d2d 2d2d 2d2d 2d2d 5000 534f 0054 4b4f     --------.POST.OK
 808d184:	7c00 564c 007c 6150 6c79 616f 2064 6f66     .|LV|.Payload fo
 808d194:	2072 6572 7571 7365 3a74 0a00 2d2d 2d2d     r request:..----
 808d1a4:	4c00 0056 5245 4f52 2052 6f63 6c75 2064     .LV.ERROR could 
 808d1b4:	6f6e 2074 6f63 6e6e 6365 2074 6f74 7420     not connect to t
 808d1c4:	6568 7320 7265 6576 0072 6f43 6c75 2064     he server.Could 
 808d1d4:	6f6e 2074 6f63 6e6e 6365 2074 6f74 7420     not connect to t
 808d1e4:	6568 6820 736f 0074                         he host.

0808d1ec <_ZTV6UbiTCP>:
	...
 808d1f4:	2e81 0808 2d2d 0808 2b39 0808 6f59 2075     ....--..9+..You 
 808d204:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
 808d214:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
 808d224:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
 808d234:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
 808d244:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
 808d254:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
 808d264:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
 808d274:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
 808d284:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
 808d294:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
 808d2a4:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
 808d2b4:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
 808d2c4:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
 808d2d4:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
 808d2e4:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
 808d2f4:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
 808d304:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
 808d314:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
 808d324:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
 808d334:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
 808d344:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
 808d354:	474e 205d 6c70 6165 6573 6320 6f68 736f     NG] please choos
 808d364:	2065 2061 6964 6666 7265 6e65 2074 6c63     e a different cl
 808d374:	756f 2064 7270 746f 636f 6c6f 6f20 2066     oud protocol of 
 808d384:	654d 6873 6920 206e 6874 2065 6255 6469     Mesh in the Ubid
 808d394:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
 808d3a4:	575b 5241 494e 474e 205d 6f59 7275 6220     [WARNING] Your b
 808d3b4:	616f 6472 6420 656f 2073 6f6e 2074 7573     oard does not su
 808d3c4:	7070 726f 2074 6874 2065 656d 6873 7550     pport the meshPu
 808d3d4:	6c62 7369 5468 556f 6962 6f64 7374 2928     blishToUbidots()
 808d3e4:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808d3f4:	205d 6f59 7275 6220 616f 6472 6420 656f     ] Your board doe
 808d404:	2073 6f6e 2074 7573 7070 726f 2074 6874     s not support th
 808d414:	2065 656d 6873 6f4c 706f 2928 6d20 7465     e meshLoop() met
 808d424:	6f68 0064 575b 5241 494e 474e 205d 6f59     hod.[WARNING] Yo
 808d434:	7275 6220 616f 6472 6420 656f 2073 6f6e     ur board does no
 808d444:	2074 7573 7070 726f 2074 6874 2065 6573     t support the se
 808d454:	4374 6f6c 6475 7250 746f 636f 6c6f 2928     tCloudProtocol()
 808d464:	6d20 7465 6f68 0064 575b 5241 494e 474e      method.[WARNING
 808d474:	205d 6854 2065 654d 6873 5020 6f72 6f74     ] The Mesh Proto
 808d484:	6f63 206c 7369 6e20 746f 7320 7075 6f70     col is not suppo
 808d494:	7472 6465 6920 206e 6874 7369 6420 7665     rted in this dev
 808d4a4:	6369 2065 6f66 2072 6573 646e 6e69 2067     ice for sending 
 808d4b4:	6164 6174 5b00 6157 6e72 6e69 5d67 5420     data.[Warning] T
 808d4c4:	206f 6572 7274 6569 6576 6420 7461 2c61     o retrieve data,
 808d4d4:	7020 656c 7361 2065 6573 2074 2061 6176      please set a va
 808d4e4:	696c 2064 6c63 756f 2064 7270 746f 636f     lid cloud protoc
 808d4f4:	6c6f 6920 206e 6874 2065 6255 6469 746f     ol in the Ubidot
 808d504:	2073 6f63 736e 7274 6375 6f74 0072 6f59     s constructor.Yo
 808d514:	2075 7261 2065 6461 6964 676e 6d20 726f     u are adding mor
 808d524:	2065 6874 6e61 7420 6568 6d20 7861 6d69     e than the maxim
 808d534:	6d75 6f20 2066 6f63 736e 6365 7475 7669     um of consecutiv
 808d544:	2065 656b 2d79 6176 756c 7365 7020 6961     e key-values pai
 808d554:	7372 2500 2573 3d73 7325 2500 2473 2500     rs.%s%s=%s.%s$.%
 808d564:	2273 7325 3a22 2522 2273 0000               s"%s":"%s"..

0808d570 <_ZTV7UbiHTTP>:
	...
 808d578:	3721 0808 3971 0808 34fd 0808 7441 6574     !7..q9...4..Atte
 808d588:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
 808d598:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
 808d5a8:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
 808d5b8:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
 808d5c8:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
 808d5d8:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
 808d5e8:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
 808d5f8:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
 808d608:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
 808d618:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
 808d628:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
 808d638:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
 808d648:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
 808d658:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
 808d668:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
 808d678:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
 808d688:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
 808d698:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
 808d6a8:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
 808d6b8:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
 808d6c8:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
 808d6d8:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
 808d6e8:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
 808d6f8:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

0808d706 <_ZStL19piecewise_construct>:
 808d706:	5b00 6157 6e72 6e69 5d67 4320 756f 646c     .[Warning] Could
 808d716:	6e20 746f 7320 6c6f 6576 4920 2050 6441      not solve IP Ad
 808d726:	7264 7365 2073 666f 7420 6568 7220 6d65     dress of the rem
 808d736:	746f 2065 6f68 7473 202c 6977 6874 7920     ote host, with y
 808d746:	756f 2072 4e44 2053 6573 7574 2e70 2020     our DNS setup.  
 808d756:	2020 2020 2020 2020 0a20 7355 6e69 2067              .Using 
 808d766:	6564 6166 6c75 2074 6e49 7564 7473 6972     default Industri
 808d776:	6c61 5520 6962 6f64 7374 4920 3a50 3120     al Ubidots IP: 1
 808d786:	3936 352e 2e35 3136 322e 3334 4500 5252     69.55.61.243.ERR
 808d796:	524f 7320 6e65 6964 676e 7620 6c61 6575     OR sending value
 808d7a6:	2073 6977 6874 5520 5044 0000 0000          s with UDP....

0808d7b4 <_ZTV6UbiUDP>:
	...
 808d7bc:	4035 0808 3fc5 0808 3fcd 0808               5@...?...?..

0808d7c8 <_ZTV11UbiParticle>:
	...
 808d7d0:	4177 0808 4115 0808 411d 0808 6854 7265     wA...A...A..Ther
 808d7e0:	2065 7369 6120 726c 6165 7964 6120 206e     e is already an 
 808d7f0:	6e69 7473 6e61 6563 6f20 2066 6150 7472     instance of Part
 808d800:	6369 656c 6f53 7466 6553 6972 6c61 7220     icleSoftSerial r
 808d810:	6e75 696e 676e 6f20 206e 6970 736e 5220     unning on pins R
 808d820:	2558 2064 202f 5854 6425 2500 756c 6e20     X%d / TX%d.%lu n
 808d830:	746f 6120 6176 6c69 6261 656c 2021 6553     ot available! Se
 808d840:	656c 7463 6465 7220 7461 2065 6c25 0075     lected rate %lu.

0808d850 <_ZL7btTable>:
 808d850:	e100 0000 0009 0000 0010 0000 9600 0000     ................
 808d860:	0018 0000 0018 0000 7a12 0000 001f 0000     .........z......
 808d870:	001f 0000 7080 0000 0025 0000 0021 0000     .....p..%...!...
 808d880:	4b00 0000 003d 0000 0033 0000 3840 0000     .K..=...3...@8..
 808d890:	005a 0000 0044 0000 2580 0000 008c 0000     Z...D....%......
 808d8a0:	0068 0000 12c0 0000 0127 0000 00d0 0000     h.......'.......
 808d8b0:	0960 0000 0262 0000 01a1 0000 04b0 0000     `...b...........
 808d8c0:	04ce 0000 0341 0000 0258 0000 09c4 0000     ....A...X.......
 808d8d0:	0683 0000 012c 0000 1388 0000 0d05 0000     ....,...........
	...

0808d8ec <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808d8ec:	0800 1810 2820 3830                         .... (08

0808d8f4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 808d8fc:	5f0d 0808 5f13 0808 62fb 0808 5f21 0808     ._..._...b..!_..
 808d90c:	5f0f 0808                                   ._..

0808d910 <_ZTV9TCPClient>:
	...
 808d918:	2b3d 0808 2b71 0808 5eb5 0808 5ecf 0808     =+..q+...^...^..
 808d928:	6009 0808 5f73 0808 5f45 0808 5ef7 0808     .`..s_..E_...^..
 808d938:	60b1 0808 6315 0808 5fa7 0808 6081 0808     .`...c..._...`..
 808d948:	61f3 0808 6245 0808 5edf 0808 61b7 0808     .a..Eb...^...a..
 808d958:	5ef9 0808 6977 6972 676e 5400 5043 6c43     .^..wiring.TCPCl
 808d968:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 808d978:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 808d988:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 808d998:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 808d9a8:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 808d9b8:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 808d9c8:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 808d9d8:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 808d9e8:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 808d9f8:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
 808da08:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 808da18:	3d20 0020 6e6c 6600 006e 6f63 6564 6400      = .ln.fn.code.d
 808da28:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 808da38:	6900 666e 006f 6177 6e72 7000 6e61 6369     .info.warn.panic
 808da48:	6100 6c6c 2500 302b 6433 253a 3230 0075     .all.%+03d:%02u.
 808da58:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 808da68:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

0808da74 <_ZTV3UDP>:
	...
 808da7c:	3c4d 0808 3c6d 0808 6949 0808 6a6f 0808     M<..m<..Ii..oj..
 808da8c:	690d 0808 695f 0808 697d 0808 6997 0808     .i.._i..}i...i..
 808da9c:	69b9 0808 6a09 0808 6a2b 0808 68c1 0808     .i...j..+j...h..
 808daac:	6ad5 0808 68e5 0808 6c29 0808 6b3d 0808     .j...h..)l..=k..
 808dabc:	6915 0808 6c4d 0808 6a99 0808 68f1 0808     .i..Ml...j...h..
 808dacc:	68f9 0808 6909 0808 6999 0808 fff0 ffff     .h...i...i......
 808dadc:	0000 0000 69b1 0808                         .....i..

0808dae4 <_ZTV14CellularSignal>:
	...
 808daec:	6ccd 0808 6d1d 0808 6ccf 0808 6d5d 0808     .l...m...l..]m..
 808dafc:	6cd5 0808 6d2d 0808 6cf9 0808 6de3 0808     .l..-m...l...m..
 808db0c:	fffc ffff 0000 0000 6e0d 0808               .........n..

0808db18 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808db20:	7089 0808 708f 0808 70d3 0808 709d 0808     .p...p...p...p..
 808db30:	708b 0808                                   .p..

0808db34 <_ZTV9IPAddress>:
	...
 808db3c:	7679 0808 7669 0808 766b 0808               yv..iv..kv..

0808db48 <_ZTV9USBSerial>:
	...
 808db50:	772b 0808 777b 0808 7789 0808 6555 0808     +w..{w...w..Ue..
 808db60:	7767 0808 772d 0808 7743 0808 7775 0808     gw..-w..Cw..uw..
 808db70:	7759 0808 7727 0808                         Yw..'w..

0808db78 <_ZTVN5spark13CellularClassE>:
	...
 808db80:	7a6d 0808 7a63 0808 7a59 0808 01b5 0808     mz..cz..Yz......
 808db90:	7a4d 0808 7a41 0808 7a35 0808 7a2d 0808     Mz..Az..5z..-z..
 808dba0:	7a23 0808 7a19 0808 79d5 0808               #z...z...y..

0808dbac <_ZTV11USARTSerial>:
	...
 808dbb4:	7b1d 0808 7b6d 0808 7b7b 0808 6555 0808     .{..m{..{{..Ue..
 808dbc4:	7b31 0808 7b53 0808 7b3f 0808 7b67 0808     1{..S{..?{..g{..
 808dbd4:	7b1f 0808 7b23 0808                         .{..#{..

0808dbdc <_ZTV7TwoWire>:
	...
 808dbe4:	7c55 0808 7c9f 0808 7c77 0808 7c57 0808     U|...|..w|..W|..
 808dbf4:	7c7f 0808 7c87 0808 7c8f 0808 7c97 0808     .|...|...|...|..

0808dc04 <_ZTVN5spark12NetworkClassE>:
	...
 808dc0c:	7d87 0808 7d91 0808 7d9b 0808 7da5 0808     .}...}...}...}..
 808dc1c:	7daf 0808 7dbb 0808 7dc7 0808 7dd3 0808     .}...}...}...}..
 808dc2c:	7ddb 0808 7de5 0808 7df1 0808               .}...}...}..

0808dc38 <_ZSt7nothrow>:
	...

0808dc39 <day_name.4723>:
 808dc39:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808dc49:	6972 6153 4a74                                   riSat

0808dc4e <mon_name.4724>:
 808dc4e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808dc5e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808dc6e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808dc7e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808dc8e:	6425 000a                                   %d..

0808dc92 <_ctype_>:
 808dc92:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808dca2:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808dcb2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808dcc2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808dcd2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808dce2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808dcf2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808dd02:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808dd12:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808dd94 <__sf_fake_stdin>:
	...

0808ddb4 <__sf_fake_stdout>:
	...

0808ddd4 <__sf_fake_stderr>:
	...
 808ddf4:	4f50 4953 0058 0000                         POSIX...

0808ddfc <__month_lengths>:
 808ddfc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808de0c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808de1c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808de2c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808de3c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808de4c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808de5c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808de6c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 808de7c:	322e 0064 2d59 6d25 252d 0064 2a2e 0075     .2d.Y-%m-%d..*u.
 808de8c:	2e25 6433 2500 6c6c 0064 2e25 6432 253a     %.3d.%lld.%.2d:%
 808de9c:	322e 3a64 2e25 6432 2500 302b 6c33 2564     .2d:%.2d.%+03ld%
 808deac:	322e 646c 0000 0000                         .2ld....

0808deb4 <fpi.5342>:
 808deb4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808dec4:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

0808ded4 <fpinan.5378>:
 808ded4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808dee4:	0000 0000                                   ....

0808dee8 <tinytens>:
 808dee8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808def8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808df08:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 808df18:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 808df28:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 808df38:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 808df48:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 808df58:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 808df68:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 808df78:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 808df88:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 808df98:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 808dfa8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 808dfb8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 808dfc8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 808dfd8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 808dfe8:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 808dff8:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 808e008:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 808e018:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 808e028:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 808e038:	3a4d 5325 2520 0070                         M:%S %p.

0808e040 <_C_time_locale>:
 808e040:	df18 0808 df1c 0808 df20 0808 df24 0808     ........ ...$...
 808e050:	df28 0808 df2c 0808 df30 0808 df34 0808     (...,...0...4...
 808e060:	df38 0808 df3c 0808 df40 0808 df44 0808     8...<...@...D...
 808e070:	df48 0808 df50 0808 df59 0808 df5f 0808     H...P...Y..._...
 808e080:	df28 0808 df65 0808 df6a 0808 df6f 0808     (...e...j...o...
 808e090:	df76 0808 df80 0808 df88 0808 df91 0808     v...............
 808e0a0:	df9a 0808 df9e 0808 dfa2 0808 dfa6 0808     ................
 808e0b0:	dfaa 0808 dfae 0808 dfb2 0808 dfb6 0808     ................
 808e0c0:	dfbd 0808 dfc4 0808 dfcc 0808 dfd6 0808     ................
 808e0d0:	dfdf 0808 dfe6 0808 dfef 0808 dff8 0808     ................
 808e0e0:	e001 0808 e016 0808 e019 0808 e01c 0808     ................
 808e0f0:	df48 0808 df50 0808 df59 0808 df5f 0808     H...P...Y..._...
 808e100:	df28 0808 df65 0808 df6a 0808 df6f 0808     (...e...j...o...
 808e110:	df76 0808 df80 0808 df88 0808 df91 0808     v...............
 808e120:	d99a 0808 e034 0808 d6df 0808 d6df 0808     ....4...........
 808e130:	d6df 0808 d6df 0808 d6df 0808 5a54 4700     ............TZ.G
 808e140:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808e150:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808e160:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808e170:	3a6e 6825 2575 006e                         n:%hu%n.

0808e178 <__mprec_tens>:
 808e178:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808e188:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808e198:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808e1a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808e1b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808e1c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808e1d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808e1e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808e1f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808e208:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808e218:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808e228:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808e238:	9db4 79d9 7843 44ea                         ...yCx.D

0808e240 <__mprec_bigtens>:
 808e240:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808e250:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808e260:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808e268 <p05.5385>:
 808e268:	0005 0000 0019 0000 007d 0000               ........}...

0808e274 <link_const_variable_data_end>:
 808e274:	080813bd 	.word	0x080813bd
 808e278:	0808151d 	.word	0x0808151d
 808e27c:	08081521 	.word	0x08081521
 808e280:	08081b49 	.word	0x08081b49
 808e284:	08081b4d 	.word	0x08081b4d
 808e288:	08081b51 	.word	0x08081b51
 808e28c:	08081b55 	.word	0x08081b55
 808e290:	080821f5 	.word	0x080821f5
 808e294:	08082219 	.word	0x08082219
 808e298:	0808221d 	.word	0x0808221d
 808e29c:	08082541 	.word	0x08082541
 808e2a0:	08082545 	.word	0x08082545
 808e2a4:	08082549 	.word	0x08082549
 808e2a8:	08082a83 	.word	0x08082a83
 808e2ac:	08082a87 	.word	0x08082a87
 808e2b0:	08082a8b 	.word	0x08082a8b
 808e2b4:	08082b31 	.word	0x08082b31
 808e2b8:	08082b35 	.word	0x08082b35
 808e2bc:	08082f19 	.word	0x08082f19
 808e2c0:	0808341d 	.word	0x0808341d
 808e2c4:	080834f9 	.word	0x080834f9
 808e2c8:	08083b45 	.word	0x08083b45
 808e2cc:	08083f59 	.word	0x08083f59
 808e2d0:	08083fb5 	.word	0x08083fb5
 808e2d4:	080840ed 	.word	0x080840ed
 808e2d8:	080841df 	.word	0x080841df
 808e2dc:	08084659 	.word	0x08084659
 808e2e0:	080848f1 	.word	0x080848f1
 808e2e4:	08084e7d 	.word	0x08084e7d
 808e2e8:	0808521d 	.word	0x0808521d
 808e2ec:	08085e81 	.word	0x08085e81
 808e2f0:	08086685 	.word	0x08086685
 808e2f4:	080868a5 	.word	0x080868a5
 808e2f8:	08086cb1 	.word	0x08086cb1
 808e2fc:	08087aed 	.word	0x08087aed
 808e300:	08087e55 	.word	0x08087e55
 808e304:	080882dd 	.word	0x080882dd
 808e308:	080885ad 	.word	0x080885ad
 808e30c:	08088631 	.word	0x08088631
 808e310:	080886f5 	.word	0x080886f5
 808e314:	080887b9 	.word	0x080887b9

0808e318 <link_constructors_end>:
	...
