
g:/jsc/IoT/particle/Spudnik-SD-Photo/target/2.0.1/electron/Spudnik-SD-Photo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d730  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  0808d750  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000022c  20000000  0808d754  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000e9c  20000230  20000230  00040230  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808d980  0808d980  0003d980  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808d9a8  0808d9a8  0003d9a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002e6690  00000000  00000000  0003d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002dfed  00000000  00000000  0032403c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003990  00000000  00000000  00352029  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00009f90  00000000  00000000  003559b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00042f67  00000000  00000000  0035f949  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0006b5df  00000000  00000000  003a28b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d99b6  00000000  00000000  0040de8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a9bc  00000000  00000000  004e7848  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0003c241  00000000  00000000  004f2204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <__udivmoddi4+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <localtime_r+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080040:	b508      	push	{r3, lr}
 8080042:	4b02      	ldr	r3, [pc, #8]	; (808004c <strftime+0xc>)
 8080044:	681b      	ldr	r3, [r3, #0]
 8080046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080048:	9301      	str	r3, [sp, #4]
 808004a:	bd08      	pop	{r3, pc}
 808004c:	0806002c 	.word	0x0806002c

08080050 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080050:	4809      	ldr	r0, [pc, #36]	; (8080078 <module_user_pre_init+0x28>)
 8080052:	490a      	ldr	r1, [pc, #40]	; (808007c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080054:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080056:	4288      	cmp	r0, r1
 8080058:	d005      	beq.n	8080066 <module_user_pre_init+0x16>
 808005a:	4a09      	ldr	r2, [pc, #36]	; (8080080 <module_user_pre_init+0x30>)
 808005c:	4282      	cmp	r2, r0
 808005e:	d002      	beq.n	8080066 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080060:	1a12      	subs	r2, r2, r0
 8080062:	f00a fad3 	bl	808a60c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080066:	4807      	ldr	r0, [pc, #28]	; (8080084 <module_user_pre_init+0x34>)
 8080068:	4a07      	ldr	r2, [pc, #28]	; (8080088 <module_user_pre_init+0x38>)
 808006a:	2100      	movs	r1, #0
 808006c:	1a12      	subs	r2, r2, r0
 808006e:	f00a fadb 	bl	808a628 <memset>
    return &link_heap_start;
}
 8080072:	4806      	ldr	r0, [pc, #24]	; (808008c <module_user_pre_init+0x3c>)
 8080074:	bd08      	pop	{r3, pc}
 8080076:	bf00      	nop
 8080078:	20000000 	.word	0x20000000
 808007c:	0808d754 	.word	0x0808d754
 8080080:	2000022c 	.word	0x2000022c
 8080084:	20000230 	.word	0x20000230
 8080088:	200010cc 	.word	0x200010cc
 808008c:	200010cc 	.word	0x200010cc

08080090 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080090:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080092:	f007 fe85 	bl	8087da0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080096:	2500      	movs	r5, #0
 8080098:	4e05      	ldr	r6, [pc, #20]	; (80800b0 <module_user_init+0x20>)
 808009a:	4c06      	ldr	r4, [pc, #24]	; (80800b4 <module_user_init+0x24>)
 808009c:	1ba4      	subs	r4, r4, r6
 808009e:	08a4      	lsrs	r4, r4, #2
 80800a0:	42a5      	cmp	r5, r4
 80800a2:	d100      	bne.n	80800a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800a6:	f856 3b04 	ldr.w	r3, [r6], #4
 80800aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800ac:	3501      	adds	r5, #1
 80800ae:	e7f7      	b.n	80800a0 <module_user_init+0x10>
 80800b0:	0808d714 	.word	0x0808d714
 80800b4:	0808d750 	.word	0x0808d750

080800b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800b8:	f001 bdf2 	b.w	8081ca0 <setup>

080800bc <module_user_loop>:
}

void module_user_loop() {
 80800bc:	b508      	push	{r3, lr}
    loop();
 80800be:	f001 fadb 	bl	8081678 <loop>
    _post_loop();
}
 80800c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800c6:	f007 be2d 	b.w	8087d24 <_post_loop>

080800ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ca:	f006 b95b 	b.w	8086384 <malloc>

080800ce <_Znaj>:
 80800ce:	f006 b959 	b.w	8086384 <malloc>

080800d2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800d2:	f006 b95f 	b.w	8086394 <free>

080800d6 <_ZdaPv>:
 80800d6:	f006 b95d 	b.w	8086394 <free>
	...

080800dc <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800dc:	2100      	movs	r1, #0
 80800de:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800e0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800e2:	4a02      	ldr	r2, [pc, #8]	; (80800ec <__cxa_pure_virtual+0x10>)
 80800e4:	f006 f83c 	bl	8086160 <panic_>
  while (1);
 80800e8:	e7fe      	b.n	80800e8 <__cxa_pure_virtual+0xc>
 80800ea:	bf00      	nop
 80800ec:	08085d61 	.word	0x08085d61

080800f0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800f0:	7800      	ldrb	r0, [r0, #0]
 80800f2:	fab0 f080 	clz	r0, r0
 80800f6:	0940      	lsrs	r0, r0, #5
 80800f8:	4770      	bx	lr

080800fa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800fa:	2301      	movs	r3, #1
 80800fc:	7003      	strb	r3, [r0, #0]
 80800fe:	4770      	bx	lr

08080100 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 8080100:	4770      	bx	lr

08080102 <_ZN16ArduinoOutStream5putchEc>:
  /**
   * Internal do not use
   * \param[in] c
   */
  void putch(char c) {
    if (c == '\n') {
 8080102:	290a      	cmp	r1, #10
  void putch(char c) {
 8080104:	b570      	push	{r4, r5, r6, lr}
 8080106:	4605      	mov	r5, r0
 8080108:	460c      	mov	r4, r1
    if (c == '\n') {
 808010a:	d104      	bne.n	8080116 <_ZN16ArduinoOutStream5putchEc+0x14>
 808010c:	6840      	ldr	r0, [r0, #4]
      m_pr->write('\r');
 808010e:	210d      	movs	r1, #13
 8080110:	6803      	ldr	r3, [r0, #0]
 8080112:	689b      	ldr	r3, [r3, #8]
 8080114:	4798      	blx	r3
    }
    m_pr->write(c);
 8080116:	6868      	ldr	r0, [r5, #4]
 8080118:	4621      	mov	r1, r4
  }
 808011a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    m_pr->write(c);
 808011e:	6803      	ldr	r3, [r0, #0]
 8080120:	689b      	ldr	r3, [r3, #8]
 8080122:	4718      	bx	r3

08080124 <_ZN16ArduinoOutStream7seekoffElN8ios_base7seekdirE>:
  }
  bool seekoff(off_type off, seekdir way) {
    (void)off;
    (void)way;
    return false;
  }
 8080124:	2000      	movs	r0, #0
 8080126:	4770      	bx	lr

08080128 <_ZN16ArduinoOutStream7seekposEm>:
  bool seekpos(pos_type pos) {
    (void)pos;
    return false;
  }
 8080128:	2000      	movs	r0, #0
 808012a:	4770      	bx	lr

0808012c <_ZN16ArduinoOutStream4syncEv>:
  bool sync() {
    return true;
  }
 808012c:	2001      	movs	r0, #1
 808012e:	4770      	bx	lr

08080130 <_ZN16ArduinoOutStream7tellposEv>:
  pos_type tellpos() {
    return 0;
  }
 8080130:	2000      	movs	r0, #0
 8080132:	4770      	bx	lr

08080134 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8080134:	6803      	ldr	r3, [r0, #0]
 8080136:	4718      	bx	r3

08080138 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 8080138:	2a01      	cmp	r2, #1
 808013a:	d003      	beq.n	8080144 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 808013c:	2a02      	cmp	r2, #2
 808013e:	d003      	beq.n	8080148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 8080140:	2000      	movs	r0, #0
 8080142:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080144:	6001      	str	r1, [r0, #0]
	      break;
 8080146:	e7fb      	b.n	8080140 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080148:	680b      	ldr	r3, [r1, #0]
 808014a:	6003      	str	r3, [r0, #0]
	}
 808014c:	e7f8      	b.n	8080140 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

0808014e <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 808014e:	4770      	bx	lr

08080150 <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
 8080150:	4770      	bx	lr

08080152 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 8080152:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 8080154:	b510      	push	{r4, lr}
        th->started = true;
 8080156:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8080158:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 808015a:	4604      	mov	r4, r0
        if (th->func) {
 808015c:	b143      	cbz	r3, 8080170 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 808015e:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080160:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 8080162:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 8080164:	2000      	movs	r0, #0
        th->exited = true;
 8080166:	7463      	strb	r3, [r4, #17]
    }
 8080168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 808016c:	f005 be58 	b.w	8085e20 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8080170:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8080172:	2800      	cmp	r0, #0
 8080174:	d0f5      	beq.n	8080162 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 8080176:	6883      	ldr	r3, [r0, #8]
 8080178:	b90b      	cbnz	r3, 808017e <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 808017a:	f009 f88f 	bl	808929c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808017e:	68c3      	ldr	r3, [r0, #12]
 8080180:	e7ee      	b.n	8080160 <_ZN6Thread3runEPv+0xe>

08080182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 8080182:	b510      	push	{r4, lr}
 8080184:	4604      	mov	r4, r0
  }
 8080186:	2110      	movs	r1, #16
 8080188:	f008 ffcf 	bl	808912a <_ZdlPvj>
 808018c:	4620      	mov	r0, r4
 808018e:	bd10      	pop	{r4, pc}

08080190 <_ZN6SdFileD0Ev>:
class SdFile : public PrintFile {
 8080190:	b510      	push	{r4, lr}
 8080192:	4604      	mov	r4, r0
 8080194:	212c      	movs	r1, #44	; 0x2c
 8080196:	f008 ffc8 	bl	808912a <_ZdlPvj>
 808019a:	4620      	mov	r0, r4
 808019c:	bd10      	pop	{r4, pc}

0808019e <_Z15watchdogHandlerv>:
      // Do as little as possible in this function, preferably just calling System.reset().
      // Do not attempt to Particle.publish(), use Cellular.command() 
      // or similar functions. You can save data to a retained variable
      // here safetly so you know the watchdog triggered when you restart.
      // In 2.0.0 and later, System.reset(RESET_NO_WAIT); prevents notifying the cloud of a pending reset
      System.reset();
 808019e:	f006 bb45 	b.w	808682c <_ZN11SystemClass5resetEv>

080801a2 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80801a2:	3008      	adds	r0, #8
 80801a4:	f002 bd72 	b.w	8082c8c <_ZN7FatFile5writeEPKvj>

080801a8 <_Z8dateTimePtS_>:
    }

// dateTime stores current datetime in the right format for FAT
// See SdFile::dateTimeCallback() for usage.
void dateTime(uint16_t* date, uint16_t* time) 
    {
 80801a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80801aa:	460e      	mov	r6, r1
 80801ac:	4605      	mov	r5, r0
     // return date using FAT_DATE macro to format fields
     *date = FAT_DATE(Time.year(), Time.month(), Time.day());
 80801ae:	f007 f981 	bl	80874b4 <_ZN9TimeClass4yearEv>
 80801b2:	4604      	mov	r4, r0
 80801b4:	f007 f976 	bl	80874a4 <_ZN9TimeClass5monthEv>
 80801b8:	4607      	mov	r7, r0
 80801ba:	f007 f967 	bl	808748c <_ZN9TimeClass3dayEv>
 * \param[in] day [1,31]
 *
 * \return Packed date for dir_t entry.
 */
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
  return (year - 1980) << 9 | month << 5 | day;
 80801be:	017f      	lsls	r7, r7, #5
 80801c0:	b2c3      	uxtb	r3, r0
 80801c2:	b2a4      	uxth	r4, r4
 80801c4:	f407 57ff 	and.w	r7, r7, #8160	; 0x1fe0
 80801c8:	f2a4 74bc 	subw	r4, r4, #1980	; 0x7bc
 80801cc:	433b      	orrs	r3, r7
 80801ce:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80801d2:	802b      	strh	r3, [r5, #0]

     // return time using FAT_TIME macro to format fields
     *time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
 80801d4:	f007 f936 	bl	8087444 <_ZN9TimeClass4hourEv>
 80801d8:	4604      	mov	r4, r0
 80801da:	f007 f93f 	bl	808745c <_ZN9TimeClass6minuteEv>
 80801de:	4605      	mov	r5, r0
 80801e0:	f007 f948 	bl	8087474 <_ZN9TimeClass6secondEv>
 * \param[in] second [0,59]
 *
 * \return Packed time for dir_t entry.
 */
static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour << 11 | minute << 5 | second >> 1;
 80801e4:	02e4      	lsls	r4, r4, #11
 80801e6:	016d      	lsls	r5, r5, #5
 80801e8:	f404 24ff 	and.w	r4, r4, #522240	; 0x7f800
 80801ec:	f405 55ff 	and.w	r5, r5, #8160	; 0x1fe0
 80801f0:	432c      	orrs	r4, r5
 80801f2:	f3c0 0046 	ubfx	r0, r0, #1, #7
 80801f6:	4304      	orrs	r4, r0
 80801f8:	8034      	strh	r4, [r6, #0]
    }
 80801fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080801fc <_ZN16ArduinoOutStream6putstrEPKc>:
  void putstr(const char* str) {
 80801fc:	b570      	push	{r4, r5, r6, lr}
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80801fe:	460c      	mov	r4, r1
 8080200:	b159      	cbz	r1, 808021a <_ZN16ArduinoOutStream6putstrEPKc+0x1e>
    m_pr->write(str);
 8080202:	6845      	ldr	r5, [r0, #4]
      return write((const uint8_t *)str, strlen(str));
 8080204:	4608      	mov	r0, r1
 8080206:	f00a fa76 	bl	808a6f6 <strlen>
 808020a:	682b      	ldr	r3, [r5, #0]
 808020c:	4602      	mov	r2, r0
 808020e:	4621      	mov	r1, r4
 8080210:	4628      	mov	r0, r5
  }
 8080212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8080216:	68db      	ldr	r3, [r3, #12]
 8080218:	4718      	bx	r3
 808021a:	bd70      	pop	{r4, r5, r6, pc}

0808021c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 808021c:	b510      	push	{r4, lr}
 808021e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8080220:	6880      	ldr	r0, [r0, #8]
 8080222:	b108      	cbz	r0, 8080228 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8080224:	f005 fde4 	bl	8085df0 <os_mutex_recursive_destroy>
 8080228:	4620      	mov	r0, r4
 808022a:	bd10      	pop	{r4, pc}

0808022c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808022c:	b510      	push	{r4, lr}
 808022e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080230:	6800      	ldr	r0, [r0, #0]
 8080232:	b108      	cbz	r0, 8080238 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080234:	f006 f8ae 	bl	8086394 <free>
class SystemClass {
 8080238:	4620      	mov	r0, r4
 808023a:	bd10      	pop	{r4, pc}

0808023c <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 808023c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808023e:	2201      	movs	r2, #1
 8080240:	f88d 1007 	strb.w	r1, [sp, #7]
 8080244:	3008      	adds	r0, #8
 8080246:	f10d 0107 	add.w	r1, sp, #7
 808024a:	f002 fd1f 	bl	8082c8c <_ZN7FatFile5writeEPKvj>
  }
 808024e:	b003      	add	sp, #12
 8080250:	f85d fb04 	ldr.w	pc, [sp], #4

08080254 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080254:	b40e      	push	{r1, r2, r3}
 8080256:	b503      	push	{r0, r1, lr}
 8080258:	ab03      	add	r3, sp, #12
 808025a:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 808025e:	2100      	movs	r1, #0
        va_start(args, format);
 8080260:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080262:	f006 ff2f 	bl	80870c4 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080266:	b002      	add	sp, #8
 8080268:	f85d eb04 	ldr.w	lr, [sp], #4
 808026c:	b003      	add	sp, #12
 808026e:	4770      	bx	lr

08080270 <_ZNK8particle11SPISettings7printToER5Print>:
  virtual size_t printTo(Print& p) const
 8080270:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080272:	4604      	mov	r4, r0
    if (default_ && clock_ == 0)
 8080274:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 8080276:	4608      	mov	r0, r1
 8080278:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 808027a:	b132      	cbz	r2, 808028a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 808027c:	b9a3      	cbnz	r3, 80802a8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 808027e:	490b      	ldr	r1, [pc, #44]	; (80802ac <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
  }
 8080280:	b002      	add	sp, #8
 8080282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 8080286:	f006 bedf 	b.w	8087048 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 808028a:	4a09      	ldr	r2, [pc, #36]	; (80802b0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 808028c:	7b26      	ldrb	r6, [r4, #12]
 808028e:	4d09      	ldr	r5, [pc, #36]	; (80802b4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 8080290:	4909      	ldr	r1, [pc, #36]	; (80802b8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 8080292:	7b64      	ldrb	r4, [r4, #13]
 8080294:	2e01      	cmp	r6, #1
 8080296:	bf18      	it	ne
 8080298:	4629      	movne	r1, r5
 808029a:	e9cd 1400 	strd	r1, r4, [sp]
 808029e:	4907      	ldr	r1, [pc, #28]	; (80802bc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80802a0:	f7ff ffd8 	bl	8080254 <_ZN5Print6printfEPKcz>
  }
 80802a4:	b002      	add	sp, #8
 80802a6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80802a8:	4a05      	ldr	r2, [pc, #20]	; (80802c0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80802aa:	e7ef      	b.n	808028c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80802ac:	0808c3f2 	.word	0x0808c3f2
 80802b0:	0808cfab 	.word	0x0808cfab
 80802b4:	0808c3ee 	.word	0x0808c3ee
 80802b8:	0808c3ea 	.word	0x0808c3ea
 80802bc:	0808c408 	.word	0x0808c408
 80802c0:	0808c3e1 	.word	0x0808c3e1

080802c4 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80802c4:	b40e      	push	{r1, r2, r3}
 80802c6:	b503      	push	{r0, r1, lr}
 80802c8:	ab03      	add	r3, sp, #12
 80802ca:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80802ce:	2101      	movs	r1, #1
        va_start(args, format);
 80802d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80802d2:	f006 fef7 	bl	80870c4 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80802d6:	b002      	add	sp, #8
 80802d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80802dc:	b003      	add	sp, #12
 80802de:	4770      	bx	lr

080802e0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80802e0:	2200      	movs	r2, #0
 80802e2:	6840      	ldr	r0, [r0, #4]
 80802e4:	4611      	mov	r1, r2
 80802e6:	f005 bfd5 	b.w	8086294 <network_ready>

080802ea <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80802ea:	b510      	push	{r4, lr}
      if (_M_manager)
 80802ec:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80802ee:	4604      	mov	r4, r0
      if (_M_manager)
 80802f0:	b113      	cbz	r3, 80802f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80802f2:	2203      	movs	r2, #3
 80802f4:	4601      	mov	r1, r0
 80802f6:	4798      	blx	r3
    }
 80802f8:	4620      	mov	r0, r4
 80802fa:	bd10      	pop	{r4, pc}

080802fc <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 80802fc:	b508      	push	{r3, lr}
		return HAL_Timer_Get_Milli_Seconds();
 80802fe:	f005 fd3f 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
	{
		last_checkin = current_time();
 8080302:	4b01      	ldr	r3, [pc, #4]	; (8080308 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 8080304:	6018      	str	r0, [r3, #0]
	}
 8080306:	bd08      	pop	{r3, pc}
 8080308:	20001090 	.word	0x20001090

0808030c <_ZN19ApplicationWatchdogC1EjPFvvEj>:
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 808030c:	b570      	push	{r4, r5, r6, lr}
 808030e:	461d      	mov	r5, r3
    _Function_base() : _M_manager(nullptr) { }
 8080310:	2300      	movs	r3, #0
 8080312:	b086      	sub	sp, #24
 8080314:	4604      	mov	r4, r0
 8080316:	9304      	str	r3, [sp, #16]
	if (_My_handler::_M_not_empty_function(__f))
 8080318:	b122      	cbz	r2, 8080324 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	    _M_invoker = &_My_handler::_M_invoke;
 808031a:	4b26      	ldr	r3, [pc, #152]	; (80803b4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808031c:	9202      	str	r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 808031e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8080320:	4b25      	ldr	r3, [pc, #148]	; (80803b8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
 8080322:	9304      	str	r3, [sp, #16]
    _Function_base() : _M_manager(nullptr) { }
 8080324:	2300      	movs	r3, #0
 8080326:	60e3      	str	r3, [r4, #12]
      { return !_M_empty(); }
 8080328:	9b04      	ldr	r3, [sp, #16]
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 808032a:	6021      	str	r1, [r4, #0]
      if (static_cast<bool>(__x))
 808032c:	b13b      	cbz	r3, 808033e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808032e:	2202      	movs	r2, #2
 8080330:	a902      	add	r1, sp, #8
 8080332:	1d20      	adds	r0, r4, #4
 8080334:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080336:	9b05      	ldr	r3, [sp, #20]
 8080338:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 808033a:	9b04      	ldr	r3, [sp, #16]
 808033c:	60e3      	str	r3, [r4, #12]
        : d_(new(std::nothrow) Data)
 808033e:	2014      	movs	r0, #20
 8080340:	491e      	ldr	r1, [pc, #120]	; (80803bc <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 8080342:	f008 fef4 	bl	808912e <_ZnwjRKSt9nothrow_t>
 8080346:	b130      	cbz	r0, 8080356 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8080348:	2200      	movs	r2, #0
            exited(false) {
 808034a:	e9c0 2200 	strd	r2, r2, [r0]
 808034e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8080352:	7402      	strb	r2, [r0, #16]
 8080354:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8080356:	6160      	str	r0, [r4, #20]
        if (!d_) {
 8080358:	b190      	cbz	r0, 8080380 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x74>
        d_->func = function;
 808035a:	4b19      	ldr	r3, [pc, #100]	; (80803c0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb4>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808035c:	2209      	movs	r2, #9
        d_->func_param = function_param;
 808035e:	e9c0 3402 	strd	r3, r4, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080362:	4918      	ldr	r1, [pc, #96]	; (80803c4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb8>)
 8080364:	e9cd 0500 	strd	r0, r5, [sp]
 8080368:	4b17      	ldr	r3, [pc, #92]	; (80803c8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xbc>)
 808036a:	3004      	adds	r0, #4
 808036c:	f005 fd28 	bl	8085dc0 <os_thread_create>
 8080370:	b930      	cbnz	r0, 8080380 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x74>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8080372:	6963      	ldr	r3, [r4, #20]
        while (!d_->started) {
 8080374:	7c1b      	ldrb	r3, [r3, #16]
 8080376:	b9a3      	cbnz	r3, 80803a2 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x96>
            HAL_Delay_Milliseconds(1);
 8080378:	2001      	movs	r0, #1
 808037a:	f005 fce9 	bl	8085d50 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 808037e:	e7f8      	b.n	8080372 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x66>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080380:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080382:	6965      	ldr	r5, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8080384:	6163      	str	r3, [r4, #20]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 8080386:	b165      	cbz	r5, 80803a2 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x96>
	if (__ptr != nullptr)
 8080388:	682e      	ldr	r6, [r5, #0]
 808038a:	b136      	cbz	r6, 808039a <_ZN19ApplicationWatchdogC1EjPFvvEj+0x8e>
    class function<_Res(_ArgTypes...)>
 808038c:	4630      	mov	r0, r6
 808038e:	f7ff ffac 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 8080392:	2110      	movs	r1, #16
 8080394:	4630      	mov	r0, r6
 8080396:	f008 fec8 	bl	808912a <_ZdlPvj>
 808039a:	2114      	movs	r1, #20
 808039c:	4628      	mov	r0, r5
 808039e:	f008 fec4 	bl	808912a <_ZdlPvj>
		checkin();
 80803a2:	f7ff ffab 	bl	80802fc <_ZN19ApplicationWatchdog7checkinEv>
 80803a6:	a802      	add	r0, sp, #8
 80803a8:	f7ff ff9f 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
    }
 80803ac:	4620      	mov	r0, r4
 80803ae:	b006      	add	sp, #24
 80803b0:	bd70      	pop	{r4, r5, r6, pc}
 80803b2:	bf00      	nop
 80803b4:	08080135 	.word	0x08080135
 80803b8:	08080139 	.word	0x08080139
 80803bc:	0808d354 	.word	0x0808d354
 80803c0:	08088ff9 	.word	0x08088ff9
 80803c4:	0808c425 	.word	0x0808c425
 80803c8:	08080153 	.word	0x08080153

080803cc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80803cc:	b40e      	push	{r1, r2, r3}
 80803ce:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80803d0:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80803d2:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80803d4:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80803d6:	b08d      	sub	sp, #52	; 0x34
 80803d8:	aa0f      	add	r2, sp, #60	; 0x3c
 80803da:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80803de:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80803e2:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80803e6:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80803e8:	201e      	movs	r0, #30
 80803ea:	aa04      	add	r2, sp, #16
 80803ec:	f005 fec8 	bl	8086180 <log_message_v>
}
 80803f0:	b00d      	add	sp, #52	; 0x34
 80803f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80803f6:	b003      	add	sp, #12
 80803f8:	4770      	bx	lr

080803fa <_ZN7FatFile6existsEPKc>:
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80803fa:	2300      	movs	r3, #0
  bool exists(const char* path) {
 80803fc:	b500      	push	{lr}
 80803fe:	b08b      	sub	sp, #44	; 0x2c
 8080400:	460a      	mov	r2, r1
    return file.open(this, path, O_RDONLY);
 8080402:	4601      	mov	r1, r0
 8080404:	a801      	add	r0, sp, #4
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080406:	f8ad 3004 	strh.w	r3, [sp, #4]
    return file.open(this, path, O_RDONLY);
 808040a:	f002 fbf2 	bl	8082bf2 <_ZN7FatFile4openEPS_PKci>
  }
 808040e:	b00b      	add	sp, #44	; 0x2c
 8080410:	f85d fb04 	ldr.w	pc, [sp], #4

08080414 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
 8080414:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
 8080416:	460a      	mov	r2, r1
 8080418:	4901      	ldr	r1, [pc, #4]	; (8080420 <_ZN7FatFile4openEPKci+0xc>)
 808041a:	6809      	ldr	r1, [r1, #0]
 808041c:	f002 bbe9 	b.w	8082bf2 <_ZN7FatFile4openEPS_PKci>
 8080420:	200008f4 	.word	0x200008f4

08080424 <_ZN5SdFatC1Ev>:
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8080424:	2264      	movs	r2, #100	; 0x64
 public:
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  SdFat() {
 8080426:	b570      	push	{r4, r5, r6, lr}
 8080428:	f880 2460 	strb.w	r2, [r0, #1120]	; 0x460
  {
 808042c:	4a16      	ldr	r2, [pc, #88]	; (8080488 <_ZN5SdFatC1Ev+0x64>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 808042e:	2300      	movs	r3, #0
 8080430:	f8c0 2470 	str.w	r2, [r0, #1136]	; 0x470
 8080434:	2201      	movs	r2, #1

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8080436:	4e15      	ldr	r6, [pc, #84]	; (808048c <_ZN5SdFatC1Ev+0x68>)
 8080438:	71c3      	strb	r3, [r0, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808043a:	f8a0 343c 	strh.w	r3, [r0, #1084]	; 0x43c
 808043e:	f880 346a 	strb.w	r3, [r0, #1130]	; 0x46a
 8080442:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 8080446:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 808044a:	f8a0 347c 	strh.w	r3, [r0, #1148]	; 0x47c
 808044e:	7831      	ldrb	r1, [r6, #0]
 8080450:	4604      	mov	r4, r0
 8080452:	ea11 0502 	ands.w	r5, r1, r2
 8080456:	f3bf 8f5b 	dmb	ish
 808045a:	d10f      	bne.n	808047c <_ZN5SdFatC1Ev+0x58>
 808045c:	4630      	mov	r0, r6
 808045e:	f7ff fe47 	bl	80800f0 <__cxa_guard_acquire>
 8080462:	b158      	cbz	r0, 808047c <_ZN5SdFatC1Ev+0x58>
 8080464:	4629      	mov	r1, r5
 8080466:	480a      	ldr	r0, [pc, #40]	; (8080490 <_ZN5SdFatC1Ev+0x6c>)
 8080468:	f006 f8d4 	bl	8086614 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808046c:	4630      	mov	r0, r6
 808046e:	f7ff fe44 	bl	80800fa <__cxa_guard_release>
 8080472:	4a08      	ldr	r2, [pc, #32]	; (8080494 <_ZN5SdFatC1Ev+0x70>)
 8080474:	4908      	ldr	r1, [pc, #32]	; (8080498 <_ZN5SdFatC1Ev+0x74>)
 8080476:	4806      	ldr	r0, [pc, #24]	; (8080490 <_ZN5SdFatC1Ev+0x6c>)
 8080478:	f008 fe52 	bl	8089120 <__aeabi_atexit>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 808047c:	4b04      	ldr	r3, [pc, #16]	; (8080490 <_ZN5SdFatC1Ev+0x6c>)
    m_spi.setPort(nullptr);
  }
 808047e:	4620      	mov	r0, r4
 8080480:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 8080484:	bd70      	pop	{r4, r5, r6, pc}
 8080486:	bf00      	nop
 8080488:	0808ca6c 	.word	0x0808ca6c
 808048c:	20000234 	.word	0x20000234
 8080490:	20000238 	.word	0x20000238
 8080494:	20000230 	.word	0x20000230
 8080498:	0808021d 	.word	0x0808021d

0808049c <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 808049c:	b530      	push	{r4, r5, lr}
class SPISettings : public Printable {
 808049e:	4b1c      	ldr	r3, [pc, #112]	; (8080510 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
 80804a0:	b085      	sub	sp, #20
 80804a2:	9300      	str	r3, [sp, #0]
 80804a4:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80804a6:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 80804aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80804ae:	6893      	ldr	r3, [r2, #8]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80804b0:	4604      	mov	r4, r0
 80804b2:	9302      	str	r3, [sp, #8]
 80804b4:	8993      	ldrh	r3, [r2, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80804b6:	460a      	mov	r2, r1
 80804b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80804bc:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 80804c0:	466b      	mov	r3, sp
 80804c2:	4628      	mov	r0, r5
 80804c4:	f002 ff16 	bl	80832f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
 80804c8:	b910      	cbnz	r0, 80804d0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
 80804ca:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 80804cc:	b005      	add	sp, #20
 80804ce:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80804d0:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80804d2:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
 80804d6:	4628      	mov	r0, r5
 80804d8:	f002 fb84 	bl	8082be4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80804dc:	2101      	movs	r1, #1
 80804de:	4620      	mov	r0, r4
 80804e0:	f002 fdb7 	bl	8083052 <_ZN9FatVolume4initEh>
 80804e4:	4601      	mov	r1, r0
 80804e6:	b168      	cbz	r0, 8080504 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80804e8:	4621      	mov	r1, r4
 80804ea:	4628      	mov	r0, r5
 80804ec:	f002 f9ad 	bl	808284a <_ZN7FatFile8openRootEP9FatVolume>
 80804f0:	2800      	cmp	r0, #0
 80804f2:	d0ea      	beq.n	80804ca <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
 80804f4:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80804f8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80804fc:	d0e5      	beq.n	80804ca <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
 80804fe:	4b05      	ldr	r3, [pc, #20]	; (8080514 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
 8080500:	601d      	str	r5, [r3, #0]
    return true;
 8080502:	e7e3      	b.n	80804cc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
 8080504:	4620      	mov	r0, r4
 8080506:	f002 fda4 	bl	8083052 <_ZN9FatVolume4initEh>
 808050a:	2800      	cmp	r0, #0
 808050c:	d1ec      	bne.n	80804e8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
 808050e:	e7dc      	b.n	80804ca <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
 8080510:	0808ca6c 	.word	0x0808ca6c
 8080514:	200008f4 	.word	0x200008f4

08080518 <_Z7Flickerj>:
    {
 8080518:	b570      	push	{r4, r5, r6, lr}
 808051a:	4604      	mov	r4, r0
        for (size_t i = 0; i < n; i++)
 808051c:	2500      	movs	r5, #0
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 808051e:	4e0b      	ldr	r6, [pc, #44]	; (808054c <_Z7Flickerj+0x34>)
        for (size_t i = 0; i < n; i++)
 8080520:	42a5      	cmp	r5, r4
 8080522:	d011      	beq.n	8080548 <_Z7Flickerj+0x30>
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080524:	2101      	movs	r1, #1
 8080526:	8830      	ldrh	r0, [r6, #0]
 8080528:	f008 fcf9 	bl	8088f1e <digitalWrite>
          delay(10);                   // Waits for a sec
 808052c:	200a      	movs	r0, #10
 808052e:	f007 f812 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);   // Sets the LED off
 8080532:	2100      	movs	r1, #0
 8080534:	8830      	ldrh	r0, [r6, #0]
 8080536:	f008 fcf2 	bl	8088f1e <digitalWrite>
          if (n>1)  delay(60);
 808053a:	2c01      	cmp	r4, #1
 808053c:	d002      	beq.n	8080544 <_Z7Flickerj+0x2c>
 808053e:	203c      	movs	r0, #60	; 0x3c
 8080540:	f007 f809 	bl	8087556 <delay>
        for (size_t i = 0; i < n; i++)
 8080544:	3501      	adds	r5, #1
 8080546:	e7eb      	b.n	8080520 <_Z7Flickerj+0x8>
    }
 8080548:	bd70      	pop	{r4, r5, r6, pc}
 808054a:	bf00      	nop
 808054c:	20000014 	.word	0x20000014

08080550 <_Z12LowBattBlinkv>:
    {
 8080550:	b510      	push	{r4, lr}
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080552:	4c11      	ldr	r4, [pc, #68]	; (8080598 <_Z12LowBattBlinkv+0x48>)
 8080554:	2101      	movs	r1, #1
 8080556:	8820      	ldrh	r0, [r4, #0]
 8080558:	f008 fce1 	bl	8088f1e <digitalWrite>
          delay(2000);                   // Waits for a sec
 808055c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080560:	f006 fff9 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);   // Sets the LED on
 8080564:	2100      	movs	r1, #0
 8080566:	8820      	ldrh	r0, [r4, #0]
 8080568:	f008 fcd9 	bl	8088f1e <digitalWrite>
          delay(2000);
 808056c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080570:	f006 fff1 	bl	8087556 <delay>
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 8080574:	2101      	movs	r1, #1
 8080576:	8820      	ldrh	r0, [r4, #0]
 8080578:	f008 fcd1 	bl	8088f1e <digitalWrite>
          delay(2000);                   // Waits for a sec
 808057c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080580:	f006 ffe9 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);   // Sets the LED on
 8080584:	8820      	ldrh	r0, [r4, #0]
 8080586:	2100      	movs	r1, #0
 8080588:	f008 fcc9 	bl	8088f1e <digitalWrite>
    }
 808058c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          delay(2000);
 8080590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080594:	f006 bfdf 	b.w	8087556 <delay>
 8080598:	20000014 	.word	0x20000014

0808059c <_Z15WeakSignalBlinkv>:
    {
 808059c:	b538      	push	{r3, r4, r5, lr}
 808059e:	250a      	movs	r5, #10
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 80805a0:	4c0f      	ldr	r4, [pc, #60]	; (80805e0 <_Z15WeakSignalBlinkv+0x44>)
 80805a2:	2101      	movs	r1, #1
 80805a4:	8820      	ldrh	r0, [r4, #0]
 80805a6:	f008 fcba 	bl	8088f1e <digitalWrite>
          delay(150);                   // Waits for a sec
 80805aa:	2096      	movs	r0, #150	; 0x96
 80805ac:	f006 ffd3 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);    // Sets the LED off
 80805b0:	2100      	movs	r1, #0
 80805b2:	8820      	ldrh	r0, [r4, #0]
 80805b4:	f008 fcb3 	bl	8088f1e <digitalWrite>
          delay(150);
 80805b8:	2096      	movs	r0, #150	; 0x96
 80805ba:	f006 ffcc 	bl	8087556 <delay>
        for (size_t i = 0; i < 10; i++)
 80805be:	3d01      	subs	r5, #1
 80805c0:	d1ef      	bne.n	80805a2 <_Z15WeakSignalBlinkv+0x6>
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 80805c2:	2101      	movs	r1, #1
 80805c4:	8820      	ldrh	r0, [r4, #0]
 80805c6:	f008 fcaa 	bl	8088f1e <digitalWrite>
          delay(550);                   // Waits for a sec
 80805ca:	f240 2026 	movw	r0, #550	; 0x226
 80805ce:	f006 ffc2 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);    // Sets the LED off
 80805d2:	4629      	mov	r1, r5
 80805d4:	8820      	ldrh	r0, [r4, #0]
    }
 80805d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          digitalWrite(ledPin, LOW);    // Sets the LED off
 80805da:	f008 bca0 	b.w	8088f1e <digitalWrite>
 80805de:	bf00      	nop
 80805e0:	20000014 	.word	0x20000014

080805e4 <_Z11UploadBlinkv>:
    {
 80805e4:	b538      	push	{r3, r4, r5, lr}
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 80805e6:	4c11      	ldr	r4, [pc, #68]	; (808062c <_Z11UploadBlinkv+0x48>)
 80805e8:	2101      	movs	r1, #1
 80805ea:	8820      	ldrh	r0, [r4, #0]
 80805ec:	f008 fc97 	bl	8088f1e <digitalWrite>
          delay(500);                   // Waits for a sec
 80805f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80805f4:	f006 ffaf 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);   // Sets the LED on
 80805f8:	2100      	movs	r1, #0
 80805fa:	8820      	ldrh	r0, [r4, #0]
 80805fc:	f008 fc8f 	bl	8088f1e <digitalWrite>
          delay(1000);
 8080600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080604:	f006 ffa7 	bl	8087556 <delay>
 8080608:	2504      	movs	r5, #4
          digitalWrite(ledPin, HIGH);   // Sets the LED on
 808060a:	2101      	movs	r1, #1
 808060c:	8820      	ldrh	r0, [r4, #0]
 808060e:	f008 fc86 	bl	8088f1e <digitalWrite>
          delay(50);                   // Waits for a sec
 8080612:	2032      	movs	r0, #50	; 0x32
 8080614:	f006 ff9f 	bl	8087556 <delay>
          digitalWrite(ledPin, LOW);   // Sets the LED on
 8080618:	2100      	movs	r1, #0
 808061a:	8820      	ldrh	r0, [r4, #0]
 808061c:	f008 fc7f 	bl	8088f1e <digitalWrite>
          delay(50);
 8080620:	2032      	movs	r0, #50	; 0x32
 8080622:	f006 ff98 	bl	8087556 <delay>
        for (size_t i = 0; i < 4; i++)
 8080626:	3d01      	subs	r5, #1
 8080628:	d1ef      	bne.n	808060a <_Z11UploadBlinkv+0x26>
    }
 808062a:	bd38      	pop	{r3, r4, r5, pc}
 808062c:	20000014 	.word	0x20000014

08080630 <_Z12checkBatteryff>:
      {
 8080630:	b537      	push	{r0, r1, r2, r4, r5, lr}
        if (charge < 20) {
 8080632:	4926      	ldr	r1, [pc, #152]	; (80806cc <_Z12checkBatteryff+0x9c>)
      {
 8080634:	4605      	mov	r5, r0
        if (charge < 20) {
 8080636:	f009 fec1 	bl	808a3bc <__aeabi_fcmplt>
 808063a:	b158      	cbz	r0, 8080654 <_Z12checkBatteryff+0x24>
          LowBattBlink();
 808063c:	f7ff ff88 	bl	8080550 <_Z12LowBattBlinkv>
          PMIC pmic;
 8080640:	2100      	movs	r1, #0
 8080642:	4668      	mov	r0, sp
 8080644:	f005 fef5 	bl	8086432 <_ZN4PMICC1Eb>
          pmic.disableBATFET();
 8080648:	4668      	mov	r0, sp
 808064a:	f005 ffca 	bl	80865e2 <_ZN4PMIC13disableBATFETEv>
          PMIC pmic;
 808064e:	4668      	mov	r0, sp
 8080650:	f005 fefe 	bl	8086450 <_ZN4PMICD1Ev>
        if (charge>25)   //  testing seems to indicate unit stops connecting to internet when too low
 8080654:	4628      	mov	r0, r5
 8080656:	491e      	ldr	r1, [pc, #120]	; (80806d0 <_Z12checkBatteryff+0xa0>)
 8080658:	f009 fece 	bl	808a3f8 <__aeabi_fcmpgt>
 808065c:	b340      	cbz	r0, 80806b0 <_Z12checkBatteryff+0x80>
                  if (charge>35 )   min = 300;    // 5 hours (300 min)
 808065e:	491d      	ldr	r1, [pc, #116]	; (80806d4 <_Z12checkBatteryff+0xa4>)
 8080660:	4628      	mov	r0, r5
 8080662:	f009 fec9 	bl	808a3f8 <__aeabi_fcmpgt>
                      if (charge>40 )   min =115;     // 2 hours (120 min)
 8080666:	491c      	ldr	r1, [pc, #112]	; (80806d8 <_Z12checkBatteryff+0xa8>)
                min = 420;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 8080668:	2800      	cmp	r0, #0
                      if (charge>40 )   min =115;     // 2 hours (120 min)
 808066a:	4628      	mov	r0, r5
                min = 420;  // 7 hours (420 min)  // values set to shorter intervals during code testing
 808066c:	bf14      	ite	ne
 808066e:	f44f 7496 	movne.w	r4, #300	; 0x12c
 8080672:	f44f 74d2 	moveq.w	r4, #420	; 0x1a4
                      if (charge>40 )   min =115;     // 2 hours (120 min)
 8080676:	f009 febf 	bl	808a3f8 <__aeabi_fcmpgt>
                          if (charge>60 )   min = 90;   // 1.5 hours (90 min)
 808067a:	4918      	ldr	r1, [pc, #96]	; (80806dc <_Z12checkBatteryff+0xac>)
                      if (charge>40 )   min =115;     // 2 hours (120 min)
 808067c:	2800      	cmp	r0, #0
                          if (charge>60 )   min = 90;   // 1.5 hours (90 min)
 808067e:	4628      	mov	r0, r5
                      if (charge>40 )   min =115;     // 2 hours (120 min)
 8080680:	bf18      	it	ne
 8080682:	2473      	movne	r4, #115	; 0x73
                          if (charge>60 )   min = 90;   // 1.5 hours (90 min)
 8080684:	f009 feb8 	bl	808a3f8 <__aeabi_fcmpgt>
                                if (charge>70 )   min = 60;     // 60 minutes
 8080688:	4915      	ldr	r1, [pc, #84]	; (80806e0 <_Z12checkBatteryff+0xb0>)
                          if (charge>60 )   min = 90;   // 1.5 hours (90 min)
 808068a:	2800      	cmp	r0, #0
                                if (charge>70 )   min = 60;     // 60 minutes
 808068c:	4628      	mov	r0, r5
                          if (charge>60 )   min = 90;   // 1.5 hours (90 min)
 808068e:	bf18      	it	ne
 8080690:	245a      	movne	r4, #90	; 0x5a
                                if (charge>70 )   min = 60;     // 60 minutes
 8080692:	f009 feb1 	bl	808a3f8 <__aeabi_fcmpgt>
                                    if (charge>80 )   min = 30;      // 30 minutes;
 8080696:	4913      	ldr	r1, [pc, #76]	; (80806e4 <_Z12checkBatteryff+0xb4>)
                                if (charge>70 )   min = 60;     // 60 minutes
 8080698:	2800      	cmp	r0, #0
                                    if (charge>80 )   min = 30;      // 30 minutes;
 808069a:	4628      	mov	r0, r5
                                if (charge>70 )   min = 60;     // 60 minutes
 808069c:	bf18      	it	ne
 808069e:	243c      	movne	r4, #60	; 0x3c
                                    if (charge>80 )   min = 30;      // 30 minutes;
 80806a0:	f009 feaa 	bl	808a3f8 <__aeabi_fcmpgt>
 80806a4:	2800      	cmp	r0, #0
 80806a6:	bf18      	it	ne
 80806a8:	241e      	movne	r4, #30
      }  // end of checkBattery
 80806aa:	4620      	mov	r0, r4
 80806ac:	b003      	add	sp, #12
 80806ae:	bd30      	pop	{r4, r5, pc}
                  System.sleep(SLEEP_MODE_DEEP, sleepInterval * min);
 80806b0:	f241 34b0 	movw	r4, #5040	; 0x13b0
                  LowBattBlink();
 80806b4:	f7ff ff4c 	bl	8080550 <_Z12LowBattBlinkv>
                  System.sleep(SLEEP_MODE_DEEP, sleepInterval * min);
 80806b8:	4b0b      	ldr	r3, [pc, #44]	; (80806e8 <_Z12checkBatteryff+0xb8>)
 80806ba:	2101      	movs	r1, #1
 80806bc:	681a      	ldr	r2, [r3, #0]
 80806be:	4b0b      	ldr	r3, [pc, #44]	; (80806ec <_Z12checkBatteryff+0xbc>)
 80806c0:	4668      	mov	r0, sp
 80806c2:	4362      	muls	r2, r4
 80806c4:	681b      	ldr	r3, [r3, #0]
 80806c6:	f006 f8b5 	bl	8086834 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
          return min;
 80806ca:	e7ee      	b.n	80806aa <_Z12checkBatteryff+0x7a>
 80806cc:	41a00000 	.word	0x41a00000
 80806d0:	41c80000 	.word	0x41c80000
 80806d4:	420c0000 	.word	0x420c0000
 80806d8:	42200000 	.word	0x42200000
 80806dc:	42700000 	.word	0x42700000
 80806e0:	428c0000 	.word	0x428c0000
 80806e4:	42a00000 	.word	0x42a00000
 80806e8:	20000028 	.word	0x20000028
 80806ec:	2000025c 	.word	0x2000025c

080806f0 <_Z12getMedianNumPii>:
    {     int bTab[iFilterLen];
 80806f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80806f2:	008a      	lsls	r2, r1, #2
 80806f4:	3207      	adds	r2, #7
 80806f6:	f022 0207 	bic.w	r2, r2, #7
 80806fa:	af00      	add	r7, sp, #0
 80806fc:	ebad 0d02 	sub.w	sp, sp, r2
 8080700:	466c      	mov	r4, sp
 8080702:	2200      	movs	r2, #0
 8080704:	1e4b      	subs	r3, r1, #1
        for (byte i = 0; i<iFilterLen; i++)
 8080706:	b2d5      	uxtb	r5, r2
 8080708:	428d      	cmp	r5, r1
 808070a:	f102 0201 	add.w	r2, r2, #1
 808070e:	db11      	blt.n	8080734 <_Z12getMedianNumPii+0x44>
 8080710:	4618      	mov	r0, r3
        for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
 8080712:	1a1a      	subs	r2, r3, r0
 8080714:	4293      	cmp	r3, r2
 8080716:	dd14      	ble.n	8080742 <_Z12getMedianNumPii+0x52>
 8080718:	4622      	mov	r2, r4
            {  for (i = 0; i < iFilterLen - j - 1; i++)
 808071a:	2500      	movs	r5, #0
 808071c:	4285      	cmp	r5, r0
 808071e:	da0e      	bge.n	808073e <_Z12getMedianNumPii+0x4e>
              {  if (bTab[i] > bTab[i + 1])
 8080720:	6816      	ldr	r6, [r2, #0]
 8080722:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8080726:	3501      	adds	r5, #1
 8080728:	4566      	cmp	r6, ip
 808072a:	dd01      	ble.n	8080730 <_Z12getMedianNumPii+0x40>
                    bTab[i + 1] = bTemp;
 808072c:	e9c2 c600 	strd	ip, r6, [r2]
 8080730:	3204      	adds	r2, #4
 8080732:	e7f3      	b.n	808071c <_Z12getMedianNumPii+0x2c>
                bTab[i] = bArray[i];                  // copy input array into BTab[] array
 8080734:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8080738:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
        for (byte i = 0; i<iFilterLen; i++)
 808073c:	e7e3      	b.n	8080706 <_Z12getMedianNumPii+0x16>
        for (j = 0; j < iFilterLen - 1; j++)        // put array in ascending order
 808073e:	3801      	subs	r0, #1
 8080740:	e7e7      	b.n	8080712 <_Z12getMedianNumPii+0x22>
      if ((iFilterLen & 1) > 0)  // check to see if iFilterlen is odd or even using & (bitwise AND) i.e if length &AND 1 is TRUE (>0)
 8080742:	07ca      	lsls	r2, r1, #31
 8080744:	d506      	bpl.n	8080754 <_Z12getMedianNumPii+0x64>
            bTemp = bTab[(iFilterLen - 1) / 2];     // then then it is odd, and should take the central value
 8080746:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 808074a:	105b      	asrs	r3, r3, #1
 808074c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    } //end getmedianNum
 8080750:	46bd      	mov	sp, r7
 8080752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;  // if even then take aveage of two central values
 8080754:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8080758:	1049      	asrs	r1, r1, #1
 808075a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 808075e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8080762:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8080766:	4418      	add	r0, r3
 8080768:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 808076c:	1040      	asrs	r0, r0, #1
      return bTemp;
 808076e:	e7ef      	b.n	8080750 <_Z12getMedianNumPii+0x60>

08080770 <_Z6getSpCv>:
    {
 8080770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080772:	b0d1      	sub	sp, #324	; 0x144
 8080774:	466c      	mov	r4, sp
        int analogBufferIndex = 0,  copyIndex = 0;
 8080776:	2500      	movs	r5, #0
    {
 8080778:	4626      	mov	r6, r4
            analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 808077a:	4f43      	ldr	r7, [pc, #268]	; (8080888 <_Z6getSpCv+0x118>)
 808077c:	8838      	ldrh	r0, [r7, #0]
 808077e:	f008 fbe7 	bl	8088f50 <analogRead>
            analogBufferIndex++;
 8080782:	3501      	adds	r5, #1
            analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 8080784:	f846 0b04 	str.w	r0, [r6], #4
              delay(50u);  //delay 50 milliseconds between taking sample
 8080788:	2032      	movs	r0, #50	; 0x32
 808078a:	f006 fee4 	bl	8087556 <delay>
        while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 808078e:	2d28      	cmp	r5, #40	; 0x28
 8080790:	d1f4      	bne.n	808077c <_Z6getSpCv+0xc>
 8080792:	ab28      	add	r3, sp, #160	; 0xa0
        for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 8080794:	2100      	movs	r1, #0
 8080796:	4618      	mov	r0, r3
                  analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
 8080798:	f854 2b04 	ldr.w	r2, [r4], #4
        for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 808079c:	3101      	adds	r1, #1
 808079e:	2928      	cmp	r1, #40	; 0x28
                  analogBufferTemp[copyIndex]= analogBuffer[copyIndex]; // copy analogBuffer to analogBufferTemp
 80807a0:	f843 2b04 	str.w	r2, [r3], #4
        for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1
 80807a4:	d1f8      	bne.n	8080798 <_Z6getSpCv+0x28>
        averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 80807a6:	f7ff ffa3 	bl	80806f0 <_Z12getMedianNumPii>
 80807aa:	f009 fc15 	bl	8089fd8 <__aeabi_i2f>
 80807ae:	4937      	ldr	r1, [pc, #220]	; (808088c <_Z6getSpCv+0x11c>)
 80807b0:	f009 fc66 	bl	808a080 <__aeabi_fmul>
 80807b4:	4936      	ldr	r1, [pc, #216]	; (8080890 <_Z6getSpCv+0x120>)
 80807b6:	f009 fd17 	bl	808a1e8 <__aeabi_fdiv>
        SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 80807ba:	f008 fff1 	bl	80897a0 <__aeabi_f2d>
 80807be:	a32a      	add	r3, pc, #168	; (adr r3, 8080868 <_Z6getSpCv+0xf8>)
 80807c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807c4:	4604      	mov	r4, r0
 80807c6:	460d      	mov	r5, r1
 80807c8:	f009 f842 	bl	8089850 <__aeabi_dmul>
 80807cc:	4622      	mov	r2, r4
 80807ce:	462b      	mov	r3, r5
 80807d0:	f009 f83e 	bl	8089850 <__aeabi_dmul>
 80807d4:	4622      	mov	r2, r4
 80807d6:	462b      	mov	r3, r5
 80807d8:	f009 f83a 	bl	8089850 <__aeabi_dmul>
              + 24.823*averageVoltage*averageVoltage
 80807dc:	a324      	add	r3, pc, #144	; (adr r3, 8080870 <_Z6getSpCv+0x100>)
 80807de:	e9d3 2300 	ldrd	r2, r3, [r3]
        SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 80807e2:	4606      	mov	r6, r0
 80807e4:	460f      	mov	r7, r1
              + 24.823*averageVoltage*averageVoltage
 80807e6:	4620      	mov	r0, r4
 80807e8:	4629      	mov	r1, r5
 80807ea:	f009 f831 	bl	8089850 <__aeabi_dmul>
 80807ee:	4622      	mov	r2, r4
 80807f0:	462b      	mov	r3, r5
 80807f2:	f009 f82d 	bl	8089850 <__aeabi_dmul>
 80807f6:	4602      	mov	r2, r0
 80807f8:	460b      	mov	r3, r1
 80807fa:	4630      	mov	r0, r6
 80807fc:	4639      	mov	r1, r7
 80807fe:	f008 fe71 	bl	80894e4 <__adddf3>
              + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080802:	a31d      	add	r3, pc, #116	; (adr r3, 8080878 <_Z6getSpCv+0x108>)
 8080804:	e9d3 2300 	ldrd	r2, r3, [r3]
              + 24.823*averageVoltage*averageVoltage
 8080808:	4606      	mov	r6, r0
 808080a:	460f      	mov	r7, r1
              + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 808080c:	4620      	mov	r0, r4
 808080e:	4629      	mov	r1, r5
 8080810:	f009 f81e 	bl	8089850 <__aeabi_dmul>
 8080814:	4602      	mov	r2, r0
 8080816:	460b      	mov	r3, r1
 8080818:	4630      	mov	r0, r6
 808081a:	4639      	mov	r1, r7
 808081c:	f008 fe62 	bl	80894e4 <__adddf3>
        float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 8080820:	4b1c      	ldr	r3, [pc, #112]	; (8080894 <_Z6getSpCv+0x124>)
              + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080822:	4604      	mov	r4, r0
        float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 8080824:	6818      	ldr	r0, [r3, #0]
              + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 8080826:	460d      	mov	r5, r1
        float compensationCoefficient=1.0+0.019*(t2-25.0);    //temperature compensation formula: 0.019 used by YSI
 8080828:	f008 ffba 	bl	80897a0 <__aeabi_f2d>
 808082c:	2200      	movs	r2, #0
 808082e:	4b1a      	ldr	r3, [pc, #104]	; (8080898 <_Z6getSpCv+0x128>)
 8080830:	f008 fe56 	bl	80894e0 <__aeabi_dsub>
 8080834:	a312      	add	r3, pc, #72	; (adr r3, 8080880 <_Z6getSpCv+0x110>)
 8080836:	e9d3 2300 	ldrd	r2, r3, [r3]
 808083a:	f009 f809 	bl	8089850 <__aeabi_dmul>
 808083e:	2200      	movs	r2, #0
 8080840:	4b16      	ldr	r3, [pc, #88]	; (808089c <_Z6getSpCv+0x12c>)
 8080842:	f008 fe4f 	bl	80894e4 <__adddf3>
 8080846:	f009 fabd 	bl	8089dc4 <__aeabi_d2f>
              + 624.194*averageVoltage) /compensationCoefficient; //compensationCoefficient //convert voltage value to SpC value, then correct for temp
 808084a:	f008 ffa9 	bl	80897a0 <__aeabi_f2d>
 808084e:	4602      	mov	r2, r0
 8080850:	460b      	mov	r3, r1
 8080852:	4620      	mov	r0, r4
 8080854:	4629      	mov	r1, r5
 8080856:	f009 f925 	bl	8089aa4 <__aeabi_ddiv>
        SpC= ( 18.835*averageVoltage*averageVoltage*averageVoltage
 808085a:	f009 fab3 	bl	8089dc4 <__aeabi_d2f>
    }  // end of getSpC
 808085e:	b051      	add	sp, #324	; 0x144
 8080860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080862:	bf00      	nop
 8080864:	f3af 8000 	nop.w
 8080868:	8f5c28f6 	.word	0x8f5c28f6
 808086c:	4032d5c2 	.word	0x4032d5c2
 8080870:	20c49ba6 	.word	0x20c49ba6
 8080874:	4038d2b0 	.word	0x4038d2b0
 8080878:	4fdf3b64 	.word	0x4fdf3b64
 808087c:	4083818d 	.word	0x4083818d
 8080880:	6a7ef9db 	.word	0x6a7ef9db
 8080884:	3f9374bc 	.word	0x3f9374bc
 8080888:	20000004 	.word	0x20000004
 808088c:	40533333 	.word	0x40533333
 8080890:	457ff000 	.word	0x457ff000
 8080894:	20000030 	.word	0x20000030
 8080898:	40390000 	.word	0x40390000
 808089c:	3ff00000 	.word	0x3ff00000

080808a0 <_Z9getAvoltsv>:
    {
 80808a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80808a2:	b0d1      	sub	sp, #324	; 0x144
 80808a4:	466c      	mov	r4, sp
      int analogBufferIndex = 0, copyIndex = 0;
 80808a6:	2500      	movs	r5, #0
    {
 80808a8:	4626      	mov	r6, r4
            analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80808aa:	4f11      	ldr	r7, [pc, #68]	; (80808f0 <_Z9getAvoltsv+0x50>)
 80808ac:	8838      	ldrh	r0, [r7, #0]
 80808ae:	f008 fb4f 	bl	8088f50 <analogRead>
            analogBufferIndex++;
 80808b2:	3501      	adds	r5, #1
            analogBuffer[analogBufferIndex] = analogRead(SpCSensorPin);    //read the analog value and store into the buffer
 80808b4:	f846 0b04 	str.w	r0, [r6], #4
            delay(50u);  //delay 50 milliseconds between taking sample
 80808b8:	2032      	movs	r0, #50	; 0x32
 80808ba:	f006 fe4c 	bl	8087556 <delay>
      while (analogBufferIndex < SCOUNT)   // read the sensor every 50 milliseconds, SCOUNT times and store in array
 80808be:	2d28      	cmp	r5, #40	; 0x28
 80808c0:	d1f4      	bne.n	80808ac <_Z9getAvoltsv+0xc>
 80808c2:	ab28      	add	r3, sp, #160	; 0xa0
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 80808c4:	2100      	movs	r1, #0
 80808c6:	4618      	mov	r0, r3
              analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
 80808c8:	f854 2b04 	ldr.w	r2, [r4], #4
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 80808cc:	3101      	adds	r1, #1
 80808ce:	2928      	cmp	r1, #40	; 0x28
              analogBufferTemp[copyIndex]= analogBuffer[copyIndex];   // copy analogBuffer to analogBufferTemp
 80808d0:	f843 2b04 	str.w	r2, [r3], #4
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)  // for coppyIndex = 0 to SCOUNT-1  // old way of copying an array
 80808d4:	d1f8      	bne.n	80808c8 <_Z9getAvoltsv+0x28>
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / resolution; // read the analog value,
 80808d6:	f7ff ff0b 	bl	80806f0 <_Z12getMedianNumPii>
 80808da:	f009 fb7d 	bl	8089fd8 <__aeabi_i2f>
 80808de:	4905      	ldr	r1, [pc, #20]	; (80808f4 <_Z9getAvoltsv+0x54>)
 80808e0:	f009 fbce 	bl	808a080 <__aeabi_fmul>
 80808e4:	4904      	ldr	r1, [pc, #16]	; (80808f8 <_Z9getAvoltsv+0x58>)
 80808e6:	f009 fc7f 	bl	808a1e8 <__aeabi_fdiv>
    }  // end of getAvolts
 80808ea:	b051      	add	sp, #324	; 0x144
 80808ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80808ee:	bf00      	nop
 80808f0:	20000004 	.word	0x20000004
 80808f4:	40533333 	.word	0x40533333
 80808f8:	457ff000 	.word	0x457ff000

080808fc <_Z6waitMSm>:
      { // timeout == 0 waits forever
 80808fc:	b538      	push	{r3, r4, r5, lr}
 80808fe:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080900:	f005 fa3e 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
 8080904:	4605      	mov	r5, r0
        while (timeout == 0 || millis() - ms < timeout)
 8080906:	b924      	cbnz	r4, 8080912 <_Z6waitMSm+0x16>

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 8080908:	f7ff fcf8 	bl	80802fc <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 808090c:	f005 fd02 	bl	8086314 <spark_process>
    }
 8080910:	e7f9      	b.n	8080906 <_Z6waitMSm+0xa>
 8080912:	f005 fa35 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
 8080916:	1b43      	subs	r3, r0, r5
 8080918:	42a3      	cmp	r3, r4
 808091a:	d3f5      	bcc.n	8080908 <_Z6waitMSm+0xc>
      }
 808091c:	bd38      	pop	{r3, r4, r5, pc}

0808091e <_Z7waitSecm>:
    {
 808091e:	b570      	push	{r4, r5, r6, lr}
 8080920:	4606      	mov	r6, r0
 8080922:	f005 fa2d 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
      for (uint32_t sec = (millis()/1000); (millis()/1000) - sec < seconds; Particle.process());
 8080926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808092a:	fbb0 f5f3 	udiv	r5, r0, r3
 808092e:	461c      	mov	r4, r3
 8080930:	f005 fa26 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
 8080934:	fbb0 f3f4 	udiv	r3, r0, r4
 8080938:	1b5b      	subs	r3, r3, r5
 808093a:	42b3      	cmp	r3, r6
 808093c:	d204      	bcs.n	8080948 <_Z7waitSecm+0x2a>
 808093e:	f7ff fcdd 	bl	80802fc <_ZN19ApplicationWatchdog7checkinEv>
    		spark_process();
 8080942:	f005 fce7 	bl	8086314 <spark_process>
    }
 8080946:	e7f3      	b.n	8080930 <_Z7waitSecm+0x12>
    }
 8080948:	bd70      	pop	{r4, r5, r6, pc}
	...

0808094c <_Z11writeHeaderv>:
    {
 808094c:	b510      	push	{r4, lr}
      file.print(F("datetime, Atemp, H2Otemp, Sp_C , Avolts, rain, depth_in, humid, Apressure, H2Opressure, SoC, volts"));
 808094e:	4c05      	ldr	r4, [pc, #20]	; (8080964 <_Z11writeHeaderv+0x18>)
 8080950:	4905      	ldr	r1, [pc, #20]	; (8080968 <_Z11writeHeaderv+0x1c>)
 8080952:	4620      	mov	r0, r4
 8080954:	f006 fb7f 	bl	8087056 <_ZN5Print5printEPK19__FlashStringHelper>
      file.println();
 8080958:	4620      	mov	r0, r4
    }
 808095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      file.println();
 808095e:	f006 bb7e 	b.w	808705e <_ZN5Print7printlnEv>
 8080962:	bf00      	nop
 8080964:	20000374 	.word	0x20000374
 8080968:	0808c42c 	.word	0x0808c42c

0808096c <_Z8setup_SDv>:
    {
 808096c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      dataMode_{dataMode}
 8080970:	4b6a      	ldr	r3, [pc, #424]	; (8080b1c <_Z8setup_SDv+0x1b0>)
 8080972:	b093      	sub	sp, #76	; 0x4c
 8080974:	930e      	str	r3, [sp, #56]	; 0x38
 8080976:	2300      	movs	r3, #0
 8080978:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 808097c:	4b68      	ldr	r3, [pc, #416]	; (8080b20 <_Z8setup_SDv+0x1b4>)
       if (!sd.begin(chipSelect, SD_SCK_MHZ(20))) {  sprintf(works,"No ");   }
 808097e:	210c      	movs	r1, #12
 8080980:	9310      	str	r3, [sp, #64]	; 0x40
 8080982:	2301      	movs	r3, #1
 8080984:	4867      	ldr	r0, [pc, #412]	; (8080b24 <_Z8setup_SDv+0x1b8>)
 8080986:	aa0e      	add	r2, sp, #56	; 0x38
 8080988:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 808098c:	f7ff fd86 	bl	808049c <_ZN5SdFat5beginEhN8particle11SPISettingsE>
 8080990:	2800      	cmp	r0, #0
 8080992:	f040 8084 	bne.w	8080a9e <_Z8setup_SDv+0x132>
 8080996:	4964      	ldr	r1, [pc, #400]	; (8080b28 <_Z8setup_SDv+0x1bc>)
          else { sprintf(works,"Yes "); }
 8080998:	4864      	ldr	r0, [pc, #400]	; (8080b2c <_Z8setup_SDv+0x1c0>)
 808099a:	f009 fe88 	bl	808a6ae <strcpy>
        Time.zone(-6);  // setup to CST time zone, which is part of the ISO8601 format        //**
 808099e:	4864      	ldr	r0, [pc, #400]	; (8080b30 <_Z8setup_SDv+0x1c4>)
 80809a0:	f006 fc1e 	bl	80871e0 <_ZN9TimeClass4zoneEf>
        if( !Time.isValid())
 80809a4:	f006 fd20 	bl	80873e8 <_ZN9TimeClass7isValidEv>
 80809a8:	4d62      	ldr	r5, [pc, #392]	; (8080b34 <_Z8setup_SDv+0x1c8>)
 80809aa:	4604      	mov	r4, r0
 80809ac:	2800      	cmp	r0, #0
 80809ae:	d178      	bne.n	8080aa2 <_Z8setup_SDv+0x136>
               fileName = String("lost-time000.csv");       
 80809b0:	4961      	ldr	r1, [pc, #388]	; (8080b38 <_Z8setup_SDv+0x1cc>)
 80809b2:	a80e      	add	r0, sp, #56	; 0x38
 80809b4:	f006 fa64 	bl	8086e80 <_ZN6StringC1EPKc>
 80809b8:	a90e      	add	r1, sp, #56	; 0x38
 80809ba:	4628      	mov	r0, r5
 80809bc:	f006 faaa 	bl	8086f14 <_ZN6StringaSEOS_>
 80809c0:	a80e      	add	r0, sp, #56	; 0x38
 80809c2:	f006 fa13 	bl	8086dec <_ZN6StringD1Ev>
            fileName.String::operator[](9) = '0' + i/100;
 80809c6:	46a9      	mov	r9, r5
            fileName.String::operator[](10) = '0' + i/10;
 80809c8:	270a      	movs	r7, #10
    return vwd()->exists(path);
 80809ca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8080b48 <_Z8setup_SDv+0x1dc>
            fileName.String::operator[](9) = '0' + i/100;
 80809ce:	2109      	movs	r1, #9
 80809d0:	4648      	mov	r0, r9
 80809d2:	f006 fb15 	bl	8087000 <_ZN6StringixEj>
 80809d6:	2364      	movs	r3, #100	; 0x64
 80809d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80809dc:	3330      	adds	r3, #48	; 0x30
 80809de:	7003      	strb	r3, [r0, #0]
            fileName.String::operator[](10) = '0' + i/10;
 80809e0:	210a      	movs	r1, #10
 80809e2:	4648      	mov	r0, r9
 80809e4:	f006 fb0c 	bl	8087000 <_ZN6StringixEj>
 80809e8:	fbb4 f6f7 	udiv	r6, r4, r7
 80809ec:	f106 0330 	add.w	r3, r6, #48	; 0x30
            fileName.String::operator[](11) = '0' + i%10;
 80809f0:	210b      	movs	r1, #11
            fileName.String::operator[](10) = '0' + i/10;
 80809f2:	7003      	strb	r3, [r0, #0]
            fileName.String::operator[](11) = '0' + i%10;
 80809f4:	4648      	mov	r0, r9
 80809f6:	f006 fb03 	bl	8087000 <_ZN6StringixEj>
 80809fa:	fb07 4616 	mls	r6, r7, r6, r4
 80809fe:	3630      	adds	r6, #48	; 0x30
 8080a00:	7006      	strb	r6, [r0, #0]
 8080a02:	6829      	ldr	r1, [r5, #0]
 8080a04:	4640      	mov	r0, r8
 8080a06:	f7ff fcf8 	bl	80803fa <_ZN7FatFile6existsEPKc>
          if (!sd.exists(fileName)) {  break;  }
 8080a0a:	b118      	cbz	r0, 8080a14 <_Z8setup_SDv+0xa8>
        for (int i = 0; i < 1000; i++) {
 8080a0c:	3401      	adds	r4, #1
 8080a0e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8080a12:	d1dc      	bne.n	80809ce <_Z8setup_SDv+0x62>
           if(usbOn) {Serial.println("card filename " + fileName); waitMS(100);}
 8080a14:	4e49      	ldr	r6, [pc, #292]	; (8080b3c <_Z8setup_SDv+0x1d0>)
 8080a16:	6833      	ldr	r3, [r6, #0]
 8080a18:	2b00      	cmp	r3, #0
 8080a1a:	d032      	beq.n	8080a82 <_Z8setup_SDv+0x116>
 8080a1c:	f007 fd82 	bl	8088524 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080a20:	4947      	ldr	r1, [pc, #284]	; (8080b40 <_Z8setup_SDv+0x1d4>)
 8080a22:	4604      	mov	r4, r0
 8080a24:	a80e      	add	r0, sp, #56	; 0x38
 8080a26:	f006 fa2b 	bl	8086e80 <_ZN6StringC1EPKc>
 8080a2a:	4942      	ldr	r1, [pc, #264]	; (8080b34 <_Z8setup_SDv+0x1c8>)
 8080a2c:	a80e      	add	r0, sp, #56	; 0x38
 8080a2e:	f006 fab4 	bl	8086f9a <_ZplRK15StringSumHelperRK6String>
 8080a32:	6801      	ldr	r1, [r0, #0]
 8080a34:	4620      	mov	r0, r4
 8080a36:	f006 fb1e 	bl	8087076 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
 8080a3a:	a80e      	add	r0, sp, #56	; 0x38
 8080a3c:	f006 f9d6 	bl	8086dec <_ZN6StringD1Ev>
 8080a40:	2064      	movs	r0, #100	; 0x64
 8080a42:	f7ff ff5b 	bl	80808fc <_Z6waitMSm>
           if(usbOn) {Serial.println("card works " + String(works)); waitMS(100);}
 8080a46:	6833      	ldr	r3, [r6, #0]
 8080a48:	b1db      	cbz	r3, 8080a82 <_Z8setup_SDv+0x116>
 8080a4a:	f007 fd6b 	bl	8088524 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8080a4e:	493d      	ldr	r1, [pc, #244]	; (8080b44 <_Z8setup_SDv+0x1d8>)
 8080a50:	4604      	mov	r4, r0
 8080a52:	a80e      	add	r0, sp, #56	; 0x38
 8080a54:	f006 fa14 	bl	8086e80 <_ZN6StringC1EPKc>
 8080a58:	4934      	ldr	r1, [pc, #208]	; (8080b2c <_Z8setup_SDv+0x1c0>)
 8080a5a:	a80a      	add	r0, sp, #40	; 0x28
 8080a5c:	f006 fa10 	bl	8086e80 <_ZN6StringC1EPKc>
 8080a60:	a90a      	add	r1, sp, #40	; 0x28
 8080a62:	a80e      	add	r0, sp, #56	; 0x38
 8080a64:	f006 fa99 	bl	8086f9a <_ZplRK15StringSumHelperRK6String>
 8080a68:	6801      	ldr	r1, [r0, #0]
 8080a6a:	4620      	mov	r0, r4
 8080a6c:	f006 fb03 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080a70:	a80a      	add	r0, sp, #40	; 0x28
 8080a72:	f006 f9bb 	bl	8086dec <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080a76:	a80e      	add	r0, sp, #56	; 0x38
 8080a78:	f006 f9b8 	bl	8086dec <_ZN6StringD1Ev>
 8080a7c:	2064      	movs	r0, #100	; 0x64
 8080a7e:	f7ff ff3d 	bl	80808fc <_Z6waitMSm>
 8080a82:	6829      	ldr	r1, [r5, #0]
 8080a84:	4830      	ldr	r0, [pc, #192]	; (8080b48 <_Z8setup_SDv+0x1dc>)
 8080a86:	f7ff fcb8 	bl	80803fa <_ZN7FatFile6existsEPKc>
        if(sd.exists(fileName))
 8080a8a:	2800      	cmp	r0, #0
 8080a8c:	d03c      	beq.n	8080b08 <_Z8setup_SDv+0x19c>
            {  file.open(fileName, O_WRONLY | O_APPEND);  }
 8080a8e:	2209      	movs	r2, #9
 8080a90:	6829      	ldr	r1, [r5, #0]
 8080a92:	482e      	ldr	r0, [pc, #184]	; (8080b4c <_Z8setup_SDv+0x1e0>)
 8080a94:	f7ff fcbe 	bl	8080414 <_ZN7FatFile4openEPKci>
    }
 8080a98:	b013      	add	sp, #76	; 0x4c
 8080a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          else { sprintf(works,"Yes "); }
 8080a9e:	492c      	ldr	r1, [pc, #176]	; (8080b50 <_Z8setup_SDv+0x1e4>)
 8080aa0:	e77a      	b.n	8080998 <_Z8setup_SDv+0x2c>
             fileName =  String(String(unit_name) + "_" + Time.format(Time.now(),"%Y-%m-%d") + ".csv");    //**
 8080aa2:	492c      	ldr	r1, [pc, #176]	; (8080b54 <_Z8setup_SDv+0x1e8>)
 8080aa4:	a802      	add	r0, sp, #8
 8080aa6:	f006 f9eb 	bl	8086e80 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080aaa:	a902      	add	r1, sp, #8
 8080aac:	a806      	add	r0, sp, #24
 8080aae:	f006 fa26 	bl	8086efe <_ZN6StringC1ERKS_>
 8080ab2:	4929      	ldr	r1, [pc, #164]	; (8080b58 <_Z8setup_SDv+0x1ec>)
 8080ab4:	a806      	add	r0, sp, #24
 8080ab6:	f006 fa7c 	bl	8086fb2 <_ZplRK15StringSumHelperPKc>
 8080aba:	4604      	mov	r4, r0
 8080abc:	f006 fcb1 	bl	8087422 <_ZN9TimeClass3nowEv>
 8080ac0:	4b26      	ldr	r3, [pc, #152]	; (8080b5c <_Z8setup_SDv+0x1f0>)
 8080ac2:	4602      	mov	r2, r0
 8080ac4:	9300      	str	r3, [sp, #0]
 8080ac6:	4926      	ldr	r1, [pc, #152]	; (8080b60 <_Z8setup_SDv+0x1f4>)
 8080ac8:	17c3      	asrs	r3, r0, #31
 8080aca:	a80a      	add	r0, sp, #40	; 0x28
 8080acc:	f006 fc4a 	bl	8087364 <_ZN9TimeClass6formatExPKc>
 8080ad0:	a90a      	add	r1, sp, #40	; 0x28
 8080ad2:	4620      	mov	r0, r4
 8080ad4:	f006 fa61 	bl	8086f9a <_ZplRK15StringSumHelperRK6String>
 8080ad8:	4922      	ldr	r1, [pc, #136]	; (8080b64 <_Z8setup_SDv+0x1f8>)
 8080ada:	f006 fa6a 	bl	8086fb2 <_ZplRK15StringSumHelperPKc>
 8080ade:	4601      	mov	r1, r0
 8080ae0:	a80e      	add	r0, sp, #56	; 0x38
 8080ae2:	f006 fa0c 	bl	8086efe <_ZN6StringC1ERKS_>
 8080ae6:	a90e      	add	r1, sp, #56	; 0x38
 8080ae8:	4628      	mov	r0, r5
 8080aea:	f006 fa13 	bl	8086f14 <_ZN6StringaSEOS_>
 8080aee:	a80e      	add	r0, sp, #56	; 0x38
 8080af0:	f006 f97c 	bl	8086dec <_ZN6StringD1Ev>
 8080af4:	a80a      	add	r0, sp, #40	; 0x28
 8080af6:	f006 f979 	bl	8086dec <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080afa:	a806      	add	r0, sp, #24
 8080afc:	f006 f976 	bl	8086dec <_ZN6StringD1Ev>
 8080b00:	a802      	add	r0, sp, #8
 8080b02:	f006 f973 	bl	8086dec <_ZN6StringD1Ev>
 8080b06:	e785      	b.n	8080a14 <_Z8setup_SDv+0xa8>
                file.open(fileName, O_WRONLY |O_CREAT | O_EXCL);
 8080b08:	f640 2201 	movw	r2, #2561	; 0xa01
 8080b0c:	6829      	ldr	r1, [r5, #0]
 8080b0e:	480f      	ldr	r0, [pc, #60]	; (8080b4c <_Z8setup_SDv+0x1e0>)
 8080b10:	f7ff fc80 	bl	8080414 <_ZN7FatFile4openEPKci>
                writeHeader();
 8080b14:	f7ff ff1a 	bl	808094c <_Z11writeHeaderv>
    }
 8080b18:	e7be      	b.n	8080a98 <_Z8setup_SDv+0x12c>
 8080b1a:	bf00      	nop
 8080b1c:	0808ca6c 	.word	0x0808ca6c
 8080b20:	01312d00 	.word	0x01312d00
 8080b24:	2000044c 	.word	0x2000044c
 8080b28:	0808c48f 	.word	0x0808c48f
 8080b2c:	200008e8 	.word	0x200008e8
 8080b30:	c0c00000 	.word	0xc0c00000
 8080b34:	200003a0 	.word	0x200003a0
 8080b38:	0808c498 	.word	0x0808c498
 8080b3c:	200008dc 	.word	0x200008dc
 8080b40:	0808c4c0 	.word	0x0808c4c0
 8080b44:	0808c4cf 	.word	0x0808c4cf
 8080b48:	20000888 	.word	0x20000888
 8080b4c:	2000037c 	.word	0x2000037c
 8080b50:	0808c493 	.word	0x0808c493
 8080b54:	0808c4a9 	.word	0x0808c4a9
 8080b58:	0808c4b5 	.word	0x0808c4b5
 8080b5c:	0808c4b7 	.word	0x0808c4b7
 8080b60:	20000aec 	.word	0x20000aec
 8080b64:	0808c4a4 	.word	0x0808c4a4

08080b68 <_Z7logDataPc>:
    {
 8080b68:	b530      	push	{r4, r5, lr}
 8080b6a:	b087      	sub	sp, #28
 8080b6c:	4605      	mov	r5, r0
        time_t time = Time.now();
 8080b6e:	f006 fc58 	bl	8087422 <_ZN9TimeClass3nowEv>
 8080b72:	4604      	mov	r4, r0
        waitSec(0.5);
 8080b74:	2000      	movs	r0, #0
 8080b76:	f7ff fed2 	bl	808091e <_Z7waitSecm>
        file.print(Time.format(time, TIME_FORMAT_ISO8601_FULL)); // e.g. 2004-01-10T08:22:04-06:00
 8080b7a:	4b10      	ldr	r3, [pc, #64]	; (8080bbc <_Z7logDataPc+0x54>)
 8080b7c:	4622      	mov	r2, r4
 8080b7e:	681b      	ldr	r3, [r3, #0]
 8080b80:	a802      	add	r0, sp, #8
 8080b82:	9300      	str	r3, [sp, #0]
 8080b84:	17e3      	asrs	r3, r4, #31
 8080b86:	4c0e      	ldr	r4, [pc, #56]	; (8080bc0 <_Z7logDataPc+0x58>)
 8080b88:	490e      	ldr	r1, [pc, #56]	; (8080bc4 <_Z7logDataPc+0x5c>)
 8080b8a:	f006 fbeb 	bl	8087364 <_ZN9TimeClass6formatExPKc>
 8080b8e:	9902      	ldr	r1, [sp, #8]
 8080b90:	4620      	mov	r0, r4
 8080b92:	f006 fa59 	bl	8087048 <_ZN5Print5printEPKc>
 8080b96:	a802      	add	r0, sp, #8
 8080b98:	f006 f928 	bl	8086dec <_ZN6StringD1Ev>
        waitSec(0.5);
 8080b9c:	2000      	movs	r0, #0
 8080b9e:	f7ff febe 	bl	808091e <_Z7waitSecm>
        file.print(data);
 8080ba2:	4629      	mov	r1, r5
 8080ba4:	4620      	mov	r0, r4
 8080ba6:	f006 fa4f 	bl	8087048 <_ZN5Print5printEPKc>
        file.println();
 8080baa:	4620      	mov	r0, r4
 8080bac:	f006 fa57 	bl	808705e <_ZN5Print7printlnEv>
        waitSec(0.5);
 8080bb0:	2000      	movs	r0, #0
 8080bb2:	f7ff feb4 	bl	808091e <_Z7waitSecm>
    }
 8080bb6:	b007      	add	sp, #28
 8080bb8:	bd30      	pop	{r4, r5, pc}
 8080bba:	bf00      	nop
 8080bbc:	20000054 	.word	0x20000054
 8080bc0:	20000374 	.word	0x20000374
 8080bc4:	20000aec 	.word	0x20000aec

08080bc8 <_Z9takePhotov>:
    {
 8080bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080bcc:	b0b0      	sub	sp, #192	; 0xc0
      camera_VC0706 cam(&Serial1);
 8080bce:	f007 fe8f 	bl	80888f0 <_Z22__fetch_global_Serial1v>
 8080bd2:	4601      	mov	r1, r0
 8080bd4:	a813      	add	r0, sp, #76	; 0x4c
 8080bd6:	f001 f998 	bl	8081f0a <_ZN13camera_VC0706C1EP11USARTSerial>
      waitSec(0.5);
 8080bda:	2000      	movs	r0, #0
 8080bdc:	f7ff fe9f 	bl	808091e <_Z7waitSecm>
      if (cam.begin()) {
 8080be0:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8080be4:	a813      	add	r0, sp, #76	; 0x4c
 8080be6:	f001 fa54 	bl	8082092 <_ZN13camera_VC07065beginEt>
 8080bea:	4cb3      	ldr	r4, [pc, #716]	; (8080eb8 <_Z9takePhotov+0x2f0>)
         if(usbOn) {Serial.println("Camera Found:"); waitMS(100);}
 8080bec:	6823      	ldr	r3, [r4, #0]
      if (cam.begin()) {
 8080bee:	2800      	cmp	r0, #0
 8080bf0:	f000 80ce 	beq.w	8080d90 <_Z9takePhotov+0x1c8>
         if(usbOn) {Serial.println("Camera Found:"); waitMS(100);}
 8080bf4:	b13b      	cbz	r3, 8080c06 <_Z9takePhotov+0x3e>
 8080bf6:	f007 fc95 	bl	8088524 <_Z16_fetch_usbserialv>
 8080bfa:	49b0      	ldr	r1, [pc, #704]	; (8080ebc <_Z9takePhotov+0x2f4>)
         if(usbOn) {Serial.println("No camera found?"); waitMS(100);}
 8080bfc:	f006 fa3b 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080c00:	2064      	movs	r0, #100	; 0x64
 8080c02:	f7ff fe7b 	bl	80808fc <_Z6waitMSm>
      waitSec(0.5);
 8080c06:	2000      	movs	r0, #0
 8080c08:	f7ff fe89 	bl	808091e <_Z7waitSecm>
      char *reply = cam.getVersion();
 8080c0c:	a813      	add	r0, sp, #76	; 0x4c
 8080c0e:	f001 f9e4 	bl	8081fda <_ZN13camera_VC070610getVersionEv>
      if (reply == 0) {
 8080c12:	4605      	mov	r5, r0
 8080c14:	b148      	cbz	r0, 8080c2a <_Z9takePhotov+0x62>
            if(usbOn) {Serial.print(reply); waitMS(100);}
 8080c16:	6823      	ldr	r3, [r4, #0]
 8080c18:	b18b      	cbz	r3, 8080c3e <_Z9takePhotov+0x76>
 8080c1a:	f007 fc83 	bl	8088524 <_Z16_fetch_usbserialv>
 8080c1e:	4629      	mov	r1, r5
 8080c20:	f006 fa12 	bl	8087048 <_ZN5Print5printEPKc>
 8080c24:	2064      	movs	r0, #100	; 0x64
 8080c26:	f7ff fe69 	bl	80808fc <_Z6waitMSm>
         if(usbOn) {Serial.println("Snap in 1/2 secs..."); waitMS(100);}
 8080c2a:	6823      	ldr	r3, [r4, #0]
 8080c2c:	b13b      	cbz	r3, 8080c3e <_Z9takePhotov+0x76>
 8080c2e:	f007 fc79 	bl	8088524 <_Z16_fetch_usbserialv>
 8080c32:	49a3      	ldr	r1, [pc, #652]	; (8080ec0 <_Z9takePhotov+0x2f8>)
 8080c34:	f006 fa1f 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080c38:	2064      	movs	r0, #100	; 0x64
 8080c3a:	f7ff fe5f 	bl	80808fc <_Z6waitMSm>
      delay(500);
 8080c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080c42:	f006 fc88 	bl	8087556 <delay>
      if (! cam.takePicture()) 
 8080c46:	a813      	add	r0, sp, #76	; 0x4c
 8080c48:	f001 fa43 	bl	80820d2 <_ZN13camera_VC070611takePictureEv>
 8080c4c:	b948      	cbnz	r0, 8080c62 <_Z9takePhotov+0x9a>
           if(usbOn) {Serial.println("Failed to snap!"); waitMS(100);}
 8080c4e:	6823      	ldr	r3, [r4, #0]
 8080c50:	b13b      	cbz	r3, 8080c62 <_Z9takePhotov+0x9a>
 8080c52:	f007 fc67 	bl	8088524 <_Z16_fetch_usbserialv>
 8080c56:	499b      	ldr	r1, [pc, #620]	; (8080ec4 <_Z9takePhotov+0x2fc>)
 8080c58:	f006 fa0d 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080c5c:	2064      	movs	r0, #100	; 0x64
 8080c5e:	f7ff fe4d 	bl	80808fc <_Z6waitMSm>
      if(! Time.isValid()) 
 8080c62:	f006 fbc1 	bl	80873e8 <_ZN9TimeClass7isValidEv>
 8080c66:	4e98      	ldr	r6, [pc, #608]	; (8080ec8 <_Z9takePhotov+0x300>)
 8080c68:	4605      	mov	r5, r0
 8080c6a:	2800      	cmp	r0, #0
 8080c6c:	f040 8097 	bne.w	8080d9e <_Z9takePhotov+0x1d6>
              fileName = String("lost-time000.jpg");       
 8080c70:	4996      	ldr	r1, [pc, #600]	; (8080ecc <_Z9takePhotov+0x304>)
 8080c72:	a80f      	add	r0, sp, #60	; 0x3c
 8080c74:	f006 f904 	bl	8086e80 <_ZN6StringC1EPKc>
 8080c78:	a90f      	add	r1, sp, #60	; 0x3c
 8080c7a:	4630      	mov	r0, r6
 8080c7c:	f006 f94a 	bl	8086f14 <_ZN6StringaSEOS_>
 8080c80:	a80f      	add	r0, sp, #60	; 0x3c
 8080c82:	f006 f8b3 	bl	8086dec <_ZN6StringD1Ev>
                fileName.String::operator[](9) = '0' + i/100;
 8080c86:	46b2      	mov	sl, r6
                fileName.String::operator[](10) = '0' + i/10;
 8080c88:	f04f 080a 	mov.w	r8, #10
 8080c8c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8080ef4 <_Z9takePhotov+0x32c>
                fileName.String::operator[](9) = '0' + i/100;
 8080c90:	2109      	movs	r1, #9
 8080c92:	4650      	mov	r0, sl
 8080c94:	f006 f9b4 	bl	8087000 <_ZN6StringixEj>
 8080c98:	2364      	movs	r3, #100	; 0x64
 8080c9a:	fbb5 f3f3 	udiv	r3, r5, r3
 8080c9e:	3330      	adds	r3, #48	; 0x30
 8080ca0:	7003      	strb	r3, [r0, #0]
                fileName.String::operator[](10) = '0' + i/10;
 8080ca2:	210a      	movs	r1, #10
 8080ca4:	4650      	mov	r0, sl
 8080ca6:	f006 f9ab 	bl	8087000 <_ZN6StringixEj>
 8080caa:	fbb5 f7f8 	udiv	r7, r5, r8
 8080cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
                fileName.String::operator[](11) = '0' + i%10;
 8080cb2:	210b      	movs	r1, #11
                fileName.String::operator[](10) = '0' + i/10;
 8080cb4:	7003      	strb	r3, [r0, #0]
                fileName.String::operator[](11) = '0' + i%10;
 8080cb6:	4650      	mov	r0, sl
 8080cb8:	f006 f9a2 	bl	8087000 <_ZN6StringixEj>
 8080cbc:	fb08 5717 	mls	r7, r8, r7, r5
 8080cc0:	3730      	adds	r7, #48	; 0x30
 8080cc2:	7007      	strb	r7, [r0, #0]
 8080cc4:	6831      	ldr	r1, [r6, #0]
 8080cc6:	4648      	mov	r0, r9
 8080cc8:	f7ff fb97 	bl	80803fa <_ZN7FatFile6existsEPKc>
              if (!sd.exists(fileName)) {  break;  }
 8080ccc:	b118      	cbz	r0, 8080cd6 <_Z9takePhotov+0x10e>
              for (int i = 0; i < 1000; i++) {
 8080cce:	3501      	adds	r5, #1
 8080cd0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8080cd4:	d1dc      	bne.n	8080c90 <_Z9takePhotov+0xc8>
        file.open(fileName, FILE_WRITE);
 8080cd6:	f244 2202 	movw	r2, #16898	; 0x4202
 8080cda:	6831      	ldr	r1, [r6, #0]
 8080cdc:	487c      	ldr	r0, [pc, #496]	; (8080ed0 <_Z9takePhotov+0x308>)
 8080cde:	f7ff fb99 	bl	8080414 <_ZN7FatFile4openEPKci>
        uint16_t jpglen = cam.frameLength();
 8080ce2:	a813      	add	r0, sp, #76	; 0x4c
 8080ce4:	f001 f9fa 	bl	80820dc <_ZN13camera_VC070611frameLengthEv>
           if(usbOn) {Serial.print(jpglen, DEC); waitMS(100);}
 8080ce8:	6823      	ldr	r3, [r4, #0]
        uint16_t jpglen = cam.frameLength();
 8080cea:	b287      	uxth	r7, r0
           if(usbOn) {Serial.print(jpglen, DEC); waitMS(100);}
 8080cec:	b34b      	cbz	r3, 8080d42 <_Z9takePhotov+0x17a>
 8080cee:	f007 fc19 	bl	8088524 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080cf2:	220a      	movs	r2, #10
 8080cf4:	4639      	mov	r1, r7
 8080cf6:	f006 f9c8 	bl	808708a <_ZN5Print11printNumberEmh>
 8080cfa:	2064      	movs	r0, #100	; 0x64
 8080cfc:	f7ff fdfe 	bl	80808fc <_Z6waitMSm>
           if(usbOn) {Serial.println(" byte image. "); waitMS(100);}
 8080d00:	6823      	ldr	r3, [r4, #0]
 8080d02:	b1f3      	cbz	r3, 8080d42 <_Z9takePhotov+0x17a>
 8080d04:	f007 fc0e 	bl	8088524 <_Z16_fetch_usbserialv>
 8080d08:	4972      	ldr	r1, [pc, #456]	; (8080ed4 <_Z9takePhotov+0x30c>)
 8080d0a:	f006 f9b4 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080d0e:	2064      	movs	r0, #100	; 0x64
 8080d10:	f7ff fdf4 	bl	80808fc <_Z6waitMSm>
           if(usbOn) {Serial.println("photo filename " + fileName); waitMS(100);}
 8080d14:	6823      	ldr	r3, [r4, #0]
 8080d16:	b1a3      	cbz	r3, 8080d42 <_Z9takePhotov+0x17a>
 8080d18:	f007 fc04 	bl	8088524 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8080d1c:	496e      	ldr	r1, [pc, #440]	; (8080ed8 <_Z9takePhotov+0x310>)
 8080d1e:	4605      	mov	r5, r0
 8080d20:	a80f      	add	r0, sp, #60	; 0x3c
 8080d22:	f006 f8ad 	bl	8086e80 <_ZN6StringC1EPKc>
 8080d26:	4968      	ldr	r1, [pc, #416]	; (8080ec8 <_Z9takePhotov+0x300>)
 8080d28:	a80f      	add	r0, sp, #60	; 0x3c
 8080d2a:	f006 f936 	bl	8086f9a <_ZplRK15StringSumHelperRK6String>
 8080d2e:	6801      	ldr	r1, [r0, #0]
 8080d30:	4628      	mov	r0, r5
 8080d32:	f006 f9a0 	bl	8087076 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
 8080d36:	a80f      	add	r0, sp, #60	; 0x3c
 8080d38:	f006 f858 	bl	8086dec <_ZN6StringD1Ev>
 8080d3c:	2064      	movs	r0, #100	; 0x64
 8080d3e:	f7ff fddd 	bl	80808fc <_Z6waitMSm>
 8080d42:	f005 f81d 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
        pinMode(8, OUTPUT);
 8080d46:	2101      	movs	r1, #1
 8080d48:	4680      	mov	r8, r0
 8080d4a:	2008      	movs	r0, #8
 8080d4c:	f008 f8d6 	bl	8088efc <pinMode>
        byte wCount = 0; // For counting # of writes
 8080d50:	2500      	movs	r5, #0
          file.write(buffer, bytesToRead);
 8080d52:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8080f08 <_Z9takePhotov+0x340>
        while (jpglen > 0) 
 8080d56:	2f00      	cmp	r7, #0
 8080d58:	d054      	beq.n	8080e04 <_Z9takePhotov+0x23c>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 8080d5a:	2f20      	cmp	r7, #32
 8080d5c:	46b9      	mov	r9, r7
 8080d5e:	bfa8      	it	ge
 8080d60:	f04f 0920 	movge.w	r9, #32
          buffer = cam.readPicture(bytesToRead);
 8080d64:	a813      	add	r0, sp, #76	; 0x4c
 8080d66:	fa5f f189 	uxtb.w	r1, r9
 8080d6a:	f001 f9d0 	bl	808210e <_ZN13camera_VC070611readPictureEh>
          if(++wCount >= 64) 
 8080d6e:	3501      	adds	r5, #1
          buffer = cam.readPicture(bytesToRead);
 8080d70:	4601      	mov	r1, r0
          file.write(buffer, bytesToRead);
 8080d72:	464a      	mov	r2, r9
 8080d74:	4650      	mov	r0, sl
          if(++wCount >= 64) 
 8080d76:	b2ed      	uxtb	r5, r5
          file.write(buffer, bytesToRead);
 8080d78:	f7ff fa13 	bl	80801a2 <_ZN9PrintFile5writeEPKhj>
          if(++wCount >= 64) 
 8080d7c:	2d3f      	cmp	r5, #63	; 0x3f
 8080d7e:	d903      	bls.n	8080d88 <_Z9takePhotov+0x1c0>
            Flicker(1);
 8080d80:	2001      	movs	r0, #1
 8080d82:	f7ff fbc9 	bl	8080518 <_Z7Flickerj>
            wCount = 0;
 8080d86:	2500      	movs	r5, #0
          jpglen -= bytesToRead;
 8080d88:	eba7 0709 	sub.w	r7, r7, r9
 8080d8c:	b2bf      	uxth	r7, r7
        while (jpglen > 0) 
 8080d8e:	e7e2      	b.n	8080d56 <_Z9takePhotov+0x18e>
         if(usbOn) {Serial.println("No camera found?"); waitMS(100);}
 8080d90:	2b00      	cmp	r3, #0
 8080d92:	f43f af38 	beq.w	8080c06 <_Z9takePhotov+0x3e>
 8080d96:	f007 fbc5 	bl	8088524 <_Z16_fetch_usbserialv>
 8080d9a:	4950      	ldr	r1, [pc, #320]	; (8080edc <_Z9takePhotov+0x314>)
 8080d9c:	e72e      	b.n	8080bfc <_Z9takePhotov+0x34>
              fileName =  String(String(unit_name) + "_" + Time.format(Time.now(),"%Y-%m-%d-%H-%M") + ".jpg");    
 8080d9e:	4950      	ldr	r1, [pc, #320]	; (8080ee0 <_Z9takePhotov+0x318>)
 8080da0:	a803      	add	r0, sp, #12
 8080da2:	f006 f86d 	bl	8086e80 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080da6:	a903      	add	r1, sp, #12
 8080da8:	a807      	add	r0, sp, #28
 8080daa:	f006 f8a8 	bl	8086efe <_ZN6StringC1ERKS_>
 8080dae:	494d      	ldr	r1, [pc, #308]	; (8080ee4 <_Z9takePhotov+0x31c>)
 8080db0:	a807      	add	r0, sp, #28
 8080db2:	f006 f8fe 	bl	8086fb2 <_ZplRK15StringSumHelperPKc>
 8080db6:	4605      	mov	r5, r0
 8080db8:	f006 fb33 	bl	8087422 <_ZN9TimeClass3nowEv>
 8080dbc:	4b4a      	ldr	r3, [pc, #296]	; (8080ee8 <_Z9takePhotov+0x320>)
 8080dbe:	4602      	mov	r2, r0
 8080dc0:	9300      	str	r3, [sp, #0]
 8080dc2:	494a      	ldr	r1, [pc, #296]	; (8080eec <_Z9takePhotov+0x324>)
 8080dc4:	17c3      	asrs	r3, r0, #31
 8080dc6:	a80b      	add	r0, sp, #44	; 0x2c
 8080dc8:	f006 facc 	bl	8087364 <_ZN9TimeClass6formatExPKc>
 8080dcc:	a90b      	add	r1, sp, #44	; 0x2c
 8080dce:	4628      	mov	r0, r5
 8080dd0:	f006 f8e3 	bl	8086f9a <_ZplRK15StringSumHelperRK6String>
 8080dd4:	4946      	ldr	r1, [pc, #280]	; (8080ef0 <_Z9takePhotov+0x328>)
 8080dd6:	f006 f8ec 	bl	8086fb2 <_ZplRK15StringSumHelperPKc>
 8080dda:	4601      	mov	r1, r0
 8080ddc:	a80f      	add	r0, sp, #60	; 0x3c
 8080dde:	f006 f88e 	bl	8086efe <_ZN6StringC1ERKS_>
 8080de2:	a90f      	add	r1, sp, #60	; 0x3c
 8080de4:	4630      	mov	r0, r6
 8080de6:	f006 f895 	bl	8086f14 <_ZN6StringaSEOS_>
 8080dea:	a80f      	add	r0, sp, #60	; 0x3c
 8080dec:	f005 fffe 	bl	8086dec <_ZN6StringD1Ev>
 8080df0:	a80b      	add	r0, sp, #44	; 0x2c
 8080df2:	f005 fffb 	bl	8086dec <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080df6:	a807      	add	r0, sp, #28
 8080df8:	f005 fff8 	bl	8086dec <_ZN6StringD1Ev>
 8080dfc:	a803      	add	r0, sp, #12
 8080dfe:	f005 fff5 	bl	8086dec <_ZN6StringD1Ev>
 8080e02:	e768      	b.n	8080cd6 <_Z9takePhotov+0x10e>
        waitSec(0.1);
 8080e04:	4638      	mov	r0, r7
 8080e06:	f7ff fd8a 	bl	808091e <_Z7waitSecm>
      file.sync();  // to update file date
 8080e0a:	4831      	ldr	r0, [pc, #196]	; (8080ed0 <_Z9takePhotov+0x308>)
 8080e0c:	f001 feb4 	bl	8082b78 <_ZN7FatFile4syncEv>
      if ( file.close() && sd.exists(fileName) )  
 8080e10:	482f      	ldr	r0, [pc, #188]	; (8080ed0 <_Z9takePhotov+0x308>)
 8080e12:	f001 fee7 	bl	8082be4 <_ZN7FatFile5closeEv>
 8080e16:	4d34      	ldr	r5, [pc, #208]	; (8080ee8 <_Z9takePhotov+0x320>)
 8080e18:	2800      	cmp	r0, #0
 8080e1a:	d041      	beq.n	8080ea0 <_Z9takePhotov+0x2d8>
 8080e1c:	6831      	ldr	r1, [r6, #0]
 8080e1e:	4835      	ldr	r0, [pc, #212]	; (8080ef4 <_Z9takePhotov+0x32c>)
 8080e20:	f7ff faeb 	bl	80803fa <_ZN7FatFile6existsEPKc>
 8080e24:	2800      	cmp	r0, #0
 8080e26:	d03b      	beq.n	8080ea0 <_Z9takePhotov+0x2d8>
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 8080e28:	f006 fafb 	bl	8087422 <_ZN9TimeClass3nowEv>
 8080e2c:	492f      	ldr	r1, [pc, #188]	; (8080eec <_Z9takePhotov+0x324>)
 8080e2e:	4602      	mov	r2, r0
 8080e30:	17c3      	asrs	r3, r0, #31
 8080e32:	9500      	str	r5, [sp, #0]
 8080e34:	a80f      	add	r0, sp, #60	; 0x3c
 8080e36:	f006 fa95 	bl	8087364 <_ZN9TimeClass6formatExPKc>
        sprintf(publishStr, "Photo-save worked at %s", 
 8080e3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8080e3c:	492e      	ldr	r1, [pc, #184]	; (8080ef8 <_Z9takePhotov+0x330>)
        sprintf(publishStr, "Photo-save FAILED at %s", 
 8080e3e:	482f      	ldr	r0, [pc, #188]	; (8080efc <_Z9takePhotov+0x334>)
 8080e40:	f005 fab8 	bl	80863b4 <sprintf>
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 8080e44:	a80f      	add	r0, sp, #60	; 0x3c
 8080e46:	f005 ffd1 	bl	8086dec <_ZN6StringD1Ev>
           if(usbOn) {Serial.println((publishStr)); waitMS(100);}
 8080e4a:	6823      	ldr	r3, [r4, #0]
 8080e4c:	b13b      	cbz	r3, 8080e5e <_Z9takePhotov+0x296>
 8080e4e:	f007 fb69 	bl	8088524 <_Z16_fetch_usbserialv>
 8080e52:	492a      	ldr	r1, [pc, #168]	; (8080efc <_Z9takePhotov+0x334>)
 8080e54:	f006 f90f 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080e58:	2064      	movs	r0, #100	; 0x64
 8080e5a:	f7ff fd4f 	bl	80808fc <_Z6waitMSm>
 8080e5e:	f004 ff8f 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
           if(usbOn) {Serial.print(time); Serial.println(" ms elapsed"); waitMS(100);}
 8080e62:	6823      	ldr	r3, [r4, #0]
 8080e64:	b1cb      	cbz	r3, 8080e9a <_Z9takePhotov+0x2d2>
          time = millis() - time;
 8080e66:	eba0 0808 	sub.w	r8, r0, r8
           if(usbOn) {Serial.print(time); Serial.println(" ms elapsed"); waitMS(100);}
 8080e6a:	f007 fb5b 	bl	8088524 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8080e6e:	f1b8 0f00 	cmp.w	r8, #0
 8080e72:	4605      	mov	r5, r0
 8080e74:	da04      	bge.n	8080e80 <_Z9takePhotov+0x2b8>
            t = print('-');
 8080e76:	212d      	movs	r1, #45	; 0x2d
 8080e78:	f006 f8ea 	bl	8087050 <_ZN5Print5printEc>
            val = -n;
 8080e7c:	f1c8 0800 	rsb	r8, r8, #0
        return printNumber(val, base) + t;
 8080e80:	220a      	movs	r2, #10
 8080e82:	4641      	mov	r1, r8
 8080e84:	4628      	mov	r0, r5
 8080e86:	f006 f900 	bl	808708a <_ZN5Print11printNumberEmh>
 8080e8a:	f007 fb4b 	bl	8088524 <_Z16_fetch_usbserialv>
 8080e8e:	491c      	ldr	r1, [pc, #112]	; (8080f00 <_Z9takePhotov+0x338>)
 8080e90:	f006 f8f1 	bl	8087076 <_ZN5Print7printlnEPKc>
 8080e94:	2064      	movs	r0, #100	; 0x64
 8080e96:	f7ff fd31 	bl	80808fc <_Z6waitMSm>
    }
 8080e9a:	b030      	add	sp, #192	; 0xc0
 8080e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 8080ea0:	f006 fabf 	bl	8087422 <_ZN9TimeClass3nowEv>
 8080ea4:	4911      	ldr	r1, [pc, #68]	; (8080eec <_Z9takePhotov+0x324>)
 8080ea6:	4602      	mov	r2, r0
 8080ea8:	17c3      	asrs	r3, r0, #31
 8080eaa:	9500      	str	r5, [sp, #0]
 8080eac:	a80f      	add	r0, sp, #60	; 0x3c
 8080eae:	f006 fa59 	bl	8087364 <_ZN9TimeClass6formatExPKc>
        sprintf(publishStr, "Photo-save FAILED at %s", 
 8080eb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8080eb4:	4913      	ldr	r1, [pc, #76]	; (8080f04 <_Z9takePhotov+0x33c>)
 8080eb6:	e7c2      	b.n	8080e3e <_Z9takePhotov+0x276>
 8080eb8:	200008dc 	.word	0x200008dc
 8080ebc:	0808c4db 	.word	0x0808c4db
 8080ec0:	0808c4fa 	.word	0x0808c4fa
 8080ec4:	0808c50e 	.word	0x0808c50e
 8080ec8:	200003a0 	.word	0x200003a0
 8080ecc:	0808c51e 	.word	0x0808c51e
 8080ed0:	2000037c 	.word	0x2000037c
 8080ed4:	0808c53e 	.word	0x0808c53e
 8080ed8:	0808c54c 	.word	0x0808c54c
 8080edc:	0808c4e9 	.word	0x0808c4e9
 8080ee0:	0808c4a9 	.word	0x0808c4a9
 8080ee4:	0808c4b5 	.word	0x0808c4b5
 8080ee8:	0808c52f 	.word	0x0808c52f
 8080eec:	20000aec 	.word	0x20000aec
 8080ef0:	0808c52a 	.word	0x0808c52a
 8080ef4:	20000888 	.word	0x20000888
 8080ef8:	0808c55c 	.word	0x0808c55c
 8080efc:	200003b0 	.word	0x200003b0
 8080f00:	0808c58c 	.word	0x0808c58c
 8080f04:	0808c574 	.word	0x0808c574
 8080f08:	20000374 	.word	0x20000374

08080f0c <_Z11customPowerv>:
      bool PMIC::setChargeVoltage(uint16_t voltage) {.......................
    *******************************************************************************/
    }

void customPower()
{
 8080f0c:	b530      	push	{r4, r5, lr}
 8080f0e:	b089      	sub	sp, #36	; 0x24

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 8080f10:	221c      	movs	r2, #28
 8080f12:	2100      	movs	r1, #0
 8080f14:	a801      	add	r0, sp, #4
 8080f16:	f009 fb87 	bl	808a628 <memset>
        conf_.size = sizeof(conf_);
 8080f1a:	2320      	movs	r3, #32
 8080f1c:	f88d 3005 	strb.w	r3, [sp, #5]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 8080f20:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8080f24:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 8080f28:	4b12      	ldr	r3, [pc, #72]	; (8080f74 <_Z11customPowerv+0x68>)
 8080f2a:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 8080f2c:	f44f 538d 	mov.w	r3, #4512	; 0x11a0
 8080f30:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 8080f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8080f38:	9300      	str	r3, [sp, #0]
        .batteryChargeVoltage(4512) //default 4112 (4.112 v) use 4208 to get 90% charge. Sets the battery charge termination voltage.
                                      // set to 3504 to stop charging from usb
                                      // set at 4400 (the max allowed) for charging Lead Acid battery
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST);

  Serial.println(System.setPowerConfiguration(conf)); // 0 means no error 
 8080f3a:	f007 faf3 	bl	8088524 <_Z16_fetch_usbserialv>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
 8080f3e:	2100      	movs	r1, #0
 8080f40:	4605      	mov	r5, r0
 8080f42:	4668      	mov	r0, sp
 8080f44:	f005 f97a 	bl	808623c <system_power_management_set_config>
        if (n < 0 && base == 10) {
 8080f48:	1e04      	subs	r4, r0, #0
 8080f4a:	da10      	bge.n	8080f6e <_Z11customPowerv+0x62>
            t = print('-');
 8080f4c:	212d      	movs	r1, #45	; 0x2d
 8080f4e:	4628      	mov	r0, r5
 8080f50:	f006 f87e 	bl	8087050 <_ZN5Print5printEc>
            val = -n;
 8080f54:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8080f56:	220a      	movs	r2, #10
 8080f58:	4628      	mov	r0, r5
 8080f5a:	f006 f896 	bl	808708a <_ZN5Print11printNumberEmh>
        n += println();
 8080f5e:	4628      	mov	r0, r5
 8080f60:	f006 f87d 	bl	808705e <_ZN5Print7printlnEv>
  // / int res = System.setPowerConfiguration(conf); 
  // / Log.info("setPowerConfiguration=%d", res);
    waitSec(0);
 8080f64:	2000      	movs	r0, #0
 8080f66:	f7ff fcda 	bl	808091e <_Z7waitSecm>
    // returns SYSTEM_ERROR_NONE (0) in case of success
    // Settings are persisted, you normally wouldn't do this on every startup.
}
 8080f6a:	b009      	add	sp, #36	; 0x24
 8080f6c:	bd30      	pop	{r4, r5, pc}
            val = n;
 8080f6e:	4621      	mov	r1, r4
 8080f70:	e7f1      	b.n	8080f56 <_Z11customPowerv+0x4a>
 8080f72:	bf00      	nop
 8080f74:	03e804b0 	.word	0x03e804b0

08080f78 <_Z11uploadToUbiv>:
    // add data to list of items to be sent to Ubidots. Max of 10 items in que. 
        //Limit set in include file ubidots.h  , modified to take 15 adds
    }

void uploadToUbi()
      {
 8080f78:	b510      	push	{r4, lr}
 8080f7a:	b08a      	sub	sp, #40	; 0x28
    // ---- get cell signal strength & quality
          CellularSignal sig = Cellular.RSSI();  //this may hang up the system if no connection.
 8080f7c:	4668      	mov	r0, sp
 8080f7e:	4910      	ldr	r1, [pc, #64]	; (8080fc0 <_Z11uploadToUbiv+0x48>)
 8080f80:	f007 fc0a 	bl	8088798 <_ZN5spark13CellularClass4RSSIEv>
                                        //So this line has been moved to after the if Cellular.ready statement
          ubidots.add("CellQual", sig.qual); //value location will show up as Ubidots "context"
 8080f84:	9803      	ldr	r0, [sp, #12]
 8080f86:	f009 f827 	bl	8089fd8 <__aeabi_i2f>
 8080f8a:	4c0e      	ldr	r4, [pc, #56]	; (8080fc4 <_Z11uploadToUbiv+0x4c>)
 8080f8c:	4602      	mov	r2, r0
 8080f8e:	490e      	ldr	r1, [pc, #56]	; (8080fc8 <_Z11uploadToUbiv+0x50>)
 8080f90:	4620      	mov	r0, r4
 8080f92:	f003 fc8d 	bl	80848b0 <_ZN7Ubidots3addEPcf>
          ubidots.add("CellStren", sig.rssi);
 8080f96:	9802      	ldr	r0, [sp, #8]
 8080f98:	f009 f81e 	bl	8089fd8 <__aeabi_i2f>
 8080f9c:	490b      	ldr	r1, [pc, #44]	; (8080fcc <_Z11uploadToUbiv+0x54>)
 8080f9e:	4602      	mov	r2, r0
 8080fa0:	4620      	mov	r0, r4
 8080fa2:	f003 fc85 	bl	80848b0 <_ZN7Ubidots3addEPcf>
    //
    //  send the the data to Ubidots after it has been added
          ubidots.send(DATA_SOURCE_NAME,DATA_SOURCE_NAME); // Send rest of the data to your Ubidots account.
 8080fa6:	4a0a      	ldr	r2, [pc, #40]	; (8080fd0 <_Z11uploadToUbiv+0x58>)
 8080fa8:	4620      	mov	r0, r4
 8080faa:	4611      	mov	r1, r2
 8080fac:	f003 fc89 	bl	80848c2 <_ZN7Ubidots4sendEPKcS1_>
        //2020-01-12 modified UbiConstants.h to allow for sending up to 15 variables
                      // but unibots doesn't seem to accept well more than 14 for a device
        waitSec(5);  //give enough time for unit to receive Function call to set the delayTime in seconds
 8080fb0:	2005      	movs	r0, #5
 8080fb2:	f7ff fcb4 	bl	808091e <_Z7waitSecm>

        UploadBlink();
 8080fb6:	f7ff fb15 	bl	80805e4 <_Z11UploadBlinkv>
      }  
 8080fba:	b00a      	add	sp, #40	; 0x28
 8080fbc:	bd10      	pop	{r4, pc}
 8080fbe:	bf00      	nop
 8080fc0:	20000f38 	.word	0x20000f38
 8080fc4:	200008d0 	.word	0x200008d0
 8080fc8:	0808c598 	.word	0x0808c598
 8080fcc:	0808c5a1 	.word	0x0808c5a1
 8080fd0:	0808c4a9 	.word	0x0808c4a9

08080fd4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 8080fd4:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 8080fd6:	b530      	push	{r4, r5, lr}
 8080fd8:	b085      	sub	sp, #20
 8080fda:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 8080fdc:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
 8080fde:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 8080fe0:	f005 f8d6 	bl	8086190 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 8080fe4:	b9b0      	cbnz	r0, 8081014 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
 8080fe6:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 8080fe8:	b10c      	cbz	r4, 8080fee <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
 8080fea:	6923      	ldr	r3, [r4, #16]
 8080fec:	b923      	cbnz	r3, 8080ff8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
 8080fee:	2100      	movs	r1, #0
 8080ff0:	200a      	movs	r0, #10
 8080ff2:	4a09      	ldr	r2, [pc, #36]	; (8081018 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
 8080ff4:	f005 f8b4 	bl	8086160 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 8080ff8:	2300      	movs	r3, #0
 8080ffa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8080ffe:	230c      	movs	r3, #12
 8081000:	f8ad 3004 	strh.w	r3, [sp, #4]
 8081004:	2304      	movs	r3, #4
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 8081006:	2101      	movs	r1, #1
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 8081008:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 808100a:	4620      	mov	r0, r4
 808100c:	6923      	ldr	r3, [r4, #16]
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 808100e:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 8081010:	aa01      	add	r2, sp, #4
 8081012:	4798      	blx	r3
}
 8081014:	b005      	add	sp, #20
 8081016:	bd30      	pop	{r4, r5, pc}
 8081018:	08085d61 	.word	0x08085d61

0808101c <_Z8showPMICv>:
  {
 808101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081020:	b08e      	sub	sp, #56	; 0x38
    PMIC power(true);
 8081022:	2101      	movs	r1, #1
 8081024:	4668      	mov	r0, sp
 8081026:	f005 fa04 	bl	8086432 <_ZN4PMICC1Eb>
    Log.info("Current PMIC settings:");
 808102a:	493f      	ldr	r1, [pc, #252]	; (8081128 <_Z8showPMICv+0x10c>)
 808102c:	483f      	ldr	r0, [pc, #252]	; (808112c <_Z8showPMICv+0x110>)
 808102e:	f7ff f9cd 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("VIN Vmin_V_input_lowest: %u", power.getInputVoltageLimit());
 8081032:	4668      	mov	r0, sp
 8081034:	f005 fa7d 	bl	8086532 <_ZN4PMIC20getInputVoltageLimitEv>
 8081038:	493d      	ldr	r1, [pc, #244]	; (8081130 <_Z8showPMICv+0x114>)
 808103a:	4602      	mov	r2, r0
 808103c:	483b      	ldr	r0, [pc, #236]	; (808112c <_Z8showPMICv+0x110>)
 808103e:	f7ff f9c5 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("VIN Imax_current_mA_max_limit: %u", power.getInputCurrentLimit());
 8081042:	4668      	mov	r0, sp
 8081044:	f005 fa48 	bl	80864d8 <_ZN4PMIC20getInputCurrentLimitEv>
 8081048:	493a      	ldr	r1, [pc, #232]	; (8081134 <_Z8showPMICv+0x118>)
 808104a:	4602      	mov	r2, r0
 808104c:	4837      	ldr	r0, [pc, #220]	; (808112c <_Z8showPMICv+0x110>)
 808104e:	f7ff f9bd 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Ichg_current_mA_value: %u", power.getChargeCurrentValue());
 8081052:	4668      	mov	r0, sp
 8081054:	f005 fa4c 	bl	80864f0 <_ZN4PMIC21getChargeCurrentValueEv>
 8081058:	4937      	ldr	r1, [pc, #220]	; (8081138 <_Z8showPMICv+0x11c>)
 808105a:	4602      	mov	r2, r0
 808105c:	4833      	ldr	r0, [pc, #204]	; (808112c <_Z8showPMICv+0x110>)
 808105e:	f7ff f9b5 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Iterm_charge_termination_V: %u", power.getChargeVoltageValue());
 8081062:	4668      	mov	r0, sp
 8081064:	f005 fa51 	bl	808650a <_ZN4PMIC21getChargeVoltageValueEv>
 8081068:	4934      	ldr	r1, [pc, #208]	; (808113c <_Z8showPMICv+0x120>)
 808106a:	4602      	mov	r2, r0
 808106c:	482f      	ldr	r0, [pc, #188]	; (808112c <_Z8showPMICv+0x110>)
 808106e:	f7ff f9ad 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 8081072:	a907      	add	r1, sp, #28
 8081074:	2018      	movs	r0, #24
 8081076:	f7ff ffad 	bl	8080fd4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
 808107a:	a907      	add	r1, sp, #28
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
 808107c:	1e07      	subs	r7, r0, #0
 808107e:	f04f 0007 	mov.w	r0, #7
            return r;
        }
        return val;
 8081082:	bfa8      	it	ge
 8081084:	9f07      	ldrge	r7, [sp, #28]
 8081086:	f7ff ffa5 	bl	8080fd4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
 808108a:	a907      	add	r1, sp, #28
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
 808108c:	1e06      	subs	r6, r0, #0
 808108e:	f04f 0003 	mov.w	r0, #3
            return r;
        }
        return val;
 8081092:	bfa8      	it	ge
 8081094:	9e07      	ldrge	r6, [sp, #28]
 8081096:	f7ff ff9d 	bl	8080fd4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 808109a:	2800      	cmp	r0, #0
 808109c:	d140      	bne.n	8081120 <_Z8showPMICv+0x104>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 808109e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80810a2:	f008 ff95 	bl	8089fd0 <__aeabi_ui2f>
 80810a6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80810aa:	f008 ffe9 	bl	808a080 <__aeabi_fmul>
 80810ae:	4680      	mov	r8, r0
    constexpr char const* batteryStates[] = {
 80810b0:	4c23      	ldr	r4, [pc, #140]	; (8081140 <_Z8showPMICv+0x124>)
 80810b2:	ad07      	add	r5, sp, #28
 80810b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80810b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80810b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    constexpr char const* powerSources[] = {
 80810bc:	340c      	adds	r4, #12
    constexpr char const* batteryStates[] = {
 80810be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    constexpr char const* powerSources[] = {
 80810c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80810c4:	ad01      	add	r5, sp, #4
 80810c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80810c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80810cc:	e885 0003 	stmia.w	r5, {r0, r1}
    Log.info("Power source: %s", powerSources[std::max(0, powerSource)]);
 80810d0:	ab0e      	add	r3, sp, #56	; 0x38
 80810d2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80810d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80810da:	f857 2c34 	ldr.w	r2, [r7, #-52]
 80810de:	4919      	ldr	r1, [pc, #100]	; (8081144 <_Z8showPMICv+0x128>)
 80810e0:	4812      	ldr	r0, [pc, #72]	; (808112c <_Z8showPMICv+0x110>)
 80810e2:	f7ff f973 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Battery state: %s", batteryStates[std::max(0, batteryState)]);
 80810e6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80810ea:	ab0e      	add	r3, sp, #56	; 0x38
 80810ec:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80810f0:	f856 2c1c 	ldr.w	r2, [r6, #-28]
 80810f4:	4914      	ldr	r1, [pc, #80]	; (8081148 <_Z8showPMICv+0x12c>)
 80810f6:	480d      	ldr	r0, [pc, #52]	; (808112c <_Z8showPMICv+0x110>)
 80810f8:	f7ff f968 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Battery charge: %f", batterySoc);
 80810fc:	4640      	mov	r0, r8
 80810fe:	f008 fb4f 	bl	80897a0 <__aeabi_f2d>
 8081102:	4602      	mov	r2, r0
 8081104:	460b      	mov	r3, r1
 8081106:	4809      	ldr	r0, [pc, #36]	; (808112c <_Z8showPMICv+0x110>)
 8081108:	4910      	ldr	r1, [pc, #64]	; (808114c <_Z8showPMICv+0x130>)
 808110a:	f7ff f95f 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
    waitSec(0.5);
 808110e:	2000      	movs	r0, #0
 8081110:	f7ff fc05 	bl	808091e <_Z7waitSecm>
    PMIC power(true);
 8081114:	4668      	mov	r0, sp
 8081116:	f005 f99b 	bl	8086450 <_ZN4PMICD1Ev>
  }
 808111a:	b00e      	add	sp, #56	; 0x38
 808111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1.0f;
 8081120:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8081150 <_Z8showPMICv+0x134>
 8081124:	e7c4      	b.n	80810b0 <_Z8showPMICv+0x94>
 8081126:	bf00      	nop
 8081128:	0808c5ab 	.word	0x0808c5ab
 808112c:	20000ae8 	.word	0x20000ae8
 8081130:	0808c5c2 	.word	0x0808c5c2
 8081134:	0808c5de 	.word	0x0808c5de
 8081138:	0808c600 	.word	0x0808c600
 808113c:	0808c61a 	.word	0x0808c61a
 8081140:	0808cae0 	.word	0x0808cae0
 8081144:	0808c639 	.word	0x0808c639
 8081148:	0808c64a 	.word	0x0808c64a
 808114c:	0808c65c 	.word	0x0808c65c
 8081150:	bf800000 	.word	0xbf800000

08081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8081154:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8081156:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8081158:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808115a:	b17c      	cbz	r4, 808117c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 808115c:	6863      	ldr	r3, [r4, #4]
 808115e:	3b01      	subs	r3, #1
 8081160:	6063      	str	r3, [r4, #4]
 8081162:	b95b      	cbnz	r3, 808117c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8081164:	6823      	ldr	r3, [r4, #0]
 8081166:	4620      	mov	r0, r4
 8081168:	689b      	ldr	r3, [r3, #8]
 808116a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808116c:	68a3      	ldr	r3, [r4, #8]
 808116e:	3b01      	subs	r3, #1
 8081170:	60a3      	str	r3, [r4, #8]
 8081172:	b91b      	cbnz	r3, 808117c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8081174:	6823      	ldr	r3, [r4, #0]
 8081176:	4620      	mov	r0, r4
 8081178:	68db      	ldr	r3, [r3, #12]
 808117a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 808117c:	4628      	mov	r0, r5
 808117e:	bd38      	pop	{r3, r4, r5, pc}

08081180 <_Z8close_SDv>:
    {
 8081180:	b530      	push	{r4, r5, lr}
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 8081182:	4826      	ldr	r0, [pc, #152]	; (808121c <_Z8close_SDv+0x9c>)
    {
 8081184:	b087      	sub	sp, #28
      if (!file.sync() ) {   Particle.publish("Log", "write error", 60, PRIVATE);  }
 8081186:	f001 fcf7 	bl	8082b78 <_ZN7FatFile4syncEv>
 808118a:	b960      	cbnz	r0, 80811a6 <_Z8close_SDv+0x26>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808118c:	4b24      	ldr	r3, [pc, #144]	; (8081220 <_Z8close_SDv+0xa0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808118e:	a802      	add	r0, sp, #8
 8081190:	781b      	ldrb	r3, [r3, #0]
 8081192:	4a24      	ldr	r2, [pc, #144]	; (8081224 <_Z8close_SDv+0xa4>)
 8081194:	f88d 3000 	strb.w	r3, [sp]
 8081198:	4923      	ldr	r1, [pc, #140]	; (8081228 <_Z8close_SDv+0xa8>)
 808119a:	233c      	movs	r3, #60	; 0x3c
 808119c:	f006 ff80 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80811a0:	a803      	add	r0, sp, #12
 80811a2:	f7ff ffd7 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    FatFile::sync();
 80811a6:	481d      	ldr	r0, [pc, #116]	; (808121c <_Z8close_SDv+0x9c>)
 80811a8:	f001 fce6 	bl	8082b78 <_ZN7FatFile4syncEv>
        waitMS(200);
 80811ac:	20c8      	movs	r0, #200	; 0xc8
 80811ae:	f7ff fba5 	bl	80808fc <_Z6waitMSm>
      if ( file.close() && sd.exists(fileName) )  {
 80811b2:	481a      	ldr	r0, [pc, #104]	; (808121c <_Z8close_SDv+0x9c>)
 80811b4:	f001 fd16 	bl	8082be4 <_ZN7FatFile5closeEv>
 80811b8:	4d1c      	ldr	r5, [pc, #112]	; (808122c <_Z8close_SDv+0xac>)
 80811ba:	4c1d      	ldr	r4, [pc, #116]	; (8081230 <_Z8close_SDv+0xb0>)
 80811bc:	b310      	cbz	r0, 8081204 <_Z8close_SDv+0x84>
        operator const char*() const { return c_str(); }
 80811be:	4b1d      	ldr	r3, [pc, #116]	; (8081234 <_Z8close_SDv+0xb4>)
 80811c0:	481d      	ldr	r0, [pc, #116]	; (8081238 <_Z8close_SDv+0xb8>)
 80811c2:	6819      	ldr	r1, [r3, #0]
 80811c4:	f7ff f919 	bl	80803fa <_ZN7FatFile6existsEPKc>
 80811c8:	b1e0      	cbz	r0, 8081204 <_Z8close_SDv+0x84>
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 80811ca:	f006 f92a 	bl	8087422 <_ZN9TimeClass3nowEv>
 80811ce:	491b      	ldr	r1, [pc, #108]	; (808123c <_Z8close_SDv+0xbc>)
 80811d0:	4602      	mov	r2, r0
 80811d2:	17c3      	asrs	r3, r0, #31
 80811d4:	9500      	str	r5, [sp, #0]
 80811d6:	a802      	add	r0, sp, #8
 80811d8:	f006 f8c4 	bl	8087364 <_ZN9TimeClass6formatExPKc>
        sprintf(publishStr, "SD-write worked at %s", 
 80811dc:	9a02      	ldr	r2, [sp, #8]
 80811de:	4918      	ldr	r1, [pc, #96]	; (8081240 <_Z8close_SDv+0xc0>)
        sprintf(publishStr, "SD-write FAILED at %s", 
 80811e0:	4818      	ldr	r0, [pc, #96]	; (8081244 <_Z8close_SDv+0xc4>)
 80811e2:	f005 f8e7 	bl	80863b4 <sprintf>
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 80811e6:	a802      	add	r0, sp, #8
 80811e8:	f005 fe00 	bl	8086dec <_ZN6StringD1Ev>
           if(usbOn) {Serial.println((publishStr)); waitMS(100);}
 80811ec:	6823      	ldr	r3, [r4, #0]
 80811ee:	b13b      	cbz	r3, 8081200 <_Z8close_SDv+0x80>
 80811f0:	f007 f998 	bl	8088524 <_Z16_fetch_usbserialv>
 80811f4:	4913      	ldr	r1, [pc, #76]	; (8081244 <_Z8close_SDv+0xc4>)
 80811f6:	f005 ff3e 	bl	8087076 <_ZN5Print7printlnEPKc>
 80811fa:	2064      	movs	r0, #100	; 0x64
 80811fc:	f7ff fb7e 	bl	80808fc <_Z6waitMSm>
    }
 8081200:	b007      	add	sp, #28
 8081202:	bd30      	pop	{r4, r5, pc}
                            Time.format(Time.now(),"%Y-%m-%d-%H-%M").c_str());
 8081204:	f006 f90d 	bl	8087422 <_ZN9TimeClass3nowEv>
 8081208:	490c      	ldr	r1, [pc, #48]	; (808123c <_Z8close_SDv+0xbc>)
 808120a:	4602      	mov	r2, r0
 808120c:	17c3      	asrs	r3, r0, #31
 808120e:	9500      	str	r5, [sp, #0]
 8081210:	a802      	add	r0, sp, #8
 8081212:	f006 f8a7 	bl	8087364 <_ZN9TimeClass6formatExPKc>
        sprintf(publishStr, "SD-write FAILED at %s", 
 8081216:	9a02      	ldr	r2, [sp, #8]
 8081218:	490b      	ldr	r1, [pc, #44]	; (8081248 <_Z8close_SDv+0xc8>)
 808121a:	e7e1      	b.n	80811e0 <_Z8close_SDv+0x60>
 808121c:	2000037c 	.word	0x2000037c
 8081220:	20000260 	.word	0x20000260
 8081224:	0808c66f 	.word	0x0808c66f
 8081228:	0808c67b 	.word	0x0808c67b
 808122c:	0808c52f 	.word	0x0808c52f
 8081230:	200008dc 	.word	0x200008dc
 8081234:	200003a0 	.word	0x200003a0
 8081238:	20000888 	.word	0x20000888
 808123c:	20000aec 	.word	0x20000aec
 8081240:	0808c67f 	.word	0x0808c67f
 8081244:	200003b0 	.word	0x200003b0
 8081248:	0808c695 	.word	0x0808c695

0808124c <_Z9delayTime6String>:
    { if(delay == "long")
 808124c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808124e:	490e      	ldr	r1, [pc, #56]	; (8081288 <_Z9delayTime6String+0x3c>)
 8081250:	f005 fec3 	bl	8086fda <_ZNK6String6equalsEPKc>
 8081254:	4b0d      	ldr	r3, [pc, #52]	; (808128c <_Z9delayTime6String+0x40>)
 8081256:	b190      	cbz	r0, 808127e <_Z9delayTime6String+0x32>
        {seconds=180;   // creat enough delay time to flash the unit
 8081258:	22b4      	movs	r2, #180	; 0xb4
 808125a:	601a      	str	r2, [r3, #0]
 808125c:	4b0c      	ldr	r3, [pc, #48]	; (8081290 <_Z9delayTime6String+0x44>)
 808125e:	4a0d      	ldr	r2, [pc, #52]	; (8081294 <_Z9delayTime6String+0x48>)
 8081260:	781b      	ldrb	r3, [r3, #0]
 8081262:	490d      	ldr	r1, [pc, #52]	; (8081298 <_Z9delayTime6String+0x4c>)
 8081264:	f88d 3000 	strb.w	r3, [sp]
 8081268:	a802      	add	r0, sp, #8
 808126a:	233c      	movs	r3, #60	; 0x3c
 808126c:	f006 ff18 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081270:	a803      	add	r0, sp, #12
 8081272:	f7ff ff6f 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Particle", "in delayTime",60,PRIVATE);
 8081276:	2001      	movs	r0, #1
    }
 8081278:	b005      	add	sp, #20
 808127a:	f85d fb04 	ldr.w	pc, [sp], #4
        {seconds=5; return -1; }
 808127e:	2205      	movs	r2, #5
 8081280:	f04f 30ff 	mov.w	r0, #4294967295
 8081284:	601a      	str	r2, [r3, #0]
 8081286:	e7f7      	b.n	8081278 <_Z9delayTime6String+0x2c>
 8081288:	0808c6ab 	.word	0x0808c6ab
 808128c:	20000024 	.word	0x20000024
 8081290:	20000260 	.word	0x20000260
 8081294:	0808c6b0 	.word	0x0808c6b0
 8081298:	0808c6bd 	.word	0x0808c6bd

0808129c <_Z12connectToWebv>:
        network_connect(*this, flags, 0, NULL);
 808129c:	2300      	movs	r3, #0
    {
 808129e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80812a2:	4c62      	ldr	r4, [pc, #392]	; (808142c <_Z12connectToWebv+0x190>)
 80812a4:	b087      	sub	sp, #28
 80812a6:	461a      	mov	r2, r3
 80812a8:	4619      	mov	r1, r3
 80812aa:	6860      	ldr	r0, [r4, #4]
          if (!waitFor(Cellular.ready, a_minute * 1.5))
 80812ac:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8081464 <_Z12connectToWebv+0x1c8>
 80812b0:	f004 ffd8 	bl	8086264 <network_connect>
      delay(200);
 80812b4:	20c8      	movs	r0, #200	; 0xc8
 80812b6:	f006 f94e 	bl	8087556 <delay>
          if (!waitFor(Cellular.ready, a_minute * 1.5))
 80812ba:	f8db 0000 	ldr.w	r0, [fp]
 80812be:	f008 fa5d 	bl	808977c <__aeabi_i2d>
 80812c2:	2200      	movs	r2, #0
 80812c4:	4b5a      	ldr	r3, [pc, #360]	; (8081430 <_Z12connectToWebv+0x194>)
 80812c6:	f008 fac3 	bl	8089850 <__aeabi_dmul>
 80812ca:	f008 fd5b 	bl	8089d84 <__aeabi_d2uiz>
 80812ce:	9002      	str	r0, [sp, #8]
        return hal_timer_millis(nullptr);
 80812d0:	2000      	movs	r0, #0
 80812d2:	f004 fd65 	bl	8085da0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80812d6:	9b02      	ldr	r3, [sp, #8]
 80812d8:	2200      	movs	r2, #0
 80812da:	4619      	mov	r1, r3
        return hal_timer_millis(nullptr);
 80812dc:	4605      	mov	r5, r0
 80812de:	f04f 0a00 	mov.w	sl, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80812e2:	e9cd 1202 	strd	r1, r2, [sp, #8]
        return hal_timer_millis(nullptr);
 80812e6:	2000      	movs	r0, #0
 80812e8:	f004 fd5a 	bl	8085da0 <hal_timer_millis>
        while (_while() && !_condition()) {
 80812ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80812f0:	ebb0 0805 	subs.w	r8, r0, r5
 80812f4:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
 80812f8:	4599      	cmp	r9, r3
 80812fa:	bf08      	it	eq
 80812fc:	4590      	cmpeq	r8, r2
 80812fe:	d206      	bcs.n	808130e <_Z12connectToWebv+0x72>
 8081300:	4620      	mov	r0, r4
 8081302:	f7fe ffed 	bl	80802e0 <_ZN5spark13CellularClass5readyEv>
 8081306:	b910      	cbnz	r0, 808130e <_Z12connectToWebv+0x72>
            spark_process();
 8081308:	f005 f804 	bl	8086314 <spark_process>
        while (_while() && !_condition()) {
 808130c:	e7eb      	b.n	80812e6 <_Z12connectToWebv+0x4a>
 808130e:	4847      	ldr	r0, [pc, #284]	; (808142c <_Z12connectToWebv+0x190>)
 8081310:	f7fe ffe6 	bl	80802e0 <_ZN5spark13CellularClass5readyEv>
 8081314:	b9b0      	cbnz	r0, 8081344 <_Z12connectToWebv+0xa8>
                WeakSignalBlink();
 8081316:	f7ff f941 	bl	808059c <_Z15WeakSignalBlinkv>
                delay(500);
 808131a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808131e:	f006 f91a 	bl	8087556 <delay>
                WeakSignalBlink();
 8081322:	f7ff f93b 	bl	808059c <_Z15WeakSignalBlinkv>
                  if(usbOn) {Serial.println("Difficulty connecting. Will try for 1 more min"); waitMS(100);}
 8081326:	4b43      	ldr	r3, [pc, #268]	; (8081434 <_Z12connectToWebv+0x198>)
 8081328:	681b      	ldr	r3, [r3, #0]
 808132a:	b13b      	cbz	r3, 808133c <_Z12connectToWebv+0xa0>
 808132c:	f007 f8fa 	bl	8088524 <_Z16_fetch_usbserialv>
 8081330:	4941      	ldr	r1, [pc, #260]	; (8081438 <_Z12connectToWebv+0x19c>)
 8081332:	f005 fea0 	bl	8087076 <_ZN5Print7printlnEPKc>
 8081336:	2064      	movs	r0, #100	; 0x64
 8081338:	f7ff fae0 	bl	80808fc <_Z6waitMSm>
                delay(500);
 808133c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081340:	f006 f909 	bl	8087556 <delay>
          if (!waitFor(Cellular.ready, a_minute * 0.5))
 8081344:	f8db 0000 	ldr.w	r0, [fp]
 8081348:	f008 fa18 	bl	808977c <__aeabi_i2d>
 808134c:	2200      	movs	r2, #0
 808134e:	4b3b      	ldr	r3, [pc, #236]	; (808143c <_Z12connectToWebv+0x1a0>)
 8081350:	f008 fa7e 	bl	8089850 <__aeabi_dmul>
 8081354:	f008 fd16 	bl	8089d84 <__aeabi_d2uiz>
 8081358:	4604      	mov	r4, r0
        return hal_timer_millis(nullptr);
 808135a:	2000      	movs	r0, #0
 808135c:	f004 fd20 	bl	8085da0 <hal_timer_millis>
 8081360:	f04f 0900 	mov.w	r9, #0
 8081364:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8081366:	2500      	movs	r5, #0
          if (!waitFor(Cellular.ready, a_minute * 1.5))
 8081368:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 808142c <_Z12connectToWebv+0x190>
        return hal_timer_millis(nullptr);
 808136c:	2000      	movs	r0, #0
 808136e:	f004 fd17 	bl	8085da0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8081372:	ebb0 0608 	subs.w	r6, r0, r8
 8081376:	eb61 0709 	sbc.w	r7, r1, r9
        while (_while() && !_condition()) {
 808137a:	42af      	cmp	r7, r5
 808137c:	bf08      	it	eq
 808137e:	42a6      	cmpeq	r6, r4
 8081380:	d206      	bcs.n	8081390 <_Z12connectToWebv+0xf4>
 8081382:	4650      	mov	r0, sl
 8081384:	f7fe ffac 	bl	80802e0 <_ZN5spark13CellularClass5readyEv>
 8081388:	b910      	cbnz	r0, 8081390 <_Z12connectToWebv+0xf4>
            spark_process();
 808138a:	f004 ffc3 	bl	8086314 <spark_process>
        while (_while() && !_condition()) {
 808138e:	e7ed      	b.n	808136c <_Z12connectToWebv+0xd0>
 8081390:	4826      	ldr	r0, [pc, #152]	; (808142c <_Z12connectToWebv+0x190>)
 8081392:	f7fe ffa5 	bl	80802e0 <_ZN5spark13CellularClass5readyEv>
 8081396:	4d27      	ldr	r5, [pc, #156]	; (8081434 <_Z12connectToWebv+0x198>)
          if (!waitFor(Cellular.ready, a_minute * 0.5))
 8081398:	bb48      	cbnz	r0, 80813ee <_Z12connectToWebv+0x152>
                  sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 808139a:	4c29      	ldr	r4, [pc, #164]	; (8081440 <_Z12connectToWebv+0x1a4>)
                WeakSignalBlink();
 808139c:	f7ff f8fe 	bl	808059c <_Z15WeakSignalBlinkv>
                delay(500);
 80813a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80813a4:	f006 f8d7 	bl	8087556 <delay>
                WeakSignalBlink();
 80813a8:	f7ff f8f8 	bl	808059c <_Z15WeakSignalBlinkv>
                  sprintf(publishStr, " sleeping for %2i minutes to wait for better time ", minutes);
 80813ac:	6822      	ldr	r2, [r4, #0]
 80813ae:	4925      	ldr	r1, [pc, #148]	; (8081444 <_Z12connectToWebv+0x1a8>)
 80813b0:	4825      	ldr	r0, [pc, #148]	; (8081448 <_Z12connectToWebv+0x1ac>)
 80813b2:	f004 ffff 	bl	80863b4 <sprintf>
                     if(usbOn) 
 80813b6:	682b      	ldr	r3, [r5, #0]
 80813b8:	b163      	cbz	r3, 80813d4 <_Z12connectToWebv+0x138>
                     {  Serial.print("Difficulty connecting, sleeping");   
 80813ba:	f007 f8b3 	bl	8088524 <_Z16_fetch_usbserialv>
 80813be:	4923      	ldr	r1, [pc, #140]	; (808144c <_Z12connectToWebv+0x1b0>)
 80813c0:	f005 fe42 	bl	8087048 <_ZN5Print5printEPKc>
                        Serial.println(publishStr);
 80813c4:	f007 f8ae 	bl	8088524 <_Z16_fetch_usbserialv>
 80813c8:	491f      	ldr	r1, [pc, #124]	; (8081448 <_Z12connectToWebv+0x1ac>)
 80813ca:	f005 fe54 	bl	8087076 <_ZN5Print7printlnEPKc>
                        waitMS(100);
 80813ce:	2064      	movs	r0, #100	; 0x64
 80813d0:	f7ff fa94 	bl	80808fc <_Z6waitMSm>
                delay(200);
 80813d4:	20c8      	movs	r0, #200	; 0xc8
 80813d6:	f006 f8be 	bl	8087556 <delay>
                System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);
 80813da:	4b1d      	ldr	r3, [pc, #116]	; (8081450 <_Z12connectToWebv+0x1b4>)
 80813dc:	6821      	ldr	r1, [r4, #0]
 80813de:	681a      	ldr	r2, [r3, #0]
 80813e0:	4b1c      	ldr	r3, [pc, #112]	; (8081454 <_Z12connectToWebv+0x1b8>)
 80813e2:	434a      	muls	r2, r1
 80813e4:	681b      	ldr	r3, [r3, #0]
 80813e6:	2101      	movs	r1, #1
 80813e8:	a804      	add	r0, sp, #16
 80813ea:	f005 fa23 	bl	8086834 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
        spark_cloud_flag_connect();
 80813ee:	f004 ff99 	bl	8086324 <spark_cloud_flag_connect>
          wd->checkin();  
 80813f2:	f7fe ff83 	bl	80802fc <_ZN19ApplicationWatchdog7checkinEv>
 80813f6:	4b18      	ldr	r3, [pc, #96]	; (8081458 <_Z12connectToWebv+0x1bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80813f8:	4a18      	ldr	r2, [pc, #96]	; (808145c <_Z12connectToWebv+0x1c0>)
 80813fa:	781b      	ldrb	r3, [r3, #0]
 80813fc:	4918      	ldr	r1, [pc, #96]	; (8081460 <_Z12connectToWebv+0x1c4>)
 80813fe:	f88d 3000 	strb.w	r3, [sp]
 8081402:	a804      	add	r0, sp, #16
 8081404:	233c      	movs	r3, #60	; 0x3c
 8081406:	f006 fe4b 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808140a:	a805      	add	r0, sp, #20
 808140c:	f7ff fea2 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
             if(usbOn) {Serial.println("connected"); waitMS(100);}
 8081410:	682b      	ldr	r3, [r5, #0]
 8081412:	b13b      	cbz	r3, 8081424 <_Z12connectToWebv+0x188>
 8081414:	f007 f886 	bl	8088524 <_Z16_fetch_usbserialv>
 8081418:	4910      	ldr	r1, [pc, #64]	; (808145c <_Z12connectToWebv+0x1c0>)
 808141a:	f005 fe2c 	bl	8087076 <_ZN5Print7printlnEPKc>
 808141e:	2064      	movs	r0, #100	; 0x64
 8081420:	f7ff fa6c 	bl	80808fc <_Z6waitMSm>
    }
 8081424:	b007      	add	sp, #28
 8081426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808142a:	bf00      	nop
 808142c:	20000f38 	.word	0x20000f38
 8081430:	3ff80000 	.word	0x3ff80000
 8081434:	200008dc 	.word	0x200008dc
 8081438:	0808c6c6 	.word	0x0808c6c6
 808143c:	3fe00000 	.word	0x3fe00000
 8081440:	20000018 	.word	0x20000018
 8081444:	0808c6f5 	.word	0x0808c6f5
 8081448:	200003b0 	.word	0x200003b0
 808144c:	0808c728 	.word	0x0808c728
 8081450:	20000028 	.word	0x20000028
 8081454:	2000025c 	.word	0x2000025c
 8081458:	20000260 	.word	0x20000260
 808145c:	0808c3ae 	.word	0x0808c3ae
 8081460:	0808c748 	.word	0x0808c748
 8081464:	20000008 	.word	0x20000008

08081468 <_Z16uploadToParticlev>:

void  uploadToParticle()
    {
 8081468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    sprintf(publishStr, 
 808146c:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 808166c <_Z16uploadToParticlev+0x204>
    {
 8081470:	b09d      	sub	sp, #116	; 0x74
    sprintf(publishStr, 
 8081472:	f8d9 0000 	ldr.w	r0, [r9]
 8081476:	f008 f993 	bl	80897a0 <__aeabi_f2d>
 808147a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8081670 <_Z16uploadToParticlev+0x208>
 808147e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8081482:	f8d8 0000 	ldr.w	r0, [r8]
 8081486:	f008 f98b 	bl	80897a0 <__aeabi_f2d>
 808148a:	4f61      	ldr	r7, [pc, #388]	; (8081610 <_Z16uploadToParticlev+0x1a8>)
 808148c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8081490:	6838      	ldr	r0, [r7, #0]
 8081492:	f008 f985 	bl	80897a0 <__aeabi_f2d>
 8081496:	4e5f      	ldr	r6, [pc, #380]	; (8081614 <_Z16uploadToParticlev+0x1ac>)
 8081498:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808149c:	6830      	ldr	r0, [r6, #0]
 808149e:	f008 f97f 	bl	80897a0 <__aeabi_f2d>
 80814a2:	4d5d      	ldr	r5, [pc, #372]	; (8081618 <_Z16uploadToParticlev+0x1b0>)
 80814a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80814a8:	6828      	ldr	r0, [r5, #0]
 80814aa:	f008 f979 	bl	80897a0 <__aeabi_f2d>
 80814ae:	2200      	movs	r2, #0
 80814b0:	4b5a      	ldr	r3, [pc, #360]	; (808161c <_Z16uploadToParticlev+0x1b4>)
 80814b2:	4c5b      	ldr	r4, [pc, #364]	; (8081620 <_Z16uploadToParticlev+0x1b8>)
 80814b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80814b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80814bc:	a350      	add	r3, pc, #320	; (adr r3, 8081600 <_Z16uploadToParticlev+0x198>)
 80814be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80814c2:	4958      	ldr	r1, [pc, #352]	; (8081624 <_Z16uploadToParticlev+0x1bc>)
 80814c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80814c8:	a34f      	add	r3, pc, #316	; (adr r3, 8081608 <_Z16uploadToParticlev+0x1a0>)
 80814ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80814ce:	4856      	ldr	r0, [pc, #344]	; (8081628 <_Z16uploadToParticlev+0x1c0>)
 80814d0:	e9cd 2300 	strd	r2, r3, [sp]
 80814d4:	4a55      	ldr	r2, [pc, #340]	; (808162c <_Z16uploadToParticlev+0x1c4>)
 80814d6:	f004 ff6d 	bl	80863b4 <sprintf>
 80814da:	7823      	ldrb	r3, [r4, #0]
 80814dc:	4a52      	ldr	r2, [pc, #328]	; (8081628 <_Z16uploadToParticlev+0x1c0>)
 80814de:	4954      	ldr	r1, [pc, #336]	; (8081630 <_Z16uploadToParticlev+0x1c8>)
 80814e0:	f88d 3000 	strb.w	r3, [sp]
 80814e4:	a812      	add	r0, sp, #72	; 0x48
 80814e6:	233c      	movs	r3, #60	; 0x3c
 80814e8:	f006 fdda 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80814ec:	a813      	add	r0, sp, #76	; 0x4c
 80814ee:	f7ff fe31 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      "works,%s, t1_offset,%05.2f, t2_offset,%05.2f, k_correction,%05.2f, AtempC,%05.2f, H2Otemp,%05.2f, SpC,%06.1f, rain,%06.0f, Depth_in,%06.3f",
                works, t1_offset, t2_offset, k, t1, t2, Sp_C, rain, depth);
      Particle.publish(unit_name, publishStr, 60, PRIVATE);
      delay(500);
 80814f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80814f6:	f006 f82e 	bl	8087556 <delay>
      //    snprintf(_json, sizeof(_json), "%s,{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
      //                           unit_name.c_str(), t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts);
    snprintf(_json, sizeof(_json), 
 80814fa:	4b4e      	ldr	r3, [pc, #312]	; (8081634 <_Z16uploadToParticlev+0x1cc>)
 80814fc:	6818      	ldr	r0, [r3, #0]
 80814fe:	f008 f94f 	bl	80897a0 <__aeabi_f2d>
 8081502:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8081506:	4b4c      	ldr	r3, [pc, #304]	; (8081638 <_Z16uploadToParticlev+0x1d0>)
 8081508:	6818      	ldr	r0, [r3, #0]
 808150a:	f008 f949 	bl	80897a0 <__aeabi_f2d>
 808150e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8081512:	f8d9 0000 	ldr.w	r0, [r9]
 8081516:	f008 f943 	bl	80897a0 <__aeabi_f2d>
 808151a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808151e:	f8d8 0000 	ldr.w	r0, [r8]
 8081522:	f008 f93d 	bl	80897a0 <__aeabi_f2d>
 8081526:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808152a:	4b44      	ldr	r3, [pc, #272]	; (808163c <_Z16uploadToParticlev+0x1d4>)
 808152c:	6818      	ldr	r0, [r3, #0]
 808152e:	f008 f937 	bl	80897a0 <__aeabi_f2d>
 8081532:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8081536:	6838      	ldr	r0, [r7, #0]
 8081538:	f008 f932 	bl	80897a0 <__aeabi_f2d>
 808153c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8081540:	6830      	ldr	r0, [r6, #0]
 8081542:	f008 f92d 	bl	80897a0 <__aeabi_f2d>
 8081546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808154a:	6828      	ldr	r0, [r5, #0]
 808154c:	f008 f928 	bl	80897a0 <__aeabi_f2d>
 8081550:	4a3b      	ldr	r2, [pc, #236]	; (8081640 <_Z16uploadToParticlev+0x1d8>)
 8081552:	e9cd 0100 	strd	r0, r1, [sp]
 8081556:	2196      	movs	r1, #150	; 0x96
 8081558:	483a      	ldr	r0, [pc, #232]	; (8081644 <_Z16uploadToParticlev+0x1dc>)
 808155a:	f004 ff3b 	bl	80863d4 <snprintf>
 808155e:	7823      	ldrb	r3, [r4, #0]
 8081560:	4a38      	ldr	r2, [pc, #224]	; (8081644 <_Z16uploadToParticlev+0x1dc>)
 8081562:	4939      	ldr	r1, [pc, #228]	; (8081648 <_Z16uploadToParticlev+0x1e0>)
 8081564:	f88d 3000 	strb.w	r3, [sp]
 8081568:	a812      	add	r0, sp, #72	; 0x48
 808156a:	233c      	movs	r3, #60	; 0x3c
 808156c:	f006 fd98 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081570:	a813      	add	r0, sp, #76	; 0x4c
 8081572:	f7ff fdef 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      "{\"AtempC\":\"%05.2f\",\"H2Otemp\":\"%05.2f\",\"SpC\":\"%06.1f\", \"Avolts\":\"%05.3f\",\"rain\":\"%04.0f\",\"depth\":\"%06.3f\",\"SOC\":\"%05.2f\",\"volts\":\"%04.2f\"}",
                t1, t2, Sp_C ,Avolts, rain, depth, SoC, volts );
        Particle.publish("data", _json, PRIVATE);
      delay(500);
 8081576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808157a:	f005 ffec 	bl	8087556 <delay>
       if(usbOn) {Serial.println("finished uploading"); waitMS(100);}
 808157e:	4b33      	ldr	r3, [pc, #204]	; (808164c <_Z16uploadToParticlev+0x1e4>)
 8081580:	681b      	ldr	r3, [r3, #0]
 8081582:	b13b      	cbz	r3, 8081594 <_Z16uploadToParticlev+0x12c>
 8081584:	f006 ffce 	bl	8088524 <_Z16_fetch_usbserialv>
 8081588:	4931      	ldr	r1, [pc, #196]	; (8081650 <_Z16uploadToParticlev+0x1e8>)
 808158a:	f005 fd74 	bl	8087076 <_ZN5Print7printlnEPKc>
 808158e:	2064      	movs	r0, #100	; 0x64
 8081590:	f7ff f9b4 	bl	80808fc <_Z6waitMSm>
      // send warning message to particle console
    sprintf(publishStr, "uploaded, will sleep in %2i seconds", seconds);
 8081594:	4b2f      	ldr	r3, [pc, #188]	; (8081654 <_Z16uploadToParticlev+0x1ec>)
 8081596:	4930      	ldr	r1, [pc, #192]	; (8081658 <_Z16uploadToParticlev+0x1f0>)
 8081598:	681a      	ldr	r2, [r3, #0]
 808159a:	4823      	ldr	r0, [pc, #140]	; (8081628 <_Z16uploadToParticlev+0x1c0>)
 808159c:	f004 ff0a 	bl	80863b4 <sprintf>
 80815a0:	7823      	ldrb	r3, [r4, #0]
 80815a2:	4a21      	ldr	r2, [pc, #132]	; (8081628 <_Z16uploadToParticlev+0x1c0>)
 80815a4:	4922      	ldr	r1, [pc, #136]	; (8081630 <_Z16uploadToParticlev+0x1c8>)
 80815a6:	f88d 3000 	strb.w	r3, [sp]
 80815aa:	a812      	add	r0, sp, #72	; 0x48
 80815ac:	233c      	movs	r3, #60	; 0x3c
 80815ae:	f006 fd77 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80815b2:	a813      	add	r0, sp, #76	; 0x4c
 80815b4:	f7ff fdce 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(unit_name, publishStr,60,PRIVATE);
   
    waitMS(1000);  // 1 second delay with call to Particle.process() to allow time for OTA flashing
 80815b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80815bc:	f7ff f99e 	bl	80808fc <_Z6waitMSm>
      // send message to particle console
    sprintf(publishStr, "sleeping %2i minutes", minutes);
 80815c0:	4b26      	ldr	r3, [pc, #152]	; (808165c <_Z16uploadToParticlev+0x1f4>)
 80815c2:	4927      	ldr	r1, [pc, #156]	; (8081660 <_Z16uploadToParticlev+0x1f8>)
 80815c4:	681a      	ldr	r2, [r3, #0]
 80815c6:	4818      	ldr	r0, [pc, #96]	; (8081628 <_Z16uploadToParticlev+0x1c0>)
 80815c8:	f004 fef4 	bl	80863b4 <sprintf>
      ///sprintf(event_name, " %s_on_%s", unit_name.c_str(), code_name);
    char event_name[40];
    sprintf(event_name, " %s_on_%s", unit_name, code_name);
 80815cc:	4b25      	ldr	r3, [pc, #148]	; (8081664 <_Z16uploadToParticlev+0x1fc>)
 80815ce:	4a18      	ldr	r2, [pc, #96]	; (8081630 <_Z16uploadToParticlev+0x1c8>)
 80815d0:	4925      	ldr	r1, [pc, #148]	; (8081668 <_Z16uploadToParticlev+0x200>)
 80815d2:	a812      	add	r0, sp, #72	; 0x48
 80815d4:	f004 feee 	bl	80863b4 <sprintf>
 80815d8:	7823      	ldrb	r3, [r4, #0]
 80815da:	4a13      	ldr	r2, [pc, #76]	; (8081628 <_Z16uploadToParticlev+0x1c0>)
 80815dc:	a912      	add	r1, sp, #72	; 0x48
 80815de:	f88d 3000 	strb.w	r3, [sp]
 80815e2:	a810      	add	r0, sp, #64	; 0x40
 80815e4:	233c      	movs	r3, #60	; 0x3c
 80815e6:	f006 fd5b 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80815ea:	a811      	add	r0, sp, #68	; 0x44
 80815ec:	f7ff fdb2 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish(event_name, publishStr,60,PRIVATE);
    waitSec(1); //wait 1 more seconds
 80815f0:	2001      	movs	r0, #1
 80815f2:	f7ff f994 	bl	808091e <_Z7waitSecm>
 80815f6:	b01d      	add	sp, #116	; 0x74
 80815f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80815fc:	f3af 8000 	nop.w
 8081600:	9999999a 	.word	0x9999999a
 8081604:	3fa99999 	.word	0x3fa99999
 8081608:	66666666 	.word	0x66666666
 808160c:	bfe66666 	.word	0xbfe66666
 8081610:	2000024c 	.word	0x2000024c
 8081614:	20000030 	.word	0x20000030
 8081618:	2000002c 	.word	0x2000002c
 808161c:	3ff40000 	.word	0x3ff40000
 8081620:	20000260 	.word	0x20000260
 8081624:	0808c751 	.word	0x0808c751
 8081628:	200003b0 	.word	0x200003b0
 808162c:	200008e8 	.word	0x200008e8
 8081630:	0808c4a9 	.word	0x0808c4a9
 8081634:	200008e0 	.word	0x200008e0
 8081638:	20000248 	.word	0x20000248
 808163c:	20000244 	.word	0x20000244
 8081640:	0808c7dc 	.word	0x0808c7dc
 8081644:	20000261 	.word	0x20000261
 8081648:	0808c866 	.word	0x0808c866
 808164c:	200008dc 	.word	0x200008dc
 8081650:	0808c86b 	.word	0x0808c86b
 8081654:	20000024 	.word	0x20000024
 8081658:	0808c87e 	.word	0x0808c87e
 808165c:	20000018 	.word	0x20000018
 8081660:	0808c8a2 	.word	0x0808c8a2
 8081664:	0808c8b7 	.word	0x0808c8b7
 8081668:	0808c8c8 	.word	0x0808c8c8
 808166c:	2000000c 	.word	0x2000000c
 8081670:	20000448 	.word	0x20000448
 8081674:	00000000 	.word	0x00000000

08081678 <loop>:
{  
 8081678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(usbOn) {Serial.println("in loop"); waitSec(0.1);}
 808167c:	4cba      	ldr	r4, [pc, #744]	; (8081968 <loop+0x2f0>)
{  
 808167e:	b0a3      	sub	sp, #140	; 0x8c
  if(usbOn) {Serial.println("in loop"); waitSec(0.1);}
 8081680:	6822      	ldr	r2, [r4, #0]
 8081682:	b13a      	cbz	r2, 8081694 <loop+0x1c>
 8081684:	f006 ff4e 	bl	8088524 <_Z16_fetch_usbserialv>
 8081688:	49b8      	ldr	r1, [pc, #736]	; (808196c <loop+0x2f4>)
 808168a:	f005 fcf4 	bl	8087076 <_ZN5Print7printlnEPKc>
 808168e:	2000      	movs	r0, #0
 8081690:	f7ff f945 	bl	808091e <_Z7waitSecm>
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 8081694:	2100      	movs	r1, #0
 8081696:	a818      	add	r0, sp, #96	; 0x60
 8081698:	f006 fa24 	bl	8087ae4 <_ZN9FuelGaugeC1Eb>
  waitSec(0.5);
 808169c:	2000      	movs	r0, #0
 808169e:	f7ff f93e 	bl	808091e <_Z7waitSecm>
  fuel.quickStart();
 80816a2:	a818      	add	r0, sp, #96	; 0x60
 80816a4:	f006 faf2 	bl	8087c8c <_ZN9FuelGauge10quickStartEv>
  waitSec(1);
 80816a8:	2001      	movs	r0, #1
 80816aa:	f7ff f938 	bl	808091e <_Z7waitSecm>
  volts = fuel.getVCell();
 80816ae:	a818      	add	r0, sp, #96	; 0x60
 80816b0:	f006 fa6e 	bl	8087b90 <_ZN9FuelGauge8getVCellEv>
 80816b4:	4eae      	ldr	r6, [pc, #696]	; (8081970 <loop+0x2f8>)
  SoC = fuel.getSoC();
 80816b6:	4daf      	ldr	r5, [pc, #700]	; (8081974 <loop+0x2fc>)
  volts = fuel.getVCell();
 80816b8:	6030      	str	r0, [r6, #0]
  SoC = fuel.getSoC();
 80816ba:	a818      	add	r0, sp, #96	; 0x60
 80816bc:	f006 fa86 	bl	8087bcc <_ZN9FuelGauge6getSoCEv>
  if(usbOn)
 80816c0:	6823      	ldr	r3, [r4, #0]
  SoC = fuel.getSoC();
 80816c2:	6028      	str	r0, [r5, #0]
  if(usbOn)
 80816c4:	4634      	mov	r4, r6
 80816c6:	2b00      	cmp	r3, #0
 80816c8:	d075      	beq.n	80817b6 <loop+0x13e>
      Serial.printlnf("SoC=%6.2f,  volts=%6.2f,  volts/4.4=%5.2f" , SoC,volts,(volts/4.4));
 80816ca:	f006 ff2b 	bl	8088524 <_Z16_fetch_usbserialv>
 80816ce:	4682      	mov	sl, r0
 80816d0:	6830      	ldr	r0, [r6, #0]
 80816d2:	f008 f865 	bl	80897a0 <__aeabi_f2d>
 80816d6:	4606      	mov	r6, r0
 80816d8:	6828      	ldr	r0, [r5, #0]
 80816da:	460f      	mov	r7, r1
 80816dc:	f008 f860 	bl	80897a0 <__aeabi_f2d>
 80816e0:	a399      	add	r3, pc, #612	; (adr r3, 8081948 <loop+0x2d0>)
 80816e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816e6:	4680      	mov	r8, r0
 80816e8:	4689      	mov	r9, r1
 80816ea:	4630      	mov	r0, r6
 80816ec:	4639      	mov	r1, r7
 80816ee:	f008 f9d9 	bl	8089aa4 <__aeabi_ddiv>
 80816f2:	4642      	mov	r2, r8
 80816f4:	464b      	mov	r3, r9
 80816f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80816fa:	e9cd 6700 	strd	r6, r7, [sp]
 80816fe:	499e      	ldr	r1, [pc, #632]	; (8081978 <loop+0x300>)
 8081700:	4650      	mov	r0, sl
 8081702:	f7fe fddf 	bl	80802c4 <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("difference= %5.2f%%", 100*abs(1-(100*volts/4.304)/SoC));
 8081706:	f006 ff0d 	bl	8088524 <_Z16_fetch_usbserialv>
 808170a:	499c      	ldr	r1, [pc, #624]	; (808197c <loop+0x304>)
 808170c:	4680      	mov	r8, r0
 808170e:	6820      	ldr	r0, [r4, #0]
 8081710:	f008 fcb6 	bl	808a080 <__aeabi_fmul>
 8081714:	f008 f844 	bl	80897a0 <__aeabi_f2d>
 8081718:	a38d      	add	r3, pc, #564	; (adr r3, 8081950 <loop+0x2d8>)
 808171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808171e:	f008 f9c1 	bl	8089aa4 <__aeabi_ddiv>
 8081722:	4606      	mov	r6, r0
 8081724:	6828      	ldr	r0, [r5, #0]
 8081726:	460f      	mov	r7, r1
 8081728:	f008 f83a 	bl	80897a0 <__aeabi_f2d>
 808172c:	4602      	mov	r2, r0
 808172e:	460b      	mov	r3, r1
 8081730:	4630      	mov	r0, r6
 8081732:	4639      	mov	r1, r7
 8081734:	f008 f9b6 	bl	8089aa4 <__aeabi_ddiv>
 8081738:	4602      	mov	r2, r0
 808173a:	460b      	mov	r3, r1
 808173c:	2000      	movs	r0, #0
 808173e:	4990      	ldr	r1, [pc, #576]	; (8081980 <loop+0x308>)
 8081740:	f007 fece 	bl	80894e0 <__aeabi_dsub>
 8081744:	4607      	mov	r7, r0
 8081746:	460e      	mov	r6, r1
 8081748:	2200      	movs	r2, #0
 808174a:	2300      	movs	r3, #0
 808174c:	4638      	mov	r0, r7
 808174e:	4631      	mov	r1, r6
 8081750:	f008 fb0e 	bl	8089d70 <__aeabi_dcmpgt>
 8081754:	b908      	cbnz	r0, 808175a <loop+0xe2>
 8081756:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 808175a:	2200      	movs	r2, #0
 808175c:	4631      	mov	r1, r6
 808175e:	4b89      	ldr	r3, [pc, #548]	; (8081984 <loop+0x30c>)
 8081760:	4638      	mov	r0, r7
 8081762:	f008 f875 	bl	8089850 <__aeabi_dmul>
 8081766:	4602      	mov	r2, r0
 8081768:	460b      	mov	r3, r1
 808176a:	4640      	mov	r0, r8
 808176c:	4986      	ldr	r1, [pc, #536]	; (8081988 <loop+0x310>)
 808176e:	f7fe fda9 	bl	80802c4 <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("mapped volts= %5.2f%%", map((double)volts,3.5,4.304,0.0,100.0));
 8081772:	f006 fed7 	bl	8088524 <_Z16_fetch_usbserialv>
 8081776:	4606      	mov	r6, r0
 8081778:	6820      	ldr	r0, [r4, #0]
 808177a:	f008 f811 	bl	80897a0 <__aeabi_f2d>
 808177e:	2200      	movs	r2, #0
 8081780:	4b80      	ldr	r3, [pc, #512]	; (8081984 <loop+0x30c>)
 8081782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081786:	2200      	movs	r2, #0
 8081788:	2300      	movs	r3, #0
 808178a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808178e:	a370      	add	r3, pc, #448	; (adr r3, 8081950 <loop+0x2d8>)
 8081790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081794:	e9cd 2300 	strd	r2, r3, [sp]
 8081798:	2200      	movs	r2, #0
 808179a:	4b7c      	ldr	r3, [pc, #496]	; (808198c <loop+0x314>)
 808179c:	f005 fea0 	bl	80874e0 <_Z3mapddddd>
 80817a0:	4602      	mov	r2, r0
 80817a2:	460b      	mov	r3, r1
 80817a4:	4630      	mov	r0, r6
 80817a6:	497a      	ldr	r1, [pc, #488]	; (8081990 <loop+0x318>)
 80817a8:	f7fe fd8c 	bl	80802c4 <_ZN5Print8printlnfEPKcz>
      waitSec(0.2);
 80817ac:	2000      	movs	r0, #0
 80817ae:	f7ff f8b6 	bl	808091e <_Z7waitSecm>
      showPMIC();
 80817b2:	f7ff fc33 	bl	808101c <_Z8showPMICv>
 minutes = checkBattery(SoC,volts);
 80817b6:	6821      	ldr	r1, [r4, #0]
 80817b8:	6828      	ldr	r0, [r5, #0]
 80817ba:	f7fe ff39 	bl	8080630 <_Z12checkBatteryff>
 80817be:	4b75      	ldr	r3, [pc, #468]	; (8081994 <loop+0x31c>)
  delay(200);
 80817c0:	f04f 0802 	mov.w	r8, #2
 minutes = checkBattery(SoC,volts);
 80817c4:	6018      	str	r0, [r3, #0]
  setup_SD();
 80817c6:	f7ff f8d1 	bl	808096c <_Z8setup_SDv>
  rain = analogRead(RainPin);
 80817ca:	4b73      	ldr	r3, [pc, #460]	; (8081998 <loop+0x320>)
               t1 = bme1.readTemperature();
 80817cc:	4c73      	ldr	r4, [pc, #460]	; (808199c <loop+0x324>)
  rain = analogRead(RainPin);
 80817ce:	8818      	ldrh	r0, [r3, #0]
 80817d0:	f007 fbbe 	bl	8088f50 <analogRead>
 80817d4:	f008 fc00 	bl	8089fd8 <__aeabi_i2f>
 80817d8:	4b71      	ldr	r3, [pc, #452]	; (80819a0 <loop+0x328>)
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 80817da:	2100      	movs	r1, #0
  rain = analogRead(RainPin);
 80817dc:	6018      	str	r0, [r3, #0]
  digitalWrite(B0, LOW);     //turn off power to the rain sensor, otherwise it interfears
 80817de:	2018      	movs	r0, #24
 80817e0:	f007 fb9d 	bl	8088f1e <digitalWrite>
  delay(200);
 80817e4:	20c8      	movs	r0, #200	; 0xc8
 80817e6:	f005 feb6 	bl	8087556 <delay>
               t1 = bme1.readTemperature();
 80817ea:	4f6e      	ldr	r7, [pc, #440]	; (80819a4 <loop+0x32c>)
               p1 = bme1.readPressure()/100.0;
 80817ec:	f8df 918c 	ldr.w	r9, [pc, #396]	; 808197c <loop+0x304>
               t1 = bme1.readTemperature();
 80817f0:	4620      	mov	r0, r4
 80817f2:	f003 ff93 	bl	808571c <_ZN9CE_BME28015readTemperatureEv>
 80817f6:	6038      	str	r0, [r7, #0]
               h1 = bme1.readHumidity();
 80817f8:	4620      	mov	r0, r4
 80817fa:	f004 f88a 	bl	8085912 <_ZN9CE_BME28012readHumidityEv>
 80817fe:	4d6a      	ldr	r5, [pc, #424]	; (80819a8 <loop+0x330>)
               p1 = bme1.readPressure()/100.0;
 8081800:	4e6a      	ldr	r6, [pc, #424]	; (80819ac <loop+0x334>)
               h1 = bme1.readHumidity();
 8081802:	6028      	str	r0, [r5, #0]
               p1 = bme1.readPressure()/100.0;
 8081804:	4620      	mov	r0, r4
 8081806:	f003 ffb3 	bl	8085770 <_ZN9CE_BME28012readPressureEv>
 808180a:	4649      	mov	r1, r9
 808180c:	f008 fcec 	bl	808a1e8 <__aeabi_fdiv>
 8081810:	6030      	str	r0, [r6, #0]
               delay(200);
 8081812:	20c8      	movs	r0, #200	; 0xc8
 8081814:	f005 fe9f 	bl	8087556 <delay>
        while(i<2)  // read 2 times to be sure of a good read
 8081818:	f1b8 0f01 	cmp.w	r8, #1
 808181c:	f040 81f2 	bne.w	8081c04 <loop+0x58c>
          if (isnan(p1) || p1<1.0 )
 8081820:	6834      	ldr	r4, [r6, #0]
 8081822:	4621      	mov	r1, r4
 8081824:	4620      	mov	r0, r4
 8081826:	f008 fdf1 	bl	808a40c <__aeabi_fcmpun>
 808182a:	b928      	cbnz	r0, 8081838 <loop+0x1c0>
 808182c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8081830:	4620      	mov	r0, r4
 8081832:	f008 fdc3 	bl	808a3bc <__aeabi_fcmplt>
 8081836:	b118      	cbz	r0, 8081840 <loop+0x1c8>
            { h1 = -99.1; t1 = -99.1; p1 = -99.1;  }   // -99.1 is flag for bme read error
 8081838:	4b5d      	ldr	r3, [pc, #372]	; (80819b0 <loop+0x338>)
 808183a:	602b      	str	r3, [r5, #0]
 808183c:	603b      	str	r3, [r7, #0]
 808183e:	6033      	str	r3, [r6, #0]
              t2 = bme2.readTemperature();
 8081840:	485c      	ldr	r0, [pc, #368]	; (80819b4 <loop+0x33c>)
 8081842:	f003 ff6b 	bl	808571c <_ZN9CE_BME28015readTemperatureEv>
 8081846:	4c5c      	ldr	r4, [pc, #368]	; (80819b8 <loop+0x340>)
              p2 = bme2.readPressure()/100.0;
 8081848:	4d5c      	ldr	r5, [pc, #368]	; (80819bc <loop+0x344>)
              t2 = bme2.readTemperature();
 808184a:	6020      	str	r0, [r4, #0]
              p2 = bme2.readPressure()/100.0;
 808184c:	4859      	ldr	r0, [pc, #356]	; (80819b4 <loop+0x33c>)
 808184e:	f003 ff8f 	bl	8085770 <_ZN9CE_BME28012readPressureEv>
 8081852:	494a      	ldr	r1, [pc, #296]	; (808197c <loop+0x304>)
 8081854:	f008 fcc8 	bl	808a1e8 <__aeabi_fdiv>
 8081858:	6028      	str	r0, [r5, #0]
              delay(200);
 808185a:	20c8      	movs	r0, #200	; 0xc8
 808185c:	f005 fe7b 	bl	8087556 <delay>
              t2 = bme2.readTemperature();
 8081860:	4854      	ldr	r0, [pc, #336]	; (80819b4 <loop+0x33c>)
 8081862:	f003 ff5b 	bl	808571c <_ZN9CE_BME28015readTemperatureEv>
 8081866:	6020      	str	r0, [r4, #0]
              p2 = bme2.readPressure()/100.0;
 8081868:	4852      	ldr	r0, [pc, #328]	; (80819b4 <loop+0x33c>)
 808186a:	f003 ff81 	bl	8085770 <_ZN9CE_BME28012readPressureEv>
 808186e:	4943      	ldr	r1, [pc, #268]	; (808197c <loop+0x304>)
 8081870:	f008 fcba 	bl	808a1e8 <__aeabi_fdiv>
 8081874:	6028      	str	r0, [r5, #0]
              delay(200);
 8081876:	20c8      	movs	r0, #200	; 0xc8
 8081878:	f005 fe6d 	bl	8087556 <delay>
       	    if (isnan(p1) || p2<1.0 )
 808187c:	6831      	ldr	r1, [r6, #0]
 808187e:	4608      	mov	r0, r1
 8081880:	f008 fdc4 	bl	808a40c <__aeabi_fcmpun>
 8081884:	b928      	cbnz	r0, 8081892 <loop+0x21a>
 8081886:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 808188a:	6828      	ldr	r0, [r5, #0]
 808188c:	f008 fd96 	bl	808a3bc <__aeabi_fcmplt>
 8081890:	b110      	cbz	r0, 8081898 <loop+0x220>
              {  t2 = -99.1; p2 = -99.1;  }    // -99.1 is flag for bme read error
 8081892:	4b47      	ldr	r3, [pc, #284]	; (80819b0 <loop+0x338>)
 8081894:	6023      	str	r3, [r4, #0]
 8081896:	602b      	str	r3, [r5, #0]
        t1 = t1+t1_offset;
 8081898:	6838      	ldr	r0, [r7, #0]
 808189a:	f007 ff81 	bl	80897a0 <__aeabi_f2d>
 808189e:	a32e      	add	r3, pc, #184	; (adr r3, 8081958 <loop+0x2e0>)
 80818a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80818a4:	f007 fe1c 	bl	80894e0 <__aeabi_dsub>
 80818a8:	f008 fa8c 	bl	8089dc4 <__aeabi_d2f>
 80818ac:	4605      	mov	r5, r0
 80818ae:	6038      	str	r0, [r7, #0]
        t2 = t2+t2_offset;
 80818b0:	6820      	ldr	r0, [r4, #0]
 80818b2:	f007 ff75 	bl	80897a0 <__aeabi_f2d>
 80818b6:	a32a      	add	r3, pc, #168	; (adr r3, 8081960 <loop+0x2e8>)
 80818b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80818bc:	f007 fe12 	bl	80894e4 <__adddf3>
 80818c0:	f008 fa80 	bl	8089dc4 <__aeabi_d2f>
    if (t1 < -10 || t1 > 40) 
 80818c4:	493e      	ldr	r1, [pc, #248]	; (80819c0 <loop+0x348>)
        t2 = t2+t2_offset;
 80818c6:	6020      	str	r0, [r4, #0]
    if (t1 < -10 || t1 > 40) 
 80818c8:	4628      	mov	r0, r5
 80818ca:	f008 fd77 	bl	808a3bc <__aeabi_fcmplt>
 80818ce:	b920      	cbnz	r0, 80818da <loop+0x262>
 80818d0:	4628      	mov	r0, r5
 80818d2:	493c      	ldr	r1, [pc, #240]	; (80819c4 <loop+0x34c>)
 80818d4:	f008 fd90 	bl	808a3f8 <__aeabi_fcmpgt>
 80818d8:	b148      	cbz	r0, 80818ee <loop+0x276>
        PMIC _pmic; // instantiate an object
 80818da:	2100      	movs	r1, #0
 80818dc:	a81e      	add	r0, sp, #120	; 0x78
 80818de:	f004 fda8 	bl	8086432 <_ZN4PMICC1Eb>
        _pmic.disableCharging();  //stops charging which carries on into sleep
 80818e2:	a81e      	add	r0, sp, #120	; 0x78
 80818e4:	f004 fe68 	bl	80865b8 <_ZN4PMIC15disableChargingEv>
        PMIC _pmic; // instantiate an object
 80818e8:	a81e      	add	r0, sp, #120	; 0x78
 80818ea:	f004 fdb1 	bl	8086450 <_ZN4PMICD1Ev>
    Sp_C = getSpC() * k;
 80818ee:	f7fe ff3f 	bl	8080770 <_Z6getSpCv>
 80818f2:	4935      	ldr	r1, [pc, #212]	; (80819c8 <loop+0x350>)
 80818f4:	f008 fbc4 	bl	808a080 <__aeabi_fmul>
 80818f8:	4d34      	ldr	r5, [pc, #208]	; (80819cc <loop+0x354>)
    Avolts = getAvolts();
 80818fa:	4e35      	ldr	r6, [pc, #212]	; (80819d0 <loop+0x358>)
    Sp_C = getSpC() * k;
 80818fc:	6028      	str	r0, [r5, #0]
    Avolts = getAvolts();
 80818fe:	f7fe ffcf 	bl	80808a0 <_Z9getAvoltsv>
    digitalWrite(D3, LOW);	 // for the digital sensors, BME280s  and camera
 8081902:	2100      	movs	r1, #0
    Avolts = getAvolts();
 8081904:	6030      	str	r0, [r6, #0]
    digitalWrite(D3, LOW);	 // for the digital sensors, BME280s  and camera
 8081906:	2003      	movs	r0, #3
 8081908:	f007 fb09 	bl	8088f1e <digitalWrite>
    digitalWrite(B1, LOW);     //for the TDS-Sp.C sensor  
 808190c:	2100      	movs	r1, #0
 808190e:	2019      	movs	r0, #25
 8081910:	f007 fb05 	bl	8088f1e <digitalWrite>
  char Rain[] = "Rain";
 8081914:	4b2f      	ldr	r3, [pc, #188]	; (80819d4 <loop+0x35c>)
  char AirT[] = "Air-Temp_C";
 8081916:	4a30      	ldr	r2, [pc, #192]	; (80819d8 <loop+0x360>)
  char Rain[] = "Rain";
 8081918:	6818      	ldr	r0, [r3, #0]
 808191a:	791b      	ldrb	r3, [r3, #4]
  char AirT[] = "Air-Temp_C";
 808191c:	6851      	ldr	r1, [r2, #4]
  char Rain[] = "Rain";
 808191e:	9016      	str	r0, [sp, #88]	; 0x58
  char AirT[] = "Air-Temp_C";
 8081920:	6810      	ldr	r0, [r2, #0]
  char Rain[] = "Rain";
 8081922:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  char AirT[] = "Air-Temp_C";
 8081926:	ab1a      	add	r3, sp, #104	; 0x68
 8081928:	c303      	stmia	r3!, {r0, r1}
 808192a:	8911      	ldrh	r1, [r2, #8]
 808192c:	7a92      	ldrb	r2, [r2, #10]
 808192e:	8019      	strh	r1, [r3, #0]
 8081930:	709a      	strb	r2, [r3, #2]
  char Humid[] = "Humidity_%";
 8081932:	4a2a      	ldr	r2, [pc, #168]	; (80819dc <loop+0x364>)
 8081934:	ab1e      	add	r3, sp, #120	; 0x78
 8081936:	6810      	ldr	r0, [r2, #0]
 8081938:	6851      	ldr	r1, [r2, #4]
  depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 808193a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80819bc <loop+0x344>
  char Humid[] = "Humidity_%";
 808193e:	c303      	stmia	r3!, {r0, r1}
 8081940:	e04e      	b.n	80819e0 <loop+0x368>
 8081942:	bf00      	nop
 8081944:	f3af 8000 	nop.w
 8081948:	9999999a 	.word	0x9999999a
 808194c:	40119999 	.word	0x40119999
 8081950:	c6a7ef9e 	.word	0xc6a7ef9e
 8081954:	4011374b 	.word	0x4011374b
 8081958:	66666666 	.word	0x66666666
 808195c:	3fe66666 	.word	0x3fe66666
 8081960:	9999999a 	.word	0x9999999a
 8081964:	3fa99999 	.word	0x3fa99999
 8081968:	200008dc 	.word	0x200008dc
 808196c:	0808c8d2 	.word	0x0808c8d2
 8081970:	200008e0 	.word	0x200008e0
 8081974:	20000248 	.word	0x20000248
 8081978:	0808c8da 	.word	0x0808c8da
 808197c:	42c80000 	.word	0x42c80000
 8081980:	3ff00000 	.word	0x3ff00000
 8081984:	40590000 	.word	0x40590000
 8081988:	0808c904 	.word	0x0808c904
 808198c:	400c0000 	.word	0x400c0000
 8081990:	0808c918 	.word	0x0808c918
 8081994:	20000018 	.word	0x20000018
 8081998:	20000000 	.word	0x20000000
 808199c:	200002f8 	.word	0x200002f8
 80819a0:	20000448 	.word	0x20000448
 80819a4:	2000002c 	.word	0x2000002c
 80819a8:	20000010 	.word	0x20000010
 80819ac:	2000001c 	.word	0x2000001c
 80819b0:	c2c63333 	.word	0xc2c63333
 80819b4:	20000328 	.word	0x20000328
 80819b8:	20000030 	.word	0x20000030
 80819bc:	20000020 	.word	0x20000020
 80819c0:	c1200000 	.word	0xc1200000
 80819c4:	42200000 	.word	0x42200000
 80819c8:	3fa00000 	.word	0x3fa00000
 80819cc:	2000024c 	.word	0x2000024c
 80819d0:	20000244 	.word	0x20000244
 80819d4:	0808c9f5 	.word	0x0808c9f5
 80819d8:	0808c9fa 	.word	0x0808c9fa
 80819dc:	0808ca05 	.word	0x0808ca05
  depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 80819e0:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8081c94 <loop+0x61c>
  char Humid[] = "Humidity_%";
 80819e4:	8911      	ldrh	r1, [r2, #8]
 80819e6:	7a92      	ldrb	r2, [r2, #10]
 80819e8:	8019      	strh	r1, [r3, #0]
 80819ea:	709a      	strb	r2, [r3, #2]
  depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 80819ec:	f8d8 1000 	ldr.w	r1, [r8]
 80819f0:	f8d9 0000 	ldr.w	r0, [r9]
 80819f4:	f008 fa3a 	bl	8089e6c <__aeabi_fsub>
 80819f8:	f007 fed2 	bl	80897a0 <__aeabi_f2d>
 80819fc:	a38a      	add	r3, pc, #552	; (adr r3, 8081c28 <loop+0x5b0>)
 80819fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081a02:	f007 ff25 	bl	8089850 <__aeabi_dmul>
 8081a06:	f008 f9dd 	bl	8089dc4 <__aeabi_d2f>
 8081a0a:	4f89      	ldr	r7, [pc, #548]	; (8081c30 <loop+0x5b8>)
  ubidots.add(Rain, rain);
 8081a0c:	f8df a288 	ldr.w	sl, [pc, #648]	; 8081c98 <loop+0x620>
	ubidots.add(Humid, h1);
 8081a10:	f8df b288 	ldr.w	fp, [pc, #648]	; 8081c9c <loop+0x624>
  ubidots.add(Rain, rain);
 8081a14:	f8da 2000 	ldr.w	r2, [sl]
  depth = (p2-p1)*0.40147;  // Hectopascals (hPa) to	Inches Of Water (inH2O)*
 8081a18:	6038      	str	r0, [r7, #0]
  ubidots.add(Rain, rain);
 8081a1a:	a916      	add	r1, sp, #88	; 0x58
 8081a1c:	4885      	ldr	r0, [pc, #532]	; (8081c34 <loop+0x5bc>)
 8081a1e:	f002 ff47 	bl	80848b0 <_ZN7Ubidots3addEPcf>
	ubidots.add(Humid, h1);
 8081a22:	f8db 2000 	ldr.w	r2, [fp]
 8081a26:	4883      	ldr	r0, [pc, #524]	; (8081c34 <loop+0x5bc>)
 8081a28:	a91e      	add	r1, sp, #120	; 0x78
 8081a2a:	f002 ff41 	bl	80848b0 <_ZN7Ubidots3addEPcf>
	ubidots.add(AirT, t1);
 8081a2e:	4b82      	ldr	r3, [pc, #520]	; (8081c38 <loop+0x5c0>)
 8081a30:	4880      	ldr	r0, [pc, #512]	; (8081c34 <loop+0x5bc>)
 8081a32:	681a      	ldr	r2, [r3, #0]
 8081a34:	a91a      	add	r1, sp, #104	; 0x68
 8081a36:	f002 ff3b 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("Pressure_hPA", p1);
 8081a3a:	f8d8 2000 	ldr.w	r2, [r8]
 8081a3e:	497f      	ldr	r1, [pc, #508]	; (8081c3c <loop+0x5c4>)
 8081a40:	487c      	ldr	r0, [pc, #496]	; (8081c34 <loop+0x5bc>)
 8081a42:	f002 ff35 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O-Temp_C", t2);
 8081a46:	4a7e      	ldr	r2, [pc, #504]	; (8081c40 <loop+0x5c8>)
 8081a48:	497e      	ldr	r1, [pc, #504]	; (8081c44 <loop+0x5cc>)
 8081a4a:	6812      	ldr	r2, [r2, #0]
 8081a4c:	4879      	ldr	r0, [pc, #484]	; (8081c34 <loop+0x5bc>)
 8081a4e:	f002 ff2f 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("H2O_hPA", p2);
 8081a52:	f8d9 2000 	ldr.w	r2, [r9]
 8081a56:	497c      	ldr	r1, [pc, #496]	; (8081c48 <loop+0x5d0>)
 8081a58:	4876      	ldr	r0, [pc, #472]	; (8081c34 <loop+0x5bc>)
 8081a5a:	f002 ff29 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("Depth_in", depth);
 8081a5e:	683a      	ldr	r2, [r7, #0]
 8081a60:	497a      	ldr	r1, [pc, #488]	; (8081c4c <loop+0x5d4>)
 8081a62:	4874      	ldr	r0, [pc, #464]	; (8081c34 <loop+0x5bc>)
 8081a64:	f002 ff24 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("Volts", volts);
 8081a68:	4b79      	ldr	r3, [pc, #484]	; (8081c50 <loop+0x5d8>)
  ubidots.add("SOC", SoC);
 8081a6a:	4c7a      	ldr	r4, [pc, #488]	; (8081c54 <loop+0x5dc>)
  ubidots.add("Volts", volts);
 8081a6c:	681a      	ldr	r2, [r3, #0]
 8081a6e:	497a      	ldr	r1, [pc, #488]	; (8081c58 <loop+0x5e0>)
 8081a70:	4870      	ldr	r0, [pc, #448]	; (8081c34 <loop+0x5bc>)
 8081a72:	f002 ff1d 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("SOC", SoC);
 8081a76:	6822      	ldr	r2, [r4, #0]
 8081a78:	4978      	ldr	r1, [pc, #480]	; (8081c5c <loop+0x5e4>)
 8081a7a:	486e      	ldr	r0, [pc, #440]	; (8081c34 <loop+0x5bc>)
 8081a7c:	f002 ff18 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("Sp_Cond", Sp_C);
 8081a80:	682a      	ldr	r2, [r5, #0]
 8081a82:	4977      	ldr	r1, [pc, #476]	; (8081c60 <loop+0x5e8>)
 8081a84:	486b      	ldr	r0, [pc, #428]	; (8081c34 <loop+0x5bc>)
 8081a86:	f002 ff13 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  ubidots.add("A.volts", Avolts);
 8081a8a:	6832      	ldr	r2, [r6, #0]
 8081a8c:	4975      	ldr	r1, [pc, #468]	; (8081c64 <loop+0x5ec>)
 8081a8e:	4869      	ldr	r0, [pc, #420]	; (8081c34 <loop+0x5bc>)
 8081a90:	f002 ff0e 	bl	80848b0 <_ZN7Ubidots3addEPcf>
  snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %06.1f, %06.1f, %05.2f, %04.2f",
 8081a94:	4b6e      	ldr	r3, [pc, #440]	; (8081c50 <loop+0x5d8>)
 8081a96:	6818      	ldr	r0, [r3, #0]
 8081a98:	f007 fe82 	bl	80897a0 <__aeabi_f2d>
 8081a9c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8081aa0:	6820      	ldr	r0, [r4, #0]
 8081aa2:	f007 fe7d 	bl	80897a0 <__aeabi_f2d>
 8081aa6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8081aaa:	f8d9 0000 	ldr.w	r0, [r9]
 8081aae:	f007 fe77 	bl	80897a0 <__aeabi_f2d>
 8081ab2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8081ab6:	f8d8 0000 	ldr.w	r0, [r8]
 8081aba:	f007 fe71 	bl	80897a0 <__aeabi_f2d>
 8081abe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8081ac2:	f8db 0000 	ldr.w	r0, [fp]
 8081ac6:	f007 fe6b 	bl	80897a0 <__aeabi_f2d>
 8081aca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8081ace:	6838      	ldr	r0, [r7, #0]
 8081ad0:	f007 fe66 	bl	80897a0 <__aeabi_f2d>
 8081ad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8081ad8:	f8da 0000 	ldr.w	r0, [sl]
 8081adc:	f007 fe60 	bl	80897a0 <__aeabi_f2d>
 8081ae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8081ae4:	6830      	ldr	r0, [r6, #0]
 8081ae6:	f007 fe5b 	bl	80897a0 <__aeabi_f2d>
 8081aea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8081aee:	6828      	ldr	r0, [r5, #0]
 8081af0:	f007 fe56 	bl	80897a0 <__aeabi_f2d>
 8081af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8081af8:	4a51      	ldr	r2, [pc, #324]	; (8081c40 <loop+0x5c8>)
    if(usbOn)  {Serial.println("logged following data to SD-card"); waitMS(100);}
 8081afa:	4d5b      	ldr	r5, [pc, #364]	; (8081c68 <loop+0x5f0>)
  snprintf(_json, sizeof(_json), ", %05.2f, %05.2f, %06.1f, %05.3f, %04.0f, %06.3f, %05.2f, %06.1f, %06.1f, %05.2f, %04.2f",
 8081afc:	6810      	ldr	r0, [r2, #0]
 8081afe:	f007 fe4f 	bl	80897a0 <__aeabi_f2d>
 8081b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8081b06:	4b4c      	ldr	r3, [pc, #304]	; (8081c38 <loop+0x5c0>)
 8081b08:	6818      	ldr	r0, [r3, #0]
 8081b0a:	f007 fe49 	bl	80897a0 <__aeabi_f2d>
 8081b0e:	4a57      	ldr	r2, [pc, #348]	; (8081c6c <loop+0x5f4>)
 8081b10:	e9cd 0100 	strd	r0, r1, [sp]
 8081b14:	2196      	movs	r1, #150	; 0x96
 8081b16:	4856      	ldr	r0, [pc, #344]	; (8081c70 <loop+0x5f8>)
 8081b18:	f004 fc5c 	bl	80863d4 <snprintf>
  logData(_json);
 8081b1c:	4854      	ldr	r0, [pc, #336]	; (8081c70 <loop+0x5f8>)
 8081b1e:	f7ff f823 	bl	8080b68 <_Z7logDataPc>
    if(usbOn)  {Serial.println("logged following data to SD-card"); waitMS(100);}
 8081b22:	682a      	ldr	r2, [r5, #0]
 8081b24:	b18a      	cbz	r2, 8081b4a <loop+0x4d2>
 8081b26:	f006 fcfd 	bl	8088524 <_Z16_fetch_usbserialv>
 8081b2a:	4952      	ldr	r1, [pc, #328]	; (8081c74 <loop+0x5fc>)
 8081b2c:	f005 faa3 	bl	8087076 <_ZN5Print7printlnEPKc>
 8081b30:	2064      	movs	r0, #100	; 0x64
 8081b32:	f7fe fee3 	bl	80808fc <_Z6waitMSm>
    if(usbOn) {Serial.println(_json); waitMS(100);}
 8081b36:	682b      	ldr	r3, [r5, #0]
 8081b38:	b13b      	cbz	r3, 8081b4a <loop+0x4d2>
 8081b3a:	f006 fcf3 	bl	8088524 <_Z16_fetch_usbserialv>
 8081b3e:	494c      	ldr	r1, [pc, #304]	; (8081c70 <loop+0x5f8>)
 8081b40:	f005 fa99 	bl	8087076 <_ZN5Print7printlnEPKc>
 8081b44:	2064      	movs	r0, #100	; 0x64
 8081b46:	f7fe fed9 	bl	80808fc <_Z6waitMSm>
    waitSec(0.5);
 8081b4a:	2000      	movs	r0, #0
 8081b4c:	f7fe fee7 	bl	808091e <_Z7waitSecm>
  close_SD();
 8081b50:	f7ff fb16 	bl	8081180 <_Z8close_SDv>
if ( (SoC > 40.0) && ( (Time.hour()==10) || (Time.hour()==11) ||
 8081b54:	4948      	ldr	r1, [pc, #288]	; (8081c78 <loop+0x600>)
 8081b56:	6820      	ldr	r0, [r4, #0]
 8081b58:	f008 fc4e 	bl	808a3f8 <__aeabi_fcmpgt>
 8081b5c:	b198      	cbz	r0, 8081b86 <loop+0x50e>
 8081b5e:	f005 fc71 	bl	8087444 <_ZN9TimeClass4hourEv>
 8081b62:	280a      	cmp	r0, #10
 8081b64:	d151      	bne.n	8081c0a <loop+0x592>
    digitalWrite(B2, HIGH);	//   turn on ground for the camera
 8081b66:	2101      	movs	r1, #1
 8081b68:	201a      	movs	r0, #26
 8081b6a:	f007 f9d8 	bl	8088f1e <digitalWrite>
    waitSec(2);
 8081b6e:	2002      	movs	r0, #2
 8081b70:	f7fe fed5 	bl	808091e <_Z7waitSecm>
    takePhoto(); 
 8081b74:	f7ff f828 	bl	8080bc8 <_Z9takePhotov>
    waitSec(1);
 8081b78:	2001      	movs	r0, #1
 8081b7a:	f7fe fed0 	bl	808091e <_Z7waitSecm>
    digitalWrite(B2, LOW);     //disconnect ground for the camera
 8081b7e:	2100      	movs	r1, #0
 8081b80:	201a      	movs	r0, #26
 8081b82:	f007 f9cc 	bl	8088f1e <digitalWrite>
if (SoC >90)   // if enough charge connect and upload to Particle and Ubidots, set to 50
 8081b86:	493d      	ldr	r1, [pc, #244]	; (8081c7c <loop+0x604>)
 8081b88:	6820      	ldr	r0, [r4, #0]
 8081b8a:	f008 fc35 	bl	808a3f8 <__aeabi_fcmpgt>
 8081b8e:	b128      	cbz	r0, 8081b9c <loop+0x524>
  { connectToWeb();
 8081b90:	f7ff fb84 	bl	808129c <_Z12connectToWebv>
    uploadToUbi();
 8081b94:	f7ff f9f0 	bl	8080f78 <_Z11uploadToUbiv>
    uploadToParticle();
 8081b98:	f7ff fc66 	bl	8081468 <_Z16uploadToParticlev>
    if(usbOn) {Serial.println("sleeping " + String(minutes)); waitMS(100);}
 8081b9c:	682b      	ldr	r3, [r5, #0]
 8081b9e:	4d38      	ldr	r5, [pc, #224]	; (8081c80 <loop+0x608>)
 8081ba0:	b1e3      	cbz	r3, 8081bdc <loop+0x564>
 8081ba2:	f006 fcbf 	bl	8088524 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8081ba6:	4937      	ldr	r1, [pc, #220]	; (8081c84 <loop+0x60c>)
 8081ba8:	4604      	mov	r4, r0
 8081baa:	a81e      	add	r0, sp, #120	; 0x78
 8081bac:	f005 f968 	bl	8086e80 <_ZN6StringC1EPKc>
 8081bb0:	220a      	movs	r2, #10
 8081bb2:	6829      	ldr	r1, [r5, #0]
 8081bb4:	a81a      	add	r0, sp, #104	; 0x68
 8081bb6:	f005 f9c6 	bl	8086f46 <_ZN6StringC1Eih>
 8081bba:	a91a      	add	r1, sp, #104	; 0x68
 8081bbc:	a81e      	add	r0, sp, #120	; 0x78
 8081bbe:	f005 f9ec 	bl	8086f9a <_ZplRK15StringSumHelperRK6String>
 8081bc2:	6801      	ldr	r1, [r0, #0]
 8081bc4:	4620      	mov	r0, r4
 8081bc6:	f005 fa56 	bl	8087076 <_ZN5Print7printlnEPKc>
 8081bca:	a81a      	add	r0, sp, #104	; 0x68
 8081bcc:	f005 f90e 	bl	8086dec <_ZN6StringD1Ev>
class StringSumHelper : public String
 8081bd0:	a81e      	add	r0, sp, #120	; 0x78
 8081bd2:	f005 f90b 	bl	8086dec <_ZN6StringD1Ev>
 8081bd6:	2064      	movs	r0, #100	; 0x64
 8081bd8:	f7fe fe90 	bl	80808fc <_Z6waitMSm>
   waitSec(seconds);  //wait seconds. seconds is set at beginning to 2 or else by call 
 8081bdc:	4b2a      	ldr	r3, [pc, #168]	; (8081c88 <loop+0x610>)
 8081bde:	6818      	ldr	r0, [r3, #0]
 8081be0:	f7fe fe9d 	bl	808091e <_Z7waitSecm>
    System.sleep(SLEEP_MODE_DEEP, sleepInterval * minutes);   //keeps SOC meter running
 8081be4:	4b29      	ldr	r3, [pc, #164]	; (8081c8c <loop+0x614>)
 8081be6:	6829      	ldr	r1, [r5, #0]
 8081be8:	681a      	ldr	r2, [r3, #0]
 8081bea:	4b29      	ldr	r3, [pc, #164]	; (8081c90 <loop+0x618>)
 8081bec:	434a      	muls	r2, r1
 8081bee:	681b      	ldr	r3, [r3, #0]
 8081bf0:	2101      	movs	r1, #1
 8081bf2:	a81e      	add	r0, sp, #120	; 0x78
 8081bf4:	f004 fe1e 	bl	8086834 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  FuelGauge fuel; // Initalize the Fuel Gauge so we can call the fuel gauge functions below.
 8081bf8:	a818      	add	r0, sp, #96	; 0x60
 8081bfa:	f005 ff82 	bl	8087b02 <_ZN9FuelGaugeD1Ev>
} // end loop()
 8081bfe:	b023      	add	sp, #140	; 0x8c
 8081c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081c04:	f04f 0801 	mov.w	r8, #1
 8081c08:	e5f2      	b.n	80817f0 <loop+0x178>
if ( (SoC > 40.0) && ( (Time.hour()==10) || (Time.hour()==11) ||
 8081c0a:	f005 fc1b 	bl	8087444 <_ZN9TimeClass4hourEv>
 8081c0e:	280b      	cmp	r0, #11
 8081c10:	d0a9      	beq.n	8081b66 <loop+0x4ee>
                       (Time.hour()==14) || (Time.hour()==15) ) )
 8081c12:	f005 fc17 	bl	8087444 <_ZN9TimeClass4hourEv>
if ( (SoC > 40.0) && ( (Time.hour()==10) || (Time.hour()==11) ||
 8081c16:	280e      	cmp	r0, #14
 8081c18:	d0a5      	beq.n	8081b66 <loop+0x4ee>
                       (Time.hour()==14) || (Time.hour()==15) ) )
 8081c1a:	f005 fc13 	bl	8087444 <_ZN9TimeClass4hourEv>
 8081c1e:	280f      	cmp	r0, #15
 8081c20:	d1b1      	bne.n	8081b86 <loop+0x50e>
 8081c22:	e7a0      	b.n	8081b66 <loop+0x4ee>
 8081c24:	f3af 8000 	nop.w
 8081c28:	3a14cec4 	.word	0x3a14cec4
 8081c2c:	3fd9b1af 	.word	0x3fd9b1af
 8081c30:	2000000c 	.word	0x2000000c
 8081c34:	200008d0 	.word	0x200008d0
 8081c38:	2000002c 	.word	0x2000002c
 8081c3c:	0808c92e 	.word	0x0808c92e
 8081c40:	20000030 	.word	0x20000030
 8081c44:	0808c93b 	.word	0x0808c93b
 8081c48:	0808c946 	.word	0x0808c946
 8081c4c:	0808c94e 	.word	0x0808c94e
 8081c50:	200008e0 	.word	0x200008e0
 8081c54:	20000248 	.word	0x20000248
 8081c58:	0808c957 	.word	0x0808c957
 8081c5c:	0808c95d 	.word	0x0808c95d
 8081c60:	0808c961 	.word	0x0808c961
 8081c64:	0808c969 	.word	0x0808c969
 8081c68:	200008dc 	.word	0x200008dc
 8081c6c:	0808c971 	.word	0x0808c971
 8081c70:	20000261 	.word	0x20000261
 8081c74:	0808c9ca 	.word	0x0808c9ca
 8081c78:	42200000 	.word	0x42200000
 8081c7c:	42b40000 	.word	0x42b40000
 8081c80:	20000018 	.word	0x20000018
 8081c84:	0808c9eb 	.word	0x0808c9eb
 8081c88:	20000024 	.word	0x20000024
 8081c8c:	20000028 	.word	0x20000028
 8081c90:	2000025c 	.word	0x2000025c
 8081c94:	2000001c 	.word	0x2000001c
 8081c98:	20000448 	.word	0x20000448
 8081c9c:	20000010 	.word	0x20000010

08081ca0 <setup>:
{
 8081ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
 8081ca2:	f006 fc3f 	bl	8088524 <_Z16_fetch_usbserialv>
 8081ca6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081caa:	f006 fc1d 	bl	80884e8 <_ZN9USBSerial5beginEl>
   Serial.println();
 8081cae:	f006 fc39 	bl	8088524 <_Z16_fetch_usbserialv>
 8081cb2:	f005 f9d4 	bl	808705e <_ZN5Print7printlnEv>
   waitSec(1.0);
 8081cb6:	2001      	movs	r0, #1
 8081cb8:	f7fe fe31 	bl	808091e <_Z7waitSecm>
  wd = new ApplicationWatchdog(10min, watchdogHandler, 1536);
 8081cbc:	2018      	movs	r0, #24
 8081cbe:	f7fe fa04 	bl	80800ca <_Znwj>
 8081cc2:	4604      	mov	r4, r0
 8081cc4:	b128      	cbz	r0, 8081cd2 <setup+0x32>
    ApplicationWatchdog(std::chrono::milliseconds ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) : ApplicationWatchdog(ms.count(), fn, stack_size) {}
 8081cc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8081cca:	4a3a      	ldr	r2, [pc, #232]	; (8081db4 <setup+0x114>)
 8081ccc:	493a      	ldr	r1, [pc, #232]	; (8081db8 <setup+0x118>)
 8081cce:	f7fe fb1d 	bl	808030c <_ZN19ApplicationWatchdogC1EjPFvvEj>
 8081cd2:	4b3a      	ldr	r3, [pc, #232]	; (8081dbc <setup+0x11c>)
    m_dateTime = dateTime;
 8081cd4:	4a3a      	ldr	r2, [pc, #232]	; (8081dc0 <setup+0x120>)
 8081cd6:	601c      	str	r4, [r3, #0]
 8081cd8:	4b3a      	ldr	r3, [pc, #232]	; (8081dc4 <setup+0x124>)
  pinMode(ledPin, OUTPUT);          // Sets pin as output
 8081cda:	2101      	movs	r1, #1
 8081cdc:	601a      	str	r2, [r3, #0]
 8081cde:	4b3a      	ldr	r3, [pc, #232]	; (8081dc8 <setup+0x128>)
 8081ce0:	8818      	ldrh	r0, [r3, #0]
 8081ce2:	f007 f90b 	bl	8088efc <pinMode>
	pinMode(D3, OUTPUT);     // power for the all digital sensors
 8081ce6:	2101      	movs	r1, #1
 8081ce8:	2003      	movs	r0, #3
 8081cea:	f007 f907 	bl	8088efc <pinMode>
	digitalWrite(D3, HIGH);
 8081cee:	2101      	movs	r1, #1
 8081cf0:	2003      	movs	r0, #3
 8081cf2:	f007 f914 	bl	8088f1e <digitalWrite>
	pinMode(D5, OUTPUT);     // power for SD-card and camera
 8081cf6:	2101      	movs	r1, #1
 8081cf8:	2005      	movs	r0, #5
 8081cfa:	f007 f8ff 	bl	8088efc <pinMode>
	digitalWrite(D5, HIGH);
 8081cfe:	2101      	movs	r1, #1
 8081d00:	2005      	movs	r0, #5
 8081d02:	f007 f90c 	bl	8088f1e <digitalWrite>
	pinMode(B0, OUTPUT);     // power for analog rain sensor
 8081d06:	2101      	movs	r1, #1
 8081d08:	2018      	movs	r0, #24
 8081d0a:	f007 f8f7 	bl	8088efc <pinMode>
	digitalWrite(B0, HIGH);	//
 8081d0e:	2101      	movs	r1, #1
 8081d10:	2018      	movs	r0, #24
 8081d12:	f007 f904 	bl	8088f1e <digitalWrite>
  pinMode(B1, OUTPUT);     // power for analog TDS sensor
 8081d16:	2101      	movs	r1, #1
 8081d18:	2019      	movs	r0, #25
 8081d1a:	f007 f8ef 	bl	8088efc <pinMode>
  digitalWrite(B1, HIGH);	//
 8081d1e:	2101      	movs	r1, #1
 8081d20:	2019      	movs	r0, #25
 8081d22:	f007 f8fc 	bl	8088f1e <digitalWrite>
  pinMode(B2, OUTPUT);     // set high to trigger 3V3 grounding for camera, set high later
 8081d26:	2101      	movs	r1, #1
 8081d28:	201a      	movs	r0, #26
 8081d2a:	f007 f8e7 	bl	8088efc <pinMode>
  digitalWrite(B2, LOW);	//
 8081d2e:	2100      	movs	r1, #0
 8081d30:	201a      	movs	r0, #26
 8081d32:	f007 f8f4 	bl	8088f1e <digitalWrite>
  waitSec(0.1); // delay to give time for power to turn on, don't know if this is needed   
 8081d36:	2000      	movs	r0, #0
 8081d38:	f7fe fdf1 	bl	808091e <_Z7waitSecm>
  customPower();
 8081d3c:	f7ff f8e6 	bl	8080f0c <_Z11customPowerv>
    if (!bme1.begin(0x77)) // the air sensor BME280 for temp, humidity, pressure
 8081d40:	2177      	movs	r1, #119	; 0x77
 8081d42:	4822      	ldr	r0, [pc, #136]	; (8081dcc <setup+0x12c>)
 8081d44:	f003 fccc 	bl	80856e0 <_ZN9CE_BME2805beginEh>
 8081d48:	b960      	cbnz	r0, 8081d64 <setup+0xc4>
 8081d4a:	4b21      	ldr	r3, [pc, #132]	; (8081dd0 <setup+0x130>)
 8081d4c:	a802      	add	r0, sp, #8
 8081d4e:	781b      	ldrb	r3, [r3, #0]
 8081d50:	4a20      	ldr	r2, [pc, #128]	; (8081dd4 <setup+0x134>)
 8081d52:	f88d 3000 	strb.w	r3, [sp]
 8081d56:	4920      	ldr	r1, [pc, #128]	; (8081dd8 <setup+0x138>)
 8081d58:	233c      	movs	r3, #60	; 0x3c
 8081d5a:	f006 f9a1 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081d5e:	a803      	add	r0, sp, #12
 8081d60:	f7ff f9f8 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!bme2.begin(0x76))  // the water depth sensor in oil made from a BME280. Temp and pressure
 8081d64:	2176      	movs	r1, #118	; 0x76
 8081d66:	481d      	ldr	r0, [pc, #116]	; (8081ddc <setup+0x13c>)
 8081d68:	f003 fcba 	bl	80856e0 <_ZN9CE_BME2805beginEh>
 8081d6c:	b960      	cbnz	r0, 8081d88 <setup+0xe8>
 8081d6e:	4b18      	ldr	r3, [pc, #96]	; (8081dd0 <setup+0x130>)
 8081d70:	a802      	add	r0, sp, #8
 8081d72:	781b      	ldrb	r3, [r3, #0]
 8081d74:	4a17      	ldr	r2, [pc, #92]	; (8081dd4 <setup+0x134>)
 8081d76:	f88d 3000 	strb.w	r3, [sp]
 8081d7a:	4917      	ldr	r1, [pc, #92]	; (8081dd8 <setup+0x138>)
 8081d7c:	233c      	movs	r3, #60	; 0x3c
 8081d7e:	f006 f98f 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081d82:	a803      	add	r0, sp, #12
 8081d84:	f7ff f9e6 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8081d88:	4a15      	ldr	r2, [pc, #84]	; (8081de0 <setup+0x140>)
 8081d8a:	4916      	ldr	r1, [pc, #88]	; (8081de4 <setup+0x144>)
 8081d8c:	4816      	ldr	r0, [pc, #88]	; (8081de8 <setup+0x148>)
 8081d8e:	f006 f894 	bl	8087eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  usbOn = Serial.isConnected();
 8081d92:	f006 fbc7 	bl	8088524 <_Z16_fetch_usbserialv>
 8081d96:	f006 fbab 	bl	80884f0 <_ZN9USBSerial11isConnectedEv>
 8081d9a:	4b14      	ldr	r3, [pc, #80]	; (8081dec <setup+0x14c>)
 8081d9c:	6018      	str	r0, [r3, #0]
  if(usbOn)  {Serial.println("ending setup"); waitMS(100);}
 8081d9e:	b138      	cbz	r0, 8081db0 <setup+0x110>
 8081da0:	f006 fbc0 	bl	8088524 <_Z16_fetch_usbserialv>
 8081da4:	4912      	ldr	r1, [pc, #72]	; (8081df0 <setup+0x150>)
 8081da6:	f005 f966 	bl	8087076 <_ZN5Print7printlnEPKc>
 8081daa:	2064      	movs	r0, #100	; 0x64
 8081dac:	f7fe fda6 	bl	80808fc <_Z6waitMSm>
} // end setup()
 8081db0:	b004      	add	sp, #16
 8081db2:	bd10      	pop	{r4, pc}
 8081db4:	0808019f 	.word	0x0808019f
 8081db8:	000927c0 	.word	0x000927c0
 8081dbc:	200008e4 	.word	0x200008e4
 8081dc0:	080801a9 	.word	0x080801a9
 8081dc4:	200008f0 	.word	0x200008f0
 8081dc8:	20000014 	.word	0x20000014
 8081dcc:	200002f8 	.word	0x200002f8
 8081dd0:	20000260 	.word	0x20000260
 8081dd4:	0808ca10 	.word	0x0808ca10
 8081dd8:	0808ca24 	.word	0x0808ca24
 8081ddc:	20000328 	.word	0x20000328
 8081de0:	0808ca2c 	.word	0x0808ca2c
 8081de4:	0808124d 	.word	0x0808124d
 8081de8:	08087e8f 	.word	0x08087e8f
 8081dec:	200008dc 	.word	0x200008dc
 8081df0:	0808ca32 	.word	0x0808ca32

08081df4 <_GLOBAL__sub_I_fileName>:
 8081df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 8081df8:	2400      	movs	r4, #0
 8081dfa:	2701      	movs	r7, #1
 8081dfc:	4b29      	ldr	r3, [pc, #164]	; (8081ea4 <_GLOBAL__sub_I_fileName+0xb0>)
String fileName ;       //**
 8081dfe:	4e2a      	ldr	r6, [pc, #168]	; (8081ea8 <_GLOBAL__sub_I_fileName+0xb4>)
 8081e00:	601c      	str	r4, [r3, #0]
 8081e02:	4b2a      	ldr	r3, [pc, #168]	; (8081eac <_GLOBAL__sub_I_fileName+0xb8>)
 8081e04:	4d2a      	ldr	r5, [pc, #168]	; (8081eb0 <_GLOBAL__sub_I_fileName+0xbc>)
 8081e06:	701f      	strb	r7, [r3, #0]
 8081e08:	4630      	mov	r0, r6
 8081e0a:	492a      	ldr	r1, [pc, #168]	; (8081eb4 <_GLOBAL__sub_I_fileName+0xc0>)
 8081e0c:	f005 f838 	bl	8086e80 <_ZN6StringC1EPKc>
 8081e10:	4630      	mov	r0, r6
SdFat sd;               //**
 8081e12:	4e29      	ldr	r6, [pc, #164]	; (8081eb8 <_GLOBAL__sub_I_fileName+0xc4>)
String fileName ;       //**
 8081e14:	462a      	mov	r2, r5
 8081e16:	4929      	ldr	r1, [pc, #164]	; (8081ebc <_GLOBAL__sub_I_fileName+0xc8>)
 8081e18:	f007 f982 	bl	8089120 <__aeabi_atexit>
SdFat sd;               //**
 8081e1c:	4630      	mov	r0, r6
 8081e1e:	f7fe fb01 	bl	8080424 <_ZN5SdFatC1Ev>
 8081e22:	462a      	mov	r2, r5
 8081e24:	4630      	mov	r0, r6
 8081e26:	4926      	ldr	r1, [pc, #152]	; (8081ec0 <_GLOBAL__sub_I_fileName+0xcc>)
 8081e28:	f007 f97a 	bl	8089120 <__aeabi_atexit>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081e2c:	4825      	ldr	r0, [pc, #148]	; (8081ec4 <_GLOBAL__sub_I_fileName+0xd0>)
  SdFile() {}
 8081e2e:	4b26      	ldr	r3, [pc, #152]	; (8081ec8 <_GLOBAL__sub_I_fileName+0xd4>)
SdFile file;            //**
 8081e30:	4926      	ldr	r1, [pc, #152]	; (8081ecc <_GLOBAL__sub_I_fileName+0xd8>)
 8081e32:	462a      	mov	r2, r5
 8081e34:	6003      	str	r3, [r0, #0]
 8081e36:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8081e38:	6044      	str	r4, [r0, #4]
 8081e3a:	f007 f971 	bl	8089120 <__aeabi_atexit>
ArduinoOutStream cout(Serial);
 8081e3e:	f006 fb71 	bl	8088524 <_Z16_fetch_usbserialv>
  static const openmode out    = 0X40;
  /** truncate an existing stream when opening */
  static const openmode trunc  = 0X80;
  //----------------------------------------------------------------------------
  ios_base() : m_fill(' '), m_fmtflags(dec | right | skipws)
    , m_precision(2), m_width(0) {}
 8081e42:	2220      	movs	r2, #32
 8081e44:	4b22      	ldr	r3, [pc, #136]	; (8081ed0 <_GLOBAL__sub_I_fileName+0xdc>)
 8081e46:	f04f 0802 	mov.w	r8, #2
 8081e4a:	721a      	strb	r2, [r3, #8]
 8081e4c:	f241 020a 	movw	r2, #4106	; 0x100a
 8081e50:	60da      	str	r2, [r3, #12]
  explicit ArduinoOutStream(Print& pr) : m_pr(&pr) {}
 8081e52:	4a20      	ldr	r2, [pc, #128]	; (8081ed4 <_GLOBAL__sub_I_fileName+0xe0>)
 8081e54:	f883 8010 	strb.w	r8, [r3, #16]
 8081e58:	e9c3 2000 	strd	r2, r0, [r3]
 8081e5c:	615c      	str	r4, [r3, #20]
 * \brief Error and state information for all streams
 */
class ios : public ios_base {
 public:
  /** Create ios with no error flags set */
  ios() : m_iostate(0) {}
 8081e5e:	761c      	strb	r4, [r3, #24]
CE_BME280 bme1; // I2C  for air temp. pressure, humidity
 8081e60:	481d      	ldr	r0, [pc, #116]	; (8081ed8 <_GLOBAL__sub_I_fileName+0xe4>)
 8081e62:	f003 fb5b 	bl	808551c <_ZN9CE_BME280C1Ev>
CE_BME280 bme2; // I2C   for WATER temp. & pressure
 8081e66:	481d      	ldr	r0, [pc, #116]	; (8081edc <_GLOBAL__sub_I_fileName+0xe8>)
 8081e68:	f003 fb58 	bl	808551c <_ZN9CE_BME280C1Ev>
              error_(SYSTEM_ERROR_NONE) {
 8081e6c:	4e1c      	ldr	r6, [pc, #112]	; (8081ee0 <_GLOBAL__sub_I_fileName+0xec>)
    SleepResult() {}
 8081e6e:	4b1d      	ldr	r3, [pc, #116]	; (8081ee4 <_GLOBAL__sub_I_fileName+0xf0>)
        set_system_mode(mode);
 8081e70:	4640      	mov	r0, r8
    SleepResult() {}
 8081e72:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 8081e74:	6034      	str	r4, [r6, #0]
 8081e76:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 8081e78:	71b4      	strb	r4, [r6, #6]
Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 8081e7a:	4c1b      	ldr	r4, [pc, #108]	; (8081ee8 <_GLOBAL__sub_I_fileName+0xf4>)
        set_system_mode(mode);
 8081e7c:	f004 f99a 	bl	80861b4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);   // was set at semi_automatic but I could not flash remotely, tried automatic then set back to semi-automatic
 8081e80:	462a      	mov	r2, r5
 8081e82:	4630      	mov	r0, r6
 8081e84:	4919      	ldr	r1, [pc, #100]	; (8081eec <_GLOBAL__sub_I_fileName+0xf8>)
 8081e86:	f007 f94b 	bl	8089120 <__aeabi_atexit>
Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 8081e8a:	463a      	mov	r2, r7
 8081e8c:	4620      	mov	r0, r4
 8081e8e:	4918      	ldr	r1, [pc, #96]	; (8081ef0 <_GLOBAL__sub_I_fileName+0xfc>)
 8081e90:	f002 fcde 	bl	8084850 <_ZN7UbidotsC1EPc11IotProtocol>
 8081e94:	462a      	mov	r2, r5
 8081e96:	4620      	mov	r0, r4
 8081e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
Ubidots ubidots(your_token, UBI_TCP); // A data source with particle name will be created in your Ubidots account
 8081e9c:	4915      	ldr	r1, [pc, #84]	; (8081ef4 <_GLOBAL__sub_I_fileName+0x100>)
 8081e9e:	f007 b93f 	b.w	8089120 <__aeabi_atexit>
 8081ea2:	bf00      	nop
 8081ea4:	2000025c 	.word	0x2000025c
 8081ea8:	200003a0 	.word	0x200003a0
 8081eac:	20000260 	.word	0x20000260
 8081eb0:	20000230 	.word	0x20000230
 8081eb4:	0808cfab 	.word	0x0808cfab
 8081eb8:	2000044c 	.word	0x2000044c
 8081ebc:	08086ded 	.word	0x08086ded
 8081ec0:	08080151 	.word	0x08080151
 8081ec4:	20000374 	.word	0x20000374
 8081ec8:	0808cad0 	.word	0x0808cad0
 8081ecc:	0808014f 	.word	0x0808014f
 8081ed0:	20000358 	.word	0x20000358
 8081ed4:	0808cab0 	.word	0x0808cab0
 8081ed8:	200002f8 	.word	0x200002f8
 8081edc:	20000328 	.word	0x20000328
 8081ee0:	20000250 	.word	0x20000250
 8081ee4:	ffff0000 	.word	0xffff0000
 8081ee8:	200008d0 	.word	0x200008d0
 8081eec:	0808022d 	.word	0x0808022d
 8081ef0:	0808ca3f 	.word	0x0808ca3f
 8081ef4:	0808486d 	.word	0x0808486d

08081ef8 <_ZN13camera_VC070611common_initEv>:
#include "camera_VC0706.h"

void camera_VC0706::common_init(void) {
	swSerial  = NULL;
 8081ef8:	2300      	movs	r3, #0
	hwSerial  = NULL;
 8081efa:	e9c0 331b 	strd	r3, r3, [r0, #108]	; 0x6c
	frameptr  = 0;
 8081efe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	bufferLen = 0;
 8081f02:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
	serialNum = 0;
 8081f06:	7003      	strb	r3, [r0, #0]
}
 8081f08:	4770      	bx	lr

08081f0a <_ZN13camera_VC0706C1EP11USARTSerial>:
#endif
	common_init();  // Set everything to common state, then...
	swSerial = ser; // ...override swSerial with value passed.
}

camera_VC0706::camera_VC0706(HardwareSerial *ser) {
 8081f0a:	b508      	push	{r3, lr}
	common_init();  // Set everything to common state, then...
 8081f0c:	f7ff fff4 	bl	8081ef8 <_ZN13camera_VC070611common_initEv>
	hwSerial = ser; // ...override hwSerial with value passed.
 8081f10:	6701      	str	r1, [r0, #112]	; 0x70
}
 8081f12:	bd08      	pop	{r3, pc}

08081f14 <_ZN13camera_VC070611sendCommandEhPhh>:
	if (! verifyResponse(cmd))
		return false;
	return true;
}

void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8081f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f16:	4605      	mov	r5, r0
	if(swSerial) {
 8081f18:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
void camera_VC0706::sendCommand(uint8_t cmd, uint8_t args[] = 0, uint8_t argn = 0) {
 8081f1a:	460f      	mov	r7, r1
 8081f1c:	4614      	mov	r4, r2
 8081f1e:	18d6      	adds	r6, r2, r3
	if(swSerial) {
 8081f20:	b1a8      	cbz	r0, 8081f4e <_ZN13camera_VC070611sendCommandEhPhh+0x3a>
#if ARDUINO >= 100
		swSerial->write((byte)0x56);
 8081f22:	6803      	ldr	r3, [r0, #0]
 8081f24:	2156      	movs	r1, #86	; 0x56
 8081f26:	689b      	ldr	r3, [r3, #8]
 8081f28:	4798      	blx	r3
		swSerial->write((byte)serialNum);
 8081f2a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8081f2c:	7829      	ldrb	r1, [r5, #0]
 8081f2e:	6803      	ldr	r3, [r0, #0]
 8081f30:	689b      	ldr	r3, [r3, #8]
 8081f32:	4798      	blx	r3
		swSerial->write((byte)cmd);
 8081f34:	4639      	mov	r1, r7
 8081f36:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8081f38:	6803      	ldr	r3, [r0, #0]
 8081f3a:	689b      	ldr	r3, [r3, #8]
 8081f3c:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 8081f3e:	42b4      	cmp	r4, r6
 8081f40:	d01c      	beq.n	8081f7c <_ZN13camera_VC070611sendCommandEhPhh+0x68>
			swSerial->write((byte)args[i]);
 8081f42:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8081f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081f48:	6803      	ldr	r3, [r0, #0]
 8081f4a:	689b      	ldr	r3, [r3, #8]
 8081f4c:	e7f6      	b.n	8081f3c <_ZN13camera_VC070611sendCommandEhPhh+0x28>
			//Serial.print(args[i], HEX);
		}
#endif
	} else {
#if ARDUINO >= 100
		hwSerial->write((byte)0x56);
 8081f4e:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081f50:	2156      	movs	r1, #86	; 0x56
 8081f52:	6803      	ldr	r3, [r0, #0]
 8081f54:	689b      	ldr	r3, [r3, #8]
 8081f56:	4798      	blx	r3
		hwSerial->write((byte)serialNum);
 8081f58:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081f5a:	7829      	ldrb	r1, [r5, #0]
 8081f5c:	6803      	ldr	r3, [r0, #0]
 8081f5e:	689b      	ldr	r3, [r3, #8]
 8081f60:	4798      	blx	r3
		hwSerial->write((byte)cmd);
 8081f62:	4639      	mov	r1, r7
 8081f64:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081f66:	6803      	ldr	r3, [r0, #0]
 8081f68:	689b      	ldr	r3, [r3, #8]
 8081f6a:	4798      	blx	r3

		for (uint8_t i=0; i<argn; i++) {
 8081f6c:	42b4      	cmp	r4, r6
 8081f6e:	d005      	beq.n	8081f7c <_ZN13camera_VC070611sendCommandEhPhh+0x68>
			hwSerial->write((byte)args[i]);
 8081f70:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8081f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081f76:	6803      	ldr	r3, [r0, #0]
 8081f78:	689b      	ldr	r3, [r3, #8]
 8081f7a:	e7f6      	b.n	8081f6a <_ZN13camera_VC070611sendCommandEhPhh+0x56>
			//Serial.print(" 0x");
			//Serial.print(args[i], HEX);
		}
#endif
	}
}
 8081f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081f7e <_ZN13camera_VC070612readResponseEhh>:

uint8_t camera_VC0706::readResponse(uint8_t numbytes, uint8_t timeout) {
 8081f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t counter = 0;
	bufferLen = 0;
 8081f80:	2500      	movs	r5, #0
uint8_t camera_VC0706::readResponse(uint8_t numbytes, uint8_t timeout) {
 8081f82:	4604      	mov	r4, r0
 8081f84:	460e      	mov	r6, r1
 8081f86:	4617      	mov	r7, r2
	bufferLen = 0;
 8081f88:	f880 5066 	strb.w	r5, [r0, #102]	; 0x66
	int avail;

	while ((timeout != counter) && (bufferLen != numbytes)) {
 8081f8c:	42bd      	cmp	r5, r7
 8081f8e:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8081f92:	d021      	beq.n	8081fd8 <_ZN13camera_VC070612readResponseEhh+0x5a>
 8081f94:	4286      	cmp	r6, r0
 8081f96:	d01f      	beq.n	8081fd8 <_ZN13camera_VC070612readResponseEhh+0x5a>
		avail = swSerial ? swSerial->available() : hwSerial->available();
 8081f98:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8081f9a:	b150      	cbz	r0, 8081fb2 <_ZN13camera_VC070612readResponseEhh+0x34>
 8081f9c:	6803      	ldr	r3, [r0, #0]
 8081f9e:	691b      	ldr	r3, [r3, #16]
 8081fa0:	4798      	blx	r3
		if (avail <= 0) {
 8081fa2:	2800      	cmp	r0, #0
 8081fa4:	dc07      	bgt.n	8081fb6 <_ZN13camera_VC070612readResponseEhh+0x38>
			delay(1);
 8081fa6:	2001      	movs	r0, #1
			counter++;
 8081fa8:	3501      	adds	r5, #1
			delay(1);
 8081faa:	f005 fad4 	bl	8087556 <delay>
			counter++;
 8081fae:	b2ed      	uxtb	r5, r5
			continue;
 8081fb0:	e7ec      	b.n	8081f8c <_ZN13camera_VC070612readResponseEhh+0xe>
		avail = swSerial ? swSerial->available() : hwSerial->available();
 8081fb2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8081fb4:	e7f2      	b.n	8081f9c <_ZN13camera_VC070612readResponseEhh+0x1e>
		}
		counter = 0;
		// there's a byte!
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
 8081fb6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8081fb8:	b160      	cbz	r0, 8081fd4 <_ZN13camera_VC070612readResponseEhh+0x56>
 8081fba:	6803      	ldr	r3, [r0, #0]
		counter = 0;
 8081fbc:	2500      	movs	r5, #0
		camerabuff[bufferLen++] = swSerial ? swSerial->read() : hwSerial->read();
 8081fbe:	695b      	ldr	r3, [r3, #20]
 8081fc0:	4798      	blx	r3
 8081fc2:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8081fc6:	b2c0      	uxtb	r0, r0
 8081fc8:	1c5a      	adds	r2, r3, #1
 8081fca:	4423      	add	r3, r4
 8081fcc:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 8081fd0:	7058      	strb	r0, [r3, #1]
 8081fd2:	e7db      	b.n	8081f8c <_ZN13camera_VC070612readResponseEhh+0xe>
 8081fd4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8081fd6:	e7f0      	b.n	8081fba <_ZN13camera_VC070612readResponseEhh+0x3c>
	}
	return bufferLen;
}
 8081fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081fda <_ZN13camera_VC070610getVersionEv>:
char * camera_VC0706::getVersion(void) {
 8081fda:	b513      	push	{r0, r1, r4, lr}
	uint8_t args[] = {0x01};
 8081fdc:	2301      	movs	r3, #1
char * camera_VC0706::getVersion(void) {
 8081fde:	4604      	mov	r4, r0
	sendCommand(VC0706_GEN_VERSION, args, 1);
 8081fe0:	2111      	movs	r1, #17
 8081fe2:	aa01      	add	r2, sp, #4
	uint8_t args[] = {0x01};
 8081fe4:	f88d 3004 	strb.w	r3, [sp, #4]
	sendCommand(VC0706_GEN_VERSION, args, 1);
 8081fe8:	f7ff ff94 	bl	8081f14 <_ZN13camera_VC070611sendCommandEhPhh>
	if (!readResponse(CAMERABUFFSIZ, 200))
 8081fec:	22c8      	movs	r2, #200	; 0xc8
 8081fee:	2164      	movs	r1, #100	; 0x64
 8081ff0:	4620      	mov	r0, r4
 8081ff2:	f7ff ffc4 	bl	8081f7e <_ZN13camera_VC070612readResponseEhh>
 8081ff6:	b128      	cbz	r0, 8082004 <_ZN13camera_VC070610getVersionEv+0x2a>
	camerabuff[bufferLen] = 0;  // end it!
 8081ff8:	2200      	movs	r2, #0
 8081ffa:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
	return (char *)camerabuff;  // return it!
 8081ffe:	1c60      	adds	r0, r4, #1
	camerabuff[bufferLen] = 0;  // end it!
 8082000:	4423      	add	r3, r4
 8082002:	705a      	strb	r2, [r3, #1]
}
 8082004:	b002      	add	sp, #8
 8082006:	bd10      	pop	{r4, pc}

08082008 <_ZN13camera_VC070614verifyResponseEh>:

boolean camera_VC0706::verifyResponse(uint8_t command) {
	if ((camerabuff[0] != 0x76) ||
 8082008:	7843      	ldrb	r3, [r0, #1]
 808200a:	2b76      	cmp	r3, #118	; 0x76
 808200c:	d10b      	bne.n	8082026 <_ZN13camera_VC070614verifyResponseEh+0x1e>
 808200e:	7882      	ldrb	r2, [r0, #2]
 8082010:	7803      	ldrb	r3, [r0, #0]
 8082012:	429a      	cmp	r2, r3
 8082014:	d107      	bne.n	8082026 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[1] != serialNum) ||
 8082016:	78c3      	ldrb	r3, [r0, #3]
 8082018:	428b      	cmp	r3, r1
 808201a:	d104      	bne.n	8082026 <_ZN13camera_VC070614verifyResponseEh+0x1e>
	        (camerabuff[2] != command) ||
 808201c:	7900      	ldrb	r0, [r0, #4]
 808201e:	fab0 f080 	clz	r0, r0
 8082022:	0940      	lsrs	r0, r0, #5
 8082024:	4770      	bx	lr
	        (camerabuff[3] != 0x0))
		return false;
 8082026:	2000      	movs	r0, #0
	return true;

}
 8082028:	4770      	bx	lr

0808202a <_ZN13camera_VC070610runCommandEhPhhhb>:
                                  uint8_t resplen, boolean flushflag) {
 808202a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808202e:	461f      	mov	r7, r3
 8082030:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8082034:	4604      	mov	r4, r0
 8082036:	460d      	mov	r5, r1
 8082038:	4616      	mov	r6, r2
 808203a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (flushflag) {
 808203e:	b11b      	cbz	r3, 8082048 <_ZN13camera_VC070610runCommandEhPhhhb+0x1e>
		readResponse(100, 10);
 8082040:	220a      	movs	r2, #10
 8082042:	2164      	movs	r1, #100	; 0x64
 8082044:	f7ff ff9b 	bl	8081f7e <_ZN13camera_VC070612readResponseEhh>
	sendCommand(cmd, args, argn);
 8082048:	463b      	mov	r3, r7
 808204a:	4632      	mov	r2, r6
 808204c:	4629      	mov	r1, r5
 808204e:	4620      	mov	r0, r4
 8082050:	f7ff ff60 	bl	8081f14 <_ZN13camera_VC070611sendCommandEhPhh>
	if (readResponse(resplen, 200) != resplen)
 8082054:	22c8      	movs	r2, #200	; 0xc8
 8082056:	4641      	mov	r1, r8
 8082058:	4620      	mov	r0, r4
 808205a:	f7ff ff90 	bl	8081f7e <_ZN13camera_VC070612readResponseEhh>
 808205e:	4540      	cmp	r0, r8
 8082060:	d105      	bne.n	808206e <_ZN13camera_VC070610runCommandEhPhhhb+0x44>
	if (! verifyResponse(cmd))
 8082062:	4629      	mov	r1, r5
 8082064:	4620      	mov	r0, r4
}
 8082066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (! verifyResponse(cmd))
 808206a:	f7ff bfcd 	b.w	8082008 <_ZN13camera_VC070614verifyResponseEh>
}
 808206e:	2000      	movs	r0, #0
 8082070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082074 <_ZN13camera_VC07065resetEv>:
boolean camera_VC0706::reset() {
 8082074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x0};
 8082076:	2300      	movs	r3, #0
	return runCommand(VC0706_RESET, args, 1, 5);
 8082078:	2205      	movs	r2, #5
	uint8_t args[] = {0x0};
 808207a:	f88d 300c 	strb.w	r3, [sp, #12]
	return runCommand(VC0706_RESET, args, 1, 5);
 808207e:	2301      	movs	r3, #1
 8082080:	2126      	movs	r1, #38	; 0x26
 8082082:	e9cd 2300 	strd	r2, r3, [sp]
 8082086:	aa03      	add	r2, sp, #12
 8082088:	f7ff ffcf 	bl	808202a <_ZN13camera_VC070610runCommandEhPhhhb>
}
 808208c:	b005      	add	sp, #20
 808208e:	f85d fb04 	ldr.w	pc, [sp], #4

08082092 <_ZN13camera_VC07065beginEt>:
boolean camera_VC0706::begin(uint16_t baud) {
 8082092:	b510      	push	{r4, lr}
 8082094:	4604      	mov	r4, r0
	if(swSerial) swSerial->begin(baud);
 8082096:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8082098:	b130      	cbz	r0, 80820a8 <_ZN13camera_VC07065beginEt+0x16>
 808209a:	f001 ff05 	bl	8083ea8 <_ZN18ParticleSoftSerial5beginEm>
	return reset();
 808209e:	4620      	mov	r0, r4
}
 80820a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return reset();
 80820a4:	f7ff bfe6 	b.w	8082074 <_ZN13camera_VC07065resetEv>
	else         hwSerial->begin(baud);
 80820a8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80820aa:	f006 fc1d 	bl	80888e8 <_ZN11USARTSerial5beginEm>
 80820ae:	e7f6      	b.n	808209e <_ZN13camera_VC07065beginEt+0xc>

080820b0 <_ZN13camera_VC070619cameraFrameBuffCtrlEh>:
boolean camera_VC0706::cameraFrameBuffCtrl(uint8_t command) {
 80820b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x1, command};
 80820b2:	2301      	movs	r3, #1
 80820b4:	f88d 300c 	strb.w	r3, [sp, #12]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 80820b8:	9301      	str	r3, [sp, #4]
 80820ba:	2305      	movs	r3, #5
	uint8_t args[] = {0x1, command};
 80820bc:	f88d 100d 	strb.w	r1, [sp, #13]
	return runCommand(VC0706_FBUF_CTRL, args, sizeof(args), 5);
 80820c0:	9300      	str	r3, [sp, #0]
 80820c2:	2136      	movs	r1, #54	; 0x36
 80820c4:	2302      	movs	r3, #2
 80820c6:	aa03      	add	r2, sp, #12
 80820c8:	f7ff ffaf 	bl	808202a <_ZN13camera_VC070610runCommandEhPhhhb>
}
 80820cc:	b005      	add	sp, #20
 80820ce:	f85d fb04 	ldr.w	pc, [sp], #4

080820d2 <_ZN13camera_VC070611takePictureEv>:
	frameptr = 0;
 80820d2:	2100      	movs	r1, #0
 80820d4:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
	return cameraFrameBuffCtrl(VC0706_STOPCURRENTFRAME);
 80820d8:	f7ff bfea 	b.w	80820b0 <_ZN13camera_VC070619cameraFrameBuffCtrlEh>

080820dc <_ZN13camera_VC070611frameLengthEv>:
uint32_t camera_VC0706::frameLength(void) {
 80820dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {0x01, 0x00};
 80820de:	2301      	movs	r3, #1
 80820e0:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 80820e4:	9301      	str	r3, [sp, #4]
 80820e6:	2309      	movs	r3, #9
 80820e8:	2134      	movs	r1, #52	; 0x34
 80820ea:	9300      	str	r3, [sp, #0]
 80820ec:	aa03      	add	r2, sp, #12
 80820ee:	2302      	movs	r3, #2
uint32_t camera_VC0706::frameLength(void) {
 80820f0:	4604      	mov	r4, r0
	if (!runCommand(VC0706_GET_FBUF_LEN, args, sizeof(args), 9))
 80820f2:	f7ff ff9a 	bl	808202a <_ZN13camera_VC070610runCommandEhPhhhb>
 80820f6:	b140      	cbz	r0, 808210a <_ZN13camera_VC070611frameLengthEv+0x2e>
	len |= camerabuff[6];
 80820f8:	88e0      	ldrh	r0, [r4, #6]
	len |= camerabuff[7];
 80820fa:	7a23      	ldrb	r3, [r4, #8]
 80820fc:	ba40      	rev16	r0, r0
 80820fe:	b280      	uxth	r0, r0
 8082100:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	len |= camerabuff[8];
 8082104:	7a60      	ldrb	r0, [r4, #9]
 8082106:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 808210a:	b004      	add	sp, #16
 808210c:	bd10      	pop	{r4, pc}

0808210e <_ZN13camera_VC070611readPictureEh>:
	uint8_t args[] = {0x0C, 0x0, 0x0A,
 808210e:	2300      	movs	r3, #0
 8082110:	220c      	movs	r2, #12
uint8_t * camera_VC0706::readPicture(uint8_t n) {
 8082112:	b570      	push	{r4, r5, r6, lr}
 8082114:	b086      	sub	sp, #24
	uint8_t args[] = {0x0C, 0x0, 0x0A,
 8082116:	e9cd 3302 	strd	r3, r3, [sp, #8]
 808211a:	9304      	str	r3, [sp, #16]
 808211c:	f88d 2008 	strb.w	r2, [sp, #8]
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
 8082120:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 8082124:	9301      	str	r3, [sp, #4]
 8082126:	2305      	movs	r3, #5
uint8_t * camera_VC0706::readPicture(uint8_t n) {
 8082128:	460d      	mov	r5, r1
	uint8_t args[] = {0x0C, 0x0, 0x0A,
 808212a:	260a      	movs	r6, #10
	                  0, 0, frameptr >> 8, frameptr & 0xFF,
 808212c:	1211      	asrs	r1, r2, #8
	                 };
 808212e:	f88d 100d 	strb.w	r1, [sp, #13]
 8082132:	f88d 200e 	strb.w	r2, [sp, #14]
	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 8082136:	9300      	str	r3, [sp, #0]
 8082138:	2132      	movs	r1, #50	; 0x32
 808213a:	230d      	movs	r3, #13
 808213c:	aa02      	add	r2, sp, #8
uint8_t * camera_VC0706::readPicture(uint8_t n) {
 808213e:	4604      	mov	r4, r0
	uint8_t args[] = {0x0C, 0x0, 0x0A,
 8082140:	f88d 600a 	strb.w	r6, [sp, #10]
 8082144:	f88d 6014 	strb.w	r6, [sp, #20]
	                 };
 8082148:	f88d 5012 	strb.w	r5, [sp, #18]
	if (! runCommand(VC0706_READ_FBUF, args, sizeof(args), 5, false))
 808214c:	f7ff ff6d 	bl	808202a <_ZN13camera_VC070610runCommandEhPhhhb>
 8082150:	b910      	cbnz	r0, 8082158 <_ZN13camera_VC070611readPictureEh+0x4a>
		return 0;
 8082152:	2000      	movs	r0, #0
}
 8082154:	b006      	add	sp, #24
 8082156:	bd70      	pop	{r4, r5, r6, pc}
	if (readResponse(n+5, CAMERADELAY) == 0)
 8082158:	1d69      	adds	r1, r5, #5
 808215a:	4632      	mov	r2, r6
 808215c:	4620      	mov	r0, r4
 808215e:	b2c9      	uxtb	r1, r1
 8082160:	f7ff ff0d 	bl	8081f7e <_ZN13camera_VC070612readResponseEhh>
 8082164:	2800      	cmp	r0, #0
 8082166:	d0f4      	beq.n	8082152 <_ZN13camera_VC070611readPictureEh+0x44>
	frameptr += n;
 8082168:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
	return camerabuff;
 808216c:	1c60      	adds	r0, r4, #1
	frameptr += n;
 808216e:	440d      	add	r5, r1
 8082170:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
	return camerabuff;
 8082174:	e7ee      	b.n	8082154 <_ZN13camera_VC070611readPictureEh+0x46>

08082176 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8082176:	b510      	push	{r4, lr}
 8082178:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 808217a:	3024      	adds	r0, #36	; 0x24
 808217c:	f000 fe5c 	bl	8082e38 <_ZN8FatCache4syncEv>
 8082180:	b128      	cbz	r0, 808218e <_ZN9FatVolume9cacheSyncEv+0x18>
 8082182:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 8082186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 808218a:	f000 be55 	b.w	8082e38 <_ZN8FatCache4syncEv>
  }
 808218e:	bd10      	pop	{r4, pc}

08082190 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8082190:	1e41      	subs	r1, r0, #1
 8082192:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 8082196:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8082198:	0842      	lsrs	r2, r0, #1
 808219a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 808219e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80821a2:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 80821a4:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80821a6:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 80821aa:	d1f5      	bne.n	8082198 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 80821ac:	4770      	bx	lr
	...

080821b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80821b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80821b4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80821b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80821ba:	2b20      	cmp	r3, #32
 80821bc:	d0fa      	beq.n	80821b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 80821be:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80821c0:	4d6a      	ldr	r5, [pc, #424]	; (808236c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 80821c2:	608e      	str	r6, [r1, #8]
    c = path[len];
 80821c4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 80821c6:	b1c3      	cbz	r3, 80821fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 80821c8:	2b2f      	cmp	r3, #47	; 0x2f
 80821ca:	d016      	beq.n	80821fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80821cc:	2b5c      	cmp	r3, #92	; 0x5c
 80821ce:	d102      	bne.n	80821d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80821d0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 80821d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80821d6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 80821da:	b2c0      	uxtb	r0, r0
 80821dc:	281d      	cmp	r0, #29
 80821de:	d803      	bhi.n	80821e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 80821e0:	fa25 f000 	lsr.w	r0, r5, r0
 80821e4:	07c0      	lsls	r0, r0, #31
 80821e6:	d4f3      	bmi.n	80821d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80821e8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80821ec:	283c      	cmp	r0, #60	; 0x3c
 80821ee:	d0ef      	beq.n	80821d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80821f0:	3b20      	subs	r3, #32
 80821f2:	2b5e      	cmp	r3, #94	; 0x5e
 80821f4:	d8ec      	bhi.n	80821d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 80821f6:	3401      	adds	r4, #1
    c = path[len];
 80821f8:	e7e4      	b.n	80821c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 80821fa:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 80821fc:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80821fe:	4607      	mov	r7, r0
 8082200:	f810 5b01 	ldrb.w	r5, [r0], #1
 8082204:	2d20      	cmp	r5, #32
 8082206:	d0fa      	beq.n	80821fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 8082208:	2d2f      	cmp	r5, #47	; 0x2f
 808220a:	d0f8      	beq.n	80821fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 808220c:	6017      	str	r7, [r2, #0]
  while (len) {
 808220e:	b14c      	cbz	r4, 8082224 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 8082210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8082214:	2a2e      	cmp	r2, #46	; 0x2e
 8082216:	d001      	beq.n	808221c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 8082218:	2a20      	cmp	r2, #32
 808221a:	d101      	bne.n	8082220 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 808221c:	3c01      	subs	r4, #1
  while (len) {
 808221e:	e7f6      	b.n	808220e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 8082220:	2cff      	cmp	r4, #255	; 0xff
 8082222:	dcd5      	bgt.n	80821d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 8082224:	2020      	movs	r0, #32
  fname->len = len;
 8082226:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 8082228:	f101 030d 	add.w	r3, r1, #13
 808222c:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 8082230:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 8082234:	4293      	cmp	r3, r2
 8082236:	d1fb      	bne.n	8082230 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8082238:	f04f 0800 	mov.w	r8, #0
 808223c:	f816 3008 	ldrb.w	r3, [r6, r8]
 8082240:	2b2e      	cmp	r3, #46	; 0x2e
 8082242:	d001      	beq.n	8082248 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 8082244:	2b20      	cmp	r3, #32
 8082246:	d102      	bne.n	808224e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 8082248:	f108 0801 	add.w	r8, r8, #1
 808224c:	e7f6      	b.n	808223c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 808224e:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8082252:	1e65      	subs	r5, r4, #1
  is83 = !si;
 8082254:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8082256:	1c6b      	adds	r3, r5, #1
 8082258:	d002      	beq.n	8082260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 808225a:	5d73      	ldrb	r3, [r6, r5]
 808225c:	2b2e      	cmp	r3, #46	; 0x2e
 808225e:	d114      	bne.n	808228a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8082260:	f04f 0900 	mov.w	r9, #0
 8082264:	2707      	movs	r7, #7
 8082266:	464a      	mov	r2, r9
 8082268:	46ca      	mov	sl, r9
 808226a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 808226e:	45a0      	cmp	r8, r4
 8082270:	da69      	bge.n	8082346 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 8082272:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 8082276:	2b20      	cmp	r3, #32
 8082278:	d003      	beq.n	8082282 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 808227a:	2b2e      	cmp	r3, #46	; 0x2e
 808227c:	d107      	bne.n	808228e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808227e:	45a8      	cmp	r8, r5
 8082280:	d012      	beq.n	80822a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 8082282:	2000      	movs	r0, #0
  for (; si < len; si++) {
 8082284:	f108 0801 	add.w	r8, r8, #1
 8082288:	e7f1      	b.n	808226e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808228a:	3d01      	subs	r5, #1
 808228c:	e7e3      	b.n	8082256 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 808228e:	2b22      	cmp	r3, #34	; 0x22
 8082290:	d008      	beq.n	80822a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 8082292:	2b7c      	cmp	r3, #124	; 0x7c
 8082294:	d006      	beq.n	80822a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8082296:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 808229a:	f1bc 0f05 	cmp.w	ip, #5
 808229e:	d80b      	bhi.n	80822b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 80822a0:	2b2d      	cmp	r3, #45	; 0x2d
 80822a2:	d013      	beq.n	80822cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 80822a4:	45a8      	cmp	r8, r5
 80822a6:	d15c      	bne.n	8082362 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 80822a8:	2f0a      	cmp	r7, #10
 80822aa:	d04b      	beq.n	8082344 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80822ac:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80822ae:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80822b0:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80822b2:	f04f 0e10 	mov.w	lr, #16
 80822b6:	e7e5      	b.n	8082284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 80822b8:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80822bc:	f1bc 0f05 	cmp.w	ip, #5
 80822c0:	d9f0      	bls.n	80822a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 80822c2:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80822c6:	f1bc 0f02 	cmp.w	ip, #2
 80822ca:	d9eb      	bls.n	80822a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 80822cc:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80822d0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80822d4:	d8e6      	bhi.n	80822a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 80822d6:	45a8      	cmp	r8, r5
 80822d8:	d0e6      	beq.n	80822a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 80822da:	42ba      	cmp	r2, r7
 80822dc:	d830      	bhi.n	8082340 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 80822de:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80822e2:	f1bc 0f19 	cmp.w	ip, #25
 80822e6:	d81a      	bhi.n	808231e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 80822e8:	3b20      	subs	r3, #32
        lc |= bit;
 80822ea:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80822ee:	b2db      	uxtb	r3, r3
        lc |= bit;
 80822f0:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 80822f4:	f102 0c01 	add.w	ip, r2, #1
 80822f8:	fa5f fc8c 	uxtb.w	ip, ip
 80822fc:	440a      	add	r2, r1
      if (i < 7) {
 80822fe:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 8082302:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 8082304:	d801      	bhi.n	808230a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 8082306:	f881 c00c 	strb.w	ip, [r1, #12]
 808230a:	4662      	mov	r2, ip
 808230c:	e7ba      	b.n	8082284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 808230e:	45a8      	cmp	r8, r5
 8082310:	dc18      	bgt.n	8082344 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 8082312:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8082314:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8082316:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8082318:	f04f 0e10 	mov.w	lr, #16
 808231c:	e7b1      	b.n	8082282 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 808231e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8082322:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8082326:	bf98      	it	ls
 8082328:	ea4e 0a0a 	orrls.w	sl, lr, sl
 808232c:	e7e2      	b.n	80822f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808232e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 8082330:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8082332:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8082334:	4419      	add	r1, r3
 8082336:	237e      	movs	r3, #126	; 0x7e
 8082338:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808233a:	2331      	movs	r3, #49	; 0x31
 808233c:	738b      	strb	r3, [r1, #14]
 808233e:	e748      	b.n	80821d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 8082340:	2f0a      	cmp	r7, #10
 8082342:	d1e4      	bne.n	808230e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 8082344:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 8082346:	7b4b      	ldrb	r3, [r1, #13]
 8082348:	2b20      	cmp	r3, #32
 808234a:	f43f af41 	beq.w	80821d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 808234e:	2800      	cmp	r0, #0
 8082350:	d0ed      	beq.n	808232e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8082352:	ea1a 0f09 	tst.w	sl, r9
 8082356:	bf18      	it	ne
 8082358:	f04f 0902 	movne.w	r9, #2
 808235c:	f881 9000 	strb.w	r9, [r1]
 8082360:	e737      	b.n	80821d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 8082362:	42ba      	cmp	r2, r7
 8082364:	d8ec      	bhi.n	8082340 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 8082366:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 8082368:	2000      	movs	r0, #0
 808236a:	e7c3      	b.n	80822f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 808236c:	31000101 	.word	0x31000101

08082370 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8082370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082374:	4606      	mov	r6, r0
 8082376:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8082378:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808237a:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 808237c:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8082380:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8082384:	6861      	ldr	r1, [r4, #4]
 8082386:	68a2      	ldr	r2, [r4, #8]
 8082388:	186b      	adds	r3, r5, r1
 808238a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 808238c:	4411      	add	r1, r2
 808238e:	4291      	cmp	r1, r2
 8082390:	d006      	beq.n	80823a0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8082392:	f812 0b01 	ldrb.w	r0, [r2], #1
 8082396:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808239a:	4043      	eors	r3, r0
 808239c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 808239e:	e7f6      	b.n	808238e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 80823a0:	f1b9 0f03 	cmp.w	r9, #3
 80823a4:	bf28      	it	cs
 80823a6:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80823aa:	f109 0204 	add.w	r2, r9, #4
 80823ae:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80823b0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80823b4:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80823b6:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80823b8:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80823ba:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80823bc:	bf94      	ite	ls
 80823be:	3130      	addls	r1, #48	; 0x30
 80823c0:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80823c2:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80823c4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80823c6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80823ca:	d1f1      	bne.n	80823b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 80823cc:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 80823d0:	2100      	movs	r1, #0
 80823d2:	4630      	mov	r0, r6
 80823d4:	735f      	strb	r7, [r3, #13]
 80823d6:	f000 fb1e 	bl	8082a16 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 80823da:	2101      	movs	r1, #1
 80823dc:	4630      	mov	r0, r6
 80823de:	f000 fafb 	bl	80829d8 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80823e2:	4601      	mov	r1, r0
 80823e4:	b928      	cbnz	r0, 80823f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80823e6:	7870      	ldrb	r0, [r6, #1]
 80823e8:	fab0 f080 	clz	r0, r0
 80823ec:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 80823ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 80823f2:	7803      	ldrb	r3, [r0, #0]
 80823f4:	b16b      	cbz	r3, 8082412 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80823f6:	7ac3      	ldrb	r3, [r0, #11]
 80823f8:	071b      	lsls	r3, r3, #28
 80823fa:	d4ee      	bmi.n	80823da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80823fc:	220b      	movs	r2, #11
 80823fe:	4640      	mov	r0, r8
 8082400:	f008 f8f6 	bl	808a5f0 <memcmp>
 8082404:	2800      	cmp	r0, #0
 8082406:	d1e8      	bne.n	80823da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 8082408:	3501      	adds	r5, #1
 808240a:	b2ad      	uxth	r5, r5
 808240c:	2d64      	cmp	r5, #100	; 0x64
 808240e:	d1b9      	bne.n	8082384 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8082410:	e7ed      	b.n	80823ee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 8082412:	2001      	movs	r0, #1
 8082414:	e7eb      	b.n	80823ee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

08082418 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8082418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808241c:	b089      	sub	sp, #36	; 0x24
 808241e:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 8082420:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8082422:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 8082424:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8082428:	4690      	mov	r8, r2
 808242a:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 808242c:	d103      	bne.n	8082436 <_ZN7FatFile4openEPS_P7fname_ti+0x1e>
  return false;
 808242e:	2000      	movs	r0, #0
}
 8082430:	b009      	add	sp, #36	; 0x24
 8082432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 8082436:	9b05      	ldr	r3, [sp, #20]
 8082438:	781b      	ldrb	r3, [r3, #0]
 808243a:	2b00      	cmp	r3, #0
 808243c:	d1f7      	bne.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  size_t len = fname->len;
 808243e:	6853      	ldr	r3, [r2, #4]
 8082440:	4628      	mov	r0, r5
 8082442:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8082444:	7813      	ldrb	r3, [r2, #0]
 8082446:	0799      	lsls	r1, r3, #30
 8082448:	bf18      	it	ne
 808244a:	9b03      	ldrne	r3, [sp, #12]
 808244c:	f04f 0100 	mov.w	r1, #0
 8082450:	bf1f      	itttt	ne
 8082452:	f103 070c 	addne.w	r7, r3, #12
 8082456:	230d      	movne	r3, #13
 8082458:	fbb7 f7f3 	udivne	r7, r7, r3
 808245c:	3701      	addne	r7, #1
 808245e:	bf0c      	ite	eq
 8082460:	2701      	moveq	r7, #1
 8082462:	b2ff      	uxtbne	r7, r7
 8082464:	f000 fad7 	bl	8082a16 <_ZN7FatFile7seekSetEm>
  }
 8082468:	2300      	movs	r3, #0
 808246a:	469b      	mov	fp, r3
 808246c:	461c      	mov	r4, r3
 808246e:	461e      	mov	r6, r3
 8082470:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8082472:	f108 020d 	add.w	r2, r8, #13
 8082476:	9302      	str	r3, [sp, #8]
 8082478:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 808247a:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 808247c:	2101      	movs	r1, #1
 808247e:	4628      	mov	r0, r5
 8082480:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 8082482:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8082486:	f000 faa7 	bl	80829d8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808248a:	9b06      	ldr	r3, [sp, #24]
 808248c:	2800      	cmp	r0, #0
 808248e:	d16f      	bne.n	8082570 <_ZN7FatFile4openEPS_P7fname_ti+0x158>
      if (dirFile->getError()) {
 8082490:	786b      	ldrb	r3, [r5, #1]
 8082492:	2b00      	cmp	r3, #0
 8082494:	d1cb      	bne.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8082496:	9b04      	ldr	r3, [sp, #16]
 8082498:	059a      	lsls	r2, r3, #22
 808249a:	d5c8      	bpl.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 808249c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 80824a0:	3b01      	subs	r3, #1
 80824a2:	2b01      	cmp	r3, #1
 80824a4:	d8c3      	bhi.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  if (freeFound == 0) {
 80824a6:	9b02      	ldr	r3, [sp, #8]
 80824a8:	2c00      	cmp	r4, #0
 80824aa:	bf08      	it	eq
 80824ac:	464b      	moveq	r3, r9
 80824ae:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 80824b0:	42bc      	cmp	r4, r7
 80824b2:	f0c0 8103 	bcc.w	80826bc <_ZN7FatFile4openEPS_P7fname_ti+0x2a4>
  if (fnameFound) {
 80824b6:	f1ba 0f00 	cmp.w	sl, #0
 80824ba:	f040 811b 	bne.w	80826f4 <_ZN7FatFile4openEPS_P7fname_ti+0x2dc>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80824be:	9b02      	ldr	r3, [sp, #8]
 80824c0:	4628      	mov	r0, r5
 80824c2:	0159      	lsls	r1, r3, #5
 80824c4:	f000 faa7 	bl	8082a16 <_ZN7FatFile7seekSetEm>
 80824c8:	2800      	cmp	r0, #0
 80824ca:	d0b0      	beq.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  lfnOrd = freeNeed - 1;
 80824cc:	3f01      	subs	r7, #1
 80824ce:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80824d2:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80824d4:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 80824d8:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80824da:	2e00      	cmp	r6, #0
 80824dc:	f000 8121 	beq.w	8082722 <_ZN7FatFile4openEPS_P7fname_ti+0x30a>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80824e0:	2100      	movs	r1, #0
 80824e2:	4628      	mov	r0, r5
 80824e4:	f000 fa78 	bl	80829d8 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80824e8:	4604      	mov	r4, r0
 80824ea:	2800      	cmp	r0, #0
 80824ec:	d09f      	beq.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80824ee:	4556      	cmp	r6, sl
 80824f0:	bf18      	it	ne
 80824f2:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 80824f4:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80824f6:	bf08      	it	eq
 80824f8:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 80824fc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8082500:	f043 0301 	orr.w	r3, r3, #1
 8082504:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8082508:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 808250c:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 808250e:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8082512:	f108 000d 	add.w	r0, r8, #13
 8082516:	f7ff fe3b 	bl	8082190 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808251a:	220d      	movs	r2, #13
 808251c:	2300      	movs	r3, #0
 808251e:	f00b 0b1f 	and.w	fp, fp, #31
 8082522:	f10b 3bff 	add.w	fp, fp, #4294967295
 8082526:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 808252a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 808252c:	f884 901a 	strb.w	r9, [r4, #26]
 8082530:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 8082534:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8082538:	9903      	ldr	r1, [sp, #12]
 808253a:	4291      	cmp	r1, r2
 808253c:	f240 80e2 	bls.w	8082704 <_ZN7FatFile4openEPS_P7fname_ti+0x2ec>
 8082540:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 8082544:	2b04      	cmp	r3, #4
 8082546:	fa5f fe83 	uxtb.w	lr, r3
 808254a:	f103 0001 	add.w	r0, r3, #1
 808254e:	f200 80df 	bhi.w	8082710 <_ZN7FatFile4openEPS_P7fname_ti+0x2f8>
    ldir->name1[i] = c;
 8082552:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8082556:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 808255a:	280d      	cmp	r0, #13
 808255c:	4603      	mov	r3, r0
 808255e:	f102 0201 	add.w	r2, r2, #1
 8082562:	d1e9      	bne.n	8082538 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8082564:	3e01      	subs	r6, #1
 8082566:	b2f6      	uxtb	r6, r6
 8082568:	e7b7      	b.n	80824da <_ZN7FatFile4openEPS_P7fname_ti+0xc2>
        fnameFound = true;
 808256a:	f04f 0a01 	mov.w	sl, #1
 808256e:	e784      	b.n	808247a <_ZN7FatFile4openEPS_P7fname_ti+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8082570:	7802      	ldrb	r2, [r0, #0]
 8082572:	2ae5      	cmp	r2, #229	; 0xe5
 8082574:	d000      	beq.n	8082578 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
 8082576:	b97a      	cbnz	r2, 8082598 <_ZN7FatFile4openEPS_P7fname_ti+0x180>
    curIndex = dirFile->m_curPosition/32;
 8082578:	9902      	ldr	r1, [sp, #8]
 808257a:	2c00      	cmp	r4, #0
 808257c:	bf08      	it	eq
 808257e:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 8082580:	42bc      	cmp	r4, r7
        freeFound++;
 8082582:	bf38      	it	cc
 8082584:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 8082586:	9102      	str	r1, [sp, #8]
        freeFound++;
 8082588:	bf38      	it	cc
 808258a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 808258c:	2a00      	cmp	r2, #0
 808258e:	d082      	beq.n	8082496 <_ZN7FatFile4openEPS_P7fname_ti+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8082590:	2ae5      	cmp	r2, #229	; 0xe5
 8082592:	d104      	bne.n	808259e <_ZN7FatFile4openEPS_P7fname_ti+0x186>
      lfnOrd = 0;
 8082594:	2600      	movs	r6, #0
 8082596:	e770      	b.n	808247a <_ZN7FatFile4openEPS_P7fname_ti+0x62>
        freeFound = 0;
 8082598:	42bc      	cmp	r4, r7
 808259a:	bf38      	it	cc
 808259c:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 808259e:	2a2e      	cmp	r2, #46	; 0x2e
 80825a0:	d0f8      	beq.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
    } else if (DIR_IS_LONG_NAME(dir)) {
 80825a2:	7ac1      	ldrb	r1, [r0, #11]
 80825a4:	290f      	cmp	r1, #15
 80825a6:	d15d      	bne.n	8082664 <_ZN7FatFile4openEPS_P7fname_ti+0x24c>
      if (!lfnOrd) {
 80825a8:	bb3e      	cbnz	r6, 80825fa <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80825aa:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 80825ae:	f43f af64 	beq.w	808247a <_ZN7FatFile4openEPS_P7fname_ti+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 80825b2:	f002 061f 	and.w	r6, r2, #31
 80825b6:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 80825b8:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 80825ba:	f04f 0e0d 	mov.w	lr, #13
 80825be:	f10b 32ff 	add.w	r2, fp, #4294967295
 80825c2:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 80825c6:	9a03      	ldr	r2, [sp, #12]
 80825c8:	4572      	cmp	r2, lr
 80825ca:	d9e3      	bls.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
 80825cc:	f04f 0c00 	mov.w	ip, #0
 80825d0:	eba2 020e 	sub.w	r2, r2, lr
 80825d4:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 80825d6:	f1bc 0f04 	cmp.w	ip, #4
 80825da:	eb0c 090e 	add.w	r9, ip, lr
 80825de:	fa5f f28c 	uxtb.w	r2, ip
 80825e2:	d814      	bhi.n	808260e <_ZN7FatFile4openEPS_P7fname_ti+0x1f6>
    return ldir->name1[i];
 80825e4:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 80825e8:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 80825ec:	9906      	ldr	r1, [sp, #24]
 80825ee:	458c      	cmp	ip, r1
 80825f0:	d11b      	bne.n	808262a <_ZN7FatFile4openEPS_P7fname_ti+0x212>
            lfnOrd = 0;
 80825f2:	2a00      	cmp	r2, #0
 80825f4:	bf18      	it	ne
 80825f6:	2600      	movne	r6, #0
 80825f8:	e73f      	b.n	808247a <_ZN7FatFile4openEPS_P7fname_ti+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80825fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80825fe:	fa5f fb8b 	uxtb.w	fp, fp
 8082602:	455a      	cmp	r2, fp
 8082604:	d1c6      	bne.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
 8082606:	7b42      	ldrb	r2, [r0, #13]
 8082608:	429a      	cmp	r2, r3
 808260a:	d0d6      	beq.n	80825ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a2>
 808260c:	e7c2      	b.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808260e:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082610:	bf95      	itete	ls
 8082612:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8082616:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 808261a:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808261e:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082622:	bf94      	ite	ls
 8082624:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8082626:	8892      	ldrhhi	r2, [r2, #4]
 8082628:	e7e0      	b.n	80825ec <_ZN7FatFile4openEPS_P7fname_ti+0x1d4>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808262a:	2aff      	cmp	r2, #255	; 0xff
 808262c:	d8b2      	bhi.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
 808262e:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082630:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8082634:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082636:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808263a:	bf98      	it	ls
 808263c:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808263e:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082642:	bf98      	it	ls
 8082644:	b2d2      	uxtbls	r2, r2
 8082646:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 808264a:	f1b9 0f19 	cmp.w	r9, #25
 808264e:	bf9c      	itt	ls
 8082650:	3120      	addls	r1, #32
 8082652:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082654:	4291      	cmp	r1, r2
 8082656:	d19d      	bne.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
      for (uint8_t i = 0; i < 13; i++) {
 8082658:	f10c 0c01 	add.w	ip, ip, #1
 808265c:	f1bc 0f0d 	cmp.w	ip, #13
 8082660:	d1b9      	bne.n	80825d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1be>
 8082662:	e70a      	b.n	808247a <_ZN7FatFile4openEPS_P7fname_ti+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8082664:	070a      	lsls	r2, r1, #28
 8082666:	d495      	bmi.n	8082594 <_ZN7FatFile4openEPS_P7fname_ti+0x17c>
      if (lfnOrd) {
 8082668:	b166      	cbz	r6, 8082684 <_ZN7FatFile4openEPS_P7fname_ti+0x26c>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 808266a:	f1bb 0f01 	cmp.w	fp, #1
 808266e:	9302      	str	r3, [sp, #8]
 8082670:	f47f aedd 	bne.w	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8082674:	f7ff fd8c 	bl	8082190 <_ZN7FatFile11lfnChecksumEPh>
 8082678:	9b02      	ldr	r3, [sp, #8]
 808267a:	4298      	cmp	r0, r3
 808267c:	f47f aed7 	bne.w	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8082680:	46b2      	mov	sl, r6
 8082682:	e00e      	b.n	80826a2 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8082684:	220b      	movs	r2, #11
 8082686:	9907      	ldr	r1, [sp, #28]
 8082688:	9306      	str	r3, [sp, #24]
 808268a:	f007 ffb1 	bl	808a5f0 <memcmp>
 808268e:	9b06      	ldr	r3, [sp, #24]
 8082690:	2800      	cmp	r0, #0
 8082692:	f47f aef2 	bne.w	808247a <_ZN7FatFile4openEPS_P7fname_ti+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8082696:	f898 a000 	ldrb.w	sl, [r8]
 808269a:	f01a 0a01 	ands.w	sl, sl, #1
 808269e:	f47f af64 	bne.w	808256a <_ZN7FatFile4openEPS_P7fname_ti+0x152>
  if (oflag & O_EXCL) {
 80826a2:	9b04      	ldr	r3, [sp, #16]
 80826a4:	0519      	lsls	r1, r3, #20
 80826a6:	f53f aec2 	bmi.w	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 80826aa:	464a      	mov	r2, r9
 80826ac:	4629      	mov	r1, r5
 80826ae:	9b04      	ldr	r3, [sp, #16]
 80826b0:	9805      	ldr	r0, [sp, #20]
 80826b2:	f8cd a000 	str.w	sl, [sp]
 80826b6:	f000 f9f1 	bl	8082a9c <_ZN7FatFile15openCachedEntryEPS_tih>
 80826ba:	e6b9      	b.n	8082430 <_ZN7FatFile4openEPS_P7fname_ti+0x18>
    dir = dirFile->readDirCache();
 80826bc:	2100      	movs	r1, #0
 80826be:	4628      	mov	r0, r5
 80826c0:	f000 f98a 	bl	80829d8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80826c4:	b998      	cbnz	r0, 80826ee <_ZN7FatFile4openEPS_P7fname_ti+0x2d6>
      if (dirFile->getError()) {
 80826c6:	786b      	ldrb	r3, [r5, #1]
 80826c8:	2b00      	cmp	r3, #0
 80826ca:	f47f aeb0 	bne.w	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    if (!dirFile->addDirCluster()) {
 80826ce:	4628      	mov	r0, r5
 80826d0:	f000 f86e 	bl	80827b0 <_ZN7FatFile13addDirClusterEv>
 80826d4:	2800      	cmp	r0, #0
 80826d6:	f43f aeaa 	beq.w	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80826da:	68ab      	ldr	r3, [r5, #8]
 80826dc:	791b      	ldrb	r3, [r3, #4]
 80826de:	2b01      	cmp	r3, #1
 80826e0:	f63f aee9 	bhi.w	80824b6 <_ZN7FatFile4openEPS_P7fname_ti+0x9e>
    freeFound += 16;
 80826e4:	3410      	adds	r4, #16
 80826e6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 80826e8:	42a7      	cmp	r7, r4
 80826ea:	d8f0      	bhi.n	80826ce <_ZN7FatFile4openEPS_P7fname_ti+0x2b6>
 80826ec:	e6e3      	b.n	80824b6 <_ZN7FatFile4openEPS_P7fname_ti+0x9e>
    freeFound++;
 80826ee:	3401      	adds	r4, #1
 80826f0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 80826f2:	e6dd      	b.n	80824b0 <_ZN7FatFile4openEPS_P7fname_ti+0x98>
    if (!dirFile->lfnUniqueSfn(fname)) {
 80826f4:	4641      	mov	r1, r8
 80826f6:	4628      	mov	r0, r5
 80826f8:	f7ff fe3a 	bl	8082370 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80826fc:	2800      	cmp	r0, #0
 80826fe:	f47f aede 	bne.w	80824be <_ZN7FatFile4openEPS_P7fname_ti+0xa6>
 8082702:	e694      	b.n	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8082704:	bf14      	ite	ne
 8082706:	f04f 31ff 	movne.w	r1, #4294967295
 808270a:	2100      	moveq	r1, #0
 808270c:	b289      	uxth	r1, r1
 808270e:	e719      	b.n	8082544 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8082710:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8082714:	bf94      	ite	ls
 8082716:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 808271a:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 808271e:	8099      	strh	r1, [r3, #4]
 8082720:	e71b      	b.n	808255a <_ZN7FatFile4openEPS_P7fname_ti+0x142>
  dir = dirFile->readDirCache();
 8082722:	4631      	mov	r1, r6
 8082724:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8082726:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 8082728:	f000 f956 	bl	80829d8 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 808272c:	4604      	mov	r4, r0
 808272e:	2800      	cmp	r0, #0
 8082730:	f43f ae7d 	beq.w	808242e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  memset(dir, 0, sizeof(dir_t));
 8082734:	2220      	movs	r2, #32
 8082736:	4631      	mov	r1, r6
 8082738:	f007 ff76 	bl	808a628 <memset>
  memcpy(dir->name, fname->sfn, 11);
 808273c:	4643      	mov	r3, r8
 808273e:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8082742:	6022      	str	r2, [r4, #0]
 8082744:	685a      	ldr	r2, [r3, #4]
 8082746:	6062      	str	r2, [r4, #4]
 8082748:	891a      	ldrh	r2, [r3, #8]
 808274a:	8122      	strh	r2, [r4, #8]
 808274c:	7a9b      	ldrb	r3, [r3, #10]
 808274e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8082750:	f898 3000 	ldrb.w	r3, [r8]
 8082754:	f003 0318 	and.w	r3, r3, #24
 8082758:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 808275a:	4b0f      	ldr	r3, [pc, #60]	; (8082798 <_ZN7FatFile4openEPS_P7fname_ti+0x380>)
 808275c:	681b      	ldr	r3, [r3, #0]
 808275e:	b19b      	cbz	r3, 8082788 <_ZN7FatFile4openEPS_P7fname_ti+0x370>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8082760:	f104 010e 	add.w	r1, r4, #14
 8082764:	f104 0010 	add.w	r0, r4, #16
 8082768:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 808276a:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 808276c:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8082770:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8082772:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8082774:	89e3      	ldrh	r3, [r4, #14]
 8082776:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8082778:	68aa      	ldr	r2, [r5, #8]
 808277a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 808277e:	f043 0301 	orr.w	r3, r3, #1
 8082782:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8082786:	e790      	b.n	80826aa <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    dir->creationDate = FAT_DEFAULT_DATE;
 8082788:	2321      	movs	r3, #33	; 0x21
 808278a:	7423      	strb	r3, [r4, #16]
 808278c:	2328      	movs	r3, #40	; 0x28
 808278e:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8082790:	2308      	movs	r3, #8
 8082792:	73a6      	strb	r6, [r4, #14]
 8082794:	73e3      	strb	r3, [r4, #15]
 8082796:	e7e8      	b.n	808276a <_ZN7FatFile4openEPS_P7fname_ti+0x352>
 8082798:	200008f0 	.word	0x200008f0

0808279c <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808279c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808279e:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 80827a0:	f043 0304 	orr.w	r3, r3, #4
 80827a4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80827a6:	f100 0210 	add.w	r2, r0, #16
 80827aa:	6880      	ldr	r0, [r0, #8]
 80827ac:	f000 bbf9 	b.w	8082fa2 <_ZN9FatVolume15allocateClusterEmPm>

080827b0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80827b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80827b4:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 80827b6:	4604      	mov	r4, r0
  if (isRootFixed()) {
 80827b8:	f011 0520 	ands.w	r5, r1, #32
 80827bc:	d003      	beq.n	80827c6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80827be:	2600      	movs	r6, #0
}
 80827c0:	4630      	mov	r0, r6
 80827c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 80827c6:	6942      	ldr	r2, [r0, #20]
 80827c8:	4b17      	ldr	r3, [pc, #92]	; (8082828 <_ZN7FatFile13addDirClusterEv+0x78>)
 80827ca:	429a      	cmp	r2, r3
 80827cc:	d2f7      	bcs.n	80827be <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 80827ce:	f7ff ffe5 	bl	808279c <_ZN7FatFile10addClusterEv>
 80827d2:	4606      	mov	r6, r0
 80827d4:	2800      	cmp	r0, #0
 80827d6:	d0f2      	beq.n	80827be <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
 80827d8:	6921      	ldr	r1, [r4, #16]
 80827da:	68a0      	ldr	r0, [r4, #8]
 80827dc:	f000 fb76 	bl	8082ecc <_ZNK9FatVolume17clusterFirstBlockEm>
 80827e0:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 80827e2:	68a0      	ldr	r0, [r4, #8]
 80827e4:	2205      	movs	r2, #5
 80827e6:	4639      	mov	r1, r7
 80827e8:	3024      	adds	r0, #36	; 0x24
 80827ea:	f000 fb4c 	bl	8082e86 <_ZN8FatCache4readEmh>
  if (!pc) {
 80827ee:	4680      	mov	r8, r0
 80827f0:	2800      	cmp	r0, #0
 80827f2:	d0e4      	beq.n	80827be <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 80827f4:	4629      	mov	r1, r5
 80827f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80827fa:	f007 ff15 	bl	808a628 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80827fe:	2501      	movs	r5, #1
 8082800:	68a3      	ldr	r3, [r4, #8]
 8082802:	791a      	ldrb	r2, [r3, #4]
 8082804:	42aa      	cmp	r2, r5
 8082806:	d909      	bls.n	808281c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
 8082808:	4642      	mov	r2, r8
 808280a:	6818      	ldr	r0, [r3, #0]
 808280c:	19e9      	adds	r1, r5, r7
 808280e:	f000 fea4 	bl	808355a <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8082812:	2800      	cmp	r0, #0
 8082814:	d0d3      	beq.n	80827be <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8082816:	3501      	adds	r5, #1
 8082818:	b2ed      	uxtb	r5, r5
 808281a:	e7f1      	b.n	8082800 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 808281c:	6963      	ldr	r3, [r4, #20]
 808281e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8082822:	6163      	str	r3, [r4, #20]
  return true;
 8082824:	e7cc      	b.n	80827c0 <_ZN7FatFile13addDirClusterEv+0x10>
 8082826:	bf00      	nop
 8082828:	001ffe00 	.word	0x001ffe00

0808282c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 808282c:	b510      	push	{r4, lr}
 808282e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
 8082830:	6880      	ldr	r0, [r0, #8]
 8082832:	460a      	mov	r2, r1
 8082834:	3024      	adds	r0, #36	; 0x24
 8082836:	69a1      	ldr	r1, [r4, #24]
 8082838:	f000 fb25 	bl	8082e86 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 808283c:	b120      	cbz	r0, 8082848 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808283e:	88a3      	ldrh	r3, [r4, #4]
 8082840:	f003 030f 	and.w	r3, r3, #15
 8082844:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8082848:	bd10      	pop	{r4, pc}

0808284a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808284a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 808284c:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 808284e:	4605      	mov	r5, r0
 8082850:	460e      	mov	r6, r1
  if (isOpen()) {
 8082852:	b94c      	cbnz	r4, 8082868 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8082854:	2224      	movs	r2, #36	; 0x24
 8082856:	4621      	mov	r1, r4
 8082858:	f007 fee6 	bl	808a628 <memset>

  m_vol = vol;
 808285c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808285e:	79f3      	ldrb	r3, [r6, #7]
 8082860:	2b10      	cmp	r3, #16
 8082862:	d003      	beq.n	808286c <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8082864:	2b20      	cmp	r3, #32
 8082866:	d007      	beq.n	8082878 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
 8082868:	2000      	movs	r0, #0
 808286a:	e004      	b.n	8082876 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 808286c:	2320      	movs	r3, #32
  m_flags = F_READ;
 808286e:	2401      	movs	r4, #1
  return true;
 8082870:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 8082872:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
 8082874:	70ac      	strb	r4, [r5, #2]
}
 8082876:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 8082878:	2340      	movs	r3, #64	; 0x40
 808287a:	e7f8      	b.n	808286e <_ZN7FatFile8openRootEP9FatVolume+0x24>

0808287c <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 808287c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8082880:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 8082882:	4604      	mov	r4, r0
 8082884:	4688      	mov	r8, r1
 8082886:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
 8082888:	2b00      	cmp	r3, #0
 808288a:	d05d      	beq.n	8082948 <_ZN7FatFile4readEPvj+0xcc>
 808288c:	7882      	ldrb	r2, [r0, #2]
 808288e:	07d1      	lsls	r1, r2, #31
 8082890:	d55a      	bpl.n	8082948 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8082892:	071a      	lsls	r2, r3, #28
 8082894:	d52d      	bpl.n	80828f2 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8082896:	69c3      	ldr	r3, [r0, #28]
 8082898:	6942      	ldr	r2, [r0, #20]
 808289a:	1a9b      	subs	r3, r3, r2
 808289c:	429d      	cmp	r5, r3
 808289e:	bf28      	it	cs
 80828a0:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80828a2:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 80828a4:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80828a8:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 80828ac:	2e00      	cmp	r6, #0
 80828ae:	f000 808f 	beq.w	80829d0 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
 80828b2:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 80828b4:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80828b6:	0697      	lsls	r7, r2, #26
 80828b8:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 80828ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 80828be:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80828c2:	d51f      	bpl.n	8082904 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80828c4:	6a00      	ldr	r0, [r0, #32]
 80828c6:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80828c8:	68a0      	ldr	r0, [r4, #8]
 80828ca:	f1ba 0f00 	cmp.w	sl, #0
 80828ce:	d142      	bne.n	8082956 <_ZN7FatFile4readEPvj+0xda>
 80828d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80828d4:	d33f      	bcc.n	8082956 <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 80828d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80828d8:	4299      	cmp	r1, r3
 80828da:	d03c      	beq.n	8082956 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80828dc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80828e0:	d252      	bcs.n	8082988 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
 80828e2:	4642      	mov	r2, r8
 80828e4:	6800      	ldr	r0, [r0, #0]
 80828e6:	f000 fdaf 	bl	8083448 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80828ea:	b368      	cbz	r0, 8082948 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 80828ec:	f44f 7700 	mov.w	r7, #512	; 0x200
 80828f0:	e044      	b.n	808297c <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 80828f2:	069b      	lsls	r3, r3, #26
 80828f4:	d5d5      	bpl.n	80828a2 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80828f6:	6883      	ldr	r3, [r0, #8]
 80828f8:	891a      	ldrh	r2, [r3, #8]
 80828fa:	6943      	ldr	r3, [r0, #20]
 80828fc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 8082900:	b29b      	uxth	r3, r3
 8082902:	e7cb      	b.n	808289c <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8082904:	f890 9005 	ldrb.w	r9, [r0, #5]
 8082908:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 808290c:	f1ba 0f00 	cmp.w	sl, #0
 8082910:	d108      	bne.n	8082924 <_ZN7FatFile4readEPvj+0xa8>
 8082912:	f1b9 0f00 	cmp.w	r9, #0
 8082916:	d105      	bne.n	8082924 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 8082918:	b95b      	cbnz	r3, 8082932 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808291a:	0651      	lsls	r1, r2, #25
 808291c:	bf4c      	ite	mi
 808291e:	6a03      	ldrmi	r3, [r0, #32]
 8082920:	6a23      	ldrpl	r3, [r4, #32]
 8082922:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8082924:	6921      	ldr	r1, [r4, #16]
 8082926:	68a0      	ldr	r0, [r4, #8]
 8082928:	f000 fad0 	bl	8082ecc <_ZNK9FatVolume17clusterFirstBlockEm>
 808292c:	eb09 0100 	add.w	r1, r9, r0
 8082930:	e7ca      	b.n	80828c8 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8082932:	465a      	mov	r2, fp
 8082934:	6921      	ldr	r1, [r4, #16]
 8082936:	f000 facf 	bl	8082ed8 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 808293a:	2800      	cmp	r0, #0
 808293c:	db04      	blt.n	8082948 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 808293e:	d1f1      	bne.n	8082924 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 8082940:	7823      	ldrb	r3, [r4, #0]
 8082942:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082946:	d143      	bne.n	80829d0 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8082948:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808294a:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 808294e:	f043 0302 	orr.w	r3, r3, #2
 8082952:	7063      	strb	r3, [r4, #1]
  return -1;
 8082954:	e03d      	b.n	80829d2 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
 8082956:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 808295a:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 808295c:	f04f 0200 	mov.w	r2, #0
 8082960:	f100 0024 	add.w	r0, r0, #36	; 0x24
 8082964:	bf28      	it	cs
 8082966:	4637      	movcs	r7, r6
 8082968:	f000 fa8d 	bl	8082e86 <_ZN8FatCache4readEmh>
      if (!pc) {
 808296c:	2800      	cmp	r0, #0
 808296e:	d0eb      	beq.n	8082948 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 8082970:	eb00 010a 	add.w	r1, r0, sl
 8082974:	463a      	mov	r2, r7
 8082976:	4640      	mov	r0, r8
 8082978:	f007 fe48 	bl	808a60c <memcpy>
    m_curPosition += n;
 808297c:	6963      	ldr	r3, [r4, #20]
    dst += n;
 808297e:	44b8      	add	r8, r7
    m_curPosition += n;
 8082980:	443b      	add	r3, r7
 8082982:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8082984:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 8082986:	e791      	b.n	80828ac <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 8082988:	7822      	ldrb	r2, [r4, #0]
      size_t nb = toRead >> 9;
 808298a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 808298e:	0692      	lsls	r2, r2, #26
 8082990:	d406      	bmi.n	80829a0 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8082992:	7902      	ldrb	r2, [r0, #4]
 8082994:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
 8082998:	b2d2      	uxtb	r2, r2
 808299a:	4592      	cmp	sl, r2
 808299c:	bf28      	it	cs
 808299e:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80829a0:	4299      	cmp	r1, r3
      n = 512*nb;
 80829a2:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80829a6:	d208      	bcs.n	80829ba <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
 80829a8:	68a0      	ldr	r0, [r4, #8]
 80829aa:	4653      	mov	r3, sl
 80829ac:	4642      	mov	r2, r8
 80829ae:	6800      	ldr	r0, [r0, #0]
 80829b0:	f000 fd92 	bl	80834d8 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
 80829b4:	2800      	cmp	r0, #0
 80829b6:	d1e1      	bne.n	808297c <_ZN7FatFile4readEPvj+0x100>
 80829b8:	e7c6      	b.n	8082948 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80829ba:	4453      	add	r3, sl
 80829bc:	428b      	cmp	r3, r1
 80829be:	d9f3      	bls.n	80829a8 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
 80829c0:	3024      	adds	r0, #36	; 0x24
 80829c2:	9101      	str	r1, [sp, #4]
 80829c4:	f000 fa38 	bl	8082e38 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
 80829c8:	9901      	ldr	r1, [sp, #4]
 80829ca:	2800      	cmp	r0, #0
 80829cc:	d1ec      	bne.n	80829a8 <_ZN7FatFile4readEPvj+0x12c>
 80829ce:	e7bb      	b.n	8082948 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 80829d0:	1ba8      	subs	r0, r5, r6
}
 80829d2:	b003      	add	sp, #12
 80829d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080829d8 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80829d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80829da:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80829dc:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 80829de:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80829e2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 80829e6:	d000      	beq.n	80829ea <_ZN7FatFile12readDirCacheEb+0x12>
 80829e8:	b999      	cbnz	r1, 8082a12 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 80829ea:	2201      	movs	r2, #1
 80829ec:	4620      	mov	r0, r4
 80829ee:	f10d 0107 	add.w	r1, sp, #7
 80829f2:	f7ff ff43 	bl	808287c <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 80829f6:	b240      	sxtb	r0, r0
 80829f8:	2801      	cmp	r0, #1
 80829fa:	d002      	beq.n	8082a02 <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80829fc:	2000      	movs	r0, #0
}
 80829fe:	b003      	add	sp, #12
 8082a00:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 8082a02:	6963      	ldr	r3, [r4, #20]
 8082a04:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 8082a06:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 8082a08:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 8082a0a:	3030      	adds	r0, #48	; 0x30
 8082a0c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8082a10:	e7f5      	b.n	80829fe <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 8082a12:	3320      	adds	r3, #32
 8082a14:	e7f7      	b.n	8082a06 <_ZN7FatFile12readDirCacheEb+0x2e>

08082a16 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8082a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
 8082a1a:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 8082a1c:	4604      	mov	r4, r0
 8082a1e:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 8082a20:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 8082a22:	b162      	cbz	r2, 8082a3e <_ZN7FatFile7seekSetEm+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8082a24:	6940      	ldr	r0, [r0, #20]
 8082a26:	4288      	cmp	r0, r1
 8082a28:	d002      	beq.n	8082a30 <_ZN7FatFile7seekSetEm+0x1a>
    return true;
  }
  if (pos == 0) {
 8082a2a:	b919      	cbnz	r1, 8082a34 <_ZN7FatFile7seekSetEm+0x1e>
    // set position to start of file
    m_curCluster = 0;
 8082a2c:	6121      	str	r1, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8082a2e:	6165      	str	r5, [r4, #20]
    return true;
 8082a30:	2001      	movs	r0, #1
 8082a32:	e006      	b.n	8082a42 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 8082a34:	0716      	lsls	r6, r2, #28
 8082a36:	d506      	bpl.n	8082a46 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 8082a38:	69e3      	ldr	r3, [r4, #28]
 8082a3a:	428b      	cmp	r3, r1
 8082a3c:	d20b      	bcs.n	8082a56 <_ZN7FatFile7seekSetEm+0x40>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 8082a3e:	2000      	movs	r0, #0
  m_curCluster = tmp;
 8082a40:	6127      	str	r7, [r4, #16]
}
 8082a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 8082a46:	0691      	lsls	r1, r2, #26
 8082a48:	d505      	bpl.n	8082a56 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8082a4a:	68a3      	ldr	r3, [r4, #8]
 8082a4c:	891b      	ldrh	r3, [r3, #8]
 8082a4e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 8082a52:	d9ec      	bls.n	8082a2e <_ZN7FatFile7seekSetEm+0x18>
 8082a54:	e7f3      	b.n	8082a3e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8082a56:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8082a5a:	1e43      	subs	r3, r0, #1
 8082a5c:	f89c 6006 	ldrb.w	r6, [ip, #6]
 8082a60:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8082a64:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8082a66:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8082a68:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 8082a6a:	42b3      	cmp	r3, r6
 8082a6c:	d800      	bhi.n	8082a70 <_ZN7FatFile7seekSetEm+0x5a>
 8082a6e:	b998      	cbnz	r0, 8082a98 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8082a70:	0653      	lsls	r3, r2, #25
 8082a72:	bf4c      	ite	mi
 8082a74:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 8082a78:	6a23      	ldrpl	r3, [r4, #32]
 8082a7a:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8082a7c:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 8082a80:	2e00      	cmp	r6, #0
 8082a82:	d0d4      	beq.n	8082a2e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8082a84:	4642      	mov	r2, r8
 8082a86:	6921      	ldr	r1, [r4, #16]
 8082a88:	68a0      	ldr	r0, [r4, #8]
 8082a8a:	f000 fa25 	bl	8082ed8 <_ZN9FatVolume6fatGetEmPm>
 8082a8e:	2800      	cmp	r0, #0
 8082a90:	f106 36ff 	add.w	r6, r6, #4294967295
 8082a94:	dcf4      	bgt.n	8082a80 <_ZN7FatFile7seekSetEm+0x6a>
 8082a96:	e7d2      	b.n	8082a3e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 8082a98:	1af6      	subs	r6, r6, r3
 8082a9a:	e7ef      	b.n	8082a7c <_ZN7FatFile7seekSetEm+0x66>

08082a9c <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 8082a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a9e:	460f      	mov	r7, r1
 8082aa0:	4604      	mov	r4, r0
 8082aa2:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
 8082aa4:	2100      	movs	r1, #0
 8082aa6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 8082aa8:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
 8082aaa:	f007 fdbd 	bl	808a628 <memset>
  m_vol = dirFile->m_vol;
 8082aae:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8082ab0:	80a6      	strh	r6, [r4, #4]
  m_vol = dirFile->m_vol;
 8082ab2:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 8082ab4:	6a3b      	ldr	r3, [r7, #32]
 8082ab6:	f006 060f 	and.w	r6, r6, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8082aba:	f100 0230 	add.w	r2, r0, #48	; 0x30
  m_dirCluster = dirFile->m_firstCluster;
 8082abe:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8082ac0:	0171      	lsls	r1, r6, #5
 8082ac2:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8082ac6:	7af3      	ldrb	r3, [r6, #11]
 8082ac8:	071f      	lsls	r7, r3, #28
 8082aca:	d446      	bmi.n	8082b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8082acc:	1843      	adds	r3, r0, r1
 8082ace:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8082ad2:	f003 0317 	and.w	r3, r3, #23
 8082ad6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8082ad8:	7af2      	ldrb	r2, [r6, #11]
 8082ada:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 8082ade:	bf04      	itt	eq
 8082ae0:	f043 0308 	orreq.w	r3, r3, #8
 8082ae4:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 8082ae6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8082aea:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 8082aec:	f005 0303 	and.w	r3, r5, #3
 8082af0:	2b01      	cmp	r3, #1
 8082af2:	d02c      	beq.n	8082b4e <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
 8082af4:	2b02      	cmp	r3, #2
 8082af6:	d028      	beq.n	8082b4a <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
 8082af8:	bb7b      	cbnz	r3, 8082b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
 8082afa:	056a      	lsls	r2, r5, #21
 8082afc:	d42d      	bmi.n	8082b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
 8082afe:	2301      	movs	r3, #1
      m_flags = F_WRITE;
 8082b00:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
 8082b02:	78a2      	ldrb	r2, [r4, #2]
 8082b04:	0793      	lsls	r3, r2, #30
 8082b06:	d504      	bpl.n	8082b12 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
 8082b08:	7823      	ldrb	r3, [r4, #0]
 8082b0a:	06df      	lsls	r7, r3, #27
 8082b0c:	d425      	bmi.n	8082b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
 8082b0e:	07de      	lsls	r6, r3, #31
 8082b10:	d423      	bmi.n	8082b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 8082b12:	11ab      	asrs	r3, r5, #6
 8082b14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8082b18:	f005 0608 	and.w	r6, r5, #8
 8082b1c:	4333      	orrs	r3, r6
 8082b1e:	4313      	orrs	r3, r2
 8082b20:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
 8082b22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
 8082b24:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8082b26:	1843      	adds	r3, r0, r1
 8082b28:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
 8082b2c:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8082b30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 8082b34:	056a      	lsls	r2, r5, #21
 8082b36:	d513      	bpl.n	8082b60 <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8082b38:	b959      	cbnz	r1, 8082b52 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
 8082b3a:	78a3      	ldrb	r3, [r4, #2]
 8082b3c:	f043 0304 	orr.w	r3, r3, #4
 8082b40:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8082b42:	046b      	lsls	r3, r5, #17
 8082b44:	d410      	bmi.n	8082b68 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
 8082b46:	2001      	movs	r0, #1
}
 8082b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
 8082b4a:	2303      	movs	r3, #3
 8082b4c:	e7d8      	b.n	8082b00 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
 8082b4e:	2302      	movs	r3, #2
 8082b50:	e7d6      	b.n	8082b00 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8082b52:	f000 fa61 	bl	8083018 <_ZN9FatVolume9freeChainEm>
 8082b56:	2800      	cmp	r0, #0
 8082b58:	d1ef      	bne.n	8082b3a <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
 8082b5a:	2000      	movs	r0, #0
 8082b5c:	7020      	strb	r0, [r4, #0]
  return false;
 8082b5e:	e7f3      	b.n	8082b48 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
 8082b60:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8082b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082b64:	61e3      	str	r3, [r4, #28]
 8082b66:	e7ec      	b.n	8082b42 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8082b68:	4620      	mov	r0, r4
 8082b6a:	69e1      	ldr	r1, [r4, #28]
 8082b6c:	f7ff ff53 	bl	8082a16 <_ZN7FatFile7seekSetEm>
 8082b70:	2800      	cmp	r0, #0
 8082b72:	d1e8      	bne.n	8082b46 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
 8082b74:	e7f1      	b.n	8082b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
	...

08082b78 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8082b78:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8082b7a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 8082b7c:	4604      	mov	r4, r0
  if (!isOpen()) {
 8082b7e:	b90b      	cbnz	r3, 8082b84 <_ZN7FatFile4syncEv+0xc>
    return true;
 8082b80:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 8082b82:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 8082b84:	7883      	ldrb	r3, [r0, #2]
 8082b86:	075a      	lsls	r2, r3, #29
 8082b88:	d523      	bpl.n	8082bd2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8082b8a:	2101      	movs	r1, #1
 8082b8c:	f7ff fe4e 	bl	808282c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8082b90:	4605      	mov	r5, r0
 8082b92:	b928      	cbnz	r0, 8082ba0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
 8082b94:	7863      	ldrb	r3, [r4, #1]
  return false;
 8082b96:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 8082b98:	f043 0301 	orr.w	r3, r3, #1
 8082b9c:	7063      	strb	r3, [r4, #1]
  return false;
 8082b9e:	e7f0      	b.n	8082b82 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8082ba0:	7803      	ldrb	r3, [r0, #0]
 8082ba2:	2be5      	cmp	r3, #229	; 0xe5
 8082ba4:	d0f6      	beq.n	8082b94 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
 8082ba6:	7823      	ldrb	r3, [r4, #0]
 8082ba8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8082baa:	bf44      	itt	mi
 8082bac:	69e3      	ldrmi	r3, [r4, #28]
 8082bae:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8082bb0:	8c23      	ldrh	r3, [r4, #32]
 8082bb2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8082bb4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8082bb6:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 8082bb8:	4b09      	ldr	r3, [pc, #36]	; (8082be0 <_ZN7FatFile4syncEv+0x68>)
 8082bba:	681b      	ldr	r3, [r3, #0]
 8082bbc:	b12b      	cbz	r3, 8082bca <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8082bbe:	f100 0116 	add.w	r1, r0, #22
 8082bc2:	3018      	adds	r0, #24
 8082bc4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8082bc6:	8b2b      	ldrh	r3, [r5, #24]
 8082bc8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 8082bca:	78a3      	ldrb	r3, [r4, #2]
 8082bcc:	f023 0304 	bic.w	r3, r3, #4
 8082bd0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 8082bd2:	68a0      	ldr	r0, [r4, #8]
 8082bd4:	f7ff facf 	bl	8082176 <_ZN9FatVolume9cacheSyncEv>
 8082bd8:	2800      	cmp	r0, #0
 8082bda:	d0db      	beq.n	8082b94 <_ZN7FatFile4syncEv+0x1c>
 8082bdc:	e7d0      	b.n	8082b80 <_ZN7FatFile4syncEv+0x8>
 8082bde:	bf00      	nop
 8082be0:	200008f0 	.word	0x200008f0

08082be4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 8082be4:	b510      	push	{r4, lr}
 8082be6:	4604      	mov	r4, r0
  bool rtn = sync();
 8082be8:	f7ff ffc6 	bl	8082b78 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8082bec:	2300      	movs	r3, #0
 8082bee:	7023      	strb	r3, [r4, #0]
}
 8082bf0:	bd10      	pop	{r4, pc}

08082bf2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8082bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082bf4:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8082bf6:	2300      	movs	r3, #0
 8082bf8:	b093      	sub	sp, #76	; 0x4c
 8082bfa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 8082bfe:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8082c00:	4606      	mov	r6, r0
 8082c02:	460c      	mov	r4, r1
 8082c04:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 8082c06:	b113      	cbz	r3, 8082c0e <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
 8082c08:	2000      	movs	r0, #0
}
 8082c0a:	b013      	add	sp, #76	; 0x4c
 8082c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 8082c0e:	780b      	ldrb	r3, [r1, #0]
 8082c10:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082c14:	d0f8      	beq.n	8082c08 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
 8082c16:	7813      	ldrb	r3, [r2, #0]
 8082c18:	2b2f      	cmp	r3, #47	; 0x2f
 8082c1a:	d112      	bne.n	8082c42 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
 8082c1c:	9a01      	ldr	r2, [sp, #4]
 8082c1e:	7813      	ldrb	r3, [r2, #0]
 8082c20:	2b2f      	cmp	r3, #47	; 0x2f
 8082c22:	d102      	bne.n	8082c2a <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
 8082c24:	3201      	adds	r2, #1
 8082c26:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 8082c28:	e7f8      	b.n	8082c1c <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
 8082c2a:	68a1      	ldr	r1, [r4, #8]
 8082c2c:	b91b      	cbnz	r3, 8082c36 <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
 8082c2e:	4630      	mov	r0, r6
 8082c30:	f7ff fe0b 	bl	808284a <_ZN7FatFile8openRootEP9FatVolume>
 8082c34:	e7e9      	b.n	8082c0a <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8082c36:	a809      	add	r0, sp, #36	; 0x24
 8082c38:	f7ff fe07 	bl	808284a <_ZN7FatFile8openRootEP9FatVolume>
 8082c3c:	2800      	cmp	r0, #0
 8082c3e:	d0e3      	beq.n	8082c08 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
 8082c40:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 8082c42:	9801      	ldr	r0, [sp, #4]
 8082c44:	aa01      	add	r2, sp, #4
 8082c46:	a903      	add	r1, sp, #12
 8082c48:	f7ff fab2 	bl	80821b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8082c4c:	2800      	cmp	r0, #0
 8082c4e:	d0db      	beq.n	8082c08 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
 8082c50:	9b01      	ldr	r3, [sp, #4]
 8082c52:	781b      	ldrb	r3, [r3, #0]
 8082c54:	b19b      	cbz	r3, 8082c7e <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
 8082c56:	2300      	movs	r3, #0
 8082c58:	4621      	mov	r1, r4
 8082c5a:	4630      	mov	r0, r6
 8082c5c:	aa03      	add	r2, sp, #12
 8082c5e:	f7ff fbdb 	bl	8082418 <_ZN7FatFile4openEPS_P7fname_ti>
 8082c62:	2800      	cmp	r0, #0
 8082c64:	d0d0      	beq.n	8082c08 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
 8082c66:	4635      	mov	r5, r6
 8082c68:	ac09      	add	r4, sp, #36	; 0x24
 8082c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082c72:	682b      	ldr	r3, [r5, #0]
    close();
 8082c74:	4630      	mov	r0, r6
    tmpDir = *this;
 8082c76:	6023      	str	r3, [r4, #0]
    close();
 8082c78:	f7ff ffb4 	bl	8082be4 <_ZN7FatFile5closeEv>
  while (1) {
 8082c7c:	e7e0      	b.n	8082c40 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
 8082c7e:	463b      	mov	r3, r7
 8082c80:	4621      	mov	r1, r4
 8082c82:	4630      	mov	r0, r6
 8082c84:	aa03      	add	r2, sp, #12
 8082c86:	f7ff fbc7 	bl	8082418 <_ZN7FatFile4openEPS_P7fname_ti>
 8082c8a:	e7be      	b.n	8082c0a <_ZN7FatFile4openEPS_PKci+0x18>

08082c8c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082c90:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 8082c92:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082c94:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 8082c96:	4604      	mov	r4, r0
 8082c98:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082c9a:	d55b      	bpl.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
 8082c9c:	7883      	ldrb	r3, [r0, #2]
 8082c9e:	079a      	lsls	r2, r3, #30
 8082ca0:	d558      	bpl.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8082ca2:	071b      	lsls	r3, r3, #28
 8082ca4:	d451      	bmi.n	8082d4a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8082ca6:	6963      	ldr	r3, [r4, #20]
 8082ca8:	43db      	mvns	r3, r3
 8082caa:	42bb      	cmp	r3, r7
 8082cac:	d352      	bcc.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
 8082cae:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8082cb0:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 8082cb4:	6966      	ldr	r6, [r4, #20]
 8082cb6:	f1b8 0f00 	cmp.w	r8, #0
 8082cba:	f000 8091 	beq.w	8082de0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8082cbe:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8082cc0:	f3c6 0508 	ubfx	r5, r6, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 8082cc4:	7943      	ldrb	r3, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8082cc6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
 8082cca:	d10e      	bne.n	8082cea <_ZN7FatFile5writeEPKvj+0x5e>
 8082ccc:	b96d      	cbnz	r5, 8082cea <_ZN7FatFile5writeEPKvj+0x5e>
 8082cce:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 8082cd0:	2900      	cmp	r1, #0
 8082cd2:	d046      	beq.n	8082d62 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8082cd4:	4652      	mov	r2, sl
 8082cd6:	f000 f8ff 	bl	8082ed8 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8082cda:	2800      	cmp	r0, #0
 8082cdc:	db3a      	blt.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8082cde:	d104      	bne.n	8082cea <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8082ce0:	4620      	mov	r0, r4
 8082ce2:	f7ff fd5b 	bl	808279c <_ZN7FatFile10addClusterEv>
 8082ce6:	2800      	cmp	r0, #0
 8082ce8:	d034      	beq.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8082cea:	6921      	ldr	r1, [r4, #16]
 8082cec:	68a0      	ldr	r0, [r4, #8]
 8082cee:	f000 f8ed 	bl	8082ecc <_ZNK9FatVolume17clusterFirstBlockEm>
 8082cf2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8082cf4:	68a0      	ldr	r0, [r4, #8]
 8082cf6:	b915      	cbnz	r5, 8082cfe <_ZN7FatFile5writeEPKvj+0x72>
 8082cf8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8082cfc:	d23f      	bcs.n	8082d7e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8082cfe:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 8082d02:	4546      	cmp	r6, r8
 8082d04:	bf28      	it	cs
 8082d06:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8082d08:	2d00      	cmp	r5, #0
 8082d0a:	d136      	bne.n	8082d7a <_ZN7FatFile5writeEPKvj+0xee>
 8082d0c:	6962      	ldr	r2, [r4, #20]
 8082d0e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8082d10:	429a      	cmp	r2, r3
 8082d12:	bf34      	ite	cc
 8082d14:	2201      	movcc	r2, #1
 8082d16:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8082d18:	3024      	adds	r0, #36	; 0x24
 8082d1a:	f000 f8b4 	bl	8082e86 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8082d1e:	b1c8      	cbz	r0, 8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082d20:	4428      	add	r0, r5
 8082d22:	4632      	mov	r2, r6
 8082d24:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8082d26:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8082d28:	f007 fc70 	bl	808a60c <memcpy>
      if (512 == (n + blockOffset)) {
 8082d2c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8082d30:	d104      	bne.n	8082d3c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 8082d32:	68a0      	ldr	r0, [r4, #8]
 8082d34:	3024      	adds	r0, #36	; 0x24
 8082d36:	f000 f87f 	bl	8082e38 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 8082d3a:	b158      	cbz	r0, 8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8082d3c:	6963      	ldr	r3, [r4, #20]
    src += n;
 8082d3e:	44b1      	add	r9, r6
    m_curPosition += n;
 8082d40:	4433      	add	r3, r6
 8082d42:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 8082d44:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 8082d48:	e7b4      	b.n	8082cb4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 8082d4a:	69c1      	ldr	r1, [r0, #28]
 8082d4c:	f7ff fe63 	bl	8082a16 <_ZN7FatFile7seekSetEm>
 8082d50:	2800      	cmp	r0, #0
 8082d52:	d1a8      	bne.n	8082ca6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8082d54:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8082d56:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 8082d5a:	f043 0301 	orr.w	r3, r3, #1
 8082d5e:	7063      	strb	r3, [r4, #1]
  return -1;
 8082d60:	e050      	b.n	8082e04 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
 8082d62:	6a23      	ldr	r3, [r4, #32]
 8082d64:	b93b      	cbnz	r3, 8082d76 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 8082d66:	4620      	mov	r0, r4
 8082d68:	f7ff fd18 	bl	808279c <_ZN7FatFile10addClusterEv>
 8082d6c:	2800      	cmp	r0, #0
 8082d6e:	d0f1      	beq.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 8082d70:	6923      	ldr	r3, [r4, #16]
 8082d72:	6223      	str	r3, [r4, #32]
 8082d74:	e7b9      	b.n	8082cea <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 8082d76:	6123      	str	r3, [r4, #16]
 8082d78:	e7b7      	b.n	8082cea <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8082d7a:	2201      	movs	r2, #1
 8082d7c:	e7cc      	b.n	8082d18 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 8082d7e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8082d82:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8082d84:	d31b      	bcc.n	8082dbe <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8082d86:	f890 c004 	ldrb.w	ip, [r0, #4]
      size_t nb = nToWrite >> 9;
 8082d8a:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8082d8e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
 8082d92:	b2f3      	uxtb	r3, r6
 8082d94:	4573      	cmp	r3, lr
 8082d96:	bf28      	it	cs
 8082d98:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082d9a:	4291      	cmp	r1, r2
      n = 512*nb;
 8082d9c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082da0:	d307      	bcc.n	8082db2 <_ZN7FatFile5writeEPKvj+0x126>
 8082da2:	441a      	add	r2, r3
 8082da4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 8082da6:	bf82      	ittt	hi
 8082da8:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8082dac:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082db0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
 8082db2:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
 8082db4:	464a      	mov	r2, r9
 8082db6:	6828      	ldr	r0, [r5, #0]
 8082db8:	f000 fc44 	bl	8083644 <_ZN9SdSpiCard11writeBlocksEmPKhj>
 8082dbc:	e7bd      	b.n	8082d3a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8082dbe:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
 8082dc0:	bf02      	ittt	eq
 8082dc2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 8082dc6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082dca:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
 8082dcc:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
 8082dce:	464a      	mov	r2, r9
 8082dd0:	6818      	ldr	r0, [r3, #0]
 8082dd2:	f000 fbc2 	bl	808355a <_ZN9SdSpiCard10writeBlockEmPKh>
 8082dd6:	2800      	cmp	r0, #0
 8082dd8:	d0bc      	beq.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 8082dda:	f44f 7600 	mov.w	r6, #512	; 0x200
 8082dde:	e7ad      	b.n	8082d3c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 8082de0:	69e2      	ldr	r2, [r4, #28]
 8082de2:	78a3      	ldrb	r3, [r4, #2]
 8082de4:	42b2      	cmp	r2, r6
 8082de6:	d204      	bcs.n	8082df2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
 8082de8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8082dea:	f043 0304 	orr.w	r3, r3, #4
 8082dee:	70a3      	strb	r3, [r4, #2]
 8082df0:	e003      	b.n	8082dfa <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
 8082df2:	4a08      	ldr	r2, [pc, #32]	; (8082e14 <_ZN7FatFile5writeEPKvj+0x188>)
 8082df4:	6812      	ldr	r2, [r2, #0]
 8082df6:	2a00      	cmp	r2, #0
 8082df8:	d1f7      	bne.n	8082dea <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
 8082dfa:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8082dfe:	2b00      	cmp	r3, #0
 8082e00:	db02      	blt.n	8082e08 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
 8082e02:	4638      	mov	r0, r7
}
 8082e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 8082e08:	4620      	mov	r0, r4
 8082e0a:	f7ff feb5 	bl	8082b78 <_ZN7FatFile4syncEv>
 8082e0e:	2800      	cmp	r0, #0
 8082e10:	d1f7      	bne.n	8082e02 <_ZN7FatFile5writeEPKvj+0x176>
 8082e12:	e79f      	b.n	8082d54 <_ZN7FatFile5writeEPKvj+0xc8>
 8082e14:	200008f0 	.word	0x200008f0

08082e18 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8082e18:	b570      	push	{r4, r5, r6, lr}
 8082e1a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082e1c:	460c      	mov	r4, r1
    }
 8082e1e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082e20:	b149      	cbz	r1, 8082e36 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082e22:	f007 fc68 	bl	808a6f6 <strlen>
 8082e26:	682b      	ldr	r3, [r5, #0]
 8082e28:	4602      	mov	r2, r0
 8082e2a:	4621      	mov	r1, r4
 8082e2c:	4628      	mov	r0, r5
    }
 8082e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8082e32:	68db      	ldr	r3, [r3, #12]
 8082e34:	4718      	bx	r3
    }
 8082e36:	bd70      	pop	{r4, r5, r6, pc}

08082e38 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082e38:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8082e3a:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8082e3c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8082e3e:	07da      	lsls	r2, r3, #31
 8082e40:	d51f      	bpl.n	8082e82 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8082e42:	6843      	ldr	r3, [r0, #4]
 8082e44:	f100 060c 	add.w	r6, r0, #12
 8082e48:	6881      	ldr	r1, [r0, #8]
 8082e4a:	4632      	mov	r2, r6
 8082e4c:	6818      	ldr	r0, [r3, #0]
 8082e4e:	f000 fb84 	bl	808355a <_ZN9SdSpiCard10writeBlockEmPKh>
 8082e52:	4605      	mov	r5, r0
 8082e54:	b910      	cbnz	r0, 8082e5c <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8082e56:	2500      	movs	r5, #0
}
 8082e58:	4628      	mov	r0, r5
 8082e5a:	bd70      	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8082e5c:	7823      	ldrb	r3, [r4, #0]
 8082e5e:	079b      	lsls	r3, r3, #30
 8082e60:	d404      	bmi.n	8082e6c <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 8082e62:	7823      	ldrb	r3, [r4, #0]
 8082e64:	f023 0301 	bic.w	r3, r3, #1
 8082e68:	7023      	strb	r3, [r4, #0]
 8082e6a:	e7f5      	b.n	8082e58 <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8082e6c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8082e70:	6919      	ldr	r1, [r3, #16]
 8082e72:	4632      	mov	r2, r6
 8082e74:	4401      	add	r1, r0
 8082e76:	6818      	ldr	r0, [r3, #0]
 8082e78:	f000 fb6f 	bl	808355a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8082e7c:	2800      	cmp	r0, #0
 8082e7e:	d1f0      	bne.n	8082e62 <_ZN8FatCache4syncEv+0x2a>
 8082e80:	e7e9      	b.n	8082e56 <_ZN8FatCache4syncEv+0x1e>
  return true;
 8082e82:	2501      	movs	r5, #1
 8082e84:	e7e8      	b.n	8082e58 <_ZN8FatCache4syncEv+0x20>

08082e86 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082e86:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8082e88:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082e8a:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8082e8c:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082e8e:	460e      	mov	r6, r1
 8082e90:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8082e92:	d009      	beq.n	8082ea8 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8082e94:	f7ff ffd0 	bl	8082e38 <_ZN8FatCache4syncEv>
 8082e98:	b908      	cbnz	r0, 8082e9e <_ZN8FatCache4readEmh+0x18>
  return 0;
 8082e9a:	2000      	movs	r0, #0
}
 8082e9c:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 8082e9e:	076b      	lsls	r3, r5, #29
 8082ea0:	d50a      	bpl.n	8082eb8 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 8082ea2:	2300      	movs	r3, #0
    m_lbn = lbn;
 8082ea4:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 8082ea6:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 8082ea8:	4620      	mov	r0, r4
 8082eaa:	7822      	ldrb	r2, [r4, #0]
 8082eac:	f005 0503 	and.w	r5, r5, #3
 8082eb0:	4315      	orrs	r5, r2
 8082eb2:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 8082eb6:	e7f1      	b.n	8082e9c <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8082eb8:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
 8082eba:	4631      	mov	r1, r6
 8082ebc:	6818      	ldr	r0, [r3, #0]
 8082ebe:	f104 020c 	add.w	r2, r4, #12
 8082ec2:	f000 fac1 	bl	8083448 <_ZN9SdSpiCard9readBlockEmPh>
 8082ec6:	2800      	cmp	r0, #0
 8082ec8:	d1eb      	bne.n	8082ea2 <_ZN8FatCache4readEmh+0x1c>
 8082eca:	e7e6      	b.n	8082e9a <_ZN8FatCache4readEmh+0x14>

08082ecc <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8082ecc:	7983      	ldrb	r3, [r0, #6]
 8082ece:	3902      	subs	r1, #2
 8082ed0:	6940      	ldr	r0, [r0, #20]
 8082ed2:	4099      	lsls	r1, r3
}
 8082ed4:	4408      	add	r0, r1
 8082ed6:	4770      	bx	lr

08082ed8 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082ed8:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8082eda:	b570      	push	{r4, r5, r6, lr}
 8082edc:	4605      	mov	r5, r0
 8082ede:	460c      	mov	r4, r1
 8082ee0:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 8082ee2:	d802      	bhi.n	8082eea <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8082ee4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8082ee8:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 8082eea:	69c3      	ldr	r3, [r0, #28]
 8082eec:	428b      	cmp	r3, r1
 8082eee:	d3f9      	bcc.n	8082ee4 <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
 8082ef0:	79c3      	ldrb	r3, [r0, #7]
 8082ef2:	2b20      	cmp	r3, #32
 8082ef4:	d116      	bne.n	8082f24 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
 8082ef6:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8082ef8:	2202      	movs	r2, #2
 8082efa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082efe:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082f02:	f7ff ffc0 	bl	8082e86 <_ZN8FatCache4readEmh>
    if (!pc) {
 8082f06:	2800      	cmp	r0, #0
 8082f08:	d0ec      	beq.n	8082ee4 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8082f0a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082f0e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8082f12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8082f16:	69ea      	ldr	r2, [r5, #28]
 8082f18:	429a      	cmp	r2, r3
  return 1;
 8082f1a:	bf2a      	itet	cs
 8082f1c:	2001      	movcs	r0, #1
    return 0;
 8082f1e:	2000      	movcc	r0, #0
  *value = next;
 8082f20:	6033      	strcs	r3, [r6, #0]
  return 1;
 8082f22:	e7e1      	b.n	8082ee8 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
 8082f24:	2b10      	cmp	r3, #16
 8082f26:	d1dd      	bne.n	8082ee4 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8082f28:	6983      	ldr	r3, [r0, #24]
 8082f2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082f2e:	2202      	movs	r2, #2
 8082f30:	4419      	add	r1, r3
 8082f32:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082f36:	f7ff ffa6 	bl	8082e86 <_ZN8FatCache4readEmh>
    if (!pc) {
 8082f3a:	2800      	cmp	r0, #0
 8082f3c:	d0d2      	beq.n	8082ee4 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
 8082f3e:	b2e4      	uxtb	r4, r4
 8082f40:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8082f44:	e7e7      	b.n	8082f16 <_ZN9FatVolume6fatGetEmPm+0x3e>

08082f46 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082f46:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8082f48:	b538      	push	{r3, r4, r5, lr}
 8082f4a:	460c      	mov	r4, r1
 8082f4c:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 8082f4e:	d801      	bhi.n	8082f54 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8082f50:	2000      	movs	r0, #0
}
 8082f52:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 8082f54:	69c3      	ldr	r3, [r0, #28]
 8082f56:	428b      	cmp	r3, r1
 8082f58:	d3fa      	bcc.n	8082f50 <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
 8082f5a:	79c3      	ldrb	r3, [r0, #7]
 8082f5c:	2b20      	cmp	r3, #32
 8082f5e:	d10f      	bne.n	8082f80 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
 8082f60:	6981      	ldr	r1, [r0, #24]
 8082f62:	2203      	movs	r2, #3
 8082f64:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082f68:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082f6c:	f7ff ff8b 	bl	8082e86 <_ZN8FatCache4readEmh>
    if (!pc) {
 8082f70:	2800      	cmp	r0, #0
 8082f72:	d0ed      	beq.n	8082f50 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
 8082f74:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082f78:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8082f7c:	2001      	movs	r0, #1
 8082f7e:	e7e8      	b.n	8082f52 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
 8082f80:	2b10      	cmp	r3, #16
 8082f82:	d1e5      	bne.n	8082f50 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8082f84:	6983      	ldr	r3, [r0, #24]
 8082f86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082f8a:	2203      	movs	r2, #3
 8082f8c:	4419      	add	r1, r3
 8082f8e:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082f92:	f7ff ff78 	bl	8082e86 <_ZN8FatCache4readEmh>
    if (!pc) {
 8082f96:	2800      	cmp	r0, #0
 8082f98:	d0da      	beq.n	8082f50 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
 8082f9a:	b2e4      	uxtb	r4, r4
 8082f9c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8082fa0:	e7ec      	b.n	8082f7c <_ZN9FatVolume6fatPutEmm+0x36>

08082fa2 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082fa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 8082fa6:	68c4      	ldr	r4, [r0, #12]
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082fa8:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 8082faa:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082fac:	460e      	mov	r6, r1
 8082fae:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 8082fb0:	d301      	bcc.n	8082fb6 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
 8082fb2:	2701      	movs	r7, #1
 8082fb4:	e001      	b.n	8082fba <_ZN9FatVolume15allocateClusterEmPm+0x18>
 8082fb6:	460c      	mov	r4, r1
    setStart = false;
 8082fb8:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 8082fba:	69eb      	ldr	r3, [r5, #28]
    find++;
 8082fbc:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 8082fbe:	42a3      	cmp	r3, r4
 8082fc0:	d202      	bcs.n	8082fc8 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
 8082fc2:	b9c7      	cbnz	r7, 8082ff6 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 8082fc4:	68ec      	ldr	r4, [r5, #12]
 8082fc6:	e7f4      	b.n	8082fb2 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
 8082fc8:	42a6      	cmp	r6, r4
 8082fca:	d014      	beq.n	8082ff6 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 8082fcc:	4621      	mov	r1, r4
 8082fce:	4628      	mov	r0, r5
 8082fd0:	aa01      	add	r2, sp, #4
 8082fd2:	f7ff ff81 	bl	8082ed8 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082fd6:	2800      	cmp	r0, #0
 8082fd8:	db0d      	blt.n	8082ff6 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 8082fda:	d0ee      	beq.n	8082fba <_ZN9FatVolume15allocateClusterEmPm+0x18>
 8082fdc:	9b01      	ldr	r3, [sp, #4]
 8082fde:	2b00      	cmp	r3, #0
 8082fe0:	d1eb      	bne.n	8082fba <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
 8082fe2:	b107      	cbz	r7, 8082fe6 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 8082fe4:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8082fe6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8082fea:	4621      	mov	r1, r4
 8082fec:	4628      	mov	r0, r5
 8082fee:	f7ff ffaa 	bl	8082f46 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8082ff2:	4607      	mov	r7, r0
 8082ff4:	b920      	cbnz	r0, 8083000 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
 8082ff6:	2700      	movs	r7, #0
}
 8082ff8:	4638      	mov	r0, r7
 8082ffa:	b002      	add	sp, #8
 8082ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 8083000:	b916      	cbnz	r6, 8083008 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
 8083002:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8083006:	e7f7      	b.n	8082ff8 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 8083008:	4622      	mov	r2, r4
 808300a:	4631      	mov	r1, r6
 808300c:	4628      	mov	r0, r5
 808300e:	f7ff ff9a 	bl	8082f46 <_ZN9FatVolume6fatPutEmm>
 8083012:	2800      	cmp	r0, #0
 8083014:	d1f5      	bne.n	8083002 <_ZN9FatVolume15allocateClusterEmPm+0x60>
 8083016:	e7ee      	b.n	8082ff6 <_ZN9FatVolume15allocateClusterEmPm+0x54>

08083018 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8083018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808301a:	4605      	mov	r5, r0
 808301c:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 808301e:	4621      	mov	r1, r4
 8083020:	4628      	mov	r0, r5
 8083022:	aa01      	add	r2, sp, #4
 8083024:	f7ff ff58 	bl	8082ed8 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8083028:	1e06      	subs	r6, r0, #0
 808302a:	db10      	blt.n	808304e <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808302c:	2200      	movs	r2, #0
 808302e:	4621      	mov	r1, r4
 8083030:	4628      	mov	r0, r5
 8083032:	f7ff ff88 	bl	8082f46 <_ZN9FatVolume6fatPutEmm>
 8083036:	b150      	cbz	r0, 808304e <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8083038:	68eb      	ldr	r3, [r5, #12]
 808303a:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 808303c:	bf24      	itt	cs
 808303e:	f104 34ff 	addcs.w	r4, r4, #4294967295
 8083042:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
 8083044:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 8083046:	2e00      	cmp	r6, #0
 8083048:	d1e9      	bne.n	808301e <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 808304a:	b002      	add	sp, #8
 808304c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 808304e:	2000      	movs	r0, #0
 8083050:	e7fb      	b.n	808304a <_ZN9FatVolume9freeChainEm+0x32>

08083052 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8083052:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8083054:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8083056:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8083058:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 808305a:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 808305e:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8083060:	460d      	mov	r5, r1
  m_fatType = 0;
 8083062:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8083064:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
 8083068:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
 808306a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 808306e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
 8083070:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
 8083074:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 8083078:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  if (part) {
 808307c:	b1b9      	cbz	r1, 80830ae <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 808307e:	2904      	cmp	r1, #4
 8083080:	d901      	bls.n	8083086 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8083082:	2000      	movs	r0, #0
}
 8083084:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8083086:	4611      	mov	r1, r2
 8083088:	4630      	mov	r0, r6
 808308a:	f7ff fefc 	bl	8082e86 <_ZN8FatCache4readEmh>
    if (!pc) {
 808308e:	2800      	cmp	r0, #0
 8083090:	d0f7      	beq.n	8083082 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8083092:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8083096:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 808309a:	065b      	lsls	r3, r3, #25
 808309c:	d1f1      	bne.n	8083082 <_ZN9FatVolume4initEh+0x30>
 808309e:	f105 011b 	add.w	r1, r5, #27
 80830a2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80830a6:	f8d1 5006 	ldr.w	r5, [r1, #6]
 80830aa:	2d00      	cmp	r5, #0
 80830ac:	d0e9      	beq.n	8083082 <_ZN9FatVolume4initEh+0x30>
 80830ae:	2200      	movs	r2, #0
 80830b0:	4629      	mov	r1, r5
 80830b2:	4630      	mov	r0, r6
 80830b4:	f7ff fee7 	bl	8082e86 <_ZN8FatCache4readEmh>
  if (!pc) {
 80830b8:	2800      	cmp	r0, #0
 80830ba:	d0e2      	beq.n	8083082 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 80830bc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80830c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80830c4:	d1dd      	bne.n	8083082 <_ZN9FatVolume4initEh+0x30>
 80830c6:	7c03      	ldrb	r3, [r0, #16]
 80830c8:	2b02      	cmp	r3, #2
 80830ca:	d1da      	bne.n	8083082 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 80830cc:	89c3      	ldrh	r3, [r0, #14]
 80830ce:	2b00      	cmp	r3, #0
 80830d0:	d0d7      	beq.n	8083082 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80830d2:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 80830d4:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80830d6:	1e4b      	subs	r3, r1, #1
 80830d8:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 80830da:	2300      	movs	r3, #0
 80830dc:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80830de:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80830e0:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80830e2:	4299      	cmp	r1, r3
 80830e4:	d007      	beq.n	80830f6 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 80830e6:	3e01      	subs	r6, #1
 80830e8:	d0cb      	beq.n	8083082 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80830ea:	79a2      	ldrb	r2, [r4, #6]
 80830ec:	005b      	lsls	r3, r3, #1
 80830ee:	3201      	adds	r2, #1
 80830f0:	b2db      	uxtb	r3, r3
 80830f2:	71a2      	strb	r2, [r4, #6]
 80830f4:	e7f5      	b.n	80830e2 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80830f6:	8ac1      	ldrh	r1, [r0, #22]
 80830f8:	b901      	cbnz	r1, 80830fc <_ZN9FatVolume4initEh+0xaa>
 80830fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80830fc:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80830fe:	89c3      	ldrh	r3, [r0, #14]
 8083100:	442b      	add	r3, r5
 8083102:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8083104:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8083108:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 808310c:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 808310e:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8083110:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8083114:	0149      	lsls	r1, r1, #5
 8083116:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 808311a:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 808311e:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8083120:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8083124:	b902      	cbnz	r2, 8083128 <_ZN9FatVolume4initEh+0xd6>
 8083126:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8083128:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 808312a:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 808312c:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 808312e:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8083130:	1c4b      	adds	r3, r1, #1
 8083132:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
 8083134:	f640 73f4 	movw	r3, #4084	; 0xff4
 8083138:	4299      	cmp	r1, r3
 808313a:	d802      	bhi.n	8083142 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
 808313c:	230c      	movs	r3, #12
 808313e:	71e3      	strb	r3, [r4, #7]
 8083140:	e79f      	b.n	8083082 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8083142:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8083146:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8083148:	bf89      	itett	hi
 808314a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 808314c:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 808314e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8083150:	2320      	movhi	r3, #32
  return true;
 8083152:	2001      	movs	r0, #1
    m_fatType = 32;
 8083154:	71e3      	strb	r3, [r4, #7]
 8083156:	e795      	b.n	8083084 <_ZN9FatVolume4initEh+0x32>

08083158 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 8083158:	b570      	push	{r4, r5, r6, lr}
 808315a:	460d      	mov	r5, r1
 808315c:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 808315e:	f002 fe07 	bl	8085d70 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 8083162:	4e0c      	ldr	r6, [pc, #48]	; (8083194 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8083164:	6833      	ldr	r3, [r6, #0]
 8083166:	1ac0      	subs	r0, r0, r3
 8083168:	4b0b      	ldr	r3, [pc, #44]	; (8083198 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 808316a:	4298      	cmp	r0, r3
 808316c:	d908      	bls.n	8083180 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return HAL_Timer_Get_Milli_Seconds();
 808316e:	f002 fe07 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8083172:	4b0a      	ldr	r3, [pc, #40]	; (808319c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8083174:	6018      	str	r0, [r3, #0]
    		spark_process();
 8083176:	f003 f8cd 	bl	8086314 <spark_process>
 808317a:	f002 fdf9 	bl	8085d70 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 808317e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8083180:	f002 fdfe 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 8083184:	b280      	uxth	r0, r0
 8083186:	1b40      	subs	r0, r0, r5
}
 8083188:	42a0      	cmp	r0, r4
 808318a:	bfd4      	ite	le
 808318c:	2000      	movle	r0, #0
 808318e:	2001      	movgt	r0, #1
 8083190:	bd70      	pop	{r4, r5, r6, pc}
 8083192:	bf00      	nop
 8083194:	200008f8 	.word	0x200008f8
 8083198:	000186a0 	.word	0x000186a0
 808319c:	20001090 	.word	0x20001090

080831a0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80831a0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80831a2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
 80831a4:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80831a6:	b94d      	cbnz	r5, 80831bc <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80831a8:	6840      	ldr	r0, [r0, #4]
 80831aa:	f000 fa6d 	bl	8083688 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
 80831ae:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
 80831b0:	4629      	mov	r1, r5
 80831b2:	7d18      	ldrb	r0, [r3, #20]
 80831b4:	f005 feb3 	bl	8088f1e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80831b8:	2301      	movs	r3, #1
 80831ba:	7223      	strb	r3, [r4, #8]
  }
}
 80831bc:	bd38      	pop	{r3, r4, r5, pc}

080831be <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80831be:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80831c0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
 80831c2:	4604      	mov	r4, r0
  if (m_spiActive) {
 80831c4:	b16b      	cbz	r3, 80831e2 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
 80831c6:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
 80831c8:	2101      	movs	r1, #1
 80831ca:	7d18      	ldrb	r0, [r3, #20]
 80831cc:	f005 fea7 	bl	8088f1e <digitalWrite>
     m_spiDriver->send(data);
 80831d0:	21ff      	movs	r1, #255	; 0xff
 80831d2:	6860      	ldr	r0, [r4, #4]
 80831d4:	f000 fa8a 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
 80831d8:	6860      	ldr	r0, [r4, #4]
 80831da:	f000 fa69 	bl	80836b0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 80831de:	2300      	movs	r3, #0
 80831e0:	7223      	strb	r3, [r4, #8]
  }
}
 80831e2:	bd10      	pop	{r4, pc}

080831e4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80831e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80831e6:	4604      	mov	r4, r0
 80831e8:	460d      	mov	r5, r1
 80831ea:	4616      	mov	r6, r2
 80831ec:	f002 fdc8 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80831f0:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
 80831f2:	6860      	ldr	r0, [r4, #4]
 80831f4:	f000 fa5f 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
 80831f8:	28ff      	cmp	r0, #255	; 0xff
 80831fa:	7260      	strb	r0, [r4, #9]
 80831fc:	d10e      	bne.n	808321c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80831fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083202:	4639      	mov	r1, r7
 8083204:	4620      	mov	r0, r4
 8083206:	f7ff ffa7 	bl	8083158 <_ZN9SdSpiCard10isTimedOutEtt>
 808320a:	2800      	cmp	r0, #0
 808320c:	d0f1      	beq.n	80831f2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 808320e:	2355      	movs	r3, #85	; 0x55
  spiStop();
 8083210:	4620      	mov	r0, r4
 8083212:	7023      	strb	r3, [r4, #0]
 8083214:	f7ff ffd3 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083218:	2000      	movs	r0, #0
}
 808321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 808321c:	28fe      	cmp	r0, #254	; 0xfe
 808321e:	d001      	beq.n	8083224 <_ZN9SdSpiCard8readDataEPhj+0x40>
 8083220:	2350      	movs	r3, #80	; 0x50
 8083222:	e7f5      	b.n	8083210 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
 8083224:	4632      	mov	r2, r6
 8083226:	4629      	mov	r1, r5
 8083228:	6860      	ldr	r0, [r4, #4]
 808322a:	f000 fa49 	bl	80836c0 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 808322e:	7260      	strb	r0, [r4, #9]
 8083230:	b108      	cbz	r0, 8083236 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
 8083232:	2360      	movs	r3, #96	; 0x60
 8083234:	e7ec      	b.n	8083210 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
 8083236:	6860      	ldr	r0, [r4, #4]
 8083238:	f000 fa3d 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 808323c:	6860      	ldr	r0, [r4, #4]
 808323e:	f000 fa3a 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 8083242:	2001      	movs	r0, #1
 8083244:	e7e9      	b.n	808321a <_ZN9SdSpiCard8readDataEPhj+0x36>

08083246 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 8083246:	b570      	push	{r4, r5, r6, lr}
 8083248:	4604      	mov	r4, r0
 808324a:	460e      	mov	r6, r1
 808324c:	f002 fd98 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
 8083250:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 8083252:	4632      	mov	r2, r6
 8083254:	4629      	mov	r1, r5
 8083256:	4620      	mov	r0, r4
 8083258:	f7ff ff7e 	bl	8083158 <_ZN9SdSpiCard10isTimedOutEtt>
 808325c:	b930      	cbnz	r0, 808326c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 808325e:	6860      	ldr	r0, [r4, #4]
 8083260:	f000 fa29 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 8083264:	28ff      	cmp	r0, #255	; 0xff
 8083266:	d1f4      	bne.n	8083252 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 8083268:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 808326a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 808326c:	2000      	movs	r0, #0
 808326e:	e7fc      	b.n	808326a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

08083270 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8083270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
 8083272:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8083274:	4604      	mov	r4, r0
 8083276:	460d      	mov	r5, r1
 8083278:	9201      	str	r2, [sp, #4]
  if (!m_spiActive) {
 808327a:	b90b      	cbnz	r3, 8083280 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 808327c:	f7ff ff90 	bl	80831a0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
 8083280:	b125      	cbz	r5, 808328c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
 8083282:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8083286:	4620      	mov	r0, r4
 8083288:	f7ff ffdd 	bl	8083246 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
 808328c:	6860      	ldr	r0, [r4, #4]
 808328e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8083292:	f000 fa2b 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
 8083296:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8083298:	af01      	add	r7, sp, #4
 808329a:	5db9      	ldrb	r1, [r7, r6]
 808329c:	6860      	ldr	r0, [r4, #4]
 808329e:	f000 fa25 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
 80832a2:	3e01      	subs	r6, #1
 80832a4:	d2f9      	bcs.n	808329a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80832a6:	2d00      	cmp	r5, #0
 80832a8:	bf0c      	ite	eq
 80832aa:	2195      	moveq	r1, #149	; 0x95
 80832ac:	2187      	movne	r1, #135	; 0x87
 80832ae:	6860      	ldr	r0, [r4, #4]
 80832b0:	f000 fa1c 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
 80832b4:	6860      	ldr	r0, [r4, #4]
 80832b6:	f000 f9fe 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 80832ba:	250b      	movs	r5, #11
 80832bc:	6860      	ldr	r0, [r4, #4]
 80832be:	f000 f9fa 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80832c2:	0603      	lsls	r3, r0, #24
 80832c4:	7260      	strb	r0, [r4, #9]
 80832c6:	d503      	bpl.n	80832d0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
 80832c8:	3d01      	subs	r5, #1
 80832ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80832ce:	d1f5      	bne.n	80832bc <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
 80832d0:	b003      	add	sp, #12
 80832d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080832d4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80832d4:	b570      	push	{r4, r5, r6, lr}
 80832d6:	4604      	mov	r4, r0
 80832d8:	460d      	mov	r5, r1
 80832da:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80832dc:	2137      	movs	r1, #55	; 0x37
 80832de:	2200      	movs	r2, #0
 80832e0:	f7ff ffc6 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80832e4:	4632      	mov	r2, r6
 80832e6:	4629      	mov	r1, r5
 80832e8:	4620      	mov	r0, r4
  }
 80832ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 80832ee:	f7ff bfbf 	b.w	8083270 <_ZN9SdSpiCard11cardCommandEhm>
	...

080832f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80832f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80832f8:	2500      	movs	r5, #0
  m_spiDriver = spi;
 80832fa:	6041      	str	r1, [r0, #4]
  m_spiActive = false;
 80832fc:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80832fe:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 8083300:	7285      	strb	r5, [r0, #10]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8083302:	4604      	mov	r4, r0
 8083304:	4690      	mov	r8, r2
 8083306:	461e      	mov	r6, r3
 8083308:	f002 fd3a 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
 808330c:	4641      	mov	r1, r8
 808330e:	4607      	mov	r7, r0
 8083310:	6860      	ldr	r0, [r4, #4]
 8083312:	f000 f9bd 	bl	8083690 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 8083316:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
 8083318:	4a4a      	ldr	r2, [pc, #296]	; (8083444 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x150>)
 808331a:	721d      	strb	r5, [r3, #8]
 808331c:	2501      	movs	r5, #1
 808331e:	60da      	str	r2, [r3, #12]
 8083320:	821d      	strh	r5, [r3, #16]
  spiStart();
 8083322:	4620      	mov	r0, r4
 8083324:	f7ff ff3c 	bl	80831a0 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
 8083328:	6863      	ldr	r3, [r4, #4]
 808332a:	4629      	mov	r1, r5
 808332c:	7d18      	ldrb	r0, [r3, #20]
 808332e:	f005 fdf6 	bl	8088f1e <digitalWrite>
 8083332:	250a      	movs	r5, #10
     m_spiDriver->send(data);
 8083334:	21ff      	movs	r1, #255	; 0xff
 8083336:	6860      	ldr	r0, [r4, #4]
 8083338:	3d01      	subs	r5, #1
 808333a:	f000 f9d7 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
 808333e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8083342:	d1f7      	bne.n	8083334 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
 8083344:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
 8083346:	4629      	mov	r1, r5
 8083348:	7d18      	ldrb	r0, [r3, #20]
 808334a:	f005 fde8 	bl	8088f1e <digitalWrite>
  }
 808334e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 8083350:	2200      	movs	r2, #0
 8083352:	4620      	mov	r0, r4
 8083354:	4611      	mov	r1, r2
 8083356:	f7ff ff8b 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 808335a:	2801      	cmp	r0, #1
 808335c:	4680      	mov	r8, r0
 808335e:	d018      	beq.n	8083392 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
 8083360:	3d01      	subs	r5, #1
 8083362:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8083366:	d107      	bne.n	8083378 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
 8083368:	2320      	movs	r3, #32
  spiStop();
 808336a:	4620      	mov	r0, r4
 808336c:	7023      	strb	r3, [r4, #0]
 808336e:	f7ff ff26 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083372:	2000      	movs	r0, #0
}
 8083374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
 8083378:	21fd      	movs	r1, #253	; 0xfd
 808337a:	6860      	ldr	r0, [r4, #4]
 808337c:	f000 f9b6 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
 8083380:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
 8083384:	6860      	ldr	r0, [r4, #4]
 8083386:	f000 f996 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
 808338a:	f1b8 0801 	subs.w	r8, r8, #1
 808338e:	d1f9      	bne.n	8083384 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
 8083390:	e7de      	b.n	8083350 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8083392:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8083396:	2108      	movs	r1, #8
 8083398:	4620      	mov	r0, r4
 808339a:	f7ff ff69 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 808339e:	2805      	cmp	r0, #5
 80833a0:	d114      	bne.n	80833cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80833a2:	2500      	movs	r5, #0
    m_type = value;
 80833a4:	f884 800a 	strb.w	r8, [r4, #10]
 80833a8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80833aa:	462a      	mov	r2, r5
 80833ac:	2129      	movs	r1, #41	; 0x29
 80833ae:	4620      	mov	r0, r4
 80833b0:	f7ff ff90 	bl	80832d4 <_ZN9SdSpiCard8cardAcmdEhm>
 80833b4:	4602      	mov	r2, r0
 80833b6:	b1d8      	cbz	r0, 80833f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80833b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80833bc:	4639      	mov	r1, r7
 80833be:	4620      	mov	r0, r4
 80833c0:	f7ff feca 	bl	8083158 <_ZN9SdSpiCard10isTimedOutEtt>
 80833c4:	2800      	cmp	r0, #0
 80833c6:	d0f0      	beq.n	80833aa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
 80833c8:	2343      	movs	r3, #67	; 0x43
 80833ca:	e7ce      	b.n	808336a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
 80833cc:	2504      	movs	r5, #4
    return m_spiDriver->receive();
 80833ce:	6860      	ldr	r0, [r4, #4]
 80833d0:	f000 f971 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 80833d4:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
 80833d6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80833da:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
 80833dc:	d1f7      	bne.n	80833ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
 80833de:	28aa      	cmp	r0, #170	; 0xaa
 80833e0:	d104      	bne.n	80833ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
 80833e2:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80833e4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80833e8:	72a3      	strb	r3, [r4, #10]
    return m_type;
 80833ea:	e7dd      	b.n	80833a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
 80833ec:	2325      	movs	r3, #37	; 0x25
 80833ee:	e7bc      	b.n	808336a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
 80833f0:	7aa3      	ldrb	r3, [r4, #10]
 80833f2:	2b02      	cmp	r3, #2
 80833f4:	d119      	bne.n	808342a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x136>
    if (cardCommand(CMD58, 0)) {
 80833f6:	213a      	movs	r1, #58	; 0x3a
 80833f8:	4620      	mov	r0, r4
 80833fa:	f7ff ff39 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 80833fe:	b108      	cbz	r0, 8083404 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
 8083400:	2337      	movs	r3, #55	; 0x37
 8083402:	e7b2      	b.n	808336a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
 8083404:	6860      	ldr	r0, [r4, #4]
 8083406:	f000 f956 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
 808340a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 808340e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8083410:	bf08      	it	eq
 8083412:	2303      	moveq	r3, #3
    return m_spiDriver->receive();
 8083414:	6860      	ldr	r0, [r4, #4]
    m_type = value;
 8083416:	bf08      	it	eq
 8083418:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
 808341a:	f000 f94c 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 808341e:	6860      	ldr	r0, [r4, #4]
 8083420:	f000 f949 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 8083424:	6860      	ldr	r0, [r4, #4]
 8083426:	f000 f946 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
 808342a:	4620      	mov	r0, r4
 808342c:	f7ff fec7 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
 8083430:	7930      	ldrb	r0, [r6, #4]
  m_spiDriver->setSpiSettings(settings);
 8083432:	6863      	ldr	r3, [r4, #4]
 8083434:	68b1      	ldr	r1, [r6, #8]
 8083436:	89b2      	ldrh	r2, [r6, #12]
 8083438:	7218      	strb	r0, [r3, #8]
 808343a:	60d9      	str	r1, [r3, #12]
  return true;
 808343c:	2001      	movs	r0, #1
 808343e:	821a      	strh	r2, [r3, #16]
 8083440:	e798      	b.n	8083374 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
 8083442:	bf00      	nop
 8083444:	0003d090 	.word	0x0003d090

08083448 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8083448:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808344a:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808344c:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 808344e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8083450:	bf18      	it	ne
 8083452:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8083454:	460a      	mov	r2, r1
 8083456:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8083458:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 808345a:	f7ff ff09 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 808345e:	b130      	cbz	r0, 808346e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8083460:	2330      	movs	r3, #48	; 0x30
 8083462:	7023      	strb	r3, [r4, #0]
  spiStop();
 8083464:	4620      	mov	r0, r4
 8083466:	f7ff feaa 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 808346a:	2500      	movs	r5, #0
 808346c:	e00b      	b.n	8083486 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 808346e:	4629      	mov	r1, r5
 8083470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8083474:	4620      	mov	r0, r4
 8083476:	f7ff feb5 	bl	80831e4 <_ZN9SdSpiCard8readDataEPhj>
 808347a:	4605      	mov	r5, r0
 808347c:	2800      	cmp	r0, #0
 808347e:	d0f1      	beq.n	8083464 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
 8083480:	4620      	mov	r0, r4
 8083482:	f7ff fe9c 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
}
 8083486:	4628      	mov	r0, r5
 8083488:	bd38      	pop	{r3, r4, r5, pc}

0808348a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808348a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808348c:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808348e:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8083490:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8083492:	bf18      	it	ne
 8083494:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8083496:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8083498:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 808349a:	f7ff fee9 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 808349e:	b130      	cbz	r0, 80834ae <_ZN9SdSpiCard9readStartEm+0x24>
 80834a0:	2331      	movs	r3, #49	; 0x31
  spiStop();
 80834a2:	4620      	mov	r0, r4
 80834a4:	7023      	strb	r3, [r4, #0]
 80834a6:	f7ff fe8a 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 80834aa:	2000      	movs	r0, #0
}
 80834ac:	bd10      	pop	{r4, pc}
  return true;
 80834ae:	2001      	movs	r0, #1
 80834b0:	e7fc      	b.n	80834ac <_ZN9SdSpiCard9readStartEm+0x22>

080834b2 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 80834b2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80834b4:	2200      	movs	r2, #0
 80834b6:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 80834b8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80834ba:	f7ff fed9 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 80834be:	b130      	cbz	r0, 80834ce <_ZN9SdSpiCard8readStopEv+0x1c>
 80834c0:	2328      	movs	r3, #40	; 0x28
  spiStop();
 80834c2:	4620      	mov	r0, r4
 80834c4:	7023      	strb	r3, [r4, #0]
 80834c6:	f7ff fe7a 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 80834ca:	2000      	movs	r0, #0
}
 80834cc:	bd10      	pop	{r4, pc}
  spiStop();
 80834ce:	4620      	mov	r0, r4
 80834d0:	f7ff fe75 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return true;
 80834d4:	2001      	movs	r0, #1
 80834d6:	e7f9      	b.n	80834cc <_ZN9SdSpiCard8readStopEv+0x1a>

080834d8 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80834d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80834da:	4604      	mov	r4, r0
 80834dc:	4616      	mov	r6, r2
 80834de:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80834e0:	f7ff ffd3 	bl	808348a <_ZN9SdSpiCard9readStartEm>
 80834e4:	b168      	cbz	r0, 8083502 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 80834e6:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80834e8:	b2ab      	uxth	r3, r5
 80834ea:	42bb      	cmp	r3, r7
 80834ec:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 80834f0:	d209      	bcs.n	8083506 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 80834f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80834f6:	4620      	mov	r0, r4
 80834f8:	f7ff fe74 	bl	80831e4 <_ZN9SdSpiCard8readDataEPhj>
 80834fc:	3501      	adds	r5, #1
 80834fe:	2800      	cmp	r0, #0
 8083500:	d1f2      	bne.n	80834e8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8083502:	2000      	movs	r0, #0
 8083504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8083506:	4620      	mov	r0, r4
}
 8083508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 808350c:	f7ff bfd1 	b.w	80834b2 <_ZN9SdSpiCard8readStopEv>

08083510 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8083510:	b538      	push	{r3, r4, r5, lr}
 8083512:	4604      	mov	r4, r0
 8083514:	4615      	mov	r5, r2
     m_spiDriver->send(data);
 8083516:	6840      	ldr	r0, [r0, #4]
 8083518:	f000 f8e8 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
 808351c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8083520:	4629      	mov	r1, r5
 8083522:	6860      	ldr	r0, [r4, #4]
 8083524:	f000 f8e6 	bl	80836f4 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
 8083528:	21ff      	movs	r1, #255	; 0xff
 808352a:	6860      	ldr	r0, [r4, #4]
 808352c:	f000 f8de 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
 8083530:	21ff      	movs	r1, #255	; 0xff
 8083532:	6860      	ldr	r0, [r4, #4]
 8083534:	f000 f8da 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
 8083538:	6860      	ldr	r0, [r4, #4]
 808353a:	f000 f8bc 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 808353e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8083540:	f000 001f 	and.w	r0, r0, #31
 8083544:	2805      	cmp	r0, #5
 8083546:	d006      	beq.n	8083556 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
 8083548:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 808354a:	4620      	mov	r0, r4
 808354c:	7023      	strb	r3, [r4, #0]
 808354e:	f7ff fe36 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083552:	2000      	movs	r0, #0
}
 8083554:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 8083556:	2001      	movs	r0, #1
 8083558:	e7fc      	b.n	8083554 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

0808355a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808355a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808355c:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808355e:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8083560:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8083562:	bf18      	it	ne
 8083564:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 8083566:	460a      	mov	r2, r1
 8083568:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808356a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 808356c:	f7ff fe80 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 8083570:	4606      	mov	r6, r0
 8083572:	b130      	cbz	r0, 8083582 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
 8083574:	2332      	movs	r3, #50	; 0x32
 8083576:	7023      	strb	r3, [r4, #0]
  spiStop();
 8083578:	4620      	mov	r0, r4
 808357a:	f7ff fe20 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 808357e:	2500      	movs	r5, #0
 8083580:	e01f      	b.n	80835c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
 8083582:	462a      	mov	r2, r5
 8083584:	21fe      	movs	r1, #254	; 0xfe
 8083586:	4620      	mov	r0, r4
 8083588:	f7ff ffc2 	bl	8083510 <_ZN9SdSpiCard9writeDataEhPKh>
 808358c:	2800      	cmp	r0, #0
 808358e:	d0f3      	beq.n	8083578 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083590:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8083594:	4620      	mov	r0, r4
 8083596:	f7ff fe56 	bl	8083246 <_ZN9SdSpiCard11waitNotBusyEt>
 808359a:	4605      	mov	r5, r0
 808359c:	b908      	cbnz	r0, 80835a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
 808359e:	235a      	movs	r3, #90	; 0x5a
 80835a0:	e7e9      	b.n	8083576 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80835a2:	4632      	mov	r2, r6
 80835a4:	210d      	movs	r1, #13
 80835a6:	4620      	mov	r0, r4
 80835a8:	f7ff fe62 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 80835ac:	b108      	cbz	r0, 80835b2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
 80835ae:	2329      	movs	r3, #41	; 0x29
 80835b0:	e7e1      	b.n	8083576 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
 80835b2:	6860      	ldr	r0, [r4, #4]
 80835b4:	f000 f87f 	bl	80836b6 <_ZN14SdSpiAltDriver7receiveEv>
 80835b8:	2800      	cmp	r0, #0
 80835ba:	d1f8      	bne.n	80835ae <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
 80835bc:	4620      	mov	r0, r4
 80835be:	f7ff fdfe 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
}
 80835c2:	4628      	mov	r0, r5
 80835c4:	bd70      	pop	{r4, r5, r6, pc}

080835c6 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 80835c6:	b538      	push	{r3, r4, r5, lr}
 80835c8:	460d      	mov	r5, r1
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80835ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
 80835ce:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80835d0:	f7ff fe39 	bl	8083246 <_ZN9SdSpiCard11waitNotBusyEt>
 80835d4:	b930      	cbnz	r0, 80835e4 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
    m_errorCode = code;
 80835d6:	235b      	movs	r3, #91	; 0x5b
 80835d8:	7023      	strb	r3, [r4, #0]
  spiStop();
 80835da:	4620      	mov	r0, r4
 80835dc:	f7ff fdef 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 80835e0:	2000      	movs	r0, #0
 80835e2:	e006      	b.n	80835f2 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80835e4:	462a      	mov	r2, r5
 80835e6:	21fc      	movs	r1, #252	; 0xfc
 80835e8:	4620      	mov	r0, r4
 80835ea:	f7ff ff91 	bl	8083510 <_ZN9SdSpiCard9writeDataEhPKh>
 80835ee:	2800      	cmp	r0, #0
 80835f0:	d0f3      	beq.n	80835da <_ZN9SdSpiCard9writeDataEPKh+0x14>
}
 80835f2:	bd38      	pop	{r3, r4, r5, pc}

080835f4 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80835f4:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80835f6:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80835f8:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 80835fa:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80835fc:	bf18      	it	ne
 80835fe:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8083600:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8083602:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
 8083604:	f7ff fe34 	bl	8083270 <_ZN9SdSpiCard11cardCommandEhm>
 8083608:	b130      	cbz	r0, 8083618 <_ZN9SdSpiCard10writeStartEm+0x24>
 808360a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 808360c:	4620      	mov	r0, r4
 808360e:	7023      	strb	r3, [r4, #0]
 8083610:	f7ff fdd5 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083614:	2000      	movs	r0, #0
}
 8083616:	bd10      	pop	{r4, pc}
  return true;
 8083618:	2001      	movs	r0, #1
 808361a:	e7fc      	b.n	8083616 <_ZN9SdSpiCard10writeStartEm+0x22>

0808361c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 808361c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808361e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
 8083622:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083624:	f7ff fe0f 	bl	8083246 <_ZN9SdSpiCard11waitNotBusyEt>
 8083628:	4605      	mov	r5, r0
 808362a:	b930      	cbnz	r0, 808363a <_ZN9SdSpiCard9writeStopEv+0x1e>
 808362c:	2356      	movs	r3, #86	; 0x56
 808362e:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
 8083630:	4620      	mov	r0, r4
 8083632:	f7ff fdc4 	bl	80831be <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
 8083636:	4628      	mov	r0, r5
 8083638:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
 808363a:	21fd      	movs	r1, #253	; 0xfd
 808363c:	6860      	ldr	r0, [r4, #4]
 808363e:	f000 f855 	bl	80836ec <_ZN14SdSpiAltDriver4sendEh>
 8083642:	e7f5      	b.n	8083630 <_ZN9SdSpiCard9writeStopEv+0x14>

08083644 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8083644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083646:	4604      	mov	r4, r0
 8083648:	4616      	mov	r6, r2
 808364a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 808364c:	f7ff ffd2 	bl	80835f4 <_ZN9SdSpiCard10writeStartEm>
 8083650:	b170      	cbz	r0, 8083670 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
 8083652:	2500      	movs	r5, #0
 8083654:	42bd      	cmp	r5, r7
  return writeStop();
 8083656:	4620      	mov	r0, r4
 8083658:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 808365c:	d004      	beq.n	8083668 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 808365e:	f7ff ffb2 	bl	80835c6 <_ZN9SdSpiCard9writeDataEPKh>
 8083662:	b128      	cbz	r0, 8083670 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
 8083664:	3501      	adds	r5, #1
 8083666:	e7f5      	b.n	8083654 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
 8083668:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 808366c:	f7ff bfd6 	b.w	808361c <_ZN9SdSpiCard9writeStopEv>
  spiStop();
 8083670:	4620      	mov	r0, r4
 8083672:	f7ff fda4 	bl	80831be <_ZN9SdSpiCard7spiStopEv>
}
 8083676:	2000      	movs	r0, #0
 8083678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808367c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 808367c:	2201      	movs	r2, #1
 808367e:	4b01      	ldr	r3, [pc, #4]	; (8083684 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8083680:	701a      	strb	r2, [r3, #0]
}
 8083682:	4770      	bx	lr
 8083684:	200008fc 	.word	0x200008fc

08083688 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 8083688:	1d01      	adds	r1, r0, #4
 808368a:	6800      	ldr	r0, [r0, #0]
 808368c:	f002 bffa 	b.w	8086684 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

08083690 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 8083690:	b510      	push	{r4, lr}
 8083692:	4604      	mov	r4, r0
  m_csPin = csPin;
 8083694:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 8083696:	6800      	ldr	r0, [r0, #0]
 8083698:	f002 ffcb 	bl	8086632 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 808369c:	7d20      	ldrb	r0, [r4, #20]
 808369e:	2101      	movs	r1, #1
 80836a0:	f005 fc2c 	bl	8088efc <pinMode>
  digitalWrite(m_csPin, HIGH);
 80836a4:	7d20      	ldrb	r0, [r4, #20]
 80836a6:	2101      	movs	r1, #1
}
 80836a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
 80836ac:	f005 bc37 	b.w	8088f1e <digitalWrite>

080836b0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 80836b0:	6800      	ldr	r0, [r0, #0]
 80836b2:	f002 bfcc 	b.w	808664e <_ZN8SPIClass14endTransactionEv>

080836b6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 80836b6:	21ff      	movs	r1, #255	; 0xff
 80836b8:	6800      	ldr	r0, [r0, #0]
 80836ba:	f003 b84f 	b.w	808675c <_ZN8SPIClass8transferEh>
	...

080836c0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80836c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80836c2:	460d      	mov	r5, r1
  SPI_DMA_TransferCompleted = false;
 80836c4:	2100      	movs	r1, #0
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80836c6:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80836c8:	4a06      	ldr	r2, [pc, #24]	; (80836e4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 80836ca:	4c07      	ldr	r4, [pc, #28]	; (80836e8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80836cc:	9200      	str	r2, [sp, #0]
 80836ce:	6800      	ldr	r0, [r0, #0]
 80836d0:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 80836d2:	7021      	strb	r1, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80836d4:	f003 f848 	bl	8086768 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80836d8:	7823      	ldrb	r3, [r4, #0]
 80836da:	2b00      	cmp	r3, #0
 80836dc:	d0fc      	beq.n	80836d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 80836de:	2000      	movs	r0, #0
 80836e0:	b003      	add	sp, #12
 80836e2:	bd30      	pop	{r4, r5, pc}
 80836e4:	0808367d 	.word	0x0808367d
 80836e8:	200008fc 	.word	0x200008fc

080836ec <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 80836ec:	6800      	ldr	r0, [r0, #0]
 80836ee:	f003 b835 	b.w	808675c <_ZN8SPIClass8transferEh>
	...

080836f4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 80836f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80836f6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 80836f8:	2200      	movs	r2, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80836fa:	4d06      	ldr	r5, [pc, #24]	; (8083714 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 80836fc:	4c06      	ldr	r4, [pc, #24]	; (8083718 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 80836fe:	9500      	str	r5, [sp, #0]
 8083700:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
 8083702:	7022      	strb	r2, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 8083704:	f003 f830 	bl	8086768 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 8083708:	7823      	ldrb	r3, [r4, #0]
 808370a:	2b00      	cmp	r3, #0
 808370c:	d0fc      	beq.n	8083708 <_ZN14SdSpiAltDriver4sendEPKhj+0x14>
}
 808370e:	b003      	add	sp, #12
 8083710:	bd30      	pop	{r4, r5, pc}
 8083712:	bf00      	nop
 8083714:	0808367d 	.word	0x0808367d
 8083718:	200008fc 	.word	0x200008fc

0808371c <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 808371c:	b510      	push	{r4, lr}
 808371e:	4604      	mov	r4, r0
 8083720:	f002 faa6 	bl	8085c70 <_ZN13IntervalTimer3endEv>
 8083724:	4620      	mov	r0, r4
 8083726:	bd10      	pop	{r4, pc}

08083728 <_ZN18ParticleSoftSerial8rxPinISREv>:
  volatile uint32_t usLast[12];
  volatile uint8_t  b[12];
#endif

void ParticleSoftSerial::rxPinISR(void)
{ // start bit triggers read after 1.5 bits lengths (= middle of first data bit)
 8083728:	b510      	push	{r4, lr}
  if (_rxBitPos <= PSS_STARTBIT)
 808372a:	4c09      	ldr	r4, [pc, #36]	; (8083750 <_ZN18ParticleSoftSerial8rxPinISREv+0x28>)
 808372c:	7823      	ldrb	r3, [r4, #0]
 808372e:	061b      	lsls	r3, r3, #24
 8083730:	d50d      	bpl.n	808374e <_ZN18ParticleSoftSerial8rxPinISREv+0x26>
#ifdef _PSS_DEBUG
    usLast[0] = micros();
    b[0] = HIGH;
#endif
    //rxTimer.interrupt_SIT(INT_ENABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    rxTimer.resetPeriod_SIT(_usStartBit, uSec);
 8083732:	4b08      	ldr	r3, [pc, #32]	; (8083754 <_ZN18ParticleSoftSerial8rxPinISREv+0x2c>)
 8083734:	4808      	ldr	r0, [pc, #32]	; (8083758 <_ZN18ParticleSoftSerial8rxPinISREv+0x30>)
 8083736:	6819      	ldr	r1, [r3, #0]
 8083738:	2200      	movs	r2, #0
 808373a:	f002 faa2 	bl	8085c82 <_ZN13IntervalTimer15resetPeriod_SITEmb>
    _rxBitPos = PSS_DATA;
 808373e:	2300      	movs	r3, #0
 8083740:	7023      	strb	r3, [r4, #0]
#warning "detachInterrupt() within an ISR has become disallowed - potential SOS+14 crash -> see https://github.com/particle-iot/device-os/issues/1835"        
    detachInterrupt(_rxPin);
 8083742:	4b06      	ldr	r3, [pc, #24]	; (808375c <_ZN18ParticleSoftSerial8rxPinISREv+0x34>)
  }
}
 8083744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    detachInterrupt(_rxPin);
 8083748:	8818      	ldrh	r0, [r3, #0]
 808374a:	f004 bf85 	b.w	8088658 <_Z15detachInterruptt>
}
 808374e:	bd10      	pop	{r4, pc}
 8083750:	2000004b 	.word	0x2000004b
 8083754:	20000038 	.word	0x20000038
 8083758:	20000924 	.word	0x20000924
 808375c:	20000040 	.word	0x20000040

08083760 <_ZN18ParticleSoftSerial10rxTimerISREv>:

void ParticleSoftSerial::rxTimerISR(void)
{
 8083760:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  static uint8_t parityErr = (_parity & 0x01);
 8083764:	4c54      	ldr	r4, [pc, #336]	; (80838b8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x158>)
 8083766:	7823      	ldrb	r3, [r4, #0]
 8083768:	f3bf 8f5b 	dmb	ish
 808376c:	07dd      	lsls	r5, r3, #31
 808376e:	d40c      	bmi.n	808378a <_ZN18ParticleSoftSerial10rxTimerISREv+0x2a>
 8083770:	4620      	mov	r0, r4
 8083772:	f7fc fcbd 	bl	80800f0 <__cxa_guard_acquire>
 8083776:	b140      	cbz	r0, 808378a <_ZN18ParticleSoftSerial10rxTimerISREv+0x2a>
 8083778:	4b50      	ldr	r3, [pc, #320]	; (80838bc <_ZN18ParticleSoftSerial10rxTimerISREv+0x15c>)
 808377a:	4a51      	ldr	r2, [pc, #324]	; (80838c0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x160>)
 808377c:	781b      	ldrb	r3, [r3, #0]
 808377e:	4620      	mov	r0, r4
 8083780:	f003 0301 	and.w	r3, r3, #1
 8083784:	7013      	strb	r3, [r2, #0]
 8083786:	f7fc fcb8 	bl	80800fa <__cxa_guard_release>
  uint8_t bit;

  if (_rxBitPos <= PSS_STARTBIT) return;
 808378a:	4c4e      	ldr	r4, [pc, #312]	; (80838c4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x164>)
 808378c:	7823      	ldrb	r3, [r4, #0]
 808378e:	0618      	lsls	r0, r3, #24
 8083790:	f100 8089 	bmi.w	80838a6 <_ZN18ParticleSoftSerial10rxTimerISREv+0x146>
  _PSS_DEBUG_HIGH(_debugPin);
  
  if (_rxBitPos == PSS_DATA) // after start bit go for normal bit length
 8083794:	7823      	ldrb	r3, [r4, #0]
 8083796:	4f49      	ldr	r7, [pc, #292]	; (80838bc <_ZN18ParticleSoftSerial10rxTimerISREv+0x15c>)
 8083798:	b25d      	sxtb	r5, r3
 808379a:	b973      	cbnz	r3, 80837ba <_ZN18ParticleSoftSerial10rxTimerISREv+0x5a>
  {
    rxTimer.resetPeriod_SIT(_usBitLength, uSec);
 808379c:	4b4a      	ldr	r3, [pc, #296]	; (80838c8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x168>)
 808379e:	462a      	mov	r2, r5
 80837a0:	6819      	ldr	r1, [r3, #0]
 80837a2:	484a      	ldr	r0, [pc, #296]	; (80838cc <_ZN18ParticleSoftSerial10rxTimerISREv+0x16c>)
 80837a4:	f002 fa6d 	bl	8085c82 <_ZN13IntervalTimer15resetPeriod_SITEmb>

    parityErr = (_parity & 0x01);
 80837a8:	783b      	ldrb	r3, [r7, #0]
 80837aa:	4a45      	ldr	r2, [pc, #276]	; (80838c0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x160>)
 80837ac:	f003 0301 	and.w	r3, r3, #1
 80837b0:	7013      	strb	r3, [r2, #0]
    _rxBuffer[_rxBufferHead] = 0;
 80837b2:	4b47      	ldr	r3, [pc, #284]	; (80838d0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x170>)
 80837b4:	4a47      	ldr	r2, [pc, #284]	; (80838d4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x174>)
 80837b6:	781b      	ldrb	r3, [r3, #0]
 80837b8:	54d5      	strb	r5, [r2, r3]
  }
  
  bit = pinReadFast(_rxPin);
 80837ba:	4e47      	ldr	r6, [pc, #284]	; (80838d8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x178>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80837bc:	4d47      	ldr	r5, [pc, #284]	; (80838dc <_ZN18ParticleSoftSerial10rxTimerISREv+0x17c>)
 80837be:	f8d6 8000 	ldr.w	r8, [r6]
 80837c2:	782b      	ldrb	r3, [r5, #0]
 80837c4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80838ec <_ZN18ParticleSoftSerial10rxTimerISREv+0x18c>
 80837c8:	f013 0f01 	tst.w	r3, #1
 80837cc:	f3bf 8f5b 	dmb	ish
 80837d0:	d10a      	bne.n	80837e8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x88>
 80837d2:	4628      	mov	r0, r5
 80837d4:	f7fc fc8c 	bl	80800f0 <__cxa_guard_acquire>
 80837d8:	b130      	cbz	r0, 80837e8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x88>
 80837da:	f002 fa69 	bl	8085cb0 <HAL_Pin_Map>
 80837de:	f8c9 0000 	str.w	r0, [r9]
 80837e2:	4628      	mov	r0, r5
 80837e4:	f7fc fc89 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80837e8:	231c      	movs	r3, #28
 80837ea:	fa1f f888 	uxth.w	r8, r8
 80837ee:	fb03 f808 	mul.w	r8, r3, r8
 80837f2:	f8d9 3000 	ldr.w	r3, [r9]
 80837f6:	f853 3008 	ldr.w	r3, [r3, r8]
 80837fa:	f8d3 a010 	ldr.w	sl, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80837fe:	782b      	ldrb	r3, [r5, #0]
 8083800:	f3bf 8f5b 	dmb	ish
 8083804:	07d9      	lsls	r1, r3, #31
 8083806:	d40a      	bmi.n	808381e <_ZN18ParticleSoftSerial10rxTimerISREv+0xbe>
 8083808:	4834      	ldr	r0, [pc, #208]	; (80838dc <_ZN18ParticleSoftSerial10rxTimerISREv+0x17c>)
 808380a:	f7fc fc71 	bl	80800f0 <__cxa_guard_acquire>
 808380e:	b130      	cbz	r0, 808381e <_ZN18ParticleSoftSerial10rxTimerISREv+0xbe>
 8083810:	f002 fa4e 	bl	8085cb0 <HAL_Pin_Map>
 8083814:	f8c9 0000 	str.w	r0, [r9]
 8083818:	4830      	ldr	r0, [pc, #192]	; (80838dc <_ZN18ParticleSoftSerial10rxTimerISREv+0x17c>)
 808381a:	f7fc fc6e 	bl	80800fa <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 808381e:	f8d9 3000 	ldr.w	r3, [r9]
#ifdef _PSS_DEBUG
  b[_rxBitPos+1] = bit;
  usLast[_rxBitPos+1] = micros();
#endif
  if (_rxBitPos <= _dataBits)
 8083822:	492f      	ldr	r1, [pc, #188]	; (80838e0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x180>)
 8083824:	4498      	add	r8, r3
 8083826:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 808382a:	7808      	ldrb	r0, [r1, #0]
 808382c:	ea13 0f0a 	tst.w	r3, sl
 8083830:	7823      	ldrb	r3, [r4, #0]
 8083832:	bf18      	it	ne
 8083834:	2201      	movne	r2, #1
 8083836:	b25b      	sxtb	r3, r3
 8083838:	bf08      	it	eq
 808383a:	2200      	moveq	r2, #0
 808383c:	4283      	cmp	r3, r0
 808383e:	dc0c      	bgt.n	808385a <_ZN18ParticleSoftSerial10rxTimerISREv+0xfa>
  {
    _rxBuffer[_rxBufferHead] |= (bit << _rxBitPos);
 8083840:	4923      	ldr	r1, [pc, #140]	; (80838d0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x170>)
 8083842:	7823      	ldrb	r3, [r4, #0]
 8083844:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80838d4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x174>
 8083848:	780d      	ldrb	r5, [r1, #0]
 808384a:	b25b      	sxtb	r3, r3
 808384c:	f81c 1005 	ldrb.w	r1, [ip, r5]
 8083850:	fa02 f303 	lsl.w	r3, r2, r3
 8083854:	430b      	orrs	r3, r1
 8083856:	f80c 3005 	strb.w	r3, [ip, r5]
  }

  if ((_parity & 0x10) && (_rxBitPos <= _dataBits))
 808385a:	783b      	ldrb	r3, [r7, #0]
 808385c:	06db      	lsls	r3, r3, #27
 808385e:	d507      	bpl.n	8083870 <_ZN18ParticleSoftSerial10rxTimerISREv+0x110>
 8083860:	7823      	ldrb	r3, [r4, #0]
 8083862:	b25b      	sxtb	r3, r3
 8083864:	4298      	cmp	r0, r3
  {
    parityErr ^= (bit & 0x01); // keep track of the parity
 8083866:	bfa1      	itttt	ge
 8083868:	4b15      	ldrge	r3, [pc, #84]	; (80838c0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x160>)
 808386a:	7819      	ldrbge	r1, [r3, #0]
 808386c:	404a      	eorge	r2, r1
 808386e:	701a      	strbge	r2, [r3, #0]
  }  
  
  if (++_rxBitPos >= _totalBits)
 8083870:	7823      	ldrb	r3, [r4, #0]
 8083872:	4a1c      	ldr	r2, [pc, #112]	; (80838e4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x184>)
 8083874:	3301      	adds	r3, #1
 8083876:	7812      	ldrb	r2, [r2, #0]
 8083878:	b25b      	sxtb	r3, r3
 808387a:	4293      	cmp	r3, r2
 808387c:	7023      	strb	r3, [r4, #0]
 808387e:	db12      	blt.n	80838a6 <_ZN18ParticleSoftSerial10rxTimerISREv+0x146>
  {
    if (parityErr)
 8083880:	4b0f      	ldr	r3, [pc, #60]	; (80838c0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x160>)
 8083882:	4a13      	ldr	r2, [pc, #76]	; (80838d0 <_ZN18ParticleSoftSerial10rxTimerISREv+0x170>)
 8083884:	781b      	ldrb	r3, [r3, #0]
 8083886:	b18b      	cbz	r3, 80838ac <_ZN18ParticleSoftSerial10rxTimerISREv+0x14c>
    {
      _rxBuffer[_rxBufferHead] = 0xFF;
 8083888:	21ff      	movs	r1, #255	; 0xff
 808388a:	7813      	ldrb	r3, [r2, #0]
 808388c:	4a11      	ldr	r2, [pc, #68]	; (80838d4 <_ZN18ParticleSoftSerial10rxTimerISREv+0x174>)
 808388e:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
      _rxBufferHead = (_rxBufferHead + 1) % _PSS_BUFF_SIZE;
    }
    _rxBitPos = PSS_INACTIVE;
 8083890:	23fe      	movs	r3, #254	; 0xfe
 8083892:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE);  // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    attachInterrupt(_rxPin, rxPinISR, FALLING);
 8083894:	2300      	movs	r3, #0
 8083896:	2202      	movs	r2, #2
 8083898:	9300      	str	r3, [sp, #0]
 808389a:	4913      	ldr	r1, [pc, #76]	; (80838e8 <_ZN18ParticleSoftSerial10rxTimerISREv+0x188>)
 808389c:	f04f 33ff 	mov.w	r3, #4294967295
 80838a0:	8830      	ldrh	r0, [r6, #0]
 80838a2:	f004 feaf 	bl	8088604 <_Z15attachInterrupttPFvvE13InterruptModeah>
  }
  _PSS_DEBUG_LOW(_debugPin);
}
 80838a6:	b002      	add	sp, #8
 80838a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      _rxBufferHead = (_rxBufferHead + 1) % _PSS_BUFF_SIZE;
 80838ac:	7813      	ldrb	r3, [r2, #0]
 80838ae:	3301      	adds	r3, #1
 80838b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80838b4:	7013      	strb	r3, [r2, #0]
 80838b6:	e7eb      	b.n	8083890 <_ZN18ParticleSoftSerial10rxTimerISREv+0x130>
 80838b8:	20000908 	.word	0x20000908
 80838bc:	20000920 	.word	0x20000920
 80838c0:	2000090c 	.word	0x2000090c
 80838c4:	2000004b 	.word	0x2000004b
 80838c8:	2000003c 	.word	0x2000003c
 80838cc:	20000924 	.word	0x20000924
 80838d0:	20000919 	.word	0x20000919
 80838d4:	20000944 	.word	0x20000944
 80838d8:	20000040 	.word	0x20000040
 80838dc:	20000910 	.word	0x20000910
 80838e0:	2000004a 	.word	0x2000004a
 80838e4:	20000034 	.word	0x20000034
 80838e8:	08083729 	.word	0x08083729
 80838ec:	20000914 	.word	0x20000914

080838f0 <_ZN13IntervalTimerC1Ev>:
    IntervalTimer() {
 80838f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80838f2:	233b      	movs	r3, #59	; 0x3b
 80838f4:	8043      	strh	r3, [r0, #2]
 80838f6:	4b24      	ldr	r3, [pc, #144]	; (8083988 <_ZN13IntervalTimerC1Ev+0x98>)
		SIT_used[i] = false;
 80838f8:	4a24      	ldr	r2, [pc, #144]	; (808398c <_ZN13IntervalTimerC1Ev+0x9c>)
    IntervalTimer() {
 80838fa:	6043      	str	r3, [r0, #4]
	status = TIMER_OFF;
 80838fc:	2300      	movs	r3, #0
		SIT_used[i] = false;
 80838fe:	7013      	strb	r3, [r2, #0]
 8083900:	7053      	strb	r3, [r2, #1]
 8083902:	7093      	strb	r3, [r2, #2]
 8083904:	70d3      	strb	r3, [r2, #3]
 8083906:	7113      	strb	r3, [r2, #4]
	status = TIMER_OFF;
 8083908:	7203      	strb	r3, [r0, #8]
		sysIntSetupDone = true;
 808390a:	2301      	movs	r3, #1
    IntervalTimer() {
 808390c:	4604      	mov	r4, r0
	    _M_invoker = &_My_handler::_M_invoke;
 808390e:	4e20      	ldr	r6, [pc, #128]	; (8083990 <_ZN13IntervalTimerC1Ev+0xa0>)
	    _M_manager = &_My_handler::_M_manager;
 8083910:	4d20      	ldr	r5, [pc, #128]	; (8083994 <_ZN13IntervalTimerC1Ev+0xa4>)
		sysIntSetupDone = true;
 8083912:	7003      	strb	r3, [r0, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8083914:	4b20      	ldr	r3, [pc, #128]	; (8083998 <_ZN13IntervalTimerC1Ev+0xa8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 8083916:	4669      	mov	r1, sp
 8083918:	2013      	movs	r0, #19
 808391a:	9300      	str	r3, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808391c:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808391e:	9502      	str	r5, [sp, #8]
 8083920:	f004 fec4 	bl	80886ac <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 8083924:	4668      	mov	r0, sp
 8083926:	f7fc fce0 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808392a:	4b1c      	ldr	r3, [pc, #112]	; (808399c <_ZN13IntervalTimerC1Ev+0xac>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 808392c:	4669      	mov	r1, sp
 808392e:	201a      	movs	r0, #26
 8083930:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 8083932:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8083936:	f004 feb9 	bl	80886ac <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 808393a:	4668      	mov	r0, sp
 808393c:	f7fc fcd5 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8083940:	4b17      	ldr	r3, [pc, #92]	; (80839a0 <_ZN13IntervalTimerC1Ev+0xb0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 8083942:	4669      	mov	r1, sp
 8083944:	2021      	movs	r0, #33	; 0x21
 8083946:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 8083948:	e9cd 5602 	strd	r5, r6, [sp, #8]
 808394c:	f004 feae 	bl	80886ac <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 8083950:	4668      	mov	r0, sp
 8083952:	f7fc fcca 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8083956:	4b13      	ldr	r3, [pc, #76]	; (80839a4 <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 8083958:	4669      	mov	r1, sp
 808395a:	2024      	movs	r0, #36	; 0x24
 808395c:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 808395e:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8083962:	f004 fea3 	bl	80886ac <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 8083966:	4668      	mov	r0, sp
 8083968:	f7fc fcbf 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808396c:	4b0e      	ldr	r3, [pc, #56]	; (80839a8 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 808396e:	4669      	mov	r1, sp
 8083970:	2026      	movs	r0, #38	; 0x26
 8083972:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 8083974:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8083978:	f004 fe98 	bl	80886ac <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 808397c:	4668      	mov	r0, sp
 808397e:	f7fc fcb4 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
    }
 8083982:	4620      	mov	r0, r4
 8083984:	b004      	add	sp, #16
 8083986:	bd70      	pop	{r4, r5, r6, pc}
 8083988:	ffff752f 	.word	0xffff752f
 808398c:	20000acc 	.word	0x20000acc
 8083990:	08080135 	.word	0x08080135
 8083994:	08080139 	.word	0x08080139
 8083998:	08085995 	.word	0x08085995
 808399c:	080859bd 	.word	0x080859bd
 80839a0:	080859e5 	.word	0x080859e5
 80839a4:	08085a0d 	.word	0x08085a0d
 80839a8:	08085a35 	.word	0x08085a35

080839ac <_ZN18ParticleSoftSerial9prepareRXEv>:
{
 80839ac:	b513      	push	{r0, r1, r4, lr}
  pinMode(_rxPin, INPUT_PULLUP);
 80839ae:	4c11      	ldr	r4, [pc, #68]	; (80839f4 <_ZN18ParticleSoftSerial9prepareRXEv+0x48>)
 80839b0:	2102      	movs	r1, #2
 80839b2:	8820      	ldrh	r0, [r4, #0]
 80839b4:	f005 faa2 	bl	8088efc <pinMode>
  _rxBitPos = PSS_INACTIVE;
 80839b8:	22fe      	movs	r2, #254	; 0xfe
 80839ba:	4b0f      	ldr	r3, [pc, #60]	; (80839f8 <_ZN18ParticleSoftSerial9prepareRXEv+0x4c>)
 80839bc:	701a      	strb	r2, [r3, #0]
  rxTimer.begin(rxTimerISR, _usBitLength, uSec, _rxTimId);
 80839be:	4b0f      	ldr	r3, [pc, #60]	; (80839fc <_ZN18ParticleSoftSerial9prepareRXEv+0x50>)
 80839c0:	681a      	ldr	r2, [r3, #0]
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
    }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
		if (Period < 10 || Period > MAX_PERIOD)
 80839c2:	2a09      	cmp	r2, #9
 80839c4:	d90a      	bls.n	80839dc <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 80839c6:	480e      	ldr	r0, [pc, #56]	; (8083a00 <_ZN18ParticleSoftSerial9prepareRXEv+0x54>)
 80839c8:	88c3      	ldrh	r3, [r0, #6]
 80839ca:	429a      	cmp	r2, r3
 80839cc:	d806      	bhi.n	80839dc <_ZN18ParticleSoftSerial9prepareRXEv+0x30>
 80839ce:	4b0d      	ldr	r3, [pc, #52]	; (8083a04 <_ZN18ParticleSoftSerial9prepareRXEv+0x58>)
			return false;
		return beginCycles(isrCallback, Period, scale, id);
 80839d0:	490d      	ldr	r1, [pc, #52]	; (8083a08 <_ZN18ParticleSoftSerial9prepareRXEv+0x5c>)
 80839d2:	781b      	ldrb	r3, [r3, #0]
 80839d4:	9300      	str	r3, [sp, #0]
 80839d6:	2300      	movs	r3, #0
 80839d8:	f002 f914 	bl	8085c04 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  attachInterrupt(_rxPin, rxPinISR, FALLING);
 80839dc:	2300      	movs	r3, #0
 80839de:	2202      	movs	r2, #2
 80839e0:	9300      	str	r3, [sp, #0]
 80839e2:	490a      	ldr	r1, [pc, #40]	; (8083a0c <_ZN18ParticleSoftSerial9prepareRXEv+0x60>)
 80839e4:	f04f 33ff 	mov.w	r3, #4294967295
 80839e8:	8820      	ldrh	r0, [r4, #0]
 80839ea:	f004 fe0b 	bl	8088604 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80839ee:	b002      	add	sp, #8
 80839f0:	bd10      	pop	{r4, pc}
 80839f2:	bf00      	nop
 80839f4:	20000040 	.word	0x20000040
 80839f8:	2000004b 	.word	0x2000004b
 80839fc:	2000003c 	.word	0x2000003c
 8083a00:	20000924 	.word	0x20000924
 8083a04:	20000048 	.word	0x20000048
 8083a08:	08083761 	.word	0x08083761
 8083a0c:	08083729 	.word	0x08083729

08083a10 <_ZN18ParticleSoftSerial10txTimerISREv>:

void ParticleSoftSerial::txTimerISR(void)
{
 8083a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint8_t parity = (_parity & 0x01);
 8083a14:	4c9a      	ldr	r4, [pc, #616]	; (8083c80 <_ZN18ParticleSoftSerial10txTimerISREv+0x270>)
 8083a16:	7823      	ldrb	r3, [r4, #0]
 8083a18:	f3bf 8f5b 	dmb	ish
 8083a1c:	07de      	lsls	r6, r3, #31
 8083a1e:	d40c      	bmi.n	8083a3a <_ZN18ParticleSoftSerial10txTimerISREv+0x2a>
 8083a20:	4620      	mov	r0, r4
 8083a22:	f7fc fb65 	bl	80800f0 <__cxa_guard_acquire>
 8083a26:	b140      	cbz	r0, 8083a3a <_ZN18ParticleSoftSerial10txTimerISREv+0x2a>
 8083a28:	4b96      	ldr	r3, [pc, #600]	; (8083c84 <_ZN18ParticleSoftSerial10txTimerISREv+0x274>)
 8083a2a:	4a97      	ldr	r2, [pc, #604]	; (8083c88 <_ZN18ParticleSoftSerial10txTimerISREv+0x278>)
 8083a2c:	781b      	ldrb	r3, [r3, #0]
 8083a2e:	4620      	mov	r0, r4
 8083a30:	f003 0301 	and.w	r3, r3, #1
 8083a34:	7013      	strb	r3, [r2, #0]
 8083a36:	f7fc fb60 	bl	80800fa <__cxa_guard_release>

  if(_txBitPos < PSS_STARTBIT) return;
 8083a3a:	4c94      	ldr	r4, [pc, #592]	; (8083c8c <_ZN18ParticleSoftSerial10txTimerISREv+0x27c>)
 8083a3c:	7823      	ldrb	r3, [r4, #0]
 8083a3e:	b25b      	sxtb	r3, r3
 8083a40:	3301      	adds	r3, #1
 8083a42:	f2c0 8177 	blt.w	8083d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x324>

  if(_txBitPos == PSS_STARTBIT)                                 // produce StartBit
 8083a46:	7823      	ldrb	r3, [r4, #0]
 8083a48:	4f91      	ldr	r7, [pc, #580]	; (8083c90 <_ZN18ParticleSoftSerial10txTimerISREv+0x280>)
 8083a4a:	2bff      	cmp	r3, #255	; 0xff
 8083a4c:	d154      	bne.n	8083af8 <_ZN18ParticleSoftSerial10txTimerISREv+0xe8>
  {
    txTimer.resetPeriod_SIT(_usBitLength, uSec);
 8083a4e:	4b91      	ldr	r3, [pc, #580]	; (8083c94 <_ZN18ParticleSoftSerial10txTimerISREv+0x284>)
 8083a50:	2200      	movs	r2, #0
 8083a52:	6819      	ldr	r1, [r3, #0]
 8083a54:	4890      	ldr	r0, [pc, #576]	; (8083c98 <_ZN18ParticleSoftSerial10txTimerISREv+0x288>)
 8083a56:	f002 f914 	bl	8085c82 <_ZN13IntervalTimer15resetPeriod_SITEmb>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083a5a:	4d90      	ldr	r5, [pc, #576]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
    pinResetFast(_txPin);
 8083a5c:	4b90      	ldr	r3, [pc, #576]	; (8083ca0 <_ZN18ParticleSoftSerial10txTimerISREv+0x290>)
 8083a5e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8083cb8 <_ZN18ParticleSoftSerial10txTimerISREv+0x2a8>
 8083a62:	681e      	ldr	r6, [r3, #0]
 8083a64:	782b      	ldrb	r3, [r5, #0]
 8083a66:	f3bf 8f5b 	dmb	ish
 8083a6a:	f013 0f01 	tst.w	r3, #1
 8083a6e:	d10a      	bne.n	8083a86 <_ZN18ParticleSoftSerial10txTimerISREv+0x76>
 8083a70:	4628      	mov	r0, r5
 8083a72:	f7fc fb3d 	bl	80800f0 <__cxa_guard_acquire>
 8083a76:	b130      	cbz	r0, 8083a86 <_ZN18ParticleSoftSerial10txTimerISREv+0x76>
 8083a78:	f002 f91a 	bl	8085cb0 <HAL_Pin_Map>
 8083a7c:	f8c8 0000 	str.w	r0, [r8]
 8083a80:	4628      	mov	r0, r5
 8083a82:	f7fc fb3a 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 8083a86:	231c      	movs	r3, #28
 8083a88:	b2b6      	uxth	r6, r6
 8083a8a:	435e      	muls	r6, r3
 8083a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8083a90:	eb03 0906 	add.w	r9, r3, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083a94:	782b      	ldrb	r3, [r5, #0]
 8083a96:	f3bf 8f5b 	dmb	ish
 8083a9a:	07dd      	lsls	r5, r3, #31
 8083a9c:	d40a      	bmi.n	8083ab4 <_ZN18ParticleSoftSerial10txTimerISREv+0xa4>
 8083a9e:	487f      	ldr	r0, [pc, #508]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083aa0:	f7fc fb26 	bl	80800f0 <__cxa_guard_acquire>
 8083aa4:	b130      	cbz	r0, 8083ab4 <_ZN18ParticleSoftSerial10txTimerISREv+0xa4>
 8083aa6:	f002 f903 	bl	8085cb0 <HAL_Pin_Map>
 8083aaa:	f8c8 0000 	str.w	r0, [r8]
 8083aae:	487b      	ldr	r0, [pc, #492]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083ab0:	f7fc fb23 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 8083ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8083ab8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8083abc:	599b      	ldr	r3, [r3, r6]
 8083abe:	835a      	strh	r2, [r3, #26]
    parity = (_parity & 0x01);
 8083ac0:	4b70      	ldr	r3, [pc, #448]	; (8083c84 <_ZN18ParticleSoftSerial10txTimerISREv+0x274>)
 8083ac2:	4a71      	ldr	r2, [pc, #452]	; (8083c88 <_ZN18ParticleSoftSerial10txTimerISREv+0x278>)
 8083ac4:	781b      	ldrb	r3, [r3, #0]
 8083ac6:	f003 0301 	and.w	r3, r3, #1
  else if(PSS_DATA <= _txBitPos && _txBitPos < _dataBits)       // send data bits
  {
    if ((_txBuffer[_txBufferTail] >> _txBitPos) & 0x01)
    {
      pinSetFast(_txPin);
      parity ^= 0x01;                                           // keep track of the parity
 8083aca:	7013      	strb	r3, [r2, #0]
  { 
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
    _txBitPos = PSS_INACTIVE;
  }
  
  if (_txBufferTail == _txBufferHead)                           // more data to send?
 8083acc:	4b75      	ldr	r3, [pc, #468]	; (8083ca4 <_ZN18ParticleSoftSerial10txTimerISREv+0x294>)
 8083ace:	783a      	ldrb	r2, [r7, #0]
 8083ad0:	781b      	ldrb	r3, [r3, #0]
 8083ad2:	429a      	cmp	r2, r3
 8083ad4:	f040 812a 	bne.w	8083d2c <_ZN18ParticleSoftSerial10txTimerISREv+0x31c>
  {
    _txBitPos = PSS_INACTIVE;
 8083ad8:	23fe      	movs	r3, #254	; 0xfe
 8083ada:	7023      	strb	r3, [r4, #0]
    //rxTimer.interrupt_SIT(INT_DISABLE); // enabling/disabling SparkIntervalTimer adds too much latency at this time critical stage
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 8083adc:	4b72      	ldr	r3, [pc, #456]	; (8083ca8 <_ZN18ParticleSoftSerial10txTimerISREv+0x298>)
 8083ade:	781b      	ldrb	r3, [r3, #0]
 8083ae0:	2b00      	cmp	r3, #0
 8083ae2:	f000 8127 	beq.w	8083d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x324>
 8083ae6:	4b71      	ldr	r3, [pc, #452]	; (8083cac <_ZN18ParticleSoftSerial10txTimerISREv+0x29c>)
 8083ae8:	6818      	ldr	r0, [r3, #0]
 8083aea:	2800      	cmp	r0, #0
 8083aec:	f000 8122 	beq.w	8083d34 <_ZN18ParticleSoftSerial10txTimerISREv+0x324>
  }
  else
  {
    _txBitPos++;
  }
}
 8083af0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (_halfduplex && pss) pss->prepareRX();                   // when TX in finished revert back to default RX mode
 8083af4:	f7ff bf5a 	b.w	80839ac <_ZN18ParticleSoftSerial9prepareRXEv>
  else if(PSS_DATA <= _txBitPos && _txBitPos < _dataBits)       // send data bits
 8083af8:	7822      	ldrb	r2, [r4, #0]
 8083afa:	4b6d      	ldr	r3, [pc, #436]	; (8083cb0 <_ZN18ParticleSoftSerial10txTimerISREv+0x2a0>)
 8083afc:	0610      	lsls	r0, r2, #24
 8083afe:	781b      	ldrb	r3, [r3, #0]
 8083b00:	d43d      	bmi.n	8083b7e <_ZN18ParticleSoftSerial10txTimerISREv+0x16e>
 8083b02:	7822      	ldrb	r2, [r4, #0]
 8083b04:	b252      	sxtb	r2, r2
 8083b06:	429a      	cmp	r2, r3
 8083b08:	da39      	bge.n	8083b7e <_ZN18ParticleSoftSerial10txTimerISREv+0x16e>
    if ((_txBuffer[_txBufferTail] >> _txBitPos) & 0x01)
 8083b0a:	7839      	ldrb	r1, [r7, #0]
 8083b0c:	7823      	ldrb	r3, [r4, #0]
 8083b0e:	4e63      	ldr	r6, [pc, #396]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083b10:	b25a      	sxtb	r2, r3
 8083b12:	4b68      	ldr	r3, [pc, #416]	; (8083cb4 <_ZN18ParticleSoftSerial10txTimerISREv+0x2a4>)
 8083b14:	4d68      	ldr	r5, [pc, #416]	; (8083cb8 <_ZN18ParticleSoftSerial10txTimerISREv+0x2a8>)
 8083b16:	5c5b      	ldrb	r3, [r3, r1]
 8083b18:	4113      	asrs	r3, r2
 8083b1a:	f013 0f01 	tst.w	r3, #1
 8083b1e:	4b60      	ldr	r3, [pc, #384]	; (8083ca0 <_ZN18ParticleSoftSerial10txTimerISREv+0x290>)
 8083b20:	f8b3 9000 	ldrh.w	r9, [r3]
 8083b24:	d142      	bne.n	8083bac <_ZN18ParticleSoftSerial10txTimerISREv+0x19c>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083b26:	7833      	ldrb	r3, [r6, #0]
 8083b28:	f3bf 8f5b 	dmb	ish
 8083b2c:	07d9      	lsls	r1, r3, #31
 8083b2e:	d409      	bmi.n	8083b44 <_ZN18ParticleSoftSerial10txTimerISREv+0x134>
 8083b30:	4630      	mov	r0, r6
 8083b32:	f7fc fadd 	bl	80800f0 <__cxa_guard_acquire>
 8083b36:	b128      	cbz	r0, 8083b44 <_ZN18ParticleSoftSerial10txTimerISREv+0x134>
 8083b38:	f002 f8ba 	bl	8085cb0 <HAL_Pin_Map>
 8083b3c:	6028      	str	r0, [r5, #0]
 8083b3e:	4630      	mov	r0, r6
 8083b40:	f7fc fadb 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 8083b44:	f04f 081c 	mov.w	r8, #28
 8083b48:	fb08 f809 	mul.w	r8, r8, r9
 8083b4c:	682b      	ldr	r3, [r5, #0]
 8083b4e:	eb03 0908 	add.w	r9, r3, r8
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083b52:	7833      	ldrb	r3, [r6, #0]
 8083b54:	f3bf 8f5b 	dmb	ish
 8083b58:	07da      	lsls	r2, r3, #31
 8083b5a:	d409      	bmi.n	8083b70 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>
 8083b5c:	484f      	ldr	r0, [pc, #316]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083b5e:	f7fc fac7 	bl	80800f0 <__cxa_guard_acquire>
 8083b62:	b128      	cbz	r0, 8083b70 <_ZN18ParticleSoftSerial10txTimerISREv+0x160>
 8083b64:	f002 f8a4 	bl	8085cb0 <HAL_Pin_Map>
 8083b68:	6028      	str	r0, [r5, #0]
 8083b6a:	484c      	ldr	r0, [pc, #304]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083b6c:	f7fc fac5 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 8083b70:	682b      	ldr	r3, [r5, #0]
 8083b72:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8083b76:	f853 3008 	ldr.w	r3, [r3, r8]
 8083b7a:	835a      	strh	r2, [r3, #26]
}
 8083b7c:	e7a6      	b.n	8083acc <_ZN18ParticleSoftSerial10txTimerISREv+0xbc>
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
 8083b7e:	4a41      	ldr	r2, [pc, #260]	; (8083c84 <_ZN18ParticleSoftSerial10txTimerISREv+0x274>)
 8083b80:	7812      	ldrb	r2, [r2, #0]
 8083b82:	2a00      	cmp	r2, #0
 8083b84:	d142      	bne.n	8083c0c <_ZN18ParticleSoftSerial10txTimerISREv+0x1fc>
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
 8083b86:	7822      	ldrb	r2, [r4, #0]
 8083b88:	494c      	ldr	r1, [pc, #304]	; (8083cbc <_ZN18ParticleSoftSerial10txTimerISREv+0x2ac>)
 8083b8a:	b252      	sxtb	r2, r2
 8083b8c:	429a      	cmp	r2, r3
 8083b8e:	7809      	ldrb	r1, [r1, #0]
 8083b90:	f280 8096 	bge.w	8083cc0 <_ZN18ParticleSoftSerial10txTimerISREv+0x2b0>
  else if(_txBitPos >= _totalBits)
 8083b94:	7823      	ldrb	r3, [r4, #0]
 8083b96:	b25b      	sxtb	r3, r3
 8083b98:	428b      	cmp	r3, r1
 8083b9a:	db97      	blt.n	8083acc <_ZN18ParticleSoftSerial10txTimerISREv+0xbc>
    _txBufferTail = (_txBufferTail + 1) % _PSS_BUFF_SIZE;
 8083b9c:	783b      	ldrb	r3, [r7, #0]
 8083b9e:	3301      	adds	r3, #1
 8083ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8083ba4:	703b      	strb	r3, [r7, #0]
    _txBitPos = PSS_INACTIVE;
 8083ba6:	23fe      	movs	r3, #254	; 0xfe
 8083ba8:	7023      	strb	r3, [r4, #0]
 8083baa:	e78f      	b.n	8083acc <_ZN18ParticleSoftSerial10txTimerISREv+0xbc>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083bac:	7833      	ldrb	r3, [r6, #0]
 8083bae:	f3bf 8f5b 	dmb	ish
 8083bb2:	07d9      	lsls	r1, r3, #31
 8083bb4:	d409      	bmi.n	8083bca <_ZN18ParticleSoftSerial10txTimerISREv+0x1ba>
 8083bb6:	4630      	mov	r0, r6
 8083bb8:	f7fc fa9a 	bl	80800f0 <__cxa_guard_acquire>
 8083bbc:	b128      	cbz	r0, 8083bca <_ZN18ParticleSoftSerial10txTimerISREv+0x1ba>
 8083bbe:	f002 f877 	bl	8085cb0 <HAL_Pin_Map>
 8083bc2:	6028      	str	r0, [r5, #0]
 8083bc4:	4630      	mov	r0, r6
 8083bc6:	f7fc fa98 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083bca:	f04f 081c 	mov.w	r8, #28
 8083bce:	fb08 f809 	mul.w	r8, r8, r9
 8083bd2:	682b      	ldr	r3, [r5, #0]
 8083bd4:	eb03 0908 	add.w	r9, r3, r8
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083bd8:	7833      	ldrb	r3, [r6, #0]
 8083bda:	f3bf 8f5b 	dmb	ish
 8083bde:	07da      	lsls	r2, r3, #31
 8083be0:	d409      	bmi.n	8083bf6 <_ZN18ParticleSoftSerial10txTimerISREv+0x1e6>
 8083be2:	482e      	ldr	r0, [pc, #184]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083be4:	f7fc fa84 	bl	80800f0 <__cxa_guard_acquire>
 8083be8:	b128      	cbz	r0, 8083bf6 <_ZN18ParticleSoftSerial10txTimerISREv+0x1e6>
 8083bea:	f002 f861 	bl	8085cb0 <HAL_Pin_Map>
 8083bee:	6028      	str	r0, [r5, #0]
 8083bf0:	482a      	ldr	r0, [pc, #168]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083bf2:	f7fc fa82 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083bf6:	682b      	ldr	r3, [r5, #0]
 8083bf8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8083bfc:	f853 3008 	ldr.w	r3, [r3, r8]
 8083c00:	831a      	strh	r2, [r3, #24]
      parity ^= 0x01;                                           // keep track of the parity
 8083c02:	4a21      	ldr	r2, [pc, #132]	; (8083c88 <_ZN18ParticleSoftSerial10txTimerISREv+0x278>)
 8083c04:	7813      	ldrb	r3, [r2, #0]
 8083c06:	f083 0301 	eor.w	r3, r3, #1
 8083c0a:	e75e      	b.n	8083aca <_ZN18ParticleSoftSerial10txTimerISREv+0xba>
  else if(_parity && _txBitPos == _dataBits)                    // send parity (if required)
 8083c0c:	7822      	ldrb	r2, [r4, #0]
 8083c0e:	b252      	sxtb	r2, r2
 8083c10:	429a      	cmp	r2, r3
 8083c12:	d1b8      	bne.n	8083b86 <_ZN18ParticleSoftSerial10txTimerISREv+0x176>
    if (parity)
 8083c14:	4b1c      	ldr	r3, [pc, #112]	; (8083c88 <_ZN18ParticleSoftSerial10txTimerISREv+0x278>)
 8083c16:	4a22      	ldr	r2, [pc, #136]	; (8083ca0 <_ZN18ParticleSoftSerial10txTimerISREv+0x290>)
 8083c18:	781b      	ldrb	r3, [r3, #0]
 8083c1a:	4e20      	ldr	r6, [pc, #128]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083c1c:	4d26      	ldr	r5, [pc, #152]	; (8083cb8 <_ZN18ParticleSoftSerial10txTimerISREv+0x2a8>)
 8083c1e:	f8b2 9000 	ldrh.w	r9, [r2]
 8083c22:	2b00      	cmp	r3, #0
 8083c24:	f43f af7f 	beq.w	8083b26 <_ZN18ParticleSoftSerial10txTimerISREv+0x116>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083c28:	7833      	ldrb	r3, [r6, #0]
 8083c2a:	f3bf 8f5b 	dmb	ish
 8083c2e:	07db      	lsls	r3, r3, #31
 8083c30:	d409      	bmi.n	8083c46 <_ZN18ParticleSoftSerial10txTimerISREv+0x236>
 8083c32:	4630      	mov	r0, r6
 8083c34:	f7fc fa5c 	bl	80800f0 <__cxa_guard_acquire>
 8083c38:	b128      	cbz	r0, 8083c46 <_ZN18ParticleSoftSerial10txTimerISREv+0x236>
 8083c3a:	f002 f839 	bl	8085cb0 <HAL_Pin_Map>
 8083c3e:	6028      	str	r0, [r5, #0]
 8083c40:	4630      	mov	r0, r6
 8083c42:	f7fc fa5a 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083c46:	f04f 081c 	mov.w	r8, #28
 8083c4a:	fb08 f809 	mul.w	r8, r8, r9
 8083c4e:	682b      	ldr	r3, [r5, #0]
 8083c50:	eb03 0908 	add.w	r9, r3, r8
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083c54:	7833      	ldrb	r3, [r6, #0]
 8083c56:	f3bf 8f5b 	dmb	ish
 8083c5a:	07d8      	lsls	r0, r3, #31
 8083c5c:	d409      	bmi.n	8083c72 <_ZN18ParticleSoftSerial10txTimerISREv+0x262>
 8083c5e:	480f      	ldr	r0, [pc, #60]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083c60:	f7fc fa46 	bl	80800f0 <__cxa_guard_acquire>
 8083c64:	b128      	cbz	r0, 8083c72 <_ZN18ParticleSoftSerial10txTimerISREv+0x262>
 8083c66:	f002 f823 	bl	8085cb0 <HAL_Pin_Map>
 8083c6a:	6028      	str	r0, [r5, #0]
 8083c6c:	480b      	ldr	r0, [pc, #44]	; (8083c9c <_ZN18ParticleSoftSerial10txTimerISREv+0x28c>)
 8083c6e:	f7fc fa44 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083c72:	682b      	ldr	r3, [r5, #0]
 8083c74:	f853 3008 	ldr.w	r3, [r3, r8]
 8083c78:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8083c7c:	831a      	strh	r2, [r3, #24]
}
 8083c7e:	e725      	b.n	8083acc <_ZN18ParticleSoftSerial10txTimerISREv+0xbc>
 8083c80:	20000900 	.word	0x20000900
 8083c84:	20000920 	.word	0x20000920
 8083c88:	20000904 	.word	0x20000904
 8083c8c:	2000004c 	.word	0x2000004c
 8083c90:	2000091b 	.word	0x2000091b
 8083c94:	2000003c 	.word	0x2000003c
 8083c98:	20000934 	.word	0x20000934
 8083c9c:	20000910 	.word	0x20000910
 8083ca0:	20000044 	.word	0x20000044
 8083ca4:	2000091a 	.word	0x2000091a
 8083ca8:	20000918 	.word	0x20000918
 8083cac:	2000091c 	.word	0x2000091c
 8083cb0:	2000004a 	.word	0x2000004a
 8083cb4:	20000984 	.word	0x20000984
 8083cb8:	20000914 	.word	0x20000914
 8083cbc:	20000034 	.word	0x20000034
  else if(_dataBits <= _txBitPos && _txBitPos < _totalBits)     // produce StopBit(s)
 8083cc0:	7823      	ldrb	r3, [r4, #0]
 8083cc2:	b25b      	sxtb	r3, r3
 8083cc4:	428b      	cmp	r3, r1
 8083cc6:	f6bf af65 	bge.w	8083b94 <_ZN18ParticleSoftSerial10txTimerISREv+0x184>
      pinSetFast(_txPin);
 8083cca:	4b1b      	ldr	r3, [pc, #108]	; (8083d38 <_ZN18ParticleSoftSerial10txTimerISREv+0x328>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083ccc:	4d1b      	ldr	r5, [pc, #108]	; (8083d3c <_ZN18ParticleSoftSerial10txTimerISREv+0x32c>)
 8083cce:	681e      	ldr	r6, [r3, #0]
 8083cd0:	782b      	ldrb	r3, [r5, #0]
 8083cd2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8083d40 <_ZN18ParticleSoftSerial10txTimerISREv+0x330>
 8083cd6:	f013 0f01 	tst.w	r3, #1
 8083cda:	f3bf 8f5b 	dmb	ish
 8083cde:	d10a      	bne.n	8083cf6 <_ZN18ParticleSoftSerial10txTimerISREv+0x2e6>
 8083ce0:	4628      	mov	r0, r5
 8083ce2:	f7fc fa05 	bl	80800f0 <__cxa_guard_acquire>
 8083ce6:	b130      	cbz	r0, 8083cf6 <_ZN18ParticleSoftSerial10txTimerISREv+0x2e6>
 8083ce8:	f001 ffe2 	bl	8085cb0 <HAL_Pin_Map>
 8083cec:	f8c8 0000 	str.w	r0, [r8]
 8083cf0:	4628      	mov	r0, r5
 8083cf2:	f7fc fa02 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083cf6:	b2b3      	uxth	r3, r6
 8083cf8:	261c      	movs	r6, #28
 8083cfa:	435e      	muls	r6, r3
 8083cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8083d00:	eb03 0906 	add.w	r9, r3, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083d04:	782b      	ldrb	r3, [r5, #0]
 8083d06:	f3bf 8f5b 	dmb	ish
 8083d0a:	07db      	lsls	r3, r3, #31
 8083d0c:	d40a      	bmi.n	8083d24 <_ZN18ParticleSoftSerial10txTimerISREv+0x314>
 8083d0e:	480b      	ldr	r0, [pc, #44]	; (8083d3c <_ZN18ParticleSoftSerial10txTimerISREv+0x32c>)
 8083d10:	f7fc f9ee 	bl	80800f0 <__cxa_guard_acquire>
 8083d14:	b130      	cbz	r0, 8083d24 <_ZN18ParticleSoftSerial10txTimerISREv+0x314>
 8083d16:	f001 ffcb 	bl	8085cb0 <HAL_Pin_Map>
 8083d1a:	f8c8 0000 	str.w	r0, [r8]
 8083d1e:	4807      	ldr	r0, [pc, #28]	; (8083d3c <_ZN18ParticleSoftSerial10txTimerISREv+0x32c>)
 8083d20:	f7fc f9eb 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083d24:	f8d8 3000 	ldr.w	r3, [r8]
 8083d28:	599b      	ldr	r3, [r3, r6]
 8083d2a:	e7a5      	b.n	8083c78 <_ZN18ParticleSoftSerial10txTimerISREv+0x268>
    _txBitPos++;
 8083d2c:	7823      	ldrb	r3, [r4, #0]
 8083d2e:	3301      	adds	r3, #1
 8083d30:	b25b      	sxtb	r3, r3
 8083d32:	7023      	strb	r3, [r4, #0]
}
 8083d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8083d38:	20000044 	.word	0x20000044
 8083d3c:	20000910 	.word	0x20000910
 8083d40:	20000914 	.word	0x20000914

08083d44 <_ZN18ParticleSoftSerial9prepareTXEv>:
{
 8083d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  pinMode(_txPin, OUTPUT);
 8083d46:	4c22      	ldr	r4, [pc, #136]	; (8083dd0 <_ZN18ParticleSoftSerial9prepareTXEv+0x8c>)
 8083d48:	2101      	movs	r1, #1
 8083d4a:	8820      	ldrh	r0, [r4, #0]
 8083d4c:	f005 f8d6 	bl	8088efc <pinMode>
  pinSetFast(_txPin);
 8083d50:	6825      	ldr	r5, [r4, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083d52:	4c20      	ldr	r4, [pc, #128]	; (8083dd4 <_ZN18ParticleSoftSerial9prepareTXEv+0x90>)
 8083d54:	4e20      	ldr	r6, [pc, #128]	; (8083dd8 <_ZN18ParticleSoftSerial9prepareTXEv+0x94>)
 8083d56:	7823      	ldrb	r3, [r4, #0]
 8083d58:	f3bf 8f5b 	dmb	ish
 8083d5c:	f013 0f01 	tst.w	r3, #1
 8083d60:	d109      	bne.n	8083d76 <_ZN18ParticleSoftSerial9prepareTXEv+0x32>
 8083d62:	4620      	mov	r0, r4
 8083d64:	f7fc f9c4 	bl	80800f0 <__cxa_guard_acquire>
 8083d68:	b128      	cbz	r0, 8083d76 <_ZN18ParticleSoftSerial9prepareTXEv+0x32>
 8083d6a:	f001 ffa1 	bl	8085cb0 <HAL_Pin_Map>
 8083d6e:	6030      	str	r0, [r6, #0]
 8083d70:	4620      	mov	r0, r4
 8083d72:	f7fc f9c2 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083d76:	231c      	movs	r3, #28
 8083d78:	b2ad      	uxth	r5, r5
 8083d7a:	435d      	muls	r5, r3
 8083d7c:	6837      	ldr	r7, [r6, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083d7e:	7823      	ldrb	r3, [r4, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083d80:	442f      	add	r7, r5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8083d82:	07db      	lsls	r3, r3, #31
 8083d84:	f3bf 8f5b 	dmb	ish
 8083d88:	d409      	bmi.n	8083d9e <_ZN18ParticleSoftSerial9prepareTXEv+0x5a>
 8083d8a:	4812      	ldr	r0, [pc, #72]	; (8083dd4 <_ZN18ParticleSoftSerial9prepareTXEv+0x90>)
 8083d8c:	f7fc f9b0 	bl	80800f0 <__cxa_guard_acquire>
 8083d90:	b128      	cbz	r0, 8083d9e <_ZN18ParticleSoftSerial9prepareTXEv+0x5a>
 8083d92:	f001 ff8d 	bl	8085cb0 <HAL_Pin_Map>
 8083d96:	6030      	str	r0, [r6, #0]
 8083d98:	480e      	ldr	r0, [pc, #56]	; (8083dd4 <_ZN18ParticleSoftSerial9prepareTXEv+0x90>)
 8083d9a:	f7fc f9ae 	bl	80800fa <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8083d9e:	6833      	ldr	r3, [r6, #0]
 8083da0:	88ba      	ldrh	r2, [r7, #4]
 8083da2:	595b      	ldr	r3, [r3, r5]
 8083da4:	831a      	strh	r2, [r3, #24]
  _txBitPos = PSS_INACTIVE;
 8083da6:	22fe      	movs	r2, #254	; 0xfe
 8083da8:	4b0c      	ldr	r3, [pc, #48]	; (8083ddc <_ZN18ParticleSoftSerial9prepareTXEv+0x98>)
 8083daa:	701a      	strb	r2, [r3, #0]
  txTimer.begin(txTimerISR, _usBitLength, uSec, _txTimId);
 8083dac:	4b0c      	ldr	r3, [pc, #48]	; (8083de0 <_ZN18ParticleSoftSerial9prepareTXEv+0x9c>)
 8083dae:	681a      	ldr	r2, [r3, #0]
		if (Period < 10 || Period > MAX_PERIOD)
 8083db0:	2a09      	cmp	r2, #9
 8083db2:	d90a      	bls.n	8083dca <_ZN18ParticleSoftSerial9prepareTXEv+0x86>
 8083db4:	480b      	ldr	r0, [pc, #44]	; (8083de4 <_ZN18ParticleSoftSerial9prepareTXEv+0xa0>)
 8083db6:	88c3      	ldrh	r3, [r0, #6]
 8083db8:	429a      	cmp	r2, r3
 8083dba:	d806      	bhi.n	8083dca <_ZN18ParticleSoftSerial9prepareTXEv+0x86>
 8083dbc:	4b0a      	ldr	r3, [pc, #40]	; (8083de8 <_ZN18ParticleSoftSerial9prepareTXEv+0xa4>)
		return beginCycles(isrCallback, Period, scale, id);
 8083dbe:	490b      	ldr	r1, [pc, #44]	; (8083dec <_ZN18ParticleSoftSerial9prepareTXEv+0xa8>)
 8083dc0:	781b      	ldrb	r3, [r3, #0]
 8083dc2:	9300      	str	r3, [sp, #0]
 8083dc4:	2300      	movs	r3, #0
 8083dc6:	f001 ff1d 	bl	8085c04 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
}
 8083dca:	b003      	add	sp, #12
 8083dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083dce:	bf00      	nop
 8083dd0:	20000044 	.word	0x20000044
 8083dd4:	20000910 	.word	0x20000910
 8083dd8:	20000914 	.word	0x20000914
 8083ddc:	2000004c 	.word	0x2000004c
 8083de0:	2000003c 	.word	0x2000003c
 8083de4:	20000934 	.word	0x20000934
 8083de8:	20000049 	.word	0x20000049
 8083dec:	08083a11 	.word	0x08083a11

08083df0 <_ZN18ParticleSoftSerial5beginEmm>:
  if (config & SERIAL_DATA_BITS_9)
 8083df0:	f012 0f10 	tst.w	r2, #16
{
 8083df4:	b570      	push	{r4, r5, r6, lr}
 8083df6:	4b23      	ldr	r3, [pc, #140]	; (8083e84 <_ZN18ParticleSoftSerial5beginEmm+0x94>)
 8083df8:	4604      	mov	r4, r0
  if (config & SERIAL_DATA_BITS_9)
 8083dfa:	d039      	beq.n	8083e70 <_ZN18ParticleSoftSerial5beginEmm+0x80>
    _dataBits = 9;
 8083dfc:	2009      	movs	r0, #9
    _dataBits = 8;
 8083dfe:	7018      	strb	r0, [r3, #0]
  if (config & SERIAL_STOP_BITS_2)
 8083e00:	781b      	ldrb	r3, [r3, #0]
 8083e02:	07d0      	lsls	r0, r2, #31
    _totalBits = _dataBits + 2;
 8083e04:	bf4c      	ite	mi
 8083e06:	3302      	addmi	r3, #2
    _totalBits = _dataBits + 1;
 8083e08:	3301      	addpl	r3, #1
 8083e0a:	4d1f      	ldr	r5, [pc, #124]	; (8083e88 <_ZN18ParticleSoftSerial5beginEmm+0x98>)
 8083e0c:	b2db      	uxtb	r3, r3
  if (config & SERIAL_PARITY)
 8083e0e:	f012 060c 	ands.w	r6, r2, #12
 8083e12:	481e      	ldr	r0, [pc, #120]	; (8083e8c <_ZN18ParticleSoftSerial5beginEmm+0x9c>)
 8083e14:	702b      	strb	r3, [r5, #0]
 8083e16:	d030      	beq.n	8083e7a <_ZN18ParticleSoftSerial5beginEmm+0x8a>
    _parity = (config & SERIAL_PARITY_ODD) ? 0x11 : 0x10;
 8083e18:	f012 0f08 	tst.w	r2, #8
 8083e1c:	bf14      	ite	ne
 8083e1e:	2211      	movne	r2, #17
 8083e20:	2210      	moveq	r2, #16
    _totalBits++;
 8083e22:	3301      	adds	r3, #1
    _parity = (config & SERIAL_PARITY_ODD) ? 0x11 : 0x10;
 8083e24:	7002      	strb	r2, [r0, #0]
    _totalBits++;
 8083e26:	702b      	strb	r3, [r5, #0]
  for (int i=0; btTable[i].baudrate > 0; i++)
 8083e28:	4a19      	ldr	r2, [pc, #100]	; (8083e90 <_ZN18ParticleSoftSerial5beginEmm+0xa0>)
 8083e2a:	2500      	movs	r5, #0
 8083e2c:	200c      	movs	r0, #12
 8083e2e:	4616      	mov	r6, r2
 8083e30:	fb00 f305 	mul.w	r3, r0, r5
 8083e34:	589b      	ldr	r3, [r3, r2]
 8083e36:	b183      	cbz	r3, 8083e5a <_ZN18ParticleSoftSerial5beginEmm+0x6a>
    if (btTable[i].baudrate <= baud)
 8083e38:	428b      	cmp	r3, r1
 8083e3a:	d820      	bhi.n	8083e7e <_ZN18ParticleSoftSerial5beginEmm+0x8e>
      if (btTable[i].baudrate != baud)
 8083e3c:	d004      	beq.n	8083e48 <_ZN18ParticleSoftSerial5beginEmm+0x58>
        Log.info("%lu not available! Selected rate %lu", baud, btTable[i].baudrate);
 8083e3e:	460a      	mov	r2, r1
 8083e40:	4814      	ldr	r0, [pc, #80]	; (8083e94 <_ZN18ParticleSoftSerial5beginEmm+0xa4>)
 8083e42:	4915      	ldr	r1, [pc, #84]	; (8083e98 <_ZN18ParticleSoftSerial5beginEmm+0xa8>)
 8083e44:	f7fc fac2 	bl	80803cc <_ZNK5spark6Logger4infoEPKcz>
      _usStartBit  = btTable[i].usStartBit;
 8083e48:	230c      	movs	r3, #12
 8083e4a:	fb03 6505 	mla	r5, r3, r5, r6
 8083e4e:	4b13      	ldr	r3, [pc, #76]	; (8083e9c <_ZN18ParticleSoftSerial5beginEmm+0xac>)
 8083e50:	686a      	ldr	r2, [r5, #4]
 8083e52:	601a      	str	r2, [r3, #0]
      _usBitLength = btTable[i].usBitLength;
 8083e54:	68aa      	ldr	r2, [r5, #8]
 8083e56:	4b12      	ldr	r3, [pc, #72]	; (8083ea0 <_ZN18ParticleSoftSerial5beginEmm+0xb0>)
 8083e58:	601a      	str	r2, [r3, #0]
  if (!_halfduplex)
 8083e5a:	4b12      	ldr	r3, [pc, #72]	; (8083ea4 <_ZN18ParticleSoftSerial5beginEmm+0xb4>)
 8083e5c:	781b      	ldrb	r3, [r3, #0]
 8083e5e:	b913      	cbnz	r3, 8083e66 <_ZN18ParticleSoftSerial5beginEmm+0x76>
    prepareTX();
 8083e60:	4620      	mov	r0, r4
 8083e62:	f7ff ff6f 	bl	8083d44 <_ZN18ParticleSoftSerial9prepareTXEv>
  prepareRX();
 8083e66:	4620      	mov	r0, r4
}
 8083e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  prepareRX();
 8083e6c:	f7ff bd9e 	b.w	80839ac <_ZN18ParticleSoftSerial9prepareRXEv>
  else if (config & SERIAL_DATA_BITS_7)
 8083e70:	0695      	lsls	r5, r2, #26
    _dataBits = 7;
 8083e72:	bf4c      	ite	mi
 8083e74:	2007      	movmi	r0, #7
    _dataBits = 8;
 8083e76:	2008      	movpl	r0, #8
 8083e78:	e7c1      	b.n	8083dfe <_ZN18ParticleSoftSerial5beginEmm+0xe>
    _parity = 0;
 8083e7a:	7006      	strb	r6, [r0, #0]
 8083e7c:	e7d4      	b.n	8083e28 <_ZN18ParticleSoftSerial5beginEmm+0x38>
  for (int i=0; btTable[i].baudrate > 0; i++)
 8083e7e:	3501      	adds	r5, #1
 8083e80:	e7d6      	b.n	8083e30 <_ZN18ParticleSoftSerial5beginEmm+0x40>
 8083e82:	bf00      	nop
 8083e84:	2000004a 	.word	0x2000004a
 8083e88:	20000034 	.word	0x20000034
 8083e8c:	20000920 	.word	0x20000920
 8083e90:	0808cb3c 	.word	0x0808cb3c
 8083e94:	20000ae8 	.word	0x20000ae8
 8083e98:	0808cb14 	.word	0x0808cb14
 8083e9c:	20000038 	.word	0x20000038
 8083ea0:	2000003c 	.word	0x2000003c
 8083ea4:	20000918 	.word	0x20000918

08083ea8 <_ZN18ParticleSoftSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8083ea8:	2200      	movs	r2, #0
 8083eaa:	f7ff bfa1 	b.w	8083df0 <_ZN18ParticleSoftSerial5beginEmm>
	...

08083eb0 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
}
 8083eb0:	b570      	push	{r4, r5, r6, lr}
IntervalTimer ParticleSoftSerial::rxTimer;
 8083eb2:	4c0b      	ldr	r4, [pc, #44]	; (8083ee0 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x30>)
 8083eb4:	4e0b      	ldr	r6, [pc, #44]	; (8083ee4 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x34>)
 8083eb6:	4d0c      	ldr	r5, [pc, #48]	; (8083ee8 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 8083eb8:	4620      	mov	r0, r4
 8083eba:	f7ff fd19 	bl	80838f0 <_ZN13IntervalTimerC1Ev>
 8083ebe:	4620      	mov	r0, r4
IntervalTimer ParticleSoftSerial::txTimer;
 8083ec0:	4c0a      	ldr	r4, [pc, #40]	; (8083eec <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
IntervalTimer ParticleSoftSerial::rxTimer;
 8083ec2:	4632      	mov	r2, r6
 8083ec4:	4629      	mov	r1, r5
 8083ec6:	f005 f92b 	bl	8089120 <__aeabi_atexit>
IntervalTimer ParticleSoftSerial::txTimer;
 8083eca:	4620      	mov	r0, r4
 8083ecc:	f7ff fd10 	bl	80838f0 <_ZN13IntervalTimerC1Ev>
 8083ed0:	4632      	mov	r2, r6
 8083ed2:	4629      	mov	r1, r5
 8083ed4:	4620      	mov	r0, r4
}
 8083ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IntervalTimer ParticleSoftSerial::txTimer;
 8083eda:	f005 b921 	b.w	8089120 <__aeabi_atexit>
 8083ede:	bf00      	nop
 8083ee0:	20000924 	.word	0x20000924
 8083ee4:	20000230 	.word	0x20000230
 8083ee8:	0808371d 	.word	0x0808371d
 8083eec:	20000934 	.word	0x20000934

08083ef0 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 8083ef0:	7501      	strb	r1, [r0, #20]
 8083ef2:	4770      	bx	lr

08083ef4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 8083ef4:	b538      	push	{r3, r4, r5, lr}
 8083ef6:	4b0b      	ldr	r3, [pc, #44]	; (8083f24 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 8083ef8:	6984      	ldr	r4, [r0, #24]
 8083efa:	4605      	mov	r5, r0
 8083efc:	6003      	str	r3, [r0, #0]
 8083efe:	b17c      	cbz	r4, 8083f20 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 8083f00:	6863      	ldr	r3, [r4, #4]
 8083f02:	3b01      	subs	r3, #1
 8083f04:	6063      	str	r3, [r4, #4]
 8083f06:	b95b      	cbnz	r3, 8083f20 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 8083f08:	6823      	ldr	r3, [r4, #0]
 8083f0a:	4620      	mov	r0, r4
 8083f0c:	689b      	ldr	r3, [r3, #8]
 8083f0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083f10:	68a3      	ldr	r3, [r4, #8]
 8083f12:	3b01      	subs	r3, #1
 8083f14:	60a3      	str	r3, [r4, #8]
 8083f16:	b91b      	cbnz	r3, 8083f20 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8083f18:	6823      	ldr	r3, [r4, #0]
 8083f1a:	4620      	mov	r0, r4
 8083f1c:	68db      	ldr	r3, [r3, #12]
 8083f1e:	4798      	blx	r3
 8083f20:	4628      	mov	r0, r5
 8083f22:	bd38      	pop	{r3, r4, r5, pc}
 8083f24:	0808d11c 	.word	0x0808d11c

08083f28 <_ZN9TCPClientD0Ev>:
 8083f28:	b510      	push	{r4, lr}
 8083f2a:	4604      	mov	r4, r0
 8083f2c:	f7ff ffe2 	bl	8083ef4 <_ZN9TCPClientD1Ev>
 8083f30:	4620      	mov	r0, r4
 8083f32:	211c      	movs	r1, #28
 8083f34:	f005 f8f9 	bl	808912a <_ZdlPvj>
 8083f38:	4620      	mov	r0, r4
 8083f3a:	bd10      	pop	{r4, pc}

08083f3c <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
 8083f3c:	b530      	push	{r4, r5, lr}
               const char* token) {
 8083f3e:	4d06      	ldr	r5, [pc, #24]	; (8083f58 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
  _user_agent = user_agent;
 8083f40:	e9c0 1301 	strd	r1, r3, [r0, #4]
               const char* token) {
 8083f44:	6005      	str	r5, [r0, #0]
 8083f46:	2500      	movs	r5, #0
 8083f48:	7505      	strb	r5, [r0, #20]
 8083f4a:	f241 3588 	movw	r5, #5000	; 0x1388
  _token = token;
 8083f4e:	9b03      	ldr	r3, [sp, #12]
               const char* token) {
 8083f50:	6185      	str	r5, [r0, #24]
  _port = port;
 8083f52:	e9c0 3203 	strd	r3, r2, [r0, #12]
}
 8083f56:	bd30      	pop	{r4, r5, pc}
 8083f58:	0808cce4 	.word	0x0808cce4

08083f5c <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
 8083f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083f60:	460d      	mov	r5, r1
 8083f62:	4617      	mov	r7, r2
 8083f64:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
 8083f66:	f004 fadd 	bl	8088524 <_Z16_fetch_usbserialv>
 8083f6a:	491e      	ldr	r1, [pc, #120]	; (8083fe4 <_ZN6UbiTCP9reconnectEPKci+0x88>)
 8083f6c:	f003 f883 	bl	8087076 <_ZN5Print7printlnEPKc>
 8083f70:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8083f72:	4e1d      	ldr	r6, [pc, #116]	; (8083fe8 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
 8083f74:	f8df a074 	ldr.w	sl, [pc, #116]	; 8083fec <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
 8083f78:	f8df b074 	ldr.w	fp, [pc, #116]	; 8083ff0 <_ZN6UbiTCP9reconnectEPKci+0x94>
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8083f7c:	4630      	mov	r0, r6
 8083f7e:	f002 fe55 	bl	8086c2c <_ZN9TCPClient6statusEv>
 8083f82:	bb60      	cbnz	r0, 8083fde <_ZN6UbiTCP9reconnectEPKci+0x82>
 8083f84:	2c05      	cmp	r4, #5
 8083f86:	d02a      	beq.n	8083fde <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
 8083f88:	f898 3014 	ldrb.w	r3, [r8, #20]
 8083f8c:	b1c3      	cbz	r3, 8083fc0 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
 8083f8e:	f004 fac9 	bl	8088524 <_Z16_fetch_usbserialv>
 8083f92:	4651      	mov	r1, sl
 8083f94:	f003 f858 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(host);
 8083f98:	f004 fac4 	bl	8088524 <_Z16_fetch_usbserialv>
 8083f9c:	4629      	mov	r1, r5
 8083f9e:	f003 f853 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 8083fa2:	f004 fabf 	bl	8088524 <_Z16_fetch_usbserialv>
 8083fa6:	4659      	mov	r1, fp
 8083fa8:	f003 f84e 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 8083fac:	f004 faba 	bl	8088524 <_Z16_fetch_usbserialv>
 8083fb0:	4681      	mov	r9, r0
        return printNumber(val, base) + t;
 8083fb2:	220a      	movs	r2, #10
 8083fb4:	4621      	mov	r1, r4
 8083fb6:	f003 f868 	bl	808708a <_ZN5Print11printNumberEmh>
        n += println();
 8083fba:	4648      	mov	r0, r9
 8083fbc:	f003 f84f 	bl	808705e <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
 8083fc0:	4630      	mov	r0, r6
 8083fc2:	f002 fe1b 	bl	8086bfc <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
 8083fc6:	2300      	movs	r3, #0
 8083fc8:	4629      	mov	r1, r5
 8083fca:	b2ba      	uxth	r2, r7
 8083fcc:	4630      	mov	r0, r6
 8083fce:	f002 fedb 	bl	8086d88 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
 8083fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8083fd6:	f003 fabe 	bl	8087556 <delay>
 8083fda:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
 8083fdc:	e7ce      	b.n	8083f7c <_ZN6UbiTCP9reconnectEPKci+0x20>
}
 8083fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083fe2:	bf00      	nop
 8083fe4:	0808cbd8 	.word	0x0808cbd8
 8083fe8:	200009c4 	.word	0x200009c4
 8083fec:	0808cbf0 	.word	0x0808cbf0
 8083ff0:	0808cc06 	.word	0x0808cc06

08083ff4 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
 8083ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083ff6:	4604      	mov	r4, r0
  int timeout = 0;
 8083ff8:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
 8083ffa:	4f0d      	ldr	r7, [pc, #52]	; (8084030 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
 8083ffc:	4638      	mov	r0, r7
 8083ffe:	f002 fdc3 	bl	8086b88 <_ZN9TCPClient9availableEv>
 8084002:	4605      	mov	r5, r0
 8084004:	b990      	cbnz	r0, 808402c <_ZN6UbiTCP16waitServerAnswerEv+0x38>
 8084006:	69a3      	ldr	r3, [r4, #24]
 8084008:	42b3      	cmp	r3, r6
 808400a:	dd0f      	ble.n	808402c <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
 808400c:	2001      	movs	r0, #1
 808400e:	f003 faa2 	bl	8087556 <delay>
    if (timeout > _timeout - 1) {
 8084012:	69a3      	ldr	r3, [r4, #24]
    timeout++;
 8084014:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
 8084016:	42b3      	cmp	r3, r6
 8084018:	dcf0      	bgt.n	8083ffc <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
 808401a:	7d20      	ldrb	r0, [r4, #20]
 808401c:	b128      	cbz	r0, 808402a <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
 808401e:	f004 fa81 	bl	8088524 <_Z16_fetch_usbserialv>
 8084022:	4904      	ldr	r1, [pc, #16]	; (8084034 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
 8084024:	f003 f827 	bl	8087076 <_ZN5Print7printlnEPKc>
 8084028:	4628      	mov	r0, r5
}
 808402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
 808402c:	2001      	movs	r0, #1
 808402e:	e7fc      	b.n	808402a <_ZN6UbiTCP16waitServerAnswerEv+0x36>
 8084030:	200009c4 	.word	0x200009c4
 8084034:	0808cc1a 	.word	0x0808cc1a

08084038 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 8084038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
 808403c:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 808403e:	4606      	mov	r6, r0
 8084040:	4688      	mov	r8, r1
 8084042:	4614      	mov	r4, r2
  if (_debug) {
 8084044:	b14b      	cbz	r3, 808405a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
 8084046:	f004 fa6d 	bl	8088524 <_Z16_fetch_usbserialv>
 808404a:	4921      	ldr	r1, [pc, #132]	; (80840d0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x98>)
 808404c:	f003 f813 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8084050:	f004 fa68 	bl	8088524 <_Z16_fetch_usbserialv>
 8084054:	491f      	ldr	r1, [pc, #124]	; (80840d4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x9c>)
 8084056:	f003 f80e 	bl	8087076 <_ZN5Print7printlnEPKc>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
 808405a:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
 808405c:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
 8084060:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80840e8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>
 8084064:	4648      	mov	r0, r9
 8084066:	f002 fd8f 	bl	8086b88 <_ZN9TCPClient9availableEv>
 808406a:	b178      	cbz	r0, 808408c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
 808406c:	4648      	mov	r0, r9
 808406e:	f002 fcd5 	bl	8086a1c <_ZN9TCPClient4readEv>
    if (_debug) {
 8084072:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
 8084074:	b2c7      	uxtb	r7, r0
    if (_debug) {
 8084076:	b12b      	cbz	r3, 8084084 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
 8084078:	f004 fa54 	bl	8088524 <_Z16_fetch_usbserialv>
 808407c:	6803      	ldr	r3, [r0, #0]
 808407e:	4639      	mov	r1, r7
 8084080:	689b      	ldr	r3, [r3, #8]
 8084082:	4798      	blx	r3
    response[j] = c;
 8084084:	5567      	strb	r7, [r4, r5]
    j++;
 8084086:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
 8084088:	4555      	cmp	r5, sl
 808408a:	d1eb      	bne.n	8084064 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
 808408c:	7d33      	ldrb	r3, [r6, #20]
 808408e:	b123      	cbz	r3, 808409a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
 8084090:	f004 fa48 	bl	8088524 <_Z16_fetch_usbserialv>
 8084094:	4910      	ldr	r1, [pc, #64]	; (80840d8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa0>)
 8084096:	f002 ffee 	bl	8087076 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
 808409a:	2300      	movs	r3, #0
 808409c:	5563      	strb	r3, [r4, r5]
  if (request_type == "POST") {
 808409e:	4b0f      	ldr	r3, [pc, #60]	; (80840dc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>)
 80840a0:	4598      	cmp	r8, r3
 80840a2:	d108      	bne.n	80840b6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7e>
    char* pch = strstr(response, "OK");
 80840a4:	4620      	mov	r0, r4
 80840a6:	490e      	ldr	r1, [pc, #56]	; (80840e0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa8>)
 80840a8:	f006 fb52 	bl	808a750 <strstr>
    if (pch != NULL) {
 80840ac:	b170      	cbz	r0, 80840cc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x94>
      result = 1;
 80840ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
}
 80840b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
 80840b6:	217c      	movs	r1, #124	; 0x7c
 80840b8:	4620      	mov	r0, r4
 80840ba:	f006 fae1 	bl	808a680 <strchr>
  if (pch != NULL) {
 80840be:	b128      	cbz	r0, 80840cc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x94>
    result = atof(pch + 1);
 80840c0:	3001      	adds	r0, #1
 80840c2:	f006 fa83 	bl	808a5cc <atof>
 80840c6:	f005 fe7d 	bl	8089dc4 <__aeabi_d2f>
 80840ca:	e7f2      	b.n	80840b2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7a>
  float result = ERROR_VALUE;
 80840cc:	4805      	ldr	r0, [pc, #20]	; (80840e4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
 80840ce:	e7f0      	b.n	80840b2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x7a>
 80840d0:	0808cc61 	.word	0x0808cc61
 80840d4:	0808cc4d 	.word	0x0808cc4d
 80840d8:	0808cc60 	.word	0x0808cc60
 80840dc:	0808cc6c 	.word	0x0808cc6c
 80840e0:	0808cc71 	.word	0x0808cc71
 80840e4:	cda2425f 	.word	0xcda2425f
 80840e8:	200009c4 	.word	0x200009c4

080840ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
                      char* payload, UbiFlags* flags) {
 80840ec:	b570      	push	{r4, r5, r6, lr}
 80840ee:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 80840f0:	6841      	ldr	r1, [r0, #4]
 80840f2:	f242 3234 	movw	r2, #9012	; 0x2334
                      char* payload, UbiFlags* flags) {
 80840f6:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 80840f8:	481e      	ldr	r0, [pc, #120]	; (8084174 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 80840fa:	2300      	movs	r3, #0
 80840fc:	f002 fe44 	bl	8086d88 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 8084100:	4620      	mov	r0, r4
 8084102:	f242 3234 	movw	r2, #9012	; 0x2334
 8084106:	6861      	ldr	r1, [r4, #4]
 8084108:	f7ff ff28 	bl	8083f5c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
 808410c:	4819      	ldr	r0, [pc, #100]	; (8084174 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 808410e:	f002 fdca 	bl	8086ca6 <_ZN9TCPClient9connectedEv>
 8084112:	b328      	cbz	r0, 8084160 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x74>
    _client_tcp_ubi.print(payload);
 8084114:	4629      	mov	r1, r5
 8084116:	4817      	ldr	r0, [pc, #92]	; (8084174 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8084118:	f002 ff96 	bl	8087048 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
 808411c:	4620      	mov	r0, r4
 808411e:	f7ff ff69 	bl	8083ff4 <_ZN6UbiTCP16waitServerAnswerEv>
 8084122:	4605      	mov	r5, r0
 8084124:	b928      	cbnz	r0, 8084132 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    _client_tcp_ubi.stop();
 8084126:	4813      	ldr	r0, [pc, #76]	; (8084174 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 8084128:	f002 fd68 	bl	8086bfc <_ZN9TCPClient4stopEv>
    return false;
 808412c:	2500      	movs	r5, #0
}
 808412e:	4628      	mov	r0, r5
 8084130:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
 8084132:	2064      	movs	r0, #100	; 0x64
 8084134:	f002 f926 	bl	8086384 <malloc>
  float value = parseTCPAnswer("POST", response);
 8084138:	490f      	ldr	r1, [pc, #60]	; (8084178 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>)
 808413a:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
 808413c:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
 808413e:	4620      	mov	r0, r4
 8084140:	f7ff ff7a 	bl	8084038 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 8084144:	4604      	mov	r4, r0
  free(response);
 8084146:	4630      	mov	r0, r6
 8084148:	f002 f924 	bl	8086394 <free>
  if (value != ERROR_VALUE) {
 808414c:	4620      	mov	r0, r4
 808414e:	490b      	ldr	r1, [pc, #44]	; (808417c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x90>)
 8084150:	f006 f92a 	bl	808a3a8 <__aeabi_fcmpeq>
 8084154:	2800      	cmp	r0, #0
 8084156:	d1e6      	bne.n	8084126 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    _client_tcp_ubi.stop();
 8084158:	4806      	ldr	r0, [pc, #24]	; (8084174 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x88>)
 808415a:	f002 fd4f 	bl	8086bfc <_ZN9TCPClient4stopEv>
    return true;
 808415e:	e7e6      	b.n	808412e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
 8084160:	7d23      	ldrb	r3, [r4, #20]
 8084162:	2b00      	cmp	r3, #0
 8084164:	d0df      	beq.n	8084126 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
      Serial.println("Could not connect to the host");
 8084166:	f004 f9dd 	bl	8088524 <_Z16_fetch_usbserialv>
 808416a:	4905      	ldr	r1, [pc, #20]	; (8084180 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
 808416c:	f002 ff83 	bl	8087076 <_ZN5Print7printlnEPKc>
 8084170:	e7d9      	b.n	8084126 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
 8084172:	bf00      	nop
 8084174:	200009c4 	.word	0x200009c4
 8084178:	0808cc6c 	.word	0x0808cc6c
 808417c:	cda2425f 	.word	0xcda2425f
 8084180:	0808cc74 	.word	0x0808cc74

08084184 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
 8084184:	b570      	push	{r4, r5, r6, lr}
 8084186:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 8084188:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
 808418a:	460e      	mov	r6, r1
 808418c:	4615      	mov	r5, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
 808418e:	6841      	ldr	r1, [r0, #4]
 8084190:	f242 3234 	movw	r2, #9012	; 0x2334
 8084194:	4845      	ldr	r0, [pc, #276]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 8084196:	f002 fdf7 	bl	8086d88 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
 808419a:	4620      	mov	r0, r4
 808419c:	f242 3234 	movw	r2, #9012	; 0x2334
 80841a0:	6861      	ldr	r1, [r4, #4]
 80841a2:	f7ff fedb 	bl	8083f5c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
 80841a6:	4841      	ldr	r0, [pc, #260]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841a8:	f002 fd7d 	bl	8086ca6 <_ZN9TCPClient9connectedEv>
 80841ac:	2800      	cmp	r0, #0
 80841ae:	d074      	beq.n	808429a <_ZN6UbiTCP3getEPKcS1_+0x116>
    _client_tcp_ubi.print(_user_agent);
 80841b0:	68a1      	ldr	r1, [r4, #8]
 80841b2:	483e      	ldr	r0, [pc, #248]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841b4:	f002 ff48 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
 80841b8:	493d      	ldr	r1, [pc, #244]	; (80842b0 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 80841ba:	483c      	ldr	r0, [pc, #240]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841bc:	f002 ff44 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
 80841c0:	68e1      	ldr	r1, [r4, #12]
 80841c2:	483a      	ldr	r0, [pc, #232]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841c4:	f002 ff40 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
 80841c8:	493a      	ldr	r1, [pc, #232]	; (80842b4 <_ZN6UbiTCP3getEPKcS1_+0x130>)
 80841ca:	4838      	ldr	r0, [pc, #224]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841cc:	f002 ff3c 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
 80841d0:	4631      	mov	r1, r6
 80841d2:	4836      	ldr	r0, [pc, #216]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841d4:	f002 ff38 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
 80841d8:	4937      	ldr	r1, [pc, #220]	; (80842b8 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 80841da:	4834      	ldr	r0, [pc, #208]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841dc:	f002 ff34 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
 80841e0:	4629      	mov	r1, r5
 80841e2:	4832      	ldr	r0, [pc, #200]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841e4:	f002 ff30 	bl	8087048 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
 80841e8:	4934      	ldr	r1, [pc, #208]	; (80842bc <_ZN6UbiTCP3getEPKcS1_+0x138>)
 80841ea:	4830      	ldr	r0, [pc, #192]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 80841ec:	f002 ff2c 	bl	8087048 <_ZN5Print5printEPKc>
    if (_debug) {
 80841f0:	7d23      	ldrb	r3, [r4, #20]
 80841f2:	b3b3      	cbz	r3, 8084262 <_ZN6UbiTCP3getEPKcS1_+0xde>
      Serial.println("----");
 80841f4:	f004 f996 	bl	8088524 <_Z16_fetch_usbserialv>
 80841f8:	4931      	ldr	r1, [pc, #196]	; (80842c0 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
 80841fa:	f002 ff3c 	bl	8087076 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
 80841fe:	f004 f991 	bl	8088524 <_Z16_fetch_usbserialv>
 8084202:	4930      	ldr	r1, [pc, #192]	; (80842c4 <_ZN6UbiTCP3getEPKcS1_+0x140>)
 8084204:	f002 ff37 	bl	8087076 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
 8084208:	f004 f98c 	bl	8088524 <_Z16_fetch_usbserialv>
 808420c:	68a1      	ldr	r1, [r4, #8]
 808420e:	f002 ff1b 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
 8084212:	f004 f987 	bl	8088524 <_Z16_fetch_usbserialv>
 8084216:	4926      	ldr	r1, [pc, #152]	; (80842b0 <_ZN6UbiTCP3getEPKcS1_+0x12c>)
 8084218:	f002 ff16 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(_token);
 808421c:	f004 f982 	bl	8088524 <_Z16_fetch_usbserialv>
 8084220:	68e1      	ldr	r1, [r4, #12]
 8084222:	f002 ff11 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("|");
 8084226:	f004 f97d 	bl	8088524 <_Z16_fetch_usbserialv>
 808422a:	4922      	ldr	r1, [pc, #136]	; (80842b4 <_ZN6UbiTCP3getEPKcS1_+0x130>)
 808422c:	f002 ff0c 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8084230:	f004 f978 	bl	8088524 <_Z16_fetch_usbserialv>
 8084234:	4631      	mov	r1, r6
 8084236:	f002 ff07 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(":");
 808423a:	f004 f973 	bl	8088524 <_Z16_fetch_usbserialv>
 808423e:	491e      	ldr	r1, [pc, #120]	; (80842b8 <_ZN6UbiTCP3getEPKcS1_+0x134>)
 8084240:	f002 ff02 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 8084244:	f004 f96e 	bl	8088524 <_Z16_fetch_usbserialv>
 8084248:	4629      	mov	r1, r5
 808424a:	f002 fefd 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("|end");
 808424e:	f004 f969 	bl	8088524 <_Z16_fetch_usbserialv>
 8084252:	491a      	ldr	r1, [pc, #104]	; (80842bc <_ZN6UbiTCP3getEPKcS1_+0x138>)
 8084254:	f002 fef8 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.println("\n----");
 8084258:	f004 f964 	bl	8088524 <_Z16_fetch_usbserialv>
 808425c:	491a      	ldr	r1, [pc, #104]	; (80842c8 <_ZN6UbiTCP3getEPKcS1_+0x144>)
 808425e:	f002 ff0a 	bl	8087076 <_ZN5Print7printlnEPKc>
    if (!waitServerAnswer()) {
 8084262:	4620      	mov	r0, r4
 8084264:	f7ff fec6 	bl	8083ff4 <_ZN6UbiTCP16waitServerAnswerEv>
 8084268:	b928      	cbnz	r0, 8084276 <_ZN6UbiTCP3getEPKcS1_+0xf2>
      _client_tcp_ubi.stop();
 808426a:	4810      	ldr	r0, [pc, #64]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 808426c:	f002 fcc6 	bl	8086bfc <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 8084270:	4c16      	ldr	r4, [pc, #88]	; (80842cc <_ZN6UbiTCP3getEPKcS1_+0x148>)
}
 8084272:	4620      	mov	r0, r4
 8084274:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8084276:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 808427a:	f002 f883 	bl	8086384 <malloc>
    float value = parseTCPAnswer("LV", response);
 808427e:	4914      	ldr	r1, [pc, #80]	; (80842d0 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
 8084280:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8084282:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
 8084284:	4620      	mov	r0, r4
 8084286:	f7ff fed7 	bl	8084038 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
 808428a:	4604      	mov	r4, r0
    _client_tcp_ubi.stop();
 808428c:	4807      	ldr	r0, [pc, #28]	; (80842ac <_ZN6UbiTCP3getEPKcS1_+0x128>)
 808428e:	f002 fcb5 	bl	8086bfc <_ZN9TCPClient4stopEv>
    free(response);
 8084292:	4628      	mov	r0, r5
 8084294:	f002 f87e 	bl	8086394 <free>
    return value;
 8084298:	e7eb      	b.n	8084272 <_ZN6UbiTCP3getEPKcS1_+0xee>
  if (_debug) {
 808429a:	7d23      	ldrb	r3, [r4, #20]
 808429c:	2b00      	cmp	r3, #0
 808429e:	d0e4      	beq.n	808426a <_ZN6UbiTCP3getEPKcS1_+0xe6>
    Serial.println("ERROR could not connect to the server");
 80842a0:	f004 f940 	bl	8088524 <_Z16_fetch_usbserialv>
 80842a4:	490b      	ldr	r1, [pc, #44]	; (80842d4 <_ZN6UbiTCP3getEPKcS1_+0x150>)
 80842a6:	f002 fee6 	bl	8087076 <_ZN5Print7printlnEPKc>
 80842aa:	e7de      	b.n	808426a <_ZN6UbiTCP3getEPKcS1_+0xe6>
 80842ac:	200009c4 	.word	0x200009c4
 80842b0:	0808cc92 	.word	0x0808cc92
 80842b4:	0808cc95 	.word	0x0808cc95
 80842b8:	0808cd8c 	.word	0x0808cd8c
 80842bc:	0808cdca 	.word	0x0808cdca
 80842c0:	0808ccad 	.word	0x0808ccad
 80842c4:	0808cc97 	.word	0x0808cc97
 80842c8:	0808ccac 	.word	0x0808ccac
 80842cc:	cda2425f 	.word	0xcda2425f
 80842d0:	0808ccb2 	.word	0x0808ccb2
 80842d4:	0808ccb5 	.word	0x0808ccb5

080842d8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
 80842d8:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
 80842da:	4c05      	ldr	r4, [pc, #20]	; (80842f0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
 80842dc:	4620      	mov	r0, r4
 80842de:	f002 fd3b 	bl	8086d58 <_ZN9TCPClientC1Ev>
 80842e2:	4620      	mov	r0, r4
 80842e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80842e8:	4a02      	ldr	r2, [pc, #8]	; (80842f4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
 80842ea:	4903      	ldr	r1, [pc, #12]	; (80842f8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
 80842ec:	f004 bf18 	b.w	8089120 <__aeabi_atexit>
 80842f0:	200009c4 	.word	0x200009c4
 80842f4:	20000230 	.word	0x20000230
 80842f8:	08083ef5 	.word	0x08083ef5

080842fc <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
 80842fc:	b510      	push	{r4, lr}
 80842fe:	4604      	mov	r4, r0
  delete[] _default_device_label;
 8084300:	6800      	ldr	r0, [r0, #0]
 8084302:	b108      	cbz	r0, 8084308 <_ZN18UbiProtocolHandlerD1Ev+0xc>
 8084304:	f7fb fee7 	bl	80800d6 <_ZdaPv>

  free(_dots);
 8084308:	68e0      	ldr	r0, [r4, #12]
 808430a:	f002 f843 	bl	8086394 <free>
  delete _ubiProtocol;
 808430e:	6860      	ldr	r0, [r4, #4]
 8084310:	b110      	cbz	r0, 8084318 <_ZN18UbiProtocolHandlerD1Ev+0x1c>
 8084312:	2104      	movs	r1, #4
 8084314:	f004 ff09 	bl	808912a <_ZdlPvj>
}
 8084318:	4620      	mov	r0, r4
 808431a:	bd10      	pop	{r4, pc}

0808431c <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
 808431c:	b570      	push	{r4, r5, r6, lr}
 808431e:	4604      	mov	r4, r0
  _dirty = true;
 8084320:	2001      	movs	r0, #1
 8084322:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
 8084324:	2014      	movs	r0, #20
 8084326:	f994 5010 	ldrsb.w	r5, [r4, #16]
 808432a:	68e6      	ldr	r6, [r4, #12]
 808432c:	4345      	muls	r5, r0
 808432e:	5171      	str	r1, [r6, r5]
  (_dots + _current_value)->dot_value = value;
 8084330:	f994 1010 	ldrsb.w	r1, [r4, #16]
 8084334:	68e5      	ldr	r5, [r4, #12]
 8084336:	fb00 5101 	mla	r1, r0, r1, r5
 808433a:	608a      	str	r2, [r1, #8]
  (_dots + _current_value)->dot_context = context;
 808433c:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8084340:	68e1      	ldr	r1, [r4, #12]
 8084342:	fb00 1202 	mla	r2, r0, r2, r1
 8084346:	6053      	str	r3, [r2, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
 8084348:	f994 3010 	ldrsb.w	r3, [r4, #16]
 808434c:	68e2      	ldr	r2, [r4, #12]
 808434e:	fb00 2303 	mla	r3, r0, r3, r2
 8084352:	9a04      	ldr	r2, [sp, #16]
 8084354:	60da      	str	r2, [r3, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
 8084356:	f994 3010 	ldrsb.w	r3, [r4, #16]
 808435a:	68e2      	ldr	r2, [r4, #12]
 808435c:	fb00 2003 	mla	r0, r0, r3, r2
 8084360:	9b05      	ldr	r3, [sp, #20]
 8084362:	6103      	str	r3, [r0, #16]
  _current_value++;
 8084364:	7c23      	ldrb	r3, [r4, #16]
 8084366:	3301      	adds	r3, #1
 8084368:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
 808436a:	2b0f      	cmp	r3, #15
  _current_value++;
 808436c:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
 808436e:	dd08      	ble.n	8084382 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x66>
    if (_debug) {
 8084370:	7ca3      	ldrb	r3, [r4, #18]
 8084372:	b123      	cbz	r3, 808437e <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x62>
      Serial.println(
 8084374:	f004 f8d6 	bl	8088524 <_Z16_fetch_usbserialv>
 8084378:	4902      	ldr	r1, [pc, #8]	; (8084384 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x68>)
 808437a:	f002 fe7c 	bl	8087076 <_ZN5Print7printlnEPKc>
          F("You are sending more than the maximum of consecutive variables"));
    }
    _current_value = MAX_VALUES;
 808437e:	230f      	movs	r3, #15
 8084380:	7423      	strb	r3, [r4, #16]
  }
}
 8084382:	bd70      	pop	{r4, r5, r6, pc}
 8084384:	0808ccf0 	.word	0x0808ccf0

08084388 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 8084388:	b510      	push	{r4, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
 808438a:	4610      	mov	r0, r2
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
 808438c:	b086      	sub	sp, #24
 808438e:	460c      	mov	r4, r1
  sprintf(temp_arr, "%17g", value);
 8084390:	f005 fa06 	bl	80897a0 <__aeabi_f2d>
 8084394:	4602      	mov	r2, r0
 8084396:	460b      	mov	r3, r1
 8084398:	a801      	add	r0, sp, #4
 808439a:	490b      	ldr	r1, [pc, #44]	; (80843c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
 808439c:	f002 f80a 	bl	80863b4 <sprintf>
 80843a0:	2214      	movs	r2, #20
  uint8_t j = 0;
  uint8_t k = 0;
 80843a2:	2300      	movs	r3, #0
 80843a4:	a801      	add	r0, sp, #4
  while (j < 20) {
    if (temp_arr[j] != ' ') {
 80843a6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80843aa:	2920      	cmp	r1, #32
 80843ac:	d006      	beq.n	80843bc <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x34>
      str_value[k] = temp_arr[j];
 80843ae:	54e1      	strb	r1, [r4, r3]
      k++;
 80843b0:	3301      	adds	r3, #1
 80843b2:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
 80843b4:	b911      	cbnz	r1, 80843bc <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x34>
      str_value[k] = temp_arr[j];
 80843b6:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
 80843b8:	b006      	add	sp, #24
 80843ba:	bd10      	pop	{r4, pc}
  while (j < 20) {
 80843bc:	3a01      	subs	r2, #1
 80843be:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80843c2:	d1f0      	bne.n	80843a6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x1e>
 80843c4:	e7f8      	b.n	80843b8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x30>
 80843c6:	bf00      	nop
 80843c8:	0808cd2f 	.word	0x0808cd2f

080843cc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
 80843cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80843d0:	460c      	mov	r4, r1
 80843d2:	4605      	mov	r5, r0
  sprintf(payload, "{");
 80843d4:	494a      	ldr	r1, [pc, #296]	; (8084500 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
 80843d6:	4620      	mov	r0, r4
void UbiProtocolHandler::buildHttpPayload(char* payload) {
 80843d8:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
 80843da:	f006 f968 	bl	808a6ae <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
 80843de:	2600      	movs	r6, #0
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
 80843e0:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8084524 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
 80843e4:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8084528 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>
        sprintf(payload, "%s000", payload);
 80843e8:	f8df a140 	ldr.w	sl, [pc, #320]	; 808452c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
  for (uint8_t i = 0; i < _current_value;) {
 80843ec:	f995 3010 	ldrsb.w	r3, [r5, #16]
 80843f0:	429e      	cmp	r6, r3
 80843f2:	da67      	bge.n	80844c4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf8>
    _floatToChar(str_value, (_dots + i)->dot_value);
 80843f4:	2714      	movs	r7, #20
 80843f6:	4377      	muls	r7, r6
 80843f8:	68eb      	ldr	r3, [r5, #12]
 80843fa:	f10d 0b0c 	add.w	fp, sp, #12
 80843fe:	443b      	add	r3, r7
 8084400:	689a      	ldr	r2, [r3, #8]
 8084402:	4659      	mov	r1, fp
 8084404:	4628      	mov	r0, r5
 8084406:	f7ff ffbf 	bl	8084388 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
 808440a:	68eb      	ldr	r3, [r5, #12]
 808440c:	f8cd b000 	str.w	fp, [sp]
 8084410:	59db      	ldr	r3, [r3, r7]
 8084412:	4622      	mov	r2, r4
 8084414:	4641      	mov	r1, r8
 8084416:	4620      	mov	r0, r4
 8084418:	f001 ffcc 	bl	80863b4 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 808441c:	68eb      	ldr	r3, [r5, #12]
 808441e:	443b      	add	r3, r7
 8084420:	68db      	ldr	r3, [r3, #12]
 8084422:	b343      	cbz	r3, 8084476 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xaa>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
 8084424:	4622      	mov	r2, r4
 8084426:	4649      	mov	r1, r9
 8084428:	4620      	mov	r0, r4
 808442a:	f001 ffc3 	bl	80863b4 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 808442e:	68eb      	ldr	r3, [r5, #12]
 8084430:	443b      	add	r3, r7
 8084432:	691b      	ldr	r3, [r3, #16]
 8084434:	2b00      	cmp	r3, #0
 8084436:	d038      	beq.n	80844aa <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xde>
        uint8_t dec = (timestamp_millis / 10) % 10;
 8084438:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
 808443a:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
 808443c:	fb93 f1f0 	sdiv	r1, r3, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
 8084440:	fb93 f2f2 	sdiv	r2, r3, r2
        uint8_t dec = (timestamp_millis / 10) % 10;
 8084444:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
 8084448:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
 808444c:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
 8084450:	fb00 3111 	mls	r1, r0, r1, r3
        uint8_t hund = (timestamp_millis / 100) % 10;
 8084454:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 8084458:	b2c9      	uxtb	r1, r1
 808445a:	9100      	str	r1, [sp, #0]
 808445c:	fa5f f38c 	uxtb.w	r3, ip
 8084460:	4928      	ldr	r1, [pc, #160]	; (8084504 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
 8084462:	b2d2      	uxtb	r2, r2
 8084464:	a802      	add	r0, sp, #8
 8084466:	f001 ffa5 	bl	80863b4 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 808446a:	4622      	mov	r2, r4
 808446c:	4620      	mov	r0, r4
 808446e:	4926      	ldr	r1, [pc, #152]	; (8084508 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
 8084470:	ab02      	add	r3, sp, #8
 8084472:	f001 ff9f 	bl	80863b4 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
 8084476:	68eb      	ldr	r3, [r5, #12]
 8084478:	441f      	add	r7, r3
 808447a:	687b      	ldr	r3, [r7, #4]
 808447c:	b123      	cbz	r3, 8084488 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xbc>
      sprintf(payload, "%s,\"context\": {%s}", payload,
 808447e:	4622      	mov	r2, r4
 8084480:	4620      	mov	r0, r4
 8084482:	4922      	ldr	r1, [pc, #136]	; (808450c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
 8084484:	f001 ff96 	bl	80863b4 <sprintf>
    sprintf(payload, "%s}", payload);
 8084488:	4622      	mov	r2, r4
 808448a:	4620      	mov	r0, r4
 808448c:	4920      	ldr	r1, [pc, #128]	; (8084510 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 808448e:	f001 ff91 	bl	80863b4 <sprintf>
    i++;
 8084492:	3601      	adds	r6, #1
    if (i < _current_value) {
 8084494:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
 8084498:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
 808449a:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
 808449c:	4622      	mov	r2, r4
    if (i < _current_value) {
 808449e:	da0a      	bge.n	80844b6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xea>
      sprintf(payload, "%s,", payload);
 80844a0:	4620      	mov	r0, r4
 80844a2:	491c      	ldr	r1, [pc, #112]	; (8084514 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
 80844a4:	f001 ff86 	bl	80863b4 <sprintf>
 80844a8:	e7a0      	b.n	80843ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
 80844aa:	4622      	mov	r2, r4
 80844ac:	4651      	mov	r1, sl
 80844ae:	4620      	mov	r0, r4
 80844b0:	f001 ff80 	bl	80863b4 <sprintf>
 80844b4:	e7df      	b.n	8084476 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xaa>
      sprintf(payload, "%s}", payload);
 80844b6:	4620      	mov	r0, r4
 80844b8:	4915      	ldr	r1, [pc, #84]	; (8084510 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
 80844ba:	f001 ff7b 	bl	80863b4 <sprintf>
      _current_value = 0;
 80844be:	2300      	movs	r3, #0
 80844c0:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
 80844c2:	e793      	b.n	80843ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
 80844c4:	7cab      	ldrb	r3, [r5, #18]
 80844c6:	b1c3      	cbz	r3, 80844fa <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x12e>
    Serial.println("----------");
 80844c8:	f004 f82c 	bl	8088524 <_Z16_fetch_usbserialv>
 80844cc:	4912      	ldr	r1, [pc, #72]	; (8084518 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 80844ce:	f002 fdd2 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 80844d2:	f004 f827 	bl	8088524 <_Z16_fetch_usbserialv>
 80844d6:	4911      	ldr	r1, [pc, #68]	; (808451c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
 80844d8:	f002 fdcd 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 80844dc:	f004 f822 	bl	8088524 <_Z16_fetch_usbserialv>
 80844e0:	4621      	mov	r1, r4
 80844e2:	f002 fdc8 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 80844e6:	f004 f81d 	bl	8088524 <_Z16_fetch_usbserialv>
 80844ea:	490b      	ldr	r1, [pc, #44]	; (8084518 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
 80844ec:	f002 fdc3 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("");
 80844f0:	f004 f818 	bl	8088524 <_Z16_fetch_usbserialv>
 80844f4:	490a      	ldr	r1, [pc, #40]	; (8084520 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
 80844f6:	f002 fdbe 	bl	8087076 <_ZN5Print7printlnEPKc>
}
 80844fa:	b009      	add	sp, #36	; 0x24
 80844fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084500:	0808cd34 	.word	0x0808cd34
 8084504:	0808cd5c 	.word	0x0808cd5c
 8084508:	0808cd63 	.word	0x0808cd63
 808450c:	0808cd6e 	.word	0x0808cd6e
 8084510:	0808cd7d 	.word	0x0808cd7d
 8084514:	0808cd81 	.word	0x0808cd81
 8084518:	0808cc61 	.word	0x0808cc61
 808451c:	0808cd85 	.word	0x0808cd85
 8084520:	0808cfab 	.word	0x0808cfab
 8084524:	0808cd36 	.word	0x0808cd36
 8084528:	0808cd49 	.word	0x0808cd49
 808452c:	0808cd68 	.word	0x0808cd68

08084530 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
                                         const char* device_name) {
 8084530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084534:	460c      	mov	r4, r1
 8084536:	4605      	mov	r5, r0
 8084538:	4616      	mov	r6, r2
 808453a:	461f      	mov	r7, r3
 808453c:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
 808453e:	4951      	ldr	r1, [pc, #324]	; (8084684 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
 8084540:	4620      	mov	r0, r4
 8084542:	f006 f8b4 	bl	808a6ae <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
 8084546:	68ab      	ldr	r3, [r5, #8]
 8084548:	4a4f      	ldr	r2, [pc, #316]	; (8084688 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
 808454a:	4950      	ldr	r1, [pc, #320]	; (808468c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
 808454c:	4620      	mov	r0, r4
 808454e:	f001 ff31 	bl	80863b4 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
 8084552:	4633      	mov	r3, r6
 8084554:	4622      	mov	r2, r4
 8084556:	494e      	ldr	r1, [pc, #312]	; (8084690 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
 8084558:	9700      	str	r7, [sp, #0]
 808455a:	4620      	mov	r0, r4
 808455c:	f001 ff2a 	bl	80863b4 <sprintf>
  sprintf(payload, "%s=>", payload);
 8084560:	4622      	mov	r2, r4
 8084562:	4620      	mov	r0, r4
 8084564:	494b      	ldr	r1, [pc, #300]	; (8084694 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
 8084566:	f001 ff25 	bl	80863b4 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
 808456a:	2600      	movs	r6, #0
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
 808456c:	4f48      	ldr	r7, [pc, #288]	; (8084690 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
 808456e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80846b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
 8084572:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80846b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  for (uint8_t i = 0; i < _current_value;) {
 8084576:	f995 3010 	ldrsb.w	r3, [r5, #16]
 808457a:	429e      	cmp	r6, r3
 808457c:	da64      	bge.n	8084648 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
 808457e:	f04f 0a14 	mov.w	sl, #20
 8084582:	fb0a fa06 	mul.w	sl, sl, r6
 8084586:	68eb      	ldr	r3, [r5, #12]
 8084588:	f10d 0b0c 	add.w	fp, sp, #12
 808458c:	4453      	add	r3, sl
 808458e:	689a      	ldr	r2, [r3, #8]
 8084590:	4659      	mov	r1, fp
 8084592:	4628      	mov	r0, r5
 8084594:	f7ff fef8 	bl	8084388 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
 8084598:	68eb      	ldr	r3, [r5, #12]
 808459a:	f8cd b000 	str.w	fp, [sp]
 808459e:	f853 300a 	ldr.w	r3, [r3, sl]
 80845a2:	4622      	mov	r2, r4
 80845a4:	4639      	mov	r1, r7
 80845a6:	4620      	mov	r0, r4
 80845a8:	f001 ff04 	bl	80863b4 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
 80845ac:	68eb      	ldr	r3, [r5, #12]
 80845ae:	4453      	add	r3, sl
 80845b0:	685b      	ldr	r3, [r3, #4]
 80845b2:	b123      	cbz	r3, 80845be <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
 80845b4:	4622      	mov	r2, r4
 80845b6:	4641      	mov	r1, r8
 80845b8:	4620      	mov	r0, r4
 80845ba:	f001 fefb 	bl	80863b4 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
 80845be:	68eb      	ldr	r3, [r5, #12]
 80845c0:	4453      	add	r3, sl
 80845c2:	68db      	ldr	r3, [r3, #12]
 80845c4:	b33b      	cbz	r3, 8084616 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
 80845c6:	4622      	mov	r2, r4
 80845c8:	4649      	mov	r1, r9
 80845ca:	4620      	mov	r0, r4
 80845cc:	f001 fef2 	bl	80863b4 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
 80845d0:	68eb      	ldr	r3, [r5, #12]
 80845d2:	4453      	add	r3, sl
 80845d4:	691b      	ldr	r3, [r3, #16]
 80845d6:	b353      	cbz	r3, 808462e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
 80845d8:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
 80845da:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
 80845dc:	fb93 f1f0 	sdiv	r1, r3, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
 80845e0:	fb93 f2f2 	sdiv	r2, r3, r2
        uint8_t dec = (timestamp_millis / 10) % 10;
 80845e4:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
 80845e8:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
 80845ec:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
 80845f0:	fb00 3111 	mls	r1, r0, r1, r3
        uint8_t hund = (timestamp_millis / 100) % 10;
 80845f4:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
 80845f8:	b2c9      	uxtb	r1, r1
 80845fa:	9100      	str	r1, [sp, #0]
 80845fc:	fa5f f38c 	uxtb.w	r3, ip
 8084600:	4925      	ldr	r1, [pc, #148]	; (8084698 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
 8084602:	b2d2      	uxtb	r2, r2
 8084604:	a802      	add	r0, sp, #8
 8084606:	f001 fed5 	bl	80863b4 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
 808460a:	4622      	mov	r2, r4
 808460c:	4620      	mov	r0, r4
 808460e:	4923      	ldr	r1, [pc, #140]	; (808469c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
 8084610:	ab02      	add	r3, sp, #8
 8084612:	f001 fecf 	bl	80863b4 <sprintf>
    if (i < _current_value) {
 8084616:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
 808461a:	3601      	adds	r6, #1
 808461c:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
 808461e:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
 8084620:	4622      	mov	r2, r4
    if (i < _current_value) {
 8084622:	da0a      	bge.n	808463a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
 8084624:	4620      	mov	r0, r4
 8084626:	491e      	ldr	r1, [pc, #120]	; (80846a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
 8084628:	f001 fec4 	bl	80863b4 <sprintf>
 808462c:	e7a3      	b.n	8084576 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
 808462e:	4622      	mov	r2, r4
 8084630:	4620      	mov	r0, r4
 8084632:	491c      	ldr	r1, [pc, #112]	; (80846a4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
 8084634:	f001 febe 	bl	80863b4 <sprintf>
 8084638:	e7ed      	b.n	8084616 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
 808463a:	4620      	mov	r0, r4
 808463c:	491a      	ldr	r1, [pc, #104]	; (80846a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
 808463e:	f001 feb9 	bl	80863b4 <sprintf>
      _current_value = 0;
 8084642:	2300      	movs	r3, #0
 8084644:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
 8084646:	e796      	b.n	8084576 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
 8084648:	7cab      	ldrb	r3, [r5, #18]
 808464a:	b1c3      	cbz	r3, 808467e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
 808464c:	f003 ff6a 	bl	8088524 <_Z16_fetch_usbserialv>
 8084650:	4916      	ldr	r1, [pc, #88]	; (80846ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
 8084652:	f002 fd10 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
 8084656:	f003 ff65 	bl	8088524 <_Z16_fetch_usbserialv>
 808465a:	4915      	ldr	r1, [pc, #84]	; (80846b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
 808465c:	f002 fd0b 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
 8084660:	f003 ff60 	bl	8088524 <_Z16_fetch_usbserialv>
 8084664:	4621      	mov	r1, r4
 8084666:	f002 fd06 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
 808466a:	f003 ff5b 	bl	8088524 <_Z16_fetch_usbserialv>
 808466e:	490f      	ldr	r1, [pc, #60]	; (80846ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
 8084670:	f002 fd01 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("");
 8084674:	f003 ff56 	bl	8088524 <_Z16_fetch_usbserialv>
 8084678:	4902      	ldr	r1, [pc, #8]	; (8084684 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
 808467a:	f002 fcfc 	bl	8087076 <_ZN5Print7printlnEPKc>
}
 808467e:	b009      	add	sp, #36	; 0x24
 8084680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084684:	0808cfab 	.word	0x0808cfab
 8084688:	0808cd8e 	.word	0x0808cd8e
 808468c:	0808cda2 	.word	0x0808cda2
 8084690:	0808cdae 	.word	0x0808cdae
 8084694:	0808cdb6 	.word	0x0808cdb6
 8084698:	0808cd5c 	.word	0x0808cd5c
 808469c:	0808cd63 	.word	0x0808cd63
 80846a0:	0808cd81 	.word	0x0808cd81
 80846a4:	0808cd68 	.word	0x0808cd68
 80846a8:	0808cdc8 	.word	0x0808cdc8
 80846ac:	0808cc61 	.word	0x0808cc61
 80846b0:	0808cd85 	.word	0x0808cd85
 80846b4:	0808cdbb 	.word	0x0808cdbb
 80846b8:	0808cdc1 	.word	0x0808cdc1

080846bc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
                              UbiFlags* flags) {
 80846bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80846c0:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80846c2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
                              UbiFlags* flags) {
 80846c6:	461e      	mov	r6, r3
 80846c8:	460f      	mov	r7, r1
 80846ca:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80846cc:	f001 fe5a 	bl	8086384 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 80846d0:	7ce3      	ldrb	r3, [r4, #19]
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 80846d2:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
 80846d4:	3b01      	subs	r3, #1
 80846d6:	2b01      	cmp	r3, #1
 80846d8:	d826      	bhi.n	8084728 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
 80846da:	4601      	mov	r1, r0
 80846dc:	4643      	mov	r3, r8
 80846de:	463a      	mov	r2, r7
 80846e0:	4620      	mov	r0, r4
 80846e2:	f7ff ff25 	bl	8084530 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
 80846e6:	7ca3      	ldrb	r3, [r4, #18]
 80846e8:	b123      	cbz	r3, 80846f4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
 80846ea:	f003 ff1b 	bl	8088524 <_Z16_fetch_usbserialv>
 80846ee:	4911      	ldr	r1, [pc, #68]	; (8084734 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
 80846f0:	f002 fcc1 	bl	8087076 <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
 80846f4:	6860      	ldr	r0, [r4, #4]
 80846f6:	4639      	mov	r1, r7
 80846f8:	6803      	ldr	r3, [r0, #0]
 80846fa:	9600      	str	r6, [sp, #0]
 80846fc:	f8d3 9000 	ldr.w	r9, [r3]
 8084700:	4642      	mov	r2, r8
 8084702:	462b      	mov	r3, r5
 8084704:	47c8      	blx	r9
 8084706:	4607      	mov	r7, r0
  free(payload);
 8084708:	4628      	mov	r0, r5
 808470a:	f001 fe43 	bl	8086394 <free>
  delete flags;
 808470e:	b11e      	cbz	r6, 8084718 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
 8084710:	2101      	movs	r1, #1
 8084712:	4630      	mov	r0, r6
 8084714:	f004 fd09 	bl	808912a <_ZdlPvj>
  if (result) {
 8084718:	2300      	movs	r3, #0
 808471a:	b107      	cbz	r7, 808471e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
 808471c:	7463      	strb	r3, [r4, #17]
}
 808471e:	4638      	mov	r0, r7
  _current_value = 0;
 8084720:	7423      	strb	r3, [r4, #16]
}
 8084722:	b003      	add	sp, #12
 8084724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
 8084728:	4601      	mov	r1, r0
 808472a:	4620      	mov	r0, r4
 808472c:	f7ff fe4e 	bl	80843cc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
 8084730:	e7d9      	b.n	80846e6 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
 8084732:	bf00      	nop
 8084734:	0808cdcf 	.word	0x0808cdcf

08084738 <_ZN18UbiProtocolHandler4sendEPKcS1_>:
                              const char* device_name) {
 8084738:	b570      	push	{r4, r5, r6, lr}
 808473a:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
 808473c:	2001      	movs	r0, #1
                              const char* device_name) {
 808473e:	460d      	mov	r5, r1
 8084740:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
 8084742:	f7fb fcc2 	bl	80800ca <_Znwj>
 8084746:	4603      	mov	r3, r0
 8084748:	b110      	cbz	r0, 8084750 <_ZN18UbiProtocolHandler4sendEPKcS1_+0x18>
        val_(flag.value()) {
 808474a:	4a05      	ldr	r2, [pc, #20]	; (8084760 <_ZN18UbiProtocolHandler4sendEPKcS1_+0x28>)
 808474c:	7812      	ldrb	r2, [r2, #0]
 808474e:	7002      	strb	r2, [r0, #0]
  return send(device_label, device_name, flags);
 8084750:	4632      	mov	r2, r6
 8084752:	4629      	mov	r1, r5
 8084754:	4620      	mov	r0, r4
}
 8084756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_name, flags);
 808475a:	f7ff bfaf 	b.w	80846bc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>
 808475e:	bf00      	nop
 8084760:	200009e0 	.word	0x200009e0

08084764 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8084764:	b570      	push	{r4, r5, r6, lr}
 8084766:	4605      	mov	r5, r0
 8084768:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 808476a:	b184      	cbz	r4, 808478e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
 808476c:	4628      	mov	r0, r5
 808476e:	68e1      	ldr	r1, [r4, #12]
 8084770:	f7ff fff8 	bl	8084764 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
 8084774:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
 8084776:	68a6      	ldr	r6, [r4, #8]
 8084778:	b123      	cbz	r3, 8084784 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
 808477a:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808477e:	2203      	movs	r2, #3
 8084780:	4608      	mov	r0, r1
 8084782:	4798      	blx	r3
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8084784:	4620      	mov	r0, r4
 8084786:	f7fb fca4 	bl	80800d2 <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
 808478a:	4634      	mov	r4, r6
      }
 808478c:	e7ed      	b.n	808476a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
	}
    }
 808478e:	bd70      	pop	{r4, r5, r6, pc}

08084790 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                 IotProtocol iot_protocol) {
 8084790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084792:	b08d      	sub	sp, #52	; 0x34
 8084794:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
 8084796:	a801      	add	r0, sp, #4
 8084798:	460d      	mov	r5, r1
 808479a:	4617      	mov	r7, r2
 808479c:	461e      	mov	r6, r3
 808479e:	f001 fdd1 	bl	8086344 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
 80847a2:	9803      	ldr	r0, [sp, #12]
 80847a4:	3001      	adds	r0, #1
 80847a6:	f7fb fc92 	bl	80800ce <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
 80847aa:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
 80847ac:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
 80847ae:	f005 ff7e 	bl	808a6ae <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
 80847b2:	462a      	mov	r2, r5
 80847b4:	4633      	mov	r3, r6
 80847b6:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
 80847b8:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
 80847ba:	a805      	add	r0, sp, #20
 80847bc:	f000 fd38 	bl	8085230 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
 80847c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80847c4:	f001 fdde 	bl	8086384 <malloc>
 80847c8:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
 80847ca:	a805      	add	r0, sp, #20
 80847cc:	f000 fc58 	bl	8085080 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
 80847d0:	2300      	movs	r3, #0
  _token = token;
 80847d2:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
 80847d6:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
 80847d8:	7423      	strb	r3, [r4, #16]
 80847da:	a806      	add	r0, sp, #24
 80847dc:	f7ff ffc2 	bl	8084764 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
 80847e0:	a801      	add	r0, sp, #4
 80847e2:	f002 fb03 	bl	8086dec <_ZN6StringD1Ev>
}
 80847e6:	b00d      	add	sp, #52	; 0x34
 80847e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080847ea <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
 80847ea:	b538      	push	{r3, r4, r5, lr}
                                       IotProtocol iot_protocol) {
 80847ec:	2500      	movs	r5, #0
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
 80847ee:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
 80847f0:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
 80847f2:	f7ff ffcd 	bl	8084790 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
 80847f6:	4620      	mov	r0, r4
 80847f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080847fc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
        val_(val) {
 80847fc:	2200      	movs	r2, #0
 80847fe:	4b01      	ldr	r3, [pc, #4]	; (8084804 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x8>)
 8084800:	701a      	strb	r2, [r3, #0]
 8084802:	4770      	bx	lr
 8084804:	200009e0 	.word	0x200009e0

08084808 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 8084808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808480c:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
 808480e:	7203      	strb	r3, [r0, #8]
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8084810:	2078      	movs	r0, #120	; 0x78
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
 8084812:	4698      	mov	r8, r3
 8084814:	460e      	mov	r6, r1
 8084816:	4617      	mov	r7, r2
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 8084818:	f001 fdb4 	bl	8086384 <malloc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 808481c:	7a23      	ldrb	r3, [r4, #8]
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
 808481e:	6060      	str	r0, [r4, #4]
  if (_iotProtocol != UBI_MESH) {
 8084820:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 8084822:	f04f 0014 	mov.w	r0, #20
  if (_iotProtocol != UBI_MESH) {
 8084826:	d00b      	beq.n	8084840 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x38>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
 8084828:	f7fb fc4f 	bl	80800ca <_Znwj>
 808482c:	4605      	mov	r5, r0
 808482e:	b120      	cbz	r0, 808483a <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x32>
 8084830:	4643      	mov	r3, r8
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
 8084832:	463a      	mov	r2, r7
 8084834:	4631      	mov	r1, r6
 8084836:	f7ff ffd8 	bl	80847ea <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
 808483a:	6025      	str	r5, [r4, #0]
  }
#endif
}
 808483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
 8084840:	f7fb fc43 	bl	80800ca <_Znwj>
 8084844:	4605      	mov	r5, r0
 8084846:	2800      	cmp	r0, #0
 8084848:	d0f7      	beq.n	808483a <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x32>
 808484a:	2301      	movs	r3, #1
 808484c:	e7f1      	b.n	8084832 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x2a>
	...

08084850 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
 8084850:	b538      	push	{r3, r4, r5, lr}
 8084852:	2500      	movs	r5, #0
 8084854:	4604      	mov	r4, r0
 8084856:	4613      	mov	r3, r2
 8084858:	7245      	strb	r5, [r0, #9]
 808485a:	7285      	strb	r5, [r0, #10]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
 808485c:	4a02      	ldr	r2, [pc, #8]	; (8084868 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
 808485e:	f7ff ffd3 	bl	8084808 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
 8084862:	4620      	mov	r0, r4
 8084864:	bd38      	pop	{r3, r4, r5, pc}
 8084866:	bf00      	nop
 8084868:	0808cddf 	.word	0x0808cddf

0808486c <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
 808486c:	b538      	push	{r3, r4, r5, lr}
 808486e:	4604      	mov	r4, r0
  free(_context);
 8084870:	6840      	ldr	r0, [r0, #4]
 8084872:	f001 fd8f 	bl	8086394 <free>
  delete _protocolMesh;
#elif PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
 8084876:	6825      	ldr	r5, [r4, #0]
 8084878:	b135      	cbz	r5, 8084888 <_ZN7UbidotsD1Ev+0x1c>
 808487a:	4628      	mov	r0, r5
 808487c:	f7ff fd3e 	bl	80842fc <_ZN18UbiProtocolHandlerD1Ev>
 8084880:	2114      	movs	r1, #20
 8084882:	4628      	mov	r0, r5
 8084884:	f004 fc51 	bl	808912a <_ZdlPvj>
#endif
}
 8084888:	4620      	mov	r0, r4
 808488a:	bd38      	pop	{r3, r4, r5, pc}

0808488c <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
 808488c:	b510      	push	{r4, lr}
  }

#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
 808488e:	7a04      	ldrb	r4, [r0, #8]
 8084890:	2c04      	cmp	r4, #4
 8084892:	d004      	beq.n	808489e <_ZN7Ubidots3addEPcfS0_mj+0x12>
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
 8084894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
 8084898:	6800      	ldr	r0, [r0, #0]
 808489a:	f7ff bd3f 	b.w	808431c <_ZN18UbiProtocolHandler3addEPcfS0_mj>
    Serial.println(
 808489e:	f003 fe41 	bl	8088524 <_Z16_fetch_usbserialv>
}
 80848a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(
 80848a6:	4901      	ldr	r1, [pc, #4]	; (80848ac <_ZN7Ubidots3addEPcfS0_mj+0x20>)
 80848a8:	f002 bbe5 	b.w	8087076 <_ZN5Print7printlnEPKc>
 80848ac:	0808cdfa 	.word	0x0808cdfa

080848b0 <_ZN7Ubidots3addEPcf>:
  add(variable_label, value, NULL, NULL, NULL);
 80848b0:	2300      	movs	r3, #0
void Ubidots::add(char* variable_label, float value) {
 80848b2:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
 80848b4:	e9cd 3300 	strd	r3, r3, [sp]
 80848b8:	f7ff ffe8 	bl	808488c <_ZN7Ubidots3addEPcfS0_mj>
}
 80848bc:	b003      	add	sp, #12
 80848be:	f85d fb04 	ldr.w	pc, [sp], #4

080848c2 <_ZN7Ubidots4sendEPKcS1_>:
bool Ubidots::send(const char* device_label, const char* device_name) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, device_name);
 80848c2:	6800      	ldr	r0, [r0, #0]
 80848c4:	f7ff bf38 	b.w	8084738 <_ZN18UbiProtocolHandler4sendEPKcS1_>

080848c8 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

 80848c8:	7501      	strb	r1, [r0, #20]
 80848ca:	4770      	bx	lr

080848cc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
 80848cc:	b570      	push	{r4, r5, r6, lr}
 80848ce:	4606      	mov	r6, r0
    char* parsed = (char*)malloc(sizeof(char) * 20);
 80848d0:	2014      	movs	r0, #20
 80848d2:	f001 fd57 	bl	8086384 <malloc>
 80848d6:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
 80848d8:	2014      	movs	r0, #20
 80848da:	f001 fd53 	bl	8086384 <malloc>
 80848de:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
 80848e0:	4630      	mov	r0, r6
 80848e2:	f005 ff08 	bl	808a6f6 <strlen>
    for (int i = 0; i < len - 2; i++) {
 80848e6:	4632      	mov	r2, r6
 80848e8:	2300      	movs	r3, #0
 80848ea:	3802      	subs	r0, #2
 80848ec:	4298      	cmp	r0, r3
 80848ee:	dd14      	ble.n	808491a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x4e>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
 80848f0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80848f4:	290d      	cmp	r1, #13
 80848f6:	d134      	bne.n	8084962 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x96>
 80848f8:	7811      	ldrb	r1, [r2, #0]
 80848fa:	290a      	cmp	r1, #10
 80848fc:	d131      	bne.n	8084962 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x96>
 80848fe:	7851      	ldrb	r1, [r2, #1]
 8084900:	290d      	cmp	r1, #13
 8084902:	d12e      	bne.n	8084962 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x96>
 8084904:	7891      	ldrb	r1, [r2, #2]
 8084906:	290a      	cmp	r1, #10
 8084908:	d12b      	bne.n	8084962 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x96>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
 808490a:	3304      	adds	r3, #4
 808490c:	18f1      	adds	r1, r6, r3
 808490e:	2214      	movs	r2, #20
 8084910:	4628      	mov	r0, r5
 8084912:	f005 ff0a 	bl	808a72a <strncpy>
        parsed[20] = '\0';
 8084916:	2300      	movs	r3, #0
 8084918:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
 808491a:	210a      	movs	r1, #10
 808491c:	4628      	mov	r0, r5
 808491e:	f005 feaf 	bl	808a680 <strchr>
    if (pch == NULL) {
 8084922:	4606      	mov	r6, r0
 8084924:	b1f8      	cbz	r0, 8084966 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9a>
    char* pch2 = strchr(pch + 1, '\n');
 8084926:	210a      	movs	r1, #10
 8084928:	3001      	adds	r0, #1
 808492a:	f005 fea9 	bl	808a680 <strchr>
    if (pch2 == NULL) {
 808492e:	b1d0      	cbz	r0, 8084966 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9a>
    sprintf(dst, "%s", pch);
 8084930:	4631      	mov	r1, r6
 8084932:	4620      	mov	r0, r4
 8084934:	f005 febb 	bl	808a6ae <strcpy>
    dst[strlen(dst) - 1] = '\0';
 8084938:	4620      	mov	r0, r4
 808493a:	f005 fedc 	bl	808a6f6 <strlen>
 808493e:	2300      	movs	r3, #0
 8084940:	4420      	add	r0, r4
 8084942:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
 8084946:	4620      	mov	r0, r4
 8084948:	f005 fe40 	bl	808a5cc <atof>
 808494c:	f005 fa3a 	bl	8089dc4 <__aeabi_d2f>
 8084950:	4606      	mov	r6, r0
    free(dst);
 8084952:	4620      	mov	r0, r4
 8084954:	f001 fd1e 	bl	8086394 <free>
    free(parsed);
 8084958:	4628      	mov	r0, r5
 808495a:	f001 fd1b 	bl	8086394 <free>
}
 808495e:	4630      	mov	r0, r6
 8084960:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
 8084962:	3301      	adds	r3, #1
 8084964:	e7c2      	b.n	80848ec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x20>
      return result;
 8084966:	4e01      	ldr	r6, [pc, #4]	; (808496c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa0>)
 8084968:	e7f9      	b.n	808495e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x92>
 808496a:	bf00      	nop
 808496c:	cda2425f 	.word	0xcda2425f

08084970 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
 8084970:	b530      	push	{r4, r5, lr}
                 const char* token) {
 8084972:	4d07      	ldr	r5, [pc, #28]	; (8084990 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
  _user_agent = user_agent;
 8084974:	e9c0 1301 	strd	r1, r3, [r0, #4]
                 const char* token) {
 8084978:	6005      	str	r5, [r0, #0]
 808497a:	2500      	movs	r5, #0
 808497c:	7505      	strb	r5, [r0, #20]
 808497e:	f241 3588 	movw	r5, #5000	; 0x1388
 8084982:	6185      	str	r5, [r0, #24]
 8084984:	2505      	movs	r5, #5
  _token = token;
 8084986:	9b03      	ldr	r3, [sp, #12]
                 const char* token) {
 8084988:	7705      	strb	r5, [r0, #28]
  _port = port;
 808498a:	e9c0 3203 	strd	r3, r2, [r0, #12]
}
 808498e:	bd30      	pop	{r4, r5, pc}
 8084990:	0808cfdc 	.word	0x0808cfdc

08084994 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
 8084994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084998:	4604      	mov	r4, r0
 808499a:	460d      	mov	r5, r1
 808499c:	4617      	mov	r7, r2
 808499e:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 80849a0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8084a28 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
 80849a4:	f8df a084 	ldr.w	sl, [pc, #132]	; 8084a2c <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
 80849a8:	f8df b084 	ldr.w	fp, [pc, #132]	; 8084a30 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 80849ac:	4640      	mov	r0, r8
 80849ae:	fa5f f986 	uxtb.w	r9, r6
 80849b2:	f002 f978 	bl	8086ca6 <_ZN9TCPClient9connectedEv>
 80849b6:	bb88      	cbnz	r0, 8084a1c <_ZN7UbiHTTP9reconnectEPKci+0x88>
 80849b8:	7f23      	ldrb	r3, [r4, #28]
 80849ba:	454b      	cmp	r3, r9
 80849bc:	d92e      	bls.n	8084a1c <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
 80849be:	7d23      	ldrb	r3, [r4, #20]
 80849c0:	b1cb      	cbz	r3, 80849f6 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
 80849c2:	f003 fdaf 	bl	8088524 <_Z16_fetch_usbserialv>
 80849c6:	4651      	mov	r1, sl
 80849c8:	f002 fb3e 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(host);
 80849cc:	f003 fdaa 	bl	8088524 <_Z16_fetch_usbserialv>
 80849d0:	4629      	mov	r1, r5
 80849d2:	f002 fb39 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
 80849d6:	f003 fda5 	bl	8088524 <_Z16_fetch_usbserialv>
 80849da:	4659      	mov	r1, fp
 80849dc:	f002 fb34 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.println(attempts);
 80849e0:	f003 fda0 	bl	8088524 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 80849e4:	220a      	movs	r2, #10
 80849e6:	4649      	mov	r1, r9
 80849e8:	9001      	str	r0, [sp, #4]
 80849ea:	f002 fb4e 	bl	808708a <_ZN5Print11printNumberEmh>
        n += println();
 80849ee:	9b01      	ldr	r3, [sp, #4]
 80849f0:	4618      	mov	r0, r3
 80849f2:	f002 fb34 	bl	808705e <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
 80849f6:	2300      	movs	r3, #0
 80849f8:	4629      	mov	r1, r5
 80849fa:	4640      	mov	r0, r8
 80849fc:	b2ba      	uxth	r2, r7
 80849fe:	f002 f9c3 	bl	8086d88 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
 8084a02:	7d23      	ldrb	r3, [r4, #20]
 8084a04:	b123      	cbz	r3, 8084a10 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
 8084a06:	f003 fd8d 	bl	8088524 <_Z16_fetch_usbserialv>
 8084a0a:	4906      	ldr	r1, [pc, #24]	; (8084a24 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
 8084a0c:	f002 fb33 	bl	8087076 <_ZN5Print7printlnEPKc>
    delay(1000);
 8084a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8084a14:	f002 fd9f 	bl	8087556 <delay>
 8084a18:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
 8084a1a:	e7c7      	b.n	80849ac <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
 8084a1c:	b003      	add	sp, #12
 8084a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a22:	bf00      	nop
 8084a24:	0808ce50 	.word	0x0808ce50
 8084a28:	200009e4 	.word	0x200009e4
 8084a2c:	0808cbf0 	.word	0x0808cbf0
 8084a30:	0808cc06 	.word	0x0808cc06

08084a34 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
 8084a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084a38:	1e4b      	subs	r3, r1, #1
 8084a3a:	460c      	mov	r4, r1
 8084a3c:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
 8084a40:	4605      	mov	r5, r0
    response[i] = '\0';
 8084a42:	2100      	movs	r1, #0
 8084a44:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
 8084a48:	4293      	cmp	r3, r2
 8084a4a:	d1fb      	bne.n	8084a44 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
 8084a4c:	7d2b      	ldrb	r3, [r5, #20]
 8084a4e:	b14b      	cbz	r3, 8084a64 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
 8084a50:	f003 fd68 	bl	8088524 <_Z16_fetch_usbserialv>
 8084a54:	4914      	ldr	r1, [pc, #80]	; (8084aa8 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
 8084a56:	f002 fb0e 	bl	8087076 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
 8084a5a:	f003 fd63 	bl	8088524 <_Z16_fetch_usbserialv>
 8084a5e:	4913      	ldr	r1, [pc, #76]	; (8084aac <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
 8084a60:	f002 fb09 	bl	8087076 <_ZN5Print7printlnEPKc>
void UbiHTTP::readServerAnswer(char* response) {
 8084a64:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
 8084a66:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
 8084a6a:	4f11      	ldr	r7, [pc, #68]	; (8084ab0 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
 8084a6c:	4638      	mov	r0, r7
 8084a6e:	f002 f88b 	bl	8086b88 <_ZN9TCPClient9availableEv>
 8084a72:	b170      	cbz	r0, 8084a92 <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
 8084a74:	4638      	mov	r0, r7
 8084a76:	f001 ffd1 	bl	8086a1c <_ZN9TCPClient4readEv>
 8084a7a:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
 8084a7c:	7d2b      	ldrb	r3, [r5, #20]
 8084a7e:	b12b      	cbz	r3, 8084a8c <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
 8084a80:	f003 fd50 	bl	8088524 <_Z16_fetch_usbserialv>
 8084a84:	6803      	ldr	r3, [r0, #0]
 8084a86:	5da1      	ldrb	r1, [r4, r6]
 8084a88:	689b      	ldr	r3, [r3, #8]
 8084a8a:	4798      	blx	r3
    j++;
 8084a8c:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
 8084a8e:	4546      	cmp	r6, r8
 8084a90:	d1ec      	bne.n	8084a6c <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
 8084a92:	7d2b      	ldrb	r3, [r5, #20]
 8084a94:	b133      	cbz	r3, 8084aa4 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
 8084a96:	f003 fd45 	bl	8088524 <_Z16_fetch_usbserialv>
}
 8084a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
 8084a9e:	4905      	ldr	r1, [pc, #20]	; (8084ab4 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
 8084aa0:	f002 bae9 	b.w	8087076 <_ZN5Print7printlnEPKc>
}
 8084aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084aa8:	0808cc61 	.word	0x0808cc61
 8084aac:	0808cc4d 	.word	0x0808cc4d
 8084ab0:	200009e4 	.word	0x200009e4
 8084ab4:	0808cc60 	.word	0x0808cc60

08084ab8 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
 8084ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084aba:	4604      	mov	r4, r0
  int timeout = 0;
 8084abc:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
 8084abe:	4f0d      	ldr	r7, [pc, #52]	; (8084af4 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
 8084ac0:	4638      	mov	r0, r7
 8084ac2:	f002 f861 	bl	8086b88 <_ZN9TCPClient9availableEv>
 8084ac6:	4605      	mov	r5, r0
 8084ac8:	b990      	cbnz	r0, 8084af0 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
 8084aca:	69a3      	ldr	r3, [r4, #24]
 8084acc:	42b3      	cmp	r3, r6
 8084ace:	dd0f      	ble.n	8084af0 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
 8084ad0:	2001      	movs	r0, #1
 8084ad2:	f002 fd40 	bl	8087556 <delay>
    if (timeout > _timeout - 1) {
 8084ad6:	69a3      	ldr	r3, [r4, #24]
    timeout++;
 8084ad8:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
 8084ada:	42b3      	cmp	r3, r6
 8084adc:	dcf0      	bgt.n	8084ac0 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
 8084ade:	7d20      	ldrb	r0, [r4, #20]
 8084ae0:	b128      	cbz	r0, 8084aee <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
 8084ae2:	f003 fd1f 	bl	8088524 <_Z16_fetch_usbserialv>
 8084ae6:	4904      	ldr	r1, [pc, #16]	; (8084af8 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
 8084ae8:	f002 fac5 	bl	8087076 <_ZN5Print7printlnEPKc>
 8084aec:	4628      	mov	r0, r5
}
 8084aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
 8084af0:	2001      	movs	r0, #1
 8084af2:	e7fc      	b.n	8084aee <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
 8084af4:	200009e4 	.word	0x200009e4
 8084af8:	0808cc1a 	.word	0x0808cc1a

08084afc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
                       char* payload, UbiFlags* flags) {
 8084afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084afe:	460f      	mov	r7, r1
  reconnect(_host, _port);
 8084b00:	6902      	ldr	r2, [r0, #16]
 8084b02:	6841      	ldr	r1, [r0, #4]
                       char* payload, UbiFlags* flags) {
 8084b04:	4604      	mov	r4, r0
 8084b06:	461d      	mov	r5, r3
  reconnect(_host, _port);
 8084b08:	f7ff ff44 	bl	8084994 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
 8084b0c:	4878      	ldr	r0, [pc, #480]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b0e:	f002 f8ca 	bl	8086ca6 <_ZN9TCPClient9connectedEv>
 8084b12:	4606      	mov	r6, r0
 8084b14:	2800      	cmp	r0, #0
 8084b16:	f000 80e1 	beq.w	8084cdc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
 8084b1a:	4976      	ldr	r1, [pc, #472]	; (8084cf4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
 8084b1c:	4874      	ldr	r0, [pc, #464]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b1e:	f002 fa93 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 8084b22:	4639      	mov	r1, r7
 8084b24:	4872      	ldr	r0, [pc, #456]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b26:	f002 fa8f 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
 8084b2a:	4973      	ldr	r1, [pc, #460]	; (8084cf8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
 8084b2c:	4870      	ldr	r0, [pc, #448]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b2e:	f002 fa8b 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
 8084b32:	4972      	ldr	r1, [pc, #456]	; (8084cfc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
 8084b34:	486e      	ldr	r0, [pc, #440]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b36:	f002 fa87 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
 8084b3a:	6861      	ldr	r1, [r4, #4]
 8084b3c:	486c      	ldr	r0, [pc, #432]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b3e:	f002 fa83 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084b42:	496f      	ldr	r1, [pc, #444]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084b44:	486a      	ldr	r0, [pc, #424]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b46:	f002 fa7f 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
 8084b4a:	496e      	ldr	r1, [pc, #440]	; (8084d04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
 8084b4c:	4868      	ldr	r0, [pc, #416]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b4e:	f002 fa7b 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 8084b52:	68a1      	ldr	r1, [r4, #8]
 8084b54:	4866      	ldr	r0, [pc, #408]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b56:	f002 fa77 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084b5a:	4969      	ldr	r1, [pc, #420]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084b5c:	4864      	ldr	r0, [pc, #400]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b5e:	f002 fa73 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
 8084b62:	4969      	ldr	r1, [pc, #420]	; (8084d08 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
 8084b64:	4862      	ldr	r0, [pc, #392]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b66:	f002 fa6f 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 8084b6a:	68e1      	ldr	r1, [r4, #12]
 8084b6c:	4860      	ldr	r0, [pc, #384]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b6e:	f002 fa6b 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084b72:	4963      	ldr	r1, [pc, #396]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084b74:	485e      	ldr	r0, [pc, #376]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b76:	f002 fa67 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
 8084b7a:	4964      	ldr	r1, [pc, #400]	; (8084d0c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
 8084b7c:	485c      	ldr	r0, [pc, #368]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b7e:	f002 fa63 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
 8084b82:	4963      	ldr	r1, [pc, #396]	; (8084d10 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084b84:	485a      	ldr	r0, [pc, #360]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b86:	f002 fa5f 	bl	8087048 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
 8084b8a:	4628      	mov	r0, r5
 8084b8c:	f005 fdb3 	bl	808a6f6 <strlen>
 8084b90:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
 8084b92:	4960      	ldr	r1, [pc, #384]	; (8084d14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8084b94:	4856      	ldr	r0, [pc, #344]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084b96:	f002 fa57 	bl	8087048 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 8084b9a:	220a      	movs	r2, #10
 8084b9c:	4631      	mov	r1, r6
 8084b9e:	4854      	ldr	r0, [pc, #336]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084ba0:	f002 fa73 	bl	808708a <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
 8084ba4:	495c      	ldr	r1, [pc, #368]	; (8084d18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8084ba6:	4852      	ldr	r0, [pc, #328]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084ba8:	f002 fa4e 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
 8084bac:	4629      	mov	r1, r5
 8084bae:	4850      	ldr	r0, [pc, #320]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084bb0:	f002 fa4a 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
 8084bb4:	4952      	ldr	r1, [pc, #328]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084bb6:	484e      	ldr	r0, [pc, #312]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084bb8:	f002 fa46 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
 8084bbc:	484c      	ldr	r0, [pc, #304]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084bbe:	f001 feee 	bl	808699e <_ZN9TCPClient5flushEv>
    if (_debug) {
 8084bc2:	7d23      	ldrb	r3, [r4, #20]
 8084bc4:	2b00      	cmp	r3, #0
 8084bc6:	d069      	beq.n	8084c9c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
 8084bc8:	f003 fcac 	bl	8088524 <_Z16_fetch_usbserialv>
 8084bcc:	4953      	ldr	r1, [pc, #332]	; (8084d1c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
 8084bce:	f002 fa52 	bl	8087076 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
 8084bd2:	f003 fca7 	bl	8088524 <_Z16_fetch_usbserialv>
 8084bd6:	4947      	ldr	r1, [pc, #284]	; (8084cf4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
 8084bd8:	f002 fa36 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8084bdc:	f003 fca2 	bl	8088524 <_Z16_fetch_usbserialv>
 8084be0:	4639      	mov	r1, r7
 8084be2:	f002 fa31 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 8084be6:	f003 fc9d 	bl	8088524 <_Z16_fetch_usbserialv>
 8084bea:	4943      	ldr	r1, [pc, #268]	; (8084cf8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
 8084bec:	f002 fa2c 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 8084bf0:	f003 fc98 	bl	8088524 <_Z16_fetch_usbserialv>
 8084bf4:	4941      	ldr	r1, [pc, #260]	; (8084cfc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
 8084bf6:	f002 fa27 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(_host);
 8084bfa:	f003 fc93 	bl	8088524 <_Z16_fetch_usbserialv>
 8084bfe:	6861      	ldr	r1, [r4, #4]
 8084c00:	f002 fa22 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084c04:	f003 fc8e 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c08:	493d      	ldr	r1, [pc, #244]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084c0a:	f002 fa1d 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 8084c0e:	f003 fc89 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c12:	493c      	ldr	r1, [pc, #240]	; (8084d04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
 8084c14:	f002 fa18 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 8084c18:	f003 fc84 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c1c:	68a1      	ldr	r1, [r4, #8]
 8084c1e:	f002 fa13 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084c22:	f003 fc7f 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c26:	4936      	ldr	r1, [pc, #216]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084c28:	f002 fa0e 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 8084c2c:	f003 fc7a 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c30:	4935      	ldr	r1, [pc, #212]	; (8084d08 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
 8084c32:	f002 fa09 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8084c36:	f003 fc75 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c3a:	68e1      	ldr	r1, [r4, #12]
 8084c3c:	f002 fa04 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084c40:	f003 fc70 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c44:	492e      	ldr	r1, [pc, #184]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084c46:	f002 f9ff 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
 8084c4a:	f003 fc6b 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c4e:	492f      	ldr	r1, [pc, #188]	; (8084d0c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
 8084c50:	f002 f9fa 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
 8084c54:	f003 fc66 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c58:	492d      	ldr	r1, [pc, #180]	; (8084d10 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
 8084c5a:	f002 f9f5 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
 8084c5e:	f003 fc61 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c62:	492c      	ldr	r1, [pc, #176]	; (8084d14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
 8084c64:	f002 f9f0 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(content_length);
 8084c68:	f003 fc5c 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c6c:	220a      	movs	r2, #10
 8084c6e:	4631      	mov	r1, r6
 8084c70:	f002 fa0b 	bl	808708a <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
 8084c74:	f003 fc56 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c78:	4927      	ldr	r1, [pc, #156]	; (8084d18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
 8084c7a:	f002 f9e5 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(payload);
 8084c7e:	f003 fc51 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c82:	4629      	mov	r1, r5
 8084c84:	f002 f9e0 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084c88:	f003 fc4c 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c8c:	491c      	ldr	r1, [pc, #112]	; (8084d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
 8084c8e:	f002 f9db 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
 8084c92:	f003 fc47 	bl	8088524 <_Z16_fetch_usbserialv>
 8084c96:	4922      	ldr	r1, [pc, #136]	; (8084d20 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
 8084c98:	f002 f9ed 	bl	8087076 <_ZN5Print7printlnEPKc>
    waitServerAnswer();
 8084c9c:	4620      	mov	r0, r4
 8084c9e:	f7ff ff0b 	bl	8084ab8 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
 8084ca2:	7d23      	ldrb	r3, [r4, #20]
 8084ca4:	b92b      	cbnz	r3, 8084cb2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
 8084ca6:	2401      	movs	r4, #1
  _client_http_ubi.stop();
 8084ca8:	4811      	ldr	r0, [pc, #68]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084caa:	f001 ffa7 	bl	8086bfc <_ZN9TCPClient4stopEv>
}
 8084cae:	4620      	mov	r0, r4
 8084cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
 8084cb2:	f003 fc37 	bl	8088524 <_Z16_fetch_usbserialv>
 8084cb6:	491b      	ldr	r1, [pc, #108]	; (8084d24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
 8084cb8:	f002 f9dd 	bl	8087076 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
 8084cbc:	4d0c      	ldr	r5, [pc, #48]	; (8084cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
 8084cbe:	4628      	mov	r0, r5
 8084cc0:	f001 ff62 	bl	8086b88 <_ZN9TCPClient9availableEv>
 8084cc4:	2800      	cmp	r0, #0
 8084cc6:	d0ee      	beq.n	8084ca6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
 8084cc8:	4628      	mov	r0, r5
 8084cca:	f001 fea7 	bl	8086a1c <_ZN9TCPClient4readEv>
 8084cce:	4604      	mov	r4, r0
        Serial.print(c);
 8084cd0:	f003 fc28 	bl	8088524 <_Z16_fetch_usbserialv>
 8084cd4:	b2e1      	uxtb	r1, r4
 8084cd6:	f002 f9bb 	bl	8087050 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
 8084cda:	e7f0      	b.n	8084cbe <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
 8084cdc:	7d24      	ldrb	r4, [r4, #20]
 8084cde:	2c00      	cmp	r4, #0
 8084ce0:	d0e2      	beq.n	8084ca8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
 8084ce2:	f003 fc1f 	bl	8088524 <_Z16_fetch_usbserialv>
 8084ce6:	4910      	ldr	r1, [pc, #64]	; (8084d28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
 8084ce8:	f002 f9c5 	bl	8087076 <_ZN5Print7printlnEPKc>
  bool result = false;
 8084cec:	4634      	mov	r4, r6
 8084cee:	e7db      	b.n	8084ca8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
 8084cf0:	200009e4 	.word	0x200009e4
 8084cf4:	0808ce61 	.word	0x0808ce61
 8084cf8:	0808ce79 	.word	0x0808ce79
 8084cfc:	0808ce85 	.word	0x0808ce85
 8084d00:	0808cfa9 	.word	0x0808cfa9
 8084d04:	0808ce8c 	.word	0x0808ce8c
 8084d08:	0808ce99 	.word	0x0808ce99
 8084d0c:	0808cea8 	.word	0x0808cea8
 8084d10:	0808cebc 	.word	0x0808cebc
 8084d14:	0808cedd 	.word	0x0808cedd
 8084d18:	0808cfa7 	.word	0x0808cfa7
 8084d1c:	0808ceee 	.word	0x0808ceee
 8084d20:	0808cf0a 	.word	0x0808cf0a
 8084d24:	0808cf28 	.word	0x0808cf28
 8084d28:	0808cf44 	.word	0x0808cf44

08084d2c <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
 8084d2c:	b570      	push	{r4, r5, r6, lr}
 8084d2e:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 8084d30:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
 8084d32:	460e      	mov	r6, r1
 8084d34:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
 8084d36:	6841      	ldr	r1, [r0, #4]
 8084d38:	2250      	movs	r2, #80	; 0x50
 8084d3a:	4865      	ldr	r0, [pc, #404]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d3c:	f002 f824 	bl	8086d88 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
 8084d40:	4620      	mov	r0, r4
 8084d42:	2250      	movs	r2, #80	; 0x50
 8084d44:	6861      	ldr	r1, [r4, #4]
 8084d46:	f7ff fe25 	bl	8084994 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
 8084d4a:	4861      	ldr	r0, [pc, #388]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d4c:	f001 ffab 	bl	8086ca6 <_ZN9TCPClient9connectedEv>
 8084d50:	2800      	cmp	r0, #0
 8084d52:	f000 80b3 	beq.w	8084ebc <_ZN7UbiHTTP3getEPKcS1_+0x190>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
 8084d56:	495f      	ldr	r1, [pc, #380]	; (8084ed4 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 8084d58:	485d      	ldr	r0, [pc, #372]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d5a:	f002 f975 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
 8084d5e:	4631      	mov	r1, r6
 8084d60:	485b      	ldr	r0, [pc, #364]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d62:	f002 f971 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
 8084d66:	495c      	ldr	r1, [pc, #368]	; (8084ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8084d68:	4859      	ldr	r0, [pc, #356]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d6a:	f002 f96d 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
 8084d6e:	4629      	mov	r1, r5
 8084d70:	4857      	ldr	r0, [pc, #348]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d72:	f002 f969 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
 8084d76:	4959      	ldr	r1, [pc, #356]	; (8084edc <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 8084d78:	4855      	ldr	r0, [pc, #340]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d7a:	f002 f965 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
 8084d7e:	4958      	ldr	r1, [pc, #352]	; (8084ee0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 8084d80:	4853      	ldr	r0, [pc, #332]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d82:	f002 f961 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
 8084d86:	4957      	ldr	r1, [pc, #348]	; (8084ee4 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8084d88:	4851      	ldr	r0, [pc, #324]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d8a:	f002 f95d 	bl	8087048 <_ZN5Print5printEPKc>
 8084d8e:	220a      	movs	r2, #10
 8084d90:	2150      	movs	r1, #80	; 0x50
 8084d92:	484f      	ldr	r0, [pc, #316]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d94:	f002 f979 	bl	808708a <_ZN5Print11printNumberEmh>
    _client_http_ubi.print("\r\n");
 8084d98:	4953      	ldr	r1, [pc, #332]	; (8084ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084d9a:	484d      	ldr	r0, [pc, #308]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084d9c:	f002 f954 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
 8084da0:	4952      	ldr	r1, [pc, #328]	; (8084eec <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 8084da2:	484b      	ldr	r0, [pc, #300]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084da4:	f002 f950 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
 8084da8:	68a1      	ldr	r1, [r4, #8]
 8084daa:	4849      	ldr	r0, [pc, #292]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084dac:	f002 f94c 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 8084db0:	494d      	ldr	r1, [pc, #308]	; (8084ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084db2:	4847      	ldr	r0, [pc, #284]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084db4:	f002 f948 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
 8084db8:	494d      	ldr	r1, [pc, #308]	; (8084ef0 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 8084dba:	4845      	ldr	r0, [pc, #276]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084dbc:	f002 f944 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
 8084dc0:	68e1      	ldr	r1, [r4, #12]
 8084dc2:	4843      	ldr	r0, [pc, #268]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084dc4:	f002 f940 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
 8084dc8:	4947      	ldr	r1, [pc, #284]	; (8084ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084dca:	4841      	ldr	r0, [pc, #260]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084dcc:	f002 f93c 	bl	8087048 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
 8084dd0:	4948      	ldr	r1, [pc, #288]	; (8084ef4 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 8084dd2:	483f      	ldr	r0, [pc, #252]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084dd4:	f002 f938 	bl	8087048 <_ZN5Print5printEPKc>
    if (_debug) {
 8084dd8:	7d23      	ldrb	r3, [r4, #20]
 8084dda:	2b00      	cmp	r3, #0
 8084ddc:	d050      	beq.n	8084e80 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
 8084dde:	f003 fba1 	bl	8088524 <_Z16_fetch_usbserialv>
 8084de2:	493c      	ldr	r1, [pc, #240]	; (8084ed4 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>)
 8084de4:	f002 f930 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(device_label);
 8084de8:	f003 fb9c 	bl	8088524 <_Z16_fetch_usbserialv>
 8084dec:	4631      	mov	r1, r6
 8084dee:	f002 f92b 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("/");
 8084df2:	f003 fb97 	bl	8088524 <_Z16_fetch_usbserialv>
 8084df6:	4938      	ldr	r1, [pc, #224]	; (8084ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
 8084df8:	f002 f926 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
 8084dfc:	f003 fb92 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e00:	4629      	mov	r1, r5
 8084e02:	f002 f921 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("/lv");
 8084e06:	f003 fb8d 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e0a:	4934      	ldr	r1, [pc, #208]	; (8084edc <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
 8084e0c:	f002 f91c 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
 8084e10:	f003 fb88 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e14:	4932      	ldr	r1, [pc, #200]	; (8084ee0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
 8084e16:	f002 f917 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
 8084e1a:	f003 fb83 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e1e:	4931      	ldr	r1, [pc, #196]	; (8084ee4 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
 8084e20:	f002 f912 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
 8084e24:	f003 fb7e 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e28:	220a      	movs	r2, #10
 8084e2a:	2150      	movs	r1, #80	; 0x50
 8084e2c:	f002 f92d 	bl	808708a <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
 8084e30:	f003 fb78 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e34:	492c      	ldr	r1, [pc, #176]	; (8084ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084e36:	f002 f907 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
 8084e3a:	f003 fb73 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e3e:	492b      	ldr	r1, [pc, #172]	; (8084eec <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
 8084e40:	f002 f902 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
 8084e44:	f003 fb6e 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e48:	68a1      	ldr	r1, [r4, #8]
 8084e4a:	f002 f8fd 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084e4e:	f003 fb69 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e52:	4925      	ldr	r1, [pc, #148]	; (8084ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084e54:	f002 f8f8 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
 8084e58:	f003 fb64 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e5c:	4924      	ldr	r1, [pc, #144]	; (8084ef0 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
 8084e5e:	f002 f8f3 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print(_token);
 8084e62:	f003 fb5f 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e66:	68e1      	ldr	r1, [r4, #12]
 8084e68:	f002 f8ee 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
 8084e6c:	f003 fb5a 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e70:	491d      	ldr	r1, [pc, #116]	; (8084ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
 8084e72:	f002 f8e9 	bl	8087048 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
 8084e76:	f003 fb55 	bl	8088524 <_Z16_fetch_usbserialv>
 8084e7a:	491e      	ldr	r1, [pc, #120]	; (8084ef4 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
 8084e7c:	f002 f8e4 	bl	8087048 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
 8084e80:	4620      	mov	r0, r4
 8084e82:	f7ff fe19 	bl	8084ab8 <_ZN7UbiHTTP16waitServerAnswerEv>
 8084e86:	b928      	cbnz	r0, 8084e94 <_ZN7UbiHTTP3getEPKcS1_+0x168>
      _client_http_ubi.stop();
 8084e88:	4811      	ldr	r0, [pc, #68]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084e8a:	f001 feb7 	bl	8086bfc <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
 8084e8e:	4c1a      	ldr	r4, [pc, #104]	; (8084ef8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
}
 8084e90:	4620      	mov	r0, r4
 8084e92:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
 8084e94:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8084e98:	f001 fa74 	bl	8086384 <malloc>
 8084e9c:	4605      	mov	r5, r0
    readServerAnswer(response);
 8084e9e:	4601      	mov	r1, r0
 8084ea0:	4620      	mov	r0, r4
 8084ea2:	f7ff fdc7 	bl	8084a34 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
 8084ea6:	4628      	mov	r0, r5
 8084ea8:	f7ff fd10 	bl	80848cc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
 8084eac:	4604      	mov	r4, r0
    _client_http_ubi.stop();
 8084eae:	4808      	ldr	r0, [pc, #32]	; (8084ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1a4>)
 8084eb0:	f001 fea4 	bl	8086bfc <_ZN9TCPClient4stopEv>
    free(response);
 8084eb4:	4628      	mov	r0, r5
 8084eb6:	f001 fa6d 	bl	8086394 <free>
    return value;
 8084eba:	e7e9      	b.n	8084e90 <_ZN7UbiHTTP3getEPKcS1_+0x164>
  if (_debug) {
 8084ebc:	7d23      	ldrb	r3, [r4, #20]
 8084ebe:	2b00      	cmp	r3, #0
 8084ec0:	d0e2      	beq.n	8084e88 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
 8084ec2:	f003 fb2f 	bl	8088524 <_Z16_fetch_usbserialv>
 8084ec6:	490d      	ldr	r1, [pc, #52]	; (8084efc <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
 8084ec8:	f002 f8d5 	bl	8087076 <_ZN5Print7printlnEPKc>
 8084ecc:	e7dc      	b.n	8084e88 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
 8084ece:	bf00      	nop
 8084ed0:	200009e4 	.word	0x200009e4
 8084ed4:	0808cf6e 	.word	0x0808cf6e
 8084ed8:	0808cf83 	.word	0x0808cf83
 8084edc:	0808cf85 	.word	0x0808cf85
 8084ee0:	0808ce79 	.word	0x0808ce79
 8084ee4:	0808ce85 	.word	0x0808ce85
 8084ee8:	0808cfa9 	.word	0x0808cfa9
 8084eec:	0808ce8c 	.word	0x0808ce8c
 8084ef0:	0808ce99 	.word	0x0808ce99
 8084ef4:	0808cf89 	.word	0x0808cf89
 8084ef8:	cda2425f 	.word	0xcda2425f
 8084efc:	0808cfac 	.word	0x0808cfac

08084f00 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
 8084f00:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
 8084f02:	4c05      	ldr	r4, [pc, #20]	; (8084f18 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
 8084f04:	4620      	mov	r0, r4
 8084f06:	f001 ff27 	bl	8086d58 <_ZN9TCPClientC1Ev>
 8084f0a:	4620      	mov	r0, r4
 8084f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084f10:	4a02      	ldr	r2, [pc, #8]	; (8084f1c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
 8084f12:	4903      	ldr	r1, [pc, #12]	; (8084f20 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
 8084f14:	f004 b904 	b.w	8089120 <__aeabi_atexit>
 8084f18:	200009e4 	.word	0x200009e4
 8084f1c:	20000230 	.word	0x20000230
 8084f20:	08083ef5 	.word	0x08083ef5

08084f24 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
	return (*_Base::_M_get_pointer(__functor))(
 8084f24:	6803      	ldr	r3, [r0, #0]
 8084f26:	4718      	bx	r3

08084f28 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
 8084f28:	2a01      	cmp	r2, #1
 8084f2a:	d003      	beq.n	8084f34 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
 8084f2c:	2a02      	cmp	r2, #2
 8084f2e:	d003      	beq.n	8084f38 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
 8084f30:	2000      	movs	r0, #0
 8084f32:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8084f34:	6001      	str	r1, [r0, #0]
	      break;
 8084f36:	e7fb      	b.n	8084f30 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8084f38:	680b      	ldr	r3, [r1, #0]
 8084f3a:	6003      	str	r3, [r0, #0]
	}
 8084f3c:	e7f8      	b.n	8084f30 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

08084f40 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
 8084f40:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8084f42:	201c      	movs	r0, #28
 8084f44:	f7fb f8c1 	bl	80800ca <_Znwj>
 8084f48:	4604      	mov	r4, r0
 8084f4a:	b148      	cbz	r0, 8084f60 <_Z10builderTcpv+0x20>
 8084f4c:	4b06      	ldr	r3, [pc, #24]	; (8084f68 <_Z10builderTcpv+0x28>)
 8084f4e:	4907      	ldr	r1, [pc, #28]	; (8084f6c <_Z10builderTcpv+0x2c>)
 8084f50:	681b      	ldr	r3, [r3, #0]
 8084f52:	f242 3234 	movw	r2, #9012	; 0x2334
 8084f56:	9300      	str	r3, [sp, #0]
 8084f58:	6809      	ldr	r1, [r1, #0]
 8084f5a:	4b05      	ldr	r3, [pc, #20]	; (8084f70 <_Z10builderTcpv+0x30>)
 8084f5c:	f7fe ffee 	bl	8083f3c <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
 8084f60:	4620      	mov	r0, r4
 8084f62:	b002      	add	sp, #8
 8084f64:	bd10      	pop	{r4, pc}
 8084f66:	bf00      	nop
 8084f68:	20000a78 	.word	0x20000a78
 8084f6c:	20000a74 	.word	0x20000a74
 8084f70:	0808cd8e 	.word	0x0808cd8e

08084f74 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
 8084f74:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
 8084f76:	2020      	movs	r0, #32
 8084f78:	f7fb f8a7 	bl	80800ca <_Znwj>
 8084f7c:	4604      	mov	r4, r0
 8084f7e:	b140      	cbz	r0, 8084f92 <_Z11builderHttpv+0x1e>
 8084f80:	4b05      	ldr	r3, [pc, #20]	; (8084f98 <_Z11builderHttpv+0x24>)
 8084f82:	4906      	ldr	r1, [pc, #24]	; (8084f9c <_Z11builderHttpv+0x28>)
 8084f84:	681b      	ldr	r3, [r3, #0]
 8084f86:	2250      	movs	r2, #80	; 0x50
 8084f88:	9300      	str	r3, [sp, #0]
 8084f8a:	6809      	ldr	r1, [r1, #0]
 8084f8c:	4b04      	ldr	r3, [pc, #16]	; (8084fa0 <_Z11builderHttpv+0x2c>)
 8084f8e:	f7ff fcef 	bl	8084970 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
 8084f92:	4620      	mov	r0, r4
 8084f94:	b002      	add	sp, #8
 8084f96:	bd10      	pop	{r4, pc}
 8084f98:	20000a78 	.word	0x20000a78
 8084f9c:	20000a74 	.word	0x20000a74
 8084fa0:	0808cd8e 	.word	0x0808cd8e

08084fa4 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
 8084fa4:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
 8084fa6:	201c      	movs	r0, #28
 8084fa8:	f7fb f88f 	bl	80800ca <_Znwj>
 8084fac:	4604      	mov	r4, r0
 8084fae:	b148      	cbz	r0, 8084fc4 <_Z10builderUdpv+0x20>
 8084fb0:	4b06      	ldr	r3, [pc, #24]	; (8084fcc <_Z10builderUdpv+0x28>)
 8084fb2:	4907      	ldr	r1, [pc, #28]	; (8084fd0 <_Z10builderUdpv+0x2c>)
 8084fb4:	681b      	ldr	r3, [r3, #0]
 8084fb6:	f242 3234 	movw	r2, #9012	; 0x2334
 8084fba:	9300      	str	r3, [sp, #0]
 8084fbc:	6809      	ldr	r1, [r1, #0]
 8084fbe:	4b05      	ldr	r3, [pc, #20]	; (8084fd4 <_Z10builderUdpv+0x30>)
 8084fc0:	f000 f9ba 	bl	8085338 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
 8084fc4:	4620      	mov	r0, r4
 8084fc6:	b002      	add	sp, #8
 8084fc8:	bd10      	pop	{r4, pc}
 8084fca:	bf00      	nop
 8084fcc:	20000a78 	.word	0x20000a78
 8084fd0:	20000a74 	.word	0x20000a74
 8084fd4:	0808cd8e 	.word	0x0808cd8e

08084fd8 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
 8084fd8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
 8084fda:	2014      	movs	r0, #20
 8084fdc:	f7fb f875 	bl	80800ca <_Znwj>
 8084fe0:	4604      	mov	r4, r0
 8084fe2:	b140      	cbz	r0, 8084ff6 <_Z15builderParticlev+0x1e>
 8084fe4:	4b05      	ldr	r3, [pc, #20]	; (8084ffc <_Z15builderParticlev+0x24>)
 8084fe6:	4906      	ldr	r1, [pc, #24]	; (8085000 <_Z15builderParticlev+0x28>)
 8084fe8:	681b      	ldr	r3, [r3, #0]
 8084fea:	9300      	str	r3, [sp, #0]
 8084fec:	2300      	movs	r3, #0
 8084fee:	6809      	ldr	r1, [r1, #0]
 8084ff0:	461a      	mov	r2, r3
 8084ff2:	f000 fa87 	bl	8085504 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
 8084ff6:	4620      	mov	r0, r4
 8084ff8:	b002      	add	sp, #8
 8084ffa:	bd10      	pop	{r4, pc}
 8084ffc:	20000a78 	.word	0x20000a78
 8085000:	20000a74 	.word	0x20000a74

08085004 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 8085004:	b510      	push	{r4, lr}
 8085006:	4604      	mov	r4, r0
 8085008:	4b05      	ldr	r3, [pc, #20]	; (8085020 <_ZN3UDPD1Ev+0x1c>)
 808500a:	6003      	str	r3, [r0, #0]
 808500c:	3364      	adds	r3, #100	; 0x64
 808500e:	6103      	str	r3, [r0, #16]
 8085010:	f002 fb4d 	bl	80876ae <_ZN3UDP4stopEv>
 8085014:	4620      	mov	r0, r4
 8085016:	f002 fc35 	bl	8087884 <_ZN3UDP13releaseBufferEv>
 808501a:	4620      	mov	r0, r4
 808501c:	bd10      	pop	{r4, pc}
 808501e:	bf00      	nop
 8085020:	0808d198 	.word	0x0808d198

08085024 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
	operator=(_Functor&& __f)
 8085024:	b510      	push	{r4, lr}
 8085026:	b086      	sub	sp, #24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085028:	466a      	mov	r2, sp
 808502a:	4604      	mov	r4, r0
 808502c:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808502e:	9102      	str	r1, [sp, #8]
 8085030:	e893 0003 	ldmia.w	r3, {r0, r1}
 8085034:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8085038:	e894 0003 	ldmia.w	r4, {r0, r1}
 808503c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8085040:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8085044:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085046:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808504a:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808504c:	4a05      	ldr	r2, [pc, #20]	; (8085064 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
    class function<_Res(_ArgTypes...)>
 808504e:	4618      	mov	r0, r3
 8085050:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 8085052:	68e2      	ldr	r2, [r4, #12]
 8085054:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8085056:	4a04      	ldr	r2, [pc, #16]	; (8085068 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
 8085058:	60e2      	str	r2, [r4, #12]
 808505a:	f7fb f946 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	}
 808505e:	4620      	mov	r0, r4
 8085060:	b006      	add	sp, #24
 8085062:	bd10      	pop	{r4, pc}
 8085064:	08084f29 	.word	0x08084f29
 8085068:	08084f25 	.word	0x08084f25

0808506c <_ZN3UDPD0Ev>:
 808506c:	b510      	push	{r4, lr}
 808506e:	4604      	mov	r4, r0
 8085070:	f7ff ffc8 	bl	8085004 <_ZN3UDPD1Ev>
 8085074:	4620      	mov	r0, r4
 8085076:	213c      	movs	r1, #60	; 0x3c
 8085078:	f004 f857 	bl	808912a <_ZdlPvj>
 808507c:	4620      	mov	r0, r4
 808507e:	bd10      	pop	{r4, pc}

08085080 <_ZN10UbiBuilder7builderEv>:
      { return &this->_M_impl._M_header; }
 8085080:	f100 0108 	add.w	r1, r0, #8
 8085084:	460b      	mov	r3, r1
UbiProtocol* UbiBuilder::builder() {
 8085086:	b570      	push	{r4, r5, r6, lr}
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8085088:	68c2      	ldr	r2, [r0, #12]
      while (__x != 0)
 808508a:	b13a      	cbz	r2, 808509c <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 808508c:	7c15      	ldrb	r5, [r2, #16]
 808508e:	7804      	ldrb	r4, [r0, #0]
 8085090:	42a5      	cmp	r5, r4
 8085092:	bf2a      	itet	cs
 8085094:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
 8085096:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
 8085098:	6892      	ldrcs	r2, [r2, #8]
 808509a:	e7f6      	b.n	808508a <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 808509c:	4299      	cmp	r1, r3
 808509e:	d004      	beq.n	80850aa <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
 80850a0:	7800      	ldrb	r0, [r0, #0]
 80850a2:	7c1a      	ldrb	r2, [r3, #16]
 80850a4:	4290      	cmp	r0, r2
 80850a6:	bf38      	it	cc
 80850a8:	460b      	movcc	r3, r1
      if (_M_empty())
 80850aa:	69da      	ldr	r2, [r3, #28]
 80850ac:	b90a      	cbnz	r2, 80850b2 <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
 80850ae:	f004 f8f5 	bl	808929c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80850b2:	6a1a      	ldr	r2, [r3, #32]
 80850b4:	f103 0014 	add.w	r0, r3, #20
}
 80850b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80850bc:	4710      	bx	r2

080850be <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80850be:	b570      	push	{r4, r5, r6, lr}
 80850c0:	4616      	mov	r6, r2
 80850c2:	4604      	mov	r4, r0
      bool __comp = true;
 80850c4:	2201      	movs	r2, #1
      _Link_type __x = _M_begin();
 80850c6:	688b      	ldr	r3, [r1, #8]
      { return &this->_M_impl._M_header; }
 80850c8:	1d0d      	adds	r5, r1, #4
      while (__x != 0)
 80850ca:	b153      	cbz	r3, 80850e2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x24>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80850cc:	7830      	ldrb	r0, [r6, #0]
 80850ce:	7c1a      	ldrb	r2, [r3, #16]
 80850d0:	461d      	mov	r5, r3
 80850d2:	4290      	cmp	r0, r2
 80850d4:	bf35      	itete	cc
 80850d6:	6898      	ldrcc	r0, [r3, #8]
 80850d8:	68d8      	ldrcs	r0, [r3, #12]
 80850da:	2201      	movcc	r2, #1
 80850dc:	2200      	movcs	r2, #0
 80850de:	4603      	mov	r3, r0
 80850e0:	e7f3      	b.n	80850ca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
 80850e2:	b192      	cbz	r2, 808510a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4c>
	  if (__j == begin())
 80850e4:	68ca      	ldr	r2, [r1, #12]
 80850e6:	42aa      	cmp	r2, r5
 80850e8:	d103      	bne.n	80850f2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80850ea:	e9c4 3500 	strd	r3, r5, [r4]
    }
 80850ee:	4620      	mov	r0, r4
 80850f0:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
 80850f2:	4628      	mov	r0, r5
 80850f4:	f004 f874 	bl	80891e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80850f8:	7833      	ldrb	r3, [r6, #0]
 80850fa:	7c02      	ldrb	r2, [r0, #16]
 80850fc:	429a      	cmp	r2, r3
 80850fe:	f04f 0300 	mov.w	r3, #0
 8085102:	d3f2      	bcc.n	80850ea <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2c>
       : first(std::forward<_U1>(__x)), second(__y) { }
 8085104:	e9c4 0300 	strd	r0, r3, [r4]
 8085108:	e7f1      	b.n	80850ee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x30>
 808510a:	4628      	mov	r0, r5
 808510c:	e7f4      	b.n	80850f8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3a>

0808510e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 808510e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return &this->_M_impl._M_header; }
 8085112:	f100 0804 	add.w	r8, r0, #4
 8085116:	4606      	mov	r6, r0
 8085118:	4689      	mov	r9, r1
 808511a:	4644      	mov	r4, r8
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 808511c:	6885      	ldr	r5, [r0, #8]
      while (__x != 0)
 808511e:	b155      	cbz	r5, 8085136 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x28>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8085120:	f899 3000 	ldrb.w	r3, [r9]
 8085124:	7c2a      	ldrb	r2, [r5, #16]
 8085126:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
 8085128:	bf3a      	itte	cc
 808512a:	68eb      	ldrcc	r3, [r5, #12]
 808512c:	4625      	movcc	r5, r4
	  __y = __x, __x = _S_left(__x);
 808512e:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
 8085130:	462c      	mov	r4, r5
 8085132:	461d      	mov	r5, r3
 8085134:	e7f3      	b.n	808511e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8085136:	45a0      	cmp	r8, r4
 8085138:	d004      	beq.n	8085144 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x36>
 808513a:	f899 2000 	ldrb.w	r2, [r9]
 808513e:	7c23      	ldrb	r3, [r4, #16]
 8085140:	429a      	cmp	r2, r3
 8085142:	d22e      	bcs.n	80851a2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8085144:	2024      	movs	r0, #36	; 0x24
 8085146:	f7fa ffc0 	bl	80800ca <_Znwj>
    _Function_base() : _M_manager(nullptr) { }
 808514a:	2300      	movs	r3, #0
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 808514c:	f899 9000 	ldrb.w	r9, [r9]
      if (__pos._M_node == _M_end())
 8085150:	45a0      	cmp	r8, r4
 8085152:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
 8085154:	f100 0a10 	add.w	sl, r0, #16
 8085158:	f880 9010 	strb.w	r9, [r0, #16]
 808515c:	61c3      	str	r3, [r0, #28]
 808515e:	d125      	bne.n	80851ac <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x9e>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8085160:	6973      	ldr	r3, [r6, #20]
 8085162:	b11b      	cbz	r3, 808516c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x5e>
 8085164:	6932      	ldr	r2, [r6, #16]
 8085166:	7c13      	ldrb	r3, [r2, #16]
 8085168:	454b      	cmp	r3, r9
 808516a:	d30a      	bcc.n	8085182 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
 808516c:	4652      	mov	r2, sl
 808516e:	4631      	mov	r1, r6
 8085170:	4668      	mov	r0, sp
 8085172:	f7ff ffa4 	bl	80850be <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8085176:	e9dd 4200 	ldrd	r4, r2, [sp]
	    if (__res.second)
 808517a:	2a00      	cmp	r2, #0
 808517c:	d04f      	beq.n	808521e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
 808517e:	2c00      	cmp	r4, #0
 8085180:	d14b      	bne.n	808521a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8085182:	4590      	cmp	r8, r2
 8085184:	d049      	beq.n	808521a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
			    || _M_impl._M_key_compare(_S_key(__z),
 8085186:	7c38      	ldrb	r0, [r7, #16]
 8085188:	7c13      	ldrb	r3, [r2, #16]
 808518a:	4298      	cmp	r0, r3
 808518c:	bf2c      	ite	cs
 808518e:	2000      	movcs	r0, #0
 8085190:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8085192:	4643      	mov	r3, r8
 8085194:	4639      	mov	r1, r7
 8085196:	f004 f825 	bl	80891e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 808519a:	6973      	ldr	r3, [r6, #20]
 808519c:	3301      	adds	r3, #1
 808519e:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80851a0:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
 80851a2:	f104 0014 	add.w	r0, r4, #20
 80851a6:	b002      	add	sp, #8
 80851a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80851ac:	7c23      	ldrb	r3, [r4, #16]
 80851ae:	454b      	cmp	r3, r9
 80851b0:	d918      	bls.n	80851e4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
	  if (__pos._M_node == _M_leftmost()) // begin()
 80851b2:	68f3      	ldr	r3, [r6, #12]
 80851b4:	429c      	cmp	r4, r3
 80851b6:	d008      	beq.n	80851ca <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbc>
	_M_node = _Rb_tree_decrement(_M_node);
 80851b8:	4620      	mov	r0, r4
 80851ba:	f004 f811 	bl	80891e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80851be:	7c03      	ldrb	r3, [r0, #16]
 80851c0:	454b      	cmp	r3, r9
 80851c2:	d205      	bcs.n	80851d0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	      if (_S_right(__before._M_node) == 0)
 80851c4:	68c3      	ldr	r3, [r0, #12]
 80851c6:	b95b      	cbnz	r3, 80851e0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd2>
 80851c8:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
 80851ca:	4622      	mov	r2, r4
 80851cc:	461c      	mov	r4, r3
 80851ce:	e7d4      	b.n	808517a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
 80851d0:	4652      	mov	r2, sl
 80851d2:	4631      	mov	r1, r6
 80851d4:	4668      	mov	r0, sp
 80851d6:	f7ff ff72 	bl	80850be <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 80851da:	e9dd 3400 	ldrd	r3, r4, [sp]
 80851de:	e7f4      	b.n	80851ca <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbc>
 80851e0:	4623      	mov	r3, r4
 80851e2:	e7f2      	b.n	80851ca <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbc>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80851e4:	d21b      	bcs.n	808521e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
	  if (__pos._M_node == _M_rightmost())
 80851e6:	6932      	ldr	r2, [r6, #16]
 80851e8:	4294      	cmp	r4, r2
 80851ea:	d00a      	beq.n	8085202 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf4>
	_M_node = _Rb_tree_increment(_M_node);
 80851ec:	4620      	mov	r0, r4
 80851ee:	f003 ffe4 	bl	80891ba <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80851f2:	7c03      	ldrb	r3, [r0, #16]
	_M_node = _Rb_tree_increment(_M_node);
 80851f4:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80851f6:	454b      	cmp	r3, r9
 80851f8:	d905      	bls.n	8085206 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf8>
	      if (_S_right(__pos._M_node) == 0)
 80851fa:	68e3      	ldr	r3, [r4, #12]
 80851fc:	b95b      	cbnz	r3, 8085216 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x108>
 80851fe:	4622      	mov	r2, r4
 8085200:	461d      	mov	r5, r3
 8085202:	462c      	mov	r4, r5
 8085204:	e7b9      	b.n	808517a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
 8085206:	4652      	mov	r2, sl
 8085208:	4631      	mov	r1, r6
 808520a:	4668      	mov	r0, sp
 808520c:	f7ff ff57 	bl	80850be <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
 8085210:	e9dd 5200 	ldrd	r5, r2, [sp]
 8085214:	e7f5      	b.n	8085202 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf4>
 8085216:	4602      	mov	r2, r0
 8085218:	e7f3      	b.n	8085202 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf4>
			    || _M_impl._M_key_compare(_S_key(__z),
 808521a:	2001      	movs	r0, #1
 808521c:	e7b9      	b.n	8085192 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
 808521e:	f107 0014 	add.w	r0, r7, #20
 8085222:	f7fb f862 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	::operator delete(__p);
 8085226:	4638      	mov	r0, r7
 8085228:	f7fa ff53 	bl	80800d2 <_ZdlPv>
 808522c:	4627      	mov	r7, r4
 808522e:	e7b7      	b.n	80851a0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x92>

08085230 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token,
 8085230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      _M_header._M_color = _S_red;
 8085234:	2600      	movs	r6, #0
  _iot_protocol = iot_protocol;
 8085236:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
 8085238:	2301      	movs	r3, #1
                       IotProtocol iot_protocol) {
 808523a:	1d05      	adds	r5, r0, #4
UbiBuilder::UbiBuilder(const char* host, const char* token,
 808523c:	4617      	mov	r7, r2
	  : _Node_allocator()
 808523e:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
 8085242:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
 8085246:	e9c0 2605 	strd	r2, r6, [r0, #20]
 808524a:	4604      	mov	r4, r0
 808524c:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
 808524e:	7206      	strb	r6, [r0, #8]
  command_list[UBI_TCP] = &builderTcp;
 8085250:	f10d 0107 	add.w	r1, sp, #7
 8085254:	4628      	mov	r0, r5
 8085256:	f88d 3007 	strb.w	r3, [sp, #7]
 808525a:	f7ff ff58 	bl	808510e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 808525e:	4916      	ldr	r1, [pc, #88]	; (80852b8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
 8085260:	f7ff fee0 	bl	8085024 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
 8085264:	f10d 0107 	add.w	r1, sp, #7
 8085268:	4628      	mov	r0, r5
 808526a:	f88d 6007 	strb.w	r6, [sp, #7]
 808526e:	f7ff ff4e 	bl	808510e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8085272:	4912      	ldr	r1, [pc, #72]	; (80852bc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
 8085274:	f7ff fed6 	bl	8085024 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
 8085278:	2302      	movs	r3, #2
 808527a:	f10d 0107 	add.w	r1, sp, #7
 808527e:	4628      	mov	r0, r5
 8085280:	f88d 3007 	strb.w	r3, [sp, #7]
 8085284:	f7ff ff43 	bl	808510e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 8085288:	490d      	ldr	r1, [pc, #52]	; (80852c0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
 808528a:	f7ff fecb 	bl	8085024 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
 808528e:	2303      	movs	r3, #3
 8085290:	f10d 0107 	add.w	r1, sp, #7
 8085294:	4628      	mov	r0, r5
 8085296:	f88d 3007 	strb.w	r3, [sp, #7]
 808529a:	f7ff ff38 	bl	808510e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
 808529e:	4909      	ldr	r1, [pc, #36]	; (80852c4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
 80852a0:	f7ff fec0 	bl	8085024 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
}
 80852a4:	4620      	mov	r0, r4
  _host = host;
 80852a6:	4b08      	ldr	r3, [pc, #32]	; (80852c8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
 80852a8:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
 80852ac:	4b07      	ldr	r3, [pc, #28]	; (80852cc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
 80852ae:	601f      	str	r7, [r3, #0]
}
 80852b0:	b002      	add	sp, #8
 80852b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80852b6:	bf00      	nop
 80852b8:	08084f41 	.word	0x08084f41
 80852bc:	08084f75 	.word	0x08084f75
 80852c0:	08084fa5 	.word	0x08084fa5
 80852c4:	08084fd9 	.word	0x08084fd9
 80852c8:	20000a74 	.word	0x20000a74
 80852cc:	20000a78 	.word	0x20000a78

080852d0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
 80852d0:	b570      	push	{r4, r5, r6, lr}
 80852d2:	4d0f      	ldr	r5, [pc, #60]	; (8085310 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
 80852d4:	4c0f      	ldr	r4, [pc, #60]	; (8085314 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
 80852d6:	4e10      	ldr	r6, [pc, #64]	; (8085318 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
 80852d8:	4628      	mov	r0, r5
 80852da:	f001 fd3d 	bl	8086d58 <_ZN9TCPClientC1Ev>
 80852de:	4628      	mov	r0, r5
 80852e0:	4d0e      	ldr	r5, [pc, #56]	; (808531c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
 80852e2:	4622      	mov	r2, r4
 80852e4:	4631      	mov	r1, r6
 80852e6:	f003 ff1b 	bl	8089120 <__aeabi_atexit>
 80852ea:	4628      	mov	r0, r5
 80852ec:	f001 fd34 	bl	8086d58 <_ZN9TCPClientC1Ev>
 80852f0:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
 80852f2:	4d0b      	ldr	r5, [pc, #44]	; (8085320 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
 80852f4:	4622      	mov	r2, r4
 80852f6:	4631      	mov	r1, r6
 80852f8:	f003 ff12 	bl	8089120 <__aeabi_atexit>
 80852fc:	4628      	mov	r0, r5
 80852fe:	f002 fa9f 	bl	8087840 <_ZN3UDPC1Ev>
 8085302:	4622      	mov	r2, r4
 8085304:	4628      	mov	r0, r5
 8085306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808530a:	4906      	ldr	r1, [pc, #24]	; (8085324 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
 808530c:	f003 bf08 	b.w	8089120 <__aeabi_atexit>
 8085310:	20000a58 	.word	0x20000a58
 8085314:	20000230 	.word	0x20000230
 8085318:	08083ef5 	.word	0x08083ef5
 808531c:	20000a00 	.word	0x20000a00
 8085320:	20000a1c 	.word	0x20000a1c
 8085324:	08085005 	.word	0x08085005

08085328 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:
 8085328:	f000 bd2a 	b.w	8085d80 <HAL_Timer_Get_Milli_Seconds>

0808532c <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
 808532c:	4800      	ldr	r0, [pc, #0]	; (8085330 <_ZN6UbiUDP3getEPKcS1_+0x4>)
 808532e:	4770      	bx	lr
 8085330:	cda2425f 	.word	0xcda2425f

08085334 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
 8085334:	7501      	strb	r1, [r0, #20]
 8085336:	4770      	bx	lr

08085338 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
 8085338:	b530      	push	{r4, r5, lr}
               const char *token) {
 808533a:	4d06      	ldr	r5, [pc, #24]	; (8085354 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
  _user_agent = user_agent;
 808533c:	e9c0 1301 	strd	r1, r3, [r0, #4]
               const char *token) {
 8085340:	6005      	str	r5, [r0, #0]
 8085342:	2500      	movs	r5, #0
 8085344:	7505      	strb	r5, [r0, #20]
 8085346:	f241 3588 	movw	r5, #5000	; 0x1388
  _token = token;
 808534a:	9b03      	ldr	r3, [sp, #12]
               const char *token) {
 808534c:	6185      	str	r5, [r0, #24]
  _port = port;
 808534e:	e9c0 3203 	strd	r3, r2, [r0, #12]
}
 8085352:	bd30      	pop	{r4, r5, pc}
 8085354:	0808d09c 	.word	0x0808d09c

08085358 <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
 8085358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808535a:	2500      	movs	r5, #0
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
#elif (PLATFORM_ID == 13 || PLATFORM_ID == 10)  // Boron(13), Electron(10)
  return Cellular.resolve(_host);
 808535c:	684e      	ldr	r6, [r1, #4]
IPAddress UbiUDP::getServerIp() {
 808535e:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8085360:	4630      	mov	r0, r6
        HAL_IPAddress ip = {0};
 8085362:	9503      	str	r5, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8085364:	f005 f9c7 	bl	808a6f6 <strlen>
 8085368:	4b0a      	ldr	r3, [pc, #40]	; (8085394 <_ZN6UbiUDP11getServerIpEv+0x3c>)
 808536a:	9500      	str	r5, [sp, #0]
 808536c:	b281      	uxth	r1, r0
 808536e:	685b      	ldr	r3, [r3, #4]
 8085370:	4630      	mov	r0, r6
 8085372:	aa03      	add	r2, sp, #12
 8085374:	f000 fea4 	bl	80860c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8085378:	b130      	cbz	r0, 8085388 <_ZN6UbiUDP11getServerIpEv+0x30>
 808537a:	4629      	mov	r1, r5
 808537c:	4620      	mov	r0, r4
 808537e:	f003 f837 	bl	80883f0 <_ZN9IPAddressC1Em>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 8085382:	4620      	mov	r0, r4
 8085384:	b004      	add	sp, #16
 8085386:	bd70      	pop	{r4, r5, r6, pc}
 8085388:	4620      	mov	r0, r4
 808538a:	a903      	add	r1, sp, #12
 808538c:	f003 f828 	bl	80883e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8085390:	e7f7      	b.n	8085382 <_ZN6UbiUDP11getServerIpEv+0x2a>
 8085392:	bf00      	nop
 8085394:	20000f38 	.word	0x20000f38

08085398 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
                      char *payload, UbiFlags *flags) {
 8085398:	b530      	push	{r4, r5, lr}
 808539a:	b087      	sub	sp, #28
  IPAddress serverIpAddress = getServerIp();
 808539c:	4601      	mov	r1, r0
                      char *payload, UbiFlags *flags) {
 808539e:	4604      	mov	r4, r0
  IPAddress serverIpAddress = getServerIp();
 80853a0:	a802      	add	r0, sp, #8
                      char *payload, UbiFlags *flags) {
 80853a2:	461d      	mov	r5, r3
  IPAddress serverIpAddress = getServerIp();
 80853a4:	f7ff ffd8 	bl	8085358 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 80853a8:	a802      	add	r0, sp, #8
 80853aa:	f003 f827 	bl	80883fc <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
 80853ae:	b980      	cbnz	r0, 80853d2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x3a>
    if (_debug) {
 80853b0:	7d23      	ldrb	r3, [r4, #20]
 80853b2:	b123      	cbz	r3, 80853be <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
 80853b4:	f003 f8b6 	bl	8088524 <_Z16_fetch_usbserialv>
 80853b8:	4923      	ldr	r1, [pc, #140]	; (8085448 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb0>)
 80853ba:	f001 fe5c 	bl	8087076 <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169,55,61,243);
 80853be:	23f3      	movs	r3, #243	; 0xf3
 80853c0:	2237      	movs	r2, #55	; 0x37
 80853c2:	9300      	str	r3, [sp, #0]
 80853c4:	21a9      	movs	r1, #169	; 0xa9
 80853c6:	233d      	movs	r3, #61	; 0x3d
 80853c8:	a804      	add	r0, sp, #16
 80853ca:	f003 f827 	bl	808841c <_ZN9IPAddressC1Ehhhh>
class IPAddress : public Printable {
 80853ce:	9b05      	ldr	r3, [sp, #20]
 80853d0:	9303      	str	r3, [sp, #12]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
 80853d2:	2200      	movs	r2, #0
 80853d4:	f240 21bd 	movw	r1, #701	; 0x2bd
 80853d8:	481c      	ldr	r0, [pc, #112]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 80853da:	f002 fa65 	bl	80878a8 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
 80853de:	2200      	movs	r2, #0
 80853e0:	f242 3134 	movw	r1, #9012	; 0x2334
 80853e4:	4819      	ldr	r0, [pc, #100]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 80853e6:	f002 f936 	bl	8087656 <_ZN3UDP5beginEtm>
 80853ea:	4b19      	ldr	r3, [pc, #100]	; (8085450 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb8>)
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 80853ec:	f242 3234 	movw	r2, #9012	; 0x2334
 80853f0:	9304      	str	r3, [sp, #16]
 80853f2:	9b03      	ldr	r3, [sp, #12]
 80853f4:	4815      	ldr	r0, [pc, #84]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 80853f6:	a904      	add	r1, sp, #16
 80853f8:	9305      	str	r3, [sp, #20]
 80853fa:	f002 fa71 	bl	80878e0 <_ZN3UDP11beginPacketE9IPAddresst>
 80853fe:	b958      	cbnz	r0, 8085418 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    if (_debug) {
 8085400:	7d23      	ldrb	r3, [r4, #20]
 8085402:	b123      	cbz	r3, 808540e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x76>
      Serial.println("ERROR sending values with UDP");
 8085404:	f003 f88e 	bl	8088524 <_Z16_fetch_usbserialv>
 8085408:	4912      	ldr	r1, [pc, #72]	; (8085454 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
 808540a:	f001 fe34 	bl	8087076 <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
 808540e:	480f      	ldr	r0, [pc, #60]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 8085410:	f002 f94d 	bl	80876ae <_ZN3UDP4stopEv>
    return false;
 8085414:	2000      	movs	r0, #0
 8085416:	e014      	b.n	8085442 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xaa>
      if (str == NULL) return 0;
 8085418:	2d00      	cmp	r5, #0
 808541a:	d0f1      	beq.n	8085400 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x68>
      return write((const uint8_t *)str, strlen(str));
 808541c:	4628      	mov	r0, r5
 808541e:	f005 f96a 	bl	808a6f6 <strlen>
 8085422:	4629      	mov	r1, r5
 8085424:	4602      	mov	r2, r0
 8085426:	4809      	ldr	r0, [pc, #36]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 8085428:	f002 f972 	bl	8087710 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 808542c:	2800      	cmp	r0, #0
 808542e:	d0e7      	beq.n	8085400 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x68>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
 8085430:	4806      	ldr	r0, [pc, #24]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 8085432:	f002 f8bd 	bl	80875b0 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
 8085436:	2800      	cmp	r0, #0
 8085438:	d0e2      	beq.n	8085400 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x68>
  _client_udp_ubi.stop();
 808543a:	4804      	ldr	r0, [pc, #16]	; (808544c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>)
 808543c:	f002 f937 	bl	80876ae <_ZN3UDP4stopEv>
  return true;
 8085440:	2001      	movs	r0, #1
}
 8085442:	b007      	add	sp, #28
 8085444:	bd30      	pop	{r4, r5, pc}
 8085446:	bf00      	nop
 8085448:	0808cfe8 	.word	0x0808cfe8
 808544c:	20000a7c 	.word	0x20000a7c
 8085450:	0808d258 	.word	0x0808d258
 8085454:	0808d074 	.word	0x0808d074

08085458 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
}
 8085458:	b510      	push	{r4, lr}
 808545a:	4c05      	ldr	r4, [pc, #20]	; (8085470 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
 808545c:	4620      	mov	r0, r4
 808545e:	f002 f9ef 	bl	8087840 <_ZN3UDPC1Ev>
 8085462:	4620      	mov	r0, r4
 8085464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085468:	4a02      	ldr	r2, [pc, #8]	; (8085474 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
 808546a:	4903      	ldr	r1, [pc, #12]	; (8085478 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
 808546c:	f003 be58 	b.w	8089120 <__aeabi_atexit>
 8085470:	20000a7c 	.word	0x20000a7c
 8085474:	20000230 	.word	0x20000230
 8085478:	08085005 	.word	0x08085005

0808547c <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
 808547c:	4800      	ldr	r0, [pc, #0]	; (8085480 <_ZN11UbiParticle3getEPKcS1_+0x4>)
 808547e:	4770      	bx	lr
 8085480:	cda2425f 	.word	0xcda2425f

08085484 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
 8085484:	7401      	strb	r1, [r0, #16]
 8085486:	4770      	bx	lr

08085488 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
                           char* payload, UbiFlags* flags) {
 8085488:	b530      	push	{r4, r5, lr}
 808548a:	b085      	sub	sp, #20
 808548c:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808548e:	9b08      	ldr	r3, [sp, #32]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8085490:	a802      	add	r0, sp, #8
 8085492:	781b      	ldrb	r3, [r3, #0]
 8085494:	f88d 3000 	strb.w	r3, [sp]
 8085498:	233c      	movs	r3, #60	; 0x3c
 808549a:	f002 fe01 	bl	80880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808549e:	2000      	movs	r0, #0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80854a0:	9c02      	ldr	r4, [sp, #8]
 80854a2:	f000 fe9f 	bl	80861e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80854a6:	b120      	cbz	r0, 80854b2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80854a8:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 80854aa:	b913      	cbnz	r3, 80854b2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
 80854ac:	f000 ff32 	bl	8086314 <spark_process>
    }
 80854b0:	e7fa      	b.n	80854a8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
 80854b2:	7863      	ldrb	r3, [r4, #1]
 80854b4:	1c65      	adds	r5, r4, #1
 80854b6:	f3bf 8f5b 	dmb	ish
        if (this->acquireDone() && this->isSucceeded()) {
 80854ba:	b9ab      	cbnz	r3, 80854e8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
 80854bc:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
 80854be:	9c03      	ldr	r4, [sp, #12]
 80854c0:	b17c      	cbz	r4, 80854e2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
 80854c2:	6863      	ldr	r3, [r4, #4]
 80854c4:	3b01      	subs	r3, #1
 80854c6:	6063      	str	r3, [r4, #4]
 80854c8:	b95b      	cbnz	r3, 80854e2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
 80854ca:	6823      	ldr	r3, [r4, #0]
 80854cc:	4620      	mov	r0, r4
 80854ce:	689b      	ldr	r3, [r3, #8]
 80854d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80854d2:	68a3      	ldr	r3, [r4, #8]
 80854d4:	3b01      	subs	r3, #1
 80854d6:	60a3      	str	r3, [r4, #8]
 80854d8:	b91b      	cbnz	r3, 80854e2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
 80854da:	6823      	ldr	r3, [r4, #0]
 80854dc:	4620      	mov	r0, r4
 80854de:	68db      	ldr	r3, [r3, #12]
 80854e0:	4798      	blx	r3
}
 80854e2:	4628      	mov	r0, r5
 80854e4:	b005      	add	sp, #20
 80854e6:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
 80854e8:	2000      	movs	r0, #0
 80854ea:	f000 fe7b 	bl	80861e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80854ee:	b120      	cbz	r0, 80854fa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
 80854f0:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 80854f2:	b913      	cbnz	r3, 80854fa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
 80854f4:	f000 ff0e 	bl	8086314 <spark_process>
    }
 80854f8:	e7fa      	b.n	80854f0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80854fa:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
 80854fc:	2b01      	cmp	r3, #1
 80854fe:	d1dd      	bne.n	80854bc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
 8085500:	7b25      	ldrb	r5, [r4, #12]
 8085502:	e7dc      	b.n	80854be <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

08085504 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port,
 8085504:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
 8085506:	4c04      	ldr	r4, [pc, #16]	; (8085518 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
  _user_agent = user_agent;
 8085508:	e9c0 1301 	strd	r1, r3, [r0, #4]
                         const char* user_agent, const char* token) {
 808550c:	6004      	str	r4, [r0, #0]
 808550e:	2400      	movs	r4, #0
  _token = token;
 8085510:	9b02      	ldr	r3, [sp, #8]
                         const char* user_agent, const char* token) {
 8085512:	7404      	strb	r4, [r0, #16]
  _token = token;
 8085514:	60c3      	str	r3, [r0, #12]
}
 8085516:	bd10      	pop	{r4, pc}
 8085518:	0808d0b0 	.word	0x0808d0b0

0808551c <_ZN9CE_BME280C1Ev>:
 ***************************************************************************/



CE_BME280::CE_BME280()
{}
 808551c:	4770      	bx	lr

0808551e <_ZN9CE_BME2806write8Ehh>:
/*!
    @brief  Writes an 8 bit value over I2C/SPI
*/
/**************************************************************************/
void CE_BME280::write8(byte reg, byte value)
{
 808551e:	b570      	push	{r4, r5, r6, lr}
 8085520:	4606      	mov	r6, r0
 8085522:	4614      	mov	r4, r2
 8085524:	460d      	mov	r5, r1
    Wire.beginTransmission((uint8_t)_i2caddr);
 8085526:	f003 fdab 	bl	8089080 <_Z19__fetch_global_Wirev>
 808552a:	7831      	ldrb	r1, [r6, #0]
 808552c:	f003 fa8c 	bl	8088a48 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8085530:	f003 fda6 	bl	8089080 <_Z19__fetch_global_Wirev>
 8085534:	6803      	ldr	r3, [r0, #0]
 8085536:	4629      	mov	r1, r5
 8085538:	689b      	ldr	r3, [r3, #8]
 808553a:	4798      	blx	r3
    Wire.write((uint8_t)value);
 808553c:	f003 fda0 	bl	8089080 <_Z19__fetch_global_Wirev>
 8085540:	6803      	ldr	r3, [r0, #0]
 8085542:	4621      	mov	r1, r4
 8085544:	689b      	ldr	r3, [r3, #8]
 8085546:	4798      	blx	r3
    Wire.endTransmission();
 8085548:	f003 fd9a 	bl	8089080 <_Z19__fetch_global_Wirev>
}
 808554c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
 8085550:	f003 ba9a 	b.w	8088a88 <_ZN7TwoWire15endTransmissionEv>

08085554 <_ZN9CE_BME2805read8Eh>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t CE_BME280::read8(byte reg)
{
 8085554:	b538      	push	{r3, r4, r5, lr}
 8085556:	4604      	mov	r4, r0
 8085558:	460d      	mov	r5, r1
  uint8_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 808555a:	f003 fd91 	bl	8089080 <_Z19__fetch_global_Wirev>
 808555e:	7821      	ldrb	r1, [r4, #0]
 8085560:	f003 fa72 	bl	8088a48 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8085564:	f003 fd8c 	bl	8089080 <_Z19__fetch_global_Wirev>
 8085568:	6803      	ldr	r3, [r0, #0]
 808556a:	4629      	mov	r1, r5
 808556c:	689b      	ldr	r3, [r3, #8]
 808556e:	4798      	blx	r3
    Wire.endTransmission();
 8085570:	f003 fd86 	bl	8089080 <_Z19__fetch_global_Wirev>
 8085574:	f003 fa88 	bl	8088a88 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
 8085578:	f003 fd82 	bl	8089080 <_Z19__fetch_global_Wirev>
 808557c:	7821      	ldrb	r1, [r4, #0]
 808557e:	2201      	movs	r2, #1
 8085580:	f003 fa5f 	bl	8088a42 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 8085584:	f003 fd7c 	bl	8089080 <_Z19__fetch_global_Wirev>
 8085588:	6803      	ldr	r3, [r0, #0]
 808558a:	695b      	ldr	r3, [r3, #20]
 808558c:	4798      	blx	r3
 808558e:	4604      	mov	r4, r0
    Wire.endTransmission();
 8085590:	f003 fd76 	bl	8089080 <_Z19__fetch_global_Wirev>
 8085594:	f003 fa78 	bl	8088a88 <_ZN7TwoWire15endTransmissionEv>
 
  return value;
}
 8085598:	b2e0      	uxtb	r0, r4
 808559a:	bd38      	pop	{r3, r4, r5, pc}

0808559c <_ZN9CE_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C
*/
/**************************************************************************/
uint16_t CE_BME280::read16(byte reg)
{
 808559c:	b538      	push	{r3, r4, r5, lr}
 808559e:	4604      	mov	r4, r0
 80855a0:	460d      	mov	r5, r1
  uint16_t value;

    Wire.beginTransmission((uint8_t)_i2caddr);
 80855a2:	f003 fd6d 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855a6:	7821      	ldrb	r1, [r4, #0]
 80855a8:	f003 fa4e 	bl	8088a48 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 80855ac:	f003 fd68 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855b0:	6803      	ldr	r3, [r0, #0]
 80855b2:	4629      	mov	r1, r5
 80855b4:	689b      	ldr	r3, [r3, #8]
 80855b6:	4798      	blx	r3
    Wire.endTransmission();
 80855b8:	f003 fd62 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855bc:	f003 fa64 	bl	8088a88 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
 80855c0:	f003 fd5e 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855c4:	7821      	ldrb	r1, [r4, #0]
 80855c6:	2202      	movs	r2, #2
 80855c8:	f003 fa3b 	bl	8088a42 <_ZN7TwoWire11requestFromEhj>
    value = (Wire.read() << 8) | Wire.read();
 80855cc:	f003 fd58 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855d0:	6803      	ldr	r3, [r0, #0]
 80855d2:	695b      	ldr	r3, [r3, #20]
 80855d4:	4798      	blx	r3
 80855d6:	4605      	mov	r5, r0
 80855d8:	f003 fd52 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855dc:	6803      	ldr	r3, [r0, #0]
 80855de:	695b      	ldr	r3, [r3, #20]
 80855e0:	4798      	blx	r3
 80855e2:	4604      	mov	r4, r0
    Wire.endTransmission();
 80855e4:	f003 fd4c 	bl	8089080 <_Z19__fetch_global_Wirev>
 80855e8:	f003 fa4e 	bl	8088a88 <_ZN7TwoWire15endTransmissionEv>
    value = (Wire.read() << 8) | Wire.read();
 80855ec:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
  

  return value;
}
 80855f0:	b280      	uxth	r0, r0
 80855f2:	bd38      	pop	{r3, r4, r5, pc}

080855f4 <_ZN9CE_BME2809read16_LEEh>:

uint16_t CE_BME280::read16_LE(byte reg) {
 80855f4:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 80855f6:	f7ff ffd1 	bl	808559c <_ZN9CE_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 80855fa:	ba40      	rev16	r0, r0

}
 80855fc:	b280      	uxth	r0, r0
 80855fe:	bd08      	pop	{r3, pc}

08085600 <_ZN9CE_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void CE_BME280::readCoefficients(void)
{
 8085600:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 8085602:	2188      	movs	r1, #136	; 0x88
{
 8085604:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 8085606:	f7ff fff5 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 808560a:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 808560c:	81a0      	strh	r0, [r4, #12]
  return (int16_t)read16_LE(reg);
 808560e:	4620      	mov	r0, r4
 8085610:	f7ff fff0 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 8085614:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 8085616:	81e0      	strh	r0, [r4, #14]
  return (int16_t)read16_LE(reg);
 8085618:	4620      	mov	r0, r4
 808561a:	f7ff ffeb 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 808561e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 8085620:	8220      	strh	r0, [r4, #16]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 8085622:	4620      	mov	r0, r4
 8085624:	f7ff ffe6 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 8085628:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 808562a:	8260      	strh	r0, [r4, #18]
  return (int16_t)read16_LE(reg);
 808562c:	4620      	mov	r0, r4
 808562e:	f7ff ffe1 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 8085632:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 8085634:	82a0      	strh	r0, [r4, #20]
  return (int16_t)read16_LE(reg);
 8085636:	4620      	mov	r0, r4
 8085638:	f7ff ffdc 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 808563c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 808563e:	82e0      	strh	r0, [r4, #22]
  return (int16_t)read16_LE(reg);
 8085640:	4620      	mov	r0, r4
 8085642:	f7ff ffd7 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 8085646:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 8085648:	8320      	strh	r0, [r4, #24]
  return (int16_t)read16_LE(reg);
 808564a:	4620      	mov	r0, r4
 808564c:	f7ff ffd2 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 8085650:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 8085652:	8360      	strh	r0, [r4, #26]
  return (int16_t)read16_LE(reg);
 8085654:	4620      	mov	r0, r4
 8085656:	f7ff ffcd 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 808565a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 808565c:	83a0      	strh	r0, [r4, #28]
  return (int16_t)read16_LE(reg);
 808565e:	4620      	mov	r0, r4
 8085660:	f7ff ffc8 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 8085664:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 8085666:	83e0      	strh	r0, [r4, #30]
  return (int16_t)read16_LE(reg);
 8085668:	4620      	mov	r0, r4
 808566a:	f7ff ffc3 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
 808566e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 8085670:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
 8085672:	4620      	mov	r0, r4
 8085674:	f7ff ffbe 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8085678:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 808567a:	8460      	strh	r0, [r4, #34]	; 0x22
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 808567c:	4620      	mov	r0, r4
 808567e:	f7ff ff69 	bl	8085554 <_ZN9CE_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
 8085682:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 8085684:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return (int16_t)read16_LE(reg);
 8085688:	4620      	mov	r0, r4
 808568a:	f7ff ffb3 	bl	80855f4 <_ZN9CE_BME2809read16_LEEh>
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 808568e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 8085690:	84e0      	strh	r0, [r4, #38]	; 0x26
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 8085692:	4620      	mov	r0, r4
 8085694:	f7ff ff5e 	bl	8085554 <_ZN9CE_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 8085698:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 808569a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 808569e:	4620      	mov	r0, r4
 80856a0:	f7ff ff58 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 80856a4:	21e5      	movs	r1, #229	; 0xe5
 80856a6:	4605      	mov	r5, r0
 80856a8:	4620      	mov	r0, r4
 80856aa:	f7ff ff53 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 80856ae:	f000 030f 	and.w	r3, r0, #15
 80856b2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80856b6:	21e6      	movs	r1, #230	; 0xe6
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80856b8:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80856ba:	4620      	mov	r0, r4
 80856bc:	f7ff ff4a 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 80856c0:	21e5      	movs	r1, #229	; 0xe5
 80856c2:	4605      	mov	r5, r0
 80856c4:	4620      	mov	r0, r4
 80856c6:	f7ff ff45 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 80856ca:	1103      	asrs	r3, r0, #4
 80856cc:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 80856d0:	85a0      	strh	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80856d2:	21e7      	movs	r1, #231	; 0xe7
 80856d4:	4620      	mov	r0, r4
 80856d6:	f7ff ff3d 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 80856da:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
}
 80856de:	bd38      	pop	{r3, r4, r5, pc}

080856e0 <_ZN9CE_BME2805beginEh>:
bool CE_BME280::begin(uint8_t a) {
 80856e0:	b510      	push	{r4, lr}
 80856e2:	4604      	mov	r4, r0
  _i2caddr = a;
 80856e4:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80856e6:	f003 fccb 	bl	8089080 <_Z19__fetch_global_Wirev>
 80856ea:	f003 f97b 	bl	80889e4 <_ZN7TwoWire5beginEv>
  if (read8(BME280_REGISTER_CHIPID) != 0x60)
 80856ee:	21d0      	movs	r1, #208	; 0xd0
 80856f0:	4620      	mov	r0, r4
 80856f2:	f7ff ff2f 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 80856f6:	2860      	cmp	r0, #96	; 0x60
 80856f8:	d10e      	bne.n	8085718 <_ZN9CE_BME2805beginEh+0x38>
  readCoefficients();
 80856fa:	4620      	mov	r0, r4
 80856fc:	f7ff ff80 	bl	8085600 <_ZN9CE_BME28016readCoefficientsEv>
  write8(BME280_REGISTER_CONTROLHUMID, 0x03); // Set before CONTROL (DS 5.4.3)
 8085700:	2203      	movs	r2, #3
 8085702:	21f2      	movs	r1, #242	; 0xf2
 8085704:	4620      	mov	r0, r4
 8085706:	f7ff ff0a 	bl	808551e <_ZN9CE_BME2806write8Ehh>
  write8(BME280_REGISTER_CONTROL, 0x3F);
 808570a:	4620      	mov	r0, r4
 808570c:	223f      	movs	r2, #63	; 0x3f
 808570e:	21f4      	movs	r1, #244	; 0xf4
 8085710:	f7ff ff05 	bl	808551e <_ZN9CE_BME2806write8Ehh>
  return true;
 8085714:	2001      	movs	r0, #1
}
 8085716:	bd10      	pop	{r4, pc}
    return false;
 8085718:	2000      	movs	r0, #0
 808571a:	e7fc      	b.n	8085716 <_ZN9CE_BME2805beginEh+0x36>

0808571c <_ZN9CE_BME28015readTemperatureEv>:
/*!

*/
/**************************************************************************/
float CE_BME280::readTemperature(void)
{
 808571c:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 808571e:	21fa      	movs	r1, #250	; 0xfa
{
 8085720:	4604      	mov	r4, r0
  int32_t adc_T = read16(BME280_REGISTER_TEMPDATA);
 8085722:	f7ff ff3b 	bl	808559c <_ZN9CE_BME2806read16Eh>
  adc_T <<= 8;
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8085726:	21fc      	movs	r1, #252	; 0xfc
  adc_T <<= 8;
 8085728:	0205      	lsls	r5, r0, #8
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 808572a:	4620      	mov	r0, r4
 808572c:	f7ff ff12 	bl	8085554 <_ZN9CE_BME2805read8Eh>
  adc_T >>= 4;

  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 8085730:	89a3      	ldrh	r3, [r4, #12]
  adc_T |= read8(BME280_REGISTER_TEMPDATA+2);
 8085732:	4328      	orrs	r0, r5
	   ((int32_t)_bme280_calib.dig_T2)) >> 11;

  var2  = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 8085734:	ebc3 2220 	rsb	r2, r3, r0, asr #8
 8085738:	4352      	muls	r2, r2
  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 808573a:	005b      	lsls	r3, r3, #1
 808573c:	ebc3 13e0 	rsb	r3, r3, r0, asr #7
	   ((int32_t)_bme280_calib.dig_T2)) >> 11;
 8085740:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
	     ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 8085744:	1312      	asrs	r2, r2, #12
  var1  = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 8085746:	4358      	muls	r0, r3
	   ((int32_t)_bme280_calib.dig_T3)) >> 14;
 8085748:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
	     ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 808574c:	4353      	muls	r3, r2
  var2  = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 808574e:	139b      	asrs	r3, r3, #14

  t_fine = var1 + var2;
 8085750:	eb03 23e0 	add.w	r3, r3, r0, asr #11
 8085754:	60a3      	str	r3, [r4, #8]

  float T  = (t_fine * 5 + 128) >> 8;
 8085756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 808575a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 808575e:	1200      	asrs	r0, r0, #8
 8085760:	f004 fc3a 	bl	8089fd8 <__aeabi_i2f>
  return T/100;
 8085764:	4901      	ldr	r1, [pc, #4]	; (808576c <_ZN9CE_BME28015readTemperatureEv+0x50>)
 8085766:	f004 fd3f 	bl	808a1e8 <__aeabi_fdiv>
}
 808576a:	bd38      	pop	{r3, r4, r5, pc}
 808576c:	42c80000 	.word	0x42c80000

08085770 <_ZN9CE_BME28012readPressureEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readPressure(void) {
 8085770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int64_t var1, var2, p;

  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8085774:	21f7      	movs	r1, #247	; 0xf7
float CE_BME280::readPressure(void) {
 8085776:	4604      	mov	r4, r0
  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 8085778:	f7ff ff10 	bl	808559c <_ZN9CE_BME2806read16Eh>
  adc_P <<= 8;
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 808577c:	21f9      	movs	r1, #249	; 0xf9
  int32_t adc_P = read16(BME280_REGISTER_PRESSUREDATA);
 808577e:	4605      	mov	r5, r0
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 8085780:	4620      	mov	r0, r4
 8085782:	f7ff fee7 	bl	8085554 <_ZN9CE_BME2805read8Eh>
 8085786:	4684      	mov	ip, r0
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 8085788:	68a0      	ldr	r0, [r4, #8]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 808578a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
  var1 = ((int64_t)t_fine) - 128000;
 808578e:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
 8085792:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8085796:	f141 32ff 	adc.w	r2, r1, #4294967295
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 808579a:	fba3 ab03 	umull	sl, fp, r3, r3
 808579e:	fb03 f102 	mul.w	r1, r3, r2
 80857a2:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
    ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80857a6:	fb06 f102 	mul.w	r1, r6, r2
 80857aa:	17f7      	asrs	r7, r6, #31
 80857ac:	fb03 1107 	mla	r1, r3, r7, r1
 80857b0:	fba6 6703 	umull	r6, r7, r6, r3
 80857b4:	440f      	add	r7, r1
 80857b6:	0339      	lsls	r1, r7, #12
 80857b8:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
 80857bc:	0330      	lsls	r0, r6, #12
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
 80857be:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80857c2:	fb06 fe0b 	mul.w	lr, r6, fp
 80857c6:	17f7      	asrs	r7, r6, #31
 80857c8:	fb0a ee07 	mla	lr, sl, r7, lr
 80857cc:	fba6 670a 	umull	r6, r7, r6, sl
 80857d0:	4477      	add	r7, lr
 80857d2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80857d6:	ea4e 6e07 	orr.w	lr, lr, r7, lsl #24
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80857da:	8a66      	ldrh	r6, [r4, #18]
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
 80857dc:	eb1e 0000 	adds.w	r0, lr, r0
 80857e0:	ea4f 2827 	mov.w	r8, r7, asr #8
 80857e4:	eb48 0801 	adc.w	r8, r8, r1
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80857e8:	3000      	adds	r0, #0
 80857ea:	fba0 0106 	umull	r0, r1, r0, r6
 80857ee:	f548 4800 	adc.w	r8, r8, #32768	; 0x8000
 80857f2:	fb06 1108 	mla	r1, r6, r8, r1
 80857f6:	ea4f 0861 	mov.w	r8, r1, asr #1
 80857fa:	ea4f 79e1 	mov.w	r9, r1, asr #31

  if (var1 == 0) {
 80857fe:	ea58 0109 	orrs.w	r1, r8, r9
 8085802:	f000 8084 	beq.w	808590e <_ZN9CE_BME28012readPressureEv+0x19e>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 8085806:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
  adc_P |= read8(BME280_REGISTER_PRESSUREDATA+2);
 808580a:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 808580e:	fb06 f10b 	mul.w	r1, r6, fp
 8085812:	17f7      	asrs	r7, r6, #31
 8085814:	fb0a 1107 	mla	r1, sl, r7, r1
 8085818:	fba6 670a 	umull	r6, r7, r6, sl
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 808581c:	f9b4 a01a 	ldrsh.w	sl, [r4, #26]
  adc_P >>= 4;
 8085820:	112d      	asrs	r5, r5, #4
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8085822:	fb0a f202 	mul.w	r2, sl, r2
 8085826:	ea4f 7bea 	mov.w	fp, sl, asr #31
 808582a:	fb03 220b 	mla	r2, r3, fp, r2
 808582e:	fbaa ab03 	umull	sl, fp, sl, r3
 8085832:	ea4f 434a 	mov.w	r3, sl, lsl #17
 8085836:	4493      	add	fp, r2
 8085838:	199a      	adds	r2, r3, r6
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 808583a:	f04f 0300 	mov.w	r3, #0
    return 0;  // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 808583e:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 8085842:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8085846:	ea4f 4e4b 	mov.w	lr, fp, lsl #17
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 808584a:	440f      	add	r7, r1
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 808584c:	ea4e 3eda 	orr.w	lr, lr, sl, lsr #15
  p = 1048576 - adc_P;
 8085850:	ea4f 71e5 	mov.w	r1, r5, asr #31
  var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 8085854:	eb4e 0e07 	adc.w	lr, lr, r7
  p = (((p<<31) - var2)*3125) / var1;
 8085858:	ea4f 7cc1 	mov.w	ip, r1, lsl #31
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 808585c:	189b      	adds	r3, r3, r2
 808585e:	ea4f 01c6 	mov.w	r1, r6, lsl #3
  p = (((p<<31) - var2)*3125) / var1;
 8085862:	ea4f 70c5 	mov.w	r0, r5, lsl #31
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
 8085866:	eb41 0e0e 	adc.w	lr, r1, lr
  p = (((p<<31) - var2)*3125) / var1;
 808586a:	1ac0      	subs	r0, r0, r3
 808586c:	f640 4335 	movw	r3, #3125	; 0xc35
 8085870:	fba0 0103 	umull	r0, r1, r0, r3
 8085874:	ea4c 0c55 	orr.w	ip, ip, r5, lsr #1
 8085878:	eb6c 0c0e 	sbc.w	ip, ip, lr
 808587c:	fb03 110c 	mla	r1, r3, ip, r1
 8085880:	4642      	mov	r2, r8
 8085882:	464b      	mov	r3, r9
 8085884:	f004 fdd8 	bl	808a438 <__aeabi_ldivmod>
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8085888:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 808588c:	134d      	asrs	r5, r1, #13
 808588e:	fb02 f705 	mul.w	r7, r2, r5
 8085892:	0b46      	lsrs	r6, r0, #13
 8085894:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
 8085898:	17d3      	asrs	r3, r2, #31
 808589a:	fb06 7703 	mla	r7, r6, r3, r7
 808589e:	fba2 2306 	umull	r2, r3, r2, r6
 80858a2:	4355      	muls	r5, r2
 80858a4:	443b      	add	r3, r7
 80858a6:	fb06 5503 	mla	r5, r6, r3, r5
 80858aa:	fba2 2306 	umull	r2, r3, r2, r6
 80858ae:	442b      	add	r3, r5
 80858b0:	0e55      	lsrs	r5, r2, #25
 80858b2:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80858b6:	f9b4 2020 	ldrsh.w	r2, [r4, #32]

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80858ba:	182d      	adds	r5, r5, r0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80858bc:	ea4f 6663 	mov.w	r6, r3, asr #25
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80858c0:	eb41 0606 	adc.w	r6, r1, r6
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80858c4:	4351      	muls	r1, r2
 80858c6:	17d3      	asrs	r3, r2, #31
 80858c8:	fb00 1103 	mla	r1, r0, r3, r1
 80858cc:	fba2 2300 	umull	r2, r3, r2, r0
 80858d0:	440b      	add	r3, r1
 80858d2:	0cd1      	lsrs	r1, r2, #19
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80858d4:	f9b4 401e 	ldrsh.w	r4, [r4, #30]
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80858d8:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80858dc:	186d      	adds	r5, r5, r1
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 80858de:	ea4f 40e3 	mov.w	r0, r3, asr #19
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80858e2:	eb46 0300 	adc.w	r3, r6, r0
 80858e6:	0a2a      	lsrs	r2, r5, #8
 80858e8:	17e5      	asrs	r5, r4, #31
 80858ea:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80858ee:	1219      	asrs	r1, r3, #8
 80858f0:	0120      	lsls	r0, r4, #4
 80858f2:	012b      	lsls	r3, r5, #4
 80858f4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
  return (float)p/256;
 80858f8:	1880      	adds	r0, r0, r2
 80858fa:	eb43 0101 	adc.w	r1, r3, r1
 80858fe:	f004 fb81 	bl	808a004 <__aeabi_l2f>
 8085902:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8085906:	f004 fbbb 	bl	808a080 <__aeabi_fmul>
}
 808590a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;  // avoid exception caused by division by zero
 808590e:	2000      	movs	r0, #0
 8085910:	e7fb      	b.n	808590a <_ZN9CE_BME28012readPressureEv+0x19a>

08085912 <_ZN9CE_BME28012readHumidityEv>:
/**************************************************************************/
/*!

*/
/**************************************************************************/
float CE_BME280::readHumidity(void) {
 8085912:	b510      	push	{r4, lr}
 8085914:	4604      	mov	r4, r0

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 8085916:	21fd      	movs	r1, #253	; 0xfd
 8085918:	f7ff fe40 	bl	808559c <_ZN9CE_BME2806read16Eh>

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 808591c:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
  v_x1_u32r = (t_fine - ((int32_t)76800));
 8085920:	68a2      	ldr	r2, [r4, #8]
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 8085922:	051b      	lsls	r3, r3, #20
 8085924:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8085928:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
  v_x1_u32r = (t_fine - ((int32_t)76800));
 808592c:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 8085930:	fb02 0313 	mls	r3, r2, r3, r0
		  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8085934:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8085938:	13d8      	asrs	r0, r3, #15
	       (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
		    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 808593a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 808593e:	4353      	muls	r3, r2
 8085940:	12db      	asrs	r3, r3, #11
 8085942:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
	       (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 8085946:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 808594a:	4353      	muls	r3, r2
 808594c:	129b      	asrs	r3, r3, #10
 808594e:	434b      	muls	r3, r1
		    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8085950:	129b      	asrs	r3, r3, #10
 8085952:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
		  ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 8085956:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 808595a:	4353      	muls	r3, r2
 808595c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8085960:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 8085962:	4343      	muls	r3, r0

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8085964:	13d8      	asrs	r0, r3, #15
 8085966:	4340      	muls	r0, r0
			     ((int32_t)_bme280_calib.dig_H1)) >> 4));
 8085968:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 808596c:	11c0      	asrs	r0, r0, #7
 808596e:	4350      	muls	r0, r2
 8085970:	eba3 1020 	sub.w	r0, r3, r0, asr #4

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8085974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8085978:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 808597c:	bfa8      	it	ge
 808597e:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
  float h = (v_x1_u32r>>12);
 8085982:	1300      	asrs	r0, r0, #12
 8085984:	f004 fb28 	bl	8089fd8 <__aeabi_i2f>
  return  h / 1024.0;
 8085988:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 808598c:	f004 fb78 	bl	808a080 <__aeabi_fmul>
}
 8085990:	bd10      	pop	{r4, pc}
	...

08085994 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 8085994:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8085996:	2101      	movs	r1, #1
 8085998:	4806      	ldr	r0, [pc, #24]	; (80859b4 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 808599a:	f003 fa5a 	bl	8088e52 <TIM_GetITStatus>
 808599e:	b140      	cbz	r0, 80859b2 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80859a0:	2101      	movs	r1, #1
 80859a2:	4804      	ldr	r0, [pc, #16]	; (80859b4 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 80859a4:	f003 fa60 	bl	8088e68 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 80859a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[0]();
 80859ac:	4b02      	ldr	r3, [pc, #8]	; (80859b8 <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 80859ae:	681b      	ldr	r3, [r3, #0]
 80859b0:	4718      	bx	r3
}
 80859b2:	bd10      	pop	{r4, pc}
 80859b4:	40000400 	.word	0x40000400
 80859b8:	20000ab8 	.word	0x20000ab8

080859bc <Wiring_TIM4_Interrupt_Handler_override>:

void Wiring_TIM4_Interrupt_Handler_override()
{
 80859bc:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 80859be:	2101      	movs	r1, #1
 80859c0:	4806      	ldr	r0, [pc, #24]	; (80859dc <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80859c2:	f003 fa46 	bl	8088e52 <TIM_GetITStatus>
 80859c6:	b140      	cbz	r0, 80859da <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80859c8:	2101      	movs	r1, #1
 80859ca:	4804      	ldr	r0, [pc, #16]	; (80859dc <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80859cc:	f003 fa4c 	bl	8088e68 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 80859d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[1]();
 80859d4:	4b02      	ldr	r3, [pc, #8]	; (80859e0 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 80859d6:	685b      	ldr	r3, [r3, #4]
 80859d8:	4718      	bx	r3
}
 80859da:	bd10      	pop	{r4, pc}
 80859dc:	40000800 	.word	0x40000800
 80859e0:	20000ab8 	.word	0x20000ab8

080859e4 <Wiring_TIM5_Interrupt_Handler_override>:

void Wiring_TIM5_Interrupt_Handler_override()
{
 80859e4:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 80859e6:	2101      	movs	r1, #1
 80859e8:	4806      	ldr	r0, [pc, #24]	; (8085a04 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80859ea:	f003 fa32 	bl	8088e52 <TIM_GetITStatus>
 80859ee:	b140      	cbz	r0, 8085a02 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80859f0:	2101      	movs	r1, #1
 80859f2:	4804      	ldr	r0, [pc, #16]	; (8085a04 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80859f4:	f003 fa38 	bl	8088e68 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 80859f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[2]();
 80859fc:	4b02      	ldr	r3, [pc, #8]	; (8085a08 <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 80859fe:	689b      	ldr	r3, [r3, #8]
 8085a00:	4718      	bx	r3
}
 8085a02:	bd10      	pop	{r4, pc}
 8085a04:	40000c00 	.word	0x40000c00
 8085a08:	20000ab8 	.word	0x20000ab8

08085a0c <Wiring_TIM6_Interrupt_Handler_override>:

void Wiring_TIM6_Interrupt_Handler_override()
{
 8085a0c:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 8085a0e:	2101      	movs	r1, #1
 8085a10:	4806      	ldr	r0, [pc, #24]	; (8085a2c <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8085a12:	f003 fa1e 	bl	8088e52 <TIM_GetITStatus>
 8085a16:	b140      	cbz	r0, 8085a2a <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8085a18:	2101      	movs	r1, #1
 8085a1a:	4804      	ldr	r0, [pc, #16]	; (8085a2c <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8085a1c:	f003 fa24 	bl	8088e68 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 8085a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[3]();
 8085a24:	4b02      	ldr	r3, [pc, #8]	; (8085a30 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 8085a26:	68db      	ldr	r3, [r3, #12]
 8085a28:	4718      	bx	r3
}
 8085a2a:	bd10      	pop	{r4, pc}
 8085a2c:	40001000 	.word	0x40001000
 8085a30:	20000ab8 	.word	0x20000ab8

08085a34 <Wiring_TIM7_Interrupt_Handler_override>:

void Wiring_TIM7_Interrupt_Handler_override()
{
 8085a34:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8085a36:	2101      	movs	r1, #1
 8085a38:	4806      	ldr	r0, [pc, #24]	; (8085a54 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8085a3a:	f003 fa0a 	bl	8088e52 <TIM_GetITStatus>
 8085a3e:	b140      	cbz	r0, 8085a52 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8085a40:	2101      	movs	r1, #1
 8085a42:	4804      	ldr	r0, [pc, #16]	; (8085a54 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8085a44:	f003 fa10 	bl	8088e68 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 8085a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[4]();
 8085a4c:	4b02      	ldr	r3, [pc, #8]	; (8085a58 <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 8085a4e:	691b      	ldr	r3, [r3, #16]
 8085a50:	4718      	bx	r3
}
 8085a52:	bd10      	pop	{r4, pc}
 8085a54:	40001400 	.word	0x40001400
 8085a58:	20000ab8 	.word	0x20000ab8

08085a5c <_ZN13IntervalTimer9start_SITEmb>:

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 8085a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085a5e:	7a43      	ldrb	r3, [r0, #9]
 8085a60:	4605      	mov	r5, r0
 8085a62:	460e      	mov	r6, r1
 8085a64:	4617      	mov	r7, r2
 8085a66:	b085      	sub	sp, #20
 8085a68:	2b04      	cmp	r3, #4
 8085a6a:	d80c      	bhi.n	8085a86 <_ZN13IntervalTimer9start_SITEmb+0x2a>
 8085a6c:	e8df f003 	tbb	[pc, r3]
 8085a70:	483f3603 	.word	0x483f3603
 8085a74:	51          	.byte	0x51
 8085a75:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8085a76:	2101      	movs	r1, #1
 8085a78:	2002      	movs	r0, #2
 8085a7a:	f003 f8bd 	bl	8088bf8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085a7e:	231d      	movs	r3, #29
		TIMx = TIM3;
 8085a80:	4c29      	ldr	r4, [pc, #164]	; (8085b28 <_ZN13IntervalTimer9start_SITEmb+0xcc>)
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085a82:	f88d 3000 	strb.w	r3, [sp]
		break;
#endif
	}
	
	// Initialize Timer
	switch (scale) {
 8085a86:	2f00      	cmp	r7, #0
 8085a88:	d14c      	bne.n	8085b24 <_ZN13IntervalTimer9start_SITEmb+0xc8>
		case uSec:
			prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
 8085a8a:	886f      	ldrh	r7, [r5, #2]
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 8085a8c:	7a6a      	ldrb	r2, [r5, #9]
 8085a8e:	68e9      	ldr	r1, [r5, #12]
 8085a90:	4b26      	ldr	r3, [pc, #152]	; (8085b2c <_ZN13IntervalTimer9start_SITEmb+0xd0>)

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
 8085a92:	4668      	mov	r0, sp
	SIT_CALLBACK[SIT_id] = myISRcallback;
 8085a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
 8085a98:	230a      	movs	r3, #10
 8085a9a:	f88d 3001 	strb.w	r3, [sp, #1]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8085a9e:	f240 1301 	movw	r3, #257	; 0x101
 8085aa2:	f8ad 3002 	strh.w	r3, [sp, #2]
    	NVIC_Init(&nvicStructure);
 8085aa6:	f003 f873 	bl	8088b90 <NVIC_Init>
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8085aaa:	2300      	movs	r3, #0
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 8085aac:	4620      	mov	r0, r4
 8085aae:	a901      	add	r1, sp, #4
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8085ab0:	f8ad 3006 	strh.w	r3, [sp, #6]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8085ab4:	f8ad 300c 	strh.w	r3, [sp, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8085ab8:	f88d 300e 	strb.w	r3, [sp, #14]
	timerInitStructure.TIM_Prescaler = prescaler;
 8085abc:	f8ad 7004 	strh.w	r7, [sp, #4]
	timerInitStructure.TIM_Period = Period;
 8085ac0:	9602      	str	r6, [sp, #8]
	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 8085ac2:	f003 f973 	bl	8088dac <TIM_TimeBaseInit>
	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 8085ac6:	2201      	movs	r2, #1
 8085ac8:	4620      	mov	r0, r4
 8085aca:	4611      	mov	r1, r2
 8085acc:	f003 f9b8 	bl	8088e40 <TIM_ITConfig>
	TIM_Cmd(TIMx, ENABLE);
 8085ad0:	2101      	movs	r1, #1
 8085ad2:	4620      	mov	r0, r4
 8085ad4:	f003 f9a8 	bl	8088e28 <TIM_Cmd>
}
 8085ad8:	b005      	add	sp, #20
 8085ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8085adc:	2101      	movs	r1, #1
 8085ade:	2004      	movs	r0, #4
 8085ae0:	f003 f88a 	bl	8088bf8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8085ae4:	231e      	movs	r3, #30
		TIMx = TIM4;
 8085ae6:	4c12      	ldr	r4, [pc, #72]	; (8085b30 <_ZN13IntervalTimer9start_SITEmb+0xd4>)
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8085ae8:	f88d 3000 	strb.w	r3, [sp]
		break;
 8085aec:	e7cb      	b.n	8085a86 <_ZN13IntervalTimer9start_SITEmb+0x2a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8085aee:	2101      	movs	r1, #1
 8085af0:	2008      	movs	r0, #8
 8085af2:	f003 f881 	bl	8088bf8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8085af6:	2332      	movs	r3, #50	; 0x32
		TIMx = TIM5;
 8085af8:	4c0e      	ldr	r4, [pc, #56]	; (8085b34 <_ZN13IntervalTimer9start_SITEmb+0xd8>)
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8085afa:	f88d 3000 	strb.w	r3, [sp]
		break;
 8085afe:	e7c2      	b.n	8085a86 <_ZN13IntervalTimer9start_SITEmb+0x2a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8085b00:	2101      	movs	r1, #1
 8085b02:	2010      	movs	r0, #16
 8085b04:	f003 f878 	bl	8088bf8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085b08:	2336      	movs	r3, #54	; 0x36
		TIMx = TIM6;
 8085b0a:	4c0b      	ldr	r4, [pc, #44]	; (8085b38 <_ZN13IntervalTimer9start_SITEmb+0xdc>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085b0c:	f88d 3000 	strb.w	r3, [sp]
		break;
 8085b10:	e7b9      	b.n	8085a86 <_ZN13IntervalTimer9start_SITEmb+0x2a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8085b12:	2101      	movs	r1, #1
 8085b14:	2020      	movs	r0, #32
 8085b16:	f003 f86f 	bl	8088bf8 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085b1a:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 8085b1c:	4c07      	ldr	r4, [pc, #28]	; (8085b3c <_ZN13IntervalTimer9start_SITEmb+0xe0>)
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085b1e:	f88d 3000 	strb.w	r3, [sp]
		break;
 8085b22:	e7b0      	b.n	8085a86 <_ZN13IntervalTimer9start_SITEmb+0x2a>
			prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 8085b24:	88af      	ldrh	r7, [r5, #4]
			break;
 8085b26:	e7b1      	b.n	8085a8c <_ZN13IntervalTimer9start_SITEmb+0x30>
 8085b28:	40000400 	.word	0x40000400
 8085b2c:	20000ab8 	.word	0x20000ab8
 8085b30:	40000800 	.word	0x40000800
 8085b34:	40000c00 	.word	0x40000c00
 8085b38:	40001000 	.word	0x40001000
 8085b3c:	40001400 	.word	0x40001400

08085b40 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>:
	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 8085b40:	2b04      	cmp	r3, #4
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {
 8085b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085b44:	4694      	mov	ip, r2
 8085b46:	4605      	mov	r5, r0
 8085b48:	460f      	mov	r7, r1
 8085b4a:	461c      	mov	r4, r3
 8085b4c:	4e0c      	ldr	r6, [pc, #48]	; (8085b80 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x40>)
	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 8085b4e:	d807      	bhi.n	8085b60 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x20>
		if (!SIT_used[id]) {
 8085b50:	5cf3      	ldrb	r3, [r6, r3]
 8085b52:	b99b      	cbnz	r3, 8085b7c <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x3c>
			SIT_id = id;
 8085b54:	7244      	strb	r4, [r0, #9]
				start_SIT(Period, scale);
 8085b56:	f7ff ff81 	bl	8085a5c <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 8085b5a:	2001      	movs	r0, #1
 8085b5c:	5530      	strb	r0, [r6, r4]
}
 8085b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085b60:	4633      	mov	r3, r6
	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 8085b62:	2400      	movs	r4, #0
			if (!SIT_used[tid]) {
 8085b64:	f813 1b01 	ldrb.w	r1, [r3], #1
 8085b68:	b2e2      	uxtb	r2, r4
 8085b6a:	b921      	cbnz	r1, 8085b76 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x36>
				SIT_id = tid;
 8085b6c:	726a      	strb	r2, [r5, #9]
				start_SIT(Period, scale);
 8085b6e:	4639      	mov	r1, r7
 8085b70:	4662      	mov	r2, ip
 8085b72:	4628      	mov	r0, r5
 8085b74:	e7ef      	b.n	8085b56 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x16>
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 8085b76:	3401      	adds	r4, #1
 8085b78:	2c05      	cmp	r4, #5
 8085b7a:	d1f3      	bne.n	8085b64 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x24>
	return false;
 8085b7c:	2000      	movs	r0, #0
 8085b7e:	e7ee      	b.n	8085b5e <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x1e>
 8085b80:	20000acc 	.word	0x20000acc

08085b84 <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 8085b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8085b86:	7a43      	ldrb	r3, [r0, #9]
 8085b88:	4605      	mov	r5, r0
 8085b8a:	2b04      	cmp	r3, #4
 8085b8c:	d808      	bhi.n	8085ba0 <_ZN13IntervalTimer8stop_SITEv+0x1c>
 8085b8e:	e8df f003 	tbb	[pc, r3]
 8085b92:	1903      	.short	0x1903
 8085b94:	231e      	.short	0x231e
 8085b96:	28          	.byte	0x28
 8085b97:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085b98:	231d      	movs	r3, #29
		TIMx = TIM3;
 8085b9a:	4c14      	ldr	r4, [pc, #80]	; (8085bec <_ZN13IntervalTimer8stop_SITEv+0x68>)
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8085b9c:	f88d 3004 	strb.w	r3, [sp, #4]
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8085ba0:	2600      	movs	r6, #0
	TIM_Cmd(TIMx, DISABLE);
 8085ba2:	2100      	movs	r1, #0
 8085ba4:	4620      	mov	r0, r4
 8085ba6:	f003 f93f 	bl	8088e28 <TIM_Cmd>
    NVIC_Init(&nvicStructure);
 8085baa:	a801      	add	r0, sp, #4
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8085bac:	f88d 6007 	strb.w	r6, [sp, #7]
    NVIC_Init(&nvicStructure);
 8085bb0:	f002 ffee 	bl	8088b90 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 8085bb4:	4620      	mov	r0, r4
 8085bb6:	f003 f843 	bl	8088c40 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 8085bba:	7a6b      	ldrb	r3, [r5, #9]
 8085bbc:	4a0c      	ldr	r2, [pc, #48]	; (8085bf0 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
 8085bbe:	54d6      	strb	r6, [r2, r3]
}
 8085bc0:	b002      	add	sp, #8
 8085bc2:	bd70      	pop	{r4, r5, r6, pc}
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8085bc4:	231e      	movs	r3, #30
		TIMx = TIM4;
 8085bc6:	4c0b      	ldr	r4, [pc, #44]	; (8085bf4 <_ZN13IntervalTimer8stop_SITEv+0x70>)
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8085bc8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 8085bcc:	e7e8      	b.n	8085ba0 <_ZN13IntervalTimer8stop_SITEv+0x1c>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8085bce:	2332      	movs	r3, #50	; 0x32
		TIMx = TIM5;
 8085bd0:	4c09      	ldr	r4, [pc, #36]	; (8085bf8 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8085bd2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 8085bd6:	e7e3      	b.n	8085ba0 <_ZN13IntervalTimer8stop_SITEv+0x1c>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085bd8:	2336      	movs	r3, #54	; 0x36
		TIMx = TIM6;
 8085bda:	4c08      	ldr	r4, [pc, #32]	; (8085bfc <_ZN13IntervalTimer8stop_SITEv+0x78>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8085bdc:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 8085be0:	e7de      	b.n	8085ba0 <_ZN13IntervalTimer8stop_SITEv+0x1c>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085be2:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 8085be4:	4c06      	ldr	r4, [pc, #24]	; (8085c00 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8085be6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 8085bea:	e7d9      	b.n	8085ba0 <_ZN13IntervalTimer8stop_SITEv+0x1c>
 8085bec:	40000400 	.word	0x40000400
 8085bf0:	20000acc 	.word	0x20000acc
 8085bf4:	40000800 	.word	0x40000800
 8085bf8:	40000c00 	.word	0x40000c00
 8085bfc:	40001000 	.word	0x40001000
 8085c00:	40001400 	.word	0x40001400

08085c04 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>:
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 8085c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085c08:	461f      	mov	r7, r3
	if (status == TIMER_SIT) {
 8085c0a:	7a03      	ldrb	r3, [r0, #8]
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 8085c0c:	4604      	mov	r4, r0
 8085c0e:	460d      	mov	r5, r1
 8085c10:	4616      	mov	r6, r2
 8085c12:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (status == TIMER_SIT) {
 8085c16:	b11b      	cbz	r3, 8085c20 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x1c>
		stop_SIT();
 8085c18:	f7ff ffb4 	bl	8085b84 <_ZN13IntervalTimer8stop_SITEv>
		status = TIMER_OFF;
 8085c1c:	2300      	movs	r3, #0
 8085c1e:	7223      	strb	r3, [r4, #8]
	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 8085c20:	f1b8 0f04 	cmp.w	r8, #4
	myISRcallback = isrCallback;
 8085c24:	60e5      	str	r5, [r4, #12]
	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 8085c26:	d80b      	bhi.n	8085c40 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3c>
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
 8085c28:	4643      	mov	r3, r8
 8085c2a:	463a      	mov	r2, r7
 8085c2c:	4631      	mov	r1, r6
 8085c2e:	4620      	mov	r0, r4
 8085c30:	f7ff ff86 	bl	8085b40 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>
 8085c34:	b1c0      	cbz	r0, 8085c68 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x64>
 8085c36:	2301      	movs	r3, #1
		else status = TIMER_OFF;
 8085c38:	7223      	strb	r3, [r4, #8]
}
 8085c3a:	7a20      	ldrb	r0, [r4, #8]
 8085c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085c40:	4b0a      	ldr	r3, [pc, #40]	; (8085c6c <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 8085c42:	2500      	movs	r5, #0
 8085c44:	4698      	mov	r8, r3
			if (!SIT_used[tid]) {
 8085c46:	f813 1b01 	ldrb.w	r1, [r3], #1
 8085c4a:	b2ea      	uxtb	r2, r5
 8085c4c:	b949      	cbnz	r1, 8085c62 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x5e>
				SIT_id = tid;
 8085c4e:	7262      	strb	r2, [r4, #9]
				start_SIT(Period, scale);
 8085c50:	4631      	mov	r1, r6
 8085c52:	463a      	mov	r2, r7
 8085c54:	4620      	mov	r0, r4
 8085c56:	f7ff ff01 	bl	8085a5c <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 8085c5a:	2301      	movs	r3, #1
 8085c5c:	f808 3005 	strb.w	r3, [r8, r5]
		if (allocate_SIT(Period, scale, AUTO)) status = TIMER_SIT;		//255 means allocate from pool
 8085c60:	e7ea      	b.n	8085c38 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x34>
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 8085c62:	3501      	adds	r5, #1
 8085c64:	2d05      	cmp	r5, #5
 8085c66:	d1ee      	bne.n	8085c46 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x42>
		else status = TIMER_OFF;
 8085c68:	2300      	movs	r3, #0
 8085c6a:	e7e5      	b.n	8085c38 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x34>
 8085c6c:	20000acc 	.word	0x20000acc

08085c70 <_ZN13IntervalTimer3endEv>:
	if (status == TIMER_SIT) stop_SIT();
 8085c70:	7a03      	ldrb	r3, [r0, #8]
void IntervalTimer::end() {
 8085c72:	b510      	push	{r4, lr}
 8085c74:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 8085c76:	b10b      	cbz	r3, 8085c7c <_ZN13IntervalTimer3endEv+0xc>
 8085c78:	f7ff ff84 	bl	8085b84 <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 8085c7c:	2300      	movs	r3, #0
 8085c7e:	7223      	strb	r3, [r4, #8]
}
 8085c80:	bd10      	pop	{r4, pc}

08085c82 <_ZN13IntervalTimer15resetPeriod_SITEmb>:
// ------------------------------------------------------------
// Set new period for the SIT without
// removing the SIT.
// ------------------------------------------------------------
void IntervalTimer::resetPeriod_SIT(intPeriod newPeriod, bool scale)
{
 8085c82:	b410      	push	{r4}
	//TIM_TimeBaseInitTypeDef timerInitStructure;
	TIM_TypeDef* TIMx;
	intPeriod prescaler;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8085c84:	7a44      	ldrb	r4, [r0, #9]
 8085c86:	2c04      	cmp	r4, #4
 8085c88:	bf9e      	ittt	ls
 8085c8a:	02a3      	lslls	r3, r4, #10
 8085c8c:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8085c90:	f503 6380 	addls.w	r3, r3, #1024	; 0x400
		TIMx = TIM7;
		break;
#endif
	}

	switch (scale) {
 8085c94:	b94a      	cbnz	r2, 8085caa <_ZN13IntervalTimer15resetPeriod_SITEmb+0x28>
	case uSec:
		prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
 8085c96:	8842      	ldrh	r2, [r0, #2]
		scale = uSec;				// Default to microseconds
		prescaler = SIT_PRESCALERu;
		break;
	}

	TIMx->ARR = newPeriod;
 8085c98:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIMx->PSC = prescaler;
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8085c9a:	2101      	movs	r1, #1
	TIMx->PSC = prescaler;
 8085c9c:	b292      	uxth	r2, r2
 8085c9e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8085ca0:	8299      	strh	r1, [r3, #20]
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 8085ca2:	4618      	mov	r0, r3
}
 8085ca4:	bc10      	pop	{r4}
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 8085ca6:	f003 b8df 	b.w	8088e68 <TIM_ClearITPendingBit>
		prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 8085caa:	8882      	ldrh	r2, [r0, #4]
		break;
 8085cac:	e7f4      	b.n	8085c98 <_ZN13IntervalTimer15resetPeriod_SITEmb+0x16>
	...

08085cb0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8085cb0:	b508      	push	{r3, lr}
 8085cb2:	4b02      	ldr	r3, [pc, #8]	; (8085cbc <HAL_Pin_Map+0xc>)
 8085cb4:	681b      	ldr	r3, [r3, #0]
 8085cb6:	681b      	ldr	r3, [r3, #0]
 8085cb8:	9301      	str	r3, [sp, #4]
 8085cba:	bd08      	pop	{r3, pc}
 8085cbc:	080401b0 	.word	0x080401b0

08085cc0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8085cc0:	b508      	push	{r3, lr}
 8085cc2:	4b02      	ldr	r3, [pc, #8]	; (8085ccc <HAL_Validate_Pin_Function+0xc>)
 8085cc4:	681b      	ldr	r3, [r3, #0]
 8085cc6:	685b      	ldr	r3, [r3, #4]
 8085cc8:	9301      	str	r3, [sp, #4]
 8085cca:	bd08      	pop	{r3, pc}
 8085ccc:	080401b0 	.word	0x080401b0

08085cd0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8085cd0:	b508      	push	{r3, lr}
 8085cd2:	4b02      	ldr	r3, [pc, #8]	; (8085cdc <HAL_Pin_Mode+0xc>)
 8085cd4:	681b      	ldr	r3, [r3, #0]
 8085cd6:	689b      	ldr	r3, [r3, #8]
 8085cd8:	9301      	str	r3, [sp, #4]
 8085cda:	bd08      	pop	{r3, pc}
 8085cdc:	080401b0 	.word	0x080401b0

08085ce0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8085ce0:	b508      	push	{r3, lr}
 8085ce2:	4b02      	ldr	r3, [pc, #8]	; (8085cec <HAL_Get_Pin_Mode+0xc>)
 8085ce4:	681b      	ldr	r3, [r3, #0]
 8085ce6:	68db      	ldr	r3, [r3, #12]
 8085ce8:	9301      	str	r3, [sp, #4]
 8085cea:	bd08      	pop	{r3, pc}
 8085cec:	080401b0 	.word	0x080401b0

08085cf0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8085cf0:	b508      	push	{r3, lr}
 8085cf2:	4b02      	ldr	r3, [pc, #8]	; (8085cfc <HAL_GPIO_Write+0xc>)
 8085cf4:	681b      	ldr	r3, [r3, #0]
 8085cf6:	691b      	ldr	r3, [r3, #16]
 8085cf8:	9301      	str	r3, [sp, #4]
 8085cfa:	bd08      	pop	{r3, pc}
 8085cfc:	080401b0 	.word	0x080401b0

08085d00 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8085d00:	b508      	push	{r3, lr}
 8085d02:	4b02      	ldr	r3, [pc, #8]	; (8085d0c <HAL_Interrupts_Attach+0xc>)
 8085d04:	681b      	ldr	r3, [r3, #0]
 8085d06:	699b      	ldr	r3, [r3, #24]
 8085d08:	9301      	str	r3, [sp, #4]
 8085d0a:	bd08      	pop	{r3, pc}
 8085d0c:	080401b0 	.word	0x080401b0

08085d10 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8085d10:	b508      	push	{r3, lr}
 8085d12:	4b02      	ldr	r3, [pc, #8]	; (8085d1c <HAL_Interrupts_Detach+0xc>)
 8085d14:	681b      	ldr	r3, [r3, #0]
 8085d16:	69db      	ldr	r3, [r3, #28]
 8085d18:	9301      	str	r3, [sp, #4]
 8085d1a:	bd08      	pop	{r3, pc}
 8085d1c:	080401b0 	.word	0x080401b0

08085d20 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8085d20:	b508      	push	{r3, lr}
 8085d22:	4b02      	ldr	r3, [pc, #8]	; (8085d2c <hal_adc_read+0xc>)
 8085d24:	681b      	ldr	r3, [r3, #0]
 8085d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085d28:	9301      	str	r3, [sp, #4]
 8085d2a:	bd08      	pop	{r3, pc}
 8085d2c:	080401b0 	.word	0x080401b0

08085d30 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, hal_pwm_write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, hal_pwm_get_frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, hal_pwm_get_analog_value, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 8085d30:	b508      	push	{r3, lr}
 8085d32:	4b02      	ldr	r3, [pc, #8]	; (8085d3c <HAL_Set_System_Interrupt_Handler+0xc>)
 8085d34:	681b      	ldr	r3, [r3, #0]
 8085d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085d38:	9301      	str	r3, [sp, #4]
 8085d3a:	bd08      	pop	{r3, pc}
 8085d3c:	080401b0 	.word	0x080401b0

08085d40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8085d40:	b508      	push	{r3, lr}
 8085d42:	4b02      	ldr	r3, [pc, #8]	; (8085d4c <HAL_RNG_GetRandomNumber+0xc>)
 8085d44:	681b      	ldr	r3, [r3, #0]
 8085d46:	685b      	ldr	r3, [r3, #4]
 8085d48:	9301      	str	r3, [sp, #4]
 8085d4a:	bd08      	pop	{r3, pc}
 8085d4c:	0804019c 	.word	0x0804019c

08085d50 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8085d50:	b508      	push	{r3, lr}
 8085d52:	4b02      	ldr	r3, [pc, #8]	; (8085d5c <HAL_Delay_Milliseconds+0xc>)
 8085d54:	681b      	ldr	r3, [r3, #0]
 8085d56:	689b      	ldr	r3, [r3, #8]
 8085d58:	9301      	str	r3, [sp, #4]
 8085d5a:	bd08      	pop	{r3, pc}
 8085d5c:	0804019c 	.word	0x0804019c

08085d60 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8085d60:	b508      	push	{r3, lr}
 8085d62:	4b02      	ldr	r3, [pc, #8]	; (8085d6c <HAL_Delay_Microseconds+0xc>)
 8085d64:	681b      	ldr	r3, [r3, #0]
 8085d66:	68db      	ldr	r3, [r3, #12]
 8085d68:	9301      	str	r3, [sp, #4]
 8085d6a:	bd08      	pop	{r3, pc}
 8085d6c:	0804019c 	.word	0x0804019c

08085d70 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8085d70:	b508      	push	{r3, lr}
 8085d72:	4b02      	ldr	r3, [pc, #8]	; (8085d7c <HAL_Timer_Get_Micro_Seconds+0xc>)
 8085d74:	681b      	ldr	r3, [r3, #0]
 8085d76:	691b      	ldr	r3, [r3, #16]
 8085d78:	9301      	str	r3, [sp, #4]
 8085d7a:	bd08      	pop	{r3, pc}
 8085d7c:	0804019c 	.word	0x0804019c

08085d80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8085d80:	b508      	push	{r3, lr}
 8085d82:	4b02      	ldr	r3, [pc, #8]	; (8085d8c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8085d84:	681b      	ldr	r3, [r3, #0]
 8085d86:	695b      	ldr	r3, [r3, #20]
 8085d88:	9301      	str	r3, [sp, #4]
 8085d8a:	bd08      	pop	{r3, pc}
 8085d8c:	0804019c 	.word	0x0804019c

08085d90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8085d90:	b508      	push	{r3, lr}
 8085d92:	4b02      	ldr	r3, [pc, #8]	; (8085d9c <hal_rtc_time_is_valid+0xc>)
 8085d94:	681b      	ldr	r3, [r3, #0]
 8085d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8085d98:	9301      	str	r3, [sp, #4]
 8085d9a:	bd08      	pop	{r3, pc}
 8085d9c:	0804019c 	.word	0x0804019c

08085da0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8085da0:	b508      	push	{r3, lr}
 8085da2:	4b02      	ldr	r3, [pc, #8]	; (8085dac <hal_timer_millis+0xc>)
 8085da4:	681b      	ldr	r3, [r3, #0]
 8085da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8085da8:	9301      	str	r3, [sp, #4]
 8085daa:	bd08      	pop	{r3, pc}
 8085dac:	0804019c 	.word	0x0804019c

08085db0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8085db0:	b508      	push	{r3, lr}
 8085db2:	4b02      	ldr	r3, [pc, #8]	; (8085dbc <hal_rtc_get_time+0xc>)
 8085db4:	681b      	ldr	r3, [r3, #0]
 8085db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8085db8:	9301      	str	r3, [sp, #4]
 8085dba:	bd08      	pop	{r3, pc}
 8085dbc:	0804019c 	.word	0x0804019c

08085dc0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8085dc0:	b508      	push	{r3, lr}
 8085dc2:	4b02      	ldr	r3, [pc, #8]	; (8085dcc <os_thread_create+0xc>)
 8085dc4:	681b      	ldr	r3, [r3, #0]
 8085dc6:	685b      	ldr	r3, [r3, #4]
 8085dc8:	9301      	str	r3, [sp, #4]
 8085dca:	bd08      	pop	{r3, pc}
 8085dcc:	080401d0 	.word	0x080401d0

08085dd0 <os_thread_cleanup>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8085dd0:	b508      	push	{r3, lr}
 8085dd2:	4b02      	ldr	r3, [pc, #8]	; (8085ddc <os_thread_cleanup+0xc>)
 8085dd4:	681b      	ldr	r3, [r3, #0]
 8085dd6:	695b      	ldr	r3, [r3, #20]
 8085dd8:	9301      	str	r3, [sp, #4]
 8085dda:	bd08      	pop	{r3, pc}
 8085ddc:	080401d0 	.word	0x080401d0

08085de0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8085de0:	b508      	push	{r3, lr}
 8085de2:	4b02      	ldr	r3, [pc, #8]	; (8085dec <os_mutex_recursive_create+0xc>)
 8085de4:	681b      	ldr	r3, [r3, #0]
 8085de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085de8:	9301      	str	r3, [sp, #4]
 8085dea:	bd08      	pop	{r3, pc}
 8085dec:	080401d0 	.word	0x080401d0

08085df0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8085df0:	b508      	push	{r3, lr}
 8085df2:	4b02      	ldr	r3, [pc, #8]	; (8085dfc <os_mutex_recursive_destroy+0xc>)
 8085df4:	681b      	ldr	r3, [r3, #0]
 8085df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085df8:	9301      	str	r3, [sp, #4]
 8085dfa:	bd08      	pop	{r3, pc}
 8085dfc:	080401d0 	.word	0x080401d0

08085e00 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8085e00:	b508      	push	{r3, lr}
 8085e02:	4b02      	ldr	r3, [pc, #8]	; (8085e0c <os_mutex_recursive_lock+0xc>)
 8085e04:	681b      	ldr	r3, [r3, #0]
 8085e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085e08:	9301      	str	r3, [sp, #4]
 8085e0a:	bd08      	pop	{r3, pc}
 8085e0c:	080401d0 	.word	0x080401d0

08085e10 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8085e10:	b508      	push	{r3, lr}
 8085e12:	4b02      	ldr	r3, [pc, #8]	; (8085e1c <os_mutex_recursive_unlock+0xc>)
 8085e14:	681b      	ldr	r3, [r3, #0]
 8085e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085e18:	9301      	str	r3, [sp, #4]
 8085e1a:	bd08      	pop	{r3, pc}
 8085e1c:	080401d0 	.word	0x080401d0

08085e20 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8085e20:	b508      	push	{r3, lr}
 8085e22:	4b02      	ldr	r3, [pc, #8]	; (8085e2c <os_thread_exit+0xc>)
 8085e24:	681b      	ldr	r3, [r3, #0]
 8085e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085e28:	9301      	str	r3, [sp, #4]
 8085e2a:	bd08      	pop	{r3, pc}
 8085e2c:	080401d0 	.word	0x080401d0

08085e30 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8085e30:	b508      	push	{r3, lr}
 8085e32:	4b02      	ldr	r3, [pc, #8]	; (8085e3c <hal_usart_init+0xc>)
 8085e34:	681b      	ldr	r3, [r3, #0]
 8085e36:	699b      	ldr	r3, [r3, #24]
 8085e38:	9301      	str	r3, [sp, #4]
 8085e3a:	bd08      	pop	{r3, pc}
 8085e3c:	080401c4 	.word	0x080401c4

08085e40 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8085e40:	b508      	push	{r3, lr}
 8085e42:	4b02      	ldr	r3, [pc, #8]	; (8085e4c <hal_usart_write+0xc>)
 8085e44:	681b      	ldr	r3, [r3, #0]
 8085e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085e48:	9301      	str	r3, [sp, #4]
 8085e4a:	bd08      	pop	{r3, pc}
 8085e4c:	080401c4 	.word	0x080401c4

08085e50 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8085e50:	b508      	push	{r3, lr}
 8085e52:	4b02      	ldr	r3, [pc, #8]	; (8085e5c <hal_usart_available+0xc>)
 8085e54:	681b      	ldr	r3, [r3, #0]
 8085e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085e58:	9301      	str	r3, [sp, #4]
 8085e5a:	bd08      	pop	{r3, pc}
 8085e5c:	080401c4 	.word	0x080401c4

08085e60 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8085e60:	b508      	push	{r3, lr}
 8085e62:	4b02      	ldr	r3, [pc, #8]	; (8085e6c <hal_usart_read+0xc>)
 8085e64:	681b      	ldr	r3, [r3, #0]
 8085e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085e68:	9301      	str	r3, [sp, #4]
 8085e6a:	bd08      	pop	{r3, pc}
 8085e6c:	080401c4 	.word	0x080401c4

08085e70 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8085e70:	b508      	push	{r3, lr}
 8085e72:	4b02      	ldr	r3, [pc, #8]	; (8085e7c <hal_usart_peek+0xc>)
 8085e74:	681b      	ldr	r3, [r3, #0]
 8085e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085e78:	9301      	str	r3, [sp, #4]
 8085e7a:	bd08      	pop	{r3, pc}
 8085e7c:	080401c4 	.word	0x080401c4

08085e80 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8085e80:	b508      	push	{r3, lr}
 8085e82:	4b02      	ldr	r3, [pc, #8]	; (8085e8c <hal_usart_flush+0xc>)
 8085e84:	681b      	ldr	r3, [r3, #0]
 8085e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085e88:	9301      	str	r3, [sp, #4]
 8085e8a:	bd08      	pop	{r3, pc}
 8085e8c:	080401c4 	.word	0x080401c4

08085e90 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8085e90:	b508      	push	{r3, lr}
 8085e92:	4b02      	ldr	r3, [pc, #8]	; (8085e9c <hal_usart_is_enabled+0xc>)
 8085e94:	681b      	ldr	r3, [r3, #0]
 8085e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085e98:	9301      	str	r3, [sp, #4]
 8085e9a:	bd08      	pop	{r3, pc}
 8085e9c:	080401c4 	.word	0x080401c4

08085ea0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8085ea0:	b508      	push	{r3, lr}
 8085ea2:	4b02      	ldr	r3, [pc, #8]	; (8085eac <hal_usart_available_data_for_write+0xc>)
 8085ea4:	681b      	ldr	r3, [r3, #0]
 8085ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085ea8:	9301      	str	r3, [sp, #4]
 8085eaa:	bd08      	pop	{r3, pc}
 8085eac:	080401c4 	.word	0x080401c4

08085eb0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8085eb0:	b508      	push	{r3, lr}
 8085eb2:	4b02      	ldr	r3, [pc, #8]	; (8085ebc <hal_usart_begin_config+0xc>)
 8085eb4:	681b      	ldr	r3, [r3, #0]
 8085eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085eb8:	9301      	str	r3, [sp, #4]
 8085eba:	bd08      	pop	{r3, pc}
 8085ebc:	080401c4 	.word	0x080401c4

08085ec0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8085ec0:	b508      	push	{r3, lr}
 8085ec2:	4b02      	ldr	r3, [pc, #8]	; (8085ecc <hal_i2c_begin+0xc>)
 8085ec4:	681b      	ldr	r3, [r3, #0]
 8085ec6:	68db      	ldr	r3, [r3, #12]
 8085ec8:	9301      	str	r3, [sp, #4]
 8085eca:	bd08      	pop	{r3, pc}
 8085ecc:	080401ac 	.word	0x080401ac

08085ed0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8085ed0:	b508      	push	{r3, lr}
 8085ed2:	4b02      	ldr	r3, [pc, #8]	; (8085edc <hal_i2c_begin_transmission+0xc>)
 8085ed4:	681b      	ldr	r3, [r3, #0]
 8085ed6:	699b      	ldr	r3, [r3, #24]
 8085ed8:	9301      	str	r3, [sp, #4]
 8085eda:	bd08      	pop	{r3, pc}
 8085edc:	080401ac 	.word	0x080401ac

08085ee0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8085ee0:	b508      	push	{r3, lr}
 8085ee2:	4b02      	ldr	r3, [pc, #8]	; (8085eec <hal_i2c_end_transmission+0xc>)
 8085ee4:	681b      	ldr	r3, [r3, #0]
 8085ee6:	69db      	ldr	r3, [r3, #28]
 8085ee8:	9301      	str	r3, [sp, #4]
 8085eea:	bd08      	pop	{r3, pc}
 8085eec:	080401ac 	.word	0x080401ac

08085ef0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8085ef0:	b508      	push	{r3, lr}
 8085ef2:	4b02      	ldr	r3, [pc, #8]	; (8085efc <hal_i2c_write+0xc>)
 8085ef4:	681b      	ldr	r3, [r3, #0]
 8085ef6:	6a1b      	ldr	r3, [r3, #32]
 8085ef8:	9301      	str	r3, [sp, #4]
 8085efa:	bd08      	pop	{r3, pc}
 8085efc:	080401ac 	.word	0x080401ac

08085f00 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8085f00:	b508      	push	{r3, lr}
 8085f02:	4b02      	ldr	r3, [pc, #8]	; (8085f0c <hal_i2c_available+0xc>)
 8085f04:	681b      	ldr	r3, [r3, #0]
 8085f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085f08:	9301      	str	r3, [sp, #4]
 8085f0a:	bd08      	pop	{r3, pc}
 8085f0c:	080401ac 	.word	0x080401ac

08085f10 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8085f10:	b508      	push	{r3, lr}
 8085f12:	4b02      	ldr	r3, [pc, #8]	; (8085f1c <hal_i2c_read+0xc>)
 8085f14:	681b      	ldr	r3, [r3, #0]
 8085f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085f18:	9301      	str	r3, [sp, #4]
 8085f1a:	bd08      	pop	{r3, pc}
 8085f1c:	080401ac 	.word	0x080401ac

08085f20 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8085f20:	b508      	push	{r3, lr}
 8085f22:	4b02      	ldr	r3, [pc, #8]	; (8085f2c <hal_i2c_peek+0xc>)
 8085f24:	681b      	ldr	r3, [r3, #0]
 8085f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085f28:	9301      	str	r3, [sp, #4]
 8085f2a:	bd08      	pop	{r3, pc}
 8085f2c:	080401ac 	.word	0x080401ac

08085f30 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8085f30:	b508      	push	{r3, lr}
 8085f32:	4b02      	ldr	r3, [pc, #8]	; (8085f3c <hal_i2c_flush+0xc>)
 8085f34:	681b      	ldr	r3, [r3, #0]
 8085f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085f38:	9301      	str	r3, [sp, #4]
 8085f3a:	bd08      	pop	{r3, pc}
 8085f3c:	080401ac 	.word	0x080401ac

08085f40 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8085f40:	b508      	push	{r3, lr}
 8085f42:	4b02      	ldr	r3, [pc, #8]	; (8085f4c <hal_i2c_is_enabled+0xc>)
 8085f44:	681b      	ldr	r3, [r3, #0]
 8085f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085f48:	9301      	str	r3, [sp, #4]
 8085f4a:	bd08      	pop	{r3, pc}
 8085f4c:	080401ac 	.word	0x080401ac

08085f50 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8085f50:	b508      	push	{r3, lr}
 8085f52:	4b02      	ldr	r3, [pc, #8]	; (8085f5c <hal_i2c_init+0xc>)
 8085f54:	681b      	ldr	r3, [r3, #0]
 8085f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085f58:	9301      	str	r3, [sp, #4]
 8085f5a:	bd08      	pop	{r3, pc}
 8085f5c:	080401ac 	.word	0x080401ac

08085f60 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8085f60:	b508      	push	{r3, lr}
 8085f62:	4b02      	ldr	r3, [pc, #8]	; (8085f6c <hal_i2c_lock+0xc>)
 8085f64:	681b      	ldr	r3, [r3, #0]
 8085f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085f68:	9301      	str	r3, [sp, #4]
 8085f6a:	bd08      	pop	{r3, pc}
 8085f6c:	080401ac 	.word	0x080401ac

08085f70 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8085f70:	b508      	push	{r3, lr}
 8085f72:	4b02      	ldr	r3, [pc, #8]	; (8085f7c <hal_i2c_unlock+0xc>)
 8085f74:	681b      	ldr	r3, [r3, #0]
 8085f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8085f78:	9301      	str	r3, [sp, #4]
 8085f7a:	bd08      	pop	{r3, pc}
 8085f7c:	080401ac 	.word	0x080401ac

08085f80 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8085f80:	b508      	push	{r3, lr}
 8085f82:	4b02      	ldr	r3, [pc, #8]	; (8085f8c <hal_i2c_request_ex+0xc>)
 8085f84:	681b      	ldr	r3, [r3, #0]
 8085f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085f88:	9301      	str	r3, [sp, #4]
 8085f8a:	bd08      	pop	{r3, pc}
 8085f8c:	080401ac 	.word	0x080401ac

08085f90 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8085f90:	b508      	push	{r3, lr}
 8085f92:	4b02      	ldr	r3, [pc, #8]	; (8085f9c <socket_active_status+0xc>)
 8085f94:	681b      	ldr	r3, [r3, #0]
 8085f96:	681b      	ldr	r3, [r3, #0]
 8085f98:	9301      	str	r3, [sp, #4]
 8085f9a:	bd08      	pop	{r3, pc}
 8085f9c:	08060024 	.word	0x08060024

08085fa0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8085fa0:	b508      	push	{r3, lr}
 8085fa2:	4b02      	ldr	r3, [pc, #8]	; (8085fac <socket_handle_valid+0xc>)
 8085fa4:	681b      	ldr	r3, [r3, #0]
 8085fa6:	685b      	ldr	r3, [r3, #4]
 8085fa8:	9301      	str	r3, [sp, #4]
 8085faa:	bd08      	pop	{r3, pc}
 8085fac:	08060024 	.word	0x08060024

08085fb0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8085fb0:	b508      	push	{r3, lr}
 8085fb2:	4b02      	ldr	r3, [pc, #8]	; (8085fbc <socket_create+0xc>)
 8085fb4:	681b      	ldr	r3, [r3, #0]
 8085fb6:	689b      	ldr	r3, [r3, #8]
 8085fb8:	9301      	str	r3, [sp, #4]
 8085fba:	bd08      	pop	{r3, pc}
 8085fbc:	08060024 	.word	0x08060024

08085fc0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8085fc0:	b508      	push	{r3, lr}
 8085fc2:	4b02      	ldr	r3, [pc, #8]	; (8085fcc <socket_connect+0xc>)
 8085fc4:	681b      	ldr	r3, [r3, #0]
 8085fc6:	68db      	ldr	r3, [r3, #12]
 8085fc8:	9301      	str	r3, [sp, #4]
 8085fca:	bd08      	pop	{r3, pc}
 8085fcc:	08060024 	.word	0x08060024

08085fd0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8085fd0:	b508      	push	{r3, lr}
 8085fd2:	4b02      	ldr	r3, [pc, #8]	; (8085fdc <socket_receive+0xc>)
 8085fd4:	681b      	ldr	r3, [r3, #0]
 8085fd6:	691b      	ldr	r3, [r3, #16]
 8085fd8:	9301      	str	r3, [sp, #4]
 8085fda:	bd08      	pop	{r3, pc}
 8085fdc:	08060024 	.word	0x08060024

08085fe0 <socket_sendto>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 8085fe0:	b508      	push	{r3, lr}
 8085fe2:	4b02      	ldr	r3, [pc, #8]	; (8085fec <socket_sendto+0xc>)
 8085fe4:	681b      	ldr	r3, [r3, #0]
 8085fe6:	69db      	ldr	r3, [r3, #28]
 8085fe8:	9301      	str	r3, [sp, #4]
 8085fea:	bd08      	pop	{r3, pc}
 8085fec:	08060024 	.word	0x08060024

08085ff0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8085ff0:	b508      	push	{r3, lr}
 8085ff2:	4b02      	ldr	r3, [pc, #8]	; (8085ffc <socket_close+0xc>)
 8085ff4:	681b      	ldr	r3, [r3, #0]
 8085ff6:	6a1b      	ldr	r3, [r3, #32]
 8085ff8:	9301      	str	r3, [sp, #4]
 8085ffa:	bd08      	pop	{r3, pc}
 8085ffc:	08060024 	.word	0x08060024

08086000 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8086000:	b508      	push	{r3, lr}
 8086002:	4b02      	ldr	r3, [pc, #8]	; (808600c <socket_handle_invalid+0xc>)
 8086004:	681b      	ldr	r3, [r3, #0]
 8086006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086008:	9301      	str	r3, [sp, #4]
 808600a:	bd08      	pop	{r3, pc}
 808600c:	08060024 	.word	0x08060024

08086010 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 8086010:	b508      	push	{r3, lr}
 8086012:	4b02      	ldr	r3, [pc, #8]	; (808601c <socket_send_ex+0xc>)
 8086014:	681b      	ldr	r3, [r3, #0]
 8086016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8086018:	9301      	str	r3, [sp, #4]
 808601a:	bd08      	pop	{r3, pc}
 808601c:	08060024 	.word	0x08060024

08086020 <socket_receivefrom_ex>:
DYNALIB_FN(18, hal_socket, socket_receivefrom_ex, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*, system_tick_t, void*))
 8086020:	b508      	push	{r3, lr}
 8086022:	4b02      	ldr	r3, [pc, #8]	; (808602c <socket_receivefrom_ex+0xc>)
 8086024:	681b      	ldr	r3, [r3, #0]
 8086026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8086028:	9301      	str	r3, [sp, #4]
 808602a:	bd08      	pop	{r3, pc}
 808602c:	08060024 	.word	0x08060024

08086030 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8086030:	b508      	push	{r3, lr}
 8086032:	4b02      	ldr	r3, [pc, #8]	; (808603c <hal_spi_begin+0xc>)
 8086034:	681b      	ldr	r3, [r3, #0]
 8086036:	681b      	ldr	r3, [r3, #0]
 8086038:	9301      	str	r3, [sp, #4]
 808603a:	bd08      	pop	{r3, pc}
 808603c:	080401b4 	.word	0x080401b4

08086040 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 8086040:	b508      	push	{r3, lr}
 8086042:	4b02      	ldr	r3, [pc, #8]	; (808604c <hal_spi_transfer+0xc>)
 8086044:	681b      	ldr	r3, [r3, #0]
 8086046:	695b      	ldr	r3, [r3, #20]
 8086048:	9301      	str	r3, [sp, #4]
 808604a:	bd08      	pop	{r3, pc}
 808604c:	080401b4 	.word	0x080401b4

08086050 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8086050:	b508      	push	{r3, lr}
 8086052:	4b02      	ldr	r3, [pc, #8]	; (808605c <hal_spi_init+0xc>)
 8086054:	681b      	ldr	r3, [r3, #0]
 8086056:	69db      	ldr	r3, [r3, #28]
 8086058:	9301      	str	r3, [sp, #4]
 808605a:	bd08      	pop	{r3, pc}
 808605c:	080401b4 	.word	0x080401b4

08086060 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8086060:	b508      	push	{r3, lr}
 8086062:	4b02      	ldr	r3, [pc, #8]	; (808606c <hal_spi_is_enabled+0xc>)
 8086064:	681b      	ldr	r3, [r3, #0]
 8086066:	6a1b      	ldr	r3, [r3, #32]
 8086068:	9301      	str	r3, [sp, #4]
 808606a:	bd08      	pop	{r3, pc}
 808606c:	080401b4 	.word	0x080401b4

08086070 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8086070:	b508      	push	{r3, lr}
 8086072:	4b02      	ldr	r3, [pc, #8]	; (808607c <hal_spi_info+0xc>)
 8086074:	681b      	ldr	r3, [r3, #0]
 8086076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086078:	9301      	str	r3, [sp, #4]
 808607a:	bd08      	pop	{r3, pc}
 808607c:	080401b4 	.word	0x080401b4

08086080 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 8086080:	b508      	push	{r3, lr}
 8086082:	4b02      	ldr	r3, [pc, #8]	; (808608c <hal_spi_transfer_dma+0xc>)
 8086084:	681b      	ldr	r3, [r3, #0]
 8086086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086088:	9301      	str	r3, [sp, #4]
 808608a:	bd08      	pop	{r3, pc}
 808608c:	080401b4 	.word	0x080401b4

08086090 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 8086090:	b508      	push	{r3, lr}
 8086092:	4b02      	ldr	r3, [pc, #8]	; (808609c <hal_spi_transfer_dma_status+0xc>)
 8086094:	681b      	ldr	r3, [r3, #0]
 8086096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086098:	9301      	str	r3, [sp, #4]
 808609a:	bd08      	pop	{r3, pc}
 808609c:	080401b4 	.word	0x080401b4

080860a0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80860a0:	b508      	push	{r3, lr}
 80860a2:	4b02      	ldr	r3, [pc, #8]	; (80860ac <hal_spi_set_settings+0xc>)
 80860a4:	681b      	ldr	r3, [r3, #0]
 80860a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80860a8:	9301      	str	r3, [sp, #4]
 80860aa:	bd08      	pop	{r3, pc}
 80860ac:	080401b4 	.word	0x080401b4

080860b0 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80860b0:	b508      	push	{r3, lr}
 80860b2:	4b02      	ldr	r3, [pc, #8]	; (80860bc <HAL_NET_SetNetWatchDog+0xc>)
 80860b4:	681b      	ldr	r3, [r3, #0]
 80860b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80860b8:	9301      	str	r3, [sp, #4]
 80860ba:	bd08      	pop	{r3, pc}
 80860bc:	08060020 	.word	0x08060020

080860c0 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80860c0:	b508      	push	{r3, lr}
 80860c2:	4b02      	ldr	r3, [pc, #8]	; (80860cc <inet_gethostbyname+0xc>)
 80860c4:	681b      	ldr	r3, [r3, #0]
 80860c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80860c8:	9301      	str	r3, [sp, #4]
 80860ca:	bd08      	pop	{r3, pc}
 80860cc:	08060020 	.word	0x08060020

080860d0 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 80860d0:	b508      	push	{r3, lr}
 80860d2:	4b02      	ldr	r3, [pc, #8]	; (80860dc <cellular_signal+0xc>)
 80860d4:	681b      	ldr	r3, [r3, #0]
 80860d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80860d8:	9301      	str	r3, [sp, #4]
 80860da:	bd08      	pop	{r3, pc}
 80860dc:	08060020 	.word	0x08060020

080860e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80860e0:	b508      	push	{r3, lr}
 80860e2:	4b02      	ldr	r3, [pc, #8]	; (80860ec <HAL_USB_USART_Init+0xc>)
 80860e4:	681b      	ldr	r3, [r3, #0]
 80860e6:	681b      	ldr	r3, [r3, #0]
 80860e8:	9301      	str	r3, [sp, #4]
 80860ea:	bd08      	pop	{r3, pc}
 80860ec:	0806001c 	.word	0x0806001c

080860f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80860f0:	b508      	push	{r3, lr}
 80860f2:	4b02      	ldr	r3, [pc, #8]	; (80860fc <HAL_USB_USART_Begin+0xc>)
 80860f4:	681b      	ldr	r3, [r3, #0]
 80860f6:	685b      	ldr	r3, [r3, #4]
 80860f8:	9301      	str	r3, [sp, #4]
 80860fa:	bd08      	pop	{r3, pc}
 80860fc:	0806001c 	.word	0x0806001c

08086100 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8086100:	b508      	push	{r3, lr}
 8086102:	4b02      	ldr	r3, [pc, #8]	; (808610c <HAL_USB_USART_Available_Data+0xc>)
 8086104:	681b      	ldr	r3, [r3, #0]
 8086106:	691b      	ldr	r3, [r3, #16]
 8086108:	9301      	str	r3, [sp, #4]
 808610a:	bd08      	pop	{r3, pc}
 808610c:	0806001c 	.word	0x0806001c

08086110 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8086110:	b508      	push	{r3, lr}
 8086112:	4b02      	ldr	r3, [pc, #8]	; (808611c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8086114:	681b      	ldr	r3, [r3, #0]
 8086116:	695b      	ldr	r3, [r3, #20]
 8086118:	9301      	str	r3, [sp, #4]
 808611a:	bd08      	pop	{r3, pc}
 808611c:	0806001c 	.word	0x0806001c

08086120 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8086120:	b508      	push	{r3, lr}
 8086122:	4b02      	ldr	r3, [pc, #8]	; (808612c <HAL_USB_USART_Receive_Data+0xc>)
 8086124:	681b      	ldr	r3, [r3, #0]
 8086126:	699b      	ldr	r3, [r3, #24]
 8086128:	9301      	str	r3, [sp, #4]
 808612a:	bd08      	pop	{r3, pc}
 808612c:	0806001c 	.word	0x0806001c

08086130 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8086130:	b508      	push	{r3, lr}
 8086132:	4b02      	ldr	r3, [pc, #8]	; (808613c <HAL_USB_USART_Send_Data+0xc>)
 8086134:	681b      	ldr	r3, [r3, #0]
 8086136:	69db      	ldr	r3, [r3, #28]
 8086138:	9301      	str	r3, [sp, #4]
 808613a:	bd08      	pop	{r3, pc}
 808613c:	0806001c 	.word	0x0806001c

08086140 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8086140:	b508      	push	{r3, lr}
 8086142:	4b02      	ldr	r3, [pc, #8]	; (808614c <HAL_USB_USART_Flush_Data+0xc>)
 8086144:	681b      	ldr	r3, [r3, #0]
 8086146:	6a1b      	ldr	r3, [r3, #32]
 8086148:	9301      	str	r3, [sp, #4]
 808614a:	bd08      	pop	{r3, pc}
 808614c:	0806001c 	.word	0x0806001c

08086150 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 8086150:	b508      	push	{r3, lr}
 8086152:	4b02      	ldr	r3, [pc, #8]	; (808615c <HAL_USB_USART_Is_Connected+0xc>)
 8086154:	681b      	ldr	r3, [r3, #0]
 8086156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086158:	9301      	str	r3, [sp, #4]
 808615a:	bd08      	pop	{r3, pc}
 808615c:	0806001c 	.word	0x0806001c

08086160 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8086160:	b508      	push	{r3, lr}
 8086162:	4b02      	ldr	r3, [pc, #8]	; (808616c <panic_+0xc>)
 8086164:	681b      	ldr	r3, [r3, #0]
 8086166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8086168:	9301      	str	r3, [sp, #4]
 808616a:	bd08      	pop	{r3, pc}
 808616c:	080201a0 	.word	0x080201a0

08086170 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8086170:	b508      	push	{r3, lr}
 8086172:	4b02      	ldr	r3, [pc, #8]	; (808617c <log_message+0xc>)
 8086174:	681b      	ldr	r3, [r3, #0]
 8086176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8086178:	9301      	str	r3, [sp, #4]
 808617a:	bd08      	pop	{r3, pc}
 808617c:	080201a0 	.word	0x080201a0

08086180 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8086180:	b508      	push	{r3, lr}
 8086182:	4b02      	ldr	r3, [pc, #8]	; (808618c <log_message_v+0xc>)
 8086184:	681b      	ldr	r3, [r3, #0]
 8086186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8086188:	9301      	str	r3, [sp, #4]
 808618a:	bd08      	pop	{r3, pc}
 808618c:	080201a0 	.word	0x080201a0

08086190 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 8086190:	b508      	push	{r3, lr}
 8086192:	4b03      	ldr	r3, [pc, #12]	; (80861a0 <diag_get_source+0x10>)
 8086194:	681b      	ldr	r3, [r3, #0]
 8086196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 808619a:	9301      	str	r3, [sp, #4]
 808619c:	bd08      	pop	{r3, pc}
 808619e:	0000      	.short	0x0000
 80861a0:	080201a0 	.word	0x080201a0

080861a4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80861a4:	b508      	push	{r3, lr}
 80861a6:	4b02      	ldr	r3, [pc, #8]	; (80861b0 <system_mode+0xc>)
 80861a8:	681b      	ldr	r3, [r3, #0]
 80861aa:	681b      	ldr	r3, [r3, #0]
 80861ac:	9301      	str	r3, [sp, #4]
 80861ae:	bd08      	pop	{r3, pc}
 80861b0:	080401a4 	.word	0x080401a4

080861b4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80861b4:	b508      	push	{r3, lr}
 80861b6:	4b02      	ldr	r3, [pc, #8]	; (80861c0 <set_system_mode+0xc>)
 80861b8:	681b      	ldr	r3, [r3, #0]
 80861ba:	685b      	ldr	r3, [r3, #4]
 80861bc:	9301      	str	r3, [sp, #4]
 80861be:	bd08      	pop	{r3, pc}
 80861c0:	080401a4 	.word	0x080401a4

080861c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80861c4:	b508      	push	{r3, lr}
 80861c6:	4b02      	ldr	r3, [pc, #8]	; (80861d0 <system_delay_ms+0xc>)
 80861c8:	681b      	ldr	r3, [r3, #0]
 80861ca:	695b      	ldr	r3, [r3, #20]
 80861cc:	9301      	str	r3, [sp, #4]
 80861ce:	bd08      	pop	{r3, pc}
 80861d0:	080401a4 	.word	0x080401a4

080861d4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80861d4:	b508      	push	{r3, lr}
 80861d6:	4b02      	ldr	r3, [pc, #8]	; (80861e0 <system_sleep+0xc>)
 80861d8:	681b      	ldr	r3, [r3, #0]
 80861da:	699b      	ldr	r3, [r3, #24]
 80861dc:	9301      	str	r3, [sp, #4]
 80861de:	bd08      	pop	{r3, pc}
 80861e0:	080401a4 	.word	0x080401a4

080861e4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80861e4:	b508      	push	{r3, lr}
 80861e6:	4b02      	ldr	r3, [pc, #8]	; (80861f0 <application_thread_current+0xc>)
 80861e8:	681b      	ldr	r3, [r3, #0]
 80861ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80861ec:	9301      	str	r3, [sp, #4]
 80861ee:	bd08      	pop	{r3, pc}
 80861f0:	080401a4 	.word	0x080401a4

080861f4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80861f4:	b508      	push	{r3, lr}
 80861f6:	4b02      	ldr	r3, [pc, #8]	; (8086200 <application_thread_invoke+0xc>)
 80861f8:	681b      	ldr	r3, [r3, #0]
 80861fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80861fc:	9301      	str	r3, [sp, #4]
 80861fe:	bd08      	pop	{r3, pc}
 8086200:	080401a4 	.word	0x080401a4

08086204 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8086204:	b508      	push	{r3, lr}
 8086206:	4b02      	ldr	r3, [pc, #8]	; (8086210 <system_thread_get_state+0xc>)
 8086208:	681b      	ldr	r3, [r3, #0]
 808620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808620c:	9301      	str	r3, [sp, #4]
 808620e:	bd08      	pop	{r3, pc}
 8086210:	080401a4 	.word	0x080401a4

08086214 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8086214:	b508      	push	{r3, lr}
 8086216:	4b03      	ldr	r3, [pc, #12]	; (8086224 <system_ctrl_set_app_request_handler+0x10>)
 8086218:	681b      	ldr	r3, [r3, #0]
 808621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808621e:	9301      	str	r3, [sp, #4]
 8086220:	bd08      	pop	{r3, pc}
 8086222:	0000      	.short	0x0000
 8086224:	080401a4 	.word	0x080401a4

08086228 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8086228:	b508      	push	{r3, lr}
 808622a:	4b03      	ldr	r3, [pc, #12]	; (8086238 <system_ctrl_set_result+0x10>)
 808622c:	681b      	ldr	r3, [r3, #0]
 808622e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8086232:	9301      	str	r3, [sp, #4]
 8086234:	bd08      	pop	{r3, pc}
 8086236:	0000      	.short	0x0000
 8086238:	080401a4 	.word	0x080401a4

0808623c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 808623c:	b508      	push	{r3, lr}
 808623e:	4b03      	ldr	r3, [pc, #12]	; (808624c <system_power_management_set_config+0x10>)
 8086240:	681b      	ldr	r3, [r3, #0]
 8086242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8086246:	9301      	str	r3, [sp, #4]
 8086248:	bd08      	pop	{r3, pc}
 808624a:	0000      	.short	0x0000
 808624c:	080401a4 	.word	0x080401a4

08086250 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8086250:	b508      	push	{r3, lr}
 8086252:	4b03      	ldr	r3, [pc, #12]	; (8086260 <system_reset+0x10>)
 8086254:	681b      	ldr	r3, [r3, #0]
 8086256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808625a:	9301      	str	r3, [sp, #4]
 808625c:	bd08      	pop	{r3, pc}
 808625e:	0000      	.short	0x0000
 8086260:	080401a4 	.word	0x080401a4

08086264 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8086264:	b508      	push	{r3, lr}
 8086266:	4b02      	ldr	r3, [pc, #8]	; (8086270 <network_connect+0xc>)
 8086268:	681b      	ldr	r3, [r3, #0]
 808626a:	685b      	ldr	r3, [r3, #4]
 808626c:	9301      	str	r3, [sp, #4]
 808626e:	bd08      	pop	{r3, pc}
 8086270:	080401c8 	.word	0x080401c8

08086274 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8086274:	b508      	push	{r3, lr}
 8086276:	4b02      	ldr	r3, [pc, #8]	; (8086280 <network_connecting+0xc>)
 8086278:	681b      	ldr	r3, [r3, #0]
 808627a:	689b      	ldr	r3, [r3, #8]
 808627c:	9301      	str	r3, [sp, #4]
 808627e:	bd08      	pop	{r3, pc}
 8086280:	080401c8 	.word	0x080401c8

08086284 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8086284:	b508      	push	{r3, lr}
 8086286:	4b02      	ldr	r3, [pc, #8]	; (8086290 <network_disconnect+0xc>)
 8086288:	681b      	ldr	r3, [r3, #0]
 808628a:	68db      	ldr	r3, [r3, #12]
 808628c:	9301      	str	r3, [sp, #4]
 808628e:	bd08      	pop	{r3, pc}
 8086290:	080401c8 	.word	0x080401c8

08086294 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8086294:	b508      	push	{r3, lr}
 8086296:	4b02      	ldr	r3, [pc, #8]	; (80862a0 <network_ready+0xc>)
 8086298:	681b      	ldr	r3, [r3, #0]
 808629a:	691b      	ldr	r3, [r3, #16]
 808629c:	9301      	str	r3, [sp, #4]
 808629e:	bd08      	pop	{r3, pc}
 80862a0:	080401c8 	.word	0x080401c8

080862a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80862a4:	b508      	push	{r3, lr}
 80862a6:	4b02      	ldr	r3, [pc, #8]	; (80862b0 <network_on+0xc>)
 80862a8:	681b      	ldr	r3, [r3, #0]
 80862aa:	695b      	ldr	r3, [r3, #20]
 80862ac:	9301      	str	r3, [sp, #4]
 80862ae:	bd08      	pop	{r3, pc}
 80862b0:	080401c8 	.word	0x080401c8

080862b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80862b4:	b508      	push	{r3, lr}
 80862b6:	4b02      	ldr	r3, [pc, #8]	; (80862c0 <network_off+0xc>)
 80862b8:	681b      	ldr	r3, [r3, #0]
 80862ba:	699b      	ldr	r3, [r3, #24]
 80862bc:	9301      	str	r3, [sp, #4]
 80862be:	bd08      	pop	{r3, pc}
 80862c0:	080401c8 	.word	0x080401c8

080862c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80862c4:	b508      	push	{r3, lr}
 80862c6:	4b02      	ldr	r3, [pc, #8]	; (80862d0 <network_listen+0xc>)
 80862c8:	681b      	ldr	r3, [r3, #0]
 80862ca:	69db      	ldr	r3, [r3, #28]
 80862cc:	9301      	str	r3, [sp, #4]
 80862ce:	bd08      	pop	{r3, pc}
 80862d0:	080401c8 	.word	0x080401c8

080862d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80862d4:	b508      	push	{r3, lr}
 80862d6:	4b02      	ldr	r3, [pc, #8]	; (80862e0 <network_listening+0xc>)
 80862d8:	681b      	ldr	r3, [r3, #0]
 80862da:	6a1b      	ldr	r3, [r3, #32]
 80862dc:	9301      	str	r3, [sp, #4]
 80862de:	bd08      	pop	{r3, pc}
 80862e0:	080401c8 	.word	0x080401c8

080862e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80862e4:	b508      	push	{r3, lr}
 80862e6:	4b02      	ldr	r3, [pc, #8]	; (80862f0 <network_set_listen_timeout+0xc>)
 80862e8:	681b      	ldr	r3, [r3, #0]
 80862ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80862ec:	9301      	str	r3, [sp, #4]
 80862ee:	bd08      	pop	{r3, pc}
 80862f0:	080401c8 	.word	0x080401c8

080862f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80862f4:	b508      	push	{r3, lr}
 80862f6:	4b02      	ldr	r3, [pc, #8]	; (8086300 <network_get_listen_timeout+0xc>)
 80862f8:	681b      	ldr	r3, [r3, #0]
 80862fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80862fc:	9301      	str	r3, [sp, #4]
 80862fe:	bd08      	pop	{r3, pc}
 8086300:	080401c8 	.word	0x080401c8

08086304 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8086304:	b508      	push	{r3, lr}
 8086306:	4b02      	ldr	r3, [pc, #8]	; (8086310 <spark_function+0xc>)
 8086308:	681b      	ldr	r3, [r3, #0]
 808630a:	685b      	ldr	r3, [r3, #4]
 808630c:	9301      	str	r3, [sp, #4]
 808630e:	bd08      	pop	{r3, pc}
 8086310:	080401cc 	.word	0x080401cc

08086314 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8086314:	b508      	push	{r3, lr}
 8086316:	4b02      	ldr	r3, [pc, #8]	; (8086320 <spark_process+0xc>)
 8086318:	681b      	ldr	r3, [r3, #0]
 808631a:	689b      	ldr	r3, [r3, #8]
 808631c:	9301      	str	r3, [sp, #4]
 808631e:	bd08      	pop	{r3, pc}
 8086320:	080401cc 	.word	0x080401cc

08086324 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8086324:	b508      	push	{r3, lr}
 8086326:	4b02      	ldr	r3, [pc, #8]	; (8086330 <spark_cloud_flag_connect+0xc>)
 8086328:	681b      	ldr	r3, [r3, #0]
 808632a:	68db      	ldr	r3, [r3, #12]
 808632c:	9301      	str	r3, [sp, #4]
 808632e:	bd08      	pop	{r3, pc}
 8086330:	080401cc 	.word	0x080401cc

08086334 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8086334:	b508      	push	{r3, lr}
 8086336:	4b02      	ldr	r3, [pc, #8]	; (8086340 <spark_cloud_flag_connected+0xc>)
 8086338:	681b      	ldr	r3, [r3, #0]
 808633a:	695b      	ldr	r3, [r3, #20]
 808633c:	9301      	str	r3, [sp, #4]
 808633e:	bd08      	pop	{r3, pc}
 8086340:	080401cc 	.word	0x080401cc

08086344 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8086344:	b508      	push	{r3, lr}
 8086346:	4b02      	ldr	r3, [pc, #8]	; (8086350 <spark_deviceID+0xc>)
 8086348:	681b      	ldr	r3, [r3, #0]
 808634a:	69db      	ldr	r3, [r3, #28]
 808634c:	9301      	str	r3, [sp, #4]
 808634e:	bd08      	pop	{r3, pc}
 8086350:	080401cc 	.word	0x080401cc

08086354 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8086354:	b508      	push	{r3, lr}
 8086356:	4b02      	ldr	r3, [pc, #8]	; (8086360 <spark_send_event+0xc>)
 8086358:	681b      	ldr	r3, [r3, #0]
 808635a:	6a1b      	ldr	r3, [r3, #32]
 808635c:	9301      	str	r3, [sp, #4]
 808635e:	bd08      	pop	{r3, pc}
 8086360:	080401cc 	.word	0x080401cc

08086364 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8086364:	b508      	push	{r3, lr}
 8086366:	4b02      	ldr	r3, [pc, #8]	; (8086370 <spark_sync_time_pending+0xc>)
 8086368:	681b      	ldr	r3, [r3, #0]
 808636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808636c:	9301      	str	r3, [sp, #4]
 808636e:	bd08      	pop	{r3, pc}
 8086370:	080401cc 	.word	0x080401cc

08086374 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8086374:	b508      	push	{r3, lr}
 8086376:	4b02      	ldr	r3, [pc, #8]	; (8086380 <spark_set_random_seed_from_cloud_handler+0xc>)
 8086378:	681b      	ldr	r3, [r3, #0]
 808637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808637c:	9301      	str	r3, [sp, #4]
 808637e:	bd08      	pop	{r3, pc}
 8086380:	080401cc 	.word	0x080401cc

08086384 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8086384:	b508      	push	{r3, lr}
 8086386:	4b02      	ldr	r3, [pc, #8]	; (8086390 <malloc+0xc>)
 8086388:	681b      	ldr	r3, [r3, #0]
 808638a:	681b      	ldr	r3, [r3, #0]
 808638c:	9301      	str	r3, [sp, #4]
 808638e:	bd08      	pop	{r3, pc}
 8086390:	080401a0 	.word	0x080401a0

08086394 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8086394:	b508      	push	{r3, lr}
 8086396:	4b02      	ldr	r3, [pc, #8]	; (80863a0 <free+0xc>)
 8086398:	681b      	ldr	r3, [r3, #0]
 808639a:	685b      	ldr	r3, [r3, #4]
 808639c:	9301      	str	r3, [sp, #4]
 808639e:	bd08      	pop	{r3, pc}
 80863a0:	080401a0 	.word	0x080401a0

080863a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80863a4:	b508      	push	{r3, lr}
 80863a6:	4b02      	ldr	r3, [pc, #8]	; (80863b0 <realloc+0xc>)
 80863a8:	681b      	ldr	r3, [r3, #0]
 80863aa:	689b      	ldr	r3, [r3, #8]
 80863ac:	9301      	str	r3, [sp, #4]
 80863ae:	bd08      	pop	{r3, pc}
 80863b0:	080401a0 	.word	0x080401a0

080863b4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80863b4:	b508      	push	{r3, lr}
 80863b6:	4b02      	ldr	r3, [pc, #8]	; (80863c0 <sprintf+0xc>)
 80863b8:	681b      	ldr	r3, [r3, #0]
 80863ba:	68db      	ldr	r3, [r3, #12]
 80863bc:	9301      	str	r3, [sp, #4]
 80863be:	bd08      	pop	{r3, pc}
 80863c0:	080401a0 	.word	0x080401a0

080863c4 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80863c4:	b508      	push	{r3, lr}
 80863c6:	4b02      	ldr	r3, [pc, #8]	; (80863d0 <siprintf+0xc>)
 80863c8:	681b      	ldr	r3, [r3, #0]
 80863ca:	691b      	ldr	r3, [r3, #16]
 80863cc:	9301      	str	r3, [sp, #4]
 80863ce:	bd08      	pop	{r3, pc}
 80863d0:	080401a0 	.word	0x080401a0

080863d4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80863d4:	b508      	push	{r3, lr}
 80863d6:	4b02      	ldr	r3, [pc, #8]	; (80863e0 <snprintf+0xc>)
 80863d8:	681b      	ldr	r3, [r3, #0]
 80863da:	69db      	ldr	r3, [r3, #28]
 80863dc:	9301      	str	r3, [sp, #4]
 80863de:	bd08      	pop	{r3, pc}
 80863e0:	080401a0 	.word	0x080401a0

080863e4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80863e4:	b508      	push	{r3, lr}
 80863e6:	4b02      	ldr	r3, [pc, #8]	; (80863f0 <vsnprintf+0xc>)
 80863e8:	681b      	ldr	r3, [r3, #0]
 80863ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80863ec:	9301      	str	r3, [sp, #4]
 80863ee:	bd08      	pop	{r3, pc}
 80863f0:	080401a0 	.word	0x080401a0

080863f4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80863f4:	b508      	push	{r3, lr}
 80863f6:	4b02      	ldr	r3, [pc, #8]	; (8086400 <abort+0xc>)
 80863f8:	681b      	ldr	r3, [r3, #0]
 80863fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80863fc:	9301      	str	r3, [sp, #4]
 80863fe:	bd08      	pop	{r3, pc}
 8086400:	080401a0 	.word	0x080401a0

08086404 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8086404:	b508      	push	{r3, lr}
 8086406:	4b02      	ldr	r3, [pc, #8]	; (8086410 <_malloc_r+0xc>)
 8086408:	681b      	ldr	r3, [r3, #0]
 808640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808640c:	9301      	str	r3, [sp, #4]
 808640e:	bd08      	pop	{r3, pc}
 8086410:	080401a0 	.word	0x080401a0

08086414 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8086414:	b508      	push	{r3, lr}
 8086416:	4b02      	ldr	r3, [pc, #8]	; (8086420 <newlib_impure_ptr_callback+0xc>)
 8086418:	681b      	ldr	r3, [r3, #0]
 808641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808641c:	9301      	str	r3, [sp, #4]
 808641e:	bd08      	pop	{r3, pc}
 8086420:	080401a0 	.word	0x080401a0

08086424 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8086424:	b508      	push	{r3, lr}
            return &Wire3;
 8086426:	f002 fe53 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808642a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808642e:	f002 bb2e 	b.w	8088a8e <_ZN7TwoWire4lockEv>

08086432 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8086432:	b510      	push	{r4, lr}
 8086434:	4604      	mov	r4, r0
    lock_(_lock)
 8086436:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8086438:	b109      	cbz	r1, 808643e <_ZN4PMICC1Eb+0xc>
        lock();
 808643a:	f7ff fff3 	bl	8086424 <_ZN4PMIC4lockEv.constprop.0>
}
 808643e:	4620      	mov	r0, r4
 8086440:	bd10      	pop	{r4, pc}

08086442 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8086442:	b508      	push	{r3, lr}
            return &Wire3;
 8086444:	f002 fe44 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8086448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 808644c:	f002 bb28 	b.w	8088aa0 <_ZN7TwoWire6unlockEv>

08086450 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 8086450:	b510      	push	{r4, lr}
    if (lock_) {
 8086452:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8086454:	4604      	mov	r4, r0
    if (lock_) {
 8086456:	b10b      	cbz	r3, 808645c <_ZN4PMICD1Ev+0xc>
        unlock();
 8086458:	f7ff fff3 	bl	8086442 <_ZN4PMIC6unlockEv>
}
 808645c:	4620      	mov	r0, r4
 808645e:	bd10      	pop	{r4, pc}

08086460 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8086460:	b510      	push	{r4, lr}
 8086462:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8086464:	6800      	ldr	r0, [r0, #0]
 8086466:	f7ff ffec 	bl	8086442 <_ZN4PMIC6unlockEv>
 808646a:	4620      	mov	r0, r4
 808646c:	bd10      	pop	{r4, pc}

0808646e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808646e:	b530      	push	{r4, r5, lr}
 8086470:	b087      	sub	sp, #28
 8086472:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086474:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8086476:	f7ff ffd5 	bl	8086424 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808647a:	236b      	movs	r3, #107	; 0x6b
 808647c:	f88d 3008 	strb.w	r3, [sp, #8]
 8086480:	2300      	movs	r3, #0
 8086482:	2401      	movs	r4, #1
 8086484:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8086486:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8086488:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 808648c:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808648e:	f002 fe1f 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8086492:	a902      	add	r1, sp, #8
 8086494:	f002 fadc 	bl	8088a50 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8086498:	f002 fe1a 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 808649c:	6803      	ldr	r3, [r0, #0]
 808649e:	4629      	mov	r1, r5
 80864a0:	689b      	ldr	r3, [r3, #8]
 80864a2:	4798      	blx	r3
            return &Wire3;
 80864a4:	f002 fe14 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 80864a8:	4621      	mov	r1, r4
 80864aa:	f002 fae9 	bl	8088a80 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 80864ae:	9403      	str	r4, [sp, #12]
            return &Wire3;
 80864b0:	f002 fe0e 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 80864b4:	a902      	add	r1, sp, #8
 80864b6:	f002 fa9b 	bl	80889f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 80864ba:	f002 fe09 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 80864be:	6803      	ldr	r3, [r0, #0]
 80864c0:	695b      	ldr	r3, [r3, #20]
 80864c2:	4798      	blx	r3
 80864c4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 80864c6:	a801      	add	r0, sp, #4
 80864c8:	f7ff ffca 	bl	8086460 <_ZNSt10lock_guardI4PMICED1Ev>
}
 80864cc:	b2e0      	uxtb	r0, r4
 80864ce:	b007      	add	sp, #28
 80864d0:	bd30      	pop	{r4, r5, pc}

080864d2 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 80864d2:	2100      	movs	r1, #0
 80864d4:	f7ff bfcb 	b.w	808646e <_ZN4PMIC12readRegisterEh>

080864d8 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 80864d8:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 80864da:	f7ff fffa 	bl	80864d2 <_ZN4PMIC23readInputSourceRegisterEv>
}
 80864de:	4b03      	ldr	r3, [pc, #12]	; (80864ec <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 80864e0:	f000 0007 	and.w	r0, r0, #7
}
 80864e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80864e8:	bd08      	pop	{r3, pc}
 80864ea:	bf00      	nop
 80864ec:	0808d0bc 	.word	0x0808d0bc

080864f0 <_ZN4PMIC21getChargeCurrentValueEv>:
    uint8_t ccr = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 80864f0:	2102      	movs	r1, #2
uint16_t PMIC::getChargeCurrentValue(void) {
 80864f2:	b508      	push	{r3, lr}
    uint8_t ccr = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 80864f4:	f7ff ffbb 	bl	808646e <_ZN4PMIC12readRegisterEh>
    uint16_t v = (((uint16_t)ccr >> 2) & 0b111111) << 6;
 80864f8:	f3c0 0087 	ubfx	r0, r0, #2, #8
 80864fc:	0180      	lsls	r0, r0, #6
}
 80864fe:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8086502:	bd08      	pop	{r3, pc}

08086504 <_ZN4PMIC16getChargeVoltageEv>:
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8086504:	2104      	movs	r1, #4
 8086506:	f7ff bfb2 	b.w	808646e <_ZN4PMIC12readRegisterEh>

0808650a <_ZN4PMIC21getChargeVoltageValueEv>:
uint16_t PMIC::getChargeVoltageValue() {
 808650a:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
 808650c:	f7ff fffa 	bl	8086504 <_ZN4PMIC16getChargeVoltageEv>
 8086510:	2302      	movs	r3, #2
    unsigned v = 3504;
 8086512:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    unsigned baseVoltage = 16;
 8086516:	2110      	movs	r1, #16
        byte b = (raw >> (i + 2)) & 0x01;
 8086518:	fa40 f403 	asr.w	r4, r0, r3
 808651c:	3301      	adds	r3, #1
        v += ((unsigned)b) * baseVoltage;
 808651e:	f004 0401 	and.w	r4, r4, #1
    for (unsigned i = 0; i < 6; i++) {
 8086522:	2b08      	cmp	r3, #8
        v += ((unsigned)b) * baseVoltage;
 8086524:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
 8086528:	ea4f 0141 	mov.w	r1, r1, lsl #1
    for (unsigned i = 0; i < 6; i++) {
 808652c:	d1f4      	bne.n	8086518 <_ZN4PMIC21getChargeVoltageValueEv+0xe>
}
 808652e:	b290      	uxth	r0, r2
 8086530:	bd10      	pop	{r4, pc}

08086532 <_ZN4PMIC20getInputVoltageLimitEv>:
uint16_t PMIC::getInputVoltageLimit(void) {
 8086532:	b513      	push	{r0, r1, r4, lr}
 8086534:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086536:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8086538:	f7ff ff74 	bl	8086424 <_ZN4PMIC4lockEv.constprop.0>
    uint8_t isr = readRegister(INPUT_SOURCE_REGISTER);
 808653c:	2100      	movs	r1, #0
 808653e:	4620      	mov	r0, r4
 8086540:	f7ff ff95 	bl	808646e <_ZN4PMIC12readRegisterEh>
    isr = (isr >> 3) & 0b1111;
 8086544:	f3c0 04c7 	ubfx	r4, r0, #3, #8
    std::lock_guard<PMIC> l(*this);
 8086548:	a801      	add	r0, sp, #4
 808654a:	f7ff ff89 	bl	8086460 <_ZNSt10lock_guardI4PMICED1Ev>
    return baseValue + isr * 80;
 808654e:	f004 000f 	and.w	r0, r4, #15
 8086552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8086556:	0100      	lsls	r0, r0, #4
}
 8086558:	f600 7028 	addw	r0, r0, #3880	; 0xf28
 808655c:	b002      	add	sp, #8
 808655e:	bd10      	pop	{r4, pc}

08086560 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 8086560:	b570      	push	{r4, r5, r6, lr}
 8086562:	b086      	sub	sp, #24
 8086564:	4614      	mov	r4, r2
 8086566:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086568:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808656a:	f7ff ff5b 	bl	8086424 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808656e:	236b      	movs	r3, #107	; 0x6b
 8086570:	f88d 3008 	strb.w	r3, [sp, #8]
 8086574:	2300      	movs	r3, #0
 8086576:	2601      	movs	r6, #1
 8086578:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 808657a:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808657c:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 8086580:	9305      	str	r3, [sp, #20]
            return &Wire3;
 8086582:	f002 fda5 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8086586:	a902      	add	r1, sp, #8
 8086588:	f002 fa62 	bl	8088a50 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808658c:	f002 fda0 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 8086590:	6803      	ldr	r3, [r0, #0]
 8086592:	4629      	mov	r1, r5
 8086594:	689b      	ldr	r3, [r3, #8]
 8086596:	4798      	blx	r3
            return &Wire3;
 8086598:	f002 fd9a 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 808659c:	6803      	ldr	r3, [r0, #0]
 808659e:	4621      	mov	r1, r4
 80865a0:	689b      	ldr	r3, [r3, #8]
 80865a2:	4798      	blx	r3
            return &Wire3;
 80865a4:	f002 fd94 	bl	80890d0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 80865a8:	4631      	mov	r1, r6
 80865aa:	f002 fa69 	bl	8088a80 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 80865ae:	a801      	add	r0, sp, #4
 80865b0:	f7ff ff56 	bl	8086460 <_ZNSt10lock_guardI4PMICED1Ev>
}
 80865b4:	b006      	add	sp, #24
 80865b6:	bd70      	pop	{r4, r5, r6, pc}

080865b8 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
 80865b8:	b513      	push	{r0, r1, r4, lr}
 80865ba:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80865bc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80865be:	f7ff ff31 	bl	8086424 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 80865c2:	2101      	movs	r1, #1
 80865c4:	4620      	mov	r0, r4
 80865c6:	f7ff ff52 	bl	808646e <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
 80865ca:	2101      	movs	r1, #1
 80865cc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
 80865d0:	4620      	mov	r0, r4
 80865d2:	f7ff ffc5 	bl	8086560 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 80865d6:	a801      	add	r0, sp, #4
 80865d8:	f7ff ff42 	bl	8086460 <_ZNSt10lock_guardI4PMICED1Ev>
}
 80865dc:	2001      	movs	r0, #1
 80865de:	b002      	add	sp, #8
 80865e0:	bd10      	pop	{r4, pc}

080865e2 <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
 80865e2:	b513      	push	{r0, r1, r4, lr}
 80865e4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80865e6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80865e8:	f7ff ff1c 	bl	8086424 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 80865ec:	2107      	movs	r1, #7
 80865ee:	4620      	mov	r0, r4
 80865f0:	f7ff ff3d 	bl	808646e <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
 80865f4:	f040 0220 	orr.w	r2, r0, #32
 80865f8:	2107      	movs	r1, #7
 80865fa:	4620      	mov	r0, r4
 80865fc:	b2d2      	uxtb	r2, r2
 80865fe:	f7ff ffaf 	bl	8086560 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8086602:	a801      	add	r0, sp, #4
 8086604:	f7ff ff2c 	bl	8086460 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8086608:	2001      	movs	r0, #1
 808660a:	b002      	add	sp, #8
 808660c:	bd10      	pop	{r4, pc}

0808660e <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808660e:	6880      	ldr	r0, [r0, #8]
 8086610:	f7ff bbfe 	b.w	8085e10 <os_mutex_recursive_unlock>

08086614 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8086614:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8086616:	2600      	movs	r6, #0
 8086618:	4604      	mov	r4, r0
 808661a:	460d      	mov	r5, r1
 808661c:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8086620:	f7ff fbde 	bl	8085de0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8086624:	4628      	mov	r0, r5
    _spi = spi;
 8086626:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8086628:	f7ff fd12 	bl	8086050 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808662c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808662e:	6066      	str	r6, [r4, #4]
}
 8086630:	bd70      	pop	{r4, r5, r6, pc}

08086632 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8086632:	b510      	push	{r4, lr}
 8086634:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 8086636:	6880      	ldr	r0, [r0, #8]
 8086638:	f7ff fbe2 	bl	8085e00 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 808663c:	7820      	ldrb	r0, [r4, #0]
 808663e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8086642:	f7ff fcf5 	bl	8086030 <hal_spi_begin>
        unlock();
 8086646:	4620      	mov	r0, r4
 8086648:	f7ff ffe1 	bl	808660e <_ZN8SPIClass6unlockEv>
    }
}
 808664c:	bd10      	pop	{r4, pc}

0808664e <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 808664e:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 8086650:	f7ff ffdd 	bl	808660e <_ZN8SPIClass6unlockEv>
}
 8086654:	bd08      	pop	{r3, pc}
	...

08086658 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8086658:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808665a:	2400      	movs	r4, #0
 808665c:	0840      	lsrs	r0, r0, #1
 808665e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8086660:	6818      	ldr	r0, [r3, #0]
 8086662:	b2e5      	uxtb	r5, r4
 8086664:	4288      	cmp	r0, r1
 8086666:	d906      	bls.n	8086676 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8086668:	3401      	adds	r4, #1
 808666a:	2c08      	cmp	r4, #8
 808666c:	d002      	beq.n	8086674 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 808666e:	0840      	lsrs	r0, r0, #1
 8086670:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8086672:	e7f5      	b.n	8086660 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8086674:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 8086676:	4b02      	ldr	r3, [pc, #8]	; (8086680 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8086678:	5d5b      	ldrb	r3, [r3, r5]
 808667a:	7013      	strb	r3, [r2, #0]
}
 808667c:	bd30      	pop	{r4, r5, pc}
 808667e:	bf00      	nop
 8086680:	0808d0cc 	.word	0x0808d0cc

08086684 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 8086684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086688:	4606      	mov	r6, r0
 808668a:	b08f      	sub	sp, #60	; 0x3c
 808668c:	6880      	ldr	r0, [r0, #8]
 808668e:	460c      	mov	r4, r1
 8086690:	f7ff fbb6 	bl	8085e00 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 8086694:	2214      	movs	r2, #20
 8086696:	2100      	movs	r1, #0
 8086698:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 808669a:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 808669c:	f003 ffc4 	bl	808a628 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80866a0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80866a2:	2200      	movs	r2, #0
 80866a4:	4628      	mov	r0, r5
 80866a6:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80866a8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80866ac:	f7ff fce0 	bl	8086070 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80866b0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80866b4:	b113      	cbz	r3, 80866bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80866b6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80866ba:	b155      	cbz	r5, 80866d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80866bc:	2700      	movs	r7, #0
 80866be:	2501      	movs	r5, #1
 80866c0:	46b9      	mov	r9, r7
 80866c2:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80866c4:	7923      	ldrb	r3, [r4, #4]
 80866c6:	b15d      	cbz	r5, 80866e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80866c8:	b1c3      	cbz	r3, 80866fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80866ca:	2000      	movs	r0, #0
 80866cc:	b00f      	add	sp, #60	; 0x3c
 80866ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80866d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80866d6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80866da:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80866de:	e7f1      	b.n	80866c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80866e0:	2b00      	cmp	r3, #0
 80866e2:	d135      	bne.n	8086750 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80866e4:	68a3      	ldr	r3, [r4, #8]
 80866e6:	4543      	cmp	r3, r8
 80866e8:	d108      	bne.n	80866fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80866ea:	f88d 9020 	strb.w	r9, [sp, #32]
 80866ee:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80866f2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80866f6:	89a3      	ldrh	r3, [r4, #12]
 80866f8:	429a      	cmp	r2, r3
 80866fa:	d0e6      	beq.n	80866ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80866fc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80866fe:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 8086700:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 8086704:	980a      	ldr	r0, [sp, #40]	; 0x28
 8086706:	ab04      	add	r3, sp, #16
 8086708:	f10d 020f 	add.w	r2, sp, #15
 808670c:	f7ff ffa4 	bl	8086658 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 8086710:	7921      	ldrb	r1, [r4, #4]
 8086712:	b985      	cbnz	r5, 8086736 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 8086714:	b989      	cbnz	r1, 808673a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 8086716:	68a3      	ldr	r3, [r4, #8]
 8086718:	4543      	cmp	r3, r8
 808671a:	d30e      	bcc.n	808673a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 808671c:	f88d 9020 	strb.w	r9, [sp, #32]
 8086720:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8086724:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8086728:	89a3      	ldrh	r3, [r4, #12]
 808672a:	429a      	cmp	r2, r3
 808672c:	d105      	bne.n	808673a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 808672e:	9b04      	ldr	r3, [sp, #16]
 8086730:	4543      	cmp	r3, r8
 8086732:	d102      	bne.n	808673a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 8086734:	e7c9      	b.n	80866ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 8086736:	2900      	cmp	r1, #0
 8086738:	d1f9      	bne.n	808672e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 808673a:	2300      	movs	r3, #0
 808673c:	9301      	str	r3, [sp, #4]
 808673e:	7b63      	ldrb	r3, [r4, #13]
 8086740:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8086744:	9300      	str	r3, [sp, #0]
 8086746:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8086748:	7830      	ldrb	r0, [r6, #0]
 808674a:	f7ff fca9 	bl	80860a0 <hal_spi_set_settings>
  virtual ~SPISettings() {
 808674e:	e7bc      	b.n	80866ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
 8086750:	462b      	mov	r3, r5
 8086752:	462a      	mov	r2, r5
 8086754:	2101      	movs	r1, #1
 8086756:	e9cd 5500 	strd	r5, r5, [sp]
 808675a:	e7f5      	b.n	8086748 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

0808675c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 808675c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 808675e:	7800      	ldrb	r0, [r0, #0]
 8086760:	f7ff fc6e 	bl	8086040 <hal_spi_transfer>
}
 8086764:	b2c0      	uxtb	r0, r0
 8086766:	bd08      	pop	{r3, pc}

08086768 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8086768:	b530      	push	{r4, r5, lr}
 808676a:	b087      	sub	sp, #28
 808676c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808676e:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 8086770:	9500      	str	r5, [sp, #0]
 8086772:	7800      	ldrb	r0, [r0, #0]
 8086774:	f7ff fc84 	bl	8086080 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 8086778:	b93d      	cbnz	r5, 808678a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808677a:	7820      	ldrb	r0, [r4, #0]
 808677c:	a902      	add	r1, sp, #8
 808677e:	f7ff fc87 	bl	8086090 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 8086782:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8086786:	07db      	lsls	r3, r3, #31
 8086788:	d4f7      	bmi.n	808677a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 808678a:	b007      	add	sp, #28
 808678c:	bd30      	pop	{r4, r5, pc}

0808678e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808678e:	b510      	push	{r4, lr}
 8086790:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8086792:	6800      	ldr	r0, [r0, #0]
 8086794:	b118      	cbz	r0, 808679e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8086796:	f7ff fdfd 	bl	8086394 <free>
            wakeupSource_ = nullptr;
 808679a:	2300      	movs	r3, #0
 808679c:	6023      	str	r3, [r4, #0]
        }
    }
 808679e:	bd10      	pop	{r4, pc}

080867a0 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80867a0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80867a2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80867a6:	460d      	mov	r5, r1
        error_ = result.error_;
 80867a8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80867aa:	460b      	mov	r3, r1
 80867ac:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80867b0:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80867b2:	f8c0 2006 	str.w	r2, [r0, #6]
 80867b6:	889b      	ldrh	r3, [r3, #4]
 80867b8:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80867ba:	f7ff ffe8 	bl	808678e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80867be:	682b      	ldr	r3, [r5, #0]
 80867c0:	b113      	cbz	r3, 80867c8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80867c2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80867c4:	2300      	movs	r3, #0
 80867c6:	602b      	str	r3, [r5, #0]
    }
 80867c8:	4620      	mov	r0, r4
 80867ca:	bd38      	pop	{r3, r4, r5, pc}

080867cc <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80867cc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80867d0:	b510      	push	{r4, lr}
 80867d2:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 80867d4:	b933      	cbnz	r3, 80867e4 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80867d6:	b932      	cbnz	r2, 80867e6 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 80867d8:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80867dc:	6003      	str	r3, [r0, #0]
 80867de:	888b      	ldrh	r3, [r1, #4]
 80867e0:	8083      	strh	r3, [r0, #4]
    }
 80867e2:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80867e4:	b122      	cbz	r2, 80867f0 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80867e6:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80867e8:	2c01      	cmp	r4, #1
 80867ea:	d003      	beq.n	80867f4 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80867ec:	2c04      	cmp	r4, #4
 80867ee:	d006      	beq.n	80867fe <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80867f0:	2204      	movs	r2, #4
 80867f2:	e005      	b.n	8086800 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80867f4:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80867f6:	718c      	strb	r4, [r1, #6]
 80867f8:	810b      	strh	r3, [r1, #8]
 80867fa:	814a      	strh	r2, [r1, #10]
                    break;
 80867fc:	e7ec      	b.n	80867d8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80867fe:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8086800:	810b      	strh	r3, [r1, #8]
 8086802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8086806:	718a      	strb	r2, [r1, #6]
 8086808:	814b      	strh	r3, [r1, #10]
                    break;
 808680a:	e7e5      	b.n	80867d8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

0808680c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808680c:	b507      	push	{r0, r1, r2, lr}
 808680e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8086810:	2100      	movs	r1, #0
{
 8086812:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8086814:	9100      	str	r1, [sp, #0]
 8086816:	2001      	movs	r0, #1
 8086818:	218c      	movs	r1, #140	; 0x8c
 808681a:	f7ff fd19 	bl	8086250 <system_reset>
}
 808681e:	b003      	add	sp, #12
 8086820:	f85d fb04 	ldr.w	pc, [sp], #4

08086824 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8086824:	4601      	mov	r1, r0
    reset(0, flags);
 8086826:	2000      	movs	r0, #0
 8086828:	f7ff bff0 	b.w	808680c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808682c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808682c:	2000      	movs	r0, #0
 808682e:	f7ff bff9 	b.w	8086824 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

08086834 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8086834:	b530      	push	{r4, r5, lr}
 8086836:	4604      	mov	r4, r0
 8086838:	b085      	sub	sp, #20
 808683a:	4608      	mov	r0, r1
 808683c:	4611      	mov	r1, r2
 808683e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8086840:	2300      	movs	r3, #0
 8086842:	f7ff fcc7 	bl	80861d4 <system_sleep>
              compatResult_(r) {
 8086846:	2300      	movs	r3, #0
 8086848:	9301      	str	r3, [sp, #4]
 808684a:	f8ad 3008 	strh.w	r3, [sp, #8]
 808684e:	f88d 300a 	strb.w	r3, [sp, #10]
 8086852:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8086856:	4d09      	ldr	r5, [pc, #36]	; (808687c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8086858:	a901      	add	r1, sp, #4
 808685a:	f8ad 000c 	strh.w	r0, [sp, #12]
 808685e:	4628      	mov	r0, r5
 8086860:	f8ad 300e 	strh.w	r3, [sp, #14]
 8086864:	f7ff ff9c 	bl	80867a0 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8086868:	a801      	add	r0, sp, #4
 808686a:	f7ff ff90 	bl	808678e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 808686e:	4620      	mov	r0, r4
 8086870:	4629      	mov	r1, r5
 8086872:	f7ff ffab 	bl	80867cc <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8086876:	4620      	mov	r0, r4
 8086878:	b005      	add	sp, #20
 808687a:	bd30      	pop	{r4, r5, pc}
 808687c:	20000ad4 	.word	0x20000ad4

08086880 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8086880:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8086882:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8086884:	b510      	push	{r4, lr}
 8086886:	4b08      	ldr	r3, [pc, #32]	; (80868a8 <_GLOBAL__sub_I_System+0x28>)
 8086888:	4c08      	ldr	r4, [pc, #32]	; (80868ac <_GLOBAL__sub_I_System+0x2c>)
 808688a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 808688c:	4b08      	ldr	r3, [pc, #32]	; (80868b0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 808688e:	6020      	str	r0, [r4, #0]
 8086890:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8086892:	71a0      	strb	r0, [r4, #6]
 8086894:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086896:	f7ff fc8d 	bl	80861b4 <set_system_mode>
SystemClass System;
 808689a:	4620      	mov	r0, r4
 808689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80868a0:	4a04      	ldr	r2, [pc, #16]	; (80868b4 <_GLOBAL__sub_I_System+0x34>)
 80868a2:	4905      	ldr	r1, [pc, #20]	; (80868b8 <_GLOBAL__sub_I_System+0x38>)
 80868a4:	f002 bc3c 	b.w	8089120 <__aeabi_atexit>
 80868a8:	20000ae0 	.word	0x20000ae0
 80868ac:	20000ad4 	.word	0x20000ad4
 80868b0:	ffff0000 	.word	0xffff0000
 80868b4:	20000230 	.word	0x20000230
 80868b8:	0808022d 	.word	0x0808022d

080868bc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80868bc:	b510      	push	{r4, lr}
 80868be:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80868c0:	f003 ff19 	bl	808a6f6 <strlen>
 80868c4:	1e43      	subs	r3, r0, #1
 80868c6:	4620      	mov	r0, r4
 80868c8:	4423      	add	r3, r4
	while(i<j){
 80868ca:	4283      	cmp	r3, r0
 80868cc:	d906      	bls.n	80868dc <_Z11str_reversePc+0x20>
		c = *i;
 80868ce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80868d0:	7819      	ldrb	r1, [r3, #0]
 80868d2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80868d6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80868da:	e7f6      	b.n	80868ca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80868dc:	bd10      	pop	{r4, pc}

080868de <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80868de:	b570      	push	{r4, r5, r6, lr}
 80868e0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80868e2:	1e91      	subs	r1, r2, #2
 80868e4:	2922      	cmp	r1, #34	; 0x22
 80868e6:	d822      	bhi.n	808692e <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80868e8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80868ea:	b168      	cbz	r0, 8086908 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80868ec:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80868f0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80868f4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80868f6:	2809      	cmp	r0, #9
                *ptr += '0';
 80868f8:	bf94      	ite	ls
 80868fa:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80868fc:	3157      	addhi	r1, #87	; 0x57
 80868fe:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8086900:	4630      	mov	r0, r6
 8086902:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 8086906:	e7f0      	b.n	80868ea <ultoa+0xc>
 8086908:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808690a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 808690c:	4423      	add	r3, r4
 808690e:	4293      	cmp	r3, r2
 8086910:	d902      	bls.n	8086918 <ultoa+0x3a>
            *ptr++ = '0';
 8086912:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 8086916:	e7fa      	b.n	808690e <ultoa+0x30>
 8086918:	1b5a      	subs	r2, r3, r5
 808691a:	42ab      	cmp	r3, r5
 808691c:	bf38      	it	cc
 808691e:	2200      	movcc	r2, #0

	*ptr = '\0';
 8086920:	2300      	movs	r3, #0
	str_reverse(buffer);
 8086922:	4620      	mov	r0, r4
	*ptr = '\0';
 8086924:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 8086926:	f7ff ffc9 	bl	80868bc <_Z11str_reversePc>
	return buffer;
 808692a:	4620      	mov	r0, r4
}
 808692c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 808692e:	2000      	movs	r0, #0
 8086930:	e7fc      	b.n	808692c <ultoa+0x4e>

08086932 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8086932:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8086934:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8086936:	460c      	mov	r4, r1
 8086938:	4615      	mov	r5, r2
	if(a<0){
 808693a:	da0d      	bge.n	8086958 <itoa+0x26>
		*buffer = '-';
 808693c:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808693e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8086942:	bf0c      	ite	eq
 8086944:	4618      	moveq	r0, r3
 8086946:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8086948:	2301      	movs	r3, #1
		*buffer = '-';
 808694a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 808694c:	462a      	mov	r2, r5
 808694e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 8086950:	f7ff ffc5 	bl	80868de <ultoa>
	}
	return buffer;
}
 8086954:	4620      	mov	r0, r4
 8086956:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 8086958:	2301      	movs	r3, #1
 808695a:	e7f9      	b.n	8086950 <itoa+0x1e>

0808695c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 808695c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 808695e:	6803      	ldr	r3, [r0, #0]
{
 8086960:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086964:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8086966:	2201      	movs	r2, #1
 8086968:	f247 5330 	movw	r3, #30000	; 0x7530
 808696c:	f10d 0107 	add.w	r1, sp, #7
 8086970:	47a0      	blx	r4
}
 8086972:	b002      	add	sp, #8
 8086974:	bd10      	pop	{r4, pc}

08086976 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8086976:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086978:	6803      	ldr	r3, [r0, #0]
 808697a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 808697c:	f247 5330 	movw	r3, #30000	; 0x7530
 8086980:	46a4      	mov	ip, r4
}
 8086982:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8086984:	4760      	bx	ip

08086986 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8086986:	b513      	push	{r0, r1, r4, lr}
 8086988:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 808698a:	6802      	ldr	r2, [r0, #0]
{
 808698c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 8086990:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8086992:	f10d 0107 	add.w	r1, sp, #7
 8086996:	2201      	movs	r2, #1
 8086998:	47a0      	blx	r4
}
 808699a:	b002      	add	sp, #8
 808699c:	bd10      	pop	{r4, pc}

0808699e <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 808699e:	4770      	bx	lr

080869a0 <_ZN9TCPClient8remoteIPEv>:
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80869a0:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80869a2:	4903      	ldr	r1, [pc, #12]	; (80869b0 <_ZN9TCPClient8remoteIPEv+0x10>)
 80869a4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80869a8:	6001      	str	r1, [r0, #0]
 80869aa:	6042      	str	r2, [r0, #4]
}

IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}
 80869ac:	4770      	bx	lr
 80869ae:	bf00      	nop
 80869b0:	0808d258 	.word	0x0808d258

080869b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80869b4:	4770      	bx	lr
	...

080869b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80869b8:	b510      	push	{r4, lr}
 80869ba:	4604      	mov	r4, r0
	    ||
 80869bc:	4b06      	ldr	r3, [pc, #24]	; (80869d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80869be:	4608      	mov	r0, r1
	    ||
 80869c0:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80869c2:	f104 040c 	add.w	r4, r4, #12
 80869c6:	d004      	beq.n	80869d2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80869c8:	f002 fc6c 	bl	80892a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80869cc:	2800      	cmp	r0, #0
	return nullptr;
 80869ce:	bf08      	it	eq
 80869d0:	2400      	moveq	r4, #0
      }
 80869d2:	4620      	mov	r0, r4
 80869d4:	bd10      	pop	{r4, pc}
 80869d6:	bf00      	nop
 80869d8:	0808d10c 	.word	0x0808d10c

080869dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80869dc:	b510      	push	{r4, lr}
 80869de:	4604      	mov	r4, r0
 80869e0:	219c      	movs	r1, #156	; 0x9c
 80869e2:	f002 fba2 	bl	808912a <_ZdlPvj>
 80869e6:	4620      	mov	r0, r4
 80869e8:	bd10      	pop	{r4, pc}

080869ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 80869ea:	f7f9 bb72 	b.w	80800d2 <_ZdlPv>

080869ee <_ZN9TCPClient4peekEv>:
{
 80869ee:	b510      	push	{r4, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80869f0:	6943      	ldr	r3, [r0, #20]
 80869f2:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80869f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80869f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80869fc:	429a      	cmp	r2, r3
 80869fe:	d005      	beq.n	8086a0c <_ZN9TCPClient4peekEv+0x1e>
 8086a00:	6963      	ldr	r3, [r4, #20]
 8086a02:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8086a06:	4413      	add	r3, r2
 8086a08:	7918      	ldrb	r0, [r3, #4]
}
 8086a0a:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8086a0c:	6803      	ldr	r3, [r0, #0]
 8086a0e:	691b      	ldr	r3, [r3, #16]
 8086a10:	4798      	blx	r3
 8086a12:	2800      	cmp	r0, #0
 8086a14:	d1f4      	bne.n	8086a00 <_ZN9TCPClient4peekEv+0x12>
 8086a16:	f04f 30ff 	mov.w	r0, #4294967295
 8086a1a:	e7f6      	b.n	8086a0a <_ZN9TCPClient4peekEv+0x1c>

08086a1c <_ZN9TCPClient4readEv>:
{
 8086a1c:	b510      	push	{r4, lr}
 8086a1e:	6943      	ldr	r3, [r0, #20]
 8086a20:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8086a22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086a26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8086a2a:	429a      	cmp	r2, r3
 8086a2c:	d008      	beq.n	8086a40 <_ZN9TCPClient4readEv+0x24>
 8086a2e:	6963      	ldr	r3, [r4, #20]
 8086a30:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8086a34:	1c51      	adds	r1, r2, #1
 8086a36:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 8086a3a:	4413      	add	r3, r2
 8086a3c:	7918      	ldrb	r0, [r3, #4]
}
 8086a3e:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8086a40:	6803      	ldr	r3, [r0, #0]
 8086a42:	691b      	ldr	r3, [r3, #16]
 8086a44:	4798      	blx	r3
 8086a46:	2800      	cmp	r0, #0
 8086a48:	d1f1      	bne.n	8086a2e <_ZN9TCPClient4readEv+0x12>
 8086a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8086a4e:	e7f6      	b.n	8086a3e <_ZN9TCPClient4readEv+0x22>

08086a50 <_ZN9TCPClient4readEPhj>:
{
 8086a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086a52:	6943      	ldr	r3, [r0, #20]
 8086a54:	4617      	mov	r7, r2
        if (bufferCount() || available())
 8086a56:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086a5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 8086a5e:	4605      	mov	r5, r0
        if (bufferCount() || available())
 8086a60:	429a      	cmp	r2, r3
{
 8086a62:	460e      	mov	r6, r1
        if (bufferCount() || available())
 8086a64:	d016      	beq.n	8086a94 <_ZN9TCPClient4readEPhj+0x44>
 8086a66:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086a68:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 8086a6a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8086a6e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 8086a72:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8086a74:	42bc      	cmp	r4, r7
 8086a76:	bf28      	it	cs
 8086a78:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8086a7a:	3304      	adds	r3, #4
 8086a7c:	4622      	mov	r2, r4
 8086a7e:	4419      	add	r1, r3
 8086a80:	f003 fdc4 	bl	808a60c <memcpy>
 8086a84:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8086a86:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8086a8a:	4423      	add	r3, r4
 8086a8c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 8086a90:	4620      	mov	r0, r4
 8086a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 8086a94:	6803      	ldr	r3, [r0, #0]
 8086a96:	691b      	ldr	r3, [r3, #16]
 8086a98:	4798      	blx	r3
 8086a9a:	2800      	cmp	r0, #0
 8086a9c:	d1e3      	bne.n	8086a66 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 8086a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8086aa2:	e7f5      	b.n	8086a90 <_ZN9TCPClient4readEPhj+0x40>

08086aa4 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 8086aa4:	2300      	movs	r3, #0
 8086aa6:	6942      	ldr	r2, [r0, #20]
 8086aa8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8086aac:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8086aae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 8086ab2:	4770      	bx	lr

08086ab4 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 8086ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086ab8:	461f      	mov	r7, r3
    stop();
 8086aba:	6803      	ldr	r3, [r0, #0]
{
 8086abc:	b08b      	sub	sp, #44	; 0x2c
    stop();
 8086abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8086ac0:	4604      	mov	r4, r0
 8086ac2:	460d      	mov	r5, r1
 8086ac4:	4616      	mov	r6, r2
    stop();
 8086ac6:	4798      	blx	r3
        if(Network.from(nif).ready())
 8086ac8:	4638      	mov	r0, r7
 8086aca:	f002 f84b 	bl	8088b64 <_ZN5spark12NetworkClass4fromEm>
 8086ace:	6803      	ldr	r3, [r0, #0]
 8086ad0:	68db      	ldr	r3, [r3, #12]
 8086ad2:	4798      	blx	r3
 8086ad4:	2800      	cmp	r0, #0
 8086ad6:	d04e      	beq.n	8086b76 <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8086ad8:	4633      	mov	r3, r6
 8086ada:	2206      	movs	r2, #6
 8086adc:	2101      	movs	r1, #1
 8086ade:	2002      	movs	r0, #2
 8086ae0:	9700      	str	r7, [sp, #0]
 8086ae2:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8086ae6:	f7ff fa63 	bl	8085fb0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 8086aea:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8086aec:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 8086af0:	f04f 0800 	mov.w	r8, #0
 8086af4:	e9cd 3802 	strd	r3, r8, [sp, #8]
 8086af8:	6963      	ldr	r3, [r4, #20]
 8086afa:	2001      	movs	r0, #1
 8086afc:	681b      	ldr	r3, [r3, #0]
 8086afe:	4920      	ldr	r1, [pc, #128]	; (8086b80 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 8086b00:	9301      	str	r3, [sp, #4]
 8086b02:	4b20      	ldr	r3, [pc, #128]	; (8086b84 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 8086b04:	aa02      	add	r2, sp, #8
 8086b06:	9300      	str	r3, [sp, #0]
 8086b08:	4643      	mov	r3, r8
 8086b0a:	f7ff fb31 	bl	8086170 <log_message>
          if (socket_handle_valid(d_->sock))
 8086b0e:	6963      	ldr	r3, [r4, #20]
 8086b10:	6818      	ldr	r0, [r3, #0]
 8086b12:	f7ff fa45 	bl	8085fa0 <socket_handle_valid>
 8086b16:	b370      	cbz	r0, 8086b76 <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
            flush_buffer();
 8086b18:	4620      	mov	r0, r4
 8086b1a:	f7ff ffc3 	bl	8086aa4 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 8086b1e:	2302      	movs	r3, #2
 8086b20:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8086b24:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8086b26:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8086b28:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 8086b2c:	79ab      	ldrb	r3, [r5, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086b2e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 8086b32:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8086b36:	796b      	ldrb	r3, [r5, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8086b38:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 8086b3c:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8086b40:	792b      	ldrb	r3, [r5, #4]
 8086b42:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086b46:	f7ff fab3 	bl	80860b0 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086b4a:	6963      	ldr	r3, [r4, #20]
 8086b4c:	2210      	movs	r2, #16
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8086b4e:	4681      	mov	r9, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086b50:	a902      	add	r1, sp, #8
 8086b52:	6818      	ldr	r0, [r3, #0]
 8086b54:	f7ff fa34 	bl	8085fc0 <socket_connect>
 8086b58:	4606      	mov	r6, r0
            HAL_NET_SetNetWatchDog(ot);
 8086b5a:	4648      	mov	r0, r9
 8086b5c:	f7ff faa8 	bl	80860b0 <HAL_NET_SetNetWatchDog>
 8086b60:	6963      	ldr	r3, [r4, #20]
 8086b62:	686a      	ldr	r2, [r5, #4]
 8086b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            nif_ = nif;
 8086b68:	6127      	str	r7, [r4, #16]
            if(!connected)
 8086b6a:	b13e      	cbz	r6, 8086b7c <_ZN9TCPClient7connectE9IPAddresstm+0xc8>
                stop();
 8086b6c:	6823      	ldr	r3, [r4, #0]
 8086b6e:	4620      	mov	r0, r4
 8086b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086b72:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8086b74:	4640      	mov	r0, r8
}
 8086b76:	b00b      	add	sp, #44	; 0x2c
 8086b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086b7c:	2001      	movs	r0, #1
        return connected;
 8086b7e:	e7fa      	b.n	8086b76 <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
 8086b80:	0808d0d4 	.word	0x0808d0d4
 8086b84:	0808d0db 	.word	0x0808d0db

08086b88 <_ZN9TCPClient9availableEv>:
{
 8086b88:	b538      	push	{r3, r4, r5, lr}
 8086b8a:	6942      	ldr	r2, [r0, #20]
 8086b8c:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 8086b8e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8086b92:	b12b      	cbz	r3, 8086ba0 <_ZN9TCPClient9availableEv+0x18>
 8086b94:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8086b98:	429a      	cmp	r2, r3
 8086b9a:	d101      	bne.n	8086ba0 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 8086b9c:	f7ff ff82 	bl	8086aa4 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 8086ba0:	6920      	ldr	r0, [r4, #16]
 8086ba2:	f001 ffdf 	bl	8088b64 <_ZN5spark12NetworkClass4fromEm>
 8086ba6:	6803      	ldr	r3, [r0, #0]
 8086ba8:	68db      	ldr	r3, [r3, #12]
 8086baa:	4798      	blx	r3
 8086bac:	b1f8      	cbz	r0, 8086bee <_ZN9TCPClient9availableEv+0x66>
 8086bae:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 8086bb0:	6818      	ldr	r0, [r3, #0]
 8086bb2:	f7ff f9f5 	bl	8085fa0 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 8086bb6:	b1d0      	cbz	r0, 8086bee <_ZN9TCPClient9availableEv+0x66>
 8086bb8:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 8086bba:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8086bbe:	297f      	cmp	r1, #127	; 0x7f
 8086bc0:	d815      	bhi.n	8086bee <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8086bc2:	1d05      	adds	r5, r0, #4
 8086bc4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8086bc8:	2300      	movs	r3, #0
 8086bca:	6800      	ldr	r0, [r0, #0]
 8086bcc:	4429      	add	r1, r5
 8086bce:	f7ff f9ff 	bl	8085fd0 <socket_receive>
            if (ret > 0)
 8086bd2:	2800      	cmp	r0, #0
 8086bd4:	dd0b      	ble.n	8086bee <_ZN9TCPClient9availableEv+0x66>
 8086bd6:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 8086bd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086bdc:	b90a      	cbnz	r2, 8086be2 <_ZN9TCPClient9availableEv+0x5a>
 8086bde:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8086be2:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 8086be4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8086be8:	4410      	add	r0, r2
 8086bea:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 8086bee:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 8086bf0:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 8086bf4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 8086bf8:	1ac0      	subs	r0, r0, r3
 8086bfa:	bd38      	pop	{r3, r4, r5, pc}

08086bfc <_ZN9TCPClient4stopEv>:
{
 8086bfc:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 8086bfe:	6943      	ldr	r3, [r0, #20]
{
 8086c00:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 8086c02:	6818      	ldr	r0, [r3, #0]
 8086c04:	f7ff f9cc 	bl	8085fa0 <socket_handle_valid>
  if (isOpen(d_->sock))
 8086c08:	b118      	cbz	r0, 8086c12 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 8086c0a:	6963      	ldr	r3, [r4, #20]
 8086c0c:	6818      	ldr	r0, [r3, #0]
 8086c0e:	f7ff f9ef 	bl	8085ff0 <socket_close>
 8086c12:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8086c14:	f7ff f9f4 	bl	8086000 <socket_handle_invalid>
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8086c18:	2200      	movs	r2, #0
 8086c1a:	6028      	str	r0, [r5, #0]
 8086c1c:	6963      	ldr	r3, [r4, #20]
  flush_buffer();
 8086c1e:	4620      	mov	r0, r4
 8086c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8086c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 8086c28:	f7ff bf3c 	b.w	8086aa4 <_ZN9TCPClient12flush_bufferEv>

08086c2c <_ZN9TCPClient6statusEv>:
{
 8086c2c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086c2e:	6943      	ldr	r3, [r0, #20]
{
 8086c30:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 8086c32:	6818      	ldr	r0, [r3, #0]
 8086c34:	f7ff f9b4 	bl	8085fa0 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086c38:	b908      	cbnz	r0, 8086c3e <_ZN9TCPClient6statusEv+0x12>
 8086c3a:	2000      	movs	r0, #0
}
 8086c3c:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8086c3e:	6920      	ldr	r0, [r4, #16]
 8086c40:	f001 ff90 	bl	8088b64 <_ZN5spark12NetworkClass4fromEm>
 8086c44:	6803      	ldr	r3, [r0, #0]
 8086c46:	68db      	ldr	r3, [r3, #12]
 8086c48:	4798      	blx	r3
 8086c4a:	2800      	cmp	r0, #0
 8086c4c:	d0f5      	beq.n	8086c3a <_ZN9TCPClient6statusEv+0xe>
 8086c4e:	6963      	ldr	r3, [r4, #20]
 8086c50:	6818      	ldr	r0, [r3, #0]
 8086c52:	f7ff f99d 	bl	8085f90 <socket_active_status>
 8086c56:	fab0 f080 	clz	r0, r0
 8086c5a:	0940      	lsrs	r0, r0, #5
 8086c5c:	e7ee      	b.n	8086c3c <_ZN9TCPClient6statusEv+0x10>

08086c5e <_ZN9TCPClientcvbEv>:
{
 8086c5e:	b508      	push	{r3, lr}
   return (status()!=0);
 8086c60:	f7ff ffe4 	bl	8086c2c <_ZN9TCPClient6statusEv>
}
 8086c64:	3800      	subs	r0, #0
 8086c66:	bf18      	it	ne
 8086c68:	2001      	movne	r0, #1
 8086c6a:	bd08      	pop	{r3, pc}

08086c6c <_ZN9TCPClient5writeEPKhjm>:
{
 8086c6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 8086c70:	2700      	movs	r7, #0
 8086c72:	6047      	str	r7, [r0, #4]
 8086c74:	4604      	mov	r4, r0
 8086c76:	460d      	mov	r5, r1
 8086c78:	4616      	mov	r6, r2
 8086c7a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8086c7c:	f7ff ffd6 	bl	8086c2c <_ZN9TCPClient6statusEv>
 8086c80:	b170      	cbz	r0, 8086ca0 <_ZN9TCPClient5writeEPKhjm+0x34>
 8086c82:	e9cd 8700 	strd	r8, r7, [sp]
 8086c86:	6960      	ldr	r0, [r4, #20]
 8086c88:	463b      	mov	r3, r7
 8086c8a:	4632      	mov	r2, r6
 8086c8c:	4629      	mov	r1, r5
 8086c8e:	6800      	ldr	r0, [r0, #0]
 8086c90:	f7ff f9be 	bl	8086010 <socket_send_ex>
    if (ret < 0) {
 8086c94:	2800      	cmp	r0, #0
 8086c96:	da00      	bge.n	8086c9a <_ZN9TCPClient5writeEPKhjm+0x2e>
 8086c98:	6060      	str	r0, [r4, #4]
}
 8086c9a:	b002      	add	sp, #8
 8086c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8086ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8086ca4:	e7f8      	b.n	8086c98 <_ZN9TCPClient5writeEPKhjm+0x2c>

08086ca6 <_ZN9TCPClient9connectedEv>:
{
 8086ca6:	b570      	push	{r4, r5, r6, lr}
 8086ca8:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 8086caa:	f7ff ffbf 	bl	8086c2c <_ZN9TCPClient6statusEv>
 8086cae:	b9e8      	cbnz	r0, 8086cec <_ZN9TCPClient9connectedEv+0x46>
 8086cb0:	696b      	ldr	r3, [r5, #20]
 8086cb2:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8086cb6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8086cba:	4291      	cmp	r1, r2
 8086cbc:	d116      	bne.n	8086cec <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 8086cbe:	6818      	ldr	r0, [r3, #0]
 8086cc0:	f7ff f96e 	bl	8085fa0 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8086cc4:	b908      	cbnz	r0, 8086cca <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 8086cc6:	2000      	movs	r0, #0
}
 8086cc8:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8086cca:	696b      	ldr	r3, [r5, #20]
 8086ccc:	6818      	ldr	r0, [r3, #0]
 8086cce:	f7ff f95f 	bl	8085f90 <socket_active_status>
 8086cd2:	2801      	cmp	r0, #1
 8086cd4:	4604      	mov	r4, r0
 8086cd6:	d1f6      	bne.n	8086cc6 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 8086cd8:	682b      	ldr	r3, [r5, #0]
 8086cda:	4628      	mov	r0, r5
 8086cdc:	691b      	ldr	r3, [r3, #16]
 8086cde:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 8086ce0:	b930      	cbnz	r0, 8086cf0 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 8086ce2:	682b      	ldr	r3, [r5, #0]
 8086ce4:	4628      	mov	r0, r5
 8086ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086ce8:	4798      	blx	r3
 8086cea:	e7ec      	b.n	8086cc6 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 8086cec:	2001      	movs	r0, #1
 8086cee:	e7eb      	b.n	8086cc8 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 8086cf0:	4620      	mov	r0, r4
 8086cf2:	e7e9      	b.n	8086cc8 <_ZN9TCPClient9connectedEv+0x22>

08086cf4 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 8086cf4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 8086cf6:	b510      	push	{r4, lr}
 8086cf8:	4604      	mov	r4, r0
          total(0) {
 8086cfa:	6001      	str	r1, [r0, #0]
 8086cfc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8086d00:	3088      	adds	r0, #136	; 0x88
 8086d02:	f001 fb65 	bl	80883d0 <_ZN9IPAddressC1Ev>
}
 8086d06:	4620      	mov	r0, r4
 8086d08:	bd10      	pop	{r4, pc}
	...

08086d0c <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 8086d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8086d12:	2300      	movs	r3, #0
 8086d14:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 8086d18:	4a0d      	ldr	r2, [pc, #52]	; (8086d50 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 8086d1a:	6103      	str	r3, [r0, #16]
 8086d1c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8086d1e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 8086d20:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8086d22:	209c      	movs	r0, #156	; 0x9c
 8086d24:	460e      	mov	r6, r1
 8086d26:	f7f9 f9d0 	bl	80800ca <_Znwj>
	  auto __pi = ::new (__mem)
 8086d2a:	1e05      	subs	r5, r0, #0
 8086d2c:	f105 070c 	add.w	r7, r5, #12
 8086d30:	d008      	beq.n	8086d44 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 8086d32:	2301      	movs	r3, #1
 8086d34:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 8086d38:	4b06      	ldr	r3, [pc, #24]	; (8086d54 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8086d3a:	4631      	mov	r1, r6
 8086d3c:	4638      	mov	r0, r7
 8086d3e:	602b      	str	r3, [r5, #0]
 8086d40:	f7ff ffd8 	bl	8086cf4 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 8086d44:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 8086d46:	e9c4 7505 	strd	r7, r5, [r4, #20]
 8086d4a:	f7ff feab 	bl	8086aa4 <_ZN9TCPClient12flush_bufferEv>
}
 8086d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8086d50:	0808d11c 	.word	0x0808d11c
 8086d54:	0808d0f8 	.word	0x0808d0f8

08086d58 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8086d58:	b510      	push	{r4, lr}
 8086d5a:	4604      	mov	r4, r0
 8086d5c:	f7ff f950 	bl	8086000 <socket_handle_invalid>
 8086d60:	4601      	mov	r1, r0
 8086d62:	4620      	mov	r0, r4
 8086d64:	f7ff ffd2 	bl	8086d0c <_ZN9TCPClientC1Em>
}
 8086d68:	4620      	mov	r0, r4
 8086d6a:	bd10      	pop	{r4, pc}

08086d6c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 8086d6c:	b510      	push	{r4, lr}
 8086d6e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 8086d70:	6800      	ldr	r0, [r0, #0]
 8086d72:	f7ff f915 	bl	8085fa0 <socket_handle_valid>
 8086d76:	b110      	cbz	r0, 8086d7e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 8086d78:	6820      	ldr	r0, [r4, #0]
 8086d7a:	f7ff f939 	bl	8085ff0 <socket_close>
    }
}
 8086d7e:	4620      	mov	r0, r4
 8086d80:	bd10      	pop	{r4, pc}

08086d82 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8086d82:	300c      	adds	r0, #12
 8086d84:	f7ff bff2 	b.w	8086d6c <_ZN9TCPClient4DataD1Ev>

08086d88 <_ZN9TCPClient7connectEPKctm>:
{
 8086d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086d8c:	461e      	mov	r6, r3
    stop();
 8086d8e:	6803      	ldr	r3, [r0, #0]
{
 8086d90:	b086      	sub	sp, #24
    stop();
 8086d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8086d94:	4605      	mov	r5, r0
 8086d96:	460f      	mov	r7, r1
 8086d98:	4690      	mov	r8, r2
    stop();
 8086d9a:	4798      	blx	r3
    if (Network.ready())
 8086d9c:	4811      	ldr	r0, [pc, #68]	; (8086de4 <_ZN9TCPClient7connectEPKctm+0x5c>)
 8086d9e:	f001 fe97 	bl	8088ad0 <_ZN5spark12NetworkClass5readyEv>
 8086da2:	b1c8      	cbz	r0, 8086dd8 <_ZN9TCPClient7connectEPKctm+0x50>
        IPAddress ip_addr;
 8086da4:	a802      	add	r0, sp, #8
 8086da6:	f001 fb13 	bl	80883d0 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 8086daa:	4638      	mov	r0, r7
 8086dac:	f003 fca3 	bl	808a6f6 <strlen>
 8086db0:	2400      	movs	r4, #0
 8086db2:	b281      	uxth	r1, r0
 8086db4:	4633      	mov	r3, r6
 8086db6:	4638      	mov	r0, r7
 8086db8:	9400      	str	r4, [sp, #0]
 8086dba:	aa03      	add	r2, sp, #12
 8086dbc:	f7ff f980 	bl	80860c0 <inet_gethostbyname>
 8086dc0:	b968      	cbnz	r0, 8086dde <_ZN9TCPClient7connectEPKctm+0x56>
            return connect(ip_addr, port, nif);
 8086dc2:	682b      	ldr	r3, [r5, #0]
 8086dc4:	4642      	mov	r2, r8
 8086dc6:	6a1c      	ldr	r4, [r3, #32]
class IPAddress : public Printable {
 8086dc8:	4b07      	ldr	r3, [pc, #28]	; (8086de8 <_ZN9TCPClient7connectEPKctm+0x60>)
 8086dca:	4628      	mov	r0, r5
 8086dcc:	9304      	str	r3, [sp, #16]
 8086dce:	9b03      	ldr	r3, [sp, #12]
 8086dd0:	a904      	add	r1, sp, #16
 8086dd2:	9305      	str	r3, [sp, #20]
 8086dd4:	4633      	mov	r3, r6
 8086dd6:	47a0      	blx	r4
}
 8086dd8:	b006      	add	sp, #24
 8086dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0; // error, could not connect
 8086dde:	4620      	mov	r0, r4
 8086de0:	e7fa      	b.n	8086dd8 <_ZN9TCPClient7connectEPKctm+0x50>
 8086de2:	bf00      	nop
 8086de4:	20001088 	.word	0x20001088
 8086de8:	0808d258 	.word	0x0808d258

08086dec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8086dec:	b510      	push	{r4, lr}
 8086dee:	4604      	mov	r4, r0
{
	free(buffer);
 8086df0:	6800      	ldr	r0, [r0, #0]
 8086df2:	f7ff facf 	bl	8086394 <free>
}
 8086df6:	4620      	mov	r0, r4
 8086df8:	bd10      	pop	{r4, pc}

08086dfa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8086dfa:	b510      	push	{r4, lr}
 8086dfc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8086dfe:	6800      	ldr	r0, [r0, #0]
 8086e00:	b108      	cbz	r0, 8086e06 <_ZN6String10invalidateEv+0xc>
 8086e02:	f7ff fac7 	bl	8086394 <free>
	buffer = NULL;
 8086e06:	2300      	movs	r3, #0
	capacity = len = 0;
 8086e08:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8086e0c:	6023      	str	r3, [r4, #0]
}
 8086e0e:	bd10      	pop	{r4, pc}

08086e10 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8086e10:	b538      	push	{r3, r4, r5, lr}
 8086e12:	4604      	mov	r4, r0
 8086e14:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8086e16:	6800      	ldr	r0, [r0, #0]
 8086e18:	3101      	adds	r1, #1
 8086e1a:	f7ff fac3 	bl	80863a4 <realloc>
	if (newbuffer) {
 8086e1e:	b110      	cbz	r0, 8086e26 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8086e20:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8086e24:	2001      	movs	r0, #1
	}
	return 0;
}
 8086e26:	bd38      	pop	{r3, r4, r5, pc}

08086e28 <_ZN6String7reserveEj>:
{
 8086e28:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8086e2a:	6803      	ldr	r3, [r0, #0]
{
 8086e2c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8086e2e:	b123      	cbz	r3, 8086e3a <_ZN6String7reserveEj+0x12>
 8086e30:	6843      	ldr	r3, [r0, #4]
 8086e32:	428b      	cmp	r3, r1
 8086e34:	d301      	bcc.n	8086e3a <_ZN6String7reserveEj+0x12>
 8086e36:	2001      	movs	r0, #1
}
 8086e38:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8086e3a:	4620      	mov	r0, r4
 8086e3c:	f7ff ffe8 	bl	8086e10 <_ZN6String12changeBufferEj>
 8086e40:	2800      	cmp	r0, #0
 8086e42:	d0f9      	beq.n	8086e38 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8086e44:	68a3      	ldr	r3, [r4, #8]
 8086e46:	2b00      	cmp	r3, #0
 8086e48:	d1f5      	bne.n	8086e36 <_ZN6String7reserveEj+0xe>
 8086e4a:	6822      	ldr	r2, [r4, #0]
 8086e4c:	7013      	strb	r3, [r2, #0]
 8086e4e:	e7f2      	b.n	8086e36 <_ZN6String7reserveEj+0xe>

08086e50 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8086e50:	b570      	push	{r4, r5, r6, lr}
 8086e52:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8086e54:	4611      	mov	r1, r2
{
 8086e56:	4604      	mov	r4, r0
 8086e58:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8086e5a:	f7ff ffe5 	bl	8086e28 <_ZN6String7reserveEj>
 8086e5e:	b920      	cbnz	r0, 8086e6a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8086e60:	4620      	mov	r0, r4
 8086e62:	f7ff ffca 	bl	8086dfa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8086e66:	4620      	mov	r0, r4
 8086e68:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8086e6a:	462a      	mov	r2, r5
 8086e6c:	4631      	mov	r1, r6
 8086e6e:	6820      	ldr	r0, [r4, #0]
	len = length;
 8086e70:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8086e72:	f003 fbcb 	bl	808a60c <memcpy>
	buffer[len] = 0;
 8086e76:	2100      	movs	r1, #0
 8086e78:	6822      	ldr	r2, [r4, #0]
 8086e7a:	68a3      	ldr	r3, [r4, #8]
 8086e7c:	54d1      	strb	r1, [r2, r3]
	return *this;
 8086e7e:	e7f2      	b.n	8086e66 <_ZN6String4copyEPKcj+0x16>

08086e80 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8086e80:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8086e82:	2300      	movs	r3, #0
String::String(const char *cstr)
 8086e84:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8086e86:	460d      	mov	r5, r1
	capacity = 0;
 8086e88:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8086e8c:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086e8e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8086e90:	b139      	cbz	r1, 8086ea2 <_ZN6StringC1EPKc+0x22>
 8086e92:	4608      	mov	r0, r1
 8086e94:	f003 fc2f 	bl	808a6f6 <strlen>
 8086e98:	4629      	mov	r1, r5
 8086e9a:	4602      	mov	r2, r0
 8086e9c:	4620      	mov	r0, r4
 8086e9e:	f7ff ffd7 	bl	8086e50 <_ZN6String4copyEPKcj>
}
 8086ea2:	4620      	mov	r0, r4
 8086ea4:	bd38      	pop	{r3, r4, r5, pc}

08086ea6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8086ea6:	b538      	push	{r3, r4, r5, lr}
 8086ea8:	4605      	mov	r5, r0
	if (buffer) {
 8086eaa:	6800      	ldr	r0, [r0, #0]
{
 8086eac:	460c      	mov	r4, r1
	if (buffer) {
 8086eae:	b168      	cbz	r0, 8086ecc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8086eb0:	686a      	ldr	r2, [r5, #4]
 8086eb2:	688b      	ldr	r3, [r1, #8]
 8086eb4:	429a      	cmp	r2, r3
 8086eb6:	d307      	bcc.n	8086ec8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8086eb8:	6809      	ldr	r1, [r1, #0]
 8086eba:	f003 fbf8 	bl	808a6ae <strcpy>
			len = rhs.len;
 8086ebe:	68a3      	ldr	r3, [r4, #8]
 8086ec0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8086ec2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8086ec4:	60a3      	str	r3, [r4, #8]
}
 8086ec6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8086ec8:	f7ff fa64 	bl	8086394 <free>
	buffer = rhs.buffer;
 8086ecc:	6823      	ldr	r3, [r4, #0]
 8086ece:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8086ed0:	6863      	ldr	r3, [r4, #4]
 8086ed2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8086ed4:	68a3      	ldr	r3, [r4, #8]
 8086ed6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8086ed8:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8086eda:	e9c4 3300 	strd	r3, r3, [r4]
 8086ede:	e7f1      	b.n	8086ec4 <_ZN6String4moveERS_+0x1e>

08086ee0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8086ee0:	4288      	cmp	r0, r1
{
 8086ee2:	b510      	push	{r4, lr}
 8086ee4:	460b      	mov	r3, r1
 8086ee6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8086ee8:	d004      	beq.n	8086ef4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8086eea:	6809      	ldr	r1, [r1, #0]
 8086eec:	b121      	cbz	r1, 8086ef8 <_ZN6StringaSERKS_+0x18>
 8086eee:	689a      	ldr	r2, [r3, #8]
 8086ef0:	f7ff ffae 	bl	8086e50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8086ef4:	4620      	mov	r0, r4
 8086ef6:	bd10      	pop	{r4, pc}
	else invalidate();
 8086ef8:	f7ff ff7f 	bl	8086dfa <_ZN6String10invalidateEv>
 8086efc:	e7fa      	b.n	8086ef4 <_ZN6StringaSERKS_+0x14>

08086efe <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8086efe:	2300      	movs	r3, #0
String::String(const String &value)
 8086f00:	b510      	push	{r4, lr}
 8086f02:	4604      	mov	r4, r0
	capacity = 0;
 8086f04:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8086f08:	6083      	str	r3, [r0, #8]
	flags = 0;
 8086f0a:	7303      	strb	r3, [r0, #12]
	*this = value;
 8086f0c:	f7ff ffe8 	bl	8086ee0 <_ZN6StringaSERKS_>
}
 8086f10:	4620      	mov	r0, r4
 8086f12:	bd10      	pop	{r4, pc}

08086f14 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8086f14:	4288      	cmp	r0, r1
{
 8086f16:	b510      	push	{r4, lr}
 8086f18:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8086f1a:	d001      	beq.n	8086f20 <_ZN6StringaSEOS_+0xc>
 8086f1c:	f7ff ffc3 	bl	8086ea6 <_ZN6String4moveERS_>
	return *this;
}
 8086f20:	4620      	mov	r0, r4
 8086f22:	bd10      	pop	{r4, pc}

08086f24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8086f24:	b538      	push	{r3, r4, r5, lr}
 8086f26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8086f28:	460c      	mov	r4, r1
 8086f2a:	b149      	cbz	r1, 8086f40 <_ZN6StringaSEPKc+0x1c>
 8086f2c:	4608      	mov	r0, r1
 8086f2e:	f003 fbe2 	bl	808a6f6 <strlen>
 8086f32:	4621      	mov	r1, r4
 8086f34:	4602      	mov	r2, r0
 8086f36:	4628      	mov	r0, r5
 8086f38:	f7ff ff8a 	bl	8086e50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8086f3c:	4628      	mov	r0, r5
 8086f3e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8086f40:	f7ff ff5b 	bl	8086dfa <_ZN6String10invalidateEv>
 8086f44:	e7fa      	b.n	8086f3c <_ZN6StringaSEPKc+0x18>

08086f46 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 8086f46:	b510      	push	{r4, lr}
	buffer = NULL;
 8086f48:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 8086f4a:	4604      	mov	r4, r0
 8086f4c:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 8086f4e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 8086f52:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8086f54:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 8086f56:	4608      	mov	r0, r1
	itoa(value, buf, base);
 8086f58:	a901      	add	r1, sp, #4
 8086f5a:	f7ff fcea 	bl	8086932 <itoa>
	*this = buf;
 8086f5e:	4620      	mov	r0, r4
 8086f60:	a901      	add	r1, sp, #4
 8086f62:	f7ff ffdf 	bl	8086f24 <_ZN6StringaSEPKc>
}
 8086f66:	4620      	mov	r0, r4
 8086f68:	b00a      	add	sp, #40	; 0x28
 8086f6a:	bd10      	pop	{r4, pc}

08086f6c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8086f6c:	b570      	push	{r4, r5, r6, lr}
 8086f6e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8086f70:	460e      	mov	r6, r1
 8086f72:	b909      	cbnz	r1, 8086f78 <_ZN6String6concatEPKcj+0xc>
 8086f74:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8086f76:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8086f78:	b16a      	cbz	r2, 8086f96 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8086f7a:	6884      	ldr	r4, [r0, #8]
 8086f7c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8086f7e:	4621      	mov	r1, r4
 8086f80:	f7ff ff52 	bl	8086e28 <_ZN6String7reserveEj>
 8086f84:	2800      	cmp	r0, #0
 8086f86:	d0f5      	beq.n	8086f74 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8086f88:	6828      	ldr	r0, [r5, #0]
 8086f8a:	68ab      	ldr	r3, [r5, #8]
 8086f8c:	4631      	mov	r1, r6
 8086f8e:	4418      	add	r0, r3
 8086f90:	f003 fb8d 	bl	808a6ae <strcpy>
	len = newlen;
 8086f94:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8086f96:	2001      	movs	r0, #1
 8086f98:	e7ed      	b.n	8086f76 <_ZN6String6concatEPKcj+0xa>

08086f9a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8086f9a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8086f9c:	688a      	ldr	r2, [r1, #8]
 8086f9e:	6809      	ldr	r1, [r1, #0]
{
 8086fa0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8086fa2:	f7ff ffe3 	bl	8086f6c <_ZN6String6concatEPKcj>
 8086fa6:	b910      	cbnz	r0, 8086fae <_ZplRK15StringSumHelperRK6String+0x14>
 8086fa8:	4620      	mov	r0, r4
 8086faa:	f7ff ff26 	bl	8086dfa <_ZN6String10invalidateEv>
	return a;
}
 8086fae:	4620      	mov	r0, r4
 8086fb0:	bd10      	pop	{r4, pc}

08086fb2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8086fb2:	b538      	push	{r3, r4, r5, lr}
 8086fb4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8086fb6:	460d      	mov	r5, r1
 8086fb8:	b921      	cbnz	r1, 8086fc4 <_ZplRK15StringSumHelperPKc+0x12>
 8086fba:	4620      	mov	r0, r4
 8086fbc:	f7ff ff1d 	bl	8086dfa <_ZN6String10invalidateEv>
	return a;
}
 8086fc0:	4620      	mov	r0, r4
 8086fc2:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8086fc4:	4608      	mov	r0, r1
 8086fc6:	f003 fb96 	bl	808a6f6 <strlen>
 8086fca:	4629      	mov	r1, r5
 8086fcc:	4602      	mov	r2, r0
 8086fce:	4620      	mov	r0, r4
 8086fd0:	f7ff ffcc 	bl	8086f6c <_ZN6String6concatEPKcj>
 8086fd4:	2800      	cmp	r0, #0
 8086fd6:	d0f0      	beq.n	8086fba <_ZplRK15StringSumHelperPKc+0x8>
 8086fd8:	e7f2      	b.n	8086fc0 <_ZplRK15StringSumHelperPKc+0xe>

08086fda <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8086fda:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8086fdc:	6882      	ldr	r2, [r0, #8]
 8086fde:	b93a      	cbnz	r2, 8086ff0 <_ZNK6String6equalsEPKc+0x16>
 8086fe0:	b121      	cbz	r1, 8086fec <_ZNK6String6equalsEPKc+0x12>
 8086fe2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8086fe4:	fab0 f080 	clz	r0, r0
 8086fe8:	0940      	lsrs	r0, r0, #5
 8086fea:	e000      	b.n	8086fee <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8086fec:	2001      	movs	r0, #1
}
 8086fee:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8086ff0:	6800      	ldr	r0, [r0, #0]
 8086ff2:	b909      	cbnz	r1, 8086ff8 <_ZNK6String6equalsEPKc+0x1e>
 8086ff4:	7800      	ldrb	r0, [r0, #0]
 8086ff6:	e7f5      	b.n	8086fe4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8086ff8:	f003 fb4f 	bl	808a69a <strcmp>
 8086ffc:	e7f2      	b.n	8086fe4 <_ZNK6String6equalsEPKc+0xa>
	...

08087000 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 8087000:	6883      	ldr	r3, [r0, #8]
 8087002:	428b      	cmp	r3, r1
 8087004:	d901      	bls.n	808700a <_ZN6StringixEj+0xa>
 8087006:	6800      	ldr	r0, [r0, #0]
 8087008:	b918      	cbnz	r0, 8087012 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 808700a:	2300      	movs	r3, #0
 808700c:	4802      	ldr	r0, [pc, #8]	; (8087018 <_ZN6StringixEj+0x18>)
 808700e:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 8087010:	4770      	bx	lr
	}
	return buffer[index];
 8087012:	4408      	add	r0, r1
}
 8087014:	4770      	bx	lr
 8087016:	bf00      	nop
 8087018:	20000ae4 	.word	0x20000ae4

0808701c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808701e:	4606      	mov	r6, r0
 8087020:	460d      	mov	r5, r1
  size_t n = 0;
 8087022:	2400      	movs	r4, #0
 8087024:	188f      	adds	r7, r1, r2
  while (size--) {
 8087026:	42bd      	cmp	r5, r7
 8087028:	d00c      	beq.n	8087044 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808702a:	6833      	ldr	r3, [r6, #0]
 808702c:	4630      	mov	r0, r6
 808702e:	689b      	ldr	r3, [r3, #8]
 8087030:	f815 1b01 	ldrb.w	r1, [r5], #1
 8087034:	4798      	blx	r3
     if (chunk>=0)
 8087036:	1e03      	subs	r3, r0, #0
 8087038:	db01      	blt.n	808703e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808703a:	441c      	add	r4, r3
  while (size--) {
 808703c:	e7f3      	b.n	8087026 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808703e:	2c00      	cmp	r4, #0
 8087040:	bf08      	it	eq
 8087042:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8087044:	4620      	mov	r0, r4
 8087046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087048 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8087048:	b508      	push	{r3, lr}
  return write(str);
 808704a:	f7fb fee5 	bl	8082e18 <_ZN5Print5writeEPKc>
}
 808704e:	bd08      	pop	{r3, pc}

08087050 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8087050:	6803      	ldr	r3, [r0, #0]
 8087052:	689b      	ldr	r3, [r3, #8]
 8087054:	4718      	bx	r3

08087056 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 8087056:	b508      	push	{r3, lr}
  return write(str);
 8087058:	f7fb fede 	bl	8082e18 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
 808705c:	bd08      	pop	{r3, pc}

0808705e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 808705e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8087060:	210d      	movs	r1, #13
{
 8087062:	4605      	mov	r5, r0
  size_t n = print('\r');
 8087064:	f7ff fff4 	bl	8087050 <_ZN5Print5printEc>
  n += print('\n');
 8087068:	210a      	movs	r1, #10
  size_t n = print('\r');
 808706a:	4604      	mov	r4, r0
  n += print('\n');
 808706c:	4628      	mov	r0, r5
 808706e:	f7ff ffef 	bl	8087050 <_ZN5Print5printEc>
  return n;
}
 8087072:	4420      	add	r0, r4
 8087074:	bd38      	pop	{r3, r4, r5, pc}

08087076 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8087076:	b538      	push	{r3, r4, r5, lr}
 8087078:	4605      	mov	r5, r0
  return write(str);
 808707a:	f7fb fecd 	bl	8082e18 <_ZN5Print5writeEPKc>
 808707e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8087080:	4628      	mov	r0, r5
 8087082:	f7ff ffec 	bl	808705e <_ZN5Print7printlnEv>
  return n;
}
 8087086:	4420      	add	r0, r4
 8087088:	bd38      	pop	{r3, r4, r5, pc}

0808708a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808708a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808708c:	2a01      	cmp	r2, #1
 808708e:	bf98      	it	ls
 8087090:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8087092:	b530      	push	{r4, r5, lr}
 8087094:	b08b      	sub	sp, #44	; 0x2c
 8087096:	460c      	mov	r4, r1
  *str = '\0';
 8087098:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808709c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808709e:	4625      	mov	r5, r4
 80870a0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80870a4:	fb04 5312 	mls	r3, r4, r2, r5
 80870a8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80870aa:	2b09      	cmp	r3, #9
 80870ac:	bf94      	ite	ls
 80870ae:	3330      	addls	r3, #48	; 0x30
 80870b0:	3337      	addhi	r3, #55	; 0x37
 80870b2:	b2db      	uxtb	r3, r3
  } while(n);
 80870b4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80870b6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80870ba:	d9f0      	bls.n	808709e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80870bc:	f7fb feac 	bl	8082e18 <_ZN5Print5writeEPKc>
}
 80870c0:	b00b      	add	sp, #44	; 0x2c
 80870c2:	bd30      	pop	{r4, r5, pc}

080870c4 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80870c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80870c8:	b086      	sub	sp, #24
 80870ca:	af00      	add	r7, sp, #0
 80870cc:	4605      	mov	r5, r0
 80870ce:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80870d0:	1d38      	adds	r0, r7, #4
 80870d2:	2114      	movs	r1, #20
{
 80870d4:	4614      	mov	r4, r2
    va_copy(args2, args);
 80870d6:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80870d8:	f7ff f984 	bl	80863e4 <vsnprintf>

    if (n<bufsize)
 80870dc:	2813      	cmp	r0, #19
 80870de:	d80e      	bhi.n	80870fe <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80870e0:	4628      	mov	r0, r5
 80870e2:	1d39      	adds	r1, r7, #4
 80870e4:	f7fb fe98 	bl	8082e18 <_ZN5Print5writeEPKc>
 80870e8:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80870ea:	b11e      	cbz	r6, 80870f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80870ec:	4628      	mov	r0, r5
 80870ee:	f7ff ffb6 	bl	808705e <_ZN5Print7printlnEv>
 80870f2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80870f4:	4620      	mov	r0, r4
 80870f6:	3718      	adds	r7, #24
 80870f8:	46bd      	mov	sp, r7
 80870fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80870fe:	f100 0308 	add.w	r3, r0, #8
 8087102:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8087106:	46e8      	mov	r8, sp
        char bigger[n+1];
 8087108:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808710c:	4622      	mov	r2, r4
 808710e:	1c41      	adds	r1, r0, #1
 8087110:	683b      	ldr	r3, [r7, #0]
 8087112:	4668      	mov	r0, sp
 8087114:	f7ff f966 	bl	80863e4 <vsnprintf>
  return write(str);
 8087118:	4669      	mov	r1, sp
 808711a:	4628      	mov	r0, r5
 808711c:	f7fb fe7c 	bl	8082e18 <_ZN5Print5writeEPKc>
 8087120:	4604      	mov	r4, r0
 8087122:	46c5      	mov	sp, r8
 8087124:	e7e1      	b.n	80870ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08087126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8087126:	680b      	ldr	r3, [r1, #0]
 8087128:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808712a:	b113      	cbz	r3, 8087132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808712c:	685a      	ldr	r2, [r3, #4]
 808712e:	3201      	adds	r2, #1
 8087130:	605a      	str	r2, [r3, #4]
      }
 8087132:	4770      	bx	lr

08087134 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8087134:	4b01      	ldr	r3, [pc, #4]	; (808713c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8087136:	4a02      	ldr	r2, [pc, #8]	; (8087140 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8087138:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808713a:	4770      	bx	lr
 808713c:	20000ae8 	.word	0x20000ae8
 8087140:	0808d160 	.word	0x0808d160

08087144 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8087144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8087148:	4a15      	ldr	r2, [pc, #84]	; (80871a0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808714a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80871ac <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 808714e:	e9d2 3200 	ldrd	r3, r2, [r2]
 8087152:	18c0      	adds	r0, r0, r3
 8087154:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8087158:	4a12      	ldr	r2, [pc, #72]	; (80871a4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808715a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 808715c:	e9d2 3200 	ldrd	r3, r2, [r2]
 8087160:	18c6      	adds	r6, r0, r3
 8087162:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8087166:	e9d8 2300 	ldrd	r2, r3, [r8]
 808716a:	42bb      	cmp	r3, r7
 808716c:	bf08      	it	eq
 808716e:	42b2      	cmpeq	r2, r6
 8087170:	d013      	beq.n	808719a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8087172:	a903      	add	r1, sp, #12
 8087174:	4668      	mov	r0, sp
 8087176:	e9cd 6700 	strd	r6, r7, [sp]
 808717a:	f7f8 ff59 	bl	8080030 <localtime_r>
	calendar_time.tm_year += 1900;
 808717e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8087180:	4d09      	ldr	r5, [pc, #36]	; (80871a8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 8087182:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8087186:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8087188:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808718a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808718c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808718e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8087190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8087192:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8087196:	6823      	ldr	r3, [r4, #0]
 8087198:	602b      	str	r3, [r5, #0]
    }
}
 808719a:	b00c      	add	sp, #48	; 0x30
 808719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80871a0:	20000b20 	.word	0x20000b20
 80871a4:	20000b18 	.word	0x20000b18
 80871a8:	20000af4 	.word	0x20000af4
 80871ac:	20000b28 	.word	0x20000b28

080871b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80871b0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80871b2:	2000      	movs	r0, #0
 80871b4:	f7ff f8d6 	bl	8086364 <spark_sync_time_pending>
 80871b8:	b128      	cbz	r0, 80871c6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80871ba:	f7ff f8bb 	bl	8086334 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80871be:	f080 0001 	eor.w	r0, r0, #1
 80871c2:	b2c0      	uxtb	r0, r0
    }
 80871c4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80871c6:	2001      	movs	r0, #1
 80871c8:	e7fc      	b.n	80871c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080871cc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80871cc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80871ce:	f7ff ffb9 	bl	8087144 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80871d2:	4b02      	ldr	r3, [pc, #8]	; (80871dc <_ZN9TimeClass5monthEx+0x10>)
 80871d4:	6918      	ldr	r0, [r3, #16]
}
 80871d6:	3001      	adds	r0, #1
 80871d8:	bd08      	pop	{r3, pc}
 80871da:	bf00      	nop
 80871dc:	20000af4 	.word	0x20000af4

080871e0 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80871e0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80871e2:	490a      	ldr	r1, [pc, #40]	; (808720c <_ZN9TimeClass4zoneEf+0x2c>)
{
 80871e4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80871e6:	f003 f8e9 	bl	808a3bc <__aeabi_fcmplt>
 80871ea:	b968      	cbnz	r0, 8087208 <_ZN9TimeClass4zoneEf+0x28>
 80871ec:	4620      	mov	r0, r4
 80871ee:	4908      	ldr	r1, [pc, #32]	; (8087210 <_ZN9TimeClass4zoneEf+0x30>)
 80871f0:	f003 f902 	bl	808a3f8 <__aeabi_fcmpgt>
 80871f4:	b940      	cbnz	r0, 8087208 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80871f6:	4907      	ldr	r1, [pc, #28]	; (8087214 <_ZN9TimeClass4zoneEf+0x34>)
 80871f8:	4620      	mov	r0, r4
 80871fa:	f002 ff41 	bl	808a080 <__aeabi_fmul>
 80871fe:	f003 f96b 	bl	808a4d8 <__aeabi_f2lz>
 8087202:	4b05      	ldr	r3, [pc, #20]	; (8087218 <_ZN9TimeClass4zoneEf+0x38>)
 8087204:	e9c3 0100 	strd	r0, r1, [r3]
}
 8087208:	bd10      	pop	{r4, pc}
 808720a:	bf00      	nop
 808720c:	c1400000 	.word	0xc1400000
 8087210:	41600000 	.word	0x41600000
 8087214:	45610000 	.word	0x45610000
 8087218:	20000b20 	.word	0x20000b20

0808721c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808721c:	b530      	push	{r4, r5, lr}
 808721e:	4604      	mov	r4, r0
    t += time_zone_cache;
 8087220:	4818      	ldr	r0, [pc, #96]	; (8087284 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8087222:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8087224:	e9d0 1000 	ldrd	r1, r0, [r0]
 8087228:	1852      	adds	r2, r2, r1
 808722a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808722e:	4816      	ldr	r0, [pc, #88]	; (8087288 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8087230:	2500      	movs	r5, #0
    t += dst_current_cache;
 8087232:	e9d0 1000 	ldrd	r1, r0, [r0]
 8087236:	1852      	adds	r2, r2, r1
 8087238:	eb40 0303 	adc.w	r3, r0, r3
 808723c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8087240:	2224      	movs	r2, #36	; 0x24
 8087242:	2100      	movs	r1, #0
 8087244:	eb0d 0002 	add.w	r0, sp, r2
 8087248:	f003 f9ee 	bl	808a628 <memset>
    localtime_r(&t, &calendar_time);
 808724c:	a909      	add	r1, sp, #36	; 0x24
 808724e:	4668      	mov	r0, sp
 8087250:	f7f8 feee 	bl	8080030 <localtime_r>
    char ascstr[26] = {};
 8087254:	2216      	movs	r2, #22
 8087256:	4629      	mov	r1, r5
 8087258:	a803      	add	r0, sp, #12
 808725a:	9502      	str	r5, [sp, #8]
 808725c:	f003 f9e4 	bl	808a628 <memset>
    asctime_r(&calendar_time, ascstr);
 8087260:	a902      	add	r1, sp, #8
 8087262:	a809      	add	r0, sp, #36	; 0x24
 8087264:	f003 f98c 	bl	808a580 <asctime_r>
    int len = strlen(ascstr);
 8087268:	a802      	add	r0, sp, #8
 808726a:	f003 fa44 	bl	808a6f6 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808726e:	ab12      	add	r3, sp, #72	; 0x48
 8087270:	4418      	add	r0, r3
 8087272:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8087276:	a902      	add	r1, sp, #8
 8087278:	4620      	mov	r0, r4
 808727a:	f7ff fe01 	bl	8086e80 <_ZN6StringC1EPKc>
}
 808727e:	4620      	mov	r0, r4
 8087280:	b013      	add	sp, #76	; 0x4c
 8087282:	bd30      	pop	{r4, r5, pc}
 8087284:	20000b20 	.word	0x20000b20
 8087288:	20000b18 	.word	0x20000b18

0808728c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087290:	b0a5      	sub	sp, #148	; 0x94
 8087292:	4607      	mov	r7, r0
 8087294:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8087296:	a814      	add	r0, sp, #80	; 0x50
{
 8087298:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808729a:	223f      	movs	r2, #63	; 0x3f
{
 808729c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808729e:	f003 fa44 	bl	808a72a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80872a2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80872a4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80872a6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80872aa:	f003 fa24 	bl	808a6f6 <strlen>
 80872ae:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80872b0:	bb5d      	cbnz	r5, 808730a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80872b2:	492a      	ldr	r1, [pc, #168]	; (808735c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80872b4:	a803      	add	r0, sp, #12
 80872b6:	f003 f9fa 	bl	808a6ae <strcpy>
{
 80872ba:	2500      	movs	r5, #0
 80872bc:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80872be:	f104 3bff 	add.w	fp, r4, #4294967295
 80872c2:	45ab      	cmp	fp, r5
 80872c4:	d936      	bls.n	8087334 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80872c6:	46b1      	mov	r9, r6
 80872c8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80872cc:	f105 0a01 	add.w	sl, r5, #1
 80872d0:	2b25      	cmp	r3, #37	; 0x25
 80872d2:	d117      	bne.n	8087304 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80872d4:	7873      	ldrb	r3, [r6, #1]
 80872d6:	2b7a      	cmp	r3, #122	; 0x7a
 80872d8:	d114      	bne.n	8087304 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80872da:	a803      	add	r0, sp, #12
 80872dc:	f003 fa0b 	bl	808a6f6 <strlen>
 80872e0:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80872e2:	ab14      	add	r3, sp, #80	; 0x50
 80872e4:	1828      	adds	r0, r5, r0
 80872e6:	4418      	add	r0, r3
 80872e8:	ebab 0205 	sub.w	r2, fp, r5
 80872ec:	1cb1      	adds	r1, r6, #2
 80872ee:	f003 f98d 	bl	808a60c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80872f2:	4622      	mov	r2, r4
 80872f4:	a903      	add	r1, sp, #12
 80872f6:	4630      	mov	r0, r6
 80872f8:	f003 f988 	bl	808a60c <memcpy>
            len = strlen(format_str);
 80872fc:	a814      	add	r0, sp, #80	; 0x50
 80872fe:	f003 f9fa 	bl	808a6f6 <strlen>
 8087302:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 8087304:	464e      	mov	r6, r9
 8087306:	4655      	mov	r5, sl
 8087308:	e7d9      	b.n	80872be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808730a:	213c      	movs	r1, #60	; 0x3c
 808730c:	fb95 f3f1 	sdiv	r3, r5, r1
 8087310:	2b00      	cmp	r3, #0
 8087312:	bfb8      	it	lt
 8087314:	425b      	neglt	r3, r3
 8087316:	fbb3 f2f1 	udiv	r2, r3, r1
 808731a:	fb01 3312 	mls	r3, r1, r2, r3
 808731e:	9300      	str	r3, [sp, #0]
 8087320:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8087324:	2110      	movs	r1, #16
 8087326:	fb95 f3f3 	sdiv	r3, r5, r3
 808732a:	4a0d      	ldr	r2, [pc, #52]	; (8087360 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 808732c:	a803      	add	r0, sp, #12
 808732e:	f7ff f851 	bl	80863d4 <snprintf>
 8087332:	e7c2      	b.n	80872ba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8087334:	2100      	movs	r1, #0
 8087336:	222e      	movs	r2, #46	; 0x2e
 8087338:	a808      	add	r0, sp, #32
 808733a:	9107      	str	r1, [sp, #28]
 808733c:	f003 f974 	bl	808a628 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8087340:	4643      	mov	r3, r8
 8087342:	aa14      	add	r2, sp, #80	; 0x50
 8087344:	2132      	movs	r1, #50	; 0x32
 8087346:	a807      	add	r0, sp, #28
 8087348:	f7f8 fe7a 	bl	8080040 <strftime>
    return String(buf);
 808734c:	4638      	mov	r0, r7
 808734e:	a907      	add	r1, sp, #28
 8087350:	f7ff fd96 	bl	8086e80 <_ZN6StringC1EPKc>
}
 8087354:	4638      	mov	r0, r7
 8087356:	b025      	add	sp, #148	; 0x94
 8087358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808735c:	0808d164 	.word	0x0808d164
 8087360:	0808d166 	.word	0x0808d166

08087364 <_ZN9TimeClass6formatExPKc>:
{
 8087364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087366:	b08d      	sub	sp, #52	; 0x34
 8087368:	9d12      	ldr	r5, [sp, #72]	; 0x48
 808736a:	4604      	mov	r4, r0
 808736c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8087370:	b915      	cbnz	r5, 8087378 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8087372:	4b19      	ldr	r3, [pc, #100]	; (80873d8 <_ZN9TimeClass6formatExPKc+0x74>)
 8087374:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8087376:	b12d      	cbz	r5, 8087384 <_ZN9TimeClass6formatExPKc+0x20>
 8087378:	4b18      	ldr	r3, [pc, #96]	; (80873dc <_ZN9TimeClass6formatExPKc+0x78>)
 808737a:	4628      	mov	r0, r5
 808737c:	6819      	ldr	r1, [r3, #0]
 808737e:	f003 f98c 	bl	808a69a <strcmp>
 8087382:	b938      	cbnz	r0, 8087394 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8087384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8087388:	4620      	mov	r0, r4
 808738a:	f7ff ff47 	bl	808721c <_ZN9TimeClass7timeStrEx>
}
 808738e:	4620      	mov	r0, r4
 8087390:	b00d      	add	sp, #52	; 0x34
 8087392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8087394:	9900      	ldr	r1, [sp, #0]
 8087396:	4e12      	ldr	r6, [pc, #72]	; (80873e0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8087398:	4f12      	ldr	r7, [pc, #72]	; (80873e4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 808739a:	e9d6 3200 	ldrd	r3, r2, [r6]
 808739e:	185b      	adds	r3, r3, r1
 80873a0:	9901      	ldr	r1, [sp, #4]
 80873a2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80873a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80873aa:	181b      	adds	r3, r3, r0
 80873ac:	eb41 0202 	adc.w	r2, r1, r2
 80873b0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80873b4:	2100      	movs	r1, #0
 80873b6:	2224      	movs	r2, #36	; 0x24
 80873b8:	a803      	add	r0, sp, #12
 80873ba:	f003 f935 	bl	808a628 <memset>
    localtime_r(&t, &calendar_time);
 80873be:	a903      	add	r1, sp, #12
 80873c0:	4668      	mov	r0, sp
 80873c2:	f7f8 fe35 	bl	8080030 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80873c6:	6832      	ldr	r2, [r6, #0]
 80873c8:	683b      	ldr	r3, [r7, #0]
 80873ca:	4620      	mov	r0, r4
 80873cc:	4413      	add	r3, r2
 80873ce:	a903      	add	r1, sp, #12
 80873d0:	462a      	mov	r2, r5
 80873d2:	f7ff ff5b 	bl	808728c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80873d6:	e7da      	b.n	808738e <_ZN9TimeClass6formatExPKc+0x2a>
 80873d8:	20000af0 	.word	0x20000af0
 80873dc:	20000050 	.word	0x20000050
 80873e0:	20000b20 	.word	0x20000b20
 80873e4:	20000b18 	.word	0x20000b18

080873e8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80873e8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80873ea:	2000      	movs	r0, #0
 80873ec:	f7fe fcd0 	bl	8085d90 <hal_rtc_time_is_valid>
    if (rtcstate)
 80873f0:	4604      	mov	r4, r0
 80873f2:	b9a0      	cbnz	r0, 808741e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80873f4:	f7fe fed6 	bl	80861a4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80873f8:	2801      	cmp	r0, #1
 80873fa:	d110      	bne.n	808741e <_ZN9TimeClass7isValidEv+0x36>
 80873fc:	4620      	mov	r0, r4
 80873fe:	f7fe ff01 	bl	8086204 <system_thread_get_state>
 8087402:	b960      	cbnz	r0, 808741e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8087404:	f7ff fed4 	bl	80871b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8087408:	b910      	cbnz	r0, 8087410 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808740a:	f7fe ff83 	bl	8086314 <spark_process>
        while (_while() && !_condition()) {
 808740e:	e7f9      	b.n	8087404 <_ZN9TimeClass7isValidEv+0x1c>
 8087410:	f7ff fece 	bl	80871b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8087414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8087418:	2000      	movs	r0, #0
 808741a:	f7fe bcb9 	b.w	8085d90 <hal_rtc_time_is_valid>
}
 808741e:	4620      	mov	r0, r4
 8087420:	bd10      	pop	{r4, pc}

08087422 <_ZN9TimeClass3nowEv>:
{
 8087422:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8087424:	f7ff ffe0 	bl	80873e8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8087428:	2210      	movs	r2, #16
 808742a:	2100      	movs	r1, #0
 808742c:	4668      	mov	r0, sp
 808742e:	f003 f8fb 	bl	808a628 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8087432:	2100      	movs	r1, #0
 8087434:	4668      	mov	r0, sp
 8087436:	f7fe fcbb 	bl	8085db0 <hal_rtc_get_time>
}
 808743a:	9800      	ldr	r0, [sp, #0]
 808743c:	b005      	add	sp, #20
 808743e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08087444 <_ZN9TimeClass4hourEv>:
{
 8087444:	b508      	push	{r3, lr}
	return hour(now());
 8087446:	f7ff ffec 	bl	8087422 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808744a:	17c1      	asrs	r1, r0, #31
 808744c:	f7ff fe7a 	bl	8087144 <_ZL22Refresh_UnixTime_Cachex>
}
 8087450:	4b01      	ldr	r3, [pc, #4]	; (8087458 <_ZN9TimeClass4hourEv+0x14>)
 8087452:	6898      	ldr	r0, [r3, #8]
 8087454:	bd08      	pop	{r3, pc}
 8087456:	bf00      	nop
 8087458:	20000af4 	.word	0x20000af4

0808745c <_ZN9TimeClass6minuteEv>:
{
 808745c:	b508      	push	{r3, lr}
	return minute(now());
 808745e:	f7ff ffe0 	bl	8087422 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8087462:	17c1      	asrs	r1, r0, #31
 8087464:	f7ff fe6e 	bl	8087144 <_ZL22Refresh_UnixTime_Cachex>
}
 8087468:	4b01      	ldr	r3, [pc, #4]	; (8087470 <_ZN9TimeClass6minuteEv+0x14>)
 808746a:	6858      	ldr	r0, [r3, #4]
 808746c:	bd08      	pop	{r3, pc}
 808746e:	bf00      	nop
 8087470:	20000af4 	.word	0x20000af4

08087474 <_ZN9TimeClass6secondEv>:
{
 8087474:	b508      	push	{r3, lr}
	return second(now());
 8087476:	f7ff ffd4 	bl	8087422 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808747a:	17c1      	asrs	r1, r0, #31
 808747c:	f7ff fe62 	bl	8087144 <_ZL22Refresh_UnixTime_Cachex>
}
 8087480:	4b01      	ldr	r3, [pc, #4]	; (8087488 <_ZN9TimeClass6secondEv+0x14>)
 8087482:	6818      	ldr	r0, [r3, #0]
 8087484:	bd08      	pop	{r3, pc}
 8087486:	bf00      	nop
 8087488:	20000af4 	.word	0x20000af4

0808748c <_ZN9TimeClass3dayEv>:
{
 808748c:	b508      	push	{r3, lr}
	return day(now());
 808748e:	f7ff ffc8 	bl	8087422 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8087492:	17c1      	asrs	r1, r0, #31
 8087494:	f7ff fe56 	bl	8087144 <_ZL22Refresh_UnixTime_Cachex>
}
 8087498:	4b01      	ldr	r3, [pc, #4]	; (80874a0 <_ZN9TimeClass3dayEv+0x14>)
 808749a:	68d8      	ldr	r0, [r3, #12]
 808749c:	bd08      	pop	{r3, pc}
 808749e:	bf00      	nop
 80874a0:	20000af4 	.word	0x20000af4

080874a4 <_ZN9TimeClass5monthEv>:
{
 80874a4:	b508      	push	{r3, lr}
	return month(now());
 80874a6:	f7ff ffbc 	bl	8087422 <_ZN9TimeClass3nowEv>
}
 80874aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80874ae:	17c1      	asrs	r1, r0, #31
 80874b0:	f7ff be8c 	b.w	80871cc <_ZN9TimeClass5monthEx>

080874b4 <_ZN9TimeClass4yearEv>:
{
 80874b4:	b508      	push	{r3, lr}
	return year(now());
 80874b6:	f7ff ffb4 	bl	8087422 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80874ba:	17c1      	asrs	r1, r0, #31
 80874bc:	f7ff fe42 	bl	8087144 <_ZL22Refresh_UnixTime_Cachex>
}
 80874c0:	4b01      	ldr	r3, [pc, #4]	; (80874c8 <_ZN9TimeClass4yearEv+0x14>)
 80874c2:	6958      	ldr	r0, [r3, #20]
 80874c4:	bd08      	pop	{r3, pc}
 80874c6:	bf00      	nop
 80874c8:	20000af4 	.word	0x20000af4

080874cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80874cc:	4b02      	ldr	r3, [pc, #8]	; (80874d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80874ce:	681a      	ldr	r2, [r3, #0]
 80874d0:	4b02      	ldr	r3, [pc, #8]	; (80874dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80874d2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80874d4:	4770      	bx	lr
 80874d6:	bf00      	nop
 80874d8:	20000050 	.word	0x20000050
 80874dc:	20000af0 	.word	0x20000af0

080874e0 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
 80874e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80874e4:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80874e8:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 80874ec:	4604      	mov	r4, r0
 80874ee:	460d      	mov	r5, r1
    if (fromEnd == fromStart) {
 80874f0:	4640      	mov	r0, r8
 80874f2:	4649      	mov	r1, r9
{
 80874f4:	4616      	mov	r6, r2
 80874f6:	461f      	mov	r7, r3
    if (fromEnd == fromStart) {
 80874f8:	f002 fc12 	bl	8089d20 <__aeabi_dcmpeq>
 80874fc:	bb38      	cbnz	r0, 808754e <_Z3mapddddd+0x6e>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80874fe:	4632      	mov	r2, r6
 8087500:	463b      	mov	r3, r7
 8087502:	4620      	mov	r0, r4
 8087504:	4629      	mov	r1, r5
 8087506:	f001 ffeb 	bl	80894e0 <__aeabi_dsub>
 808750a:	4652      	mov	r2, sl
 808750c:	4604      	mov	r4, r0
 808750e:	460d      	mov	r5, r1
 8087510:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8087514:	465b      	mov	r3, fp
 8087516:	f001 ffe3 	bl	80894e0 <__aeabi_dsub>
 808751a:	4602      	mov	r2, r0
 808751c:	460b      	mov	r3, r1
 808751e:	4620      	mov	r0, r4
 8087520:	4629      	mov	r1, r5
 8087522:	f002 f995 	bl	8089850 <__aeabi_dmul>
 8087526:	4632      	mov	r2, r6
 8087528:	4604      	mov	r4, r0
 808752a:	460d      	mov	r5, r1
 808752c:	463b      	mov	r3, r7
 808752e:	4640      	mov	r0, r8
 8087530:	4649      	mov	r1, r9
 8087532:	f001 ffd5 	bl	80894e0 <__aeabi_dsub>
 8087536:	4602      	mov	r2, r0
 8087538:	460b      	mov	r3, r1
 808753a:	4620      	mov	r0, r4
 808753c:	4629      	mov	r1, r5
 808753e:	f002 fab1 	bl	8089aa4 <__aeabi_ddiv>
 8087542:	4652      	mov	r2, sl
 8087544:	465b      	mov	r3, fp
 8087546:	f001 ffcd 	bl	80894e4 <__adddf3>
 808754a:	4604      	mov	r4, r0
 808754c:	460d      	mov	r5, r1
}
 808754e:	4620      	mov	r0, r4
 8087550:	4629      	mov	r1, r5
 8087552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087556 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8087556:	2100      	movs	r1, #0
 8087558:	f7fe be34 	b.w	80861c4 <system_delay_ms>

0808755c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 808755c:	b530      	push	{r4, r5, lr}
 808755e:	685b      	ldr	r3, [r3, #4]
 8087560:	b085      	sub	sp, #20
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 8087562:	6804      	ldr	r4, [r0, #0]
 8087564:	9303      	str	r3, [sp, #12]
 8087566:	4d05      	ldr	r5, [pc, #20]	; (808757c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x20>)
 8087568:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808756c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 808756e:	9502      	str	r5, [sp, #8]
 8087570:	9300      	str	r3, [sp, #0]
 8087572:	ab02      	add	r3, sp, #8
 8087574:	47a0      	blx	r4
    }
 8087576:	b005      	add	sp, #20
 8087578:	bd30      	pop	{r4, r5, pc}
 808757a:	bf00      	nop
 808757c:	0808d258 	.word	0x0808d258

08087580 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 8087580:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 8087582:	6804      	ldr	r4, [r0, #0]
 8087584:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8087586:	46a4      	mov	ip, r4
    }
 8087588:	bc10      	pop	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 808758a:	4760      	bx	ip

0808758c <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 808758c:	6803      	ldr	r3, [r0, #0]
 808758e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087590:	4718      	bx	r3
	...

08087594 <_ZN3UDP8remoteIPEv>:
 8087594:	4a02      	ldr	r2, [pc, #8]	; (80875a0 <_ZN3UDP8remoteIPEv+0xc>)
 8087596:	6002      	str	r2, [r0, #0]
 8087598:	6a0a      	ldr	r2, [r1, #32]
 808759a:	6042      	str	r2, [r0, #4]
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 808759c:	4770      	bx	lr
 808759e:	bf00      	nop
 80875a0:	0808d258 	.word	0x0808d258

080875a4 <_ZN3UDP10remotePortEv>:
    virtual uint16_t remotePort() { return _remotePort; };
 80875a4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80875a6:	4770      	bx	lr

080875a8 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80875a8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 80875aa:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 80875ac:	1a10      	subs	r0, r2, r0
 80875ae:	4770      	bx	lr

080875b0 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80875b0:	b530      	push	{r4, r5, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80875b2:	6803      	ldr	r3, [r0, #0]
{
 80875b4:	b085      	sub	sp, #20
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80875b6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80875b8:	4b09      	ldr	r3, [pc, #36]	; (80875e0 <_ZN3UDP9endPacketEv+0x30>)
{
 80875ba:	4604      	mov	r4, r0
 80875bc:	9302      	str	r3, [sp, #8]
 80875be:	6a03      	ldr	r3, [r0, #32]
 80875c0:	9303      	str	r3, [sp, #12]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80875c2:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80875c4:	9300      	str	r3, [sp, #0]
 80875c6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80875c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80875ca:	ab02      	add	r3, sp, #8
 80875cc:	47a8      	blx	r5
 80875ce:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80875d0:	6823      	ldr	r3, [r4, #0]
 80875d2:	4620      	mov	r0, r4
 80875d4:	69db      	ldr	r3, [r3, #28]
 80875d6:	4798      	blx	r3
    return result;
}
 80875d8:	4628      	mov	r0, r5
 80875da:	b005      	add	sp, #20
 80875dc:	bd30      	pop	{r4, r5, pc}
 80875de:	bf00      	nop
 80875e0:	0808d258 	.word	0x0808d258

080875e4 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80875e4:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
 80875e6:	6803      	ldr	r3, [r0, #0]
{
 80875e8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
 80875ec:	2201      	movs	r2, #1
 80875ee:	68db      	ldr	r3, [r3, #12]
 80875f0:	f10d 0107 	add.w	r1, sp, #7
 80875f4:	4798      	blx	r3
}
 80875f6:	b003      	add	sp, #12
 80875f8:	f85d fb04 	ldr.w	pc, [sp], #4

080875fc <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80875fc:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80875fe:	6803      	ldr	r3, [r0, #0]
{
 8087600:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 8087602:	691b      	ldr	r3, [r3, #16]
 8087604:	4798      	blx	r3
 8087606:	b128      	cbz	r0, 8087614 <_ZN3UDP4readEv+0x18>
 8087608:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 808760a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808760c:	1c59      	adds	r1, r3, #1
 808760e:	84e1      	strh	r1, [r4, #38]	; 0x26
 8087610:	5cd0      	ldrb	r0, [r2, r3]
}
 8087612:	bd10      	pop	{r4, pc}
  return available() ? _buffer[_offset++] : -1;
 8087614:	f04f 30ff 	mov.w	r0, #4294967295
 8087618:	e7fb      	b.n	8087612 <_ZN3UDP4readEv+0x16>

0808761a <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 808761a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 808761c:	6803      	ldr	r3, [r0, #0]
{
 808761e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 8087620:	691b      	ldr	r3, [r3, #16]
 8087622:	4798      	blx	r3
 8087624:	b118      	cbz	r0, 808762e <_ZN3UDP4peekEv+0x14>
 8087626:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087628:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808762a:	5cd0      	ldrb	r0, [r2, r3]
}
 808762c:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
 808762e:	f04f 30ff 	mov.w	r0, #4294967295
 8087632:	e7fb      	b.n	808762c <_ZN3UDP4peekEv+0x12>

08087634 <_ZN3UDP5flushEv>:

void UDP::flush()
{
}
 8087634:	4770      	bx	lr

08087636 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 8087636:	4603      	mov	r3, r0
 8087638:	4608      	mov	r0, r1
 808763a:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 808763c:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    return p.write(_buffer+_offset, size);
 808763e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    int size = _total - _offset;
 8087640:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    return p.write(_buffer+_offset, size);
 8087642:	6803      	ldr	r3, [r0, #0]
 8087644:	1a52      	subs	r2, r2, r1
 8087646:	68db      	ldr	r3, [r3, #12]
 8087648:	4421      	add	r1, r4
}
 808764a:	bc10      	pop	{r4}
    return p.write(_buffer+_offset, size);
 808764c:	4718      	bx	r3

0808764e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 808764e:	f1a0 0010 	sub.w	r0, r0, #16
 8087652:	f7ff bff0 	b.w	8087636 <_ZNK3UDP7printToER5Print>

08087656 <_ZN3UDP5beginEtm>:
{
 8087656:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808765a:	4616      	mov	r6, r2
    stop();
 808765c:	6803      	ldr	r3, [r0, #0]
{
 808765e:	4688      	mov	r8, r1
    stop();
 8087660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 8087662:	4604      	mov	r4, r0
    stop();
 8087664:	4798      	blx	r3
    if(Network.from(nif).ready())
 8087666:	4630      	mov	r0, r6
 8087668:	f001 fa7c 	bl	8088b64 <_ZN5spark12NetworkClass4fromEm>
 808766c:	6803      	ldr	r3, [r0, #0]
 808766e:	68db      	ldr	r3, [r3, #12]
 8087670:	4798      	blx	r3
 8087672:	4605      	mov	r5, r0
 8087674:	b188      	cbz	r0, 808769a <_ZN3UDP5beginEtm+0x44>
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 8087676:	2102      	movs	r1, #2
 8087678:	4643      	mov	r3, r8
 808767a:	2211      	movs	r2, #17
 808767c:	4608      	mov	r0, r1
 808767e:	9600      	str	r6, [sp, #0]
 8087680:	f7fe fc96 	bl	8085fb0 <socket_create>
 8087684:	6160      	str	r0, [r4, #20]
        if (socket_handle_valid(_sock))
 8087686:	f7fe fc8b 	bl	8085fa0 <socket_handle_valid>
 808768a:	4607      	mov	r7, r0
 808768c:	b148      	cbz	r0, 80876a2 <_ZN3UDP5beginEtm+0x4c>
  _offset = 0;
 808768e:	2300      	movs	r3, #0
            _port = port;
 8087690:	f8a4 8018 	strh.w	r8, [r4, #24]
  _offset = 0;
 8087694:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8087696:	8523      	strh	r3, [r4, #40]	; 0x28
            _nif = nif;
 8087698:	6366      	str	r6, [r4, #52]	; 0x34
}
 808769a:	4628      	mov	r0, r5
 808769c:	b002      	add	sp, #8
 808769e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stop();
 80876a2:	6823      	ldr	r3, [r4, #0]
 80876a4:	4620      	mov	r0, r4
 80876a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80876a8:	4798      	blx	r3
            bound = false;
 80876aa:	463d      	mov	r5, r7
 80876ac:	e7f5      	b.n	808769a <_ZN3UDP5beginEtm+0x44>

080876ae <_ZN3UDP4stopEv>:
{
 80876ae:	b538      	push	{r3, r4, r5, lr}
 80876b0:	4604      	mov	r4, r0
    if (isOpen(_sock))
 80876b2:	6945      	ldr	r5, [r0, #20]
   return sd != socket_handle_invalid();
 80876b4:	f7fe fca4 	bl	8086000 <socket_handle_invalid>
    if (isOpen(_sock))
 80876b8:	4285      	cmp	r5, r0
 80876ba:	d002      	beq.n	80876c2 <_ZN3UDP4stopEv+0x14>
        socket_close(_sock);
 80876bc:	6960      	ldr	r0, [r4, #20]
 80876be:	f7fe fc97 	bl	8085ff0 <socket_close>
    _sock = socket_handle_invalid();
 80876c2:	f7fe fc9d 	bl	8086000 <socket_handle_invalid>
  _offset = 0;
 80876c6:	2300      	movs	r3, #0
    _sock = socket_handle_invalid();
 80876c8:	6160      	str	r0, [r4, #20]
  _offset = 0;
 80876ca:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 80876cc:	8523      	strh	r3, [r4, #40]	; 0x28
}
 80876ce:	bd38      	pop	{r3, r4, r5, pc}

080876d0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
{
 80876d0:	b510      	push	{r4, lr}
    remoteSockAddr.sa_family = AF_INET;
 80876d2:	2402      	movs	r4, #2
{
 80876d4:	b086      	sub	sp, #24
    remoteSockAddr.sa_family = AF_INET;
 80876d6:	f8ad 4008 	strh.w	r4, [sp, #8]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80876da:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80876de:	ba64      	rev16	r4, r4
 80876e0:	f8ad 400a 	strh.w	r4, [sp, #10]
    remoteSockAddr.sa_data[2] = remoteIP[0];
 80876e4:	79dc      	ldrb	r4, [r3, #7]
 80876e6:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80876ea:	799c      	ldrb	r4, [r3, #6]
 80876ec:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80876f0:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80876f2:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80876f4:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80876f8:	f88d 300f 	strb.w	r3, [sp, #15]
    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80876fc:	2310      	movs	r3, #16
 80876fe:	9301      	str	r3, [sp, #4]
 8087700:	ab02      	add	r3, sp, #8
 8087702:	9300      	str	r3, [sp, #0]
 8087704:	6940      	ldr	r0, [r0, #20]
 8087706:	2300      	movs	r3, #0
 8087708:	f7fe fc6a 	bl	8085fe0 <socket_sendto>
}
 808770c:	b006      	add	sp, #24
 808770e:	bd10      	pop	{r4, pc}

08087710 <_ZN3UDP5writeEPKhj>:
{
 8087710:	b570      	push	{r4, r5, r6, lr}
 8087712:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8087714:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8087716:	8cee      	ldrh	r6, [r5, #38]	; 0x26
 8087718:	b168      	cbz	r0, 8087736 <_ZN3UDP5writeEPKhj+0x26>
 808771a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 808771c:	1b9c      	subs	r4, r3, r6
    if (size>available)
 808771e:	4294      	cmp	r4, r2
 8087720:	bf28      	it	cs
 8087722:	4614      	movcs	r4, r2
    memcpy(_buffer+_offset, buffer, size);
 8087724:	4430      	add	r0, r6
 8087726:	4622      	mov	r2, r4
 8087728:	f002 ff70 	bl	808a60c <memcpy>
    _offset += size;
 808772c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
}
 808772e:	4620      	mov	r0, r4
    _offset += size;
 8087730:	4423      	add	r3, r4
 8087732:	84eb      	strh	r3, [r5, #38]	; 0x26
}
 8087734:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 8087736:	4604      	mov	r4, r0
 8087738:	e7f1      	b.n	808771e <_ZN3UDP5writeEPKhj+0xe>

0808773a <_ZN3UDP4readEPhj>:
{
 808773a:	b570      	push	{r4, r5, r6, lr}
    if (available())
 808773c:	6803      	ldr	r3, [r0, #0]
{
 808773e:	4604      	mov	r4, r0
    if (available())
 8087740:	691b      	ldr	r3, [r3, #16]
{
 8087742:	460e      	mov	r6, r1
 8087744:	4615      	mov	r5, r2
    if (available())
 8087746:	4798      	blx	r3
 8087748:	b190      	cbz	r0, 8087770 <_ZN3UDP4readEPhj+0x36>
    read = min(int(len), available());
 808774a:	6823      	ldr	r3, [r4, #0]
 808774c:	4620      	mov	r0, r4
 808774e:	691b      	ldr	r3, [r3, #16]
 8087750:	4798      	blx	r3
 8087752:	4285      	cmp	r5, r0
 8087754:	bfa8      	it	ge
 8087756:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 8087758:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 808775a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808775c:	462a      	mov	r2, r5
 808775e:	4419      	add	r1, r3
 8087760:	4630      	mov	r0, r6
 8087762:	f002 ff53 	bl	808a60c <memcpy>
      _offset += read;
 8087766:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8087768:	442b      	add	r3, r5
 808776a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
 808776c:	4628      	mov	r0, r5
 808776e:	bd70      	pop	{r4, r5, r6, pc}
    int read = -1;
 8087770:	f04f 35ff 	mov.w	r5, #4294967295
    return read;
 8087774:	e7fa      	b.n	808776c <_ZN3UDP4readEPhj+0x32>

08087776 <_ZN3UDP13receivePacketEPhjm>:
{
 8087776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808777a:	4604      	mov	r4, r0
 808777c:	b08a      	sub	sp, #40	; 0x28
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 808777e:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
 8087780:	461f      	mov	r7, r3
 8087782:	460d      	mov	r5, r1
 8087784:	4616      	mov	r6, r2
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 8087786:	f001 f9ed 	bl	8088b64 <_ZN5spark12NetworkClass4fromEm>
 808778a:	6803      	ldr	r3, [r0, #0]
 808778c:	68db      	ldr	r3, [r3, #12]
 808778e:	4798      	blx	r3
 8087790:	b928      	cbnz	r0, 808779e <_ZN3UDP13receivePacketEPhjm+0x28>
    int ret = -1;
 8087792:	f04f 35ff 	mov.w	r5, #4294967295
}
 8087796:	4628      	mov	r0, r5
 8087798:	b00a      	add	sp, #40	; 0x28
 808779a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 808779e:	f8d4 8014 	ldr.w	r8, [r4, #20]
   return sd != socket_handle_invalid();
 80877a2:	f7fe fc2d 	bl	8086000 <socket_handle_invalid>
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80877a6:	4580      	cmp	r8, r0
 80877a8:	d0f3      	beq.n	8087792 <_ZN3UDP13receivePacketEPhjm+0x1c>
 80877aa:	2d00      	cmp	r5, #0
 80877ac:	d0f1      	beq.n	8087792 <_ZN3UDP13receivePacketEPhjm+0x1c>
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80877ae:	2310      	movs	r3, #16
 80877b0:	9305      	str	r3, [sp, #20]
        ret = socket_receivefrom_ex(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen, timeout, nullptr);
 80877b2:	2300      	movs	r3, #0
 80877b4:	aa05      	add	r2, sp, #20
 80877b6:	9201      	str	r2, [sp, #4]
 80877b8:	aa06      	add	r2, sp, #24
 80877ba:	4629      	mov	r1, r5
 80877bc:	9200      	str	r2, [sp, #0]
 80877be:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80877c2:	4632      	mov	r2, r6
 80877c4:	6960      	ldr	r0, [r4, #20]
 80877c6:	f7fe fc2b 	bl	8086020 <socket_receivefrom_ex>
        if (ret >= 0)
 80877ca:	1e05      	subs	r5, r0, #0
 80877cc:	dbe3      	blt.n	8087796 <_ZN3UDP13receivePacketEPhjm+0x20>
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80877ce:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80877d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80877d6:	a907      	add	r1, sp, #28
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80877d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80877dc:	84a3      	strh	r3, [r4, #36]	; 0x24
            _remoteIP = &remoteSockAddr.sa_data[2];
 80877de:	f104 001c 	add.w	r0, r4, #28
 80877e2:	f000 fe27 	bl	8088434 <_ZN9IPAddressaSEPKh>
    return ret;
 80877e6:	e7d6      	b.n	8087796 <_ZN3UDP13receivePacketEPhjm+0x20>

080877e8 <_ZN3UDP11beginPacketEPKct>:
{
 80877e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80877ea:	4605      	mov	r5, r0
 80877ec:	b089      	sub	sp, #36	; 0x24
    if(Network.from(_nif).ready())
 80877ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
 80877f0:	460e      	mov	r6, r1
 80877f2:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80877f4:	f001 f9b6 	bl	8088b64 <_ZN5spark12NetworkClass4fromEm>
 80877f8:	6803      	ldr	r3, [r0, #0]
 80877fa:	68db      	ldr	r3, [r3, #12]
 80877fc:	4798      	blx	r3
 80877fe:	b1c8      	cbz	r0, 8087834 <_ZN3UDP11beginPacketEPKct+0x4c>
        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 8087800:	4630      	mov	r0, r6
 8087802:	f002 ff78 	bl	808a6f6 <strlen>
 8087806:	2400      	movs	r4, #0
 8087808:	b281      	uxth	r1, r0
 808780a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 808780c:	4630      	mov	r0, r6
 808780e:	9400      	str	r4, [sp, #0]
 8087810:	aa03      	add	r2, sp, #12
 8087812:	f7fe fc55 	bl	80860c0 <inet_gethostbyname>
 8087816:	b978      	cbnz	r0, 8087838 <_ZN3UDP11beginPacketEPKct+0x50>
            IPAddress remote_addr(ip_addr);
 8087818:	a903      	add	r1, sp, #12
 808781a:	a804      	add	r0, sp, #16
 808781c:	f000 fde0 	bl	80883e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8087820:	4a06      	ldr	r2, [pc, #24]	; (808783c <_ZN3UDP11beginPacketEPKct+0x54>)
            return beginPacket(remote_addr, port);
 8087822:	682b      	ldr	r3, [r5, #0]
 8087824:	9206      	str	r2, [sp, #24]
 8087826:	9a05      	ldr	r2, [sp, #20]
 8087828:	4628      	mov	r0, r5
 808782a:	9207      	str	r2, [sp, #28]
 808782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808782e:	463a      	mov	r2, r7
 8087830:	a906      	add	r1, sp, #24
 8087832:	4798      	blx	r3
}
 8087834:	b009      	add	sp, #36	; 0x24
 8087836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 8087838:	4620      	mov	r0, r4
 808783a:	e7fb      	b.n	8087834 <_ZN3UDP11beginPacketEPKct+0x4c>
 808783c:	0808d258 	.word	0x0808d258

08087840 <_ZN3UDPC1Ev>:
UDP::UDP() :
 8087840:	b538      	push	{r3, r4, r5, lr}
 8087842:	2500      	movs	r5, #0
 8087844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087848:	e9c0 5301 	strd	r5, r3, [r0, #4]
        _buffer_allocated(false)
 808784c:	4b0c      	ldr	r3, [pc, #48]	; (8087880 <_ZN3UDPC1Ev+0x40>)
UDP::UDP() :
 808784e:	4604      	mov	r4, r0
        _buffer_allocated(false)
 8087850:	f103 0208 	add.w	r2, r3, #8
 8087854:	336c      	adds	r3, #108	; 0x6c
 8087856:	6002      	str	r2, [r0, #0]
 8087858:	6103      	str	r3, [r0, #16]
        _sock(socket_handle_invalid()),
 808785a:	f7fe fbd1 	bl	8086000 <socket_handle_invalid>
        _buffer_allocated(false)
 808785e:	6160      	str	r0, [r4, #20]
 8087860:	f104 001c 	add.w	r0, r4, #28
 8087864:	f000 fdb4 	bl	80883d0 <_ZN9IPAddressC1Ev>
 8087868:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 808786c:	4620      	mov	r0, r4
        _buffer_allocated(false)
 808786e:	e9c4 350c 	strd	r3, r5, [r4, #48]	; 0x30
 8087872:	84e5      	strh	r5, [r4, #38]	; 0x26
 8087874:	8525      	strh	r5, [r4, #40]	; 0x28
 8087876:	62e5      	str	r5, [r4, #44]	; 0x2c
 8087878:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
}
 808787c:	bd38      	pop	{r3, r4, r5, pc}
 808787e:	bf00      	nop
 8087880:	0808d190 	.word	0x0808d190

08087884 <_ZN3UDP13releaseBufferEv>:
{
 8087884:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 8087886:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 808788a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 808788c:	b123      	cbz	r3, 8087898 <_ZN3UDP13releaseBufferEv+0x14>
 808788e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8087890:	b110      	cbz	r0, 8087898 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 8087892:	2101      	movs	r1, #1
 8087894:	f001 fc49 	bl	808912a <_ZdlPvj>
    _buffer = NULL;
 8087898:	2300      	movs	r3, #0
 808789a:	62e3      	str	r3, [r4, #44]	; 0x2c
    _buffer_allocated = false;
 808789c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    _buffer_size = 0;
 80878a0:	6323      	str	r3, [r4, #48]	; 0x30
  _offset = 0;
 80878a2:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 80878a4:	8523      	strh	r3, [r4, #40]	; 0x28
}
 80878a6:	bd10      	pop	{r4, pc}

080878a8 <_ZN3UDP9setBufferEjPh>:
{
 80878a8:	b570      	push	{r4, r5, r6, lr}
 80878aa:	4604      	mov	r4, r0
 80878ac:	4616      	mov	r6, r2
 80878ae:	460d      	mov	r5, r1
    releaseBuffer();
 80878b0:	f7ff ffe8 	bl	8087884 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
 80878b4:	2300      	movs	r3, #0
    _buffer = buffer;
 80878b6:	62e6      	str	r6, [r4, #44]	; 0x2c
    _buffer_size = 0;
 80878b8:	6323      	str	r3, [r4, #48]	; 0x30
    if (!_buffer && buf_size) {         // requested allocation
 80878ba:	b12e      	cbz	r6, 80878c8 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
 80878bc:	6325      	str	r5, [r4, #48]	; 0x30
    return _buffer_size;
 80878be:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 80878c0:	3800      	subs	r0, #0
 80878c2:	bf18      	it	ne
 80878c4:	2001      	movne	r0, #1
 80878c6:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
 80878c8:	2d00      	cmp	r5, #0
 80878ca:	d0f8      	beq.n	80878be <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
 80878cc:	4628      	mov	r0, r5
 80878ce:	f7f8 fbfe 	bl	80800ce <_Znaj>
        _buffer_allocated = true;
 80878d2:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
 80878d4:	62e0      	str	r0, [r4, #44]	; 0x2c
        _buffer_allocated = true;
 80878d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    if (_buffer) {
 80878da:	2800      	cmp	r0, #0
 80878dc:	d0ef      	beq.n	80878be <_ZN3UDP9setBufferEjPh+0x16>
 80878de:	e7ed      	b.n	80878bc <_ZN3UDP9setBufferEjPh+0x14>

080878e0 <_ZN3UDP11beginPacketE9IPAddresst>:
{
 80878e0:	b570      	push	{r4, r5, r6, lr}
 80878e2:	4615      	mov	r5, r2
    if (!_buffer && _buffer_size) {
 80878e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80878e6:	4604      	mov	r4, r0
 80878e8:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
 80878ea:	b91a      	cbnz	r2, 80878f4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80878ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80878ee:	b109      	cbz	r1, 80878f4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80878f0:	f7ff ffda 	bl	80878a8 <_ZN3UDP9setBufferEjPh>
 80878f4:	6873      	ldr	r3, [r6, #4]
}
 80878f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80878f8:	6223      	str	r3, [r4, #32]
  _offset = 0;
 80878fa:	2300      	movs	r3, #0
    _remotePort = port;
 80878fc:	84a5      	strh	r5, [r4, #36]	; 0x24
  _offset = 0;
 80878fe:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 8087900:	8523      	strh	r3, [r4, #40]	; 0x28
}
 8087902:	bd70      	pop	{r4, r5, r6, pc}

08087904 <_ZN3UDP11parsePacketEm>:
{
 8087904:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 8087906:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8087908:	4604      	mov	r4, r0
 808790a:	460d      	mov	r5, r1
    if (!_buffer && _buffer_size) {
 808790c:	b91a      	cbnz	r2, 8087916 <_ZN3UDP11parsePacketEm+0x12>
 808790e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8087910:	b109      	cbz	r1, 8087916 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
 8087912:	f7ff ffc9 	bl	80878a8 <_ZN3UDP9setBufferEjPh>
  _offset = 0;
 8087916:	2300      	movs	r3, #0
    if (_buffer && _buffer_size) {
 8087918:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  _offset = 0;
 808791a:	84e3      	strh	r3, [r4, #38]	; 0x26
  _total = 0;
 808791c:	8523      	strh	r3, [r4, #40]	; 0x28
    if (_buffer && _buffer_size) {
 808791e:	b149      	cbz	r1, 8087934 <_ZN3UDP11parsePacketEm+0x30>
 8087920:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8087922:	b13a      	cbz	r2, 8087934 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
 8087924:	6823      	ldr	r3, [r4, #0]
 8087926:	4620      	mov	r0, r4
 8087928:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 808792a:	462b      	mov	r3, r5
 808792c:	47b0      	blx	r6
        if (result>0) {
 808792e:	2800      	cmp	r0, #0
            _total = result;
 8087930:	bfc8      	it	gt
 8087932:	8520      	strhgt	r0, [r4, #40]	; 0x28
    return available();
 8087934:	6823      	ldr	r3, [r4, #0]
 8087936:	4620      	mov	r0, r4
}
 8087938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return available();
 808793c:	691b      	ldr	r3, [r3, #16]
 808793e:	4718      	bx	r3

08087940 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8087940:	b510      	push	{r4, lr}
 8087942:	4604      	mov	r4, r0
 8087944:	f7f8 fcd1 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
 8087948:	4620      	mov	r0, r4
 808794a:	bd10      	pop	{r4, pc}

0808794c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 808794c:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808794e:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8087950:	460b      	mov	r3, r1
 8087952:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087954:	c803      	ldmia	r0, {r0, r1}
 8087956:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808795a:	e893 0003 	ldmia.w	r3, {r0, r1}
 808795e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8087962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8087966:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808796a:	b002      	add	sp, #8
 808796c:	bd10      	pop	{r4, pc}
	...

08087970 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8087970:	2300      	movs	r3, #0
 8087972:	4803      	ldr	r0, [pc, #12]	; (8087980 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8087974:	4a03      	ldr	r2, [pc, #12]	; (8087984 <_GLOBAL__sub_I_RGB+0x14>)
 8087976:	4904      	ldr	r1, [pc, #16]	; (8087988 <_GLOBAL__sub_I_RGB+0x18>)
 8087978:	6083      	str	r3, [r0, #8]
 808797a:	f001 bbd1 	b.w	8089120 <__aeabi_atexit>
 808797e:	bf00      	nop
 8087980:	20000b30 	.word	0x20000b30
 8087984:	20000230 	.word	0x20000230
 8087988:	08087941 	.word	0x08087941

0808798c <_ZN14CellularSignalD1Ev>:
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 808798c:	4770      	bx	lr

0808798e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 808798e:	7d00      	ldrb	r0, [r0, #20]
 8087990:	4770      	bx	lr

08087992 <_ZN14CellularSignalD0Ev>:
 8087992:	b510      	push	{r4, lr}
 8087994:	4604      	mov	r4, r0
 8087996:	2128      	movs	r1, #40	; 0x28
 8087998:	f001 fbc7 	bl	808912a <_ZdlPvj>
 808799c:	4620      	mov	r0, r4
 808799e:	bd10      	pop	{r4, pc}

080879a0 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
 80879a0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80879a2:	7d03      	ldrb	r3, [r0, #20]
 80879a4:	b15b      	cbz	r3, 80879be <_ZNK14CellularSignal11getStrengthEv+0x1e>
 80879a6:	69c0      	ldr	r0, [r0, #28]
 80879a8:	2800      	cmp	r0, #0
 80879aa:	db08      	blt.n	80879be <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 80879ac:	f002 fb14 	bl	8089fd8 <__aeabi_i2f>
 80879b0:	4904      	ldr	r1, [pc, #16]	; (80879c4 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 80879b2:	f002 fc19 	bl	808a1e8 <__aeabi_fdiv>
 80879b6:	4904      	ldr	r1, [pc, #16]	; (80879c8 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 80879b8:	f002 fb62 	bl	808a080 <__aeabi_fmul>
    }

    return -1.0f;
}
 80879bc:	bd08      	pop	{r3, pc}
    return -1.0f;
 80879be:	4803      	ldr	r0, [pc, #12]	; (80879cc <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 80879c0:	e7fc      	b.n	80879bc <_ZNK14CellularSignal11getStrengthEv+0x1c>
 80879c2:	bf00      	nop
 80879c4:	477fff00 	.word	0x477fff00
 80879c8:	42c80000 	.word	0x42c80000
 80879cc:	bf800000 	.word	0xbf800000

080879d0 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
 80879d0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 80879d2:	7d03      	ldrb	r3, [r0, #20]
 80879d4:	b14b      	cbz	r3, 80879ea <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 80879d6:	6980      	ldr	r0, [r0, #24]
 80879d8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80879dc:	d005      	beq.n	80879ea <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 80879de:	f002 fafb 	bl	8089fd8 <__aeabi_i2f>
 80879e2:	4903      	ldr	r1, [pc, #12]	; (80879f0 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 80879e4:	f002 fc00 	bl	808a1e8 <__aeabi_fdiv>
    }

    return 0.0f;
}
 80879e8:	bd08      	pop	{r3, pc}
    return 0.0f;
 80879ea:	2000      	movs	r0, #0
 80879ec:	e7fc      	b.n	80879e8 <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 80879ee:	bf00      	nop
 80879f0:	42c80000 	.word	0x42c80000

080879f4 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
 80879f4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80879f6:	7d03      	ldrb	r3, [r0, #20]
 80879f8:	b15b      	cbz	r3, 8087a12 <_ZNK14CellularSignal10getQualityEv+0x1e>
 80879fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80879fc:	2800      	cmp	r0, #0
 80879fe:	db08      	blt.n	8087a12 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8087a00:	f002 faea 	bl	8089fd8 <__aeabi_i2f>
 8087a04:	4904      	ldr	r1, [pc, #16]	; (8087a18 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8087a06:	f002 fbef 	bl	808a1e8 <__aeabi_fdiv>
 8087a0a:	4904      	ldr	r1, [pc, #16]	; (8087a1c <_ZNK14CellularSignal10getQualityEv+0x28>)
 8087a0c:	f002 fb38 	bl	808a080 <__aeabi_fmul>
    }

    return -1.0f;
}
 8087a10:	bd08      	pop	{r3, pc}
    return -1.0f;
 8087a12:	4803      	ldr	r0, [pc, #12]	; (8087a20 <_ZNK14CellularSignal10getQualityEv+0x2c>)
 8087a14:	e7fc      	b.n	8087a10 <_ZNK14CellularSignal10getQualityEv+0x1c>
 8087a16:	bf00      	nop
 8087a18:	477fff00 	.word	0x477fff00
 8087a1c:	42c80000 	.word	0x42c80000
 8087a20:	bf800000 	.word	0xbf800000

08087a24 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
 8087a24:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8087a26:	7d03      	ldrb	r3, [r0, #20]
 8087a28:	b14b      	cbz	r3, 8087a3e <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 8087a2a:	6a00      	ldr	r0, [r0, #32]
 8087a2c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8087a30:	d005      	beq.n	8087a3e <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 8087a32:	f002 fad1 	bl	8089fd8 <__aeabi_i2f>
 8087a36:	4903      	ldr	r1, [pc, #12]	; (8087a44 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8087a38:	f002 fbd6 	bl	808a1e8 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8087a3c:	bd08      	pop	{r3, pc}
    return 0.0f;
 8087a3e:	2000      	movs	r0, #0
 8087a40:	e7fc      	b.n	8087a3c <_ZNK14CellularSignal15getQualityValueEv+0x18>
 8087a42:	bf00      	nop
 8087a44:	42c80000 	.word	0x42c80000

08087a48 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8087a48:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 8087a4a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 8087a4c:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 8087a4e:	da0a      	bge.n	8087a66 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 8087a50:	212d      	movs	r1, #45	; 0x2d
 8087a52:	f7ff fafd 	bl	8087050 <_ZN5Print5printEc>
 8087a56:	4605      	mov	r5, r0
            val = -n;
 8087a58:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8087a5a:	220a      	movs	r2, #10
 8087a5c:	4630      	mov	r0, r6
 8087a5e:	f7ff fb14 	bl	808708a <_ZN5Print11printNumberEmh>
    }
}
 8087a62:	4428      	add	r0, r5
 8087a64:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8087a66:	4621      	mov	r1, r4
        size_t t = 0;
 8087a68:	2500      	movs	r5, #0
 8087a6a:	e7f6      	b.n	8087a5a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

08087a6c <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
 8087a6c:	b570      	push	{r4, r5, r6, lr}
 8087a6e:	460c      	mov	r4, r1
 8087a70:	4605      	mov	r5, r0
 8087a72:	6881      	ldr	r1, [r0, #8]
 8087a74:	4620      	mov	r0, r4
 8087a76:	f7ff ffe7 	bl	8087a48 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8087a7a:	212c      	movs	r1, #44	; 0x2c
 8087a7c:	4606      	mov	r6, r0
 8087a7e:	4620      	mov	r0, r4
 8087a80:	f7ff fae6 	bl	8087050 <_ZN5Print5printEc>
 8087a84:	68e9      	ldr	r1, [r5, #12]
 8087a86:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 8087a88:	4620      	mov	r0, r4
 8087a8a:	f7ff ffdd 	bl	8087a48 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
 8087a8e:	4430      	add	r0, r6
 8087a90:	bd70      	pop	{r4, r5, r6, pc}

08087a92 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8087a92:	f1a0 0004 	sub.w	r0, r0, #4
 8087a96:	f7ff bfe9 	b.w	8087a6c <_ZNK14CellularSignal7printToER5Print>

08087a9a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 8087a9a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8087a9c:	460d      	mov	r5, r1
 8087a9e:	f100 0410 	add.w	r4, r0, #16
 8087aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8087aa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8087aaa:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8087aae:	2001      	movs	r0, #1
 8087ab0:	bd30      	pop	{r4, r5, pc}
	...

08087ab4 <_ZN8particle6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
 8087ab4:	b508      	push	{r3, lr}
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
 8087ab6:	0909      	lsrs	r1, r1, #4
 8087ab8:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8087abc:	f002 fa8c 	bl	8089fd8 <__aeabi_i2f>
        return value / 800.0;
 8087ac0:	4901      	ldr	r1, [pc, #4]	; (8087ac8 <_ZN8particle6detail9_getVCellEhh+0x14>)
 8087ac2:	f002 fb91 	bl	808a1e8 <__aeabi_fdiv>
    }
 8087ac6:	bd08      	pop	{r3, pc}
 8087ac8:	44480000 	.word	0x44480000

08087acc <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8087acc:	6800      	ldr	r0, [r0, #0]
 8087ace:	f000 bfde 	b.w	8088a8e <_ZN7TwoWire4lockEv>

08087ad2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8087ad2:	b510      	push	{r4, lr}
 8087ad4:	4604      	mov	r4, r0
      lock_(_lock) {
 8087ad6:	6001      	str	r1, [r0, #0]
 8087ad8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8087ada:	b10a      	cbz	r2, 8087ae0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8087adc:	f7ff fff6 	bl	8087acc <_ZN9FuelGauge4lockEv>
}
 8087ae0:	4620      	mov	r0, r4
 8087ae2:	bd10      	pop	{r4, pc}

08087ae4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8087ae4:	b538      	push	{r3, r4, r5, lr}
 8087ae6:	4604      	mov	r4, r0
 8087ae8:	460d      	mov	r5, r1
            return &Wire3;
 8087aea:	f001 faf1 	bl	80890d0 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8087aee:	462a      	mov	r2, r5
            return &Wire3;
 8087af0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8087af2:	4620      	mov	r0, r4
 8087af4:	f7ff ffed 	bl	8087ad2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8087af8:	4620      	mov	r0, r4
 8087afa:	bd38      	pop	{r3, r4, r5, pc}

08087afc <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8087afc:	6800      	ldr	r0, [r0, #0]
 8087afe:	f000 bfcf 	b.w	8088aa0 <_ZN7TwoWire6unlockEv>

08087b02 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8087b02:	b510      	push	{r4, lr}
    if (lock_) {
 8087b04:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 8087b06:	4604      	mov	r4, r0
    if (lock_) {
 8087b08:	b10b      	cbz	r3, 8087b0e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8087b0a:	f7ff fff7 	bl	8087afc <_ZN9FuelGauge6unlockEv>
}
 8087b0e:	4620      	mov	r0, r4
 8087b10:	bd10      	pop	{r4, pc}

08087b12 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8087b12:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8087b16:	4604      	mov	r4, r0
 8087b18:	460d      	mov	r5, r1
 8087b1a:	4617      	mov	r7, r2
 8087b1c:	461e      	mov	r6, r3
 8087b1e:	f7ff ffd5 	bl	8087acc <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087b22:	2336      	movs	r3, #54	; 0x36
 8087b24:	f88d 3000 	strb.w	r3, [sp]
 8087b28:	2300      	movs	r3, #0
 8087b2a:	f04f 0801 	mov.w	r8, #1
 8087b2e:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 8087b30:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8087b32:	4669      	mov	r1, sp
 8087b34:	6820      	ldr	r0, [r4, #0]
 8087b36:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087b38:	f88d 8008 	strb.w	r8, [sp, #8]
 8087b3c:	f000 ff88 	bl	8088a50 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8087b40:	6820      	ldr	r0, [r4, #0]
 8087b42:	4629      	mov	r1, r5
 8087b44:	6803      	ldr	r3, [r0, #0]
 8087b46:	689b      	ldr	r3, [r3, #8]
 8087b48:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8087b4a:	4641      	mov	r1, r8
 8087b4c:	6820      	ldr	r0, [r4, #0]
 8087b4e:	f000 ff97 	bl	8088a80 <_ZN7TwoWire15endTransmissionEh>
 8087b52:	4605      	mov	r5, r0
 8087b54:	b140      	cbz	r0, 8087b68 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 8087b56:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8087b5a:	4620      	mov	r0, r4
 8087b5c:	f7ff ffce 	bl	8087afc <_ZN9FuelGauge6unlockEv>
}
 8087b60:	4628      	mov	r0, r5
 8087b62:	b004      	add	sp, #16
 8087b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8087b68:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8087b6a:	4669      	mov	r1, sp
 8087b6c:	6820      	ldr	r0, [r4, #0]
 8087b6e:	9301      	str	r3, [sp, #4]
 8087b70:	f000 ff3e 	bl	80889f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8087b74:	2802      	cmp	r0, #2
 8087b76:	d1ee      	bne.n	8087b56 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8087b78:	6820      	ldr	r0, [r4, #0]
 8087b7a:	6803      	ldr	r3, [r0, #0]
 8087b7c:	695b      	ldr	r3, [r3, #20]
 8087b7e:	4798      	blx	r3
 8087b80:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8087b82:	6820      	ldr	r0, [r4, #0]
 8087b84:	6803      	ldr	r3, [r0, #0]
 8087b86:	695b      	ldr	r3, [r3, #20]
 8087b88:	4798      	blx	r3
 8087b8a:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8087b8c:	e7e5      	b.n	8087b5a <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08087b90 <_ZN9FuelGauge8getVCellEv>:
    byte MSB = 0;
 8087b90:	2300      	movs	r3, #0
float FuelGauge::getVCell() {
 8087b92:	b507      	push	{r0, r1, r2, lr}
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8087b94:	2102      	movs	r1, #2
    byte MSB = 0;
 8087b96:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8087b9a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8087b9e:	f10d 0206 	add.w	r2, sp, #6
 8087ba2:	f10d 0307 	add.w	r3, sp, #7
 8087ba6:	f7ff ffb4 	bl	8087b12 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8087baa:	b940      	cbnz	r0, 8087bbe <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
 8087bac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8087bb0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8087bb4:	b003      	add	sp, #12
 8087bb6:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
 8087bba:	f7ff bf7b 	b.w	8087ab4 <_ZN8particle6detail9_getVCellEhh>
}
 8087bbe:	4802      	ldr	r0, [pc, #8]	; (8087bc8 <_ZN9FuelGauge8getVCellEv+0x38>)
 8087bc0:	b003      	add	sp, #12
 8087bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8087bc6:	bf00      	nop
 8087bc8:	bf800000 	.word	0xbf800000

08087bcc <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8087bcc:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8087bce:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8087bd0:	2104      	movs	r1, #4
    byte MSB = 0;
 8087bd2:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8087bd6:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8087bda:	f10d 0206 	add.w	r2, sp, #6
 8087bde:	f10d 0307 	add.w	r3, sp, #7
 8087be2:	f7ff ff96 	bl	8087b12 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8087be6:	b9a0      	cbnz	r0, 8087c12 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8087be8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8087bec:	f001 fdc6 	bl	808977c <__aeabi_i2d>
 8087bf0:	2200      	movs	r2, #0
 8087bf2:	4b09      	ldr	r3, [pc, #36]	; (8087c18 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8087bf4:	f001 fe2c 	bl	8089850 <__aeabi_dmul>
 8087bf8:	f002 f8e4 	bl	8089dc4 <__aeabi_d2f>
 8087bfc:	4604      	mov	r4, r0
        return MSB + decimal;
 8087bfe:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8087c02:	f002 f9e9 	bl	8089fd8 <__aeabi_i2f>
 8087c06:	4601      	mov	r1, r0
 8087c08:	4620      	mov	r0, r4
 8087c0a:	f002 f931 	bl	8089e70 <__addsf3>
}
 8087c0e:	b002      	add	sp, #8
 8087c10:	bd10      	pop	{r4, pc}
        return -1.0f;
 8087c12:	4802      	ldr	r0, [pc, #8]	; (8087c1c <_ZN9FuelGauge6getSoCEv+0x50>)
 8087c14:	e7fb      	b.n	8087c0e <_ZN9FuelGauge6getSoCEv+0x42>
 8087c16:	bf00      	nop
 8087c18:	3f700000 	.word	0x3f700000
 8087c1c:	bf800000 	.word	0xbf800000

08087c20 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
 8087c20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8087c24:	4616      	mov	r6, r2
 8087c26:	4604      	mov	r4, r0
 8087c28:	461d      	mov	r5, r3
 8087c2a:	460f      	mov	r7, r1
      { _M_device.lock(); }
 8087c2c:	f7ff ff4e 	bl	8087acc <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087c30:	2336      	movs	r3, #54	; 0x36
 8087c32:	f88d 3000 	strb.w	r3, [sp]
 8087c36:	2300      	movs	r3, #0
 8087c38:	f04f 0801 	mov.w	r8, #1
 8087c3c:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 8087c3e:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8087c40:	4669      	mov	r1, sp
 8087c42:	6820      	ldr	r0, [r4, #0]
 8087c44:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087c46:	f88d 8008 	strb.w	r8, [sp, #8]
 8087c4a:	f000 ff01 	bl	8088a50 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
 8087c4e:	6820      	ldr	r0, [r4, #0]
 8087c50:	4639      	mov	r1, r7
 8087c52:	6803      	ldr	r3, [r0, #0]
 8087c54:	689b      	ldr	r3, [r3, #8]
 8087c56:	4798      	blx	r3
    i2c_.write(MSB);
 8087c58:	6820      	ldr	r0, [r4, #0]
 8087c5a:	4631      	mov	r1, r6
 8087c5c:	6803      	ldr	r3, [r0, #0]
 8087c5e:	689b      	ldr	r3, [r3, #8]
 8087c60:	4798      	blx	r3
    i2c_.write(LSB);
 8087c62:	6820      	ldr	r0, [r4, #0]
 8087c64:	4629      	mov	r1, r5
 8087c66:	6803      	ldr	r3, [r0, #0]
 8087c68:	689b      	ldr	r3, [r3, #8]
 8087c6a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8087c6c:	4641      	mov	r1, r8
 8087c6e:	6820      	ldr	r0, [r4, #0]
 8087c70:	f000 ff06 	bl	8088a80 <_ZN7TwoWire15endTransmissionEh>
 8087c74:	2800      	cmp	r0, #0
 8087c76:	bf0c      	ite	eq
 8087c78:	2500      	moveq	r5, #0
 8087c7a:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8087c7e:	4620      	mov	r0, r4
 8087c80:	f7ff ff3c 	bl	8087afc <_ZN9FuelGauge6unlockEv>
}
 8087c84:	4628      	mov	r0, r5
 8087c86:	b004      	add	sp, #16
 8087c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087c8c <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
 8087c8c:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
 8087c8e:	2240      	movs	r2, #64	; 0x40
 8087c90:	2300      	movs	r3, #0
 8087c92:	2106      	movs	r1, #6
 8087c94:	f7ff ffc4 	bl	8087c20 <_ZN9FuelGauge13writeRegisterEhhh>
}
 8087c98:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8087c9c:	bd08      	pop	{r3, pc}
	...

08087ca0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8087ca0:	4b01      	ldr	r3, [pc, #4]	; (8087ca8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8087ca2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8087ca4:	4770      	bx	lr
 8087ca6:	bf00      	nop
 8087ca8:	20000058 	.word	0x20000058

08087cac <serialEventRun>:
{
 8087cac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8087cae:	4b17      	ldr	r3, [pc, #92]	; (8087d0c <serialEventRun+0x60>)
 8087cb0:	b143      	cbz	r3, 8087cc4 <serialEventRun+0x18>
 8087cb2:	f000 fc37 	bl	8088524 <_Z16_fetch_usbserialv>
 8087cb6:	6803      	ldr	r3, [r0, #0]
 8087cb8:	691b      	ldr	r3, [r3, #16]
 8087cba:	4798      	blx	r3
 8087cbc:	2800      	cmp	r0, #0
 8087cbe:	dd01      	ble.n	8087cc4 <serialEventRun+0x18>
        serialEvent();
 8087cc0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8087cc4:	4b12      	ldr	r3, [pc, #72]	; (8087d10 <serialEventRun+0x64>)
 8087cc6:	b143      	cbz	r3, 8087cda <serialEventRun+0x2e>
 8087cc8:	f000 fe12 	bl	80888f0 <_Z22__fetch_global_Serial1v>
 8087ccc:	6803      	ldr	r3, [r0, #0]
 8087cce:	691b      	ldr	r3, [r3, #16]
 8087cd0:	4798      	blx	r3
 8087cd2:	2800      	cmp	r0, #0
 8087cd4:	dd01      	ble.n	8087cda <serialEventRun+0x2e>
        serialEvent1();
 8087cd6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8087cda:	4b0e      	ldr	r3, [pc, #56]	; (8087d14 <serialEventRun+0x68>)
 8087cdc:	b10b      	cbz	r3, 8087ce2 <serialEventRun+0x36>
 8087cde:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8087ce2:	4b0d      	ldr	r3, [pc, #52]	; (8087d18 <serialEventRun+0x6c>)
 8087ce4:	b10b      	cbz	r3, 8087cea <serialEventRun+0x3e>
 8087ce6:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8087cea:	4b0c      	ldr	r3, [pc, #48]	; (8087d1c <serialEventRun+0x70>)
 8087cec:	b10b      	cbz	r3, 8087cf2 <serialEventRun+0x46>
 8087cee:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8087cf2:	4b0b      	ldr	r3, [pc, #44]	; (8087d20 <serialEventRun+0x74>)
 8087cf4:	b143      	cbz	r3, 8087d08 <serialEventRun+0x5c>
 8087cf6:	f000 fc53 	bl	80885a0 <_Z17_fetch_usbserial1v>
 8087cfa:	6803      	ldr	r3, [r0, #0]
 8087cfc:	691b      	ldr	r3, [r3, #16]
 8087cfe:	4798      	blx	r3
 8087d00:	2800      	cmp	r0, #0
 8087d02:	dd01      	ble.n	8087d08 <serialEventRun+0x5c>
        usbSerialEvent1();
 8087d04:	f3af 8000 	nop.w
}
 8087d08:	bd08      	pop	{r3, pc}
 8087d0a:	bf00      	nop
	...

08087d24 <_post_loop>:
{
 8087d24:	b508      	push	{r3, lr}
	serialEventRun();
 8087d26:	f7ff ffc1 	bl	8087cac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8087d2a:	f7fe f829 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8087d2e:	4b01      	ldr	r3, [pc, #4]	; (8087d34 <_post_loop+0x10>)
 8087d30:	6018      	str	r0, [r3, #0]
}
 8087d32:	bd08      	pop	{r3, pc}
 8087d34:	20001090 	.word	0x20001090

08087d38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8087d38:	4802      	ldr	r0, [pc, #8]	; (8087d44 <_Z33system_initialize_user_backup_ramv+0xc>)
 8087d3a:	4a03      	ldr	r2, [pc, #12]	; (8087d48 <_Z33system_initialize_user_backup_ramv+0x10>)
 8087d3c:	4903      	ldr	r1, [pc, #12]	; (8087d4c <_Z33system_initialize_user_backup_ramv+0x14>)
 8087d3e:	1a12      	subs	r2, r2, r0
 8087d40:	f002 bc64 	b.w	808a60c <memcpy>
 8087d44:	40024000 	.word	0x40024000
 8087d48:	40024004 	.word	0x40024004
 8087d4c:	0808d750 	.word	0x0808d750

08087d50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8087d50:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8087d52:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8087d54:	461a      	mov	r2, r3
 8087d56:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8087d5a:	9300      	str	r3, [sp, #0]
 8087d5c:	f7fe fa64 	bl	8086228 <system_ctrl_set_result>
}
 8087d60:	b003      	add	sp, #12
 8087d62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08087d68 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8087d68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8087d6a:	8843      	ldrh	r3, [r0, #2]
 8087d6c:	2b0a      	cmp	r3, #10
 8087d6e:	d008      	beq.n	8087d82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8087d70:	2b50      	cmp	r3, #80	; 0x50
 8087d72:	d10b      	bne.n	8087d8c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8087d74:	4b09      	ldr	r3, [pc, #36]	; (8087d9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8087d76:	681b      	ldr	r3, [r3, #0]
 8087d78:	b14b      	cbz	r3, 8087d8e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8087d7a:	b003      	add	sp, #12
 8087d7c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8087d80:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8087d82:	f7ff ffe5 	bl	8087d50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8087d86:	b003      	add	sp, #12
 8087d88:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8087d8c:	2300      	movs	r3, #0
 8087d8e:	461a      	mov	r2, r3
 8087d90:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8087d94:	9300      	str	r3, [sp, #0]
 8087d96:	f7fe fa47 	bl	8086228 <system_ctrl_set_result>
}
 8087d9a:	e7f4      	b.n	8087d86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8087d9c:	20000b44 	.word	0x20000b44

08087da0 <module_user_init_hook>:
{
 8087da0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8087da2:	4c12      	ldr	r4, [pc, #72]	; (8087dec <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8087da4:	2100      	movs	r1, #0
 8087da6:	4812      	ldr	r0, [pc, #72]	; (8087df0 <module_user_init_hook+0x50>)
 8087da8:	f7fe fb34 	bl	8086414 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8087dac:	4d11      	ldr	r5, [pc, #68]	; (8087df4 <module_user_init_hook+0x54>)
 8087dae:	6823      	ldr	r3, [r4, #0]
 8087db0:	42ab      	cmp	r3, r5
 8087db2:	bf0c      	ite	eq
 8087db4:	2201      	moveq	r2, #1
 8087db6:	2200      	movne	r2, #0
 8087db8:	4b0f      	ldr	r3, [pc, #60]	; (8087df8 <module_user_init_hook+0x58>)
 8087dba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8087dbc:	d002      	beq.n	8087dc4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8087dbe:	f7ff ffbb 	bl	8087d38 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8087dc2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8087dc4:	f7fd ffbc 	bl	8085d40 <HAL_RNG_GetRandomNumber>
 8087dc8:	4604      	mov	r4, r0
    srand(seed);
 8087dca:	f002 fc35 	bl	808a638 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8087dce:	4b0b      	ldr	r3, [pc, #44]	; (8087dfc <module_user_init_hook+0x5c>)
 8087dd0:	b113      	cbz	r3, 8087dd8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8087dd2:	4620      	mov	r0, r4
 8087dd4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8087dd8:	2100      	movs	r1, #0
 8087dda:	4808      	ldr	r0, [pc, #32]	; (8087dfc <module_user_init_hook+0x5c>)
 8087ddc:	f7fe faca 	bl	8086374 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8087de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8087de4:	2100      	movs	r1, #0
 8087de6:	4806      	ldr	r0, [pc, #24]	; (8087e00 <module_user_init_hook+0x60>)
 8087de8:	f7fe ba14 	b.w	8086214 <system_ctrl_set_app_request_handler>
 8087dec:	40024000 	.word	0x40024000
 8087df0:	08087ca1 	.word	0x08087ca1
 8087df4:	9a271c1e 	.word	0x9a271c1e
 8087df8:	20000b40 	.word	0x20000b40
 8087dfc:	00000000 	.word	0x00000000
 8087e00:	08087d69 	.word	0x08087d69

08087e04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087e04:	4770      	bx	lr

08087e06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8087e06:	2000      	movs	r0, #0
 8087e08:	4770      	bx	lr

08087e0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087e0a:	b510      	push	{r4, lr}
 8087e0c:	4604      	mov	r4, r0
 8087e0e:	2110      	movs	r1, #16
 8087e10:	f001 f98b 	bl	808912a <_ZdlPvj>
 8087e14:	4620      	mov	r0, r4
 8087e16:	bd10      	pop	{r4, pc}

08087e18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8087e18:	b508      	push	{r3, lr}
      { delete this; }
 8087e1a:	f7ff fff6 	bl	8087e0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8087e1e:	bd08      	pop	{r3, pc}

08087e20 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8087e20:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8087e22:	b530      	push	{r4, r5, lr}
        type_(type) {
 8087e24:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8087e28:	6002      	str	r2, [r0, #0]
 8087e2a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8087e2c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8087e2e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8087e30:	680c      	ldr	r4, [r1, #0]
 8087e32:	8085      	strh	r5, [r0, #4]
 8087e34:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8087e36:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8087e38:	bd30      	pop	{r4, r5, pc}

08087e3a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8087e3a:	b510      	push	{r4, lr}
 8087e3c:	4604      	mov	r4, r0
    free((void*)msg_);
 8087e3e:	6800      	ldr	r0, [r0, #0]
 8087e40:	f7fe faa8 	bl	8086394 <free>
}
 8087e44:	4620      	mov	r0, r4
 8087e46:	bd10      	pop	{r4, pc}

08087e48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8087e48:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8087e4a:	68c4      	ldr	r4, [r0, #12]
 8087e4c:	b1f4      	cbz	r4, 8087e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 8087e4e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8087e50:	2b02      	cmp	r3, #2
 8087e52:	d103      	bne.n	8087e5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8087e54:	f104 000c 	add.w	r0, r4, #12
 8087e58:	f7ff ffef 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8087e5c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8087e5e:	b135      	cbz	r5, 8087e6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8087e60:	4628      	mov	r0, r5
 8087e62:	f7f8 fa42 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
 8087e66:	2110      	movs	r1, #16
 8087e68:	4628      	mov	r0, r5
 8087e6a:	f001 f95e 	bl	808912a <_ZdlPvj>
 8087e6e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8087e70:	b135      	cbz	r5, 8087e80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8087e72:	4628      	mov	r0, r5
 8087e74:	f7f8 fa39 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
 8087e78:	2110      	movs	r1, #16
 8087e7a:	4628      	mov	r0, r5
 8087e7c:	f001 f955 	bl	808912a <_ZdlPvj>
 8087e80:	4620      	mov	r0, r4
 8087e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087e86:	2114      	movs	r1, #20
 8087e88:	f001 b94f 	b.w	808912a <_ZdlPvj>
 8087e8c:	bd38      	pop	{r3, r4, r5, pc}

08087e8e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8087e8e:	b510      	push	{r4, lr}
 8087e90:	b088      	sub	sp, #32
 8087e92:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8087e94:	4668      	mov	r0, sp
 8087e96:	f7fe fff3 	bl	8086e80 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8087e9a:	4669      	mov	r1, sp
 8087e9c:	a804      	add	r0, sp, #16
 8087e9e:	f7ff f82e 	bl	8086efe <_ZN6StringC1ERKS_>
 8087ea2:	a804      	add	r0, sp, #16
 8087ea4:	47a0      	blx	r4
 8087ea6:	4604      	mov	r4, r0
 8087ea8:	a804      	add	r0, sp, #16
 8087eaa:	f7fe ff9f 	bl	8086dec <_ZN6StringD1Ev>
    String p(param);
 8087eae:	4668      	mov	r0, sp
 8087eb0:	f7fe ff9c 	bl	8086dec <_ZN6StringD1Ev>
}
 8087eb4:	4620      	mov	r0, r4
 8087eb6:	b008      	add	sp, #32
 8087eb8:	bd10      	pop	{r4, pc}

08087eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8087eba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8087ebc:	2300      	movs	r3, #0
         size = sizeof(*this);
 8087ebe:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8087ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8087ec4:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8087ec6:	4669      	mov	r1, sp
 8087ec8:	461a      	mov	r2, r3
 8087eca:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8087ecc:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8087ed0:	f8ad 4000 	strh.w	r4, [sp]
 8087ed4:	f7fe fa16 	bl	8086304 <spark_function>
}
 8087ed8:	b004      	add	sp, #16
 8087eda:	bd10      	pop	{r4, pc}

08087edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8087edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8087ede:	460e      	mov	r6, r1
 8087ee0:	4604      	mov	r4, r0
 8087ee2:	f856 3b04 	ldr.w	r3, [r6], #4
 8087ee6:	460d      	mov	r5, r1
 8087ee8:	a801      	add	r0, sp, #4
 8087eea:	4631      	mov	r1, r6
 8087eec:	9300      	str	r3, [sp, #0]
 8087eee:	f7ff f91a 	bl	8087126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087ef2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8087ef4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087ef6:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8087ef8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8087efa:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8087efc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8087efe:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 8087f00:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8087f02:	f7f9 f927 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087f06:	4630      	mov	r0, r6
 8087f08:	f7f9 f924 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8087f0c:	4628      	mov	r0, r5
 8087f0e:	2108      	movs	r1, #8
 8087f10:	f001 f90b 	bl	808912a <_ZdlPvj>
        return p;
    }
 8087f14:	4620      	mov	r0, r4
 8087f16:	b002      	add	sp, #8
 8087f18:	bd70      	pop	{r4, r5, r6, pc}

08087f1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 8087f1a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8087f1c:	b510      	push	{r4, lr}
      if (_M_empty())
 8087f1e:	b90a      	cbnz	r2, 8087f24 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8087f20:	f001 f9bc 	bl	808929c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087f24:	68c3      	ldr	r3, [r0, #12]
    }
 8087f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087f2a:	4718      	bx	r3

08087f2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8087f2c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8087f2e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8087f30:	f100 0110 	add.w	r1, r0, #16
 8087f34:	f7ff fff1 	bl	8087f1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8087f38:	bd08      	pop	{r3, pc}

08087f3a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8087f3a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8087f3c:	b510      	push	{r4, lr}
      if (_M_empty())
 8087f3e:	b90a      	cbnz	r2, 8087f44 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8087f40:	f001 f9ac 	bl	808929c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087f44:	68c3      	ldr	r3, [r0, #12]
    }
 8087f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087f4a:	4718      	bx	r3

08087f4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8087f4c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8087f4e:	6800      	ldr	r0, [r0, #0]
 8087f50:	f100 0110 	add.w	r1, r0, #16
 8087f54:	f7ff fff1 	bl	8087f3a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8087f58:	bd08      	pop	{r3, pc}
	...

08087f5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8087f5c:	b538      	push	{r3, r4, r5, lr}
 8087f5e:	2300      	movs	r3, #0
 8087f60:	4604      	mov	r4, r0
 8087f62:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087f64:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8087f66:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087f68:	f7f8 f8af 	bl	80800ca <_Znwj>
 8087f6c:	b128      	cbz	r0, 8087f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8087f6e:	2301      	movs	r3, #1
 8087f70:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8087f74:	4b02      	ldr	r3, [pc, #8]	; (8087f80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8087f76:	60c5      	str	r5, [r0, #12]
 8087f78:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087f7a:	6020      	str	r0, [r4, #0]
	}
 8087f7c:	4620      	mov	r0, r4
 8087f7e:	bd38      	pop	{r3, r4, r5, pc}
 8087f80:	0808d23c 	.word	0x0808d23c

08087f84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8087f84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087f86:	2300      	movs	r3, #0
 8087f88:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8087f8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8087f8c:	4604      	mov	r4, r0
 8087f8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8087f90:	b12b      	cbz	r3, 8087f9e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087f92:	2202      	movs	r2, #2
 8087f94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087f96:	68eb      	ldr	r3, [r5, #12]
 8087f98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087f9a:	68ab      	ldr	r3, [r5, #8]
 8087f9c:	60a3      	str	r3, [r4, #8]
    }
 8087f9e:	4620      	mov	r0, r4
 8087fa0:	bd38      	pop	{r3, r4, r5, pc}
	...

08087fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8087fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087fa6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8087fa8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8087faa:	4668      	mov	r0, sp
 8087fac:	f7ff ff38 	bl	8087e20 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8087fb0:	f04f 0302 	mov.w	r3, #2
 8087fb4:	e8d4 2f4f 	ldrexb	r2, [r4]
 8087fb8:	2a00      	cmp	r2, #0
 8087fba:	d103      	bne.n	8087fc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8087fbc:	e8c4 3f41 	strexb	r1, r3, [r4]
 8087fc0:	2900      	cmp	r1, #0
 8087fc2:	d1f7      	bne.n	8087fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8087fc4:	d125      	bne.n	8088012 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8087fc6:	f104 050c 	add.w	r5, r4, #12
 8087fca:	4669      	mov	r1, sp
 8087fcc:	4628      	mov	r0, r5
 8087fce:	f7ff ff27 	bl	8087e20 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8087fd2:	2301      	movs	r3, #1
 8087fd4:	f3bf 8f5b 	dmb	ish
 8087fd8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8087fda:	2000      	movs	r0, #0
 8087fdc:	f3bf 8f5b 	dmb	ish
 8087fe0:	f104 0308 	add.w	r3, r4, #8
 8087fe4:	e853 6f00 	ldrex	r6, [r3]
 8087fe8:	e843 0200 	strex	r2, r0, [r3]
 8087fec:	2a00      	cmp	r2, #0
 8087fee:	d1f9      	bne.n	8087fe4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8087ff0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8087ff4:	b16e      	cbz	r6, 8088012 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8087ff6:	f7fe f8f5 	bl	80861e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8087ffa:	b178      	cbz	r0, 808801c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8087ffc:	4629      	mov	r1, r5
 8087ffe:	4630      	mov	r0, r6
 8088000:	f7ff ff8b 	bl	8087f1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8088004:	4630      	mov	r0, r6
 8088006:	f7f8 f970 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808800a:	2110      	movs	r1, #16
 808800c:	4630      	mov	r0, r6
 808800e:	f001 f88c 	bl	808912a <_ZdlPvj>
        p_->setError(std::move(error));
 8088012:	4668      	mov	r0, sp
 8088014:	f7ff ff11 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
    }
 8088018:	b009      	add	sp, #36	; 0x24
 808801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808801c:	4631      	mov	r1, r6
 808801e:	a802      	add	r0, sp, #8
 8088020:	f7ff ffb0 	bl	8087f84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8088024:	68e0      	ldr	r0, [r4, #12]
 8088026:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808802a:	b108      	cbz	r0, 8088030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808802c:	f002 fb48 	bl	808a6c0 <strdup>
        type_(type) {
 8088030:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088032:	2010      	movs	r0, #16
 8088034:	f8ad 501c 	strh.w	r5, [sp, #28]
 8088038:	f7f8 f847 	bl	80800ca <_Znwj>
 808803c:	4605      	mov	r5, r0
 808803e:	b1e8      	cbz	r0, 808807c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8088040:	2700      	movs	r7, #0
 8088042:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088044:	2018      	movs	r0, #24
 8088046:	f7f8 f840 	bl	80800ca <_Znwj>
 808804a:	4604      	mov	r4, r0
 808804c:	b188      	cbz	r0, 8088072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808804e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8088050:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8088052:	a802      	add	r0, sp, #8
 8088054:	f7ff fc7a 	bl	808794c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088058:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808805a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808805c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808805e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8088060:	9204      	str	r2, [sp, #16]
 8088062:	68e2      	ldr	r2, [r4, #12]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088064:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8088066:	60e3      	str	r3, [r4, #12]
 8088068:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808806c:	9205      	str	r2, [sp, #20]
 808806e:	f7ff fed7 	bl	8087e20 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8088072:	4b08      	ldr	r3, [pc, #32]	; (8088094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088074:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8088076:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8088078:	4b07      	ldr	r3, [pc, #28]	; (8088098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808807a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808807c:	a806      	add	r0, sp, #24
 808807e:	f7ff fedc 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8088082:	a802      	add	r0, sp, #8
 8088084:	f7f8 f931 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8088088:	2200      	movs	r2, #0
 808808a:	4629      	mov	r1, r5
 808808c:	4803      	ldr	r0, [pc, #12]	; (808809c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808808e:	f7fe f8b1 	bl	80861f4 <application_thread_invoke>
 8088092:	e7b7      	b.n	8088004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8088094:	08087f2d 	.word	0x08087f2d
 8088098:	080881c5 	.word	0x080881c5
 808809c:	08088941 	.word	0x08088941

080880a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80880a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80880a4:	b08a      	sub	sp, #40	; 0x28
 80880a6:	4605      	mov	r5, r0
 80880a8:	460c      	mov	r4, r1
 80880aa:	4617      	mov	r7, r2
 80880ac:	4698      	mov	r8, r3
 80880ae:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80880b2:	f7fe f93f 	bl	8086334 <spark_cloud_flag_connected>
 80880b6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80880b8:	4682      	mov	sl, r0
 80880ba:	bb38      	cbnz	r0, 808810c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80880bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80880c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80880c2:	a905      	add	r1, sp, #20
 80880c4:	4630      	mov	r0, r6
 80880c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80880ca:	f7ff fea9 	bl	8087e20 <_ZN8particle5ErrorC1EOS0_>
 80880ce:	2014      	movs	r0, #20
 80880d0:	f7f7 fffb 	bl	80800ca <_Znwj>
 80880d4:	4604      	mov	r4, r0
 80880d6:	b148      	cbz	r0, 80880ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80880d8:	2302      	movs	r3, #2
 80880da:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80880dc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80880de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80880e2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80880e4:	4631      	mov	r1, r6
 80880e6:	300c      	adds	r0, #12
 80880e8:	f7ff fe9a 	bl	8087e20 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80880ec:	4628      	mov	r0, r5
	: __shared_count(__p)
 80880ee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80880f0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80880f4:	f7ff ff32 	bl	8087f5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80880f8:	4630      	mov	r0, r6
 80880fa:	f7ff fe9e 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80880fe:	a805      	add	r0, sp, #20
 8088100:	f7ff fe9b 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8088104:	4628      	mov	r0, r5
 8088106:	b00a      	add	sp, #40	; 0x28
 8088108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808810c:	230c      	movs	r3, #12
 808810e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8088112:	2014      	movs	r0, #20
 8088114:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8088118:	9307      	str	r3, [sp, #28]
 808811a:	f7f7 ffd6 	bl	80800ca <_Znwj>
 808811e:	4601      	mov	r1, r0
 8088120:	b128      	cbz	r0, 808812e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8088122:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8088126:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808812a:	f880 a001 	strb.w	sl, [r0, #1]
 808812e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8088130:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8088132:	f7ff ff13 	bl	8087f5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8088136:	4b22      	ldr	r3, [pc, #136]	; (80881c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8088138:	2008      	movs	r0, #8
 808813a:	9308      	str	r3, [sp, #32]
 808813c:	f7f7 ffc5 	bl	80800ca <_Znwj>
 8088140:	4682      	mov	sl, r0
 8088142:	b128      	cbz	r0, 8088150 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8088144:	9b03      	ldr	r3, [sp, #12]
 8088146:	a904      	add	r1, sp, #16
 8088148:	f840 3b04 	str.w	r3, [r0], #4
 808814c:	f7fe ffeb 	bl	8087126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8088150:	4642      	mov	r2, r8
 8088152:	4639      	mov	r1, r7
 8088154:	4620      	mov	r0, r4
 8088156:	9600      	str	r6, [sp, #0]
 8088158:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808815c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8088160:	f7fe f8f8 	bl	8086354 <spark_send_event>
 8088164:	b9b8      	cbnz	r0, 8088196 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8088166:	9b03      	ldr	r3, [sp, #12]
 8088168:	785b      	ldrb	r3, [r3, #1]
 808816a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808816e:	b993      	cbnz	r3, 8088196 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8088170:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8088174:	a905      	add	r1, sp, #20
 8088176:	a803      	add	r0, sp, #12
 8088178:	9205      	str	r2, [sp, #20]
 808817a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808817e:	f7ff ff11 	bl	8087fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8088182:	a805      	add	r0, sp, #20
 8088184:	f7ff fe59 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8088188:	a805      	add	r0, sp, #20
 808818a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808818c:	f7ff fea6 	bl	8087edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8088190:	a806      	add	r0, sp, #24
 8088192:	f7f8 ffdf 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8088196:	9b03      	ldr	r3, [sp, #12]
 8088198:	a904      	add	r1, sp, #16
 808819a:	a806      	add	r0, sp, #24
 808819c:	9305      	str	r3, [sp, #20]
 808819e:	f7fe ffc2 	bl	8087126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80881a2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80881a4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80881a6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80881a8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80881aa:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80881ac:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80881ae:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80881b0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80881b2:	f7f8 ffcf 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80881b6:	a804      	add	r0, sp, #16
 80881b8:	f7f8 ffcc 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80881bc:	e7a2      	b.n	8088104 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80881be:	bf00      	nop
 80881c0:	08088289 	.word	0x08088289

080881c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80881c4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80881c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80881c8:	4605      	mov	r5, r0
	  switch (__op)
 80881ca:	d007      	beq.n	80881dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80881cc:	2a03      	cmp	r2, #3
 80881ce:	d018      	beq.n	8088202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80881d0:	2a01      	cmp	r2, #1
 80881d2:	d101      	bne.n	80881d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80881d4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80881d6:	6003      	str	r3, [r0, #0]
	}
 80881d8:	2000      	movs	r0, #0
 80881da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80881dc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80881de:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80881e0:	f7f7 ff73 	bl	80800ca <_Znwj>
 80881e4:	4604      	mov	r4, r0
 80881e6:	b150      	cbz	r0, 80881fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80881e8:	4631      	mov	r1, r6
 80881ea:	f7ff fecb 	bl	8087f84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80881ee:	6930      	ldr	r0, [r6, #16]
 80881f0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80881f4:	b108      	cbz	r0, 80881fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80881f6:	f002 fa63 	bl	808a6c0 <strdup>
        type_(type) {
 80881fa:	6120      	str	r0, [r4, #16]
 80881fc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80881fe:	602c      	str	r4, [r5, #0]
	}
 8088200:	e7ea      	b.n	80881d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8088202:	6804      	ldr	r4, [r0, #0]
 8088204:	2c00      	cmp	r4, #0
 8088206:	d0e7      	beq.n	80881d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8088208:	f104 0010 	add.w	r0, r4, #16
 808820c:	f7ff fe15 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8088210:	4620      	mov	r0, r4
 8088212:	f7f8 f86a 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8088216:	2118      	movs	r1, #24
 8088218:	4620      	mov	r0, r4
 808821a:	f000 ff86 	bl	808912a <_ZdlPvj>
 808821e:	e7db      	b.n	80881d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08088220 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8088220:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8088222:	2300      	movs	r3, #0
 8088224:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8088226:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8088228:	4604      	mov	r4, r0
 808822a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808822c:	b12b      	cbz	r3, 808823a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808822e:	2202      	movs	r2, #2
 8088230:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088232:	68eb      	ldr	r3, [r5, #12]
 8088234:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088236:	68ab      	ldr	r3, [r5, #8]
 8088238:	60a3      	str	r3, [r4, #8]
    }
 808823a:	4620      	mov	r0, r4
 808823c:	bd38      	pop	{r3, r4, r5, pc}

0808823e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808823e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8088240:	b570      	push	{r4, r5, r6, lr}
 8088242:	4604      	mov	r4, r0
	  switch (__op)
 8088244:	d007      	beq.n	8088256 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8088246:	2a03      	cmp	r2, #3
 8088248:	d012      	beq.n	8088270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808824a:	2a01      	cmp	r2, #1
 808824c:	d101      	bne.n	8088252 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808824e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8088250:	6003      	str	r3, [r0, #0]
	}
 8088252:	2000      	movs	r0, #0
 8088254:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8088256:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8088258:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808825a:	f7f7 ff36 	bl	80800ca <_Znwj>
 808825e:	4605      	mov	r5, r0
 8088260:	b120      	cbz	r0, 808826c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8088262:	4631      	mov	r1, r6
 8088264:	f7ff ffdc 	bl	8088220 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8088268:	7c33      	ldrb	r3, [r6, #16]
 808826a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808826c:	6025      	str	r5, [r4, #0]
	}
 808826e:	e7f0      	b.n	8088252 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8088270:	6804      	ldr	r4, [r0, #0]
 8088272:	2c00      	cmp	r4, #0
 8088274:	d0ed      	beq.n	8088252 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8088276:	4620      	mov	r0, r4
 8088278:	f7f8 f837 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808827c:	2114      	movs	r1, #20
 808827e:	4620      	mov	r0, r4
 8088280:	f000 ff53 	bl	808912a <_ZdlPvj>
 8088284:	e7e5      	b.n	8088252 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08088288 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8088288:	b5f0      	push	{r4, r5, r6, r7, lr}
 808828a:	4604      	mov	r4, r0
 808828c:	b089      	sub	sp, #36	; 0x24
 808828e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8088290:	a801      	add	r0, sp, #4
 8088292:	4611      	mov	r1, r2
 8088294:	f7ff fe22 	bl	8087edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8088298:	b1a4      	cbz	r4, 80882c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808829a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808829c:	b11d      	cbz	r5, 80882a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808829e:	4628      	mov	r0, r5
 80882a0:	f002 fa0e 	bl	808a6c0 <strdup>
 80882a4:	4605      	mov	r5, r0
 80882a6:	a801      	add	r0, sp, #4
 80882a8:	a903      	add	r1, sp, #12
        type_(type) {
 80882aa:	9503      	str	r5, [sp, #12]
 80882ac:	f8ad 4010 	strh.w	r4, [sp, #16]
 80882b0:	f7ff fe78 	bl	8087fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80882b4:	a803      	add	r0, sp, #12
 80882b6:	f7ff fdc0 	bl	8087e3a <_ZN8particle5ErrorD1Ev>
 80882ba:	a802      	add	r0, sp, #8
 80882bc:	f7f8 ff4a 	bl	8081154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80882c0:	b009      	add	sp, #36	; 0x24
 80882c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80882c4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80882c6:	9d01      	ldr	r5, [sp, #4]
 80882c8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80882cc:	2a00      	cmp	r2, #0
 80882ce:	d103      	bne.n	80882d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80882d0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80882d4:	2900      	cmp	r1, #0
 80882d6:	d1f7      	bne.n	80882c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80882d8:	d1ef      	bne.n	80882ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80882da:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80882dc:	f3bf 8f5b 	dmb	ish
 80882e0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80882e2:	f3bf 8f5b 	dmb	ish
 80882e6:	1d2b      	adds	r3, r5, #4
 80882e8:	e853 6f00 	ldrex	r6, [r3]
 80882ec:	e843 4200 	strex	r2, r4, [r3]
 80882f0:	2a00      	cmp	r2, #0
 80882f2:	d1f9      	bne.n	80882e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80882f4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80882f8:	2e00      	cmp	r6, #0
 80882fa:	d0de      	beq.n	80882ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80882fc:	4620      	mov	r0, r4
 80882fe:	f7fd ff71 	bl	80861e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8088302:	4607      	mov	r7, r0
 8088304:	b160      	cbz	r0, 8088320 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8088306:	4630      	mov	r0, r6
 8088308:	f105 010c 	add.w	r1, r5, #12
 808830c:	f7ff fe15 	bl	8087f3a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8088310:	4630      	mov	r0, r6
 8088312:	f7f7 ffea 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8088316:	2110      	movs	r1, #16
 8088318:	4630      	mov	r0, r6
 808831a:	f000 ff06 	bl	808912a <_ZdlPvj>
 808831e:	e7cc      	b.n	80882ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8088320:	4631      	mov	r1, r6
 8088322:	a803      	add	r0, sp, #12
 8088324:	f7ff ff7c 	bl	8088220 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088328:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808832a:	2010      	movs	r0, #16
 808832c:	f88d 301c 	strb.w	r3, [sp, #28]
 8088330:	f7f7 fecb 	bl	80800ca <_Znwj>
 8088334:	4605      	mov	r5, r0
 8088336:	b1d0      	cbz	r0, 808836e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8088338:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808833a:	2014      	movs	r0, #20
 808833c:	f7f7 fec5 	bl	80800ca <_Znwj>
 8088340:	4604      	mov	r4, r0
 8088342:	b178      	cbz	r0, 8088364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8088344:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8088346:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8088348:	a803      	add	r0, sp, #12
 808834a:	f7ff faff 	bl	808794c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808834e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8088350:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8088352:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088354:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088356:	9205      	str	r2, [sp, #20]
 8088358:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808835a:	60e3      	str	r3, [r4, #12]
 808835c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8088360:	9206      	str	r2, [sp, #24]
 8088362:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8088364:	4b06      	ldr	r3, [pc, #24]	; (8088380 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088366:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8088368:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808836a:	4b06      	ldr	r3, [pc, #24]	; (8088384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808836c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808836e:	a803      	add	r0, sp, #12
 8088370:	f7f7 ffbb 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8088374:	2200      	movs	r2, #0
 8088376:	4629      	mov	r1, r5
 8088378:	4803      	ldr	r0, [pc, #12]	; (8088388 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808837a:	f7fd ff3b 	bl	80861f4 <application_thread_invoke>
 808837e:	e7c7      	b.n	8088310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8088380:	08087f4d 	.word	0x08087f4d
 8088384:	0808823f 	.word	0x0808823f
 8088388:	08088941 	.word	0x08088941

0808838c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 808838c:	4770      	bx	lr

0808838e <_ZN9IPAddressD0Ev>:
 808838e:	b510      	push	{r4, lr}
 8088390:	4604      	mov	r4, r0
 8088392:	2108      	movs	r1, #8
 8088394:	f000 fec9 	bl	808912a <_ZdlPvj>
 8088398:	4620      	mov	r0, r4
 808839a:	bd10      	pop	{r4, pc}

0808839c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808839e:	460e      	mov	r6, r1
 80883a0:	2400      	movs	r4, #0
 80883a2:	f100 0708 	add.w	r7, r0, #8
 80883a6:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80883a8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80883ac:	220a      	movs	r2, #10
 80883ae:	4630      	mov	r0, r6
 80883b0:	f7fe fe6b 	bl	808708a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80883b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80883b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80883b8:	d101      	bne.n	80883be <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80883ba:	4620      	mov	r0, r4
 80883bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80883be:	2c00      	cmp	r4, #0
 80883c0:	d0f2      	beq.n	80883a8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80883c2:	212e      	movs	r1, #46	; 0x2e
 80883c4:	4630      	mov	r0, r6
 80883c6:	f7fe fe43 	bl	8087050 <_ZN5Print5printEc>
 80883ca:	4404      	add	r4, r0
 80883cc:	e7ec      	b.n	80883a8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080883d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80883d0:	4a02      	ldr	r2, [pc, #8]	; (80883dc <_ZN9IPAddressC1Ev+0xc>)
 80883d2:	6002      	str	r2, [r0, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80883d4:	2200      	movs	r2, #0
 80883d6:	6042      	str	r2, [r0, #4]
}
 80883d8:	4770      	bx	lr
 80883da:	bf00      	nop
 80883dc:	0808d258 	.word	0x0808d258

080883e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80883e0:	4a02      	ldr	r2, [pc, #8]	; (80883ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80883e2:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80883e4:	680a      	ldr	r2, [r1, #0]
 80883e6:	6042      	str	r2, [r0, #4]
}
 80883e8:	4770      	bx	lr
 80883ea:	bf00      	nop
 80883ec:	0808d258 	.word	0x0808d258

080883f0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80883f0:	4a01      	ldr	r2, [pc, #4]	; (80883f8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 80883f2:	e9c0 2100 	strd	r2, r1, [r0]
}
 80883f6:	4770      	bx	lr
 80883f8:	0808d258 	.word	0x0808d258

080883fc <_ZNK9IPAddresscvbEv>:
    return address.ipv4!=0;
 80883fc:	6840      	ldr	r0, [r0, #4]
}
 80883fe:	3800      	subs	r0, #0
 8088400:	bf18      	it	ne
 8088402:	2001      	movne	r0, #1
 8088404:	4770      	bx	lr

08088406 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8088406:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8088408:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808840c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8088410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8088414:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8088418:	6044      	str	r4, [r0, #4]
}
 808841a:	bd10      	pop	{r4, pc}

0808841c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808841c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808841e:	4d04      	ldr	r5, [pc, #16]	; (8088430 <_ZN9IPAddressC1Ehhhh+0x14>)
 8088420:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8088422:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8088426:	9500      	str	r5, [sp, #0]
 8088428:	f7ff ffed 	bl	8088406 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808842c:	b003      	add	sp, #12
 808842e:	bd30      	pop	{r4, r5, pc}
 8088430:	0808d258 	.word	0x0808d258

08088434 <_ZN9IPAddressaSEPKh>:
{
 8088434:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 8088436:	78cb      	ldrb	r3, [r1, #3]
 8088438:	9300      	str	r3, [sp, #0]
 808843a:	788b      	ldrb	r3, [r1, #2]
 808843c:	784a      	ldrb	r2, [r1, #1]
 808843e:	7809      	ldrb	r1, [r1, #0]
 8088440:	f7ff ffe1 	bl	8088406 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8088444:	b002      	add	sp, #8
 8088446:	bd10      	pop	{r4, pc}

08088448 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8088448:	7441      	strb	r1, [r0, #17]
}
 808844a:	4770      	bx	lr

0808844c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808844c:	4770      	bx	lr

0808844e <_ZN9USBSerial4readEv>:
{
 808844e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8088450:	2100      	movs	r1, #0
 8088452:	7c00      	ldrb	r0, [r0, #16]
 8088454:	f7fd fe64 	bl	8086120 <HAL_USB_USART_Receive_Data>
}
 8088458:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808845c:	bd08      	pop	{r3, pc}

0808845e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808845e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8088460:	2101      	movs	r1, #1
 8088462:	7c00      	ldrb	r0, [r0, #16]
 8088464:	f7fd fe5c 	bl	8086120 <HAL_USB_USART_Receive_Data>
}
 8088468:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808846c:	bd08      	pop	{r3, pc}

0808846e <_ZN9USBSerial17availableForWriteEv>:
{
 808846e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8088470:	7c00      	ldrb	r0, [r0, #16]
 8088472:	f7fd fe4d 	bl	8086110 <HAL_USB_USART_Available_Data_For_Write>
}
 8088476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808847a:	bd08      	pop	{r3, pc}

0808847c <_ZN9USBSerial9availableEv>:
{
 808847c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808847e:	7c00      	ldrb	r0, [r0, #16]
 8088480:	f7fd fe3e 	bl	8086100 <HAL_USB_USART_Available_Data>
}
 8088484:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088488:	bd08      	pop	{r3, pc}

0808848a <_ZN9USBSerial5writeEh>:
{
 808848a:	b538      	push	{r3, r4, r5, lr}
 808848c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808848e:	7c00      	ldrb	r0, [r0, #16]
{
 8088490:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8088492:	f7fd fe3d 	bl	8086110 <HAL_USB_USART_Available_Data_For_Write>
 8088496:	2800      	cmp	r0, #0
 8088498:	dc01      	bgt.n	808849e <_ZN9USBSerial5writeEh+0x14>
 808849a:	7c60      	ldrb	r0, [r4, #17]
 808849c:	b128      	cbz	r0, 80884aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808849e:	4629      	mov	r1, r5
 80884a0:	7c20      	ldrb	r0, [r4, #16]
 80884a2:	f7fd fe45 	bl	8086130 <HAL_USB_USART_Send_Data>
 80884a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80884aa:	bd38      	pop	{r3, r4, r5, pc}

080884ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80884ac:	7c00      	ldrb	r0, [r0, #16]
 80884ae:	f7fd be47 	b.w	8086140 <HAL_USB_USART_Flush_Data>

080884b2 <_ZN9USBSerialD0Ev>:
 80884b2:	b510      	push	{r4, lr}
 80884b4:	4604      	mov	r4, r0
 80884b6:	2114      	movs	r1, #20
 80884b8:	f000 fe37 	bl	808912a <_ZdlPvj>
 80884bc:	4620      	mov	r0, r4
 80884be:	bd10      	pop	{r4, pc}

080884c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80884c0:	b510      	push	{r4, lr}
 80884c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80884c6:	4604      	mov	r4, r0
 80884c8:	4608      	mov	r0, r1
 80884ca:	2100      	movs	r1, #0
 80884cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80884d0:	4b04      	ldr	r3, [pc, #16]	; (80884e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80884d2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80884d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80884d6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80884d8:	4611      	mov	r1, r2
  _blocking = true;
 80884da:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80884dc:	f7fd fe00 	bl	80860e0 <HAL_USB_USART_Init>
}
 80884e0:	4620      	mov	r0, r4
 80884e2:	bd10      	pop	{r4, pc}
 80884e4:	0808d26c 	.word	0x0808d26c

080884e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80884e8:	2200      	movs	r2, #0
 80884ea:	7c00      	ldrb	r0, [r0, #16]
 80884ec:	f7fd be00 	b.w	80860f0 <HAL_USB_USART_Begin>

080884f0 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
 80884f0:	7c00      	ldrb	r0, [r0, #16]
 80884f2:	f7fd be2d 	b.w	8086150 <HAL_USB_USART_Is_Connected>
	...

080884f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80884f8:	b510      	push	{r4, lr}
 80884fa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80884fc:	2214      	movs	r2, #20
 80884fe:	2100      	movs	r1, #0
 8088500:	f002 f892 	bl	808a628 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8088504:	4b05      	ldr	r3, [pc, #20]	; (808851c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8088506:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8088508:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808850a:	4b05      	ldr	r3, [pc, #20]	; (8088520 <_Z19acquireSerialBufferv+0x28>)
 808850c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808850e:	f240 1301 	movw	r3, #257	; 0x101
 8088512:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8088514:	2381      	movs	r3, #129	; 0x81
 8088516:	8223      	strh	r3, [r4, #16]
}
 8088518:	bd10      	pop	{r4, pc}
 808851a:	bf00      	nop
 808851c:	20000b78 	.word	0x20000b78
 8088520:	20000c79 	.word	0x20000c79

08088524 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8088524:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8088526:	4d0f      	ldr	r5, [pc, #60]	; (8088564 <_Z16_fetch_usbserialv+0x40>)
{
 8088528:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808852a:	a801      	add	r0, sp, #4
 808852c:	f7ff ffe4 	bl	80884f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8088530:	7829      	ldrb	r1, [r5, #0]
 8088532:	f3bf 8f5b 	dmb	ish
 8088536:	f011 0401 	ands.w	r4, r1, #1
 808853a:	d110      	bne.n	808855e <_Z16_fetch_usbserialv+0x3a>
 808853c:	4628      	mov	r0, r5
 808853e:	f7f7 fdd7 	bl	80800f0 <__cxa_guard_acquire>
 8088542:	b160      	cbz	r0, 808855e <_Z16_fetch_usbserialv+0x3a>
 8088544:	4621      	mov	r1, r4
 8088546:	aa01      	add	r2, sp, #4
 8088548:	4807      	ldr	r0, [pc, #28]	; (8088568 <_Z16_fetch_usbserialv+0x44>)
 808854a:	f7ff ffb9 	bl	80884c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808854e:	4628      	mov	r0, r5
 8088550:	f7f7 fdd3 	bl	80800fa <__cxa_guard_release>
 8088554:	4a05      	ldr	r2, [pc, #20]	; (808856c <_Z16_fetch_usbserialv+0x48>)
 8088556:	4906      	ldr	r1, [pc, #24]	; (8088570 <_Z16_fetch_usbserialv+0x4c>)
 8088558:	4803      	ldr	r0, [pc, #12]	; (8088568 <_Z16_fetch_usbserialv+0x44>)
 808855a:	f000 fde1 	bl	8089120 <__aeabi_atexit>
	return _usbserial;
}
 808855e:	4802      	ldr	r0, [pc, #8]	; (8088568 <_Z16_fetch_usbserialv+0x44>)
 8088560:	b007      	add	sp, #28
 8088562:	bd30      	pop	{r4, r5, pc}
 8088564:	20000b48 	.word	0x20000b48
 8088568:	20000b50 	.word	0x20000b50
 808856c:	20000230 	.word	0x20000230
 8088570:	0808844d 	.word	0x0808844d

08088574 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8088574:	b510      	push	{r4, lr}
 8088576:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8088578:	2214      	movs	r2, #20
 808857a:	2100      	movs	r1, #0
 808857c:	f002 f854 	bl	808a628 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8088580:	4b05      	ldr	r3, [pc, #20]	; (8088598 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8088582:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8088584:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8088586:	4b05      	ldr	r3, [pc, #20]	; (808859c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8088588:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808858a:	f240 1301 	movw	r3, #257	; 0x101
 808858e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8088590:	2381      	movs	r3, #129	; 0x81
 8088592:	8223      	strh	r3, [r4, #16]
}
 8088594:	bd10      	pop	{r4, pc}
 8088596:	bf00      	nop
 8088598:	20000cfa 	.word	0x20000cfa
 808859c:	20000dfb 	.word	0x20000dfb

080885a0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80885a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80885a2:	4c0f      	ldr	r4, [pc, #60]	; (80885e0 <_Z17_fetch_usbserial1v+0x40>)
{
 80885a4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80885a6:	a801      	add	r0, sp, #4
 80885a8:	f7ff ffe4 	bl	8088574 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80885ac:	7823      	ldrb	r3, [r4, #0]
 80885ae:	f3bf 8f5b 	dmb	ish
 80885b2:	07db      	lsls	r3, r3, #31
 80885b4:	d410      	bmi.n	80885d8 <_Z17_fetch_usbserial1v+0x38>
 80885b6:	4620      	mov	r0, r4
 80885b8:	f7f7 fd9a 	bl	80800f0 <__cxa_guard_acquire>
 80885bc:	b160      	cbz	r0, 80885d8 <_Z17_fetch_usbserial1v+0x38>
 80885be:	2101      	movs	r1, #1
 80885c0:	aa01      	add	r2, sp, #4
 80885c2:	4808      	ldr	r0, [pc, #32]	; (80885e4 <_Z17_fetch_usbserial1v+0x44>)
 80885c4:	f7ff ff7c 	bl	80884c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80885c8:	4620      	mov	r0, r4
 80885ca:	f7f7 fd96 	bl	80800fa <__cxa_guard_release>
 80885ce:	4a06      	ldr	r2, [pc, #24]	; (80885e8 <_Z17_fetch_usbserial1v+0x48>)
 80885d0:	4906      	ldr	r1, [pc, #24]	; (80885ec <_Z17_fetch_usbserial1v+0x4c>)
 80885d2:	4804      	ldr	r0, [pc, #16]	; (80885e4 <_Z17_fetch_usbserial1v+0x44>)
 80885d4:	f000 fda4 	bl	8089120 <__aeabi_atexit>
  return _usbserial1;
}
 80885d8:	4802      	ldr	r0, [pc, #8]	; (80885e4 <_Z17_fetch_usbserial1v+0x44>)
 80885da:	b006      	add	sp, #24
 80885dc:	bd10      	pop	{r4, pc}
 80885de:	bf00      	nop
 80885e0:	20000b4c 	.word	0x20000b4c
 80885e4:	20000b64 	.word	0x20000b64
 80885e8:	20000230 	.word	0x20000230
 80885ec:	0808844d 	.word	0x0808844d

080885f0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80885f0:	4700      	bx	r0

080885f2 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 80885f2:	6882      	ldr	r2, [r0, #8]
{
 80885f4:	b510      	push	{r4, lr}
 80885f6:	b90a      	cbnz	r2, 80885fc <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80885f8:	f000 fe50 	bl	808929c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80885fc:	68c3      	ldr	r3, [r0, #12]
}
 80885fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8088602:	4718      	bx	r3

08088604 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8088604:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8088608:	2400      	movs	r4, #0
{
 808860a:	461d      	mov	r5, r3
 808860c:	460f      	mov	r7, r1
 808860e:	4690      	mov	r8, r2
 8088610:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 8088612:	f7fd fb7d 	bl	8085d10 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8088616:	2304      	movs	r3, #4
  if (priority >= 0) {
 8088618:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808861a:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808861e:	bfa8      	it	ge
 8088620:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8088624:	f8ad 400d 	strh.w	r4, [sp, #13]
 8088628:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 808862c:	bfa4      	itt	ge
 808862e:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8088630:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8088634:	463a      	mov	r2, r7
 8088636:	4643      	mov	r3, r8
 8088638:	4630      	mov	r0, r6
 808863a:	4906      	ldr	r1, [pc, #24]	; (8088654 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 808863c:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808863e:	bfa8      	it	ge
 8088640:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8088644:	f7fd fb5c 	bl	8085d00 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8088648:	fab0 f080 	clz	r0, r0
 808864c:	0940      	lsrs	r0, r0, #5
 808864e:	b004      	add	sp, #16
 8088650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088654:	080885f1 	.word	0x080885f1

08088658 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8088658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808865a:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 808865c:	f7fd fb58 	bl	8085d10 <HAL_Interrupts_Detach>
 8088660:	4605      	mov	r5, r0
 8088662:	b970      	cbnz	r0, 8088682 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 8088664:	4f08      	ldr	r7, [pc, #32]	; (8088688 <_Z15detachInterruptt+0x30>)
 8088666:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 808866a:	b146      	cbz	r6, 808867e <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
 808866c:	4630      	mov	r0, r6
 808866e:	f7f7 fe3c 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8088672:	2110      	movs	r1, #16
 8088674:	4630      	mov	r0, r6
 8088676:	f000 fd58 	bl	808912a <_ZdlPvj>
        handlers[pin] = nullptr;
 808867a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    }
    return true;
 808867e:	2001      	movs	r0, #1
 8088680:	e000      	b.n	8088684 <_Z15detachInterruptt+0x2c>
        return false;
 8088682:	2000      	movs	r0, #0
}
 8088684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088686:	bf00      	nop
 8088688:	20000e7c 	.word	0x20000e7c

0808868c <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 808868c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808868e:	2300      	movs	r3, #0
 8088690:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8088692:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8088694:	4604      	mov	r4, r0
 8088696:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8088698:	b12b      	cbz	r3, 80886a6 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808869a:	2202      	movs	r2, #2
 808869c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808869e:	68eb      	ldr	r3, [r5, #12]
 80886a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80886a2:	68ab      	ldr	r3, [r5, #8]
 80886a4:	60a3      	str	r3, [r4, #8]
    }
 80886a6:	4620      	mov	r0, r4
 80886a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080886ac <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80886ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80886ae:	4b12      	ldr	r3, [pc, #72]	; (80886f8 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)
{
 80886b0:	4605      	mov	r5, r0
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80886b2:	2010      	movs	r0, #16
{
 80886b4:	460e      	mov	r6, r1
    callback.handler = call_wiring_interrupt_handler;
 80886b6:	9300      	str	r3, [sp, #0]
    callback.data = new wiring_interrupt_handler_t(h);
 80886b8:	f7f7 fd07 	bl	80800ca <_Znwj>
 80886bc:	4604      	mov	r4, r0
 80886be:	b110      	cbz	r0, 80886c6 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 80886c0:	4631      	mov	r1, r6
 80886c2:	f7ff ffe3 	bl	808868c <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 80886c6:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80886c8:	4628      	mov	r0, r5
 80886ca:	4669      	mov	r1, sp
 80886cc:	aa02      	add	r2, sp, #8
    callback.data = new wiring_interrupt_handler_t(h);
 80886ce:	9401      	str	r4, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 80886d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80886d4:	f7fd fb2c 	bl	8085d30 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 80886d8:	9d03      	ldr	r5, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80886da:	1e04      	subs	r4, r0, #0
 80886dc:	bf18      	it	ne
 80886de:	2401      	movne	r4, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 80886e0:	b135      	cbz	r5, 80886f0 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
    class function<_Res(_ArgTypes...)>
 80886e2:	4628      	mov	r0, r5
 80886e4:	f7f7 fe01 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
 80886e8:	2110      	movs	r1, #16
 80886ea:	4628      	mov	r0, r5
 80886ec:	f000 fd1d 	bl	808912a <_ZdlPvj>
    return ok;
}
 80886f0:	4620      	mov	r0, r4
 80886f2:	b004      	add	sp, #16
 80886f4:	bd70      	pop	{r4, r5, r6, pc}
 80886f6:	bf00      	nop
 80886f8:	080885f3 	.word	0x080885f3

080886fc <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80886fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80886fe:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8088700:	b085      	sub	sp, #20
 8088702:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088704:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8088706:	460f      	mov	r7, r1
 8088708:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808870a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808870c:	f001 fff3 	bl	808a6f6 <strlen>
 8088710:	687b      	ldr	r3, [r7, #4]
 8088712:	b281      	uxth	r1, r0
 8088714:	9600      	str	r6, [sp, #0]
 8088716:	4628      	mov	r0, r5
 8088718:	aa03      	add	r2, sp, #12
 808871a:	f7fd fcd1 	bl	80860c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808871e:	b130      	cbz	r0, 808872e <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8088720:	4631      	mov	r1, r6
 8088722:	4620      	mov	r0, r4
 8088724:	f7ff fe64 	bl	80883f0 <_ZN9IPAddressC1Em>
    }
 8088728:	4620      	mov	r0, r4
 808872a:	b005      	add	sp, #20
 808872c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808872e:	4620      	mov	r0, r4
 8088730:	a903      	add	r1, sp, #12
 8088732:	f7ff fe55 	bl	80883e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8088736:	e7f7      	b.n	8088728 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08088738 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8088738:	2200      	movs	r2, #0
 808873a:	6840      	ldr	r0, [r0, #4]
 808873c:	4611      	mov	r1, r2
 808873e:	f7fd bdc9 	b.w	80862d4 <network_listening>

08088742 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8088742:	2200      	movs	r2, #0
 8088744:	6840      	ldr	r0, [r0, #4]
 8088746:	4611      	mov	r1, r2
 8088748:	f7fd bdd4 	b.w	80862f4 <network_get_listen_timeout>

0808874c <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808874c:	2200      	movs	r2, #0
 808874e:	6840      	ldr	r0, [r0, #4]
 8088750:	f7fd bdc8 	b.w	80862e4 <network_set_listen_timeout>

08088754 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8088754:	2200      	movs	r2, #0
 8088756:	6840      	ldr	r0, [r0, #4]
 8088758:	f081 0101 	eor.w	r1, r1, #1
 808875c:	f7fd bdb2 	b.w	80862c4 <network_listen>

08088760 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8088760:	2300      	movs	r3, #0
 8088762:	6840      	ldr	r0, [r0, #4]
 8088764:	461a      	mov	r2, r3
 8088766:	4619      	mov	r1, r3
 8088768:	f7fd bda4 	b.w	80862b4 <network_off>

0808876c <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808876c:	2300      	movs	r3, #0
 808876e:	6840      	ldr	r0, [r0, #4]
 8088770:	461a      	mov	r2, r3
 8088772:	4619      	mov	r1, r3
 8088774:	f7fd bd96 	b.w	80862a4 <network_on>

08088778 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8088778:	2200      	movs	r2, #0
 808877a:	6840      	ldr	r0, [r0, #4]
 808877c:	4611      	mov	r1, r2
 808877e:	f7fd bd79 	b.w	8086274 <network_connecting>

08088782 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8088782:	2200      	movs	r2, #0
 8088784:	2102      	movs	r1, #2
 8088786:	6840      	ldr	r0, [r0, #4]
 8088788:	f7fd bd7c 	b.w	8086284 <network_disconnect>

0808878c <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808878c:	2300      	movs	r3, #0
 808878e:	6840      	ldr	r0, [r0, #4]
 8088790:	461a      	mov	r2, r3
 8088792:	f7fd bd67 	b.w	8086264 <network_connect>
	...

08088798 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8088798:	b5f0      	push	{r4, r5, r6, r7, lr}
    CellularSignal() {}
 808879a:	2500      	movs	r5, #0
 808879c:	2618      	movs	r6, #24
 808879e:	460f      	mov	r7, r1
 80887a0:	4b19      	ldr	r3, [pc, #100]	; (8088808 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 80887a2:	4632      	mov	r2, r6
 80887a4:	6003      	str	r3, [r0, #0]
 80887a6:	3328      	adds	r3, #40	; 0x28
 80887a8:	4629      	mov	r1, r5
 80887aa:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80887ae:	b089      	sub	sp, #36	; 0x24
 80887b0:	6043      	str	r3, [r0, #4]
 80887b2:	4604      	mov	r4, r0
 80887b4:	3010      	adds	r0, #16
 80887b6:	f001 ff37 	bl	808a628 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80887ba:	462a      	mov	r2, r5
 80887bc:	4629      	mov	r1, r5
 80887be:	6878      	ldr	r0, [r7, #4]
 80887c0:	f7fd fd68 	bl	8086294 <network_ready>
 80887c4:	b918      	cbnz	r0, 80887ce <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 80887c6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 80887c8:	4620      	mov	r0, r4
 80887ca:	b009      	add	sp, #36	; 0x24
 80887cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 80887ce:	4629      	mov	r1, r5
 80887d0:	4632      	mov	r2, r6
 80887d2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 80887d4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 80887d8:	f001 ff26 	bl	808a628 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80887dc:	4668      	mov	r0, sp
 80887de:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 80887e0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80887e4:	f7fd fc74 	bl	80860d0 <cellular_signal>
 80887e8:	b110      	cbz	r0, 80887f0 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 80887ea:	2301      	movs	r3, #1
 80887ec:	60a3      	str	r3, [r4, #8]
            return sig;
 80887ee:	e7eb      	b.n	80887c8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 80887f0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80887f2:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 80887f4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80887f6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80887f8:	b90b      	cbnz	r3, 80887fe <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 80887fa:	2302      	movs	r3, #2
 80887fc:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 80887fe:	4620      	mov	r0, r4
 8088800:	a902      	add	r1, sp, #8
 8088802:	f7ff f94a 	bl	8087a9a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 8088806:	e7df      	b.n	80887c8 <_ZN5spark13CellularClass4RSSIEv+0x30>
 8088808:	0808d208 	.word	0x0808d208

0808880c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808880c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808880e:	2428      	movs	r4, #40	; 0x28
 8088810:	4b07      	ldr	r3, [pc, #28]	; (8088830 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8088812:	4622      	mov	r2, r4
 8088814:	4618      	mov	r0, r3
 8088816:	2100      	movs	r1, #0
 8088818:	f001 ff06 	bl	808a628 <memset>
        cid = -1;
 808881c:	f04f 32ff 	mov.w	r2, #4294967295
 8088820:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8088822:	2204      	movs	r2, #4
 8088824:	4b03      	ldr	r3, [pc, #12]	; (8088834 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8088826:	8004      	strh	r4, [r0, #0]
 8088828:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808882a:	4a03      	ldr	r2, [pc, #12]	; (8088838 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808882c:	601a      	str	r2, [r3, #0]
 808882e:	bd10      	pop	{r4, pc}
 8088830:	20000f40 	.word	0x20000f40
 8088834:	20000f38 	.word	0x20000f38
 8088838:	0808d29c 	.word	0x0808d29c

0808883c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 808883c:	4770      	bx	lr

0808883e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808883e:	7441      	strb	r1, [r0, #17]
}
 8088840:	4770      	bx	lr

08088842 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8088842:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8088844:	7c00      	ldrb	r0, [r0, #16]
 8088846:	f7fd fb2b 	bl	8085ea0 <hal_usart_available_data_for_write>
}
 808884a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808884e:	bd08      	pop	{r3, pc}

08088850 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8088850:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8088852:	7c00      	ldrb	r0, [r0, #16]
 8088854:	f7fd fafc 	bl	8085e50 <hal_usart_available>
}
 8088858:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808885c:	bd08      	pop	{r3, pc}

0808885e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808885e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8088860:	7c00      	ldrb	r0, [r0, #16]
 8088862:	f7fd fb05 	bl	8085e70 <hal_usart_peek>
}
 8088866:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808886a:	bd08      	pop	{r3, pc}

0808886c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808886c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808886e:	7c00      	ldrb	r0, [r0, #16]
 8088870:	f7fd faf6 	bl	8085e60 <hal_usart_read>
}
 8088874:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8088878:	bd08      	pop	{r3, pc}

0808887a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808887a:	7c00      	ldrb	r0, [r0, #16]
 808887c:	f7fd bb00 	b.w	8085e80 <hal_usart_flush>

08088880 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8088880:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8088882:	7c46      	ldrb	r6, [r0, #17]
{
 8088884:	4604      	mov	r4, r0
 8088886:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8088888:	b12e      	cbz	r6, 8088896 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808888a:	4629      	mov	r1, r5
 808888c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808888e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8088892:	f7fd bad5 	b.w	8085e40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8088896:	7c00      	ldrb	r0, [r0, #16]
 8088898:	f7fd fb02 	bl	8085ea0 <hal_usart_available_data_for_write>
 808889c:	2800      	cmp	r0, #0
 808889e:	dcf4      	bgt.n	808888a <_ZN11USARTSerial5writeEh+0xa>
}
 80888a0:	4630      	mov	r0, r6
 80888a2:	bd70      	pop	{r4, r5, r6, pc}

080888a4 <_ZN11USARTSerialD0Ev>:
 80888a4:	b510      	push	{r4, lr}
 80888a6:	4604      	mov	r4, r0
 80888a8:	2114      	movs	r1, #20
 80888aa:	f000 fc3e 	bl	808912a <_ZdlPvj>
 80888ae:	4620      	mov	r0, r4
 80888b0:	bd10      	pop	{r4, pc}
	...

080888b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80888b4:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80888b8:	b510      	push	{r4, lr}
 80888ba:	4604      	mov	r4, r0
 80888bc:	4608      	mov	r0, r1
 80888be:	4611      	mov	r1, r2
 80888c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80888c4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80888c8:	4a04      	ldr	r2, [pc, #16]	; (80888dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80888ca:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80888cc:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80888ce:	2201      	movs	r2, #1
 80888d0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80888d2:	461a      	mov	r2, r3
 80888d4:	f7fd faac 	bl	8085e30 <hal_usart_init>
}
 80888d8:	4620      	mov	r0, r4
 80888da:	bd10      	pop	{r4, pc}
 80888dc:	0808d2d0 	.word	0x0808d2d0

080888e0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80888e0:	2300      	movs	r3, #0
 80888e2:	7c00      	ldrb	r0, [r0, #16]
 80888e4:	f7fd bae4 	b.w	8085eb0 <hal_usart_begin_config>

080888e8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80888e8:	2200      	movs	r2, #0
 80888ea:	f7ff bff9 	b.w	80888e0 <_ZN11USARTSerial5beginEmm>
	...

080888f0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80888f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80888f2:	4d0d      	ldr	r5, [pc, #52]	; (8088928 <_Z22__fetch_global_Serial1v+0x38>)
 80888f4:	7829      	ldrb	r1, [r5, #0]
 80888f6:	f3bf 8f5b 	dmb	ish
 80888fa:	f011 0401 	ands.w	r4, r1, #1
 80888fe:	d111      	bne.n	8088924 <_Z22__fetch_global_Serial1v+0x34>
 8088900:	4628      	mov	r0, r5
 8088902:	f7f7 fbf5 	bl	80800f0 <__cxa_guard_acquire>
 8088906:	b168      	cbz	r0, 8088924 <_Z22__fetch_global_Serial1v+0x34>
 8088908:	4621      	mov	r1, r4
 808890a:	4a08      	ldr	r2, [pc, #32]	; (808892c <_Z22__fetch_global_Serial1v+0x3c>)
 808890c:	4b08      	ldr	r3, [pc, #32]	; (8088930 <_Z22__fetch_global_Serial1v+0x40>)
 808890e:	4809      	ldr	r0, [pc, #36]	; (8088934 <_Z22__fetch_global_Serial1v+0x44>)
 8088910:	f7ff ffd0 	bl	80888b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8088914:	4628      	mov	r0, r5
 8088916:	f7f7 fbf0 	bl	80800fa <__cxa_guard_release>
 808891a:	4a07      	ldr	r2, [pc, #28]	; (8088938 <_Z22__fetch_global_Serial1v+0x48>)
 808891c:	4907      	ldr	r1, [pc, #28]	; (808893c <_Z22__fetch_global_Serial1v+0x4c>)
 808891e:	4805      	ldr	r0, [pc, #20]	; (8088934 <_Z22__fetch_global_Serial1v+0x44>)
 8088920:	f000 fbfe 	bl	8089120 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8088924:	4803      	ldr	r0, [pc, #12]	; (8088934 <_Z22__fetch_global_Serial1v+0x44>)
 8088926:	bd38      	pop	{r3, r4, r5, pc}
 8088928:	20000f68 	.word	0x20000f68
 808892c:	20000f6c 	.word	0x20000f6c
 8088930:	20000ff0 	.word	0x20000ff0
 8088934:	20001074 	.word	0x20001074
 8088938:	20000230 	.word	0x20000230
 808893c:	0808883d 	.word	0x0808883d

08088940 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8088940:	b510      	push	{r4, lr}
      if (_M_empty())
 8088942:	6883      	ldr	r3, [r0, #8]
 8088944:	4604      	mov	r4, r0
 8088946:	b90b      	cbnz	r3, 808894c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8088948:	f000 fca8 	bl	808929c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808894c:	68c3      	ldr	r3, [r0, #12]
 808894e:	4798      	blx	r3
      if (_M_manager)
 8088950:	68a3      	ldr	r3, [r4, #8]
 8088952:	b11b      	cbz	r3, 808895c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8088954:	2203      	movs	r2, #3
 8088956:	4621      	mov	r1, r4
 8088958:	4620      	mov	r0, r4
 808895a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808895c:	4620      	mov	r0, r4
}
 808895e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8088962:	2110      	movs	r1, #16
 8088964:	f000 bbe1 	b.w	808912a <_ZdlPvj>

08088968 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8088968:	4770      	bx	lr

0808896a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808896a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808896c:	4606      	mov	r6, r0
 808896e:	4615      	mov	r5, r2
 8088970:	460c      	mov	r4, r1
 8088972:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8088974:	42bc      	cmp	r4, r7
 8088976:	d006      	beq.n	8088986 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8088978:	6833      	ldr	r3, [r6, #0]
 808897a:	4630      	mov	r0, r6
 808897c:	689b      	ldr	r3, [r3, #8]
 808897e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088982:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8088984:	e7f6      	b.n	8088974 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8088986:	4628      	mov	r0, r5
 8088988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808898a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808898a:	2200      	movs	r2, #0
 808898c:	7c00      	ldrb	r0, [r0, #16]
 808898e:	f7fd baaf 	b.w	8085ef0 <hal_i2c_write>

08088992 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8088992:	2100      	movs	r1, #0
 8088994:	7c00      	ldrb	r0, [r0, #16]
 8088996:	f7fd bab3 	b.w	8085f00 <hal_i2c_available>

0808899a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808899a:	2100      	movs	r1, #0
 808899c:	7c00      	ldrb	r0, [r0, #16]
 808899e:	f7fd bab7 	b.w	8085f10 <hal_i2c_read>

080889a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80889a2:	2100      	movs	r1, #0
 80889a4:	7c00      	ldrb	r0, [r0, #16]
 80889a6:	f7fd babb 	b.w	8085f20 <hal_i2c_peek>

080889aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80889aa:	2100      	movs	r1, #0
 80889ac:	7c00      	ldrb	r0, [r0, #16]
 80889ae:	f7fd babf 	b.w	8085f30 <hal_i2c_flush>

080889b2 <_ZN7TwoWireD0Ev>:
 80889b2:	b510      	push	{r4, lr}
 80889b4:	4604      	mov	r4, r0
 80889b6:	2114      	movs	r1, #20
 80889b8:	f000 fbb7 	bl	808912a <_ZdlPvj>
 80889bc:	4620      	mov	r0, r4
 80889be:	bd10      	pop	{r4, pc}

080889c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80889c0:	b510      	push	{r4, lr}
 80889c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80889c6:	4604      	mov	r4, r0
 80889c8:	4608      	mov	r0, r1
 80889ca:	2100      	movs	r1, #0
 80889cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80889d0:	4b03      	ldr	r3, [pc, #12]	; (80889e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80889d2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80889d4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80889d6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80889d8:	f7fd faba 	bl	8085f50 <hal_i2c_init>
}
 80889dc:	4620      	mov	r0, r4
 80889de:	bd10      	pop	{r4, pc}
 80889e0:	0808d300 	.word	0x0808d300

080889e4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80889e4:	2300      	movs	r3, #0
 80889e6:	7c00      	ldrb	r0, [r0, #16]
 80889e8:	461a      	mov	r2, r3
 80889ea:	4619      	mov	r1, r3
 80889ec:	f7fd ba68 	b.w	8085ec0 <hal_i2c_begin>

080889f0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80889f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80889f2:	2200      	movs	r2, #0
 80889f4:	2314      	movs	r3, #20
 80889f6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80889fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80889fe:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8088a00:	7c00      	ldrb	r0, [r0, #16]
 8088a02:	f88d 3008 	strb.w	r3, [sp, #8]
 8088a06:	684b      	ldr	r3, [r1, #4]
 8088a08:	9303      	str	r3, [sp, #12]
 8088a0a:	68cb      	ldr	r3, [r1, #12]
 8088a0c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8088a0e:	7a0b      	ldrb	r3, [r1, #8]
 8088a10:	a901      	add	r1, sp, #4
 8088a12:	9305      	str	r3, [sp, #20]
 8088a14:	f7fd fab4 	bl	8085f80 <hal_i2c_request_ex>
}
 8088a18:	b007      	add	sp, #28
 8088a1a:	f85d fb04 	ldr.w	pc, [sp], #4

08088a1e <_ZN7TwoWire11requestFromEhjh>:
{
 8088a1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8088a20:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088a22:	f88d 1000 	strb.w	r1, [sp]
 8088a26:	f04f 0164 	mov.w	r1, #100	; 0x64
 8088a2a:	bf18      	it	ne
 8088a2c:	2301      	movne	r3, #1
 8088a2e:	9103      	str	r1, [sp, #12]
 8088a30:	4669      	mov	r1, sp
    size_ = size;
 8088a32:	9201      	str	r2, [sp, #4]
 8088a34:	f88d 3008 	strb.w	r3, [sp, #8]
 8088a38:	f7ff ffda 	bl	80889f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8088a3c:	b005      	add	sp, #20
 8088a3e:	f85d fb04 	ldr.w	pc, [sp], #4

08088a42 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8088a42:	2301      	movs	r3, #1
 8088a44:	f7ff bfeb 	b.w	8088a1e <_ZN7TwoWire11requestFromEhjh>

08088a48 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8088a48:	2200      	movs	r2, #0
 8088a4a:	7c00      	ldrb	r0, [r0, #16]
 8088a4c:	f7fd ba40 	b.w	8085ed0 <hal_i2c_begin_transmission>

08088a50 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8088a50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8088a52:	2200      	movs	r2, #0
 8088a54:	460b      	mov	r3, r1
 8088a56:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8088a5a:	2214      	movs	r2, #20
 8088a5c:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8088a60:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8088a62:	7809      	ldrb	r1, [r1, #0]
    };
 8088a64:	9203      	str	r2, [sp, #12]
 8088a66:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8088a68:	7a1b      	ldrb	r3, [r3, #8]
    };
 8088a6a:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 8088a6c:	7c00      	ldrb	r0, [r0, #16]
 8088a6e:	aa01      	add	r2, sp, #4
 8088a70:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8088a74:	9305      	str	r3, [sp, #20]
 8088a76:	f7fd fa2b 	bl	8085ed0 <hal_i2c_begin_transmission>
}
 8088a7a:	b007      	add	sp, #28
 8088a7c:	f85d fb04 	ldr.w	pc, [sp], #4

08088a80 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8088a80:	2200      	movs	r2, #0
 8088a82:	7c00      	ldrb	r0, [r0, #16]
 8088a84:	f7fd ba2c 	b.w	8085ee0 <hal_i2c_end_transmission>

08088a88 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8088a88:	2101      	movs	r1, #1
 8088a8a:	f7ff bff9 	b.w	8088a80 <_ZN7TwoWire15endTransmissionEh>

08088a8e <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8088a8e:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8088a90:	2100      	movs	r1, #0
 8088a92:	7c00      	ldrb	r0, [r0, #16]
 8088a94:	f7fd fa64 	bl	8085f60 <hal_i2c_lock>
}
 8088a98:	fab0 f080 	clz	r0, r0
 8088a9c:	0940      	lsrs	r0, r0, #5
 8088a9e:	bd08      	pop	{r3, pc}

08088aa0 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8088aa0:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8088aa2:	2100      	movs	r1, #0
 8088aa4:	7c00      	ldrb	r0, [r0, #16]
 8088aa6:	f7fd fa63 	bl	8085f70 <hal_i2c_unlock>
}
 8088aaa:	fab0 f080 	clz	r0, r0
 8088aae:	0940      	lsrs	r0, r0, #5
 8088ab0:	bd08      	pop	{r3, pc}

08088ab2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8088ab2:	2300      	movs	r3, #0
 8088ab4:	6840      	ldr	r0, [r0, #4]
 8088ab6:	461a      	mov	r2, r3
 8088ab8:	f7fd bbd4 	b.w	8086264 <network_connect>

08088abc <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8088abc:	2200      	movs	r2, #0
 8088abe:	2102      	movs	r1, #2
 8088ac0:	6840      	ldr	r0, [r0, #4]
 8088ac2:	f7fd bbdf 	b.w	8086284 <network_disconnect>

08088ac6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8088ac6:	2200      	movs	r2, #0
 8088ac8:	6840      	ldr	r0, [r0, #4]
 8088aca:	4611      	mov	r1, r2
 8088acc:	f7fd bbd2 	b.w	8086274 <network_connecting>

08088ad0 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8088ad0:	2200      	movs	r2, #0
 8088ad2:	6840      	ldr	r0, [r0, #4]
 8088ad4:	4611      	mov	r1, r2
 8088ad6:	f7fd bbdd 	b.w	8086294 <network_ready>

08088ada <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8088ada:	2300      	movs	r3, #0
 8088adc:	6840      	ldr	r0, [r0, #4]
 8088ade:	461a      	mov	r2, r3
 8088ae0:	4619      	mov	r1, r3
 8088ae2:	f7fd bbdf 	b.w	80862a4 <network_on>

08088ae6 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8088ae6:	2300      	movs	r3, #0
 8088ae8:	6840      	ldr	r0, [r0, #4]
 8088aea:	461a      	mov	r2, r3
 8088aec:	4619      	mov	r1, r3
 8088aee:	f7fd bbe1 	b.w	80862b4 <network_off>

08088af2 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8088af2:	2200      	movs	r2, #0
 8088af4:	6840      	ldr	r0, [r0, #4]
 8088af6:	f081 0101 	eor.w	r1, r1, #1
 8088afa:	f7fd bbe3 	b.w	80862c4 <network_listen>

08088afe <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8088afe:	2200      	movs	r2, #0
 8088b00:	6840      	ldr	r0, [r0, #4]
 8088b02:	f7fd bbef 	b.w	80862e4 <network_set_listen_timeout>

08088b06 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8088b06:	2200      	movs	r2, #0
 8088b08:	6840      	ldr	r0, [r0, #4]
 8088b0a:	4611      	mov	r1, r2
 8088b0c:	f7fd bbf2 	b.w	80862f4 <network_get_listen_timeout>

08088b10 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8088b10:	2200      	movs	r2, #0
 8088b12:	6840      	ldr	r0, [r0, #4]
 8088b14:	4611      	mov	r1, r2
 8088b16:	f7fd bbdd 	b.w	80862d4 <network_listening>
	...

08088b1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8088b1c:	b570      	push	{r4, r5, r6, lr}
 8088b1e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8088b20:	2600      	movs	r6, #0
 8088b22:	b086      	sub	sp, #24
 8088b24:	4604      	mov	r4, r0
    IPAddress addr;
 8088b26:	a804      	add	r0, sp, #16
 8088b28:	f7ff fc52 	bl	80883d0 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088b2c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8088b2e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088b30:	f001 fde1 	bl	808a6f6 <strlen>
 8088b34:	4b0a      	ldr	r3, [pc, #40]	; (8088b60 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8088b36:	9600      	str	r6, [sp, #0]
 8088b38:	b281      	uxth	r1, r0
 8088b3a:	685b      	ldr	r3, [r3, #4]
 8088b3c:	4628      	mov	r0, r5
 8088b3e:	aa03      	add	r2, sp, #12
 8088b40:	f7fd fabe 	bl	80860c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8088b44:	b130      	cbz	r0, 8088b54 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8088b46:	4631      	mov	r1, r6
 8088b48:	4620      	mov	r0, r4
 8088b4a:	f7ff fc51 	bl	80883f0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8088b4e:	4620      	mov	r0, r4
 8088b50:	b006      	add	sp, #24
 8088b52:	bd70      	pop	{r4, r5, r6, pc}
 8088b54:	4620      	mov	r0, r4
 8088b56:	a903      	add	r1, sp, #12
 8088b58:	f7ff fc42 	bl	80883e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8088b5c:	e7f7      	b.n	8088b4e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8088b5e:	bf00      	nop
 8088b60:	20000f38 	.word	0x20000f38

08088b64 <_ZN5spark12NetworkClass4fromEm>:
}
 8088b64:	4a03      	ldr	r2, [pc, #12]	; (8088b74 <_ZN5spark12NetworkClass4fromEm+0x10>)
 8088b66:	4b04      	ldr	r3, [pc, #16]	; (8088b78 <_ZN5spark12NetworkClass4fromEm+0x14>)
 8088b68:	2804      	cmp	r0, #4
 8088b6a:	bf0c      	ite	eq
 8088b6c:	4610      	moveq	r0, r2
 8088b6e:	4618      	movne	r0, r3
 8088b70:	4770      	bx	lr
 8088b72:	bf00      	nop
 8088b74:	20000f38 	.word	0x20000f38
 8088b78:	20001088 	.word	0x20001088

08088b7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8088b7c:	4b02      	ldr	r3, [pc, #8]	; (8088b88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8088b7e:	4a03      	ldr	r2, [pc, #12]	; (8088b8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8088b80:	601a      	str	r2, [r3, #0]
 8088b82:	2200      	movs	r2, #0
 8088b84:	605a      	str	r2, [r3, #4]

} // spark
 8088b86:	4770      	bx	lr
 8088b88:	20001088 	.word	0x20001088
 8088b8c:	0808d328 	.word	0x0808d328

08088b90 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8088b90:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8088b92:	78c3      	ldrb	r3, [r0, #3]
 8088b94:	7802      	ldrb	r2, [r0, #0]
 8088b96:	b303      	cbz	r3, 8088bda <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8088b98:	4b15      	ldr	r3, [pc, #84]	; (8088bf0 <NVIC_Init+0x60>)
 8088b9a:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8088b9c:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8088b9e:	43c9      	mvns	r1, r1
 8088ba0:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 8088ba4:	f1c1 0404 	rsb	r4, r1, #4
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8088ba8:	b2e4      	uxtb	r4, r4
 8088baa:	40a3      	lsls	r3, r4
 8088bac:	b2dc      	uxtb	r4, r3
    tmpsub = tmpsub >> tmppriority;
 8088bae:	230f      	movs	r3, #15
 8088bb0:	fa43 f101 	asr.w	r1, r3, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8088bb4:	7883      	ldrb	r3, [r0, #2]
 8088bb6:	400b      	ands	r3, r1
 8088bb8:	4323      	orrs	r3, r4

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8088bba:	490e      	ldr	r1, [pc, #56]	; (8088bf4 <NVIC_Init+0x64>)
    tmppriority = tmppriority << 0x04;
 8088bbc:	011b      	lsls	r3, r3, #4
 8088bbe:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8088bc0:	440a      	add	r2, r1
 8088bc2:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8088bc6:	2201      	movs	r2, #1
 8088bc8:	7803      	ldrb	r3, [r0, #0]
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8088bca:	0958      	lsrs	r0, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8088bcc:	f003 031f 	and.w	r3, r3, #31
 8088bd0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8088bd4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8088bd8:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8088bda:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8088bdc:	0953      	lsrs	r3, r2, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8088bde:	f002 021f 	and.w	r2, r2, #31
 8088be2:	fa01 f202 	lsl.w	r2, r1, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8088be6:	4903      	ldr	r1, [pc, #12]	; (8088bf4 <NVIC_Init+0x64>)
 8088be8:	3320      	adds	r3, #32
 8088bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8088bee:	e7f3      	b.n	8088bd8 <NVIC_Init+0x48>
 8088bf0:	e000ed00 	.word	0xe000ed00
 8088bf4:	e000e100 	.word	0xe000e100

08088bf8 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8088bf8:	4b04      	ldr	r3, [pc, #16]	; (8088c0c <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8088bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (NewState != DISABLE)
 8088bfc:	b111      	cbz	r1, 8088c04 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 8088bfe:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8088c00:	6418      	str	r0, [r3, #64]	; 0x40
  }
}
 8088c02:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8088c04:	ea22 0000 	bic.w	r0, r2, r0
 8088c08:	e7fa      	b.n	8088c00 <RCC_APB1PeriphClockCmd+0x8>
 8088c0a:	bf00      	nop
 8088c0c:	40023800 	.word	0x40023800

08088c10 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8088c10:	4b04      	ldr	r3, [pc, #16]	; (8088c24 <RCC_APB1PeriphResetCmd+0x14>)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8088c12:	6a1a      	ldr	r2, [r3, #32]
  if (NewState != DISABLE)
 8088c14:	b111      	cbz	r1, 8088c1c <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8088c16:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8088c18:	6218      	str	r0, [r3, #32]
  }
}
 8088c1a:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8088c1c:	ea22 0000 	bic.w	r0, r2, r0
 8088c20:	e7fa      	b.n	8088c18 <RCC_APB1PeriphResetCmd+0x8>
 8088c22:	bf00      	nop
 8088c24:	40023800 	.word	0x40023800

08088c28 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8088c28:	4b04      	ldr	r3, [pc, #16]	; (8088c3c <RCC_APB2PeriphResetCmd+0x14>)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8088c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (NewState != DISABLE)
 8088c2c:	b111      	cbz	r1, 8088c34 <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8088c2e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8088c30:	6258      	str	r0, [r3, #36]	; 0x24
  }
}
 8088c32:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8088c34:	ea22 0000 	bic.w	r0, r2, r0
 8088c38:	e7fa      	b.n	8088c30 <RCC_APB2PeriphResetCmd+0x8>
 8088c3a:	bf00      	nop
 8088c3c:	40023800 	.word	0x40023800

08088c40 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8088c40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 8088c42:	4b4d      	ldr	r3, [pc, #308]	; (8088d78 <TIM_DeInit+0x138>)
 8088c44:	4298      	cmp	r0, r3
 8088c46:	d109      	bne.n	8088c5c <TIM_DeInit+0x1c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8088c48:	2101      	movs	r1, #1
 8088c4a:	4608      	mov	r0, r1
 8088c4c:	f7ff ffec 	bl	8088c28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 8088c50:	2100      	movs	r1, #0
 8088c52:	2001      	movs	r0, #1
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 8088c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8088c58:	f7ff bfe6 	b.w	8088c28 <RCC_APB2PeriphResetCmd>
  else if (TIMx == TIM2)
 8088c5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8088c60:	d109      	bne.n	8088c76 <TIM_DeInit+0x36>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8088c62:	2101      	movs	r1, #1
 8088c64:	4608      	mov	r0, r1
 8088c66:	f7ff ffd3 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8088c6a:	2100      	movs	r1, #0
 8088c6c:	2001      	movs	r0, #1
}
 8088c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8088c72:	f7ff bfcd 	b.w	8088c10 <RCC_APB1PeriphResetCmd>
  else if (TIMx == TIM3)
 8088c76:	4b41      	ldr	r3, [pc, #260]	; (8088d7c <TIM_DeInit+0x13c>)
 8088c78:	4298      	cmp	r0, r3
 8088c7a:	d106      	bne.n	8088c8a <TIM_DeInit+0x4a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8088c7c:	2101      	movs	r1, #1
 8088c7e:	2002      	movs	r0, #2
 8088c80:	f7ff ffc6 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8088c84:	2100      	movs	r1, #0
 8088c86:	2002      	movs	r0, #2
 8088c88:	e7f1      	b.n	8088c6e <TIM_DeInit+0x2e>
  else if (TIMx == TIM4)
 8088c8a:	4b3d      	ldr	r3, [pc, #244]	; (8088d80 <TIM_DeInit+0x140>)
 8088c8c:	4298      	cmp	r0, r3
 8088c8e:	d106      	bne.n	8088c9e <TIM_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8088c90:	2101      	movs	r1, #1
 8088c92:	2004      	movs	r0, #4
 8088c94:	f7ff ffbc 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8088c98:	2100      	movs	r1, #0
 8088c9a:	2004      	movs	r0, #4
 8088c9c:	e7e7      	b.n	8088c6e <TIM_DeInit+0x2e>
  else if (TIMx == TIM5)
 8088c9e:	4b39      	ldr	r3, [pc, #228]	; (8088d84 <TIM_DeInit+0x144>)
 8088ca0:	4298      	cmp	r0, r3
 8088ca2:	d106      	bne.n	8088cb2 <TIM_DeInit+0x72>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8088ca4:	2101      	movs	r1, #1
 8088ca6:	2008      	movs	r0, #8
 8088ca8:	f7ff ffb2 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8088cac:	2100      	movs	r1, #0
 8088cae:	2008      	movs	r0, #8
 8088cb0:	e7dd      	b.n	8088c6e <TIM_DeInit+0x2e>
  else if (TIMx == TIM6)
 8088cb2:	4b35      	ldr	r3, [pc, #212]	; (8088d88 <TIM_DeInit+0x148>)
 8088cb4:	4298      	cmp	r0, r3
 8088cb6:	d106      	bne.n	8088cc6 <TIM_DeInit+0x86>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8088cb8:	2101      	movs	r1, #1
 8088cba:	2010      	movs	r0, #16
 8088cbc:	f7ff ffa8 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8088cc0:	2100      	movs	r1, #0
 8088cc2:	2010      	movs	r0, #16
 8088cc4:	e7d3      	b.n	8088c6e <TIM_DeInit+0x2e>
  else if (TIMx == TIM7)
 8088cc6:	4b31      	ldr	r3, [pc, #196]	; (8088d8c <TIM_DeInit+0x14c>)
 8088cc8:	4298      	cmp	r0, r3
 8088cca:	d106      	bne.n	8088cda <TIM_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8088ccc:	2101      	movs	r1, #1
 8088cce:	2020      	movs	r0, #32
 8088cd0:	f7ff ff9e 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8088cd4:	2100      	movs	r1, #0
 8088cd6:	2020      	movs	r0, #32
 8088cd8:	e7c9      	b.n	8088c6e <TIM_DeInit+0x2e>
  else if (TIMx == TIM8)
 8088cda:	4b2d      	ldr	r3, [pc, #180]	; (8088d90 <TIM_DeInit+0x150>)
 8088cdc:	4298      	cmp	r0, r3
 8088cde:	d106      	bne.n	8088cee <TIM_DeInit+0xae>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8088ce0:	2101      	movs	r1, #1
 8088ce2:	2002      	movs	r0, #2
 8088ce4:	f7ff ffa0 	bl	8088c28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8088ce8:	2100      	movs	r1, #0
 8088cea:	2002      	movs	r0, #2
 8088cec:	e7b2      	b.n	8088c54 <TIM_DeInit+0x14>
  else if (TIMx == TIM9)
 8088cee:	4b29      	ldr	r3, [pc, #164]	; (8088d94 <TIM_DeInit+0x154>)
 8088cf0:	4298      	cmp	r0, r3
 8088cf2:	d108      	bne.n	8088d06 <TIM_DeInit+0xc6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8088cf4:	2101      	movs	r1, #1
 8088cf6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8088cfa:	f7ff ff95 	bl	8088c28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 8088cfe:	2100      	movs	r1, #0
 8088d00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8088d04:	e7a6      	b.n	8088c54 <TIM_DeInit+0x14>
  else if (TIMx == TIM10)
 8088d06:	4b24      	ldr	r3, [pc, #144]	; (8088d98 <TIM_DeInit+0x158>)
 8088d08:	4298      	cmp	r0, r3
 8088d0a:	d108      	bne.n	8088d1e <TIM_DeInit+0xde>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8088d0c:	2101      	movs	r1, #1
 8088d0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8088d12:	f7ff ff89 	bl	8088c28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 8088d16:	2100      	movs	r1, #0
 8088d18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8088d1c:	e79a      	b.n	8088c54 <TIM_DeInit+0x14>
  else if (TIMx == TIM11)
 8088d1e:	4b1f      	ldr	r3, [pc, #124]	; (8088d9c <TIM_DeInit+0x15c>)
 8088d20:	4298      	cmp	r0, r3
 8088d22:	d108      	bne.n	8088d36 <TIM_DeInit+0xf6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8088d24:	2101      	movs	r1, #1
 8088d26:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8088d2a:	f7ff ff7d 	bl	8088c28 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 8088d2e:	2100      	movs	r1, #0
 8088d30:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8088d34:	e78e      	b.n	8088c54 <TIM_DeInit+0x14>
  else if (TIMx == TIM12)
 8088d36:	4b1a      	ldr	r3, [pc, #104]	; (8088da0 <TIM_DeInit+0x160>)
 8088d38:	4298      	cmp	r0, r3
 8088d3a:	d106      	bne.n	8088d4a <TIM_DeInit+0x10a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8088d3c:	2101      	movs	r1, #1
 8088d3e:	2040      	movs	r0, #64	; 0x40
 8088d40:	f7ff ff66 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 8088d44:	2100      	movs	r1, #0
 8088d46:	2040      	movs	r0, #64	; 0x40
 8088d48:	e791      	b.n	8088c6e <TIM_DeInit+0x2e>
  else if (TIMx == TIM13)
 8088d4a:	4b16      	ldr	r3, [pc, #88]	; (8088da4 <TIM_DeInit+0x164>)
 8088d4c:	4298      	cmp	r0, r3
 8088d4e:	d106      	bne.n	8088d5e <TIM_DeInit+0x11e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8088d50:	2101      	movs	r1, #1
 8088d52:	2080      	movs	r0, #128	; 0x80
 8088d54:	f7ff ff5c 	bl	8088c10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 8088d58:	2100      	movs	r1, #0
 8088d5a:	2080      	movs	r0, #128	; 0x80
 8088d5c:	e787      	b.n	8088c6e <TIM_DeInit+0x2e>
    if (TIMx == TIM14)
 8088d5e:	4b12      	ldr	r3, [pc, #72]	; (8088da8 <TIM_DeInit+0x168>)
 8088d60:	4298      	cmp	r0, r3
 8088d62:	d108      	bne.n	8088d76 <TIM_DeInit+0x136>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8088d64:	2101      	movs	r1, #1
 8088d66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8088d6a:	f7ff ff51 	bl	8088c10 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8088d6e:	2100      	movs	r1, #0
 8088d70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8088d74:	e77b      	b.n	8088c6e <TIM_DeInit+0x2e>
}
 8088d76:	bd08      	pop	{r3, pc}
 8088d78:	40010000 	.word	0x40010000
 8088d7c:	40000400 	.word	0x40000400
 8088d80:	40000800 	.word	0x40000800
 8088d84:	40000c00 	.word	0x40000c00
 8088d88:	40001000 	.word	0x40001000
 8088d8c:	40001400 	.word	0x40001400
 8088d90:	40010400 	.word	0x40010400
 8088d94:	40014000 	.word	0x40014000
 8088d98:	40014400 	.word	0x40014400
 8088d9c:	40014800 	.word	0x40014800
 8088da0:	40001800 	.word	0x40001800
 8088da4:	40001c00 	.word	0x40001c00
 8088da8:	40002000 	.word	0x40002000

08088dac <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088dac:	4a1c      	ldr	r2, [pc, #112]	; (8088e20 <TIM_TimeBaseInit+0x74>)
  tmpcr1 = TIMx->CR1;
 8088dae:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088db0:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8088db2:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8088db4:	d012      	beq.n	8088ddc <TIM_TimeBaseInit+0x30>
 8088db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088dba:	4290      	cmp	r0, r2
 8088dbc:	d00e      	beq.n	8088ddc <TIM_TimeBaseInit+0x30>
 8088dbe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8088dc2:	d00b      	beq.n	8088ddc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8088dc4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8088dc8:	4290      	cmp	r0, r2
 8088dca:	d007      	beq.n	8088ddc <TIM_TimeBaseInit+0x30>
 8088dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088dd0:	4290      	cmp	r0, r2
 8088dd2:	d003      	beq.n	8088ddc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5))
 8088dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088dd8:	4290      	cmp	r0, r2
 8088dda:	d103      	bne.n	8088de4 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8088ddc:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8088dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8088de2:	4313      	orrs	r3, r2
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 8088de4:	4a0f      	ldr	r2, [pc, #60]	; (8088e24 <TIM_TimeBaseInit+0x78>)
 8088de6:	4290      	cmp	r0, r2
 8088de8:	d008      	beq.n	8088dfc <TIM_TimeBaseInit+0x50>
 8088dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8088dee:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8088df0:	bf1f      	itttt	ne
 8088df2:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8088df6:	890a      	ldrhne	r2, [r1, #8]
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8088df8:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8088dfa:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8088dfc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8088dfe:	684b      	ldr	r3, [r1, #4]
 8088e00:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8088e02:	880b      	ldrh	r3, [r1, #0]
 8088e04:	8503      	strh	r3, [r0, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8088e06:	4b06      	ldr	r3, [pc, #24]	; (8088e20 <TIM_TimeBaseInit+0x74>)
 8088e08:	4298      	cmp	r0, r3
 8088e0a:	d003      	beq.n	8088e14 <TIM_TimeBaseInit+0x68>
 8088e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8088e10:	4298      	cmp	r0, r3
 8088e12:	d101      	bne.n	8088e18 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8088e14:	7a8b      	ldrb	r3, [r1, #10]
 8088e16:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8088e18:	2301      	movs	r3, #1
 8088e1a:	8283      	strh	r3, [r0, #20]
}
 8088e1c:	4770      	bx	lr
 8088e1e:	bf00      	nop
 8088e20:	40010000 	.word	0x40010000
 8088e24:	40001000 	.word	0x40001000

08088e28 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8088e28:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8088e2a:	b121      	cbz	r1, 8088e36 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8088e2c:	b29b      	uxth	r3, r3
 8088e2e:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8088e32:	8003      	strh	r3, [r0, #0]
  }
}
 8088e34:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8088e36:	f023 0301 	bic.w	r3, r3, #1
 8088e3a:	041b      	lsls	r3, r3, #16
 8088e3c:	0c1b      	lsrs	r3, r3, #16
 8088e3e:	e7f8      	b.n	8088e32 <TIM_Cmd+0xa>

08088e40 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8088e40:	8983      	ldrh	r3, [r0, #12]
 8088e42:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8088e44:	b112      	cbz	r2, 8088e4c <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 8088e46:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8088e48:	8181      	strh	r1, [r0, #12]
  }
}
 8088e4a:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8088e4c:	ea23 0101 	bic.w	r1, r3, r1
 8088e50:	e7fa      	b.n	8088e48 <TIM_ITConfig+0x8>

08088e52 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8088e52:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 8088e54:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8088e56:	ea11 0003 	ands.w	r0, r1, r3
  itenable = TIMx->DIER & TIM_IT;
 8088e5a:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8088e5c:	d003      	beq.n	8088e66 <TIM_GetITStatus+0x14>
 8088e5e:	420a      	tst	r2, r1
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8088e60:	bf14      	ite	ne
 8088e62:	2001      	movne	r0, #1
 8088e64:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 8088e66:	4770      	bx	lr

08088e68 <TIM_ClearITPendingBit>:
 8088e68:	43c9      	mvns	r1, r1
 8088e6a:	b289      	uxth	r1, r1
 8088e6c:	8201      	strh	r1, [r0, #16]
 8088e6e:	4770      	bx	lr

08088e70 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8088e70:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8088e72:	b570      	push	{r4, r5, r6, lr}
 8088e74:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8088e76:	d901      	bls.n	8088e7c <pinAvailable+0xc>
    return false;
 8088e78:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8088e7a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8088e7c:	f1a0 030d 	sub.w	r3, r0, #13
 8088e80:	2b02      	cmp	r3, #2
 8088e82:	d90b      	bls.n	8088e9c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8088e84:	2801      	cmp	r0, #1
 8088e86:	d826      	bhi.n	8088ed6 <pinAvailable+0x66>
 8088e88:	f000 f8fa 	bl	8089080 <_Z19__fetch_global_Wirev>
 8088e8c:	2100      	movs	r1, #0
 8088e8e:	7c00      	ldrb	r0, [r0, #16]
 8088e90:	f7fd f856 	bl	8085f40 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8088e94:	f080 0001 	eor.w	r0, r0, #1
 8088e98:	b2c0      	uxtb	r0, r0
 8088e9a:	e7ee      	b.n	8088e7a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8088e9c:	4e13      	ldr	r6, [pc, #76]	; (8088eec <pinAvailable+0x7c>)
 8088e9e:	7831      	ldrb	r1, [r6, #0]
 8088ea0:	f3bf 8f5b 	dmb	ish
 8088ea4:	f011 0501 	ands.w	r5, r1, #1
 8088ea8:	d10f      	bne.n	8088eca <pinAvailable+0x5a>
 8088eaa:	4630      	mov	r0, r6
 8088eac:	f7f7 f920 	bl	80800f0 <__cxa_guard_acquire>
 8088eb0:	b158      	cbz	r0, 8088eca <pinAvailable+0x5a>
 8088eb2:	4629      	mov	r1, r5
 8088eb4:	480e      	ldr	r0, [pc, #56]	; (8088ef0 <pinAvailable+0x80>)
 8088eb6:	f7fd fbad 	bl	8086614 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8088eba:	4630      	mov	r0, r6
 8088ebc:	f7f7 f91d 	bl	80800fa <__cxa_guard_release>
 8088ec0:	4a0c      	ldr	r2, [pc, #48]	; (8088ef4 <pinAvailable+0x84>)
 8088ec2:	490d      	ldr	r1, [pc, #52]	; (8088ef8 <pinAvailable+0x88>)
 8088ec4:	480a      	ldr	r0, [pc, #40]	; (8088ef0 <pinAvailable+0x80>)
 8088ec6:	f000 f92b 	bl	8089120 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8088eca:	4b09      	ldr	r3, [pc, #36]	; (8088ef0 <pinAvailable+0x80>)
 8088ecc:	7818      	ldrb	r0, [r3, #0]
 8088ece:	f7fd f8c7 	bl	8086060 <hal_spi_is_enabled>
 8088ed2:	2800      	cmp	r0, #0
 8088ed4:	d1d0      	bne.n	8088e78 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8088ed6:	3c12      	subs	r4, #18
 8088ed8:	2c01      	cmp	r4, #1
 8088eda:	d805      	bhi.n	8088ee8 <pinAvailable+0x78>
 8088edc:	f7ff fd08 	bl	80888f0 <_Z22__fetch_global_Serial1v>
 8088ee0:	7c00      	ldrb	r0, [r0, #16]
 8088ee2:	f7fc ffd5 	bl	8085e90 <hal_usart_is_enabled>
 8088ee6:	e7d5      	b.n	8088e94 <pinAvailable+0x24>
  return true; // 'pin' is available
 8088ee8:	2001      	movs	r0, #1
 8088eea:	e7c6      	b.n	8088e7a <pinAvailable+0xa>
 8088eec:	20000234 	.word	0x20000234
 8088ef0:	20000238 	.word	0x20000238
 8088ef4:	20000230 	.word	0x20000230
 8088ef8:	0808021d 	.word	0x0808021d

08088efc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088efc:	282e      	cmp	r0, #46	; 0x2e
{
 8088efe:	b538      	push	{r3, r4, r5, lr}
 8088f00:	4604      	mov	r4, r0
 8088f02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088f04:	d80a      	bhi.n	8088f1c <pinMode+0x20>
 8088f06:	29ff      	cmp	r1, #255	; 0xff
 8088f08:	d008      	beq.n	8088f1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8088f0a:	f7ff ffb1 	bl	8088e70 <pinAvailable>
 8088f0e:	b128      	cbz	r0, 8088f1c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8088f10:	4629      	mov	r1, r5
 8088f12:	4620      	mov	r0, r4
}
 8088f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8088f18:	f7fc beda 	b.w	8085cd0 <HAL_Pin_Mode>
}
 8088f1c:	bd38      	pop	{r3, r4, r5, pc}

08088f1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8088f1e:	b538      	push	{r3, r4, r5, lr}
 8088f20:	4604      	mov	r4, r0
 8088f22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8088f24:	f7fc fedc 	bl	8085ce0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8088f28:	28ff      	cmp	r0, #255	; 0xff
 8088f2a:	d010      	beq.n	8088f4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8088f2c:	2806      	cmp	r0, #6
 8088f2e:	d804      	bhi.n	8088f3a <digitalWrite+0x1c>
 8088f30:	234d      	movs	r3, #77	; 0x4d
 8088f32:	fa23 f000 	lsr.w	r0, r3, r0
 8088f36:	07c3      	lsls	r3, r0, #31
 8088f38:	d409      	bmi.n	8088f4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8088f3a:	4620      	mov	r0, r4
 8088f3c:	f7ff ff98 	bl	8088e70 <pinAvailable>
 8088f40:	b128      	cbz	r0, 8088f4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8088f42:	4629      	mov	r1, r5
 8088f44:	4620      	mov	r0, r4
}
 8088f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8088f4a:	f7fc bed1 	b.w	8085cf0 <HAL_GPIO_Write>
}
 8088f4e:	bd38      	pop	{r3, r4, r5, pc}

08088f50 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8088f50:	b510      	push	{r4, lr}
 8088f52:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8088f54:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8088f56:	bf9c      	itt	ls
 8088f58:	340a      	addls	r4, #10
 8088f5a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8088f5c:	4620      	mov	r0, r4
 8088f5e:	f7ff ff87 	bl	8088e70 <pinAvailable>
 8088f62:	b150      	cbz	r0, 8088f7a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8088f64:	2103      	movs	r1, #3
 8088f66:	4620      	mov	r0, r4
 8088f68:	f7fc feaa 	bl	8085cc0 <HAL_Validate_Pin_Function>
 8088f6c:	2803      	cmp	r0, #3
 8088f6e:	d104      	bne.n	8088f7a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8088f70:	4620      	mov	r0, r4
}
 8088f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8088f76:	f7fc bed3 	b.w	8085d20 <hal_adc_read>
}
 8088f7a:	2000      	movs	r0, #0
 8088f7c:	bd10      	pop	{r4, pc}
	...

08088f80 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8088f80:	b530      	push	{r4, r5, lr}
 8088f82:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8088f84:	4d1b      	ldr	r5, [pc, #108]	; (8088ff4 <_ZN19ApplicationWatchdog4loopEv+0x74>)
{
 8088f86:	b089      	sub	sp, #36	; 0x24
		HAL_Delay_Milliseconds(timeout);
 8088f88:	6820      	ldr	r0, [r4, #0]
 8088f8a:	f7fc fee1 	bl	8085d50 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088f8e:	f7fc fef7 	bl	8085d80 <HAL_Timer_Get_Milli_Seconds>
		done = (now-last_checkin)>=timeout;
 8088f92:	682a      	ldr	r2, [r5, #0]
 8088f94:	6823      	ldr	r3, [r4, #0]
 8088f96:	1a80      	subs	r0, r0, r2
	while (!done) {
 8088f98:	4298      	cmp	r0, r3
 8088f9a:	d3f5      	bcc.n	8088f88 <_ZN19ApplicationWatchdog4loopEv+0x8>
	}

	if (timeout>0 && timeout_fn) {
 8088f9c:	6823      	ldr	r3, [r4, #0]
 8088f9e:	b333      	cbz	r3, 8088fee <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8088fa0:	68e3      	ldr	r3, [r4, #12]
 8088fa2:	b323      	cbz	r3, 8088fee <_ZN19ApplicationWatchdog4loopEv+0x6e>
		timeout_fn();
 8088fa4:	1d25      	adds	r5, r4, #4
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088fa6:	4628      	mov	r0, r5
 8088fa8:	6923      	ldr	r3, [r4, #16]
 8088faa:	4798      	blx	r3
    _Function_base() : _M_manager(nullptr) { }
 8088fac:	2300      	movs	r3, #0
	std::swap(_M_functor, __x._M_functor);
 8088fae:	4668      	mov	r0, sp
 8088fb0:	a904      	add	r1, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 8088fb2:	9302      	str	r3, [sp, #8]
 8088fb4:	9306      	str	r3, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
 8088fb6:	f7fe fcc9 	bl	808794c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088fba:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8088fbc:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8088fbe:	9306      	str	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088fc0:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088fc2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8088fc4:	9a07      	ldr	r2, [sp, #28]
 8088fc6:	4629      	mov	r1, r5
 8088fc8:	a804      	add	r0, sp, #16
 8088fca:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088fcc:	9307      	str	r3, [sp, #28]
 8088fce:	f7fe fcbd 	bl	808794c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088fd2:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088fd4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088fd6:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088fd8:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8088fda:	9206      	str	r2, [sp, #24]
 8088fdc:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 8088fde:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8088fe0:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8088fe2:	9207      	str	r2, [sp, #28]
 8088fe4:	f7f7 f981 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
 8088fe8:	4668      	mov	r0, sp
 8088fea:	f7f7 f97e 	bl	80802ea <_ZNSt14_Function_baseD1Ev>
		timeout_fn = std::function<void(void)>();
	}
}
 8088fee:	b009      	add	sp, #36	; 0x24
 8088ff0:	bd30      	pop	{r4, r5, pc}
 8088ff2:	bf00      	nop
 8088ff4:	20001090 	.word	0x20001090

08088ff8 <_ZN19ApplicationWatchdog5startEPv>:
{
 8088ff8:	b508      	push	{r3, lr}
	wd.loop();
 8088ffa:	f7ff ffc1 	bl	8088f80 <_ZN19ApplicationWatchdog4loopEv>
}
 8088ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	os_thread_cleanup(nullptr);
 8089002:	2000      	movs	r0, #0
 8089004:	f7fc bee4 	b.w	8085dd0 <os_thread_cleanup>

08089008 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8089008:	2300      	movs	r3, #0
 808900a:	b513      	push	{r0, r1, r4, lr}
 808900c:	4c07      	ldr	r4, [pc, #28]	; (808902c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808900e:	461a      	mov	r2, r3
 8089010:	4619      	mov	r1, r3
 8089012:	4620      	mov	r0, r4
 8089014:	9300      	str	r3, [sp, #0]
 8089016:	f7ff fa01 	bl	808841c <_ZN9IPAddressC1Ehhhh>
 808901a:	4620      	mov	r0, r4
 808901c:	4a04      	ldr	r2, [pc, #16]	; (8089030 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808901e:	4905      	ldr	r1, [pc, #20]	; (8089034 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8089020:	b002      	add	sp, #8
 8089022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8089026:	f000 b87b 	b.w	8089120 <__aeabi_atexit>
 808902a:	bf00      	nop
 808902c:	20001094 	.word	0x20001094
 8089030:	20000230 	.word	0x20000230
 8089034:	0808838d 	.word	0x0808838d

08089038 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 8089038:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808903a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808903c:	2520      	movs	r5, #32
 808903e:	8043      	strh	r3, [r0, #2]
 8089040:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089042:	4e08      	ldr	r6, [pc, #32]	; (8089064 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8089044:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8089046:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089048:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808904a:	6085      	str	r5, [r0, #8]
 808904c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808904e:	4628      	mov	r0, r5
 8089050:	f000 f86f 	bl	8089132 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089054:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8089056:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089058:	4628      	mov	r0, r5
 808905a:	f000 f86a 	bl	8089132 <_ZnajRKSt9nothrow_t>
	};
 808905e:	60e0      	str	r0, [r4, #12]

	return config;
}
 8089060:	4620      	mov	r0, r4
 8089062:	bd70      	pop	{r4, r5, r6, pc}
 8089064:	0808d354 	.word	0x0808d354

08089068 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8089068:	b510      	push	{r4, lr}
 808906a:	4604      	mov	r4, r0
	return defaultWireConfig();
 808906c:	f7ff ffe4 	bl	8089038 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8089070:	4620      	mov	r0, r4
 8089072:	bd10      	pop	{r4, pc}

08089074 <_Z18acquireWire3Bufferv>:
 8089074:	b510      	push	{r4, lr}
 8089076:	4604      	mov	r4, r0
 8089078:	f7ff ffde 	bl	8089038 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808907c:	4620      	mov	r0, r4
 808907e:	bd10      	pop	{r4, pc}

08089080 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8089080:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089082:	4d0f      	ldr	r5, [pc, #60]	; (80890c0 <_Z19__fetch_global_Wirev+0x40>)
{
 8089084:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089086:	7829      	ldrb	r1, [r5, #0]
 8089088:	f3bf 8f5b 	dmb	ish
 808908c:	f011 0401 	ands.w	r4, r1, #1
 8089090:	d113      	bne.n	80890ba <_Z19__fetch_global_Wirev+0x3a>
 8089092:	4628      	mov	r0, r5
 8089094:	f7f7 f82c 	bl	80800f0 <__cxa_guard_acquire>
 8089098:	b178      	cbz	r0, 80890ba <_Z19__fetch_global_Wirev+0x3a>
 808909a:	a801      	add	r0, sp, #4
 808909c:	f7ff ffe4 	bl	8089068 <_Z17acquireWireBufferv>
 80890a0:	4621      	mov	r1, r4
 80890a2:	aa01      	add	r2, sp, #4
 80890a4:	4807      	ldr	r0, [pc, #28]	; (80890c4 <_Z19__fetch_global_Wirev+0x44>)
 80890a6:	f7ff fc8b 	bl	80889c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80890aa:	4628      	mov	r0, r5
 80890ac:	f7f7 f825 	bl	80800fa <__cxa_guard_release>
 80890b0:	4a05      	ldr	r2, [pc, #20]	; (80890c8 <_Z19__fetch_global_Wirev+0x48>)
 80890b2:	4906      	ldr	r1, [pc, #24]	; (80890cc <_Z19__fetch_global_Wirev+0x4c>)
 80890b4:	4803      	ldr	r0, [pc, #12]	; (80890c4 <_Z19__fetch_global_Wirev+0x44>)
 80890b6:	f000 f833 	bl	8089120 <__aeabi_atexit>
	return wire;
}
 80890ba:	4802      	ldr	r0, [pc, #8]	; (80890c4 <_Z19__fetch_global_Wirev+0x44>)
 80890bc:	b007      	add	sp, #28
 80890be:	bd30      	pop	{r4, r5, pc}
 80890c0:	2000109c 	.word	0x2000109c
 80890c4:	200010a4 	.word	0x200010a4
 80890c8:	20000230 	.word	0x20000230
 80890cc:	08088969 	.word	0x08088969

080890d0 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80890d0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80890d2:	4c0f      	ldr	r4, [pc, #60]	; (8089110 <_Z20__fetch_global_Wire3v+0x40>)
{
 80890d4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80890d6:	7823      	ldrb	r3, [r4, #0]
 80890d8:	f3bf 8f5b 	dmb	ish
 80890dc:	07db      	lsls	r3, r3, #31
 80890de:	d413      	bmi.n	8089108 <_Z20__fetch_global_Wire3v+0x38>
 80890e0:	4620      	mov	r0, r4
 80890e2:	f7f7 f805 	bl	80800f0 <__cxa_guard_acquire>
 80890e6:	b178      	cbz	r0, 8089108 <_Z20__fetch_global_Wire3v+0x38>
 80890e8:	a801      	add	r0, sp, #4
 80890ea:	f7ff ffc3 	bl	8089074 <_Z18acquireWire3Bufferv>
 80890ee:	2102      	movs	r1, #2
 80890f0:	aa01      	add	r2, sp, #4
 80890f2:	4808      	ldr	r0, [pc, #32]	; (8089114 <_Z20__fetch_global_Wire3v+0x44>)
 80890f4:	f7ff fc64 	bl	80889c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80890f8:	4620      	mov	r0, r4
 80890fa:	f7f6 fffe 	bl	80800fa <__cxa_guard_release>
 80890fe:	4a06      	ldr	r2, [pc, #24]	; (8089118 <_Z20__fetch_global_Wire3v+0x48>)
 8089100:	4906      	ldr	r1, [pc, #24]	; (808911c <_Z20__fetch_global_Wire3v+0x4c>)
 8089102:	4804      	ldr	r0, [pc, #16]	; (8089114 <_Z20__fetch_global_Wire3v+0x44>)
 8089104:	f000 f80c 	bl	8089120 <__aeabi_atexit>
	return wire;
}
 8089108:	4802      	ldr	r0, [pc, #8]	; (8089114 <_Z20__fetch_global_Wire3v+0x44>)
 808910a:	b006      	add	sp, #24
 808910c:	bd10      	pop	{r4, pc}
 808910e:	bf00      	nop
 8089110:	200010a0 	.word	0x200010a0
 8089114:	200010b8 	.word	0x200010b8
 8089118:	20000230 	.word	0x20000230
 808911c:	08088969 	.word	0x08088969

08089120 <__aeabi_atexit>:
 8089120:	460b      	mov	r3, r1
 8089122:	4601      	mov	r1, r0
 8089124:	4618      	mov	r0, r3
 8089126:	f001 ba55 	b.w	808a5d4 <__cxa_atexit>

0808912a <_ZdlPvj>:
 808912a:	f7f6 bfd2 	b.w	80800d2 <_ZdlPv>

0808912e <_ZnwjRKSt9nothrow_t>:
 808912e:	f7f6 bfcc 	b.w	80800ca <_Znwj>

08089132 <_ZnajRKSt9nothrow_t>:
 8089132:	f7f6 bfcc 	b.w	80800ce <_Znaj>

08089136 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8089136:	68c3      	ldr	r3, [r0, #12]
 8089138:	b510      	push	{r4, lr}
 808913a:	689a      	ldr	r2, [r3, #8]
 808913c:	60c2      	str	r2, [r0, #12]
 808913e:	b102      	cbz	r2, 8089142 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8089140:	6050      	str	r0, [r2, #4]
 8089142:	6842      	ldr	r2, [r0, #4]
 8089144:	605a      	str	r2, [r3, #4]
 8089146:	680c      	ldr	r4, [r1, #0]
 8089148:	4284      	cmp	r4, r0
 808914a:	d103      	bne.n	8089154 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 808914c:	600b      	str	r3, [r1, #0]
 808914e:	6098      	str	r0, [r3, #8]
 8089150:	6043      	str	r3, [r0, #4]
 8089152:	bd10      	pop	{r4, pc}
 8089154:	6891      	ldr	r1, [r2, #8]
 8089156:	4281      	cmp	r1, r0
 8089158:	bf0c      	ite	eq
 808915a:	6093      	streq	r3, [r2, #8]
 808915c:	60d3      	strne	r3, [r2, #12]
 808915e:	e7f6      	b.n	808914e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08089160 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8089160:	6883      	ldr	r3, [r0, #8]
 8089162:	b510      	push	{r4, lr}
 8089164:	68da      	ldr	r2, [r3, #12]
 8089166:	6082      	str	r2, [r0, #8]
 8089168:	b102      	cbz	r2, 808916c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 808916a:	6050      	str	r0, [r2, #4]
 808916c:	6842      	ldr	r2, [r0, #4]
 808916e:	605a      	str	r2, [r3, #4]
 8089170:	680c      	ldr	r4, [r1, #0]
 8089172:	4284      	cmp	r4, r0
 8089174:	d103      	bne.n	808917e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8089176:	600b      	str	r3, [r1, #0]
 8089178:	60d8      	str	r0, [r3, #12]
 808917a:	6043      	str	r3, [r0, #4]
 808917c:	bd10      	pop	{r4, pc}
 808917e:	68d1      	ldr	r1, [r2, #12]
 8089180:	4281      	cmp	r1, r0
 8089182:	bf0c      	ite	eq
 8089184:	60d3      	streq	r3, [r2, #12]
 8089186:	6093      	strne	r3, [r2, #8]
 8089188:	e7f6      	b.n	8089178 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0808918a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 808918a:	7802      	ldrb	r2, [r0, #0]
 808918c:	4603      	mov	r3, r0
 808918e:	b92a      	cbnz	r2, 808919c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8089190:	6842      	ldr	r2, [r0, #4]
 8089192:	6852      	ldr	r2, [r2, #4]
 8089194:	4282      	cmp	r2, r0
 8089196:	d101      	bne.n	808919c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8089198:	68d0      	ldr	r0, [r2, #12]
 808919a:	4770      	bx	lr
 808919c:	689a      	ldr	r2, [r3, #8]
 808919e:	b122      	cbz	r2, 80891aa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80891a0:	4610      	mov	r0, r2
 80891a2:	68d2      	ldr	r2, [r2, #12]
 80891a4:	2a00      	cmp	r2, #0
 80891a6:	d1fb      	bne.n	80891a0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80891a8:	4770      	bx	lr
 80891aa:	6858      	ldr	r0, [r3, #4]
 80891ac:	6882      	ldr	r2, [r0, #8]
 80891ae:	429a      	cmp	r2, r3
 80891b0:	d102      	bne.n	80891b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 80891b2:	4603      	mov	r3, r0
 80891b4:	6840      	ldr	r0, [r0, #4]
 80891b6:	e7f9      	b.n	80891ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 80891b8:	4770      	bx	lr

080891ba <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80891ba:	68c3      	ldr	r3, [r0, #12]
 80891bc:	b123      	cbz	r3, 80891c8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80891be:	4618      	mov	r0, r3
 80891c0:	689b      	ldr	r3, [r3, #8]
 80891c2:	2b00      	cmp	r3, #0
 80891c4:	d1fb      	bne.n	80891be <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80891c6:	4770      	bx	lr
 80891c8:	6843      	ldr	r3, [r0, #4]
 80891ca:	68da      	ldr	r2, [r3, #12]
 80891cc:	4282      	cmp	r2, r0
 80891ce:	d102      	bne.n	80891d6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80891d0:	4618      	mov	r0, r3
 80891d2:	685b      	ldr	r3, [r3, #4]
 80891d4:	e7f9      	b.n	80891ca <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80891d6:	68c2      	ldr	r2, [r0, #12]
 80891d8:	4293      	cmp	r3, r2
 80891da:	bf18      	it	ne
 80891dc:	4618      	movne	r0, r3
 80891de:	4770      	bx	lr

080891e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80891e0:	f7ff bfd3 	b.w	808918a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080891e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80891e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80891e8:	461e      	mov	r6, r3
 80891ea:	f103 0804 	add.w	r8, r3, #4
 80891ee:	2300      	movs	r3, #0
 80891f0:	460c      	mov	r4, r1
 80891f2:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80891f6:	604a      	str	r2, [r1, #4]
 80891f8:	700b      	strb	r3, [r1, #0]
 80891fa:	b300      	cbz	r0, 808923e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80891fc:	4296      	cmp	r6, r2
 80891fe:	6091      	str	r1, [r2, #8]
 8089200:	d118      	bne.n	8089234 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8089202:	6071      	str	r1, [r6, #4]
 8089204:	60f4      	str	r4, [r6, #12]
 8089206:	2701      	movs	r7, #1
 8089208:	f04f 0900 	mov.w	r9, #0
 808920c:	6873      	ldr	r3, [r6, #4]
 808920e:	42a3      	cmp	r3, r4
 8089210:	d03f      	beq.n	8089292 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8089212:	6860      	ldr	r0, [r4, #4]
 8089214:	7802      	ldrb	r2, [r0, #0]
 8089216:	2a00      	cmp	r2, #0
 8089218:	d13c      	bne.n	8089294 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 808921a:	6845      	ldr	r5, [r0, #4]
 808921c:	68ab      	ldr	r3, [r5, #8]
 808921e:	4298      	cmp	r0, r3
 8089220:	d123      	bne.n	808926a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8089222:	68eb      	ldr	r3, [r5, #12]
 8089224:	b183      	cbz	r3, 8089248 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8089226:	781a      	ldrb	r2, [r3, #0]
 8089228:	b972      	cbnz	r2, 8089248 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 808922a:	7007      	strb	r7, [r0, #0]
 808922c:	701f      	strb	r7, [r3, #0]
 808922e:	702a      	strb	r2, [r5, #0]
 8089230:	462c      	mov	r4, r5
 8089232:	e7eb      	b.n	808920c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8089234:	68b3      	ldr	r3, [r6, #8]
 8089236:	4293      	cmp	r3, r2
 8089238:	d1e5      	bne.n	8089206 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 808923a:	60b1      	str	r1, [r6, #8]
 808923c:	e7e3      	b.n	8089206 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 808923e:	60d1      	str	r1, [r2, #12]
 8089240:	68f3      	ldr	r3, [r6, #12]
 8089242:	4293      	cmp	r3, r2
 8089244:	d1df      	bne.n	8089206 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8089246:	e7dd      	b.n	8089204 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8089248:	68c3      	ldr	r3, [r0, #12]
 808924a:	42a3      	cmp	r3, r4
 808924c:	d103      	bne.n	8089256 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 808924e:	4641      	mov	r1, r8
 8089250:	f7ff ff71 	bl	8089136 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8089254:	4604      	mov	r4, r0
 8089256:	6863      	ldr	r3, [r4, #4]
 8089258:	4641      	mov	r1, r8
 808925a:	701f      	strb	r7, [r3, #0]
 808925c:	4628      	mov	r0, r5
 808925e:	f885 9000 	strb.w	r9, [r5]
 8089262:	f7ff ff7d 	bl	8089160 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8089266:	4625      	mov	r5, r4
 8089268:	e7e2      	b.n	8089230 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 808926a:	b113      	cbz	r3, 8089272 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 808926c:	781a      	ldrb	r2, [r3, #0]
 808926e:	2a00      	cmp	r2, #0
 8089270:	d0db      	beq.n	808922a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8089272:	6883      	ldr	r3, [r0, #8]
 8089274:	42a3      	cmp	r3, r4
 8089276:	d103      	bne.n	8089280 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8089278:	4641      	mov	r1, r8
 808927a:	f7ff ff71 	bl	8089160 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 808927e:	4604      	mov	r4, r0
 8089280:	6863      	ldr	r3, [r4, #4]
 8089282:	4641      	mov	r1, r8
 8089284:	701f      	strb	r7, [r3, #0]
 8089286:	4628      	mov	r0, r5
 8089288:	f885 9000 	strb.w	r9, [r5]
 808928c:	f7ff ff53 	bl	8089136 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8089290:	e7e9      	b.n	8089266 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8089292:	4623      	mov	r3, r4
 8089294:	2201      	movs	r2, #1
 8089296:	701a      	strb	r2, [r3, #0]
 8089298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808929c <_ZSt25__throw_bad_function_callv>:
 808929c:	b508      	push	{r3, lr}
 808929e:	f7fd f8a9 	bl	80863f4 <abort>
	...

080892a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80892a4:	4901      	ldr	r1, [pc, #4]	; (80892ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80892a6:	f000 b8fb 	b.w	80894a0 <_ZNKSt9type_infoeqERKS_>
 80892aa:	bf00      	nop
 80892ac:	0808d370 	.word	0x0808d370

080892b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80892b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80892b2:	2400      	movs	r4, #0
 80892b4:	2310      	movs	r3, #16
 80892b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80892ba:	6803      	ldr	r3, [r0, #0]
 80892bc:	4615      	mov	r5, r2
 80892be:	699e      	ldr	r6, [r3, #24]
 80892c0:	6812      	ldr	r2, [r2, #0]
 80892c2:	466b      	mov	r3, sp
 80892c4:	9400      	str	r4, [sp, #0]
 80892c6:	f88d 4004 	strb.w	r4, [sp, #4]
 80892ca:	47b0      	blx	r6
 80892cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80892d0:	f003 0306 	and.w	r3, r3, #6
 80892d4:	2b06      	cmp	r3, #6
 80892d6:	bf09      	itett	eq
 80892d8:	2001      	moveq	r0, #1
 80892da:	4620      	movne	r0, r4
 80892dc:	9b00      	ldreq	r3, [sp, #0]
 80892de:	602b      	streq	r3, [r5, #0]
 80892e0:	b004      	add	sp, #16
 80892e2:	bd70      	pop	{r4, r5, r6, pc}

080892e4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80892e4:	9800      	ldr	r0, [sp, #0]
 80892e6:	4290      	cmp	r0, r2
 80892e8:	bf14      	ite	ne
 80892ea:	2001      	movne	r0, #1
 80892ec:	2006      	moveq	r0, #6
 80892ee:	4770      	bx	lr

080892f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80892f0:	b510      	push	{r4, lr}
 80892f2:	4604      	mov	r4, r0
 80892f4:	4b02      	ldr	r3, [pc, #8]	; (8089300 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80892f6:	6003      	str	r3, [r0, #0]
 80892f8:	f000 f8cf 	bl	808949a <_ZNSt9type_infoD1Ev>
 80892fc:	4620      	mov	r0, r4
 80892fe:	bd10      	pop	{r4, pc}
 8089300:	0808d3b0 	.word	0x0808d3b0

08089304 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8089304:	b510      	push	{r4, lr}
 8089306:	4604      	mov	r4, r0
 8089308:	f7ff fff2 	bl	80892f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 808930c:	4620      	mov	r0, r4
 808930e:	2108      	movs	r1, #8
 8089310:	f7ff ff0b 	bl	808912a <_ZdlPvj>
 8089314:	4620      	mov	r0, r4
 8089316:	bd10      	pop	{r4, pc}

08089318 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8089318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808931c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8089320:	461f      	mov	r7, r3
 8089322:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8089326:	4598      	cmp	r8, r3
 8089328:	4606      	mov	r6, r0
 808932a:	4615      	mov	r5, r2
 808932c:	d107      	bne.n	808933e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 808932e:	9907      	ldr	r1, [sp, #28]
 8089330:	f000 f8b6 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 8089334:	b118      	cbz	r0, 808933e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8089336:	7165      	strb	r5, [r4, #5]
 8089338:	2000      	movs	r0, #0
 808933a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808933e:	4639      	mov	r1, r7
 8089340:	4630      	mov	r0, r6
 8089342:	f000 f8ad 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 8089346:	2800      	cmp	r0, #0
 8089348:	d0f6      	beq.n	8089338 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 808934a:	2301      	movs	r3, #1
 808934c:	f8c4 8000 	str.w	r8, [r4]
 8089350:	7125      	strb	r5, [r4, #4]
 8089352:	71a3      	strb	r3, [r4, #6]
 8089354:	e7f0      	b.n	8089338 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08089356 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8089356:	b538      	push	{r3, r4, r5, lr}
 8089358:	4615      	mov	r5, r2
 808935a:	461c      	mov	r4, r3
 808935c:	f000 f8a0 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 8089360:	b120      	cbz	r0, 808936c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8089362:	2308      	movs	r3, #8
 8089364:	60e3      	str	r3, [r4, #12]
 8089366:	2306      	movs	r3, #6
 8089368:	6025      	str	r5, [r4, #0]
 808936a:	7123      	strb	r3, [r4, #4]
 808936c:	bd38      	pop	{r3, r4, r5, pc}

0808936e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 808936e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089372:	4605      	mov	r5, r0
 8089374:	460c      	mov	r4, r1
 8089376:	4616      	mov	r6, r2
 8089378:	461f      	mov	r7, r3
 808937a:	f000 f891 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 808937e:	b948      	cbnz	r0, 8089394 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8089380:	2f03      	cmp	r7, #3
 8089382:	d807      	bhi.n	8089394 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8089384:	6823      	ldr	r3, [r4, #0]
 8089386:	4632      	mov	r2, r6
 8089388:	4629      	mov	r1, r5
 808938a:	4620      	mov	r0, r4
 808938c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8089390:	695b      	ldr	r3, [r3, #20]
 8089392:	4718      	bx	r3
 8089394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08089398 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8089398:	b510      	push	{r4, lr}
 808939a:	4604      	mov	r4, r0
 808939c:	4b02      	ldr	r3, [pc, #8]	; (80893a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 808939e:	6003      	str	r3, [r0, #0]
 80893a0:	f7ff ffa6 	bl	80892f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80893a4:	4620      	mov	r0, r4
 80893a6:	bd10      	pop	{r4, pc}
 80893a8:	0808d410 	.word	0x0808d410

080893ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80893ac:	b510      	push	{r4, lr}
 80893ae:	4604      	mov	r4, r0
 80893b0:	f7ff fff2 	bl	8089398 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80893b4:	4620      	mov	r0, r4
 80893b6:	210c      	movs	r1, #12
 80893b8:	f7ff feb7 	bl	808912a <_ZdlPvj>
 80893bc:	4620      	mov	r0, r4
 80893be:	bd10      	pop	{r4, pc}

080893c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80893c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80893c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80893c8:	4606      	mov	r6, r0
 80893ca:	4590      	cmp	r8, r2
 80893cc:	460f      	mov	r7, r1
 80893ce:	4615      	mov	r5, r2
 80893d0:	461c      	mov	r4, r3
 80893d2:	d00b      	beq.n	80893ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80893d4:	68b0      	ldr	r0, [r6, #8]
 80893d6:	462a      	mov	r2, r5
 80893d8:	6803      	ldr	r3, [r0, #0]
 80893da:	f8cd 8018 	str.w	r8, [sp, #24]
 80893de:	6a1e      	ldr	r6, [r3, #32]
 80893e0:	4639      	mov	r1, r7
 80893e2:	4623      	mov	r3, r4
 80893e4:	46b4      	mov	ip, r6
 80893e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80893ea:	4760      	bx	ip
 80893ec:	4619      	mov	r1, r3
 80893ee:	f000 f857 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 80893f2:	2800      	cmp	r0, #0
 80893f4:	d0ee      	beq.n	80893d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80893f6:	2006      	movs	r0, #6
 80893f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080893fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80893fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089400:	460d      	mov	r5, r1
 8089402:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8089406:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 808940a:	4619      	mov	r1, r3
 808940c:	4681      	mov	r9, r0
 808940e:	4617      	mov	r7, r2
 8089410:	4698      	mov	r8, r3
 8089412:	f000 f845 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 8089416:	b190      	cbz	r0, 808943e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8089418:	2d00      	cmp	r5, #0
 808941a:	6034      	str	r4, [r6, #0]
 808941c:	7137      	strb	r7, [r6, #4]
 808941e:	db09      	blt.n	8089434 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8089420:	442c      	add	r4, r5
 8089422:	45a2      	cmp	sl, r4
 8089424:	bf0c      	ite	eq
 8089426:	2406      	moveq	r4, #6
 8089428:	2401      	movne	r4, #1
 808942a:	71b4      	strb	r4, [r6, #6]
 808942c:	2000      	movs	r0, #0
 808942e:	b001      	add	sp, #4
 8089430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089434:	3502      	adds	r5, #2
 8089436:	d1f9      	bne.n	808942c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8089438:	2301      	movs	r3, #1
 808943a:	71b3      	strb	r3, [r6, #6]
 808943c:	e7f6      	b.n	808942c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 808943e:	4554      	cmp	r4, sl
 8089440:	d106      	bne.n	8089450 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8089442:	4659      	mov	r1, fp
 8089444:	4648      	mov	r0, r9
 8089446:	f000 f82b 	bl	80894a0 <_ZNKSt9type_infoeqERKS_>
 808944a:	b108      	cbz	r0, 8089450 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 808944c:	7177      	strb	r7, [r6, #5]
 808944e:	e7ed      	b.n	808942c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8089450:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8089454:	463a      	mov	r2, r7
 8089456:	6803      	ldr	r3, [r0, #0]
 8089458:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 808945c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8089460:	69dc      	ldr	r4, [r3, #28]
 8089462:	4629      	mov	r1, r5
 8089464:	4643      	mov	r3, r8
 8089466:	46a4      	mov	ip, r4
 8089468:	b001      	add	sp, #4
 808946a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808946e:	4760      	bx	ip

08089470 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8089470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089474:	4607      	mov	r7, r0
 8089476:	460c      	mov	r4, r1
 8089478:	4615      	mov	r5, r2
 808947a:	461e      	mov	r6, r3
 808947c:	f7ff ff6b 	bl	8089356 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8089480:	b948      	cbnz	r0, 8089496 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8089482:	68b8      	ldr	r0, [r7, #8]
 8089484:	462a      	mov	r2, r5
 8089486:	6803      	ldr	r3, [r0, #0]
 8089488:	4621      	mov	r1, r4
 808948a:	699f      	ldr	r7, [r3, #24]
 808948c:	4633      	mov	r3, r6
 808948e:	46bc      	mov	ip, r7
 8089490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8089494:	4760      	bx	ip
 8089496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808949a <_ZNSt9type_infoD1Ev>:
 808949a:	4770      	bx	lr

0808949c <_ZNKSt9type_info14__is_pointer_pEv>:
 808949c:	2000      	movs	r0, #0
 808949e:	4770      	bx	lr

080894a0 <_ZNKSt9type_infoeqERKS_>:
 80894a0:	4281      	cmp	r1, r0
 80894a2:	b508      	push	{r3, lr}
 80894a4:	d00e      	beq.n	80894c4 <_ZNKSt9type_infoeqERKS_+0x24>
 80894a6:	6840      	ldr	r0, [r0, #4]
 80894a8:	7803      	ldrb	r3, [r0, #0]
 80894aa:	2b2a      	cmp	r3, #42	; 0x2a
 80894ac:	d00c      	beq.n	80894c8 <_ZNKSt9type_infoeqERKS_+0x28>
 80894ae:	6849      	ldr	r1, [r1, #4]
 80894b0:	780b      	ldrb	r3, [r1, #0]
 80894b2:	2b2a      	cmp	r3, #42	; 0x2a
 80894b4:	bf08      	it	eq
 80894b6:	3101      	addeq	r1, #1
 80894b8:	f001 f8ef 	bl	808a69a <strcmp>
 80894bc:	fab0 f080 	clz	r0, r0
 80894c0:	0940      	lsrs	r0, r0, #5
 80894c2:	bd08      	pop	{r3, pc}
 80894c4:	2001      	movs	r0, #1
 80894c6:	e7fc      	b.n	80894c2 <_ZNKSt9type_infoeqERKS_+0x22>
 80894c8:	2000      	movs	r0, #0
 80894ca:	e7fa      	b.n	80894c2 <_ZNKSt9type_infoeqERKS_+0x22>

080894cc <nan>:
 80894cc:	2000      	movs	r0, #0
 80894ce:	4901      	ldr	r1, [pc, #4]	; (80894d4 <nan+0x8>)
 80894d0:	4770      	bx	lr
 80894d2:	bf00      	nop
 80894d4:	7ff80000 	.word	0x7ff80000

080894d8 <__aeabi_drsub>:
 80894d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80894dc:	e002      	b.n	80894e4 <__adddf3>
 80894de:	bf00      	nop

080894e0 <__aeabi_dsub>:
 80894e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080894e4 <__adddf3>:
 80894e4:	b530      	push	{r4, r5, lr}
 80894e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80894ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80894ee:	ea94 0f05 	teq	r4, r5
 80894f2:	bf08      	it	eq
 80894f4:	ea90 0f02 	teqeq	r0, r2
 80894f8:	bf1f      	itttt	ne
 80894fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80894fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089502:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089506:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808950a:	f000 80e2 	beq.w	80896d2 <__adddf3+0x1ee>
 808950e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089512:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089516:	bfb8      	it	lt
 8089518:	426d      	neglt	r5, r5
 808951a:	dd0c      	ble.n	8089536 <__adddf3+0x52>
 808951c:	442c      	add	r4, r5
 808951e:	ea80 0202 	eor.w	r2, r0, r2
 8089522:	ea81 0303 	eor.w	r3, r1, r3
 8089526:	ea82 0000 	eor.w	r0, r2, r0
 808952a:	ea83 0101 	eor.w	r1, r3, r1
 808952e:	ea80 0202 	eor.w	r2, r0, r2
 8089532:	ea81 0303 	eor.w	r3, r1, r3
 8089536:	2d36      	cmp	r5, #54	; 0x36
 8089538:	bf88      	it	hi
 808953a:	bd30      	pophi	{r4, r5, pc}
 808953c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089540:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089544:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089548:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808954c:	d002      	beq.n	8089554 <__adddf3+0x70>
 808954e:	4240      	negs	r0, r0
 8089550:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089554:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089558:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808955c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089560:	d002      	beq.n	8089568 <__adddf3+0x84>
 8089562:	4252      	negs	r2, r2
 8089564:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089568:	ea94 0f05 	teq	r4, r5
 808956c:	f000 80a7 	beq.w	80896be <__adddf3+0x1da>
 8089570:	f1a4 0401 	sub.w	r4, r4, #1
 8089574:	f1d5 0e20 	rsbs	lr, r5, #32
 8089578:	db0d      	blt.n	8089596 <__adddf3+0xb2>
 808957a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808957e:	fa22 f205 	lsr.w	r2, r2, r5
 8089582:	1880      	adds	r0, r0, r2
 8089584:	f141 0100 	adc.w	r1, r1, #0
 8089588:	fa03 f20e 	lsl.w	r2, r3, lr
 808958c:	1880      	adds	r0, r0, r2
 808958e:	fa43 f305 	asr.w	r3, r3, r5
 8089592:	4159      	adcs	r1, r3
 8089594:	e00e      	b.n	80895b4 <__adddf3+0xd0>
 8089596:	f1a5 0520 	sub.w	r5, r5, #32
 808959a:	f10e 0e20 	add.w	lr, lr, #32
 808959e:	2a01      	cmp	r2, #1
 80895a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80895a4:	bf28      	it	cs
 80895a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80895aa:	fa43 f305 	asr.w	r3, r3, r5
 80895ae:	18c0      	adds	r0, r0, r3
 80895b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80895b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80895b8:	d507      	bpl.n	80895ca <__adddf3+0xe6>
 80895ba:	f04f 0e00 	mov.w	lr, #0
 80895be:	f1dc 0c00 	rsbs	ip, ip, #0
 80895c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80895c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80895ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80895ce:	d31b      	bcc.n	8089608 <__adddf3+0x124>
 80895d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80895d4:	d30c      	bcc.n	80895f0 <__adddf3+0x10c>
 80895d6:	0849      	lsrs	r1, r1, #1
 80895d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80895dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80895e0:	f104 0401 	add.w	r4, r4, #1
 80895e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80895e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80895ec:	f080 809a 	bcs.w	8089724 <__adddf3+0x240>
 80895f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80895f4:	bf08      	it	eq
 80895f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80895fa:	f150 0000 	adcs.w	r0, r0, #0
 80895fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089602:	ea41 0105 	orr.w	r1, r1, r5
 8089606:	bd30      	pop	{r4, r5, pc}
 8089608:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808960c:	4140      	adcs	r0, r0
 808960e:	eb41 0101 	adc.w	r1, r1, r1
 8089612:	3c01      	subs	r4, #1
 8089614:	bf28      	it	cs
 8089616:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808961a:	d2e9      	bcs.n	80895f0 <__adddf3+0x10c>
 808961c:	f091 0f00 	teq	r1, #0
 8089620:	bf04      	itt	eq
 8089622:	4601      	moveq	r1, r0
 8089624:	2000      	moveq	r0, #0
 8089626:	fab1 f381 	clz	r3, r1
 808962a:	bf08      	it	eq
 808962c:	3320      	addeq	r3, #32
 808962e:	f1a3 030b 	sub.w	r3, r3, #11
 8089632:	f1b3 0220 	subs.w	r2, r3, #32
 8089636:	da0c      	bge.n	8089652 <__adddf3+0x16e>
 8089638:	320c      	adds	r2, #12
 808963a:	dd08      	ble.n	808964e <__adddf3+0x16a>
 808963c:	f102 0c14 	add.w	ip, r2, #20
 8089640:	f1c2 020c 	rsb	r2, r2, #12
 8089644:	fa01 f00c 	lsl.w	r0, r1, ip
 8089648:	fa21 f102 	lsr.w	r1, r1, r2
 808964c:	e00c      	b.n	8089668 <__adddf3+0x184>
 808964e:	f102 0214 	add.w	r2, r2, #20
 8089652:	bfd8      	it	le
 8089654:	f1c2 0c20 	rsble	ip, r2, #32
 8089658:	fa01 f102 	lsl.w	r1, r1, r2
 808965c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089660:	bfdc      	itt	le
 8089662:	ea41 010c 	orrle.w	r1, r1, ip
 8089666:	4090      	lslle	r0, r2
 8089668:	1ae4      	subs	r4, r4, r3
 808966a:	bfa2      	ittt	ge
 808966c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089670:	4329      	orrge	r1, r5
 8089672:	bd30      	popge	{r4, r5, pc}
 8089674:	ea6f 0404 	mvn.w	r4, r4
 8089678:	3c1f      	subs	r4, #31
 808967a:	da1c      	bge.n	80896b6 <__adddf3+0x1d2>
 808967c:	340c      	adds	r4, #12
 808967e:	dc0e      	bgt.n	808969e <__adddf3+0x1ba>
 8089680:	f104 0414 	add.w	r4, r4, #20
 8089684:	f1c4 0220 	rsb	r2, r4, #32
 8089688:	fa20 f004 	lsr.w	r0, r0, r4
 808968c:	fa01 f302 	lsl.w	r3, r1, r2
 8089690:	ea40 0003 	orr.w	r0, r0, r3
 8089694:	fa21 f304 	lsr.w	r3, r1, r4
 8089698:	ea45 0103 	orr.w	r1, r5, r3
 808969c:	bd30      	pop	{r4, r5, pc}
 808969e:	f1c4 040c 	rsb	r4, r4, #12
 80896a2:	f1c4 0220 	rsb	r2, r4, #32
 80896a6:	fa20 f002 	lsr.w	r0, r0, r2
 80896aa:	fa01 f304 	lsl.w	r3, r1, r4
 80896ae:	ea40 0003 	orr.w	r0, r0, r3
 80896b2:	4629      	mov	r1, r5
 80896b4:	bd30      	pop	{r4, r5, pc}
 80896b6:	fa21 f004 	lsr.w	r0, r1, r4
 80896ba:	4629      	mov	r1, r5
 80896bc:	bd30      	pop	{r4, r5, pc}
 80896be:	f094 0f00 	teq	r4, #0
 80896c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80896c6:	bf06      	itte	eq
 80896c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80896cc:	3401      	addeq	r4, #1
 80896ce:	3d01      	subne	r5, #1
 80896d0:	e74e      	b.n	8089570 <__adddf3+0x8c>
 80896d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80896d6:	bf18      	it	ne
 80896d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80896dc:	d029      	beq.n	8089732 <__adddf3+0x24e>
 80896de:	ea94 0f05 	teq	r4, r5
 80896e2:	bf08      	it	eq
 80896e4:	ea90 0f02 	teqeq	r0, r2
 80896e8:	d005      	beq.n	80896f6 <__adddf3+0x212>
 80896ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80896ee:	bf04      	itt	eq
 80896f0:	4619      	moveq	r1, r3
 80896f2:	4610      	moveq	r0, r2
 80896f4:	bd30      	pop	{r4, r5, pc}
 80896f6:	ea91 0f03 	teq	r1, r3
 80896fa:	bf1e      	ittt	ne
 80896fc:	2100      	movne	r1, #0
 80896fe:	2000      	movne	r0, #0
 8089700:	bd30      	popne	{r4, r5, pc}
 8089702:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089706:	d105      	bne.n	8089714 <__adddf3+0x230>
 8089708:	0040      	lsls	r0, r0, #1
 808970a:	4149      	adcs	r1, r1
 808970c:	bf28      	it	cs
 808970e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089712:	bd30      	pop	{r4, r5, pc}
 8089714:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089718:	bf3c      	itt	cc
 808971a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808971e:	bd30      	popcc	{r4, r5, pc}
 8089720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089724:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808972c:	f04f 0000 	mov.w	r0, #0
 8089730:	bd30      	pop	{r4, r5, pc}
 8089732:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089736:	bf1a      	itte	ne
 8089738:	4619      	movne	r1, r3
 808973a:	4610      	movne	r0, r2
 808973c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089740:	bf1c      	itt	ne
 8089742:	460b      	movne	r3, r1
 8089744:	4602      	movne	r2, r0
 8089746:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808974a:	bf06      	itte	eq
 808974c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089750:	ea91 0f03 	teqeq	r1, r3
 8089754:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089758:	bd30      	pop	{r4, r5, pc}
 808975a:	bf00      	nop

0808975c <__aeabi_ui2d>:
 808975c:	f090 0f00 	teq	r0, #0
 8089760:	bf04      	itt	eq
 8089762:	2100      	moveq	r1, #0
 8089764:	4770      	bxeq	lr
 8089766:	b530      	push	{r4, r5, lr}
 8089768:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808976c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089770:	f04f 0500 	mov.w	r5, #0
 8089774:	f04f 0100 	mov.w	r1, #0
 8089778:	e750      	b.n	808961c <__adddf3+0x138>
 808977a:	bf00      	nop

0808977c <__aeabi_i2d>:
 808977c:	f090 0f00 	teq	r0, #0
 8089780:	bf04      	itt	eq
 8089782:	2100      	moveq	r1, #0
 8089784:	4770      	bxeq	lr
 8089786:	b530      	push	{r4, r5, lr}
 8089788:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808978c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089790:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089794:	bf48      	it	mi
 8089796:	4240      	negmi	r0, r0
 8089798:	f04f 0100 	mov.w	r1, #0
 808979c:	e73e      	b.n	808961c <__adddf3+0x138>
 808979e:	bf00      	nop

080897a0 <__aeabi_f2d>:
 80897a0:	0042      	lsls	r2, r0, #1
 80897a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80897a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80897aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80897ae:	bf1f      	itttt	ne
 80897b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80897b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80897b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80897bc:	4770      	bxne	lr
 80897be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80897c2:	bf08      	it	eq
 80897c4:	4770      	bxeq	lr
 80897c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80897ca:	bf04      	itt	eq
 80897cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80897d0:	4770      	bxeq	lr
 80897d2:	b530      	push	{r4, r5, lr}
 80897d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80897d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80897dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80897e0:	e71c      	b.n	808961c <__adddf3+0x138>
 80897e2:	bf00      	nop

080897e4 <__aeabi_ul2d>:
 80897e4:	ea50 0201 	orrs.w	r2, r0, r1
 80897e8:	bf08      	it	eq
 80897ea:	4770      	bxeq	lr
 80897ec:	b530      	push	{r4, r5, lr}
 80897ee:	f04f 0500 	mov.w	r5, #0
 80897f2:	e00a      	b.n	808980a <__aeabi_l2d+0x16>

080897f4 <__aeabi_l2d>:
 80897f4:	ea50 0201 	orrs.w	r2, r0, r1
 80897f8:	bf08      	it	eq
 80897fa:	4770      	bxeq	lr
 80897fc:	b530      	push	{r4, r5, lr}
 80897fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089802:	d502      	bpl.n	808980a <__aeabi_l2d+0x16>
 8089804:	4240      	negs	r0, r0
 8089806:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808980a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808980e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089812:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089816:	f43f aed8 	beq.w	80895ca <__adddf3+0xe6>
 808981a:	f04f 0203 	mov.w	r2, #3
 808981e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089822:	bf18      	it	ne
 8089824:	3203      	addne	r2, #3
 8089826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808982a:	bf18      	it	ne
 808982c:	3203      	addne	r2, #3
 808982e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089832:	f1c2 0320 	rsb	r3, r2, #32
 8089836:	fa00 fc03 	lsl.w	ip, r0, r3
 808983a:	fa20 f002 	lsr.w	r0, r0, r2
 808983e:	fa01 fe03 	lsl.w	lr, r1, r3
 8089842:	ea40 000e 	orr.w	r0, r0, lr
 8089846:	fa21 f102 	lsr.w	r1, r1, r2
 808984a:	4414      	add	r4, r2
 808984c:	e6bd      	b.n	80895ca <__adddf3+0xe6>
 808984e:	bf00      	nop

08089850 <__aeabi_dmul>:
 8089850:	b570      	push	{r4, r5, r6, lr}
 8089852:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089856:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808985a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808985e:	bf1d      	ittte	ne
 8089860:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089864:	ea94 0f0c 	teqne	r4, ip
 8089868:	ea95 0f0c 	teqne	r5, ip
 808986c:	f000 f8de 	bleq	8089a2c <__aeabi_dmul+0x1dc>
 8089870:	442c      	add	r4, r5
 8089872:	ea81 0603 	eor.w	r6, r1, r3
 8089876:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808987a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808987e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089882:	bf18      	it	ne
 8089884:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8089888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808988c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8089890:	d038      	beq.n	8089904 <__aeabi_dmul+0xb4>
 8089892:	fba0 ce02 	umull	ip, lr, r0, r2
 8089896:	f04f 0500 	mov.w	r5, #0
 808989a:	fbe1 e502 	umlal	lr, r5, r1, r2
 808989e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80898a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80898a6:	f04f 0600 	mov.w	r6, #0
 80898aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80898ae:	f09c 0f00 	teq	ip, #0
 80898b2:	bf18      	it	ne
 80898b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80898b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80898bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80898c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80898c4:	d204      	bcs.n	80898d0 <__aeabi_dmul+0x80>
 80898c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80898ca:	416d      	adcs	r5, r5
 80898cc:	eb46 0606 	adc.w	r6, r6, r6
 80898d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80898d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80898d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80898dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80898e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80898e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80898e8:	bf88      	it	hi
 80898ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80898ee:	d81e      	bhi.n	808992e <__aeabi_dmul+0xde>
 80898f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80898f4:	bf08      	it	eq
 80898f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80898fa:	f150 0000 	adcs.w	r0, r0, #0
 80898fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089902:	bd70      	pop	{r4, r5, r6, pc}
 8089904:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8089908:	ea46 0101 	orr.w	r1, r6, r1
 808990c:	ea40 0002 	orr.w	r0, r0, r2
 8089910:	ea81 0103 	eor.w	r1, r1, r3
 8089914:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8089918:	bfc2      	ittt	gt
 808991a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808991e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089922:	bd70      	popgt	{r4, r5, r6, pc}
 8089924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089928:	f04f 0e00 	mov.w	lr, #0
 808992c:	3c01      	subs	r4, #1
 808992e:	f300 80ab 	bgt.w	8089a88 <__aeabi_dmul+0x238>
 8089932:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8089936:	bfde      	ittt	le
 8089938:	2000      	movle	r0, #0
 808993a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808993e:	bd70      	pople	{r4, r5, r6, pc}
 8089940:	f1c4 0400 	rsb	r4, r4, #0
 8089944:	3c20      	subs	r4, #32
 8089946:	da35      	bge.n	80899b4 <__aeabi_dmul+0x164>
 8089948:	340c      	adds	r4, #12
 808994a:	dc1b      	bgt.n	8089984 <__aeabi_dmul+0x134>
 808994c:	f104 0414 	add.w	r4, r4, #20
 8089950:	f1c4 0520 	rsb	r5, r4, #32
 8089954:	fa00 f305 	lsl.w	r3, r0, r5
 8089958:	fa20 f004 	lsr.w	r0, r0, r4
 808995c:	fa01 f205 	lsl.w	r2, r1, r5
 8089960:	ea40 0002 	orr.w	r0, r0, r2
 8089964:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8089968:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808996c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089970:	fa21 f604 	lsr.w	r6, r1, r4
 8089974:	eb42 0106 	adc.w	r1, r2, r6
 8089978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808997c:	bf08      	it	eq
 808997e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089982:	bd70      	pop	{r4, r5, r6, pc}
 8089984:	f1c4 040c 	rsb	r4, r4, #12
 8089988:	f1c4 0520 	rsb	r5, r4, #32
 808998c:	fa00 f304 	lsl.w	r3, r0, r4
 8089990:	fa20 f005 	lsr.w	r0, r0, r5
 8089994:	fa01 f204 	lsl.w	r2, r1, r4
 8089998:	ea40 0002 	orr.w	r0, r0, r2
 808999c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80899a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80899a4:	f141 0100 	adc.w	r1, r1, #0
 80899a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80899ac:	bf08      	it	eq
 80899ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80899b2:	bd70      	pop	{r4, r5, r6, pc}
 80899b4:	f1c4 0520 	rsb	r5, r4, #32
 80899b8:	fa00 f205 	lsl.w	r2, r0, r5
 80899bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80899c0:	fa20 f304 	lsr.w	r3, r0, r4
 80899c4:	fa01 f205 	lsl.w	r2, r1, r5
 80899c8:	ea43 0302 	orr.w	r3, r3, r2
 80899cc:	fa21 f004 	lsr.w	r0, r1, r4
 80899d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80899d4:	fa21 f204 	lsr.w	r2, r1, r4
 80899d8:	ea20 0002 	bic.w	r0, r0, r2
 80899dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80899e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80899e4:	bf08      	it	eq
 80899e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80899ea:	bd70      	pop	{r4, r5, r6, pc}
 80899ec:	f094 0f00 	teq	r4, #0
 80899f0:	d10f      	bne.n	8089a12 <__aeabi_dmul+0x1c2>
 80899f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80899f6:	0040      	lsls	r0, r0, #1
 80899f8:	eb41 0101 	adc.w	r1, r1, r1
 80899fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089a00:	bf08      	it	eq
 8089a02:	3c01      	subeq	r4, #1
 8089a04:	d0f7      	beq.n	80899f6 <__aeabi_dmul+0x1a6>
 8089a06:	ea41 0106 	orr.w	r1, r1, r6
 8089a0a:	f095 0f00 	teq	r5, #0
 8089a0e:	bf18      	it	ne
 8089a10:	4770      	bxne	lr
 8089a12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8089a16:	0052      	lsls	r2, r2, #1
 8089a18:	eb43 0303 	adc.w	r3, r3, r3
 8089a1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8089a20:	bf08      	it	eq
 8089a22:	3d01      	subeq	r5, #1
 8089a24:	d0f7      	beq.n	8089a16 <__aeabi_dmul+0x1c6>
 8089a26:	ea43 0306 	orr.w	r3, r3, r6
 8089a2a:	4770      	bx	lr
 8089a2c:	ea94 0f0c 	teq	r4, ip
 8089a30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8089a34:	bf18      	it	ne
 8089a36:	ea95 0f0c 	teqne	r5, ip
 8089a3a:	d00c      	beq.n	8089a56 <__aeabi_dmul+0x206>
 8089a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089a40:	bf18      	it	ne
 8089a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089a46:	d1d1      	bne.n	80899ec <__aeabi_dmul+0x19c>
 8089a48:	ea81 0103 	eor.w	r1, r1, r3
 8089a4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089a50:	f04f 0000 	mov.w	r0, #0
 8089a54:	bd70      	pop	{r4, r5, r6, pc}
 8089a56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089a5a:	bf06      	itte	eq
 8089a5c:	4610      	moveq	r0, r2
 8089a5e:	4619      	moveq	r1, r3
 8089a60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089a64:	d019      	beq.n	8089a9a <__aeabi_dmul+0x24a>
 8089a66:	ea94 0f0c 	teq	r4, ip
 8089a6a:	d102      	bne.n	8089a72 <__aeabi_dmul+0x222>
 8089a6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8089a70:	d113      	bne.n	8089a9a <__aeabi_dmul+0x24a>
 8089a72:	ea95 0f0c 	teq	r5, ip
 8089a76:	d105      	bne.n	8089a84 <__aeabi_dmul+0x234>
 8089a78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8089a7c:	bf1c      	itt	ne
 8089a7e:	4610      	movne	r0, r2
 8089a80:	4619      	movne	r1, r3
 8089a82:	d10a      	bne.n	8089a9a <__aeabi_dmul+0x24a>
 8089a84:	ea81 0103 	eor.w	r1, r1, r3
 8089a88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089a8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8089a90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089a94:	f04f 0000 	mov.w	r0, #0
 8089a98:	bd70      	pop	{r4, r5, r6, pc}
 8089a9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8089a9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8089aa2:	bd70      	pop	{r4, r5, r6, pc}

08089aa4 <__aeabi_ddiv>:
 8089aa4:	b570      	push	{r4, r5, r6, lr}
 8089aa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089aaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089aae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089ab2:	bf1d      	ittte	ne
 8089ab4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089ab8:	ea94 0f0c 	teqne	r4, ip
 8089abc:	ea95 0f0c 	teqne	r5, ip
 8089ac0:	f000 f8a7 	bleq	8089c12 <__aeabi_ddiv+0x16e>
 8089ac4:	eba4 0405 	sub.w	r4, r4, r5
 8089ac8:	ea81 0e03 	eor.w	lr, r1, r3
 8089acc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8089ad0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089ad4:	f000 8088 	beq.w	8089be8 <__aeabi_ddiv+0x144>
 8089ad8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089adc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8089ae0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8089ae4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8089ae8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8089aec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8089af0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8089af4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8089af8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8089afc:	429d      	cmp	r5, r3
 8089afe:	bf08      	it	eq
 8089b00:	4296      	cmpeq	r6, r2
 8089b02:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8089b06:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8089b0a:	d202      	bcs.n	8089b12 <__aeabi_ddiv+0x6e>
 8089b0c:	085b      	lsrs	r3, r3, #1
 8089b0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8089b12:	1ab6      	subs	r6, r6, r2
 8089b14:	eb65 0503 	sbc.w	r5, r5, r3
 8089b18:	085b      	lsrs	r3, r3, #1
 8089b1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8089b1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8089b22:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8089b26:	ebb6 0e02 	subs.w	lr, r6, r2
 8089b2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089b2e:	bf22      	ittt	cs
 8089b30:	1ab6      	subcs	r6, r6, r2
 8089b32:	4675      	movcs	r5, lr
 8089b34:	ea40 000c 	orrcs.w	r0, r0, ip
 8089b38:	085b      	lsrs	r3, r3, #1
 8089b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8089b3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8089b42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089b46:	bf22      	ittt	cs
 8089b48:	1ab6      	subcs	r6, r6, r2
 8089b4a:	4675      	movcs	r5, lr
 8089b4c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8089b50:	085b      	lsrs	r3, r3, #1
 8089b52:	ea4f 0232 	mov.w	r2, r2, rrx
 8089b56:	ebb6 0e02 	subs.w	lr, r6, r2
 8089b5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089b5e:	bf22      	ittt	cs
 8089b60:	1ab6      	subcs	r6, r6, r2
 8089b62:	4675      	movcs	r5, lr
 8089b64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8089b68:	085b      	lsrs	r3, r3, #1
 8089b6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8089b6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8089b72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089b76:	bf22      	ittt	cs
 8089b78:	1ab6      	subcs	r6, r6, r2
 8089b7a:	4675      	movcs	r5, lr
 8089b7c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8089b80:	ea55 0e06 	orrs.w	lr, r5, r6
 8089b84:	d018      	beq.n	8089bb8 <__aeabi_ddiv+0x114>
 8089b86:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8089b8a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8089b8e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8089b92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8089b96:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8089b9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8089b9e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8089ba2:	d1c0      	bne.n	8089b26 <__aeabi_ddiv+0x82>
 8089ba4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089ba8:	d10b      	bne.n	8089bc2 <__aeabi_ddiv+0x11e>
 8089baa:	ea41 0100 	orr.w	r1, r1, r0
 8089bae:	f04f 0000 	mov.w	r0, #0
 8089bb2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8089bb6:	e7b6      	b.n	8089b26 <__aeabi_ddiv+0x82>
 8089bb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089bbc:	bf04      	itt	eq
 8089bbe:	4301      	orreq	r1, r0
 8089bc0:	2000      	moveq	r0, #0
 8089bc2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089bc6:	bf88      	it	hi
 8089bc8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089bcc:	f63f aeaf 	bhi.w	808992e <__aeabi_dmul+0xde>
 8089bd0:	ebb5 0c03 	subs.w	ip, r5, r3
 8089bd4:	bf04      	itt	eq
 8089bd6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8089bda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089bde:	f150 0000 	adcs.w	r0, r0, #0
 8089be2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089be6:	bd70      	pop	{r4, r5, r6, pc}
 8089be8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8089bec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8089bf0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8089bf4:	bfc2      	ittt	gt
 8089bf6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089bfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089bfe:	bd70      	popgt	{r4, r5, r6, pc}
 8089c00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089c04:	f04f 0e00 	mov.w	lr, #0
 8089c08:	3c01      	subs	r4, #1
 8089c0a:	e690      	b.n	808992e <__aeabi_dmul+0xde>
 8089c0c:	ea45 0e06 	orr.w	lr, r5, r6
 8089c10:	e68d      	b.n	808992e <__aeabi_dmul+0xde>
 8089c12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8089c16:	ea94 0f0c 	teq	r4, ip
 8089c1a:	bf08      	it	eq
 8089c1c:	ea95 0f0c 	teqeq	r5, ip
 8089c20:	f43f af3b 	beq.w	8089a9a <__aeabi_dmul+0x24a>
 8089c24:	ea94 0f0c 	teq	r4, ip
 8089c28:	d10a      	bne.n	8089c40 <__aeabi_ddiv+0x19c>
 8089c2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089c2e:	f47f af34 	bne.w	8089a9a <__aeabi_dmul+0x24a>
 8089c32:	ea95 0f0c 	teq	r5, ip
 8089c36:	f47f af25 	bne.w	8089a84 <__aeabi_dmul+0x234>
 8089c3a:	4610      	mov	r0, r2
 8089c3c:	4619      	mov	r1, r3
 8089c3e:	e72c      	b.n	8089a9a <__aeabi_dmul+0x24a>
 8089c40:	ea95 0f0c 	teq	r5, ip
 8089c44:	d106      	bne.n	8089c54 <__aeabi_ddiv+0x1b0>
 8089c46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8089c4a:	f43f aefd 	beq.w	8089a48 <__aeabi_dmul+0x1f8>
 8089c4e:	4610      	mov	r0, r2
 8089c50:	4619      	mov	r1, r3
 8089c52:	e722      	b.n	8089a9a <__aeabi_dmul+0x24a>
 8089c54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089c58:	bf18      	it	ne
 8089c5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089c5e:	f47f aec5 	bne.w	80899ec <__aeabi_dmul+0x19c>
 8089c62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8089c66:	f47f af0d 	bne.w	8089a84 <__aeabi_dmul+0x234>
 8089c6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8089c6e:	f47f aeeb 	bne.w	8089a48 <__aeabi_dmul+0x1f8>
 8089c72:	e712      	b.n	8089a9a <__aeabi_dmul+0x24a>

08089c74 <__gedf2>:
 8089c74:	f04f 3cff 	mov.w	ip, #4294967295
 8089c78:	e006      	b.n	8089c88 <__cmpdf2+0x4>
 8089c7a:	bf00      	nop

08089c7c <__ledf2>:
 8089c7c:	f04f 0c01 	mov.w	ip, #1
 8089c80:	e002      	b.n	8089c88 <__cmpdf2+0x4>
 8089c82:	bf00      	nop

08089c84 <__cmpdf2>:
 8089c84:	f04f 0c01 	mov.w	ip, #1
 8089c88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8089c8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8089c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089c94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8089c98:	bf18      	it	ne
 8089c9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8089c9e:	d01b      	beq.n	8089cd8 <__cmpdf2+0x54>
 8089ca0:	b001      	add	sp, #4
 8089ca2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8089ca6:	bf0c      	ite	eq
 8089ca8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8089cac:	ea91 0f03 	teqne	r1, r3
 8089cb0:	bf02      	ittt	eq
 8089cb2:	ea90 0f02 	teqeq	r0, r2
 8089cb6:	2000      	moveq	r0, #0
 8089cb8:	4770      	bxeq	lr
 8089cba:	f110 0f00 	cmn.w	r0, #0
 8089cbe:	ea91 0f03 	teq	r1, r3
 8089cc2:	bf58      	it	pl
 8089cc4:	4299      	cmppl	r1, r3
 8089cc6:	bf08      	it	eq
 8089cc8:	4290      	cmpeq	r0, r2
 8089cca:	bf2c      	ite	cs
 8089ccc:	17d8      	asrcs	r0, r3, #31
 8089cce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8089cd2:	f040 0001 	orr.w	r0, r0, #1
 8089cd6:	4770      	bx	lr
 8089cd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8089cdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089ce0:	d102      	bne.n	8089ce8 <__cmpdf2+0x64>
 8089ce2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8089ce6:	d107      	bne.n	8089cf8 <__cmpdf2+0x74>
 8089ce8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8089cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089cf0:	d1d6      	bne.n	8089ca0 <__cmpdf2+0x1c>
 8089cf2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8089cf6:	d0d3      	beq.n	8089ca0 <__cmpdf2+0x1c>
 8089cf8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8089cfc:	4770      	bx	lr
 8089cfe:	bf00      	nop

08089d00 <__aeabi_cdrcmple>:
 8089d00:	4684      	mov	ip, r0
 8089d02:	4610      	mov	r0, r2
 8089d04:	4662      	mov	r2, ip
 8089d06:	468c      	mov	ip, r1
 8089d08:	4619      	mov	r1, r3
 8089d0a:	4663      	mov	r3, ip
 8089d0c:	e000      	b.n	8089d10 <__aeabi_cdcmpeq>
 8089d0e:	bf00      	nop

08089d10 <__aeabi_cdcmpeq>:
 8089d10:	b501      	push	{r0, lr}
 8089d12:	f7ff ffb7 	bl	8089c84 <__cmpdf2>
 8089d16:	2800      	cmp	r0, #0
 8089d18:	bf48      	it	mi
 8089d1a:	f110 0f00 	cmnmi.w	r0, #0
 8089d1e:	bd01      	pop	{r0, pc}

08089d20 <__aeabi_dcmpeq>:
 8089d20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089d24:	f7ff fff4 	bl	8089d10 <__aeabi_cdcmpeq>
 8089d28:	bf0c      	ite	eq
 8089d2a:	2001      	moveq	r0, #1
 8089d2c:	2000      	movne	r0, #0
 8089d2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8089d32:	bf00      	nop

08089d34 <__aeabi_dcmplt>:
 8089d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089d38:	f7ff ffea 	bl	8089d10 <__aeabi_cdcmpeq>
 8089d3c:	bf34      	ite	cc
 8089d3e:	2001      	movcc	r0, #1
 8089d40:	2000      	movcs	r0, #0
 8089d42:	f85d fb08 	ldr.w	pc, [sp], #8
 8089d46:	bf00      	nop

08089d48 <__aeabi_dcmple>:
 8089d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089d4c:	f7ff ffe0 	bl	8089d10 <__aeabi_cdcmpeq>
 8089d50:	bf94      	ite	ls
 8089d52:	2001      	movls	r0, #1
 8089d54:	2000      	movhi	r0, #0
 8089d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8089d5a:	bf00      	nop

08089d5c <__aeabi_dcmpge>:
 8089d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089d60:	f7ff ffce 	bl	8089d00 <__aeabi_cdrcmple>
 8089d64:	bf94      	ite	ls
 8089d66:	2001      	movls	r0, #1
 8089d68:	2000      	movhi	r0, #0
 8089d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8089d6e:	bf00      	nop

08089d70 <__aeabi_dcmpgt>:
 8089d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089d74:	f7ff ffc4 	bl	8089d00 <__aeabi_cdrcmple>
 8089d78:	bf34      	ite	cc
 8089d7a:	2001      	movcc	r0, #1
 8089d7c:	2000      	movcs	r0, #0
 8089d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8089d82:	bf00      	nop

08089d84 <__aeabi_d2uiz>:
 8089d84:	004a      	lsls	r2, r1, #1
 8089d86:	d211      	bcs.n	8089dac <__aeabi_d2uiz+0x28>
 8089d88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8089d8c:	d211      	bcs.n	8089db2 <__aeabi_d2uiz+0x2e>
 8089d8e:	d50d      	bpl.n	8089dac <__aeabi_d2uiz+0x28>
 8089d90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8089d94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8089d98:	d40e      	bmi.n	8089db8 <__aeabi_d2uiz+0x34>
 8089d9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8089d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8089da2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8089da6:	fa23 f002 	lsr.w	r0, r3, r2
 8089daa:	4770      	bx	lr
 8089dac:	f04f 0000 	mov.w	r0, #0
 8089db0:	4770      	bx	lr
 8089db2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8089db6:	d102      	bne.n	8089dbe <__aeabi_d2uiz+0x3a>
 8089db8:	f04f 30ff 	mov.w	r0, #4294967295
 8089dbc:	4770      	bx	lr
 8089dbe:	f04f 0000 	mov.w	r0, #0
 8089dc2:	4770      	bx	lr

08089dc4 <__aeabi_d2f>:
 8089dc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8089dc8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8089dcc:	bf24      	itt	cs
 8089dce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8089dd2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8089dd6:	d90d      	bls.n	8089df4 <__aeabi_d2f+0x30>
 8089dd8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8089ddc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8089de0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8089de4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8089de8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8089dec:	bf08      	it	eq
 8089dee:	f020 0001 	biceq.w	r0, r0, #1
 8089df2:	4770      	bx	lr
 8089df4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8089df8:	d121      	bne.n	8089e3e <__aeabi_d2f+0x7a>
 8089dfa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8089dfe:	bfbc      	itt	lt
 8089e00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8089e04:	4770      	bxlt	lr
 8089e06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089e0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8089e0e:	f1c2 0218 	rsb	r2, r2, #24
 8089e12:	f1c2 0c20 	rsb	ip, r2, #32
 8089e16:	fa10 f30c 	lsls.w	r3, r0, ip
 8089e1a:	fa20 f002 	lsr.w	r0, r0, r2
 8089e1e:	bf18      	it	ne
 8089e20:	f040 0001 	orrne.w	r0, r0, #1
 8089e24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8089e28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8089e2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8089e30:	ea40 000c 	orr.w	r0, r0, ip
 8089e34:	fa23 f302 	lsr.w	r3, r3, r2
 8089e38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8089e3c:	e7cc      	b.n	8089dd8 <__aeabi_d2f+0x14>
 8089e3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8089e42:	d107      	bne.n	8089e54 <__aeabi_d2f+0x90>
 8089e44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8089e48:	bf1e      	ittt	ne
 8089e4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8089e4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8089e52:	4770      	bxne	lr
 8089e54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8089e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8089e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089e60:	4770      	bx	lr
 8089e62:	bf00      	nop

08089e64 <__aeabi_frsub>:
 8089e64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8089e68:	e002      	b.n	8089e70 <__addsf3>
 8089e6a:	bf00      	nop

08089e6c <__aeabi_fsub>:
 8089e6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08089e70 <__addsf3>:
 8089e70:	0042      	lsls	r2, r0, #1
 8089e72:	bf1f      	itttt	ne
 8089e74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8089e78:	ea92 0f03 	teqne	r2, r3
 8089e7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8089e80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089e84:	d06a      	beq.n	8089f5c <__addsf3+0xec>
 8089e86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8089e8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8089e8e:	bfc1      	itttt	gt
 8089e90:	18d2      	addgt	r2, r2, r3
 8089e92:	4041      	eorgt	r1, r0
 8089e94:	4048      	eorgt	r0, r1
 8089e96:	4041      	eorgt	r1, r0
 8089e98:	bfb8      	it	lt
 8089e9a:	425b      	neglt	r3, r3
 8089e9c:	2b19      	cmp	r3, #25
 8089e9e:	bf88      	it	hi
 8089ea0:	4770      	bxhi	lr
 8089ea2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8089ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089eaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8089eae:	bf18      	it	ne
 8089eb0:	4240      	negne	r0, r0
 8089eb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089eb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8089eba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8089ebe:	bf18      	it	ne
 8089ec0:	4249      	negne	r1, r1
 8089ec2:	ea92 0f03 	teq	r2, r3
 8089ec6:	d03f      	beq.n	8089f48 <__addsf3+0xd8>
 8089ec8:	f1a2 0201 	sub.w	r2, r2, #1
 8089ecc:	fa41 fc03 	asr.w	ip, r1, r3
 8089ed0:	eb10 000c 	adds.w	r0, r0, ip
 8089ed4:	f1c3 0320 	rsb	r3, r3, #32
 8089ed8:	fa01 f103 	lsl.w	r1, r1, r3
 8089edc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8089ee0:	d502      	bpl.n	8089ee8 <__addsf3+0x78>
 8089ee2:	4249      	negs	r1, r1
 8089ee4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8089ee8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8089eec:	d313      	bcc.n	8089f16 <__addsf3+0xa6>
 8089eee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8089ef2:	d306      	bcc.n	8089f02 <__addsf3+0x92>
 8089ef4:	0840      	lsrs	r0, r0, #1
 8089ef6:	ea4f 0131 	mov.w	r1, r1, rrx
 8089efa:	f102 0201 	add.w	r2, r2, #1
 8089efe:	2afe      	cmp	r2, #254	; 0xfe
 8089f00:	d251      	bcs.n	8089fa6 <__addsf3+0x136>
 8089f02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8089f06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8089f0a:	bf08      	it	eq
 8089f0c:	f020 0001 	biceq.w	r0, r0, #1
 8089f10:	ea40 0003 	orr.w	r0, r0, r3
 8089f14:	4770      	bx	lr
 8089f16:	0049      	lsls	r1, r1, #1
 8089f18:	eb40 0000 	adc.w	r0, r0, r0
 8089f1c:	3a01      	subs	r2, #1
 8089f1e:	bf28      	it	cs
 8089f20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8089f24:	d2ed      	bcs.n	8089f02 <__addsf3+0x92>
 8089f26:	fab0 fc80 	clz	ip, r0
 8089f2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8089f2e:	ebb2 020c 	subs.w	r2, r2, ip
 8089f32:	fa00 f00c 	lsl.w	r0, r0, ip
 8089f36:	bfaa      	itet	ge
 8089f38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8089f3c:	4252      	neglt	r2, r2
 8089f3e:	4318      	orrge	r0, r3
 8089f40:	bfbc      	itt	lt
 8089f42:	40d0      	lsrlt	r0, r2
 8089f44:	4318      	orrlt	r0, r3
 8089f46:	4770      	bx	lr
 8089f48:	f092 0f00 	teq	r2, #0
 8089f4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8089f50:	bf06      	itte	eq
 8089f52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8089f56:	3201      	addeq	r2, #1
 8089f58:	3b01      	subne	r3, #1
 8089f5a:	e7b5      	b.n	8089ec8 <__addsf3+0x58>
 8089f5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8089f60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089f64:	bf18      	it	ne
 8089f66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8089f6a:	d021      	beq.n	8089fb0 <__addsf3+0x140>
 8089f6c:	ea92 0f03 	teq	r2, r3
 8089f70:	d004      	beq.n	8089f7c <__addsf3+0x10c>
 8089f72:	f092 0f00 	teq	r2, #0
 8089f76:	bf08      	it	eq
 8089f78:	4608      	moveq	r0, r1
 8089f7a:	4770      	bx	lr
 8089f7c:	ea90 0f01 	teq	r0, r1
 8089f80:	bf1c      	itt	ne
 8089f82:	2000      	movne	r0, #0
 8089f84:	4770      	bxne	lr
 8089f86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8089f8a:	d104      	bne.n	8089f96 <__addsf3+0x126>
 8089f8c:	0040      	lsls	r0, r0, #1
 8089f8e:	bf28      	it	cs
 8089f90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8089f94:	4770      	bx	lr
 8089f96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8089f9a:	bf3c      	itt	cc
 8089f9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8089fa0:	4770      	bxcc	lr
 8089fa2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8089fa6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8089faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8089fae:	4770      	bx	lr
 8089fb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8089fb4:	bf16      	itet	ne
 8089fb6:	4608      	movne	r0, r1
 8089fb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8089fbc:	4601      	movne	r1, r0
 8089fbe:	0242      	lsls	r2, r0, #9
 8089fc0:	bf06      	itte	eq
 8089fc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8089fc6:	ea90 0f01 	teqeq	r0, r1
 8089fca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8089fce:	4770      	bx	lr

08089fd0 <__aeabi_ui2f>:
 8089fd0:	f04f 0300 	mov.w	r3, #0
 8089fd4:	e004      	b.n	8089fe0 <__aeabi_i2f+0x8>
 8089fd6:	bf00      	nop

08089fd8 <__aeabi_i2f>:
 8089fd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8089fdc:	bf48      	it	mi
 8089fde:	4240      	negmi	r0, r0
 8089fe0:	ea5f 0c00 	movs.w	ip, r0
 8089fe4:	bf08      	it	eq
 8089fe6:	4770      	bxeq	lr
 8089fe8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8089fec:	4601      	mov	r1, r0
 8089fee:	f04f 0000 	mov.w	r0, #0
 8089ff2:	e01c      	b.n	808a02e <__aeabi_l2f+0x2a>

08089ff4 <__aeabi_ul2f>:
 8089ff4:	ea50 0201 	orrs.w	r2, r0, r1
 8089ff8:	bf08      	it	eq
 8089ffa:	4770      	bxeq	lr
 8089ffc:	f04f 0300 	mov.w	r3, #0
 808a000:	e00a      	b.n	808a018 <__aeabi_l2f+0x14>
 808a002:	bf00      	nop

0808a004 <__aeabi_l2f>:
 808a004:	ea50 0201 	orrs.w	r2, r0, r1
 808a008:	bf08      	it	eq
 808a00a:	4770      	bxeq	lr
 808a00c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a010:	d502      	bpl.n	808a018 <__aeabi_l2f+0x14>
 808a012:	4240      	negs	r0, r0
 808a014:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a018:	ea5f 0c01 	movs.w	ip, r1
 808a01c:	bf02      	ittt	eq
 808a01e:	4684      	moveq	ip, r0
 808a020:	4601      	moveq	r1, r0
 808a022:	2000      	moveq	r0, #0
 808a024:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a028:	bf08      	it	eq
 808a02a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a02e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a032:	fabc f28c 	clz	r2, ip
 808a036:	3a08      	subs	r2, #8
 808a038:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a03c:	db10      	blt.n	808a060 <__aeabi_l2f+0x5c>
 808a03e:	fa01 fc02 	lsl.w	ip, r1, r2
 808a042:	4463      	add	r3, ip
 808a044:	fa00 fc02 	lsl.w	ip, r0, r2
 808a048:	f1c2 0220 	rsb	r2, r2, #32
 808a04c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a050:	fa20 f202 	lsr.w	r2, r0, r2
 808a054:	eb43 0002 	adc.w	r0, r3, r2
 808a058:	bf08      	it	eq
 808a05a:	f020 0001 	biceq.w	r0, r0, #1
 808a05e:	4770      	bx	lr
 808a060:	f102 0220 	add.w	r2, r2, #32
 808a064:	fa01 fc02 	lsl.w	ip, r1, r2
 808a068:	f1c2 0220 	rsb	r2, r2, #32
 808a06c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a070:	fa21 f202 	lsr.w	r2, r1, r2
 808a074:	eb43 0002 	adc.w	r0, r3, r2
 808a078:	bf08      	it	eq
 808a07a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a07e:	4770      	bx	lr

0808a080 <__aeabi_fmul>:
 808a080:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a084:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a088:	bf1e      	ittt	ne
 808a08a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a08e:	ea92 0f0c 	teqne	r2, ip
 808a092:	ea93 0f0c 	teqne	r3, ip
 808a096:	d06f      	beq.n	808a178 <__aeabi_fmul+0xf8>
 808a098:	441a      	add	r2, r3
 808a09a:	ea80 0c01 	eor.w	ip, r0, r1
 808a09e:	0240      	lsls	r0, r0, #9
 808a0a0:	bf18      	it	ne
 808a0a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a0a6:	d01e      	beq.n	808a0e6 <__aeabi_fmul+0x66>
 808a0a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a0ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a0b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a0b4:	fba0 3101 	umull	r3, r1, r0, r1
 808a0b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a0bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a0c0:	bf3e      	ittt	cc
 808a0c2:	0049      	lslcc	r1, r1, #1
 808a0c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a0c8:	005b      	lslcc	r3, r3, #1
 808a0ca:	ea40 0001 	orr.w	r0, r0, r1
 808a0ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a0d2:	2afd      	cmp	r2, #253	; 0xfd
 808a0d4:	d81d      	bhi.n	808a112 <__aeabi_fmul+0x92>
 808a0d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a0da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a0de:	bf08      	it	eq
 808a0e0:	f020 0001 	biceq.w	r0, r0, #1
 808a0e4:	4770      	bx	lr
 808a0e6:	f090 0f00 	teq	r0, #0
 808a0ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a0ee:	bf08      	it	eq
 808a0f0:	0249      	lsleq	r1, r1, #9
 808a0f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a0f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a0fa:	3a7f      	subs	r2, #127	; 0x7f
 808a0fc:	bfc2      	ittt	gt
 808a0fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a102:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a106:	4770      	bxgt	lr
 808a108:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a10c:	f04f 0300 	mov.w	r3, #0
 808a110:	3a01      	subs	r2, #1
 808a112:	dc5d      	bgt.n	808a1d0 <__aeabi_fmul+0x150>
 808a114:	f112 0f19 	cmn.w	r2, #25
 808a118:	bfdc      	itt	le
 808a11a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a11e:	4770      	bxle	lr
 808a120:	f1c2 0200 	rsb	r2, r2, #0
 808a124:	0041      	lsls	r1, r0, #1
 808a126:	fa21 f102 	lsr.w	r1, r1, r2
 808a12a:	f1c2 0220 	rsb	r2, r2, #32
 808a12e:	fa00 fc02 	lsl.w	ip, r0, r2
 808a132:	ea5f 0031 	movs.w	r0, r1, rrx
 808a136:	f140 0000 	adc.w	r0, r0, #0
 808a13a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a13e:	bf08      	it	eq
 808a140:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a144:	4770      	bx	lr
 808a146:	f092 0f00 	teq	r2, #0
 808a14a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a14e:	bf02      	ittt	eq
 808a150:	0040      	lsleq	r0, r0, #1
 808a152:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a156:	3a01      	subeq	r2, #1
 808a158:	d0f9      	beq.n	808a14e <__aeabi_fmul+0xce>
 808a15a:	ea40 000c 	orr.w	r0, r0, ip
 808a15e:	f093 0f00 	teq	r3, #0
 808a162:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a166:	bf02      	ittt	eq
 808a168:	0049      	lsleq	r1, r1, #1
 808a16a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a16e:	3b01      	subeq	r3, #1
 808a170:	d0f9      	beq.n	808a166 <__aeabi_fmul+0xe6>
 808a172:	ea41 010c 	orr.w	r1, r1, ip
 808a176:	e78f      	b.n	808a098 <__aeabi_fmul+0x18>
 808a178:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a17c:	ea92 0f0c 	teq	r2, ip
 808a180:	bf18      	it	ne
 808a182:	ea93 0f0c 	teqne	r3, ip
 808a186:	d00a      	beq.n	808a19e <__aeabi_fmul+0x11e>
 808a188:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a18c:	bf18      	it	ne
 808a18e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a192:	d1d8      	bne.n	808a146 <__aeabi_fmul+0xc6>
 808a194:	ea80 0001 	eor.w	r0, r0, r1
 808a198:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a19c:	4770      	bx	lr
 808a19e:	f090 0f00 	teq	r0, #0
 808a1a2:	bf17      	itett	ne
 808a1a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a1a8:	4608      	moveq	r0, r1
 808a1aa:	f091 0f00 	teqne	r1, #0
 808a1ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a1b2:	d014      	beq.n	808a1de <__aeabi_fmul+0x15e>
 808a1b4:	ea92 0f0c 	teq	r2, ip
 808a1b8:	d101      	bne.n	808a1be <__aeabi_fmul+0x13e>
 808a1ba:	0242      	lsls	r2, r0, #9
 808a1bc:	d10f      	bne.n	808a1de <__aeabi_fmul+0x15e>
 808a1be:	ea93 0f0c 	teq	r3, ip
 808a1c2:	d103      	bne.n	808a1cc <__aeabi_fmul+0x14c>
 808a1c4:	024b      	lsls	r3, r1, #9
 808a1c6:	bf18      	it	ne
 808a1c8:	4608      	movne	r0, r1
 808a1ca:	d108      	bne.n	808a1de <__aeabi_fmul+0x15e>
 808a1cc:	ea80 0001 	eor.w	r0, r0, r1
 808a1d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a1d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a1d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a1dc:	4770      	bx	lr
 808a1de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a1e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a1e6:	4770      	bx	lr

0808a1e8 <__aeabi_fdiv>:
 808a1e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a1ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a1f0:	bf1e      	ittt	ne
 808a1f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a1f6:	ea92 0f0c 	teqne	r2, ip
 808a1fa:	ea93 0f0c 	teqne	r3, ip
 808a1fe:	d069      	beq.n	808a2d4 <__aeabi_fdiv+0xec>
 808a200:	eba2 0203 	sub.w	r2, r2, r3
 808a204:	ea80 0c01 	eor.w	ip, r0, r1
 808a208:	0249      	lsls	r1, r1, #9
 808a20a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a20e:	d037      	beq.n	808a280 <__aeabi_fdiv+0x98>
 808a210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a214:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a218:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a21c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a220:	428b      	cmp	r3, r1
 808a222:	bf38      	it	cc
 808a224:	005b      	lslcc	r3, r3, #1
 808a226:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a22a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a22e:	428b      	cmp	r3, r1
 808a230:	bf24      	itt	cs
 808a232:	1a5b      	subcs	r3, r3, r1
 808a234:	ea40 000c 	orrcs.w	r0, r0, ip
 808a238:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808a23c:	bf24      	itt	cs
 808a23e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808a242:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a246:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808a24a:	bf24      	itt	cs
 808a24c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808a250:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a254:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808a258:	bf24      	itt	cs
 808a25a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808a25e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a262:	011b      	lsls	r3, r3, #4
 808a264:	bf18      	it	ne
 808a266:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808a26a:	d1e0      	bne.n	808a22e <__aeabi_fdiv+0x46>
 808a26c:	2afd      	cmp	r2, #253	; 0xfd
 808a26e:	f63f af50 	bhi.w	808a112 <__aeabi_fmul+0x92>
 808a272:	428b      	cmp	r3, r1
 808a274:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a278:	bf08      	it	eq
 808a27a:	f020 0001 	biceq.w	r0, r0, #1
 808a27e:	4770      	bx	lr
 808a280:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a284:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a288:	327f      	adds	r2, #127	; 0x7f
 808a28a:	bfc2      	ittt	gt
 808a28c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a290:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a294:	4770      	bxgt	lr
 808a296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a29a:	f04f 0300 	mov.w	r3, #0
 808a29e:	3a01      	subs	r2, #1
 808a2a0:	e737      	b.n	808a112 <__aeabi_fmul+0x92>
 808a2a2:	f092 0f00 	teq	r2, #0
 808a2a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a2aa:	bf02      	ittt	eq
 808a2ac:	0040      	lsleq	r0, r0, #1
 808a2ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a2b2:	3a01      	subeq	r2, #1
 808a2b4:	d0f9      	beq.n	808a2aa <__aeabi_fdiv+0xc2>
 808a2b6:	ea40 000c 	orr.w	r0, r0, ip
 808a2ba:	f093 0f00 	teq	r3, #0
 808a2be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a2c2:	bf02      	ittt	eq
 808a2c4:	0049      	lsleq	r1, r1, #1
 808a2c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a2ca:	3b01      	subeq	r3, #1
 808a2cc:	d0f9      	beq.n	808a2c2 <__aeabi_fdiv+0xda>
 808a2ce:	ea41 010c 	orr.w	r1, r1, ip
 808a2d2:	e795      	b.n	808a200 <__aeabi_fdiv+0x18>
 808a2d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a2d8:	ea92 0f0c 	teq	r2, ip
 808a2dc:	d108      	bne.n	808a2f0 <__aeabi_fdiv+0x108>
 808a2de:	0242      	lsls	r2, r0, #9
 808a2e0:	f47f af7d 	bne.w	808a1de <__aeabi_fmul+0x15e>
 808a2e4:	ea93 0f0c 	teq	r3, ip
 808a2e8:	f47f af70 	bne.w	808a1cc <__aeabi_fmul+0x14c>
 808a2ec:	4608      	mov	r0, r1
 808a2ee:	e776      	b.n	808a1de <__aeabi_fmul+0x15e>
 808a2f0:	ea93 0f0c 	teq	r3, ip
 808a2f4:	d104      	bne.n	808a300 <__aeabi_fdiv+0x118>
 808a2f6:	024b      	lsls	r3, r1, #9
 808a2f8:	f43f af4c 	beq.w	808a194 <__aeabi_fmul+0x114>
 808a2fc:	4608      	mov	r0, r1
 808a2fe:	e76e      	b.n	808a1de <__aeabi_fmul+0x15e>
 808a300:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a304:	bf18      	it	ne
 808a306:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a30a:	d1ca      	bne.n	808a2a2 <__aeabi_fdiv+0xba>
 808a30c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808a310:	f47f af5c 	bne.w	808a1cc <__aeabi_fmul+0x14c>
 808a314:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808a318:	f47f af3c 	bne.w	808a194 <__aeabi_fmul+0x114>
 808a31c:	e75f      	b.n	808a1de <__aeabi_fmul+0x15e>
 808a31e:	bf00      	nop

0808a320 <__gesf2>:
 808a320:	f04f 3cff 	mov.w	ip, #4294967295
 808a324:	e006      	b.n	808a334 <__cmpsf2+0x4>
 808a326:	bf00      	nop

0808a328 <__lesf2>:
 808a328:	f04f 0c01 	mov.w	ip, #1
 808a32c:	e002      	b.n	808a334 <__cmpsf2+0x4>
 808a32e:	bf00      	nop

0808a330 <__cmpsf2>:
 808a330:	f04f 0c01 	mov.w	ip, #1
 808a334:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a338:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808a33c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a340:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a344:	bf18      	it	ne
 808a346:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a34a:	d011      	beq.n	808a370 <__cmpsf2+0x40>
 808a34c:	b001      	add	sp, #4
 808a34e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808a352:	bf18      	it	ne
 808a354:	ea90 0f01 	teqne	r0, r1
 808a358:	bf58      	it	pl
 808a35a:	ebb2 0003 	subspl.w	r0, r2, r3
 808a35e:	bf88      	it	hi
 808a360:	17c8      	asrhi	r0, r1, #31
 808a362:	bf38      	it	cc
 808a364:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808a368:	bf18      	it	ne
 808a36a:	f040 0001 	orrne.w	r0, r0, #1
 808a36e:	4770      	bx	lr
 808a370:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a374:	d102      	bne.n	808a37c <__cmpsf2+0x4c>
 808a376:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808a37a:	d105      	bne.n	808a388 <__cmpsf2+0x58>
 808a37c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808a380:	d1e4      	bne.n	808a34c <__cmpsf2+0x1c>
 808a382:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808a386:	d0e1      	beq.n	808a34c <__cmpsf2+0x1c>
 808a388:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a38c:	4770      	bx	lr
 808a38e:	bf00      	nop

0808a390 <__aeabi_cfrcmple>:
 808a390:	4684      	mov	ip, r0
 808a392:	4608      	mov	r0, r1
 808a394:	4661      	mov	r1, ip
 808a396:	e7ff      	b.n	808a398 <__aeabi_cfcmpeq>

0808a398 <__aeabi_cfcmpeq>:
 808a398:	b50f      	push	{r0, r1, r2, r3, lr}
 808a39a:	f7ff ffc9 	bl	808a330 <__cmpsf2>
 808a39e:	2800      	cmp	r0, #0
 808a3a0:	bf48      	it	mi
 808a3a2:	f110 0f00 	cmnmi.w	r0, #0
 808a3a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808a3a8 <__aeabi_fcmpeq>:
 808a3a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3ac:	f7ff fff4 	bl	808a398 <__aeabi_cfcmpeq>
 808a3b0:	bf0c      	ite	eq
 808a3b2:	2001      	moveq	r0, #1
 808a3b4:	2000      	movne	r0, #0
 808a3b6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3ba:	bf00      	nop

0808a3bc <__aeabi_fcmplt>:
 808a3bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3c0:	f7ff ffea 	bl	808a398 <__aeabi_cfcmpeq>
 808a3c4:	bf34      	ite	cc
 808a3c6:	2001      	movcc	r0, #1
 808a3c8:	2000      	movcs	r0, #0
 808a3ca:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3ce:	bf00      	nop

0808a3d0 <__aeabi_fcmple>:
 808a3d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3d4:	f7ff ffe0 	bl	808a398 <__aeabi_cfcmpeq>
 808a3d8:	bf94      	ite	ls
 808a3da:	2001      	movls	r0, #1
 808a3dc:	2000      	movhi	r0, #0
 808a3de:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3e2:	bf00      	nop

0808a3e4 <__aeabi_fcmpge>:
 808a3e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3e8:	f7ff ffd2 	bl	808a390 <__aeabi_cfrcmple>
 808a3ec:	bf94      	ite	ls
 808a3ee:	2001      	movls	r0, #1
 808a3f0:	2000      	movhi	r0, #0
 808a3f2:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3f6:	bf00      	nop

0808a3f8 <__aeabi_fcmpgt>:
 808a3f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3fc:	f7ff ffc8 	bl	808a390 <__aeabi_cfrcmple>
 808a400:	bf34      	ite	cc
 808a402:	2001      	movcc	r0, #1
 808a404:	2000      	movcs	r0, #0
 808a406:	f85d fb08 	ldr.w	pc, [sp], #8
 808a40a:	bf00      	nop

0808a40c <__aeabi_fcmpun>:
 808a40c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808a410:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a414:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a418:	d102      	bne.n	808a420 <__aeabi_fcmpun+0x14>
 808a41a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808a41e:	d108      	bne.n	808a432 <__aeabi_fcmpun+0x26>
 808a420:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808a424:	d102      	bne.n	808a42c <__aeabi_fcmpun+0x20>
 808a426:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808a42a:	d102      	bne.n	808a432 <__aeabi_fcmpun+0x26>
 808a42c:	f04f 0000 	mov.w	r0, #0
 808a430:	4770      	bx	lr
 808a432:	f04f 0001 	mov.w	r0, #1
 808a436:	4770      	bx	lr

0808a438 <__aeabi_ldivmod>:
 808a438:	b97b      	cbnz	r3, 808a45a <__aeabi_ldivmod+0x22>
 808a43a:	b972      	cbnz	r2, 808a45a <__aeabi_ldivmod+0x22>
 808a43c:	2900      	cmp	r1, #0
 808a43e:	bfbe      	ittt	lt
 808a440:	2000      	movlt	r0, #0
 808a442:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808a446:	e006      	blt.n	808a456 <__aeabi_ldivmod+0x1e>
 808a448:	bf08      	it	eq
 808a44a:	2800      	cmpeq	r0, #0
 808a44c:	bf1c      	itt	ne
 808a44e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808a452:	f04f 30ff 	movne.w	r0, #4294967295
 808a456:	f000 b891 	b.w	808a57c <__aeabi_idiv0>
 808a45a:	f1ad 0c08 	sub.w	ip, sp, #8
 808a45e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808a462:	2900      	cmp	r1, #0
 808a464:	db09      	blt.n	808a47a <__aeabi_ldivmod+0x42>
 808a466:	2b00      	cmp	r3, #0
 808a468:	db1a      	blt.n	808a4a0 <__aeabi_ldivmod+0x68>
 808a46a:	f7f5 fdd9 	bl	8080020 <__udivmoddi4>
 808a46e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a476:	b004      	add	sp, #16
 808a478:	4770      	bx	lr
 808a47a:	4240      	negs	r0, r0
 808a47c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a480:	2b00      	cmp	r3, #0
 808a482:	db1b      	blt.n	808a4bc <__aeabi_ldivmod+0x84>
 808a484:	f7f5 fdcc 	bl	8080020 <__udivmoddi4>
 808a488:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a490:	b004      	add	sp, #16
 808a492:	4240      	negs	r0, r0
 808a494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a498:	4252      	negs	r2, r2
 808a49a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a49e:	4770      	bx	lr
 808a4a0:	4252      	negs	r2, r2
 808a4a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a4a6:	f7f5 fdbb 	bl	8080020 <__udivmoddi4>
 808a4aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a4ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a4b2:	b004      	add	sp, #16
 808a4b4:	4240      	negs	r0, r0
 808a4b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a4ba:	4770      	bx	lr
 808a4bc:	4252      	negs	r2, r2
 808a4be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a4c2:	f7f5 fdad 	bl	8080020 <__udivmoddi4>
 808a4c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a4ce:	b004      	add	sp, #16
 808a4d0:	4252      	negs	r2, r2
 808a4d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a4d6:	4770      	bx	lr

0808a4d8 <__aeabi_f2lz>:
 808a4d8:	b510      	push	{r4, lr}
 808a4da:	2100      	movs	r1, #0
 808a4dc:	4604      	mov	r4, r0
 808a4de:	f7ff ff6d 	bl	808a3bc <__aeabi_fcmplt>
 808a4e2:	b920      	cbnz	r0, 808a4ee <__aeabi_f2lz+0x16>
 808a4e4:	4620      	mov	r0, r4
 808a4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808a4ea:	f000 b809 	b.w	808a500 <__aeabi_f2ulz>
 808a4ee:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808a4f2:	f000 f805 	bl	808a500 <__aeabi_f2ulz>
 808a4f6:	4240      	negs	r0, r0
 808a4f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a4fc:	bd10      	pop	{r4, pc}
 808a4fe:	bf00      	nop

0808a500 <__aeabi_f2ulz>:
 808a500:	b5d0      	push	{r4, r6, r7, lr}
 808a502:	f7ff f94d 	bl	80897a0 <__aeabi_f2d>
 808a506:	2200      	movs	r2, #0
 808a508:	4b0b      	ldr	r3, [pc, #44]	; (808a538 <__aeabi_f2ulz+0x38>)
 808a50a:	4606      	mov	r6, r0
 808a50c:	460f      	mov	r7, r1
 808a50e:	f7ff f99f 	bl	8089850 <__aeabi_dmul>
 808a512:	f7ff fc37 	bl	8089d84 <__aeabi_d2uiz>
 808a516:	4604      	mov	r4, r0
 808a518:	f7ff f920 	bl	808975c <__aeabi_ui2d>
 808a51c:	2200      	movs	r2, #0
 808a51e:	4b07      	ldr	r3, [pc, #28]	; (808a53c <__aeabi_f2ulz+0x3c>)
 808a520:	f7ff f996 	bl	8089850 <__aeabi_dmul>
 808a524:	4602      	mov	r2, r0
 808a526:	460b      	mov	r3, r1
 808a528:	4630      	mov	r0, r6
 808a52a:	4639      	mov	r1, r7
 808a52c:	f7fe ffd8 	bl	80894e0 <__aeabi_dsub>
 808a530:	f7ff fc28 	bl	8089d84 <__aeabi_d2uiz>
 808a534:	4621      	mov	r1, r4
 808a536:	bdd0      	pop	{r4, r6, r7, pc}
 808a538:	3df00000 	.word	0x3df00000
 808a53c:	41f00000 	.word	0x41f00000

0808a540 <__aeabi_d2ulz>:
 808a540:	b5d0      	push	{r4, r6, r7, lr}
 808a542:	2200      	movs	r2, #0
 808a544:	4b0b      	ldr	r3, [pc, #44]	; (808a574 <__aeabi_d2ulz+0x34>)
 808a546:	4606      	mov	r6, r0
 808a548:	460f      	mov	r7, r1
 808a54a:	f7ff f981 	bl	8089850 <__aeabi_dmul>
 808a54e:	f7ff fc19 	bl	8089d84 <__aeabi_d2uiz>
 808a552:	4604      	mov	r4, r0
 808a554:	f7ff f902 	bl	808975c <__aeabi_ui2d>
 808a558:	2200      	movs	r2, #0
 808a55a:	4b07      	ldr	r3, [pc, #28]	; (808a578 <__aeabi_d2ulz+0x38>)
 808a55c:	f7ff f978 	bl	8089850 <__aeabi_dmul>
 808a560:	4602      	mov	r2, r0
 808a562:	460b      	mov	r3, r1
 808a564:	4630      	mov	r0, r6
 808a566:	4639      	mov	r1, r7
 808a568:	f7fe ffba 	bl	80894e0 <__aeabi_dsub>
 808a56c:	f7ff fc0a 	bl	8089d84 <__aeabi_d2uiz>
 808a570:	4621      	mov	r1, r4
 808a572:	bdd0      	pop	{r4, r6, r7, pc}
 808a574:	3df00000 	.word	0x3df00000
 808a578:	41f00000 	.word	0x41f00000

0808a57c <__aeabi_idiv0>:
 808a57c:	4770      	bx	lr
 808a57e:	bf00      	nop

0808a580 <asctime_r>:
 808a580:	b510      	push	{r4, lr}
 808a582:	460c      	mov	r4, r1
 808a584:	6941      	ldr	r1, [r0, #20]
 808a586:	b086      	sub	sp, #24
 808a588:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808a58c:	6903      	ldr	r3, [r0, #16]
 808a58e:	6982      	ldr	r2, [r0, #24]
 808a590:	9104      	str	r1, [sp, #16]
 808a592:	6801      	ldr	r1, [r0, #0]
 808a594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808a598:	9103      	str	r1, [sp, #12]
 808a59a:	6841      	ldr	r1, [r0, #4]
 808a59c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808a5a0:	9102      	str	r1, [sp, #8]
 808a5a2:	6881      	ldr	r1, [r0, #8]
 808a5a4:	9101      	str	r1, [sp, #4]
 808a5a6:	68c1      	ldr	r1, [r0, #12]
 808a5a8:	4620      	mov	r0, r4
 808a5aa:	9100      	str	r1, [sp, #0]
 808a5ac:	4904      	ldr	r1, [pc, #16]	; (808a5c0 <asctime_r+0x40>)
 808a5ae:	440b      	add	r3, r1
 808a5b0:	4904      	ldr	r1, [pc, #16]	; (808a5c4 <asctime_r+0x44>)
 808a5b2:	440a      	add	r2, r1
 808a5b4:	4904      	ldr	r1, [pc, #16]	; (808a5c8 <asctime_r+0x48>)
 808a5b6:	f7fb ff05 	bl	80863c4 <siprintf>
 808a5ba:	4620      	mov	r0, r4
 808a5bc:	b006      	add	sp, #24
 808a5be:	bd10      	pop	{r4, pc}
 808a5c0:	0808d47e 	.word	0x0808d47e
 808a5c4:	0808d469 	.word	0x0808d469
 808a5c8:	0808d449 	.word	0x0808d449

0808a5cc <atof>:
 808a5cc:	2100      	movs	r1, #0
 808a5ce:	f000 beeb 	b.w	808b3a8 <strtod>
	...

0808a5d4 <__cxa_atexit>:
 808a5d4:	b510      	push	{r4, lr}
 808a5d6:	4604      	mov	r4, r0
 808a5d8:	4804      	ldr	r0, [pc, #16]	; (808a5ec <__cxa_atexit+0x18>)
 808a5da:	4613      	mov	r3, r2
 808a5dc:	b120      	cbz	r0, 808a5e8 <__cxa_atexit+0x14>
 808a5de:	460a      	mov	r2, r1
 808a5e0:	2002      	movs	r0, #2
 808a5e2:	4621      	mov	r1, r4
 808a5e4:	f3af 8000 	nop.w
 808a5e8:	bd10      	pop	{r4, pc}
 808a5ea:	bf00      	nop
 808a5ec:	00000000 	.word	0x00000000

0808a5f0 <memcmp>:
 808a5f0:	b530      	push	{r4, r5, lr}
 808a5f2:	2400      	movs	r4, #0
 808a5f4:	3901      	subs	r1, #1
 808a5f6:	42a2      	cmp	r2, r4
 808a5f8:	d101      	bne.n	808a5fe <memcmp+0xe>
 808a5fa:	2000      	movs	r0, #0
 808a5fc:	e005      	b.n	808a60a <memcmp+0x1a>
 808a5fe:	5d03      	ldrb	r3, [r0, r4]
 808a600:	3401      	adds	r4, #1
 808a602:	5d0d      	ldrb	r5, [r1, r4]
 808a604:	42ab      	cmp	r3, r5
 808a606:	d0f6      	beq.n	808a5f6 <memcmp+0x6>
 808a608:	1b58      	subs	r0, r3, r5
 808a60a:	bd30      	pop	{r4, r5, pc}

0808a60c <memcpy>:
 808a60c:	440a      	add	r2, r1
 808a60e:	4291      	cmp	r1, r2
 808a610:	f100 33ff 	add.w	r3, r0, #4294967295
 808a614:	d100      	bne.n	808a618 <memcpy+0xc>
 808a616:	4770      	bx	lr
 808a618:	b510      	push	{r4, lr}
 808a61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808a61e:	4291      	cmp	r1, r2
 808a620:	f803 4f01 	strb.w	r4, [r3, #1]!
 808a624:	d1f9      	bne.n	808a61a <memcpy+0xe>
 808a626:	bd10      	pop	{r4, pc}

0808a628 <memset>:
 808a628:	4603      	mov	r3, r0
 808a62a:	4402      	add	r2, r0
 808a62c:	4293      	cmp	r3, r2
 808a62e:	d100      	bne.n	808a632 <memset+0xa>
 808a630:	4770      	bx	lr
 808a632:	f803 1b01 	strb.w	r1, [r3], #1
 808a636:	e7f9      	b.n	808a62c <memset+0x4>

0808a638 <srand>:
 808a638:	b538      	push	{r3, r4, r5, lr}
 808a63a:	4b0d      	ldr	r3, [pc, #52]	; (808a670 <srand+0x38>)
 808a63c:	4604      	mov	r4, r0
 808a63e:	681d      	ldr	r5, [r3, #0]
 808a640:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808a642:	b97b      	cbnz	r3, 808a664 <srand+0x2c>
 808a644:	2018      	movs	r0, #24
 808a646:	f7fb fe9d 	bl	8086384 <malloc>
 808a64a:	4a0a      	ldr	r2, [pc, #40]	; (808a674 <srand+0x3c>)
 808a64c:	4b0a      	ldr	r3, [pc, #40]	; (808a678 <srand+0x40>)
 808a64e:	63a8      	str	r0, [r5, #56]	; 0x38
 808a650:	e9c0 2300 	strd	r2, r3, [r0]
 808a654:	4b09      	ldr	r3, [pc, #36]	; (808a67c <srand+0x44>)
 808a656:	2201      	movs	r2, #1
 808a658:	6083      	str	r3, [r0, #8]
 808a65a:	230b      	movs	r3, #11
 808a65c:	8183      	strh	r3, [r0, #12]
 808a65e:	2300      	movs	r3, #0
 808a660:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808a664:	2200      	movs	r2, #0
 808a666:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808a668:	611c      	str	r4, [r3, #16]
 808a66a:	615a      	str	r2, [r3, #20]
 808a66c:	bd38      	pop	{r3, r4, r5, pc}
 808a66e:	bf00      	nop
 808a670:	20000058 	.word	0x20000058
 808a674:	abcd330e 	.word	0xabcd330e
 808a678:	e66d1234 	.word	0xe66d1234
 808a67c:	0005deec 	.word	0x0005deec

0808a680 <strchr>:
 808a680:	4603      	mov	r3, r0
 808a682:	b2c9      	uxtb	r1, r1
 808a684:	4618      	mov	r0, r3
 808a686:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a68a:	b112      	cbz	r2, 808a692 <strchr+0x12>
 808a68c:	428a      	cmp	r2, r1
 808a68e:	d1f9      	bne.n	808a684 <strchr+0x4>
 808a690:	4770      	bx	lr
 808a692:	2900      	cmp	r1, #0
 808a694:	bf18      	it	ne
 808a696:	2000      	movne	r0, #0
 808a698:	4770      	bx	lr

0808a69a <strcmp>:
 808a69a:	f810 2b01 	ldrb.w	r2, [r0], #1
 808a69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 808a6a2:	2a01      	cmp	r2, #1
 808a6a4:	bf28      	it	cs
 808a6a6:	429a      	cmpcs	r2, r3
 808a6a8:	d0f7      	beq.n	808a69a <strcmp>
 808a6aa:	1ad0      	subs	r0, r2, r3
 808a6ac:	4770      	bx	lr

0808a6ae <strcpy>:
 808a6ae:	4603      	mov	r3, r0
 808a6b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 808a6b4:	f803 2b01 	strb.w	r2, [r3], #1
 808a6b8:	2a00      	cmp	r2, #0
 808a6ba:	d1f9      	bne.n	808a6b0 <strcpy+0x2>
 808a6bc:	4770      	bx	lr
	...

0808a6c0 <strdup>:
 808a6c0:	4b02      	ldr	r3, [pc, #8]	; (808a6cc <strdup+0xc>)
 808a6c2:	4601      	mov	r1, r0
 808a6c4:	6818      	ldr	r0, [r3, #0]
 808a6c6:	f000 b803 	b.w	808a6d0 <_strdup_r>
 808a6ca:	bf00      	nop
 808a6cc:	20000058 	.word	0x20000058

0808a6d0 <_strdup_r>:
 808a6d0:	b570      	push	{r4, r5, r6, lr}
 808a6d2:	4604      	mov	r4, r0
 808a6d4:	4608      	mov	r0, r1
 808a6d6:	460d      	mov	r5, r1
 808a6d8:	f000 f80d 	bl	808a6f6 <strlen>
 808a6dc:	1c46      	adds	r6, r0, #1
 808a6de:	4631      	mov	r1, r6
 808a6e0:	4620      	mov	r0, r4
 808a6e2:	f7fb fe8f 	bl	8086404 <_malloc_r>
 808a6e6:	4604      	mov	r4, r0
 808a6e8:	b118      	cbz	r0, 808a6f2 <_strdup_r+0x22>
 808a6ea:	4632      	mov	r2, r6
 808a6ec:	4629      	mov	r1, r5
 808a6ee:	f7ff ff8d 	bl	808a60c <memcpy>
 808a6f2:	4620      	mov	r0, r4
 808a6f4:	bd70      	pop	{r4, r5, r6, pc}

0808a6f6 <strlen>:
 808a6f6:	4603      	mov	r3, r0
 808a6f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a6fc:	2a00      	cmp	r2, #0
 808a6fe:	d1fb      	bne.n	808a6f8 <strlen+0x2>
 808a700:	1a18      	subs	r0, r3, r0
 808a702:	3801      	subs	r0, #1
 808a704:	4770      	bx	lr

0808a706 <strncmp>:
 808a706:	b510      	push	{r4, lr}
 808a708:	b16a      	cbz	r2, 808a726 <strncmp+0x20>
 808a70a:	3901      	subs	r1, #1
 808a70c:	1884      	adds	r4, r0, r2
 808a70e:	f810 3b01 	ldrb.w	r3, [r0], #1
 808a712:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808a716:	4293      	cmp	r3, r2
 808a718:	d103      	bne.n	808a722 <strncmp+0x1c>
 808a71a:	42a0      	cmp	r0, r4
 808a71c:	d001      	beq.n	808a722 <strncmp+0x1c>
 808a71e:	2b00      	cmp	r3, #0
 808a720:	d1f5      	bne.n	808a70e <strncmp+0x8>
 808a722:	1a98      	subs	r0, r3, r2
 808a724:	bd10      	pop	{r4, pc}
 808a726:	4610      	mov	r0, r2
 808a728:	e7fc      	b.n	808a724 <strncmp+0x1e>

0808a72a <strncpy>:
 808a72a:	4603      	mov	r3, r0
 808a72c:	b510      	push	{r4, lr}
 808a72e:	3901      	subs	r1, #1
 808a730:	b132      	cbz	r2, 808a740 <strncpy+0x16>
 808a732:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808a736:	3a01      	subs	r2, #1
 808a738:	f803 4b01 	strb.w	r4, [r3], #1
 808a73c:	2c00      	cmp	r4, #0
 808a73e:	d1f7      	bne.n	808a730 <strncpy+0x6>
 808a740:	2100      	movs	r1, #0
 808a742:	441a      	add	r2, r3
 808a744:	4293      	cmp	r3, r2
 808a746:	d100      	bne.n	808a74a <strncpy+0x20>
 808a748:	bd10      	pop	{r4, pc}
 808a74a:	f803 1b01 	strb.w	r1, [r3], #1
 808a74e:	e7f9      	b.n	808a744 <strncpy+0x1a>

0808a750 <strstr>:
 808a750:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a752:	780c      	ldrb	r4, [r1, #0]
 808a754:	b164      	cbz	r4, 808a770 <strstr+0x20>
 808a756:	4603      	mov	r3, r0
 808a758:	781a      	ldrb	r2, [r3, #0]
 808a75a:	4618      	mov	r0, r3
 808a75c:	1c5e      	adds	r6, r3, #1
 808a75e:	b90a      	cbnz	r2, 808a764 <strstr+0x14>
 808a760:	4610      	mov	r0, r2
 808a762:	e005      	b.n	808a770 <strstr+0x20>
 808a764:	4294      	cmp	r4, r2
 808a766:	d108      	bne.n	808a77a <strstr+0x2a>
 808a768:	460d      	mov	r5, r1
 808a76a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808a76e:	b902      	cbnz	r2, 808a772 <strstr+0x22>
 808a770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a772:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808a776:	4297      	cmp	r7, r2
 808a778:	d0f7      	beq.n	808a76a <strstr+0x1a>
 808a77a:	4633      	mov	r3, r6
 808a77c:	e7ec      	b.n	808a758 <strstr+0x8>

0808a77e <sulp>:
 808a77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a782:	460f      	mov	r7, r1
 808a784:	4690      	mov	r8, r2
 808a786:	f001 fc7f 	bl	808c088 <__ulp>
 808a78a:	4604      	mov	r4, r0
 808a78c:	460d      	mov	r5, r1
 808a78e:	f1b8 0f00 	cmp.w	r8, #0
 808a792:	d011      	beq.n	808a7b8 <sulp+0x3a>
 808a794:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808a798:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808a79c:	2b00      	cmp	r3, #0
 808a79e:	dd0b      	ble.n	808a7b8 <sulp+0x3a>
 808a7a0:	2400      	movs	r4, #0
 808a7a2:	051b      	lsls	r3, r3, #20
 808a7a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808a7a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808a7ac:	4622      	mov	r2, r4
 808a7ae:	462b      	mov	r3, r5
 808a7b0:	f7ff f84e 	bl	8089850 <__aeabi_dmul>
 808a7b4:	4604      	mov	r4, r0
 808a7b6:	460d      	mov	r5, r1
 808a7b8:	4620      	mov	r0, r4
 808a7ba:	4629      	mov	r1, r5
 808a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808a7c0 <_strtod_l>:
 808a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a7c4:	469b      	mov	fp, r3
 808a7c6:	2300      	movs	r3, #0
 808a7c8:	b0a1      	sub	sp, #132	; 0x84
 808a7ca:	931c      	str	r3, [sp, #112]	; 0x70
 808a7cc:	4ba1      	ldr	r3, [pc, #644]	; (808aa54 <_strtod_l+0x294>)
 808a7ce:	4682      	mov	sl, r0
 808a7d0:	681f      	ldr	r7, [r3, #0]
 808a7d2:	460e      	mov	r6, r1
 808a7d4:	4638      	mov	r0, r7
 808a7d6:	9217      	str	r2, [sp, #92]	; 0x5c
 808a7d8:	f7ff ff8d 	bl	808a6f6 <strlen>
 808a7dc:	f04f 0800 	mov.w	r8, #0
 808a7e0:	4604      	mov	r4, r0
 808a7e2:	f04f 0900 	mov.w	r9, #0
 808a7e6:	961b      	str	r6, [sp, #108]	; 0x6c
 808a7e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808a7ea:	781a      	ldrb	r2, [r3, #0]
 808a7ec:	2a2b      	cmp	r2, #43	; 0x2b
 808a7ee:	d04c      	beq.n	808a88a <_strtod_l+0xca>
 808a7f0:	d83a      	bhi.n	808a868 <_strtod_l+0xa8>
 808a7f2:	2a0d      	cmp	r2, #13
 808a7f4:	d833      	bhi.n	808a85e <_strtod_l+0x9e>
 808a7f6:	2a08      	cmp	r2, #8
 808a7f8:	d833      	bhi.n	808a862 <_strtod_l+0xa2>
 808a7fa:	2a00      	cmp	r2, #0
 808a7fc:	d03d      	beq.n	808a87a <_strtod_l+0xba>
 808a7fe:	2300      	movs	r3, #0
 808a800:	930c      	str	r3, [sp, #48]	; 0x30
 808a802:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808a804:	782b      	ldrb	r3, [r5, #0]
 808a806:	2b30      	cmp	r3, #48	; 0x30
 808a808:	f040 80af 	bne.w	808a96a <_strtod_l+0x1aa>
 808a80c:	786b      	ldrb	r3, [r5, #1]
 808a80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808a812:	2b58      	cmp	r3, #88	; 0x58
 808a814:	d16c      	bne.n	808a8f0 <_strtod_l+0x130>
 808a816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808a818:	4650      	mov	r0, sl
 808a81a:	9301      	str	r3, [sp, #4]
 808a81c:	ab1c      	add	r3, sp, #112	; 0x70
 808a81e:	9300      	str	r3, [sp, #0]
 808a820:	4a8d      	ldr	r2, [pc, #564]	; (808aa58 <_strtod_l+0x298>)
 808a822:	f8cd b008 	str.w	fp, [sp, #8]
 808a826:	ab1d      	add	r3, sp, #116	; 0x74
 808a828:	a91b      	add	r1, sp, #108	; 0x6c
 808a82a:	f000 fe31 	bl	808b490 <__gethex>
 808a82e:	f010 0607 	ands.w	r6, r0, #7
 808a832:	4604      	mov	r4, r0
 808a834:	d005      	beq.n	808a842 <_strtod_l+0x82>
 808a836:	2e06      	cmp	r6, #6
 808a838:	d129      	bne.n	808a88e <_strtod_l+0xce>
 808a83a:	2300      	movs	r3, #0
 808a83c:	3501      	adds	r5, #1
 808a83e:	951b      	str	r5, [sp, #108]	; 0x6c
 808a840:	930c      	str	r3, [sp, #48]	; 0x30
 808a842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808a844:	2b00      	cmp	r3, #0
 808a846:	f040 8596 	bne.w	808b376 <_strtod_l+0xbb6>
 808a84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808a84c:	b1d3      	cbz	r3, 808a884 <_strtod_l+0xc4>
 808a84e:	4642      	mov	r2, r8
 808a850:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808a854:	4610      	mov	r0, r2
 808a856:	4619      	mov	r1, r3
 808a858:	b021      	add	sp, #132	; 0x84
 808a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a85e:	2a20      	cmp	r2, #32
 808a860:	d1cd      	bne.n	808a7fe <_strtod_l+0x3e>
 808a862:	3301      	adds	r3, #1
 808a864:	931b      	str	r3, [sp, #108]	; 0x6c
 808a866:	e7bf      	b.n	808a7e8 <_strtod_l+0x28>
 808a868:	2a2d      	cmp	r2, #45	; 0x2d
 808a86a:	d1c8      	bne.n	808a7fe <_strtod_l+0x3e>
 808a86c:	2201      	movs	r2, #1
 808a86e:	920c      	str	r2, [sp, #48]	; 0x30
 808a870:	1c5a      	adds	r2, r3, #1
 808a872:	921b      	str	r2, [sp, #108]	; 0x6c
 808a874:	785b      	ldrb	r3, [r3, #1]
 808a876:	2b00      	cmp	r3, #0
 808a878:	d1c3      	bne.n	808a802 <_strtod_l+0x42>
 808a87a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808a87c:	961b      	str	r6, [sp, #108]	; 0x6c
 808a87e:	2b00      	cmp	r3, #0
 808a880:	f040 8577 	bne.w	808b372 <_strtod_l+0xbb2>
 808a884:	4642      	mov	r2, r8
 808a886:	464b      	mov	r3, r9
 808a888:	e7e4      	b.n	808a854 <_strtod_l+0x94>
 808a88a:	2200      	movs	r2, #0
 808a88c:	e7ef      	b.n	808a86e <_strtod_l+0xae>
 808a88e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808a890:	b13a      	cbz	r2, 808a8a2 <_strtod_l+0xe2>
 808a892:	2135      	movs	r1, #53	; 0x35
 808a894:	a81e      	add	r0, sp, #120	; 0x78
 808a896:	f001 fcee 	bl	808c276 <__copybits>
 808a89a:	4650      	mov	r0, sl
 808a89c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808a89e:	f001 f929 	bl	808baf4 <_Bfree>
 808a8a2:	3e01      	subs	r6, #1
 808a8a4:	2e05      	cmp	r6, #5
 808a8a6:	d807      	bhi.n	808a8b8 <_strtod_l+0xf8>
 808a8a8:	e8df f006 	tbb	[pc, r6]
 808a8ac:	1d180b0e 	.word	0x1d180b0e
 808a8b0:	030e      	.short	0x030e
 808a8b2:	f04f 0900 	mov.w	r9, #0
 808a8b6:	46c8      	mov	r8, r9
 808a8b8:	0721      	lsls	r1, r4, #28
 808a8ba:	d5c2      	bpl.n	808a842 <_strtod_l+0x82>
 808a8bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808a8c0:	e7bf      	b.n	808a842 <_strtod_l+0x82>
 808a8c2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808a8c6:	e7f7      	b.n	808a8b8 <_strtod_l+0xf8>
 808a8c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808a8ca:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808a8ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808a8d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808a8d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808a8da:	e7ed      	b.n	808a8b8 <_strtod_l+0xf8>
 808a8dc:	f04f 0800 	mov.w	r8, #0
 808a8e0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808aa5c <_strtod_l+0x29c>
 808a8e4:	e7e8      	b.n	808a8b8 <_strtod_l+0xf8>
 808a8e6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808a8ea:	f04f 38ff 	mov.w	r8, #4294967295
 808a8ee:	e7e3      	b.n	808a8b8 <_strtod_l+0xf8>
 808a8f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808a8f2:	1c5a      	adds	r2, r3, #1
 808a8f4:	921b      	str	r2, [sp, #108]	; 0x6c
 808a8f6:	785b      	ldrb	r3, [r3, #1]
 808a8f8:	2b30      	cmp	r3, #48	; 0x30
 808a8fa:	d0f9      	beq.n	808a8f0 <_strtod_l+0x130>
 808a8fc:	2b00      	cmp	r3, #0
 808a8fe:	d0a0      	beq.n	808a842 <_strtod_l+0x82>
 808a900:	2301      	movs	r3, #1
 808a902:	9307      	str	r3, [sp, #28]
 808a904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808a906:	220a      	movs	r2, #10
 808a908:	9308      	str	r3, [sp, #32]
 808a90a:	2300      	movs	r3, #0
 808a90c:	469b      	mov	fp, r3
 808a90e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808a912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808a914:	7805      	ldrb	r5, [r0, #0]
 808a916:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808a91a:	b2d9      	uxtb	r1, r3
 808a91c:	2909      	cmp	r1, #9
 808a91e:	d926      	bls.n	808a96e <_strtod_l+0x1ae>
 808a920:	4622      	mov	r2, r4
 808a922:	4639      	mov	r1, r7
 808a924:	f7ff feef 	bl	808a706 <strncmp>
 808a928:	2800      	cmp	r0, #0
 808a92a:	d032      	beq.n	808a992 <_strtod_l+0x1d2>
 808a92c:	2000      	movs	r0, #0
 808a92e:	462b      	mov	r3, r5
 808a930:	465c      	mov	r4, fp
 808a932:	4602      	mov	r2, r0
 808a934:	9004      	str	r0, [sp, #16]
 808a936:	2b65      	cmp	r3, #101	; 0x65
 808a938:	d001      	beq.n	808a93e <_strtod_l+0x17e>
 808a93a:	2b45      	cmp	r3, #69	; 0x45
 808a93c:	d113      	bne.n	808a966 <_strtod_l+0x1a6>
 808a93e:	b91c      	cbnz	r4, 808a948 <_strtod_l+0x188>
 808a940:	9b07      	ldr	r3, [sp, #28]
 808a942:	4303      	orrs	r3, r0
 808a944:	d099      	beq.n	808a87a <_strtod_l+0xba>
 808a946:	2400      	movs	r4, #0
 808a948:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808a94a:	1c73      	adds	r3, r6, #1
 808a94c:	931b      	str	r3, [sp, #108]	; 0x6c
 808a94e:	7873      	ldrb	r3, [r6, #1]
 808a950:	2b2b      	cmp	r3, #43	; 0x2b
 808a952:	d078      	beq.n	808aa46 <_strtod_l+0x286>
 808a954:	2b2d      	cmp	r3, #45	; 0x2d
 808a956:	d07b      	beq.n	808aa50 <_strtod_l+0x290>
 808a958:	2700      	movs	r7, #0
 808a95a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808a95e:	2909      	cmp	r1, #9
 808a960:	f240 8082 	bls.w	808aa68 <_strtod_l+0x2a8>
 808a964:	961b      	str	r6, [sp, #108]	; 0x6c
 808a966:	2500      	movs	r5, #0
 808a968:	e09e      	b.n	808aaa8 <_strtod_l+0x2e8>
 808a96a:	2300      	movs	r3, #0
 808a96c:	e7c9      	b.n	808a902 <_strtod_l+0x142>
 808a96e:	f1bb 0f08 	cmp.w	fp, #8
 808a972:	bfd5      	itete	le
 808a974:	9906      	ldrle	r1, [sp, #24]
 808a976:	9905      	ldrgt	r1, [sp, #20]
 808a978:	fb02 3301 	mlale	r3, r2, r1, r3
 808a97c:	fb02 3301 	mlagt	r3, r2, r1, r3
 808a980:	f100 0001 	add.w	r0, r0, #1
 808a984:	bfd4      	ite	le
 808a986:	9306      	strle	r3, [sp, #24]
 808a988:	9305      	strgt	r3, [sp, #20]
 808a98a:	f10b 0b01 	add.w	fp, fp, #1
 808a98e:	901b      	str	r0, [sp, #108]	; 0x6c
 808a990:	e7bf      	b.n	808a912 <_strtod_l+0x152>
 808a992:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808a994:	191a      	adds	r2, r3, r4
 808a996:	921b      	str	r2, [sp, #108]	; 0x6c
 808a998:	5d1b      	ldrb	r3, [r3, r4]
 808a99a:	f1bb 0f00 	cmp.w	fp, #0
 808a99e:	d036      	beq.n	808aa0e <_strtod_l+0x24e>
 808a9a0:	465c      	mov	r4, fp
 808a9a2:	9004      	str	r0, [sp, #16]
 808a9a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808a9a8:	2a09      	cmp	r2, #9
 808a9aa:	d912      	bls.n	808a9d2 <_strtod_l+0x212>
 808a9ac:	2201      	movs	r2, #1
 808a9ae:	e7c2      	b.n	808a936 <_strtod_l+0x176>
 808a9b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808a9b2:	3001      	adds	r0, #1
 808a9b4:	1c5a      	adds	r2, r3, #1
 808a9b6:	921b      	str	r2, [sp, #108]	; 0x6c
 808a9b8:	785b      	ldrb	r3, [r3, #1]
 808a9ba:	2b30      	cmp	r3, #48	; 0x30
 808a9bc:	d0f8      	beq.n	808a9b0 <_strtod_l+0x1f0>
 808a9be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808a9c2:	2a08      	cmp	r2, #8
 808a9c4:	f200 84dc 	bhi.w	808b380 <_strtod_l+0xbc0>
 808a9c8:	9004      	str	r0, [sp, #16]
 808a9ca:	2000      	movs	r0, #0
 808a9cc:	4604      	mov	r4, r0
 808a9ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808a9d0:	9208      	str	r2, [sp, #32]
 808a9d2:	3b30      	subs	r3, #48	; 0x30
 808a9d4:	f100 0201 	add.w	r2, r0, #1
 808a9d8:	d013      	beq.n	808aa02 <_strtod_l+0x242>
 808a9da:	9904      	ldr	r1, [sp, #16]
 808a9dc:	1905      	adds	r5, r0, r4
 808a9de:	4411      	add	r1, r2
 808a9e0:	9104      	str	r1, [sp, #16]
 808a9e2:	4622      	mov	r2, r4
 808a9e4:	210a      	movs	r1, #10
 808a9e6:	42aa      	cmp	r2, r5
 808a9e8:	d113      	bne.n	808aa12 <_strtod_l+0x252>
 808a9ea:	1822      	adds	r2, r4, r0
 808a9ec:	2a08      	cmp	r2, #8
 808a9ee:	f104 0401 	add.w	r4, r4, #1
 808a9f2:	4404      	add	r4, r0
 808a9f4:	dc1b      	bgt.n	808aa2e <_strtod_l+0x26e>
 808a9f6:	220a      	movs	r2, #10
 808a9f8:	9906      	ldr	r1, [sp, #24]
 808a9fa:	fb02 3301 	mla	r3, r2, r1, r3
 808a9fe:	9306      	str	r3, [sp, #24]
 808aa00:	2200      	movs	r2, #0
 808aa02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808aa04:	4610      	mov	r0, r2
 808aa06:	1c59      	adds	r1, r3, #1
 808aa08:	911b      	str	r1, [sp, #108]	; 0x6c
 808aa0a:	785b      	ldrb	r3, [r3, #1]
 808aa0c:	e7ca      	b.n	808a9a4 <_strtod_l+0x1e4>
 808aa0e:	4658      	mov	r0, fp
 808aa10:	e7d3      	b.n	808a9ba <_strtod_l+0x1fa>
 808aa12:	2a08      	cmp	r2, #8
 808aa14:	dc04      	bgt.n	808aa20 <_strtod_l+0x260>
 808aa16:	9f06      	ldr	r7, [sp, #24]
 808aa18:	434f      	muls	r7, r1
 808aa1a:	9706      	str	r7, [sp, #24]
 808aa1c:	3201      	adds	r2, #1
 808aa1e:	e7e2      	b.n	808a9e6 <_strtod_l+0x226>
 808aa20:	1c57      	adds	r7, r2, #1
 808aa22:	2f10      	cmp	r7, #16
 808aa24:	bfde      	ittt	le
 808aa26:	9f05      	ldrle	r7, [sp, #20]
 808aa28:	434f      	mulle	r7, r1
 808aa2a:	9705      	strle	r7, [sp, #20]
 808aa2c:	e7f6      	b.n	808aa1c <_strtod_l+0x25c>
 808aa2e:	2c10      	cmp	r4, #16
 808aa30:	bfdf      	itttt	le
 808aa32:	220a      	movle	r2, #10
 808aa34:	9905      	ldrle	r1, [sp, #20]
 808aa36:	fb02 3301 	mlale	r3, r2, r1, r3
 808aa3a:	9305      	strle	r3, [sp, #20]
 808aa3c:	e7e0      	b.n	808aa00 <_strtod_l+0x240>
 808aa3e:	2300      	movs	r3, #0
 808aa40:	2201      	movs	r2, #1
 808aa42:	9304      	str	r3, [sp, #16]
 808aa44:	e77c      	b.n	808a940 <_strtod_l+0x180>
 808aa46:	2700      	movs	r7, #0
 808aa48:	1cb3      	adds	r3, r6, #2
 808aa4a:	931b      	str	r3, [sp, #108]	; 0x6c
 808aa4c:	78b3      	ldrb	r3, [r6, #2]
 808aa4e:	e784      	b.n	808a95a <_strtod_l+0x19a>
 808aa50:	2701      	movs	r7, #1
 808aa52:	e7f9      	b.n	808aa48 <_strtod_l+0x288>
 808aa54:	0808d604 	.word	0x0808d604
 808aa58:	0808d4b0 	.word	0x0808d4b0
 808aa5c:	7ff00000 	.word	0x7ff00000
 808aa60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808aa62:	1c59      	adds	r1, r3, #1
 808aa64:	911b      	str	r1, [sp, #108]	; 0x6c
 808aa66:	785b      	ldrb	r3, [r3, #1]
 808aa68:	2b30      	cmp	r3, #48	; 0x30
 808aa6a:	d0f9      	beq.n	808aa60 <_strtod_l+0x2a0>
 808aa6c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808aa70:	2908      	cmp	r1, #8
 808aa72:	f63f af78 	bhi.w	808a966 <_strtod_l+0x1a6>
 808aa76:	f04f 0e0a 	mov.w	lr, #10
 808aa7a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808aa7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808aa80:	9309      	str	r3, [sp, #36]	; 0x24
 808aa82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808aa84:	1c59      	adds	r1, r3, #1
 808aa86:	911b      	str	r1, [sp, #108]	; 0x6c
 808aa88:	785b      	ldrb	r3, [r3, #1]
 808aa8a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808aa8e:	2d09      	cmp	r5, #9
 808aa90:	d935      	bls.n	808aafe <_strtod_l+0x33e>
 808aa92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808aa94:	1b49      	subs	r1, r1, r5
 808aa96:	2908      	cmp	r1, #8
 808aa98:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808aa9c:	dc02      	bgt.n	808aaa4 <_strtod_l+0x2e4>
 808aa9e:	4565      	cmp	r5, ip
 808aaa0:	bfa8      	it	ge
 808aaa2:	4665      	movge	r5, ip
 808aaa4:	b107      	cbz	r7, 808aaa8 <_strtod_l+0x2e8>
 808aaa6:	426d      	negs	r5, r5
 808aaa8:	2c00      	cmp	r4, #0
 808aaaa:	d14c      	bne.n	808ab46 <_strtod_l+0x386>
 808aaac:	9907      	ldr	r1, [sp, #28]
 808aaae:	4301      	orrs	r1, r0
 808aab0:	f47f aec7 	bne.w	808a842 <_strtod_l+0x82>
 808aab4:	2a00      	cmp	r2, #0
 808aab6:	f47f aee0 	bne.w	808a87a <_strtod_l+0xba>
 808aaba:	2b69      	cmp	r3, #105	; 0x69
 808aabc:	d026      	beq.n	808ab0c <_strtod_l+0x34c>
 808aabe:	dc23      	bgt.n	808ab08 <_strtod_l+0x348>
 808aac0:	2b49      	cmp	r3, #73	; 0x49
 808aac2:	d023      	beq.n	808ab0c <_strtod_l+0x34c>
 808aac4:	2b4e      	cmp	r3, #78	; 0x4e
 808aac6:	f47f aed8 	bne.w	808a87a <_strtod_l+0xba>
 808aaca:	499c      	ldr	r1, [pc, #624]	; (808ad3c <_strtod_l+0x57c>)
 808aacc:	a81b      	add	r0, sp, #108	; 0x6c
 808aace:	f000 ff1b 	bl	808b908 <__match>
 808aad2:	2800      	cmp	r0, #0
 808aad4:	f43f aed1 	beq.w	808a87a <_strtod_l+0xba>
 808aad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808aada:	781b      	ldrb	r3, [r3, #0]
 808aadc:	2b28      	cmp	r3, #40	; 0x28
 808aade:	d12c      	bne.n	808ab3a <_strtod_l+0x37a>
 808aae0:	4997      	ldr	r1, [pc, #604]	; (808ad40 <_strtod_l+0x580>)
 808aae2:	aa1e      	add	r2, sp, #120	; 0x78
 808aae4:	a81b      	add	r0, sp, #108	; 0x6c
 808aae6:	f000 ff23 	bl	808b930 <__hexnan>
 808aaea:	2805      	cmp	r0, #5
 808aaec:	d125      	bne.n	808ab3a <_strtod_l+0x37a>
 808aaee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808aaf0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808aaf4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808aaf8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808aafc:	e6a1      	b.n	808a842 <_strtod_l+0x82>
 808aafe:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808ab02:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808ab06:	e7bc      	b.n	808aa82 <_strtod_l+0x2c2>
 808ab08:	2b6e      	cmp	r3, #110	; 0x6e
 808ab0a:	e7dc      	b.n	808aac6 <_strtod_l+0x306>
 808ab0c:	498d      	ldr	r1, [pc, #564]	; (808ad44 <_strtod_l+0x584>)
 808ab0e:	a81b      	add	r0, sp, #108	; 0x6c
 808ab10:	f000 fefa 	bl	808b908 <__match>
 808ab14:	2800      	cmp	r0, #0
 808ab16:	f43f aeb0 	beq.w	808a87a <_strtod_l+0xba>
 808ab1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ab1c:	498a      	ldr	r1, [pc, #552]	; (808ad48 <_strtod_l+0x588>)
 808ab1e:	3b01      	subs	r3, #1
 808ab20:	a81b      	add	r0, sp, #108	; 0x6c
 808ab22:	931b      	str	r3, [sp, #108]	; 0x6c
 808ab24:	f000 fef0 	bl	808b908 <__match>
 808ab28:	b910      	cbnz	r0, 808ab30 <_strtod_l+0x370>
 808ab2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ab2c:	3301      	adds	r3, #1
 808ab2e:	931b      	str	r3, [sp, #108]	; 0x6c
 808ab30:	f04f 0800 	mov.w	r8, #0
 808ab34:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808ad58 <_strtod_l+0x598>
 808ab38:	e683      	b.n	808a842 <_strtod_l+0x82>
 808ab3a:	4884      	ldr	r0, [pc, #528]	; (808ad4c <_strtod_l+0x58c>)
 808ab3c:	f7fe fcc6 	bl	80894cc <nan>
 808ab40:	4680      	mov	r8, r0
 808ab42:	4689      	mov	r9, r1
 808ab44:	e67d      	b.n	808a842 <_strtod_l+0x82>
 808ab46:	9b04      	ldr	r3, [sp, #16]
 808ab48:	f1bb 0f00 	cmp.w	fp, #0
 808ab4c:	bf08      	it	eq
 808ab4e:	46a3      	moveq	fp, r4
 808ab50:	1aeb      	subs	r3, r5, r3
 808ab52:	2c10      	cmp	r4, #16
 808ab54:	9806      	ldr	r0, [sp, #24]
 808ab56:	4626      	mov	r6, r4
 808ab58:	9307      	str	r3, [sp, #28]
 808ab5a:	bfa8      	it	ge
 808ab5c:	2610      	movge	r6, #16
 808ab5e:	f7fe fdfd 	bl	808975c <__aeabi_ui2d>
 808ab62:	2c09      	cmp	r4, #9
 808ab64:	4680      	mov	r8, r0
 808ab66:	4689      	mov	r9, r1
 808ab68:	dd13      	ble.n	808ab92 <_strtod_l+0x3d2>
 808ab6a:	4b79      	ldr	r3, [pc, #484]	; (808ad50 <_strtod_l+0x590>)
 808ab6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808ab70:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808ab74:	f7fe fe6c 	bl	8089850 <__aeabi_dmul>
 808ab78:	4680      	mov	r8, r0
 808ab7a:	9805      	ldr	r0, [sp, #20]
 808ab7c:	4689      	mov	r9, r1
 808ab7e:	f7fe fded 	bl	808975c <__aeabi_ui2d>
 808ab82:	4602      	mov	r2, r0
 808ab84:	460b      	mov	r3, r1
 808ab86:	4640      	mov	r0, r8
 808ab88:	4649      	mov	r1, r9
 808ab8a:	f7fe fcab 	bl	80894e4 <__adddf3>
 808ab8e:	4680      	mov	r8, r0
 808ab90:	4689      	mov	r9, r1
 808ab92:	2c0f      	cmp	r4, #15
 808ab94:	dc36      	bgt.n	808ac04 <_strtod_l+0x444>
 808ab96:	9b07      	ldr	r3, [sp, #28]
 808ab98:	2b00      	cmp	r3, #0
 808ab9a:	f43f ae52 	beq.w	808a842 <_strtod_l+0x82>
 808ab9e:	dd22      	ble.n	808abe6 <_strtod_l+0x426>
 808aba0:	2b16      	cmp	r3, #22
 808aba2:	dc09      	bgt.n	808abb8 <_strtod_l+0x3f8>
 808aba4:	4c6a      	ldr	r4, [pc, #424]	; (808ad50 <_strtod_l+0x590>)
 808aba6:	4642      	mov	r2, r8
 808aba8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808abac:	464b      	mov	r3, r9
 808abae:	e9d4 0100 	ldrd	r0, r1, [r4]
 808abb2:	f7fe fe4d 	bl	8089850 <__aeabi_dmul>
 808abb6:	e7c3      	b.n	808ab40 <_strtod_l+0x380>
 808abb8:	9a07      	ldr	r2, [sp, #28]
 808abba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808abbe:	4293      	cmp	r3, r2
 808abc0:	db20      	blt.n	808ac04 <_strtod_l+0x444>
 808abc2:	4d63      	ldr	r5, [pc, #396]	; (808ad50 <_strtod_l+0x590>)
 808abc4:	f1c4 040f 	rsb	r4, r4, #15
 808abc8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808abcc:	4642      	mov	r2, r8
 808abce:	e9d1 0100 	ldrd	r0, r1, [r1]
 808abd2:	464b      	mov	r3, r9
 808abd4:	f7fe fe3c 	bl	8089850 <__aeabi_dmul>
 808abd8:	9b07      	ldr	r3, [sp, #28]
 808abda:	1b1c      	subs	r4, r3, r4
 808abdc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808abe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 808abe4:	e7e5      	b.n	808abb2 <_strtod_l+0x3f2>
 808abe6:	9b07      	ldr	r3, [sp, #28]
 808abe8:	3316      	adds	r3, #22
 808abea:	db0b      	blt.n	808ac04 <_strtod_l+0x444>
 808abec:	9b04      	ldr	r3, [sp, #16]
 808abee:	4a58      	ldr	r2, [pc, #352]	; (808ad50 <_strtod_l+0x590>)
 808abf0:	1b5d      	subs	r5, r3, r5
 808abf2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808abf6:	4640      	mov	r0, r8
 808abf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 808abfc:	4649      	mov	r1, r9
 808abfe:	f7fe ff51 	bl	8089aa4 <__aeabi_ddiv>
 808ac02:	e79d      	b.n	808ab40 <_strtod_l+0x380>
 808ac04:	9b07      	ldr	r3, [sp, #28]
 808ac06:	1ba6      	subs	r6, r4, r6
 808ac08:	441e      	add	r6, r3
 808ac0a:	2e00      	cmp	r6, #0
 808ac0c:	dd71      	ble.n	808acf2 <_strtod_l+0x532>
 808ac0e:	f016 030f 	ands.w	r3, r6, #15
 808ac12:	d00a      	beq.n	808ac2a <_strtod_l+0x46a>
 808ac14:	494e      	ldr	r1, [pc, #312]	; (808ad50 <_strtod_l+0x590>)
 808ac16:	4642      	mov	r2, r8
 808ac18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808ac1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ac20:	464b      	mov	r3, r9
 808ac22:	f7fe fe15 	bl	8089850 <__aeabi_dmul>
 808ac26:	4680      	mov	r8, r0
 808ac28:	4689      	mov	r9, r1
 808ac2a:	f036 060f 	bics.w	r6, r6, #15
 808ac2e:	d050      	beq.n	808acd2 <_strtod_l+0x512>
 808ac30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808ac34:	dd27      	ble.n	808ac86 <_strtod_l+0x4c6>
 808ac36:	f04f 0b00 	mov.w	fp, #0
 808ac3a:	f8cd b010 	str.w	fp, [sp, #16]
 808ac3e:	f8cd b020 	str.w	fp, [sp, #32]
 808ac42:	f8cd b018 	str.w	fp, [sp, #24]
 808ac46:	2322      	movs	r3, #34	; 0x22
 808ac48:	f04f 0800 	mov.w	r8, #0
 808ac4c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808ad58 <_strtod_l+0x598>
 808ac50:	f8ca 3000 	str.w	r3, [sl]
 808ac54:	9b08      	ldr	r3, [sp, #32]
 808ac56:	2b00      	cmp	r3, #0
 808ac58:	f43f adf3 	beq.w	808a842 <_strtod_l+0x82>
 808ac5c:	4650      	mov	r0, sl
 808ac5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808ac60:	f000 ff48 	bl	808baf4 <_Bfree>
 808ac64:	4650      	mov	r0, sl
 808ac66:	9906      	ldr	r1, [sp, #24]
 808ac68:	f000 ff44 	bl	808baf4 <_Bfree>
 808ac6c:	4650      	mov	r0, sl
 808ac6e:	9904      	ldr	r1, [sp, #16]
 808ac70:	f000 ff40 	bl	808baf4 <_Bfree>
 808ac74:	4650      	mov	r0, sl
 808ac76:	9908      	ldr	r1, [sp, #32]
 808ac78:	f000 ff3c 	bl	808baf4 <_Bfree>
 808ac7c:	4659      	mov	r1, fp
 808ac7e:	4650      	mov	r0, sl
 808ac80:	f000 ff38 	bl	808baf4 <_Bfree>
 808ac84:	e5dd      	b.n	808a842 <_strtod_l+0x82>
 808ac86:	2300      	movs	r3, #0
 808ac88:	4640      	mov	r0, r8
 808ac8a:	4649      	mov	r1, r9
 808ac8c:	461f      	mov	r7, r3
 808ac8e:	1136      	asrs	r6, r6, #4
 808ac90:	2e01      	cmp	r6, #1
 808ac92:	dc21      	bgt.n	808acd8 <_strtod_l+0x518>
 808ac94:	b10b      	cbz	r3, 808ac9a <_strtod_l+0x4da>
 808ac96:	4680      	mov	r8, r0
 808ac98:	4689      	mov	r9, r1
 808ac9a:	4b2e      	ldr	r3, [pc, #184]	; (808ad54 <_strtod_l+0x594>)
 808ac9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808aca0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808aca4:	4642      	mov	r2, r8
 808aca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 808acaa:	464b      	mov	r3, r9
 808acac:	f7fe fdd0 	bl	8089850 <__aeabi_dmul>
 808acb0:	4b29      	ldr	r3, [pc, #164]	; (808ad58 <_strtod_l+0x598>)
 808acb2:	460a      	mov	r2, r1
 808acb4:	400b      	ands	r3, r1
 808acb6:	4929      	ldr	r1, [pc, #164]	; (808ad5c <_strtod_l+0x59c>)
 808acb8:	4680      	mov	r8, r0
 808acba:	428b      	cmp	r3, r1
 808acbc:	d8bb      	bhi.n	808ac36 <_strtod_l+0x476>
 808acbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808acc2:	428b      	cmp	r3, r1
 808acc4:	bf86      	itte	hi
 808acc6:	f04f 38ff 	movhi.w	r8, #4294967295
 808acca:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808ad60 <_strtod_l+0x5a0>
 808acce:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808acd2:	2300      	movs	r3, #0
 808acd4:	9305      	str	r3, [sp, #20]
 808acd6:	e07e      	b.n	808add6 <_strtod_l+0x616>
 808acd8:	07f2      	lsls	r2, r6, #31
 808acda:	d507      	bpl.n	808acec <_strtod_l+0x52c>
 808acdc:	4b1d      	ldr	r3, [pc, #116]	; (808ad54 <_strtod_l+0x594>)
 808acde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ace6:	f7fe fdb3 	bl	8089850 <__aeabi_dmul>
 808acea:	2301      	movs	r3, #1
 808acec:	3701      	adds	r7, #1
 808acee:	1076      	asrs	r6, r6, #1
 808acf0:	e7ce      	b.n	808ac90 <_strtod_l+0x4d0>
 808acf2:	d0ee      	beq.n	808acd2 <_strtod_l+0x512>
 808acf4:	4276      	negs	r6, r6
 808acf6:	f016 020f 	ands.w	r2, r6, #15
 808acfa:	d00a      	beq.n	808ad12 <_strtod_l+0x552>
 808acfc:	4b14      	ldr	r3, [pc, #80]	; (808ad50 <_strtod_l+0x590>)
 808acfe:	4640      	mov	r0, r8
 808ad00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808ad04:	4649      	mov	r1, r9
 808ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ad0a:	f7fe fecb 	bl	8089aa4 <__aeabi_ddiv>
 808ad0e:	4680      	mov	r8, r0
 808ad10:	4689      	mov	r9, r1
 808ad12:	1136      	asrs	r6, r6, #4
 808ad14:	d0dd      	beq.n	808acd2 <_strtod_l+0x512>
 808ad16:	2e1f      	cmp	r6, #31
 808ad18:	dd24      	ble.n	808ad64 <_strtod_l+0x5a4>
 808ad1a:	f04f 0b00 	mov.w	fp, #0
 808ad1e:	f8cd b010 	str.w	fp, [sp, #16]
 808ad22:	f8cd b020 	str.w	fp, [sp, #32]
 808ad26:	f8cd b018 	str.w	fp, [sp, #24]
 808ad2a:	2322      	movs	r3, #34	; 0x22
 808ad2c:	f04f 0800 	mov.w	r8, #0
 808ad30:	f04f 0900 	mov.w	r9, #0
 808ad34:	f8ca 3000 	str.w	r3, [sl]
 808ad38:	e78c      	b.n	808ac54 <_strtod_l+0x494>
 808ad3a:	bf00      	nop
 808ad3c:	0808d4ab 	.word	0x0808d4ab
 808ad40:	0808d4c4 	.word	0x0808d4c4
 808ad44:	0808d4a2 	.word	0x0808d4a2
 808ad48:	0808d4a5 	.word	0x0808d4a5
 808ad4c:	0808cfab 	.word	0x0808cfab
 808ad50:	0808d640 	.word	0x0808d640
 808ad54:	0808d618 	.word	0x0808d618
 808ad58:	7ff00000 	.word	0x7ff00000
 808ad5c:	7ca00000 	.word	0x7ca00000
 808ad60:	7fefffff 	.word	0x7fefffff
 808ad64:	f016 0310 	ands.w	r3, r6, #16
 808ad68:	bf18      	it	ne
 808ad6a:	236a      	movne	r3, #106	; 0x6a
 808ad6c:	4640      	mov	r0, r8
 808ad6e:	9305      	str	r3, [sp, #20]
 808ad70:	4649      	mov	r1, r9
 808ad72:	2300      	movs	r3, #0
 808ad74:	4fb2      	ldr	r7, [pc, #712]	; (808b040 <_strtod_l+0x880>)
 808ad76:	07f2      	lsls	r2, r6, #31
 808ad78:	d504      	bpl.n	808ad84 <_strtod_l+0x5c4>
 808ad7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 808ad7e:	f7fe fd67 	bl	8089850 <__aeabi_dmul>
 808ad82:	2301      	movs	r3, #1
 808ad84:	1076      	asrs	r6, r6, #1
 808ad86:	f107 0708 	add.w	r7, r7, #8
 808ad8a:	d1f4      	bne.n	808ad76 <_strtod_l+0x5b6>
 808ad8c:	b10b      	cbz	r3, 808ad92 <_strtod_l+0x5d2>
 808ad8e:	4680      	mov	r8, r0
 808ad90:	4689      	mov	r9, r1
 808ad92:	9b05      	ldr	r3, [sp, #20]
 808ad94:	b1bb      	cbz	r3, 808adc6 <_strtod_l+0x606>
 808ad96:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808ad9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808ad9e:	2b00      	cmp	r3, #0
 808ada0:	4649      	mov	r1, r9
 808ada2:	dd10      	ble.n	808adc6 <_strtod_l+0x606>
 808ada4:	2b1f      	cmp	r3, #31
 808ada6:	f340 812b 	ble.w	808b000 <_strtod_l+0x840>
 808adaa:	2b34      	cmp	r3, #52	; 0x34
 808adac:	bfd8      	it	le
 808adae:	f04f 32ff 	movle.w	r2, #4294967295
 808adb2:	f04f 0800 	mov.w	r8, #0
 808adb6:	bfcf      	iteee	gt
 808adb8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808adbc:	3b20      	suble	r3, #32
 808adbe:	fa02 f303 	lslle.w	r3, r2, r3
 808adc2:	ea03 0901 	andle.w	r9, r3, r1
 808adc6:	2200      	movs	r2, #0
 808adc8:	2300      	movs	r3, #0
 808adca:	4640      	mov	r0, r8
 808adcc:	4649      	mov	r1, r9
 808adce:	f7fe ffa7 	bl	8089d20 <__aeabi_dcmpeq>
 808add2:	2800      	cmp	r0, #0
 808add4:	d1a1      	bne.n	808ad1a <_strtod_l+0x55a>
 808add6:	9b06      	ldr	r3, [sp, #24]
 808add8:	465a      	mov	r2, fp
 808adda:	9300      	str	r3, [sp, #0]
 808addc:	4650      	mov	r0, sl
 808adde:	4623      	mov	r3, r4
 808ade0:	9908      	ldr	r1, [sp, #32]
 808ade2:	f000 fedc 	bl	808bb9e <__s2b>
 808ade6:	9008      	str	r0, [sp, #32]
 808ade8:	2800      	cmp	r0, #0
 808adea:	f43f af24 	beq.w	808ac36 <_strtod_l+0x476>
 808adee:	9b04      	ldr	r3, [sp, #16]
 808adf0:	f04f 0b00 	mov.w	fp, #0
 808adf4:	1b5d      	subs	r5, r3, r5
 808adf6:	9b07      	ldr	r3, [sp, #28]
 808adf8:	f8cd b010 	str.w	fp, [sp, #16]
 808adfc:	2b00      	cmp	r3, #0
 808adfe:	bfb4      	ite	lt
 808ae00:	462b      	movlt	r3, r5
 808ae02:	2300      	movge	r3, #0
 808ae04:	930e      	str	r3, [sp, #56]	; 0x38
 808ae06:	9b07      	ldr	r3, [sp, #28]
 808ae08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808ae0c:	9316      	str	r3, [sp, #88]	; 0x58
 808ae0e:	9b08      	ldr	r3, [sp, #32]
 808ae10:	4650      	mov	r0, sl
 808ae12:	6859      	ldr	r1, [r3, #4]
 808ae14:	f000 fe3a 	bl	808ba8c <_Balloc>
 808ae18:	9006      	str	r0, [sp, #24]
 808ae1a:	2800      	cmp	r0, #0
 808ae1c:	f43f af13 	beq.w	808ac46 <_strtod_l+0x486>
 808ae20:	9b08      	ldr	r3, [sp, #32]
 808ae22:	300c      	adds	r0, #12
 808ae24:	691a      	ldr	r2, [r3, #16]
 808ae26:	f103 010c 	add.w	r1, r3, #12
 808ae2a:	3202      	adds	r2, #2
 808ae2c:	0092      	lsls	r2, r2, #2
 808ae2e:	f7ff fbed 	bl	808a60c <memcpy>
 808ae32:	ab1e      	add	r3, sp, #120	; 0x78
 808ae34:	9301      	str	r3, [sp, #4]
 808ae36:	ab1d      	add	r3, sp, #116	; 0x74
 808ae38:	9300      	str	r3, [sp, #0]
 808ae3a:	4642      	mov	r2, r8
 808ae3c:	464b      	mov	r3, r9
 808ae3e:	4650      	mov	r0, sl
 808ae40:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808ae44:	f001 f99a 	bl	808c17c <__d2b>
 808ae48:	901c      	str	r0, [sp, #112]	; 0x70
 808ae4a:	2800      	cmp	r0, #0
 808ae4c:	f43f aefb 	beq.w	808ac46 <_strtod_l+0x486>
 808ae50:	2101      	movs	r1, #1
 808ae52:	4650      	mov	r0, sl
 808ae54:	f000 ff2f 	bl	808bcb6 <__i2b>
 808ae58:	4603      	mov	r3, r0
 808ae5a:	9004      	str	r0, [sp, #16]
 808ae5c:	2800      	cmp	r0, #0
 808ae5e:	f43f aef2 	beq.w	808ac46 <_strtod_l+0x486>
 808ae62:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808ae64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808ae66:	2d00      	cmp	r5, #0
 808ae68:	bfab      	itete	ge
 808ae6a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808ae6c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808ae6e:	18ee      	addge	r6, r5, r3
 808ae70:	1b5c      	sublt	r4, r3, r5
 808ae72:	9b05      	ldr	r3, [sp, #20]
 808ae74:	bfa8      	it	ge
 808ae76:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808ae78:	eba5 0503 	sub.w	r5, r5, r3
 808ae7c:	4415      	add	r5, r2
 808ae7e:	4b71      	ldr	r3, [pc, #452]	; (808b044 <_strtod_l+0x884>)
 808ae80:	f105 35ff 	add.w	r5, r5, #4294967295
 808ae84:	bfb8      	it	lt
 808ae86:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808ae88:	429d      	cmp	r5, r3
 808ae8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808ae8e:	f280 80c9 	bge.w	808b024 <_strtod_l+0x864>
 808ae92:	1b5b      	subs	r3, r3, r5
 808ae94:	2b1f      	cmp	r3, #31
 808ae96:	f04f 0701 	mov.w	r7, #1
 808ae9a:	eba2 0203 	sub.w	r2, r2, r3
 808ae9e:	f300 80b6 	bgt.w	808b00e <_strtod_l+0x84e>
 808aea2:	2500      	movs	r5, #0
 808aea4:	fa07 f303 	lsl.w	r3, r7, r3
 808aea8:	930f      	str	r3, [sp, #60]	; 0x3c
 808aeaa:	18b7      	adds	r7, r6, r2
 808aeac:	9b05      	ldr	r3, [sp, #20]
 808aeae:	42be      	cmp	r6, r7
 808aeb0:	4414      	add	r4, r2
 808aeb2:	441c      	add	r4, r3
 808aeb4:	4633      	mov	r3, r6
 808aeb6:	bfa8      	it	ge
 808aeb8:	463b      	movge	r3, r7
 808aeba:	42a3      	cmp	r3, r4
 808aebc:	bfa8      	it	ge
 808aebe:	4623      	movge	r3, r4
 808aec0:	2b00      	cmp	r3, #0
 808aec2:	bfc2      	ittt	gt
 808aec4:	1aff      	subgt	r7, r7, r3
 808aec6:	1ae4      	subgt	r4, r4, r3
 808aec8:	1af6      	subgt	r6, r6, r3
 808aeca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808aecc:	2b00      	cmp	r3, #0
 808aece:	dd17      	ble.n	808af00 <_strtod_l+0x740>
 808aed0:	461a      	mov	r2, r3
 808aed2:	4650      	mov	r0, sl
 808aed4:	9904      	ldr	r1, [sp, #16]
 808aed6:	f000 ff93 	bl	808be00 <__pow5mult>
 808aeda:	9004      	str	r0, [sp, #16]
 808aedc:	2800      	cmp	r0, #0
 808aede:	f43f aeb2 	beq.w	808ac46 <_strtod_l+0x486>
 808aee2:	4601      	mov	r1, r0
 808aee4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808aee6:	4650      	mov	r0, sl
 808aee8:	f000 feee 	bl	808bcc8 <__multiply>
 808aeec:	9009      	str	r0, [sp, #36]	; 0x24
 808aeee:	2800      	cmp	r0, #0
 808aef0:	f43f aea9 	beq.w	808ac46 <_strtod_l+0x486>
 808aef4:	4650      	mov	r0, sl
 808aef6:	991c      	ldr	r1, [sp, #112]	; 0x70
 808aef8:	f000 fdfc 	bl	808baf4 <_Bfree>
 808aefc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808aefe:	931c      	str	r3, [sp, #112]	; 0x70
 808af00:	2f00      	cmp	r7, #0
 808af02:	f300 8093 	bgt.w	808b02c <_strtod_l+0x86c>
 808af06:	9b07      	ldr	r3, [sp, #28]
 808af08:	2b00      	cmp	r3, #0
 808af0a:	dd08      	ble.n	808af1e <_strtod_l+0x75e>
 808af0c:	4650      	mov	r0, sl
 808af0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808af10:	9906      	ldr	r1, [sp, #24]
 808af12:	f000 ff75 	bl	808be00 <__pow5mult>
 808af16:	9006      	str	r0, [sp, #24]
 808af18:	2800      	cmp	r0, #0
 808af1a:	f43f ae94 	beq.w	808ac46 <_strtod_l+0x486>
 808af1e:	2c00      	cmp	r4, #0
 808af20:	dd08      	ble.n	808af34 <_strtod_l+0x774>
 808af22:	4622      	mov	r2, r4
 808af24:	4650      	mov	r0, sl
 808af26:	9906      	ldr	r1, [sp, #24]
 808af28:	f000 ffb8 	bl	808be9c <__lshift>
 808af2c:	9006      	str	r0, [sp, #24]
 808af2e:	2800      	cmp	r0, #0
 808af30:	f43f ae89 	beq.w	808ac46 <_strtod_l+0x486>
 808af34:	2e00      	cmp	r6, #0
 808af36:	dd08      	ble.n	808af4a <_strtod_l+0x78a>
 808af38:	4632      	mov	r2, r6
 808af3a:	4650      	mov	r0, sl
 808af3c:	9904      	ldr	r1, [sp, #16]
 808af3e:	f000 ffad 	bl	808be9c <__lshift>
 808af42:	9004      	str	r0, [sp, #16]
 808af44:	2800      	cmp	r0, #0
 808af46:	f43f ae7e 	beq.w	808ac46 <_strtod_l+0x486>
 808af4a:	4650      	mov	r0, sl
 808af4c:	9a06      	ldr	r2, [sp, #24]
 808af4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808af50:	f001 f81e 	bl	808bf90 <__mdiff>
 808af54:	4683      	mov	fp, r0
 808af56:	2800      	cmp	r0, #0
 808af58:	f43f ae75 	beq.w	808ac46 <_strtod_l+0x486>
 808af5c:	2400      	movs	r4, #0
 808af5e:	68c3      	ldr	r3, [r0, #12]
 808af60:	9904      	ldr	r1, [sp, #16]
 808af62:	60c4      	str	r4, [r0, #12]
 808af64:	930d      	str	r3, [sp, #52]	; 0x34
 808af66:	f000 fff8 	bl	808bf5a <__mcmp>
 808af6a:	42a0      	cmp	r0, r4
 808af6c:	da70      	bge.n	808b050 <_strtod_l+0x890>
 808af6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808af70:	ea53 0308 	orrs.w	r3, r3, r8
 808af74:	f040 8096 	bne.w	808b0a4 <_strtod_l+0x8e4>
 808af78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808af7c:	2b00      	cmp	r3, #0
 808af7e:	f040 8091 	bne.w	808b0a4 <_strtod_l+0x8e4>
 808af82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808af86:	0d1b      	lsrs	r3, r3, #20
 808af88:	051b      	lsls	r3, r3, #20
 808af8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808af8e:	f240 8089 	bls.w	808b0a4 <_strtod_l+0x8e4>
 808af92:	f8db 3014 	ldr.w	r3, [fp, #20]
 808af96:	b923      	cbnz	r3, 808afa2 <_strtod_l+0x7e2>
 808af98:	f8db 3010 	ldr.w	r3, [fp, #16]
 808af9c:	2b01      	cmp	r3, #1
 808af9e:	f340 8081 	ble.w	808b0a4 <_strtod_l+0x8e4>
 808afa2:	4659      	mov	r1, fp
 808afa4:	2201      	movs	r2, #1
 808afa6:	4650      	mov	r0, sl
 808afa8:	f000 ff78 	bl	808be9c <__lshift>
 808afac:	9904      	ldr	r1, [sp, #16]
 808afae:	4683      	mov	fp, r0
 808afb0:	f000 ffd3 	bl	808bf5a <__mcmp>
 808afb4:	2800      	cmp	r0, #0
 808afb6:	dd75      	ble.n	808b0a4 <_strtod_l+0x8e4>
 808afb8:	9905      	ldr	r1, [sp, #20]
 808afba:	464b      	mov	r3, r9
 808afbc:	4a22      	ldr	r2, [pc, #136]	; (808b048 <_strtod_l+0x888>)
 808afbe:	2900      	cmp	r1, #0
 808afc0:	f000 8091 	beq.w	808b0e6 <_strtod_l+0x926>
 808afc4:	ea02 0109 	and.w	r1, r2, r9
 808afc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808afcc:	f300 808b 	bgt.w	808b0e6 <_strtod_l+0x926>
 808afd0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808afd4:	f77f aea9 	ble.w	808ad2a <_strtod_l+0x56a>
 808afd8:	2300      	movs	r3, #0
 808afda:	4a1c      	ldr	r2, [pc, #112]	; (808b04c <_strtod_l+0x88c>)
 808afdc:	4640      	mov	r0, r8
 808afde:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808afe2:	4649      	mov	r1, r9
 808afe4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808afe8:	f7fe fc32 	bl	8089850 <__aeabi_dmul>
 808afec:	460b      	mov	r3, r1
 808afee:	4303      	orrs	r3, r0
 808aff0:	bf08      	it	eq
 808aff2:	2322      	moveq	r3, #34	; 0x22
 808aff4:	4680      	mov	r8, r0
 808aff6:	4689      	mov	r9, r1
 808aff8:	bf08      	it	eq
 808affa:	f8ca 3000 	streq.w	r3, [sl]
 808affe:	e62d      	b.n	808ac5c <_strtod_l+0x49c>
 808b000:	f04f 32ff 	mov.w	r2, #4294967295
 808b004:	fa02 f303 	lsl.w	r3, r2, r3
 808b008:	ea03 0808 	and.w	r8, r3, r8
 808b00c:	e6db      	b.n	808adc6 <_strtod_l+0x606>
 808b00e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808b012:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808b016:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808b01a:	35e2      	adds	r5, #226	; 0xe2
 808b01c:	fa07 f505 	lsl.w	r5, r7, r5
 808b020:	970f      	str	r7, [sp, #60]	; 0x3c
 808b022:	e742      	b.n	808aeaa <_strtod_l+0x6ea>
 808b024:	2301      	movs	r3, #1
 808b026:	2500      	movs	r5, #0
 808b028:	930f      	str	r3, [sp, #60]	; 0x3c
 808b02a:	e73e      	b.n	808aeaa <_strtod_l+0x6ea>
 808b02c:	463a      	mov	r2, r7
 808b02e:	4650      	mov	r0, sl
 808b030:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b032:	f000 ff33 	bl	808be9c <__lshift>
 808b036:	901c      	str	r0, [sp, #112]	; 0x70
 808b038:	2800      	cmp	r0, #0
 808b03a:	f47f af64 	bne.w	808af06 <_strtod_l+0x746>
 808b03e:	e602      	b.n	808ac46 <_strtod_l+0x486>
 808b040:	0808d4d8 	.word	0x0808d4d8
 808b044:	fffffc02 	.word	0xfffffc02
 808b048:	7ff00000 	.word	0x7ff00000
 808b04c:	39500000 	.word	0x39500000
 808b050:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808b054:	d166      	bne.n	808b124 <_strtod_l+0x964>
 808b056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808b058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b05c:	b35a      	cbz	r2, 808b0b6 <_strtod_l+0x8f6>
 808b05e:	4a9c      	ldr	r2, [pc, #624]	; (808b2d0 <_strtod_l+0xb10>)
 808b060:	4293      	cmp	r3, r2
 808b062:	d12c      	bne.n	808b0be <_strtod_l+0x8fe>
 808b064:	9b05      	ldr	r3, [sp, #20]
 808b066:	4640      	mov	r0, r8
 808b068:	b303      	cbz	r3, 808b0ac <_strtod_l+0x8ec>
 808b06a:	464b      	mov	r3, r9
 808b06c:	4a99      	ldr	r2, [pc, #612]	; (808b2d4 <_strtod_l+0xb14>)
 808b06e:	f04f 31ff 	mov.w	r1, #4294967295
 808b072:	401a      	ands	r2, r3
 808b074:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 808b078:	d81b      	bhi.n	808b0b2 <_strtod_l+0x8f2>
 808b07a:	0d12      	lsrs	r2, r2, #20
 808b07c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808b080:	fa01 f303 	lsl.w	r3, r1, r3
 808b084:	4298      	cmp	r0, r3
 808b086:	d11a      	bne.n	808b0be <_strtod_l+0x8fe>
 808b088:	4b93      	ldr	r3, [pc, #588]	; (808b2d8 <_strtod_l+0xb18>)
 808b08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808b08c:	429a      	cmp	r2, r3
 808b08e:	d102      	bne.n	808b096 <_strtod_l+0x8d6>
 808b090:	3001      	adds	r0, #1
 808b092:	f43f add8 	beq.w	808ac46 <_strtod_l+0x486>
 808b096:	f04f 0800 	mov.w	r8, #0
 808b09a:	4b8e      	ldr	r3, [pc, #568]	; (808b2d4 <_strtod_l+0xb14>)
 808b09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808b09e:	401a      	ands	r2, r3
 808b0a0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808b0a4:	9b05      	ldr	r3, [sp, #20]
 808b0a6:	2b00      	cmp	r3, #0
 808b0a8:	d196      	bne.n	808afd8 <_strtod_l+0x818>
 808b0aa:	e5d7      	b.n	808ac5c <_strtod_l+0x49c>
 808b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 808b0b0:	e7e8      	b.n	808b084 <_strtod_l+0x8c4>
 808b0b2:	460b      	mov	r3, r1
 808b0b4:	e7e6      	b.n	808b084 <_strtod_l+0x8c4>
 808b0b6:	ea53 0308 	orrs.w	r3, r3, r8
 808b0ba:	f43f af7d 	beq.w	808afb8 <_strtod_l+0x7f8>
 808b0be:	b1e5      	cbz	r5, 808b0fa <_strtod_l+0x93a>
 808b0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b0c2:	421d      	tst	r5, r3
 808b0c4:	d0ee      	beq.n	808b0a4 <_strtod_l+0x8e4>
 808b0c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b0c8:	4640      	mov	r0, r8
 808b0ca:	4649      	mov	r1, r9
 808b0cc:	9a05      	ldr	r2, [sp, #20]
 808b0ce:	b1c3      	cbz	r3, 808b102 <_strtod_l+0x942>
 808b0d0:	f7ff fb55 	bl	808a77e <sulp>
 808b0d4:	4602      	mov	r2, r0
 808b0d6:	460b      	mov	r3, r1
 808b0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808b0dc:	f7fe fa02 	bl	80894e4 <__adddf3>
 808b0e0:	4680      	mov	r8, r0
 808b0e2:	4689      	mov	r9, r1
 808b0e4:	e7de      	b.n	808b0a4 <_strtod_l+0x8e4>
 808b0e6:	4013      	ands	r3, r2
 808b0e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808b0ec:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808b0f0:	f04f 38ff 	mov.w	r8, #4294967295
 808b0f4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808b0f8:	e7d4      	b.n	808b0a4 <_strtod_l+0x8e4>
 808b0fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808b0fc:	ea13 0f08 	tst.w	r3, r8
 808b100:	e7e0      	b.n	808b0c4 <_strtod_l+0x904>
 808b102:	f7ff fb3c 	bl	808a77e <sulp>
 808b106:	4602      	mov	r2, r0
 808b108:	460b      	mov	r3, r1
 808b10a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808b10e:	f7fe f9e7 	bl	80894e0 <__aeabi_dsub>
 808b112:	2200      	movs	r2, #0
 808b114:	2300      	movs	r3, #0
 808b116:	4680      	mov	r8, r0
 808b118:	4689      	mov	r9, r1
 808b11a:	f7fe fe01 	bl	8089d20 <__aeabi_dcmpeq>
 808b11e:	2800      	cmp	r0, #0
 808b120:	d0c0      	beq.n	808b0a4 <_strtod_l+0x8e4>
 808b122:	e602      	b.n	808ad2a <_strtod_l+0x56a>
 808b124:	4658      	mov	r0, fp
 808b126:	9904      	ldr	r1, [sp, #16]
 808b128:	f001 f877 	bl	808c21a <__ratio>
 808b12c:	2200      	movs	r2, #0
 808b12e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808b132:	4606      	mov	r6, r0
 808b134:	460f      	mov	r7, r1
 808b136:	f7fe fe07 	bl	8089d48 <__aeabi_dcmple>
 808b13a:	2800      	cmp	r0, #0
 808b13c:	d075      	beq.n	808b22a <_strtod_l+0xa6a>
 808b13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b140:	2b00      	cmp	r3, #0
 808b142:	d047      	beq.n	808b1d4 <_strtod_l+0xa14>
 808b144:	2600      	movs	r6, #0
 808b146:	4f65      	ldr	r7, [pc, #404]	; (808b2dc <_strtod_l+0xb1c>)
 808b148:	4d64      	ldr	r5, [pc, #400]	; (808b2dc <_strtod_l+0xb1c>)
 808b14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b14c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 808b150:	0d1b      	lsrs	r3, r3, #20
 808b152:	051b      	lsls	r3, r3, #20
 808b154:	930f      	str	r3, [sp, #60]	; 0x3c
 808b156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808b158:	4b61      	ldr	r3, [pc, #388]	; (808b2e0 <_strtod_l+0xb20>)
 808b15a:	429a      	cmp	r2, r3
 808b15c:	f040 80c8 	bne.w	808b2f0 <_strtod_l+0xb30>
 808b160:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808b164:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 808b168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b16a:	4640      	mov	r0, r8
 808b16c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 808b170:	4649      	mov	r1, r9
 808b172:	f000 ff89 	bl	808c088 <__ulp>
 808b176:	4602      	mov	r2, r0
 808b178:	460b      	mov	r3, r1
 808b17a:	4630      	mov	r0, r6
 808b17c:	4639      	mov	r1, r7
 808b17e:	f7fe fb67 	bl	8089850 <__aeabi_dmul>
 808b182:	4642      	mov	r2, r8
 808b184:	464b      	mov	r3, r9
 808b186:	f7fe f9ad 	bl	80894e4 <__adddf3>
 808b18a:	460b      	mov	r3, r1
 808b18c:	4951      	ldr	r1, [pc, #324]	; (808b2d4 <_strtod_l+0xb14>)
 808b18e:	4a55      	ldr	r2, [pc, #340]	; (808b2e4 <_strtod_l+0xb24>)
 808b190:	4019      	ands	r1, r3
 808b192:	4291      	cmp	r1, r2
 808b194:	4680      	mov	r8, r0
 808b196:	d95e      	bls.n	808b256 <_strtod_l+0xa96>
 808b198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808b19a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 808b19e:	4293      	cmp	r3, r2
 808b1a0:	d103      	bne.n	808b1aa <_strtod_l+0x9ea>
 808b1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b1a4:	3301      	adds	r3, #1
 808b1a6:	f43f ad4e 	beq.w	808ac46 <_strtod_l+0x486>
 808b1aa:	f04f 38ff 	mov.w	r8, #4294967295
 808b1ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 808b2d8 <_strtod_l+0xb18>
 808b1b2:	4650      	mov	r0, sl
 808b1b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b1b6:	f000 fc9d 	bl	808baf4 <_Bfree>
 808b1ba:	4650      	mov	r0, sl
 808b1bc:	9906      	ldr	r1, [sp, #24]
 808b1be:	f000 fc99 	bl	808baf4 <_Bfree>
 808b1c2:	4650      	mov	r0, sl
 808b1c4:	9904      	ldr	r1, [sp, #16]
 808b1c6:	f000 fc95 	bl	808baf4 <_Bfree>
 808b1ca:	4659      	mov	r1, fp
 808b1cc:	4650      	mov	r0, sl
 808b1ce:	f000 fc91 	bl	808baf4 <_Bfree>
 808b1d2:	e61c      	b.n	808ae0e <_strtod_l+0x64e>
 808b1d4:	f1b8 0f00 	cmp.w	r8, #0
 808b1d8:	d119      	bne.n	808b20e <_strtod_l+0xa4e>
 808b1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808b1e0:	b9e3      	cbnz	r3, 808b21c <_strtod_l+0xa5c>
 808b1e2:	2200      	movs	r2, #0
 808b1e4:	4630      	mov	r0, r6
 808b1e6:	4639      	mov	r1, r7
 808b1e8:	4b3c      	ldr	r3, [pc, #240]	; (808b2dc <_strtod_l+0xb1c>)
 808b1ea:	f7fe fda3 	bl	8089d34 <__aeabi_dcmplt>
 808b1ee:	b9c8      	cbnz	r0, 808b224 <_strtod_l+0xa64>
 808b1f0:	2200      	movs	r2, #0
 808b1f2:	4630      	mov	r0, r6
 808b1f4:	4639      	mov	r1, r7
 808b1f6:	4b3c      	ldr	r3, [pc, #240]	; (808b2e8 <_strtod_l+0xb28>)
 808b1f8:	f7fe fb2a 	bl	8089850 <__aeabi_dmul>
 808b1fc:	4604      	mov	r4, r0
 808b1fe:	460d      	mov	r5, r1
 808b200:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808b204:	9418      	str	r4, [sp, #96]	; 0x60
 808b206:	9319      	str	r3, [sp, #100]	; 0x64
 808b208:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 808b20c:	e79d      	b.n	808b14a <_strtod_l+0x98a>
 808b20e:	f1b8 0f01 	cmp.w	r8, #1
 808b212:	d103      	bne.n	808b21c <_strtod_l+0xa5c>
 808b214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b216:	2b00      	cmp	r3, #0
 808b218:	f43f ad87 	beq.w	808ad2a <_strtod_l+0x56a>
 808b21c:	2600      	movs	r6, #0
 808b21e:	2400      	movs	r4, #0
 808b220:	4f32      	ldr	r7, [pc, #200]	; (808b2ec <_strtod_l+0xb2c>)
 808b222:	e791      	b.n	808b148 <_strtod_l+0x988>
 808b224:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808b226:	4d30      	ldr	r5, [pc, #192]	; (808b2e8 <_strtod_l+0xb28>)
 808b228:	e7ea      	b.n	808b200 <_strtod_l+0xa40>
 808b22a:	4b2f      	ldr	r3, [pc, #188]	; (808b2e8 <_strtod_l+0xb28>)
 808b22c:	2200      	movs	r2, #0
 808b22e:	4630      	mov	r0, r6
 808b230:	4639      	mov	r1, r7
 808b232:	f7fe fb0d 	bl	8089850 <__aeabi_dmul>
 808b236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b238:	4604      	mov	r4, r0
 808b23a:	460d      	mov	r5, r1
 808b23c:	b933      	cbnz	r3, 808b24c <_strtod_l+0xa8c>
 808b23e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b242:	9010      	str	r0, [sp, #64]	; 0x40
 808b244:	9311      	str	r3, [sp, #68]	; 0x44
 808b246:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808b24a:	e77e      	b.n	808b14a <_strtod_l+0x98a>
 808b24c:	4602      	mov	r2, r0
 808b24e:	460b      	mov	r3, r1
 808b250:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808b254:	e7f7      	b.n	808b246 <_strtod_l+0xa86>
 808b256:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 808b25a:	9b05      	ldr	r3, [sp, #20]
 808b25c:	2b00      	cmp	r3, #0
 808b25e:	d1a8      	bne.n	808b1b2 <_strtod_l+0x9f2>
 808b260:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808b266:	0d1b      	lsrs	r3, r3, #20
 808b268:	051b      	lsls	r3, r3, #20
 808b26a:	429a      	cmp	r2, r3
 808b26c:	d1a1      	bne.n	808b1b2 <_strtod_l+0x9f2>
 808b26e:	4620      	mov	r0, r4
 808b270:	4629      	mov	r1, r5
 808b272:	f001 f85f 	bl	808c334 <__aeabi_d2lz>
 808b276:	f7fe fabd 	bl	80897f4 <__aeabi_l2d>
 808b27a:	4602      	mov	r2, r0
 808b27c:	460b      	mov	r3, r1
 808b27e:	4620      	mov	r0, r4
 808b280:	4629      	mov	r1, r5
 808b282:	f7fe f92d 	bl	80894e0 <__aeabi_dsub>
 808b286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808b288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b28c:	ea43 0308 	orr.w	r3, r3, r8
 808b290:	4313      	orrs	r3, r2
 808b292:	4604      	mov	r4, r0
 808b294:	460d      	mov	r5, r1
 808b296:	d066      	beq.n	808b366 <_strtod_l+0xba6>
 808b298:	a309      	add	r3, pc, #36	; (adr r3, 808b2c0 <_strtod_l+0xb00>)
 808b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b29e:	f7fe fd49 	bl	8089d34 <__aeabi_dcmplt>
 808b2a2:	2800      	cmp	r0, #0
 808b2a4:	f47f acda 	bne.w	808ac5c <_strtod_l+0x49c>
 808b2a8:	a307      	add	r3, pc, #28	; (adr r3, 808b2c8 <_strtod_l+0xb08>)
 808b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b2ae:	4620      	mov	r0, r4
 808b2b0:	4629      	mov	r1, r5
 808b2b2:	f7fe fd5d 	bl	8089d70 <__aeabi_dcmpgt>
 808b2b6:	2800      	cmp	r0, #0
 808b2b8:	f43f af7b 	beq.w	808b1b2 <_strtod_l+0x9f2>
 808b2bc:	e4ce      	b.n	808ac5c <_strtod_l+0x49c>
 808b2be:	bf00      	nop
 808b2c0:	94a03595 	.word	0x94a03595
 808b2c4:	3fdfffff 	.word	0x3fdfffff
 808b2c8:	35afe535 	.word	0x35afe535
 808b2cc:	3fe00000 	.word	0x3fe00000
 808b2d0:	000fffff 	.word	0x000fffff
 808b2d4:	7ff00000 	.word	0x7ff00000
 808b2d8:	7fefffff 	.word	0x7fefffff
 808b2dc:	3ff00000 	.word	0x3ff00000
 808b2e0:	7fe00000 	.word	0x7fe00000
 808b2e4:	7c9fffff 	.word	0x7c9fffff
 808b2e8:	3fe00000 	.word	0x3fe00000
 808b2ec:	bff00000 	.word	0xbff00000
 808b2f0:	9b05      	ldr	r3, [sp, #20]
 808b2f2:	b313      	cbz	r3, 808b33a <_strtod_l+0xb7a>
 808b2f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808b2f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808b2fa:	d81e      	bhi.n	808b33a <_strtod_l+0xb7a>
 808b2fc:	a326      	add	r3, pc, #152	; (adr r3, 808b398 <_strtod_l+0xbd8>)
 808b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b302:	4620      	mov	r0, r4
 808b304:	4629      	mov	r1, r5
 808b306:	f7fe fd1f 	bl	8089d48 <__aeabi_dcmple>
 808b30a:	b190      	cbz	r0, 808b332 <_strtod_l+0xb72>
 808b30c:	4629      	mov	r1, r5
 808b30e:	4620      	mov	r0, r4
 808b310:	f7fe fd38 	bl	8089d84 <__aeabi_d2uiz>
 808b314:	2801      	cmp	r0, #1
 808b316:	bf38      	it	cc
 808b318:	2001      	movcc	r0, #1
 808b31a:	f7fe fa1f 	bl	808975c <__aeabi_ui2d>
 808b31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b320:	4604      	mov	r4, r0
 808b322:	460d      	mov	r5, r1
 808b324:	b9d3      	cbnz	r3, 808b35c <_strtod_l+0xb9c>
 808b326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b32a:	9012      	str	r0, [sp, #72]	; 0x48
 808b32c:	9313      	str	r3, [sp, #76]	; 0x4c
 808b32e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 808b332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808b334:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808b338:	1a9f      	subs	r7, r3, r2
 808b33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808b33e:	f000 fea3 	bl	808c088 <__ulp>
 808b342:	4602      	mov	r2, r0
 808b344:	460b      	mov	r3, r1
 808b346:	4630      	mov	r0, r6
 808b348:	4639      	mov	r1, r7
 808b34a:	f7fe fa81 	bl	8089850 <__aeabi_dmul>
 808b34e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808b352:	f7fe f8c7 	bl	80894e4 <__adddf3>
 808b356:	4680      	mov	r8, r0
 808b358:	4689      	mov	r9, r1
 808b35a:	e77e      	b.n	808b25a <_strtod_l+0xa9a>
 808b35c:	4602      	mov	r2, r0
 808b35e:	460b      	mov	r3, r1
 808b360:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 808b364:	e7e3      	b.n	808b32e <_strtod_l+0xb6e>
 808b366:	a30e      	add	r3, pc, #56	; (adr r3, 808b3a0 <_strtod_l+0xbe0>)
 808b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b36c:	f7fe fce2 	bl	8089d34 <__aeabi_dcmplt>
 808b370:	e7a1      	b.n	808b2b6 <_strtod_l+0xaf6>
 808b372:	2300      	movs	r3, #0
 808b374:	930c      	str	r3, [sp, #48]	; 0x30
 808b376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b378:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808b37a:	6013      	str	r3, [r2, #0]
 808b37c:	f7ff ba65 	b.w	808a84a <_strtod_l+0x8a>
 808b380:	2b65      	cmp	r3, #101	; 0x65
 808b382:	f43f ab5c 	beq.w	808aa3e <_strtod_l+0x27e>
 808b386:	2b45      	cmp	r3, #69	; 0x45
 808b388:	f43f ab59 	beq.w	808aa3e <_strtod_l+0x27e>
 808b38c:	2201      	movs	r2, #1
 808b38e:	f7ff bb8d 	b.w	808aaac <_strtod_l+0x2ec>
 808b392:	bf00      	nop
 808b394:	f3af 8000 	nop.w
 808b398:	ffc00000 	.word	0xffc00000
 808b39c:	41dfffff 	.word	0x41dfffff
 808b3a0:	94a03595 	.word	0x94a03595
 808b3a4:	3fcfffff 	.word	0x3fcfffff

0808b3a8 <strtod>:
 808b3a8:	460a      	mov	r2, r1
 808b3aa:	4601      	mov	r1, r0
 808b3ac:	4802      	ldr	r0, [pc, #8]	; (808b3b8 <strtod+0x10>)
 808b3ae:	4b03      	ldr	r3, [pc, #12]	; (808b3bc <strtod+0x14>)
 808b3b0:	6800      	ldr	r0, [r0, #0]
 808b3b2:	f7ff ba05 	b.w	808a7c0 <_strtod_l>
 808b3b6:	bf00      	nop
 808b3b8:	20000058 	.word	0x20000058
 808b3bc:	200000c0 	.word	0x200000c0

0808b3c0 <rshift>:
 808b3c0:	6903      	ldr	r3, [r0, #16]
 808b3c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b3c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808b3ca:	f100 0414 	add.w	r4, r0, #20
 808b3ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 808b3d2:	dd46      	ble.n	808b462 <rshift+0xa2>
 808b3d4:	f011 011f 	ands.w	r1, r1, #31
 808b3d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 808b3dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808b3e0:	d10c      	bne.n	808b3fc <rshift+0x3c>
 808b3e2:	4629      	mov	r1, r5
 808b3e4:	f100 0710 	add.w	r7, r0, #16
 808b3e8:	42b1      	cmp	r1, r6
 808b3ea:	d335      	bcc.n	808b458 <rshift+0x98>
 808b3ec:	1a9b      	subs	r3, r3, r2
 808b3ee:	009b      	lsls	r3, r3, #2
 808b3f0:	1eea      	subs	r2, r5, #3
 808b3f2:	4296      	cmp	r6, r2
 808b3f4:	bf38      	it	cc
 808b3f6:	2300      	movcc	r3, #0
 808b3f8:	4423      	add	r3, r4
 808b3fa:	e015      	b.n	808b428 <rshift+0x68>
 808b3fc:	46a1      	mov	r9, r4
 808b3fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808b402:	f1c1 0820 	rsb	r8, r1, #32
 808b406:	40cf      	lsrs	r7, r1
 808b408:	f105 0e04 	add.w	lr, r5, #4
 808b40c:	4576      	cmp	r6, lr
 808b40e:	46f4      	mov	ip, lr
 808b410:	d816      	bhi.n	808b440 <rshift+0x80>
 808b412:	1a9b      	subs	r3, r3, r2
 808b414:	009a      	lsls	r2, r3, #2
 808b416:	3a04      	subs	r2, #4
 808b418:	3501      	adds	r5, #1
 808b41a:	42ae      	cmp	r6, r5
 808b41c:	bf38      	it	cc
 808b41e:	2200      	movcc	r2, #0
 808b420:	18a3      	adds	r3, r4, r2
 808b422:	50a7      	str	r7, [r4, r2]
 808b424:	b107      	cbz	r7, 808b428 <rshift+0x68>
 808b426:	3304      	adds	r3, #4
 808b428:	42a3      	cmp	r3, r4
 808b42a:	eba3 0204 	sub.w	r2, r3, r4
 808b42e:	bf08      	it	eq
 808b430:	2300      	moveq	r3, #0
 808b432:	ea4f 02a2 	mov.w	r2, r2, asr #2
 808b436:	6102      	str	r2, [r0, #16]
 808b438:	bf08      	it	eq
 808b43a:	6143      	streq	r3, [r0, #20]
 808b43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808b440:	f8dc c000 	ldr.w	ip, [ip]
 808b444:	fa0c fc08 	lsl.w	ip, ip, r8
 808b448:	ea4c 0707 	orr.w	r7, ip, r7
 808b44c:	f849 7b04 	str.w	r7, [r9], #4
 808b450:	f85e 7b04 	ldr.w	r7, [lr], #4
 808b454:	40cf      	lsrs	r7, r1
 808b456:	e7d9      	b.n	808b40c <rshift+0x4c>
 808b458:	f851 cb04 	ldr.w	ip, [r1], #4
 808b45c:	f847 cf04 	str.w	ip, [r7, #4]!
 808b460:	e7c2      	b.n	808b3e8 <rshift+0x28>
 808b462:	4623      	mov	r3, r4
 808b464:	e7e0      	b.n	808b428 <rshift+0x68>

0808b466 <__hexdig_fun>:
 808b466:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808b46a:	2b09      	cmp	r3, #9
 808b46c:	d802      	bhi.n	808b474 <__hexdig_fun+0xe>
 808b46e:	3820      	subs	r0, #32
 808b470:	b2c0      	uxtb	r0, r0
 808b472:	4770      	bx	lr
 808b474:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808b478:	2b05      	cmp	r3, #5
 808b47a:	d801      	bhi.n	808b480 <__hexdig_fun+0x1a>
 808b47c:	3847      	subs	r0, #71	; 0x47
 808b47e:	e7f7      	b.n	808b470 <__hexdig_fun+0xa>
 808b480:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808b484:	2b05      	cmp	r3, #5
 808b486:	d801      	bhi.n	808b48c <__hexdig_fun+0x26>
 808b488:	3827      	subs	r0, #39	; 0x27
 808b48a:	e7f1      	b.n	808b470 <__hexdig_fun+0xa>
 808b48c:	2000      	movs	r0, #0
 808b48e:	4770      	bx	lr

0808b490 <__gethex>:
 808b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b494:	b08b      	sub	sp, #44	; 0x2c
 808b496:	9306      	str	r3, [sp, #24]
 808b498:	4bba      	ldr	r3, [pc, #744]	; (808b784 <__gethex+0x2f4>)
 808b49a:	9002      	str	r0, [sp, #8]
 808b49c:	681b      	ldr	r3, [r3, #0]
 808b49e:	468b      	mov	fp, r1
 808b4a0:	4618      	mov	r0, r3
 808b4a2:	4690      	mov	r8, r2
 808b4a4:	9303      	str	r3, [sp, #12]
 808b4a6:	f7ff f926 	bl	808a6f6 <strlen>
 808b4aa:	4682      	mov	sl, r0
 808b4ac:	9b03      	ldr	r3, [sp, #12]
 808b4ae:	f8db 2000 	ldr.w	r2, [fp]
 808b4b2:	4403      	add	r3, r0
 808b4b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808b4b8:	9307      	str	r3, [sp, #28]
 808b4ba:	1c93      	adds	r3, r2, #2
 808b4bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808b4c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 808b4c4:	32fe      	adds	r2, #254	; 0xfe
 808b4c6:	18d1      	adds	r1, r2, r3
 808b4c8:	461f      	mov	r7, r3
 808b4ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 808b4ce:	9101      	str	r1, [sp, #4]
 808b4d0:	2830      	cmp	r0, #48	; 0x30
 808b4d2:	d0f8      	beq.n	808b4c6 <__gethex+0x36>
 808b4d4:	f7ff ffc7 	bl	808b466 <__hexdig_fun>
 808b4d8:	4604      	mov	r4, r0
 808b4da:	2800      	cmp	r0, #0
 808b4dc:	d13a      	bne.n	808b554 <__gethex+0xc4>
 808b4de:	4652      	mov	r2, sl
 808b4e0:	4638      	mov	r0, r7
 808b4e2:	9903      	ldr	r1, [sp, #12]
 808b4e4:	f7ff f90f 	bl	808a706 <strncmp>
 808b4e8:	4605      	mov	r5, r0
 808b4ea:	2800      	cmp	r0, #0
 808b4ec:	d166      	bne.n	808b5bc <__gethex+0x12c>
 808b4ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 808b4f2:	eb07 060a 	add.w	r6, r7, sl
 808b4f6:	f7ff ffb6 	bl	808b466 <__hexdig_fun>
 808b4fa:	2800      	cmp	r0, #0
 808b4fc:	d060      	beq.n	808b5c0 <__gethex+0x130>
 808b4fe:	4633      	mov	r3, r6
 808b500:	7818      	ldrb	r0, [r3, #0]
 808b502:	461f      	mov	r7, r3
 808b504:	2830      	cmp	r0, #48	; 0x30
 808b506:	f103 0301 	add.w	r3, r3, #1
 808b50a:	d0f9      	beq.n	808b500 <__gethex+0x70>
 808b50c:	f7ff ffab 	bl	808b466 <__hexdig_fun>
 808b510:	2301      	movs	r3, #1
 808b512:	fab0 f480 	clz	r4, r0
 808b516:	4635      	mov	r5, r6
 808b518:	0964      	lsrs	r4, r4, #5
 808b51a:	9301      	str	r3, [sp, #4]
 808b51c:	463a      	mov	r2, r7
 808b51e:	4616      	mov	r6, r2
 808b520:	7830      	ldrb	r0, [r6, #0]
 808b522:	3201      	adds	r2, #1
 808b524:	f7ff ff9f 	bl	808b466 <__hexdig_fun>
 808b528:	2800      	cmp	r0, #0
 808b52a:	d1f8      	bne.n	808b51e <__gethex+0x8e>
 808b52c:	4652      	mov	r2, sl
 808b52e:	4630      	mov	r0, r6
 808b530:	9903      	ldr	r1, [sp, #12]
 808b532:	f7ff f8e8 	bl	808a706 <strncmp>
 808b536:	b980      	cbnz	r0, 808b55a <__gethex+0xca>
 808b538:	b94d      	cbnz	r5, 808b54e <__gethex+0xbe>
 808b53a:	eb06 050a 	add.w	r5, r6, sl
 808b53e:	462a      	mov	r2, r5
 808b540:	4616      	mov	r6, r2
 808b542:	7830      	ldrb	r0, [r6, #0]
 808b544:	3201      	adds	r2, #1
 808b546:	f7ff ff8e 	bl	808b466 <__hexdig_fun>
 808b54a:	2800      	cmp	r0, #0
 808b54c:	d1f8      	bne.n	808b540 <__gethex+0xb0>
 808b54e:	1bad      	subs	r5, r5, r6
 808b550:	00ad      	lsls	r5, r5, #2
 808b552:	e004      	b.n	808b55e <__gethex+0xce>
 808b554:	2400      	movs	r4, #0
 808b556:	4625      	mov	r5, r4
 808b558:	e7e0      	b.n	808b51c <__gethex+0x8c>
 808b55a:	2d00      	cmp	r5, #0
 808b55c:	d1f7      	bne.n	808b54e <__gethex+0xbe>
 808b55e:	7833      	ldrb	r3, [r6, #0]
 808b560:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808b564:	2b50      	cmp	r3, #80	; 0x50
 808b566:	d139      	bne.n	808b5dc <__gethex+0x14c>
 808b568:	7873      	ldrb	r3, [r6, #1]
 808b56a:	2b2b      	cmp	r3, #43	; 0x2b
 808b56c:	d02a      	beq.n	808b5c4 <__gethex+0x134>
 808b56e:	2b2d      	cmp	r3, #45	; 0x2d
 808b570:	d02c      	beq.n	808b5cc <__gethex+0x13c>
 808b572:	f04f 0900 	mov.w	r9, #0
 808b576:	1c71      	adds	r1, r6, #1
 808b578:	7808      	ldrb	r0, [r1, #0]
 808b57a:	f7ff ff74 	bl	808b466 <__hexdig_fun>
 808b57e:	1e43      	subs	r3, r0, #1
 808b580:	b2db      	uxtb	r3, r3
 808b582:	2b18      	cmp	r3, #24
 808b584:	d82a      	bhi.n	808b5dc <__gethex+0x14c>
 808b586:	f1a0 0210 	sub.w	r2, r0, #16
 808b58a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808b58e:	f7ff ff6a 	bl	808b466 <__hexdig_fun>
 808b592:	1e43      	subs	r3, r0, #1
 808b594:	b2db      	uxtb	r3, r3
 808b596:	2b18      	cmp	r3, #24
 808b598:	d91b      	bls.n	808b5d2 <__gethex+0x142>
 808b59a:	f1b9 0f00 	cmp.w	r9, #0
 808b59e:	d000      	beq.n	808b5a2 <__gethex+0x112>
 808b5a0:	4252      	negs	r2, r2
 808b5a2:	4415      	add	r5, r2
 808b5a4:	f8cb 1000 	str.w	r1, [fp]
 808b5a8:	b1d4      	cbz	r4, 808b5e0 <__gethex+0x150>
 808b5aa:	9b01      	ldr	r3, [sp, #4]
 808b5ac:	2b00      	cmp	r3, #0
 808b5ae:	bf14      	ite	ne
 808b5b0:	2700      	movne	r7, #0
 808b5b2:	2706      	moveq	r7, #6
 808b5b4:	4638      	mov	r0, r7
 808b5b6:	b00b      	add	sp, #44	; 0x2c
 808b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b5bc:	463e      	mov	r6, r7
 808b5be:	4625      	mov	r5, r4
 808b5c0:	2401      	movs	r4, #1
 808b5c2:	e7cc      	b.n	808b55e <__gethex+0xce>
 808b5c4:	f04f 0900 	mov.w	r9, #0
 808b5c8:	1cb1      	adds	r1, r6, #2
 808b5ca:	e7d5      	b.n	808b578 <__gethex+0xe8>
 808b5cc:	f04f 0901 	mov.w	r9, #1
 808b5d0:	e7fa      	b.n	808b5c8 <__gethex+0x138>
 808b5d2:	230a      	movs	r3, #10
 808b5d4:	fb03 0202 	mla	r2, r3, r2, r0
 808b5d8:	3a10      	subs	r2, #16
 808b5da:	e7d6      	b.n	808b58a <__gethex+0xfa>
 808b5dc:	4631      	mov	r1, r6
 808b5de:	e7e1      	b.n	808b5a4 <__gethex+0x114>
 808b5e0:	4621      	mov	r1, r4
 808b5e2:	1bf3      	subs	r3, r6, r7
 808b5e4:	3b01      	subs	r3, #1
 808b5e6:	2b07      	cmp	r3, #7
 808b5e8:	dc50      	bgt.n	808b68c <__gethex+0x1fc>
 808b5ea:	9802      	ldr	r0, [sp, #8]
 808b5ec:	f000 fa4e 	bl	808ba8c <_Balloc>
 808b5f0:	f04f 0b00 	mov.w	fp, #0
 808b5f4:	4604      	mov	r4, r0
 808b5f6:	f100 0914 	add.w	r9, r0, #20
 808b5fa:	f1ca 0301 	rsb	r3, sl, #1
 808b5fe:	f8cd 9010 	str.w	r9, [sp, #16]
 808b602:	f8cd b004 	str.w	fp, [sp, #4]
 808b606:	9308      	str	r3, [sp, #32]
 808b608:	42b7      	cmp	r7, r6
 808b60a:	d342      	bcc.n	808b692 <__gethex+0x202>
 808b60c:	9f04      	ldr	r7, [sp, #16]
 808b60e:	9b01      	ldr	r3, [sp, #4]
 808b610:	f847 3b04 	str.w	r3, [r7], #4
 808b614:	eba7 0709 	sub.w	r7, r7, r9
 808b618:	10bf      	asrs	r7, r7, #2
 808b61a:	6127      	str	r7, [r4, #16]
 808b61c:	4618      	mov	r0, r3
 808b61e:	f000 fafc 	bl	808bc1a <__hi0bits>
 808b622:	017f      	lsls	r7, r7, #5
 808b624:	f8d8 6000 	ldr.w	r6, [r8]
 808b628:	1a3f      	subs	r7, r7, r0
 808b62a:	42b7      	cmp	r7, r6
 808b62c:	dd65      	ble.n	808b6fa <__gethex+0x26a>
 808b62e:	1bbf      	subs	r7, r7, r6
 808b630:	4639      	mov	r1, r7
 808b632:	4620      	mov	r0, r4
 808b634:	f000 fe42 	bl	808c2bc <__any_on>
 808b638:	4682      	mov	sl, r0
 808b63a:	b1a8      	cbz	r0, 808b668 <__gethex+0x1d8>
 808b63c:	f04f 0a01 	mov.w	sl, #1
 808b640:	1e7b      	subs	r3, r7, #1
 808b642:	1159      	asrs	r1, r3, #5
 808b644:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 808b648:	f003 021f 	and.w	r2, r3, #31
 808b64c:	fa0a f202 	lsl.w	r2, sl, r2
 808b650:	420a      	tst	r2, r1
 808b652:	d009      	beq.n	808b668 <__gethex+0x1d8>
 808b654:	4553      	cmp	r3, sl
 808b656:	dd05      	ble.n	808b664 <__gethex+0x1d4>
 808b658:	4620      	mov	r0, r4
 808b65a:	1eb9      	subs	r1, r7, #2
 808b65c:	f000 fe2e 	bl	808c2bc <__any_on>
 808b660:	2800      	cmp	r0, #0
 808b662:	d147      	bne.n	808b6f4 <__gethex+0x264>
 808b664:	f04f 0a02 	mov.w	sl, #2
 808b668:	4639      	mov	r1, r7
 808b66a:	4620      	mov	r0, r4
 808b66c:	f7ff fea8 	bl	808b3c0 <rshift>
 808b670:	443d      	add	r5, r7
 808b672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808b676:	42ab      	cmp	r3, r5
 808b678:	da4d      	bge.n	808b716 <__gethex+0x286>
 808b67a:	4621      	mov	r1, r4
 808b67c:	9802      	ldr	r0, [sp, #8]
 808b67e:	f000 fa39 	bl	808baf4 <_Bfree>
 808b682:	2300      	movs	r3, #0
 808b684:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808b686:	27a3      	movs	r7, #163	; 0xa3
 808b688:	6013      	str	r3, [r2, #0]
 808b68a:	e793      	b.n	808b5b4 <__gethex+0x124>
 808b68c:	3101      	adds	r1, #1
 808b68e:	105b      	asrs	r3, r3, #1
 808b690:	e7a9      	b.n	808b5e6 <__gethex+0x156>
 808b692:	1e73      	subs	r3, r6, #1
 808b694:	9a07      	ldr	r2, [sp, #28]
 808b696:	9305      	str	r3, [sp, #20]
 808b698:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808b69c:	4293      	cmp	r3, r2
 808b69e:	d019      	beq.n	808b6d4 <__gethex+0x244>
 808b6a0:	f1bb 0f20 	cmp.w	fp, #32
 808b6a4:	d107      	bne.n	808b6b6 <__gethex+0x226>
 808b6a6:	9b04      	ldr	r3, [sp, #16]
 808b6a8:	9a01      	ldr	r2, [sp, #4]
 808b6aa:	f843 2b04 	str.w	r2, [r3], #4
 808b6ae:	9304      	str	r3, [sp, #16]
 808b6b0:	2300      	movs	r3, #0
 808b6b2:	469b      	mov	fp, r3
 808b6b4:	9301      	str	r3, [sp, #4]
 808b6b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808b6ba:	f7ff fed4 	bl	808b466 <__hexdig_fun>
 808b6be:	9b01      	ldr	r3, [sp, #4]
 808b6c0:	f000 000f 	and.w	r0, r0, #15
 808b6c4:	fa00 f00b 	lsl.w	r0, r0, fp
 808b6c8:	4303      	orrs	r3, r0
 808b6ca:	9301      	str	r3, [sp, #4]
 808b6cc:	f10b 0b04 	add.w	fp, fp, #4
 808b6d0:	9b05      	ldr	r3, [sp, #20]
 808b6d2:	e00d      	b.n	808b6f0 <__gethex+0x260>
 808b6d4:	9b05      	ldr	r3, [sp, #20]
 808b6d6:	9a08      	ldr	r2, [sp, #32]
 808b6d8:	4413      	add	r3, r2
 808b6da:	42bb      	cmp	r3, r7
 808b6dc:	d3e0      	bcc.n	808b6a0 <__gethex+0x210>
 808b6de:	4618      	mov	r0, r3
 808b6e0:	4652      	mov	r2, sl
 808b6e2:	9903      	ldr	r1, [sp, #12]
 808b6e4:	9309      	str	r3, [sp, #36]	; 0x24
 808b6e6:	f7ff f80e 	bl	808a706 <strncmp>
 808b6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b6ec:	2800      	cmp	r0, #0
 808b6ee:	d1d7      	bne.n	808b6a0 <__gethex+0x210>
 808b6f0:	461e      	mov	r6, r3
 808b6f2:	e789      	b.n	808b608 <__gethex+0x178>
 808b6f4:	f04f 0a03 	mov.w	sl, #3
 808b6f8:	e7b6      	b.n	808b668 <__gethex+0x1d8>
 808b6fa:	da09      	bge.n	808b710 <__gethex+0x280>
 808b6fc:	1bf7      	subs	r7, r6, r7
 808b6fe:	4621      	mov	r1, r4
 808b700:	463a      	mov	r2, r7
 808b702:	9802      	ldr	r0, [sp, #8]
 808b704:	f000 fbca 	bl	808be9c <__lshift>
 808b708:	4604      	mov	r4, r0
 808b70a:	1bed      	subs	r5, r5, r7
 808b70c:	f100 0914 	add.w	r9, r0, #20
 808b710:	f04f 0a00 	mov.w	sl, #0
 808b714:	e7ad      	b.n	808b672 <__gethex+0x1e2>
 808b716:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808b71a:	42a8      	cmp	r0, r5
 808b71c:	dd6e      	ble.n	808b7fc <__gethex+0x36c>
 808b71e:	1b45      	subs	r5, r0, r5
 808b720:	42ae      	cmp	r6, r5
 808b722:	dc31      	bgt.n	808b788 <__gethex+0x2f8>
 808b724:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808b728:	2b02      	cmp	r3, #2
 808b72a:	d022      	beq.n	808b772 <__gethex+0x2e2>
 808b72c:	2b03      	cmp	r3, #3
 808b72e:	d024      	beq.n	808b77a <__gethex+0x2ea>
 808b730:	2b01      	cmp	r3, #1
 808b732:	d115      	bne.n	808b760 <__gethex+0x2d0>
 808b734:	42ae      	cmp	r6, r5
 808b736:	d113      	bne.n	808b760 <__gethex+0x2d0>
 808b738:	2e01      	cmp	r6, #1
 808b73a:	d10b      	bne.n	808b754 <__gethex+0x2c4>
 808b73c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808b740:	9a06      	ldr	r2, [sp, #24]
 808b742:	2762      	movs	r7, #98	; 0x62
 808b744:	6013      	str	r3, [r2, #0]
 808b746:	2301      	movs	r3, #1
 808b748:	6123      	str	r3, [r4, #16]
 808b74a:	f8c9 3000 	str.w	r3, [r9]
 808b74e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808b750:	601c      	str	r4, [r3, #0]
 808b752:	e72f      	b.n	808b5b4 <__gethex+0x124>
 808b754:	4620      	mov	r0, r4
 808b756:	1e71      	subs	r1, r6, #1
 808b758:	f000 fdb0 	bl	808c2bc <__any_on>
 808b75c:	2800      	cmp	r0, #0
 808b75e:	d1ed      	bne.n	808b73c <__gethex+0x2ac>
 808b760:	4621      	mov	r1, r4
 808b762:	9802      	ldr	r0, [sp, #8]
 808b764:	f000 f9c6 	bl	808baf4 <_Bfree>
 808b768:	2300      	movs	r3, #0
 808b76a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808b76c:	2750      	movs	r7, #80	; 0x50
 808b76e:	6013      	str	r3, [r2, #0]
 808b770:	e720      	b.n	808b5b4 <__gethex+0x124>
 808b772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b774:	2b00      	cmp	r3, #0
 808b776:	d1f3      	bne.n	808b760 <__gethex+0x2d0>
 808b778:	e7e0      	b.n	808b73c <__gethex+0x2ac>
 808b77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b77c:	2b00      	cmp	r3, #0
 808b77e:	d1dd      	bne.n	808b73c <__gethex+0x2ac>
 808b780:	e7ee      	b.n	808b760 <__gethex+0x2d0>
 808b782:	bf00      	nop
 808b784:	0808d604 	.word	0x0808d604
 808b788:	1e6f      	subs	r7, r5, #1
 808b78a:	f1ba 0f00 	cmp.w	sl, #0
 808b78e:	d132      	bne.n	808b7f6 <__gethex+0x366>
 808b790:	b127      	cbz	r7, 808b79c <__gethex+0x30c>
 808b792:	4639      	mov	r1, r7
 808b794:	4620      	mov	r0, r4
 808b796:	f000 fd91 	bl	808c2bc <__any_on>
 808b79a:	4682      	mov	sl, r0
 808b79c:	2101      	movs	r1, #1
 808b79e:	117b      	asrs	r3, r7, #5
 808b7a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 808b7a4:	f007 071f 	and.w	r7, r7, #31
 808b7a8:	fa01 f707 	lsl.w	r7, r1, r7
 808b7ac:	421f      	tst	r7, r3
 808b7ae:	f04f 0702 	mov.w	r7, #2
 808b7b2:	4629      	mov	r1, r5
 808b7b4:	4620      	mov	r0, r4
 808b7b6:	bf18      	it	ne
 808b7b8:	f04a 0a02 	orrne.w	sl, sl, #2
 808b7bc:	1b76      	subs	r6, r6, r5
 808b7be:	f7ff fdff 	bl	808b3c0 <rshift>
 808b7c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808b7c6:	f1ba 0f00 	cmp.w	sl, #0
 808b7ca:	d048      	beq.n	808b85e <__gethex+0x3ce>
 808b7cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808b7d0:	2b02      	cmp	r3, #2
 808b7d2:	d015      	beq.n	808b800 <__gethex+0x370>
 808b7d4:	2b03      	cmp	r3, #3
 808b7d6:	d017      	beq.n	808b808 <__gethex+0x378>
 808b7d8:	2b01      	cmp	r3, #1
 808b7da:	d109      	bne.n	808b7f0 <__gethex+0x360>
 808b7dc:	f01a 0f02 	tst.w	sl, #2
 808b7e0:	d006      	beq.n	808b7f0 <__gethex+0x360>
 808b7e2:	f8d9 0000 	ldr.w	r0, [r9]
 808b7e6:	ea4a 0a00 	orr.w	sl, sl, r0
 808b7ea:	f01a 0f01 	tst.w	sl, #1
 808b7ee:	d10e      	bne.n	808b80e <__gethex+0x37e>
 808b7f0:	f047 0710 	orr.w	r7, r7, #16
 808b7f4:	e033      	b.n	808b85e <__gethex+0x3ce>
 808b7f6:	f04f 0a01 	mov.w	sl, #1
 808b7fa:	e7cf      	b.n	808b79c <__gethex+0x30c>
 808b7fc:	2701      	movs	r7, #1
 808b7fe:	e7e2      	b.n	808b7c6 <__gethex+0x336>
 808b800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b802:	f1c3 0301 	rsb	r3, r3, #1
 808b806:	9315      	str	r3, [sp, #84]	; 0x54
 808b808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b80a:	2b00      	cmp	r3, #0
 808b80c:	d0f0      	beq.n	808b7f0 <__gethex+0x360>
 808b80e:	f04f 0c00 	mov.w	ip, #0
 808b812:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808b816:	f104 0314 	add.w	r3, r4, #20
 808b81a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 808b81e:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 808b822:	4618      	mov	r0, r3
 808b824:	f853 2b04 	ldr.w	r2, [r3], #4
 808b828:	f1b2 3fff 	cmp.w	r2, #4294967295
 808b82c:	d01c      	beq.n	808b868 <__gethex+0x3d8>
 808b82e:	3201      	adds	r2, #1
 808b830:	6002      	str	r2, [r0, #0]
 808b832:	2f02      	cmp	r7, #2
 808b834:	f104 0314 	add.w	r3, r4, #20
 808b838:	d138      	bne.n	808b8ac <__gethex+0x41c>
 808b83a:	f8d8 2000 	ldr.w	r2, [r8]
 808b83e:	3a01      	subs	r2, #1
 808b840:	42b2      	cmp	r2, r6
 808b842:	d10a      	bne.n	808b85a <__gethex+0x3ca>
 808b844:	2201      	movs	r2, #1
 808b846:	1171      	asrs	r1, r6, #5
 808b848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808b84c:	f006 061f 	and.w	r6, r6, #31
 808b850:	fa02 f606 	lsl.w	r6, r2, r6
 808b854:	421e      	tst	r6, r3
 808b856:	bf18      	it	ne
 808b858:	4617      	movne	r7, r2
 808b85a:	f047 0720 	orr.w	r7, r7, #32
 808b85e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808b860:	601c      	str	r4, [r3, #0]
 808b862:	9b06      	ldr	r3, [sp, #24]
 808b864:	601d      	str	r5, [r3, #0]
 808b866:	e6a5      	b.n	808b5b4 <__gethex+0x124>
 808b868:	4299      	cmp	r1, r3
 808b86a:	f843 cc04 	str.w	ip, [r3, #-4]
 808b86e:	d8d8      	bhi.n	808b822 <__gethex+0x392>
 808b870:	68a3      	ldr	r3, [r4, #8]
 808b872:	4599      	cmp	r9, r3
 808b874:	db12      	blt.n	808b89c <__gethex+0x40c>
 808b876:	6861      	ldr	r1, [r4, #4]
 808b878:	9802      	ldr	r0, [sp, #8]
 808b87a:	3101      	adds	r1, #1
 808b87c:	f000 f906 	bl	808ba8c <_Balloc>
 808b880:	4682      	mov	sl, r0
 808b882:	6922      	ldr	r2, [r4, #16]
 808b884:	f104 010c 	add.w	r1, r4, #12
 808b888:	3202      	adds	r2, #2
 808b88a:	0092      	lsls	r2, r2, #2
 808b88c:	300c      	adds	r0, #12
 808b88e:	f7fe febd 	bl	808a60c <memcpy>
 808b892:	4621      	mov	r1, r4
 808b894:	9802      	ldr	r0, [sp, #8]
 808b896:	f000 f92d 	bl	808baf4 <_Bfree>
 808b89a:	4654      	mov	r4, sl
 808b89c:	6923      	ldr	r3, [r4, #16]
 808b89e:	1c5a      	adds	r2, r3, #1
 808b8a0:	6122      	str	r2, [r4, #16]
 808b8a2:	2201      	movs	r2, #1
 808b8a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808b8a8:	615a      	str	r2, [r3, #20]
 808b8aa:	e7c2      	b.n	808b832 <__gethex+0x3a2>
 808b8ac:	6922      	ldr	r2, [r4, #16]
 808b8ae:	454a      	cmp	r2, r9
 808b8b0:	dd0b      	ble.n	808b8ca <__gethex+0x43a>
 808b8b2:	2101      	movs	r1, #1
 808b8b4:	4620      	mov	r0, r4
 808b8b6:	f7ff fd83 	bl	808b3c0 <rshift>
 808b8ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808b8be:	3501      	adds	r5, #1
 808b8c0:	42ab      	cmp	r3, r5
 808b8c2:	f6ff aeda 	blt.w	808b67a <__gethex+0x1ea>
 808b8c6:	2701      	movs	r7, #1
 808b8c8:	e7c7      	b.n	808b85a <__gethex+0x3ca>
 808b8ca:	f016 061f 	ands.w	r6, r6, #31
 808b8ce:	d0fa      	beq.n	808b8c6 <__gethex+0x436>
 808b8d0:	449b      	add	fp, r3
 808b8d2:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 808b8d6:	f000 f9a0 	bl	808bc1a <__hi0bits>
 808b8da:	f1c6 0620 	rsb	r6, r6, #32
 808b8de:	42b0      	cmp	r0, r6
 808b8e0:	dbe7      	blt.n	808b8b2 <__gethex+0x422>
 808b8e2:	e7f0      	b.n	808b8c6 <__gethex+0x436>

0808b8e4 <L_shift>:
 808b8e4:	f1c2 0208 	rsb	r2, r2, #8
 808b8e8:	0092      	lsls	r2, r2, #2
 808b8ea:	b570      	push	{r4, r5, r6, lr}
 808b8ec:	f1c2 0620 	rsb	r6, r2, #32
 808b8f0:	6843      	ldr	r3, [r0, #4]
 808b8f2:	6804      	ldr	r4, [r0, #0]
 808b8f4:	fa03 f506 	lsl.w	r5, r3, r6
 808b8f8:	432c      	orrs	r4, r5
 808b8fa:	40d3      	lsrs	r3, r2
 808b8fc:	6004      	str	r4, [r0, #0]
 808b8fe:	f840 3f04 	str.w	r3, [r0, #4]!
 808b902:	4288      	cmp	r0, r1
 808b904:	d3f4      	bcc.n	808b8f0 <L_shift+0xc>
 808b906:	bd70      	pop	{r4, r5, r6, pc}

0808b908 <__match>:
 808b908:	b530      	push	{r4, r5, lr}
 808b90a:	6803      	ldr	r3, [r0, #0]
 808b90c:	3301      	adds	r3, #1
 808b90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b912:	b914      	cbnz	r4, 808b91a <__match+0x12>
 808b914:	6003      	str	r3, [r0, #0]
 808b916:	2001      	movs	r0, #1
 808b918:	bd30      	pop	{r4, r5, pc}
 808b91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808b91e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808b922:	2d19      	cmp	r5, #25
 808b924:	bf98      	it	ls
 808b926:	3220      	addls	r2, #32
 808b928:	42a2      	cmp	r2, r4
 808b92a:	d0f0      	beq.n	808b90e <__match+0x6>
 808b92c:	2000      	movs	r0, #0
 808b92e:	e7f3      	b.n	808b918 <__match+0x10>

0808b930 <__hexnan>:
 808b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b934:	2500      	movs	r5, #0
 808b936:	680b      	ldr	r3, [r1, #0]
 808b938:	4682      	mov	sl, r0
 808b93a:	115e      	asrs	r6, r3, #5
 808b93c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808b940:	f013 031f 	ands.w	r3, r3, #31
 808b944:	bf18      	it	ne
 808b946:	3604      	addne	r6, #4
 808b948:	1f37      	subs	r7, r6, #4
 808b94a:	4690      	mov	r8, r2
 808b94c:	46b9      	mov	r9, r7
 808b94e:	463c      	mov	r4, r7
 808b950:	46ab      	mov	fp, r5
 808b952:	b087      	sub	sp, #28
 808b954:	6801      	ldr	r1, [r0, #0]
 808b956:	9301      	str	r3, [sp, #4]
 808b958:	f846 5c04 	str.w	r5, [r6, #-4]
 808b95c:	9502      	str	r5, [sp, #8]
 808b95e:	784a      	ldrb	r2, [r1, #1]
 808b960:	1c4b      	adds	r3, r1, #1
 808b962:	9303      	str	r3, [sp, #12]
 808b964:	b342      	cbz	r2, 808b9b8 <__hexnan+0x88>
 808b966:	4610      	mov	r0, r2
 808b968:	9105      	str	r1, [sp, #20]
 808b96a:	9204      	str	r2, [sp, #16]
 808b96c:	f7ff fd7b 	bl	808b466 <__hexdig_fun>
 808b970:	2800      	cmp	r0, #0
 808b972:	d14f      	bne.n	808ba14 <__hexnan+0xe4>
 808b974:	9a04      	ldr	r2, [sp, #16]
 808b976:	9905      	ldr	r1, [sp, #20]
 808b978:	2a20      	cmp	r2, #32
 808b97a:	d818      	bhi.n	808b9ae <__hexnan+0x7e>
 808b97c:	9b02      	ldr	r3, [sp, #8]
 808b97e:	459b      	cmp	fp, r3
 808b980:	dd13      	ble.n	808b9aa <__hexnan+0x7a>
 808b982:	454c      	cmp	r4, r9
 808b984:	d206      	bcs.n	808b994 <__hexnan+0x64>
 808b986:	2d07      	cmp	r5, #7
 808b988:	dc04      	bgt.n	808b994 <__hexnan+0x64>
 808b98a:	462a      	mov	r2, r5
 808b98c:	4649      	mov	r1, r9
 808b98e:	4620      	mov	r0, r4
 808b990:	f7ff ffa8 	bl	808b8e4 <L_shift>
 808b994:	4544      	cmp	r4, r8
 808b996:	d950      	bls.n	808ba3a <__hexnan+0x10a>
 808b998:	2300      	movs	r3, #0
 808b99a:	f1a4 0904 	sub.w	r9, r4, #4
 808b99e:	f844 3c04 	str.w	r3, [r4, #-4]
 808b9a2:	461d      	mov	r5, r3
 808b9a4:	464c      	mov	r4, r9
 808b9a6:	f8cd b008 	str.w	fp, [sp, #8]
 808b9aa:	9903      	ldr	r1, [sp, #12]
 808b9ac:	e7d7      	b.n	808b95e <__hexnan+0x2e>
 808b9ae:	2a29      	cmp	r2, #41	; 0x29
 808b9b0:	d156      	bne.n	808ba60 <__hexnan+0x130>
 808b9b2:	3102      	adds	r1, #2
 808b9b4:	f8ca 1000 	str.w	r1, [sl]
 808b9b8:	f1bb 0f00 	cmp.w	fp, #0
 808b9bc:	d050      	beq.n	808ba60 <__hexnan+0x130>
 808b9be:	454c      	cmp	r4, r9
 808b9c0:	d206      	bcs.n	808b9d0 <__hexnan+0xa0>
 808b9c2:	2d07      	cmp	r5, #7
 808b9c4:	dc04      	bgt.n	808b9d0 <__hexnan+0xa0>
 808b9c6:	462a      	mov	r2, r5
 808b9c8:	4649      	mov	r1, r9
 808b9ca:	4620      	mov	r0, r4
 808b9cc:	f7ff ff8a 	bl	808b8e4 <L_shift>
 808b9d0:	4544      	cmp	r4, r8
 808b9d2:	d934      	bls.n	808ba3e <__hexnan+0x10e>
 808b9d4:	4623      	mov	r3, r4
 808b9d6:	f1a8 0204 	sub.w	r2, r8, #4
 808b9da:	f853 1b04 	ldr.w	r1, [r3], #4
 808b9de:	429f      	cmp	r7, r3
 808b9e0:	f842 1f04 	str.w	r1, [r2, #4]!
 808b9e4:	d2f9      	bcs.n	808b9da <__hexnan+0xaa>
 808b9e6:	1b3b      	subs	r3, r7, r4
 808b9e8:	f023 0303 	bic.w	r3, r3, #3
 808b9ec:	3304      	adds	r3, #4
 808b9ee:	3401      	adds	r4, #1
 808b9f0:	3e03      	subs	r6, #3
 808b9f2:	42b4      	cmp	r4, r6
 808b9f4:	bf88      	it	hi
 808b9f6:	2304      	movhi	r3, #4
 808b9f8:	2200      	movs	r2, #0
 808b9fa:	4443      	add	r3, r8
 808b9fc:	f843 2b04 	str.w	r2, [r3], #4
 808ba00:	429f      	cmp	r7, r3
 808ba02:	d2fb      	bcs.n	808b9fc <__hexnan+0xcc>
 808ba04:	683b      	ldr	r3, [r7, #0]
 808ba06:	b91b      	cbnz	r3, 808ba10 <__hexnan+0xe0>
 808ba08:	4547      	cmp	r7, r8
 808ba0a:	d127      	bne.n	808ba5c <__hexnan+0x12c>
 808ba0c:	2301      	movs	r3, #1
 808ba0e:	603b      	str	r3, [r7, #0]
 808ba10:	2005      	movs	r0, #5
 808ba12:	e026      	b.n	808ba62 <__hexnan+0x132>
 808ba14:	3501      	adds	r5, #1
 808ba16:	2d08      	cmp	r5, #8
 808ba18:	f10b 0b01 	add.w	fp, fp, #1
 808ba1c:	dd06      	ble.n	808ba2c <__hexnan+0xfc>
 808ba1e:	4544      	cmp	r4, r8
 808ba20:	d9c3      	bls.n	808b9aa <__hexnan+0x7a>
 808ba22:	2300      	movs	r3, #0
 808ba24:	2501      	movs	r5, #1
 808ba26:	f844 3c04 	str.w	r3, [r4, #-4]
 808ba2a:	3c04      	subs	r4, #4
 808ba2c:	6822      	ldr	r2, [r4, #0]
 808ba2e:	f000 000f 	and.w	r0, r0, #15
 808ba32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 808ba36:	6022      	str	r2, [r4, #0]
 808ba38:	e7b7      	b.n	808b9aa <__hexnan+0x7a>
 808ba3a:	2508      	movs	r5, #8
 808ba3c:	e7b5      	b.n	808b9aa <__hexnan+0x7a>
 808ba3e:	9b01      	ldr	r3, [sp, #4]
 808ba40:	2b00      	cmp	r3, #0
 808ba42:	d0df      	beq.n	808ba04 <__hexnan+0xd4>
 808ba44:	f04f 32ff 	mov.w	r2, #4294967295
 808ba48:	f1c3 0320 	rsb	r3, r3, #32
 808ba4c:	fa22 f303 	lsr.w	r3, r2, r3
 808ba50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808ba54:	401a      	ands	r2, r3
 808ba56:	f846 2c04 	str.w	r2, [r6, #-4]
 808ba5a:	e7d3      	b.n	808ba04 <__hexnan+0xd4>
 808ba5c:	3f04      	subs	r7, #4
 808ba5e:	e7d1      	b.n	808ba04 <__hexnan+0xd4>
 808ba60:	2004      	movs	r0, #4
 808ba62:	b007      	add	sp, #28
 808ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808ba68 <__ascii_mbtowc>:
 808ba68:	b082      	sub	sp, #8
 808ba6a:	b901      	cbnz	r1, 808ba6e <__ascii_mbtowc+0x6>
 808ba6c:	a901      	add	r1, sp, #4
 808ba6e:	b142      	cbz	r2, 808ba82 <__ascii_mbtowc+0x1a>
 808ba70:	b14b      	cbz	r3, 808ba86 <__ascii_mbtowc+0x1e>
 808ba72:	7813      	ldrb	r3, [r2, #0]
 808ba74:	600b      	str	r3, [r1, #0]
 808ba76:	7812      	ldrb	r2, [r2, #0]
 808ba78:	1e10      	subs	r0, r2, #0
 808ba7a:	bf18      	it	ne
 808ba7c:	2001      	movne	r0, #1
 808ba7e:	b002      	add	sp, #8
 808ba80:	4770      	bx	lr
 808ba82:	4610      	mov	r0, r2
 808ba84:	e7fb      	b.n	808ba7e <__ascii_mbtowc+0x16>
 808ba86:	f06f 0001 	mvn.w	r0, #1
 808ba8a:	e7f8      	b.n	808ba7e <__ascii_mbtowc+0x16>

0808ba8c <_Balloc>:
 808ba8c:	b570      	push	{r4, r5, r6, lr}
 808ba8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808ba90:	4604      	mov	r4, r0
 808ba92:	460d      	mov	r5, r1
 808ba94:	b93e      	cbnz	r6, 808baa6 <_Balloc+0x1a>
 808ba96:	2010      	movs	r0, #16
 808ba98:	f7fa fc74 	bl	8086384 <malloc>
 808ba9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808baa0:	6260      	str	r0, [r4, #36]	; 0x24
 808baa2:	6006      	str	r6, [r0, #0]
 808baa4:	60c6      	str	r6, [r0, #12]
 808baa6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808baa8:	68f3      	ldr	r3, [r6, #12]
 808baaa:	b183      	cbz	r3, 808bace <_Balloc+0x42>
 808baac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808baae:	68db      	ldr	r3, [r3, #12]
 808bab0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808bab4:	b9b8      	cbnz	r0, 808bae6 <_Balloc+0x5a>
 808bab6:	2101      	movs	r1, #1
 808bab8:	fa01 f605 	lsl.w	r6, r1, r5
 808babc:	1d72      	adds	r2, r6, #5
 808babe:	4620      	mov	r0, r4
 808bac0:	0092      	lsls	r2, r2, #2
 808bac2:	f000 fc1c 	bl	808c2fe <_calloc_r>
 808bac6:	b160      	cbz	r0, 808bae2 <_Balloc+0x56>
 808bac8:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808bacc:	e00e      	b.n	808baec <_Balloc+0x60>
 808bace:	2221      	movs	r2, #33	; 0x21
 808bad0:	2104      	movs	r1, #4
 808bad2:	4620      	mov	r0, r4
 808bad4:	f000 fc13 	bl	808c2fe <_calloc_r>
 808bad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808bada:	60f0      	str	r0, [r6, #12]
 808badc:	68db      	ldr	r3, [r3, #12]
 808bade:	2b00      	cmp	r3, #0
 808bae0:	d1e4      	bne.n	808baac <_Balloc+0x20>
 808bae2:	2000      	movs	r0, #0
 808bae4:	bd70      	pop	{r4, r5, r6, pc}
 808bae6:	6802      	ldr	r2, [r0, #0]
 808bae8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808baec:	2300      	movs	r3, #0
 808baee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808baf2:	e7f7      	b.n	808bae4 <_Balloc+0x58>

0808baf4 <_Bfree>:
 808baf4:	b570      	push	{r4, r5, r6, lr}
 808baf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808baf8:	4605      	mov	r5, r0
 808bafa:	460c      	mov	r4, r1
 808bafc:	b93e      	cbnz	r6, 808bb0e <_Bfree+0x1a>
 808bafe:	2010      	movs	r0, #16
 808bb00:	f7fa fc40 	bl	8086384 <malloc>
 808bb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808bb08:	6268      	str	r0, [r5, #36]	; 0x24
 808bb0a:	6006      	str	r6, [r0, #0]
 808bb0c:	60c6      	str	r6, [r0, #12]
 808bb0e:	b13c      	cbz	r4, 808bb20 <_Bfree+0x2c>
 808bb10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808bb12:	6862      	ldr	r2, [r4, #4]
 808bb14:	68db      	ldr	r3, [r3, #12]
 808bb16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808bb1a:	6021      	str	r1, [r4, #0]
 808bb1c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808bb20:	bd70      	pop	{r4, r5, r6, pc}

0808bb22 <__multadd>:
 808bb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bb26:	4698      	mov	r8, r3
 808bb28:	460c      	mov	r4, r1
 808bb2a:	2300      	movs	r3, #0
 808bb2c:	690e      	ldr	r6, [r1, #16]
 808bb2e:	4607      	mov	r7, r0
 808bb30:	f101 0014 	add.w	r0, r1, #20
 808bb34:	6805      	ldr	r5, [r0, #0]
 808bb36:	3301      	adds	r3, #1
 808bb38:	b2a9      	uxth	r1, r5
 808bb3a:	fb02 8101 	mla	r1, r2, r1, r8
 808bb3e:	0c2d      	lsrs	r5, r5, #16
 808bb40:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 808bb44:	fb02 c505 	mla	r5, r2, r5, ip
 808bb48:	b289      	uxth	r1, r1
 808bb4a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 808bb4e:	429e      	cmp	r6, r3
 808bb50:	ea4f 4815 	mov.w	r8, r5, lsr #16
 808bb54:	f840 1b04 	str.w	r1, [r0], #4
 808bb58:	dcec      	bgt.n	808bb34 <__multadd+0x12>
 808bb5a:	f1b8 0f00 	cmp.w	r8, #0
 808bb5e:	d01b      	beq.n	808bb98 <__multadd+0x76>
 808bb60:	68a3      	ldr	r3, [r4, #8]
 808bb62:	42b3      	cmp	r3, r6
 808bb64:	dc12      	bgt.n	808bb8c <__multadd+0x6a>
 808bb66:	6861      	ldr	r1, [r4, #4]
 808bb68:	4638      	mov	r0, r7
 808bb6a:	3101      	adds	r1, #1
 808bb6c:	f7ff ff8e 	bl	808ba8c <_Balloc>
 808bb70:	4605      	mov	r5, r0
 808bb72:	6922      	ldr	r2, [r4, #16]
 808bb74:	f104 010c 	add.w	r1, r4, #12
 808bb78:	3202      	adds	r2, #2
 808bb7a:	0092      	lsls	r2, r2, #2
 808bb7c:	300c      	adds	r0, #12
 808bb7e:	f7fe fd45 	bl	808a60c <memcpy>
 808bb82:	4621      	mov	r1, r4
 808bb84:	4638      	mov	r0, r7
 808bb86:	f7ff ffb5 	bl	808baf4 <_Bfree>
 808bb8a:	462c      	mov	r4, r5
 808bb8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 808bb90:	3601      	adds	r6, #1
 808bb92:	f8c3 8014 	str.w	r8, [r3, #20]
 808bb96:	6126      	str	r6, [r4, #16]
 808bb98:	4620      	mov	r0, r4
 808bb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808bb9e <__s2b>:
 808bb9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808bba2:	4615      	mov	r5, r2
 808bba4:	2209      	movs	r2, #9
 808bba6:	461f      	mov	r7, r3
 808bba8:	3308      	adds	r3, #8
 808bbaa:	460c      	mov	r4, r1
 808bbac:	fb93 f3f2 	sdiv	r3, r3, r2
 808bbb0:	4606      	mov	r6, r0
 808bbb2:	2201      	movs	r2, #1
 808bbb4:	2100      	movs	r1, #0
 808bbb6:	429a      	cmp	r2, r3
 808bbb8:	db20      	blt.n	808bbfc <__s2b+0x5e>
 808bbba:	4630      	mov	r0, r6
 808bbbc:	f7ff ff66 	bl	808ba8c <_Balloc>
 808bbc0:	9b08      	ldr	r3, [sp, #32]
 808bbc2:	2d09      	cmp	r5, #9
 808bbc4:	6143      	str	r3, [r0, #20]
 808bbc6:	f04f 0301 	mov.w	r3, #1
 808bbca:	6103      	str	r3, [r0, #16]
 808bbcc:	dd19      	ble.n	808bc02 <__s2b+0x64>
 808bbce:	f104 0909 	add.w	r9, r4, #9
 808bbd2:	46c8      	mov	r8, r9
 808bbd4:	442c      	add	r4, r5
 808bbd6:	f818 3b01 	ldrb.w	r3, [r8], #1
 808bbda:	4601      	mov	r1, r0
 808bbdc:	220a      	movs	r2, #10
 808bbde:	4630      	mov	r0, r6
 808bbe0:	3b30      	subs	r3, #48	; 0x30
 808bbe2:	f7ff ff9e 	bl	808bb22 <__multadd>
 808bbe6:	45a0      	cmp	r8, r4
 808bbe8:	d1f5      	bne.n	808bbd6 <__s2b+0x38>
 808bbea:	f1a5 0408 	sub.w	r4, r5, #8
 808bbee:	444c      	add	r4, r9
 808bbf0:	1b2d      	subs	r5, r5, r4
 808bbf2:	1963      	adds	r3, r4, r5
 808bbf4:	42bb      	cmp	r3, r7
 808bbf6:	db07      	blt.n	808bc08 <__s2b+0x6a>
 808bbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808bbfc:	0052      	lsls	r2, r2, #1
 808bbfe:	3101      	adds	r1, #1
 808bc00:	e7d9      	b.n	808bbb6 <__s2b+0x18>
 808bc02:	2509      	movs	r5, #9
 808bc04:	340a      	adds	r4, #10
 808bc06:	e7f3      	b.n	808bbf0 <__s2b+0x52>
 808bc08:	f814 3b01 	ldrb.w	r3, [r4], #1
 808bc0c:	4601      	mov	r1, r0
 808bc0e:	220a      	movs	r2, #10
 808bc10:	4630      	mov	r0, r6
 808bc12:	3b30      	subs	r3, #48	; 0x30
 808bc14:	f7ff ff85 	bl	808bb22 <__multadd>
 808bc18:	e7eb      	b.n	808bbf2 <__s2b+0x54>

0808bc1a <__hi0bits>:
 808bc1a:	0c02      	lsrs	r2, r0, #16
 808bc1c:	0412      	lsls	r2, r2, #16
 808bc1e:	4603      	mov	r3, r0
 808bc20:	b9ca      	cbnz	r2, 808bc56 <__hi0bits+0x3c>
 808bc22:	0403      	lsls	r3, r0, #16
 808bc24:	2010      	movs	r0, #16
 808bc26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808bc2a:	bf04      	itt	eq
 808bc2c:	021b      	lsleq	r3, r3, #8
 808bc2e:	3008      	addeq	r0, #8
 808bc30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 808bc34:	bf04      	itt	eq
 808bc36:	011b      	lsleq	r3, r3, #4
 808bc38:	3004      	addeq	r0, #4
 808bc3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 808bc3e:	bf04      	itt	eq
 808bc40:	009b      	lsleq	r3, r3, #2
 808bc42:	3002      	addeq	r0, #2
 808bc44:	2b00      	cmp	r3, #0
 808bc46:	db05      	blt.n	808bc54 <__hi0bits+0x3a>
 808bc48:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 808bc4c:	f100 0001 	add.w	r0, r0, #1
 808bc50:	bf08      	it	eq
 808bc52:	2020      	moveq	r0, #32
 808bc54:	4770      	bx	lr
 808bc56:	2000      	movs	r0, #0
 808bc58:	e7e5      	b.n	808bc26 <__hi0bits+0xc>

0808bc5a <__lo0bits>:
 808bc5a:	6803      	ldr	r3, [r0, #0]
 808bc5c:	4602      	mov	r2, r0
 808bc5e:	f013 0007 	ands.w	r0, r3, #7
 808bc62:	d00b      	beq.n	808bc7c <__lo0bits+0x22>
 808bc64:	07d9      	lsls	r1, r3, #31
 808bc66:	d422      	bmi.n	808bcae <__lo0bits+0x54>
 808bc68:	0798      	lsls	r0, r3, #30
 808bc6a:	bf49      	itett	mi
 808bc6c:	085b      	lsrmi	r3, r3, #1
 808bc6e:	089b      	lsrpl	r3, r3, #2
 808bc70:	2001      	movmi	r0, #1
 808bc72:	6013      	strmi	r3, [r2, #0]
 808bc74:	bf5c      	itt	pl
 808bc76:	2002      	movpl	r0, #2
 808bc78:	6013      	strpl	r3, [r2, #0]
 808bc7a:	4770      	bx	lr
 808bc7c:	b299      	uxth	r1, r3
 808bc7e:	b909      	cbnz	r1, 808bc84 <__lo0bits+0x2a>
 808bc80:	2010      	movs	r0, #16
 808bc82:	0c1b      	lsrs	r3, r3, #16
 808bc84:	f013 0fff 	tst.w	r3, #255	; 0xff
 808bc88:	bf04      	itt	eq
 808bc8a:	0a1b      	lsreq	r3, r3, #8
 808bc8c:	3008      	addeq	r0, #8
 808bc8e:	0719      	lsls	r1, r3, #28
 808bc90:	bf04      	itt	eq
 808bc92:	091b      	lsreq	r3, r3, #4
 808bc94:	3004      	addeq	r0, #4
 808bc96:	0799      	lsls	r1, r3, #30
 808bc98:	bf04      	itt	eq
 808bc9a:	089b      	lsreq	r3, r3, #2
 808bc9c:	3002      	addeq	r0, #2
 808bc9e:	07d9      	lsls	r1, r3, #31
 808bca0:	d403      	bmi.n	808bcaa <__lo0bits+0x50>
 808bca2:	085b      	lsrs	r3, r3, #1
 808bca4:	f100 0001 	add.w	r0, r0, #1
 808bca8:	d003      	beq.n	808bcb2 <__lo0bits+0x58>
 808bcaa:	6013      	str	r3, [r2, #0]
 808bcac:	4770      	bx	lr
 808bcae:	2000      	movs	r0, #0
 808bcb0:	4770      	bx	lr
 808bcb2:	2020      	movs	r0, #32
 808bcb4:	4770      	bx	lr

0808bcb6 <__i2b>:
 808bcb6:	b510      	push	{r4, lr}
 808bcb8:	460c      	mov	r4, r1
 808bcba:	2101      	movs	r1, #1
 808bcbc:	f7ff fee6 	bl	808ba8c <_Balloc>
 808bcc0:	2201      	movs	r2, #1
 808bcc2:	6144      	str	r4, [r0, #20]
 808bcc4:	6102      	str	r2, [r0, #16]
 808bcc6:	bd10      	pop	{r4, pc}

0808bcc8 <__multiply>:
 808bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bccc:	4615      	mov	r5, r2
 808bcce:	690a      	ldr	r2, [r1, #16]
 808bcd0:	692b      	ldr	r3, [r5, #16]
 808bcd2:	460c      	mov	r4, r1
 808bcd4:	429a      	cmp	r2, r3
 808bcd6:	bfbe      	ittt	lt
 808bcd8:	460b      	movlt	r3, r1
 808bcda:	462c      	movlt	r4, r5
 808bcdc:	461d      	movlt	r5, r3
 808bcde:	6927      	ldr	r7, [r4, #16]
 808bce0:	f8d5 9010 	ldr.w	r9, [r5, #16]
 808bce4:	68a3      	ldr	r3, [r4, #8]
 808bce6:	6861      	ldr	r1, [r4, #4]
 808bce8:	eb07 0609 	add.w	r6, r7, r9
 808bcec:	42b3      	cmp	r3, r6
 808bcee:	bfb8      	it	lt
 808bcf0:	3101      	addlt	r1, #1
 808bcf2:	b085      	sub	sp, #20
 808bcf4:	f7ff feca 	bl	808ba8c <_Balloc>
 808bcf8:	f100 0114 	add.w	r1, r0, #20
 808bcfc:	460b      	mov	r3, r1
 808bcfe:	2200      	movs	r2, #0
 808bd00:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 808bd04:	4543      	cmp	r3, r8
 808bd06:	d31d      	bcc.n	808bd44 <__multiply+0x7c>
 808bd08:	f104 0314 	add.w	r3, r4, #20
 808bd0c:	f105 0214 	add.w	r2, r5, #20
 808bd10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808bd14:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808bd18:	9302      	str	r3, [sp, #8]
 808bd1a:	1b3b      	subs	r3, r7, r4
 808bd1c:	3b15      	subs	r3, #21
 808bd1e:	f023 0303 	bic.w	r3, r3, #3
 808bd22:	3304      	adds	r3, #4
 808bd24:	f104 0515 	add.w	r5, r4, #21
 808bd28:	42af      	cmp	r7, r5
 808bd2a:	bf38      	it	cc
 808bd2c:	2304      	movcc	r3, #4
 808bd2e:	9301      	str	r3, [sp, #4]
 808bd30:	9b02      	ldr	r3, [sp, #8]
 808bd32:	9203      	str	r2, [sp, #12]
 808bd34:	4293      	cmp	r3, r2
 808bd36:	d808      	bhi.n	808bd4a <__multiply+0x82>
 808bd38:	2e00      	cmp	r6, #0
 808bd3a:	dc5a      	bgt.n	808bdf2 <__multiply+0x12a>
 808bd3c:	6106      	str	r6, [r0, #16]
 808bd3e:	b005      	add	sp, #20
 808bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bd44:	f843 2b04 	str.w	r2, [r3], #4
 808bd48:	e7dc      	b.n	808bd04 <__multiply+0x3c>
 808bd4a:	f8b2 a000 	ldrh.w	sl, [r2]
 808bd4e:	f1ba 0f00 	cmp.w	sl, #0
 808bd52:	d024      	beq.n	808bd9e <__multiply+0xd6>
 808bd54:	4689      	mov	r9, r1
 808bd56:	f04f 0c00 	mov.w	ip, #0
 808bd5a:	f104 0e14 	add.w	lr, r4, #20
 808bd5e:	f85e 5b04 	ldr.w	r5, [lr], #4
 808bd62:	f8d9 b000 	ldr.w	fp, [r9]
 808bd66:	b2ab      	uxth	r3, r5
 808bd68:	fa1f fb8b 	uxth.w	fp, fp
 808bd6c:	fb0a b303 	mla	r3, sl, r3, fp
 808bd70:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 808bd74:	f8d9 5000 	ldr.w	r5, [r9]
 808bd78:	4463      	add	r3, ip
 808bd7a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808bd7e:	fb0a c50b 	mla	r5, sl, fp, ip
 808bd82:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 808bd86:	b29b      	uxth	r3, r3
 808bd88:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 808bd8c:	4577      	cmp	r7, lr
 808bd8e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808bd92:	f849 3b04 	str.w	r3, [r9], #4
 808bd96:	d8e2      	bhi.n	808bd5e <__multiply+0x96>
 808bd98:	9b01      	ldr	r3, [sp, #4]
 808bd9a:	f841 c003 	str.w	ip, [r1, r3]
 808bd9e:	9b03      	ldr	r3, [sp, #12]
 808bda0:	3204      	adds	r2, #4
 808bda2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 808bda6:	f1b9 0f00 	cmp.w	r9, #0
 808bdaa:	d020      	beq.n	808bdee <__multiply+0x126>
 808bdac:	468e      	mov	lr, r1
 808bdae:	f04f 0a00 	mov.w	sl, #0
 808bdb2:	680b      	ldr	r3, [r1, #0]
 808bdb4:	f104 0c14 	add.w	ip, r4, #20
 808bdb8:	f8bc 5000 	ldrh.w	r5, [ip]
 808bdbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 808bdc0:	b29b      	uxth	r3, r3
 808bdc2:	fb09 b505 	mla	r5, r9, r5, fp
 808bdc6:	44aa      	add	sl, r5
 808bdc8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 808bdcc:	f84e 3b04 	str.w	r3, [lr], #4
 808bdd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 808bdd4:	f8be 5000 	ldrh.w	r5, [lr]
 808bdd8:	0c1b      	lsrs	r3, r3, #16
 808bdda:	fb09 5303 	mla	r3, r9, r3, r5
 808bdde:	4567      	cmp	r7, ip
 808bde0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 808bde4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 808bde8:	d8e6      	bhi.n	808bdb8 <__multiply+0xf0>
 808bdea:	9d01      	ldr	r5, [sp, #4]
 808bdec:	514b      	str	r3, [r1, r5]
 808bdee:	3104      	adds	r1, #4
 808bdf0:	e79e      	b.n	808bd30 <__multiply+0x68>
 808bdf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808bdf6:	2b00      	cmp	r3, #0
 808bdf8:	d1a0      	bne.n	808bd3c <__multiply+0x74>
 808bdfa:	3e01      	subs	r6, #1
 808bdfc:	e79c      	b.n	808bd38 <__multiply+0x70>
	...

0808be00 <__pow5mult>:
 808be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808be04:	4615      	mov	r5, r2
 808be06:	f012 0203 	ands.w	r2, r2, #3
 808be0a:	4606      	mov	r6, r0
 808be0c:	460f      	mov	r7, r1
 808be0e:	d007      	beq.n	808be20 <__pow5mult+0x20>
 808be10:	4c21      	ldr	r4, [pc, #132]	; (808be98 <__pow5mult+0x98>)
 808be12:	3a01      	subs	r2, #1
 808be14:	2300      	movs	r3, #0
 808be16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808be1a:	f7ff fe82 	bl	808bb22 <__multadd>
 808be1e:	4607      	mov	r7, r0
 808be20:	10ad      	asrs	r5, r5, #2
 808be22:	d035      	beq.n	808be90 <__pow5mult+0x90>
 808be24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808be26:	b93c      	cbnz	r4, 808be38 <__pow5mult+0x38>
 808be28:	2010      	movs	r0, #16
 808be2a:	f7fa faab 	bl	8086384 <malloc>
 808be2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808be32:	6270      	str	r0, [r6, #36]	; 0x24
 808be34:	6004      	str	r4, [r0, #0]
 808be36:	60c4      	str	r4, [r0, #12]
 808be38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808be3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808be40:	b94c      	cbnz	r4, 808be56 <__pow5mult+0x56>
 808be42:	f240 2171 	movw	r1, #625	; 0x271
 808be46:	4630      	mov	r0, r6
 808be48:	f7ff ff35 	bl	808bcb6 <__i2b>
 808be4c:	2300      	movs	r3, #0
 808be4e:	4604      	mov	r4, r0
 808be50:	f8c8 0008 	str.w	r0, [r8, #8]
 808be54:	6003      	str	r3, [r0, #0]
 808be56:	f04f 0900 	mov.w	r9, #0
 808be5a:	07eb      	lsls	r3, r5, #31
 808be5c:	d50a      	bpl.n	808be74 <__pow5mult+0x74>
 808be5e:	4639      	mov	r1, r7
 808be60:	4622      	mov	r2, r4
 808be62:	4630      	mov	r0, r6
 808be64:	f7ff ff30 	bl	808bcc8 <__multiply>
 808be68:	4680      	mov	r8, r0
 808be6a:	4639      	mov	r1, r7
 808be6c:	4630      	mov	r0, r6
 808be6e:	f7ff fe41 	bl	808baf4 <_Bfree>
 808be72:	4647      	mov	r7, r8
 808be74:	106d      	asrs	r5, r5, #1
 808be76:	d00b      	beq.n	808be90 <__pow5mult+0x90>
 808be78:	6820      	ldr	r0, [r4, #0]
 808be7a:	b938      	cbnz	r0, 808be8c <__pow5mult+0x8c>
 808be7c:	4622      	mov	r2, r4
 808be7e:	4621      	mov	r1, r4
 808be80:	4630      	mov	r0, r6
 808be82:	f7ff ff21 	bl	808bcc8 <__multiply>
 808be86:	6020      	str	r0, [r4, #0]
 808be88:	f8c0 9000 	str.w	r9, [r0]
 808be8c:	4604      	mov	r4, r0
 808be8e:	e7e4      	b.n	808be5a <__pow5mult+0x5a>
 808be90:	4638      	mov	r0, r7
 808be92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808be96:	bf00      	nop
 808be98:	0808d708 	.word	0x0808d708

0808be9c <__lshift>:
 808be9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808bea0:	460c      	mov	r4, r1
 808bea2:	4607      	mov	r7, r0
 808bea4:	4691      	mov	r9, r2
 808bea6:	6923      	ldr	r3, [r4, #16]
 808bea8:	6849      	ldr	r1, [r1, #4]
 808beaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808beae:	68a3      	ldr	r3, [r4, #8]
 808beb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808beb4:	f108 0601 	add.w	r6, r8, #1
 808beb8:	42b3      	cmp	r3, r6
 808beba:	db3f      	blt.n	808bf3c <__lshift+0xa0>
 808bebc:	4638      	mov	r0, r7
 808bebe:	f7ff fde5 	bl	808ba8c <_Balloc>
 808bec2:	2300      	movs	r3, #0
 808bec4:	4605      	mov	r5, r0
 808bec6:	f100 0114 	add.w	r1, r0, #20
 808beca:	f100 0210 	add.w	r2, r0, #16
 808bece:	4618      	mov	r0, r3
 808bed0:	4553      	cmp	r3, sl
 808bed2:	db36      	blt.n	808bf42 <__lshift+0xa6>
 808bed4:	6920      	ldr	r0, [r4, #16]
 808bed6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808beda:	f104 0314 	add.w	r3, r4, #20
 808bede:	f019 091f 	ands.w	r9, r9, #31
 808bee2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808bee6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 808beea:	d02e      	beq.n	808bf4a <__lshift+0xae>
 808beec:	468a      	mov	sl, r1
 808beee:	2200      	movs	r2, #0
 808bef0:	f1c9 0e20 	rsb	lr, r9, #32
 808bef4:	6818      	ldr	r0, [r3, #0]
 808bef6:	fa00 f009 	lsl.w	r0, r0, r9
 808befa:	4302      	orrs	r2, r0
 808befc:	f84a 2b04 	str.w	r2, [sl], #4
 808bf00:	f853 2b04 	ldr.w	r2, [r3], #4
 808bf04:	459c      	cmp	ip, r3
 808bf06:	fa22 f20e 	lsr.w	r2, r2, lr
 808bf0a:	d8f3      	bhi.n	808bef4 <__lshift+0x58>
 808bf0c:	ebac 0304 	sub.w	r3, ip, r4
 808bf10:	3b15      	subs	r3, #21
 808bf12:	f023 0303 	bic.w	r3, r3, #3
 808bf16:	3304      	adds	r3, #4
 808bf18:	f104 0015 	add.w	r0, r4, #21
 808bf1c:	4560      	cmp	r0, ip
 808bf1e:	bf88      	it	hi
 808bf20:	2304      	movhi	r3, #4
 808bf22:	50ca      	str	r2, [r1, r3]
 808bf24:	b10a      	cbz	r2, 808bf2a <__lshift+0x8e>
 808bf26:	f108 0602 	add.w	r6, r8, #2
 808bf2a:	3e01      	subs	r6, #1
 808bf2c:	4638      	mov	r0, r7
 808bf2e:	4621      	mov	r1, r4
 808bf30:	612e      	str	r6, [r5, #16]
 808bf32:	f7ff fddf 	bl	808baf4 <_Bfree>
 808bf36:	4628      	mov	r0, r5
 808bf38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808bf3c:	3101      	adds	r1, #1
 808bf3e:	005b      	lsls	r3, r3, #1
 808bf40:	e7ba      	b.n	808beb8 <__lshift+0x1c>
 808bf42:	f842 0f04 	str.w	r0, [r2, #4]!
 808bf46:	3301      	adds	r3, #1
 808bf48:	e7c2      	b.n	808bed0 <__lshift+0x34>
 808bf4a:	3904      	subs	r1, #4
 808bf4c:	f853 2b04 	ldr.w	r2, [r3], #4
 808bf50:	459c      	cmp	ip, r3
 808bf52:	f841 2f04 	str.w	r2, [r1, #4]!
 808bf56:	d8f9      	bhi.n	808bf4c <__lshift+0xb0>
 808bf58:	e7e7      	b.n	808bf2a <__lshift+0x8e>

0808bf5a <__mcmp>:
 808bf5a:	4603      	mov	r3, r0
 808bf5c:	690a      	ldr	r2, [r1, #16]
 808bf5e:	6900      	ldr	r0, [r0, #16]
 808bf60:	b530      	push	{r4, r5, lr}
 808bf62:	1a80      	subs	r0, r0, r2
 808bf64:	d10d      	bne.n	808bf82 <__mcmp+0x28>
 808bf66:	3314      	adds	r3, #20
 808bf68:	3114      	adds	r1, #20
 808bf6a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 808bf6e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 808bf72:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 808bf76:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 808bf7a:	4295      	cmp	r5, r2
 808bf7c:	d002      	beq.n	808bf84 <__mcmp+0x2a>
 808bf7e:	d304      	bcc.n	808bf8a <__mcmp+0x30>
 808bf80:	2001      	movs	r0, #1
 808bf82:	bd30      	pop	{r4, r5, pc}
 808bf84:	42a3      	cmp	r3, r4
 808bf86:	d3f4      	bcc.n	808bf72 <__mcmp+0x18>
 808bf88:	e7fb      	b.n	808bf82 <__mcmp+0x28>
 808bf8a:	f04f 30ff 	mov.w	r0, #4294967295
 808bf8e:	e7f8      	b.n	808bf82 <__mcmp+0x28>

0808bf90 <__mdiff>:
 808bf90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bf94:	460c      	mov	r4, r1
 808bf96:	4606      	mov	r6, r0
 808bf98:	4611      	mov	r1, r2
 808bf9a:	4620      	mov	r0, r4
 808bf9c:	4692      	mov	sl, r2
 808bf9e:	f7ff ffdc 	bl	808bf5a <__mcmp>
 808bfa2:	1e05      	subs	r5, r0, #0
 808bfa4:	d108      	bne.n	808bfb8 <__mdiff+0x28>
 808bfa6:	4629      	mov	r1, r5
 808bfa8:	4630      	mov	r0, r6
 808bfaa:	f7ff fd6f 	bl	808ba8c <_Balloc>
 808bfae:	2301      	movs	r3, #1
 808bfb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 808bfb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bfb8:	bfa4      	itt	ge
 808bfba:	4653      	movge	r3, sl
 808bfbc:	46a2      	movge	sl, r4
 808bfbe:	4630      	mov	r0, r6
 808bfc0:	f8da 1004 	ldr.w	r1, [sl, #4]
 808bfc4:	bfa6      	itte	ge
 808bfc6:	461c      	movge	r4, r3
 808bfc8:	2500      	movge	r5, #0
 808bfca:	2501      	movlt	r5, #1
 808bfcc:	f7ff fd5e 	bl	808ba8c <_Balloc>
 808bfd0:	f100 0814 	add.w	r8, r0, #20
 808bfd4:	f8da 7010 	ldr.w	r7, [sl, #16]
 808bfd8:	60c5      	str	r5, [r0, #12]
 808bfda:	f10a 0210 	add.w	r2, sl, #16
 808bfde:	f10a 0514 	add.w	r5, sl, #20
 808bfe2:	f04f 0c00 	mov.w	ip, #0
 808bfe6:	46c2      	mov	sl, r8
 808bfe8:	6926      	ldr	r6, [r4, #16]
 808bfea:	f104 0914 	add.w	r9, r4, #20
 808bfee:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 808bff2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808bff6:	f852 bf04 	ldr.w	fp, [r2, #4]!
 808bffa:	f859 3b04 	ldr.w	r3, [r9], #4
 808bffe:	fa1f f18b 	uxth.w	r1, fp
 808c002:	4461      	add	r1, ip
 808c004:	fa1f fc83 	uxth.w	ip, r3
 808c008:	0c1b      	lsrs	r3, r3, #16
 808c00a:	eba1 010c 	sub.w	r1, r1, ip
 808c00e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808c012:	eb03 4321 	add.w	r3, r3, r1, asr #16
 808c016:	b289      	uxth	r1, r1
 808c018:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808c01c:	454e      	cmp	r6, r9
 808c01e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 808c022:	f84a 3b04 	str.w	r3, [sl], #4
 808c026:	d8e6      	bhi.n	808bff6 <__mdiff+0x66>
 808c028:	1b33      	subs	r3, r6, r4
 808c02a:	3b15      	subs	r3, #21
 808c02c:	f023 0303 	bic.w	r3, r3, #3
 808c030:	3415      	adds	r4, #21
 808c032:	3304      	adds	r3, #4
 808c034:	42a6      	cmp	r6, r4
 808c036:	bf38      	it	cc
 808c038:	2304      	movcc	r3, #4
 808c03a:	441d      	add	r5, r3
 808c03c:	4443      	add	r3, r8
 808c03e:	461e      	mov	r6, r3
 808c040:	462c      	mov	r4, r5
 808c042:	4574      	cmp	r4, lr
 808c044:	d30e      	bcc.n	808c064 <__mdiff+0xd4>
 808c046:	f10e 0203 	add.w	r2, lr, #3
 808c04a:	1b52      	subs	r2, r2, r5
 808c04c:	f022 0203 	bic.w	r2, r2, #3
 808c050:	3d03      	subs	r5, #3
 808c052:	45ae      	cmp	lr, r5
 808c054:	bf38      	it	cc
 808c056:	2200      	movcc	r2, #0
 808c058:	441a      	add	r2, r3
 808c05a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 808c05e:	b18b      	cbz	r3, 808c084 <__mdiff+0xf4>
 808c060:	6107      	str	r7, [r0, #16]
 808c062:	e7a7      	b.n	808bfb4 <__mdiff+0x24>
 808c064:	f854 8b04 	ldr.w	r8, [r4], #4
 808c068:	fa1f f288 	uxth.w	r2, r8
 808c06c:	4462      	add	r2, ip
 808c06e:	1411      	asrs	r1, r2, #16
 808c070:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 808c074:	b292      	uxth	r2, r2
 808c076:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 808c07a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 808c07e:	f846 2b04 	str.w	r2, [r6], #4
 808c082:	e7de      	b.n	808c042 <__mdiff+0xb2>
 808c084:	3f01      	subs	r7, #1
 808c086:	e7e8      	b.n	808c05a <__mdiff+0xca>

0808c088 <__ulp>:
 808c088:	4b11      	ldr	r3, [pc, #68]	; (808c0d0 <__ulp+0x48>)
 808c08a:	400b      	ands	r3, r1
 808c08c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808c090:	2b00      	cmp	r3, #0
 808c092:	dd02      	ble.n	808c09a <__ulp+0x12>
 808c094:	2000      	movs	r0, #0
 808c096:	4619      	mov	r1, r3
 808c098:	4770      	bx	lr
 808c09a:	425b      	negs	r3, r3
 808c09c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 808c0a0:	f04f 0000 	mov.w	r0, #0
 808c0a4:	f04f 0100 	mov.w	r1, #0
 808c0a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 808c0ac:	da04      	bge.n	808c0b8 <__ulp+0x30>
 808c0ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 808c0b2:	fa43 f102 	asr.w	r1, r3, r2
 808c0b6:	4770      	bx	lr
 808c0b8:	f1a2 0314 	sub.w	r3, r2, #20
 808c0bc:	2b1e      	cmp	r3, #30
 808c0be:	bfd6      	itet	le
 808c0c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 808c0c4:	2301      	movgt	r3, #1
 808c0c6:	fa22 f303 	lsrle.w	r3, r2, r3
 808c0ca:	4618      	mov	r0, r3
 808c0cc:	4770      	bx	lr
 808c0ce:	bf00      	nop
 808c0d0:	7ff00000 	.word	0x7ff00000

0808c0d4 <__b2d>:
 808c0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c0d8:	6907      	ldr	r7, [r0, #16]
 808c0da:	f100 0914 	add.w	r9, r0, #20
 808c0de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 808c0e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 808c0e6:	f1a7 0804 	sub.w	r8, r7, #4
 808c0ea:	4630      	mov	r0, r6
 808c0ec:	f7ff fd95 	bl	808bc1a <__hi0bits>
 808c0f0:	f1c0 0320 	rsb	r3, r0, #32
 808c0f4:	280a      	cmp	r0, #10
 808c0f6:	600b      	str	r3, [r1, #0]
 808c0f8:	491f      	ldr	r1, [pc, #124]	; (808c178 <__b2d+0xa4>)
 808c0fa:	dc17      	bgt.n	808c12c <__b2d+0x58>
 808c0fc:	45c1      	cmp	r9, r8
 808c0fe:	bf28      	it	cs
 808c100:	2200      	movcs	r2, #0
 808c102:	f1c0 0c0b 	rsb	ip, r0, #11
 808c106:	fa26 f30c 	lsr.w	r3, r6, ip
 808c10a:	bf38      	it	cc
 808c10c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808c110:	ea43 0501 	orr.w	r5, r3, r1
 808c114:	f100 0315 	add.w	r3, r0, #21
 808c118:	fa06 f303 	lsl.w	r3, r6, r3
 808c11c:	fa22 f20c 	lsr.w	r2, r2, ip
 808c120:	ea43 0402 	orr.w	r4, r3, r2
 808c124:	4620      	mov	r0, r4
 808c126:	4629      	mov	r1, r5
 808c128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c12c:	45c1      	cmp	r9, r8
 808c12e:	bf2e      	itee	cs
 808c130:	2200      	movcs	r2, #0
 808c132:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808c136:	f1a7 0808 	subcc.w	r8, r7, #8
 808c13a:	f1b0 030b 	subs.w	r3, r0, #11
 808c13e:	d016      	beq.n	808c16e <__b2d+0x9a>
 808c140:	f1c3 0720 	rsb	r7, r3, #32
 808c144:	fa22 f107 	lsr.w	r1, r2, r7
 808c148:	45c8      	cmp	r8, r9
 808c14a:	fa06 f603 	lsl.w	r6, r6, r3
 808c14e:	ea46 0601 	orr.w	r6, r6, r1
 808c152:	bf94      	ite	ls
 808c154:	2100      	movls	r1, #0
 808c156:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 808c15a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 808c15e:	fa02 f003 	lsl.w	r0, r2, r3
 808c162:	40f9      	lsrs	r1, r7
 808c164:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 808c168:	ea40 0401 	orr.w	r4, r0, r1
 808c16c:	e7da      	b.n	808c124 <__b2d+0x50>
 808c16e:	4614      	mov	r4, r2
 808c170:	ea46 0501 	orr.w	r5, r6, r1
 808c174:	e7d6      	b.n	808c124 <__b2d+0x50>
 808c176:	bf00      	nop
 808c178:	3ff00000 	.word	0x3ff00000

0808c17c <__d2b>:
 808c17c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808c180:	461c      	mov	r4, r3
 808c182:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 808c186:	2101      	movs	r1, #1
 808c188:	4690      	mov	r8, r2
 808c18a:	f7ff fc7f 	bl	808ba8c <_Balloc>
 808c18e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 808c192:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808c196:	4607      	mov	r7, r0
 808c198:	bb2c      	cbnz	r4, 808c1e6 <__d2b+0x6a>
 808c19a:	9301      	str	r3, [sp, #4]
 808c19c:	f1b8 0300 	subs.w	r3, r8, #0
 808c1a0:	d026      	beq.n	808c1f0 <__d2b+0x74>
 808c1a2:	4668      	mov	r0, sp
 808c1a4:	9300      	str	r3, [sp, #0]
 808c1a6:	f7ff fd58 	bl	808bc5a <__lo0bits>
 808c1aa:	9900      	ldr	r1, [sp, #0]
 808c1ac:	b1f0      	cbz	r0, 808c1ec <__d2b+0x70>
 808c1ae:	9a01      	ldr	r2, [sp, #4]
 808c1b0:	f1c0 0320 	rsb	r3, r0, #32
 808c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 808c1b8:	430b      	orrs	r3, r1
 808c1ba:	40c2      	lsrs	r2, r0
 808c1bc:	617b      	str	r3, [r7, #20]
 808c1be:	9201      	str	r2, [sp, #4]
 808c1c0:	9b01      	ldr	r3, [sp, #4]
 808c1c2:	2b00      	cmp	r3, #0
 808c1c4:	bf14      	ite	ne
 808c1c6:	2102      	movne	r1, #2
 808c1c8:	2101      	moveq	r1, #1
 808c1ca:	61bb      	str	r3, [r7, #24]
 808c1cc:	6139      	str	r1, [r7, #16]
 808c1ce:	b1c4      	cbz	r4, 808c202 <__d2b+0x86>
 808c1d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808c1d4:	4404      	add	r4, r0
 808c1d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808c1da:	6034      	str	r4, [r6, #0]
 808c1dc:	6028      	str	r0, [r5, #0]
 808c1de:	4638      	mov	r0, r7
 808c1e0:	b002      	add	sp, #8
 808c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c1e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808c1ea:	e7d6      	b.n	808c19a <__d2b+0x1e>
 808c1ec:	6179      	str	r1, [r7, #20]
 808c1ee:	e7e7      	b.n	808c1c0 <__d2b+0x44>
 808c1f0:	a801      	add	r0, sp, #4
 808c1f2:	f7ff fd32 	bl	808bc5a <__lo0bits>
 808c1f6:	2101      	movs	r1, #1
 808c1f8:	9b01      	ldr	r3, [sp, #4]
 808c1fa:	6139      	str	r1, [r7, #16]
 808c1fc:	617b      	str	r3, [r7, #20]
 808c1fe:	3020      	adds	r0, #32
 808c200:	e7e5      	b.n	808c1ce <__d2b+0x52>
 808c202:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808c206:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808c20a:	6030      	str	r0, [r6, #0]
 808c20c:	6918      	ldr	r0, [r3, #16]
 808c20e:	f7ff fd04 	bl	808bc1a <__hi0bits>
 808c212:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 808c216:	6029      	str	r1, [r5, #0]
 808c218:	e7e1      	b.n	808c1de <__d2b+0x62>

0808c21a <__ratio>:
 808c21a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c21e:	4688      	mov	r8, r1
 808c220:	4669      	mov	r1, sp
 808c222:	4681      	mov	r9, r0
 808c224:	f7ff ff56 	bl	808c0d4 <__b2d>
 808c228:	460f      	mov	r7, r1
 808c22a:	4604      	mov	r4, r0
 808c22c:	460d      	mov	r5, r1
 808c22e:	4640      	mov	r0, r8
 808c230:	a901      	add	r1, sp, #4
 808c232:	f7ff ff4f 	bl	808c0d4 <__b2d>
 808c236:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808c23a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808c23e:	468b      	mov	fp, r1
 808c240:	eba3 0c02 	sub.w	ip, r3, r2
 808c244:	e9dd 3200 	ldrd	r3, r2, [sp]
 808c248:	1a9b      	subs	r3, r3, r2
 808c24a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 808c24e:	2b00      	cmp	r3, #0
 808c250:	bfd5      	itete	le
 808c252:	460a      	movle	r2, r1
 808c254:	462a      	movgt	r2, r5
 808c256:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 808c25a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 808c25e:	bfd8      	it	le
 808c260:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 808c264:	465b      	mov	r3, fp
 808c266:	4602      	mov	r2, r0
 808c268:	4639      	mov	r1, r7
 808c26a:	4620      	mov	r0, r4
 808c26c:	f7fd fc1a 	bl	8089aa4 <__aeabi_ddiv>
 808c270:	b003      	add	sp, #12
 808c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c276 <__copybits>:
 808c276:	3901      	subs	r1, #1
 808c278:	b570      	push	{r4, r5, r6, lr}
 808c27a:	1149      	asrs	r1, r1, #5
 808c27c:	6914      	ldr	r4, [r2, #16]
 808c27e:	3101      	adds	r1, #1
 808c280:	f102 0314 	add.w	r3, r2, #20
 808c284:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808c288:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808c28c:	1f05      	subs	r5, r0, #4
 808c28e:	42a3      	cmp	r3, r4
 808c290:	d30c      	bcc.n	808c2ac <__copybits+0x36>
 808c292:	1aa3      	subs	r3, r4, r2
 808c294:	3b11      	subs	r3, #17
 808c296:	f023 0303 	bic.w	r3, r3, #3
 808c29a:	3211      	adds	r2, #17
 808c29c:	42a2      	cmp	r2, r4
 808c29e:	bf88      	it	hi
 808c2a0:	2300      	movhi	r3, #0
 808c2a2:	4418      	add	r0, r3
 808c2a4:	2300      	movs	r3, #0
 808c2a6:	4288      	cmp	r0, r1
 808c2a8:	d305      	bcc.n	808c2b6 <__copybits+0x40>
 808c2aa:	bd70      	pop	{r4, r5, r6, pc}
 808c2ac:	f853 6b04 	ldr.w	r6, [r3], #4
 808c2b0:	f845 6f04 	str.w	r6, [r5, #4]!
 808c2b4:	e7eb      	b.n	808c28e <__copybits+0x18>
 808c2b6:	f840 3b04 	str.w	r3, [r0], #4
 808c2ba:	e7f4      	b.n	808c2a6 <__copybits+0x30>

0808c2bc <__any_on>:
 808c2bc:	f100 0214 	add.w	r2, r0, #20
 808c2c0:	6900      	ldr	r0, [r0, #16]
 808c2c2:	114b      	asrs	r3, r1, #5
 808c2c4:	4298      	cmp	r0, r3
 808c2c6:	b510      	push	{r4, lr}
 808c2c8:	db11      	blt.n	808c2ee <__any_on+0x32>
 808c2ca:	dd0a      	ble.n	808c2e2 <__any_on+0x26>
 808c2cc:	f011 011f 	ands.w	r1, r1, #31
 808c2d0:	d007      	beq.n	808c2e2 <__any_on+0x26>
 808c2d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808c2d6:	fa24 f001 	lsr.w	r0, r4, r1
 808c2da:	fa00 f101 	lsl.w	r1, r0, r1
 808c2de:	428c      	cmp	r4, r1
 808c2e0:	d10b      	bne.n	808c2fa <__any_on+0x3e>
 808c2e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808c2e6:	4293      	cmp	r3, r2
 808c2e8:	d803      	bhi.n	808c2f2 <__any_on+0x36>
 808c2ea:	2000      	movs	r0, #0
 808c2ec:	bd10      	pop	{r4, pc}
 808c2ee:	4603      	mov	r3, r0
 808c2f0:	e7f7      	b.n	808c2e2 <__any_on+0x26>
 808c2f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808c2f6:	2900      	cmp	r1, #0
 808c2f8:	d0f5      	beq.n	808c2e6 <__any_on+0x2a>
 808c2fa:	2001      	movs	r0, #1
 808c2fc:	e7f6      	b.n	808c2ec <__any_on+0x30>

0808c2fe <_calloc_r>:
 808c2fe:	b538      	push	{r3, r4, r5, lr}
 808c300:	fb02 f501 	mul.w	r5, r2, r1
 808c304:	4629      	mov	r1, r5
 808c306:	f7fa f87d 	bl	8086404 <_malloc_r>
 808c30a:	4604      	mov	r4, r0
 808c30c:	b118      	cbz	r0, 808c316 <_calloc_r+0x18>
 808c30e:	462a      	mov	r2, r5
 808c310:	2100      	movs	r1, #0
 808c312:	f7fe f989 	bl	808a628 <memset>
 808c316:	4620      	mov	r0, r4
 808c318:	bd38      	pop	{r3, r4, r5, pc}

0808c31a <__ascii_wctomb>:
 808c31a:	4603      	mov	r3, r0
 808c31c:	4608      	mov	r0, r1
 808c31e:	b141      	cbz	r1, 808c332 <__ascii_wctomb+0x18>
 808c320:	2aff      	cmp	r2, #255	; 0xff
 808c322:	d904      	bls.n	808c32e <__ascii_wctomb+0x14>
 808c324:	228a      	movs	r2, #138	; 0x8a
 808c326:	f04f 30ff 	mov.w	r0, #4294967295
 808c32a:	601a      	str	r2, [r3, #0]
 808c32c:	4770      	bx	lr
 808c32e:	2001      	movs	r0, #1
 808c330:	700a      	strb	r2, [r1, #0]
 808c332:	4770      	bx	lr

0808c334 <__aeabi_d2lz>:
 808c334:	b538      	push	{r3, r4, r5, lr}
 808c336:	460c      	mov	r4, r1
 808c338:	4605      	mov	r5, r0
 808c33a:	4621      	mov	r1, r4
 808c33c:	4628      	mov	r0, r5
 808c33e:	2200      	movs	r2, #0
 808c340:	2300      	movs	r3, #0
 808c342:	f7fd fcf7 	bl	8089d34 <__aeabi_dcmplt>
 808c346:	b928      	cbnz	r0, 808c354 <__aeabi_d2lz+0x20>
 808c348:	4628      	mov	r0, r5
 808c34a:	4621      	mov	r1, r4
 808c34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c350:	f7fe b8f6 	b.w	808a540 <__aeabi_d2ulz>
 808c354:	4628      	mov	r0, r5
 808c356:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808c35a:	f7fe f8f1 	bl	808a540 <__aeabi_d2ulz>
 808c35e:	4240      	negs	r0, r0
 808c360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808c364:	bd38      	pop	{r3, r4, r5, pc}
 808c366:	bf00      	nop

0808c368 <dynalib_user>:
 808c368:	0051 0808 0091 0808 00b9 0808 00bd 0808     Q...............
 808c378:	0000 0000 6e75 6e6b 776f 006e 6f6e 2074     ....unknown.not 
 808c388:	6863 7261 6967 676e 6300 6168 6772 6465     charging.charged
 808c398:	6400 7369 6863 7261 6967 676e 6600 7561     .discharging.fau
 808c3a8:	746c 6400 7369 6f63 6e6e 6365 6574 0064     lt.disconnected.
 808c3b8:	6976 006e 7375 2062 6f68 7473 7500 6273     vin.usb host.usb
 808c3c8:	6120 6164 7470 7265 7500 6273 6f20 6774      adapter.usb otg
 808c3d8:	6200 7461 6574 7972 6400 6665 7561 746c     .battery.default
 808c3e8:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
 808c3f8:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
 808c408:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
 808c418:	2075 7325 4d20 444f 2545 3e75 6100 7070     u %s MODE%u>.app
 808c428:	6477 0074 6164 6574 6974 656d 202c 7441     wdt.datetime, At
 808c438:	6d65 2c70 4820 4f32 6574 706d 202c 7053     emp, H2Otemp, Sp
 808c448:	435f 2c20 4120 6f76 746c 2c73 7220 6961     _C , Avolts, rai
 808c458:	2c6e 6420 7065 6874 695f 2c6e 6820 6d75     n, depth_in, hum
 808c468:	6469 202c 7041 6572 7373 7275 2c65 4820     id, Apressure, H
 808c478:	4f32 7270 7365 7573 6572 202c 6f53 2c43     2Opressure, SoC,
 808c488:	7620 6c6f 7374 4e00 206f 5900 7365 0020      volts.No .Yes .
 808c498:	6f6c 7473 742d 6d69 3065 3030 632e 7673     lost-time000.csv
 808c4a8:	5300 7570 6e64 6b69 302d 6238 5f00 2500     .Spudnik-08b._.%
 808c4b8:	2d59 6d25 252d 0064 6163 6472 6620 6c69     Y-%m-%d.card fil
 808c4c8:	6e65 6d61 2065 6300 7261 2064 6f77 6b72     ename .card work
 808c4d8:	2073 4300 6d61 7265 2061 6f46 6e75 3a64     s .Camera Found:
 808c4e8:	4e00 206f 6163 656d 6172 6620 756f 646e     .No camera found
 808c4f8:	003f 6e53 7061 6920 206e 2f31 2032 6573     ?.Snap in 1/2 se
 808c508:	7363 2e2e 002e 6146 6c69 6465 7420 206f     cs....Failed to 
 808c518:	6e73 7061 0021 6f6c 7473 742d 6d69 3065     snap!.lost-time0
 808c528:	3030 6a2e 6770 2500 2d59 6d25 252d 2d64     00.jpg.%Y-%m-%d-
 808c538:	4825 252d 004d 6220 7479 2065 6d69 6761     %H-%M. byte imag
 808c548:	2e65 0020 6870 746f 206f 6966 656c 616e     e. .photo filena
 808c558:	656d 0020 6850 746f 2d6f 6173 6576 7720     me .Photo-save w
 808c568:	726f 656b 2064 7461 2520 0073 6850 746f     orked at %s.Phot
 808c578:	2d6f 6173 6576 4620 4941 454c 2044 7461     o-save FAILED at
 808c588:	2520 0073 6d20 2073 6c65 7061 6573 0064      %s. ms elapsed.
 808c598:	6543 6c6c 7551 6c61 4300 6c65 536c 7274     CellQual.CellStr
 808c5a8:	6e65 4300 7275 6572 746e 5020 494d 2043     en.Current PMIC 
 808c5b8:	6573 7474 6e69 7367 003a 4956 204e 6d56     settings:.VIN Vm
 808c5c8:	6e69 565f 695f 706e 7475 6c5f 776f 7365     in_V_input_lowes
 808c5d8:	3a74 2520 0075 4956 204e 6d49 7861 635f     t: %u.VIN Imax_c
 808c5e8:	7275 6572 746e 6d5f 5f41 616d 5f78 696c     urrent_mA_max_li
 808c5f8:	696d 3a74 2520 0075 6349 6768 635f 7275     mit: %u.Ichg_cur
 808c608:	6572 746e 6d5f 5f41 6176 756c 3a65 2520     rent_mA_value: %
 808c618:	0075 7449 7265 5f6d 6863 7261 6567 745f     u.Iterm_charge_t
 808c628:	7265 696d 616e 6974 6e6f 565f 203a 7525     ermination_V: %u
 808c638:	5000 776f 7265 7320 756f 6372 3a65 2520     .Power source: %
 808c648:	0073 6142 7474 7265 2079 7473 7461 3a65     s.Battery state:
 808c658:	2520 0073 6142 7474 7265 2079 6863 7261      %s.Battery char
 808c668:	6567 203a 6625 7700 6972 6574 6520 7272     ge: %f.write err
 808c678:	726f 4c00 676f 5300 2d44 7277 7469 2065     or.Log.SD-write 
 808c688:	6f77 6b72 6465 6120 2074 7325 5300 2d44     worked at %s.SD-
 808c698:	7277 7469 2065 4146 4c49 4445 6120 2074     write FAILED at 
 808c6a8:	7325 6c00 6e6f 0067 6e69 6420 6c65 7961     %s.long.in delay
 808c6b8:	6954 656d 5000 7261 6974 6c63 0065 6944     Time.Particle.Di
 808c6c8:	6666 6369 6c75 7974 6320 6e6f 656e 7463     fficulty connect
 808c6d8:	6e69 2e67 5720 6c69 206c 7274 2079 6f66     ing. Will try fo
 808c6e8:	2072 2031 6f6d 6572 6d20 6e69 2000 6c73     r 1 more min. sl
 808c6f8:	6565 6970 676e 6620 726f 2520 6932 6d20     eeping for %2i m
 808c708:	6e69 7475 7365 7420 206f 6177 7469 6620     inutes to wait f
 808c718:	726f 6220 7465 6574 2072 6974 656d 0020     or better time .
 808c728:	6944 6666 6369 6c75 7974 6320 6e6f 656e     Difficulty conne
 808c738:	7463 6e69 2c67 7320 656c 7065 6e69 0067     cting, sleeping.
 808c748:	6170 7472 6369 656c 7700 726f 736b 252c     particle.works,%
 808c758:	2c73 7420 5f31 666f 7366 7465 252c 3530     s, t1_offset,%05
 808c768:	322e 2c66 7420 5f32 666f 7366 7465 252c     .2f, t2_offset,%
 808c778:	3530 322e 2c66 6b20 635f 726f 6572 7463     05.2f, k_correct
 808c788:	6f69 2c6e 3025 2e35 6632 202c 7441 6d65     ion,%05.2f, Atem
 808c798:	4370 252c 3530 322e 2c66 4820 4f32 6574     pC,%05.2f, H2Ote
 808c7a8:	706d 252c 3530 322e 2c66 5320 4370 252c     mp,%05.2f, SpC,%
 808c7b8:	3630 312e 2c66 7220 6961 2c6e 3025 2e36     06.1f, rain,%06.
 808c7c8:	6630 202c 6544 7470 5f68 6e69 252c 3630     0f, Depth_in,%06
 808c7d8:	332e 0066 227b 7441 6d65 4370 3a22 2522     .3f.{"AtempC":"%
 808c7e8:	3530 322e 2266 222c 3248 744f 6d65 2270     05.2f","H2Otemp"
 808c7f8:	223a 3025 2e35 6632 2c22 5322 4370 3a22     :"%05.2f","SpC":
 808c808:	2522 3630 312e 2266 202c 4122 6f76 746c     "%06.1f", "Avolt
 808c818:	2273 223a 3025 2e35 6633 2c22 7222 6961     s":"%05.3f","rai
 808c828:	226e 223a 3025 2e34 6630 2c22 6422 7065     n":"%04.0f","dep
 808c838:	6874 3a22 2522 3630 332e 2266 222c 4f53     th":"%06.3f","SO
 808c848:	2243 223a 3025 2e35 6632 2c22 7622 6c6f     C":"%05.2f","vol
 808c858:	7374 3a22 2522 3430 322e 2266 007d 6164     ts":"%04.2f"}.da
 808c868:	6174 6600 6e69 7369 6568 2064 7075 6f6c     ta.finished uplo
 808c878:	6461 6e69 0067 7075 6f6c 6461 6465 202c     ading.uploaded, 
 808c888:	6977 6c6c 7320 656c 7065 6920 206e 3225     will sleep in %2
 808c898:	2069 6573 6f63 646e 0073 6c73 6565 6970     i seconds.sleepi
 808c8a8:	676e 2520 6932 6d20 6e69 7475 7365 7000     ng %2i minutes.p
 808c8b8:	7261 6974 6c63 7365 6c6f 7261 3033 0063     articlesolar30c.
 808c8c8:	2520 5f73 6e6f 255f 0073 6e69 6c20 6f6f      %s_on_%s.in loo
 808c8d8:	0070 6f53 3d43 3625 322e 2c66 2020 6f76     p.SoC=%6.2f,  vo
 808c8e8:	746c 3d73 3625 322e 2c66 2020 6f76 746c     lts=%6.2f,  volt
 808c8f8:	2f73 2e34 3d34 3525 322e 0066 6964 6666     s/4.4=%5.2f.diff
 808c908:	7265 6e65 6563 203d 3525 322e 2566 0025     erence= %5.2f%%.
 808c918:	616d 7070 6465 7620 6c6f 7374 203d 3525     mapped volts= %5
 808c928:	322e 2566 0025 7250 7365 7573 6572 685f     .2f%%.Pressure_h
 808c938:	4150 4800 4f32 542d 6d65 5f70 0043 3248     PA.H2O-Temp_C.H2
 808c948:	5f4f 5068 0041 6544 7470 5f68 6e69 5600     O_hPA.Depth_in.V
 808c958:	6c6f 7374 5300 434f 5300 5f70 6f43 646e     olts.SOC.Sp_Cond
 808c968:	4100 762e 6c6f 7374 2c00 2520 3530 322e     .A.volts., %05.2
 808c978:	2c66 2520 3530 322e 2c66 2520 3630 312e     f, %05.2f, %06.1
 808c988:	2c66 2520 3530 332e 2c66 2520 3430 302e     f, %05.3f, %04.0
 808c998:	2c66 2520 3630 332e 2c66 2520 3530 322e     f, %06.3f, %05.2
 808c9a8:	2c66 2520 3630 312e 2c66 2520 3630 312e     f, %06.1f, %06.1
 808c9b8:	2c66 2520 3530 322e 2c66 2520 3430 322e     f, %05.2f, %04.2
 808c9c8:	0066 6f6c 6767 6465 6620 6c6f 6f6c 6977     f.logged followi
 808c9d8:	676e 6420 7461 2061 6f74 5320 2d44 6163     ng data to SD-ca
 808c9e8:	6472 7300 656c 7065 6e69 2067 5200 6961     rd.sleeping .Rai
 808c9f8:	006e 6941 2d72 6554 706d 435f 4800 6d75     n.Air-Temp_C.Hum
 808ca08:	6469 7469 5f79 0025 6f63 6c75 2064 6f6e     idity_%.could no
 808ca18:	2074 6966 646e 6220 656d 0031 624f 4469     t find bme1.ObiD
 808ca28:	746f 0073 6544 616c 0079 6e65 6964 676e     ots.Delay.ending
 808ca38:	7320 7465 7075 4200 4642 2d46 324d 5958      setup.BBFF-M2XY
 808ca48:	4d7a 4849 786a 4976 4765 306a 5768 3837     zMIHjxvIeGj0hW78
 808ca58:	6850 7732 5145 7950 366c 0000               Ph2wEQPyl6..

0808ca64 <_ZTVN8particle11SPISettingsE>:
	...
 808ca6c:	0271 0808 0101 0808 0183 0808               q...........

0808ca78 <_ZTC16ArduinoOutStream0_7ostream>:
 808ca78:	0008 0000 0000 0000 0000 0000 00dd 0808     ................
 808ca88:	00dd 0808 00dd 0808 00dd 0808 00dd 0808     ................
 808ca98:	00dd 0808                                   ....

0808ca9c <_ZTT16ArduinoOutStream>:
 808ca9c:	cab0 0808 ca84 0808                         ........

0808caa4 <_ZTV16ArduinoOutStream>:
 808caa4:	0008 0000 0000 0000 0000 0000 0103 0808     ................
 808cab4:	01fd 0808 0125 0808 0129 0808 012d 0808     ....%...)...-...
 808cac4:	0131 0808                                   1...

0808cac8 <_ZTV6SdFile>:
	...
 808cad0:	014f 0808 0191 0808 023d 0808 01a3 0808     O.......=.......
 808cae0:	c37c 0808 c384 0808 c388 0808 c391 0808     |...............
 808caf0:	c399 0808 c3a5 0808 c3ab 0808 c37c 0808     ............|...
 808cb00:	c3b8 0808 c3bc 0808 c3c5 0808 c3d1 0808     ................
 808cb10:	c3d9 0808 6c25 2075 6f6e 2074 7661 6961     ....%lu not avai
 808cb20:	616c 6c62 2165 5320 6c65 6365 6574 2064     lable! Selected 
 808cb30:	6172 6574 2520 756c 0000 0000               rate %lu....

0808cb3c <_ZL7btTable>:
 808cb3c:	e100 0000 0009 0000 0010 0000 9600 0000     ................
 808cb4c:	0018 0000 0018 0000 7a12 0000 001f 0000     .........z......
 808cb5c:	001f 0000 7080 0000 0025 0000 0021 0000     .....p..%...!...
 808cb6c:	4b00 0000 003d 0000 0033 0000 3840 0000     .K..=...3...@8..
 808cb7c:	005a 0000 0044 0000 2580 0000 008c 0000     Z...D....%......
 808cb8c:	0068 0000 12c0 0000 0127 0000 00d0 0000     h.......'.......
 808cb9c:	0960 0000 0262 0000 01a1 0000 04b0 0000     `...b...........
 808cbac:	04ce 0000 0341 0000 0258 0000 09c4 0000     ....A...X.......
 808cbbc:	0683 0000 012c 0000 1388 0000 0d05 0000     ....,...........
	...
 808cbd8:	7441 6574 706d 6974 676e 7420 206f 6572     Attempting to re
 808cbe8:	6f63 6e6e 6365 0074 7254 6979 676e 7420     connect.Trying t
 808cbf8:	206f 6f63 6e6e 6365 2074 6f74 0020 2c20     o connect to . ,
 808cc08:	6120 7474 6d65 7470 6e20 6d75 6562 3a72      attempt number:
 808cc18:	0020 6974 656d 756f 2c74 6320 756f 646c      .timeout, could
 808cc28:	6e20 746f 7220 6165 2064 6e61 2079 6572      not read any re
 808cc38:	7073 6e6f 6573 6620 6f72 206d 6874 2065     sponse from the 
 808cc48:	6f68 7473 5300 7265 6576 2772 2073 6572     host.Server's re
 808cc58:	7073 6e6f 6573 003a 2d0a 2d2d 2d2d 2d2d     sponse:..-------
 808cc68:	2d2d 002d 4f50 5453 4f00 004b 6f43 6c75     ---.POST.OK.Coul
 808cc78:	2064 6f6e 2074 6f63 6e6e 6365 2074 6f74     d not connect to
 808cc88:	7420 6568 6820 736f 0074 4c7c 7c56 5000      the host.|LV|.P
 808cc98:	7961 6f6c 6461 6620 726f 7220 7165 6575     ayload for reque
 808cca8:	7473 003a 2d0a 2d2d 002d 564c 4500 5252     st:..----.LV.ERR
 808ccb8:	524f 6320 756f 646c 6e20 746f 6320 6e6f     OR could not con
 808ccc8:	656e 7463 7420 206f 6874 2065 6573 7672     nect to the serv
 808ccd8:	7265 0000                                   er..

0808ccdc <_ZTV6UbiTCP>:
	...
 808cce4:	40ed 0808 4185 0808 3ef1 0808 6f59 2075     .@...A...>..You 
 808ccf4:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
 808cd04:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
 808cd14:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
 808cd24:	7620 7261 6169 6c62 7365 2500 3731 0067      variables.%17g.
 808cd34:	007b 7325 2522 2273 7b3a 7622 6c61 6575     {.%s"%s":{"value
 808cd44:	3a22 7325 2500 2c73 7422 6d69 7365 6174     ":%s.%s,"timesta
 808cd54:	706d 3a22 6c25 0075 6425 6425 6425 2500     mp":%lu.%d%d%d.%
 808cd64:	2573 0073 7325 3030 0030 7325 222c 6f63     s%s.%s000.%s,"co
 808cd74:	746e 7865 2274 203a 257b 7d73 2500 2c73     ntext": {%s}.%s,
 808cd84:	7000 7961 6f6c 6461 003a 6255 6469 746f     .payload:.Ubidot
 808cd94:	5073 7261 6974 6c63 2f65 2e33 0031 7325     sParticle/3.1.%s
 808cda4:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
 808cdb4:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
 808cdc4:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
 808cdd4:	676e 6420 7461 2e61 2e2e 6900 646e 7375     ng data....indus
 808cde4:	7274 6169 2e6c 7061 2e69 6275 6469 746f     trial.api.ubidot
 808cdf4:	2e73 6f63 006d 575b 5241 494e 474e 205d     s.com.[WARNING] 
 808ce04:	6c70 6165 6573 6320 6f68 736f 2065 2061     please choose a 
 808ce14:	6964 6666 7265 6e65 2074 6c63 756f 2064     different cloud 
 808ce24:	7270 746f 636f 6c6f 6f20 2066 654d 6873     protocol of Mesh
 808ce34:	6920 206e 6874 2065 6255 6469 746f 2073      in the Ubidots 
 808ce44:	6f63 736e 7274 6375 6f74 0072 7441 6574     constructor.Atte
 808ce54:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
 808ce64:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
 808ce74:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
 808ce84:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
 808ce94:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
 808cea4:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
 808ceb4:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
 808cec4:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
 808ced4:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
 808cee4:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
 808cef4:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
 808cf04:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
 808cf14:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
 808cf24:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
 808cf34:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
 808cf44:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
 808cf54:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
 808cf64:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
 808cf74:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
 808cf84:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
 808cf94:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
 808cfa4:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
 808cfb4:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
 808cfc4:	2073 202d 7254 2079 6741 6961 006e 0000     s - Try Again...

0808cfd4 <_ZTV7UbiHTTP>:
	...
 808cfdc:	4afd 0808 4d2d 0808 48c9 0808 575b 7261     .J..-M...H..[War
 808cfec:	696e 676e 205d 6f43 6c75 2064 6f6e 2074     ning] Could not 
 808cffc:	6f73 766c 2065 5049 4120 6464 6572 7373     solve IP Address
 808d00c:	6f20 2066 6874 2065 6572 6f6d 6574 6820      of the remote h
 808d01c:	736f 2c74 7720 7469 2068 6f79 7275 4420     ost, with your D
 808d02c:	534e 7320 7465 7075 202e 2020 2020 2020     NS setup.       
 808d03c:	2020 2020 550a 6973 676e 6420 6665 7561         .Using defau
 808d04c:	746c 4920 646e 7375 7274 6169 206c 6255     lt Industrial Ub
 808d05c:	6469 746f 2073 5049 203a 3631 2e39 3535     idots IP: 169.55
 808d06c:	362e 2e31 3432 0033 5245 4f52 2052 6573     .61.243.ERROR se
 808d07c:	646e 6e69 2067 6176 756c 7365 7720 7469     nding values wit
 808d08c:	2068 4455 0050 0000                         h UDP...

0808d094 <_ZTV6UbiUDP>:
	...
 808d09c:	5399 0808 532d 0808 5335 0808               .S..-S..5S..

0808d0a8 <_ZTV11UbiParticle>:
	...
 808d0b0:	5489 0808 547d 0808 5485 0808               .T..}T...T..

0808d0bc <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 808d0bc:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

0808d0cc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808d0cc:	0800 1810 2820 3830 6977 6972 676e 5400     .... (08wiring.T
 808d0dc:	5043 6c43 6569 746e 7320 636f 656b 3d74     CPClient socket=
 808d0ec:	7825 0000                                   %x..

0808d0f0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808d0f8:	69b5 0808 69dd 0808 6d83 0808 69eb 0808     .i...i...m...i..
 808d108:	69b9 0808                                   .i..

0808d10c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

0808d114 <_ZTV9TCPClient>:
	...
 808d11c:	3ef5 0808 3f29 0808 695d 0808 6977 0808     .>..)?..]i..wi..
 808d12c:	6b89 0808 6a1d 0808 69ef 0808 699f 0808     .k...j...i...i..
 808d13c:	6ab5 0808 6d89 0808 6a51 0808 6bfd 0808     .j...m..Qj...k..
 808d14c:	6ca7 0808 6c5f 0808 6987 0808 6c6d 0808     .l.._l...i..ml..
 808d15c:	69a1 0808 7061 0070 005a 2b25 3330 3a64     .i..app.Z.%+03d:
 808d16c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 808d17c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 808d18c:	0000 0000                                   ....

0808d190 <_ZTV3UDP>:
	...
 808d198:	5005 0808 506d 0808 75e5 0808 7711 0808     .P..mP...u...w..
 808d1a8:	75a9 0808 75fd 0808 761b 0808 7635 0808     .u...u...v..5v..
 808d1b8:	7657 0808 76af 0808 76d1 0808 755d 0808     Wv...v...v..]u..
 808d1c8:	7777 0808 7581 0808 78e1 0808 77e9 0808     ww...u...x...w..
 808d1d8:	75b1 0808 7905 0808 773b 0808 758d 0808     .u...y..;w...u..
 808d1e8:	7595 0808 75a5 0808 7637 0808 fff0 ffff     .u...u..7v......
 808d1f8:	0000 0000 764f 0808                         ....Ov..

0808d200 <_ZTV14CellularSignal>:
	...
 808d208:	798d 0808 7993 0808 798f 0808 79a1 0808     .y...y...y...y..
 808d218:	79d1 0808 79f5 0808 7a25 0808 7a6d 0808     .y...y..%z..mz..
 808d228:	fffc ffff 0000 0000 7a93 0808               .........z..

0808d234 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808d23c:	7e05 0808 7e0b 0808 7e49 0808 7e19 0808     .~...~..I~...~..
 808d24c:	7e07 0808                                   .~..

0808d250 <_ZTV9IPAddress>:
	...
 808d258:	839d 0808 838d 0808 838f 0808               ............

0808d264 <_ZTV9USBSerial>:
	...
 808d26c:	844d 0808 84b3 0808 848b 0808 701d 0808     M............p..
 808d27c:	847d 0808 844f 0808 845f 0808 84ad 0808     }...O..._.......
 808d28c:	846f 0808 8449 0808                         o...I...

0808d294 <_ZTVN5spark13CellularClassE>:
	...
 808d29c:	878d 0808 8783 0808 8779 0808 02e1 0808     ........y.......
 808d2ac:	876d 0808 8761 0808 8755 0808 874d 0808     m...a...U...M...
 808d2bc:	8743 0808 8739 0808 86fd 0808               C...9.......

0808d2c8 <_ZTV11USARTSerial>:
	...
 808d2d0:	883d 0808 88a5 0808 8881 0808 701d 0808     =............p..
 808d2e0:	8851 0808 886d 0808 885f 0808 887b 0808     Q...m..._...{...
 808d2f0:	883f 0808 8843 0808                         ?...C...

0808d2f8 <_ZTV7TwoWire>:
	...
 808d300:	8969 0808 89b3 0808 898b 0808 896b 0808     i...........k...
 808d310:	8993 0808 899b 0808 89a3 0808 89ab 0808     ................

0808d320 <_ZTVN5spark12NetworkClassE>:
	...
 808d328:	8ab3 0808 8abd 0808 8ac7 0808 8ad1 0808     ................
 808d338:	8adb 0808 8ae7 0808 8af3 0808 8aff 0808     ................
 808d348:	8b07 0808 8b11 0808 8b1d 0808               ............

0808d354 <_ZSt7nothrow>:
	...

0808d355 <_ZTSSt19_Sp_make_shared_tag>:
 808d355:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 808d365:	6572 5f64 6174 0067 0000                     red_tag....

0808d370 <_ZTISt19_Sp_make_shared_tag>:
 808d370:	d3b0 0808 d355 0808                         ....U...

0808d378 <_ZTIN10__cxxabiv117__class_type_infoE>:
 808d378:	d410 0808 d384 0808 d434 0808               ........4...

0808d384 <_ZTSN10__cxxabiv117__class_type_infoE>:
 808d384:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 808d394:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 808d3a4:	0045 0000                                   E...

0808d3a8 <_ZTVN10__cxxabiv117__class_type_infoE>:
 808d3a8:	0000 0000 d378 0808 92f1 0808 9305 0808     ....x...........
 808d3b8:	949d 0808 949d 0808 936f 0808 92b1 0808     ........o.......
 808d3c8:	9357 0808 9319 0808 92e5 0808               W...........

0808d3d4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 808d3d4:	d410 0808 d3e0 0808 d378 0808               ........x...

0808d3e0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 808d3e0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 808d3f0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 808d400:	666e 456f 0000 0000                         nfoE....

0808d408 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 808d408:	0000 0000 d3d4 0808 9399 0808 93ad 0808     ................
 808d418:	949d 0808 949d 0808 936f 0808 92b1 0808     ........o.......
 808d428:	9471 0808 93fd 0808 93c1 0808               q...........

0808d434 <_ZTISt9type_info>:
 808d434:	d3b0 0808 d43c 0808                         ....<...

0808d43c <_ZTSSt9type_info>:
 808d43c:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
 808d44c:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
 808d45c:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

0808d469 <day_name.4782>:
 808d469:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808d479:	6972 6153                                    riSat

0808d47e <mon_name.4783>:
 808d47e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808d48e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808d49e:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

0808d4b0 <fpi.6203>:
 808d4b0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808d4c0:	0000 0000                                   ....

0808d4c4 <fpinan.6239>:
 808d4c4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808d4d4:	0000 0000                                   ....

0808d4d8 <tinytens>:
 808d4d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808d4e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808d4f8:	6f43 64ac 0628 1168                         Co.d(.h.

0808d500 <_ctype_>:
 808d500:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808d510:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808d520:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808d530:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808d540:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808d550:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808d560:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808d570:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808d580:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808d604 <_C_numeric_locale>:
 808d604:	cf26 0808 cfab 0808 00bc 2000 4f50 4953     &.......... POSI
 808d614:	0058 0000                                   X...

0808d618 <__mprec_bigtens>:
 808d618:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808d628:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808d638:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808d640 <__mprec_tens>:
 808d640:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808d650:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808d660:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808d670:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808d680:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808d690:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808d6a0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808d6b0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808d6c0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808d6d0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808d6e0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808d6f0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808d700:	9db4 79d9 7843 44ea                         ...yCx.D

0808d708 <p05.6127>:
 808d708:	0005 0000 0019 0000 007d 0000               ........}...

0808d714 <link_const_variable_data_end>:
 808d714:	08081df5 	.word	0x08081df5
 808d718:	08083eb1 	.word	0x08083eb1
 808d71c:	080842d9 	.word	0x080842d9
 808d720:	080847fd 	.word	0x080847fd
 808d724:	08084f01 	.word	0x08084f01
 808d728:	080852d1 	.word	0x080852d1
 808d72c:	08085329 	.word	0x08085329
 808d730:	08085459 	.word	0x08085459
 808d734:	08086881 	.word	0x08086881
 808d738:	08087135 	.word	0x08087135
 808d73c:	080874cd 	.word	0x080874cd
 808d740:	08087971 	.word	0x08087971
 808d744:	0808880d 	.word	0x0808880d
 808d748:	08088b7d 	.word	0x08088b7d
 808d74c:	08089009 	.word	0x08089009
